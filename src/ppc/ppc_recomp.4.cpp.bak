#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_820DF8F0"))) PPC_WEAK_FUNC(sub_820DF8F0);
PPC_FUNC_IMPL(__imp__sub_820DF8F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32013
	r11.s64 = -2098003968;
	// stfs f1,17280(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r11.u32 + 17280, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820DF900"))) PPC_WEAK_FUNC(sub_820DF900);
PPC_FUNC_IMPL(__imp__sub_820DF900) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lfs f1,17280(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17280);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820DF910"))) PPC_WEAK_FUNC(sub_820DF910);
PPC_FUNC_IMPL(__imp__sub_820DF910) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32013
	r11.s64 = -2098003968;
	// stw r3,17276(r11)
	PPC_STORE_U32(r11.u32 + 17276, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820DF920"))) PPC_WEAK_FUNC(sub_820DF920);
PPC_FUNC_IMPL(__imp__sub_820DF920) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r3,17276(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 17276);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820DF930"))) PPC_WEAK_FUNC(sub_820DF930);
PPC_FUNC_IMPL(__imp__sub_820DF930) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lwz r11,19400(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 19400);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820dfc58
	if (!cr6.getEQ()) goto loc_820DFC58;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lfs f31,17280(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17280);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// bge cr6,0x820df96c
	if (!cr6.getLT()) goto loc_820DF96C;
	// fneg f31,f31
	f31.u64 = f31.u64 ^ 0x8000000000000000;
loc_820DF96C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14212(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14212);
	f0.f64 = double(temp.f32);
	// fmuls f1,f31,f0
	ctx.f1.f64 = double(float(f31.f64 * f0.f64));
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// fmr f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f0,6576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6576);
	f0.f64 = double(temp.f32);
	// fmuls f1,f31,f0
	ctx.f1.f64 = double(float(f31.f64 * f0.f64));
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r29,80(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mulli r31,r29,60
	r31.s64 = r29.s64 * 60;
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// fmr f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14160(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14160);
	f0.f64 = double(temp.f32);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fmuls f1,f31,f0
	ctx.f1.f64 = double(float(f31.f64 * f0.f64));
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// subf r30,r31,r11
	r30.s64 = r11.s64 - r31.s64;
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// add r10,r31,r30
	ctx.r10.u64 = r31.u64 + r30.u64;
	// mulli r10,r10,100
	ctx.r10.s64 = ctx.r10.s64 * 100;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// subf r28,r10,r11
	r28.s64 = r11.s64 - ctx.r10.s64;
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// lis r11,20971
	r11.s64 = 1374355456;
	// li r5,2
	ctx.r5.s64 = 2;
	// ori r27,r11,34079
	r27.u64 = r11.u64 | 34079;
	// lis r11,26214
	r11.s64 = 1717960704;
	// li r4,130
	ctx.r4.s64 = 130;
	// ori r31,r11,26215
	r31.u64 = r11.u64 | 26215;
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// li r7,2
	ctx.r7.s64 = 2;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// li r8,1
	ctx.r8.s64 = 1;
	// addi r6,r11,-23
	ctx.r6.s64 = r11.s64 + -23;
	// mulhw r11,r29,r27
	r11.s64 = (int64_t(r29.s32) * int64_t(r27.s32)) >> 32;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mulli r11,r11,100
	r11.s64 = r11.s64 * 100;
	// subf r11,r11,r29
	r11.s64 = r29.s64 - r11.s64;
	// mulhw r11,r11,r31
	r11.s64 = (int64_t(r11.s32) * int64_t(r31.s32)) >> 32;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r3,r11,r10
	ctx.r3.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x820a59b8
	sub_820A59B8(ctx, base);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// li r5,2
	ctx.r5.s64 = 2;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// li r4,138
	ctx.r4.s64 = 138;
	// addi r6,r11,-23
	ctx.r6.s64 = r11.s64 + -23;
	// mulhw r11,r29,r31
	r11.s64 = (int64_t(r29.s32) * int64_t(r31.s32)) >> 32;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// li r7,2
	ctx.r7.s64 = 2;
	// li r8,1
	ctx.r8.s64 = 1;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r3,r11,r29
	ctx.r3.s64 = r29.s64 - r11.s64;
	// bl 0x820a59b8
	sub_820A59B8(ctx, base);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r5,2
	ctx.r5.s64 = 2;
	// addi r29,r11,17880
	r29.s64 = r11.s64 + 17880;
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// li r4,147
	ctx.r4.s64 = 147;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r6,r11,-23
	ctx.r6.s64 = r11.s64 + -23;
	// li r7,2
	ctx.r7.s64 = 2;
	// li r8,1
	ctx.r8.s64 = 1;
	// bl 0x820a5828
	sub_820A5828(ctx, base);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// lis r11,-30584
	r11.s64 = -2004353024;
	// li r5,2
	ctx.r5.s64 = 2;
	// ori r10,r11,34953
	ctx.r10.u64 = r11.u64 | 34953;
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// li r4,156
	ctx.r4.s64 = 156;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// li r7,2
	ctx.r7.s64 = 2;
	// addi r6,r11,-23
	ctx.r6.s64 = r11.s64 + -23;
	// mulhw r11,r30,r10
	r11.s64 = (int64_t(r30.s32) * int64_t(ctx.r10.s32)) >> 32;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// li r8,1
	ctx.r8.s64 = 1;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mulli r11,r11,60
	r11.s64 = r11.s64 * 60;
	// subf r11,r11,r30
	r11.s64 = r30.s64 - r11.s64;
	// mulhw r11,r11,r31
	r11.s64 = (int64_t(r11.s32) * int64_t(r31.s32)) >> 32;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r3,r11,r10
	ctx.r3.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x820a59b8
	sub_820A59B8(ctx, base);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// li r5,2
	ctx.r5.s64 = 2;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// li r4,164
	ctx.r4.s64 = 164;
	// addi r6,r11,-23
	ctx.r6.s64 = r11.s64 + -23;
	// mulhw r11,r30,r31
	r11.s64 = (int64_t(r30.s32) * int64_t(r31.s32)) >> 32;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// li r7,2
	ctx.r7.s64 = 2;
	// li r8,1
	ctx.r8.s64 = 1;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r3,r11,r30
	ctx.r3.s64 = r30.s64 - r11.s64;
	// bl 0x820a59b8
	sub_820A59B8(ctx, base);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r30,r3
	r30.s64 = ctx.r3.s16;
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// li r5,2
	ctx.r5.s64 = 2;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// li r4,173
	ctx.r4.s64 = 173;
	// addi r6,r11,-23
	ctx.r6.s64 = r11.s64 + -23;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// li r7,2
	ctx.r7.s64 = 2;
	// li r8,1
	ctx.r8.s64 = 1;
	// bl 0x820a5828
	sub_820A5828(ctx, base);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r30,r3
	r30.s64 = ctx.r3.s16;
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// li r5,2
	ctx.r5.s64 = 2;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// li r4,182
	ctx.r4.s64 = 182;
	// addi r6,r11,-23
	ctx.r6.s64 = r11.s64 + -23;
	// mulhw r11,r28,r27
	r11.s64 = (int64_t(r28.s32) * int64_t(r27.s32)) >> 32;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// li r7,2
	ctx.r7.s64 = 2;
	// li r8,1
	ctx.r8.s64 = 1;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mulli r11,r11,100
	r11.s64 = r11.s64 * 100;
	// subf r11,r11,r28
	r11.s64 = r28.s64 - r11.s64;
	// mulhw r11,r11,r31
	r11.s64 = (int64_t(r11.s32) * int64_t(r31.s32)) >> 32;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r3,r11,r10
	ctx.r3.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x820a59b8
	sub_820A59B8(ctx, base);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r30,r3
	r30.s64 = ctx.r3.s16;
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// li r5,2
	ctx.r5.s64 = 2;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// li r4,190
	ctx.r4.s64 = 190;
	// addi r6,r11,-23
	ctx.r6.s64 = r11.s64 + -23;
	// mulhw r11,r28,r31
	r11.s64 = (int64_t(r28.s32) * int64_t(r31.s32)) >> 32;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// li r7,2
	ctx.r7.s64 = 2;
	// li r8,1
	ctx.r8.s64 = 1;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r3,r11,r28
	ctx.r3.s64 = r28.s64 - r11.s64;
	// bl 0x820a59b8
	sub_820A59B8(ctx, base);
loc_820DFC58:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820DFC68"))) PPC_WEAK_FUNC(sub_820DFC68);
PPC_FUNC_IMPL(__imp__sub_820DFC68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-32013
	r30.s64 = -2098003968;
	// lwz r11,17236(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 17236);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820dfcf4
	if (!cr6.getGT()) goto loc_820DFCF4;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r31,r11,17240
	r31.s64 = r11.s64 + 17240;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820dfcd4
	if (!cr6.getEQ()) goto loc_820DFCD4;
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820dfcd4
	if (!cr6.getEQ()) goto loc_820DFCD4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,13420
	ctx.r8.s64 = 13420;
	// addi r7,r11,17776
	ctx.r7.s64 = r11.s64 + 17776;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,163
	ctx.r4.s64 = 163;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820DFCD4:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,17236(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 17236);
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// cmpwi cr6,r11,1800
	cr6.compare<int32_t>(r11.s32, 1800, xer);
	// stw r11,17236(r30)
	PPC_STORE_U32(r30.u32 + 17236, r11.u32);
	// ble cr6,0x820dfcf4
	if (!cr6.getGT()) goto loc_820DFCF4;
	// bl 0x820df548
	sub_820DF548(ctx, base);
loc_820DFCF4:
	// bl 0x820df6d8
	sub_820DF6D8(ctx, base);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r11,17276(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 17276);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820dfd20
	if (cr6.getEQ()) goto loc_820DFD20;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f0,17280(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17280);
	f0.f64 = double(temp.f32);
	// lfs f13,-6368(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,17280(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 17280, temp.u32);
loc_820DFD20:
	// bl 0x820dcb78
	sub_820DCB78(ctx, base);
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// li r11,0
	r11.s64 = 0;
	// stw r11,17284(r10)
	PPC_STORE_U32(ctx.r10.u32 + 17284, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820DFD48"))) PPC_WEAK_FUNC(sub_820DFD48);
PPC_FUNC_IMPL(__imp__sub_820DFD48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lwz r11,100(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 100);
	// rlwinm r11,r11,0,18,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820dfdcc
	if (cr6.getEQ()) goto loc_820DFDCC;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r10,17300(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 17300);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820dfdcc
	if (cr6.getEQ()) goto loc_820DFDCC;
loc_820DFD68:
	// lwz r11,4(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmplw cr6,r11,r3
	cr6.compare<uint32_t>(r11.u32, ctx.r3.u32, xer);
	// bne cr6,0x820dfdc0
	if (!cr6.getEQ()) goto loc_820DFDC0;
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820dfdc0
	if (cr6.getEQ()) goto loc_820DFDC0;
	// lwz r9,16(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820dfdc0
	if (cr6.getEQ()) goto loc_820DFDC0;
	// lbz r9,2(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// rlwinm r9,r9,0,0,24
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820dfdd4
	if (cr6.getEQ()) goto loc_820DFDD4;
	// addi r9,r1,-16
	ctx.r9.s64 = ctx.r1.s64 + -16;
	// lfs f0,112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r9
	PPC_STORE_U32(ctx.r9.u32, f0.u32);
	// lwz r11,-16(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -16);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820dfdd4
	if (cr6.getEQ()) goto loc_820DFDD4;
loc_820DFDC0:
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820dfd68
	if (!cr6.getEQ()) goto loc_820DFD68;
loc_820DFDCC:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
loc_820DFDD4:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820DFDE0"))) PPC_WEAK_FUNC(sub_820DFDE0);
PPC_FUNC_IMPL(__imp__sub_820DFDE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// li r27,-1
	r27.s64 = -1;
	// addi r30,r11,12512
	r30.s64 = r11.s64 + 12512;
	// li r31,0
	r31.s64 = 0;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// mr r11,r30
	r11.u64 = r30.u64;
loc_820DFE08:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r9,r9,0,0,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820e001c
	if (!cr6.getEQ()) goto loc_820E001C;
	// addi r11,r11,236
	r11.s64 = r11.s64 + 236;
	// addi r9,r30,4720
	ctx.r9.s64 = r30.s64 + 4720;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x820dfe08
	if (cr6.getLT()) goto loc_820DFE08;
	// addi r11,r30,232
	r11.s64 = r30.s64 + 232;
	// addi r10,r30,232
	ctx.r10.s64 = r30.s64 + 232;
	// addi r9,r30,232
	ctx.r9.s64 = r30.s64 + 232;
	// subfic r6,r11,236
	xer.ca = r11.u32 <= 236;
	ctx.r6.s64 = 236 - r11.s64;
	// addi r11,r30,232
	r11.s64 = r30.s64 + 232;
	// subfic r5,r10,472
	xer.ca = ctx.r10.u32 <= 472;
	ctx.r5.s64 = 472 - ctx.r10.s64;
	// subfic r4,r9,708
	xer.ca = ctx.r9.u32 <= 708;
	ctx.r4.s64 = 708 - ctx.r9.s64;
	// li r10,-236
	ctx.r10.s64 = -236;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// li r9,2
	ctx.r9.s64 = 2;
	// subfic r3,r11,944
	xer.ca = r11.u32 <= 944;
	ctx.r3.s64 = 944 - r11.s64;
loc_820DFE58:
	// addi r11,r30,232
	r11.s64 = r30.s64 + 232;
	// add r11,r7,r11
	r11.u64 = ctx.r7.u64 + r11.u64;
	// lwz r29,-4(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x820dfe90
	if (cr6.getEQ()) goto loc_820DFE90;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820dfe88
	if (cr6.getLT()) goto loc_820DFE88;
	// addi r28,r30,232
	r28.s64 = r30.s64 + 232;
	// lwz r29,0(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwzx r28,r10,r28
	r28.u64 = PPC_LOAD_U32(ctx.r10.u32 + r28.u32);
	// cmpw cr6,r29,r28
	cr6.compare<int32_t>(r29.s32, r28.s32, xer);
	// bge cr6,0x820dfe90
	if (!cr6.getLT()) goto loc_820DFE90;
loc_820DFE88:
	// addi r8,r9,-2
	ctx.r8.s64 = ctx.r9.s64 + -2;
	// mr r10,r7
	ctx.r10.u64 = ctx.r7.u64;
loc_820DFE90:
	// lwz r29,232(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 232);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x820dfec0
	if (cr6.getEQ()) goto loc_820DFEC0;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820dfeb8
	if (cr6.getLT()) goto loc_820DFEB8;
	// addi r28,r30,232
	r28.s64 = r30.s64 + 232;
	// lwz r29,236(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 236);
	// lwzx r28,r10,r28
	r28.u64 = PPC_LOAD_U32(ctx.r10.u32 + r28.u32);
	// cmpw cr6,r29,r28
	cr6.compare<int32_t>(r29.s32, r28.s32, xer);
	// bge cr6,0x820dfec0
	if (!cr6.getLT()) goto loc_820DFEC0;
loc_820DFEB8:
	// addi r8,r9,-1
	ctx.r8.s64 = ctx.r9.s64 + -1;
	// add r10,r6,r11
	ctx.r10.u64 = ctx.r6.u64 + r11.u64;
loc_820DFEC0:
	// lwz r29,468(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 468);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x820dfef0
	if (cr6.getEQ()) goto loc_820DFEF0;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820dfee8
	if (cr6.getLT()) goto loc_820DFEE8;
	// addi r28,r30,232
	r28.s64 = r30.s64 + 232;
	// lwz r29,472(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 472);
	// lwzx r28,r10,r28
	r28.u64 = PPC_LOAD_U32(ctx.r10.u32 + r28.u32);
	// cmpw cr6,r29,r28
	cr6.compare<int32_t>(r29.s32, r28.s32, xer);
	// bge cr6,0x820dfef0
	if (!cr6.getLT()) goto loc_820DFEF0;
loc_820DFEE8:
	// mr r8,r9
	ctx.r8.u64 = ctx.r9.u64;
	// add r10,r5,r11
	ctx.r10.u64 = ctx.r5.u64 + r11.u64;
loc_820DFEF0:
	// lwz r29,704(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 704);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x820dff20
	if (cr6.getEQ()) goto loc_820DFF20;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820dff18
	if (cr6.getLT()) goto loc_820DFF18;
	// addi r28,r30,232
	r28.s64 = r30.s64 + 232;
	// lwz r29,708(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 708);
	// lwzx r28,r10,r28
	r28.u64 = PPC_LOAD_U32(ctx.r10.u32 + r28.u32);
	// cmpw cr6,r29,r28
	cr6.compare<int32_t>(r29.s32, r28.s32, xer);
	// bge cr6,0x820dff20
	if (!cr6.getLT()) goto loc_820DFF20;
loc_820DFF18:
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// add r10,r4,r11
	ctx.r10.u64 = ctx.r4.u64 + r11.u64;
loc_820DFF20:
	// lwz r29,940(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 940);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x820dff50
	if (cr6.getEQ()) goto loc_820DFF50;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820dff48
	if (cr6.getLT()) goto loc_820DFF48;
	// addi r28,r30,232
	r28.s64 = r30.s64 + 232;
	// lwz r29,944(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 944);
	// lwzx r28,r10,r28
	r28.u64 = PPC_LOAD_U32(ctx.r10.u32 + r28.u32);
	// cmpw cr6,r29,r28
	cr6.compare<int32_t>(r29.s32, r28.s32, xer);
	// bge cr6,0x820dff50
	if (!cr6.getLT()) goto loc_820DFF50;
loc_820DFF48:
	// addi r8,r9,2
	ctx.r8.s64 = ctx.r9.s64 + 2;
	// add r10,r3,r11
	ctx.r10.u64 = ctx.r3.u64 + r11.u64;
loc_820DFF50:
	// addi r9,r9,5
	ctx.r9.s64 = ctx.r9.s64 + 5;
	// addi r7,r7,1180
	ctx.r7.s64 = ctx.r7.s64 + 1180;
	// addi r11,r9,-2
	r11.s64 = ctx.r9.s64 + -2;
	// cmpwi cr6,r11,20
	cr6.compare<int32_t>(r11.s32, 20, xer);
	// blt cr6,0x820dfe58
	if (cr6.getLT()) goto loc_820DFE58;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820e00ac
	if (cr6.getLT()) goto loc_820E00AC;
	// mulli r29,r8,236
	r29.s64 = ctx.r8.s64 * 236;
	// addi r28,r30,228
	r28.s64 = r30.s64 + 228;
	// lwzx r11,r29,r28
	r11.u64 = PPC_LOAD_U32(r29.u32 + r28.u32);
	// lwz r3,16(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// bl 0x820d5430
	sub_820D5430(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwzx r11,r29,r28
	r11.u64 = PPC_LOAD_U32(r29.u32 + r28.u32);
	// add r3,r29,r30
	ctx.r3.u64 = r29.u64 + r30.u64;
	// lfs f0,2688(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r9,100(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// ori r9,r9,4
	ctx.r9.u64 = ctx.r9.u64 | 4;
	// lfs f13,2776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stw r9,100(r11)
	PPC_STORE_U32(r11.u32 + 100, ctx.r9.u32);
	// stfs f0,4(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 4, temp.u32);
	// stfs f0,8(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 8, temp.u32);
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r31.u32);
	// lfs f12,14116(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14116);
	ctx.f12.f64 = double(temp.f32);
	// li r10,1
	ctx.r10.s64 = 1;
	// stfs f0,12(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 12, temp.u32);
	// stw r31,136(r3)
	PPC_STORE_U32(ctx.r3.u32 + 136, r31.u32);
	// stfs f0,16(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 16, temp.u32);
	// stw r31,144(r3)
	PPC_STORE_U32(ctx.r3.u32 + 144, r31.u32);
	// stfs f0,20(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 20, temp.u32);
	// stw r27,160(r3)
	PPC_STORE_U32(ctx.r3.u32 + 160, r27.u32);
	// stfs f0,24(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 24, temp.u32);
	// stw r31,164(r3)
	PPC_STORE_U32(ctx.r3.u32 + 164, r31.u32);
	// stfs f0,28(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 28, temp.u32);
	// stw r31,168(r3)
	PPC_STORE_U32(ctx.r3.u32 + 168, r31.u32);
	// stfs f13,96(r3)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 96, temp.u32);
	// stw r27,172(r3)
	PPC_STORE_U32(ctx.r3.u32 + 172, r27.u32);
	// stfs f12,140(r3)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r3.u32 + 140, temp.u32);
	// stw r10,184(r3)
	PPC_STORE_U32(ctx.r3.u32 + 184, ctx.r10.u32);
	// stfs f0,148(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 148, temp.u32);
	// stw r31,188(r3)
	PPC_STORE_U32(ctx.r3.u32 + 188, r31.u32);
	// stfs f13,192(r3)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 192, temp.u32);
	// stw r31,224(r3)
	PPC_STORE_U32(ctx.r3.u32 + 224, r31.u32);
	// stfs f13,196(r3)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 196, temp.u32);
	// stw r31,228(r3)
	PPC_STORE_U32(ctx.r3.u32 + 228, r31.u32);
	// stfs f13,200(r3)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 200, temp.u32);
	// stw r31,232(r3)
	PPC_STORE_U32(ctx.r3.u32 + 232, r31.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E001C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// mulli r11,r10,236
	r11.s64 = ctx.r10.s64 * 236;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// li r11,1
	r11.s64 = 1;
	// lfs f13,2776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stfs f0,4(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 4, temp.u32);
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r31.u32);
	// stfs f0,8(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 8, temp.u32);
	// stw r31,136(r3)
	PPC_STORE_U32(ctx.r3.u32 + 136, r31.u32);
	// stfs f0,12(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 12, temp.u32);
	// stw r31,144(r3)
	PPC_STORE_U32(ctx.r3.u32 + 144, r31.u32);
	// stfs f0,16(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 16, temp.u32);
	// stw r27,160(r3)
	PPC_STORE_U32(ctx.r3.u32 + 160, r27.u32);
	// lfs f12,14116(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14116);
	ctx.f12.f64 = double(temp.f32);
	// stw r31,164(r3)
	PPC_STORE_U32(ctx.r3.u32 + 164, r31.u32);
	// stfs f0,20(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 20, temp.u32);
	// stw r31,168(r3)
	PPC_STORE_U32(ctx.r3.u32 + 168, r31.u32);
	// stfs f0,24(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 24, temp.u32);
	// stw r27,172(r3)
	PPC_STORE_U32(ctx.r3.u32 + 172, r27.u32);
	// stfs f0,28(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 28, temp.u32);
	// stw r11,184(r3)
	PPC_STORE_U32(ctx.r3.u32 + 184, r11.u32);
	// stfs f13,96(r3)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 96, temp.u32);
	// stw r31,188(r3)
	PPC_STORE_U32(ctx.r3.u32 + 188, r31.u32);
	// stfs f12,140(r3)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r3.u32 + 140, temp.u32);
	// stw r31,224(r3)
	PPC_STORE_U32(ctx.r3.u32 + 224, r31.u32);
	// stfs f0,148(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 148, temp.u32);
	// stw r31,228(r3)
	PPC_STORE_U32(ctx.r3.u32 + 228, r31.u32);
	// stfs f13,192(r3)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 192, temp.u32);
	// stw r31,232(r3)
	PPC_STORE_U32(ctx.r3.u32 + 232, r31.u32);
	// stfs f13,196(r3)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 196, temp.u32);
	// stfs f13,200(r3)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 200, temp.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E00AC:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820E00B8"))) PPC_WEAK_FUNC(sub_820E00B8);
PPC_FUNC_IMPL(__imp__sub_820E00B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r31,8(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r10,r11,0,25,25
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e00fc
	if (cr6.getEQ()) goto loc_820E00FC;
	// bl 0x820dfde0
	sub_820DFDE0(ctx, base);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stw r3,68(r11)
	PPC_STORE_U32(r11.u32 + 68, ctx.r3.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820E00FC:
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e0124
	if (!cr6.getEQ()) goto loc_820E0124;
	// bl 0x820dfde0
	sub_820DFDE0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,108(r31)
	PPC_STORE_U32(r31.u32 + 108, ctx.r3.u32);
	// beq cr6,0x820e0124
	if (cr6.getEQ()) goto loc_820E0124;
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// ori r11,r11,128
	r11.u64 = r11.u64 | 128;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
loc_820E0124:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E0138"))) PPC_WEAK_FUNC(sub_820E0138);
PPC_FUNC_IMPL(__imp__sub_820E0138) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// li r29,0
	r29.s64 = 0;
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,13
	cr6.compare<uint32_t>(r11.u32, 13, xer);
	// bne cr6,0x820e01a0
	if (!cr6.getEQ()) goto loc_820E01A0;
	// lwz r3,196(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e0180
	if (cr6.getEQ()) goto loc_820E0180;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e0180
	if (cr6.getEQ()) goto loc_820E0180;
	// lwz r3,196(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820E0180:
	// lwz r3,200(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 200);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e0278
	if (cr6.getEQ()) goto loc_820E0278;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e0278
	if (cr6.getEQ()) goto loc_820E0278;
	// lwz r3,200(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 200);
	// b 0x820e0274
	goto loc_820E0274;
loc_820E01A0:
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x820e01c0
	if (!cr6.getEQ()) goto loc_820E01C0;
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e0278
	if (cr6.getEQ()) goto loc_820E0278;
	// stw r29,132(r11)
	PPC_STORE_U32(r11.u32 + 132, r29.u32);
	// stw r29,132(r31)
	PPC_STORE_U32(r31.u32 + 132, r29.u32);
	// b 0x820e0278
	goto loc_820E0278;
loc_820E01C0:
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x820e0208
	if (!cr6.getEQ()) goto loc_820E0208;
	// lwz r3,240(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 240);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e01e8
	if (cr6.getEQ()) goto loc_820E01E8;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e01e8
	if (cr6.getEQ()) goto loc_820E01E8;
	// lwz r3,240(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 240);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820E01E8:
	// lwz r3,244(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 244);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e0278
	if (cr6.getEQ()) goto loc_820E0278;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e0278
	if (cr6.getEQ()) goto loc_820E0278;
	// lwz r3,244(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 244);
	// b 0x820e0274
	goto loc_820E0274;
loc_820E0208:
	// cmplwi cr6,r11,47
	cr6.compare<uint32_t>(r11.u32, 47, xer);
	// bne cr6,0x820e0228
	if (!cr6.getEQ()) goto loc_820E0228;
	// lwz r3,140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820e0278
	if (cr6.getLT()) goto loc_820E0278;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x821143f8
	sub_821143F8(ctx, base);
	// b 0x820e0278
	goto loc_820E0278;
loc_820E0228:
	// cmplwi cr6,r11,40
	cr6.compare<uint32_t>(r11.u32, 40, xer);
	// bne cr6,0x820e0250
	if (!cr6.getEQ()) goto loc_820E0250;
	// lwz r3,176(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e0278
	if (cr6.getEQ()) goto loc_820E0278;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e0278
	if (cr6.getEQ()) goto loc_820E0278;
	// lwz r3,176(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// b 0x820e0274
	goto loc_820E0274;
loc_820E0250:
	// cmplwi cr6,r11,39
	cr6.compare<uint32_t>(r11.u32, 39, xer);
	// bne cr6,0x820e0278
	if (!cr6.getEQ()) goto loc_820E0278;
	// lwz r3,184(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 184);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e0278
	if (cr6.getEQ()) goto loc_820E0278;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e0278
	if (cr6.getEQ()) goto loc_820E0278;
	// lwz r3,184(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 184);
loc_820E0274:
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820E0278:
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e034c
	if (cr6.getEQ()) goto loc_820E034C;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x821414d8
	sub_821414D8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x821414d8
	sub_821414D8(ctx, base);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x820e034c
	if (!cr6.getEQ()) goto loc_820E034C;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820d5430
	sub_820D5430(ctx, base);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,32(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e02bc
	if (cr6.getEQ()) goto loc_820E02BC;
	// bl 0x820da578
	sub_820DA578(ctx, base);
loc_820E02BC:
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820ced38
	sub_820CED38(ctx, base);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e02f4
	if (cr6.getEQ()) goto loc_820E02F4;
loc_820E02D4:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r30,40(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,8(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// bl 0x820e0138
	sub_820E0138(ctx, base);
	// mr r11,r30
	r11.u64 = r30.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x820e02d4
	if (!cr6.getEQ()) goto loc_820E02D4;
loc_820E02F4:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// beq cr6,0x820e030c
	if (cr6.getEQ()) goto loc_820E030C;
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x820dc5f0
	sub_820DC5F0(ctx, base);
loc_820E030C:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r11,40
	cr6.compare<uint32_t>(r11.u32, 40, xer);
	// bne cr6,0x820e0324
	if (!cr6.getEQ()) goto loc_820E0324;
	// bl 0x821188f8
	sub_821188F8(ctx, base);
	// b 0x820e0328
	goto loc_820E0328;
loc_820E0324:
	// bl 0x821188f8
	sub_821188F8(ctx, base);
loc_820E0328:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x820e0348
	if (cr6.getEQ()) goto loc_820E0348;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820ccbb0
	sub_820CCBB0(ctx, base);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820cca28
	sub_820CCA28(ctx, base);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820ccb00
	sub_820CCB00(ctx, base);
loc_820E0348:
	// stw r29,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r29.u32);
loc_820E034C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820E0358"))) PPC_WEAK_FUNC(sub_820E0358);
PPC_FUNC_IMPL(__imp__sub_820E0358) {
	PPC_FUNC_PROLOGUE();
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x820e0138
	sub_820E0138(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820E0360"))) PPC_WEAK_FUNC(sub_820E0360);
PPC_FUNC_IMPL(__imp__sub_820E0360) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r10,100(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r10,0,24,24
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e052c
	if (cr6.getEQ()) goto loc_820E052C;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r9,r9,31
	ctx.r9.u64 = ctx.r9.u32 & 0x1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820e04d0
	if (cr6.getEQ()) goto loc_820E04D0;
	// lwz r9,144(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 144);
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// bge cr6,0x820e04d0
	if (!cr6.getLT()) goto loc_820E04D0;
	// rlwinm r9,r10,0,26,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820e04d0
	if (cr6.getEQ()) goto loc_820E04D0;
	// lwz r29,164(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 164);
	// li r11,95
	r11.s64 = 95;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,96
	r11.s64 = 96;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r11,97
	r11.s64 = 97;
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lwz r9,108(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lis r10,-21846
	ctx.r10.s64 = -1431699456;
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// ori r8,r10,43691
	ctx.r8.u64 = ctx.r10.u64 | 43691;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// lwz r10,-6376(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -6376);
	// lwz r6,160(r9)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + 160);
	// addi r7,r10,-6
	ctx.r7.s64 = ctx.r10.s64 + -6;
	// mulhwu r10,r11,r8
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r8.u32)) >> 32;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// cmpw cr6,r6,r7
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r7.s32, xer);
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// subf r27,r10,r11
	r27.s64 = r11.s64 - ctx.r10.s64;
	// bge cr6,0x820e0444
	if (!cr6.getLT()) goto loc_820E0444;
	// addi r11,r29,38
	r11.s64 = r29.s64 + 38;
	// rlwinm r30,r11,2,0,29
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r30,r9
	r11.u64 = PPC_LOAD_U32(r30.u32 + ctx.r9.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e0444
	if (cr6.getEQ()) goto loc_820E0444;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e0444
	if (cr6.getEQ()) goto loc_820E0444;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwzx r3,r30,r11
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820E0444:
	// addi r11,r29,38
	r11.s64 = r29.s64 + 38;
	// lwz r10,108(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// rlwinm r30,r11,2,0,29
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r30,r10
	r11.u64 = PPC_LOAD_U32(r30.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e052c
	if (!cr6.getEQ()) goto loc_820E052C;
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e052c
	if (!cr6.getEQ()) goto loc_820E052C;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// rlwinm r9,r27,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r7,r10,17776
	ctx.r7.s64 = ctx.r10.s64 + 17776;
	// add r5,r30,r11
	ctx.r5.u64 = r30.u64 + r11.u64;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r8,2982
	ctx.r8.s64 = 2982;
	// lwz r6,19944(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + 19944);
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// lwzx r4,r9,r4
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r4.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r10,108(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// lwzx r3,r30,r10
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + ctx.r10.u32);
	// bl 0x821448f8
	sub_821448F8(ctx, base);
	// lwz r11,-6376(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -6376);
	// subfic r9,r29,1
	xer.ca = r29.u32 <= 1;
	ctx.r9.s64 = 1 - r29.s64;
	// lwz r10,108(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stw r11,160(r10)
	PPC_STORE_U32(ctx.r10.u32 + 160, r11.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stw r9,164(r11)
	PPC_STORE_U32(r11.u32 + 164, ctx.r9.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
loc_820E04D0:
	// rlwinm r10,r10,0,27,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFDF;
	// stw r10,100(r31)
	PPC_STORE_U32(r31.u32 + 100, ctx.r10.u32);
	// lwz r10,152(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 152);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e0500
	if (cr6.getEQ()) goto loc_820E0500;
	// rotlwi r3,r10,0
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e0500
	if (cr6.getEQ()) goto loc_820E0500;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r3,152(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 152);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820E0500:
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r10,156(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 156);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e052c
	if (cr6.getEQ()) goto loc_820E052C;
	// rotlwi r3,r10,0
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e052c
	if (cr6.getEQ()) goto loc_820E052C;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r3,156(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 156);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820E052C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820E0538"))) PPC_WEAK_FUNC(sub_820E0538);
PPC_FUNC_IMPL(__imp__sub_820E0538) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// lwz r29,8(r27)
	r29.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820ca060
	sub_820CA060(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e09a4
	if (!cr6.getEQ()) goto loc_820E09A4;
	// lbz r11,3(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 3);
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// bne cr6,0x820e0598
	if (!cr6.getEQ()) goto loc_820E0598;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// rlwinm r11,r11,0,3,3
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e09a4
	if (cr6.getEQ()) goto loc_820E09A4;
	// li r4,12
	ctx.r4.s64 = 12;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820d7748
	sub_820D7748(ctx, base);
	// lwz r11,100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 100);
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// stw r11,100(r29)
	PPC_STORE_U32(r29.u32 + 100, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E0598:
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x820e09a4
	if (!cr6.getEQ()) goto loc_820E09A4;
	// lwz r31,8(r27)
	r31.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,26
	cr6.compare<int32_t>(r11.s32, 26, xer);
	// beq cr6,0x820e05bc
	if (cr6.getEQ()) goto loc_820E05BC;
	// cmpwi cr6,r11,87
	cr6.compare<int32_t>(r11.s32, 87, xer);
	// bne cr6,0x820e0628
	if (!cr6.getEQ()) goto loc_820E0628;
loc_820E05BC:
	// lhz r10,130(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x820e0628
	if (cr6.getLT()) goto loc_820E0628;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// sth r11,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r11.u16);
	// bge cr6,0x820e09a4
	if (!cr6.getLT()) goto loc_820E09A4;
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e0668
	if (!cr6.getEQ()) goto loc_820E0668;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// rlwinm r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// addi r4,r11,13
	ctx.r4.s64 = r11.s64 + 13;
	// bl 0x820d7748
	sub_820D7748(ctx, base);
	// lwz r11,100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 100);
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// stw r11,100(r29)
	PPC_STORE_U32(r29.u32 + 100, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E0628:
	// cmpwi cr6,r11,86
	cr6.compare<int32_t>(r11.s32, 86, xer);
	// bne cr6,0x820e067c
	if (!cr6.getEQ()) goto loc_820E067C;
	// lhz r11,130(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e09a4
	if (!cr6.getEQ()) goto loc_820E09A4;
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e0668
	if (!cr6.getEQ()) goto loc_820E0668;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// rlwinm r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// addi r4,r11,13
	ctx.r4.s64 = r11.s64 + 13;
	// bl 0x820d7748
	sub_820D7748(ctx, base);
loc_820E0668:
	// lwz r11,100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 100);
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// stw r11,100(r29)
	PPC_STORE_U32(r29.u32 + 100, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E067C:
	// cmpwi cr6,r11,34
	cr6.compare<int32_t>(r11.s32, 34, xer);
	// bne cr6,0x820e06c8
	if (!cr6.getEQ()) goto loc_820E06C8;
	// lhz r11,130(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e09a4
	if (!cr6.getEQ()) goto loc_820E09A4;
	// li r4,17
	ctx.r4.s64 = 17;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820d7748
	sub_820D7748(ctx, base);
	// lwz r11,100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 100);
	// li r3,120
	ctx.r3.s64 = 120;
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// stw r11,100(r29)
	PPC_STORE_U32(r29.u32 + 100, r11.u32);
	// bl 0x820b5808
	sub_820B5808(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lwz r10,19400(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 19400);
	// ori r10,r10,2
	ctx.r10.u64 = ctx.r10.u64 | 2;
	// stw r10,19400(r11)
	PPC_STORE_U32(r11.u32 + 19400, ctx.r10.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E06C8:
	// cmpwi cr6,r11,27
	cr6.compare<int32_t>(r11.s32, 27, xer);
	// beq cr6,0x820e06d8
	if (cr6.getEQ()) goto loc_820E06D8;
	// cmpwi cr6,r11,33
	cr6.compare<int32_t>(r11.s32, 33, xer);
	// bne cr6,0x820e0754
	if (!cr6.getEQ()) goto loc_820E0754;
loc_820E06D8:
	// lhz r10,130(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// cmplwi cr6,r10,32768
	cr6.compare<uint32_t>(ctx.r10.u32, 32768, xer);
	// bge cr6,0x820e0754
	if (!cr6.getLT()) goto loc_820E0754;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// sth r11,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r11.u16);
	// bge cr6,0x820e09a4
	if (!cr6.getLT()) goto loc_820E09A4;
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e09a4
	if (!cr6.getEQ()) goto loc_820E09A4;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// rlwinm r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// addi r4,r11,13
	ctx.r4.s64 = r11.s64 + 13;
	// bl 0x820d7748
	sub_820D7748(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e09a4
	if (cr6.getEQ()) goto loc_820E09A4;
	// li r11,-1
	r11.s64 = -1;
	// sth r11,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r11.u16);
	// lwz r11,100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 100);
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// stw r11,100(r29)
	PPC_STORE_U32(r29.u32 + 100, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E0754:
	// cmpwi cr6,r11,29
	cr6.compare<int32_t>(r11.s32, 29, xer);
	// bne cr6,0x820e0840
	if (!cr6.getEQ()) goto loc_820E0840;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// li r10,1
	ctx.r10.s64 = 1;
	// lwz r11,17284(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 17284);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e0790
	if (cr6.getEQ()) goto loc_820E0790;
	// lwz r9,100(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 100);
	// rlwinm r9,r9,15,30,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 15) & 0x3;
	// slw r9,r10,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r10.u32 << (ctx.r9.u8 & 0x3F));
	// and r11,r9,r11
	r11.u64 = ctx.r9.u64 & r11.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e0790
	if (cr6.getEQ()) goto loc_820E0790;
	// li r11,0
	r11.s64 = 0;
	// sth r11,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r11.u16);
loc_820E0790:
	// lhz r11,130(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// ble cr6,0x820e07cc
	if (!cr6.getGT()) goto loc_820E07CC;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lhz r9,130(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// sth r11,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r11.u16);
	// bgt cr6,0x820e09a4
	if (cr6.getGT()) goto loc_820E09A4;
	// sth r10,130(r31)
	PPC_STORE_U16(r31.u32 + 130, ctx.r10.u16);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E07CC:
	// lhz r11,130(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e09a4
	if (!cr6.getEQ()) goto loc_820E09A4;
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e09a4
	if (!cr6.getEQ()) goto loc_820E09A4;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// li r30,13
	r30.s64 = 13;
	// rlwinm r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e0800
	if (cr6.getEQ()) goto loc_820E0800;
	// li r30,17
	r30.s64 = 17;
	// b 0x820e0810
	goto loc_820E0810;
loc_820E0800:
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,34
	cr6.compare<int32_t>(ctx.r3.s32, 34, xer);
	// bne cr6,0x820e0810
	if (!cr6.getEQ()) goto loc_820E0810;
	// li r30,19
	r30.s64 = 19;
loc_820E0810:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820d7748
	sub_820D7748(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e09a4
	if (cr6.getEQ()) goto loc_820E09A4;
	// li r11,-1
	r11.s64 = -1;
	// sth r11,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r11.u16);
	// lwz r11,100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 100);
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// stw r11,100(r29)
	PPC_STORE_U32(r29.u32 + 100, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E0840:
	// cmpwi cr6,r11,28
	cr6.compare<int32_t>(r11.s32, 28, xer);
	// bne cr6,0x820e09a4
	if (!cr6.getEQ()) goto loc_820E09A4;
	// lhz r11,130(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// li r28,0
	r28.s64 = 0;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r30,r11,2288
	r30.s64 = r11.s64 + 2288;
	// ble cr6,0x820e08c4
	if (!cr6.getGT()) goto loc_820E08C4;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lhz r10,130(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// sth r11,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r11.u16);
	// bgt cr6,0x820e0918
	if (cr6.getGT()) goto loc_820E0918;
	// li r9,1
	ctx.r9.s64 = 1;
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// mr r11,r30
	r11.u64 = r30.u64;
	// sth r9,130(r31)
	PPC_STORE_U16(r31.u32 + 130, ctx.r9.u16);
loc_820E0894:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820e08b8
	if (cr6.getEQ()) goto loc_820E08B8;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r9,r30,120
	ctx.r9.s64 = r30.s64 + 120;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x820e0894
	if (cr6.getLT()) goto loc_820E0894;
	// b 0x820e0918
	goto loc_820E0918;
loc_820E08B8:
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r31,r11,r30
	PPC_STORE_U32(r11.u32 + r30.u32, r31.u32);
	// b 0x820e0918
	goto loc_820E0918;
loc_820E08C4:
	// lhz r11,130(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x820e0918
	if (!cr6.getEQ()) goto loc_820E0918;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lfs f11,16(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,16(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 16);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f0,f11,f0
	f0.f64 = double(float(ctx.f11.f64 - f0.f64));
	// lfs f13,20(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f10,20(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f13,f10,f13
	ctx.f13.f64 = double(float(ctx.f10.f64 - ctx.f13.f64));
	// lfs f12,12(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,12(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f12,f11,f12
	ctx.f12.f64 = double(float(ctx.f11.f64 - ctx.f12.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f13,f12,f12,f0
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// lfs f0,17808(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17808);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x820e0918
	if (!cr6.getLT()) goto loc_820E0918;
	// sth r28,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r28.u16);
loc_820E0918:
	// lhz r11,130(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e09a4
	if (!cr6.getEQ()) goto loc_820E09A4;
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e09a4
	if (!cr6.getEQ()) goto loc_820E09A4;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// rlwinm r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// addi r4,r11,13
	ctx.r4.s64 = r11.s64 + 13;
	// bl 0x820d7748
	sub_820D7748(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e09a4
	if (cr6.getEQ()) goto loc_820E09A4;
	// li r9,-1
	ctx.r9.s64 = -1;
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// mr r11,r30
	r11.u64 = r30.u64;
	// sth r9,130(r31)
	PPC_STORE_U16(r31.u32 + 130, ctx.r9.u16);
	// lwz r9,100(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 100);
	// ori r9,r9,4
	ctx.r9.u64 = ctx.r9.u64 | 4;
	// stw r9,100(r29)
	PPC_STORE_U32(r29.u32 + 100, ctx.r9.u32);
loc_820E0974:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r9,r31
	cr6.compare<uint32_t>(ctx.r9.u32, r31.u32, xer);
	// beq cr6,0x820e099c
	if (cr6.getEQ()) goto loc_820E099C;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r9,r30,120
	ctx.r9.s64 = r30.s64 + 120;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x820e0974
	if (cr6.getLT()) goto loc_820E0974;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E099C:
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r28,r11,r30
	PPC_STORE_U32(r11.u32 + r30.u32, r28.u32);
loc_820E09A4:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820E09B0"))) PPC_WEAK_FUNC(sub_820E09B0);
PPC_FUNC_IMPL(__imp__sub_820E09B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r31,36(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 36);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820e09f0
	if (cr6.getEQ()) goto loc_820E09F0;
loc_820E09D0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r30,40(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// bl 0x820e09b0
	sub_820E09B0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820da640
	sub_820DA640(ctx, base);
	// mr r31,r30
	r31.u64 = r30.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x820e09d0
	if (!cr6.getEQ()) goto loc_820E09D0;
loc_820E09F0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E0A08"))) PPC_WEAK_FUNC(sub_820E0A08);
PPC_FUNC_IMPL(__imp__sub_820E0A08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r11,100(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 100);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e0a54
	if (cr6.getEQ()) goto loc_820E0A54;
	// lbz r11,2(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 2);
	// li r4,1
	ctx.r4.s64 = 1;
	// rlwinm r5,r11,0,29,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820E0A54:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// andi. r11,r11,253
	r11.u64 = r11.u64 & 253;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stb r11,1(r31)
	PPC_STORE_U8(r31.u32 + 1, r11.u8);
	// bl 0x820e0538
	sub_820E0538(ctx, base);
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e0a88
	if (cr6.getEQ()) goto loc_820E0A88;
loc_820E0A74:
	// lwz r31,40(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// bl 0x820e0a08
	sub_820E0A08(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820e0a74
	if (!cr6.getEQ()) goto loc_820E0A74;
loc_820E0A88:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E0AA0"))) PPC_WEAK_FUNC(sub_820E0AA0);
PPC_FUNC_IMPL(__imp__sub_820E0AA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r29,8(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r11,100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 100);
	// lwz r30,20(r29)
	r30.u64 = PPC_LOAD_U32(r29.u32 + 20);
	// rlwinm r10,r11,0,29,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e0ae4
	if (cr6.getEQ()) goto loc_820E0AE4;
	// lbz r11,2(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 2);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// rlwinm r5,r11,0,29,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820E0AE4:
	// lwz r4,28(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x820e0b84
	if (cr6.getEQ()) goto loc_820E0B84;
	// rlwinm r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e0b84
	if (cr6.getEQ()) goto loc_820E0B84;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,24(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// bl 0x82118bc8
	sub_82118BC8(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// ori r11,r11,2
	r11.u64 = r11.u64 | 2;
	// stb r11,1(r31)
	PPC_STORE_U8(r31.u32 + 1, r11.u8);
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// lhz r11,14(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r3,r11,6,0,25
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// bl 0x8209cd50
	sub_8209CD50(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r5,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r5.u32);
	// lwz r11,108(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 108);
	// addi r4,r11,4
	ctx.r4.s64 = r11.s64 + 4;
	// bl 0x8210b450
	sub_8210B450(ctx, base);
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x8211cef0
	sub_8211CEF0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820e0538
	sub_820E0538(ctx, base);
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e0bb8
	if (cr6.getEQ()) goto loc_820E0BB8;
loc_820E0B68:
	// lwz r31,40(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// bl 0x820e0aa0
	sub_820E0AA0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820e0b68
	if (!cr6.getEQ()) goto loc_820E0B68;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820E0B84:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// andi. r11,r11,253
	r11.u64 = r11.u64 & 253;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stb r11,1(r31)
	PPC_STORE_U8(r31.u32 + 1, r11.u8);
	// bl 0x820e0538
	sub_820E0538(ctx, base);
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e0bb8
	if (cr6.getEQ()) goto loc_820E0BB8;
loc_820E0BA4:
	// lwz r31,40(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// bl 0x820e0a08
	sub_820E0A08(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820e0ba4
	if (!cr6.getEQ()) goto loc_820E0BA4;
loc_820E0BB8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820E0BC0"))) PPC_WEAK_FUNC(sub_820E0BC0);
PPC_FUNC_IMPL(__imp__sub_820E0BC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed548
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stfs f0,92(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x820e00b8
	sub_820E00B8(ctx, base);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r10,r11,0,25,25
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e0c14
	if (cr6.getEQ()) goto loc_820E0C14;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r31,68(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 68);
	// b 0x820e0c24
	goto loc_820E0C24;
loc_820E0C14:
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e0e04
	if (cr6.getEQ()) goto loc_820E0E04;
	// lwz r31,108(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 108);
loc_820E0C24:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820e0e04
	if (cr6.getEQ()) goto loc_820E0E04;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f29,14296(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14296);
	f29.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,15528(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15528);
	f30.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f29,f30
	f0.f64 = double(float(f0.f64 * f29.f64 - f30.f64));
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// fmadds f0,f13,f31,f0
	f0.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f29,f30
	f0.f64 = double(float(f0.f64 * f29.f64 - f30.f64));
	// stfs f0,12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f29,17740(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 17740);
	f29.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f28,17756(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17756);
	f28.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f29,f28
	f0.f64 = double(float(f0.f64 * f29.f64 - f28.f64));
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f29,f28
	f0.f64 = double(float(f0.f64 * f29.f64 - f28.f64));
	// stfs f0,92(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// addi r4,r31,32
	ctx.r4.s64 = r31.s64 + 32;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f29,f28
	f0.f64 = double(float(f0.f64 * f29.f64 - f28.f64));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x8210ba08
	sub_8210BA08(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r29,r1,104
	r29.s64 = ctx.r1.s64 + 104;
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lfs f0,0(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// lfs f0,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,108(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// lfs f0,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// bl 0x8210d870
	sub_8210D870(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x8210b5c8
	sub_8210B5C8(ctx, base);
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	f0.f64 = double(temp.f32);
	// lfs f13,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f30,f13
	f0.f64 = double(float(f0.f64 * f30.f64 + ctx.f13.f64));
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// lfs f12,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f0.f64 = double(temp.f32);
	// fmadds f0,f0,f30,f12
	f0.f64 = double(float(f0.f64 * f30.f64 + ctx.f12.f64));
	// stfs f0,12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r3,136(r31)
	PPC_STORE_U32(r31.u32 + 136, ctx.r3.u32);
	// stw r11,144(r31)
	PPC_STORE_U32(r31.u32 + 144, r11.u32);
loc_820E0E04:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed594
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820E0E18"))) PPC_WEAK_FUNC(sub_820E0E18);
PPC_FUNC_IMPL(__imp__sub_820E0E18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,32(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e0e78
	if (cr6.getEQ()) goto loc_820E0E78;
	// lwz r31,8(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// bl 0x820e00b8
	sub_820E00B8(ctx, base);
	// lwz r10,100(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r10,0,25,25
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x40;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e0e64
	if (cr6.getEQ()) goto loc_820E0E64;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r11,68(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 68);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e0e74
	if (!cr6.getEQ()) goto loc_820E0E74;
loc_820E0E64:
	// rlwinm r11,r10,0,24,24
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e0e78
	if (cr6.getEQ()) goto loc_820E0E78;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
loc_820E0E74:
	// stw r30,184(r11)
	PPC_STORE_U32(r11.u32 + 184, r30.u32);
loc_820E0E78:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E0E90"))) PPC_WEAK_FUNC(sub_820E0E90);
PPC_FUNC_IMPL(__imp__sub_820E0E90) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed548
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// rlwinm r10,r4,17,0,14
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 17) & 0xFFFE0000;
	// lwz r11,100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 100);
	// lwz r9,12(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// rlwinm r11,r11,0,15,12
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFF9FFFF;
	// rlwinm r9,r9,0,23,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x100;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r11,100(r29)
	PPC_STORE_U32(r29.u32 + 100, r11.u32);
	// bne cr6,0x820e1118
	if (!cr6.getEQ()) goto loc_820E1118;
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// clrlwi r10,r10,31
	ctx.r10.u64 = ctx.r10.u32 & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e1118
	if (cr6.getEQ()) goto loc_820E1118;
	// rlwinm r11,r11,0,24,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xC0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e1118
	if (!cr6.getEQ()) goto loc_820E1118;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,16(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// lfs f28,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f28.f64 = double(temp.f32);
	// stfs f28,88(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stfs f28,92(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stfs f28,96(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x820e00b8
	sub_820E00B8(ctx, base);
	// lwz r11,100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 100);
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1118
	if (cr6.getEQ()) goto loc_820E1118;
	// lwz r31,108(r29)
	r31.u64 = PPC_LOAD_U32(r29.u32 + 108);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820e1118
	if (cr6.getEQ()) goto loc_820E1118;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f30,14160(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14160);
	f30.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,15420(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15420);
	f29.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f30,f29
	f0.f64 = double(float(f0.f64 * f30.f64 - f29.f64));
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,15528(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15528);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f13,f13,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64));
	// fmadds f0,f13,f0,f30
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + f30.f64));
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f30,f29
	f0.f64 = double(float(f0.f64 * f30.f64 - f29.f64));
	// stfs f0,12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1000
	if (cr6.getEQ()) goto loc_820E1000;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e1000
	if (cr6.getEQ()) goto loc_820E1000;
	// stfs f28,12(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// stfs f28,4(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
loc_820E1000:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e102c
	if (cr6.getEQ()) goto loc_820E102C;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e102c
	if (cr6.getEQ()) goto loc_820E102C;
	// stfs f28,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stfs f28,92(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stfs f28,88(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// b 0x820e10e8
	goto loc_820E10E8;
loc_820E102C:
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e10e8
	if (!cr6.getEQ()) goto loc_820E10E8;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f30,17892(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 17892);
	f30.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,17888(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17888);
	f29.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f30,f29
	f0.f64 = double(float(f0.f64 * f30.f64 - f29.f64));
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f30,f29
	f0.f64 = double(float(f0.f64 * f30.f64 - f29.f64));
	// stfs f0,92(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f30,f29
	f0.f64 = double(float(f0.f64 * f30.f64 - f29.f64));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
loc_820E10E8:
	// addi r4,r31,32
	ctx.r4.s64 = r31.s64 + 32;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8210ba08
	sub_8210BA08(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// lwz r10,100(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 100);
	// rlwinm r11,r11,0,24,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFEFF;
	// rlwinm r10,r10,0,17,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFF7FFF;
	// stw r11,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r11.u32);
	// stw r10,100(r29)
	PPC_STORE_U32(r29.u32 + 100, ctx.r10.u32);
loc_820E1118:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed594
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820E1128"))) PPC_WEAK_FUNC(sub_820E1128);
PPC_FUNC_IMPL(__imp__sub_820E1128) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lwz r29,8(r3)
	r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// lbz r27,3(r11)
	r27.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// bl 0x820cdfc8
	sub_820CDFC8(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820e11e8
	if (!cr6.getGT()) goto loc_820E11E8;
	// bl 0x820cca38
	sub_820CCA38(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x820e11e8
	if (cr6.getEQ()) goto loc_820E11E8;
loc_820E116C:
	// lbz r11,0(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// beq cr6,0x820e1180
	if (cr6.getEQ()) goto loc_820E1180;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bne cr6,0x820e11dc
	if (!cr6.getEQ()) goto loc_820E11DC;
loc_820E1180:
	// lwz r11,24(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// extsh r10,r27
	ctx.r10.s64 = r27.s16;
	// lbz r11,3(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bne cr6,0x820e11dc
	if (!cr6.getEQ()) goto loc_820E11DC;
	// lwz r31,8(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// lfs f0,92(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 92);
	f0.f64 = double(temp.f32);
	// lfs f13,92(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 92);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x820e11dc
	if (!cr6.getGT()) goto loc_820E11DC;
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,16,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e11dc
	if (cr6.getEQ()) goto loc_820E11DC;
	// addi r3,r31,88
	ctx.r3.s64 = r31.s64 + 88;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x820ce060
	sub_820CE060(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e11dc
	if (cr6.getEQ()) goto loc_820E11DC;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820e0e90
	sub_820E0E90(ctx, base);
loc_820E11DC:
	// lwz r30,40(r30)
	r30.u64 = PPC_LOAD_U32(r30.u32 + 40);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x820e116c
	if (!cr6.getEQ()) goto loc_820E116C;
loc_820E11E8:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820E11F0"))) PPC_WEAK_FUNC(sub_820E11F0);
PPC_FUNC_IMPL(__imp__sub_820E11F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r10,0,0,24
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e1300
	if (!cr6.getEQ()) goto loc_820E1300;
	// lwz r29,16(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mr r30,r29
	r30.u64 = r29.u64;
	// lwz r11,32(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1234
	if (cr6.getEQ()) goto loc_820E1234;
loc_820E1224:
	// mr r30,r11
	r30.u64 = r11.u64;
	// lwz r11,32(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e1224
	if (!cr6.getEQ()) goto loc_820E1224;
loc_820E1234:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// clrlwi r11,r10,24
	r11.u64 = ctx.r10.u32 & 0xFF;
	// stfs f0,112(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 112, temp.u32);
	// ori r11,r11,128
	r11.u64 = r11.u64 | 128;
	// rlwinm r10,r11,0,29,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stb r11,2(r31)
	PPC_STORE_U8(r31.u32 + 2, r11.u8);
	// beq cr6,0x820e1260
	if (cr6.getEQ()) goto loc_820E1260;
	// li r11,1200
	r11.s64 = 1200;
	// stw r11,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r11.u32);
loc_820E1260:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// rlwinm r11,r11,0,18,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1284
	if (cr6.getEQ()) goto loc_820E1284;
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820E1284:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820da2a0
	sub_820DA2A0(ctx, base);
	// cmplw cr6,r30,r29
	cr6.compare<uint32_t>(r30.u32, r29.u32, xer);
	// bne cr6,0x820e1300
	if (!cr6.getEQ()) goto loc_820E1300;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e1128
	sub_820E1128(ctx, base);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,16,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e12e8
	if (cr6.getEQ()) goto loc_820E12E8;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-21846
	ctx.r10.s64 = -1431699456;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// ori r10,r10,43691
	ctx.r10.u64 = ctx.r10.u64 | 43691;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x820e1300
	if (!cr0.getEQ()) goto loc_820E1300;
loc_820E12E8:
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// oris r11,r11,1
	r11.u64 = r11.u64 | 65536;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
	// bl 0x820e0e90
	sub_820E0E90(ctx, base);
loc_820E1300:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820E1308"))) PPC_WEAK_FUNC(sub_820E1308);
PPC_FUNC_IMPL(__imp__sub_820E1308) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// lfs f0,112(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 112);
	f0.f64 = double(temp.f32);
	// lfs f13,116(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 116);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820e1360
	if (cr6.getGT()) goto loc_820E1360;
	// lbz r11,2(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e16e8
	if (cr6.getEQ()) goto loc_820E16E8;
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// fctiwz f13,f0
	ctx.f13.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f13,0,r11
	PPC_STORE_U32(r11.u32, ctx.f13.u32);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e16e8
	if (cr6.getEQ()) goto loc_820E16E8;
loc_820E1360:
	// lhz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// lwz r29,16(r30)
	r29.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// addi r11,r11,1840
	r11.s64 = r11.s64 + 1840;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// mr r31,r29
	r31.u64 = r29.u64;
	// lbzx r11,r10,r11
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// extsb r28,r11
	r28.s64 = r11.s8;
	// lwz r11,32(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e139c
	if (cr6.getEQ()) goto loc_820E139C;
loc_820E138C:
	// mr r31,r11
	r31.u64 = r11.u64;
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e138c
	if (!cr6.getEQ()) goto loc_820E138C;
loc_820E139C:
	// lwz r10,24(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lbz r11,2(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 2);
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// rlwinm r10,r11,0,0,24
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e13d4
	if (cr6.getEQ()) goto loc_820E13D4;
	// addi r10,r1,100
	ctx.r10.s64 = ctx.r1.s64 + 100;
	// fctiwz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820e1580
	if (!cr6.getEQ()) goto loc_820E1580;
loc_820E13D4:
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// li r11,1
	r11.s64 = 1;
	// stfs f0,112(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 112, temp.u32);
	// rlwimi r10,r11,7,0,24
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 7) & 0xFFFFFF80) | (ctx.r10.u64 & 0xFFFFFFFF0000007F);
	// stb r10,2(r30)
	PPC_STORE_U8(r30.u32 + 2, ctx.r10.u8);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1424
	if (cr6.getEQ()) goto loc_820E1424;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e1424
	if (cr6.getEQ()) goto loc_820E1424;
	// lbz r11,2(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 2);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1424
	if (cr6.getEQ()) goto loc_820E1424;
	// li r11,1200
	r11.s64 = 1200;
	// stw r11,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r11.u32);
loc_820E1424:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e14d8
	if (cr6.getEQ()) goto loc_820E14D8;
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,0,28,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e14a4
	if (!cr6.getEQ()) goto loc_820E14A4;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f4,8(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 8);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,0(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 0);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210f7c8
	sub_8210F7C8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e14a4
	if (cr6.getEQ()) goto loc_820E14A4;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r6,-1
	ctx.r6.s64 = -1;
	// lwz r5,96(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// rlwinm r11,r11,0,28,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xE;
	// li r10,0
	ctx.r10.s64 = 0;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// stb r8,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r8.u8);
	// addi r9,r31,48
	ctx.r9.s64 = r31.s64 + 48;
	// stw r6,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r6.u32);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// rlwinm r7,r11,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821427b8
	sub_821427B8(ctx, base);
	// b 0x820e14d8
	goto loc_820E14D8;
loc_820E14A4:
	// li r4,-1
	ctx.r4.s64 = -1;
	// lwz r5,24(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// li r11,0
	r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r9,r31,48
	ctx.r9.s64 = r31.s64 + 48;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// stw r4,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r4.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// stb r11,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r11.u8);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821427b8
	sub_821427B8(ctx, base);
loc_820E14D8:
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// rlwinm r11,r11,0,18,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e14fc
	if (cr6.getEQ()) goto loc_820E14FC;
	// lwz r11,100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 100);
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// stw r11,100(r30)
	PPC_STORE_U32(r30.u32 + 100, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
loc_820E14FC:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820da2a0
	sub_820DA2A0(ctx, base);
	// cmplw cr6,r31,r29
	cr6.compare<uint32_t>(r31.u32, r29.u32, xer);
	// bne cr6,0x820e16e8
	if (!cr6.getEQ()) goto loc_820E16E8;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e1128
	sub_820E1128(ctx, base);
	// lwz r11,100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 100);
	// rlwinm r11,r11,0,16,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1560
	if (cr6.getEQ()) goto loc_820E1560;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-21846
	ctx.r10.s64 = -1431699456;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// ori r10,r10,43691
	ctx.r10.u64 = ctx.r10.u64 | 43691;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x820e16e8
	if (!cr0.getEQ()) goto loc_820E16E8;
loc_820E1560:
	// lwz r11,100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 100);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// oris r11,r11,1
	r11.u64 = r11.u64 | 65536;
	// stw r11,100(r30)
	PPC_STORE_U32(r30.u32 + 100, r11.u32);
	// bl 0x820e0e90
	sub_820E0E90(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
loc_820E1580:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820d49c8
	sub_820D49C8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// srawi r11,r28,2
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3) != 0);
	r11.s64 = r28.s32 >> 2;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf. r11,r11,r28
	r11.s64 = r28.s64 - r11.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x820e1664
	if (!cr0.getEQ()) goto loc_820E1664;
	// srawi r11,r28,2
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3) != 0);
	r11.s64 = r28.s32 >> 2;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// bl 0x820da2a0
	sub_820DA2A0(ctx, base);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1664
	if (cr6.getEQ()) goto loc_820E1664;
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,0,28,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e1630
	if (!cr6.getEQ()) goto loc_820E1630;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f4,8(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 8);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,0(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 0);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210f7c8
	sub_8210F7C8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e1630
	if (cr6.getEQ()) goto loc_820E1630;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r6,-1
	ctx.r6.s64 = -1;
	// lwz r5,96(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// rlwinm r11,r11,0,28,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xE;
	// li r10,0
	ctx.r10.s64 = 0;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// stb r8,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r8.u8);
	// addi r9,r31,48
	ctx.r9.s64 = r31.s64 + 48;
	// stw r6,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r6.u32);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// rlwinm r7,r11,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821427b8
	sub_821427B8(ctx, base);
	// b 0x820e1664
	goto loc_820E1664;
loc_820E1630:
	// li r4,-1
	ctx.r4.s64 = -1;
	// lwz r5,24(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// li r11,0
	r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r9,r31,48
	ctx.r9.s64 = r31.s64 + 48;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// stw r4,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r4.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// stb r11,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r11.u8);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821427b8
	sub_821427B8(ctx, base);
loc_820E1664:
	// lbz r10,2(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 2);
	// rlwinm r11,r10,0,0,24
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e16c8
	if (cr6.getEQ()) goto loc_820E16C8;
	// addi r11,r1,100
	r11.s64 = ctx.r1.s64 + 100;
	// lfs f0,112(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820e16c8
	if (!cr6.getGT()) goto loc_820E16C8;
	// rlwinm r11,r10,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e16c8
	if (cr6.getEQ()) goto loc_820E16C8;
	// lwz r11,100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 100);
	// rlwinm r11,r11,0,19,19
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// ori r11,r10,16
	r11.u64 = ctx.r10.u64 | 16;
	// bne cr6,0x820e16bc
	if (!cr6.getEQ()) goto loc_820E16BC;
	// andi. r11,r10,239
	r11.u64 = ctx.r10.u64 & 239;
	cr0.compare<int32_t>(r11.s32, 0, xer);
loc_820E16BC:
	// stb r11,2(r30)
	PPC_STORE_U8(r30.u32 + 2, r11.u8);
	// li r11,1200
	r11.s64 = 1200;
	// stw r11,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r11.u32);
loc_820E16C8:
	// cmpwi cr6,r28,12
	cr6.compare<int32_t>(r28.s32, 12, xer);
	// blt cr6,0x820e16e8
	if (cr6.getLT()) goto loc_820E16E8;
	// lwz r11,100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 100);
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// ori r11,r11,4096
	r11.u64 = r11.u64 | 4096;
	// rlwinm r10,r10,0,24,22
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFEFF;
	// stw r11,100(r30)
	PPC_STORE_U32(r30.u32 + 100, r11.u32);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
loc_820E16E8:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820E16F0"))) PPC_WEAK_FUNC(sub_820E16F0);
PPC_FUNC_IMPL(__imp__sub_820E16F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e1850
	if (!cr6.getEQ()) goto loc_820E1850;
	// bl 0x820dae70
	sub_820DAE70(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e1850
	if (cr6.getEQ()) goto loc_820E1850;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lfs f13,116(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 116);
	ctx.f13.f64 = double(temp.f32);
	// cmplwi cr6,r11,42
	cr6.compare<uint32_t>(r11.u32, 42, xer);
	// lfs f0,3904(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3904);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f0,112(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 112, temp.u32);
	// beq cr6,0x820e1778
	if (cr6.getEQ()) goto loc_820E1778;
	// cmplwi cr6,r11,47
	cr6.compare<uint32_t>(r11.u32, 47, xer);
	// beq cr6,0x820e1778
	if (cr6.getEQ()) goto loc_820E1778;
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e178c
	if (cr6.getEQ()) goto loc_820E178C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820e11f0
	sub_820E11F0(ctx, base);
	// b 0x820e178c
	goto loc_820E178C;
loc_820E1778:
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e178c
	if (cr6.getEQ()) goto loc_820E178C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820dad58
	sub_820DAD58(ctx, base);
loc_820E178C:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,21
	cr6.compare<uint32_t>(r11.u32, 21, xer);
	// bne cr6,0x820e17f4
	if (!cr6.getEQ()) goto loc_820E17F4;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e17cc
	if (cr6.getEQ()) goto loc_820E17CC;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e17e8
	if (!cr6.getEQ()) goto loc_820E17E8;
loc_820E17CC:
	// lfs f0,116(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 116);
	f0.f64 = double(temp.f32);
	// lfs f13,112(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f12,128(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 128);
	ctx.f12.f64 = double(temp.f32);
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fmuls f0,f0,f12
	f0.f64 = double(float(f0.f64 * ctx.f12.f64));
	// b 0x820e17f0
	goto loc_820E17F0;
loc_820E17E8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
loc_820E17F0:
	// stfs f0,132(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 132, temp.u32);
loc_820E17F4:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1850
	if (cr6.getEQ()) goto loc_820E1850;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820e1850
	if (!cr6.getEQ()) goto loc_820E1850;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r3,36(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e1850
	if (cr6.getEQ()) goto loc_820E1850;
loc_820E1838:
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r31,40(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820e1838
	if (!cr6.getEQ()) goto loc_820E1838;
loc_820E1850:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E1868"))) PPC_WEAK_FUNC(sub_820E1868);
PPC_FUNC_IMPL(__imp__sub_820E1868) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r16{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-384(r1)
	ea = -384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// lwz r24,8(r23)
	r24.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// lwz r11,480(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e1b0c
	if (!cr6.getEQ()) goto loc_820E1B0C;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e1b0c
	if (cr6.getEQ()) goto loc_820E1B0C;
	// lbz r11,3(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 3);
	// addi r11,r11,-4
	r11.s64 = r11.s64 + -4;
	// cmplwi cr6,r11,17
	cr6.compare<uint32_t>(r11.u32, 17, xer);
	// bgt cr6,0x820e1d88
	if (cr6.getGT()) goto loc_820E1D88;
	// lis r12,-32242
	r12.s64 = -2113011712;
	// addi r12,r12,6348
	r12.s64 = r12.s64 + 6348;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820E1914;
	case 1:
		goto loc_820E1D88;
	case 2:
		goto loc_820E1D88;
	case 3:
		goto loc_820E198C;
	case 4:
		goto loc_820E1A60;
	case 5:
		goto loc_820E1D88;
	case 6:
		goto loc_820E1D88;
	case 7:
		goto loc_820E1D88;
	case 8:
		goto loc_820E1D88;
	case 9:
		goto loc_820E1D88;
	case 10:
		goto loc_820E1D88;
	case 11:
		goto loc_820E1D88;
	case 12:
		goto loc_820E1D88;
	case 13:
		goto loc_820E1D88;
	case 14:
		goto loc_820E1D88;
	case 15:
		goto loc_820E1D88;
	case 16:
		goto loc_820E19AC;
	case 17:
		goto loc_820E1D0C;
	default:
		__builtin_unreachable();
	}
	// lwz r16,6420(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 6420);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,6540(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 6540);
	// lwz r16,6752(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 6752);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,7560(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7560);
	// lwz r16,6572(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 6572);
	// lwz r16,7436(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + 7436);
loc_820E1914:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,10421
	ctx.r8.s64 = 10421;
	// addi r7,r11,17776
	ctx.r7.s64 = r11.s64 + 17776;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,229
	ctx.r4.s64 = 229;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x820e1df4
	if (cr6.getEQ()) goto loc_820E1DF4;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x820c1e28
	sub_820C1E28(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820e1960
	if (!cr6.getEQ()) goto loc_820E1960;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,42044
	ctx.r3.u64 = ctx.r3.u64 | 42044;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
loc_820E1960:
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// bl 0x8209da30
	sub_8209DA30(ctx, base);
	// cmplw cr6,r3,r23
	cr6.compare<uint32_t>(ctx.r3.u32, r23.u32, xer);
	// bne cr6,0x820e1df4
	if (!cr6.getEQ()) goto loc_820E1DF4;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8209da20
	sub_8209DA20(ctx, base);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x820c10b0
	sub_820C10B0(ctx, base);
	// li r3,4
	ctx.r3.s64 = 4;
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// b 0x823ed174
	return;
loc_820E198C:
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x820dbee8
	sub_820DBEE8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// lwz r3,128(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 128);
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x820dbd60
	sub_820DBD60(ctx, base);
	// b 0x820e1cdc
	goto loc_820E1CDC;
loc_820E19AC:
	// li r30,1
	r30.s64 = 1;
	// li r31,13
	r31.s64 = 13;
	// addi r29,r24,130
	r29.s64 = r24.s64 + 130;
	// lis r26,-32190
	r26.s64 = -2109603840;
loc_820E19BC:
	// mr r27,r30
	r27.u64 = r30.u64;
	// cmpwi cr6,r30,2
	cr6.compare<int32_t>(r30.s32, 2, xer);
	// bne cr6,0x820e19cc
	if (!cr6.getEQ()) goto loc_820E19CC;
	// li r27,1
	r27.s64 = 1;
loc_820E19CC:
	// lhz r28,0(r29)
	r28.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// stw r28,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r28.u32);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820e1a0c
	if (!cr6.getEQ()) goto loc_820E1A0C;
	// extsw r11,r28
	r11.s64 = r28.s32;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,19428(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 19428);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r28,80(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_820E1A0C:
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820dbd60
	sub_820DBD60(ctx, base);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820e19bc
	if (!cr6.getEQ()) goto loc_820E19BC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,10461
	ctx.r8.s64 = 10461;
	// addi r7,r11,17776
	ctx.r7.s64 = r11.s64 + 17776;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,234
	ctx.r4.s64 = 234;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// b 0x820e1cdc
	goto loc_820E1CDC;
loc_820E1A60:
	// lbz r11,128(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 128);
	// cmplwi cr6,r11,19
	cr6.compare<uint32_t>(r11.u32, 19, xer);
	// bne cr6,0x820e1b18
	if (!cr6.getEQ()) goto loc_820E1B18;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x820e1b18
	if (!cr6.getEQ()) goto loc_820E1B18;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1b18
	if (cr6.getEQ()) goto loc_820E1B18;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e1b18
	if (cr6.getEQ()) goto loc_820E1B18;
loc_820E1A94:
	// bl 0x820ca338
	sub_820CA338(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x820e1b0c
	if (cr6.getEQ()) goto loc_820E1B0C;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1b0c
	if (cr6.getEQ()) goto loc_820E1B0C;
	// addi r31,r30,2116
	r31.s64 = r30.s64 + 2116;
	// addi r4,r30,2168
	ctx.r4.s64 = r30.s64 + 2168;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d36a8
	sub_820D36A8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1b0c
	if (cr6.getEQ()) goto loc_820E1B0C;
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// lwz r11,480(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e1b0c
	if (!cr6.getEQ()) goto loc_820E1B0C;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_820E1B0C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// b 0x823ed174
	return;
loc_820E1B18:
	// lbz r11,128(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 128);
	// cmplwi cr6,r11,88
	cr6.compare<uint32_t>(r11.u32, 88, xer);
	// bne cr6,0x820e1b4c
	if (!cr6.getEQ()) goto loc_820E1B4C;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820e1b4c
	if (!cr6.getEQ()) goto loc_820E1B4C;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1b4c
	if (cr6.getEQ()) goto loc_820E1B4C;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e1a94
	if (!cr6.getEQ()) goto loc_820E1A94;
loc_820E1B4C:
	// lbz r11,128(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 128);
	// li r29,0
	r29.s64 = 0;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820dbae8
	sub_820DBAE8(ctx, base);
	// lbz r11,128(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 128);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,29
	cr6.compare<int32_t>(r11.s32, 29, xer);
	// bne cr6,0x820e1b78
	if (!cr6.getEQ()) goto loc_820E1B78;
	// li r3,30
	ctx.r3.s64 = 30;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// b 0x820e1b8c
	goto loc_820E1B8C;
loc_820E1B78:
	// cmpwi cr6,r11,88
	cr6.compare<int32_t>(r11.s32, 88, xer);
	// bne cr6,0x820e1b8c
	if (!cr6.getEQ()) goto loc_820E1B8C;
	// li r4,88
	ctx.r4.s64 = 88;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
loc_820E1B8C:
	// lwz r11,100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 100);
	// rlwinm r11,r11,0,21,21
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1bf4
	if (cr6.getEQ()) goto loc_820E1BF4;
	// lbz r11,128(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 128);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,32
	cr6.compare<int32_t>(r11.s32, 32, xer);
	// bgt cr6,0x820e1bb4
	if (cr6.getGT()) goto loc_820E1BB4;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x820c1148
	sub_820C1148(ctx, base);
loc_820E1BB4:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x820e1bec
	if (cr6.getEQ()) goto loc_820E1BEC;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x820c1e28
	sub_820C1E28(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820e1be4
	if (!cr6.getEQ()) goto loc_820E1BE4;
	// lbz r11,128(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 128);
	// li r4,100
	ctx.r4.s64 = 100;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x820dc0f0
	sub_820DC0F0(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
loc_820E1BE4:
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// li r29,1
	r29.s64 = 1;
loc_820E1BEC:
	// li r28,4
	r28.s64 = 4;
	// b 0x820e1c58
	goto loc_820E1C58;
loc_820E1BF4:
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x820c1148
	sub_820C1148(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e1c08
	if (cr6.getEQ()) goto loc_820E1C08;
	// li r29,1
	r29.s64 = 1;
loc_820E1C08:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x820e1c54
	if (cr6.getEQ()) goto loc_820E1C54;
	// lbz r11,128(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 128);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820c1e70
	sub_820C1E70(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e1c30
	if (cr6.getEQ()) goto loc_820E1C30;
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// li r29,1
	r29.s64 = 1;
	// b 0x820e1c54
	goto loc_820E1C54;
loc_820E1C30:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x820e1c54
	if (cr6.getEQ()) goto loc_820E1C54;
	// lbz r11,128(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 128);
	// li r4,100
	ctx.r4.s64 = 100;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x820dc0f0
	sub_820DC0F0(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x820b4260
	sub_820B4260(ctx, base);
loc_820E1C54:
	// li r28,1
	r28.s64 = 1;
loc_820E1C58:
	// lbz r11,128(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 128);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a55e0
	sub_820A55E0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x820e1cd4
	if (cr6.getEQ()) goto loc_820E1CD4;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x820dbfd0
	sub_820DBFD0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x820e1cd4
	if (!cr6.getGT()) goto loc_820E1CD4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a5590
	sub_820A5590(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// cmpw cr6,r27,r3
	cr6.compare<int32_t>(r27.s32, ctx.r3.s32, xer);
	// bge cr6,0x820e1cd4
	if (!cr6.getLT()) goto loc_820E1CD4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a5590
	sub_820A5590(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// add r4,r11,r30
	ctx.r4.u64 = r11.u64 + r30.u64;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x820e1cd4
	if (!cr6.getEQ()) goto loc_820E1CD4;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x820e1cd4
	if (cr6.getEQ()) goto loc_820E1CD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820dbcf0
	sub_820DBCF0(ctx, base);
loc_820E1CD4:
	// cmpwi cr6,r28,1
	cr6.compare<int32_t>(r28.s32, 1, xer);
	// bne cr6,0x820e1dec
	if (!cr6.getEQ()) goto loc_820E1DEC;
loc_820E1CDC:
	// lwz r11,100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 100);
	// rlwinm r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e1df4
	if (!cr6.getEQ()) goto loc_820E1DF4;
	// lbz r11,2(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 2);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// rlwinm r5,r11,0,29,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// b 0x823ed174
	return;
loc_820E1D0C:
	// lfs f1,132(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + 132);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b40c0
	sub_820B40C0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,10582
	ctx.r8.s64 = 10582;
	// addi r7,r11,17776
	ctx.r7.s64 = r11.s64 + 17776;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,81
	ctx.r4.s64 = 81;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x820e1cdc
	if (cr6.getEQ()) goto loc_820E1CDC;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x820c1e28
	sub_820C1E28(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820e1d80
	if (!cr6.getEQ()) goto loc_820E1D80;
	// bl 0x820b30a8
	sub_820B30A8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// lis r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1d78
	if (cr6.getEQ()) goto loc_820E1D78;
	// ori r3,r3,42045
	ctx.r3.u64 = ctx.r3.u64 | 42045;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// b 0x820e1cdc
	goto loc_820E1CDC;
loc_820E1D78:
	// ori r3,r3,42046
	ctx.r3.u64 = ctx.r3.u64 | 42046;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
loc_820E1D80:
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// b 0x820e1cdc
	goto loc_820E1CDC;
loc_820E1D88:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,10607
	ctx.r8.s64 = 10607;
	// addi r7,r11,17776
	ctx.r7.s64 = r11.s64 + 17776;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,229
	ctx.r4.s64 = 229;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x820e1df4
	if (cr6.getEQ()) goto loc_820E1DF4;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x820c1e28
	sub_820C1E28(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820e1dd4
	if (!cr6.getEQ()) goto loc_820E1DD4;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,42047
	ctx.r3.u64 = ctx.r3.u64 | 42047;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
loc_820E1DD4:
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x820c10b0
	sub_820C10B0(ctx, base);
	// li r3,4
	ctx.r3.s64 = 4;
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// b 0x823ed174
	return;
loc_820E1DEC:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x820e1b0c
	if (cr6.getEQ()) goto loc_820E1B0C;
loc_820E1DF4:
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x820c10b0
	sub_820C10B0(ctx, base);
	// li r3,4
	ctx.r3.s64 = 4;
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_820E1E08"))) PPC_WEAK_FUNC(sub_820E1E08);
PPC_FUNC_IMPL(__imp__sub_820E1E08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// lwz r28,8(r27)
	r28.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// bl 0x820ca520
	sub_820CA520(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e2000
	if (cr6.getEQ()) goto loc_820E2000;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820dadf0
	sub_820DADF0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e1e64
	if (cr6.getEQ()) goto loc_820E1E64;
	// lbz r11,3(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 3);
	// cmplwi cr6,r11,17
	cr6.compare<uint32_t>(r11.u32, 17, xer);
	// beq cr6,0x820e1e64
	if (cr6.getEQ()) goto loc_820E1E64;
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// rlwinm r10,r11,0,11,11
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x100000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e1e74
	if (cr6.getEQ()) goto loc_820E1E74;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
loc_820E1E64:
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// rlwinm r10,r11,0,13,13
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e2000
	if (cr6.getEQ()) goto loc_820E2000;
loc_820E1E74:
	// rlwinm r11,r11,0,12,12
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e2000
	if (!cr6.getEQ()) goto loc_820E2000;
	// lwz r8,100(r28)
	ctx.r8.u64 = PPC_LOAD_U32(r28.u32 + 100);
	// rlwinm r7,r8,0,24,24
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x820e1eac
	if (cr6.getEQ()) goto loc_820E1EAC;
	// lwz r11,108(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 108);
	// lwz r10,188(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 188);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820e1eac
	if (!cr6.getGT()) goto loc_820E1EAC;
	// lwz r11,144(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 144);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e2000
	if (cr6.getEQ()) goto loc_820E2000;
loc_820E1EAC:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820d38f8
	sub_820D38F8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e2000
	if (cr6.getEQ()) goto loc_820E2000;
	// lbz r11,3(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 3);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x820e200c
	if (!cr6.getEQ()) goto loc_820E200C;
	// lwz r31,8(r27)
	r31.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// cmpwi cr6,r3,26
	cr6.compare<int32_t>(ctx.r3.s32, 26, xer);
	// beq cr6,0x820e1ee4
	if (cr6.getEQ()) goto loc_820E1EE4;
	// cmpwi cr6,r3,87
	cr6.compare<int32_t>(ctx.r3.s32, 87, xer);
	// bne cr6,0x820e1efc
	if (!cr6.getEQ()) goto loc_820E1EFC;
loc_820E1EE4:
	// lhz r11,130(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// cmplwi cr6,r11,32768
	cr6.compare<uint32_t>(r11.u32, 32768, xer);
	// blt cr6,0x820e2000
	if (cr6.getLT()) goto loc_820E2000;
	// rlwinm r11,r8,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e2000
	if (!cr6.getEQ()) goto loc_820E2000;
loc_820E1EFC:
	// cmpwi cr6,r3,29
	cr6.compare<int32_t>(ctx.r3.s32, 29, xer);
	// beq cr6,0x820e1f34
	if (cr6.getEQ()) goto loc_820E1F34;
	// cmpwi cr6,r3,28
	cr6.compare<int32_t>(ctx.r3.s32, 28, xer);
	// beq cr6,0x820e1f34
	if (cr6.getEQ()) goto loc_820E1F34;
	// cmpwi cr6,r3,27
	cr6.compare<int32_t>(ctx.r3.s32, 27, xer);
	// beq cr6,0x820e1f34
	if (cr6.getEQ()) goto loc_820E1F34;
	// cmpwi cr6,r3,33
	cr6.compare<int32_t>(ctx.r3.s32, 33, xer);
	// beq cr6,0x820e1f34
	if (cr6.getEQ()) goto loc_820E1F34;
	// cmpwi cr6,r3,47
	cr6.compare<int32_t>(ctx.r3.s32, 47, xer);
	// beq cr6,0x820e1f34
	if (cr6.getEQ()) goto loc_820E1F34;
	// cmpwi cr6,r3,48
	cr6.compare<int32_t>(ctx.r3.s32, 48, xer);
	// beq cr6,0x820e1f34
	if (cr6.getEQ()) goto loc_820E1F34;
	// cmpwi cr6,r3,34
	cr6.compare<int32_t>(ctx.r3.s32, 34, xer);
	// bne cr6,0x820e1f4c
	if (!cr6.getEQ()) goto loc_820E1F4C;
loc_820E1F34:
	// lhz r11,130(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 130);
	// cmplwi cr6,r11,32768
	cr6.compare<uint32_t>(r11.u32, 32768, xer);
	// blt cr6,0x820e2000
	if (cr6.getLT()) goto loc_820E2000;
	// rlwinm r11,r8,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e2000
	if (!cr6.getEQ()) goto loc_820E2000;
loc_820E1F4C:
	// cmpwi cr6,r3,86
	cr6.compare<int32_t>(ctx.r3.s32, 86, xer);
	// bne cr6,0x820e1f5c
	if (!cr6.getEQ()) goto loc_820E1F5C;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x820e2000
	if (!cr6.getEQ()) goto loc_820E2000;
loc_820E1F5C:
	// bl 0x820c0c08
	sub_820C0C08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e2204
	if (cr6.getEQ()) goto loc_820E2204;
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a55e0
	sub_820A55E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e2204
	if (cr6.getEQ()) goto loc_820E2204;
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a5620
	sub_820A5620(ctx, base);
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a5670
	sub_820A5670(ctx, base);
	// cmpw cr6,r30,r3
	cr6.compare<int32_t>(r30.s32, ctx.r3.s32, xer);
	// blt cr6,0x820e2204
	if (cr6.getLT()) goto loc_820E2204;
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e1fc0
	if (!cr6.getEQ()) goto loc_820E1FC0;
	// lbz r10,129(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 129);
	// cmplwi cr6,r10,128
	cr6.compare<uint32_t>(ctx.r10.u32, 128, xer);
	// bge cr6,0x820e2000
	if (!cr6.getLT()) goto loc_820E2000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e1fc8
	if (cr6.getEQ()) goto loc_820E1FC8;
loc_820E1FC0:
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// b 0x820e1fcc
	goto loc_820E1FCC;
loc_820E1FC8:
	// lbz r11,129(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 129);
loc_820E1FCC:
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r11,r11,0,3,3
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000000;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// beq cr6,0x820e1ff0
	if (cr6.getEQ()) goto loc_820E1FF0;
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// b 0x820e1ff4
	goto loc_820E1FF4;
loc_820E1FF0:
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
loc_820E1FF4:
	// bl 0x820c0c98
	sub_820C0C98(ctx, base);
loc_820E1FF8:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e2204
	if (cr6.getEQ()) goto loc_820E2204;
loc_820E2000:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
loc_820E200C:
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// bne cr6,0x820e20bc
	if (!cr6.getEQ()) goto loc_820E20BC;
	// lwz r31,8(r27)
	r31.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// bl 0x820a5590
	sub_820A5590(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// cmpw cr6,r30,r3
	cr6.compare<int32_t>(r30.s32, ctx.r3.s32, xer);
	// blt cr6,0x820e2204
	if (cr6.getLT()) goto loc_820E2204;
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x820e2050
	if (!cr6.getEQ()) goto loc_820E2050;
	// li r3,26
	ctx.r3.s64 = 26;
	// bl 0x820c0c08
	sub_820C0C08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e2204
	if (cr6.getEQ()) goto loc_820E2204;
loc_820E2050:
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// bne cr6,0x820e206c
	if (!cr6.getEQ()) goto loc_820E206C;
	// li r3,29
	ctx.r3.s64 = 29;
	// bl 0x820c0c08
	sub_820C0C08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e2204
	if (cr6.getEQ()) goto loc_820E2204;
loc_820E206C:
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// bne cr6,0x820e2088
	if (!cr6.getEQ()) goto loc_820E2088;
	// li r3,28
	ctx.r3.s64 = 28;
	// bl 0x820c0c08
	sub_820C0C08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e2204
	if (cr6.getEQ()) goto loc_820E2204;
loc_820E2088:
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// bne cr6,0x820e20a4
	if (!cr6.getEQ()) goto loc_820E20A4;
	// li r3,27
	ctx.r3.s64 = 27;
	// bl 0x820c0c08
	sub_820C0C08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e2204
	if (cr6.getEQ()) goto loc_820E2204;
loc_820E20A4:
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bne cr6,0x820e2000
	if (!cr6.getEQ()) goto loc_820E2000;
	// li r3,3
	ctx.r3.s64 = 3;
	// bl 0x820c0c08
	sub_820C0C08(ctx, base);
	// b 0x820e1ff8
	goto loc_820E1FF8;
loc_820E20BC:
	// cmplwi cr6,r11,20
	cr6.compare<uint32_t>(r11.u32, 20, xer);
	// bne cr6,0x820e21b4
	if (!cr6.getEQ()) goto loc_820E21B4;
	// lbz r11,2(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 2);
	// lwz r10,8(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e20fc
	if (cr6.getEQ()) goto loc_820E20FC;
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// lfs f0,112(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e2000
	if (!cr6.getEQ()) goto loc_820E2000;
loc_820E20FC:
	// li r30,1
	r30.s64 = 1;
	// addi r29,r10,130
	r29.s64 = ctx.r10.s64 + 130;
loc_820E2104:
	// mr r31,r30
	r31.u64 = r30.u64;
	// cmpwi cr6,r30,2
	cr6.compare<int32_t>(r30.s32, 2, xer);
	// bne cr6,0x820e2114
	if (!cr6.getEQ()) goto loc_820E2114;
	// li r31,1
	r31.s64 = 1;
loc_820E2114:
	// lhz r11,0(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e2194
	if (cr6.getEQ()) goto loc_820E2194;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a5590
	sub_820A5590(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// cmpw cr6,r26,r3
	cr6.compare<int32_t>(r26.s32, ctx.r3.s32, xer);
	// blt cr6,0x820e2204
	if (cr6.getLT()) goto loc_820E2204;
	// cmpwi cr6,r31,5
	cr6.compare<int32_t>(r31.s32, 5, xer);
	// bne cr6,0x820e214c
	if (!cr6.getEQ()) goto loc_820E214C;
	// li r3,26
	ctx.r3.s64 = 26;
	// b 0x820e2188
	goto loc_820E2188;
loc_820E214C:
	// cmpwi cr6,r31,7
	cr6.compare<int32_t>(r31.s32, 7, xer);
	// bne cr6,0x820e215c
	if (!cr6.getEQ()) goto loc_820E215C;
	// li r3,29
	ctx.r3.s64 = 29;
	// b 0x820e2188
	goto loc_820E2188;
loc_820E215C:
	// cmpwi cr6,r31,8
	cr6.compare<int32_t>(r31.s32, 8, xer);
	// bne cr6,0x820e216c
	if (!cr6.getEQ()) goto loc_820E216C;
	// li r3,28
	ctx.r3.s64 = 28;
	// b 0x820e2188
	goto loc_820E2188;
loc_820E216C:
	// cmpwi cr6,r31,9
	cr6.compare<int32_t>(r31.s32, 9, xer);
	// bne cr6,0x820e217c
	if (!cr6.getEQ()) goto loc_820E217C;
	// li r3,27
	ctx.r3.s64 = 27;
	// b 0x820e2188
	goto loc_820E2188;
loc_820E217C:
	// cmpwi cr6,r31,10
	cr6.compare<int32_t>(r31.s32, 10, xer);
	// bne cr6,0x820e2194
	if (!cr6.getEQ()) goto loc_820E2194;
	// li r3,3
	ctx.r3.s64 = 3;
loc_820E2188:
	// bl 0x820c0c08
	sub_820C0C08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e2204
	if (cr6.getEQ()) goto loc_820E2204;
loc_820E2194:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// addi r11,r30,-1
	r11.s64 = r30.s64 + -1;
	// cmpwi cr6,r11,13
	cr6.compare<int32_t>(r11.s32, 13, xer);
	// blt cr6,0x820e2104
	if (cr6.getLT()) goto loc_820E2104;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
loc_820E21B4:
	// cmplwi cr6,r11,21
	cr6.compare<uint32_t>(r11.u32, 21, xer);
	// bne cr6,0x820e2204
	if (!cr6.getEQ()) goto loc_820E2204;
	// lwz r31,8(r27)
	r31.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// bl 0x820b40b0
	sub_820B40B0(ctx, base);
	// lfs f0,132(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 132);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f1
	cr6.compare(f0.f64, ctx.f1.f64);
	// ble cr6,0x820e2000
	if (!cr6.getGT()) goto loc_820E2000;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x820e2204
	if (!cr6.getGT()) goto loc_820E2204;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820e21f0
	if (!cr6.getEQ()) goto loc_820E21F0;
	// bl 0x820c15a8
	sub_820C15A8(ctx, base);
	// b 0x820e21fc
	goto loc_820E21FC;
loc_820E21F0:
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x820e2204
	if (!cr6.getEQ()) goto loc_820E2204;
	// bl 0x820c1600
	sub_820C1600(ctx, base);
loc_820E21FC:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e2000
	if (!cr6.getEQ()) goto loc_820E2000;
loc_820E2204:
	// bl 0x820b3d08
	sub_820B3D08(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lfs f0,17904(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17904);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x820e222c
	if (!cr6.getLT()) goto loc_820E222C;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,4888(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4888);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820e2000
	if (cr6.getLT()) goto loc_820E2000;
loc_820E222C:
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lfs f0,88(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 88);
	f0.f64 = double(temp.f32);
	// lwz r10,-1364(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f13,96(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 96);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,92(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 92);
	ctx.f12.f64 = double(temp.f32);
	// lfs f1,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// fsubs f0,f0,f1
	f0.f64 = double(float(f0.f64 - ctx.f1.f64));
	// lfs f2,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// fsubs f13,f13,f2
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f2.f64));
	// lwz r10,4888(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4888);
	// lfs f11,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	ctx.f11.f64 = double(temp.f32);
	// cmpwi cr6,r10,60
	cr6.compare<int32_t>(ctx.r10.s32, 60, xer);
	// fsubs f12,f12,f11
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// blt cr6,0x820e22ac
	if (cr6.getLT()) goto loc_820E22AC;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,17900(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 17900);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820e2000
	if (cr6.getGT()) goto loc_820E2000;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,17896(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 17896);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f12,f0
	cr6.compare(ctx.f12.f64, f0.f64);
	// blt cr6,0x820e2000
	if (cr6.getLT()) goto loc_820E2000;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,14052(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14052);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f12,f0
	cr6.compare(ctx.f12.f64, f0.f64);
	// ble cr6,0x820e22dc
	if (!cr6.getGT()) goto loc_820E22DC;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
loc_820E22AC:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,14056(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14056);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820e2000
	if (cr6.getGT()) goto loc_820E2000;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,3452(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3452);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f12,f0
	cr6.compare(ctx.f12.f64, f0.f64);
	// blt cr6,0x820e2000
	if (cr6.getLT()) goto loc_820E2000;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,2940(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2940);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f12,f0
	cr6.compare(ctx.f12.f64, f0.f64);
	// bgt cr6,0x820e2000
	if (cr6.getGT()) goto loc_820E2000;
loc_820E22DC:
	// lwz r10,12(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 12);
	// rlwinm r10,r10,0,19,19
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x1000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e233c
	if (!cr6.getEQ()) goto loc_820E233C;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// li r8,2
	ctx.r8.s64 = 2;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f4,20(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 20);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,12(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 12);
	ctx.f3.f64 = double(temp.f32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f8,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f8.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f7,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f7.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f6,3112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	ctx.f6.f64 = double(temp.f32);
	// fmr f5,f6
	ctx.f5.f64 = ctx.f6.f64;
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e2000
	if (cr6.getEQ()) goto loc_820E2000;
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x820e2000
	if (!cr6.getEQ()) goto loc_820E2000;
loc_820E233C:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820e1868
	sub_820E1868(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,1
	cr6.compare<int32_t>(r31.s32, 1, xer);
	// bne cr6,0x820e2398
	if (!cr6.getEQ()) goto loc_820E2398;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e2398
	if (cr6.getEQ()) goto loc_820E2398;
	// lwz r3,56(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 56);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x820e2384
	if (cr6.getEQ()) goto loc_820E2384;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8216bce8
	sub_8216BCE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
loc_820E2384:
	// lwz r3,60(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 60);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x820e2398
	if (cr6.getEQ()) goto loc_820E2398;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x8216bce8
	sub_8216BCE8(ctx, base);
loc_820E2398:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820E23A8"))) PPC_WEAK_FUNC(sub_820E23A8);
PPC_FUNC_IMPL(__imp__sub_820E23A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// lis r26,-32013
	r26.s64 = -2098003968;
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// mr r22,r4
	r22.u64 = ctx.r4.u64;
	// mr r23,r5
	r23.u64 = ctx.r5.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r25,-1
	r25.s64 = -1;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r31,17288(r26)
	r31.u64 = PPC_LOAD_U32(r26.u32 + 17288);
	// li r24,-1
	r24.s64 = -1;
	// addi r29,r11,5664
	r29.s64 = r11.s64 + 5664;
	// lis r11,-30584
	r11.s64 = -2004353024;
	// ori r28,r11,34953
	r28.u64 = r11.u64 | 34953;
loc_820E23EC:
	// mulli r30,r31,140
	r30.s64 = r31.s64 * 140;
	// addi r27,r29,16
	r27.s64 = r29.s64 + 16;
	// lwzx r10,r30,r27
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r27.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e244c
	if (!cr6.getEQ()) goto loc_820E244C;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// bne cr6,0x820e252c
	if (!cr6.getEQ()) goto loc_820E252C;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// bne cr6,0x820e252c
	if (!cr6.getEQ()) goto loc_820E252C;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x820e2558
	if (cr6.getLT()) goto loc_820E2558;
	// mulli r10,r31,140
	ctx.r10.s64 = r31.s64 * 140;
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// add r3,r10,r29
	ctx.r3.u64 = ctx.r10.u64 + r29.u64;
	// mulhw r10,r11,r28
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r28.s32)) >> 32;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// srawi r10,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 4;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mulli r10,r10,30
	ctx.r10.s64 = ctx.r10.s64 * 30;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,17288(r26)
	PPC_STORE_U32(r26.u32 + 17288, r11.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
loc_820E244C:
	// addi r11,r29,100
	r11.s64 = r29.s64 + 100;
	// lwzx r11,r30,r11
	r11.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e252c
	if (!cr6.getEQ()) goto loc_820E252C;
	// addi r11,r29,2
	r11.s64 = r29.s64 + 2;
	// lbzx r11,r30,r11
	r11.u64 = PPC_LOAD_U8(r30.u32 + r11.u32);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e252c
	if (!cr6.getEQ()) goto loc_820E252C;
	// addi r11,r29,130
	r11.s64 = r29.s64 + 130;
	// lhzx r11,r30,r11
	r11.u64 = PPC_LOAD_U16(r30.u32 + r11.u32);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x820e2494
	if (cr6.getGT()) goto loc_820E2494;
	// lwz r11,32(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e24e0
	if (cr6.getEQ()) goto loc_820E24E0;
loc_820E2494:
	// addi r11,r29,128
	r11.s64 = r29.s64 + 128;
	// lbzx r11,r30,r11
	r11.u64 = PPC_LOAD_U8(r30.u32 + r11.u32);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,29
	cr6.compare<int32_t>(r11.s32, 29, xer);
	// beq cr6,0x820e24b8
	if (cr6.getEQ()) goto loc_820E24B8;
	// cmpwi cr6,r11,28
	cr6.compare<int32_t>(r11.s32, 28, xer);
	// beq cr6,0x820e24b8
	if (cr6.getEQ()) goto loc_820E24B8;
	// cmpwi cr6,r11,27
	cr6.compare<int32_t>(r11.s32, 27, xer);
	// bne cr6,0x820e252c
	if (!cr6.getEQ()) goto loc_820E252C;
loc_820E24B8:
	// lwz r11,32(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e24e0
	if (cr6.getEQ()) goto loc_820E24E0;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// beq cr6,0x820e24e0
	if (cr6.getEQ()) goto loc_820E24E0;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// beq cr6,0x820e24e0
	if (cr6.getEQ()) goto loc_820E24E0;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bne cr6,0x820e252c
	if (!cr6.getEQ()) goto loc_820E252C;
loc_820E24E0:
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x820e2500
	if (cr6.getEQ()) goto loc_820E2500;
	// addi r11,r29,20
	r11.s64 = r29.s64 + 20;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// lwzx r3,r30,r11
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// bl 0x82118510
	sub_82118510(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e252c
	if (cr6.getEQ()) goto loc_820E252C;
loc_820E2500:
	// lwzx r11,r30,r27
	r11.u64 = PPC_LOAD_U32(r30.u32 + r27.u32);
	// lbz r11,1(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e2520
	if (!cr6.getEQ()) goto loc_820E2520;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bge cr6,0x820e2520
	if (!cr6.getLT()) goto loc_820E2520;
	// mr r25,r31
	r25.u64 = r31.u64;
loc_820E2520:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// bge cr6,0x820e252c
	if (!cr6.getLT()) goto loc_820E252C;
	// mr r24,r31
	r24.u64 = r31.u64;
loc_820E252C:
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// mulhw r10,r11,r28
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r28.s32)) >> 32;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// srawi r10,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 4;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mulli r10,r10,30
	ctx.r10.s64 = ctx.r10.s64 * 30;
	// subf r31,r10,r11
	r31.s64 = r11.s64 - ctx.r10.s64;
	// lwz r11,17288(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 17288);
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// bne cr6,0x820e23ec
	if (!cr6.getEQ()) goto loc_820E23EC;
loc_820E2558:
	// mr r8,r23
	ctx.r8.u64 = r23.u64;
	// mr r7,r22
	ctx.r7.u64 = r22.u64;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x820d0718
	sub_820D0718(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820e2698
	if (!cr6.getEQ()) goto loc_820E2698;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// blt cr6,0x820e25d8
	if (cr6.getLT()) goto loc_820E25D8;
	// mulli r31,r25,140
	r31.s64 = r25.s64 * 140;
	// addi r11,r29,16
	r11.s64 = r29.s64 + 16;
	// lwzx r11,r31,r11
	r11.u64 = PPC_LOAD_U32(r31.u32 + r11.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e25a8
	if (cr6.getEQ()) goto loc_820E25A8;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// add r3,r31,r29
	ctx.r3.u64 = r31.u64 + r29.u64;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
loc_820E25A8:
	// addi r11,r25,1
	r11.s64 = r25.s64 + 1;
	// add r3,r31,r29
	ctx.r3.u64 = r31.u64 + r29.u64;
	// mulhw r10,r11,r28
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r28.s32)) >> 32;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// srawi r10,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 4;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mulli r10,r10,30
	ctx.r10.s64 = ctx.r10.s64 * 30;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,17288(r26)
	PPC_STORE_U32(r26.u32 + 17288, r11.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
loc_820E25D8:
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e2608
	if (cr6.getEQ()) goto loc_820E2608;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e2698
	if (cr6.getEQ()) goto loc_820E2698;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
loc_820E2608:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// blt cr6,0x820e2664
	if (cr6.getLT()) goto loc_820E2664;
	// mulli r31,r24,140
	r31.s64 = r24.s64 * 140;
	// addi r11,r29,16
	r11.s64 = r29.s64 + 16;
	// lwzx r11,r31,r11
	r11.u64 = PPC_LOAD_U32(r31.u32 + r11.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e2634
	if (cr6.getEQ()) goto loc_820E2634;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// add r3,r31,r29
	ctx.r3.u64 = r31.u64 + r29.u64;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
loc_820E2634:
	// addi r11,r24,1
	r11.s64 = r24.s64 + 1;
	// add r3,r31,r29
	ctx.r3.u64 = r31.u64 + r29.u64;
	// mulhw r10,r11,r28
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r28.s32)) >> 32;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// srawi r10,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 4;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mulli r10,r10,30
	ctx.r10.s64 = ctx.r10.s64 * 30;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,17288(r26)
	PPC_STORE_U32(r26.u32 + 17288, r11.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
loc_820E2664:
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e2694
	if (cr6.getEQ()) goto loc_820E2694;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e2698
	if (cr6.getEQ()) goto loc_820E2698;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
loc_820E2694:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820E2698:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_820E26A0"))) PPC_WEAK_FUNC(sub_820E26A0);
PPC_FUNC_IMPL(__imp__sub_820E26A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// lis r26,-32013
	r26.s64 = -2098003968;
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// mr r22,r4
	r22.u64 = ctx.r4.u64;
	// mr r23,r5
	r23.u64 = ctx.r5.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r25,-1
	r25.s64 = -1;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r31,17292(r26)
	r31.u64 = PPC_LOAD_U32(r26.u32 + 17292);
	// li r24,-1
	r24.s64 = -1;
	// addi r28,r11,1008
	r28.s64 = r11.s64 + 1008;
	// lis r11,26214
	r11.s64 = 1717960704;
	// ori r30,r11,26215
	r30.u64 = r11.u64 | 26215;
loc_820E26E4:
	// rlwinm r29,r31,7,0,24
	r29.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 7) & 0xFFFFFF80;
	// addi r27,r28,16
	r27.s64 = r28.s64 + 16;
	// lwzx r11,r29,r27
	r11.u64 = PPC_LOAD_U32(r29.u32 + r27.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e2748
	if (!cr6.getEQ()) goto loc_820E2748;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// bne cr6,0x820e27b4
	if (!cr6.getEQ()) goto loc_820E27B4;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// bne cr6,0x820e27b4
	if (!cr6.getEQ()) goto loc_820E27B4;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x820e27e4
	if (cr6.getLT()) goto loc_820E27E4;
	// rlwinm r10,r31,7,0,24
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 7) & 0xFFFFFF80;
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// add r3,r10,r28
	ctx.r3.u64 = ctx.r10.u64 + r28.u64;
	// mulhw r10,r11,r30
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r30.s32)) >> 32;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,17292(r26)
	PPC_STORE_U32(r26.u32 + 17292, r11.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
loc_820E2748:
	// addi r10,r28,100
	ctx.r10.s64 = r28.s64 + 100;
	// lwzx r10,r29,r10
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + ctx.r10.u32);
	// rlwinm r10,r10,0,24,24
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e27b4
	if (!cr6.getEQ()) goto loc_820E27B4;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e27b4
	if (!cr6.getEQ()) goto loc_820E27B4;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x820e2788
	if (cr6.getEQ()) goto loc_820E2788;
	// addi r11,r28,20
	r11.s64 = r28.s64 + 20;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// lwzx r3,r29,r11
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + r11.u32);
	// bl 0x82118510
	sub_82118510(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e27b4
	if (cr6.getEQ()) goto loc_820E27B4;
loc_820E2788:
	// lwzx r11,r29,r27
	r11.u64 = PPC_LOAD_U32(r29.u32 + r27.u32);
	// lbz r11,1(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e27a8
	if (!cr6.getEQ()) goto loc_820E27A8;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bge cr6,0x820e27a8
	if (!cr6.getLT()) goto loc_820E27A8;
	// mr r25,r31
	r25.u64 = r31.u64;
loc_820E27A8:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// bge cr6,0x820e27b4
	if (!cr6.getLT()) goto loc_820E27B4;
	// mr r24,r31
	r24.u64 = r31.u64;
loc_820E27B4:
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// mulhw r10,r11,r30
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r30.s32)) >> 32;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r31,r10,r11
	r31.s64 = r11.s64 - ctx.r10.s64;
	// lwz r11,17292(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 17292);
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// bne cr6,0x820e26e4
	if (!cr6.getEQ()) goto loc_820E26E4;
loc_820E27E4:
	// mr r8,r23
	ctx.r8.u64 = r23.u64;
	// mr r7,r22
	ctx.r7.u64 = r22.u64;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r3,17
	ctx.r3.s64 = 17;
	// bl 0x820d0718
	sub_820D0718(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820e292c
	if (!cr6.getEQ()) goto loc_820E292C;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// blt cr6,0x820e2868
	if (cr6.getLT()) goto loc_820E2868;
	// rlwinm r31,r25,7,0,24
	r31.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 7) & 0xFFFFFF80;
	// addi r11,r28,16
	r11.s64 = r28.s64 + 16;
	// lwzx r11,r31,r11
	r11.u64 = PPC_LOAD_U32(r31.u32 + r11.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e2834
	if (cr6.getEQ()) goto loc_820E2834;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// add r3,r31,r28
	ctx.r3.u64 = r31.u64 + r28.u64;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
loc_820E2834:
	// addi r11,r25,1
	r11.s64 = r25.s64 + 1;
	// add r3,r31,r28
	ctx.r3.u64 = r31.u64 + r28.u64;
	// mulhw r10,r11,r30
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r30.s32)) >> 32;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,17292(r26)
	PPC_STORE_U32(r26.u32 + 17292, r11.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
loc_820E2868:
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e2898
	if (cr6.getEQ()) goto loc_820E2898;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e292c
	if (cr6.getEQ()) goto loc_820E292C;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
loc_820E2898:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// blt cr6,0x820e28f8
	if (cr6.getLT()) goto loc_820E28F8;
	// rlwinm r31,r24,7,0,24
	r31.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 7) & 0xFFFFFF80;
	// addi r11,r28,16
	r11.s64 = r28.s64 + 16;
	// lwzx r11,r31,r11
	r11.u64 = PPC_LOAD_U32(r31.u32 + r11.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e28c4
	if (cr6.getEQ()) goto loc_820E28C4;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// add r3,r31,r28
	ctx.r3.u64 = r31.u64 + r28.u64;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
loc_820E28C4:
	// addi r11,r24,1
	r11.s64 = r24.s64 + 1;
	// add r3,r31,r28
	ctx.r3.u64 = r31.u64 + r28.u64;
	// mulhw r10,r11,r30
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r30.s32)) >> 32;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,17292(r26)
	PPC_STORE_U32(r26.u32 + 17292, r11.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
loc_820E28F8:
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e2928
	if (cr6.getEQ()) goto loc_820E2928;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e292c
	if (cr6.getEQ()) goto loc_820E292C;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
loc_820E2928:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820E292C:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_820E2938"))) PPC_WEAK_FUNC(sub_820E2938);
PPC_FUNC_IMPL(__imp__sub_820E2938) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r11,r11,9864
	r11.s64 = r11.s64 + 9864;
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
loc_820E2958:
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x820e2a38
	if (cr6.getEQ()) goto loc_820E2A38;
	// addi r10,r10,132
	ctx.r10.s64 = ctx.r10.s64 + 132;
	// addi r8,r11,2656
	ctx.r8.s64 = r11.s64 + 2656;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmpw cr6,r10,r8
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r8.s32, xer);
	// blt cr6,0x820e2958
	if (cr6.getLT()) goto loc_820E2958;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
loc_820E2980:
	// lwz r8,84(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 84);
	// rlwinm r8,r8,0,24,24
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x820e29c0
	if (!cr6.getEQ()) goto loc_820E29C0;
	// lbz r8,-14(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + -14);
	// rlwinm r8,r8,0,29,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x820e29c0
	if (!cr6.getEQ()) goto loc_820E29C0;
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r7,32(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 32);
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x820e29c0
	if (!cr6.getEQ()) goto loc_820E29C0;
	// lbz r8,1(r8)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r8.u32 + 1);
	// rlwinm r8,r8,0,30,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x820e2a54
	if (cr6.getEQ()) goto loc_820E2A54;
loc_820E29C0:
	// addi r10,r10,132
	ctx.r10.s64 = ctx.r10.s64 + 132;
	// addi r8,r11,2656
	ctx.r8.s64 = r11.s64 + 2656;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmpw cr6,r10,r8
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r8.s32, xer);
	// blt cr6,0x820e2980
	if (cr6.getLT()) goto loc_820E2980;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r10,r11,2
	ctx.r10.s64 = r11.s64 + 2;
loc_820E29DC:
	// lwz r8,98(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 98);
	// rlwinm r8,r8,0,24,24
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x820e2a0c
	if (!cr6.getEQ()) goto loc_820E2A0C;
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// rlwinm r8,r8,0,29,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x820e2a0c
	if (!cr6.getEQ()) goto loc_820E2A0C;
	// lwz r8,14(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 14);
	// lwz r8,32(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 32);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x820e2a54
	if (cr6.getEQ()) goto loc_820E2A54;
loc_820E2A0C:
	// addi r10,r10,132
	ctx.r10.s64 = ctx.r10.s64 + 132;
	// addi r8,r11,2642
	ctx.r8.s64 = r11.s64 + 2642;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmpw cr6,r10,r8
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r8.s32, xer);
	// blt cr6,0x820e29dc
	if (cr6.getLT()) goto loc_820E29DC;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820E2A38:
	// mulli r10,r9,132
	ctx.r10.s64 = ctx.r9.s64 * 132;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820E2A54:
	// mulli r10,r9,132
	ctx.r10.s64 = ctx.r9.s64 * 132;
	// add r31,r10,r11
	r31.u64 = ctx.r10.u64 + r11.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E2A88"))) PPC_WEAK_FUNC(sub_820E2A88);
PPC_FUNC_IMPL(__imp__sub_820E2A88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x820d4df0
	sub_820D4DF0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820e2ac4
	if (cr6.getEQ()) goto loc_820E2AC4;
	// li r11,4
	r11.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// bl 0x820dce70
	sub_820DCE70(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_820E2AC4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E2AD8"))) PPC_WEAK_FUNC(sub_820E2AD8);
PPC_FUNC_IMPL(__imp__sub_820E2AD8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820d4df0
	sub_820D4DF0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x820e2b68
	if (cr6.getEQ()) goto loc_820E2B68;
	// li r11,4
	r11.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// stb r11,0(r30)
	PPC_STORE_U8(r30.u32 + 0, r11.u8);
	// bl 0x820dce70
	sub_820DCE70(ctx, base);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e2b64
	if (cr6.getEQ()) goto loc_820E2B64;
	// lhz r11,0(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// lfs f13,20(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f12,f0
	ctx.f12.f64 = double(float(f0.f64));
	// lfs f0,16604(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16604);
	f0.f64 = double(temp.f32);
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f1,f0,f13
	ctx.f1.f64 = double(float(f0.f64 * ctx.f13.f64));
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820dcc08
	sub_820DCC08(ctx, base);
loc_820E2B64:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_820E2B68:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820E2B70"))) PPC_WEAK_FUNC(sub_820E2B70);
PPC_FUNC_IMPL(__imp__sub_820E2B70) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r11,116(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// lhz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// extsh r30,r10
	r30.s64 = ctx.r10.s16;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,15620(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15620);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,116(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 116, temp.u32);
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// rlwinm r10,r30,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwzx r5,r10,r11
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x820e2ad8
	sub_820E2AD8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820E2BE8"))) PPC_WEAK_FUNC(sub_820E2BE8);
PPC_FUNC_IMPL(__imp__sub_820E2BE8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// lis r11,-32164
	r11.s64 = -2107899904;
	// rlwinm r10,r27,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// lwzx r29,r10,r11
	r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// bl 0x820cca48
	sub_820CCA48(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82118550
	sub_82118550(ctx, base);
	// cntlzw r11,r30
	r11.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// cntlzw r11,r28
	r11.u64 = r28.u32 == 0 ? 32 : __builtin_clz(r28.u32);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x820e23a8
	sub_820E23A8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x820e2c50
	if (!cr6.getEQ()) goto loc_820E2C50;
	// bl 0x820cca48
	sub_820CCA48(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
loc_820E2C50:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x820e2c64
	if (!cr6.getEQ()) goto loc_820E2C64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82118550
	sub_82118550(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
loc_820E2C64:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820e2db4
	if (cr6.getEQ()) goto loc_820E2DB4;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x820e2db4
	if (cr6.getEQ()) goto loc_820E2DB4;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820e2dc4
	if (cr6.getEQ()) goto loc_820E2DC4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,8
	ctx.r10.s64 = 8;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r5,140
	ctx.r5.s64 = 140;
	// lfs f13,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r10.u8);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stfs f13,104(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// stfs f13,124(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// stfs f13,144(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// li r11,256
	r11.s64 = 256;
	// sth r10,86(r1)
	PPC_STORE_U16(ctx.r1.u32 + 86, ctx.r10.u16);
	// li r10,255
	ctx.r10.s64 = 255;
	// stfs f0,108(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// stfs f0,116(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// sth r11,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, r11.u16);
	// li r11,0
	r11.s64 = 0;
	// stb r10,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r10.u8);
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// stb r10,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r10.u8);
	// stfs f0,128(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stb r10,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r10.u8);
	// stfs f0,132(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// stb r10,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r10.u8);
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// stb r10,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r10.u8);
	// stfs f0,140(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// stb r10,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r10.u8);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stfs f0,148(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, r11.u8);
	// stfs f0,152(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// sth r11,84(r1)
	PPC_STORE_U16(ctx.r1.u32 + 84, r11.u16);
	// stfs f0,156(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 156, temp.u32);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// stfs f0,160(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// stfs f0,168(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// stfs f0,172(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 172, temp.u32);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// stfs f0,176(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 176, temp.u32);
	// stw r11,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r11.u32);
	// stfs f0,192(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// stw r11,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r11.u32);
	// lfs f0,14108(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14108);
	f0.f64 = double(temp.f32);
	// stw r11,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, r11.u32);
	// stfs f13,164(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// stb r11,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, r11.u8);
	// stfs f0,196(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 196, temp.u32);
	// stb r11,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, r11.u8);
	// stb r11,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, r11.u8);
	// stb r10,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r10.u8);
	// sth r10,210(r1)
	PPC_STORE_U16(ctx.r1.u32 + 210, ctx.r10.u16);
	// stw r11,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, r11.u32);
	// stw r11,216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 216, r11.u32);
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// stb r26,128(r31)
	PPC_STORE_U8(r31.u32 + 128, r26.u8);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// sth r27,4(r31)
	PPC_STORE_U16(r31.u32 + 4, r27.u16);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d4df0
	sub_820D4DF0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e2da8
	if (cr6.getEQ()) goto loc_820E2DA8;
	// li r11,4
	r11.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// stb r11,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, r11.u8);
	// bl 0x820dce70
	sub_820DCE70(ctx, base);
loc_820E2DA8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x823ed180
	return;
loc_820E2DB4:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820e2dc4
	if (cr6.getEQ()) goto loc_820E2DC4;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x821188f8
	sub_821188F8(ctx, base);
loc_820E2DC4:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x820e2dd4
	if (cr6.getEQ()) goto loc_820E2DD4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820ccb00
	sub_820CCB00(ctx, base);
loc_820E2DD4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820E2DE0"))) PPC_WEAK_FUNC(sub_820E2DE0);
PPC_FUNC_IMPL(__imp__sub_820E2DE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r8
	r30.u64 = ctx.r8.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// mr r24,r6
	r24.u64 = ctx.r6.u64;
	// mr r31,r7
	r31.u64 = ctx.r7.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x820e2e24
	if (!cr6.getEQ()) goto loc_820E2E24;
	// lis r11,-32164
	r11.s64 = -2107899904;
	// rlwinm r10,r26,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwzx r30,r10,r11
	r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
loc_820E2E24:
	// bl 0x820cca48
	sub_820CCA48(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82118550
	sub_82118550(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820e2e5c
	if (!cr6.getEQ()) goto loc_820E2E5C;
	// cntlzw r11,r29
	r11.u64 = r29.u32 == 0 ? 32 : __builtin_clz(r29.u32);
	// cntlzw r10,r28
	ctx.r10.u64 = r28.u32 == 0 ? 32 : __builtin_clz(r28.u32);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// rlwinm r3,r10,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// bl 0x820e23a8
	sub_820E23A8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
loc_820E2E5C:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x820e2e6c
	if (!cr6.getEQ()) goto loc_820E2E6C;
	// bl 0x820cca48
	sub_820CCA48(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
loc_820E2E6C:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x820e2e80
	if (!cr6.getEQ()) goto loc_820E2E80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82118550
	sub_82118550(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
loc_820E2E80:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820e2fc8
	if (cr6.getEQ()) goto loc_820E2FC8;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820e2fc8
	if (cr6.getEQ()) goto loc_820E2FC8;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x820e2fd8
	if (cr6.getEQ()) goto loc_820E2FD8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,8
	ctx.r10.s64 = 8;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r5,140
	ctx.r5.s64 = 140;
	// lfs f13,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r10.u8);
	// li r10,16385
	ctx.r10.s64 = 16385;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stfs f13,104(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// stfs f13,124(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// stfs f13,144(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// li r11,256
	r11.s64 = 256;
	// sth r10,86(r1)
	PPC_STORE_U16(ctx.r1.u32 + 86, ctx.r10.u16);
	// li r10,255
	ctx.r10.s64 = 255;
	// stfs f0,108(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// stfs f0,116(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// sth r11,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, r11.u16);
	// li r11,0
	r11.s64 = 0;
	// stb r10,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r10.u8);
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// stb r10,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r10.u8);
	// stfs f0,128(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stb r10,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r10.u8);
	// stfs f0,132(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// stb r10,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r10.u8);
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// stb r10,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r10.u8);
	// stfs f0,140(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// stb r10,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r10.u8);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stfs f0,148(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, r11.u8);
	// stfs f0,152(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// sth r11,84(r1)
	PPC_STORE_U16(ctx.r1.u32 + 84, r11.u16);
	// stfs f0,156(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 156, temp.u32);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// stfs f0,160(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// stfs f0,168(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// stfs f0,172(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 172, temp.u32);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// stfs f0,176(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 176, temp.u32);
	// stw r11,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r11.u32);
	// stfs f0,192(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// stw r11,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r11.u32);
	// lfs f0,14108(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14108);
	f0.f64 = double(temp.f32);
	// stw r11,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, r11.u32);
	// stfs f13,164(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// stb r11,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, r11.u8);
	// stfs f0,196(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 196, temp.u32);
	// stb r11,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, r11.u8);
	// stb r11,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, r11.u8);
	// stb r10,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r10.u8);
	// sth r10,210(r1)
	PPC_STORE_U16(ctx.r1.u32 + 210, ctx.r10.u16);
	// stw r11,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, r11.u32);
	// stw r11,216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 216, r11.u32);
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// ori r9,r24,16384
	ctx.r9.u64 = r24.u64 | 16384;
	// stb r25,128(r31)
	PPC_STORE_U8(r31.u32 + 128, r25.u8);
	// sth r26,4(r31)
	PPC_STORE_U16(r31.u32 + 4, r26.u16);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lhz r11,0(r27)
	r11.u64 = PPC_LOAD_U16(r27.u32 + 0);
	// sth r11,6(r31)
	PPC_STORE_U16(r31.u32 + 6, r11.u16);
	// bl 0x820e2ad8
	sub_820E2AD8(ctx, base);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed178
	return;
loc_820E2FC8:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x820e2fd8
	if (cr6.getEQ()) goto loc_820E2FD8;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821188f8
	sub_821188F8(ctx, base);
loc_820E2FD8:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// beq cr6,0x820e2fec
	if (cr6.getEQ()) goto loc_820E2FEC;
	// bl 0x820ccb00
	sub_820CCB00(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_820E2FEC:
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_820E2FF8"))) PPC_WEAK_FUNC(sub_820E2FF8);
PPC_FUNC_IMPL(__imp__sub_820E2FF8) {
	PPC_FUNC_PROLOGUE();
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// b 0x820e2de0
	sub_820E2DE0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820E3008"))) PPC_WEAK_FUNC(sub_820E3008);
PPC_FUNC_IMPL(__imp__sub_820E3008) {
	PPC_FUNC_PROLOGUE();
	// b 0x820e1e08
	sub_820E1E08(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820E3010"))) PPC_WEAK_FUNC(sub_820E3010);
PPC_FUNC_IMPL(__imp__sub_820E3010) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820de3c8
	sub_820DE3C8(ctx, base);
	// lhz r11,154(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 154);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x820e3068
	if (!cr6.getEQ()) goto loc_820E3068;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820e00b8
	sub_820E00B8(ctx, base);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3068
	if (cr6.getEQ()) goto loc_820E3068;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// ori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 | 1;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// addi r3,r11,32
	ctx.r3.s64 = r11.s64 + 32;
	// bl 0x8210b2b0
	sub_8210B2B0(ctx, base);
loc_820E3068:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E3080"))) PPC_WEAK_FUNC(sub_820E3080);
PPC_FUNC_IMPL(__imp__sub_820E3080) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -72, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r27,0
	r27.s64 = 0;
	// li r26,1
	r26.s64 = 1;
	// mr r25,r27
	r25.u64 = r27.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820e3118
	if (cr6.getEQ()) goto loc_820E3118;
loc_820E30AC:
	// mr r3,r6
	ctx.r3.u64 = ctx.r6.u64;
	// lfs f0,180(r6)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 180);
	f0.f64 = double(temp.f32);
	// stfs f0,248(r6)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r6.u32 + 248, temp.u32);
	// bl 0x820dec20
	sub_820DEC20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e30c8
	if (cr6.getEQ()) goto loc_820E30C8;
	// li r25,1
	r25.s64 = 1;
loc_820E30C8:
	// lwz r6,200(r6)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + 200);
	// cmplw cr6,r6,r28
	cr6.compare<uint32_t>(ctx.r6.u32, r28.u32, xer);
	// beq cr6,0x820e30dc
	if (cr6.getEQ()) goto loc_820E30DC;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x820e30ac
	if (!cr6.getEQ()) goto loc_820E30AC;
loc_820E30DC:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x820e3118
	if (cr6.getEQ()) goto loc_820E3118;
	// mr r31,r28
	r31.u64 = r28.u64;
loc_820E30E8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820dd278
	sub_820DD278(ctx, base);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820d7eb0
	sub_820D7EB0(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820e3118
	if (cr6.getEQ()) goto loc_820E3118;
	// lwz r31,200(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 200);
	// cmplw cr6,r31,r28
	cr6.compare<uint32_t>(r31.u32, r28.u32, xer);
	// beq cr6,0x820e3118
	if (cr6.getEQ()) goto loc_820E3118;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820e30e8
	if (!cr6.getEQ()) goto loc_820E30E8;
loc_820E3118:
	// mr r31,r28
	r31.u64 = r28.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820e3234
	if (cr6.getEQ()) goto loc_820E3234;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
loc_820E3130:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x820e3218
	if (cr6.getEQ()) goto loc_820E3218;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820e3204
	if (cr6.getEQ()) goto loc_820E3204;
	// lbz r11,188(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 188);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820e317c
	if (!cr6.getEQ()) goto loc_820E317C;
	// lfs f0,180(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 180);
	f0.f64 = double(temp.f32);
	// lfs f13,132(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 132);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820e31b8
	if (cr6.getLT()) goto loc_820E31B8;
	// stfs f31,184(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 184, temp.u32);
	// stb r27,188(r31)
	PPC_STORE_U8(r31.u32 + 188, r27.u8);
	// lwz r11,-6376(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -6376);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,232(r31)
	PPC_STORE_U32(r31.u32 + 232, r11.u32);
	// bl 0x820e3010
	sub_820E3010(ctx, base);
	// b 0x820e31b8
	goto loc_820E31B8;
loc_820E317C:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820e31b8
	if (!cr6.getEQ()) goto loc_820E31B8;
	// lfs f0,180(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bgt cr6,0x820e31b8
	if (cr6.getGT()) goto loc_820E31B8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stfs f31,184(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 184, temp.u32);
	// stb r27,188(r31)
	PPC_STORE_U8(r31.u32 + 188, r27.u8);
	// stw r27,232(r31)
	PPC_STORE_U32(r31.u32 + 232, r27.u32);
	// bl 0x820de560
	sub_820DE560(ctx, base);
	// lwz r3,236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 236);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820e31b8
	if (cr6.getLT()) goto loc_820E31B8;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x821143f8
	sub_821143F8(ctx, base);
loc_820E31B8:
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// addi r30,r31,124
	r30.s64 = r31.s64 + 124;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwinm r11,r11,0,21,21
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e3218
	if (!cr6.getEQ()) goto loc_820E3218;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x820d4ad0
	sub_820D4AD0(ctx, base);
	// lbz r11,0(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// lbz r10,1(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 1);
	// lbz r9,2(r30)
	ctx.r9.u64 = PPC_LOAD_U8(r30.u32 + 2);
	// rlwinm r11,r11,31,1,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r9,r9,31,1,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 31) & 0x7FFFFFFF;
	// stb r11,0(r30)
	PPC_STORE_U8(r30.u32 + 0, r11.u8);
	// stb r10,1(r30)
	PPC_STORE_U8(r30.u32 + 1, ctx.r10.u8);
	// stb r9,2(r30)
	PPC_STORE_U8(r30.u32 + 2, ctx.r9.u8);
	// b 0x820e3218
	goto loc_820E3218;
loc_820E3204:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f0,248(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 248);
	f0.f64 = double(temp.f32);
	// stfs f0,180(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 180, temp.u32);
	// stfs f31,184(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 184, temp.u32);
	// bl 0x820dd278
	sub_820DD278(ctx, base);
loc_820E3218:
	// lwz r11,-6376(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -6376);
	// stw r11,248(r31)
	PPC_STORE_U32(r31.u32 + 248, r11.u32);
	// lwz r31,200(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 200);
	// cmplw cr6,r31,r28
	cr6.compare<uint32_t>(r31.u32, r28.u32, xer);
	// beq cr6,0x820e3234
	if (cr6.getEQ()) goto loc_820E3234;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820e3130
	if (!cr6.getEQ()) goto loc_820E3130;
loc_820E3234:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_820E3240"))) PPC_WEAK_FUNC(sub_820E3240);
PPC_FUNC_IMPL(__imp__sub_820E3240) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lwz r31,8(r29)
	r31.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lwz r11,156(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 156);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e32c4
	if (cr6.getEQ()) goto loc_820E32C4;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x820c14c0
	sub_820C14C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e32c4
	if (!cr6.getEQ()) goto loc_820E32C4;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820df380
	sub_820DF380(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// rlwinm r10,r11,0,3,3
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000000;
	// beq cr6,0x820e32b0
	if (cr6.getEQ()) goto loc_820E32B0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e32c8
	if (cr6.getEQ()) goto loc_820E32C8;
	// rlwinm r11,r11,0,4,4
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e32c8
	if (!cr6.getEQ()) goto loc_820E32C8;
	// b 0x820e32c4
	goto loc_820E32C4;
loc_820E32B0:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e32c8
	if (!cr6.getEQ()) goto loc_820E32C8;
	// rlwinm r11,r11,0,4,4
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e32c8
	if (cr6.getEQ()) goto loc_820E32C8;
loc_820E32C4:
	// li r30,1
	r30.s64 = 1;
loc_820E32C8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820dfd48
	sub_820DFD48(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e3300
	if (cr6.getEQ()) goto loc_820E3300;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x820e3300
	if (cr6.getEQ()) goto loc_820E3300;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820df430
	sub_820DF430(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820df1b8
	sub_820DF1B8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820E3300:
	// lbz r11,188(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 188);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e3394
	if (!cr6.getEQ()) goto loc_820E3394;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,180(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 180);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x820e3394
	if (!cr6.getLT()) goto loc_820E3394;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e335c
	if (!cr6.getEQ()) goto loc_820E335C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c1830
	sub_820C1830(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e334c
	if (cr6.getEQ()) goto loc_820E334C;
	// lwz r3,28(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820e3354
	if (!cr6.getEQ()) goto loc_820E3354;
loc_820E334C:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,42048
	ctx.r3.u64 = ctx.r3.u64 | 42048;
loc_820E3354:
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
loc_820E335C:
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// ori r11,r11,16384
	r11.u64 = r11.u64 | 16384;
	// lwz r9,156(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 156);
	// ori r10,r10,8
	ctx.r10.u64 = ctx.r10.u64 | 8;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
	// stw r10,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r10.u32);
	// beq cr6,0x820e3394
	if (cr6.getEQ()) goto loc_820E3394;
	// bl 0x8209f598
	sub_8209F598(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e3394
	if (!cr6.getEQ()) goto loc_820E3394;
	// lwz r3,156(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 156);
	// bl 0x8209da60
	sub_8209DA60(ctx, base);
loc_820E3394:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820E33A0"))) PPC_WEAK_FUNC(sub_820E33A0);
PPC_FUNC_IMPL(__imp__sub_820E33A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r29,8(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,352(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 352);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e33dc
	if (cr6.getEQ()) goto loc_820E33DC;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,100(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// ori r10,r10,4
	ctx.r10.u64 = ctx.r10.u64 | 4;
	// stw r10,100(r11)
	PPC_STORE_U32(r11.u32 + 100, ctx.r10.u32);
loc_820E33DC:
	// lwz r11,356(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 356);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e33fc
	if (cr6.getEQ()) goto loc_820E33FC;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,100(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// ori r10,r10,4
	ctx.r10.u64 = ctx.r10.u64 | 4;
	// stw r10,100(r11)
	PPC_STORE_U32(r11.u32 + 100, ctx.r10.u32);
loc_820E33FC:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3428
	if (cr6.getEQ()) goto loc_820E3428;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e3428
	if (cr6.getEQ()) goto loc_820E3428;
	// bl 0x820ca520
	sub_820CA520(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e34d8
	if (cr6.getEQ()) goto loc_820E34D8;
loc_820E3428:
	// li r30,1
	r30.s64 = 1;
loc_820E342C:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820c9c50
	sub_820C9C50(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x820e34cc
	if (cr6.getLT()) goto loc_820E34CC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820c0c08
	sub_820C0C08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e34cc
	if (cr6.getEQ()) goto loc_820E34CC;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// lis r6,8192
	ctx.r6.s64 = 536870912;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e2de0
	sub_820E2DE0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820e34cc
	if (cr6.getEQ()) goto loc_820E34CC;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820da640
	sub_820DA640(ctx, base);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e34cc
	if (cr6.getEQ()) goto loc_820E34CC;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e34cc
	if (cr6.getEQ()) goto loc_820E34CC;
	// bl 0x820ca520
	sub_820CA520(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e34cc
	if (cr6.getEQ()) goto loc_820E34CC;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8217eea8
	sub_8217EEA8(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r3,60(r31)
	PPC_STORE_U32(r31.u32 + 60, ctx.r3.u32);
	// bl 0x8215dab8
	sub_8215DAB8(ctx, base);
loc_820E34CC:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,89
	cr6.compare<int32_t>(r30.s32, 89, xer);
	// blt cr6,0x820e342c
	if (cr6.getLT()) goto loc_820E342C;
loc_820E34D8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820E34E0"))) PPC_WEAK_FUNC(sub_820E34E0);
PPC_FUNC_IMPL(__imp__sub_820E34E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e358c
	if (cr6.getEQ()) goto loc_820E358C;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e358c
	if (cr6.getEQ()) goto loc_820E358C;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// rlwinm r11,r30,2,28,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xC;
	// addi r10,r10,-1384
	ctx.r10.s64 = ctx.r10.s64 + -1384;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e358c
	if (cr6.getEQ()) goto loc_820E358C;
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e358c
	if (cr6.getEQ()) goto loc_820E358C;
	// lwz r31,8(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820e358c
	if (cr6.getEQ()) goto loc_820E358C;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c9c50
	sub_820C9C50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// blt cr6,0x820e358c
	if (cr6.getLT()) goto loc_820E358C;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// lis r6,8192
	ctx.r6.s64 = 536870912;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820e2de0
	sub_820E2DE0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820e358c
	if (cr6.getEQ()) goto loc_820E358C;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820da640
	sub_820DA640(ctx, base);
	// stw r30,60(r31)
	PPC_STORE_U32(r31.u32 + 60, r30.u32);
loc_820E358C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820E3598"))) PPC_WEAK_FUNC(sub_820E3598);
PPC_FUNC_IMPL(__imp__sub_820E3598) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -72, f30.u64);
	// stfd f31,-64(r1)
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// rlwinm r10,r28,17,0,14
	ctx.r10.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 17) & 0xFFFE0000;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,15,12
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFF9FFFF;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3624
	if (cr6.getEQ()) goto loc_820E3624;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e3624
	if (cr6.getEQ()) goto loc_820E3624;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3624
	if (cr6.getEQ()) goto loc_820E3624;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e3ddc
	if (!cr6.getEQ()) goto loc_820E3DDC;
loc_820E3624:
	// lbz r8,3(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r8,36
	cr6.compare<uint32_t>(ctx.r8.u32, 36, xer);
	// bne cr6,0x820e3664
	if (!cr6.getEQ()) goto loc_820E3664;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3664
	if (cr6.getEQ()) goto loc_820E3664;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x820e3ddc
	if (cr6.getEQ()) goto loc_820E3DDC;
loc_820E3664:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x820e369c
	if (!cr6.getEQ()) goto loc_820E369C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820dadf0
	sub_820DADF0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e368c
	if (cr6.getEQ()) goto loc_820E368C;
	// rlwinm r11,r11,0,8,8
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// b 0x820e37ec
	goto loc_820E37EC;
loc_820E368C:
	// rlwinm r11,r11,0,7,7
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e3ddc
	if (!cr6.getEQ()) goto loc_820E3DDC;
	// b 0x820e37f0
	goto loc_820E37F0;
loc_820E369C:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r11,r10,0,14,14
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e3ddc
	if (!cr6.getEQ()) goto loc_820E3DDC;
	// cmplwi cr6,r8,8
	cr6.compare<uint32_t>(ctx.r8.u32, 8, xer);
	// bne cr6,0x820e3774
	if (!cr6.getEQ()) goto loc_820E3774;
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,26
	cr6.compare<int32_t>(r11.s32, 26, xer);
	// beq cr6,0x820e36fc
	if (cr6.getEQ()) goto loc_820E36FC;
	// cmpwi cr6,r11,27
	cr6.compare<int32_t>(r11.s32, 27, xer);
	// beq cr6,0x820e36fc
	if (cr6.getEQ()) goto loc_820E36FC;
	// cmpwi cr6,r11,29
	cr6.compare<int32_t>(r11.s32, 29, xer);
	// beq cr6,0x820e36fc
	if (cr6.getEQ()) goto loc_820E36FC;
	// cmpwi cr6,r11,28
	cr6.compare<int32_t>(r11.s32, 28, xer);
	// beq cr6,0x820e36fc
	if (cr6.getEQ()) goto loc_820E36FC;
	// cmpwi cr6,r11,86
	cr6.compare<int32_t>(r11.s32, 86, xer);
	// beq cr6,0x820e36fc
	if (cr6.getEQ()) goto loc_820E36FC;
	// cmpwi cr6,r11,87
	cr6.compare<int32_t>(r11.s32, 87, xer);
	// beq cr6,0x820e36fc
	if (cr6.getEQ()) goto loc_820E36FC;
	// cmpwi cr6,r11,33
	cr6.compare<int32_t>(r11.s32, 33, xer);
	// beq cr6,0x820e36fc
	if (cr6.getEQ()) goto loc_820E36FC;
	// cmpwi cr6,r11,34
	cr6.compare<int32_t>(r11.s32, 34, xer);
	// bne cr6,0x820e3ddc
	if (!cr6.getEQ()) goto loc_820E3DDC;
loc_820E36FC:
	// li r29,0
	r29.s64 = 0;
	// sth r29,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r29.u16);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3ddc
	if (cr6.getEQ()) goto loc_820E3DDC;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e3ddc
	if (cr6.getEQ()) goto loc_820E3DDC;
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,27
	cr6.compare<int32_t>(r11.s32, 27, xer);
	// beq cr6,0x820e3740
	if (cr6.getEQ()) goto loc_820E3740;
	// cmpwi cr6,r11,29
	cr6.compare<int32_t>(r11.s32, 29, xer);
	// beq cr6,0x820e3740
	if (cr6.getEQ()) goto loc_820E3740;
	// cmpwi cr6,r11,28
	cr6.compare<int32_t>(r11.s32, 28, xer);
	// bne cr6,0x820e3ddc
	if (!cr6.getEQ()) goto loc_820E3DDC;
loc_820E3740:
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e3ddc
	if (cr6.getEQ()) goto loc_820E3DDC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820ca560
	sub_820CA560(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3ddc
	if (cr6.getEQ()) goto loc_820E3DDC;
	// stw r29,136(r31)
	PPC_STORE_U32(r31.u32 + 136, r29.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// lfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
loc_820E3774:
	// cmplwi cr6,r8,7
	cr6.compare<uint32_t>(ctx.r8.u32, 7, xer);
	// bne cr6,0x820e37e0
	if (!cr6.getEQ()) goto loc_820E37E0;
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x820e37c8
	if (cr6.getEQ()) goto loc_820E37C8;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x820e37c8
	if (cr6.getEQ()) goto loc_820E37C8;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x820e37c8
	if (cr6.getEQ()) goto loc_820E37C8;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// beq cr6,0x820e37c8
	if (cr6.getEQ()) goto loc_820E37C8;
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// beq cr6,0x820e37c8
	if (cr6.getEQ()) goto loc_820E37C8;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// beq cr6,0x820e37c8
	if (cr6.getEQ()) goto loc_820E37C8;
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// beq cr6,0x820e37c8
	if (cr6.getEQ()) goto loc_820E37C8;
	// cmpwi cr6,r11,16
	cr6.compare<int32_t>(r11.s32, 16, xer);
	// beq cr6,0x820e37c8
	if (cr6.getEQ()) goto loc_820E37C8;
	// cmpwi cr6,r11,19
	cr6.compare<int32_t>(r11.s32, 19, xer);
	// bne cr6,0x820e3ddc
	if (!cr6.getEQ()) goto loc_820E3DDC;
loc_820E37C8:
	// oris r11,r10,4096
	r11.u64 = ctx.r10.u64 | 268435456;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// lfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
loc_820E37E0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820dae70
	sub_820DAE70(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
loc_820E37EC:
	// beq cr6,0x820e3ddc
	if (cr6.getEQ()) goto loc_820E3DDC;
loc_820E37F0:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f30.f64 = double(temp.f32);
	// beq cr6,0x820e382c
	if (cr6.getEQ()) goto loc_820E382C;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f12,112(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	ctx.f12.f64 = double(temp.f32);
	// fctiwz f0,f12
	f0.s64 = (ctx.f12.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f12.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e3840
	if (!cr6.getEQ()) goto loc_820E3840;
loc_820E382C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15140(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15140);
	f0.f64 = double(temp.f32);
	// fmadds f0,f31,f0,f13
	f0.f64 = double(float(f31.f64 * f0.f64 + ctx.f13.f64));
	// b 0x820e3890
	goto loc_820E3890;
loc_820E3840:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d49c8
	sub_820D49C8(ctx, base);
	// srawi r11,r3,2
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x3) != 0);
	r11.s64 = ctx.r3.s32 >> 2;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// subfic r11,r11,4
	xer.ca = r11.u32 <= 4;
	r11.s64 = 4 - r11.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// ble cr6,0x820e3880
	if (!cr6.getGT()) goto loc_820E3880;
	// fmr f31,f0
	f31.f64 = f0.f64;
	// b 0x820e388c
	goto loc_820E388C;
loc_820E3880:
	// fcmpu cr6,f31,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f30.f64);
	// bge cr6,0x820e388c
	if (!cr6.getLT()) goto loc_820E388C;
	// fmr f31,f30
	f31.f64 = f30.f64;
loc_820E388C:
	// fadds f0,f12,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f12.f64 + f31.f64));
loc_820E3890:
	// stfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 112, temp.u32);
	// cmplwi cr6,r8,42
	cr6.compare<uint32_t>(ctx.r8.u32, 42, xer);
	// beq cr6,0x820e38c4
	if (cr6.getEQ()) goto loc_820E38C4;
	// cmplwi cr6,r8,47
	cr6.compare<uint32_t>(ctx.r8.u32, 47, xer);
	// beq cr6,0x820e38c4
	if (cr6.getEQ()) goto loc_820E38C4;
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820e1308
	sub_820E1308(ctx, base);
	// b 0x820e38dc
	goto loc_820E38DC;
loc_820E38C4:
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// lfs f13,116(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 116);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820e38dc
	if (cr6.getLT()) goto loc_820E38DC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820dad58
	sub_820DAD58(ctx, base);
loc_820E38DC:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r11,20
	cr6.compare<uint32_t>(r11.u32, 20, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// bne cr6,0x820e3aec
	if (!cr6.getEQ()) goto loc_820E3AEC;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3aec
	if (cr6.getEQ()) goto loc_820E3AEC;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820e3aec
	if (!cr6.getEQ()) goto loc_820E3AEC;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r10,20164
	ctx.r10.s64 = 1321467904;
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// ori r27,r10,60495
	r27.u64 = ctx.r10.u64 | 60495;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// mulhwu r10,r11,r27
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(r27.u32)) >> 32;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// mulli r10,r10,13
	ctx.r10.s64 = ctx.r10.s64 * 13;
	// subf r26,r10,r11
	r26.s64 = r11.s64 - ctx.r10.s64;
	// mr r30,r26
	r30.u64 = r26.u64;
loc_820E3958:
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lhz r11,130(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 130);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3990
	if (cr6.getEQ()) goto loc_820E3990;
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r11,r11,r31
	r11.u64 = PPC_LOAD_U16(r11.u32 + r31.u32);
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x820e3990
	if (cr6.getEQ()) goto loc_820E3990;
	// bl 0x820e2938
	sub_820E2938(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x820e39b8
	if (!cr6.getEQ()) goto loc_820E39B8;
loc_820E3990:
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// mulhw r10,r11,r27
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r27.s32)) >> 32;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mulli r10,r10,13
	ctx.r10.s64 = ctx.r10.s64 * 13;
	// subf r30,r10,r11
	r30.s64 = r11.s64 - ctx.r10.s64;
	// cmpw cr6,r30,r26
	cr6.compare<int32_t>(r30.s32, r26.s32, xer);
	// bne cr6,0x820e3958
	if (!cr6.getEQ()) goto loc_820E3958;
	// b 0x820e3aec
	goto loc_820E3AEC;
loc_820E39B8:
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// stfs f30,120(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// li r10,256
	ctx.r10.s64 = 256;
	// stfs f31,124(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stfs f31,128(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// li r26,1
	r26.s64 = 1;
	// stfs f31,132(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// stfs f31,136(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// li r5,128
	ctx.r5.s64 = 128;
	// stfs f30,140(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// sth r10,96(r1)
	PPC_STORE_U16(ctx.r1.u32 + 96, ctx.r10.u16);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lhzx r27,r11,r31
	r27.u64 = PPC_LOAD_U16(r11.u32 + r31.u32);
	// li r11,7
	r11.s64 = 7;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stfs f31,144(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// stfs f31,148(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// stb r29,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, r29.u8);
	// stfs f31,152(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// sth r29,100(r1)
	PPC_STORE_U16(ctx.r1.u32 + 100, r29.u16);
	// lfs f0,14108(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14108);
	f0.f64 = double(temp.f32);
	// stw r26,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r26.u32);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, r11.u8);
	// li r11,-1
	r11.s64 = -1;
	// stfs f31,156(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 156, temp.u32);
	// stw r29,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r29.u32);
	// stfs f30,160(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r29.u32);
	// stfs f31,164(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// stw r29,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r29.u32);
	// stfs f31,168(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// stw r29,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, r29.u32);
	// sth r11,102(r1)
	PPC_STORE_U16(ctx.r1.u32 + 102, r11.u16);
	// li r11,255
	r11.s64 = 255;
	// stfs f31,172(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 172, temp.u32);
	// stw r29,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, r29.u32);
	// stfs f31,176(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 176, temp.u32);
	// stw r29,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, r29.u32);
	// stfs f30,180(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 180, temp.u32);
	// stb r29,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, r29.u8);
	// stfs f31,184(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 184, temp.u32);
	// stb r29,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, r29.u8);
	// stfs f31,188(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 188, temp.u32);
	// stb r11,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, r11.u8);
	// stfs f31,192(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// stb r11,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, r11.u8);
	// stfs f31,208(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 208, temp.u32);
	// stb r11,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, r11.u8);
	// stfs f0,212(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 212, temp.u32);
	// stb r11,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, r11.u8);
	// stb r11,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, r11.u8);
	// stb r11,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, r11.u8);
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// sth r27,4(r28)
	PPC_STORE_U16(r28.u32 + 4, r27.u16);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// stw r11,128(r28)
	PPC_STORE_U32(r28.u32 + 128, r11.u32);
	// bne cr6,0x820e3aac
	if (!cr6.getEQ()) goto loc_820E3AAC;
	// stw r26,128(r28)
	PPC_STORE_U32(r28.u32 + 128, r26.u32);
loc_820E3AAC:
	// lis r11,-32164
	r11.s64 = -2107899904;
	// rlwinm r10,r27,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwzx r4,r10,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x820d4df0
	sub_820D4DF0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e3aec
	if (cr6.getEQ()) goto loc_820E3AEC;
	// lwz r3,20(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// lfs f1,20(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
	// lwz r4,16(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r3,16(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 16);
	// bl 0x820ccc18
	sub_820CCC18(ctx, base);
loc_820E3AEC:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,13
	cr6.compare<uint32_t>(r11.u32, 13, xer);
	// bne cr6,0x820e3b44
	if (!cr6.getEQ()) goto loc_820E3B44;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lbz r9,2(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// oris r10,r11,16384
	ctx.r10.u64 = r11.u64 | 1073741824;
	// rlwinm r11,r9,0,0,24
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// beq cr6,0x820e3cf0
	if (cr6.getEQ()) goto loc_820E3CF0;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820e3cf0
	if (!cr6.getEQ()) goto loc_820E3CF0;
	// oris r11,r10,4096
	r11.u64 = ctx.r10.u64 | 268435456;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x820e3cf0
	goto loc_820E3CF0;
loc_820E3B44:
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// bne cr6,0x820e3b90
	if (!cr6.getEQ()) goto loc_820E3B90;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3cf0
	if (cr6.getEQ()) goto loc_820E3CF0;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820e3cf0
	if (!cr6.getEQ()) goto loc_820E3CF0;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// oris r11,r11,4096
	r11.u64 = r11.u64 | 268435456;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x820e3cf0
	goto loc_820E3CF0;
loc_820E3B90:
	// cmplwi cr6,r11,10
	cr6.compare<uint32_t>(r11.u32, 10, xer);
	// bne cr6,0x820e3be0
	if (!cr6.getEQ()) goto loc_820E3BE0;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3cf0
	if (cr6.getEQ()) goto loc_820E3CF0;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820e3cf0
	if (!cr6.getEQ()) goto loc_820E3CF0;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// sth r29,132(r31)
	PPC_STORE_U16(r31.u32 + 132, r29.u16);
	// addi r11,r11,24420
	r11.s64 = r11.s64 + 24420;
	// stw r11,128(r31)
	PPC_STORE_U32(r31.u32 + 128, r11.u32);
	// b 0x820e3cf0
	goto loc_820E3CF0;
loc_820E3BE0:
	// cmplwi cr6,r11,11
	cr6.compare<uint32_t>(r11.u32, 11, xer);
	// bne cr6,0x820e3c48
	if (!cr6.getEQ()) goto loc_820E3C48;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3cf0
	if (cr6.getEQ()) goto loc_820E3CF0;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820e3cf0
	if (!cr6.getEQ()) goto loc_820E3CF0;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// sth r29,132(r31)
	PPC_STORE_U16(r31.u32 + 132, r29.u16);
	// addi r11,r11,24420
	r11.s64 = r11.s64 + 24420;
	// stw r11,128(r31)
	PPC_STORE_U32(r31.u32 + 128, r11.u32);
	// stw r11,244(r31)
	PPC_STORE_U32(r31.u32 + 244, r11.u32);
	// sth r29,248(r31)
	PPC_STORE_U16(r31.u32 + 248, r29.u16);
	// stw r11,360(r31)
	PPC_STORE_U32(r31.u32 + 360, r11.u32);
	// sth r29,364(r31)
	PPC_STORE_U16(r31.u32 + 364, r29.u16);
	// stw r11,476(r31)
	PPC_STORE_U32(r31.u32 + 476, r11.u32);
	// sth r29,480(r31)
	PPC_STORE_U16(r31.u32 + 480, r29.u16);
	// b 0x820e3cf0
	goto loc_820E3CF0;
loc_820E3C48:
	// cmplwi cr6,r11,36
	cr6.compare<uint32_t>(r11.u32, 36, xer);
	// bne cr6,0x820e3c90
	if (!cr6.getEQ()) goto loc_820E3C90;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3cf0
	if (cr6.getEQ()) goto loc_820E3CF0;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820e3cf0
	if (!cr6.getEQ()) goto loc_820E3CF0;
	// addi r3,r31,88
	ctx.r3.s64 = r31.s64 + 88;
	// bl 0x820df5c0
	sub_820DF5C0(ctx, base);
	// b 0x820e3cf0
	goto loc_820E3CF0;
loc_820E3C90:
	// cmplwi cr6,r11,21
	cr6.compare<uint32_t>(r11.u32, 21, xer);
	// bne cr6,0x820e3cf0
	if (!cr6.getEQ()) goto loc_820E3CF0;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3ccc
	if (cr6.getEQ()) goto loc_820E3CCC;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e3cec
	if (!cr6.getEQ()) goto loc_820E3CEC;
loc_820E3CCC:
	// lfs f0,116(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 116);
	f0.f64 = double(temp.f32);
	// lfs f13,112(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f12,128(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 128);
	ctx.f12.f64 = double(temp.f32);
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fmuls f0,f0,f12
	f0.f64 = double(float(f0.f64 * ctx.f12.f64));
	// stfs f0,132(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 132, temp.u32);
	// b 0x820e3cf0
	goto loc_820E3CF0;
loc_820E3CEC:
	// stfs f31,132(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 132, temp.u32);
loc_820E3CF0:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3d4c
	if (cr6.getEQ()) goto loc_820E3D4C;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820e3d4c
	if (!cr6.getEQ()) goto loc_820E3D4C;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r3,36(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e3d4c
	if (cr6.getEQ()) goto loc_820E3D4C;
loc_820E3D34:
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r30,40(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x820e3d34
	if (!cr6.getEQ()) goto loc_820E3D34;
loc_820E3D4C:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3ddc
	if (cr6.getEQ()) goto loc_820E3DDC;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e3ddc
	if (cr6.getEQ()) goto loc_820E3DDC;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3ddc
	if (cr6.getEQ()) goto loc_820E3DDC;
	// lwz r30,56(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 56);
	// cmpwi cr6,r30,-1
	cr6.compare<int32_t>(r30.s32, -1, xer);
	// beq cr6,0x820e3ddc
	if (cr6.getEQ()) goto loc_820E3DDC;
	// lfs f13,116(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 116);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,112(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// lfs f13,2944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820e3da8
	if (!cr6.getGT()) goto loc_820E3DA8;
	// fmr f0,f13
	f0.f64 = ctx.f13.f64;
	// b 0x820e3db4
	goto loc_820E3DB4;
loc_820E3DA8:
	// fcmpu cr6,f0,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x820e3db4
	if (!cr6.getLT()) goto loc_820E3DB4;
	// fmr f0,f31
	f0.f64 = f31.f64;
loc_820E3DB4:
	// fctidz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r31,r11,25,7,31
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 25) & 0x1FFFFFF;
	// lbz r29,87(r1)
	r29.u64 = PPC_LOAD_U8(ctx.r1.u32 + 87);
	// bl 0x82181e58
	sub_82181E58(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// bl 0x821822c8
	sub_821822C8(ctx, base);
loc_820E3DDC:
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// lfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820E3DF0"))) PPC_WEAK_FUNC(sub_820E3DF0);
PPC_FUNC_IMPL(__imp__sub_820E3DF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// lwz r31,8(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,5
	cr6.compare<uint32_t>(r11.u32, 5, xer);
	// bne cr6,0x820e3e5c
	if (!cr6.getEQ()) goto loc_820E3E5C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,9939
	ctx.r8.s64 = 9939;
	// addi r7,r11,17776
	ctx.r7.s64 = r11.s64 + 17776;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,186
	ctx.r4.s64 = 186;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r10,17236(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 17236);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820e3e54
	if (!cr6.getGT()) goto loc_820E3E54;
	// bl 0x820df548
	sub_820DF548(ctx, base);
	// b 0x820e3e5c
	goto loc_820E3E5C;
loc_820E3E54:
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,17236(r11)
	PPC_STORE_U32(r11.u32 + 17236, ctx.r10.u32);
loc_820E3E5C:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r11,r11,0,12,12
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e3e7c
	if (cr6.getEQ()) goto loc_820E3E7C;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820e1868
	sub_820E1868(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
loc_820E3E7C:
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// ori r11,r11,16384
	r11.u64 = r11.u64 | 16384;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
	// bl 0x820d3878
	sub_820D3878(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820E3EA0"))) PPC_WEAK_FUNC(sub_820E3EA0);
PPC_FUNC_IMPL(__imp__sub_820E3EA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// lis r11,-32164
	r11.s64 = -2107899904;
	// rlwinm r10,r27,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// lwzx r29,r10,r11
	r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// bl 0x820cca48
	sub_820CCA48(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82118550
	sub_82118550(ctx, base);
	// cntlzw r11,r30
	r11.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// cntlzw r11,r28
	r11.u64 = r28.u32 == 0 ? 32 : __builtin_clz(r28.u32);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x820e26a0
	sub_820E26A0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x820e3f10
	if (!cr6.getEQ()) goto loc_820E3F10;
	// bl 0x820cca48
	sub_820CCA48(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
loc_820E3F10:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x820e3f24
	if (!cr6.getEQ()) goto loc_820E3F24;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82118550
	sub_82118550(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
loc_820E3F24:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820e4050
	if (cr6.getEQ()) goto loc_820E4050;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x820e4050
	if (cr6.getEQ()) goto loc_820E4050;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820e4060
	if (cr6.getEQ()) goto loc_820E4060;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,17
	ctx.r10.s64 = 17;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r5,128
	ctx.r5.s64 = 128;
	// lfs f13,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r10.u8);
	// li r10,16384
	ctx.r10.s64 = 16384;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stfs f13,104(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// stfs f13,124(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// stfs f13,144(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// li r11,256
	r11.s64 = 256;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// li r10,255
	ctx.r10.s64 = 255;
	// stfs f0,108(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// stfs f0,116(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// sth r11,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, r11.u16);
	// li r11,0
	r11.s64 = 0;
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// stb r10,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r10.u8);
	// stfs f0,128(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stb r10,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r10.u8);
	// stfs f0,132(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// stb r10,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r10.u8);
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// stb r10,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r10.u8);
	// stfs f0,140(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, r11.u8);
	// stfs f0,148(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// sth r11,84(r1)
	PPC_STORE_U16(ctx.r1.u32 + 84, r11.u16);
	// stfs f0,152(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// sth r11,86(r1)
	PPC_STORE_U16(ctx.r1.u32 + 86, r11.u16);
	// stfs f0,156(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 156, temp.u32);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// stfs f0,160(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// stfs f0,168(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// stfs f0,172(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 172, temp.u32);
	// stw r11,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r11.u32);
	// stfs f0,176(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 176, temp.u32);
	// stw r11,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r11.u32);
	// stfs f0,192(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// stw r11,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, r11.u32);
	// lfs f0,14108(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14108);
	f0.f64 = double(temp.f32);
	// stb r11,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, r11.u8);
	// stfs f13,164(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// stb r10,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r10.u8);
	// stfs f0,196(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 196, temp.u32);
	// stb r10,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r10.u8);
	// stb r11,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, r11.u8);
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// ori r10,r25,16384
	ctx.r10.u64 = r25.u64 | 16384;
	// sth r27,4(r31)
	PPC_STORE_U16(r31.u32 + 4, r27.u16);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lhz r11,0(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// sth r11,6(r31)
	PPC_STORE_U16(r31.u32 + 6, r11.u16);
	// bl 0x820dc6b8
	sub_820DC6B8(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x823ed17c
	return;
loc_820E4050:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820e4060
	if (cr6.getEQ()) goto loc_820E4060;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x821188f8
	sub_821188F8(ctx, base);
loc_820E4060:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// beq cr6,0x820e4074
	if (cr6.getEQ()) goto loc_820E4074;
	// bl 0x820ccb00
	sub_820CCB00(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_820E4074:
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_820E4080"))) PPC_WEAK_FUNC(sub_820E4080);
PPC_FUNC_IMPL(__imp__sub_820E4080) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f14{};
	PPCRegister f15{};
	PPCRegister f16{};
	PPCRegister f17{};
	PPCRegister f18{};
	PPCRegister f19{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed510
	// stwu r1,-848(r1)
	ea = -848 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r16,r3
	r16.u64 = ctx.r3.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r20,0
	r20.s64 = 0;
	// mr r27,r20
	r27.u64 = r20.u64;
	// lwz r31,8(r16)
	r31.u64 = PPC_LOAD_U32(r16.u32 + 8);
	// lfs f21,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f21.f64 = double(temp.f32);
	// fmr f16,f21
	f16.f64 = f21.f64;
	// stw r20,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, r20.u32);
	// lwz r24,20(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// stw r24,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r24.u32);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// li r21,1
	r21.s64 = 1;
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// mr r14,r3
	r14.u64 = ctx.r3.u64;
	// mr r23,r21
	r23.u64 = r21.u64;
	// rlwinm r10,r11,0,29,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r23,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r23.u32);
	// beq cr6,0x820e4108
	if (cr6.getEQ()) goto loc_820E4108;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r5,r11,0,29,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,848
	ctx.r1.s64 = ctx.r1.s64 + 848;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed55c
	// b 0x823ed150
	return;
loc_820E4108:
	// rlwinm r10,r11,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e419c
	if (cr6.getEQ()) goto loc_820E419C;
	// rlwinm r11,r11,0,29,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
loc_820E411C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r4,-32256
	ctx.r4.s64 = -2113929216;
	// addi r11,r11,17776
	r11.s64 = r11.s64 + 17776;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lfs f27,3060(r4)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 3060);
	f27.f64 = double(temp.f32);
	// stw r11,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r11.u32);
	// lis r3,-32256
	ctx.r3.s64 = -2113929216;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lfs f25,14048(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 14048);
	f25.f64 = double(temp.f32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f26,14028(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14028);
	f26.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f14,12468(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 12468);
	f14.f64 = double(temp.f32);
	// lfs f15,2944(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 2944);
	f15.f64 = double(temp.f32);
	// cmpwi cr6,r14,1
	cr6.compare<int32_t>(r14.s32, 1, xer);
	// lfs f17,2776(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 2776);
	f17.f64 = double(temp.f32);
	// lis r25,-31994
	r25.s64 = -2096758784;
	// lfs f19,14032(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 14032);
	f19.f64 = double(temp.f32);
	// lis r26,-32014
	r26.s64 = -2098069504;
	// lfs f18,13980(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 13980);
	f18.f64 = double(temp.f32);
	// lis r15,-32014
	r15.s64 = -2098069504;
	// lfs f20,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f20.f64 = double(temp.f32);
	// stfs f26,192(r1)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// stfs f25,216(r1)
	temp.f32 = float(f25.f64);
	PPC_STORE_U32(ctx.r1.u32 + 216, temp.u32);
	// stfs f27,188(r1)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(ctx.r1.u32 + 188, temp.u32);
	// bne cr6,0x820e41d4
	if (!cr6.getEQ()) goto loc_820E41D4;
	// mr r19,r21
	r19.u64 = r21.u64;
	// stw r19,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r19.u32);
	// b 0x820e423c
	goto loc_820E423C;
loc_820E419C:
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e411c
	if (cr6.getEQ()) goto loc_820E411C;
	// lbz r11,1(r16)
	r11.u64 = PPC_LOAD_U8(r16.u32 + 1);
	// li r3,3
	ctx.r3.s64 = 3;
	// andi. r11,r11,253
	r11.u64 = r11.u64 & 253;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stb r11,1(r16)
	PPC_STORE_U8(r16.u32 + 1, r11.u8);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// ori r11,r11,8
	r11.u64 = r11.u64 | 8;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
	// addi r1,r1,848
	ctx.r1.s64 = ctx.r1.s64 + 848;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed55c
	// b 0x823ed150
	return;
loc_820E41D4:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820ca060
	sub_820CA060(ctx, base);
	// cntlzw r10,r3
	ctx.r10.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r19,r10,27,31,31
	r19.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r19,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r19.u32);
	// beq cr6,0x820e4234
	if (cr6.getEQ()) goto loc_820E4234;
	// lwz r30,108(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r3,136(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 136);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e4234
	if (cr6.getEQ()) goto loc_820E4234;
	// bl 0x820c9b90
	sub_820C9B90(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820e4234
	if (cr6.getLT()) goto loc_820E4234;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,136(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 136);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r19,r11,27,31,31
	r19.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stw r19,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r19.u32);
loc_820E4234:
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// beq cr6,0x820e6770
	if (cr6.getEQ()) goto loc_820E6770;
loc_820E423C:
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4ee0
	if (cr6.getEQ()) goto loc_820E4EE0;
	// lwz r30,108(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r11,-6384(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// lwz r10,224(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// cmpwi cr6,r11,2400
	cr6.compare<int32_t>(r11.s32, 2400, xer);
	// stw r11,224(r30)
	PPC_STORE_U32(r30.u32 + 224, r11.u32);
	// ble cr6,0x820e4274
	if (!cr6.getGT()) goto loc_820E4274;
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
loc_820E4274:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,0,23,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e435c
	if (cr6.getEQ()) goto loc_820E435C;
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r28,r20
	r28.u64 = r20.u64;
	// mr r29,r21
	r29.u64 = r21.u64;
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x820e42ac
	if (!cr6.getEQ()) goto loc_820E42AC;
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// mr r28,r31
	r28.u64 = r31.u64;
	// cmplwi cr6,r11,86
	cr6.compare<uint32_t>(r11.u32, 86, xer);
	// bne cr6,0x820e42ac
	if (!cr6.getEQ()) goto loc_820E42AC;
	// mr r29,r20
	r29.u64 = r20.u64;
loc_820E42AC:
	// lwz r3,136(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 136);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e42c0
	if (cr6.getEQ()) goto loc_820E42C0;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820ce1f0
	sub_820CE1F0(ctx, base);
loc_820E42C0:
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// addi r4,r30,212
	ctx.r4.s64 = r30.s64 + 212;
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4304
	if (cr6.getEQ()) goto loc_820E4304;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4304
	if (cr6.getEQ()) goto loc_820E4304;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,368
	ctx.r6.s64 = ctx.r1.s64 + 368;
	// addi r5,r1,352
	ctx.r5.s64 = ctx.r1.s64 + 352;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d65e0
	sub_820D65E0(ctx, base);
	// b 0x820e4318
	goto loc_820E4318;
loc_820E4304:
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,368
	ctx.r6.s64 = ctx.r1.s64 + 368;
	// addi r5,r1,352
	ctx.r5.s64 = ctx.r1.s64 + 352;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d6b60
	sub_820D6B60(ctx, base);
loc_820E4318:
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r3,136(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 136);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e4330
	if (cr6.getEQ()) goto loc_820E4330;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820ce1f0
	sub_820CE1F0(ctx, base);
loc_820E4330:
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// beq cr6,0x820e4350
	if (cr6.getEQ()) goto loc_820E4350;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820e4350
	if (cr6.getEQ()) goto loc_820E4350;
	// lbz r11,128(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 128);
	// cmplwi cr6,r11,86
	cr6.compare<uint32_t>(r11.u32, 86, xer);
	// bne cr6,0x820e4350
	if (!cr6.getEQ()) goto loc_820E4350;
	// sth r20,130(r28)
	PPC_STORE_U16(r28.u32 + 130, r20.u16);
loc_820E4350:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,0,24,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFEFF;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
loc_820E435C:
	// lfs f0,88(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 88);
	f0.f64 = double(temp.f32);
	// addi r17,r31,88
	r17.s64 = r31.s64 + 88;
	// stfs f0,160(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// lfs f0,92(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 92);
	f0.f64 = double(temp.f32);
	// stfs f0,164(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// lfs f0,96(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 96);
	f0.f64 = double(temp.f32);
	// stfs f0,168(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// lwz r11,188(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 188);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820e4390
	if (!cr6.getGT()) goto loc_820E4390;
	// lwz r10,-6384(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,188(r30)
	PPC_STORE_U32(r30.u32 + 188, r11.u32);
loc_820E4390:
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e50c0
	if (cr6.getEQ()) goto loc_820E50C0;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r3,8(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// bl 0x820d4a60
	sub_820D4A60(ctx, base);
	// lwz r10,168(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 168);
	// lfs f28,92(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 92);
	f28.f64 = double(temp.f32);
	// lwz r11,-6384(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// lwz r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// fmr f29,f21
	f29.f64 = f21.f64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// fmr f30,f17
	f30.f64 = f17.f64;
	// rlwinm r10,r9,0,26,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20;
	// mr r19,r20
	r19.u64 = r20.u64;
	// mr r29,r20
	r29.u64 = r20.u64;
	// addi r24,r31,24
	r24.s64 = r31.s64 + 24;
	// stw r11,168(r30)
	PPC_STORE_U32(r30.u32 + 168, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,24(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	f0.f64 = double(temp.f32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stfs f0,144(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// lfs f0,28(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 28);
	f0.f64 = double(temp.f32);
	// stfs f0,148(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// lfs f0,32(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 32);
	f0.f64 = double(temp.f32);
	// lfs f11,14148(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14148);
	ctx.f11.f64 = double(temp.f32);
	// stfs f0,152(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// beq cr6,0x820e44d0
	if (cr6.getEQ()) goto loc_820E44D0;
	// lfs f10,28(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 28);
	ctx.f10.f64 = double(temp.f32);
	// fcmpu cr6,f10,f11
	cr6.compare(ctx.f10.f64, ctx.f11.f64);
	// bge cr6,0x820e4460
	if (!cr6.getLT()) goto loc_820E4460;
	// lfs f0,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,180(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	ctx.f12.f64 = double(temp.f32);
	// lfs f9,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f9.f64 = double(temp.f32);
	// fmadds f0,f9,f0,f12
	f0.f64 = double(float(ctx.f9.f64 * f0.f64 + ctx.f12.f64));
	// stfs f0,180(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 180, temp.u32);
	// lfs f12,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// lfs f8,176(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 176);
	ctx.f8.f64 = double(temp.f32);
	// lfs f13,18028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18028);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f12,f8
	f0.f64 = double(float(f0.f64 * ctx.f12.f64 + ctx.f8.f64));
	// stfs f0,176(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 176, temp.u32);
	// lfs f0,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmadds f0,f0,f13,f10
	f0.f64 = double(float(f0.f64 * ctx.f13.f64 + ctx.f10.f64));
	// stfs f0,28(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 28, temp.u32);
	// fcmpu cr6,f0,f11
	cr6.compare(f0.f64, ctx.f11.f64);
	// ble cr6,0x820e44d0
	if (!cr6.getGT()) goto loc_820E44D0;
	// stfs f11,28(r30)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r30.u32 + 28, temp.u32);
	// b 0x820e44d0
	goto loc_820E44D0;
loc_820E4460:
	// lfs f10,176(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 176);
	ctx.f10.f64 = double(temp.f32);
	// lfs f0,164(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f10
	cr6.compare(f0.f64, ctx.f10.f64);
	// bge cr6,0x820e44b4
	if (!cr6.getLT()) goto loc_820E44B4;
	// lfs f12,180(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lfs f9,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f9.f64 = double(temp.f32);
	// fmadds f0,f9,f0,f12
	f0.f64 = double(float(ctx.f9.f64 * f0.f64 + ctx.f12.f64));
	// stfs f0,180(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 180, temp.u32);
	// lfs f12,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,18024(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18024);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f12,f10
	f0.f64 = double(float(f0.f64 * ctx.f12.f64 + ctx.f10.f64));
	// stfs f0,176(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 176, temp.u32);
	// lfs f12,164(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	ctx.f12.f64 = double(temp.f32);
	// lfs f10,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f0,f0,f12
	f0.f64 = double(float(f0.f64 - ctx.f12.f64));
	// fmuls f0,f0,f10
	f0.f64 = double(float(f0.f64 * ctx.f10.f64));
	// fmadds f0,f0,f13,f12
	f0.f64 = double(float(f0.f64 * ctx.f13.f64 + ctx.f12.f64));
	// stfs f0,164(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// b 0x820e44d0
	goto loc_820E44D0;
loc_820E44B4:
	// stfs f10,164(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lfs f0,180(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	f0.f64 = double(temp.f32);
	// rlwimi r11,r21,4,26,27
	r11.u64 = (__builtin_rotateleft32(r21.u32, 4) & 0x30) | (r11.u64 & 0xFFFFFFFFFFFFFFCF);
	// stfs f0,8(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 8, temp.u32);
	// stfs f21,28(r30)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 28, temp.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
loc_820E44D0:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lfs f0,28(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 28);
	f0.f64 = double(temp.f32);
	// rlwinm r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f31.f64 = double(temp.f32);
	// bne cr6,0x820e452c
	if (!cr6.getEQ()) goto loc_820E452C;
	// lfs f13,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f13,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f0,f12,f13
	f0.f64 = double(float(f0.f64 * ctx.f12.f64 + ctx.f13.f64));
	// stfs f0,8(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 8, temp.u32);
	// lfs f13,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f12,f13,f11,f0
	ctx.f12.f64 = double(float(-(ctx.f13.f64 * ctx.f11.f64 - f0.f64)));
	// fadds f0,f0,f12
	f0.f64 = double(float(f0.f64 + ctx.f12.f64));
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// lfs f13,164(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f31,f13
	f0.f64 = double(float(f0.f64 * f31.f64 + ctx.f13.f64));
	// stfs f0,164(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// stfs f12,8(r30)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r30.u32 + 8, temp.u32);
	// lfs f0,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// b 0x820e4554
	goto loc_820E4554;
loc_820E452C:
	// lfs f12,20(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// fadds f0,f0,f12
	f0.f64 = double(float(f0.f64 + ctx.f12.f64));
	// lfs f12,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f13,f0,f13,f12
	ctx.f13.f64 = double(float(f0.f64 * ctx.f13.f64 + ctx.f12.f64));
	// stfs f13,8(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 8, temp.u32);
	// lfs f12,164(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmadds f13,f13,f0,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// stfs f13,164(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
loc_820E4554:
	// lfs f13,4(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// addi r23,r30,32
	r23.s64 = r30.s64 + 32;
	// lfs f12,16(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	ctx.f12.f64 = double(temp.f32);
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// stfs f0,4(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 4, temp.u32);
	// lfs f11,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f11.f64 = double(temp.f32);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// lfs f10,24(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 24);
	ctx.f10.f64 = double(temp.f32);
	// lfs f0,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmadds f0,f10,f0,f11
	f0.f64 = double(float(ctx.f10.f64 * f0.f64 + ctx.f11.f64));
	// stfs f0,12(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 12, temp.u32);
	// lfs f13,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// lwz r5,-6384(r15)
	ctx.r5.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// lfs f12,160(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmadds f13,f13,f0,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// stfs f13,160(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// lfs f13,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,168(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f13,f0,f12
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// stfs f0,168(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// bl 0x82136f00
	sub_82136F00(ctx, base);
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x820e4600
	if (!cr6.getEQ()) goto loc_820E4600;
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,29
	cr6.compare<int32_t>(r11.s32, 29, xer);
	// beq cr6,0x820e45fc
	if (cr6.getEQ()) goto loc_820E45FC;
	// cmpwi cr6,r11,27
	cr6.compare<int32_t>(r11.s32, 27, xer);
	// beq cr6,0x820e45fc
	if (cr6.getEQ()) goto loc_820E45FC;
	// cmpwi cr6,r11,28
	cr6.compare<int32_t>(r11.s32, 28, xer);
	// beq cr6,0x820e45fc
	if (cr6.getEQ()) goto loc_820E45FC;
	// cmpwi cr6,r11,33
	cr6.compare<int32_t>(r11.s32, 33, xer);
	// beq cr6,0x820e45fc
	if (cr6.getEQ()) goto loc_820E45FC;
	// cmpwi cr6,r11,47
	cr6.compare<int32_t>(r11.s32, 47, xer);
	// beq cr6,0x820e45fc
	if (cr6.getEQ()) goto loc_820E45FC;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// beq cr6,0x820e45fc
	if (cr6.getEQ()) goto loc_820E45FC;
	// cmpwi cr6,r11,34
	cr6.compare<int32_t>(r11.s32, 34, xer);
	// bne cr6,0x820e4600
	if (!cr6.getEQ()) goto loc_820E4600;
loc_820E45FC:
	// mr r29,r21
	r29.u64 = r21.u64;
loc_820E4600:
	// lwz r3,136(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 136);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e4614
	if (cr6.getEQ()) goto loc_820E4614;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820ce1f0
	sub_820CE1F0(ctx, base);
loc_820E4614:
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4658
	if (cr6.getEQ()) goto loc_820E4658;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4658
	if (cr6.getEQ()) goto loc_820E4658;
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// addi r5,r1,200
	ctx.r5.s64 = ctx.r1.s64 + 200;
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d65e0
	sub_820D65E0(ctx, base);
	// b 0x820e4670
	goto loc_820E4670;
loc_820E4658:
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// addi r5,r1,200
	ctx.r5.s64 = ctx.r1.s64 + 200;
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d6b60
	sub_820D6B60(ctx, base);
loc_820E4670:
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// lwz r3,136(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 136);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e4688
	if (cr6.getEQ()) goto loc_820E4688;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820ce1f0
	sub_820CE1F0(ctx, base);
loc_820E4688:
	// cmpwi cr6,r21,2
	cr6.compare<int32_t>(r21.s32, 2, xer);
	// lis r26,-32013
	r26.s64 = -2098003968;
	// lis r27,-32013
	r27.s64 = -2098003968;
	// lis r28,-32013
	r28.s64 = -2098003968;
	// lis r18,-32014
	r18.s64 = -2098069504;
	// bne cr6,0x820e4790
	if (!cr6.getEQ()) goto loc_820E4790;
	// lwz r3,17308(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 17308);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e46d4
	if (cr6.getEQ()) goto loc_820E46D4;
	// lbz r11,0(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x820e4794
	if (cr6.getEQ()) goto loc_820E4794;
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// beq cr6,0x820e4794
	if (cr6.getEQ()) goto loc_820E4794;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e4794
	if (!cr6.getEQ()) goto loc_820E4794;
loc_820E46D4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820d4870
	sub_820D4870(ctx, base);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// li r10,0
	ctx.r10.s64 = 0;
	// rlwinm r11,r11,0,25,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFF7F;
	// stw r10,108(r31)
	PPC_STORE_U32(r31.u32 + 108, ctx.r10.u32);
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
	// lbz r11,1(r16)
	r11.u64 = PPC_LOAD_U8(r16.u32 + 1);
	// rlwinm r10,r11,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e4708
	if (cr6.getEQ()) goto loc_820E4708;
	// ori r11,r11,16
	r11.u64 = r11.u64 | 16;
	// stb r11,1(r16)
	PPC_STORE_U8(r16.u32 + 1, r11.u8);
loc_820E4708:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r7,172(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// li r8,4037
	ctx.r8.s64 = 4037;
	// lwz r3,19936(r25)
	ctx.r3.u64 = PPC_LOAD_U32(r25.u32 + 19936);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,241
	ctx.r4.s64 = 241;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// addi r4,r16,12
	ctx.r4.s64 = r16.s64 + 12;
	// bl 0x821448f8
	sub_821448F8(ctx, base);
	// lwz r11,24(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// lbz r10,128(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// extsb r3,r10
	ctx.r3.s64 = ctx.r10.s8;
	// lbz r4,3(r11)
	ctx.r4.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// bl 0x820cc610
	sub_820CC610(ctx, base);
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// lwz r5,24(r16)
	ctx.r5.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// addi r4,r1,200
	ctx.r4.s64 = ctx.r1.s64 + 200;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d75a8
	sub_820D75A8(ctx, base);
	// lwz r4,17308(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + 17308);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x820e4b1c
	if (cr6.getEQ()) goto loc_820E4B1C;
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// lwz r6,17232(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + 17232);
	// lwz r5,12508(r26)
	ctx.r5.u64 = PPC_LOAD_U32(r26.u32 + 12508);
	// lwz r29,24(r16)
	r29.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// bl 0x820d7648
	sub_820D7648(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e4790
	if (cr6.getEQ()) goto loc_820E4790;
	// li r11,5
	r11.s64 = 5;
	// stw r29,24(r16)
	PPC_STORE_U32(r16.u32 + 24, r29.u32);
	// stw r11,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, r11.u32);
	// b 0x820e4d9c
	goto loc_820E4D9C;
loc_820E4790:
	// lwz r3,17308(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 17308);
loc_820E4794:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e4a90
	if (cr6.getEQ()) goto loc_820E4A90;
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x820e4a90
	if (!cr6.getEQ()) goto loc_820E4A90;
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x820e4a24
	if (!cr6.getEQ()) goto loc_820E4A24;
	// lbz r11,0(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x820e47f0
	if (cr6.getEQ()) goto loc_820E47F0;
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// bne cr6,0x820e4a90
	if (!cr6.getEQ()) goto loc_820E4A90;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4a90
	if (cr6.getEQ()) goto loc_820E4A90;
	// bl 0x820c9b90
	sub_820C9B90(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// cmpw cr6,r29,r3
	cr6.compare<int32_t>(r29.s32, ctx.r3.s32, xer);
	// beq cr6,0x820e4a90
	if (cr6.getEQ()) goto loc_820E4A90;
	// lwz r3,17308(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 17308);
loc_820E47F0:
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r3,8(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r10,r10,31
	ctx.r10.u64 = ctx.r10.u32 & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e4a90
	if (cr6.getEQ()) goto loc_820E4A90;
	// lwz r11,144(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 144);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bge cr6,0x820e4a90
	if (!cr6.getLT()) goto loc_820E4A90;
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,26,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4a90
	if (cr6.getEQ()) goto loc_820E4A90;
	// lis r25,-32190
	r25.s64 = -2109603840;
	// lbz r10,128(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r5,r11,5404
	ctx.r5.s64 = r11.s64 + 5404;
	// extsb r6,r10
	ctx.r6.s64 = ctx.r10.s8;
	// lwz r4,19404(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 19404);
	// bl 0x82128fa8
	sub_82128FA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e4a90
	if (cr6.getEQ()) goto loc_820E4A90;
	// lfs f0,140(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 140);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// ble cr6,0x820e48ac
	if (!cr6.getGT()) goto loc_820E48AC;
	// lfs f7,184(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	ctx.f7.f64 = double(temp.f32);
	// fadds f0,f0,f17
	f0.f64 = double(float(f0.f64 + f17.f64));
	// lfs f13,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f7,f13,f7
	ctx.f7.f64 = double(float(ctx.f13.f64 * ctx.f7.f64));
	// lfs f10,180(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	ctx.f10.f64 = double(temp.f32);
	// lfs f9,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f9.f64 = double(temp.f32);
	// lfs f11,176(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	ctx.f11.f64 = double(temp.f32);
	// fmr f8,f9
	ctx.f8.f64 = ctx.f9.f64;
	// lfs f12,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f10,f9,f10,f7
	ctx.f10.f64 = double(float(ctx.f9.f64 * ctx.f10.f64 + ctx.f7.f64));
	// fmadds f10,f12,f11,f10
	ctx.f10.f64 = double(float(ctx.f12.f64 * ctx.f11.f64 + ctx.f10.f64));
	// fmuls f0,f10,f0
	f0.f64 = double(float(ctx.f10.f64 * f0.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fmadds f12,f11,f0,f12
	ctx.f12.f64 = double(float(ctx.f11.f64 * f0.f64 + ctx.f12.f64));
	// stfs f12,4(r30)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r30.u32 + 4, temp.u32);
	// lfs f12,180(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f12,f12,f0,f8
	ctx.f12.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f8.f64));
	// stfs f12,8(r30)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r30.u32 + 8, temp.u32);
	// lfs f12,184(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// stfs f0,12(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 12, temp.u32);
loc_820E48AC:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e48c4
	if (!cr6.getEQ()) goto loc_820E48C4;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82136c60
	sub_82136C60(ctx, base);
loc_820E48C4:
	// lwz r11,144(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 144);
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,144(r30)
	PPC_STORE_U32(r30.u32 + 144, r11.u32);
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// lwz r4,17308(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + 17308);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a3c20
	sub_820A3C20(ctx, base);
	// lwz r11,17308(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 17308);
	// lbz r11,1(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4d9c
	if (cr6.getEQ()) goto loc_820E4D9C;
	// lwz r11,19404(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 19404);
	// cmpwi cr6,r11,100
	cr6.compare<int32_t>(r11.s32, 100, xer);
	// beq cr6,0x820e4d9c
	if (cr6.getEQ()) goto loc_820E4D9C;
	// cmpwi cr6,r11,110
	cr6.compare<int32_t>(r11.s32, 110, xer);
	// beq cr6,0x820e4d9c
	if (cr6.getEQ()) goto loc_820E4D9C;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,17232(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 17232);
	// lwz r3,12508(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 12508);
	// bl 0x82118bc8
	sub_82118BC8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x820e4d9c
	if (cr6.getEQ()) goto loc_820E4D9C;
	// lfs f0,200(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	f0.f64 = double(temp.f32);
	// addi r28,r1,96
	r28.s64 = ctx.r1.s64 + 96;
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lfs f0,204(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	f0.f64 = double(temp.f32);
	// stfs f0,100(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// lfs f0,208(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	f0.f64 = double(temp.f32);
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x8210b6e0
	sub_8210B6E0(ctx, base);
	// lfs f13,48(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 48);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f0.f64 = double(temp.f32);
	// lwz r4,17232(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 17232);
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lwz r3,12508(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 12508);
	// fmadds f0,f13,f31,f0
	f0.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lfs f13,52(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 52);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	f0.f64 = double(temp.f32);
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fmadds f0,f13,f31,f0
	f0.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// stfs f0,100(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// lfs f0,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	f0.f64 = double(temp.f32);
	// lfs f13,56(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 56);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fmadds f0,f13,f31,f0
	f0.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// bl 0x82119218
	sub_82119218(ctx, base);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lfs f13,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f13.f64 = double(temp.f32);
	// lwz r4,17232(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 17232);
	// addi r28,r11,5532
	r28.s64 = r11.s64 + 5532;
	// lwz r3,12508(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 12508);
	// lfs f0,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// fnmsubs f0,f0,f31,f13
	f0.f64 = double(float(-(f0.f64 * f31.f64 - ctx.f13.f64)));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x82119218
	sub_82119218(ctx, base);
	// lfs f0,4(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 4);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lwz r4,17232(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 17232);
	// lwz r3,12508(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 12508);
	// fnmsubs f0,f0,f31,f13
	f0.f64 = double(float(-(f0.f64 * f31.f64 - ctx.f13.f64)));
	// stfs f0,100(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// bl 0x82119218
	sub_82119218(ctx, base);
	// lfs f0,8(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// lfs f13,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// addi r4,r1,288
	ctx.r4.s64 = ctx.r1.s64 + 288;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// fnmsubs f0,f0,f31,f13
	f0.f64 = double(float(-(f0.f64 * f31.f64 - ctx.f13.f64)));
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// bl 0x8210c3c8
	sub_8210C3C8(ctx, base);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x8210b6e0
	sub_8210B6E0(ctx, base);
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// lwz r5,17232(r27)
	ctx.r5.u64 = PPC_LOAD_U32(r27.u32 + 17232);
	// lwz r4,19404(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 19404);
	// lwz r3,12508(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 12508);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x820e4d9c
	goto loc_820E4D9C;
loc_820E4A24:
	// cmpwi cr6,r11,86
	cr6.compare<int32_t>(r11.s32, 86, xer);
	// bne cr6,0x820e4a90
	if (!cr6.getEQ()) goto loc_820E4A90;
	// lbz r11,0(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x820e4a58
	if (!cr6.getEQ()) goto loc_820E4A58;
	// li r6,1
	ctx.r6.s64 = 1;
	// lwz r3,8(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// mr r4,r17
	ctx.r4.u64 = r17.u64;
	// fmr f1,f27
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f27.f64;
	// bl 0x82129610
	sub_82129610(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// sth r11,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r11.u16);
	// b 0x820e4d9c
	goto loc_820E4D9C;
loc_820E4A58:
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// beq cr6,0x820e4a68
	if (cr6.getEQ()) goto loc_820E4A68;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bne cr6,0x820e4a84
	if (!cr6.getEQ()) goto loc_820E4A84;
loc_820E4A68:
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// li r6,86
	ctx.r6.s64 = 86;
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// lwz r3,8(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rlwinm r7,r11,15,30,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 15) & 0x3;
	// fmr f1,f15
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f15.f64;
	// bl 0x820e3598
	sub_820E3598(ctx, base);
loc_820E4A84:
	// li r11,0
	r11.s64 = 0;
	// sth r11,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r11.u16);
	// b 0x820e4d9c
	goto loc_820E4D9C;
loc_820E4A90:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// bne cr6,0x820e4b1c
	if (!cr6.getEQ()) goto loc_820E4B1C;
	// lfs f0,140(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 140);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// ble cr6,0x820e4b1c
	if (!cr6.getGT()) goto loc_820E4B1C;
	// lfs f10,176(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	ctx.f10.f64 = double(temp.f32);
	// fadds f0,f0,f17
	f0.f64 = double(float(f0.f64 + f17.f64));
	// lfs f12,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f6,f12,f10
	ctx.f6.f64 = double(float(ctx.f12.f64 * ctx.f10.f64));
	// lfs f9,184(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	ctx.f9.f64 = double(temp.f32);
	// lfs f13,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f11.f64 = double(temp.f32);
	// lfs f8,180(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	ctx.f8.f64 = double(temp.f32);
	// fmr f7,f11
	ctx.f7.f64 = ctx.f11.f64;
	// fcmpu cr6,f11,f21
	cr6.compare(ctx.f11.f64, f21.f64);
	// fmadds f9,f13,f9,f6
	ctx.f9.f64 = double(float(ctx.f13.f64 * ctx.f9.f64 + ctx.f6.f64));
	// fmadds f9,f11,f8,f9
	ctx.f9.f64 = double(float(ctx.f11.f64 * ctx.f8.f64 + ctx.f9.f64));
	// fmuls f0,f9,f0
	f0.f64 = double(float(ctx.f9.f64 * f0.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fmadds f12,f0,f10,f12
	ctx.f12.f64 = double(float(f0.f64 * ctx.f10.f64 + ctx.f12.f64));
	// stfs f12,4(r30)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r30.u32 + 4, temp.u32);
	// lfs f12,180(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f12,f0,f12,f7
	ctx.f12.f64 = double(float(f0.f64 * ctx.f12.f64 + ctx.f7.f64));
	// stfs f12,8(r30)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r30.u32 + 8, temp.u32);
	// lfs f12,184(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f0,f12,f13
	f0.f64 = double(float(f0.f64 * ctx.f12.f64 + ctx.f13.f64));
	// stfs f0,12(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 12, temp.u32);
	// bgt cr6,0x820e4b1c
	if (cr6.getGT()) goto loc_820E4B1C;
	// lfs f0,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bge cr6,0x820e4b18
	if (!cr6.getLT()) goto loc_820E4B18;
	// lfs f0,92(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 92);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// blt cr6,0x820e4b1c
	if (cr6.getLT()) goto loc_820E4B1C;
loc_820E4B18:
	// li r20,1
	r20.s64 = 1;
loc_820E4B1C:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,0,28,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e4b6c
	if (!cr6.getEQ()) goto loc_820E4B6C;
	// lfs f2,20(r16)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// lwz r3,24(r16)
	ctx.r3.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// lfs f1,12(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x821108b0
	sub_821108B0(ctx, base);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	f29.f64 = ctx.f1.f64;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x820d3a48
	sub_820D3A48(ctx, base);
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// lfs f0,16(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 16);
	f0.f64 = double(temp.f32);
	// fsubs f13,f29,f30
	ctx.f13.f64 = double(float(f29.f64 - f30.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820e4b68
	if (!cr6.getLT()) goto loc_820E4B68;
	// li r19,1
	r19.s64 = 1;
	// b 0x820e4b74
	goto loc_820E4B74;
loc_820E4B68:
	// li r19,0
	r19.s64 = 0;
loc_820E4B6C:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// bne cr6,0x820e4ba0
	if (!cr6.getEQ()) goto loc_820E4BA0;
loc_820E4B74:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e4b8c
	if (!cr6.getEQ()) goto loc_820E4B8C;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82136c60
	sub_82136C60(ctx, base);
loc_820E4B8C:
	// lwz r11,144(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 144);
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,144(r30)
	PPC_STORE_U32(r30.u32 + 144, r11.u32);
	// bne cr6,0x820e4c24
	if (!cr6.getEQ()) goto loc_820E4C24;
loc_820E4BA0:
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// beq cr6,0x820e4c38
	if (cr6.getEQ()) goto loc_820E4C38;
	// lfs f0,204(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
loc_820E4BB0:
	// fadds f0,f0,f14
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 + f14.f64));
	// stfs f0,16(r16)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r16.u32 + 16, temp.u32);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// stfs f0,92(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 92, temp.u32);
	// rlwinm r10,r11,0,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e4bd4
	if (!cr6.getEQ()) goto loc_820E4BD4;
	// ori r11,r11,256
	r11.u64 = r11.u64 | 256;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
loc_820E4BD4:
	// lfs f0,140(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 140);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// ble cr6,0x820e4c2c
	if (!cr6.getGT()) goto loc_820E4C2C;
	// lfs f13,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f13,18020(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18020);
	ctx.f13.f64 = double(temp.f32);
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,8(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 8, temp.u32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820e4c38
	if (!cr6.getLT()) goto loc_820E4C38;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4c2c
	if (cr6.getEQ()) goto loc_820E4C2C;
	// lwz r11,144(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 144);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820e4c2c
	if (!cr6.getEQ()) goto loc_820E4C2C;
	// stfs f13,8(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 8, temp.u32);
	// b 0x820e4c38
	goto loc_820E4C38;
loc_820E4C24:
	// fsubs f0,f29,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f29.f64 - f30.f64));
	// b 0x820e4bb0
	goto loc_820E4BB0;
loc_820E4C2C:
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d70f0
	sub_820D70F0(ctx, base);
loc_820E4C38:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x820e4d9c
	if (!cr6.getEQ()) goto loc_820E4D9C;
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x820e4c6c
	if (!cr6.getEQ()) goto loc_820E4C6C;
	// lwz r11,168(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 168);
	// cmpwi cr6,r11,120
	cr6.compare<int32_t>(r11.s32, 120, xer);
	// bge cr6,0x820e4d20
	if (!cr6.getLT()) goto loc_820E4D20;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820e0360
	sub_820E0360(ctx, base);
	// b 0x820e4d20
	goto loc_820E4D20;
loc_820E4C6C:
	// cmpwi cr6,r11,86
	cr6.compare<int32_t>(r11.s32, 86, xer);
	// bne cr6,0x820e4ce0
	if (!cr6.getEQ()) goto loc_820E4CE0;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x820e4d18
	if (cr6.getEQ()) goto loc_820E4D18;
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// bne cr6,0x820e4d18
	if (!cr6.getEQ()) goto loc_820E4D18;
	// lfs f13,4(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// lfs f0,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f12,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f0,f0,f13
	f0.f64 = double(float(f0.f64 * f0.f64 + ctx.f13.f64));
	// fmadds f13,f12,f12,f0
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// lfs f0,18016(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18016);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x820e4cb8
	if (!cr6.getGT()) goto loc_820E4CB8;
	// stfs f21,16(r30)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 16, temp.u32);
	// stfs f21,20(r30)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 20, temp.u32);
	// stfs f21,24(r30)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 24, temp.u32);
loc_820E4CB8:
	// lwz r11,168(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 168);
	// cmpwi cr6,r11,300
	cr6.compare<int32_t>(r11.s32, 300, xer);
	// ble cr6,0x820e4cd8
	if (!cr6.getGT()) goto loc_820E4CD8;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// stfs f21,28(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 28, temp.u32);
	// rlwinm r11,r11,0,28,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFCF;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// b 0x820e4d20
	goto loc_820E4D20;
loc_820E4CD8:
	// li r5,8
	ctx.r5.s64 = 8;
	// b 0x820e4cfc
	goto loc_820E4CFC;
loc_820E4CE0:
	// cmpwi cr6,r11,87
	cr6.compare<int32_t>(r11.s32, 87, xer);
	// bne cr6,0x820e4d20
	if (!cr6.getEQ()) goto loc_820E4D20;
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// bne cr6,0x820e4d18
	if (!cr6.getEQ()) goto loc_820E4D18;
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// bne cr6,0x820e4d18
	if (!cr6.getEQ()) goto loc_820E4D18;
	// li r5,9
	ctx.r5.s64 = 9;
loc_820E4CFC:
	// lbz r11,1(r16)
	r11.u64 = PPC_LOAD_U8(r16.u32 + 1);
	// addi r6,r16,48
	ctx.r6.s64 = r16.s64 + 48;
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// lwz r4,24(r16)
	ctx.r4.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// rlwinm r7,r11,29,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1;
	// bl 0x8213f300
	sub_8213F300(ctx, base);
	// b 0x820e4d20
	goto loc_820E4D20;
loc_820E4D18:
	// li r11,0
	r11.s64 = 0;
	// sth r11,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r11.u16);
loc_820E4D20:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x820e4d30
	if (cr6.getEQ()) goto loc_820E4D30;
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// beq cr6,0x820e4d9c
	if (cr6.getEQ()) goto loc_820E4D9C;
loc_820E4D30:
	// lwz r11,-6372(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -6372);
	// lwz r10,172(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 172);
	// addi r9,r11,-2
	ctx.r9.s64 = r11.s64 + -2;
	// cmpw cr6,r10,r9
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, xer);
	// bge cr6,0x820e4d98
	if (!cr6.getLT()) goto loc_820E4D98;
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x820e4d68
	if (cr6.getEQ()) goto loc_820E4D68;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x820e4d68
	if (cr6.getEQ()) goto loc_820E4D68;
	// li r8,4281
	ctx.r8.s64 = 4281;
	// li r4,45
	ctx.r4.s64 = 45;
	// b 0x820e4d70
	goto loc_820E4D70;
loc_820E4D68:
	// li r8,4279
	ctx.r8.s64 = 4279;
	// li r4,3
	ctx.r4.s64 = 3;
loc_820E4D70:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r7,172(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// addi r4,r16,12
	ctx.r4.s64 = r16.s64 + 12;
	// bl 0x821448f8
	sub_821448F8(ctx, base);
	// lwz r11,-6372(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -6372);
loc_820E4D98:
	// stw r11,172(r30)
	PPC_STORE_U32(r30.u32 + 172, r11.u32);
loc_820E4D9C:
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4ea8
	if (cr6.getEQ()) goto loc_820E4EA8;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,0,21,21
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4ea8
	if (cr6.getEQ()) goto loc_820E4EA8;
	// lwz r11,-6372(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -6372);
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x820e4ea8
	if (!cr0.getEQ()) goto loc_820E4EA8;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,0(r17)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r17.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,92(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 92);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,16180(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16180);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fadds f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f13,144(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// lfs f13,96(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 96);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,17876(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 17876);
	ctx.f12.f64 = double(temp.f32);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// fsubs f12,f11,f12
	ctx.f12.f64 = double(float(ctx.f11.f64 - ctx.f12.f64));
	// stfs f12,148(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x820e4e1c
	if (!cr0.getEQ()) goto loc_820E4E1C;
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// b 0x820e4e20
	goto loc_820E4E20;
loc_820E4E1C:
	// fsubs f0,f13,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
loc_820E4E20:
	// li r9,-1
	ctx.r9.s64 = -1;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// li r5,0
	ctx.r5.s64 = 0;
	// stfs f0,152(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// li r6,20
	ctx.r6.s64 = 20;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// stb r5,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r5.u8);
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r5,24(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// addi r9,r11,48
	ctx.r9.s64 = r11.s64 + 48;
	// bl 0x821427b8
	sub_821427B8(ctx, base);
	// lis r10,26214
	ctx.r10.s64 = 1717960704;
	// lwz r11,-6372(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -6372);
	// ori r10,r10,26215
	ctx.r10.u64 = ctx.r10.u64 | 26215;
	// mulhw r10,r11,r10
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(ctx.r10.s32)) >> 32;
	// srawi r10,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 4;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x820e4ea8
	if (!cr0.getEQ()) goto loc_820E4EA8;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// li r7,1
	ctx.r7.s64 = 1;
	// li r5,10
	ctx.r5.s64 = 10;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// addi r6,r11,48
	ctx.r6.s64 = r11.s64 + 48;
	// lwz r4,24(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// bl 0x8213f300
	sub_8213F300(ctx, base);
loc_820E4EA8:
	// lwz r19,124(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r24,128(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
loc_820E4EB0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d4d08
	sub_820D4D08(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d0458
	sub_820D0458(ctx, base);
	// addi r4,r31,124
	ctx.r4.s64 = r31.s64 + 124;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820d4c20
	sub_820D4C20(ctx, base);
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820dc950
	sub_820DC950(ctx, base);
	// lwz r23,112(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
loc_820E4ED8:
	// li r20,0
	r20.s64 = 0;
	// li r21,1
	r21.s64 = 1;
loc_820E4EE0:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x820e53b8
	if (!cr6.getEQ()) goto loc_820E53B8;
	// lwz r30,8(r16)
	r30.u64 = PPC_LOAD_U32(r16.u32 + 8);
	// lfs f16,180(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	f16.f64 = double(temp.f32);
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e4f1c
	if (!cr6.getEQ()) goto loc_820E4F1C;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4f1c
	if (cr6.getEQ()) goto loc_820E4F1C;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e4fec
	if (!cr6.getEQ()) goto loc_820E4FEC;
loc_820E4F1C:
	// lwz r11,232(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 232);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820e4fec
	if (!cr6.getGT()) goto loc_820E4FEC;
	// lbz r10,188(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 188);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e4fec
	if (!cr6.getEQ()) goto loc_820E4FEC;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm r10,r10,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e4fec
	if (!cr6.getEQ()) goto loc_820E4FEC;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r9,160(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 160);
	// lwz r10,-6376(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6376);
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x820e4fec
	if (!cr6.getLT()) goto loc_820E4FEC;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820de7d8
	sub_820DE7D8(ctx, base);
	// lwz r29,200(r30)
	r29.u64 = PPC_LOAD_U32(r30.u32 + 200);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x820e4f94
	if (cr6.getEQ()) goto loc_820E4F94;
loc_820E4F74:
	// cmplw cr6,r29,r30
	cr6.compare<uint32_t>(r29.u32, r30.u32, xer);
	// beq cr6,0x820e4f94
	if (cr6.getEQ()) goto loc_820E4F94;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820de7d8
	sub_820DE7D8(ctx, base);
	// lwz r29,200(r29)
	r29.u64 = PPC_LOAD_U32(r29.u32 + 200);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x820e4f74
	if (!cr6.getEQ()) goto loc_820E4F74;
loc_820E4F94:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e4fec
	if (cr6.getEQ()) goto loc_820E4FEC;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e4fec
	if (!cr6.getEQ()) goto loc_820E4FEC;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e4fec
	if (cr6.getEQ()) goto loc_820E4FEC;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r29,r11,3,31,31
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0x1;
	// bl 0x820d8650
	sub_820D8650(ctx, base);
	// lwz r27,56(r16)
	r27.u64 = PPC_LOAD_U32(r16.u32 + 56);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// bl 0x8215cb90
	sub_8215CB90(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// bl 0x8215ccb8
	sub_8215CCB8(ctx, base);
loc_820E4FEC:
	// lbz r11,188(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 188);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x820e504c
	if (!cr6.getEQ()) goto loc_820E504C;
	// lwz r11,200(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 200);
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e5040
	if (cr6.getEQ()) goto loc_820E5040;
loc_820E5008:
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x820e5038
	if (cr6.getEQ()) goto loc_820E5038;
	// lbz r9,188(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 188);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820e5028
	if (!cr6.getEQ()) goto loc_820E5028;
	// lfs f0,180(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// ble cr6,0x820e502c
	if (!cr6.getGT()) goto loc_820E502C;
loc_820E5028:
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
loc_820E502C:
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e5008
	if (!cr6.getEQ()) goto loc_820E5008;
loc_820E5038:
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820e504c
	if (cr6.getEQ()) goto loc_820E504C;
loc_820E5040:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820de738
	sub_820DE738(ctx, base);
	// stb r21,188(r30)
	PPC_STORE_U8(r30.u32 + 188, r21.u8);
loc_820E504C:
	// lhz r11,154(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 154);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x820e5094
	if (!cr6.getEQ()) goto loc_820E5094;
	// lbz r11,188(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 188);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e5070
	if (cr6.getEQ()) goto loc_820E5070;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x820e5094
	if (!cr6.getEQ()) goto loc_820E5094;
loc_820E5070:
	// lfs f0,180(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bgt cr6,0x820e5094
	if (cr6.getGT()) goto loc_820E5094;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820dfd48
	sub_820DFD48(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e5094
	if (cr6.getEQ()) goto loc_820E5094;
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// bl 0x820df1b8
	sub_820DF1B8(ctx, base);
loc_820E5094:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,248(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 248);
	// lwz r11,-6376(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6376);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// blt cr6,0x820e50b4
	if (cr6.getLT()) goto loc_820E50B4;
	// lwz r11,-6384(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e6770
	if (!cr6.getEQ()) goto loc_820E6770;
loc_820E50B4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820e3080
	sub_820E3080(ctx, base);
	// b 0x820e6770
	goto loc_820E6770;
loc_820E50C0:
	// lfs f13,96(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 96);
	ctx.f13.f64 = double(temp.f32);
	// mr r11,r21
	r11.u64 = r21.u64;
	// fcmpu cr6,f13,f17
	cr6.compare(ctx.f13.f64, f17.f64);
	// bge cr6,0x820e5168
	if (!cr6.getLT()) goto loc_820E5168;
	// lfs f12,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,100(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 100);
	f0.f64 = double(temp.f32);
	// fmadds f13,f0,f12,f13
	ctx.f13.f64 = double(float(f0.f64 * ctx.f12.f64 + ctx.f13.f64));
	// stfs f13,96(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 96, temp.u32);
	// lwz r11,-6384(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820e50fc
	if (!cr6.getGT()) goto loc_820E50FC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,12884(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12884);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f0,100(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 100, temp.u32);
loc_820E50FC:
	// lfs f0,96(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 96);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f17
	cr6.compare(f0.f64, f17.f64);
	// bgt cr6,0x820e5118
	if (cr6.getGT()) goto loc_820E5118;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,0,28,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e511c
	if (cr6.getEQ()) goto loc_820E511C;
loc_820E5118:
	// stfs f17,96(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f17.f64);
	PPC_STORE_U32(r30.u32 + 96, temp.u32);
loc_820E511C:
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// lfs f1,96(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 96);
	ctx.f1.f64 = double(temp.f32);
	// addi r4,r30,120
	ctx.r4.s64 = r30.s64 + 120;
	// addi r3,r30,104
	ctx.r3.s64 = r30.s64 + 104;
	// bl 0x8210cab0
	sub_8210CAB0(ctx, base);
	// addi r29,r31,24
	r29.s64 = r31.s64 + 24;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x8210c988
	sub_8210C988(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lfs f1,192(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 192);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bc18
	sub_8210BC18(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lfs f1,196(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 196);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bc40
	sub_8210BC40(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lfs f1,200(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 200);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bca0
	sub_8210BCA0(ctx, base);
	// mr r11,r20
	r11.u64 = r20.u64;
loc_820E5168:
	// lfs f0,4(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bne cr6,0x820e518c
	if (!cr6.getEQ()) goto loc_820E518C;
	// lfs f0,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bne cr6,0x820e518c
	if (!cr6.getEQ()) goto loc_820E518C;
	// lfs f0,96(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 96);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f17
	cr6.compare(f0.f64, f17.f64);
	// bge cr6,0x820e5344
	if (!cr6.getLT()) goto loc_820E5344;
loc_820E518C:
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r10,r10,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e5344
	if (!cr6.getEQ()) goto loc_820E5344;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r3,8(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// bl 0x820d4a60
	sub_820D4A60(ctx, base);
	// lwz r10,-6384(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r11,r20
	r11.u64 = r20.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820e5270
	if (!cr6.getGT()) goto loc_820E5270;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f11,14064(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14064);
	ctx.f11.f64 = double(temp.f32);
loc_820E51C4:
	// lfs f0,4(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	f0.f64 = double(temp.f32);
	// lfs f13,160(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,160(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// lfs f0,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f13,168(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,168(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// lfs f0,96(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 96);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f17
	cr6.compare(f0.f64, f17.f64);
	// blt cr6,0x820e5260
	if (cr6.getLT()) goto loc_820E5260;
	// lfs f12,148(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 148);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f12,f21
	cr6.compare(ctx.f12.f64, f21.f64);
	// ble cr6,0x820e5248
	if (!cr6.getGT()) goto loc_820E5248;
	// lfs f13,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// fmuls f10,f13,f13
	ctx.f10.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// lfs f0,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	f0.f64 = double(temp.f32);
	// fmadds f10,f0,f0,f10
	ctx.f10.f64 = double(float(f0.f64 * f0.f64 + ctx.f10.f64));
	// fsqrts f10,f10
	ctx.f10.f64 = double(float(sqrt(ctx.f10.f64)));
	// fdivs f10,f12,f10
	ctx.f10.f64 = double(float(ctx.f12.f64 / ctx.f10.f64));
	// lfs f12,-6368(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f12,f10,f12
	ctx.f12.f64 = double(float(ctx.f10.f64 * ctx.f12.f64));
	// fcmpu cr6,f12,f17
	cr6.compare(ctx.f12.f64, f17.f64);
	// blt cr6,0x820e5234
	if (cr6.getLT()) goto loc_820E5234;
	// stfs f21,4(r30)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 4, temp.u32);
	// stfs f21,12(r30)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 12, temp.u32);
	// b 0x820e5260
	goto loc_820E5260;
loc_820E5234:
	// fnmsubs f13,f13,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(-(ctx.f13.f64 * ctx.f12.f64 - ctx.f13.f64)));
	// stfs f13,4(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 4, temp.u32);
	// fnmsubs f0,f0,f12,f0
	f0.f64 = double(float(-(f0.f64 * ctx.f12.f64 - f0.f64)));
	// stfs f0,12(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 12, temp.u32);
	// b 0x820e5260
	goto loc_820E5260;
loc_820E5248:
	// lfs f0,4(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	f0.f64 = double(temp.f32);
	// lfs f13,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f11
	f0.f64 = double(float(f0.f64 * ctx.f11.f64));
	// fmuls f13,f13,f11
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f11.f64));
	// stfs f0,4(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 4, temp.u32);
	// stfs f13,12(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 12, temp.u32);
loc_820E5260:
	// lwz r10,-6384(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x820e51c4
	if (cr6.getLT()) goto loc_820E51C4;
loc_820E5270:
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e52b4
	if (cr6.getEQ()) goto loc_820E52B4;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e52b4
	if (cr6.getEQ()) goto loc_820E52B4;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,384
	ctx.r6.s64 = ctx.r1.s64 + 384;
	// addi r5,r1,400
	ctx.r5.s64 = ctx.r1.s64 + 400;
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d65e0
	sub_820D65E0(ctx, base);
	// b 0x820e52cc
	goto loc_820E52CC;
loc_820E52B4:
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,384
	ctx.r6.s64 = ctx.r1.s64 + 384;
	// addi r5,r1,400
	ctx.r5.s64 = ctx.r1.s64 + 400;
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d6b60
	sub_820D6B60(ctx, base);
loc_820E52CC:
	// lfs f2,20(r16)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// lwz r3,24(r16)
	ctx.r3.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// lfs f1,12(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// mr r27,r21
	r27.u64 = r21.u64;
	// bl 0x821108b0
	sub_821108B0(ctx, base);
	// addi r4,r31,24
	ctx.r4.s64 = r31.s64 + 24;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// fmr f10,f1
	ctx.fpscr.disableFlushMode();
	ctx.f10.f64 = ctx.f1.f64;
	// bl 0x820d3a48
	sub_820D3A48(ctx, base);
	// fsubs f0,f10,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f10.f64 - ctx.f1.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,13964(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13964);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f14
	f0.f64 = double(float(f0.f64 + f14.f64));
	// stfs f0,16(r16)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r16.u32 + 16, temp.u32);
	// stfs f0,92(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 92, temp.u32);
	// lfs f0,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820e534c
	if (!cr6.getLT()) goto loc_820E534C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,14044(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14044);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x820e534c
	if (!cr6.getGT()) goto loc_820E534C;
	// lfs f0,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820e534c
	if (!cr6.getLT()) goto loc_820E534C;
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x820e534c
	if (!cr6.getGT()) goto loc_820E534C;
	// stfs f21,12(r30)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 12, temp.u32);
	// stfs f21,4(r30)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 4, temp.u32);
	// b 0x820e534c
	goto loc_820E534C;
loc_820E5344:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e535c
	if (!cr6.getEQ()) goto loc_820E535C;
loc_820E534C:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,0,28,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e53ac
	if (cr6.getEQ()) goto loc_820E53AC;
loc_820E535C:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820d4870
	sub_820D4870(ctx, base);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// stw r20,108(r31)
	PPC_STORE_U32(r31.u32 + 108, r20.u32);
	// rlwinm r11,r11,0,25,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFF7F;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
	// lbz r11,1(r16)
	r11.u64 = PPC_LOAD_U8(r16.u32 + 1);
	// rlwinm r10,r11,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e538c
	if (cr6.getEQ()) goto loc_820E538C;
	// ori r11,r11,16
	r11.u64 = r11.u64 | 16;
	// stb r11,1(r16)
	PPC_STORE_U8(r16.u32 + 1, r11.u8);
loc_820E538C:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x820e53ac
	if (!cr6.getEQ()) goto loc_820E53AC;
	// lwz r11,24(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// lbz r10,128(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// extsb r3,r10
	ctx.r3.s64 = ctx.r10.s8;
	// lbz r4,3(r11)
	ctx.r4.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// bl 0x820cc610
	sub_820CC610(ctx, base);
loc_820E53AC:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x820e4ed8
	if (cr6.getEQ()) goto loc_820E4ED8;
	// b 0x820e4eb0
	goto loc_820E4EB0;
loc_820E53B8:
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// bne cr6,0x820e56f0
	if (!cr6.getEQ()) goto loc_820E56F0;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r10,r10,0,3,3
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x10000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e56f0
	if (!cr6.getEQ()) goto loc_820E56F0;
	// lwz r30,8(r16)
	r30.u64 = PPC_LOAD_U32(r16.u32 + 8);
	// lwz r11,212(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 212);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e53e8
	if (cr6.getEQ()) goto loc_820E53E8;
	// lfs f31,204(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 204);
	f31.f64 = double(temp.f32);
	// b 0x820e53ec
	goto loc_820E53EC;
loc_820E53E8:
	// lfs f31,208(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 208);
	f31.f64 = double(temp.f32);
loc_820E53EC:
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lfs f13,88(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 88);
	ctx.f13.f64 = double(temp.f32);
	// mr r11,r21
	r11.u64 = r21.u64;
	// lfs f0,232(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 232);
	f0.f64 = double(temp.f32);
	// lfs f12,92(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 92);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// lfs f11,96(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 96);
	ctx.f11.f64 = double(temp.f32);
	// lfs f10,12(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f1,f10,f13
	ctx.f1.f64 = double(float(ctx.f10.f64 - ctx.f13.f64));
	// lfs f9,16(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 16);
	ctx.f9.f64 = double(temp.f32);
	// lfs f10,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f13,f9,f12
	ctx.f13.f64 = double(float(ctx.f9.f64 - ctx.f12.f64));
	// fsubs f2,f10,f11
	ctx.f2.f64 = double(float(ctx.f10.f64 - ctx.f11.f64));
	// ble cr6,0x820e5444
	if (!cr6.getGT()) goto loc_820E5444;
	// fmuls f13,f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f13,f2,f2,f13
	ctx.f13.f64 = double(float(ctx.f2.f64 * ctx.f2.f64 + ctx.f13.f64));
	// fmadds f13,f1,f1,f13
	ctx.f13.f64 = double(float(ctx.f1.f64 * ctx.f1.f64 + ctx.f13.f64));
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x820e5444
	if (!cr6.getGT()) goto loc_820E5444;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_820E5444:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r10,r10,0,2,2
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e558c
	if (!cr6.getEQ()) goto loc_820E558C;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e558c
	if (cr6.getEQ()) goto loc_820E558C;
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lfs f0,200(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 200);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bge cr6,0x820e5474
	if (!cr6.getLT()) goto loc_820E5474;
	// fadds f0,f0,f20
	f0.f64 = double(float(f0.f64 + f20.f64));
	// b 0x820e5480
	goto loc_820E5480;
loc_820E5474:
	// fcmpu cr6,f0,f20
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f20.f64);
	// blt cr6,0x820e5480
	if (cr6.getLT()) goto loc_820E5480;
	// fsubs f0,f0,f20
	f0.f64 = double(float(f0.f64 - f20.f64));
loc_820E5480:
	// lfs f13,196(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 196);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// fcmpu cr6,f0,f20
	cr6.compare(f0.f64, f20.f64);
	// blt cr6,0x820e5494
	if (cr6.getLT()) goto loc_820E5494;
	// fsubs f0,f0,f20
	f0.f64 = double(float(f0.f64 - f20.f64));
loc_820E5494:
	// fsubs f0,f1,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64 - f0.f64));
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bge cr6,0x820e54a4
	if (!cr6.getLT()) goto loc_820E54A4;
	// fadds f0,f0,f20
	f0.f64 = double(float(f0.f64 + f20.f64));
loc_820E54A4:
	// fsubs f0,f0,f19
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 - f19.f64));
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bge cr6,0x820e54b4
	if (!cr6.getLT()) goto loc_820E54B4;
	// fadds f0,f0,f20
	f0.f64 = double(float(f0.f64 + f20.f64));
loc_820E54B4:
	// fcmpu cr6,f0,f19
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f19.f64);
	// ble cr6,0x820e54c0
	if (!cr6.getGT()) goto loc_820E54C0;
	// fsubs f0,f0,f20
	f0.f64 = double(float(f0.f64 - f20.f64));
loc_820E54C0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,14156(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14156);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820e558c
	if (cr6.getGT()) goto loc_820E558C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,17904(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17904);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820e558c
	if (cr6.getLT()) goto loc_820E558C;
	// lwz r11,24(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x820b3e10
	sub_820B3E10(ctx, base);
	// li r8,27
	ctx.r8.s64 = 27;
	// lfs f4,20(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f4.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f3,12(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,20(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// fmr f8,f17
	ctx.f8.f64 = f17.f64;
	// lfs f1,12(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// fmr f7,f21
	ctx.f7.f64 = f21.f64;
	// fmr f6,f15
	ctx.f6.f64 = f15.f64;
	// fmr f5,f15
	ctx.f5.f64 = f15.f64;
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e5580
	if (cr6.getEQ()) goto loc_820E5580;
	// lwz r10,224(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 224);
	// addi r9,r1,112
	ctx.r9.s64 = ctx.r1.s64 + 112;
	// lwz r11,-6384(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// stw r11,224(r30)
	PPC_STORE_U32(r30.u32 + 224, r11.u32);
	// lfs f0,19408(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 19408);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,12020(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12020);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r9
	PPC_STORE_U32(ctx.r9.u32, f0.u32);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x820e5580
	if (cr6.getLT()) goto loc_820E5580;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r10,17236(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 17236);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bgt cr6,0x820e557c
	if (cr6.getGT()) goto loc_820E557C;
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// stw r10,17236(r11)
	PPC_STORE_U32(r11.u32 + 17236, ctx.r10.u32);
loc_820E557C:
	// stw r20,224(r30)
	PPC_STORE_U32(r30.u32 + 224, r20.u32);
loc_820E5580:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820b3e10
	sub_820B3E10(ctx, base);
loc_820E558C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f11,200(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 200);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,216(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 216);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f11,f31
	cr6.compare(ctx.f11.f64, f31.f64);
	// fmuls f13,f0,f0
	ctx.f13.f64 = double(float(f0.f64 * f0.f64));
	// lfs f10,18012(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18012);
	ctx.f10.f64 = double(temp.f32);
	// bge cr6,0x820e5648
	if (!cr6.getLT()) goto loc_820E5648;
	// fnmsubs f13,f13,f10,f31
	ctx.f13.f64 = double(float(-(ctx.f13.f64 * ctx.f10.f64 - f31.f64)));
	// fcmpu cr6,f11,f13
	cr6.compare(ctx.f11.f64, ctx.f13.f64);
	// blt cr6,0x820e55dc
	if (cr6.getLT()) goto loc_820E55DC;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f12,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,18008(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18008);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f0,f12,f13,f0
	f0.f64 = double(float(-(ctx.f12.f64 * ctx.f13.f64 - f0.f64)));
	// stfs f0,216(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 216, temp.u32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820e561c
	if (!cr6.getLT()) goto loc_820E561C;
	// stfs f13,216(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 216, temp.u32);
	// b 0x820e561c
	goto loc_820E561C;
loc_820E55DC:
	// lfs f13,220(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 220);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820e561c
	if (!cr6.getLT()) goto loc_820E561C;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f9,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f9.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,18008(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18008);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f9,f12,f0
	f0.f64 = double(float(ctx.f9.f64 * ctx.f12.f64 + f0.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820e5608
	if (!cr6.getGT()) goto loc_820E5608;
	// fmr f0,f13
	f0.f64 = ctx.f13.f64;
loc_820E5608:
	// fmuls f13,f0,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f0.f64 * f0.f64));
	// fnmsubs f13,f13,f10,f31
	ctx.f13.f64 = double(float(-(ctx.f13.f64 * ctx.f10.f64 - f31.f64)));
	// fcmpu cr6,f11,f13
	cr6.compare(ctx.f11.f64, ctx.f13.f64);
	// bge cr6,0x820e561c
	if (!cr6.getLT()) goto loc_820E561C;
	// stfs f0,216(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 216, temp.u32);
loc_820E561C:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f13,216(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 216);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmadds f0,f13,f0,f11
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f11.f64));
	// stfs f0,200(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 200, temp.u32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// blt cr6,0x820e6770
	if (cr6.getLT()) goto loc_820E6770;
	// stfs f31,200(r30)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r30.u32 + 200, temp.u32);
	// stw r20,212(r30)
	PPC_STORE_U32(r30.u32 + 212, r20.u32);
	// stfs f21,216(r30)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 216, temp.u32);
	// b 0x820e6770
	goto loc_820E6770;
loc_820E5648:
	// fmadds f13,f13,f10,f31
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f10.f64 + f31.f64));
	// fcmpu cr6,f11,f13
	cr6.compare(ctx.f11.f64, ctx.f13.f64);
	// bgt cr6,0x820e567c
	if (cr6.getGT()) goto loc_820E567C;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f12,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,18008(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18008);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f0,f12,f13,f0
	f0.f64 = double(float(-(ctx.f12.f64 * ctx.f13.f64 - f0.f64)));
	// stfs f0,216(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 216, temp.u32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820e56c0
	if (!cr6.getLT()) goto loc_820E56C0;
	// stfs f13,216(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 216, temp.u32);
	// b 0x820e56c0
	goto loc_820E56C0;
loc_820E567C:
	// lfs f13,220(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 220);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820e56c0
	if (!cr6.getLT()) goto loc_820E56C0;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f11,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f11.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,18008(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18008);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f11,f12,f0
	f0.f64 = double(float(ctx.f11.f64 * ctx.f12.f64 + f0.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820e56a8
	if (!cr6.getGT()) goto loc_820E56A8;
	// fmr f0,f13
	f0.f64 = ctx.f13.f64;
loc_820E56A8:
	// fmuls f13,f0,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f0.f64 * f0.f64));
	// lfs f12,200(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 200);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f13,f13,f10,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f10.f64 + f31.f64));
	// fcmpu cr6,f12,f13
	cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// ble cr6,0x820e56c0
	if (!cr6.getGT()) goto loc_820E56C0;
	// stfs f0,216(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 216, temp.u32);
loc_820E56C0:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f13,200(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 200);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,216(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 216);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fnmsubs f0,f12,f0,f13
	f0.f64 = double(float(-(ctx.f12.f64 * f0.f64 - ctx.f13.f64)));
	// stfs f0,200(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 200, temp.u32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bgt cr6,0x820e6770
	if (cr6.getGT()) goto loc_820E6770;
	// stfs f31,200(r30)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r30.u32 + 200, temp.u32);
	// stw r21,212(r30)
	PPC_STORE_U32(r30.u32 + 212, r21.u32);
	// stfs f21,216(r30)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 216, temp.u32);
	// b 0x820e6770
	goto loc_820E6770;
loc_820E56F0:
	// cmplwi cr6,r11,13
	cr6.compare<uint32_t>(r11.u32, 13, xer);
	// bne cr6,0x820e5d38
	if (!cr6.getEQ()) goto loc_820E5D38;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r10,r10,0,3,3
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x10000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e5d38
	if (!cr6.getEQ()) goto loc_820E5D38;
	// lwz r30,8(r16)
	r30.u64 = PPC_LOAD_U32(r16.u32 + 8);
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r28,r20
	r28.u64 = r20.u64;
	// rlwinm r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// mr r27,r20
	r27.u64 = r20.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e5830
	if (cr6.getEQ()) goto loc_820E5830;
	// rlwinm r11,r11,0,1,1
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	// addi r28,r30,144
	r28.s64 = r30.s64 + 144;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e5750
	if (cr6.getEQ()) goto loc_820E5750;
	// lfs f0,156(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 156);
	f0.f64 = double(temp.f32);
	// lfs f13,144(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 144);
	ctx.f13.f64 = double(temp.f32);
	// stfs f0,152(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 152, temp.u32);
	// stfs f13,132(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 132, temp.u32);
	// b 0x820e57e4
	goto loc_820E57E4;
loc_820E5750:
	// lfs f0,144(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 144);
	f0.f64 = double(temp.f32);
	// lfs f13,132(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 132);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bne cr6,0x820e57e4
	if (!cr6.getEQ()) goto loc_820E57E4;
	// lfs f0,156(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 156);
	f0.f64 = double(temp.f32);
	// lfs f13,152(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 152);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bne cr6,0x820e57e4
	if (!cr6.getEQ()) goto loc_820E57E4;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,18004(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 18004);
	f0.f64 = double(temp.f32);
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f13,96(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f13,f13,f26
	ctx.f13.f64 = double(float(ctx.f13.f64 * f26.f64));
	// fmadds f0,f13,f0,f17
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + f17.f64));
	// fmuls f0,f0,f18
	f0.f64 = double(float(f0.f64 * f18.f64));
	// stfs f0,152(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 152, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f26
	f0.f64 = double(float(f0.f64 * f26.f64));
	// fmuls f0,f0,f20
	f0.f64 = double(float(f0.f64 * f20.f64));
	// stfs f0,132(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 132, temp.u32);
loc_820E57E4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,132(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 132);
	ctx.f1.f64 = double(temp.f32);
	// addi r5,r30,148
	ctx.r5.s64 = r30.s64 + 148;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lfs f4,18000(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18000);
	ctx.f4.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,17996(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17996);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// bl 0x820d7060
	sub_820D7060(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,152(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 152);
	ctx.f1.f64 = double(temp.f32);
	// addi r5,r30,160
	ctx.r5.s64 = r30.s64 + 160;
	// addi r3,r30,156
	ctx.r3.s64 = r30.s64 + 156;
	// lfs f4,17992(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17992);
	ctx.f4.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,17988(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17988);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// bl 0x820d7060
	sub_820D7060(ctx, base);
	// b 0x820e6770
	goto loc_820E6770;
loc_820E5830:
	// lfs f0,12(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	f0.f64 = double(temp.f32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lfs f13,88(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 88);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f30,f0,f13
	f30.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,96(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 96);
	f0.f64 = double(temp.f32);
	// lfs f12,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// rlwinm r11,r11,0,4,4
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8000000;
	// fsubs f29,f12,f0
	f29.f64 = double(float(ctx.f12.f64 - f0.f64));
	// lfs f0,16(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 16);
	f0.f64 = double(temp.f32);
	// lfs f13,92(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 92);
	ctx.f13.f64 = double(temp.f32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2948(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2948);
	f0.f64 = double(temp.f32);
	// fsubs f28,f13,f0
	f28.f64 = double(float(ctx.f13.f64 - f0.f64));
	// fmuls f0,f30,f30
	f0.f64 = double(float(f30.f64 * f30.f64));
	// fmadds f25,f29,f29,f0
	f25.f64 = double(float(f29.f64 * f29.f64 + f0.f64));
	// fsqrts f27,f25
	f27.f64 = double(float(sqrt(f25.f64)));
	// fmr f26,f27
	f26.f64 = f27.f64;
	// beq cr6,0x820e5888
	if (cr6.getEQ()) goto loc_820E5888;
	// fmadds f25,f28,f28,f25
	f25.f64 = double(float(f28.f64 * f28.f64 + f25.f64));
	// fsqrts f26,f25
	f26.f64 = double(float(sqrt(f25.f64)));
loc_820E5888:
	// fmr f1,f25
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f25.f64;
	// bl 0x82124138
	sub_82124138(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lfs f31,132(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 132);
	f31.f64 = double(temp.f32);
	// lfs f23,152(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 152);
	f23.f64 = double(temp.f32);
	// fmr f22,f1
	f22.f64 = ctx.f1.f64;
	// rlwinm r10,r11,0,1,1
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f24,14444(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14444);
	f24.f64 = double(temp.f32);
	// bne cr6,0x820e58c0
	if (!cr6.getEQ()) goto loc_820E58C0;
	// rlwinm r10,r11,0,2,2
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e58cc
	if (cr6.getEQ()) goto loc_820E58CC;
loc_820E58C0:
	// rlwinm r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e58d8
	if (cr6.getEQ()) goto loc_820E58D8;
loc_820E58CC:
	// lfs f0,168(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 168);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// bgt cr6,0x820e5a58
	if (cr6.getGT()) goto loc_820E5A58;
loc_820E58D8:
	// fmr f2,f29
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f29.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	f29.f64 = ctx.f1.f64;
	// fmr f2,f27
	ctx.f2.f64 = f27.f64;
	// fmr f1,f28
	ctx.f1.f64 = f28.f64;
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// rlwinm r10,r11,0,1,1
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e5954
	if (!cr6.getEQ()) goto loc_820E5954;
	// rlwinm r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e5954
	if (!cr6.getEQ()) goto loc_820E5954;
	// lfs f0,144(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 144);
	f0.f64 = double(temp.f32);
	// fsubs f0,f29,f0
	f0.f64 = double(float(f29.f64 - f0.f64));
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bge cr6,0x820e5928
	if (!cr6.getLT()) goto loc_820E5928;
	// fadds f0,f0,f20
	f0.f64 = double(float(f0.f64 + f20.f64));
loc_820E5928:
	// fcmpu cr6,f0,f19
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f19.f64);
	// ble cr6,0x820e5934
	if (!cr6.getGT()) goto loc_820E5934;
	// fsubs f0,f0,f20
	f0.f64 = double(float(f0.f64 - f20.f64));
loc_820E5934:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,17984(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17984);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820e5a58
	if (!cr6.getLT()) goto loc_820E5A58;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,17980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17980);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820e5a58
	if (!cr6.getGT()) goto loc_820E5A58;
loc_820E5954:
	// lfs f0,132(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 132);
	f0.f64 = double(temp.f32);
	// lwz r11,24(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// fsubs f30,f29,f0
	f30.f64 = double(float(f29.f64 - f0.f64));
	// mr r28,r21
	r28.u64 = r21.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// fcmpu cr6,f30,f24
	cr6.compare(f30.f64, f24.f64);
	// bge cr6,0x820e5978
	if (!cr6.getLT()) goto loc_820E5978;
	// fadds f30,f30,f20
	f30.f64 = double(float(f30.f64 + f20.f64));
	// b 0x820e5984
	goto loc_820E5984;
loc_820E5978:
	// fcmpu cr6,f30,f19
	ctx.fpscr.disableFlushMode();
	cr6.compare(f30.f64, f19.f64);
	// blt cr6,0x820e5984
	if (cr6.getLT()) goto loc_820E5984;
	// fsubs f30,f30,f20
	f30.f64 = double(float(f30.f64 - f20.f64));
loc_820E5984:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820b3e10
	sub_820B3E10(ctx, base);
	// lfs f0,136(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 136);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f30,f0
	cr6.compare(f30.f64, f0.f64);
	// bgt cr6,0x820e5a08
	if (cr6.getGT()) goto loc_820E5A08;
	// lfs f0,140(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 140);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f30,f0
	cr6.compare(f30.f64, f0.f64);
	// blt cr6,0x820e5a08
	if (cr6.getLT()) goto loc_820E5A08;
	// lfs f8,16(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 16);
	ctx.f8.f64 = double(temp.f32);
	// li r8,27
	ctx.r8.s64 = 27;
	// lfs f6,16(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 16);
	ctx.f6.f64 = double(temp.f32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lfs f4,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f4.f64 = double(temp.f32);
	// fmr f7,f8
	ctx.f7.f64 = ctx.f8.f64;
	// lfs f3,12(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	ctx.f3.f64 = double(temp.f32);
	// fmr f5,f6
	ctx.f5.f64 = ctx.f6.f64;
	// lfs f2,20(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,12(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e5a08
	if (cr6.getEQ()) goto loc_820E5A08;
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x820e5a08
	if (!cr6.getEQ()) goto loc_820E5A08;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r27,r21
	r27.u64 = r21.u64;
	// fmr f31,f29
	ctx.fpscr.disableFlushMode();
	f31.f64 = f29.f64;
	// rlwinm r11,r11,0,3,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF9FFFFFFF;
	// fmr f23,f28
	f23.f64 = f28.f64;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x820e5a38
	goto loc_820E5A38;
loc_820E5A08:
	// lwz r11,184(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 184);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820e5a34
	if (cr6.getLT()) goto loc_820E5A34;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r10,-6376(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6376);
	// addi r10,r10,-120
	ctx.r10.s64 = ctx.r10.s64 + -120;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// ble cr6,0x820e5a34
	if (!cr6.getGT()) goto loc_820E5A34;
	// lfs f31,144(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 144);
	f31.f64 = double(temp.f32);
	// lfs f23,156(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 156);
	f23.f64 = double(temp.f32);
	// b 0x820e5a38
	goto loc_820E5A38;
loc_820E5A34:
	// mr r28,r20
	r28.u64 = r20.u64;
loc_820E5A38:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820b3e10
	sub_820B3E10(ctx, base);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x820e5a58
	if (cr6.getEQ()) goto loc_820E5A58;
	// fmr f1,f25
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f25.f64;
	// bl 0x82124138
	sub_82124138(ctx, base);
	// fmr f22,f1
	ctx.fpscr.disableFlushMode();
	f22.f64 = ctx.f1.f64;
loc_820E5A58:
	// lwz r11,208(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 208);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e5ae0
	if (cr6.getEQ()) goto loc_820E5AE0;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-30584
	ctx.r10.s64 = -2004353024;
	// ori r10,r10,34953
	ctx.r10.u64 = ctx.r10.u64 | 34953;
	// lwz r11,-6376(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6376);
	// mulhw r10,r11,r10
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(ctx.r10.s32)) >> 32;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// srawi r10,r10,6
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3F) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 6;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mulli r10,r10,120
	ctx.r10.s64 = ctx.r10.s64 * 120;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,17976(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17976);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	f0.f64 = double(temp.f32);
	// fmuls f13,f13,f22
	ctx.f13.f64 = double(float(ctx.f13.f64 * f22.f64));
	// fmadds f31,f13,f0,f31
	f31.f64 = double(float(ctx.f13.f64 * f0.f64 + f31.f64));
	// fcmpu cr6,f31,f21
	cr6.compare(f31.f64, f21.f64);
	// bge cr6,0x820e5ad4
	if (!cr6.getLT()) goto loc_820E5AD4;
	// fadds f31,f31,f20
	f31.f64 = double(float(f31.f64 + f20.f64));
loc_820E5AD4:
	// fcmpu cr6,f31,f20
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f20.f64);
	// blt cr6,0x820e5ae0
	if (cr6.getLT()) goto loc_820E5AE0;
	// fsubs f31,f31,f20
	f31.f64 = double(float(f31.f64 - f20.f64));
loc_820E5AE0:
	// lfs f12,132(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 132);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f0,f31,f12
	f0.f64 = double(float(f31.f64 - ctx.f12.f64));
	// fcmpu cr6,f0,f24
	cr6.compare(f0.f64, f24.f64);
	// bge cr6,0x820e5af8
	if (!cr6.getLT()) goto loc_820E5AF8;
	// fadds f0,f0,f20
	f0.f64 = double(float(f0.f64 + f20.f64));
	// b 0x820e5b04
	goto loc_820E5B04;
loc_820E5AF8:
	// fcmpu cr6,f0,f19
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f19.f64);
	// blt cr6,0x820e5b04
	if (cr6.getLT()) goto loc_820E5B04;
	// fsubs f0,f0,f20
	f0.f64 = double(float(f0.f64 - f20.f64));
loc_820E5B04:
	// lfs f13,136(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 136);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820e5b1c
	if (cr6.getGT()) goto loc_820E5B1C;
	// lfs f13,140(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 140);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820e5b20
	if (!cr6.getLT()) goto loc_820E5B20;
loc_820E5B1C:
	// fadds f31,f13,f12
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(ctx.f13.f64 + ctx.f12.f64));
loc_820E5B20:
	// fcmpu cr6,f31,f21
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f21.f64);
	// bge cr6,0x820e5b2c
	if (!cr6.getLT()) goto loc_820E5B2C;
	// fadds f31,f31,f20
	f31.f64 = double(float(f31.f64 + f20.f64));
loc_820E5B2C:
	// fcmpu cr6,f31,f20
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f20.f64);
	// blt cr6,0x820e5b38
	if (cr6.getLT()) goto loc_820E5B38;
	// fsubs f31,f31,f20
	f31.f64 = double(float(f31.f64 - f20.f64));
loc_820E5B38:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f4,164(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 164);
	ctx.f4.f64 = double(temp.f32);
	// addi r3,r30,144
	ctx.r3.s64 = r30.s64 + 144;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// addi r5,r30,148
	ctx.r5.s64 = r30.s64 + 148;
	// lfs f3,17972(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17972);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// bl 0x820d7060
	sub_820D7060(ctx, base);
	// addi r3,r30,156
	ctx.r3.s64 = r30.s64 + 156;
	// lfs f4,164(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 164);
	ctx.f4.f64 = double(temp.f32);
	// addi r5,r30,160
	ctx.r5.s64 = r30.s64 + 160;
	// fmr f1,f23
	ctx.f1.f64 = f23.f64;
	// bl 0x820d7060
	sub_820D7060(ctx, base);
	// lfs f0,144(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 144);
	f0.f64 = double(temp.f32);
	// fsubs f0,f31,f0
	f0.f64 = double(float(f31.f64 - f0.f64));
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bge cr6,0x820e5b80
	if (!cr6.getLT()) goto loc_820E5B80;
	// fadds f0,f0,f20
	f0.f64 = double(float(f0.f64 + f20.f64));
loc_820E5B80:
	// fcmpu cr6,f0,f19
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f19.f64);
	// ble cr6,0x820e5b8c
	if (!cr6.getGT()) goto loc_820E5B8C;
	// fsubs f0,f0,f20
	f0.f64 = double(float(f0.f64 - f20.f64));
loc_820E5B8C:
	// lfs f13,0(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f23,f13
	ctx.f13.f64 = double(float(f23.f64 - ctx.f13.f64));
	// fcmpu cr6,f13,f21
	cr6.compare(ctx.f13.f64, f21.f64);
	// bge cr6,0x820e5ba0
	if (!cr6.getLT()) goto loc_820E5BA0;
	// fadds f13,f13,f20
	ctx.f13.f64 = double(float(ctx.f13.f64 + f20.f64));
loc_820E5BA0:
	// fcmpu cr6,f13,f19
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, f19.f64);
	// ble cr6,0x820e5bac
	if (!cr6.getGT()) goto loc_820E5BAC;
	// fsubs f13,f13,f20
	ctx.f13.f64 = double(float(ctx.f13.f64 - f20.f64));
loc_820E5BAC:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// stw r20,208(r30)
	PPC_STORE_U32(r30.u32 + 208, r20.u32);
	// beq cr6,0x820e5ca0
	if (cr6.getEQ()) goto loc_820E5CA0;
	// lfs f12,188(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f22
	cr6.compare(f0.f64, f22.f64);
	// fmuls f11,f22,f12
	ctx.f11.f64 = double(float(f22.f64 * ctx.f12.f64));
	// bge cr6,0x820e5c08
	if (!cr6.getLT()) goto loc_820E5C08;
	// fneg f12,f22
	ctx.f12.u64 = f22.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x820e5c08
	if (!cr6.getGT()) goto loc_820E5C08;
	// fcmpu cr6,f13,f22
	cr6.compare(ctx.f13.f64, f22.f64);
	// bge cr6,0x820e5c08
	if (!cr6.getLT()) goto loc_820E5C08;
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// ble cr6,0x820e5c08
	if (!cr6.getGT()) goto loc_820E5C08;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// stw r21,208(r30)
	PPC_STORE_U32(r30.u32 + 208, r21.u32);
	// beq cr6,0x820e5c6c
	if (cr6.getEQ()) goto loc_820E5C6C;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r11,-6376(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6376);
	// stw r11,184(r30)
	PPC_STORE_U32(r30.u32 + 184, r11.u32);
	// lwz r11,-6376(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6376);
	// stw r11,188(r30)
	PPC_STORE_U32(r30.u32 + 188, r11.u32);
	// b 0x820e5c6c
	goto loc_820E5C6C;
loc_820E5C08:
	// fcmpu cr6,f0,f11
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f11.f64);
	// bge cr6,0x820e5c48
	if (!cr6.getLT()) goto loc_820E5C48;
	// fneg f12,f11
	ctx.f12.u64 = ctx.f11.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x820e5c48
	if (!cr6.getGT()) goto loc_820E5C48;
	// fcmpu cr6,f13,f11
	cr6.compare(ctx.f13.f64, ctx.f11.f64);
	// bge cr6,0x820e5c48
	if (!cr6.getLT()) goto loc_820E5C48;
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// ble cr6,0x820e5c48
	if (!cr6.getGT()) goto loc_820E5C48;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// stw r21,208(r30)
	PPC_STORE_U32(r30.u32 + 208, r21.u32);
	// beq cr6,0x820e5c6c
	if (cr6.getEQ()) goto loc_820E5C6C;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-6376(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6376);
	// stw r11,184(r30)
	PPC_STORE_U32(r30.u32 + 184, r11.u32);
	// b 0x820e5c6c
	goto loc_820E5C6C;
loc_820E5C48:
	// lwz r11,184(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 184);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820e5ca0
	if (cr6.getLT()) goto loc_820E5CA0;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r10,-6376(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6376);
	// addi r10,r10,-120
	ctx.r10.s64 = ctx.r10.s64 + -120;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// ble cr6,0x820e5ca0
	if (!cr6.getGT()) goto loc_820E5CA0;
	// stw r21,208(r30)
	PPC_STORE_U32(r30.u32 + 208, r21.u32);
loc_820E5C6C:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f12,176(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 176);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,17968(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17968);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmadds f0,f0,f13,f12
	f0.f64 = double(float(f0.f64 * ctx.f13.f64 + ctx.f12.f64));
	// stfs f0,176(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 176, temp.u32);
	// lfs f13,17964(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17964);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820e5cf8
	if (!cr6.getGT()) goto loc_820E5CF8;
	// stfs f13,176(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 176, temp.u32);
	// b 0x820e5cf8
	goto loc_820E5CF8;
loc_820E5CA0:
	// lfs f0,176(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 176);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// ble cr6,0x820e5cf8
	if (!cr6.getGT()) goto loc_820E5CF8;
	// lwz r10,-6384(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// mr r11,r20
	r11.u64 = r20.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820e5ce0
	if (!cr6.getGT()) goto loc_820E5CE0;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,14480(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14480);
	f0.f64 = double(temp.f32);
loc_820E5CC4:
	// lfs f13,176(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 176);
	ctx.f13.f64 = double(temp.f32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f13,176(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 176, temp.u32);
	// lwz r10,-6384(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x820e5cc4
	if (cr6.getLT()) goto loc_820E5CC4;
loc_820E5CE0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,176(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 176);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,3608(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3608);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bgt cr6,0x820e5cf8
	if (cr6.getGT()) goto loc_820E5CF8;
	// stfs f21,176(r30)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 176, temp.u32);
loc_820E5CF8:
	// lfs f13,176(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 176);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f21
	cr6.compare(ctx.f13.f64, f21.f64);
	// ble cr6,0x820e6770
	if (!cr6.getGT()) goto loc_820E6770;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f12,180(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmadds f0,f13,f0,f12
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// stfs f0,180(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 180, temp.u32);
	// fcmpu cr6,f0,f20
	cr6.compare(f0.f64, f20.f64);
	// blt cr6,0x820e6770
	if (cr6.getLT()) goto loc_820E6770;
loc_820E5D20:
	// lfs f0,180(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f20
	f0.f64 = double(float(f0.f64 - f20.f64));
	// stfs f0,180(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 180, temp.u32);
	// fcmpu cr6,f0,f20
	cr6.compare(f0.f64, f20.f64);
	// bge cr6,0x820e5d20
	if (!cr6.getLT()) goto loc_820E5D20;
	// b 0x820e6770
	goto loc_820E6770;
loc_820E5D38:
	// cmplwi cr6,r11,39
	cr6.compare<uint32_t>(r11.u32, 39, xer);
	// bne cr6,0x820e6478
	if (!cr6.getEQ()) goto loc_820E6478;
	// li r4,1
	ctx.r4.s64 = 1;
	// lfs f30,172(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 172);
	f30.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r28,r31,172
	r28.s64 = r31.s64 + 172;
	// mr r26,r20
	r26.u64 = r20.u64;
	// bl 0x82131968
	sub_82131968(ctx, base);
	// lfs f0,164(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 164);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// blt cr6,0x820e5da0
	if (cr6.getLT()) goto loc_820E5DA0;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f12,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// bgt cr6,0x820e5d7c
	if (cr6.getGT()) goto loc_820E5D7C;
	// lfs f13,160(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 160);
	ctx.f13.f64 = double(temp.f32);
	// b 0x820e5d90
	goto loc_820E5D90;
loc_820E5D7C:
	// lfs f13,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,160(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 160);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f11,f11,f13
	ctx.f11.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// fdivs f11,f11,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 / f0.f64));
	// fmadds f13,f11,f12,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f12.f64 + ctx.f13.f64));
loc_820E5D90:
	// stfs f13,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 136, temp.u32);
	// lfs f13,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,164(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 164, temp.u32);
loc_820E5DA0:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// rlwinm r11,r11,0,12,12
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e5e80
	if (!cr6.getEQ()) goto loc_820E5E80;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e5de4
	if (cr6.getEQ()) goto loc_820E5DE4;
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e5e80
	if (!cr6.getEQ()) goto loc_820E5E80;
loc_820E5DE4:
	// lfs f0,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bgt cr6,0x820e5dfc
	if (cr6.getGT()) goto loc_820E5DFC;
	// lfs f0,160(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 160);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// ble cr6,0x820e5e80
	if (!cr6.getGT()) goto loc_820E5E80;
loc_820E5DFC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f2,f25
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f25.f64;
	// addi r29,r31,88
	r29.s64 = r31.s64 + 88;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lfs f1,17960(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17960);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820dd758
	sub_820DD758(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x820e5e80
	if (!cr6.getGT()) goto loc_820E5E80;
	// lwz r3,184(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 184);
	// addi r30,r31,184
	r30.s64 = r31.s64 + 184;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e5e38
	if (cr6.getEQ()) goto loc_820E5E38;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e5e68
	if (!cr6.getEQ()) goto loc_820E5E68;
loc_820E5E38:
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e5e68
	if (!cr6.getEQ()) goto loc_820E5E68;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r7,172(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// li r8,4897
	ctx.r8.s64 = 4897;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,65
	ctx.r4.s64 = 65;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820E5E68:
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e5ea0
	if (cr6.getEQ()) goto loc_820E5EA0;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x821448f8
	sub_821448F8(ctx, base);
	// b 0x820e5ea0
	goto loc_820E5EA0;
loc_820E5E80:
	// lwz r3,184(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 184);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e5ea0
	if (cr6.getEQ()) goto loc_820E5EA0;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e5ea0
	if (cr6.getEQ()) goto loc_820E5EA0;
	// lwz r3,184(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 184);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820E5EA0:
	// lwz r11,176(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e5f14
	if (cr6.getEQ()) goto loc_820E5F14;
	// lwz r10,180(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// lfs f0,96(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 96);
	f0.f64 = double(temp.f32);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lfs f13,88(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 88);
	ctx.f13.f64 = double(temp.f32);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwinm r9,r11,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// lwzx r10,r9,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// mulli r10,r10,44
	ctx.r10.s64 = ctx.r10.s64 * 44;
	// add r26,r10,r11
	r26.u64 = ctx.r10.u64 + r11.u64;
	// lfs f12,8(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,0(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f2,f12,f0
	ctx.f2.f64 = double(float(ctx.f12.f64 - f0.f64));
	// fsubs f1,f11,f13
	ctx.f1.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// rlwinm r10,r11,0,2,2
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e5f48
	if (cr6.getEQ()) goto loc_820E5F48;
	// stfs f30,0(r28)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r28.u32 + 0, temp.u32);
	// b 0x820e5f38
	goto loc_820E5F38;
loc_820E5F14:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e5f48
	if (cr6.getEQ()) goto loc_820E5F48;
	// lfs f2,64(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 64);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,56(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 56);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// stfs f1,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r28.u32 + 0, temp.u32);
loc_820E5F38:
	// rlwinm r11,r11,0,3,1
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFDFFFFFFF;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bl 0x820d80e8
	sub_820D80E8(ctx, base);
loc_820E5F48:
	// lfs f0,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// ble cr6,0x820e6440
	if (!cr6.getGT()) goto loc_820E6440;
	// lwz r11,24(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// lfs f1,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// lfs f22,168(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 168);
	f22.f64 = double(temp.f32);
	// fmr f31,f21
	f31.f64 = f21.f64;
	// addi r27,r31,168
	r27.s64 = r31.s64 + 168;
	// fmr f23,f1
	f23.f64 = ctx.f1.f64;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f29.f64 = double(temp.f32);
	// beq cr6,0x820e5fc8
	if (cr6.getEQ()) goto loc_820E5FC8;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// frsp f13,f1
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// stfs f21,148(r1)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// stfs f13,144(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r31,88
	ctx.r3.s64 = r31.s64 + 88;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,152(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// bl 0x821248b0
	sub_821248B0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e5fc8
	if (cr6.getEQ()) goto loc_820E5FC8;
	// lfs f30,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f30.f64 = double(temp.f32);
loc_820E5FC8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lfs f4,17956(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17956);
	ctx.f4.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,17952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17952);
	ctx.f3.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,17948(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17948);
	ctx.f2.f64 = double(temp.f32);
	// bl 0x820d7060
	sub_820D7060(ctx, base);
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f20
	cr6.compare(f0.f64, f20.f64);
	// blt cr6,0x820e6010
	if (cr6.getLT()) goto loc_820E6010;
loc_820E5FFC:
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f20
	f0.f64 = double(float(f0.f64 - f20.f64));
	// stfs f0,0(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + 0, temp.u32);
	// fcmpu cr6,f0,f20
	cr6.compare(f0.f64, f20.f64);
	// bge cr6,0x820e5ffc
	if (!cr6.getLT()) goto loc_820E5FFC;
loc_820E6010:
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bge cr6,0x820e6030
	if (!cr6.getLT()) goto loc_820E6030;
loc_820E601C:
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f20
	f0.f64 = double(float(f0.f64 + f20.f64));
	// stfs f0,0(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + 0, temp.u32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// blt cr6,0x820e601c
	if (cr6.getLT()) goto loc_820E601C;
loc_820E6030:
	// lfs f12,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f12,f30
	cr6.compare(ctx.f12.f64, f30.f64);
	// bne cr6,0x820e605c
	if (!cr6.getEQ()) goto loc_820E605C;
	// lfs f0,0(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f3
	cr6.compare(f0.f64, ctx.f3.f64);
	// bgt cr6,0x820e605c
	if (cr6.getGT()) goto loc_820E605C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,17944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17944);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820e605c
	if (cr6.getLT()) goto loc_820E605C;
	// stfs f21,0(r27)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r27.u32 + 0, temp.u32);
loc_820E605C:
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lfs f0,-6368(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r30,4(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// ble cr6,0x820e6090
	if (!cr6.getGT()) goto loc_820E6090;
	// fsubs f13,f12,f23
	ctx.f13.f64 = double(float(ctx.f12.f64 - f23.f64));
	// fdivs f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fcmpu cr6,f31,f21
	cr6.compare(f31.f64, f21.f64);
	// bge cr6,0x820e6090
	if (!cr6.getLT()) goto loc_820E6090;
	// fadds f31,f31,f20
	f31.f64 = double(float(f31.f64 + f20.f64));
loc_820E6090:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// lfs f13,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,20(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f12,f13,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f12.f64));
	// lfs f0,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// frsp f13,f1
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// lfs f0,-6368(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// frsp f13,f1
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// stfs f21,148(r1)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// stfs f13,144(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lfs f0,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	f0.f64 = double(temp.f32);
	// fmr f12,f1
	ctx.f12.f64 = ctx.f1.f64;
	// lfs f13,144(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	ctx.f13.f64 = double(temp.f32);
	// li r8,31
	ctx.r8.s64 = 31;
	// fmuls f11,f13,f0
	ctx.f11.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f10,88(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 88);
	ctx.f10.f64 = double(temp.f32);
	// lfs f0,-6368(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmuls f9,f13,f31
	ctx.f9.f64 = double(float(ctx.f13.f64 * f31.f64));
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lfs f2,20(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,12(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// addi r30,r31,88
	r30.s64 = r31.s64 + 88;
	// fmr f8,f17
	ctx.f8.f64 = f17.f64;
	// fmr f7,f21
	ctx.f7.f64 = f21.f64;
	// fmr f6,f17
	ctx.f6.f64 = f17.f64;
	// fmr f5,f21
	ctx.f5.f64 = f21.f64;
	// frsp f13,f12
	ctx.f13.f64 = double(float(ctx.f12.f64));
	// stfs f13,152(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// fmadds f12,f11,f0,f10
	ctx.f12.f64 = double(float(ctx.f11.f64 * f0.f64 + ctx.f10.f64));
	// fnmsubs f3,f13,f31,f12
	ctx.f3.f64 = double(float(-(ctx.f13.f64 * f31.f64 - ctx.f12.f64)));
	// stfs f3,160(r1)
	temp.f32 = float(ctx.f3.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// lfs f12,92(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 92);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,164(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// lfs f12,136(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64));
	// lfs f12,96(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f13,f0,f9
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f9.f64));
	// fadds f4,f0,f12
	ctx.f4.f64 = double(float(f0.f64 + ctx.f12.f64));
	// stfs f4,168(r1)
	temp.f32 = float(ctx.f4.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e6410
	if (cr6.getEQ()) goto loc_820E6410;
	// li r7,31
	ctx.r7.s64 = 31;
	// lfs f2,168(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	ctx.f2.f64 = double(temp.f32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lfs f1,160(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	ctx.f1.f64 = double(temp.f32);
	// fmr f5,f17
	ctx.f5.f64 = f17.f64;
	// fmr f4,f21
	ctx.f4.f64 = f21.f64;
	// fmr f3,f29
	ctx.f3.f64 = f29.f64;
	// bl 0x821126c0
	sub_821126C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x820e6410
	if (!cr6.getLT()) goto loc_820E6410;
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lfs f0,12(r16)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f13,20(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lwz r29,24(r16)
	r29.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f0,160(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	f0.f64 = double(temp.f32);
	// stfs f13,104(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// lfs f13,16(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// stw r11,24(r16)
	PPC_STORE_U32(r16.u32 + 24, r11.u32);
	// stfs f0,12(r16)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r16.u32 + 12, temp.u32);
	// stfs f0,0(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 0, temp.u32);
	// lfs f0,168(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r16)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r16.u32 + 20, temp.u32);
	// stfs f13,100(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stfs f0,96(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 96, temp.u32);
	// bl 0x820d4d08
	sub_820D4D08(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d0458
	sub_820D0458(ctx, base);
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// bl 0x820d7eb0
	sub_820D7EB0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e63a8
	if (cr6.getEQ()) goto loc_820E63A8;
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lfs f0,24(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	f0.f64 = double(temp.f32);
	// lfs f13,32(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 32);
	ctx.f13.f64 = double(temp.f32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lfs f12,56(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 56);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,64(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 64);
	ctx.f11.f64 = double(temp.f32);
	// lfs f2,20(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lfs f1,12(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lfs f10,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	ctx.f10.f64 = double(temp.f32);
	// lfs f9,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f9.f64 = double(temp.f32);
	// fmuls f31,f0,f10
	f31.f64 = double(float(f0.f64 * ctx.f10.f64));
	// fmuls f30,f13,f10
	f30.f64 = double(float(ctx.f13.f64 * ctx.f10.f64));
	// lfs f8,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f8.f64 = double(temp.f32);
	// fmuls f29,f9,f12
	f29.f64 = double(float(ctx.f9.f64 * ctx.f12.f64));
	// lfs f7,24(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24);
	ctx.f7.f64 = double(temp.f32);
	// fmuls f28,f9,f11
	f28.f64 = double(float(ctx.f9.f64 * ctx.f11.f64));
	// lwz r11,24(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// fmuls f27,f0,f8
	f27.f64 = double(float(f0.f64 * ctx.f8.f64));
	// fmuls f26,f13,f8
	f26.f64 = double(float(ctx.f13.f64 * ctx.f8.f64));
	// fmuls f25,f7,f12
	f25.f64 = double(float(ctx.f7.f64 * ctx.f12.f64));
	// fmuls f24,f7,f11
	f24.f64 = double(float(ctx.f7.f64 * ctx.f11.f64));
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// fadds f0,f29,f31
	f0.f64 = double(float(f29.f64 + f31.f64));
	// fadds f13,f28,f30
	ctx.f13.f64 = double(float(f28.f64 + f30.f64));
	// fadds f3,f0,f1
	ctx.f3.f64 = double(float(f0.f64 + ctx.f1.f64));
	// fadds f4,f13,f2
	ctx.f4.f64 = double(float(ctx.f13.f64 + ctx.f2.f64));
	// bl 0x8210f7c8
	sub_8210F7C8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e63a8
	if (cr6.getEQ()) goto loc_820E63A8;
	// lfs f0,20(r16)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	f0.f64 = double(temp.f32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lfs f13,12(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f28,f0
	f0.f64 = double(float(f28.f64 + f0.f64));
	// fadds f13,f29,f13
	ctx.f13.f64 = double(float(f29.f64 + ctx.f13.f64));
	// fadds f4,f26,f0
	ctx.f4.f64 = double(float(f26.f64 + f0.f64));
	// fadds f3,f27,f13
	ctx.f3.f64 = double(float(f27.f64 + ctx.f13.f64));
	// fadds f2,f30,f0
	ctx.f2.f64 = double(float(f30.f64 + f0.f64));
	// fadds f1,f31,f13
	ctx.f1.f64 = double(float(f31.f64 + ctx.f13.f64));
	// bl 0x8210f7c8
	sub_8210F7C8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e63a8
	if (cr6.getEQ()) goto loc_820E63A8;
	// fadds f12,f24,f26
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(f24.f64 + f26.f64));
	// lfs f0,20(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	f0.f64 = double(temp.f32);
	// fadds f11,f25,f27
	ctx.f11.f64 = double(float(f25.f64 + f27.f64));
	// lfs f13,12(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fadds f10,f28,f26
	ctx.f10.f64 = double(float(f28.f64 + f26.f64));
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// fadds f9,f29,f27
	ctx.f9.f64 = double(float(f29.f64 + f27.f64));
	// fadds f4,f12,f0
	ctx.f4.f64 = double(float(ctx.f12.f64 + f0.f64));
	// fadds f3,f11,f13
	ctx.f3.f64 = double(float(ctx.f11.f64 + ctx.f13.f64));
	// fadds f2,f10,f0
	ctx.f2.f64 = double(float(ctx.f10.f64 + f0.f64));
	// fadds f1,f9,f13
	ctx.f1.f64 = double(float(ctx.f9.f64 + ctx.f13.f64));
	// bl 0x8210f7c8
	sub_8210F7C8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e63a8
	if (cr6.getEQ()) goto loc_820E63A8;
	// lfs f0,20(r16)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	f0.f64 = double(temp.f32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lfs f13,12(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f24,f0
	f0.f64 = double(float(f24.f64 + f0.f64));
	// fadds f13,f25,f13
	ctx.f13.f64 = double(float(f25.f64 + ctx.f13.f64));
	// fadds f4,f30,f0
	ctx.f4.f64 = double(float(f30.f64 + f0.f64));
	// fadds f3,f31,f13
	ctx.f3.f64 = double(float(f31.f64 + ctx.f13.f64));
	// fadds f2,f26,f0
	ctx.f2.f64 = double(float(f26.f64 + f0.f64));
	// fadds f1,f27,f13
	ctx.f1.f64 = double(float(f27.f64 + ctx.f13.f64));
	// bl 0x8210f7c8
	sub_8210F7C8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e63a8
	if (cr6.getEQ()) goto loc_820E63A8;
	// fadds f12,f28,f30
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(f28.f64 + f30.f64));
	// lfs f0,20(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	f0.f64 = double(temp.f32);
	// fadds f11,f29,f31
	ctx.f11.f64 = double(float(f29.f64 + f31.f64));
	// lfs f13,12(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fadds f10,f24,f30
	ctx.f10.f64 = double(float(f24.f64 + f30.f64));
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// fadds f9,f25,f31
	ctx.f9.f64 = double(float(f25.f64 + f31.f64));
	// fadds f4,f12,f0
	ctx.f4.f64 = double(float(ctx.f12.f64 + f0.f64));
	// fadds f3,f11,f13
	ctx.f3.f64 = double(float(ctx.f11.f64 + ctx.f13.f64));
	// fadds f2,f10,f0
	ctx.f2.f64 = double(float(ctx.f10.f64 + f0.f64));
	// fadds f1,f9,f13
	ctx.f1.f64 = double(float(ctx.f9.f64 + ctx.f13.f64));
	// bl 0x8210f7c8
	sub_8210F7C8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e63a8
	if (cr6.getEQ()) goto loc_820E63A8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d80e8
	sub_820D80E8(ctx, base);
	// addi r4,r31,124
	ctx.r4.s64 = r31.s64 + 124;
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// bl 0x820d4c20
	sub_820D4C20(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820dc950
	sub_820DC950(ctx, base);
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x820e6770
	if (cr6.getEQ()) goto loc_820E6770;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// fmr f1,f15
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f15.f64;
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82124950
	sub_82124950(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e6770
	if (cr6.getEQ()) goto loc_820E6770;
	// lwz r11,180(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// lwz r10,176(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r11,180(r31)
	PPC_STORE_U32(r31.u32 + 180, r11.u32);
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x820e6770
	if (!cr6.getLT()) goto loc_820E6770;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f21,160(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r31.u32 + 160, temp.u32);
	// stw r20,176(r31)
	PPC_STORE_U32(r31.u32 + 176, r20.u32);
	// lfs f0,13960(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	f0.f64 = double(temp.f32);
	// stfs f0,164(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 164, temp.u32);
	// b 0x820e6770
	goto loc_820E6770;
loc_820E63A8:
	// lfs f0,164(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 164);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bge cr6,0x820e63c8
	if (!cr6.getLT()) goto loc_820E63C8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,136(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,160(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 160, temp.u32);
	// lfs f0,13960(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	f0.f64 = double(temp.f32);
	// stfs f0,164(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 164, temp.u32);
loc_820E63C8:
	// lfs f0,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f0.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stfs f21,136(r31)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r31.u32 + 136, temp.u32);
	// stfs f23,0(r28)
	temp.f32 = float(f23.f64);
	PPC_STORE_U32(r28.u32 + 0, temp.u32);
	// stfs f22,0(r27)
	temp.f32 = float(f22.f64);
	PPC_STORE_U32(r27.u32 + 0, temp.u32);
	// stw r29,24(r16)
	PPC_STORE_U32(r16.u32 + 24, r29.u32);
	// stfs f0,12(r16)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r16.u32 + 12, temp.u32);
	// stfs f0,0(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 0, temp.u32);
	// lfs f0,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	f0.f64 = double(temp.f32);
	// stfs f0,16(r16)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r16.u32 + 16, temp.u32);
	// stfs f0,92(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 92, temp.u32);
	// lfs f0,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r16)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r16.u32 + 20, temp.u32);
	// stfs f0,96(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 96, temp.u32);
	// bl 0x820d4d08
	sub_820D4D08(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d0458
	sub_820D0458(ctx, base);
	// b 0x820e6770
	goto loc_820E6770;
loc_820E6410:
	// lfs f0,164(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 164);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bge cr6,0x820e6430
	if (!cr6.getLT()) goto loc_820E6430;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,136(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,160(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 160, temp.u32);
	// lfs f0,13960(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	f0.f64 = double(temp.f32);
	// stfs f0,164(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 164, temp.u32);
loc_820E6430:
	// stfs f21,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r31.u32 + 136, temp.u32);
	// stfs f23,0(r28)
	temp.f32 = float(f23.f64);
	PPC_STORE_U32(r28.u32 + 0, temp.u32);
	// stfs f22,0(r27)
	temp.f32 = float(f22.f64);
	PPC_STORE_U32(r27.u32 + 0, temp.u32);
	// b 0x820e6770
	goto loc_820E6770;
loc_820E6440:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e6770
	if (cr6.getEQ()) goto loc_820E6770;
	// lfs f2,64(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 64);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,56(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 56);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stfs f1,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r28.u32 + 0, temp.u32);
	// rlwinm r11,r11,0,3,1
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFDFFFFFFF;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bl 0x820d80e8
	sub_820D80E8(ctx, base);
	// b 0x820e6770
	goto loc_820E6770;
loc_820E6478:
	// cmplwi cr6,r11,40
	cr6.compare<uint32_t>(r11.u32, 40, xer);
	// bne cr6,0x820e6770
	if (!cr6.getEQ()) goto loc_820E6770;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82131968
	sub_82131968(ctx, base);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r11,32(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e65d8
	if (cr6.getEQ()) goto loc_820E65D8;
	// addi r30,r31,88
	r30.s64 = r31.s64 + 88;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82119118
	sub_82119118(ctx, base);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// fmr f2,f21
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f21.f64;
	// fmr f1,f17
	ctx.f1.f64 = f17.f64;
	// bl 0x8211b2f8
	sub_8211B2F8(ctx, base);
	// lis r11,-32079
	r11.s64 = -2102329344;
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r11,r11,-8800
	r11.s64 = r11.s64 + -8800;
	// lwz r10,32(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x820e64e8
	if (!cr6.getEQ()) goto loc_820E64E8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,17940(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17940);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82119210
	sub_82119210(ctx, base);
	// fmr f1,f19
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f19.f64;
	// b 0x820e6540
	goto loc_820E6540;
loc_820E64E8:
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,22
	cr6.compare<int32_t>(ctx.r3.s32, 22, xer);
	// bne cr6,0x820e6510
	if (!cr6.getEQ()) goto loc_820E6510;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lfs f1,17936(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17936);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82119210
	sub_82119210(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,17932(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17932);
	ctx.f1.f64 = double(temp.f32);
	// b 0x820e6540
	goto loc_820E6540;
loc_820E6510:
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r3,26
	cr6.compare<int32_t>(ctx.r3.s32, 26, xer);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lfs f1,17936(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17936);
	ctx.f1.f64 = double(temp.f32);
	// bne cr6,0x820e6538
	if (!cr6.getEQ()) goto loc_820E6538;
	// bl 0x82119210
	sub_82119210(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,17928(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17928);
	ctx.f1.f64 = double(temp.f32);
	// b 0x820e6540
	goto loc_820E6540;
loc_820E6538:
	// bl 0x82119210
	sub_82119210(ctx, base);
	// fmr f1,f21
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f21.f64;
loc_820E6540:
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x82119178
	sub_82119178(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r4,-6384(r15)
	ctx.r4.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// bl 0x8211d7c0
	sub_8211D7C0(ctx, base);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x82119948
	sub_82119948(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x82119108
	sub_82119108(ctx, base);
	// lfs f0,0(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,12(r16)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r16.u32 + 12, temp.u32);
	// lfs f0,96(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 96);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r16)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r16.u32 + 20, temp.u32);
	// lhz r11,6(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 6);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,10000
	cr6.compare<int32_t>(r11.s32, 10000, xer);
	// bge cr6,0x820e65a0
	if (!cr6.getLT()) goto loc_820E65A0;
	// mulli r10,r11,44
	ctx.r10.s64 = r11.s64 * 44;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// b 0x820e65b4
	goto loc_820E65B4;
loc_820E65A0:
	// addi r11,r11,-10000
	r11.s64 = r11.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
loc_820E65B4:
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfs f13,92(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 92);
	ctx.f13.f64 = double(temp.f32);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lfs f0,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,16(r16)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r16.u32 + 16, temp.u32);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// stfs f0,92(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 92, temp.u32);
	// bl 0x82119118
	sub_82119118(ctx, base);
loc_820E65D8:
	// lfs f0,160(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 160);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// blt cr6,0x820e6620
	if (cr6.getLT()) goto loc_820E6620;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f12,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// bgt cr6,0x820e65fc
	if (cr6.getGT()) goto loc_820E65FC;
	// lfs f13,156(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 156);
	ctx.f13.f64 = double(temp.f32);
	// b 0x820e6610
	goto loc_820E6610;
loc_820E65FC:
	// lfs f13,152(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 152);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,156(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 156);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f11,f11,f13
	ctx.f11.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// fdivs f11,f11,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 / f0.f64));
	// fmadds f13,f11,f12,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f12.f64 + ctx.f13.f64));
loc_820E6610:
	// stfs f13,152(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 152, temp.u32);
	// lfs f13,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,160(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 160, temp.u32);
loc_820E6620:
	// lfs f0,148(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 148);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// blt cr6,0x820e6668
	if (cr6.getLT()) goto loc_820E6668;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f12,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// bgt cr6,0x820e6644
	if (cr6.getGT()) goto loc_820E6644;
	// lfs f13,144(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 144);
	ctx.f13.f64 = double(temp.f32);
	// b 0x820e6658
	goto loc_820E6658;
loc_820E6644:
	// lfs f13,140(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 140);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,144(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 144);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f11,f11,f13
	ctx.f11.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// fdivs f11,f11,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 / f0.f64));
	// fmadds f13,f11,f12,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f12.f64 + ctx.f13.f64));
loc_820E6658:
	// stfs f13,140(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 140, temp.u32);
	// lfs f13,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,148(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 148, temp.u32);
loc_820E6668:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// rlwinm r11,r11,0,12,12
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e6750
	if (!cr6.getEQ()) goto loc_820E6750;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e66ac
	if (cr6.getEQ()) goto loc_820E66AC;
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e6750
	if (!cr6.getEQ()) goto loc_820E6750;
loc_820E66AC:
	// lfs f0,140(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 140);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// beq cr6,0x820e6750
	if (cr6.getEQ()) goto loc_820E6750;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e6750
	if (!cr6.getEQ()) goto loc_820E6750;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r29,r31,88
	r29.s64 = r31.s64 + 88;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lfs f2,17852(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17852);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,17848(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17848);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820dd758
	sub_820DD758(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x820e6750
	if (!cr6.getGT()) goto loc_820E6750;
	// lwz r3,176(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// addi r30,r31,176
	r30.s64 = r31.s64 + 176;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e6708
	if (cr6.getEQ()) goto loc_820E6708;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e6738
	if (!cr6.getEQ()) goto loc_820E6738;
loc_820E6708:
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e6738
	if (!cr6.getEQ()) goto loc_820E6738;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r7,172(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// li r8,5183
	ctx.r8.s64 = 5183;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,58
	ctx.r4.s64 = 58;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820E6738:
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e6770
	if (cr6.getEQ()) goto loc_820E6770;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x821448f8
	sub_821448F8(ctx, base);
	// b 0x820e6770
	goto loc_820E6770;
loc_820E6750:
	// lwz r3,176(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e6770
	if (cr6.getEQ()) goto loc_820E6770;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e6770
	if (cr6.getEQ()) goto loc_820E6770;
	// lwz r3,176(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820E6770:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,47
	cr6.compare<uint32_t>(r11.u32, 47, xer);
	// bne cr6,0x820e67e8
	if (!cr6.getEQ()) goto loc_820E67E8;
	// lwz r30,8(r16)
	r30.u64 = PPC_LOAD_U32(r16.u32 + 8);
	// addi r3,r31,88
	ctx.r3.s64 = r31.s64 + 88;
	// lwz r11,132(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 132);
	// lfs f3,144(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 144);
	ctx.f3.f64 = double(temp.f32);
	// lwz r10,128(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 128);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f0,96(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// std r10,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r10.u64);
	// lfd f13,112(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x820d8558
	sub_820D8558(ctx, base);
	// lwz r11,140(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 140);
	// stw r3,136(r30)
	PPC_STORE_U32(r30.u32 + 136, ctx.r3.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820e67e0
	if (cr6.getLT()) goto loc_820E67E0;
	// cmpwi cr6,r14,1
	cr6.compare<int32_t>(r14.s32, 1, xer);
	// bne cr6,0x820e67e0
	if (!cr6.getEQ()) goto loc_820E67E0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x821143f8
	sub_821143F8(ctx, base);
loc_820E67E0:
	// mr r23,r20
	r23.u64 = r20.u64;
	// b 0x820e68d4
	goto loc_820E68D4;
loc_820E67E8:
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x820e68d4
	if (!cr6.getEQ()) goto loc_820E68D4;
	// lhz r11,152(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 152);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e68d4
	if (cr6.getEQ()) goto loc_820E68D4;
	// lwz r30,8(r16)
	r30.u64 = PPC_LOAD_U32(r16.u32 + 8);
	// addi r3,r31,88
	ctx.r3.s64 = r31.s64 + 88;
	// fmr f3,f21
	ctx.fpscr.disableFlushMode();
	ctx.f3.f64 = f21.f64;
	// mr r29,r21
	r29.u64 = r21.u64;
	// lwz r11,196(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 196);
	// lwz r10,192(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 192);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f0,96(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// std r10,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r10.u64);
	// lfd f13,112(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x820d8558
	sub_820D8558(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// cmpwi cr6,r14,1
	cr6.compare<int32_t>(r14.s32, 1, xer);
	// sth r11,190(r30)
	PPC_STORE_U16(r30.u32 + 190, r11.u16);
	// bne cr6,0x820e68d4
	if (!cr6.getEQ()) goto loc_820E68D4;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,255
	cr6.compare<int32_t>(r11.s32, 255, xer);
	// bne cr6,0x820e686c
	if (!cr6.getEQ()) goto loc_820E686C;
	// lfs f0,180(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// ble cr6,0x820e6870
	if (!cr6.getGT()) goto loc_820E6870;
loc_820E686C:
	// mr r29,r20
	r29.u64 = r20.u64;
loc_820E6870:
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lis r10,-32164
	ctx.r10.s64 = -2107899904;
	// addi r10,r10,3568
	ctx.r10.s64 = ctx.r10.s64 + 3568;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// bne cr6,0x820e68a4
	if (!cr6.getEQ()) goto loc_820E68A4;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e68c0
	if (cr6.getEQ()) goto loc_820E68C0;
loc_820E68A4:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x820e68c0
	if (cr6.getEQ()) goto loc_820E68C0;
	// lwz r3,236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 236);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820e68d4
	if (cr6.getLT()) goto loc_820E68D4;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x820e68d0
	goto loc_820E68D0;
loc_820E68C0:
	// lwz r3,236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 236);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820e68d4
	if (cr6.getLT()) goto loc_820E68D4;
	// li r4,1
	ctx.r4.s64 = 1;
loc_820E68D0:
	// bl 0x821143f8
	sub_821143F8(ctx, base);
loc_820E68D4:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x820e68ec
	if (!cr6.getEQ()) goto loc_820E68EC;
	// bl 0x820b1020
	sub_820B1020(ctx, base);
	// cmplw cr6,r3,r16
	cr6.compare<uint32_t>(ctx.r3.u32, r16.u32, xer);
	// beq cr6,0x820e6938
	if (cr6.getEQ()) goto loc_820E6938;
loc_820E68EC:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// rlwinm r10,r11,0,5,5
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e6938
	if (!cr6.getEQ()) goto loc_820E6938;
	// lwz r10,100(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r10,r10,0,20,20
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x800;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820e7754
	if (!cr6.getEQ()) goto loc_820E7754;
	// rlwinm r11,r11,0,12,12
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e7754
	if (!cr6.getEQ()) goto loc_820E7754;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x82119330
	sub_82119330(ctx, base);
	// addi r4,r31,88
	ctx.r4.s64 = r31.s64 + 88;
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// bl 0x820deae0
	sub_820DEAE0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e7754
	if (cr6.getEQ()) goto loc_820E7754;
loc_820E6938:
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// beq cr6,0x820e69b4
	if (cr6.getEQ()) goto loc_820E69B4;
	// lbz r11,120(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 120);
	// lbz r7,124(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 124);
	// mr r6,r11
	ctx.r6.u64 = r11.u64;
	// lbz r10,121(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 121);
	// subf r11,r11,r7
	r11.s64 = ctx.r7.s64 - r11.s64;
	// lbz r9,122(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 122);
	// lbz r8,123(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 123);
	// addi r11,r11,7
	r11.s64 = r11.s64 + 7;
	// srawi r11,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	r11.s64 = r11.s32 >> 3;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// stb r11,120(r31)
	PPC_STORE_U8(r31.u32 + 120, r11.u8);
	// lbz r11,125(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 125);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,7
	r11.s64 = r11.s64 + 7;
	// srawi r11,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	r11.s64 = r11.s32 >> 3;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stb r11,121(r31)
	PPC_STORE_U8(r31.u32 + 121, r11.u8);
	// lbz r11,126(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 126);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// addi r11,r11,7
	r11.s64 = r11.s64 + 7;
	// srawi r11,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	r11.s64 = r11.s32 >> 3;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stb r11,122(r31)
	PPC_STORE_U8(r31.u32 + 122, r11.u8);
	// lbz r11,127(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 127);
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// addi r11,r11,7
	r11.s64 = r11.s64 + 7;
	// srawi r11,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	r11.s64 = r11.s32 >> 3;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// stb r11,123(r31)
	PPC_STORE_U8(r31.u32 + 123, r11.u8);
loc_820E69B4:
	// lbz r11,1(r16)
	r11.u64 = PPC_LOAD_U8(r16.u32 + 1);
	// ori r11,r11,2
	r11.u64 = r11.u64 | 2;
	// stb r11,1(r16)
	PPC_STORE_U8(r16.u32 + 1, r11.u8);
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lhz r11,14(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r3,r11,6,0,25
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// bl 0x8209cd50
	sub_8209CD50(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r30,12(r24)
	PPC_STORE_U32(r24.u32 + 12, r30.u32);
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x820e6bd0
	if (!cr6.getEQ()) goto loc_820E6BD0;
	// lwz r29,8(r16)
	r29.u64 = PPC_LOAD_U32(r16.u32 + 8);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820dcfa8
	sub_820DCFA8(ctx, base);
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lis r10,-32164
	ctx.r10.s64 = -2107899904;
	// addi r9,r10,3624
	ctx.r9.s64 = ctx.r10.s64 + 3624;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bne cr6,0x820e6a94
	if (!cr6.getEQ()) goto loc_820E6A94;
	// lfs f0,180(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 180);
	f0.f64 = double(temp.f32);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// fnmsubs f31,f0,f18,f20
	f31.f64 = double(float(-(f0.f64 * f18.f64 - f20.f64)));
	// addi r29,r30,64
	r29.s64 = r30.s64 + 64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r28,4(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8210b828
	sub_8210B828(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// addi r29,r30,128
	r29.s64 = r30.s64 + 128;
	// fsubs f1,f20,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = double(float(f20.f64 - f31.f64));
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r28,4(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210b828
	sub_8210B828(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// b 0x820e7704
	goto loc_820E7704;
loc_820E6A94:
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,3856
	r11.s64 = r11.s64 + 3856;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x820e7704
	if (!cr6.getEQ()) goto loc_820E7704;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,132(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 132);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,180(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 180);
	ctx.f13.f64 = double(temp.f32);
	// fmr f31,f21
	f31.f64 = f21.f64;
	// fmuls f30,f13,f18
	f30.f64 = double(float(ctx.f13.f64 * f18.f64));
	// lfs f0,14016(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14016);
	f0.f64 = double(temp.f32);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x820e6b04
	if (!cr6.getGT()) goto loc_820E6B04;
	// fmr f13,f12
	ctx.f13.f64 = ctx.f12.f64;
	// lfs f12,180(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 180);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 - f0.f64));
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// fmuls f12,f12,f13
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fsubs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 - f0.f64));
	// fdivs f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 / ctx.f13.f64));
	// fmuls f31,f13,f18
	f31.f64 = double(float(ctx.f13.f64 * f18.f64));
	// beq cr6,0x820e6b40
	if (cr6.getEQ()) goto loc_820E6B40;
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// bgt cr6,0x820e6b40
	if (cr6.getGT()) goto loc_820E6B40;
	// li r8,5307
	ctx.r8.s64 = 5307;
	// li r4,202
	ctx.r4.s64 = 202;
	// b 0x820e6b1c
	goto loc_820E6B1C;
loc_820E6B04:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e6b40
	if (cr6.getEQ()) goto loc_820E6B40;
	// fcmpu cr6,f16,f0
	ctx.fpscr.disableFlushMode();
	cr6.compare(f16.f64, f0.f64);
	// ble cr6,0x820e6b40
	if (!cr6.getGT()) goto loc_820E6B40;
	// li r8,5315
	ctx.r8.s64 = 5315;
	// li r4,203
	ctx.r4.s64 = 203;
loc_820E6B1C:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r7,172(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// addi r4,r16,12
	ctx.r4.s64 = r16.s64 + 12;
	// bl 0x821448f8
	sub_821448F8(ctx, base);
loc_820E6B40:
	// lwz r25,128(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// li r28,4
	r28.s64 = 4;
	// addi r29,r30,64
	r29.s64 = r30.s64 + 64;
loc_820E6B4C:
	// lwz r11,8(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 8);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r11,r11,r28
	r11.u64 = PPC_LOAD_U32(r11.u32 + r28.u32);
	// lwz r27,4(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210b968
	sub_8210B968(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// lwz r11,8(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 8);
	// addi r27,r29,64
	r27.s64 = r29.s64 + 64;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r26,4(r11)
	r26.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210b968
	sub_8210B968(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// addi r28,r28,8
	r28.s64 = r28.s64 + 8;
	// addi r29,r29,128
	r29.s64 = r29.s64 + 128;
	// cmpwi cr6,r28,52
	cr6.compare<int32_t>(r28.s32, 52, xer);
	// blt cr6,0x820e6b4c
	if (cr6.getLT()) goto loc_820E6B4C;
	// b 0x820e7704
	goto loc_820E7704;
loc_820E6BD0:
	// addi r23,r31,24
	r23.s64 = r31.s64 + 24;
	// addi r4,r1,416
	ctx.r4.s64 = ctx.r1.s64 + 416;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// addi r22,r31,88
	r22.s64 = r31.s64 + 88;
	// addi r4,r1,416
	ctx.r4.s64 = ctx.r1.s64 + 416;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// addi r29,r1,416
	r29.s64 = ctx.r1.s64 + 416;
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x8210b450
	sub_8210B450(ctx, base);
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// bne cr6,0x820e6ca0
	if (!cr6.getEQ()) goto loc_820E6CA0;
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lwz r28,8(r16)
	r28.u64 = PPC_LOAD_U32(r16.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lfs f1,200(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 200);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f21
	cr6.compare(ctx.f1.f64, f21.f64);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r29,4(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bge cr6,0x820e6c38
	if (!cr6.getLT()) goto loc_820E6C38;
	// fadds f1,f1,f20
	ctx.f1.f64 = double(float(ctx.f1.f64 + f20.f64));
	// b 0x820e6c44
	goto loc_820E6C44;
loc_820E6C38:
	// fcmpu cr6,f1,f20
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f20.f64);
	// blt cr6,0x820e6c44
	if (cr6.getLT()) goto loc_820E6C44;
	// fsubs f1,f1,f20
	ctx.f1.f64 = double(float(ctx.f1.f64 - f20.f64));
loc_820E6C44:
	// addi r4,r1,288
	ctx.r4.s64 = ctx.r1.s64 + 288;
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// addi r30,r30,64
	r30.s64 = r30.s64 + 64;
	// addi r4,r28,132
	ctx.r4.s64 = r28.s64 + 132;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x8210b350
	sub_8210B350(ctx, base);
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,144(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// lfs f0,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// addi r3,r1,416
	ctx.r3.s64 = ctx.r1.s64 + 416;
	// stfs f0,148(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// lfs f0,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,152(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// bl 0x8210b6e0
	sub_8210B6E0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// b 0x820e7704
	goto loc_820E7704;
loc_820E6CA0:
	// cmplwi cr6,r11,13
	cr6.compare<uint32_t>(r11.u32, 13, xer);
	// bne cr6,0x820e6e80
	if (!cr6.getEQ()) goto loc_820E6E80;
	// lwz r28,8(r16)
	r28.u64 = PPC_LOAD_U32(r16.u32 + 8);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,11980(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 11980);
	f0.f64 = double(temp.f32);
	// lfs f13,144(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 144);
	ctx.f13.f64 = double(temp.f32);
	// fadds f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 + f0.f64));
	// lfs f0,156(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 156);
	f0.f64 = double(temp.f32);
	// fneg f30,f0
	f30.u64 = f0.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f31,f20
	cr6.compare(f31.f64, f20.f64);
	// blt cr6,0x820e6cd0
	if (cr6.getLT()) goto loc_820E6CD0;
	// fsubs f31,f31,f20
	f31.f64 = double(float(f31.f64 - f20.f64));
loc_820E6CD0:
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,416
	ctx.r3.s64 = ctx.r1.s64 + 416;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lfs f0,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,144(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// lfs f0,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,148(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// lfs f0,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,152(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// bl 0x8210b6e0
	sub_8210B6E0(ctx, base);
	// addi r29,r30,64
	r29.s64 = r30.s64 + 64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// lwz r11,20(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lfs f1,20(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bcc8
	sub_8210BCC8(ctx, base);
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// addi r30,r30,128
	r30.s64 = r30.s64 + 128;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r27,4(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210b968
	sub_8210B968(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e6dd0
	if (cr6.getEQ()) goto loc_820E6DD0;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118bc8
	sub_82118BC8(ctx, base);
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lfs f1,180(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 180);
	ctx.f1.f64 = double(temp.f32);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r27,4(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210b828
	sub_8210B828(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
loc_820E6DD0:
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e6e1c
	if (cr6.getEQ()) goto loc_820E6E1C;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118bc8
	sub_82118BC8(ctx, base);
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210c818
	sub_8210C818(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
loc_820E6E1C:
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,24(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e7704
	if (cr6.getEQ()) goto loc_820E7704;
	// lwz r27,128(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// li r5,0
	ctx.r5.s64 = 0;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82118bc8
	sub_82118BC8(ctx, base);
	// lwz r11,8(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lfs f1,180(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 180);
	ctx.f1.f64 = double(temp.f32);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// lwz r28,4(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210b828
	sub_8210B828(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// b 0x820e7704
	goto loc_820E7704;
loc_820E6E80:
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x820e6ed0
	if (!cr6.getEQ()) goto loc_820E6ED0;
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// mr r29,r21
	r29.u64 = r21.u64;
	// lhz r11,14(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// ble cr6,0x820e7704
	if (!cr6.getGT()) goto loc_820E7704;
	// lwz r28,128(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r30,r30,64
	r30.s64 = r30.s64 + 64;
loc_820E6EA8:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210b2b0
	sub_8210B2B0(ctx, base);
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r30,r30,64
	r30.s64 = r30.s64 + 64;
	// lhz r11,14(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// blt cr6,0x820e6ea8
	if (cr6.getLT()) goto loc_820E6EA8;
	// b 0x820e7704
	goto loc_820E7704;
loc_820E6ED0:
	// cmplwi cr6,r11,12
	cr6.compare<uint32_t>(r11.u32, 12, xer);
	// bne cr6,0x820e6f7c
	if (!cr6.getEQ()) goto loc_820E6F7C;
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// addi r29,r30,64
	r29.s64 = r30.s64 + 64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210c818
	sub_8210C818(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// addi r29,r30,128
	r29.s64 = r30.s64 + 128;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210c818
	sub_8210C818(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// addi r29,r30,192
	r29.s64 = r30.s64 + 192;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210c818
	sub_8210C818(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// addi r29,r30,256
	r29.s64 = r30.s64 + 256;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210c818
	sub_8210C818(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// b 0x820e7704
	goto loc_820E7704;
loc_820E6F7C:
	// cmplwi cr6,r11,39
	cr6.compare<uint32_t>(r11.u32, 39, xer);
	// bne cr6,0x820e735c
	if (!cr6.getEQ()) goto loc_820E735C;
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// addi r10,r1,148
	ctx.r10.s64 = ctx.r1.s64 + 148;
	// stfs f21,144(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// lis r9,-32013
	ctx.r9.s64 = -2098003968;
	// addi r29,r9,25760
	r29.s64 = ctx.r9.s64 + 25760;
	// li r9,7
	ctx.r9.s64 = 7;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// stw r20,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r20.u32);
	// stw r20,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r20.u32);
	// stw r20,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r20.u32);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r7,8(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r6,12(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r5,16(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwz r11,4(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r10,4(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// lwz r7,4(r6)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// lwz r6,4(r5)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r5.u32 + 4);
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_820E6FD4:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r9.u32);
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// bdnz 0x820e6fd4
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820E6FD4;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// li r9,7
	ctx.r9.s64 = 7;
	// addi r10,r29,28
	ctx.r10.s64 = r29.s64 + 28;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_820E6FF8:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x820e6ff8
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820E6FF8;
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
	// li r9,7
	ctx.r9.s64 = 7;
	// addi r10,r29,56
	ctx.r10.s64 = r29.s64 + 56;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_820E701C:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x820e701c
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820E701C;
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
	// li r9,7
	ctx.r9.s64 = 7;
	// addi r10,r29,84
	ctx.r10.s64 = r29.s64 + 84;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_820E7040:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x820e7040
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820E7040;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,28(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 28);
	ctx.f12.f64 = double(temp.f32);
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// lfs f11,56(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 56);
	ctx.f11.f64 = double(temp.f32);
	// lfs f10,84(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 84);
	ctx.f10.f64 = double(temp.f32);
	// lfd f0,17920(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 17920);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsub f13,f13,f0
	ctx.f13.f64 = ctx.f13.f64 - f0.f64;
	// fadd f12,f12,f0
	ctx.f12.f64 = ctx.f12.f64 + f0.f64;
	// lfd f0,17912(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 17912);
	// fsub f11,f11,f0
	ctx.f11.f64 = ctx.f11.f64 - f0.f64;
	// fadd f10,f10,f0
	ctx.f10.f64 = ctx.f10.f64 + f0.f64;
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// stfs f0,0(r29)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + 0, temp.u32);
	// frsp f0,f12
	f0.f64 = double(float(ctx.f12.f64));
	// stfs f0,28(r29)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + 28, temp.u32);
	// frsp f0,f11
	f0.f64 = double(float(ctx.f11.f64));
	// stfs f0,56(r29)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + 56, temp.u32);
	// frsp f0,f10
	f0.f64 = double(float(ctx.f10.f64));
	// stfs f0,84(r29)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + 84, temp.u32);
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lfs f0,20(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 20);
	f0.f64 = double(temp.f32);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lfs f13,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// beq cr6,0x820e71c4
	if (cr6.getEQ()) goto loc_820E71C4;
	// fmuls f31,f0,f19
	f31.f64 = double(float(f0.f64 * f19.f64));
	// addi r25,r1,144
	r25.s64 = ctx.r1.s64 + 144;
	// mr r26,r29
	r26.u64 = r29.u64;
	// addi r27,r31,188
	r27.s64 = r31.s64 + 188;
	// addi r28,r31,140
	r28.s64 = r31.s64 + 140;
	// lis r24,-32190
	r24.s64 = -2109603840;
loc_820E70E8:
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x8210b548
	sub_8210B548(ctx, base);
	// lfs f11,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,0(r22)
	temp.u32 = PPC_LOAD_U32(r22.u32 + 0);
	f0.f64 = double(temp.f32);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// fadds f0,f0,f11
	f0.f64 = double(float(f0.f64 + ctx.f11.f64));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lfs f0,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	f0.f64 = double(temp.f32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lfs f13,92(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 92);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,100(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// lfs f0,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	f0.f64 = double(temp.f32);
	// lfs f12,96(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// fadds f0,f0,f12
	f0.f64 = double(float(f0.f64 + ctx.f12.f64));
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// bl 0x8238c718
	sub_8238C718(ctx, base);
	// fmuls f0,f1,f20
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64 * f20.f64));
	// lfs f13,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fdivs f12,f0,f31
	ctx.f12.f64 = double(float(f0.f64 / f31.f64));
	// lfs f0,24720(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 24720);
	f0.f64 = double(temp.f32);
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// stfs f0,0(r25)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r25.u32 + 0, temp.u32);
	// fadds f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f13,0(r28)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r28.u32 + 0, temp.u32);
	// fcmpu cr6,f13,f20
	cr6.compare(ctx.f13.f64, f20.f64);
	// blt cr6,0x820e7170
	if (cr6.getLT()) goto loc_820E7170;
loc_820E715C:
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f20
	f0.f64 = double(float(f0.f64 - f20.f64));
	// stfs f0,0(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + 0, temp.u32);
	// fcmpu cr6,f0,f20
	cr6.compare(f0.f64, f20.f64);
	// bge cr6,0x820e715c
	if (!cr6.getLT()) goto loc_820E715C;
loc_820E7170:
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bge cr6,0x820e7190
	if (!cr6.getLT()) goto loc_820E7190;
loc_820E717C:
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f20
	f0.f64 = double(float(f0.f64 + f20.f64));
	// stfs f0,0(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + 0, temp.u32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// blt cr6,0x820e717c
	if (cr6.getLT()) goto loc_820E717C;
loc_820E7190:
	// addi r26,r26,28
	r26.s64 = r26.s64 + 28;
	// lfs f0,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f0.f64 = double(temp.f32);
	// addi r11,r29,112
	r11.s64 = r29.s64 + 112;
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f12.f64 = double(temp.f32);
	// addi r25,r25,4
	r25.s64 = r25.s64 + 4;
	// stfs f0,0(r27)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r27.u32 + 0, temp.u32);
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// stfs f13,4(r27)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r27.u32 + 4, temp.u32);
	// cmpw cr6,r26,r11
	cr6.compare<int32_t>(r26.s32, r11.s32, xer);
	// stfs f12,8(r27)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r27.u32 + 8, temp.u32);
	// addi r27,r27,12
	r27.s64 = r27.s64 + 12;
	// blt cr6,0x820e70e8
	if (cr6.getLT()) goto loc_820E70E8;
loc_820E71C4:
	// lfs f0,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// ble cr6,0x820e7260
	if (!cr6.getGT()) goto loc_820E7260;
	// lfs f13,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lfs f0,64(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 64);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f31,168(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 168);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f31,f21
	cr6.compare(f31.f64, f21.f64);
	// lfs f13,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fabs f30,f0
	f30.u64 = f0.u64 & ~0x8000000000000000;
	// bge cr6,0x820e71fc
	if (!cr6.getLT()) goto loc_820E71FC;
	// fneg f31,f31
	f31.u64 = f31.u64 ^ 0x8000000000000000;
loc_820E71FC:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f29,f0,f30
	f29.f64 = double(float(f0.f64 * f30.f64));
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lfs f13,136(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f30,f13
	ctx.f13.f64 = double(float(f30.f64 - ctx.f13.f64));
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fsubs f2,f0,f13
	ctx.f2.f64 = double(float(f0.f64 - ctx.f13.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// stfs f1,156(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r31.u32 + 156, temp.u32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x820e7248
	if (!cr6.getLT()) goto loc_820E7248;
	// stfs f31,156(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 156, temp.u32);
loc_820E7248:
	// lfs f0,168(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 168);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// ble cr6,0x820e7260
	if (!cr6.getGT()) goto loc_820E7260;
	// lfs f0,156(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 156);
	f0.f64 = double(temp.f32);
	// fsubs f0,f20,f0
	f0.f64 = double(float(f20.f64 - f0.f64));
	// stfs f0,156(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 156, temp.u32);
loc_820E7260:
	// lfs f0,156(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 156);
	f0.f64 = double(temp.f32);
	// addi r4,r1,288
	ctx.r4.s64 = ctx.r1.s64 + 288;
	// fneg f1,f0
	ctx.f1.u64 = f0.u64 ^ 0x8000000000000000;
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// lfs f1,148(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 148);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210b828
	sub_8210B828(ctx, base);
	// addi r28,r30,192
	r28.s64 = r30.s64 + 192;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// addi r3,r29,56
	ctx.r3.s64 = r29.s64 + 56;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// lfs f1,152(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 152);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210b828
	sub_8210B828(ctx, base);
	// addi r28,r30,256
	r28.s64 = r30.s64 + 256;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// addi r3,r29,84
	ctx.r3.s64 = r29.s64 + 84;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// lfs f1,140(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 140);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210b828
	sub_8210B828(ctx, base);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// addi r28,r30,64
	r28.s64 = r30.s64 + 64;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// lfs f1,144(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 144);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210b828
	sub_8210B828(ctx, base);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// addi r28,r30,128
	r28.s64 = r30.s64 + 128;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// addi r3,r29,28
	ctx.r3.s64 = r29.s64 + 28;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// b 0x820e7704
	goto loc_820E7704;
loc_820E735C:
	// cmplwi cr6,r11,40
	cr6.compare<uint32_t>(r11.u32, 40, xer);
	// bne cr6,0x820e757c
	if (!cr6.getEQ()) goto loc_820E757C;
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r10,r10,0,0,24
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFF80;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r28,4(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// beq cr6,0x820e73a8
	if (cr6.getEQ()) goto loc_820E73A8;
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e740c
	if (!cr6.getEQ()) goto loc_820E740C;
loc_820E73A8:
	// lwz r11,-6384(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + -6384);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820e7410
	if (!cr6.getGT()) goto loc_820E7410;
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// beq cr6,0x820e7410
	if (cr6.getEQ()) goto loc_820E7410;
	// lfs f0,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	f0.f64 = double(temp.f32);
	// lfs f13,140(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 140);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,136(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 136, temp.u32);
	// fcmpu cr6,f0,f20
	cr6.compare(f0.f64, f20.f64);
	// blt cr6,0x820e73e8
	if (cr6.getLT()) goto loc_820E73E8;
loc_820E73D4:
	// lfs f0,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f20
	f0.f64 = double(float(f0.f64 - f20.f64));
	// stfs f0,136(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 136, temp.u32);
	// fcmpu cr6,f0,f20
	cr6.compare(f0.f64, f20.f64);
	// bge cr6,0x820e73d4
	if (!cr6.getLT()) goto loc_820E73D4;
loc_820E73E8:
	// lfs f0,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// bge cr6,0x820e7410
	if (!cr6.getLT()) goto loc_820E7410;
loc_820E73F4:
	// lfs f0,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f20
	f0.f64 = double(float(f0.f64 + f20.f64));
	// stfs f0,136(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 136, temp.u32);
	// fcmpu cr6,f0,f21
	cr6.compare(f0.f64, f21.f64);
	// blt cr6,0x820e73f4
	if (cr6.getLT()) goto loc_820E73F4;
	// b 0x820e7410
	goto loc_820E7410;
loc_820E740C:
	// stfs f21,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r31.u32 + 136, temp.u32);
loc_820E7410:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e7474
	if (cr6.getEQ()) goto loc_820E7474;
	// li r10,3
	ctx.r10.s64 = 3;
	// stw r20,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, r20.u32);
	// addi r11,r1,268
	r11.s64 = ctx.r1.s64 + 268;
	// stw r21,228(r1)
	PPC_STORE_U32(ctx.r1.u32 + 228, r21.u32);
	// stw r20,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, r20.u32);
	// stw r20,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, r20.u32);
	// stw r20,244(r1)
	PPC_STORE_U32(ctx.r1.u32 + 244, r20.u32);
	// stw r10,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, ctx.r10.u32);
	// stw r20,248(r1)
	PPC_STORE_U32(ctx.r1.u32 + 248, r20.u32);
	// stw r20,252(r1)
	PPC_STORE_U32(ctx.r1.u32 + 252, r20.u32);
	// stw r20,256(r1)
	PPC_STORE_U32(ctx.r1.u32 + 256, r20.u32);
	// stw r20,260(r1)
	PPC_STORE_U32(ctx.r1.u32 + 260, r20.u32);
	// stw r20,264(r1)
	PPC_STORE_U32(ctx.r1.u32 + 264, r20.u32);
	// stw r20,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r20.u32);
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// stw r3,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, ctx.r3.u32);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// stw r30,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, r30.u32);
	// bl 0x8211d328
	sub_8211D328(ctx, base);
	// b 0x820e7480
	goto loc_820E7480;
loc_820E7474:
	// addi r4,r30,64
	ctx.r4.s64 = r30.s64 + 64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
loc_820E7480:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lfs f1,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	ctx.f1.f64 = double(temp.f32);
	// addi r4,r1,288
	ctx.r4.s64 = ctx.r1.s64 + 288;
	// rlwinm r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e74a0
	if (cr6.getEQ()) goto loc_820E74A0;
	// bl 0x8210b968
	sub_8210B968(ctx, base);
	// b 0x820e74a4
	goto loc_820E74A4;
loc_820E74A0:
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
loc_820E74A4:
	// addi r29,r30,128
	r29.s64 = r30.s64 + 128;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// addi r28,r30,64
	r28.s64 = r30.s64 + 64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e7530
	if (cr6.getEQ()) goto loc_820E7530;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// lwz r4,12(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r29,4(r4)
	r29.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// bl 0x82118bc8
	sub_82118BC8(ctx, base);
	// addi r4,r1,288
	ctx.r4.s64 = ctx.r1.s64 + 288;
	// lfs f1,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	ctx.f1.f64 = double(temp.f32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x8210b828
	sub_8210B828(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
loc_820E7530:
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,16(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e7704
	if (cr6.getEQ()) goto loc_820E7704;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r4,16(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwz r29,4(r4)
	r29.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// bl 0x82118bc8
	sub_82118BC8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8210c818
	sub_8210C818(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// b 0x820e7704
	goto loc_820E7704;
loc_820E757C:
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x820e7704
	if (!cr6.getEQ()) goto loc_820E7704;
	// lwz r23,128(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lfs f0,200(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 200);
	f0.f64 = double(temp.f32);
	// fneg f31,f0
	f31.u64 = f0.u64 ^ 0x8000000000000000;
	// lwz r11,8(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// fcmpu cr6,f31,f21
	cr6.compare(f31.f64, f21.f64);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r9,12(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r8,16(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwz r7,8(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// lwz r27,4(r10)
	r27.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r26,4(r9)
	r26.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// lwz r25,4(r8)
	r25.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// lwz r24,4(r7)
	r24.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// lwz r28,4(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bge cr6,0x820e75cc
	if (!cr6.getLT()) goto loc_820E75CC;
	// fadds f31,f31,f20
	f31.f64 = double(float(f31.f64 + f20.f64));
loc_820E75CC:
	// lfs f0,204(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 204);
	f0.f64 = double(temp.f32);
	// fneg f1,f0
	ctx.f1.u64 = f0.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f1,f21
	cr6.compare(ctx.f1.f64, f21.f64);
	// bge cr6,0x820e75e0
	if (!cr6.getLT()) goto loc_820E75E0;
	// fadds f1,f1,f20
	ctx.f1.f64 = double(float(ctx.f1.f64 + f20.f64));
loc_820E75E0:
	// addi r29,r30,64
	r29.s64 = r30.s64 + 64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// addi r27,r30,192
	r27.s64 = r30.s64 + 192;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x8210b828
	sub_8210B828(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r26,r30,256
	r26.s64 = r30.s64 + 256;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lfs f1,11980(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 11980);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// addi r30,r30,128
	r30.s64 = r30.s64 + 128;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8210c818
	sub_8210C818(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// addi r30,r1,480
	r30.s64 = ctx.r1.s64 + 480;
	// bl 0x8210d870
	sub_8210D870(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x8210b450
	sub_8210B450(ctx, base);
	// addi r11,r31,128
	r11.s64 = r31.s64 + 128;
	// addi r10,r31,132
	ctx.r10.s64 = r31.s64 + 132;
	// lfs f6,24(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 24);
	ctx.f6.f64 = double(temp.f32);
	// addi r9,r1,480
	ctx.r9.s64 = ctx.r1.s64 + 480;
	// lfs f5,20(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 20);
	ctx.f5.f64 = double(temp.f32);
	// lfs f4,16(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 16);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,12(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 12);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,8(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lfs f1,4(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 4);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820d3be8
	sub_820D3BE8(ctx, base);
	// lwz r11,8(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e76dc
	if (cr6.getEQ()) goto loc_820E76DC;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// lwz r11,196(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// sth r11,0(r3)
	PPC_STORE_U16(ctx.r3.u32 + 0, r11.u16);
loc_820E76DC:
	// lwz r11,8(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,32(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e7704
	if (cr6.getEQ()) goto loc_820E7704;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_820E7704:
	// lwz r30,128(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x8211cef0
	sub_8211CEF0(ctx, base);
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// lfs f0,56(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 56);
	f0.f64 = double(temp.f32);
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,28(r16)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r16.u32 + 28, temp.u32);
	// bl 0x820e0538
	sub_820E0538(ctx, base);
	// lwz r3,36(r16)
	ctx.r3.u64 = PPC_LOAD_U32(r16.u32 + 36);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e7788
	if (cr6.getEQ()) goto loc_820E7788;
loc_820E773C:
	// lwz r30,40(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// bl 0x820e0aa0
	sub_820E0AA0(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x820e773c
	if (!cr6.getEQ()) goto loc_820E773C;
	// b 0x820e7788
	goto loc_820E7788;
loc_820E7754:
	// lbz r11,1(r16)
	r11.u64 = PPC_LOAD_U8(r16.u32 + 1);
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// andi. r11,r11,253
	r11.u64 = r11.u64 & 253;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stb r11,1(r16)
	PPC_STORE_U8(r16.u32 + 1, r11.u8);
	// bl 0x820e0538
	sub_820E0538(ctx, base);
	// lwz r3,36(r16)
	ctx.r3.u64 = PPC_LOAD_U32(r16.u32 + 36);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e7788
	if (cr6.getEQ()) goto loc_820E7788;
loc_820E7774:
	// lwz r30,40(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// bl 0x820e0a08
	sub_820E0A08(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x820e7774
	if (!cr6.getEQ()) goto loc_820E7774;
loc_820E7788:
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e77f0
	if (cr6.getEQ()) goto loc_820E77F0;
	// rlwinm r11,r11,0,24,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFEFF;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lfs f13,192(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	ctx.f13.f64 = double(temp.f32);
	// lwz r10,100(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// li r6,0
	ctx.r6.s64 = 0;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// rlwinm r7,r10,15,30,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 15) & 0x3;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// addi r5,r16,12
	ctx.r5.s64 = r16.s64 + 12;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f0,96(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// lfs f13,188(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f1,f0,f14,f13
	ctx.f1.f64 = double(float(f0.f64 * f14.f64 + ctx.f13.f64));
	// bl 0x820e3598
	sub_820E3598(ctx, base);
loc_820E77F0:
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e7e88
	if (cr6.getEQ()) goto loc_820E7E88;
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x820e7814
	if (!cr6.getEQ()) goto loc_820E7814;
	// lwz r3,8(r16)
	ctx.r3.u64 = PPC_LOAD_U32(r16.u32 + 8);
	// bl 0x820dd8e0
	sub_820DD8E0(ctx, base);
	// b 0x820e7e80
	goto loc_820E7E80;
loc_820E7814:
	// cmplwi cr6,r11,13
	cr6.compare<uint32_t>(r11.u32, 13, xer);
	// bne cr6,0x820e7e80
	if (!cr6.getEQ()) goto loc_820E7E80;
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e7e80
	if (!cr6.getEQ()) goto loc_820E7E80;
	// lwz r30,8(r16)
	r30.u64 = PPC_LOAD_U32(r16.u32 + 8);
	// li r25,0
	r25.s64 = 0;
	// li r24,0
	r24.s64 = 0;
	// lwz r11,208(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 208);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e7e34
	if (cr6.getEQ()) goto loc_820E7E34;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r11,r11,0,3,3
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e7e34
	if (!cr6.getEQ()) goto loc_820E7E34;
	// lwz r11,172(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 172);
	// lwz r23,128(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// not r10,r11
	ctx.r10.u64 = ~r11.u64;
	// clrlwi r25,r10,31
	r25.u64 = ctx.r10.u32 & 0x1;
	// stw r11,172(r30)
	PPC_STORE_U32(r30.u32 + 172, r11.u32);
	// lwz r10,8(r23)
	ctx.r10.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r10,20(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e7880
	if (cr6.getEQ()) goto loc_820E7880;
	// clrlwi r24,r11,31
	r24.u64 = r11.u32 & 0x1;
loc_820E7880:
	// lis r22,-32014
	r22.s64 = -2098069504;
	// lwz r11,192(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 192);
	// lwz r10,-6376(r22)
	ctx.r10.u64 = PPC_LOAD_U32(r22.u32 + -6376);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x820e795c
	if (!cr6.getLT()) goto loc_820E795C;
	// lwz r3,196(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 196);
	// addi r29,r30,196
	r29.s64 = r30.s64 + 196;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e78b8
	if (cr6.getEQ()) goto loc_820E78B8;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e78b8
	if (cr6.getEQ()) goto loc_820E78B8;
	// lwz r3,0(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820E78B8:
	// lwz r3,200(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 200);
	// addi r31,r30,200
	r31.s64 = r30.s64 + 200;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e78dc
	if (cr6.getEQ()) goto loc_820E78DC;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e78dc
	if (cr6.getEQ()) goto loc_820E78DC;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820E78DC:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e7914
	if (!cr6.getEQ()) goto loc_820E7914;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r7,172(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// li r8,5749
	ctx.r8.s64 = 5749;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,253
	ctx.r4.s64 = 253;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r3,0(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// b 0x820e7948
	goto loc_820E7948;
loc_820E7914:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e7950
	if (!cr6.getEQ()) goto loc_820E7950;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r7,172(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// li r8,5754
	ctx.r8.s64 = 5754;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,253
	ctx.r4.s64 = 253;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
loc_820E7948:
	// addi r4,r16,12
	ctx.r4.s64 = r16.s64 + 12;
	// bl 0x821448f8
	sub_821448F8(ctx, base);
loc_820E7950:
	// lwz r11,-6376(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + -6376);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,192(r30)
	PPC_STORE_U32(r30.u32 + 192, r11.u32);
loc_820E795C:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x820e796c
	if (!cr6.getEQ()) goto loc_820E796C;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x820e7e38
	if (cr6.getEQ()) goto loc_820E7E38;
loc_820E796C:
	// lwz r11,172(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 172);
	// li r27,0
	r27.s64 = 0;
	// lwz r10,24(r16)
	ctx.r10.u64 = PPC_LOAD_U32(r16.u32 + 24);
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
	// rlwinm r26,r11,27,31,31
	r26.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lwz r11,8(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r9,5
	ctx.r9.s64 = 5;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r8,28(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x820e79bc
	if (cr6.getEQ()) goto loc_820E79BC;
	// lwz r8,172(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 172);
	// clrlwi r8,r8,29
	ctx.r8.u64 = ctx.r8.u32 & 0x7;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x820e79bc
	if (!cr6.getEQ()) goto loc_820E79BC;
	// li r9,7
	ctx.r9.s64 = 7;
loc_820E79BC:
	// lbz r8,1(r16)
	ctx.r8.u64 = PPC_LOAD_U8(r16.u32 + 1);
	// rlwinm r8,r8,0,30,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x820e7a5c
	if (cr6.getEQ()) goto loc_820E7A5C;
	// rlwinm r31,r9,2,0,29
	r31.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r31,r10
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + ctx.r10.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e7a5c
	if (cr6.getEQ()) goto loc_820E7A5C;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// lwzx r4,r31,r11
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + r11.u32);
	// bl 0x82118bc8
	sub_82118BC8(ctx, base);
	// lwz r11,8(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r21,r1,288
	r21.s64 = ctx.r1.s64 + 288;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lfs f0,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lfs f0,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,100(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// lfs f0,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// bl 0x8210d870
	sub_8210D870(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// bl 0x8210b450
	sub_8210B450(ctx, base);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x8210b6e0
	sub_8210B6E0(ctx, base);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// lfs f2,20(r16)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,12(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// lfs f4,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f3.f64 = double(temp.f32);
	// bl 0x8210f7c8
	sub_8210F7C8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e7a74
	if (!cr6.getEQ()) goto loc_820E7A74;
loc_820E7A5C:
	// lfs f0,12(r16)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r16.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lfs f0,16(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,100(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// lfs f0,20(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
loc_820E7A74:
	// lfs f1,156(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 156);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lfs f0,144(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 144);
	f0.f64 = double(temp.f32);
	// frsp f31,f1
	f31.f64 = double(float(ctx.f1.f64));
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// lfs f0,156(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 156);
	f0.f64 = double(temp.f32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// fmuls f13,f13,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64));
	// stfs f13,144(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// lfs f0,156(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 156);
	f0.f64 = double(temp.f32);
	// frsp f13,f1
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// stfs f13,148(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lfs f0,144(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 144);
	f0.f64 = double(temp.f32);
	// frsp f31,f1
	f31.f64 = double(float(ctx.f1.f64));
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f11,f1
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = double(float(ctx.f1.f64));
	// lfs f13,144(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	ctx.f13.f64 = double(temp.f32);
	// lfs f10,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f10.f64 = double(temp.f32);
	// lfs f12,148(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,16156(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16156);
	f0.f64 = double(temp.f32);
	// fmadds f13,f13,f0,f10
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f10.f64));
	// stfs f13,112(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f13,f12,f0,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// stfs f13,116(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// lfs f12,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f13,f11,f31
	ctx.f13.f64 = double(float(ctx.f11.f64 * f31.f64));
	// stfs f13,152(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// fmadds f0,f13,f0,f12
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// bl 0x8210f8f0
	sub_8210F8F0(ctx, base);
	// li r8,2
	ctx.r8.s64 = 2;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// lfs f4,120(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f3.f64 = double(temp.f32);
	// fmr f8,f17
	ctx.f8.f64 = f17.f64;
	// lfs f2,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f2.f64 = double(temp.f32);
	// fmr f7,f21
	ctx.f7.f64 = f21.f64;
	// lfs f1,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f1.f64 = double(temp.f32);
	// fmr f6,f15
	ctx.f6.f64 = f15.f64;
	// fmr f5,f15
	ctx.f5.f64 = f15.f64;
	// bl 0x82112020
	sub_82112020(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lfs f30,16152(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16152);
	f30.f64 = double(temp.f32);
	// bne cr6,0x820e7b8c
	if (!cr6.getEQ()) goto loc_820E7B8C;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82121c20
	sub_82121C20(ctx, base);
	// lfs f11,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,144(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	f0.f64 = double(temp.f32);
	// lwz r27,124(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// fnmsubs f0,f0,f30,f11
	f0.f64 = double(float(-(f0.f64 * f30.f64 - ctx.f11.f64)));
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// lfs f0,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	f0.f64 = double(temp.f32);
	// lfs f13,148(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f0,f13,f30,f0
	f0.f64 = double(float(-(ctx.f13.f64 * f30.f64 - f0.f64)));
	// stfs f0,116(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// lfs f0,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// lfs f12,152(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	ctx.f12.f64 = double(temp.f32);
	// fnmsubs f0,f12,f30,f0
	f0.f64 = double(float(-(ctx.f12.f64 * f30.f64 - f0.f64)));
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
loc_820E7B8C:
	// lwz r10,188(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 188);
	// lwz r11,-6376(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + -6376);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bne cr6,0x820e7ca8
	if (!cr6.getEQ()) goto loc_820E7CA8;
	// lfs f10,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f10.f64 = double(temp.f32);
	// lfs f13,20(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f13,f10
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f10.f64));
	// lfs f11,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,16(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 16);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f11
	f0.f64 = double(float(f0.f64 - ctx.f11.f64));
	// lfs f9,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f9.f64 = double(temp.f32);
	// lfs f12,12(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f9
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f9.f64));
	// fmr f7,f13
	ctx.f7.f64 = ctx.f13.f64;
	// fmr f6,f13
	ctx.f6.f64 = ctx.f13.f64;
	// lfs f13,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f13,f11
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f11.f64));
	// fmuls f8,f0,f0
	ctx.f8.f64 = double(float(f0.f64 * f0.f64));
	// lfs f0,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f10
	f0.f64 = double(float(f0.f64 - ctx.f10.f64));
	// fmr f11,f12
	ctx.f11.f64 = ctx.f12.f64;
	// fmr f10,f12
	ctx.f10.f64 = ctx.f12.f64;
	// lfs f12,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f9
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f9.f64));
	// fmuls f13,f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// fmadds f9,f7,f6,f8
	ctx.f9.f64 = double(float(ctx.f7.f64 * ctx.f6.f64 + ctx.f8.f64));
	// fmadds f0,f0,f0,f13
	f0.f64 = double(float(f0.f64 * f0.f64 + ctx.f13.f64));
	// fmadds f31,f11,f10,f9
	f31.f64 = double(float(ctx.f11.f64 * ctx.f10.f64 + ctx.f9.f64));
	// fmadds f0,f12,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// blt cr6,0x820e7ca8
	if (cr6.getLT()) goto loc_820E7CA8;
	// bl 0x820b3ca8
	sub_820B3CA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e7ca8
	if (!cr6.getEQ()) goto loc_820E7CA8;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f0,19416(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 19416);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f13,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f12,f0,f13
	ctx.f12.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fsqrts f0,f31
	f0.f64 = double(float(sqrt(f31.f64)));
	// lfs f13,17908(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17908);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f12,f12,f13
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// lfs f13,2940(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2940);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820e7c50
	if (!cr6.getGT()) goto loc_820E7C50;
	// fdivs f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 / f0.f64));
	// fmuls f12,f0,f13
	ctx.f12.f64 = double(float(f0.f64 * ctx.f13.f64));
loc_820E7C50:
	// lfs f0,212(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 212);
	f0.f64 = double(temp.f32);
	// fadds f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 + f0.f64));
	// stfs f0,212(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 212, temp.u32);
	// fcmpu cr6,f0,f17
	cr6.compare(f0.f64, f17.f64);
	// blt cr6,0x820e7ca8
	if (cr6.getLT()) goto loc_820E7CA8;
	// li r3,14
	ctx.r3.s64 = 14;
	// lfs f31,144(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 144);
	f31.f64 = double(temp.f32);
	// bl 0x820a10a0
	sub_820A10A0(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// li r5,-1
	ctx.r5.s64 = -1;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// li r6,1
	ctx.r6.s64 = 1;
	// lfs f0,19420(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 19420);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f1,f0
	ctx.f13.f64 = double(float(ctx.f1.f64 * f0.f64));
	// lfs f0,17872(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17872);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x820bf428
	sub_820BF428(ctx, base);
	// stfs f21,212(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r30.u32 + 212, temp.u32);
	// bl 0x820b3ca8
	sub_820B3CA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e7cd8
	if (!cr6.getEQ()) goto loc_820E7CD8;
loc_820E7CA8:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x820e7cc4
	if (cr6.getEQ()) goto loc_820E7CC4;
	// li r4,1
	ctx.r4.s64 = 1;
	// lbz r6,3(r27)
	ctx.r6.u64 = PPC_LOAD_U8(r27.u32 + 3);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8213d980
	sub_8213D980(ctx, base);
loc_820E7CC4:
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// li r3,14
	ctx.r3.s64 = 14;
	// bl 0x820a3fc0
	sub_820A3FC0(ctx, base);
	// b 0x820e7d00
	goto loc_820E7D00;
loc_820E7CD8:
	// lfs f0,12(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 12);
	f0.f64 = double(temp.f32);
	// li r5,-1
	ctx.r5.s64 = -1;
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lfs f0,16(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 16);
	f0.f64 = double(temp.f32);
	// li r3,14
	ctx.r3.s64 = 14;
	// stfs f0,116(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// lfs f0,20(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// bl 0x820a3c20
	sub_820A3C20(ctx, base);
loc_820E7D00:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820e7e38
	if (cr6.getEQ()) goto loc_820E7E38;
	// lwz r31,204(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 204);
	// lfs f0,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// lfs f0,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// lfs f0,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	f0.f64 = double(temp.f32);
	// stfs f0,12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// lfs f0,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f0.f64 = double(temp.f32);
	// lfs f13,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,16(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// lfs f0,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	f0.f64 = double(temp.f32);
	// lfs f13,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,20(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// lfs f11,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f11.f64 = double(temp.f32);
	// lfs f13,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// lfs f10,14056(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14056);
	ctx.f10.f64 = double(temp.f32);
	// fmr f12,f0
	ctx.f12.f64 = f0.f64;
	// lfs f0,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	f0.f64 = double(temp.f32);
	// fsubs f0,f11,f0
	f0.f64 = double(float(ctx.f11.f64 - f0.f64));
	// stfs f0,24(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
	// fmuls f11,f12,f12
	ctx.f11.f64 = double(float(ctx.f12.f64 * ctx.f12.f64));
	// fmr f9,f0
	ctx.f9.f64 = f0.f64;
	// fmadds f11,f13,f13,f11
	ctx.f11.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + ctx.f11.f64));
	// fmadds f0,f0,f0,f11
	f0.f64 = double(float(f0.f64 * f0.f64 + ctx.f11.f64));
	// fsqrts f0,f0
	f0.f64 = double(float(sqrt(f0.f64)));
	// fdivs f11,f17,f0
	ctx.f11.f64 = double(float(f17.f64 / f0.f64));
	// fcmpu cr6,f0,f10
	cr6.compare(f0.f64, ctx.f10.f64);
	// fmuls f13,f11,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f13.f64));
	// stfs f13,16(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// fmuls f13,f11,f12
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f12.f64));
	// stfs f13,20(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// fmuls f13,f11,f9
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f9.f64));
	// stfs f13,24(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
	// ble cr6,0x820e7da0
	if (!cr6.getGT()) goto loc_820E7DA0;
	// fmr f0,f10
	f0.f64 = ctx.f10.f64;
loc_820E7DA0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f0,28(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 28, temp.u32);
	// li r10,14
	ctx.r10.s64 = 14;
	// lfs f13,14052(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14052);
	ctx.f13.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// stb r10,1(r31)
	PPC_STORE_U8(r31.u32 + 1, ctx.r10.u8);
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// bge cr6,0x820e7dc8
	if (!cr6.getLT()) goto loc_820E7DC8;
	// fmr f0,f13
	f0.f64 = ctx.f13.f64;
loc_820E7DC8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,12892(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12892);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// lfs f13,216(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	ctx.f13.f64 = double(temp.f32);
	// stfs f0,32(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 32, temp.u32);
	// stfs f0,36(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 36, temp.u32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820e7dec
	if (!cr6.getGT()) goto loc_820E7DEC;
	// stfs f13,36(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 36, temp.u32);
loc_820E7DEC:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lfs f12,192(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	ctx.f12.f64 = double(temp.f32);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// lfs f0,32(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 32);
	f0.f64 = double(temp.f32);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f13,216(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64));
	// lfs f12,188(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	ctx.f12.f64 = double(temp.f32);
	// fmsubs f13,f13,f12,f17
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 - f17.f64));
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,40(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 40, temp.u32);
	// b 0x820e7e38
	goto loc_820E7E38;
loc_820E7E34:
	// lwz r23,128(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
loc_820E7E38:
	// lwz r11,8(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e7e5c
	if (cr6.getEQ()) goto loc_820E7E5C;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// sth r25,0(r3)
	PPC_STORE_U16(ctx.r3.u32 + 0, r25.u16);
loc_820E7E5C:
	// lwz r11,8(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820e7e80
	if (cr6.getEQ()) goto loc_820E7E80;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// sth r24,0(r3)
	PPC_STORE_U16(ctx.r3.u32 + 0, r24.u16);
loc_820E7E80:
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// bl 0x820e09b0
	sub_820E09B0(ctx, base);
loc_820E7E88:
	// lwz r3,196(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// cmpwi cr6,r3,5
	cr6.compare<int32_t>(ctx.r3.s32, 5, xer);
	// bne cr6,0x820e7e9c
	if (!cr6.getEQ()) goto loc_820E7E9C;
	// li r11,0
	r11.s64 = 0;
	// stw r11,24(r16)
	PPC_STORE_U32(r16.u32 + 24, r11.u32);
loc_820E7E9C:
	// addi r1,r1,848
	ctx.r1.s64 = ctx.r1.s64 + 848;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed55c
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_820E7EB0"))) PPC_WEAK_FUNC(sub_820E7EB0);
PPC_FUNC_IMPL(__imp__sub_820E7EB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// rlwinm r10,r30,17,0,14
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 17) & 0xFFFE0000;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// lwz r11,8(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// lwz r9,100(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// rlwinm r9,r9,0,15,12
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFFFFF9FFFF;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rlwinm r9,r10,0,12,12
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r10,100(r11)
	PPC_STORE_U32(r11.u32 + 100, ctx.r10.u32);
	// bne cr6,0x820e7f40
	if (!cr6.getEQ()) goto loc_820E7F40;
	// lwz r3,36(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 36);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820e7f28
	if (cr6.getEQ()) goto loc_820E7F28;
loc_820E7F04:
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// lwz r31,40(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x820e7eb0
	sub_820E7EB0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820e7f04
	if (!cr6.getEQ()) goto loc_820E7F04;
loc_820E7F28:
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// lwz r3,8(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x820e3598
	sub_820E3598(ctx, base);
loc_820E7F40:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820E7F50"))) PPC_WEAK_FUNC(sub_820E7F50);
PPC_FUNC_IMPL(__imp__sub_820E7F50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// rlwinm r11,r11,0,17,17
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bnelr cr6
	if (!cr6.getEQ()) return;
	// b 0x820e3598
	sub_820E3598(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820E7F64"))) PPC_WEAK_FUNC(sub_820E7F64);
PPC_FUNC_IMPL(__imp__sub_820E7F64) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E7F68"))) PPC_WEAK_FUNC(sub_820E7F68);
PPC_FUNC_IMPL(__imp__sub_820E7F68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -88, f31.u64);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mr r30,r10
	r30.u64 = ctx.r10.u64;
	// lwz r11,32(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e7fa4
	if (cr6.getEQ()) goto loc_820E7FA4;
loc_820E7F94:
	// mr r30,r11
	r30.u64 = r11.u64;
	// lwz r11,32(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e7f94
	if (!cr6.getEQ()) goto loc_820E7F94;
loc_820E7FA4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f9,8(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 8);
	ctx.f9.f64 = double(temp.f32);
	// lwz r27,8(r10)
	r27.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lfs f13,20(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f9,f9,f0
	ctx.f9.f64 = double(float(ctx.f9.f64 - f0.f64));
	// lfs f11,16(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 16);
	ctx.f11.f64 = double(temp.f32);
	// addi r23,r26,12
	r23.s64 = r26.s64 + 12;
	// lfs f12,12(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// addi r29,r1,88
	r29.s64 = ctx.r1.s64 + 88;
	// lfs f31,16152(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16152);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f8,0(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 0);
	ctx.f8.f64 = double(temp.f32);
	// lfs f7,4(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 4);
	ctx.f7.f64 = double(temp.f32);
	// lfs f10,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f10.f64 = double(temp.f32);
	// fdivs f10,f10,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 / ctx.f13.f64));
	// fnmsubs f13,f13,f31,f9
	ctx.f13.f64 = double(float(-(ctx.f13.f64 * f31.f64 - ctx.f9.f64)));
	// stfs f13,96(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// fmuls f13,f10,f0
	ctx.f13.f64 = double(float(ctx.f10.f64 * f0.f64));
	// fmuls f10,f11,f10
	ctx.f10.f64 = double(float(ctx.f11.f64 * ctx.f10.f64));
	// fnmsubs f13,f13,f12,f8
	ctx.f13.f64 = double(float(-(ctx.f13.f64 * ctx.f12.f64 - ctx.f8.f64)));
	// fnmsubs f0,f10,f0,f7
	f0.f64 = double(float(-(ctx.f10.f64 * f0.f64 - ctx.f7.f64)));
	// fnmsubs f13,f12,f31,f13
	ctx.f13.f64 = double(float(-(ctx.f12.f64 * f31.f64 - ctx.f13.f64)));
	// stfs f13,88(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// fnmsubs f0,f11,f31,f0
	f0.f64 = double(float(-(ctx.f11.f64 * f31.f64 - f0.f64)));
	// stfs f0,92(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// bl 0x8210d870
	sub_8210D870(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x8210b6e0
	sub_8210B6E0(ctx, base);
	// lwz r11,60(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e802c
	if (cr6.getEQ()) goto loc_820E802C;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x820a4540
	sub_820A4540(ctx, base);
loc_820E802C:
	// lwz r11,24(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// bl 0x8213d980
	sub_8213D980(ctx, base);
	// lbz r11,2(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8078
	if (cr6.getEQ()) goto loc_820E8078;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e80a0
	if (!cr6.getEQ()) goto loc_820E80A0;
loc_820E8078:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820dae70
	sub_820DAE70(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e80a0
	if (cr6.getEQ()) goto loc_820E80A0;
	// lwz r11,60(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e80a0
	if (cr6.getEQ()) goto loc_820E80A0;
	// li r4,6
	ctx.r4.s64 = 6;
	// lwz r3,24(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// bl 0x820a6610
	sub_820A6610(ctx, base);
loc_820E80A0:
	// lwz r11,60(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e80bc
	if (!cr6.getEQ()) goto loc_820E80BC;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r3,r11,12
	ctx.r3.s64 = r11.s64 + 12;
	// bl 0x820a3f30
	sub_820A3F30(ctx, base);
	// b 0x820e80d0
	goto loc_820E80D0;
loc_820E80BC:
	// lhz r11,42(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 42);
	// lwz r4,4(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// extsh r5,r11
	ctx.r5.s64 = r11.s16;
	// lwz r3,24(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// bl 0x820a3c20
	sub_820A3C20(ctx, base);
loc_820E80D0:
	// lwz r11,24(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// cmpwi cr6,r11,23
	cr6.compare<int32_t>(r11.s32, 23, xer);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r25,r11,3568
	r25.s64 = r11.s64 + 3568;
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r24,r11,3540
	r24.s64 = r11.s64 + 3540;
	// beq cr6,0x820e8204
	if (cr6.getEQ()) goto loc_820E8204;
	// lwz r11,60(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e815c
	if (!cr6.getEQ()) goto loc_820E815C;
	// lwz r11,20(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// li r29,0
	r29.s64 = 0;
	// lwz r28,4(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r11,r25
	cr6.compare<uint32_t>(r11.u32, r25.u32, xer);
	// bne cr6,0x820e8118
	if (!cr6.getEQ()) goto loc_820E8118;
	// li r29,1
	r29.s64 = 1;
loc_820E8118:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-21846
	ctx.r10.s64 = -1431699456;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// ori r10,r10,43691
	ctx.r10.u64 = ctx.r10.u64 | 43691;
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r5,r10,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r5
	ctx.r10.u64 = ctx.r10.u64 + ctx.r5.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// extsh r5,r11
	ctx.r5.s64 = r11.s16;
	// b 0x820e81ec
	goto loc_820E81EC;
loc_820E815C:
	// lis r11,-32033
	r11.s64 = -2099314688;
	// li r28,0
	r28.s64 = 0;
	// lwz r29,-5072(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + -5072);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lhz r9,10(r29)
	ctx.r9.u64 = PPC_LOAD_U16(r29.u32 + 10);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// divwu r8,r11,r9
	ctx.r8.u32 = r11.u32 / ctx.r9.u32;
	// twllei r9,0
	// mullw r8,r8,r9
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r9.s32);
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// cmplw cr6,r9,r25
	cr6.compare<uint32_t>(ctx.r9.u32, r25.u32, xer);
	// bne cr6,0x820e81bc
	if (!cr6.getEQ()) goto loc_820E81BC;
	// lwz r8,8(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r7,52(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// lwz r8,12(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 12);
	// cmplw cr6,r7,r8
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r8.u32, xer);
	// beq cr6,0x820e81d8
	if (cr6.getEQ()) goto loc_820E81D8;
loc_820E81BC:
	// cmplw cr6,r9,r24
	cr6.compare<uint32_t>(ctx.r9.u32, r24.u32, xer);
	// bne cr6,0x820e81dc
	if (!cr6.getEQ()) goto loc_820E81DC;
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r9,52(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// bne cr6,0x820e81dc
	if (!cr6.getEQ()) goto loc_820E81DC;
loc_820E81D8:
	// li r28,1
	r28.s64 = 1;
loc_820E81DC:
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// lwz r7,4(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lbzx r5,r10,r11
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
loc_820E81EC:
	// lwz r8,48(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r31,28
	ctx.r4.s64 = r31.s64 + 28;
	// extsb r8,r8
	ctx.r8.s64 = ctx.r8.s8;
	// addi r3,r31,16
	ctx.r3.s64 = r31.s64 + 16;
	// bl 0x82141a98
	sub_82141A98(ctx, base);
loc_820E8204:
	// lwz r3,24(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// bl 0x820a10a0
	sub_820A10A0(ctx, base);
	// lbz r11,3(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 3);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// cmplwi cr6,r11,13
	cr6.compare<uint32_t>(r11.u32, 13, xer);
	// bne cr6,0x820e8228
	if (!cr6.getEQ()) goto loc_820E8228;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f0,19424(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 19424);
	f0.f64 = double(temp.f32);
	// b 0x820e826c
	goto loc_820E826C;
loc_820E8228:
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// bne cr6,0x820e8270
	if (!cr6.getEQ()) goto loc_820E8270;
	// lwz r11,20(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r10,r24
	cr6.compare<uint32_t>(ctx.r10.u32, r24.u32, xer);
	// bne cr6,0x820e8264
	if (!cr6.getEQ()) goto loc_820E8264;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,52(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x820e8264
	if (!cr6.getEQ()) goto loc_820E8264;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2944(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	f0.f64 = double(temp.f32);
	// fmuls f31,f31,f0
	f31.f64 = double(float(f31.f64 * f0.f64));
loc_820E8264:
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f0,19412(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 19412);
	f0.f64 = double(temp.f32);
loc_820E826C:
	// fmuls f31,f0,f31
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(f0.f64 * f31.f64));
loc_820E8270:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// lwz r11,12(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 12);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// rlwinm r11,r11,0,17,17
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e829c
	if (!cr6.getEQ()) goto loc_820E829C;
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// lwz r6,24(r26)
	ctx.r6.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x820e3598
	sub_820E3598(ctx, base);
loc_820E829C:
	// lwz r11,20(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r11,r25
	cr6.compare<uint32_t>(r11.u32, r25.u32, xer);
	// bne cr6,0x820e82c8
	if (!cr6.getEQ()) goto loc_820E82C8;
	// lwz r11,60(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820e82c8
	if (!cr6.getEQ()) goto loc_820E82C8;
	// lbz r11,189(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 189);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stb r11,189(r27)
	PPC_STORE_U8(r27.u32 + 189, r11.u8);
loc_820E82C8:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x820e09b0
	sub_820E09B0(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// li r31,0
	r31.s64 = 0;
	// bl 0x820dadf0
	sub_820DADF0(ctx, base);
	// lwz r11,8(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e82f8
	if (cr6.getEQ()) goto loc_820E82F8;
	// rlwinm r11,r11,0,9,9
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x400000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e8308
	if (!cr6.getEQ()) goto loc_820E8308;
	// b 0x820e8304
	goto loc_820E8304;
loc_820E82F8:
	// rlwinm r11,r11,0,10,10
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8308
	if (cr6.getEQ()) goto loc_820E8308;
loc_820E8304:
	// li r31,1
	r31.s64 = 1;
loc_820E8308:
	// lwz r10,12(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 12);
	// rlwinm r11,r10,0,30,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8350
	if (cr6.getEQ()) goto loc_820E8350;
	// lbz r11,2(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 2);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8350
	if (cr6.getEQ()) goto loc_820E8350;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,112(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 112);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e8350
	if (cr6.getEQ()) goto loc_820E8350;
	// li r31,1
	r31.s64 = 1;
loc_820E8350:
	// rlwinm r11,r10,0,21,21
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8360
	if (cr6.getEQ()) goto loc_820E8360;
	// li r31,0
	r31.s64 = 0;
loc_820E8360:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e837c
	if (cr6.getEQ()) goto loc_820E837C;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e8390
	if (!cr6.getEQ()) goto loc_820E8390;
loc_820E837C:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x820e8390
	if (cr6.getEQ()) goto loc_820E8390;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820e0bc0
	sub_820E0BC0(ctx, base);
loc_820E8390:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_820E83A0"))) PPC_WEAK_FUNC(sub_820E83A0);
PPC_FUNC_IMPL(__imp__sub_820E83A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820df548
	sub_820DF548(ctx, base);
	// bl 0x820df668
	sub_820DF668(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E83C8"))) PPC_WEAK_FUNC(sub_820E83C8);
PPC_FUNC_IMPL(__imp__sub_820E83C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r10,17296(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 17296);
	// stw r10,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r10.u32);
	// stw r3,17296(r11)
	PPC_STORE_U32(r11.u32 + 17296, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E83E0"))) PPC_WEAK_FUNC(sub_820E83E0);
PPC_FUNC_IMPL(__imp__sub_820E83E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r10,17300(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 17300);
	// stw r10,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r10.u32);
	// stw r3,17300(r11)
	PPC_STORE_U32(r11.u32 + 17300, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E83F8"))) PPC_WEAK_FUNC(sub_820E83F8);
PPC_FUNC_IMPL(__imp__sub_820E83F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r10,17304(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 17304);
	// stw r10,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r10.u32);
	// stw r3,17304(r11)
	PPC_STORE_U32(r11.u32 + 17304, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E8410"))) PPC_WEAK_FUNC(sub_820E8410);
PPC_FUNC_IMPL(__imp__sub_820E8410) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f29.u64);
	// stfd f30,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, f30.u64);
	// stfd f31,-40(r1)
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r3,r11,5416
	ctx.r3.s64 = r11.s64 + 5416;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f31.f64 = double(temp.f32);
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// li r31,255
	r31.s64 = 255;
	// stfs f31,92(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// addi r10,r10,19432
	ctx.r10.s64 = ctx.r10.s64 + 19432;
	// lfs f30,2776(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2776);
	f30.f64 = double(temp.f32);
	// li r30,0
	r30.s64 = 0;
	// stfs f30,96(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// li r29,-1
	r29.s64 = -1;
	// lfs f29,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f29.f64 = double(temp.f32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stfs f31,100(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// li r5,116
	ctx.r5.s64 = 116;
	// stfs f31,104(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// stfs f30,108(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stfs f30,112(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// sth r30,84(r1)
	PPC_STORE_U16(ctx.r1.u32 + 84, r30.u16);
	// stfs f30,116(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// sth r29,86(r1)
	PPC_STORE_U16(ctx.r1.u32 + 86, r29.u16);
	// stfs f31,120(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r30.u32);
	// stfs f31,124(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, r31.u8);
	// stfs f30,128(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, r31.u8);
	// stfs f30,132(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, r31.u8);
	// stfs f29,136(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, r31.u8);
	// stfs f31,140(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, r31.u8);
	// stfs f31,144(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, r31.u8);
	// stfs f29,148(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, r31.u8);
	// stfs f29,152(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, r31.u8);
	// stfs f29,156(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 156, temp.u32);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, r31.u8);
	// stfs f31,160(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// stb r31,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, r31.u8);
	// stfs f31,164(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// stb r31,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, r31.u8);
	// stfs f29,168(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// stb r31,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, r31.u8);
	// stfs f29,172(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 172, temp.u32);
	// stfs f30,188(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 188, temp.u32);
	// stfs f31,192(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// stfs f31,92(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stfs f30,96(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// sth r30,84(r1)
	PPC_STORE_U16(ctx.r1.u32 + 84, r30.u16);
	// addi r11,r11,24448
	r11.s64 = r11.s64 + 24448;
	// stfs f31,100(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stfs f31,104(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// sth r29,86(r1)
	PPC_STORE_U16(ctx.r1.u32 + 86, r29.u16);
	// stfs f30,108(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r30.u32);
	// stfs f30,112(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, r31.u8);
	// stfs f30,116(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, r31.u8);
	// stfs f31,120(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// stfs f31,124(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, r31.u8);
	// stfs f30,128(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, r31.u8);
	// stfs f30,132(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, r31.u8);
	// stfs f29,136(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, r31.u8);
	// stfs f31,140(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, r31.u8);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// stfs f31,144(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stfs f29,148(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// addi r3,r11,5544
	ctx.r3.s64 = r11.s64 + 5544;
	// stfs f29,152(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// li r5,116
	ctx.r5.s64 = 116;
	// stfs f29,156(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 156, temp.u32);
	// stfs f31,160(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, r31.u8);
	// stfs f31,164(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, r31.u8);
	// stfs f29,168(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// stb r31,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, r31.u8);
	// stfs f29,172(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 172, temp.u32);
	// stb r31,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, r31.u8);
	// stfs f30,188(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 188, temp.u32);
	// stb r31,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, r31.u8);
	// stfs f31,192(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// stfs f31,92(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// stfs f30,96(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// addi r10,r10,24520
	ctx.r10.s64 = ctx.r10.s64 + 24520;
	// stfs f31,100(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// addi r3,r11,5288
	ctx.r3.s64 = r11.s64 + 5288;
	// stfs f31,104(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stfs f30,108(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// li r5,116
	ctx.r5.s64 = 116;
	// stfs f30,112(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// stfs f30,116(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// sth r30,84(r1)
	PPC_STORE_U16(ctx.r1.u32 + 84, r30.u16);
	// stfs f31,120(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stfs f31,124(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// sth r29,86(r1)
	PPC_STORE_U16(ctx.r1.u32 + 86, r29.u16);
	// stfs f30,128(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r30.u32);
	// stfs f30,132(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, r31.u8);
	// stfs f29,136(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, r31.u8);
	// stfs f31,140(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, r31.u8);
	// stfs f31,144(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, r31.u8);
	// stfs f29,148(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, r31.u8);
	// stfs f29,152(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, r31.u8);
	// stfs f29,156(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 156, temp.u32);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, r31.u8);
	// stfs f31,160(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, r31.u8);
	// stfs f31,164(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, r31.u8);
	// stfs f29,168(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// stb r31,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, r31.u8);
	// stfs f29,172(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 172, temp.u32);
	// stb r31,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, r31.u8);
	// stfs f30,188(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 188, temp.u32);
	// stb r31,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, r31.u8);
	// stfs f31,192(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f30,-48(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820E8688"))) PPC_WEAK_FUNC(sub_820E8688);
PPC_FUNC_IMPL(__imp__sub_820E8688) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820e8410
	sub_820E8410(ctx, base);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r11,r11,2288
	r11.s64 = r11.s64 + 2288;
	// li r10,30
	ctx.r10.s64 = 30;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_820E86AC:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x820e86ac
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820E86AC;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lis r8,-32013
	ctx.r8.s64 = -2098003968;
	// addi r10,r11,5664
	ctx.r10.s64 = r11.s64 + 5664;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// stw r11,17236(r8)
	PPC_STORE_U32(ctx.r8.u32 + 17236, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r8,-32013
	ctx.r8.s64 = -2098003968;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// stw r9,17240(r8)
	PPC_STORE_U32(ctx.r8.u32 + 17240, ctx.r9.u32);
	// lis r8,-32013
	ctx.r8.s64 = -2098003968;
	// stfs f0,17244(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 17244, temp.u32);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// stw r9,17248(r8)
	PPC_STORE_U32(ctx.r8.u32 + 17248, ctx.r9.u32);
	// lis r8,-32013
	ctx.r8.s64 = -2098003968;
	// addi r11,r11,17252
	r11.s64 = r11.s64 + 17252;
	// stfs f0,0(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// stfs f0,4(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// stw r11,17264(r8)
	PPC_STORE_U32(ctx.r8.u32 + 17264, r11.u32);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lis r8,-32013
	ctx.r8.s64 = -2098003968;
	// stfs f0,17268(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 17268, temp.u32);
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// stw r11,17272(r8)
	PPC_STORE_U32(ctx.r8.u32 + 17272, r11.u32);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lis r8,-32190
	ctx.r8.s64 = -2109603840;
	// stfs f0,17280(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 17280, temp.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r11,19400(r8)
	PPC_STORE_U32(ctx.r8.u32 + 19400, r11.u32);
	// lis r8,-32013
	ctx.r8.s64 = -2098003968;
	// stw r9,17276(r8)
	PPC_STORE_U32(ctx.r8.u32 + 17276, ctx.r9.u32);
	// lis r8,-32013
	ctx.r8.s64 = -2098003968;
	// stw r9,17284(r8)
	PPC_STORE_U32(ctx.r8.u32 + 17284, ctx.r9.u32);
	// addi r8,r10,16
	ctx.r8.s64 = ctx.r10.s64 + 16;
loc_820E8748:
	// stw r9,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r9.u32);
	// addi r7,r10,4216
	ctx.r7.s64 = ctx.r10.s64 + 4216;
	// addi r8,r8,140
	ctx.r8.s64 = ctx.r8.s64 + 140;
	// cmpw cr6,r8,r7
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r7.s32, xer);
	// blt cr6,0x820e8748
	if (cr6.getLT()) goto loc_820E8748;
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// lis r7,-32013
	ctx.r7.s64 = -2098003968;
	// addi r8,r10,1008
	ctx.r8.s64 = ctx.r10.s64 + 1008;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// stw r10,17288(r7)
	PPC_STORE_U32(ctx.r7.u32 + 17288, ctx.r10.u32);
	// addi r10,r8,16
	ctx.r10.s64 = ctx.r8.s64 + 16;
loc_820E8774:
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r7,r8,1296
	ctx.r7.s64 = ctx.r8.s64 + 1296;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// cmpw cr6,r10,r7
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r7.s32, xer);
	// blt cr6,0x820e8774
	if (cr6.getLT()) goto loc_820E8774;
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// lis r7,-32013
	ctx.r7.s64 = -2098003968;
	// addi r8,r10,9864
	ctx.r8.s64 = ctx.r10.s64 + 9864;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// stw r10,17292(r7)
	PPC_STORE_U32(ctx.r7.u32 + 17292, ctx.r10.u32);
	// addi r10,r8,16
	ctx.r10.s64 = ctx.r8.s64 + 16;
loc_820E87A0:
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r7,r8,2656
	ctx.r7.s64 = ctx.r8.s64 + 2656;
	// addi r10,r10,132
	ctx.r10.s64 = ctx.r10.s64 + 132;
	// cmpw cr6,r10,r7
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r7.s32, xer);
	// blt cr6,0x820e87a0
	if (cr6.getLT()) goto loc_820E87A0;
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// lis r8,-32768
	ctx.r8.s64 = -2147483648;
	// addi r7,r10,12512
	ctx.r7.s64 = ctx.r10.s64 + 12512;
	// addi r10,r7,152
	ctx.r10.s64 = ctx.r7.s64 + 152;
loc_820E87C4:
	// stw r8,-152(r10)
	PPC_STORE_U32(ctx.r10.u32 + -152, ctx.r8.u32);
	// addi r6,r7,4872
	ctx.r6.s64 = ctx.r7.s64 + 4872;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// addi r10,r10,236
	ctx.r10.s64 = ctx.r10.s64 + 236;
	// cmpw cr6,r10,r6
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r6.s32, xer);
	// blt cr6,0x820e87c4
	if (cr6.getLT()) goto loc_820E87C4;
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// addi r8,r10,2408
	ctx.r8.s64 = ctx.r10.s64 + 2408;
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
loc_820E87EC:
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// addi r7,r8,2880
	ctx.r7.s64 = ctx.r8.s64 + 2880;
	// addi r10,r10,72
	ctx.r10.s64 = ctx.r10.s64 + 72;
	// cmpw cr6,r10,r7
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r7.s32, xer);
	// blt cr6,0x820e87ec
	if (cr6.getLT()) goto loc_820E87EC;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// stw r11,17296(r10)
	PPC_STORE_U32(ctx.r10.u32 + 17296, r11.u32);
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// stw r11,17300(r10)
	PPC_STORE_U32(ctx.r10.u32 + 17300, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// lfs f0,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// stfs f0,19408(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 19408, temp.u32);
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// stw r11,17304(r10)
	PPC_STORE_U32(ctx.r10.u32 + 17304, r11.u32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// stfs f0,19412(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 19412, temp.u32);
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// stw r11,17308(r10)
	PPC_STORE_U32(ctx.r10.u32 + 17308, r11.u32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// stfs f0,19416(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 19416, temp.u32);
	// li r11,-1
	r11.s64 = -1;
	// stw r11,19404(r10)
	PPC_STORE_U32(ctx.r10.u32 + 19404, r11.u32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// stfs f0,19420(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 19420, temp.u32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// stfs f0,19424(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 19424, temp.u32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// stfs f0,19428(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 19428, temp.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E8880"))) PPC_WEAK_FUNC(sub_820E8880);
PPC_FUNC_IMPL(__imp__sub_820E8880) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// lfs f8,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f8.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,15676(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15676);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f1,f13
	cr6.compare(ctx.f1.f64, ctx.f13.f64);
	// lfs f5,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f5.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,2952
	r11.s64 = r11.s64 + 2952;
	// lfs f0,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// bge cr6,0x820e88c8
	if (!cr6.getLT()) goto loc_820E88C8;
	// fadds f6,f1,f0
	ctx.f6.f64 = double(float(ctx.f1.f64 + f0.f64));
	// b 0x820e88dc
	goto loc_820E88DC;
loc_820E88C8:
	// fcmpu cr6,f1,f0
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f0.f64);
	// ble cr6,0x820e88d8
	if (!cr6.getGT()) goto loc_820E88D8;
	// fsubs f6,f1,f0
	ctx.f6.f64 = double(float(ctx.f1.f64 - f0.f64));
	// b 0x820e88dc
	goto loc_820E88DC;
loc_820E88D8:
	// fmr f6,f5
	ctx.fpscr.disableFlushMode();
	ctx.f6.f64 = ctx.f5.f64;
loc_820E88DC:
	// fcmpu cr6,f2,f13
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f2.f64, ctx.f13.f64);
	// bge cr6,0x820e88ec
	if (!cr6.getLT()) goto loc_820E88EC;
	// fadds f10,f2,f0
	ctx.f10.f64 = double(float(ctx.f2.f64 + f0.f64));
	// b 0x820e8900
	goto loc_820E8900;
loc_820E88EC:
	// fcmpu cr6,f2,f0
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f2.f64, f0.f64);
	// ble cr6,0x820e88fc
	if (!cr6.getGT()) goto loc_820E88FC;
	// fsubs f10,f2,f0
	ctx.f10.f64 = double(float(ctx.f2.f64 - f0.f64));
	// b 0x820e8900
	goto loc_820E8900;
loc_820E88FC:
	// fmr f10,f5
	ctx.fpscr.disableFlushMode();
	ctx.f10.f64 = ctx.f5.f64;
loc_820E8900:
	// rlwinm r11,r29,0,26,27
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x30;
	// lis r28,-32011
	r28.s64 = -2097872896;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32011
	r11.s64 = -2097872896;
	// addi r31,r11,-29676
	r31.s64 = r11.s64 + -29676;
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r30,r11,4368
	r30.s64 = r11.s64 + 4368;
	// bne cr6,0x820e8a90
	if (!cr6.getEQ()) goto loc_820E8A90;
	// rlwinm r11,r29,0,18,18
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8934
	if (cr6.getEQ()) goto loc_820E8934;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f8,12892(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12892);
	ctx.f8.f64 = double(temp.f32);
loc_820E8934:
	// lwz r11,-29644(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -29644);
	// lis r9,-32164
	ctx.r9.s64 = -2107899904;
	// andc r10,r29,r11
	ctx.r10.u64 = r29.u64 & ~r11.u64;
	// rlwinm r11,r10,0,16,16
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x8000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f7,3060(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	ctx.f7.f64 = double(temp.f32);
	// beq cr6,0x820e8964
	if (cr6.getEQ()) goto loc_820E8964;
	// lfs f0,4412(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 4412);
	f0.f64 = double(temp.f32);
	// fmuls f9,f0,f7
	ctx.f9.f64 = double(float(f0.f64 * ctx.f7.f64));
	// stfs f9,4412(r9)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r9.u32 + 4412, temp.u32);
	// b 0x820e8968
	goto loc_820E8968;
loc_820E8964:
	// lfs f9,4412(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 4412);
	ctx.f9.f64 = double(temp.f32);
loc_820E8968:
	// rlwinm r11,r10,0,17,17
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x4000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8984
	if (cr6.getEQ()) goto loc_820E8984;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f0.f64 = double(temp.f32);
	// fmuls f9,f9,f0
	ctx.f9.f64 = double(float(ctx.f9.f64 * f0.f64));
	// stfs f9,4412(r9)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r9.u32 + 4412, temp.u32);
loc_820E8984:
	// lis r11,-32164
	r11.s64 = -2107899904;
	// lfs f0,4408(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4408);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f9,f0
	cr6.compare(ctx.f9.f64, f0.f64);
	// ble cr6,0x820e899c
	if (!cr6.getGT()) goto loc_820E899C;
	// fmr f9,f0
	ctx.f9.f64 = f0.f64;
	// stfs f9,4412(r9)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r9.u32 + 4412, temp.u32);
loc_820E899C:
	// lfs f0,20(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	f0.f64 = double(temp.f32);
	// andi. r11,r29,514
	r11.u64 = r29.u64 & 514;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// fmuls f13,f0,f9
	ctx.f13.f64 = double(float(f0.f64 * ctx.f9.f64));
	// lfs f0,24(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 24);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f9
	f0.f64 = double(float(f0.f64 * ctx.f9.f64));
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f12,f13,f8
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f8.f64));
	// fmuls f11,f0,f8
	ctx.f11.f64 = double(float(f0.f64 * ctx.f8.f64));
	// lfs f0,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	f0.f64 = double(temp.f32);
	// fmadds f0,f12,f10,f0
	f0.f64 = double(float(ctx.f12.f64 * ctx.f10.f64 + f0.f64));
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// lfs f13,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f13,f11,f10,f13
	ctx.f13.f64 = double(float(-(ctx.f11.f64 * ctx.f10.f64 - ctx.f13.f64)));
	// lfs f10,2948(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2948);
	ctx.f10.f64 = double(temp.f32);
	// stfs f13,12(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// beq cr6,0x820e89f0
	if (cr6.getEQ()) goto loc_820E89F0;
	// fnmsubs f0,f11,f10,f0
	f0.f64 = double(float(-(ctx.f11.f64 * ctx.f10.f64 - f0.f64)));
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// fnmsubs f13,f12,f10,f13
	ctx.f13.f64 = double(float(-(ctx.f12.f64 * ctx.f10.f64 - ctx.f13.f64)));
	// stfs f13,12(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
loc_820E89F0:
	// andi. r11,r29,257
	r11.u64 = r29.u64 & 257;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8a0c
	if (cr6.getEQ()) goto loc_820E8A0C;
	// fmadds f0,f11,f10,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 * ctx.f10.f64 + f0.f64));
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// fmadds f0,f12,f10,f13
	f0.f64 = double(float(ctx.f12.f64 * ctx.f10.f64 + ctx.f13.f64));
	// stfs f0,12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
loc_820E8A0C:
	// fmuls f12,f8,f6
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f8.f64 * ctx.f6.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// rlwinm r10,r29,0,20,20
	ctx.r10.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x800;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lfs f0,17872(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17872);
	f0.f64 = double(temp.f32);
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// stfs f0,16(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// beq cr6,0x820e8a40
	if (cr6.getEQ()) goto loc_820E8A40;
	// lfs f13,24(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f12,f8,f7,f13
	ctx.f12.f64 = double(float(-(ctx.f8.f64 * ctx.f7.f64 - ctx.f13.f64)));
	// stfs f12,24(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
	// b 0x820e8a44
	goto loc_820E8A44;
loc_820E8A40:
	// lfs f12,24(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	ctx.f12.f64 = double(temp.f32);
loc_820E8A44:
	// rlwinm r11,r29,0,21,21
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8a58
	if (cr6.getEQ()) goto loc_820E8A58;
	// fmadds f12,f8,f7,f12
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f8.f64 * ctx.f7.f64 + ctx.f12.f64));
	// stfs f12,24(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
loc_820E8A58:
	// rlwinm r11,r29,0,14,14
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x20000;
	// lfs f13,8(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8a74
	if (cr6.getEQ()) goto loc_820E8A74;
	// fmuls f11,f9,f8
	ctx.f11.f64 = double(float(ctx.f9.f64 * ctx.f8.f64));
	// fmadds f13,f11,f10,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f10.f64 + ctx.f13.f64));
	// stfs f13,8(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
loc_820E8A74:
	// rlwinm r11,r29,0,15,15
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x10000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8a98
	if (cr6.getEQ()) goto loc_820E8A98;
	// fmuls f11,f9,f8
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = double(float(ctx.f9.f64 * ctx.f8.f64));
	// fnmsubs f13,f11,f10,f13
	ctx.f13.f64 = double(float(-(ctx.f11.f64 * ctx.f10.f64 - ctx.f13.f64)));
	// stfs f13,8(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// b 0x820e8a98
	goto loc_820E8A98;
loc_820E8A90:
	// lfs f0,16(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	f0.f64 = double(temp.f32);
	// lfs f12,24(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	ctx.f12.f64 = double(temp.f32);
loc_820E8A98:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f0,f5
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f5.f64);
	// lfs f13,14020(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14020);
	ctx.f13.f64 = double(temp.f32);
	// bge cr6,0x820e8ab8
	if (!cr6.getLT()) goto loc_820E8AB8;
loc_820E8AA8:
	// fadds f0,f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// fcmpu cr6,f0,f5
	cr6.compare(f0.f64, ctx.f5.f64);
	// blt cr6,0x820e8aa8
	if (cr6.getLT()) goto loc_820E8AA8;
	// stfs f0,16(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
loc_820E8AB8:
	// fcmpu cr6,f0,f13
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820e8ad0
	if (cr6.getLT()) goto loc_820E8AD0;
loc_820E8AC0:
	// fsubs f0,f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820e8ac0
	if (!cr6.getLT()) goto loc_820E8AC0;
	// stfs f0,16(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
loc_820E8AD0:
	// fcmpu cr6,f12,f5
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f12.f64, ctx.f5.f64);
	// bge cr6,0x820e8ae8
	if (!cr6.getLT()) goto loc_820E8AE8;
loc_820E8AD8:
	// fadds f12,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// fcmpu cr6,f12,f5
	cr6.compare(ctx.f12.f64, ctx.f5.f64);
	// blt cr6,0x820e8ad8
	if (cr6.getLT()) goto loc_820E8AD8;
	// stfs f12,24(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
loc_820E8AE8:
	// fcmpu cr6,f12,f13
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// blt cr6,0x820e8b00
	if (cr6.getLT()) goto loc_820E8B00;
loc_820E8AF0:
	// fsubs f12,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// fcmpu cr6,f12,f13
	cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// bge cr6,0x820e8af0
	if (!cr6.getLT()) goto loc_820E8AF0;
	// stfs f12,24(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
loc_820E8B00:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,13980(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	f31.f64 = double(temp.f32);
	// fmuls f1,f0,f31
	ctx.f1.f64 = double(float(f0.f64 * f31.f64));
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lfs f0,16(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	f0.f64 = double(temp.f32);
	// frsp f13,f1
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// stfs f13,24(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 24, temp.u32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// lfs f0,24(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	f0.f64 = double(temp.f32);
	// frsp f13,f1
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// stfs f13,20(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lfs f0,24(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	f0.f64 = double(temp.f32);
	// frsp f13,f1
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// stfs f13,28(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 28, temp.u32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f10,f1
	ctx.fpscr.disableFlushMode();
	ctx.f10.f64 = ctx.f1.f64;
	// lfs f0,28(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 28);
	f0.f64 = double(temp.f32);
	// lfs f12,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 24);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f11,f0,f12
	ctx.f11.f64 = double(float(f0.f64 * ctx.f12.f64));
	// stfs f0,16(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 16, temp.u32);
	// fmuls f9,f0,f13
	ctx.f9.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f11,0(r30)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r30.u32 + 0, temp.u32);
	// stw r29,-29644(r28)
	PPC_STORE_U32(r28.u32 + -29644, r29.u32);
	// lfs f1,13960(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	ctx.f1.f64 = double(temp.f32);
	// frsp f0,f10
	f0.f64 = double(float(ctx.f10.f64));
	// stfs f0,4(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 4, temp.u32);
	// stfs f0,28(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 28, temp.u32);
	// fmuls f11,f0,f12
	ctx.f11.f64 = double(float(f0.f64 * ctx.f12.f64));
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f0,20(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 20, temp.u32);
	// fneg f12,f9
	ctx.f12.u64 = ctx.f9.u64 ^ 0x8000000000000000;
	// stfs f12,8(r30)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r30.u32 + 8, temp.u32);
	// fneg f0,f11
	f0.u64 = ctx.f11.u64 ^ 0x8000000000000000;
	// stfs f0,12(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 12, temp.u32);
	// bl 0x820c9c30
	sub_820C9C30(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bne cr6,0x820e8be0
	if (!cr6.getEQ()) goto loc_820E8BE0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0a80
	sub_820A0A80(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0a80
	sub_820A0A80(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820E8BE0:
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x820e8c08
	if (!cr6.getEQ()) goto loc_820E8C08;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8c08
	if (cr6.getEQ()) goto loc_820E8C08;
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e8c08
	if (cr6.getEQ()) goto loc_820E8C08;
	// bl 0x820b5a38
	sub_820B5A38(ctx, base);
loc_820E8C08:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820E8C18"))) PPC_WEAK_FUNC(sub_820E8C18);
PPC_FUNC_IMPL(__imp__sub_820E8C18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r4,r11,4368
	ctx.r4.s64 = r11.s64 + 4368;
	// lis r11,-32011
	r11.s64 = -2097872896;
	// addi r5,r4,12
	ctx.r5.s64 = ctx.r4.s64 + 12;
	// addi r3,r11,-29672
	ctx.r3.s64 = r11.s64 + -29672;
	// b 0x820be148
	sub_820BE148(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820E8C30"))) PPC_WEAK_FUNC(sub_820E8C30);
PPC_FUNC_IMPL(__imp__sub_820E8C30) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// fdivs f13,f0,f1
	ctx.f13.f64 = double(float(f0.f64 / ctx.f1.f64));
	// addi r11,r11,4404
	r11.s64 = r11.s64 + 4404;
	// lfs f0,-4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -4);
	f0.f64 = double(temp.f32);
	// stfs f13,0(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// stfs f1,-4(r11)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r11.u32 + -4, temp.u32);
	// lis r11,-32011
	r11.s64 = -2097872896;
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// addi r11,r11,-29672
	r11.s64 = r11.s64 + -29672;
	// lfs f13,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f13,0(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lfs f13,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f13,4(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lfs f13,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E8C88"))) PPC_WEAK_FUNC(sub_820E8C88);
PPC_FUNC_IMPL(__imp__sub_820E8C88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820b3dc0
	sub_820B3DC0(ctx, base);
	// lis r11,-32011
	r11.s64 = -2097872896;
	// li r10,0
	ctx.r10.s64 = 0;
	// lfs f0,0(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	f0.f64 = double(temp.f32);
	// addi r11,r11,-29676
	r11.s64 = r11.s64 + -29676;
	// stfs f0,4(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lfs f0,4(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// lfs f0,8(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,12(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E8CD0"))) PPC_WEAK_FUNC(sub_820E8CD0);
PPC_FUNC_IMPL(__imp__sub_820E8CD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed530
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// li r26,0
	r26.s64 = 0;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r27,r26
	r27.u64 = r26.u64;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// blt cr6,0x820e8f8c
	if (cr6.getLT()) goto loc_820E8F8C;
	// extsw r11,r25
	r11.s64 = r25.s32;
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f26,24480(r6)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 24480);
	f26.f64 = double(temp.f32);
	// lfs f27,24476(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 24476);
	f27.f64 = double(temp.f32);
	// li r30,255
	r30.s64 = 255;
	// lfs f30,2688(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 2688);
	f30.f64 = double(temp.f32);
	// lfs f23,24472(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 24472);
	f23.f64 = double(temp.f32);
	// lfs f24,15940(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15940);
	f24.f64 = double(temp.f32);
	// lfs f25,14032(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14032);
	f25.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f22,f0
	f22.f64 = double(float(f0.f64));
loc_820E8D48:
	// extsw r11,r27
	r11.s64 = r27.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f25
	f0.f64 = double(float(f0.f64 * f25.f64));
	// fdivs f31,f0,f22
	f31.f64 = double(float(f0.f64 / f22.f64));
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f29,f0,f24
	f29.f64 = double(float(f0.f64 * f24.f64));
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// stfs f29,0(r31)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// stfs f30,8(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// sth r26,12(r31)
	PPC_STORE_U16(r31.u32 + 12, r26.u16);
	// stfs f30,16(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// stb r30,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r30.u8);
	// stfs f30,20(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// stb r30,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r30.u8);
	// addi r28,r31,26
	r28.s64 = r31.s64 + 26;
	// stb r30,26(r31)
	PPC_STORE_U8(r31.u32 + 26, r30.u8);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// fmuls f0,f0,f23
	f0.f64 = double(float(f0.f64 * f23.f64));
	// fneg f28,f0
	f28.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f28,4(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// blt cr6,0x820e8dd4
	if (cr6.getLT()) goto loc_820E8DD4;
	// extsw r11,r29
	r11.s64 = r29.s32;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f0,88(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// b 0x820e8de4
	goto loc_820E8DE4;
loc_820E8DD4:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// fnmsubs f0,f0,f27,f26
	f0.f64 = double(float(-(f0.f64 * f27.f64 - f26.f64)));
loc_820E8DE4:
	// fctidz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, f0.u64);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// lbz r11,103(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 103);
	// stb r11,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r11.u8);
	// blt cr6,0x820e8e14
	if (cr6.getLT()) goto loc_820E8E14;
	// extsw r11,r29
	r11.s64 = r29.s32;
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, r11.u64);
	// lfd f0,104(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// b 0x820e8e24
	goto loc_820E8E24;
loc_820E8E14:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// fnmsubs f0,f0,f27,f26
	f0.f64 = double(float(-(f0.f64 * f27.f64 - f26.f64)));
loc_820E8E24:
	// fctidz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, f0.u64);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// lbz r11,103(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 103);
	// stb r11,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r11.u8);
	// blt cr6,0x820e8e54
	if (cr6.getLT()) goto loc_820E8E54;
	// extsw r11,r29
	r11.s64 = r29.s32;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// lfd f0,112(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// b 0x820e8e64
	goto loc_820E8E64;
loc_820E8E54:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// fnmsubs f0,f0,f27,f26
	f0.f64 = double(float(-(f0.f64 * f27.f64 - f26.f64)));
loc_820E8E64:
	// fctidz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, f0.u64);
	// stb r30,27(r31)
	PPC_STORE_U8(r31.u32 + 27, r30.u8);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// addi r31,r31,28
	r31.s64 = r31.s64 + 28;
	// lbz r11,103(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 103);
	// stb r11,0(r28)
	PPC_STORE_U8(r28.u32 + 0, r11.u8);
	// beq cr6,0x820e8f80
	if (cr6.getEQ()) goto loc_820E8F80;
	// cmpw cr6,r27,r25
	cr6.compare<int32_t>(r27.s32, r25.s32, xer);
	// bge cr6,0x820e8f80
	if (!cr6.getLT()) goto loc_820E8F80;
	// fneg f0,f29
	f0.u64 = f29.u64 ^ 0x8000000000000000;
	// stfs f28,4(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// stfs f0,0(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// sth r26,12(r31)
	PPC_STORE_U16(r31.u32 + 12, r26.u16);
	// stfs f30,8(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// stb r30,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r30.u8);
	// stfs f30,16(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// stb r30,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r30.u8);
	// stfs f30,20(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// addi r28,r31,26
	r28.s64 = r31.s64 + 26;
	// stb r30,26(r31)
	PPC_STORE_U8(r31.u32 + 26, r30.u8);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// blt cr6,0x820e8ed8
	if (cr6.getLT()) goto loc_820E8ED8;
	// extsw r11,r29
	r11.s64 = r29.s32;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f0,120(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// b 0x820e8ee8
	goto loc_820E8EE8;
loc_820E8ED8:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// fnmsubs f0,f0,f27,f26
	f0.f64 = double(float(-(f0.f64 * f27.f64 - f26.f64)));
loc_820E8EE8:
	// fctidz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, f0.u64);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// lbz r11,103(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 103);
	// stb r11,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r11.u8);
	// blt cr6,0x820e8f18
	if (cr6.getLT()) goto loc_820E8F18;
	// extsw r11,r29
	r11.s64 = r29.s32;
	// std r11,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, r11.u64);
	// lfd f0,128(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// b 0x820e8f28
	goto loc_820E8F28;
loc_820E8F18:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// fnmsubs f0,f0,f27,f26
	f0.f64 = double(float(-(f0.f64 * f27.f64 - f26.f64)));
loc_820E8F28:
	// fctidz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, f0.u64);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// lbz r11,103(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 103);
	// stb r11,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r11.u8);
	// blt cr6,0x820e8f58
	if (cr6.getLT()) goto loc_820E8F58;
	// extsw r11,r29
	r11.s64 = r29.s32;
	// std r11,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, r11.u64);
	// lfd f0,136(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// b 0x820e8f68
	goto loc_820E8F68;
loc_820E8F58:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// fnmsubs f0,f0,f27,f26
	f0.f64 = double(float(-(f0.f64 * f27.f64 - f26.f64)));
loc_820E8F68:
	// fctidz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, f0.u64);
	// stb r30,27(r31)
	PPC_STORE_U8(r31.u32 + 27, r30.u8);
	// addi r31,r31,28
	r31.s64 = r31.s64 + 28;
	// lbz r11,103(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 103);
	// stb r11,0(r28)
	PPC_STORE_U8(r28.u32 + 0, r11.u8);
loc_820E8F80:
	// addi r27,r27,2
	r27.s64 = r27.s64 + 2;
	// cmpw cr6,r27,r25
	cr6.compare<int32_t>(r27.s32, r25.s32, xer);
	// ble cr6,0x820e8d48
	if (!cr6.getGT()) goto loc_820E8D48;
loc_820E8F8C:
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed57c
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_820E8FA0"))) PPC_WEAK_FUNC(sub_820E8FA0);
PPC_FUNC_IMPL(__imp__sub_820E8FA0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r9,255
	ctx.r9.s64 = 255;
	// li r11,0
	r11.s64 = 0;
	// addi r10,r1,89
	ctx.r10.s64 = ctx.r1.s64 + 89;
	// stb r9,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r9.u8);
	// stb r9,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r9.u8);
	// li r9,58
	ctx.r9.s64 = 58;
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, r11.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, r11.u8);
	// stb r11,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, r11.u8);
	// sth r9,84(r1)
	PPC_STORE_U16(ctx.r1.u32 + 84, ctx.r9.u16);
	// stb r11,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r11.u8);
	// stb r11,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, r11.u8);
	// stb r11,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, r11.u8);
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// stb r11,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, r11.u8);
	// stb r11,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, r11.u8);
	// stb r11,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r11.u8);
	// stb r11,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, r11.u8);
	// stb r11,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, r11.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, r11.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, r11.u8);
	// stb r11,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, r11.u8);
	// stb r11,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, r11.u8);
	// stb r11,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, r11.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, r11.u8);
	// stb r11,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, r11.u8);
	// stb r11,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, r11.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, r11.u8);
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, r11.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, r11.u8);
	// stb r11,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, r11.u8);
	// stb r11,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, r11.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, r11.u8);
	// stb r11,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, r11.u8);
	// stb r11,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, r11.u8);
	// stb r11,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, r11.u8);
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, r11.u8);
	// stb r11,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, r11.u8);
	// stb r11,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, r11.u8);
	// stb r11,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, r11.u8);
	// stb r11,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, r11.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, r11.u8);
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, r11.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, r11.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, r11.u8);
	// stb r11,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, r11.u8);
	// stb r11,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, r11.u8);
	// stb r11,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, r11.u8);
	// stb r11,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, r11.u8);
	// stb r11,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, r11.u8);
	// stb r11,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, r11.u8);
	// stb r11,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, r11.u8);
	// stb r11,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, r11.u8);
	// stb r11,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, r11.u8);
	// stb r11,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, r11.u8);
	// stb r11,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, r11.u8);
	// stb r11,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, r11.u8);
	// stb r11,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, r11.u8);
	// stb r11,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, r11.u8);
	// stb r11,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, r11.u8);
	// stb r11,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, r11.u8);
	// stb r11,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, r11.u8);
	// stb r11,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, r11.u8);
	// stb r11,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, r11.u8);
	// stb r11,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, r11.u8);
	// stb r11,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, r11.u8);
	// stb r11,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, r11.u8);
	// stb r11,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, r11.u8);
	// stb r11,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, r11.u8);
	// stb r11,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, r11.u8);
	// stb r11,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, r11.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r11,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, r11.u8);
	// li r5,88
	ctx.r5.s64 = 88;
	// stb r11,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, r11.u8);
	// stb r11,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, r11.u8);
	// stb r11,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, r11.u8);
	// stb r11,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, r11.u8);
	// stb r11,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, r11.u8);
	// stb r11,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, r11.u8);
	// stb r11,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, r11.u8);
	// stb r11,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, r11.u8);
	// stb r11,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, r11.u8);
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E9130"))) PPC_WEAK_FUNC(sub_820E9130);
PPC_FUNC_IMPL(__imp__sub_820E9130) {
	PPC_FUNC_PROLOGUE();
	// b 0x82184a38
	sub_82184A38(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820E9138"))) PPC_WEAK_FUNC(sub_820E9138);
PPC_FUNC_IMPL(__imp__sub_820E9138) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lhz r11,4(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 4);
	// rlwimi r11,r4,8,21,23
	r11.u64 = (__builtin_rotateleft32(ctx.r4.u32, 8) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// sth r11,4(r3)
	PPC_STORE_U16(ctx.r3.u32 + 4, r11.u16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E9148"))) PPC_WEAK_FUNC(sub_820E9148);
PPC_FUNC_IMPL(__imp__sub_820E9148) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lhz r11,796(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 796);
	// rlwinm r3,r11,24,29,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0x7;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E9158"))) PPC_WEAK_FUNC(sub_820E9158);
PPC_FUNC_IMPL(__imp__sub_820E9158) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addic. r11,r3,792
	xer.ca = ctx.r3.u32 > 4294966503;
	r11.s64 = ctx.r3.s64 + 792;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x820e9190
	if (cr0.getEQ()) goto loc_820E9190;
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// bl 0x82144ad0
	sub_82144AD0(ctx, base);
	// bl 0x820c5800
	sub_820C5800(ctx, base);
	// bl 0x82144a30
	sub_82144A30(ctx, base);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820e9190
	if (!cr6.getEQ()) goto loc_820E9190;
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// bl 0x820c2b30
	sub_820C2B30(ctx, base);
loc_820E9190:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E91A0"))) PPC_WEAK_FUNC(sub_820E91A0);
PPC_FUNC_IMPL(__imp__sub_820E91A0) {
	PPC_FUNC_PROLOGUE();
	// b 0x82185ab0
	sub_82185AB0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820E91A8"))) PPC_WEAK_FUNC(sub_820E91A8);
PPC_FUNC_IMPL(__imp__sub_820E91A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r30,0
	r30.s64 = 0;
loc_820E91C0:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820e91f0
	if (cr6.getEQ()) goto loc_820E91F0;
	// li r4,2
	ctx.r4.s64 = 2;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820e91f0
	if (!cr6.getEQ()) goto loc_820E91F0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82185ab0
	sub_82185AB0(ctx, base);
loc_820E91F0:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// ble cr6,0x820e91c0
	if (!cr6.getGT()) goto loc_820E91C0;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// bl 0x82185ab0
	sub_82185AB0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E9220"))) PPC_WEAK_FUNC(sub_820E9220);
PPC_FUNC_IMPL(__imp__sub_820E9220) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r11,r30,792
	r11.s64 = r30.s64 + 792;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e92a4
	if (cr6.getEQ()) goto loc_820E92A4;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820e925c
	if (cr6.getEQ()) goto loc_820E925C;
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x820e92a8
	goto loc_820E92A8;
loc_820E925C:
	// li r31,0
	r31.s64 = 0;
loc_820E9260:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e9298
	if (cr6.getGT()) goto loc_820E9298;
	// li r5,2
	ctx.r5.s64 = 2;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9298
	if (cr6.getEQ()) goto loc_820E9298;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,20
	cr6.compare<int32_t>(r31.s32, 20, xer);
	// blt cr6,0x820e9260
	if (cr6.getLT()) goto loc_820E9260;
loc_820E9298:
	// cmpwi cr6,r31,20
	cr6.compare<int32_t>(r31.s32, 20, xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// beq cr6,0x820e92a8
	if (cr6.getEQ()) goto loc_820E92A8;
loc_820E92A4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820E92A8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E92C0"))) PPC_WEAK_FUNC(sub_820E92C0);
PPC_FUNC_IMPL(__imp__sub_820E92C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r16{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r9,r3,792
	ctx.r9.s64 = ctx.r3.s64 + 792;
	// cmplwi cr6,r4,19
	cr6.compare<uint32_t>(ctx.r4.u32, 19, xer);
	// bgt cr6,0x820e9414
	if (cr6.getGT()) goto loc_820E9414;
	// cmplwi cr6,r5,3
	cr6.compare<uint32_t>(ctx.r5.u32, 3, xer);
	// bgt cr6,0x820e9414
	if (cr6.getGT()) goto loc_820E9414;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// bne cr6,0x820e9308
	if (!cr6.getEQ()) goto loc_820E9308;
	// bl 0x820e9220
	sub_820E9220(ctx, base);
	// subfic r11,r3,0
	xer.ca = ctx.r3.u32 <= 0;
	r11.s64 = 0 - ctx.r3.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r3,r11,22
	ctx.r3.u64 = r11.u32 & 0x3FF;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820E9308:
	// rlwinm r11,r5,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r5,r11
	r11.u64 = ctx.r5.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// clrlwi r10,r11,29
	ctx.r10.u64 = r11.u32 & 0x7;
	// srawi r11,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	r11.s64 = r11.s32 >> 3;
	// subfic r10,r10,6
	xer.ca = ctx.r10.u32 <= 6;
	ctx.r10.s64 = 6 - ctx.r10.s64;
	// cmplwi cr6,r10,6
	cr6.compare<uint32_t>(ctx.r10.u32, 6, xer);
	// bgt cr6,0x820e9408
	if (cr6.getGT()) goto loc_820E9408;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,-27824
	r12.s64 = r12.s64 + -27824;
	// rlwinm r0,r10,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_820E93E4;
	case 1:
		goto loc_820E9408;
	case 2:
		goto loc_820E93BC;
	case 3:
		goto loc_820E9408;
	case 4:
		goto loc_820E9394;
	case 5:
		goto loc_820E9408;
	case 6:
		goto loc_820E936C;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-27676(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27676);
	// lwz r16,-27640(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27640);
	// lwz r16,-27716(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27716);
	// lwz r16,-27640(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27640);
	// lwz r16,-27756(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27756);
	// lwz r16,-27640(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27640);
	// lwz r16,-27796(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27796);
loc_820E936C:
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lbz r10,11(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 11);
	// lbz r11,10(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 10);
	// rlwinm r10,r10,26,6,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 26) & 0x3FFFFFF;
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// or r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 | r11.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820E9394:
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lbz r10,10(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 10);
	// lbz r11,11(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 11);
	// rlwinm r10,r10,4,22,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0x3F0;
	// rlwinm r11,r11,28,4,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0xFFFFFFF;
	// or r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 | r11.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820E93BC:
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lbz r10,10(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 10);
	// lbz r11,11(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 11);
	// rlwinm r10,r10,6,22,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0x3C0;
	// rlwinm r11,r11,30,2,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// or r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 | r11.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820E93E4:
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lbz r10,10(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 10);
	// lbz r11,11(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 11);
	// rlwinm r10,r10,8,22,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0x300;
	// or r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 | r11.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820E9408:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,24484
	ctx.r3.s64 = r11.s64 + 24484;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_820E9414:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E9428"))) PPC_WEAK_FUNC(sub_820E9428);
PPC_FUNC_IMPL(__imp__sub_820E9428) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r16{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r4,19
	cr6.compare<uint32_t>(ctx.r4.u32, 19, xer);
	// addi r9,r31,792
	ctx.r9.s64 = r31.s64 + 792;
	// bgt cr6,0x820e9560
	if (cr6.getGT()) goto loc_820E9560;
	// cmplwi cr6,r5,2
	cr6.compare<uint32_t>(ctx.r5.u32, 2, xer);
	// bgt cr6,0x820e9560
	if (cr6.getGT()) goto loc_820E9560;
	// rlwinm r11,r5,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// add r11,r5,r11
	r11.u64 = ctx.r5.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// clrlwi r10,r11,29
	ctx.r10.u64 = r11.u32 & 0x7;
	// subfic r10,r10,7
	xer.ca = ctx.r10.u32 <= 7;
	ctx.r10.s64 = 7 - ctx.r10.s64;
	// srawi r11,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	r11.s64 = r11.s32 >> 3;
	// bne cr6,0x820e9488
	if (!cr6.getEQ()) goto loc_820E9488;
	// li r6,79
	ctx.r6.s64 = 79;
	// b 0x820e9494
	goto loc_820E9494;
loc_820E9488:
	// cmpwi cr6,r6,1023
	cr6.compare<int32_t>(ctx.r6.s32, 1023, xer);
	// ble cr6,0x820e9494
	if (!cr6.getGT()) goto loc_820E9494;
	// li r6,1023
	ctx.r6.s64 = 1023;
loc_820E9494:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmplwi cr6,r10,6
	cr6.compare<uint32_t>(ctx.r10.u32, 6, xer);
	// bgt cr6,0x820e9554
	if (cr6.getGT()) goto loc_820E9554;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,-27464
	r12.s64 = r12.s64 + -27464;
	// rlwinm r0,r10,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_820E9538;
	case 1:
		goto loc_820E9554;
	case 2:
		goto loc_820E9514;
	case 3:
		goto loc_820E9554;
	case 4:
		goto loc_820E94F0;
	case 5:
		goto loc_820E9554;
	case 6:
		goto loc_820E94D4;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-27336(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27336);
	// lwz r16,-27308(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27308);
	// lwz r16,-27372(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27372);
	// lwz r16,-27308(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27308);
	// lwz r16,-27408(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27408);
	// lwz r16,-27308(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27308);
	// lwz r16,-27436(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -27436);
loc_820E94D4:
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// srawi r10,r6,2
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r6.s32 >> 2;
	// lbz r9,11(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 11);
	// stb r10,10(r11)
	PPC_STORE_U8(r11.u32 + 10, ctx.r10.u8);
	// rlwimi r9,r6,6,0,25
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r6.u32, 6) & 0xFFFFFFC0) | (ctx.r9.u64 & 0xFFFFFFFF0000003F);
	// stb r9,11(r11)
	PPC_STORE_U8(r11.u32 + 11, ctx.r9.u8);
	// b 0x820e9560
	goto loc_820E9560;
loc_820E94F0:
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// srawi r10,r6,4
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0xF) != 0);
	ctx.r10.s64 = ctx.r6.s32 >> 4;
	// lbz r9,11(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 11);
	// lbz r8,10(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 10);
	// rlwimi r9,r6,4,0,27
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r6.u32, 4) & 0xFFFFFFF0) | (ctx.r9.u64 & 0xFFFFFFFF0000000F);
	// rlwimi r10,r8,0,24,25
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r8.u32, 0) & 0xC0) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFF3F);
	// stb r9,11(r11)
	PPC_STORE_U8(r11.u32 + 11, ctx.r9.u8);
	// stb r10,10(r11)
	PPC_STORE_U8(r11.u32 + 10, ctx.r10.u8);
	// b 0x820e9560
	goto loc_820E9560;
loc_820E9514:
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// srawi r10,r6,6
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3F) != 0);
	ctx.r10.s64 = ctx.r6.s32 >> 6;
	// lbz r9,11(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 11);
	// lbz r8,10(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 10);
	// rlwimi r9,r6,2,0,29
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r6.u32, 2) & 0xFFFFFFFC) | (ctx.r9.u64 & 0xFFFFFFFF00000003);
	// rlwimi r10,r8,0,24,27
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r8.u32, 0) & 0xF0) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFF0F);
	// stb r9,11(r11)
	PPC_STORE_U8(r11.u32 + 11, ctx.r9.u8);
	// stb r10,10(r11)
	PPC_STORE_U8(r11.u32 + 10, ctx.r10.u8);
	// b 0x820e9560
	goto loc_820E9560;
loc_820E9538:
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// srawi r9,r6,8
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0xFF) != 0);
	ctx.r9.s64 = ctx.r6.s32 >> 8;
	// lbz r8,10(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 10);
	// stb r6,11(r11)
	PPC_STORE_U8(r11.u32 + 11, ctx.r6.u8);
	// rlwimi r9,r8,0,24,29
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r8.u32, 0) & 0xFC) | (ctx.r9.u64 & 0xFFFFFFFFFFFFFF03);
	// stb r9,10(r11)
	PPC_STORE_U8(r11.u32 + 10, ctx.r9.u8);
	// b 0x820e9560
	goto loc_820E9560;
loc_820E9554:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,24524
	ctx.r3.s64 = r11.s64 + 24524;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_820E9560:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183fc8
	sub_82183FC8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E9580"))) PPC_WEAK_FUNC(sub_820E9580);
PPC_FUNC_IMPL(__imp__sub_820E9580) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmplwi cr6,r4,19
	cr6.compare<uint32_t>(ctx.r4.u32, 19, xer);
	// bgt cr6,0x820e95bc
	if (cr6.getGT()) goto loc_820E95BC;
	// cmplwi cr6,r5,3
	cr6.compare<uint32_t>(ctx.r5.u32, 3, xer);
	// bgt cr6,0x820e95bc
	if (cr6.getGT()) goto loc_820E95BC;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820E95BC:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E95D0"))) PPC_WEAK_FUNC(sub_820E95D0);
PPC_FUNC_IMPL(__imp__sub_820E95D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e9624
	if (cr6.getGT()) goto loc_820E9624;
	// cmplwi cr6,r30,3
	cr6.compare<uint32_t>(r30.u32, 3, xer);
	// bgt cr6,0x820e9624
	if (cr6.getGT()) goto loc_820E9624;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e9610
	if (cr6.getEQ()) goto loc_820E9610;
	// cmpw cr6,r28,r3
	cr6.compare<int32_t>(r28.s32, ctx.r3.s32, xer);
	// bge cr6,0x820e9624
	if (!cr6.getLT()) goto loc_820E9624;
loc_820E9610:
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e9428
	sub_820E9428(ctx, base);
loc_820E9624:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820E9630"))) PPC_WEAK_FUNC(sub_820E9630);
PPC_FUNC_IMPL(__imp__sub_820E9630) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r3,80
	ctx.r3.s64 = 80;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82136fa0
	sub_82136FA0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e9664
	if (cr6.getEQ()) goto loc_820E9664;
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x820e96b0
	goto loc_820E96B0;
loc_820E9664:
	// cmplwi cr6,r30,19
	cr6.compare<uint32_t>(r30.u32, 19, xer);
	// bgt cr6,0x820e96ac
	if (cr6.getGT()) goto loc_820E96AC;
	// lbz r11,800(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 800);
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,799(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 799);
	// rotlwi r7,r11,8
	ctx.r7.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r8,798(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 798);
	// or r11,r7,r11
	r11.u64 = ctx.r7.u64 | r11.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r8
	r11.u64 = r11.u64 | ctx.r8.u64;
	// slw r10,r10,r30
	ctx.r10.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// b 0x820e96b0
	goto loc_820E96B0;
loc_820E96AC:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820E96B0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E96C8"))) PPC_WEAK_FUNC(sub_820E96C8);
PPC_FUNC_IMPL(__imp__sub_820E96C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// cmplwi cr6,r28,19
	cr6.compare<uint32_t>(r28.u32, 19, xer);
	// bgt cr6,0x820e98a8
	if (cr6.getGT()) goto loc_820E98A8;
	// cmplwi cr6,r27,3
	cr6.compare<uint32_t>(r27.u32, 3, xer);
	// bgt cr6,0x820e98a8
	if (cr6.getGT()) goto loc_820E98A8;
	// addic. r11,r29,792
	xer.ca = r29.u32 > 4294966503;
	r11.s64 = r29.s64 + 792;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x820e987c
	if (cr0.getEQ()) goto loc_820E987C;
	// bl 0x820e9580
	sub_820E9580(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e9710
	if (cr6.getEQ()) goto loc_820E9710;
	// li r3,3
	ctx.r3.s64 = 3;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E9710:
	// cmpwi cr6,r28,18
	cr6.compare<int32_t>(r28.s32, 18, xer);
	// bne cr6,0x820e9720
	if (!cr6.getEQ()) goto loc_820E9720;
	// cmpwi cr6,r27,1
	cr6.compare<int32_t>(r27.s32, 1, xer);
	// b 0x820e972c
	goto loc_820E972C;
loc_820E9720:
	// cmpwi cr6,r28,19
	cr6.compare<int32_t>(r28.s32, 19, xer);
	// bne cr6,0x820e9730
	if (!cr6.getEQ()) goto loc_820E9730;
	// cmpwi cr6,r27,2
	cr6.compare<int32_t>(r27.s32, 2, xer);
loc_820E972C:
	// blt cr6,0x820e98a8
	if (cr6.getLT()) goto loc_820E98A8;
loc_820E9730:
	// mr r30,r27
	r30.u64 = r27.u64;
loc_820E9734:
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x820e9780
	if (!cr6.getGT()) goto loc_820E9780;
loc_820E9740:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e978c
	if (cr6.getGT()) goto loc_820E978C;
	// cmplwi cr6,r30,3
	cr6.compare<uint32_t>(r30.u32, 3, xer);
	// bgt cr6,0x820e978c
	if (cr6.getGT()) goto loc_820E978C;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e978c
	if (cr6.getEQ()) goto loc_820E978C;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r31,r28
	cr6.compare<int32_t>(r31.s32, r28.s32, xer);
	// blt cr6,0x820e9740
	if (cr6.getLT()) goto loc_820E9740;
loc_820E9780:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E978C:
	// cmpw cr6,r31,r28
	cr6.compare<int32_t>(r31.s32, r28.s32, xer);
	// bge cr6,0x820e9780
	if (!cr6.getLT()) goto loc_820E9780;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// ble cr6,0x820e9734
	if (!cr6.getGT()) goto loc_820E9734;
	// cmpwi cr6,r27,3
	cr6.compare<int32_t>(r27.s32, 3, xer);
	// bge cr6,0x820e987c
	if (!cr6.getLT()) goto loc_820E987C;
	// cmpwi cr6,r28,17
	cr6.compare<int32_t>(r28.s32, 17, xer);
	// bgt cr6,0x820e97dc
	if (cr6.getGT()) goto loc_820E97DC;
	// mr r31,r27
	r31.u64 = r27.u64;
	// addi r30,r28,-1
	r30.s64 = r28.s64 + -1;
loc_820E97B8:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e9580
	sub_820E9580(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e9780
	if (!cr6.getEQ()) goto loc_820E9780;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,3
	cr6.compare<int32_t>(r31.s32, 3, xer);
	// ble cr6,0x820e97b8
	if (!cr6.getGT()) goto loc_820E97B8;
loc_820E97DC:
	// li r31,0
	r31.s64 = 0;
loc_820E97E0:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e981c
	if (cr6.getGT()) goto loc_820E981C;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e981c
	if (cr6.getEQ()) goto loc_820E981C;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820e97e0
	if (!cr6.getGT()) goto loc_820E97E0;
	// b 0x820e9824
	goto loc_820E9824;
loc_820E981C:
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820e987c
	if (!cr6.getGT()) goto loc_820E987C;
loc_820E9824:
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// ble cr6,0x820e9780
	if (!cr6.getGT()) goto loc_820E9780;
loc_820E9830:
	// cmplwi cr6,r31,3
	cr6.compare<uint32_t>(r31.u32, 3, xer);
	// bgt cr6,0x820e9874
	if (cr6.getGT()) goto loc_820E9874;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9874
	if (cr6.getEQ()) goto loc_820E9874;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r31,r27
	cr6.compare<int32_t>(r31.s32, r27.s32, xer);
	// blt cr6,0x820e9830
	if (cr6.getLT()) goto loc_820E9830;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820E9874:
	// cmpw cr6,r31,r27
	cr6.compare<int32_t>(r31.s32, r27.s32, xer);
	// bge cr6,0x820e9780
	if (!cr6.getLT()) goto loc_820E9780;
loc_820E987C:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x820e9780
	if (cr6.getEQ()) goto loc_820E9780;
	// bl 0x82139380
	sub_82139380(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820e9898
	if (cr6.getEQ()) goto loc_820E9898;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x820e9780
	if (cr6.getEQ()) goto loc_820E9780;
loc_820E9898:
	// bl 0x82139390
	sub_82139390(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// bne cr6,0x820e98ac
	if (!cr6.getEQ()) goto loc_820E98AC;
loc_820E98A8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820E98AC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820E98B8"))) PPC_WEAK_FUNC(sub_820E98B8);
PPC_FUNC_IMPL(__imp__sub_820E98B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// li r31,0
	r31.s64 = 0;
	// li r30,0
	r30.s64 = 0;
loc_820E98D4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x820e96c8
	sub_820E96C8(ctx, base);
	// cmpw cr6,r31,r3
	cr6.compare<int32_t>(r31.s32, ctx.r3.s32, xer);
	// bgt cr6,0x820e98f4
	if (cr6.getGT()) goto loc_820E98F4;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
loc_820E98F4:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// ble cr6,0x820e98d4
	if (!cr6.getGT()) goto loc_820E98D4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820E9910"))) PPC_WEAK_FUNC(sub_820E9910);
PPC_FUNC_IMPL(__imp__sub_820E9910) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// cmplwi cr6,r30,19
	cr6.compare<uint32_t>(r30.u32, 19, xer);
	// bgt cr6,0x820e9984
	if (cr6.getGT()) goto loc_820E9984;
	// cmplwi cr6,r27,3
	cr6.compare<uint32_t>(r27.u32, 3, xer);
	// bgt cr6,0x820e9984
	if (cr6.getGT()) goto loc_820E9984;
	// mr r31,r27
	r31.u64 = r27.u64;
loc_820E9940:
	// cmpw cr6,r31,r27
	cr6.compare<int32_t>(r31.s32, r27.s32, xer);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bne cr6,0x820e995c
	if (!cr6.getEQ()) goto loc_820E995C;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// b 0x820e9964
	goto loc_820E9964;
loc_820E995C:
	// lis r6,1525
	ctx.r6.s64 = 99942400;
	// ori r6,r6,57599
	ctx.r6.u64 = ctx.r6.u64 | 57599;
loc_820E9964:
	// bl 0x820e95d0
	sub_820E95D0(ctx, base);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x820e9940
	if (!cr6.getLT()) goto loc_820E9940;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82183fc8
	sub_82183FC8(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82185ab0
	sub_82185AB0(ctx, base);
loc_820E9984:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820E9990"))) PPC_WEAK_FUNC(sub_820E9990);
PPC_FUNC_IMPL(__imp__sub_820E9990) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,19
	cr6.compare<uint32_t>(r30.u32, 19, xer);
	// bgt cr6,0x820e9a10
	if (cr6.getGT()) goto loc_820E9A10;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820e99c8
	if (cr6.getEQ()) goto loc_820E99C8;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e9a10
	if (!cr6.getEQ()) goto loc_820E9A10;
loc_820E99C8:
	// li r11,1
	r11.s64 = 1;
	// addi r9,r31,792
	ctx.r9.s64 = r31.s64 + 792;
	// li r10,0
	ctx.r10.s64 = 0;
	// slw r11,r11,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (r11.u32 << (r30.u8 & 0x3F));
	// cmplwi cr6,r11,255
	cr6.compare<uint32_t>(r11.u32, 255, xer);
	// ble cr6,0x820e99f0
	if (!cr6.getGT()) goto loc_820E99F0;
loc_820E99E0:
	// rlwinm r11,r11,24,8,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0xFFFFFF;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmplwi cr6,r11,255
	cr6.compare<uint32_t>(r11.u32, 255, xer);
	// bgt cr6,0x820e99e0
	if (cr6.getGT()) goto loc_820E99E0;
loc_820E99F0:
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbz r9,6(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 6);
	// or r11,r9,r11
	r11.u64 = ctx.r9.u64 | r11.u64;
	// stb r11,6(r10)
	PPC_STORE_U8(ctx.r10.u32 + 6, r11.u8);
	// bl 0x82183fc8
	sub_82183FC8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82185ab0
	sub_82185AB0(ctx, base);
loc_820E9A10:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820E9A28"))) PPC_WEAK_FUNC(sub_820E9A28);
PPC_FUNC_IMPL(__imp__sub_820E9A28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addic. r28,r29,792
	xer.ca = r29.u32 > 4294966503;
	r28.s64 = r29.s64 + 792;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// beq 0x820e9b24
	if (cr0.getEQ()) goto loc_820E9B24;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,17
	ctx.r4.s64 = 17;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e9dd0
	if (!cr6.getEQ()) goto loc_820E9DD0;
	// li r30,0
	r30.s64 = 0;
loc_820E9A58:
	// li r31,0
	r31.s64 = 0;
loc_820E9A5C:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e9aa0
	if (cr6.getGT()) goto loc_820E9AA0;
	// cmplwi cr6,r30,3
	cr6.compare<uint32_t>(r30.u32, 3, xer);
	// bgt cr6,0x820e9aa0
	if (cr6.getGT()) goto loc_820E9AA0;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9aa0
	if (cr6.getEQ()) goto loc_820E9AA0;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// blt cr6,0x820e9a5c
	if (cr6.getLT()) goto loc_820E9A5C;
	// b 0x820e9b34
	goto loc_820E9B34;
loc_820E9AA0:
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// bge cr6,0x820e9b34
	if (!cr6.getLT()) goto loc_820E9B34;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// ble cr6,0x820e9a58
	if (!cr6.getGT()) goto loc_820E9A58;
	// li r31,0
	r31.s64 = 0;
loc_820E9AB8:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,16
	ctx.r4.s64 = 16;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e9580
	sub_820E9580(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e9b34
	if (!cr6.getEQ()) goto loc_820E9B34;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,3
	cr6.compare<int32_t>(r31.s32, 3, xer);
	// ble cr6,0x820e9ab8
	if (!cr6.getGT()) goto loc_820E9AB8;
	// li r31,0
	r31.s64 = 0;
loc_820E9AE0:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e9b1c
	if (cr6.getGT()) goto loc_820E9B1C;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9b1c
	if (cr6.getEQ()) goto loc_820E9B1C;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820e9ae0
	if (!cr6.getGT()) goto loc_820E9AE0;
	// b 0x820e9b34
	goto loc_820E9B34;
loc_820E9B1C:
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// bgt cr6,0x820e9b34
	if (cr6.getGT()) goto loc_820E9B34;
loc_820E9B24:
	// bl 0x82139380
	sub_82139380(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e9b34
	if (!cr6.getEQ()) goto loc_820E9B34;
	// bl 0x82139390
	sub_82139390(ctx, base);
loc_820E9B34:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820e9c6c
	if (cr6.getEQ()) goto loc_820E9C6C;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,17
	ctx.r4.s64 = 17;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e9dd0
	if (!cr6.getEQ()) goto loc_820E9DD0;
	// li r30,1
	r30.s64 = 1;
loc_820E9B58:
	// li r31,0
	r31.s64 = 0;
loc_820E9B5C:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e9ba0
	if (cr6.getGT()) goto loc_820E9BA0;
	// cmplwi cr6,r30,3
	cr6.compare<uint32_t>(r30.u32, 3, xer);
	// bgt cr6,0x820e9ba0
	if (cr6.getGT()) goto loc_820E9BA0;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9ba0
	if (cr6.getEQ()) goto loc_820E9BA0;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// blt cr6,0x820e9b5c
	if (cr6.getLT()) goto loc_820E9B5C;
	// b 0x820e9c74
	goto loc_820E9C74;
loc_820E9BA0:
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// bge cr6,0x820e9c74
	if (!cr6.getLT()) goto loc_820E9C74;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// ble cr6,0x820e9b58
	if (!cr6.getGT()) goto loc_820E9B58;
	// li r31,1
	r31.s64 = 1;
loc_820E9BB8:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,16
	ctx.r4.s64 = 16;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e9580
	sub_820E9580(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e9c74
	if (!cr6.getEQ()) goto loc_820E9C74;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,3
	cr6.compare<int32_t>(r31.s32, 3, xer);
	// ble cr6,0x820e9bb8
	if (!cr6.getGT()) goto loc_820E9BB8;
	// li r31,0
	r31.s64 = 0;
loc_820E9BE0:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e9c1c
	if (cr6.getGT()) goto loc_820E9C1C;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9c1c
	if (cr6.getEQ()) goto loc_820E9C1C;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820e9be0
	if (!cr6.getGT()) goto loc_820E9BE0;
	// b 0x820e9c24
	goto loc_820E9C24;
loc_820E9C1C:
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820e9c6c
	if (!cr6.getGT()) goto loc_820E9C6C;
loc_820E9C24:
	// li r31,0
	r31.s64 = 0;
loc_820E9C28:
	// cmplwi cr6,r31,3
	cr6.compare<uint32_t>(r31.u32, 3, xer);
	// bgt cr6,0x820e9c64
	if (cr6.getGT()) goto loc_820E9C64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,17
	ctx.r4.s64 = 17;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9c64
	if (cr6.getEQ()) goto loc_820E9C64;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,1
	cr6.compare<int32_t>(r31.s32, 1, xer);
	// blt cr6,0x820e9c28
	if (cr6.getLT()) goto loc_820E9C28;
	// b 0x820e9c74
	goto loc_820E9C74;
loc_820E9C64:
	// cmpwi cr6,r31,1
	cr6.compare<int32_t>(r31.s32, 1, xer);
	// bge cr6,0x820e9c74
	if (!cr6.getLT()) goto loc_820E9C74;
loc_820E9C6C:
	// bl 0x82139380
	sub_82139380(ctx, base);
	// bl 0x82139390
	sub_82139390(ctx, base);
loc_820E9C74:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820e9dbc
	if (cr6.getEQ()) goto loc_820E9DBC;
	// li r5,2
	ctx.r5.s64 = 2;
	// li r4,17
	ctx.r4.s64 = 17;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e9dd0
	if (!cr6.getEQ()) goto loc_820E9DD0;
	// li r30,2
	r30.s64 = 2;
loc_820E9C98:
	// li r31,0
	r31.s64 = 0;
loc_820E9C9C:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e9ce8
	if (cr6.getGT()) goto loc_820E9CE8;
	// cmplwi cr6,r30,3
	cr6.compare<uint32_t>(r30.u32, 3, xer);
	// bgt cr6,0x820e9ce8
	if (cr6.getGT()) goto loc_820E9CE8;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9ce8
	if (cr6.getEQ()) goto loc_820E9CE8;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// blt cr6,0x820e9c9c
	if (cr6.getLT()) goto loc_820E9C9C;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820E9CE8:
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// bge cr6,0x820e9dc4
	if (!cr6.getLT()) goto loc_820E9DC4;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// ble cr6,0x820e9c98
	if (!cr6.getGT()) goto loc_820E9C98;
	// li r31,2
	r31.s64 = 2;
loc_820E9D00:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,16
	ctx.r4.s64 = 16;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e9580
	sub_820E9580(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820e9dc4
	if (!cr6.getEQ()) goto loc_820E9DC4;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,3
	cr6.compare<int32_t>(r31.s32, 3, xer);
	// ble cr6,0x820e9d00
	if (!cr6.getGT()) goto loc_820E9D00;
	// li r31,0
	r31.s64 = 0;
loc_820E9D28:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e9d64
	if (cr6.getGT()) goto loc_820E9D64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9d64
	if (cr6.getEQ()) goto loc_820E9D64;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820e9d28
	if (!cr6.getGT()) goto loc_820E9D28;
	// b 0x820e9d6c
	goto loc_820E9D6C;
loc_820E9D64:
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820e9dbc
	if (!cr6.getGT()) goto loc_820E9DBC;
loc_820E9D6C:
	// li r31,0
	r31.s64 = 0;
loc_820E9D70:
	// cmplwi cr6,r31,3
	cr6.compare<uint32_t>(r31.u32, 3, xer);
	// bgt cr6,0x820e9db4
	if (cr6.getGT()) goto loc_820E9DB4;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,17
	ctx.r4.s64 = 17;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9db4
	if (cr6.getEQ()) goto loc_820E9DB4;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,2
	cr6.compare<int32_t>(r31.s32, 2, xer);
	// blt cr6,0x820e9d70
	if (cr6.getLT()) goto loc_820E9D70;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820E9DB4:
	// cmpwi cr6,r31,2
	cr6.compare<int32_t>(r31.s32, 2, xer);
	// bge cr6,0x820e9dc4
	if (!cr6.getLT()) goto loc_820E9DC4;
loc_820E9DBC:
	// bl 0x82139380
	sub_82139380(ctx, base);
	// bl 0x82139390
	sub_82139390(ctx, base);
loc_820E9DC4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820E9DD0:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820E9DE0"))) PPC_WEAK_FUNC(sub_820E9DE0);
PPC_FUNC_IMPL(__imp__sub_820E9DE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addic. r28,r29,792
	xer.ca = r29.u32 > 4294966503;
	r28.s64 = r29.s64 + 792;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// beq 0x820e9efc
	if (cr0.getEQ()) goto loc_820E9EFC;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,18
	ctx.r4.s64 = 18;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ea038
	if (!cr6.getEQ()) goto loc_820EA038;
	// li r30,1
	r30.s64 = 1;
loc_820E9E10:
	// li r31,0
	r31.s64 = 0;
loc_820E9E14:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e9e58
	if (cr6.getGT()) goto loc_820E9E58;
	// cmplwi cr6,r30,3
	cr6.compare<uint32_t>(r30.u32, 3, xer);
	// bgt cr6,0x820e9e58
	if (cr6.getGT()) goto loc_820E9E58;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9e58
	if (cr6.getEQ()) goto loc_820E9E58;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,18
	cr6.compare<int32_t>(r31.s32, 18, xer);
	// blt cr6,0x820e9e14
	if (cr6.getLT()) goto loc_820E9E14;
	// b 0x820e9f04
	goto loc_820E9F04;
loc_820E9E58:
	// cmpwi cr6,r31,18
	cr6.compare<int32_t>(r31.s32, 18, xer);
	// bge cr6,0x820e9f04
	if (!cr6.getLT()) goto loc_820E9F04;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// ble cr6,0x820e9e10
	if (!cr6.getGT()) goto loc_820E9E10;
	// li r31,0
	r31.s64 = 0;
loc_820E9E70:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e9eac
	if (cr6.getGT()) goto loc_820E9EAC;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9eac
	if (cr6.getEQ()) goto loc_820E9EAC;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820e9e70
	if (!cr6.getGT()) goto loc_820E9E70;
	// b 0x820e9eb4
	goto loc_820E9EB4;
loc_820E9EAC:
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820e9efc
	if (!cr6.getGT()) goto loc_820E9EFC;
loc_820E9EB4:
	// li r31,0
	r31.s64 = 0;
loc_820E9EB8:
	// cmplwi cr6,r31,3
	cr6.compare<uint32_t>(r31.u32, 3, xer);
	// bgt cr6,0x820e9ef4
	if (cr6.getGT()) goto loc_820E9EF4;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,18
	ctx.r4.s64 = 18;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9ef4
	if (cr6.getEQ()) goto loc_820E9EF4;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,1
	cr6.compare<int32_t>(r31.s32, 1, xer);
	// blt cr6,0x820e9eb8
	if (cr6.getLT()) goto loc_820E9EB8;
	// b 0x820e9f04
	goto loc_820E9F04;
loc_820E9EF4:
	// cmpwi cr6,r31,1
	cr6.compare<int32_t>(r31.s32, 1, xer);
	// bge cr6,0x820e9f04
	if (!cr6.getLT()) goto loc_820E9F04;
loc_820E9EFC:
	// bl 0x82139380
	sub_82139380(ctx, base);
	// bl 0x82139390
	sub_82139390(ctx, base);
loc_820E9F04:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820ea024
	if (cr6.getEQ()) goto loc_820EA024;
	// li r5,2
	ctx.r5.s64 = 2;
	// li r4,18
	ctx.r4.s64 = 18;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ea038
	if (!cr6.getEQ()) goto loc_820EA038;
	// li r30,2
	r30.s64 = 2;
loc_820E9F28:
	// li r31,0
	r31.s64 = 0;
loc_820E9F2C:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e9f78
	if (cr6.getGT()) goto loc_820E9F78;
	// cmplwi cr6,r30,3
	cr6.compare<uint32_t>(r30.u32, 3, xer);
	// bgt cr6,0x820e9f78
	if (cr6.getGT()) goto loc_820E9F78;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9f78
	if (cr6.getEQ()) goto loc_820E9F78;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,18
	cr6.compare<int32_t>(r31.s32, 18, xer);
	// blt cr6,0x820e9f2c
	if (cr6.getLT()) goto loc_820E9F2C;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820E9F78:
	// cmpwi cr6,r31,18
	cr6.compare<int32_t>(r31.s32, 18, xer);
	// bge cr6,0x820ea02c
	if (!cr6.getLT()) goto loc_820EA02C;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// ble cr6,0x820e9f28
	if (!cr6.getGT()) goto loc_820E9F28;
	// li r31,0
	r31.s64 = 0;
loc_820E9F90:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820e9fcc
	if (cr6.getGT()) goto loc_820E9FCC;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820e9fcc
	if (cr6.getEQ()) goto loc_820E9FCC;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820e9f90
	if (!cr6.getGT()) goto loc_820E9F90;
	// b 0x820e9fd4
	goto loc_820E9FD4;
loc_820E9FCC:
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820ea024
	if (!cr6.getGT()) goto loc_820EA024;
loc_820E9FD4:
	// li r31,0
	r31.s64 = 0;
loc_820E9FD8:
	// cmplwi cr6,r31,3
	cr6.compare<uint32_t>(r31.u32, 3, xer);
	// bgt cr6,0x820ea01c
	if (cr6.getGT()) goto loc_820EA01C;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,18
	ctx.r4.s64 = 18;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ea01c
	if (cr6.getEQ()) goto loc_820EA01C;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,2
	cr6.compare<int32_t>(r31.s32, 2, xer);
	// blt cr6,0x820e9fd8
	if (cr6.getLT()) goto loc_820E9FD8;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820EA01C:
	// cmpwi cr6,r31,2
	cr6.compare<int32_t>(r31.s32, 2, xer);
	// bge cr6,0x820ea02c
	if (!cr6.getLT()) goto loc_820EA02C;
loc_820EA024:
	// bl 0x82139380
	sub_82139380(ctx, base);
	// bl 0x82139390
	sub_82139390(ctx, base);
loc_820EA02C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820EA038:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820EA048"))) PPC_WEAK_FUNC(sub_820EA048);
PPC_FUNC_IMPL(__imp__sub_820EA048) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addic. r11,r29,792
	xer.ca = r29.u32 > 4294966503;
	r11.s64 = r29.s64 + 792;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x820ea190
	if (cr0.getEQ()) goto loc_820EA190;
	// li r5,2
	ctx.r5.s64 = 2;
	// li r4,19
	ctx.r4.s64 = 19;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ea08c
	if (cr6.getEQ()) goto loc_820EA08C;
	// li r11,3
	r11.s64 = 3;
	// addi r11,r11,-3
	r11.s64 = r11.s64 + -3;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820EA08C:
	// li r30,2
	r30.s64 = 2;
loc_820EA090:
	// li r31,0
	r31.s64 = 0;
loc_820EA094:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820ea0ec
	if (cr6.getGT()) goto loc_820EA0EC;
	// cmplwi cr6,r30,3
	cr6.compare<uint32_t>(r30.u32, 3, xer);
	// bgt cr6,0x820ea0ec
	if (cr6.getGT()) goto loc_820EA0EC;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ea0ec
	if (cr6.getEQ()) goto loc_820EA0EC;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,19
	cr6.compare<int32_t>(r31.s32, 19, xer);
	// blt cr6,0x820ea094
	if (cr6.getLT()) goto loc_820EA094;
loc_820EA0D4:
	// li r11,1
	r11.s64 = 1;
	// addi r11,r11,-3
	r11.s64 = r11.s64 + -3;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820EA0EC:
	// cmpwi cr6,r31,19
	cr6.compare<int32_t>(r31.s32, 19, xer);
	// bge cr6,0x820ea0d4
	if (!cr6.getLT()) goto loc_820EA0D4;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// ble cr6,0x820ea090
	if (!cr6.getGT()) goto loc_820EA090;
	// li r31,0
	r31.s64 = 0;
loc_820EA104:
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820ea140
	if (cr6.getGT()) goto loc_820EA140;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ea140
	if (cr6.getEQ()) goto loc_820EA140;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820ea104
	if (!cr6.getGT()) goto loc_820EA104;
	// b 0x820ea148
	goto loc_820EA148;
loc_820EA140:
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// ble cr6,0x820ea190
	if (!cr6.getGT()) goto loc_820EA190;
loc_820EA148:
	// li r31,0
	r31.s64 = 0;
loc_820EA14C:
	// cmplwi cr6,r31,3
	cr6.compare<uint32_t>(r31.u32, 3, xer);
	// bgt cr6,0x820ea188
	if (cr6.getGT()) goto loc_820EA188;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,19
	ctx.r4.s64 = 19;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ea188
	if (cr6.getEQ()) goto loc_820EA188;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,2
	cr6.compare<int32_t>(r31.s32, 2, xer);
	// blt cr6,0x820ea14c
	if (cr6.getLT()) goto loc_820EA14C;
	// b 0x820ea0d4
	goto loc_820EA0D4;
loc_820EA188:
	// cmpwi cr6,r31,2
	cr6.compare<int32_t>(r31.s32, 2, xer);
	// bge cr6,0x820ea0d4
	if (!cr6.getLT()) goto loc_820EA0D4;
loc_820EA190:
	// bl 0x82139380
	sub_82139380(ctx, base);
	// bl 0x82139390
	sub_82139390(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// addi r11,r11,-3
	r11.s64 = r11.s64 + -3;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820EA1B8"))) PPC_WEAK_FUNC(sub_820EA1B8);
PPC_FUNC_IMPL(__imp__sub_820EA1B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r31,0
	r31.s64 = 0;
loc_820EA1CC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// bl 0x820e9a28
	sub_820E9A28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ea200
	if (!cr6.getEQ()) goto loc_820EA200;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,4
	cr6.compare<int32_t>(r31.s32, 4, xer);
	// blt cr6,0x820ea1cc
	if (cr6.getLT()) goto loc_820EA1CC;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820EA200:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA218"))) PPC_WEAK_FUNC(sub_820EA218);
PPC_FUNC_IMPL(__imp__sub_820EA218) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r31,0
	r31.s64 = 0;
loc_820EA22C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// bl 0x820e9de0
	sub_820E9DE0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ea260
	if (!cr6.getEQ()) goto loc_820EA260;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,4
	cr6.compare<int32_t>(r31.s32, 4, xer);
	// blt cr6,0x820ea22c
	if (cr6.getLT()) goto loc_820EA22C;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820EA260:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA278"))) PPC_WEAK_FUNC(sub_820EA278);
PPC_FUNC_IMPL(__imp__sub_820EA278) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r31,0
	r31.s64 = 0;
loc_820EA28C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// bl 0x820ea048
	sub_820EA048(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ea2c0
	if (!cr6.getEQ()) goto loc_820EA2C0;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,4
	cr6.compare<int32_t>(r31.s32, 4, xer);
	// blt cr6,0x820ea28c
	if (cr6.getLT()) goto loc_820EA28C;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820EA2C0:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA2D8"))) PPC_WEAK_FUNC(sub_820EA2D8);
PPC_FUNC_IMPL(__imp__sub_820EA2D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lbz r11,796(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 796);
	// clrlwi r11,r11,29
	r11.u64 = r11.u32 & 0x7;
	// cmpw cr6,r11,r4
	cr6.compare<int32_t>(r11.s32, ctx.r4.s32, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lhz r11,796(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 796);
	// rlwimi r11,r4,8,21,23
	r11.u64 = (__builtin_rotateleft32(ctx.r4.u32, 8) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// sth r11,796(r3)
	PPC_STORE_U16(ctx.r3.u32 + 796, r11.u16);
	// b 0x82183fc8
	sub_82183FC8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820EA2F8"))) PPC_WEAK_FUNC(sub_820EA2F8);
PPC_FUNC_IMPL(__imp__sub_820EA2F8) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA300"))) PPC_WEAK_FUNC(sub_820EA300);
PPC_FUNC_IMPL(__imp__sub_820EA300) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r28,0
	r28.s64 = 0;
	// li r29,0
	r29.s64 = 0;
loc_820EA318:
	// li r31,0
	r31.s64 = 0;
loc_820EA31C:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820e96c8
	sub_820E96C8(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x820ea338
	if (!cr6.getEQ()) goto loc_820EA338;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_820EA338:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,3
	cr6.compare<int32_t>(r31.s32, 3, xer);
	// blt cr6,0x820ea31c
	if (cr6.getLT()) goto loc_820EA31C;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// cmpwi cr6,r29,20
	cr6.compare<int32_t>(r29.s32, 20, xer);
	// blt cr6,0x820ea318
	if (cr6.getLT()) goto loc_820EA318;
	// li r31,0
	r31.s64 = 0;
	// li r29,1
	r29.s64 = 1;
loc_820EA358:
	// li r3,80
	ctx.r3.s64 = 80;
	// bl 0x82136fa0
	sub_82136FA0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ea3b0
	if (!cr6.getEQ()) goto loc_820EA3B0;
	// cmplwi cr6,r31,19
	cr6.compare<uint32_t>(r31.u32, 19, xer);
	// bgt cr6,0x820ea3b4
	if (cr6.getGT()) goto loc_820EA3B4;
	// lbz r11,800(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 800);
	// slw r8,r29,r31
	ctx.r8.u64 = r31.u8 & 0x20 ? 0 : (r29.u32 << (r31.u8 & 0x3F));
	// lbz r10,799(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 799);
	// rotlwi r7,r11,8
	ctx.r7.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,798(r30)
	ctx.r9.u64 = PPC_LOAD_U8(r30.u32 + 798);
	// or r11,r7,r11
	r11.u64 = ctx.r7.u64 | r11.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// and r11,r11,r8
	r11.u64 = r11.u64 & ctx.r8.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ea3b4
	if (cr6.getEQ()) goto loc_820EA3B4;
loc_820EA3B0:
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_820EA3B4:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,20
	cr6.compare<int32_t>(r31.s32, 20, xer);
	// blt cr6,0x820ea358
	if (cr6.getLT()) goto loc_820EA358;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820e9a28
	sub_820E9A28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ea3d4
	if (cr6.getEQ()) goto loc_820EA3D4;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_820EA3D4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820e9de0
	sub_820E9DE0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ea3e8
	if (cr6.getEQ()) goto loc_820EA3E8;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_820EA3E8:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820ea048
	sub_820EA048(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ea3fc
	if (cr6.getEQ()) goto loc_820EA3FC;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_820EA3FC:
	// extsw r11,r28
	r11.s64 = r28.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,24564(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24564);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f0,2944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// ld r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820EA440"))) PPC_WEAK_FUNC(sub_820EA440);
PPC_FUNC_IMPL(__imp__sub_820EA440) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// addi r10,r1,136
	ctx.r10.s64 = ctx.r1.s64 + 136;
	// li r6,0
	ctx.r6.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823ed710
	sub_823ED710(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA488"))) PPC_WEAK_FUNC(sub_820EA488);
PPC_FUNC_IMPL(__imp__sub_820EA488) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// stb r3,4128(r11)
	PPC_STORE_U8(r11.u32 + 4128, ctx.r3.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA498"))) PPC_WEAK_FUNC(sub_820EA498);
PPC_FUNC_IMPL(__imp__sub_820EA498) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stw r3,-19560(r11)
	PPC_STORE_U32(r11.u32 + -19560, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA4A8"))) PPC_WEAK_FUNC(sub_820EA4A8);
PPC_FUNC_IMPL(__imp__sub_820EA4A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r11,r11,4056
	r11.s64 = r11.s64 + 4056;
	// li r10,15
	ctx.r10.s64 = 15;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_820EA4BC:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x820ea4bc
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820EA4BC;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA4D0"))) PPC_WEAK_FUNC(sub_820EA4D0);
PPC_FUNC_IMPL(__imp__sub_820EA4D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r10,r11,4056
	ctx.r10.s64 = r11.s64 + 4056;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_820EA4DC:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r9,r3
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r3.s32, xer);
	// beq cr6,0x820ea500
	if (cr6.getEQ()) goto loc_820EA500;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r9,r10,60
	ctx.r9.s64 = ctx.r10.s64 + 60;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x820ea4dc
	if (cr6.getLT()) goto loc_820EA4DC;
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_820EA500:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA508"))) PPC_WEAK_FUNC(sub_820EA508);
PPC_FUNC_IMPL(__imp__sub_820EA508) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// addi r8,r11,4056
	ctx.r8.s64 = r11.s64 + 4056;
	// li r3,-1
	ctx.r3.s64 = -1;
	// addi r10,r8,4
	ctx.r10.s64 = ctx.r8.s64 + 4;
loc_820EA51C:
	// lwz r11,-4(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// bne cr6,0x820ea538
	if (!cr6.getEQ()) goto loc_820EA538;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x820ea544
	goto loc_820EA544;
loc_820EA538:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820ea544
	if (cr6.getLT()) goto loc_820EA544;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EA544:
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// bne cr6,0x820ea560
	if (!cr6.getEQ()) goto loc_820EA560;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x820ea56c
	goto loc_820EA56C;
loc_820EA560:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820ea56c
	if (cr6.getLT()) goto loc_820EA56C;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EA56C:
	// lwz r11,4(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// bne cr6,0x820ea588
	if (!cr6.getEQ()) goto loc_820EA588;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x820ea594
	goto loc_820EA594;
loc_820EA588:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820ea594
	if (cr6.getLT()) goto loc_820EA594;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EA594:
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// bne cr6,0x820ea5b0
	if (!cr6.getEQ()) goto loc_820EA5B0;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x820ea5bc
	goto loc_820EA5BC;
loc_820EA5B0:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820ea5bc
	if (cr6.getLT()) goto loc_820EA5BC;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EA5BC:
	// lwz r11,12(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// bne cr6,0x820ea5d8
	if (!cr6.getEQ()) goto loc_820EA5D8;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x820ea5e4
	goto loc_820EA5E4;
loc_820EA5D8:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820ea5e4
	if (cr6.getLT()) goto loc_820EA5E4;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EA5E4:
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// addi r11,r8,64
	r11.s64 = ctx.r8.s64 + 64;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// blt cr6,0x820ea51c
	if (cr6.getLT()) goto loc_820EA51C;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA5F8"))) PPC_WEAK_FUNC(sub_820EA5F8);
PPC_FUNC_IMPL(__imp__sub_820EA5F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r10,r11,4056
	ctx.r10.s64 = r11.s64 + 4056;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_820EA608:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r9,r10,60
	ctx.r9.s64 = ctx.r10.s64 + 60;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x820ea608
	if (cr6.getLT()) goto loc_820EA608;
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA630"))) PPC_WEAK_FUNC(sub_820EA630);
PPC_FUNC_IMPL(__imp__sub_820EA630) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r3,4208(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4208);
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ea67c
	if (cr6.getEQ()) goto loc_820EA67C;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820EA67C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA698"))) PPC_WEAK_FUNC(sub_820EA698);
PPC_FUNC_IMPL(__imp__sub_820EA698) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r3,-19496(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -19496);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA6A8"))) PPC_WEAK_FUNC(sub_820EA6A8);
PPC_FUNC_IMPL(__imp__sub_820EA6A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lbz r11,4131(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 4131);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ea6e8
	if (cr6.getEQ()) goto loc_820EA6E8;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r9,r11,-19416
	ctx.r9.s64 = r11.s64 + -19416;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
loc_820EA6C8:
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r8,r3
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r3.s32, xer);
	// beq cr6,0x820ea6f0
	if (cr6.getEQ()) goto loc_820EA6F0;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r8,r9,12
	ctx.r8.s64 = ctx.r9.s64 + 12;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// ble cr6,0x820ea6c8
	if (!cr6.getGT()) goto loc_820EA6C8;
loc_820EA6E8:
	// li r3,-1
	ctx.r3.s64 = -1;
	// blr 
	return;
loc_820EA6F0:
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA6F8"))) PPC_WEAK_FUNC(sub_820EA6F8);
PPC_FUNC_IMPL(__imp__sub_820EA6F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r3,0
	ctx.r3.s64 = 0;
	// lbz r11,4131(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 4131);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-19416
	r11.s64 = r11.s64 + -19416;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// beq cr6,0x820ea724
	if (cr6.getEQ()) goto loc_820EA724;
	// li r3,1
	ctx.r3.s64 = 1;
loc_820EA724:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// beq cr6,0x820ea734
	if (cr6.getEQ()) goto loc_820EA734;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EA734:
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// beq cr6,0x820ea744
	if (cr6.getEQ()) goto loc_820EA744;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EA744:
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA758"))) PPC_WEAK_FUNC(sub_820EA758);
PPC_FUNC_IMPL(__imp__sub_820EA758) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	// mflr r12
	// bl 0x823ed130
	// li r11,5
	r11.s64 = 5;
	// li r3,-1
	ctx.r3.s64 = -1;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-112(r1)
	PPC_STORE_U32(ctx.r1.u32 + -112, r11.u32);
	// stw r11,-108(r1)
	PPC_STORE_U32(ctx.r1.u32 + -108, r11.u32);
	// stw r11,-104(r1)
	PPC_STORE_U32(ctx.r1.u32 + -104, r11.u32);
	// stw r11,-100(r1)
	PPC_STORE_U32(ctx.r1.u32 + -100, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stw r3,-96(r1)
	PPC_STORE_U32(ctx.r1.u32 + -96, ctx.r3.u32);
	// addi r7,r11,-19476
	ctx.r7.s64 = r11.s64 + -19476;
	// stw r3,-92(r1)
	PPC_STORE_U32(ctx.r1.u32 + -92, ctx.r3.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stw r3,-88(r1)
	PPC_STORE_U32(ctx.r1.u32 + -88, ctx.r3.u32);
	// stw r3,-84(r1)
	PPC_STORE_U32(ctx.r1.u32 + -84, ctx.r3.u32);
	// addi r6,r11,-19444
	ctx.r6.s64 = r11.s64 + -19444;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r4,r11,-19416
	ctx.r4.s64 = r11.s64 + -19416;
loc_820EA7AC:
	// lwzx r11,r5,r4
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + ctx.r4.u32);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x820ea7c4
	if (!cr6.getEQ()) goto loc_820EA7C4;
	// addi r11,r1,-80
	r11.s64 = ctx.r1.s64 + -80;
	// stwx r3,r5,r11
	PPC_STORE_U32(ctx.r5.u32 + r11.u32, ctx.r3.u32);
	// b 0x820ea800
	goto loc_820EA800;
loc_820EA7C4:
	// addi r10,r1,-80
	ctx.r10.s64 = ctx.r1.s64 + -80;
	// stwx r9,r5,r10
	PPC_STORE_U32(ctx.r5.u32 + ctx.r10.u32, ctx.r9.u32);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r7
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r7.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x820ea7e0
	if (!cr6.getLT()) goto loc_820EA7E0;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_820EA7E0:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r31,r1,-96
	r31.s64 = ctx.r1.s64 + -96;
	// addi r30,r1,-112
	r30.s64 = ctx.r1.s64 + -112;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// lwzx r11,r11,r6
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r6.u32);
	// stwx r10,r8,r31
	PPC_STORE_U32(ctx.r8.u32 + r31.u32, ctx.r10.u32);
	// stwx r11,r8,r30
	PPC_STORE_U32(ctx.r8.u32 + r30.u32, r11.u32);
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
loc_820EA800:
	// addi r5,r5,4
	ctx.r5.s64 = ctx.r5.s64 + 4;
	// cmpwi cr6,r5,12
	cr6.compare<int32_t>(ctx.r5.s32, 12, xer);
	// ble cr6,0x820ea7ac
	if (!cr6.getGT()) goto loc_820EA7AC;
	// addi r11,r1,-80
	r11.s64 = ctx.r1.s64 + -80;
	// addi r10,r1,-112
	ctx.r10.s64 = ctx.r1.s64 + -112;
	// addi r9,r1,-96
	ctx.r9.s64 = ctx.r1.s64 + -96;
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r5,4(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r3,8(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r31,0(r10)
	r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r30,4(r10)
	r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r29,8(r10)
	r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r28,0(r9)
	r28.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// lwz r27,4(r9)
	r27.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// lwz r26,8(r9)
	r26.u64 = PPC_LOAD_U32(ctx.r9.u32 + 8);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// lwz r9,12(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 12);
	// stw r8,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r8.u32);
	// stw r5,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r5.u32);
	// stw r3,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r3.u32);
	// stw r11,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, r11.u32);
	// stw r31,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r31.u32);
	// stw r30,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, r30.u32);
	// stw r29,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, r29.u32);
	// stw r10,12(r6)
	PPC_STORE_U32(ctx.r6.u32 + 12, ctx.r10.u32);
	// stw r28,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r28.u32);
	// stw r27,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, r27.u32);
	// stw r26,8(r7)
	PPC_STORE_U32(ctx.r7.u32 + 8, r26.u32);
	// stw r9,12(r7)
	PPC_STORE_U32(ctx.r7.u32 + 12, ctx.r9.u32);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820EA880"))) PPC_WEAK_FUNC(sub_820EA880);
PPC_FUNC_IMPL(__imp__sub_820EA880) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// addi r8,r11,-19416
	ctx.r8.s64 = r11.s64 + -19416;
	// rlwinm r7,r9,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r7,r8
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r8.u32);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x820ea934
	if (!cr6.getEQ()) goto loc_820EA934;
	// bl 0x820ea6f8
	sub_820EA6F8(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r6,r3,1
	ctx.r6.s64 = ctx.r3.s64 + 1;
	// stwx r3,r7,r8
	PPC_STORE_U32(ctx.r7.u32 + ctx.r8.u32, ctx.r3.u32);
	// addi r5,r11,-19476
	ctx.r5.s64 = r11.s64 + -19476;
loc_820EA8BC:
	// li r7,1
	ctx.r7.s64 = 1;
	// li r11,0
	r11.s64 = 0;
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// ble cr6,0x820ea91c
	if (!cr6.getGT()) goto loc_820EA91C;
	// mr r8,r5
	ctx.r8.u64 = ctx.r5.u64;
loc_820EA8D0:
	// cmpw cr6,r11,r3
	cr6.compare<int32_t>(r11.s32, ctx.r3.s32, xer);
	// beq cr6,0x820ea8f0
	if (cr6.getEQ()) goto loc_820EA8F0;
	// lwz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x820ea8e8
	if (!cr6.getLT()) goto loc_820EA8E8;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_820EA8E8:
	// cmpw cr6,r10,r9
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, xer);
	// beq cr6,0x820ea904
	if (cr6.getEQ()) goto loc_820EA904;
loc_820EA8F0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// cmpw cr6,r11,r6
	cr6.compare<int32_t>(r11.s32, ctx.r6.s32, xer);
	// blt cr6,0x820ea8d0
	if (cr6.getLT()) goto loc_820EA8D0;
	// b 0x820ea91c
	goto loc_820EA91C;
loc_820EA904:
	// addi r11,r9,1
	r11.s64 = ctx.r9.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// srawi r10,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r10.s64 = r11.s32 >> 2;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r9,r10,r11
	ctx.r9.s64 = r11.s64 - ctx.r10.s64;
loc_820EA91C:
	// clrlwi r11,r7,24
	r11.u64 = ctx.r7.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ea8bc
	if (cr6.getEQ()) goto loc_820EA8BC;
	// rlwinm r11,r3,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r9,r11,r5
	PPC_STORE_U32(r11.u32 + ctx.r5.u32, ctx.r9.u32);
	// bl 0x820ea758
	sub_820EA758(ctx, base);
loc_820EA934:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EA948"))) PPC_WEAK_FUNC(sub_820EA948);
PPC_FUNC_IMPL(__imp__sub_820EA948) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r4,r11,13952
	ctx.r4.s64 = r11.s64 + 13952;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,5
	ctx.r3.s64 = 5;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// stfs f0,4172(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 4172, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19536(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19536, temp.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19532(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19532, temp.u32);
	// li r11,-1
	r11.s64 = -1;
	// stw r11,-19620(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19620, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stfs f0,-19528(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19528, temp.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,-1
	r11.s64 = -1;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,3984(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3984, r11.u32);
	// li r11,-1
	r11.s64 = -1;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19600(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19600, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19596(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19596, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19592(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19592, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4140(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4140, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4044(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4044, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4012(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4012, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4048(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4048, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19548(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19548, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-19544(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19544, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4132(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4132, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-19540(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19540, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4176(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4176, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4180(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4180, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4184(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4184, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4188(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4188, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4192(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4192, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4200(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4200, r11.u32);
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,78
	ctx.r3.s64 = 78;
	// addi r4,r11,15312
	ctx.r4.s64 = r11.s64 + 15312;
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// li r3,277
	ctx.r3.s64 = 277;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// li r3,319
	ctx.r3.s64 = 319;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EAA98"))) PPC_WEAK_FUNC(sub_820EAA98);
PPC_FUNC_IMPL(__imp__sub_820EAA98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// add r10,r10,r4
	ctx.r10.u64 = ctx.r10.u64 + ctx.r4.u64;
	// addi r11,r11,3952
	r11.s64 = r11.s64 + 3952;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// b 0x820a4308
	sub_820A4308(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820EAAB8"))) PPC_WEAK_FUNC(sub_820EAAB8);
PPC_FUNC_IMPL(__imp__sub_820EAAB8) {
	PPC_FUNC_PROLOGUE();
	// b 0x820c9a78
	sub_820C9A78(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820EAAC0"))) PPC_WEAK_FUNC(sub_820EAAC0);
PPC_FUNC_IMPL(__imp__sub_820EAAC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// mr r27,r8
	r27.u64 = ctx.r8.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820eaba4
	if (cr6.getEQ()) goto loc_820EABA4;
	// clrlwi r11,r9,24
	r11.u64 = ctx.r9.u32 & 0xFF;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// lwz r4,-31556(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + -31556);
	// bne cr6,0x820eab4c
	if (!cr6.getEQ()) goto loc_820EAB4C;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f2,24788(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24788);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,24784(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24784);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// li r5,255
	ctx.r5.s64 = 255;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// b 0x820eaba0
	goto loc_820EABA0;
loc_820EAB4C:
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r10,r30
	ctx.r10.s64 = r30.s32;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// std r10,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r10.u64);
	// lfs f2,24788(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24788);
	ctx.f2.f64 = double(temp.f32);
	// lfd f0,104(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// li r5,255
	ctx.r5.s64 = 255;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
loc_820EABA0:
	// bl 0x8209b890
	sub_8209B890(ctx, base);
loc_820EABA4:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r10,r10,4236
	ctx.r10.s64 = ctx.r10.s64 + 4236;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-19120
	r11.s64 = r11.s64 + -19120;
	// stw r9,-4(r10)
	PPC_STORE_U32(ctx.r10.u32 + -4, ctx.r9.u32);
	// li r9,-1
	ctx.r9.s64 = -1;
	// lwz r8,-8(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + -8);
	// stw r30,-40(r11)
	PPC_STORE_U32(r11.u32 + -40, r30.u32);
	// stw r9,-16(r11)
	PPC_STORE_U32(r11.u32 + -16, ctx.r9.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r31,-36(r11)
	PPC_STORE_U32(r11.u32 + -36, r31.u32);
	// stw r29,-32(r11)
	PPC_STORE_U32(r11.u32 + -32, r29.u32);
	// stw r8,-4(r11)
	PPC_STORE_U32(r11.u32 + -4, ctx.r8.u32);
	// stw r27,-28(r11)
	PPC_STORE_U32(r11.u32 + -28, r27.u32);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r31,-24(r11)
	PPC_STORE_U32(r11.u32 + -24, r31.u32);
	// stw r28,-20(r11)
	PPC_STORE_U32(r11.u32 + -20, r28.u32);
	// stw r9,-8(r11)
	PPC_STORE_U32(r11.u32 + -8, ctx.r9.u32);
	// lwz r10,4008(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4008);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820eacc4
	if (!cr6.getEQ()) goto loc_820EACC4;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lwz r10,4000(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4000);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820eacc4
	if (!cr6.getEQ()) goto loc_820EACC4;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lwz r10,4004(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4004);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820eacc4
	if (!cr6.getEQ()) goto loc_820EACC4;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lwz r10,-19608(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -19608);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// bne cr6,0x820eacc4
	if (!cr6.getEQ()) goto loc_820EACC4;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// extsw r9,r31
	ctx.r9.s64 = r31.s32;
	// extsw r7,r29
	ctx.r7.s64 = r29.s32;
	// lwz r10,12452(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12452);
	// std r9,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r9.u64);
	// lfd f13,96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// std r7,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r7.u64);
	// lfd f12,88(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// std r10,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r10.u64);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// lfd f0,104(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f11,f0
	ctx.f11.f64 = double(float(f0.f64));
	// lfs f0,-19584(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -19584);
	f0.f64 = double(temp.f32);
	// fadds f0,f11,f0
	f0.f64 = double(float(ctx.f11.f64 + f0.f64));
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fdivs f0,f0,f12
	f0.f64 = double(float(f0.f64 / ctx.f12.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x820eacac
	if (!cr6.getLT()) goto loc_820EACAC;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed184
	return;
loc_820EACAC:
	// cmpw cr6,r10,r8
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r8.s32, xer);
	// blt cr6,0x820eaccc
	if (cr6.getLT()) goto loc_820EACCC;
	// addi r10,r8,-1
	ctx.r10.s64 = ctx.r8.s64 + -1;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed184
	return;
loc_820EACC4:
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_820EACCC:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820EACD8"))) PPC_WEAK_FUNC(sub_820EACD8);
PPC_FUNC_IMPL(__imp__sub_820EACD8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f29,-72(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -72, f29.u64);
	// stfd f30,-64(r1)
	PPC_STORE_U64(ctx.r1.u32 + -64, f30.u64);
	// stfd f31,-56(r1)
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39940
	ctx.r3.u64 = ctx.r3.u64 | 39940;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r31,0
	r31.s64 = 0;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// lis r30,-31991
	r30.s64 = -2096562176;
	// li r8,0
	ctx.r8.s64 = 0;
	// lfs f1,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	ctx.f1.f64 = double(temp.f32);
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// stw r31,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r31.u32);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r5,3880(r28)
	PPC_STORE_U32(r28.u32 + 3880, ctx.r5.u32);
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// stw r31,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// li r9,51
	ctx.r9.s64 = 51;
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// srawi r11,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r11.s64 = ctx.r10.s32 >> 1;
	// stw r9,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r9.u32);
	// addze r9,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r9.s64 = temp.s64;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// subfic r5,r9,409
	xer.ca = ctx.r9.u32 <= 409;
	ctx.r5.s64 = 409 - ctx.r9.s64;
	// lwz r11,4000(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4000);
	// stw r5,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r5.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ead80
	if (cr6.getEQ()) goto loc_820EAD80;
	// subf r11,r10,r5
	r11.s64 = ctx.r5.s64 - ctx.r10.s64;
	// li r7,50
	ctx.r7.s64 = 50;
	// li r6,117
	ctx.r6.s64 = 117;
	// li r4,51
	ctx.r4.s64 = 51;
	// addi r3,r11,1
	ctx.r3.s64 = r11.s64 + 1;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820EAD80:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x8213e380
	sub_8213E380(ctx, base);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subfic r11,r11,84
	xer.ca = r11.u32 <= 84;
	r11.s64 = 84 - r11.s64;
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r5,3880(r28)
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + 3880);
	// addi r4,r1,140
	ctx.r4.s64 = ctx.r1.s64 + 140;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8213e380
	sub_8213E380(ctx, base);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r11,r11,28184
	r11.s64 = r11.s64 + 28184;
	// lfs f31,-14796(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -14796);
	f31.f64 = double(temp.f32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r3,r11,400
	ctx.r3.s64 = r11.s64 + 400;
	// lfs f30,-14800(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -14800);
	f30.f64 = double(temp.f32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lfs f29,-14804(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -14804);
	f29.f64 = double(temp.f32);
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f7,f31
	ctx.fpscr.disableFlushMode();
	ctx.f7.f64 = f31.f64;
	// li r10,2
	ctx.r10.s64 = 2;
	// fmr f6,f30
	ctx.f6.f64 = f30.f64;
	// li r9,1
	ctx.r9.s64 = 1;
	// fmr f5,f29
	ctx.f5.f64 = f29.f64;
	// lfs f11,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f11.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f10,f11
	ctx.f10.f64 = ctx.f11.f64;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// fmr f4,f11
	ctx.f4.f64 = ctx.f11.f64;
	// fmr f3,f11
	ctx.f3.f64 = ctx.f11.f64;
	// fmr f2,f11
	ctx.f2.f64 = ctx.f11.f64;
	// lfs f9,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f9.f64 = double(temp.f32);
	// fmr f1,f11
	ctx.f1.f64 = ctx.f11.f64;
	// fmr f8,f9
	ctx.f8.f64 = ctx.f9.f64;
	// bl 0x82099388
	sub_82099388(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-72(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f30,-64(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// lfd f31,-56(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820EAE68"))) PPC_WEAK_FUNC(sub_820EAE68);
PPC_FUNC_IMPL(__imp__sub_820EAE68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f29,-80(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -80, f29.u64);
	// stfd f30,-72(r1)
	PPC_STORE_U64(ctx.r1.u32 + -72, f30.u64);
	// stfd f31,-64(r1)
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39941
	ctx.r3.u64 = ctx.r3.u64 | 39941;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r31,0
	r31.s64 = 0;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// lis r30,-31991
	r30.s64 = -2096562176;
	// li r8,0
	ctx.r8.s64 = 0;
	// lfs f1,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	ctx.f1.f64 = double(temp.f32);
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// stw r31,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r31.u32);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r5,3540(r28)
	PPC_STORE_U32(r28.u32 + 3540, ctx.r5.u32);
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// stw r31,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// li r9,144
	ctx.r9.s64 = 144;
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// srawi r11,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r11.s64 = ctx.r10.s32 >> 1;
	// stw r9,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r9.u32);
	// addze r9,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r9.s64 = temp.s64;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// subfic r5,r9,409
	xer.ca = ctx.r9.u32 <= 409;
	ctx.r5.s64 = 409 - ctx.r9.s64;
	// lwz r11,4004(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4004);
	// stw r5,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r5.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820eaf14
	if (cr6.getEQ()) goto loc_820EAF14;
	// subf r11,r10,r5
	r11.s64 = ctx.r5.s64 - ctx.r10.s64;
	// li r7,50
	ctx.r7.s64 = 50;
	// li r6,210
	ctx.r6.s64 = 210;
	// li r4,144
	ctx.r4.s64 = 144;
	// addi r3,r11,1
	ctx.r3.s64 = r11.s64 + 1;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820EAF14:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x8213e380
	sub_8213E380(ctx, base);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subfic r11,r11,177
	xer.ca = r11.u32 <= 177;
	r11.s64 = 177 - r11.s64;
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r5,3540(r28)
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + 3540);
	// addi r4,r1,140
	ctx.r4.s64 = ctx.r1.s64 + 140;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8213e380
	sub_8213E380(ctx, base);
	// clrlwi r11,r27,24
	r11.u64 = r27.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820eaff4
	if (cr6.getEQ()) goto loc_820EAFF4;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r11,r11,28184
	r11.s64 = r11.s64 + 28184;
	// lfs f31,-14784(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -14784);
	f31.f64 = double(temp.f32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r3,r11,400
	ctx.r3.s64 = r11.s64 + 400;
	// lfs f30,-14788(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -14788);
	f30.f64 = double(temp.f32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lfs f29,-14792(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -14792);
	f29.f64 = double(temp.f32);
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f7,f31
	ctx.fpscr.disableFlushMode();
	ctx.f7.f64 = f31.f64;
	// li r10,2
	ctx.r10.s64 = 2;
	// fmr f6,f30
	ctx.f6.f64 = f30.f64;
	// li r9,1
	ctx.r9.s64 = 1;
	// fmr f5,f29
	ctx.f5.f64 = f29.f64;
	// lfs f11,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f11.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f10,f11
	ctx.f10.f64 = ctx.f11.f64;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// fmr f4,f11
	ctx.f4.f64 = ctx.f11.f64;
	// fmr f3,f11
	ctx.f3.f64 = ctx.f11.f64;
	// fmr f2,f11
	ctx.f2.f64 = ctx.f11.f64;
	// lfs f9,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f9.f64 = double(temp.f32);
	// fmr f1,f11
	ctx.f1.f64 = ctx.f11.f64;
	// fmr f8,f9
	ctx.f8.f64 = ctx.f9.f64;
	// bl 0x82099388
	sub_82099388(ctx, base);
loc_820EAFF4:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-80(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f30,-72(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820EB008"))) PPC_WEAK_FUNC(sub_820EB008);
PPC_FUNC_IMPL(__imp__sub_820EB008) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r9,r11,-19088
	ctx.r9.s64 = r11.s64 + -19088;
	// addi r11,r9,8
	r11.s64 = ctx.r9.s64 + 8;
loc_820EB018:
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r8,r3
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r3.s32, xer);
	// beq cr6,0x820eb040
	if (cr6.getEQ()) goto loc_820EB040;
	// addi r11,r11,28
	r11.s64 = r11.s64 + 28;
	// addi r8,r9,848
	ctx.r8.s64 = ctx.r9.s64 + 848;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// blt cr6,0x820eb018
	if (cr6.getLT()) goto loc_820EB018;
	// li r3,-1
	ctx.r3.s64 = -1;
	// blr 
	return;
loc_820EB040:
	// mulli r11,r10,28
	r11.s64 = ctx.r10.s64 * 28;
	// addi r10,r9,20
	ctx.r10.s64 = ctx.r9.s64 + 20;
	// lwzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EB050"))) PPC_WEAK_FUNC(sub_820EB050);
PPC_FUNC_IMPL(__imp__sub_820EB050) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r16{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bgtlr cr6
	if (cr6.getGT()) return;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,-20360
	r12.s64 = r12.s64 + -20360;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820EB088;
	case 1:
		goto loc_820EB094;
	case 2:
		goto loc_820EB0A0;
	case 3:
		goto loc_820EB0AC;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-20344(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -20344);
	// lwz r16,-20332(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -20332);
	// lwz r16,-20320(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -20320);
	// lwz r16,-20308(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -20308);
loc_820EB088:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39955
	ctx.r3.u64 = ctx.r3.u64 | 39955;
	// b 0x82136ad8
	sub_82136AD8(ctx, base);
	return;
loc_820EB094:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39956
	ctx.r3.u64 = ctx.r3.u64 | 39956;
	// b 0x82136ad8
	sub_82136AD8(ctx, base);
	return;
loc_820EB0A0:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39957
	ctx.r3.u64 = ctx.r3.u64 | 39957;
	// b 0x82136ad8
	sub_82136AD8(ctx, base);
	return;
loc_820EB0AC:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39958
	ctx.r3.u64 = ctx.r3.u64 | 39958;
	// b 0x82136ad8
	sub_82136AD8(ctx, base);
	return;
	// blr 
	return;
	// .long 0x0
}

__attribute__((alias("__imp__sub_820EB0C0"))) PPC_WEAK_FUNC(sub_820EB0C0);
PPC_FUNC_IMPL(__imp__sub_820EB0C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r30,0
	r30.s64 = 0;
	// li r29,0
	r29.s64 = 0;
	// li r31,1
	r31.s64 = 1;
	// addi r28,r11,3544
	r28.s64 = r11.s64 + 3544;
loc_820EB0E0:
	// lbzx r11,r31,r28
	r11.u64 = PPC_LOAD_U8(r31.u32 + r28.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820eb104
	if (cr6.getEQ()) goto loc_820EB104;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r30,1
	r30.s64 = 1;
	// bl 0x82136f50
	sub_82136F50(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820eb104
	if (cr6.getEQ()) goto loc_820EB104;
	// li r29,1
	r29.s64 = 1;
loc_820EB104:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,81
	cr6.compare<int32_t>(r31.s32, 81, xer);
	// blt cr6,0x820eb0e0
	if (cr6.getLT()) goto loc_820EB0E0;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// stw r30,4024(r11)
	PPC_STORE_U32(r11.u32 + 4024, r30.u32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// stw r29,4028(r11)
	PPC_STORE_U32(r11.u32 + 4028, r29.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820EB128"))) PPC_WEAK_FUNC(sub_820EB128);
PPC_FUNC_IMPL(__imp__sub_820EB128) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r16{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r3,0
	ctx.r3.s64 = 0;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r9,r11,3544
	ctx.r9.s64 = r11.s64 + 3544;
	// li r8,1
	ctx.r8.s64 = 1;
loc_820EB13C:
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bgt cr6,0x820eb198
	if (cr6.getGT()) goto loc_820EB198;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,-20132
	r12.s64 = r12.s64 + -20132;
	// rlwinm r0,r10,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_820EB170;
	case 1:
		goto loc_820EB178;
	case 2:
		goto loc_820EB180;
	case 3:
		goto loc_820EB188;
	case 4:
		goto loc_820EB190;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-20112(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -20112);
	// lwz r16,-20104(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -20104);
	// lwz r16,-20096(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -20096);
	// lwz r16,-20088(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -20088);
	// lwz r16,-20080(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -20080);
loc_820EB170:
	// li r11,11
	r11.s64 = 11;
	// b 0x820eb19c
	goto loc_820EB19C;
loc_820EB178:
	// li r11,12
	r11.s64 = 12;
	// b 0x820eb19c
	goto loc_820EB19C;
loc_820EB180:
	// li r11,15
	r11.s64 = 15;
	// b 0x820eb19c
	goto loc_820EB19C;
loc_820EB188:
	// li r11,23
	r11.s64 = 23;
	// b 0x820eb19c
	goto loc_820EB19C;
loc_820EB190:
	// li r11,24
	r11.s64 = 24;
	// b 0x820eb19c
	goto loc_820EB19C;
loc_820EB198:
	// li r11,0
	r11.s64 = 0;
loc_820EB19C:
	// lbzx r11,r11,r9
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r9.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820eb1b0
	if (cr6.getEQ()) goto loc_820EB1B0;
	// slw r11,r8,r10
	r11.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r10.u8 & 0x3F));
	// or r3,r11,r3
	ctx.r3.u64 = r11.u64 | ctx.r3.u64;
loc_820EB1B0:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r10,5
	cr6.compare<int32_t>(ctx.r10.s32, 5, xer);
	// blt cr6,0x820eb13c
	if (cr6.getLT()) goto loc_820EB13C;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EB1C0"))) PPC_WEAK_FUNC(sub_820EB1C0);
PPC_FUNC_IMPL(__imp__sub_820EB1C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r16{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r8,r11,3544
	ctx.r8.s64 = r11.s64 + 3544;
	// li r10,80
	ctx.r10.s64 = 80;
	// addi r11,r8,1
	r11.s64 = ctx.r8.s64 + 1;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_820EB1D8:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x820eb1d8
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820EB1D8;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r11,4024(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4024, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4028(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4028, r11.u32);
	// li r10,0
	ctx.r10.s64 = 0;
loc_820EB200:
	// slw r11,r9,r10
	r11.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r9.u32 << (ctx.r10.u8 & 0x3F));
	// and r11,r11,r3
	r11.u64 = r11.u64 & ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820eb274
	if (cr6.getEQ()) goto loc_820EB274;
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bgt cr6,0x820eb26c
	if (cr6.getGT()) goto loc_820EB26C;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,-19920
	r12.s64 = r12.s64 + -19920;
	// rlwinm r0,r10,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_820EB244;
	case 1:
		goto loc_820EB24C;
	case 2:
		goto loc_820EB254;
	case 3:
		goto loc_820EB25C;
	case 4:
		goto loc_820EB264;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-19900(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -19900);
	// lwz r16,-19892(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -19892);
	// lwz r16,-19884(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -19884);
	// lwz r16,-19876(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -19876);
	// lwz r16,-19868(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -19868);
loc_820EB244:
	// li r11,11
	r11.s64 = 11;
	// b 0x820eb270
	goto loc_820EB270;
loc_820EB24C:
	// li r11,12
	r11.s64 = 12;
	// b 0x820eb270
	goto loc_820EB270;
loc_820EB254:
	// li r11,15
	r11.s64 = 15;
	// b 0x820eb270
	goto loc_820EB270;
loc_820EB25C:
	// li r11,23
	r11.s64 = 23;
	// b 0x820eb270
	goto loc_820EB270;
loc_820EB264:
	// li r11,24
	r11.s64 = 24;
	// b 0x820eb270
	goto loc_820EB270;
loc_820EB26C:
	// li r11,0
	r11.s64 = 0;
loc_820EB270:
	// stbx r9,r11,r8
	PPC_STORE_U8(r11.u32 + ctx.r8.u32, ctx.r9.u8);
loc_820EB274:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r10,5
	cr6.compare<int32_t>(ctx.r10.s32, 5, xer);
	// blt cr6,0x820eb200
	if (cr6.getLT()) goto loc_820EB200;
	// b 0x820eb0c0
	sub_820EB0C0(ctx, base);
	return;
	// .long 0x0
}

__attribute__((alias("__imp__sub_820EB288"))) PPC_WEAK_FUNC(sub_820EB288);
PPC_FUNC_IMPL(__imp__sub_820EB288) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f9,2688(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	ctx.f9.f64 = double(temp.f32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lwz r11,4012(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4012);
	// fmr f7,f9
	ctx.f7.f64 = ctx.f9.f64;
	// addi r30,r10,-19632
	r30.s64 = ctx.r10.s64 + -19632;
	// fmr f6,f9
	ctx.f6.f64 = ctx.f9.f64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r9,r30,4
	ctx.r9.s64 = r30.s64 + 4;
	// lfs f8,2776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	ctx.f8.f64 = double(temp.f32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lfs f0,-14776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -14776);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,24792(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 24792);
	ctx.f13.f64 = double(temp.f32);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// fadds f3,f0,f13
	ctx.f3.f64 = double(float(f0.f64 + ctx.f13.f64));
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f13,r11,r30
	temp.u32 = PPC_LOAD_U32(r11.u32 + r30.u32);
	ctx.f13.f64 = double(temp.f32);
	// lfsx f12,r11,r9
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lfs f0,12456(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12456);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// fadds f4,f13,f0
	ctx.f4.f64 = double(float(ctx.f13.f64 + f0.f64));
	// lfs f0,-14780(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14780);
	f0.f64 = double(temp.f32);
	// fadds f5,f12,f0
	ctx.f5.f64 = double(float(ctx.f12.f64 + f0.f64));
	// fmr f1,f4
	ctx.f1.f64 = ctx.f4.f64;
	// fmr f2,f5
	ctx.f2.f64 = ctx.f5.f64;
	// bl 0x8210bf20
	sub_8210BF20(ctx, base);
	// lwz r11,4012(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4012);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x8210c818
	sub_8210C818(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lfs f1,12900(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12900);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bcc8
	sub_8210BCC8(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820EB358"))) PPC_WEAK_FUNC(sub_820EB358);
PPC_FUNC_IMPL(__imp__sub_820EB358) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r12,r1,-24
	r12.s64 = ctx.r1.s64 + -24;
	// bl 0x823ed548
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// fmr f31,f2
	f31.f64 = ctx.f2.f64;
	// mr r31,r7
	r31.u64 = ctx.r7.u64;
	// addi r3,r11,26520
	ctx.r3.s64 = r11.s64 + 26520;
	// fmr f29,f3
	f29.f64 = ctx.f3.f64;
	// fmr f28,f4
	f28.f64 = ctx.f4.f64;
	// mr r30,r8
	r30.u64 = ctx.r8.u64;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// bl 0x82096fb0
	sub_82096FB0(ctx, base);
	// rlwinm r11,r31,24,0,7
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 24) & 0xFF000000;
	// rlwinm r10,r31,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 24) & 0xFFFFFF;
	// or r30,r11,r10
	r30.u64 = r11.u64 | ctx.r10.u64;
	// bl 0x82096160
	sub_82096160(ctx, base);
	// li r5,2
	ctx.r5.s64 = 2;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8239bf98
	sub_8239BF98(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fadds f11,f31,f28
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = double(float(f31.f64 + f28.f64));
	// fadds f9,f30,f29
	ctx.f9.f64 = double(float(f30.f64 + f29.f64));
	// stfs f30,0(r10)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f31,4(r10)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfs f13,-14768(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14768);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// fadds f8,f13,f30
	ctx.f8.f64 = double(float(ctx.f13.f64 + f30.f64));
	// fsubs f5,f9,f13
	ctx.f5.f64 = double(float(ctx.f9.f64 - ctx.f13.f64));
	// stfs f0,8(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 8, temp.u32);
	// lfs f12,-14772(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14772);
	ctx.f12.f64 = double(temp.f32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// fmuls f7,f12,f13
	ctx.f7.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// fmuls f10,f12,f28
	ctx.f10.f64 = double(float(ctx.f12.f64 * f28.f64));
	// fsubs f13,f29,f13
	ctx.f13.f64 = double(float(f29.f64 - ctx.f13.f64));
	// fmuls f6,f12,f29
	ctx.f6.f64 = double(float(ctx.f12.f64 * f29.f64));
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// fmuls f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64));
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f0,0(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,4(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f8,0(r11)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f11,4(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f7,0(r11)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f10,4(r11)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f9,0(r11)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f31,4(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f6,0(r11)
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,4(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f8,0(r11)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f11,4(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f7,0(r11)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f10,4(r11)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f5,0(r11)
	temp.f32 = float(ctx.f5.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f11,4(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f13,0(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f10,4(r11)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f9,0(r11)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f31,4(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f6,0(r11)
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,4(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x8239c170
	sub_8239C170(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// addi r12,r1,-24
	r12.s64 = ctx.r1.s64 + -24;
	// bl 0x823ed594
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EB5E8"))) PPC_WEAK_FUNC(sub_820EB5E8);
PPC_FUNC_IMPL(__imp__sub_820EB5E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,-1
	r11.s64 = -1;
	// lis r30,-32141
	r30.s64 = -2106392576;
	// stw r11,-19608(r30)
	PPC_STORE_U32(r30.u32 + -19608, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f12,-19584(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-14752(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14752);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f12,f0
	cr6.compare(ctx.f12.f64, f0.f64);
	// bge cr6,0x820eb680
	if (!cr6.getLT()) goto loc_820EB680;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f13,-19588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-14756(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14756);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x820eb680
	if (!cr6.getLT()) goto loc_820EB680;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r31,0
	r31.s64 = 0;
	// lfs f0,-14760(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14760);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f12,f0
	cr6.compare(ctx.f12.f64, f0.f64);
	// blt cr6,0x820eb650
	if (cr6.getLT()) goto loc_820EB650;
	// li r31,2
	r31.s64 = 2;
loc_820EB650:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-14764(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14764);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x820eb664
	if (!cr6.getGT()) goto loc_820EB664;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_820EB664:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820ca3e8
	sub_820CA3E8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820eb678
	if (cr6.getEQ()) goto loc_820EB678;
	// stw r31,-19608(r30)
	PPC_STORE_U32(r30.u32 + -19608, r31.u32);
loc_820EB678:
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x820eb684
	goto loc_820EB684;
loc_820EB680:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820EB684:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EB6A0"))) PPC_WEAK_FUNC(sub_820EB6A0);
PPC_FUNC_IMPL(__imp__sub_820EB6A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r11,r11,-19088
	r11.s64 = r11.s64 + -19088;
	// lhz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820eb6e4
	if (cr6.getEQ()) goto loc_820EB6E4;
	// li r10,0
	ctx.r10.s64 = 0;
loc_820EB6BC:
	// addi r8,r11,20
	ctx.r8.s64 = r11.s64 + 20;
	// lwzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// cmpw cr6,r10,r3
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r3.s32, xer);
	// beq cr6,0x820eb6ec
	if (cr6.getEQ()) goto loc_820EB6EC;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r8,r11,4
	ctx.r8.s64 = r11.s64 + 4;
	// mulli r10,r9,28
	ctx.r10.s64 = ctx.r9.s64 * 28;
	// lhzx r8,r10,r8
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r8.u32);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x820eb6bc
	if (!cr6.getEQ()) goto loc_820EB6BC;
loc_820EB6E4:
	// li r3,-1
	ctx.r3.s64 = -1;
	// blr 
	return;
loc_820EB6EC:
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EB6F8"))) PPC_WEAK_FUNC(sub_820EB6F8);
PPC_FUNC_IMPL(__imp__sub_820EB6F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820eb728
	if (cr6.getEQ()) goto loc_820EB728;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x820eb728
	if (cr6.getEQ()) goto loc_820EB728;
	// cmpwi cr6,r28,1
	cr6.compare<int32_t>(r28.s32, 1, xer);
	// bne cr6,0x820eb7f0
	if (!cr6.getEQ()) goto loc_820EB7F0;
loc_820EB728:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820eb6a0
	sub_820EB6A0(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mulli r10,r3,28
	ctx.r10.s64 = ctx.r3.s64 * 28;
	// addi r11,r11,-19088
	r11.s64 = r11.s64 + -19088;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820eb7f0
	if (cr6.getLT()) goto loc_820EB7F0;
	// li r31,2
	r31.s64 = 2;
	// bl 0x820ea630
	sub_820EA630(ctx, base);
	// bl 0x820e9220
	sub_820E9220(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820eb76c
	if (!cr6.getEQ()) goto loc_820EB76C;
	// bl 0x82139370
	sub_82139370(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820eb770
	if (cr6.getEQ()) goto loc_820EB770;
loc_820EB76C:
	// li r31,3
	r31.s64 = 3;
loc_820EB770:
	// mr r30,r31
	r30.u64 = r31.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x820eb7f0
	if (cr6.getLT()) goto loc_820EB7F0;
	// lis r27,-32010
	r27.s64 = -2097807360;
	// lis r29,-32010
	r29.s64 = -2097807360;
loc_820EB784:
	// lwz r3,4208(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 4208);
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820eb7ac
	if (cr6.getEQ()) goto loc_820EB7AC;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// b 0x820eb7b0
	goto loc_820EB7B0;
loc_820EB7AC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_820EB7B0:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x820e96c8
	sub_820E96C8(ctx, base);
	// lwz r11,4024(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4024);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820eb7dc
	if (!cr6.getEQ()) goto loc_820EB7DC;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820eb7e4
	if (cr6.getEQ()) goto loc_820EB7E4;
loc_820EB7D0:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820EB7DC:
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x820eb7d0
	if (cr6.getEQ()) goto loc_820EB7D0;
loc_820EB7E4:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bge cr6,0x820eb784
	if (!cr6.getLT()) goto loc_820EB784;
loc_820EB7F0:
	// li r3,-1
	ctx.r3.s64 = -1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820EB800"))) PPC_WEAK_FUNC(sub_820EB800);
PPC_FUNC_IMPL(__imp__sub_820EB800) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r3,-19420(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -19420);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EB810"))) PPC_WEAK_FUNC(sub_820EB810);
PPC_FUNC_IMPL(__imp__sub_820EB810) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19420(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19420);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x820eb838
	if (cr6.getLT()) goto loc_820EB838;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// blt cr6,0x820eb830
	if (cr6.getLT()) goto loc_820EB830;
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
loc_820EB830:
	// li r3,2
	ctx.r3.s64 = 2;
	// blr 
	return;
loc_820EB838:
	// li r3,4
	ctx.r3.s64 = 4;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EB840"))) PPC_WEAK_FUNC(sub_820EB840);
PPC_FUNC_IMPL(__imp__sub_820EB840) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820eb868
	if (cr6.getEQ()) goto loc_820EB868;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820ea2d8
	sub_820EA2D8(ctx, base);
loc_820EB868:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EB880"))) PPC_WEAK_FUNC(sub_820EB880);
PPC_FUNC_IMPL(__imp__sub_820EB880) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820eb8ac
	if (cr6.getEQ()) goto loc_820EB8AC;
	// bl 0x820e9148
	sub_820E9148(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820EB8AC:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EB8C0"))) PPC_WEAK_FUNC(sub_820EB8C0);
PPC_FUNC_IMPL(__imp__sub_820EB8C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r30,0
	r30.s64 = 0;
	// addi r29,r11,-1360
	r29.s64 = r11.s64 + -1360;
	// lis r28,-32141
	r28.s64 = -2106392576;
	// addi r31,r29,107
	r31.s64 = r29.s64 + 107;
loc_820EB8E0:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820c2cc0
	sub_820C2CC0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820eb904
	if (cr6.getEQ()) goto loc_820EB904;
	// lbz r11,-19523(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + -19523);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x820eb908
	if (cr6.getEQ()) goto loc_820EB908;
loc_820EB904:
	// li r11,0
	r11.s64 = 0;
loc_820EB908:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stb r11,-1(r31)
	PPC_STORE_U8(r31.u32 + -1, r11.u8);
	// bl 0x820c2e88
	sub_820C2E88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820eb930
	if (cr6.getEQ()) goto loc_820EB930;
	// lbz r11,-19523(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + -19523);
	// rlwinm r11,r11,0,28,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x820eb934
	if (cr6.getEQ()) goto loc_820EB934;
loc_820EB930:
	// li r11,0
	r11.s64 = 0;
loc_820EB934:
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// addi r31,r31,112
	r31.s64 = r31.s64 + 112;
	// addi r11,r29,555
	r11.s64 = r29.s64 + 555;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x820eb8e0
	if (cr6.getLT()) goto loc_820EB8E0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820EB958"))) PPC_WEAK_FUNC(sub_820EB958);
PPC_FUNC_IMPL(__imp__sub_820EB958) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,64
	r11.s64 = 64;
	// stw r11,-19480(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19480, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EB968"))) PPC_WEAK_FUNC(sub_820EB968);
PPC_FUNC_IMPL(__imp__sub_820EB968) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-19476
	r11.s64 = r11.s64 + -19476;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x820eb984
	if (!cr6.getLT()) goto loc_820EB984;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
loc_820EB984:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r10,r10,-17792
	ctx.r10.s64 = ctx.r10.s64 + -17792;
	// addi r9,r10,6
	ctx.r9.s64 = ctx.r10.s64 + 6;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + ctx.r9.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EB9A8"))) PPC_WEAK_FUNC(sub_820EB9A8);
PPC_FUNC_IMPL(__imp__sub_820EB9A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-19476
	r11.s64 = r11.s64 + -19476;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x820eb9c4
	if (!cr6.getLT()) goto loc_820EB9C4;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
loc_820EB9C4:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r10,r10,-17792
	ctx.r10.s64 = ctx.r10.s64 + -17792;
	// addi r9,r10,3
	ctx.r9.s64 = ctx.r10.s64 + 3;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + ctx.r9.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EB9E8"))) PPC_WEAK_FUNC(sub_820EB9E8);
PPC_FUNC_IMPL(__imp__sub_820EB9E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-19476
	r11.s64 = r11.s64 + -19476;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x820eba04
	if (!cr6.getLT()) goto loc_820EBA04;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
loc_820EBA04:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r10,r10,-17792
	ctx.r10.s64 = ctx.r10.s64 + -17792;
	// addi r9,r10,2
	ctx.r9.s64 = ctx.r10.s64 + 2;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + ctx.r9.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EBA28"))) PPC_WEAK_FUNC(sub_820EBA28);
PPC_FUNC_IMPL(__imp__sub_820EBA28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-19476
	r11.s64 = r11.s64 + -19476;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x820eba44
	if (!cr6.getLT()) goto loc_820EBA44;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
loc_820EBA44:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r10,r10,-17792
	ctx.r10.s64 = ctx.r10.s64 + -17792;
	// addi r9,r10,4
	ctx.r9.s64 = ctx.r10.s64 + 4;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + ctx.r9.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EBA68"))) PPC_WEAK_FUNC(sub_820EBA68);
PPC_FUNC_IMPL(__imp__sub_820EBA68) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// rlwinm r9,r3,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-19444
	r11.s64 = r11.s64 + -19444;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r10,r10,-17024
	ctx.r10.s64 = ctx.r10.s64 + -17024;
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lfsx f1,r11,r10
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EBA90"))) PPC_WEAK_FUNC(sub_820EBA90);
PPC_FUNC_IMPL(__imp__sub_820EBA90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lbz r11,-19523(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -19523);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EBAA0"))) PPC_WEAK_FUNC(sub_820EBAA0);
PPC_FUNC_IMPL(__imp__sub_820EBAA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-19476
	r11.s64 = r11.s64 + -19476;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x820ebabc
	if (!cr6.getLT()) goto loc_820EBABC;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
loc_820EBABC:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lbz r10,-19523(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + -19523);
	// rlwinm r10,r10,0,26,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820ebadc
	if (!cr6.getEQ()) goto loc_820EBADC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
loc_820EBADC:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r10,r10,-17792
	ctx.r10.s64 = ctx.r10.s64 + -17792;
	// addi r9,r10,8
	ctx.r9.s64 = ctx.r10.s64 + 8;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f1,r11,r9
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EBB00"))) PPC_WEAK_FUNC(sub_820EBB00);
PPC_FUNC_IMPL(__imp__sub_820EBB00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r10,r10,-18248
	ctx.r10.s64 = ctx.r10.s64 + -18248;
	// lwz r11,-19424(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19424);
	// addi r9,r10,4
	ctx.r9.s64 = ctx.r10.s64 + 4;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EBB28"))) PPC_WEAK_FUNC(sub_820EBB28);
PPC_FUNC_IMPL(__imp__sub_820EBB28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r9,-30584
	ctx.r9.s64 = -2004353024;
	// addi r10,r10,-18248
	ctx.r10.s64 = ctx.r10.s64 + -18248;
	// ori r9,r9,34953
	ctx.r9.u64 = ctx.r9.u64 | 34953;
	// lwz r11,-19424(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19424);
	// addi r8,r10,4
	ctx.r8.s64 = ctx.r10.s64 + 4;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r8
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// mulhw r10,r11,r9
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(ctx.r9.s32)) >> 32;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mulli r3,r11,1000
	ctx.r3.s64 = r11.s64 * 1000;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EBB70"))) PPC_WEAK_FUNC(sub_820EBB70);
PPC_FUNC_IMPL(__imp__sub_820EBB70) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r10,r10,-18248
	ctx.r10.s64 = ctx.r10.s64 + -18248;
	// lwz r11,-19424(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19424);
	// addi r9,r10,8
	ctx.r9.s64 = ctx.r10.s64 + 8;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EBB98"))) PPC_WEAK_FUNC(sub_820EBB98);
PPC_FUNC_IMPL(__imp__sub_820EBB98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19604(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19604);
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EBBB0"))) PPC_WEAK_FUNC(sub_820EBBB0);
PPC_FUNC_IMPL(__imp__sub_820EBBB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820ebbdc
	if (!cr6.getEQ()) goto loc_820EBBDC;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lbz r11,4240(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 4240);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x820ebbe0
	if (!cr6.getEQ()) goto loc_820EBBE0;
loc_820EBBDC:
	// li r11,0
	r11.s64 = 0;
loc_820EBBE0:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EBBF8"))) PPC_WEAK_FUNC(sub_820EBBF8);
PPC_FUNC_IMPL(__imp__sub_820EBBF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19604(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19604);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820ebc1c
	if (!cr6.getEQ()) goto loc_820EBC1C;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4020(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4020);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x820ebc20
	if (!cr6.getEQ()) goto loc_820EBC20;
loc_820EBC1C:
	// li r11,0
	r11.s64 = 0;
loc_820EBC20:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EBC28"))) PPC_WEAK_FUNC(sub_820EBC28);
PPC_FUNC_IMPL(__imp__sub_820EBC28) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// addi r12,r1,-56
	r12.s64 = ctx.r1.s64 + -56;
	// bl 0x823ed53c
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r7
	r29.u64 = ctx.r7.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r31,r8
	r31.u64 = ctx.r8.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ebc74
	if (cr6.getEQ()) goto loc_820EBC74;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// li r11,110
	r11.s64 = 110;
	// beq cr6,0x820ebc78
	if (cr6.getEQ()) goto loc_820EBC78;
loc_820EBC74:
	// li r11,255
	r11.s64 = 255;
loc_820EBC78:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// subf r10,r31,r27
	ctx.r10.s64 = r27.s64 - r31.s64;
	// addi r8,r10,-35
	ctx.r8.s64 = ctx.r10.s64 + -35;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, r11.u8);
	// cmpw cr6,r30,r8
	cr6.compare<int32_t>(r30.s32, ctx.r8.s32, xer);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, r11.u8);
	// stb r11,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, r11.u8);
	// mr r11,r30
	r11.u64 = r30.u64;
	// bgt cr6,0x820ebca0
	if (cr6.getGT()) goto loc_820EBCA0;
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_820EBCA0:
	// extsw r9,r11
	ctx.r9.s64 = r11.s32;
	// add r11,r27,r31
	r11.u64 = r27.u64 + r31.u64;
	// addi r10,r11,35
	ctx.r10.s64 = r11.s64 + 35;
	// std r9,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r9.u64);
	// cmpw cr6,r26,r10
	cr6.compare<int32_t>(r26.s32, ctx.r10.s32, xer);
	// mr r9,r26
	ctx.r9.u64 = r26.u64;
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// blt cr6,0x820ebccc
	if (cr6.getLT()) goto loc_820EBCCC;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
loc_820EBCCC:
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// addi r7,r31,21
	ctx.r7.s64 = r31.s64 + 21;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// rlwinm r7,r7,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// std r9,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r9.u64);
	// addi r11,r31,35
	r11.s64 = r31.s64 + 35;
	// std r8,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r8.u64);
	// subf r8,r7,r28
	ctx.r8.s64 = r28.s64 - ctx.r7.s64;
	// addi r9,r28,42
	ctx.r9.s64 = r28.s64 + 42;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// std r10,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r10.u64);
	// extsw r7,r9
	ctx.r7.s64 = ctx.r9.s32;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r9,-31994
	ctx.r9.s64 = -2096758784;
	// addi r10,r10,-17792
	ctx.r10.s64 = ctx.r10.s64 + -17792;
	// std r8,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, ctx.r8.u64);
	// rlwinm r8,r11,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// std r7,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r7.u64);
	// neg r11,r11
	r11.s64 = -r11.s64;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// rlwinm r7,r11,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,3
	ctx.r10.s64 = ctx.r10.s64 + 3;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r9,r9,27480
	ctx.r9.s64 = ctx.r9.s64 + 27480;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// rotlwi r11,r11,4
	r11.u64 = __builtin_rotateleft32(r11.u32, 4);
	// add r3,r11,r9
	ctx.r3.u64 = r11.u64 + ctx.r9.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f28,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f28.f64 = double(temp.f32);
	// lfd f0,88(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// std r8,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r8.u64);
	// extsw r8,r7
	ctx.r8.s64 = ctx.r7.s32;
	// lfd f12,104(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// lfd f13,96(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// std r8,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r8.u64);
	// lfd f10,120(r1)
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// lfd f11,112(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// fcfid f0,f10
	f0.f64 = double(ctx.f10.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// frsp f26,f11
	f26.f64 = double(float(ctx.f11.f64));
	// frsp f29,f0
	f29.f64 = double(float(f0.f64));
	// fsubs f0,f12,f30
	f0.f64 = double(float(ctx.f12.f64 - f30.f64));
	// fsubs f13,f13,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 - f31.f64));
	// lfd f12,88(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// lfd f11,104(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// fdivs f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 / ctx.f12.f64));
	// fdivs f25,f0,f11
	f25.f64 = double(float(f0.f64 / ctx.f11.f64));
	// fsubs f27,f28,f13
	f27.f64 = double(float(f28.f64 - ctx.f13.f64));
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r7,2
	ctx.r7.s64 = 2;
	// bl 0x82096fb0
	sub_82096FB0(ctx, base);
	// bl 0x82096160
	sub_82096160(ctx, base);
	// li r5,2
	ctx.r5.s64 = 2;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8239bf98
	sub_8239BF98(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r1,88
	ctx.r10.s64 = ctx.r1.s64 + 88;
	// fctiwz f13,f30
	ctx.fpscr.disableFlushMode();
	ctx.f13.s64 = (f30.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f30.f64));
	// stfs f30,0(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f29,4(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// stfiwx f13,0,r10
	PPC_STORE_U32(ctx.r10.u32, ctx.f13.u32);
	// stfs f0,8(r9)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 8, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lwz r9,88(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpw cr6,r9,r30
	cr6.compare<int32_t>(ctx.r9.s32, r30.s32, xer);
	// ble cr6,0x820ebe88
	if (!cr6.getGT()) goto loc_820EBE88;
	// cmpw cr6,r9,r26
	cr6.compare<int32_t>(ctx.r9.s32, r26.s32, xer);
	// bge cr6,0x820ebe88
	if (!cr6.getLT()) goto loc_820EBE88;
	// addi r10,r30,40
	ctx.r10.s64 = r30.s64 + 40;
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// bge cr6,0x820ebe5c
	if (!cr6.getLT()) goto loc_820EBE5C;
	// subf r10,r30,r9
	ctx.r10.s64 = ctx.r9.s64 - r30.s64;
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,15
	ctx.r10.s64 = ctx.r10.s64 + 15;
	// b 0x820ebe8c
	goto loc_820EBE8C;
loc_820EBE5C:
	// addi r10,r26,-40
	ctx.r10.s64 = r26.s64 + -40;
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// ble cr6,0x820ebe80
	if (!cr6.getGT()) goto loc_820EBE80;
	// subf r10,r9,r26
	ctx.r10.s64 = r26.s64 - ctx.r9.s64;
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,15
	ctx.r10.s64 = ctx.r10.s64 + 15;
	// b 0x820ebe8c
	goto loc_820EBE8C;
loc_820EBE80:
	// li r10,255
	ctx.r10.s64 = 255;
	// b 0x820ebe8c
	goto loc_820EBE8C;
loc_820EBE88:
	// li r10,0
	ctx.r10.s64 = 0;
loc_820EBE8C:
	// stb r10,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r10.u8);
	// addi r10,r1,88
	ctx.r10.s64 = ctx.r1.s64 + 88;
	// fctiwz f13,f31
	ctx.fpscr.disableFlushMode();
	ctx.f13.s64 = (f31.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f31.f64));
	// stfiwx f13,0,r10
	PPC_STORE_U32(ctx.r10.u32, ctx.f13.u32);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stfs f25,0(r10)
	temp.f32 = float(f25.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,4(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stfs f31,0(r10)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f29,4(r10)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,8(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 8, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r7,r10,12
	ctx.r7.s64 = ctx.r10.s64 + 12;
	// stw r7,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r7.u32);
	// ble cr6,0x820ebf4c
	if (!cr6.getGT()) goto loc_820EBF4C;
	// cmpw cr6,r11,r26
	cr6.compare<int32_t>(r11.s32, r26.s32, xer);
	// bge cr6,0x820ebf4c
	if (!cr6.getLT()) goto loc_820EBF4C;
	// addi r10,r30,40
	ctx.r10.s64 = r30.s64 + 40;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x820ebf20
	if (!cr6.getLT()) goto loc_820EBF20;
	// subf r10,r30,r11
	ctx.r10.s64 = r11.s64 - r30.s64;
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,15
	ctx.r10.s64 = ctx.r10.s64 + 15;
	// b 0x820ebf50
	goto loc_820EBF50;
loc_820EBF20:
	// addi r10,r26,-40
	ctx.r10.s64 = r26.s64 + -40;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// ble cr6,0x820ebf44
	if (!cr6.getGT()) goto loc_820EBF44;
	// subf r10,r11,r26
	ctx.r10.s64 = r26.s64 - r11.s64;
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,15
	ctx.r10.s64 = ctx.r10.s64 + 15;
	// b 0x820ebf50
	goto loc_820EBF50;
loc_820EBF44:
	// li r10,255
	ctx.r10.s64 = 255;
	// b 0x820ebf50
	goto loc_820EBF50;
loc_820EBF4C:
	// li r10,0
	ctx.r10.s64 = 0;
loc_820EBF50:
	// stb r10,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r10.u8);
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r10.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stfs f27,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,4(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stfs f31,0(r10)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f26,4(r10)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,8(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 8, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r7,r10,12
	ctx.r7.s64 = ctx.r10.s64 + 12;
	// stw r7,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r7.u32);
	// ble cr6,0x820ec000
	if (!cr6.getGT()) goto loc_820EC000;
	// cmpw cr6,r11,r26
	cr6.compare<int32_t>(r11.s32, r26.s32, xer);
	// bge cr6,0x820ec000
	if (!cr6.getLT()) goto loc_820EC000;
	// addi r10,r30,40
	ctx.r10.s64 = r30.s64 + 40;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x820ebfd4
	if (!cr6.getLT()) goto loc_820EBFD4;
	// subf r10,r30,r11
	ctx.r10.s64 = r11.s64 - r30.s64;
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,15
	ctx.r10.s64 = ctx.r10.s64 + 15;
	// b 0x820ec004
	goto loc_820EC004;
loc_820EBFD4:
	// addi r10,r26,-40
	ctx.r10.s64 = r26.s64 + -40;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// ble cr6,0x820ebff8
	if (!cr6.getGT()) goto loc_820EBFF8;
	// subf r10,r11,r26
	ctx.r10.s64 = r26.s64 - r11.s64;
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,15
	ctx.r10.s64 = ctx.r10.s64 + 15;
	// b 0x820ec004
	goto loc_820EC004;
loc_820EBFF8:
	// li r10,255
	ctx.r10.s64 = 255;
	// b 0x820ec004
	goto loc_820EC004;
loc_820EC000:
	// li r10,0
	ctx.r10.s64 = 0;
loc_820EC004:
	// stb r10,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r10.u8);
	// cmpw cr6,r9,r30
	cr6.compare<int32_t>(ctx.r9.s32, r30.s32, xer);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r10.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stfs f27,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f28,4(r10)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stfs f30,0(r10)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f29,4(r10)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,8(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 8, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r7,r10,12
	ctx.r7.s64 = ctx.r10.s64 + 12;
	// stw r7,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r7.u32);
	// ble cr6,0x820ec0b4
	if (!cr6.getGT()) goto loc_820EC0B4;
	// cmpw cr6,r9,r26
	cr6.compare<int32_t>(ctx.r9.s32, r26.s32, xer);
	// bge cr6,0x820ec0b4
	if (!cr6.getLT()) goto loc_820EC0B4;
	// addi r10,r30,40
	ctx.r10.s64 = r30.s64 + 40;
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// bge cr6,0x820ec088
	if (!cr6.getLT()) goto loc_820EC088;
	// subf r10,r30,r9
	ctx.r10.s64 = ctx.r9.s64 - r30.s64;
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,15
	ctx.r10.s64 = ctx.r10.s64 + 15;
	// b 0x820ec0b8
	goto loc_820EC0B8;
loc_820EC088:
	// addi r10,r26,-40
	ctx.r10.s64 = r26.s64 + -40;
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// ble cr6,0x820ec0ac
	if (!cr6.getGT()) goto loc_820EC0AC;
	// subf r10,r9,r26
	ctx.r10.s64 = r26.s64 - ctx.r9.s64;
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,15
	ctx.r10.s64 = ctx.r10.s64 + 15;
	// b 0x820ec0b8
	goto loc_820EC0B8;
loc_820EC0AC:
	// li r10,255
	ctx.r10.s64 = 255;
	// b 0x820ec0b8
	goto loc_820EC0B8;
loc_820EC0B4:
	// li r10,0
	ctx.r10.s64 = 0;
loc_820EC0B8:
	// stb r10,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r10.u8);
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r10.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stfs f25,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f25.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,4(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stfs f31,0(r10)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f26,4(r10)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,8(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 8, temp.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r8,r10,12
	ctx.r8.s64 = ctx.r10.s64 + 12;
	// stw r8,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r8.u32);
	// ble cr6,0x820ec168
	if (!cr6.getGT()) goto loc_820EC168;
	// cmpw cr6,r11,r26
	cr6.compare<int32_t>(r11.s32, r26.s32, xer);
	// bge cr6,0x820ec168
	if (!cr6.getLT()) goto loc_820EC168;
	// addi r10,r30,40
	ctx.r10.s64 = r30.s64 + 40;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x820ec13c
	if (!cr6.getLT()) goto loc_820EC13C;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,15
	r11.s64 = r11.s64 + 15;
	// b 0x820ec16c
	goto loc_820EC16C;
loc_820EC13C:
	// addi r10,r26,-40
	ctx.r10.s64 = r26.s64 + -40;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// ble cr6,0x820ec160
	if (!cr6.getGT()) goto loc_820EC160;
	// subf r11,r11,r26
	r11.s64 = r26.s64 - r11.s64;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,15
	r11.s64 = r11.s64 + 15;
	// b 0x820ec16c
	goto loc_820EC16C;
loc_820EC160:
	// li r11,255
	r11.s64 = 255;
	// b 0x820ec16c
	goto loc_820EC16C;
loc_820EC168:
	// li r11,0
	r11.s64 = 0;
loc_820EC16C:
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// cmpw cr6,r9,r30
	cr6.compare<int32_t>(ctx.r9.s32, r30.s32, xer);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f27,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f28,4(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f30,0(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f26,4(r11)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r8,r11,12
	ctx.r8.s64 = r11.s64 + 12;
	// stw r8,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r8.u32);
	// ble cr6,0x820ec21c
	if (!cr6.getGT()) goto loc_820EC21C;
	// cmpw cr6,r9,r26
	cr6.compare<int32_t>(ctx.r9.s32, r26.s32, xer);
	// bge cr6,0x820ec21c
	if (!cr6.getLT()) goto loc_820EC21C;
	// addi r11,r30,40
	r11.s64 = r30.s64 + 40;
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// bge cr6,0x820ec1f0
	if (!cr6.getLT()) goto loc_820EC1F0;
	// subf r11,r30,r9
	r11.s64 = ctx.r9.s64 - r30.s64;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,15
	r11.s64 = r11.s64 + 15;
	// b 0x820ec220
	goto loc_820EC220;
loc_820EC1F0:
	// addi r11,r26,-40
	r11.s64 = r26.s64 + -40;
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// ble cr6,0x820ec214
	if (!cr6.getGT()) goto loc_820EC214;
	// subf r11,r9,r26
	r11.s64 = r26.s64 - ctx.r9.s64;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,15
	r11.s64 = r11.s64 + 15;
	// b 0x820ec220
	goto loc_820EC220;
loc_820EC214:
	// li r11,255
	r11.s64 = 255;
	// b 0x820ec220
	goto loc_820EC220;
loc_820EC21C:
	// li r11,0
	r11.s64 = 0;
loc_820EC220:
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stfs f25,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f25.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f28,4(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x8239c170
	sub_8239C170(ctx, base);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// addi r12,r1,-56
	r12.s64 = ctx.r1.s64 + -56;
	// bl 0x823ed588
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820EC268"))) PPC_WEAK_FUNC(sub_820EC268);
PPC_FUNC_IMPL(__imp__sub_820EC268) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r3,4228(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4228);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EC278"))) PPC_WEAK_FUNC(sub_820EC278);
PPC_FUNC_IMPL(__imp__sub_820EC278) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// stw r3,4228(r11)
	PPC_STORE_U32(r11.u32 + 4228, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EC288"))) PPC_WEAK_FUNC(sub_820EC288);
PPC_FUNC_IMPL(__imp__sub_820EC288) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r28,0
	r28.s64 = 0;
	// mr r29,r28
	r29.u64 = r28.u64;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// lhz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 12);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820ec300
	if (!cr6.getGT()) goto loc_820EC300;
	// mr r31,r28
	r31.u64 = r28.u64;
loc_820EC2B8:
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r10,r11,r31
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ec2e4
	if (cr6.getEQ()) goto loc_820EC2E4;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// lbz r11,1(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 1);
	// cmplwi cr6,r11,18
	cr6.compare<uint32_t>(r11.u32, 18, xer);
	// bne cr6,0x820ec2e4
	if (!cr6.getEQ()) goto loc_820EC2E4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
loc_820EC2E4:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// lhz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 12);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpw cr6,r29,r10
	cr6.compare<int32_t>(r29.s32, ctx.r10.s32, xer);
	// blt cr6,0x820ec2b8
	if (cr6.getLT()) goto loc_820EC2B8;
loc_820EC300:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820EC308"))) PPC_WEAK_FUNC(sub_820EC308);
PPC_FUNC_IMPL(__imp__sub_820EC308) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r29,1
	r29.s64 = 1;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,32(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ec33c
	if (cr6.getEQ()) goto loc_820EC33C;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
loc_820EC33C:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// li r30,0
	r30.s64 = 0;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,36(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ec364
	if (cr6.getEQ()) goto loc_820EC364;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
loc_820EC364:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,40(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ec388
	if (cr6.getEQ()) goto loc_820EC388;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
loc_820EC388:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,44(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ec3ac
	if (cr6.getEQ()) goto loc_820EC3AC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
loc_820EC3AC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,60(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 60);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ec3d0
	if (cr6.getEQ()) goto loc_820EC3D0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
loc_820EC3D0:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,64(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 64);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ec3f4
	if (cr6.getEQ()) goto loc_820EC3F4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
loc_820EC3F4:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 68);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ec418
	if (cr6.getEQ()) goto loc_820EC418;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
loc_820EC418:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,72(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 72);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ec43c
	if (cr6.getEQ()) goto loc_820EC43C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
loc_820EC43C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820EC448"))) PPC_WEAK_FUNC(sub_820EC448);
PPC_FUNC_IMPL(__imp__sub_820EC448) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r12,r1,-24
	r12.s64 = ctx.r1.s64 + -24;
	// bl 0x823ed544
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x82091fb8
	sub_82091FB8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ec6e0
	if (!cr6.getEQ()) goto loc_820EC6E0;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// fneg f30,f1
	ctx.fpscr.disableFlushMode();
	f30.u64 = ctx.f1.u64 ^ 0x8000000000000000;
	// bl 0x820a0348
	sub_820A0348(ctx, base);
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	f29.f64 = ctx.f1.f64;
	// bl 0x820a0448
	sub_820A0448(ctx, base);
	// fabs f13,f29
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = f29.u64 & ~0x8000000000000000;
	// fabs f12,f31
	ctx.f12.u64 = f31.u64 & ~0x8000000000000000;
	// fneg f0,f1
	f0.u64 = ctx.f1.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// ble cr6,0x820ec4c0
	if (!cr6.getGT()) goto loc_820EC4C0;
	// fmr f31,f29
	f31.f64 = f29.f64;
loc_820EC4C0:
	// fabs f13,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = f0.u64 & ~0x8000000000000000;
	// fabs f12,f30
	ctx.f12.u64 = f30.u64 & ~0x8000000000000000;
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// ble cr6,0x820ec4d4
	if (!cr6.getGT()) goto loc_820EC4D4;
	// fmr f30,f0
	f30.f64 = f0.f64;
loc_820EC4D4:
	// fmuls f0,f31,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 * f31.f64));
	// fmadds f1,f30,f30,f0
	ctx.f1.f64 = double(float(f30.f64 * f30.f64 + f0.f64));
	// bl 0x8238ca50
	sub_8238CA50(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,2948(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2948);
	f29.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f1,f29
	cr6.compare(ctx.f1.f64, f29.f64);
	// lfs f28,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f28.f64 = double(temp.f32);
	// bge cr6,0x820ec504
	if (!cr6.getLT()) goto loc_820EC504;
	// fmr f31,f28
	f31.f64 = f28.f64;
	// fmr f30,f28
	f30.f64 = f28.f64;
	// b 0x820ec56c
	goto loc_820EC56C;
loc_820EC504:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-14740(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14740);
	// extsw r10,r11
	ctx.r10.s64 = r11.s32;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x820ec56c
	if (!cr6.getLT()) goto loc_820EC56C;
	// addi r11,r11,-20
	r11.s64 = r11.s64 + -20;
	// fsubs f13,f0,f1
	ctx.f13.f64 = double(float(f0.f64 - ctx.f1.f64));
	// extsw r10,r11
	ctx.r10.s64 = r11.s32;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfs f0,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// fdivs f0,f0,f1
	f0.f64 = double(float(f0.f64 / ctx.f1.f64));
	// fmuls f13,f13,f29
	ctx.f13.f64 = double(float(ctx.f13.f64 * f29.f64));
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// fdivs f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 / ctx.f12.f64));
	// fsubs f13,f1,f13
	ctx.f13.f64 = double(float(ctx.f1.f64 - ctx.f13.f64));
	// fmuls f12,f0,f13
	ctx.f12.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fmuls f31,f12,f31
	f31.f64 = double(float(ctx.f12.f64 * f31.f64));
	// fmuls f30,f0,f30
	f30.f64 = double(float(f0.f64 * f30.f64));
loc_820EC56C:
	// fmuls f0,f31,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 * f31.f64));
	// fmadds f1,f30,f30,f0
	ctx.f1.f64 = double(float(f30.f64 * f30.f64 + f0.f64));
	// bl 0x8238ca50
	sub_8238CA50(ctx, base);
	// fcmpu cr6,f1,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f28.f64);
	// ble cr6,0x820ec59c
	if (!cr6.getGT()) goto loc_820EC59C;
	// fmuls f13,f1,f1
	ctx.f13.f64 = double(float(ctx.f1.f64 * ctx.f1.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14496(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14496);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fdivs f0,f0,f1
	f0.f64 = double(float(f0.f64 / ctx.f1.f64));
	// fmuls f31,f0,f31
	f31.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f30,f0,f30
	f30.f64 = double(float(f0.f64 * f30.f64));
loc_820EC59C:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// lfs f13,-14744(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14744);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f13,f31
	f0.f64 = double(float(ctx.f13.f64 * f31.f64));
	// fmuls f13,f13,f30
	ctx.f13.f64 = double(float(ctx.f13.f64 * f30.f64));
	// beq cr6,0x820ec5c8
	if (cr6.getEQ()) goto loc_820EC5C8;
	// lfs f12,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f11.f64 = double(temp.f32);
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f30,f11,f13
	f30.f64 = double(float(ctx.f11.f64 * ctx.f13.f64));
	// b 0x820ec5d4
	goto loc_820EC5D4;
loc_820EC5C8:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f12,-14748(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14748);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f30,f12,f13
	f30.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
loc_820EC5D4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f0,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f28.f64);
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lis r31,-32141
	r31.s64 = -2106392576;
	// lfs f31,14400(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14400);
	f31.f64 = double(temp.f32);
	// bgt cr6,0x820ec5f4
	if (cr6.getGT()) goto loc_820EC5F4;
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// bge cr6,0x820ec608
	if (!cr6.getLT()) goto loc_820EC608;
loc_820EC5F4:
	// fmuls f12,f0,f31
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(f0.f64 * f31.f64));
	// lfs f13,-19588(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -19588);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,-6368(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// stfs f0,-19588(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -19588, temp.u32);
loc_820EC608:
	// bl 0x8210d8c0
	sub_8210D8C0(ctx, base);
	// fmr f27,f1
	ctx.fpscr.disableFlushMode();
	f27.f64 = ctx.f1.f64;
	// bl 0x8210d8a0
	sub_8210D8A0(ctx, base);
	// fadds f0,f27,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f27.f64 + ctx.f1.f64));
	// fsubs f13,f0,f29
	ctx.f13.f64 = double(float(f0.f64 - f29.f64));
	// lfs f0,-19588(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -19588);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820ec640
	if (!cr6.getGT()) goto loc_820EC640;
	// bl 0x8210d8c0
	sub_8210D8C0(ctx, base);
	// fmr f27,f1
	ctx.fpscr.disableFlushMode();
	f27.f64 = ctx.f1.f64;
	// bl 0x8210d8a0
	sub_8210D8A0(ctx, base);
	// fadds f0,f27,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f27.f64 + ctx.f1.f64));
	// fsubs f0,f0,f29
	f0.f64 = double(float(f0.f64 - f29.f64));
	// b 0x820ec65c
	goto loc_820EC65C;
loc_820EC640:
	// bl 0x8210d8c0
	sub_8210D8C0(ctx, base);
	// fadds f13,f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64 + f29.f64));
	// lfs f0,-19588(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -19588);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820ec660
	if (!cr6.getLT()) goto loc_820EC660;
	// bl 0x8210d8c0
	sub_8210D8C0(ctx, base);
	// fadds f0,f1,f29
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64 + f29.f64));
loc_820EC65C:
	// stfs f0,-19588(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -19588, temp.u32);
loc_820EC660:
	// fcmpu cr6,f30,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f30.f64, f28.f64);
	// lis r31,-32141
	r31.s64 = -2106392576;
	// bgt cr6,0x820ec674
	if (cr6.getGT()) goto loc_820EC674;
	// fcmpu cr6,f30,f28
	cr6.compare(f30.f64, f28.f64);
	// bge cr6,0x820ec688
	if (!cr6.getLT()) goto loc_820EC688;
loc_820EC674:
	// fmuls f12,f30,f31
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(f30.f64 * f31.f64));
	// lfs f13,-19584(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -19584);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,-6368(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// stfs f0,-19584(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -19584, temp.u32);
loc_820EC688:
	// bl 0x8210d8d0
	sub_8210D8D0(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8210d8b0
	sub_8210D8B0(ctx, base);
	// fadds f0,f31,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 + ctx.f1.f64));
	// fsubs f13,f0,f29
	ctx.f13.f64 = double(float(f0.f64 - f29.f64));
	// lfs f0,-19584(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -19584);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820ec6c0
	if (!cr6.getGT()) goto loc_820EC6C0;
	// bl 0x8210d8d0
	sub_8210D8D0(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8210d8b0
	sub_8210D8B0(ctx, base);
	// fadds f0,f31,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 + ctx.f1.f64));
	// fsubs f0,f0,f29
	f0.f64 = double(float(f0.f64 - f29.f64));
	// b 0x820ec6dc
	goto loc_820EC6DC;
loc_820EC6C0:
	// bl 0x8210d8d0
	sub_8210D8D0(ctx, base);
	// fadds f13,f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64 + f29.f64));
	// lfs f0,-19584(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -19584);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820ec6e0
	if (!cr6.getLT()) goto loc_820EC6E0;
	// bl 0x8210d8d0
	sub_8210D8D0(ctx, base);
	// fadds f0,f1,f29
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64 + f29.f64));
loc_820EC6DC:
	// stfs f0,-19584(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -19584, temp.u32);
loc_820EC6E0:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// addi r12,r1,-24
	r12.s64 = ctx.r1.s64 + -24;
	// bl 0x823ed590
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EC700"))) PPC_WEAK_FUNC(sub_820EC700);
PPC_FUNC_IMPL(__imp__sub_820EC700) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// lfs f0,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	f0.f64 = double(temp.f32);
	// stfs f0,140(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// bl 0x8210d8a0
	sub_8210D8A0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14116(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14116);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// stfs f0,128(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// bl 0x8210d8b0
	sub_8210D8B0(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r31,255
	r31.s64 = 255;
	// addi r3,r11,27912
	ctx.r3.s64 = r11.s64 + 27912;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r29,2
	r29.s64 = 2;
	// li r30,220
	r30.s64 = 220;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r31.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r7,12(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// lfs f0,15544(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15544);
	f0.f64 = double(temp.f32);
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// lwz r6,8(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// stfs f0,132(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// stw r29,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r29.u32);
	// stw r30,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r30.u32);
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// bl 0x8214ab68
	sub_8214AB68(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4212(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4212);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820ec824
	if (!cr6.getGT()) goto loc_820EC824;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// rotlwi r9,r11,1
	ctx.r9.u64 = __builtin_rotateleft32(r11.u32, 1);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// lwz r10,-19484(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -19484);
	// divw r8,r11,r10
	ctx.r8.s32 = r11.s32 / ctx.r10.s32;
	// srawi r7,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r7.s64 = ctx.r10.s32 >> 1;
	// mullw r8,r8,r10
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// twllei r10,0
	// andc r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ~ctx.r9.u64;
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// addze r9,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r9.s64 = temp.s64;
	// twlgei r10,-1
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x820ec824
	if (!cr6.getGT()) goto loc_820EC824;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r29,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r29.u32);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// stw r30,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r30.u32);
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r31.u32);
	// addi r11,r11,28184
	r11.s64 = r11.s64 + 28184;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// lwz r9,4208(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4208);
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// addi r3,r11,288
	ctx.r3.s64 = r11.s64 + 288;
	// rlwinm r10,r9,0,30,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x2;
	// clrlwi r9,r9,31
	ctx.r9.u64 = ctx.r9.u32 & 0x1;
	// lwz r7,300(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 300);
	// lwz r6,296(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 296);
	// bl 0x8214ab68
	sub_8214AB68(ctx, base);
loc_820EC824:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820EC830"))) PPC_WEAK_FUNC(sub_820EC830);
PPC_FUNC_IMPL(__imp__sub_820EC830) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f29,-72(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -72, f29.u64);
	// stfd f30,-64(r1)
	PPC_STORE_U64(ctx.r1.u32 + -64, f30.u64);
	// stfd f31,-56(r1)
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39942
	ctx.r3.u64 = ctx.r3.u64 | 39942;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r31,0
	r31.s64 = 0;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// lis r30,-31991
	r30.s64 = -2096562176;
	// li r8,0
	ctx.r8.s64 = 0;
	// lfs f1,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	ctx.f1.f64 = double(temp.f32);
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// stw r31,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r31.u32);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r5,2856(r28)
	PPC_STORE_U32(r28.u32 + 2856, ctx.r5.u32);
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// stw r31,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// li r9,241
	ctx.r9.s64 = 241;
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// srawi r11,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r11.s64 = ctx.r10.s32 >> 1;
	// stw r9,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r9.u32);
	// addze r9,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r9.s64 = temp.s64;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// subfic r5,r9,409
	xer.ca = ctx.r9.u32 <= 409;
	ctx.r5.s64 = 409 - ctx.r9.s64;
	// lwz r11,4008(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4008);
	// stw r5,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r5.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ec8d8
	if (cr6.getEQ()) goto loc_820EC8D8;
	// subf r11,r10,r5
	r11.s64 = ctx.r5.s64 - ctx.r10.s64;
	// li r7,50
	ctx.r7.s64 = 50;
	// li r6,307
	ctx.r6.s64 = 307;
	// li r4,241
	ctx.r4.s64 = 241;
	// addi r3,r11,1
	ctx.r3.s64 = r11.s64 + 1;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820EC8D8:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x8213e380
	sub_8213E380(ctx, base);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subfic r11,r11,274
	xer.ca = r11.u32 <= 274;
	r11.s64 = 274 - r11.s64;
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r5,2856(r28)
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + 2856);
	// addi r4,r1,140
	ctx.r4.s64 = ctx.r1.s64 + 140;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8213e380
	sub_8213E380(ctx, base);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r11,r11,28184
	r11.s64 = r11.s64 + 28184;
	// lfs f31,-14728(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -14728);
	f31.f64 = double(temp.f32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r3,r11,352
	ctx.r3.s64 = r11.s64 + 352;
	// lfs f30,-14732(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -14732);
	f30.f64 = double(temp.f32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lfs f29,-14736(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -14736);
	f29.f64 = double(temp.f32);
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f7,f31
	ctx.fpscr.disableFlushMode();
	ctx.f7.f64 = f31.f64;
	// li r10,2
	ctx.r10.s64 = 2;
	// fmr f6,f30
	ctx.f6.f64 = f30.f64;
	// li r9,1
	ctx.r9.s64 = 1;
	// fmr f5,f29
	ctx.f5.f64 = f29.f64;
	// lfs f11,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f11.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f10,f11
	ctx.f10.f64 = ctx.f11.f64;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// fmr f4,f11
	ctx.f4.f64 = ctx.f11.f64;
	// fmr f3,f11
	ctx.f3.f64 = ctx.f11.f64;
	// fmr f2,f11
	ctx.f2.f64 = ctx.f11.f64;
	// lfs f9,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f9.f64 = double(temp.f32);
	// fmr f1,f11
	ctx.f1.f64 = ctx.f11.f64;
	// fmr f8,f9
	ctx.f8.f64 = ctx.f9.f64;
	// bl 0x82099388
	sub_82099388(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-72(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f30,-64(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// lfd f31,-56(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820EC9C0"))) PPC_WEAK_FUNC(sub_820EC9C0);
PPC_FUNC_IMPL(__imp__sub_820EC9C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// fctiwz f0,f1
	ctx.fpscr.disableFlushMode();
	f0.s64 = (ctx.f1.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f1.f64));
	// mr r31,r9
	r31.u64 = ctx.r9.u64;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820eca40
	if (cr6.getEQ()) goto loc_820ECA40;
	// addi r29,r1,112
	r29.s64 = ctx.r1.s64 + 112;
	// lwz r30,268(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 268);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r27,260(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 260);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// addi r11,r11,-19524
	r11.s64 = r11.s64 + -19524;
	// stfiwx f0,0,r29
	PPC_STORE_U32(r29.u32, f0.u32);
	// stw r30,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r30.u32);
	// stw r27,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r27.u32);
	// lbz r9,-31(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + -31);
	// lbz r28,-30(r11)
	r28.u64 = PPC_LOAD_U8(r11.u32 + -30);
	// lbz r30,-29(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + -29);
	// rlwimi r28,r9,8,16,23
	r28.u64 = (__builtin_rotateleft32(ctx.r9.u32, 8) & 0xFF00) | (r28.u64 & 0xFFFFFFFFFFFF00FF);
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// clrlwi r11,r28,16
	r11.u64 = r28.u32 & 0xFFFF;
	// rlwimi r30,r11,8,0,23
	r30.u64 = (__builtin_rotateleft32(r11.u32, 8) & 0xFFFFFF00) | (r30.u64 & 0xFFFFFFFF000000FF);
	// rlwimi r9,r30,8,0,23
	ctx.r9.u64 = (__builtin_rotateleft32(r30.u32, 8) & 0xFFFFFF00) | (ctx.r9.u64 & 0xFFFFFFFF000000FF);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// bl 0x8213e398
	sub_8213E398(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed184
	return;
loc_820ECA40:
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lwz r9,268(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 268);
	// stfiwx f0,0,r11
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U32(r11.u32, f0.u32);
	// stw r9,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r9.u32);
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// lwz r31,260(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 260);
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820ECA70"))) PPC_WEAK_FUNC(sub_820ECA70);
PPC_FUNC_IMPL(__imp__sub_820ECA70) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// add r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 + ctx.r10.u64;
	// addi r11,r11,2820
	r11.s64 = r11.s64 + 2820;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x8210d660
	sub_8210D660(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// lfs f13,84(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	ctx.f13.f64 = double(temp.f32);
	// stfs f0,-19588(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19588, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2948(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2948);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,-19584(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19584, temp.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820ECAE0"))) PPC_WEAK_FUNC(sub_820ECAE0);
PPC_FUNC_IMPL(__imp__sub_820ECAE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// li r31,0
	r31.s64 = 0;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// lfs f1,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	ctx.f1.f64 = double(temp.f32);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r25,r8
	r25.u64 = ctx.r8.u64;
	// stw r31,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r31.u32);
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r31,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r31.u32);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r7,15124(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 15124);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r24,r9
	r24.u64 = ctx.r9.u64;
	// lwz r6,-31556(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -31556);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// mullw r11,r11,r27
	r11.s64 = int64_t(r11.s32) * int64_t(r27.s32);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// mullw r10,r10,r26
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r26.s32);
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// subf r11,r11,r29
	r11.s64 = r29.s64 - r11.s64;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// addze r11,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	r11.s64 = temp.s64;
	// subf r11,r11,r28
	r11.s64 = r28.s64 - r11.s64;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r29,r3
	r29.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// li r8,-1
	ctx.r8.s64 = -1;
	// mr r7,r24
	ctx.r7.u64 = r24.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_820ECBB8"))) PPC_WEAK_FUNC(sub_820ECBB8);
PPC_FUNC_IMPL(__imp__sub_820ECBB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4228(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4228);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x820ecc04
	if (cr6.getEQ()) goto loc_820ECC04;
	// lis r9,-32141
	ctx.r9.s64 = -2106392576;
	// lis r10,-28087
	ctx.r10.s64 = -1840709632;
	// ori r10,r10,9363
	ctx.r10.u64 = ctx.r10.u64 | 9363;
	// lwz r11,-19424(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -19424);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mulhw r10,r11,r10
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(ctx.r10.s32)) >> 32;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwinm r8,r10,1,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r8,r10,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r10,r8
	ctx.r10.s64 = ctx.r8.s64 - ctx.r10.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,-19424(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19424, r11.u32);
	// blr 
	return;
loc_820ECC04:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lwz r11,-19424(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -19424);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// srawi r9,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r9.s64 = r11.s32 >> 2;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// stw r11,-19424(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19424, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820ECC28"))) PPC_WEAK_FUNC(sub_820ECC28);
PPC_FUNC_IMPL(__imp__sub_820ECC28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r9,0
	ctx.r9.s64 = 0;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// stw r3,4220(r11)
	PPC_STORE_U32(r11.u32 + 4220, ctx.r3.u32);
	// blelr cr6
	if (!cr6.getGT()) return;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,0
	r11.s64 = 0;
	// addi r8,r10,-19444
	ctx.r8.s64 = ctx.r10.s64 + -19444;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r7,5
	ctx.r7.s64 = 5;
	// addi r10,r10,-19476
	ctx.r10.s64 = ctx.r10.s64 + -19476;
loc_820ECC54:
	// lwzx r6,r11,r10
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r6,-1
	cr6.compare<int32_t>(ctx.r6.s32, -1, xer);
	// bne cr6,0x820ecc64
	if (!cr6.getEQ()) goto loc_820ECC64;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_820ECC64:
	// lwzx r6,r11,r8
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// cmpwi cr6,r6,-1
	cr6.compare<int32_t>(ctx.r6.s32, -1, xer);
	// bne cr6,0x820ecc74
	if (!cr6.getEQ()) goto loc_820ECC74;
	// stwx r7,r11,r8
	PPC_STORE_U32(r11.u32 + ctx.r8.u32, ctx.r7.u32);
loc_820ECC74:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpw cr6,r9,r3
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r3.s32, xer);
	// blt cr6,0x820ecc54
	if (cr6.getLT()) goto loc_820ECC54;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820ECC88"))) PPC_WEAK_FUNC(sub_820ECC88);
PPC_FUNC_IMPL(__imp__sub_820ECC88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4048(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4048);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ecd18
	if (!cr6.getEQ()) goto loc_820ECD18;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4052(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4052);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ecd18
	if (!cr6.getEQ()) goto loc_820ECD18;
	// li r29,0
	r29.s64 = 0;
	// li r31,0
	r31.s64 = 0;
	// lis r30,-32010
	r30.s64 = -2097807360;
loc_820ECCC0:
	// lwz r11,3912(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 3912);
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// lhz r11,8(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820eccfc
	if (cr6.getEQ()) goto loc_820ECCFC;
	// bl 0x8209f598
	sub_8209F598(ctx, base);
	// lwz r11,3912(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 3912);
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// lhz r11,10(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 10);
	// cmpw cr6,r11,r3
	cr6.compare<int32_t>(r11.s32, ctx.r3.s32, xer);
	// bgt cr6,0x820eccfc
	if (cr6.getGT()) goto loc_820ECCFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820cc0d0
	sub_820CC0D0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820ecd18
	if (!cr6.getEQ()) goto loc_820ECD18;
loc_820ECCFC:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// cmpwi cr6,r31,40
	cr6.compare<int32_t>(r31.s32, 40, xer);
	// blt cr6,0x820eccc0
	if (cr6.getLT()) goto loc_820ECCC0;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820ECD18:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820ECD28"))) PPC_WEAK_FUNC(sub_820ECD28);
PPC_FUNC_IMPL(__imp__sub_820ECD28) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r16{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// addi r11,r31,-1
	r11.s64 = r31.s64 + -1;
	// cmplwi cr6,r11,79
	cr6.compare<uint32_t>(r11.u32, 79, xer);
	// bgt cr6,0x820ed11c
	if (cr6.getGT()) goto loc_820ED11C;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,-12956
	r12.s64 = r12.s64 + -12956;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820ED11C;
	case 1:
		goto loc_820ECEA4;
	case 2:
		goto loc_820ECEC0;
	case 3:
		goto loc_820ED11C;
	case 4:
		goto loc_820ED11C;
	case 5:
		goto loc_820ED11C;
	case 6:
		goto loc_820ED11C;
	case 7:
		goto loc_820ED11C;
	case 8:
		goto loc_820ED11C;
	case 9:
		goto loc_820ECF14;
	case 10:
		goto loc_820ECF30;
	case 11:
		goto loc_820ECF4C;
	case 12:
		goto loc_820ED11C;
	case 13:
		goto loc_820ECF68;
	case 14:
		goto loc_820ECFA0;
	case 15:
		goto loc_820ED11C;
	case 16:
		goto loc_820ED0D4;
	case 17:
		goto loc_820ED0EC;
	case 18:
		goto loc_820ED104;
	case 19:
		goto loc_820ECFBC;
	case 20:
		goto loc_820ECFD8;
	case 21:
		goto loc_820ED11C;
	case 22:
		goto loc_820ECEDC;
	case 23:
		goto loc_820ED0B8;
	case 24:
		goto loc_820ED11C;
	case 25:
		goto loc_820ECEF8;
	case 26:
		goto loc_820ECF84;
	case 27:
		goto loc_820ECFF4;
	case 28:
		goto loc_820ED010;
	case 29:
		goto loc_820ED02C;
	case 30:
		goto loc_820ED048;
	case 31:
		goto loc_820ED064;
	case 32:
		goto loc_820ED080;
	case 33:
		goto loc_820ED09C;
	case 34:
		goto loc_820ED11C;
	case 35:
		goto loc_820ED11C;
	case 36:
		goto loc_820ED11C;
	case 37:
		goto loc_820ED11C;
	case 38:
		goto loc_820ED11C;
	case 39:
		goto loc_820ED11C;
	case 40:
		goto loc_820ED11C;
	case 41:
		goto loc_820ED11C;
	case 42:
		goto loc_820ED11C;
	case 43:
		goto loc_820ED11C;
	case 44:
		goto loc_820ED11C;
	case 45:
		goto loc_820ED11C;
	case 46:
		goto loc_820ED11C;
	case 47:
		goto loc_820ED11C;
	case 48:
		goto loc_820ED11C;
	case 49:
		goto loc_820ED11C;
	case 50:
		goto loc_820ED11C;
	case 51:
		goto loc_820ED11C;
	case 52:
		goto loc_820ED11C;
	case 53:
		goto loc_820ED11C;
	case 54:
		goto loc_820ED11C;
	case 55:
		goto loc_820ED11C;
	case 56:
		goto loc_820ED11C;
	case 57:
		goto loc_820ED11C;
	case 58:
		goto loc_820ED11C;
	case 59:
		goto loc_820ED11C;
	case 60:
		goto loc_820ED11C;
	case 61:
		goto loc_820ED11C;
	case 62:
		goto loc_820ED11C;
	case 63:
		goto loc_820ED11C;
	case 64:
		goto loc_820ED11C;
	case 65:
		goto loc_820ED11C;
	case 66:
		goto loc_820ED11C;
	case 67:
		goto loc_820ED11C;
	case 68:
		goto loc_820ED11C;
	case 69:
		goto loc_820ED11C;
	case 70:
		goto loc_820ED11C;
	case 71:
		goto loc_820ED11C;
	case 72:
		goto loc_820ED11C;
	case 73:
		goto loc_820ED11C;
	case 74:
		goto loc_820ED11C;
	case 75:
		goto loc_820ED11C;
	case 76:
		goto loc_820ED11C;
	case 77:
		goto loc_820ED11C;
	case 78:
		goto loc_820ED11C;
	case 79:
		goto loc_820ED11C;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12636(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12636);
	// lwz r16,-12608(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12608);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12524(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12524);
	// lwz r16,-12496(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12496);
	// lwz r16,-12468(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12468);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12440(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12440);
	// lwz r16,-12384(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12384);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12076(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12076);
	// lwz r16,-12052(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12052);
	// lwz r16,-12028(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12028);
	// lwz r16,-12356(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12356);
	// lwz r16,-12328(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12328);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12580(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12580);
	// lwz r16,-12104(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12104);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12552(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12552);
	// lwz r16,-12412(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12412);
	// lwz r16,-12300(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12300);
	// lwz r16,-12272(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12272);
	// lwz r16,-12244(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12244);
	// lwz r16,-12216(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12216);
	// lwz r16,-12188(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12188);
	// lwz r16,-12160(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12160);
	// lwz r16,-12132(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12132);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
	// lwz r16,-12004(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -12004);
loc_820ECEA4:
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ECEC0:
	// li r4,19
	ctx.r4.s64 = 19;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ECEDC:
	// li r4,6
	ctx.r4.s64 = 6;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ECEF8:
	// li r4,9
	ctx.r4.s64 = 9;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ECF14:
	// li r4,10
	ctx.r4.s64 = 10;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ECF30:
	// li r4,15
	ctx.r4.s64 = 15;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ECF4C:
	// li r4,2
	ctx.r4.s64 = 2;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ECF68:
	// li r4,7
	ctx.r4.s64 = 7;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ECF84:
	// li r4,12
	ctx.r4.s64 = 12;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ECFA0:
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ECFBC:
	// li r4,13
	ctx.r4.s64 = 13;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ECFD8:
	// li r4,17
	ctx.r4.s64 = 17;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ECFF4:
	// li r4,11
	ctx.r4.s64 = 11;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ED010:
	// li r4,4
	ctx.r4.s64 = 4;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ED02C:
	// li r4,3
	ctx.r4.s64 = 3;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ED048:
	// li r4,16
	ctx.r4.s64 = 16;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ED064:
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ED080:
	// li r4,14
	ctx.r4.s64 = 14;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ED09C:
	// li r4,18
	ctx.r4.s64 = 18;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ED0B8:
	// li r4,5
	ctx.r4.s64 = 5;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ED0D4:
	// bl 0x820e9a28
	sub_820E9A28(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ED0EC:
	// bl 0x820e9de0
	sub_820E9DE0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ED104:
	// bl 0x820ea048
	sub_820EA048(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820ED11C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820ED138"))) PPC_WEAK_FUNC(sub_820ED138);
PPC_FUNC_IMPL(__imp__sub_820ED138) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820ed16c
	if (!cr6.getGT()) goto loc_820ED16C;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r3,1
	ctx.r3.s64 = 1;
	// lfs f0,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgtlr cr6
	if (cr6.getGT()) return;
loc_820ED16C:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820ED178"))) PPC_WEAK_FUNC(sub_820ED178);
PPC_FUNC_IMPL(__imp__sub_820ED178) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820ed1bc
	if (!cr6.getGT()) goto loc_820ED1BC;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24804(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24804);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820ed1bc
	if (!cr6.getGT()) goto loc_820ED1BC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,1
	ctx.r3.s64 = 1;
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blelr cr6
	if (!cr6.getGT()) return;
loc_820ED1BC:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820ED1C8"))) PPC_WEAK_FUNC(sub_820ED1C8);
PPC_FUNC_IMPL(__imp__sub_820ED1C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82144a80
	sub_82144A80(ctx, base);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,1
	r11.s64 = 1;
	// li r3,319
	ctx.r3.s64 = 319;
	// stw r11,-19540(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19540, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stfs f0,92(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stw r11,3984(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3984, r11.u32);
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r31,r11,-3616
	r31.s64 = r11.s64 + -3616;
	// lwz r3,5104(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 5104);
	// bl 0x8211c6c8
	sub_8211C6C8(ctx, base);
	// lwz r3,5104(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 5104);
	// bl 0x82118550
	sub_82118550(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// stw r3,4164(r31)
	PPC_STORE_U32(r31.u32 + 4164, ctx.r3.u32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// lwz r3,4164(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// bl 0x82119118
	sub_82119118(ctx, base);
	// bl 0x82108e80
	sub_82108E80(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r11,r11,28184
	r11.s64 = r11.s64 + 28184;
	// lwz r3,304(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 304);
	// bl 0x8239ada0
	sub_8239ADA0(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x8235d820
	sub_8235D820(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820ED288"))) PPC_WEAK_FUNC(sub_820ED288);
PPC_FUNC_IMPL(__imp__sub_820ED288) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f9,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f9.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f7,f9
	ctx.f7.f64 = ctx.f9.f64;
	// fmr f6,f9
	ctx.f6.f64 = ctx.f9.f64;
	// fmr f5,f9
	ctx.f5.f64 = ctx.f9.f64;
	// fmr f4,f9
	ctx.f4.f64 = ctx.f9.f64;
	// lfs f8,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f8.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f2,f9
	ctx.f2.f64 = ctx.f9.f64;
	// fmr f1,f9
	ctx.f1.f64 = ctx.f9.f64;
	// lfs f3,24792(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24792);
	ctx.f3.f64 = double(temp.f32);
	// bl 0x8210bf20
	sub_8210BF20(ctx, base);
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,4164(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r11,14(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r3,r11,6,0,25
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// bl 0x8209cd50
	sub_8209CD50(ctx, base);
	// lwz r11,4164(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// stw r3,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r3.u32);
	// lwz r3,4164(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// bl 0x8211d028
	sub_8211D028(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r3,4164(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,255
	ctx.r5.s64 = 255;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209ab98
	sub_8209AB98(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r30,12
	r30.s64 = 12;
	// addi r11,r11,-19400
	r11.s64 = r11.s64 + -19400;
	// lis r26,-31991
	r26.s64 = -2096562176;
	// addi r31,r11,12
	r31.s64 = r11.s64 + 12;
	// lis r27,-31994
	r27.s64 = -2096758784;
loc_820ED330:
	// lhz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// lwz r29,15124(r27)
	r29.u64 = PPC_LOAD_U32(r27.u32 + 15124);
	// lwz r28,-31556(r26)
	r28.u64 = PPC_LOAD_U32(r26.u32 + -31556);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// lwz r6,0(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwz r5,-4(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + -4);
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// lwz r4,-8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -8);
	// lwz r3,-12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -12);
	// bl 0x820ecae0
	sub_820ECAE0(ctx, base);
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r31,r31,20
	r31.s64 = r31.s64 + 20;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x820ed330
	if (!cr6.getEQ()) goto loc_820ED330;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820ED378"))) PPC_WEAK_FUNC(sub_820ED378);
PPC_FUNC_IMPL(__imp__sub_820ED378) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-1136(r1)
	ea = -1136 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,24888
	ctx.r4.s64 = r11.s64 + 24888;
	// li r5,108
	ctx.r5.s64 = 108;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// li r5,404
	ctx.r5.s64 = 404;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,188
	ctx.r3.s64 = ctx.r1.s64 + 188;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r1,592
	ctx.r3.s64 = ctx.r1.s64 + 592;
	// addi r4,r11,24816
	ctx.r4.s64 = r11.s64 + 24816;
	// li r5,70
	ctx.r5.s64 = 70;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// li r5,442
	ctx.r5.s64 = 442;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,662
	ctx.r3.s64 = ctx.r1.s64 + 662;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// lis r30,-31994
	r30.s64 = -2096758784;
	// lis r31,-31991
	r31.s64 = -2096562176;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,120
	ctx.r4.s64 = 120;
	// lwz r9,15124(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 15124);
	// li r3,20
	ctx.r3.s64 = 20;
	// lwz r8,-31556(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + -31556);
	// bl 0x820ecae0
	sub_820ECAE0(ctx, base);
	// addi r7,r1,592
	ctx.r7.s64 = ctx.r1.s64 + 592;
	// li r6,0
	ctx.r6.s64 = 0;
	// lwz r9,15124(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 15124);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r8,-31556(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + -31556);
	// li r4,150
	ctx.r4.s64 = 150;
	// li r3,20
	ctx.r3.s64 = 20;
	// bl 0x820ecae0
	sub_820ECAE0(ctx, base);
	// addi r1,r1,1136
	ctx.r1.s64 = ctx.r1.s64 + 1136;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820ED438"))) PPC_WEAK_FUNC(sub_820ED438);
PPC_FUNC_IMPL(__imp__sub_820ED438) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,3984(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3984, r11.u32);
	// bl 0x82109d98
	sub_82109D98(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,3904
	ctx.r8.s64 = 3904;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,258
	ctx.r4.s64 = 258;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820ED490"))) PPC_WEAK_FUNC(sub_820ED490);
PPC_FUNC_IMPL(__imp__sub_820ED490) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r3,277
	ctx.r3.s64 = 277;
	// lfs f0,15100(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15100);
	f0.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// stw r11,3984(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3984, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// stfs f0,84(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r31,r11,-3616
	r31.s64 = r11.s64 + -3616;
	// lwz r3,4432(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4432);
	// bl 0x8211c6c8
	sub_8211C6C8(ctx, base);
	// lwz r3,4432(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4432);
	// bl 0x82118550
	sub_82118550(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// stw r3,4164(r31)
	PPC_STORE_U32(r31.u32 + 4164, ctx.r3.u32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r3,4164(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// bl 0x82119118
	sub_82119118(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820ED520"))) PPC_WEAK_FUNC(sub_820ED520);
PPC_FUNC_IMPL(__imp__sub_820ED520) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// lfs f9,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f9.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f7,f9
	ctx.f7.f64 = ctx.f9.f64;
	// fmr f6,f9
	ctx.f6.f64 = ctx.f9.f64;
	// fmr f5,f9
	ctx.f5.f64 = ctx.f9.f64;
	// fmr f4,f9
	ctx.f4.f64 = ctx.f9.f64;
	// lfs f8,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f8.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f2,f9
	ctx.f2.f64 = ctx.f9.f64;
	// fmr f1,f9
	ctx.f1.f64 = ctx.f9.f64;
	// lfs f3,14048(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14048);
	ctx.f3.f64 = double(temp.f32);
	// bl 0x8210bf20
	sub_8210BF20(ctx, base);
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,4164(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r11,14(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r3,r11,6,0,25
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// bl 0x8209cd50
	sub_8209CD50(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lfs f1,15468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15468);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bcc8
	sub_8210BCC8(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// lwz r11,4164(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// stw r30,12(r11)
	PPC_STORE_U32(r11.u32 + 12, r30.u32);
	// lwz r3,4164(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// bl 0x8211d028
	sub_8211D028(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r3,4164(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,255
	ctx.r5.s64 = 255;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209ab98
	sub_8209AB98(ctx, base);
	// lwz r11,4164(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// li r29,0
	r29.s64 = 0;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r10,14(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 14);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820ed634
	if (!cr6.getGT()) goto loc_820ED634;
	// li r30,0
	r30.s64 = 0;
loc_820ED5F0:
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// addi r4,r1,192
	ctx.r4.s64 = ctx.r1.s64 + 192;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// lwz r11,4164(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// add r4,r11,r30
	ctx.r4.u64 = r11.u64 + r30.u64;
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// lwz r11,4164(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4164);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r30,r30,64
	r30.s64 = r30.s64 + 64;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r10,14(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 14);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpw cr6,r29,r10
	cr6.compare<int32_t>(r29.s32, ctx.r10.s32, xer);
	// blt cr6,0x820ed5f0
	if (cr6.getLT()) goto loc_820ED5F0;
loc_820ED634:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40343
	ctx.r3.u64 = ctx.r3.u64 | 40343;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r31,-31991
	r31.s64 = -2096562176;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r7,r1,108
	ctx.r7.s64 = ctx.r1.s64 + 108;
	// addi r6,r1,100
	ctx.r6.s64 = ctx.r1.s64 + 100;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f1,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	ctx.f1.f64 = double(temp.f32);
	// lwz r4,-31556(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31556);
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lis r3,0
	ctx.r3.s64 = 0;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// ori r3,r3,40343
	ctx.r3.u64 = ctx.r3.u64 | 40343;
	// addze r10,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r10.s64 = temp.s64;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r30,-14720(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + -14720);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-14724(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14724);
	// subf r29,r10,r11
	r29.s64 = r11.s64 - ctx.r10.s64;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lwz r4,-31556(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31556);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r30
	r11.s64 = r30.s32;
	// extsw r10,r29
	ctx.r10.s64 = r29.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// std r10,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r10.u64);
	// lfd f0,120(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// lfd f13,112(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820ED6F8"))) PPC_WEAK_FUNC(sub_820ED6F8);
PPC_FUNC_IMPL(__imp__sub_820ED6F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4132(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4132, r11.u32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r10,4012(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4012);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x820ed72c
	if (!cr6.getLT()) goto loc_820ED72C;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,4012(r11)
	PPC_STORE_U32(r11.u32 + 4012, ctx.r10.u32);
loc_820ED72C:
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,-1
	r11.s64 = -1;
	// stw r11,-19576(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19576, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19572(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19572, r11.u32);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ed790
	if (!cr6.getEQ()) goto loc_820ED790;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820ED790:
	// lis r31,-32141
	r31.s64 = -2106392576;
	// lwz r11,-19540(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19540);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ed7b4
	if (cr6.getEQ()) goto loc_820ED7B4;
	// li r4,23
	ctx.r4.s64 = 23;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-19540(r31)
	PPC_STORE_U32(r31.u32 + -19540, r11.u32);
loc_820ED7B4:
	// lis r9,-32010
	ctx.r9.s64 = -2097807360;
	// li r10,0
	ctx.r10.s64 = 0;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r11,r11,3544
	r11.s64 = r11.s64 + 3544;
	// stw r10,3984(r9)
	PPC_STORE_U32(ctx.r9.u32 + 3984, ctx.r10.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,80
	ctx.r10.s64 = 80;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_820ED7D8:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x820ed7d8
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820ED7D8;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4024(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4024, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4028(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4028, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820ED810"))) PPC_WEAK_FUNC(sub_820ED810);
PPC_FUNC_IMPL(__imp__sub_820ED810) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19616(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19616);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x820ed840
	if (cr6.getEQ()) goto loc_820ED840;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19612(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19612);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820ed85c
	if (!cr6.getEQ()) goto loc_820ED85C;
loc_820ED840:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820ed85c
	if (cr6.getEQ()) goto loc_820ED85C;
	// bl 0x821188f8
	sub_821188F8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, r11.u32);
loc_820ED85C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820ED870"))) PPC_WEAK_FUNC(sub_820ED870);
PPC_FUNC_IMPL(__imp__sub_820ED870) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -88, f31.u64);
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// li r31,0
	r31.s64 = 0;
	// mr r29,r31
	r29.u64 = r31.u64;
	// lwz r11,4168(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4168);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r10,14(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 14);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820ed8ec
	if (!cr6.getGT()) goto loc_820ED8EC;
	// mr r30,r31
	r30.u64 = r31.u64;
loc_820ED8A8:
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// lwz r11,4168(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4168);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// add r4,r11,r30
	ctx.r4.u64 = r11.u64 + r30.u64;
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// lwz r11,4168(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4168);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r30,r30,64
	r30.s64 = r30.s64 + 64;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r10,14(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 14);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpw cr6,r29,r10
	cr6.compare<int32_t>(r29.s32, ctx.r10.s32, xer);
	// blt cr6,0x820ed8a8
	if (cr6.getLT()) goto loc_820ED8A8;
loc_820ED8EC:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r11,2820
	ctx.r3.s64 = r11.s64 + 2820;
	// bl 0x8210d660
	sub_8210D660(ctx, base);
	// lis r23,-32141
	r23.s64 = -2106392576;
	// li r24,-1
	r24.s64 = -1;
	// lwz r11,-19576(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -19576);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820edcbc
	if (!cr6.getEQ()) goto loc_820EDCBC;
	// lfs f1,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lfs f1,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f1.f64 = double(temp.f32);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r11,r11,-49
	r11.s64 = r11.s64 + -49;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,116
	r11.s64 = ctx.r1.s64 + 116;
	// lwz r3,112(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// li r7,50
	ctx.r7.s64 = 50;
	// addi r5,r3,99
	ctx.r5.s64 = ctx.r3.s64 + 99;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r4,r11,25
	ctx.r4.s64 = r11.s64 + 25;
	// addi r6,r4,42
	ctx.r6.s64 = ctx.r4.s64 + 42;
	// stw r4,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r4.u32);
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39959
	ctx.r3.u64 = ctx.r3.u64 | 39959;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lfs f1,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	ctx.f1.f64 = double(temp.f32);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lfs f1,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f1.f64 = double(temp.f32);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r11,r11,-47
	r11.s64 = r11.s64 + -47;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,116
	r11.s64 = ctx.r1.s64 + 116;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r11,r11,30
	r11.s64 = r11.s64 + 30;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// li r28,-1
	r28.s64 = -1;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r29,r11,15124
	r29.s64 = r11.s64 + 15124;
	// lis r11,-31991
	r11.s64 = -2096562176;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// addi r30,r11,-31556
	r30.s64 = r11.s64 + -31556;
	// li r8,255
	ctx.r8.s64 = 255;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39960
	ctx.r3.u64 = ctx.r3.u64 | 39960;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lfs f1,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	ctx.f1.f64 = double(temp.f32);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lfs f1,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f1.f64 = double(temp.f32);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r11,r11,-47
	r11.s64 = r11.s64 + -47;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lis r26,-32141
	r26.s64 = -2106392576;
	// addi r10,r1,116
	ctx.r10.s64 = ctx.r1.s64 + 116;
	// lwz r11,-19572(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -19572);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r11,r11,50
	r11.s64 = r11.s64 + 50;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,6580
	r11.s64 = r11.s64 + 6580;
	// lfs f31,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f31.f64 = double(temp.f32);
	// beq cr6,0x820edb28
	if (cr6.getEQ()) goto loc_820EDB28;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r31.u32);
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r10,120(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// li r7,50
	ctx.r7.s64 = 50;
	// lwz r8,124(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// add r9,r10,r11
	ctx.r9.u64 = ctx.r10.u64 + r11.u64;
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// add r6,r8,r10
	ctx.r6.u64 = ctx.r8.u64 + ctx.r10.u64;
	// addi r5,r9,3
	ctx.r5.s64 = ctx.r9.s64 + 3;
	// addi r4,r10,-1
	ctx.r4.s64 = ctx.r10.s64 + -1;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r25,r3
	r25.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// b 0x820edb64
	goto loc_820EDB64;
loc_820EDB28:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r25,r3
	r25.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820EDB64:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39961
	ctx.r3.u64 = ctx.r3.u64 | 39961;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lfs f1,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	ctx.f1.f64 = double(temp.f32);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lfs f1,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f1.f64 = double(temp.f32);
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// rlwinm r11,r11,0,27,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x18;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r10,r1,116
	ctx.r10.s64 = ctx.r1.s64 + 116;
	// lwz r11,-19572(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -19572);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r11,r11,50
	r11.s64 = r11.s64 + 50;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// beq cr6,0x820edc28
	if (cr6.getEQ()) goto loc_820EDC28;
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// b 0x820edf84
	goto loc_820EDF84;
loc_820EDC28:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r31.u32);
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r10,120(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// li r7,50
	ctx.r7.s64 = 50;
	// lwz r8,124(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// add r9,r10,r11
	ctx.r9.u64 = ctx.r10.u64 + r11.u64;
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// add r6,r8,r10
	ctx.r6.u64 = ctx.r8.u64 + ctx.r10.u64;
	// addi r5,r9,3
	ctx.r5.s64 = ctx.r9.s64 + 3;
	// addi r4,r10,-1
	ctx.r4.s64 = ctx.r10.s64 + -1;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// b 0x820edf84
	goto loc_820EDF84;
loc_820EDCBC:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820eb050
	sub_820EB050(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r25,r10,15972
	r25.s64 = ctx.r10.s64 + 15972;
	// lis r10,-31991
	ctx.r10.s64 = -2096562176;
	// addi r11,r11,6580
	r11.s64 = r11.s64 + 6580;
	// addi r30,r10,-31556
	r30.s64 = ctx.r10.s64 + -31556;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r28,-1
	r28.s64 = -1;
	// lfs f31,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f31.f64 = double(temp.f32);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// addi r29,r10,15124
	r29.s64 = ctx.r10.s64 + 15124;
	// beq cr6,0x820eddd4
	if (cr6.getEQ()) goto loc_820EDDD4;
	// li r4,20
	ctx.r4.s64 = 20;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// li r4,20
	ctx.r4.s64 = 20;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r31.u32);
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lfs f1,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lwz r10,120(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lfs f1,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f1.f64 = double(temp.f32);
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,116
	r11.s64 = ctx.r1.s64 + 116;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r11,r11,21
	r11.s64 = r11.s64 + 21;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820EDDD4:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39962
	ctx.r3.u64 = ctx.r3.u64 | 39962;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,20
	ctx.r4.s64 = 20;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r26,r31
	r26.u64 = r31.u64;
	// addi r27,r11,-19088
	r27.s64 = r11.s64 + -19088;
	// lhz r11,4(r27)
	r11.u64 = PPC_LOAD_U16(r27.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820edea0
	if (cr6.getEQ()) goto loc_820EDEA0;
	// mr r11,r31
	r11.u64 = r31.u64;
loc_820EDE0C:
	// addi r10,r27,20
	ctx.r10.s64 = r27.s64 + 20;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r11,34
	cr6.compare<int32_t>(r11.s32, 34, xer);
	// beq cr6,0x820ede38
	if (cr6.getEQ()) goto loc_820EDE38;
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r10,r27,4
	ctx.r10.s64 = r27.s64 + 4;
	// mulli r11,r26,28
	r11.s64 = r26.s64 * 28;
	// lhzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820ede0c
	if (!cr6.getEQ()) goto loc_820EDE0C;
	// b 0x820edea0
	goto loc_820EDEA0;
loc_820EDE38:
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// blt cr6,0x820edea0
	if (cr6.getLT()) goto loc_820EDEA0;
	// mulli r11,r26,28
	r11.s64 = r26.s64 * 28;
	// addi r9,r27,16
	ctx.r9.s64 = r27.s64 + 16;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
loc_820EDE50:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x820ede70
	if (!cr6.getEQ()) goto loc_820EDE70;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,-28
	r11.s64 = r11.s64 + -28;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x820ede50
	if (!cr6.getLT()) goto loc_820EDE50;
	// b 0x820edea0
	goto loc_820EDEA0;
loc_820EDE70:
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x820edea0
	if (cr6.getLT()) goto loc_820EDEA0;
	// mulli r11,r10,28
	r11.s64 = ctx.r10.s64 * 28;
	// li r4,20
	ctx.r4.s64 = 20;
	// lwzx r5,r11,r27
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + r27.u32);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r4,20
	ctx.r4.s64 = 20;
	// addi r5,r11,25016
	ctx.r5.s64 = r11.s64 + 25016;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
loc_820EDEA0:
	// mulli r11,r26,28
	r11.s64 = r26.s64 * 28;
	// li r4,20
	ctx.r4.s64 = 20;
	// lwzx r5,r11,r27
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + r27.u32);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// li r4,20
	ctx.r4.s64 = 20;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r31.u32);
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lfs f1,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lwz r10,120(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lfs f1,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f1.f64 = double(temp.f32);
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,116
	r11.s64 = ctx.r1.s64 + 116;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r11,r11,45
	r11.s64 = r11.s64 + 45;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820EDF84:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39963
	ctx.r3.u64 = ctx.r3.u64 | 39963;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r31.u32);
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// li r10,247
	ctx.r10.s64 = 247;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subfic r11,r11,285
	xer.ca = r11.u32 <= 285;
	r11.s64 = 285 - r11.s64;
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lis r3,0
	ctx.r3.s64 = 0;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// ori r3,r3,39964
	ctx.r3.u64 = ctx.r3.u64 | 39964;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, r11.u64);
	// lfd f0,128(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r11,r11,4244
	r11.s64 = r11.s64 + 4244;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r31.u32);
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// li r10,357
	ctx.r10.s64 = 357;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subfic r11,r11,285
	xer.ca = r11.u32 <= 285;
	r11.s64 = 285 - r11.s64;
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// extsw r10,r11
	ctx.r10.s64 = r11.s32;
	// lwz r11,-19576(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -19576);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// std r10,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r10.u64);
	// lfd f0,128(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// addi r11,r11,4260
	r11.s64 = r11.s64 + 4260;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// bge cr6,0x820ee10c
	if (!cr6.getLT()) goto loc_820EE10C;
	// bl 0x820ec700
	sub_820EC700(ctx, base);
loc_820EE10C:
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// lfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_820EE118"))) PPC_WEAK_FUNC(sub_820EE118);
PPC_FUNC_IMPL(__imp__sub_820EE118) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r31,0
	r31.s64 = 0;
	// mr r30,r29
	r30.u64 = r29.u64;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// ble cr6,0x820ee188
	if (!cr6.getGT()) goto loc_820EE188;
	// lis r28,-32010
	r28.s64 = -2097807360;
loc_820EE13C:
	// cmpwi cr6,r31,1
	cr6.compare<int32_t>(r31.s32, 1, xer);
	// bne cr6,0x820ee158
	if (!cr6.getEQ()) goto loc_820EE158;
	// lwz r11,4152(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4152);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// b 0x820ee16c
	goto loc_820EE16C;
loc_820EE158:
	// cmpwi cr6,r31,6
	cr6.compare<int32_t>(r31.s32, 6, xer);
	// bne cr6,0x820ee168
	if (!cr6.getEQ()) goto loc_820EE168;
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// b 0x820ee16c
	goto loc_820EE16C;
loc_820EE168:
	// li r3,1
	ctx.r3.s64 = 1;
loc_820EE16C:
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ee17c
	if (!cr6.getEQ()) goto loc_820EE17C;
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
loc_820EE17C:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// blt cr6,0x820ee13c
	if (cr6.getLT()) goto loc_820EE13C;
loc_820EE188:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-19508
	r11.s64 = r11.s64 + -19508;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mullw r9,r10,r30
	ctx.r9.s64 = int64_t(ctx.r10.s32) * int64_t(r30.s32);
	// lwz r10,-4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// lwz r11,-8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8);
	// addi r11,r11,-24
	r11.s64 = r11.s64 + -24;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// addi r10,r10,6
	ctx.r10.s64 = ctx.r10.s64 + 6;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,-19568(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19568, temp.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// stfs f0,-19564(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19564, temp.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820EE1F0"))) PPC_WEAK_FUNC(sub_820EE1F0);
PPC_FUNC_IMPL(__imp__sub_820EE1F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,-1
	r11.s64 = -1;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// stw r11,-19604(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19604, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ee258
	if (!cr6.getEQ()) goto loc_820EE258;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EE258:
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r31,-32141
	r31.s64 = -2106392576;
	// lwz r11,-19540(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19540);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ee280
	if (cr6.getEQ()) goto loc_820EE280;
	// li r4,23
	ctx.r4.s64 = 23;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-19540(r31)
	PPC_STORE_U32(r31.u32 + -19540, r11.u32);
loc_820EE280:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r11,r11,3544
	r11.s64 = r11.s64 + 3544;
	// li r10,80
	ctx.r10.s64 = 80;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_820EE298:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x820ee298
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820EE298;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4024(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4024, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4028(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4028, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EE2D0"))) PPC_WEAK_FUNC(sub_820EE2D0);
PPC_FUNC_IMPL(__imp__sub_820EE2D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x820ee308
	if (!cr6.getEQ()) goto loc_820EE308;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8235da08
	sub_8235DA08(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820EE308:
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820ee334
	if (!cr6.getEQ()) goto loc_820EE334;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4152(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4152);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820EE334:
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x820ee350
	if (!cr6.getEQ()) goto loc_820EE350;
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820EE350:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EE368"))) PPC_WEAK_FUNC(sub_820EE368);
PPC_FUNC_IMPL(__imp__sub_820EE368) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,-1
	r11.s64 = -1;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// stw r11,-19592(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19592, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ee3d0
	if (!cr6.getEQ()) goto loc_820EE3D0;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EE3D0:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-19088
	r11.s64 = r11.s64 + -19088;
	// lwz r10,-19596(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -19596);
	// addi r11,r11,20
	r11.s64 = r11.s64 + 20;
	// mulli r10,r10,28
	ctx.r10.s64 = ctx.r10.s64 * 28;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x820eb6f8
	sub_820EB6F8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,25020(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25020);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19568(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19568, temp.u32);
	// mulli r11,r3,30
	r11.s64 = ctx.r3.s64 * 30;
	// addi r11,r11,186
	r11.s64 = r11.s64 + 186;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,-19564(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19564, temp.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EE438"))) PPC_WEAK_FUNC(sub_820EE438);
PPC_FUNC_IMPL(__imp__sub_820EE438) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// stw r11,3988(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3988, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4008(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4008, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4004(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4004, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4000(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4000, r11.u32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r11,r11,3252
	r11.s64 = r11.s64 + 3252;
	// stw r10,588(r11)
	PPC_STORE_U32(r11.u32 + 588, ctx.r10.u32);
	// stw r10,-400(r11)
	PPC_STORE_U32(r11.u32 + -400, ctx.r10.u32);
	// stw r10,284(r11)
	PPC_STORE_U32(r11.u32 + 284, ctx.r10.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ee4d0
	if (!cr6.getEQ()) goto loc_820EE4D0;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EE4D0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EE4E8"))) PPC_WEAK_FUNC(sub_820EE4E8);
PPC_FUNC_IMPL(__imp__sub_820EE4E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,0
	r11.s64 = 0;
	// lis r27,-32010
	r27.s64 = -2097807360;
	// ori r22,r11,40960
	r22.u64 = r11.u64 | 40960;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// lwz r3,4208(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 4208);
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r25,1
	r25.s64 = 1;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// addi r31,r11,3252
	r31.s64 = r11.s64 + 3252;
	// lis r26,-32141
	r26.s64 = -2106392576;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// bne cr6,0x820ee624
	if (!cr6.getEQ()) goto loc_820EE624;
	// li r11,0
	r11.s64 = 0;
	// lfs f12,-19588(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + -19588);
	ctx.f12.f64 = double(temp.f32);
	// stw r11,4008(r29)
	PPC_STORE_U32(r29.u32 + 4008, r11.u32);
	// stw r11,4004(r30)
	PPC_STORE_U32(r30.u32 + 4004, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f11,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f11.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// fcmpu cr6,f12,f11
	cr6.compare(ctx.f12.f64, ctx.f11.f64);
	// stw r11,4000(r28)
	PPC_STORE_U32(r28.u32 + 4000, r11.u32);
	// stw r11,588(r31)
	PPC_STORE_U32(r31.u32 + 588, r11.u32);
	// stw r11,-400(r31)
	PPC_STORE_U32(r31.u32 + -400, r11.u32);
	// stw r11,284(r31)
	PPC_STORE_U32(r31.u32 + 284, r11.u32);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f10,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	ctx.f10.f64 = double(temp.f32);
	// ble cr6,0x820ee58c
	if (!cr6.getGT()) goto loc_820EE58C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f10,f0
	cr6.compare(ctx.f10.f64, f0.f64);
	// ble cr6,0x820ee58c
	if (!cr6.getGT()) goto loc_820EE58C;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,4008(r29)
	PPC_STORE_U32(r29.u32 + 4008, r11.u32);
	// b 0x820ee624
	goto loc_820EE624;
loc_820EE58C:
	// bl 0x820ed178
	sub_820ED178(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ee61c
	if (!cr6.getEQ()) goto loc_820EE61C;
	// fcmpu cr6,f12,f11
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f12.f64, ctx.f11.f64);
	// ble cr6,0x820ee5bc
	if (!cr6.getGT()) goto loc_820EE5BC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,24804(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24804);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f10,f0
	cr6.compare(ctx.f10.f64, f0.f64);
	// bgt cr6,0x820ee5bc
	if (cr6.getGT()) goto loc_820EE5BC;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,4000(r28)
	PPC_STORE_U32(r28.u32 + 4000, r11.u32);
	// b 0x820ee624
	goto loc_820EE624;
loc_820EE5BC:
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fctiwz f0,f10
	ctx.fpscr.disableFlushMode();
	f0.s64 = (ctx.f10.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f10.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,263
	cr6.compare<int32_t>(r11.s32, 263, xer);
	// blt cr6,0x820ee5e0
	if (cr6.getLT()) goto loc_820EE5E0;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,588(r31)
	PPC_STORE_U32(r31.u32 + 588, r11.u32);
	// b 0x820ee624
	goto loc_820EE624;
loc_820EE5E0:
	// cmpwi cr6,r11,230
	cr6.compare<int32_t>(r11.s32, 230, xer);
	// blt cr6,0x820ee5f4
	if (cr6.getLT()) goto loc_820EE5F4;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// b 0x820ee624
	goto loc_820EE624;
loc_820EE5F4:
	// cmpwi cr6,r11,197
	cr6.compare<int32_t>(r11.s32, 197, xer);
	// blt cr6,0x820ee608
	if (cr6.getLT()) goto loc_820EE608;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,284(r31)
	PPC_STORE_U32(r31.u32 + 284, r11.u32);
	// b 0x820ee624
	goto loc_820EE624;
loc_820EE608:
	// cmpwi cr6,r11,164
	cr6.compare<int32_t>(r11.s32, 164, xer);
	// blt cr6,0x820ee61c
	if (cr6.getLT()) goto loc_820EE61C;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,-400(r31)
	PPC_STORE_U32(r31.u32 + -400, r11.u32);
	// b 0x820ee624
	goto loc_820EE624;
loc_820EE61C:
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,4004(r30)
	PPC_STORE_U32(r30.u32 + 4004, r11.u32);
loc_820EE624:
	// li r4,4096
	ctx.r4.s64 = 4096;
	// lwz r3,4208(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r23,-32010
	r23.s64 = -2097807360;
	// lis r21,-32010
	r21.s64 = -2097807360;
	// lis r24,-32010
	r24.s64 = -2097807360;
	// beq cr6,0x820ee66c
	if (cr6.getEQ()) goto loc_820EE66C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,5503
	ctx.r8.s64 = 5503;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,3988(r24)
	PPC_STORE_U32(r24.u32 + 3988, r11.u32);
	// b 0x820ee71c
	goto loc_820EE71C;
loc_820EE66C:
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// lwz r3,4208(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820ee6e4
	if (cr6.getEQ()) goto loc_820EE6E4;
	// lwz r11,4004(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4004);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ee698
	if (cr6.getEQ()) goto loc_820EE698;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,3992(r21)
	PPC_STORE_U32(r21.u32 + 3992, r11.u32);
	// b 0x820ee6c4
	goto loc_820EE6C4;
loc_820EE698:
	// lwz r11,4008(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4008);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ee6b0
	if (cr6.getEQ()) goto loc_820EE6B0;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,3996(r23)
	PPC_STORE_U32(r23.u32 + 3996, r11.u32);
	// b 0x820ee6c4
	goto loc_820EE6C4;
loc_820EE6B0:
	// lwz r11,4000(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4000);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ee6c4
	if (cr6.getEQ()) goto loc_820EE6C4;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,3988(r24)
	PPC_STORE_U32(r24.u32 + 3988, r11.u32);
loc_820EE6C4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,5519
	ctx.r8.s64 = 5519;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820ee71c
	goto loc_820EE71C;
loc_820EE6E4:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820ee728
	if (cr6.getEQ()) goto loc_820EE728;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,5524
	ctx.r8.s64 = 5524;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,3996(r23)
	PPC_STORE_U32(r23.u32 + 3996, r11.u32);
loc_820EE71C:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820EE728:
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// lwz r3,4208(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 4208);
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820ee808
	if (cr6.getEQ()) goto loc_820EE808;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-19588(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lfs f13,24784(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24784);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,14272(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14272);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f13,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820ee778
	if (cr6.getGT()) goto loc_820EE778;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820ee77c
	if (!cr6.getLT()) goto loc_820EE77C;
loc_820EE778:
	// fmr f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f13.f64;
loc_820EE77C:
	// lwz r11,588(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 588);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ee794
	if (cr6.getEQ()) goto loc_820EE794;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// stfs f0,4172(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 4172, temp.u32);
	// b 0x820ee808
	goto loc_820EE808;
loc_820EE794:
	// lwz r11,-400(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -400);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ee7bc
	if (cr6.getEQ()) goto loc_820EE7BC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f0,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f0.f64 * f0.f64));
	// lfs f0,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,-19536(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19536, temp.u32);
	// b 0x820ee808
	goto loc_820EE808;
loc_820EE7BC:
	// lwz r11,284(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 284);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ee7e4
	if (cr6.getEQ()) goto loc_820EE7E4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f0,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f0.f64 * f0.f64));
	// lfs f0,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,-19532(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19532, temp.u32);
	// b 0x820ee808
	goto loc_820EE808;
loc_820EE7E4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ee808
	if (cr6.getEQ()) goto loc_820EE808;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f0,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f0.f64 * f0.f64));
	// lfs f0,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,-19528(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19528, temp.u32);
loc_820EE808:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ee83c
	if (cr6.getEQ()) goto loc_820EE83C;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820EE83C:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ee860
	if (cr6.getEQ()) goto loc_820EE860;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820EE860:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ee884
	if (cr6.getEQ()) goto loc_820EE884;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820EE884:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,24(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ee8a4
	if (cr6.getEQ()) goto loc_820EE8A4;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
loc_820EE8A4:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// lwz r11,3988(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 3988);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ee8d8
	if (cr6.getEQ()) goto loc_820EE8D8;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,4148(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4148, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,12
	r11.s64 = 12;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
loc_820EE8D8:
	// lwz r11,3992(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 3992);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ee8f8
	if (cr6.getEQ()) goto loc_820EE8F8;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,11
	r11.s64 = 11;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
loc_820EE8F8:
	// lwz r11,3996(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 3996);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ee958
	if (cr6.getEQ()) goto loc_820EE958;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lwz r11,-19592(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19592);
	// mulli r11,r11,30
	r11.s64 = r11.s64 * 30;
	// addi r9,r11,186
	ctx.r9.s64 = r11.s64 + 186;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,25020(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25020);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19568(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19568, temp.u32);
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// li r11,9
	r11.s64 = 9;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// extsw r11,r9
	r11.s64 = ctx.r9.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,-19564(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19564, temp.u32);
loc_820EE958:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_820EE960"))) PPC_WEAK_FUNC(sub_820EE960);
PPC_FUNC_IMPL(__imp__sub_820EE960) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,5
	r11.s64 = 5;
	// stw r11,-19580(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19580, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4040(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4040, r11.u32);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ee9d4
	if (!cr6.getEQ()) goto loc_820EE9D4;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EE9D4:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r9,-32010
	ctx.r9.s64 = -2097807360;
	// addi r10,r10,-19088
	ctx.r10.s64 = ctx.r10.s64 + -19088;
	// lwz r11,-19596(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19596);
	// addi r8,r10,24
	ctx.r8.s64 = ctx.r10.s64 + 24;
	// addi r7,r10,8
	ctx.r7.s64 = ctx.r10.s64 + 8;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// lwzx r10,r11,r8
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// lwzx r3,r11,r7
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// stw r10,3912(r9)
	PPC_STORE_U32(ctx.r9.u32 + 3912, ctx.r10.u32);
	// bl 0x82136728
	sub_82136728(ctx, base);
	// bl 0x82136a40
	sub_82136A40(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EEA20"))) PPC_WEAK_FUNC(sub_820EEA20);
PPC_FUNC_IMPL(__imp__sub_820EEA20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-19088
	r11.s64 = r11.s64 + -19088;
	// lwz r10,-19596(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -19596);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// mulli r10,r10,28
	ctx.r10.s64 = ctx.r10.s64 * 28;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x82136728
	sub_82136728(ctx, base);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19616(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19616);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820eea80
	if (cr6.getLT()) goto loc_820EEA80;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820eea80
	if (cr6.getEQ()) goto loc_820EEA80;
	// bl 0x821188f8
	sub_821188F8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, r11.u32);
loc_820EEA80:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EEA98"))) PPC_WEAK_FUNC(sub_820EEA98);
PPC_FUNC_IMPL(__imp__sub_820EEA98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820eeaf4
	if (!cr6.getEQ()) goto loc_820EEAF4;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EEAF4:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r9,-32010
	ctx.r9.s64 = -2097807360;
	// addi r10,r10,-19088
	ctx.r10.s64 = ctx.r10.s64 + -19088;
	// lwz r11,-19596(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19596);
	// addi r8,r10,24
	ctx.r8.s64 = ctx.r10.s64 + 24;
	// addi r7,r10,8
	ctx.r7.s64 = ctx.r10.s64 + 8;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// lwzx r10,r11,r8
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// lwzx r3,r11,r7
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// stw r10,3912(r9)
	PPC_STORE_U32(ctx.r9.u32 + 3912, ctx.r10.u32);
	// bl 0x82136728
	sub_82136728(ctx, base);
	// bl 0x82136a40
	sub_82136A40(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r31,-32141
	r31.s64 = -2106392576;
	// lfs f0,25028(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25028);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19568(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19568, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,25024(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25024);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19564(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19564, temp.u32);
	// lwz r11,-19540(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19540);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820eeb84
	if (cr6.getEQ()) goto loc_820EEB84;
	// li r4,32767
	ctx.r4.s64 = 32767;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// li r4,23
	ctx.r4.s64 = 23;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,26372(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26372, r11.u32);
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-19540(r31)
	PPC_STORE_U32(r31.u32 + -19540, r11.u32);
loc_820EEB84:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EEB98"))) PPC_WEAK_FUNC(sub_820EEB98);
PPC_FUNC_IMPL(__imp__sub_820EEB98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820eebf4
	if (!cr6.getEQ()) goto loc_820EEBF4;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EEBF4:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r9,-32010
	ctx.r9.s64 = -2097807360;
	// addi r10,r10,-19088
	ctx.r10.s64 = ctx.r10.s64 + -19088;
	// lwz r11,-19596(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19596);
	// addi r8,r10,24
	ctx.r8.s64 = ctx.r10.s64 + 24;
	// addi r7,r10,8
	ctx.r7.s64 = ctx.r10.s64 + 8;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// lwzx r10,r11,r8
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// lwzx r3,r11,r7
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// stw r10,3912(r9)
	PPC_STORE_U32(ctx.r9.u32 + 3912, ctx.r10.u32);
	// bl 0x82136728
	sub_82136728(ctx, base);
	// bl 0x82136a40
	sub_82136A40(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,2796(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 2796);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820eec60
	if (cr6.getEQ()) goto loc_820EEC60;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,6186
	ctx.r8.s64 = 6186;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,258
	ctx.r4.s64 = 258;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820EEC60:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EEC78"))) PPC_WEAK_FUNC(sub_820EEC78);
PPC_FUNC_IMPL(__imp__sub_820EEC78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r16{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed534
	// stwu r1,-320(r1)
	ea = -320 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r3,0
	ctx.r3.s64 = 0;
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// ori r3,r3,40335
	ctx.r3.u64 = ctx.r3.u64 | 40335;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// lwz r4,-31556(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + -31556);
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// lfs f2,25044(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25044);
	ctx.f2.f64 = double(temp.f32);
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// li r5,255
	ctx.r5.s64 = 255;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r3,-32256
	ctx.r3.s64 = -2113929216;
	// addi r30,r11,24780
	r30.s64 = r11.s64 + 24780;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lis r4,-32256
	ctx.r4.s64 = -2113929216;
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lfs f29,2776(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 2776);
	f29.f64 = double(temp.f32);
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f23,12020(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 12020);
	f23.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f24,25040(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 25040);
	f24.f64 = double(temp.f32);
	// addi r28,r11,28184
	r28.s64 = r11.s64 + 28184;
	// lfs f25,25036(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 25036);
	f25.f64 = double(temp.f32);
	// li r20,0
	r20.s64 = 0;
	// lfs f26,2692(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 2692);
	f26.f64 = double(temp.f32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lfs f31,2688(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 2688);
	f31.f64 = double(temp.f32);
	// lfs f27,25032(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 25032);
	f27.f64 = double(temp.f32);
	// mr r22,r20
	r22.u64 = r20.u64;
	// lfs f28,3060(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3060);
	f28.f64 = double(temp.f32);
	// lis r26,-32141
	r26.s64 = -2106392576;
	// lis r27,-32141
	r27.s64 = -2106392576;
	// addi r25,r11,2776
	r25.s64 = r11.s64 + 2776;
	// li r21,-1
	r21.s64 = -1;
	// li r23,2
	r23.s64 = 2;
	// li r24,1
	r24.s64 = 1;
loc_820EED64:
	// lbzx r11,r22,r25
	r11.u64 = PPC_LOAD_U8(r22.u32 + r25.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820eee60
	if (cr6.getEQ()) goto loc_820EEE60;
	// cmplwi cr6,r22,3
	cr6.compare<uint32_t>(r22.u32, 3, xer);
	// bgt cr6,0x820eedb8
	if (cr6.getGT()) goto loc_820EEDB8;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,-4720
	r12.s64 = r12.s64 + -4720;
	// rlwinm r0,r22,2,0,29
	r0.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r22.u64) {
	case 0:
		goto loc_820EEDA0;
	case 1:
		goto loc_820EEDB0;
	case 2:
		goto loc_820EEDA8;
	case 3:
		goto loc_820EEDB8;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-4704(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -4704);
	// lwz r16,-4688(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -4688);
	// lwz r16,-4696(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -4696);
	// lwz r16,-4680(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -4680);
loc_820EEDA0:
	// li r29,13
	r29.s64 = 13;
	// b 0x820eedbc
	goto loc_820EEDBC;
loc_820EEDA8:
	// li r29,16
	r29.s64 = 16;
	// b 0x820eedbc
	goto loc_820EEDBC;
loc_820EEDB0:
	// li r29,15
	r29.s64 = 15;
	// b 0x820eedbc
	goto loc_820EEDBC;
loc_820EEDB8:
	// li r29,14
	r29.s64 = 14;
loc_820EEDBC:
	// lwz r11,-15652(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -15652);
	// cmpw cr6,r11,r22
	cr6.compare<int32_t>(r11.s32, r22.s32, xer);
	// bne cr6,0x820eedf4
	if (!cr6.getEQ()) goto loc_820EEDF4;
	// fsubs f5,f30,f28
	ctx.fpscr.disableFlushMode();
	ctx.f5.f64 = double(float(f30.f64 - f28.f64));
	// stw r20,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r20.u32);
	// fmr f8,f24
	ctx.f8.f64 = f24.f64;
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r20.u32);
	// fmr f6,f25
	ctx.f6.f64 = f25.f64;
	// fmr f4,f26
	ctx.f4.f64 = f26.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// fadds f7,f5,f27
	ctx.f7.f64 = double(float(ctx.f5.f64 + f27.f64));
	// bl 0x82096ba8
	sub_82096BA8(ctx, base);
loc_820EEDF4:
	// lwz r11,-19420(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -19420);
	// cmpw cr6,r11,r22
	cr6.compare<int32_t>(r11.s32, r22.s32, xer);
	// bne cr6,0x820eee08
	if (!cr6.getEQ()) goto loc_820EEE08;
	// mr r31,r21
	r31.u64 = r21.u64;
	// b 0x820eee10
	goto loc_820EEE10;
loc_820EEE08:
	// lis r31,21845
	r31.s64 = 1431633920;
	// ori r31,r31,22015
	r31.u64 = r31.u64 | 22015;
loc_820EEE10:
	// rlwinm r11,r29,4,0,27
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r11,r28
	ctx.r3.u64 = r11.u64 + r28.u64;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// lfs f0,-4(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + -4);
	f0.f64 = double(temp.f32);
	// li r10,0
	ctx.r10.s64 = 0;
	// lfs f2,-12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -12);
	ctx.f2.f64 = double(temp.f32);
	// li r9,0
	ctx.r9.s64 = 0;
	// fmr f8,f29
	ctx.f8.f64 = f29.f64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// fmr f7,f29
	ctx.f7.f64 = f29.f64;
	// fmr f6,f31
	ctx.f6.f64 = f31.f64;
	// stw r23,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r23.u32);
	// fmr f5,f31
	ctx.f5.f64 = f31.f64;
	// stw r24,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r24.u32);
	// fmr f4,f23
	ctx.f4.f64 = f23.f64;
	// fadds f3,f30,f0
	ctx.f3.f64 = double(float(f30.f64 + f0.f64));
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x82099640
	sub_82099640(ctx, base);
	// lfs f0,0(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// fadds f30,f30,f0
	f30.f64 = double(float(f30.f64 + f0.f64));
loc_820EEE60:
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// cmpwi cr6,r22,4
	cr6.compare<int32_t>(r22.s32, 4, xer);
	// blt cr6,0x820eed64
	if (cr6.getLT()) goto loc_820EED64;
	// addi r1,r1,320
	ctx.r1.s64 = ctx.r1.s64 + 320;
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed580
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_820EEE80"))) PPC_WEAK_FUNC(sub_820EEE80);
PPC_FUNC_IMPL(__imp__sub_820EEE80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r16{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r11,r11,-16904
	r11.s64 = r11.s64 + -16904;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lbz r9,-19523(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + -19523);
	// beq cr6,0x820eeeb0
	if (cr6.getEQ()) goto loc_820EEEB0;
	// clrlwi r10,r9,31
	ctx.r10.u64 = ctx.r9.u32 & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820eeeb0
	if (cr6.getEQ()) goto loc_820EEEB0;
	// li r3,1
	ctx.r3.s64 = 1;
loc_820EEEB0:
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820eeecc
	if (cr6.getEQ()) goto loc_820EEECC;
	// rlwinm r10,r9,0,30,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820eeecc
	if (cr6.getEQ()) goto loc_820EEECC;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EEECC:
	// lhz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820eeee8
	if (cr6.getEQ()) goto loc_820EEEE8;
	// rlwinm r10,r9,0,29,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820eeee8
	if (cr6.getEQ()) goto loc_820EEEE8;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EEEE8:
	// lhz r10,6(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 6);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820eef04
	if (cr6.getEQ()) goto loc_820EEF04;
	// rlwinm r10,r9,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820eef04
	if (cr6.getEQ()) goto loc_820EEF04;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EEF04:
	// lhz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820eef20
	if (cr6.getEQ()) goto loc_820EEF20;
	// rlwinm r10,r9,0,27,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x10;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820eef20
	if (cr6.getEQ()) goto loc_820EEF20;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EEF20:
	// lhz r11,10(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 10);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820eef3c
	if (cr6.getEQ()) goto loc_820EEF3C;
	// rlwinm r11,r9,0,26,26
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820eef3c
	if (cr6.getEQ()) goto loc_820EEF3C;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EEF3C:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r10,r11,3544
	ctx.r10.s64 = r11.s64 + 3544;
loc_820EEF48:
	// cmplwi cr6,r9,4
	cr6.compare<uint32_t>(ctx.r9.u32, 4, xer);
	// bgt cr6,0x820eefa4
	if (cr6.getGT()) goto loc_820EEFA4;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,-4248
	r12.s64 = r12.s64 + -4248;
	// rlwinm r0,r9,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r9.u64) {
	case 0:
		goto loc_820EEF7C;
	case 1:
		goto loc_820EEF84;
	case 2:
		goto loc_820EEF8C;
	case 3:
		goto loc_820EEF94;
	case 4:
		goto loc_820EEF9C;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-4228(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -4228);
	// lwz r16,-4220(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -4220);
	// lwz r16,-4212(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -4212);
	// lwz r16,-4204(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -4204);
	// lwz r16,-4196(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -4196);
loc_820EEF7C:
	// li r11,11
	r11.s64 = 11;
	// b 0x820eefa8
	goto loc_820EEFA8;
loc_820EEF84:
	// li r11,12
	r11.s64 = 12;
	// b 0x820eefa8
	goto loc_820EEFA8;
loc_820EEF8C:
	// li r11,15
	r11.s64 = 15;
	// b 0x820eefa8
	goto loc_820EEFA8;
loc_820EEF94:
	// li r11,23
	r11.s64 = 23;
	// b 0x820eefa8
	goto loc_820EEFA8;
loc_820EEF9C:
	// li r11,24
	r11.s64 = 24;
	// b 0x820eefa8
	goto loc_820EEFA8;
loc_820EEFA4:
	// li r11,0
	r11.s64 = 0;
loc_820EEFA8:
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820eefb8
	if (cr6.getEQ()) goto loc_820EEFB8;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820EEFB8:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmpwi cr6,r9,5
	cr6.compare<int32_t>(ctx.r9.s32, 5, xer);
	// blt cr6,0x820eef48
	if (cr6.getLT()) goto loc_820EEF48;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EEFC8"))) PPC_WEAK_FUNC(sub_820EEFC8);
PPC_FUNC_IMPL(__imp__sub_820EEFC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// stw r11,3988(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3988, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4008(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4008, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4004(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4004, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4000(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4000, r11.u32);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ef044
	if (!cr6.getEQ()) goto loc_820EF044;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EF044:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EF058"))) PPC_WEAK_FUNC(sub_820EF058);
PPC_FUNC_IMPL(__imp__sub_820EF058) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r26,0
	r26.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r26
	r11.u64 = r26.u64;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// li r27,1
	r27.s64 = 1;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// mr r31,r27
	r31.u64 = r27.u64;
	// stw r11,3988(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3988, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4276(r30)
	PPC_STORE_U32(r30.u32 + 4276, r11.u32);
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4008(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4008, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4004(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4004, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4000(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4000, r11.u32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r28,r11,3440
	r28.s64 = r11.s64 + 3440;
loc_820EF0B8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820ecd28
	sub_820ECD28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ef0d8
	if (cr6.getEQ()) goto loc_820EF0D8;
	// mr r11,r27
	r11.u64 = r27.u64;
	// stbx r27,r28,r31
	PPC_STORE_U8(r28.u32 + r31.u32, r27.u8);
	// stw r11,4152(r29)
	PPC_STORE_U32(r29.u32 + 4152, r11.u32);
	// b 0x820ef0dc
	goto loc_820EF0DC;
loc_820EF0D8:
	// stbx r26,r28,r31
	PPC_STORE_U8(r28.u32 + r31.u32, r26.u8);
loc_820EF0DC:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,81
	cr6.compare<int32_t>(r31.s32, 81, xer);
	// blt cr6,0x820ef0b8
	if (cr6.getLT()) goto loc_820EF0B8;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r31,r27
	r31.u64 = r27.u64;
	// addi r29,r11,2888
	r29.s64 = r11.s64 + 2888;
loc_820EF0F4:
	// lbzx r11,r28,r31
	r11.u64 = PPC_LOAD_U8(r28.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ef124
	if (cr6.getEQ()) goto loc_820EF124;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82136f50
	sub_82136F50(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ef124
	if (cr6.getEQ()) goto loc_820EF124;
	// lwz r11,4276(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4276);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stwx r31,r10,r29
	PPC_STORE_U32(ctx.r10.u32 + r29.u32, r31.u32);
	// stw r11,4276(r30)
	PPC_STORE_U32(r30.u32 + 4276, r11.u32);
loc_820EF124:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,81
	cr6.compare<int32_t>(r31.s32, 81, xer);
	// blt cr6,0x820ef0f4
	if (cr6.getLT()) goto loc_820EF0F4;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ef168
	if (!cr6.getEQ()) goto loc_820EF168;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EF168:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820EF170"))) PPC_WEAK_FUNC(sub_820EF170);
PPC_FUNC_IMPL(__imp__sub_820EF170) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lwz r10,4220(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4220);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820ef1f0
	if (!cr6.getGT()) goto loc_820EF1F0;
	// lis r9,-32141
	ctx.r9.s64 = -2106392576;
	// li r11,0
	r11.s64 = 0;
	// addi r8,r9,-19476
	ctx.r8.s64 = ctx.r9.s64 + -19476;
	// lis r9,-32010
	ctx.r9.s64 = -2097807360;
	// addi r7,r9,3888
	ctx.r7.s64 = ctx.r9.s64 + 3888;
	// lis r9,-32010
	ctx.r9.s64 = -2097807360;
	// addi r9,r9,3848
	ctx.r9.s64 = ctx.r9.s64 + 3848;
loc_820EF1B8:
	// lwzx r6,r11,r9
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x820ef1d0
	if (cr6.getEQ()) goto loc_820EF1D0;
	// lwzx r6,r11,r7
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x820ef1e0
	if (cr6.getEQ()) goto loc_820EF1E0;
loc_820EF1D0:
	// lwzx r6,r11,r8
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// cmpw cr6,r6,r31
	cr6.compare<int32_t>(ctx.r6.s32, r31.s32, xer);
	// bne cr6,0x820ef1e0
	if (!cr6.getEQ()) goto loc_820EF1E0;
	// li r30,1
	r30.s64 = 1;
loc_820EF1E0:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820ef1b8
	if (!cr6.getEQ()) goto loc_820EF1B8;
loc_820EF1F0:
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ef20c
	if (cr6.getEQ()) goto loc_820EF20C;
	// cmpwi cr6,r31,4
	cr6.compare<int32_t>(r31.s32, 4, xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// bge cr6,0x820ef210
	if (!cr6.getLT()) goto loc_820EF210;
loc_820EF20C:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_820EF210:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EF228"))) PPC_WEAK_FUNC(sub_820EF228);
PPC_FUNC_IMPL(__imp__sub_820EF228) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lwz r10,4220(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4220);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820ef2a8
	if (!cr6.getGT()) goto loc_820EF2A8;
	// lis r9,-32141
	ctx.r9.s64 = -2106392576;
	// li r11,0
	r11.s64 = 0;
	// addi r8,r9,-19460
	ctx.r8.s64 = ctx.r9.s64 + -19460;
	// lis r9,-32141
	ctx.r9.s64 = -2106392576;
	// addi r7,r9,-19476
	ctx.r7.s64 = ctx.r9.s64 + -19476;
	// lis r9,-32010
	ctx.r9.s64 = -2097807360;
	// addi r9,r9,3888
	ctx.r9.s64 = ctx.r9.s64 + 3888;
loc_820EF270:
	// lwzx r6,r11,r9
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x820ef298
	if (cr6.getEQ()) goto loc_820EF298;
	// lwzx r6,r11,r7
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// cmpw cr6,r6,r31
	cr6.compare<int32_t>(ctx.r6.s32, r31.s32, xer);
	// bne cr6,0x820ef298
	if (!cr6.getEQ()) goto loc_820EF298;
	// lwzx r6,r11,r8
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// cmpw cr6,r6,r31
	cr6.compare<int32_t>(ctx.r6.s32, r31.s32, xer);
	// bne cr6,0x820ef298
	if (!cr6.getEQ()) goto loc_820EF298;
	// li r30,1
	r30.s64 = 1;
loc_820EF298:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820ef270
	if (!cr6.getEQ()) goto loc_820EF270;
loc_820EF2A8:
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ef2c4
	if (cr6.getEQ()) goto loc_820EF2C4;
	// cmpwi cr6,r31,4
	cr6.compare<int32_t>(r31.s32, 4, xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// bge cr6,0x820ef2c8
	if (!cr6.getLT()) goto loc_820EF2C8;
loc_820EF2C4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_820EF2C8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EF2E0"))) PPC_WEAK_FUNC(sub_820EF2E0);
PPC_FUNC_IMPL(__imp__sub_820EF2E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r31,0
	r31.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r31
	r11.u64 = r31.u64;
	// lis r29,-32141
	r29.s64 = -2106392576;
	// stw r11,3988(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3988, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4008(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4008, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4004(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4004, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4000(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4000, r11.u32);
	// lwz r11,-19480(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -19480);
	// cmpwi cr6,r11,64
	cr6.compare<int32_t>(r11.s32, 64, xer);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r27,r11,-19476
	r27.s64 = r11.s64 + -19476;
	// beq cr6,0x820ef3b4
	if (cr6.getEQ()) goto loc_820EF3B4;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,17
	ctx.r3.s64 = 17;
	// bl 0x820e98b8
	sub_820E98B8(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x820ef35c
	if (!cr6.getEQ()) goto loc_820EF35C;
	// li r11,33
	r11.s64 = 33;
	// stw r11,-19480(r29)
	PPC_STORE_U32(r29.u32 + -19480, r11.u32);
	// b 0x820ef3b4
	goto loc_820EF3B4;
loc_820EF35C:
	// li r11,8
	r11.s64 = 8;
	// mr r28,r27
	r28.u64 = r27.u64;
	// stw r11,-19480(r29)
	PPC_STORE_U32(r29.u32 + -19480, r11.u32);
loc_820EF368:
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// blt cr6,0x820ef3a4
	if (cr6.getLT()) goto loc_820EF3A4;
	// mr r30,r31
	r30.u64 = r31.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820ef3a0
	if (!cr6.getGT()) goto loc_820EF3A0;
loc_820EF380:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820ef170
	sub_820EF170(ctx, base);
	// lwz r11,-19480(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -19480);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ef3a0
	if (cr6.getEQ()) goto loc_820EF3A0;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x820ef380
	if (cr6.getLT()) goto loc_820EF380;
loc_820EF3A0:
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
loc_820EF3A4:
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// addi r10,r27,16
	ctx.r10.s64 = r27.s64 + 16;
	// cmpw cr6,r28,r10
	cr6.compare<int32_t>(r28.s32, ctx.r10.s32, xer);
	// blt cr6,0x820ef368
	if (cr6.getLT()) goto loc_820EF368;
loc_820EF3B4:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r10,r11,2872
	ctx.r10.s64 = r11.s64 + 2872;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r9,r11,3888
	ctx.r9.s64 = r11.s64 + 3888;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// stw r31,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r31.u32);
	// addi r8,r11,3848
	ctx.r8.s64 = r11.s64 + 3848;
	// stw r31,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r31.u32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// stw r31,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r31.u32);
	// stw r31,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r31.u32);
	// addi r7,r11,2760
	ctx.r7.s64 = r11.s64 + 2760;
	// stw r31,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, r31.u32);
	// stw r31,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r31.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r31,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, r31.u32);
	// mr r11,r31
	r11.u64 = r31.u64;
	// stw r31,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, r31.u32);
	// addi r9,r10,3916
	ctx.r9.s64 = ctx.r10.s64 + 3916;
	// stw r31,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r31.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r31,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r31.u32);
	// stw r31,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r31.u32);
	// stw r31,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, r31.u32);
	// stw r31,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, r31.u32);
	// stw r31,8(r7)
	PPC_STORE_U32(ctx.r7.u32 + 8, r31.u32);
	// stw r31,12(r8)
	PPC_STORE_U32(ctx.r8.u32 + 12, r31.u32);
	// stw r31,12(r7)
	PPC_STORE_U32(ctx.r7.u32 + 12, r31.u32);
	// addi r8,r10,3212
	ctx.r8.s64 = ctx.r10.s64 + 3212;
loc_820EF428:
	// lwzx r10,r11,r27
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r27.u32);
	// stwx r10,r11,r8
	PPC_STORE_U32(r11.u32 + ctx.r8.u32, ctx.r10.u32);
	// stwx r10,r11,r9
	PPC_STORE_U32(r11.u32 + ctx.r9.u32, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpwi cr6,r11,16
	cr6.compare<int32_t>(r11.s32, 16, xer);
	// blt cr6,0x820ef428
	if (cr6.getLT()) goto loc_820EF428;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// stw r31,4216(r11)
	PPC_STORE_U32(r11.u32 + 4216, r31.u32);
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ef480
	if (!cr6.getEQ()) goto loc_820EF480;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EF480:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820EF488"))) PPC_WEAK_FUNC(sub_820EF488);
PPC_FUNC_IMPL(__imp__sub_820EF488) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3988(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3988, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4008(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4008, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4004(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4004, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4000(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4000, r11.u32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lwz r11,4228(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4228);
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// li r11,0
	r11.s64 = 0;
	// beq cr6,0x820ef4e8
	if (cr6.getEQ()) goto loc_820EF4E8;
	// li r11,3
	r11.s64 = 3;
loc_820EF4E8:
	// stw r11,3528(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3528, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// stw r11,4292(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4292, r11.u32);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ef530
	if (!cr6.getEQ()) goto loc_820EF530;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EF530:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EF548"))) PPC_WEAK_FUNC(sub_820EF548);
PPC_FUNC_IMPL(__imp__sub_820EF548) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r8,-32010
	ctx.r8.s64 = -2097807360;
	// addi r10,r11,3936
	ctx.r10.s64 = r11.s64 + 3936;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// addi r9,r11,3888
	ctx.r9.s64 = r11.s64 + 3888;
	// li r11,0
	r11.s64 = 0;
	// stw r11,3988(r8)
	PPC_STORE_U32(ctx.r8.u32 + 3988, r11.u32);
	// lis r8,-32010
	ctx.r8.s64 = -2097807360;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// stw r11,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r11.u32);
	// stw r11,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r11.u32);
	// stw r11,3992(r8)
	PPC_STORE_U32(ctx.r8.u32 + 3992, r11.u32);
	// lis r8,-32010
	ctx.r8.s64 = -2097807360;
	// stw r11,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r11.u32);
	// stw r11,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, r11.u32);
	// stw r11,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, r11.u32);
	// stw r11,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, r11.u32);
	// stw r11,3996(r8)
	PPC_STORE_U32(ctx.r8.u32 + 3996, r11.u32);
	// lis r8,-32010
	ctx.r8.s64 = -2097807360;
	// stw r11,4008(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4008, r11.u32);
	// lis r8,-32010
	ctx.r8.s64 = -2097807360;
	// stw r11,4004(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4004, r11.u32);
	// lis r8,-32010
	ctx.r8.s64 = -2097807360;
	// stw r11,4000(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4000, r11.u32);
	// lis r8,-32010
	ctx.r8.s64 = -2097807360;
	// stw r11,4216(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4216, r11.u32);
	// lwz r8,4168(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x820ef5fc
	if (!cr6.getEQ()) goto loc_820EF5FC;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EF5FC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EF610"))) PPC_WEAK_FUNC(sub_820EF610);
PPC_FUNC_IMPL(__imp__sub_820EF610) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r6,-32010
	ctx.r6.s64 = -2097807360;
	// addi r10,r11,3628
	ctx.r10.s64 = r11.s64 + 3628;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r7,2
	ctx.r7.s64 = 2;
	// addi r9,r11,3936
	ctx.r9.s64 = r11.s64 + 3936;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// addi r8,r11,3888
	ctx.r8.s64 = r11.s64 + 3888;
	// li r11,0
	r11.s64 = 0;
	// stw r7,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r7.u32);
	// stw r7,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r7.u32);
	// stw r7,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r7.u32);
	// stw r7,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r7.u32);
	// stw r11,3988(r6)
	PPC_STORE_U32(ctx.r6.u32 + 3988, r11.u32);
	// lis r6,-32010
	ctx.r6.s64 = -2097807360;
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// stw r11,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r11.u32);
	// stw r11,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r11.u32);
	// stw r11,3992(r6)
	PPC_STORE_U32(ctx.r6.u32 + 3992, r11.u32);
	// lis r6,-32010
	ctx.r6.s64 = -2097807360;
	// stw r11,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, r11.u32);
	// stw r11,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, r11.u32);
	// stw r11,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, r11.u32);
	// stw r11,12(r8)
	PPC_STORE_U32(ctx.r8.u32 + 12, r11.u32);
	// stw r11,3996(r6)
	PPC_STORE_U32(ctx.r6.u32 + 3996, r11.u32);
	// lis r6,-32010
	ctx.r6.s64 = -2097807360;
	// stw r11,4008(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4008, r11.u32);
	// lis r6,-32010
	ctx.r6.s64 = -2097807360;
	// stw r11,4004(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4004, r11.u32);
	// lis r6,-32010
	ctx.r6.s64 = -2097807360;
	// stw r11,4000(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4000, r11.u32);
	// lis r6,-32010
	ctx.r6.s64 = -2097807360;
	// stw r11,4216(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4216, r11.u32);
	// lwz r6,4168(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x820ef6e0
	if (!cr6.getEQ()) goto loc_820EF6E0;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EF6E0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EF6F8"))) PPC_WEAK_FUNC(sub_820EF6F8);
PPC_FUNC_IMPL(__imp__sub_820EF6F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// stw r11,3988(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3988, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4008(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4008, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4004(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4004, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4000(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4000, r11.u32);
	// li r11,-1
	r11.s64 = -1;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-15624(r10)
	PPC_STORE_U32(ctx.r10.u32 + -15624, r11.u32);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ef780
	if (!cr6.getEQ()) goto loc_820EF780;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EF780:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EF798"))) PPC_WEAK_FUNC(sub_820EF798);
PPC_FUNC_IMPL(__imp__sub_820EF798) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r26,0
	r26.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r26
	r11.u64 = r26.u64;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// li r27,1
	r27.s64 = 1;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// mr r31,r27
	r31.u64 = r27.u64;
	// stw r11,3988(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3988, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4276(r30)
	PPC_STORE_U32(r30.u32 + 4276, r11.u32);
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4008(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4008, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4004(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4004, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4000(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4000, r11.u32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r29,r11,3440
	r29.s64 = r11.s64 + 3440;
loc_820EF7F8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820ecd28
	sub_820ECD28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ef818
	if (cr6.getEQ()) goto loc_820EF818;
	// mr r11,r27
	r11.u64 = r27.u64;
	// stbx r27,r29,r31
	PPC_STORE_U8(r29.u32 + r31.u32, r27.u8);
	// stw r11,4152(r28)
	PPC_STORE_U32(r28.u32 + 4152, r11.u32);
	// b 0x820ef81c
	goto loc_820EF81C;
loc_820EF818:
	// stbx r26,r29,r31
	PPC_STORE_U8(r29.u32 + r31.u32, r26.u8);
loc_820EF81C:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,81
	cr6.compare<int32_t>(r31.s32, 81, xer);
	// blt cr6,0x820ef7f8
	if (cr6.getLT()) goto loc_820EF7F8;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r31,r27
	r31.u64 = r27.u64;
	// addi r28,r11,2888
	r28.s64 = r11.s64 + 2888;
loc_820EF834:
	// lbzx r11,r29,r31
	r11.u64 = PPC_LOAD_U8(r29.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ef878
	if (cr6.getEQ()) goto loc_820EF878;
	// li r3,27
	ctx.r3.s64 = 27;
	// bl 0x820ea4d0
	sub_820EA4D0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ef864
	if (cr6.getEQ()) goto loc_820EF864;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82136f50
	sub_82136F50(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ef878
	if (cr6.getEQ()) goto loc_820EF878;
loc_820EF864:
	// lwz r11,4276(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4276);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stwx r31,r10,r28
	PPC_STORE_U32(ctx.r10.u32 + r28.u32, r31.u32);
	// stw r11,4276(r30)
	PPC_STORE_U32(r30.u32 + 4276, r11.u32);
loc_820EF878:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,81
	cr6.compare<int32_t>(r31.s32, 81, xer);
	// blt cr6,0x820ef834
	if (cr6.getLT()) goto loc_820EF834;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ef8bc
	if (!cr6.getEQ()) goto loc_820EF8BC;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820EF8BC:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820EF8C8"))) PPC_WEAK_FUNC(sub_820EF8C8);
PPC_FUNC_IMPL(__imp__sub_820EF8C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r16{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// addi r12,r1,-88
	r12.s64 = ctx.r1.s64 + -88;
	// bl 0x823ed544
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r23,0
	r23.s64 = 0;
	// lfs f30,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f30.f64 = double(temp.f32);
	// stfs f30,88(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stfs f30,92(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stfs f30,96(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// clrlwi r22,r3,31
	r22.u64 = ctx.r3.u32 & 0x1;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// lwz r11,4200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4200);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ef944
	if (cr6.getEQ()) goto loc_820EF944;
	// lwz r11,4176(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4176);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ef944
	if (!cr6.getEQ()) goto loc_820EF944;
	// li r4,32767
	ctx.r4.s64 = 32767;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,26372(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26372, r11.u32);
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
loc_820EF944:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820997d0
	sub_820997D0(ctx, base);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// addi r29,r10,-16032
	r29.s64 = ctx.r10.s64 + -16032;
	// li r11,0
	r11.s64 = 0;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// stw r11,4184(r30)
	PPC_STORE_U32(r30.u32 + 4184, r11.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x820ef988
	if (cr6.getLT()) goto loc_820EF988;
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
loc_820EF970:
	// addi r10,r10,16
	ctx.r10.s64 = ctx.r10.s64 + 16;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bge cr6,0x820ef970
	if (!cr6.getLT()) goto loc_820EF970;
	// stw r11,4184(r30)
	PPC_STORE_U32(r30.u32 + 4184, r11.u32);
loc_820EF988:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lwz r11,4176(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4176);
	// rlwinm r9,r3,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r9,r31
	ctx.r9.u64 = ctx.r9.u64 + r31.u64;
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
	// lwz r11,4184(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4184);
	// lis r24,-32010
	r24.s64 = -2097807360;
	// divwu r5,r9,r11
	ctx.r5.u32 = ctx.r9.u32 / r11.u32;
	// twllei r11,0
	// mullw r11,r5,r11
	r11.s64 = int64_t(ctx.r5.s32) * int64_t(r11.s32);
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r6,r29,12
	ctx.r6.s64 = r29.s64 + 12;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r10,-16736
	ctx.r10.s64 = ctx.r10.s64 + -16736;
	// stw r11,4180(r24)
	PPC_STORE_U32(r24.u32 + 4180, r11.u32);
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r7,r10,4
	ctx.r7.s64 = ctx.r10.s64 + 4;
	// lwzx r31,r8,r10
	r31.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// lwzx r25,r11,r6
	r25.u64 = PPC_LOAD_U32(r11.u32 + ctx.r6.u32);
	// lis r11,-13108
	r11.s64 = -859045888;
	// lwzx r30,r8,r7
	r30.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r7.u32);
	// cmpwi cr6,r31,22
	cr6.compare<int32_t>(r31.s32, 22, xer);
	// ori r26,r11,52429
	r26.u64 = r11.u64 | 52429;
	// bne cr6,0x820efa84
	if (!cr6.getEQ()) goto loc_820EFA84;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r28,r3,31
	r28.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// mulhwu r10,r11,r26
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(r26.u32)) >> 32;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bgt cr6,0x820efac8
	if (cr6.getGT()) goto loc_820EFAC8;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,-1468
	r12.s64 = r12.s64 + -1468;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820EFA54;
	case 1:
		goto loc_820EFA60;
	case 2:
		goto loc_820EFA6C;
	case 3:
		goto loc_820EFA78;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-1452(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -1452);
	// lwz r16,-1440(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -1440);
	// lwz r16,-1428(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -1428);
	// lwz r16,-1416(r14)
	r16.u64 = PPC_LOAD_U32(r14.u32 + -1416);
loc_820EFA54:
	// li r31,23
	r31.s64 = 23;
	// li r30,75
	r30.s64 = 75;
	// b 0x820efadc
	goto loc_820EFADC;
loc_820EFA60:
	// li r31,24
	r31.s64 = 24;
	// li r30,75
	r30.s64 = 75;
	// b 0x820efadc
	goto loc_820EFADC;
loc_820EFA6C:
	// li r31,25
	r31.s64 = 25;
	// li r30,75
	r30.s64 = 75;
	// b 0x820efadc
	goto loc_820EFADC;
loc_820EFA78:
	// li r31,5
	r31.s64 = 5;
	// li r30,78
	r30.s64 = 78;
	// b 0x820efadc
	goto loc_820EFADC;
loc_820EFA84:
	// cmpwi cr6,r31,16
	cr6.compare<int32_t>(r31.s32, 16, xer);
	// bne cr6,0x820efaa8
	if (!cr6.getEQ()) goto loc_820EFAA8;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820efac8
	if (cr6.getEQ()) goto loc_820EFAC8;
	// li r31,79
	r31.s64 = 79;
	// b 0x820efac8
	goto loc_820EFAC8;
loc_820EFAA8:
	// cmpwi cr6,r31,9
	cr6.compare<int32_t>(r31.s32, 9, xer);
	// bne cr6,0x820efac8
	if (!cr6.getEQ()) goto loc_820EFAC8;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820efac8
	if (cr6.getEQ()) goto loc_820EFAC8;
	// li r31,8
	r31.s64 = 8;
loc_820EFAC8:
	// cmpwi cr6,r30,-97
	cr6.compare<int32_t>(r30.s32, -97, xer);
	// bne cr6,0x820efadc
	if (!cr6.getEQ()) goto loc_820EFADC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82136298
	sub_82136298(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
loc_820EFADC:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r28,r11,-28640
	r28.s64 = r11.s64 + -28640;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r11,13952
	ctx.r4.s64 = r11.s64 + 13952;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// stw r30,4196(r11)
	PPC_STORE_U32(r11.u32 + 4196, r30.u32);
	// rlwinm r11,r31,3,0,28
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r27,r11,r28
	r27.u64 = PPC_LOAD_U32(r11.u32 + r28.u32);
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x820efb34
	if (cr6.getLT()) goto loc_820EFB34;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r4,r11,15312
	ctx.r4.s64 = r11.s64 + 15312;
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r23,r11,r28
	r23.u64 = PPC_LOAD_U32(r11.u32 + r28.u32);
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
loc_820EFB34:
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821360e8
	sub_821360E8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lfs f31,13964(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13964);
	f31.f64 = double(temp.f32);
	// stw r3,4188(r31)
	PPC_STORE_U32(r31.u32 + 4188, ctx.r3.u32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x820efd00
	if (cr6.getEQ()) goto loc_820EFD00;
	// cmpwi cr6,r25,2
	cr6.compare<int32_t>(r25.s32, 2, xer);
	// bne cr6,0x820efbd4
	if (!cr6.getEQ()) goto loc_820EFBD4;
	// li r11,184
	r11.s64 = 184;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// li r11,188
	r11.s64 = 188;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// li r11,197
	r11.s64 = 197;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// li r11,207
	r11.s64 = 207;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// li r11,185
	r11.s64 = 185;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// li r11,210
	r11.s64 = 210;
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-21846
	ctx.r10.s64 = -1431699456;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// ori r10,r10,43691
	ctx.r10.u64 = ctx.r10.u64 | 43691;
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// b 0x820efc40
	goto loc_820EFC40;
loc_820EFBD4:
	// li r11,191
	r11.s64 = 191;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// li r11,204
	r11.s64 = 204;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// li r11,193
	r11.s64 = 193;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// li r11,195
	r11.s64 = 195;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// li r11,205
	r11.s64 = 205;
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// li r11,190
	r11.s64 = 190;
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// li r11,187
	r11.s64 = 187;
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// li r11,208
	r11.s64 = 208;
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r11.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// mulhwu r10,r11,r26
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(r26.u32)) >> 32;
	// rlwinm r10,r10,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
loc_820EFC40:
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r30,r11,r8
	r30.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// cmpwi cr6,r30,190
	cr6.compare<int32_t>(r30.s32, 190, xer);
	// bne cr6,0x820efc64
	if (!cr6.getEQ()) goto loc_820EFC64;
	// bl 0x820ea1b8
	sub_820EA1B8(ctx, base);
	// b 0x820efc80
	goto loc_820EFC80;
loc_820EFC64:
	// cmpwi cr6,r30,187
	cr6.compare<int32_t>(r30.s32, 187, xer);
	// bne cr6,0x820efc74
	if (!cr6.getEQ()) goto loc_820EFC74;
	// bl 0x820ea218
	sub_820EA218(ctx, base);
	// b 0x820efc80
	goto loc_820EFC80;
loc_820EFC74:
	// cmpwi cr6,r30,208
	cr6.compare<int32_t>(r30.s32, 208, xer);
	// bne cr6,0x820efc8c
	if (!cr6.getEQ()) goto loc_820EFC8C;
	// bl 0x820ea278
	sub_820EA278(ctx, base);
loc_820EFC80:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820efc8c
	if (!cr6.getEQ()) goto loc_820EFC8C;
	// li r30,191
	r30.s64 = 191;
loc_820EFC8C:
	// lis r11,-32164
	r11.s64 = -2107899904;
	// rlwinm r10,r30,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwzx r30,r10,r11
	r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211c6c8
	sub_8211C6C8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82118550
	sub_82118550(ctx, base);
	// lis r30,-32010
	r30.s64 = -2097807360;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// stw r3,4192(r30)
	PPC_STORE_U32(r30.u32 + 4192, ctx.r3.u32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
	// subfic r10,r22,0
	xer.ca = r22.u32 <= 0;
	ctx.r10.s64 = 0 - r22.s64;
	// lwz r11,4188(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4188);
	// subfe r9,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// lwz r10,4192(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 4192);
	// stw r11,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, r11.u32);
	// rlwinm r10,r9,0,30,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x2;
	// lwz r11,4188(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4188);
	// addi r10,r10,3
	ctx.r10.s64 = ctx.r10.s64 + 3;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r10,r10,r11
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwz r11,4192(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4192);
	// stw r10,28(r11)
	PPC_STORE_U32(r11.u32 + 28, ctx.r10.u32);
	// b 0x820efd0c
	goto loc_820EFD0C;
loc_820EFD00:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4192(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4192, r11.u32);
loc_820EFD0C:
	// lwz r3,4188(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4188);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x82119210
	sub_82119210(ctx, base);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// lwz r3,4188(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4188);
	// bl 0x82119118
	sub_82119118(ctx, base);
	// lwz r3,4188(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4188);
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x82119178
	sub_82119178(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,4188(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4188);
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// lfs f29,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f29.f64 = double(temp.f32);
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// bl 0x8211b2f8
	sub_8211B2F8(ctx, base);
	// lwz r11,4180(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 4180);
	// addi r9,r29,8
	ctx.r9.s64 = r29.s64 + 8;
	// addi r8,r29,4
	ctx.r8.s64 = r29.s64 + 4;
	// lwz r3,4188(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4188);
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// fmr f3,f30
	ctx.fpscr.disableFlushMode();
	ctx.f3.f64 = f30.f64;
	// lis r10,-32079
	ctx.r10.s64 = -2102329344;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// addi r10,r10,-9536
	ctx.r10.s64 = ctx.r10.s64 + -9536;
	// lwzx r7,r11,r29
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + r29.u32);
	// lfsx f2,r11,r9
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	ctx.f2.f64 = double(temp.f32);
	// lfsx f1,r11,r8
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	ctx.f1.f64 = double(temp.f32);
	// rlwinm r11,r7,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r11,r10
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,3984(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3984, r11.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f28,12924(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12924);
	f28.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f27,15732(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15732);
	f27.f64 = double(temp.f32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r31,r11,2860
	r31.s64 = r11.s64 + 2860;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmadds f0,f0,f28,f27
	f0.f64 = double(float(f0.f64 * f28.f64 + f27.f64));
	// stfs f0,-48(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -48, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmadds f0,f0,f28,f27
	f0.f64 = double(float(f0.f64 * f28.f64 + f27.f64));
	// stfs f0,1024(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 1024, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmsubs f13,f0,f31,f29
	ctx.f13.f64 = double(float(f0.f64 * f31.f64 - f29.f64));
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,-52(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -52, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmsubs f13,f0,f31,f29
	ctx.f13.f64 = double(float(f0.f64 * f31.f64 - f29.f64));
	// lfs f0,25048(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25048);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,1072(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 1072, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f29,2940(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2940);
	f29.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f28,2944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	f28.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f29,f28
	f0.f64 = double(float(f0.f64 * f29.f64 - f28.f64));
	// stfs f0,1016(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 1016, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// lis r9,-32010
	ctx.r9.s64 = -2097807360;
	// lfs f0,-48(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + -48);
	f0.f64 = double(temp.f32);
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// stfs f0,368(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 368, temp.u32);
	// lfs f0,-52(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -52);
	f0.f64 = double(temp.f32);
	// stfs f0,-28(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -28, temp.u32);
	// lfs f0,1016(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 1016);
	f0.f64 = double(temp.f32);
	// stw r11,2816(r9)
	PPC_STORE_U32(ctx.r9.u32 + 2816, r11.u32);
	// add r11,r10,r30
	r11.u64 = ctx.r10.u64 + r30.u64;
	// stfs f0,664(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 664, temp.u32);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stfs f30,0(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// stfs f30,4(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// stfs f30,8(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f29,f28
	f0.f64 = double(float(f0.f64 * f29.f64 - f28.f64));
	// stfs f0,388(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 388, temp.u32);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// addi r12,r1,-88
	r12.s64 = ctx.r1.s64 + -88;
	// bl 0x823ed590
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_820EFF48"))) PPC_WEAK_FUNC(sub_820EFF48);
PPC_FUNC_IMPL(__imp__sub_820EFF48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r3,4188(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4188);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820eff68
	if (cr6.getEQ()) goto loc_820EFF68;
	// bl 0x821188f8
	sub_821188F8(ctx, base);
loc_820EFF68:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r3,4192(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4192);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820eff7c
	if (cr6.getEQ()) goto loc_820EFF7C;
	// bl 0x821188f8
	sub_821188F8(ctx, base);
loc_820EFF7C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820EFF90"))) PPC_WEAK_FUNC(sub_820EFF90);
PPC_FUNC_IMPL(__imp__sub_820EFF90) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed52c
	// stwu r1,-528(r1)
	ea = -528 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,3984(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 3984);
	// cmpwi cr6,r11,180
	cr6.compare<int32_t>(r11.s32, 180, xer);
	// bgt cr6,0x820f0b74
	if (cr6.getGT()) goto loc_820F0B74;
	// extsw r8,r11
	ctx.r8.s64 = r11.s32;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// li r24,0
	r24.s64 = 0;
	// li r26,1
	r26.s64 = 1;
	// addi r10,r1,204
	ctx.r10.s64 = ctx.r1.s64 + 204;
	// std r8,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r8.u64);
	// cmplwi cr6,r11,179
	cr6.compare<uint32_t>(r11.u32, 179, xer);
	// lfs f23,2688(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2688);
	f23.f64 = double(temp.f32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// stw r24,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r24.u32);
	// stfs f23,136(r1)
	temp.f32 = float(f23.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// stw r26,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r26.u32);
	// stw r24,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r24.u32);
	// stw r24,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r24.u32);
	// lfs f0,2956(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2956);
	f0.f64 = double(temp.f32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// stfs f0,140(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// stw r24,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r24.u32);
	// stw r24,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r24.u32);
	// stw r24,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, r24.u32);
	// stw r24,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, r24.u32);
	// lfs f0,14292(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14292);
	f0.f64 = double(temp.f32);
	// li r9,3
	ctx.r9.s64 = 3;
	// stfs f0,144(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// stw r24,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, r24.u32);
	// stw r24,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, r24.u32);
	// stw r9,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r9.u32);
	// stw r24,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r24.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,25060(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 25060);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f22,2776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	f22.f64 = double(temp.f32);
	// lfd f0,112(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f11,f0,f13
	ctx.f11.f64 = double(float(f0.f64 * ctx.f13.f64));
	// bgt cr6,0x820f0098
	if (cr6.getGT()) goto loc_820F0098;
	// cmpwi cr6,r11,30
	cr6.compare<int32_t>(r11.s32, 30, xer);
	// bge cr6,0x820f0060
	if (!cr6.getLT()) goto loc_820F0060;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,25056(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25056);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f21,f0,f13
	f21.f64 = double(float(f0.f64 * ctx.f13.f64));
	// b 0x820f009c
	goto loc_820F009C;
loc_820F0060:
	// cmpwi cr6,r11,150
	cr6.compare<int32_t>(r11.s32, 150, xer);
	// ble cr6,0x820f0090
	if (!cr6.getGT()) goto loc_820F0090;
	// subfic r11,r11,180
	xer.ca = r11.u32 <= 180;
	r11.s64 = 180 - r11.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,112(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,25056(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25056);
	f0.f64 = double(temp.f32);
	// fmuls f21,f13,f0
	f21.f64 = double(float(ctx.f13.f64 * f0.f64));
	// b 0x820f009c
	goto loc_820F009C;
loc_820F0090:
	// fmr f21,f22
	ctx.fpscr.disableFlushMode();
	f21.f64 = f22.f64;
	// b 0x820f009c
	goto loc_820F009C;
loc_820F0098:
	// fmr f21,f23
	ctx.fpscr.disableFlushMode();
	f21.f64 = f23.f64;
loc_820F009C:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r31,r11,3232
	r31.s64 = r11.s64 + 3232;
	// lfs f0,-424(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + -424);
	f0.f64 = double(temp.f32);
	// lfs f13,700(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 700);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f9,f13,f0
	ctx.f9.f64 = double(float(ctx.f13.f64 - f0.f64));
	// lfs f12,652(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 652);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,-420(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -420);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f8,f12,f13
	ctx.f8.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// lfs f12,644(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 644);
	ctx.f12.f64 = double(temp.f32);
	// lfs f10,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f10,f10,f12
	ctx.f10.f64 = double(float(ctx.f10.f64 - ctx.f12.f64));
	// fmadds f1,f9,f11,f0
	ctx.f1.f64 = double(float(ctx.f9.f64 * ctx.f11.f64 + f0.f64));
	// stfs f1,-400(r31)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r31.u32 + -400, temp.u32);
	// fmadds f0,f8,f11,f13
	f0.f64 = double(float(ctx.f8.f64 * ctx.f11.f64 + ctx.f13.f64));
	// stfs f0,-4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -4, temp.u32);
	// fmadds f0,f10,f11,f12
	f0.f64 = double(float(ctx.f10.f64 * ctx.f11.f64 + ctx.f12.f64));
	// stfs f0,292(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 292, temp.u32);
	// fcmpu cr6,f1,f23
	cr6.compare(ctx.f1.f64, f23.f64);
	// bge cr6,0x820f00f8
	if (!cr6.getLT()) goto loc_820F00F8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fadds f1,f1,f0
	ctx.f1.f64 = double(float(ctx.f1.f64 + f0.f64));
	// stfs f1,-400(r31)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r31.u32 + -400, temp.u32);
loc_820F00F8:
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lfs f1,-400(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -400);
	ctx.f1.f64 = double(temp.f32);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f28,292(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 292);
	f28.f64 = double(temp.f32);
	// lfs f1,-400(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -400);
	ctx.f1.f64 = double(temp.f32);
	// lfs f31,12892(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12892);
	f31.f64 = double(temp.f32);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f13,f0,f31,f30
	ctx.f13.f64 = double(float(f0.f64 * f31.f64 + f30.f64));
	// lfs f0,-4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -4);
	f0.f64 = double(temp.f32);
	// fmuls f27,f13,f0
	f27.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lfs f1,-400(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -400);
	ctx.f1.f64 = double(temp.f32);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = ctx.f1.f64;
	// lfs f0,-4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -4);
	f0.f64 = double(temp.f32);
	// lfs f1,-400(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -400);
	ctx.f1.f64 = double(temp.f32);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fmuls f13,f13,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64));
	// fmsubs f26,f30,f0,f13
	f26.f64 = double(float(f30.f64 * f0.f64 - ctx.f13.f64));
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lfs f13,-4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -4);
	ctx.f13.f64 = double(temp.f32);
	// lfs f1,-400(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -400);
	ctx.f1.f64 = double(temp.f32);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fmuls f25,f0,f31
	f25.f64 = double(float(f0.f64 * f31.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lfs f13,-4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -4);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r4,-6384(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + -6384);
	// lwz r3,4188(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// fmuls f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 * ctx.f13.f64));
	// lfs f0,15300(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15300);
	f0.f64 = double(temp.f32);
	// fmuls f24,f13,f0
	f24.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x8211d7c0
	sub_8211D7C0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x82118aa8
	sub_82118AA8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8211c320
	sub_8211C320(ctx, base);
	// lwz r3,4188(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// bl 0x82119948
	sub_82119948(ctx, base);
	// lis r27,-32010
	r27.s64 = -2097807360;
	// lwz r3,4192(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 4192);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f0224
	if (cr6.getEQ()) goto loc_820F0224;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f01fc
	if (cr6.getEQ()) goto loc_820F01FC;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// sth r24,0(r3)
	PPC_STORE_U16(ctx.r3.u32 + 0, r24.u16);
	// lwz r3,4192(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 4192);
loc_820F01FC:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f0224
	if (cr6.getEQ()) goto loc_820F0224;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f0224
	if (cr6.getEQ()) goto loc_820F0224;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r24.u32);
loc_820F0224:
	// lwz r11,4188(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r11,14(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r3,r11,6,0,25
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// bl 0x8209cd50
	sub_8209CD50(ctx, base);
	// stw r3,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r3.u32);
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x8210b2b0
	sub_8210B2B0(ctx, base);
	// addi r11,r1,288
	r11.s64 = ctx.r1.s64 + 288;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// lwz r4,4188(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// stw r11,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r11.u32);
	// bl 0x8211d328
	sub_8211D328(ctx, base);
	// addi r4,r1,208
	ctx.r4.s64 = ctx.r1.s64 + 208;
	// lwz r3,4188(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// bl 0x82119108
	sub_82119108(ctx, base);
	// lis r29,-32010
	r29.s64 = -2097807360;
	// lfs f0,212(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	f0.f64 = double(temp.f32);
	// lwz r11,2816(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 2816);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f0284
	if (cr6.getEQ()) goto loc_820F0284;
	// fmr f5,f0
	ctx.f5.f64 = f0.f64;
	// b 0x820f0288
	goto loc_820F0288;
loc_820F0284:
	// lfs f5,-368(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + -368);
	ctx.f5.f64 = double(temp.f32);
loc_820F0288:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f7,-372(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + -372);
	ctx.f7.f64 = double(temp.f32);
	// lfs f13,208(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f11,f0,f5
	ctx.f11.f64 = double(float(f0.f64 - ctx.f5.f64));
	// lfs f0,216(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	f0.f64 = double(temp.f32);
	// fsubs f13,f13,f7
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f7.f64));
	// lfs f6,-364(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -364);
	ctx.f6.f64 = double(temp.f32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// fsubs f10,f0,f6
	ctx.f10.f64 = double(float(f0.f64 - ctx.f6.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f8,-6368(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -6368);
	ctx.f8.f64 = double(temp.f32);
	// fdivs f12,f22,f8
	ctx.f12.f64 = double(float(f22.f64 / ctx.f8.f64));
	// lfs f29,14448(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14448);
	f29.f64 = double(temp.f32);
	// fmuls f0,f13,f12
	f0.f64 = double(float(ctx.f13.f64 * ctx.f12.f64));
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// fmuls f13,f11,f12
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f12.f64));
	// stfs f13,140(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// fmuls f12,f10,f12
	ctx.f12.f64 = double(float(ctx.f10.f64 * ctx.f12.f64));
	// stfs f12,144(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// beq cr6,0x820f02f4
	if (cr6.getEQ()) goto loc_820F02F4;
	// fmuls f11,f0,f29
	ctx.f11.f64 = double(float(f0.f64 * f29.f64));
	// stfs f11,412(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + 412, temp.u32);
	// fmuls f10,f13,f29
	ctx.f10.f64 = double(float(ctx.f13.f64 * f29.f64));
	// stfs f10,416(r31)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(r31.u32 + 416, temp.u32);
	// fmuls f9,f12,f29
	ctx.f9.f64 = double(float(ctx.f12.f64 * f29.f64));
	// stfs f9,420(r31)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(r31.u32 + 420, temp.u32);
	// b 0x820f0300
	goto loc_820F0300;
loc_820F02F4:
	// lfs f9,420(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 420);
	ctx.f9.f64 = double(temp.f32);
	// lfs f10,416(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 416);
	ctx.f10.f64 = double(temp.f32);
	// lfs f11,412(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 412);
	ctx.f11.f64 = double(temp.f32);
loc_820F0300:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r10,-6384(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -6384);
	// mr r9,r24
	ctx.r9.u64 = r24.u64;
	// cmpwi cr6,r10,8
	cr6.compare<int32_t>(ctx.r10.s32, 8, xer);
	// lfs f31,14280(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14280);
	f31.f64 = double(temp.f32);
	// blt cr6,0x820f03a0
	if (cr6.getLT()) goto loc_820F03A0;
	// addi r11,r10,-8
	r11.s64 = ctx.r10.s64 + -8;
	// rlwinm r11,r11,29,3,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r9,r11,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
loc_820F0328:
	// fmadds f11,f11,f31,f0
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// stfs f11,412(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + 412, temp.u32);
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// stfs f10,416(r31)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(r31.u32 + 416, temp.u32);
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// bne cr6,0x820f0328
	if (!cr6.getEQ()) goto loc_820F0328;
	// stfs f9,420(r31)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(r31.u32 + 420, temp.u32);
loc_820F03A0:
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// bge cr6,0x820f03d0
	if (!cr6.getLT()) goto loc_820F03D0;
	// subf r11,r9,r10
	r11.s64 = ctx.r10.s64 - ctx.r9.s64;
loc_820F03AC:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// fmadds f11,f11,f31,f0
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// stfs f11,412(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + 412, temp.u32);
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// stfs f10,416(r31)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(r31.u32 + 416, temp.u32);
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f03ac
	if (!cr6.getEQ()) goto loc_820F03AC;
	// stfs f9,420(r31)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(r31.u32 + 420, temp.u32);
loc_820F03D0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// lfs f30,14276(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14276);
	f30.f64 = double(temp.f32);
	// lwz r11,4188(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// fmuls f0,f11,f30
	f0.f64 = double(float(ctx.f11.f64 * f30.f64));
	// stfs f0,-396(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -396, temp.u32);
	// fmuls f13,f10,f30
	ctx.f13.f64 = double(float(ctx.f10.f64 * f30.f64));
	// stfs f13,-392(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + -392, temp.u32);
	// fmuls f12,f9,f30
	ctx.f12.f64 = double(float(ctx.f9.f64 * f30.f64));
	// stfs f12,-388(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + -388, temp.u32);
	// fmadds f0,f0,f8,f7
	f0.f64 = double(float(f0.f64 * ctx.f8.f64 + ctx.f7.f64));
	// stfs f0,-372(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -372, temp.u32);
	// fmadds f0,f13,f8,f5
	f0.f64 = double(float(ctx.f13.f64 * ctx.f8.f64 + ctx.f5.f64));
	// stfs f0,-368(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -368, temp.u32);
	// fmadds f0,f12,f8,f6
	f0.f64 = double(float(ctx.f12.f64 * ctx.f8.f64 + ctx.f6.f64));
	// stfs f0,-364(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -364, temp.u32);
	// lwz r3,12(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// bl 0x8210b6e0
	sub_8210B6E0(ctx, base);
	// lwz r11,2816(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 2816);
	// lfs f8,-372(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + -372);
	ctx.f8.f64 = double(temp.f32);
	// lfs f0,136(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	f0.f64 = double(temp.f32);
	// lfs f7,-368(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -368);
	ctx.f7.f64 = double(temp.f32);
	// fsubs f0,f0,f8
	f0.f64 = double(float(f0.f64 - ctx.f8.f64));
	// lfs f13,140(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	ctx.f13.f64 = double(temp.f32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lfs f5,-364(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -364);
	ctx.f5.f64 = double(temp.f32);
	// fsubs f13,f13,f7
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f7.f64));
	// lfs f12,144(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f5
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f5.f64));
	// beq cr6,0x820f046c
	if (cr6.getEQ()) goto loc_820F046C;
	// mr r11,r24
	r11.u64 = r24.u64;
	// fmuls f11,f0,f29
	ctx.f11.f64 = double(float(f0.f64 * f29.f64));
	// stfs f11,-452(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -452, temp.u32);
	// fmuls f10,f13,f29
	ctx.f10.f64 = double(float(ctx.f13.f64 * f29.f64));
	// stfs f10,-448(r31)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(r31.u32 + -448, temp.u32);
	// fmuls f9,f12,f29
	ctx.f9.f64 = double(float(ctx.f12.f64 * f29.f64));
	// stfs f9,-444(r31)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(r31.u32 + -444, temp.u32);
	// stw r11,2816(r29)
	PPC_STORE_U32(r29.u32 + 2816, r11.u32);
	// b 0x820f0478
	goto loc_820F0478;
loc_820F046C:
	// lfs f9,-444(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + -444);
	ctx.f9.f64 = double(temp.f32);
	// lfs f10,-448(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -448);
	ctx.f10.f64 = double(temp.f32);
	// lfs f11,-452(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -452);
	ctx.f11.f64 = double(temp.f32);
loc_820F0478:
	// lwz r10,-6384(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -6384);
	// mr r9,r24
	ctx.r9.u64 = r24.u64;
	// cmpwi cr6,r10,8
	cr6.compare<int32_t>(ctx.r10.s32, 8, xer);
	// blt cr6,0x820f0510
	if (cr6.getLT()) goto loc_820F0510;
	// addi r11,r10,-8
	r11.s64 = ctx.r10.s64 + -8;
	// rlwinm r11,r11,29,3,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r9,r11,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
loc_820F0498:
	// fmadds f11,f11,f31,f0
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// fmadds f11,f11,f31,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// stfs f11,-452(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -452, temp.u32);
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// stfs f10,-448(r31)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(r31.u32 + -448, temp.u32);
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// bne cr6,0x820f0498
	if (!cr6.getEQ()) goto loc_820F0498;
	// stfs f9,-444(r31)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(r31.u32 + -444, temp.u32);
loc_820F0510:
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// bge cr6,0x820f0540
	if (!cr6.getLT()) goto loc_820F0540;
	// subf r11,r9,r10
	r11.s64 = ctx.r10.s64 - ctx.r9.s64;
loc_820F051C:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// fmadds f11,f11,f31,f0
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// stfs f11,-452(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -452, temp.u32);
	// fmadds f10,f10,f31,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * f31.f64 + ctx.f13.f64));
	// stfs f10,-448(r31)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(r31.u32 + -448, temp.u32);
	// fmadds f9,f9,f31,f12
	ctx.f9.f64 = double(float(ctx.f9.f64 * f31.f64 + ctx.f12.f64));
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f051c
	if (!cr6.getEQ()) goto loc_820F051C;
	// stfs f9,-444(r31)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(r31.u32 + -444, temp.u32);
loc_820F0540:
	// fmuls f0,f10,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f10.f64 * f30.f64));
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// fmuls f13,f9,f30
	ctx.f13.f64 = double(float(ctx.f9.f64 * f30.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fadds f10,f7,f28
	ctx.f10.f64 = double(float(ctx.f7.f64 + f28.f64));
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// fadds f3,f5,f26
	ctx.f3.f64 = double(float(ctx.f5.f64 + f26.f64));
	// fadds f1,f8,f27
	ctx.f1.f64 = double(float(ctx.f8.f64 + f27.f64));
	// fmr f9,f23
	ctx.f9.f64 = f23.f64;
	// fadds f12,f0,f7
	ctx.f12.f64 = double(float(f0.f64 + ctx.f7.f64));
	// fmuls f0,f11,f30
	f0.f64 = double(float(ctx.f11.f64 * f30.f64));
	// stfs f0,0(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// stfs f13,8(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// fadds f13,f13,f5
	ctx.f13.f64 = double(float(ctx.f13.f64 + ctx.f5.f64));
	// stfs f13,144(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// fmr f7,f23
	ctx.f7.f64 = f23.f64;
	// fadds f0,f0,f8
	f0.f64 = double(float(f0.f64 + ctx.f8.f64));
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// fadds f6,f13,f24
	ctx.f6.f64 = double(float(ctx.f13.f64 + f24.f64));
	// fmr f8,f22
	ctx.f8.f64 = f22.f64;
	// fadds f4,f0,f25
	ctx.f4.f64 = double(float(f0.f64 + f25.f64));
	// lfs f0,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f5,f12,f0
	ctx.f5.f64 = double(float(ctx.f12.f64 - f0.f64));
	// stfs f5,140(r1)
	temp.f32 = float(ctx.f5.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// lfs f0,25052(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25052);
	f0.f64 = double(temp.f32);
	// fadds f2,f10,f0
	ctx.f2.f64 = double(float(ctx.f10.f64 + f0.f64));
	// bl 0x8210bf20
	sub_8210BF20(ctx, base);
	// addi r11,r1,288
	r11.s64 = ctx.r1.s64 + 288;
	// stw r11,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r11.u32);
	// lwz r11,4188(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r11,14(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r3,r11,6,0,25
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// bl 0x8209cd50
	sub_8209CD50(ctx, base);
	// stw r3,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r3.u32);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// lwz r4,4188(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// bl 0x8211d328
	sub_8211D328(ctx, base);
	// lwz r11,4192(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4192);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f066c
	if (cr6.getEQ()) goto loc_820F066C;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,4188(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// lwz r4,28(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// bl 0x82118bc8
	sub_82118BC8(ctx, base);
	// lwz r11,4188(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// stw r3,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r3.u32);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,4192(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4192);
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r9,28(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// lwz r10,20(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// bne cr6,0x820f0648
	if (!cr6.getEQ()) goto loc_820F0648;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// lfs f1,14032(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14032);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210b968
	sub_8210B968(ctx, base);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// lwz r3,160(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// stw r11,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r11.u32);
	// lwz r11,4192(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4192);
loc_820F0648:
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r11,14(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r3,r11,6,0,25
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// bl 0x8209cd50
	sub_8209CD50(ctx, base);
	// stw r3,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r3.u32);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// lwz r4,4192(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 4192);
	// bl 0x8211d300
	sub_8211D300(ctx, base);
loc_820F066C:
	// lis r29,-32015
	r29.s64 = -2098135040;
	// stw r26,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r26.u32);
	// li r10,7
	ctx.r10.s64 = 7;
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// stw r10,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,4188(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// beq cr6,0x820f0698
	if (cr6.getEQ()) goto loc_820F0698;
	// lwz r31,32(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// b 0x820f069c
	goto loc_820F069C;
loc_820F0698:
	// lwz r31,40(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 40);
loc_820F069C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,12064
	ctx.r4.s64 = r11.s64 + 12064;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8209d4e8
	sub_8209D4E8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,12048
	ctx.r4.s64 = r11.s64 + 12048;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8209d4e8
	sub_8209D4E8(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r3,4188(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,255
	ctx.r5.s64 = 255;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209ab98
	sub_8209AB98(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r3,4196(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4196);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820f07f0
	if (cr6.getLT()) goto loc_820F07F0;
	// bl 0x82135e88
	sub_82135E88(ctx, base);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f070c
	if (cr6.getEQ()) goto loc_820F070C;
	// lwz r31,32(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// b 0x820f0710
	goto loc_820F0710;
loc_820F070C:
	// lwz r31,40(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
loc_820F0710:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820f07f0
	if (cr6.getEQ()) goto loc_820F07F0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8209ab88
	sub_8209AB88(ctx, base);
	// lwz r3,4188(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// bl 0x8211d028
	sub_8211D028(ctx, base);
	// lwz r3,4188(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r4,16(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x820f07d4
	if (cr6.getEQ()) goto loc_820F07D4;
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f07d0
	if (cr6.getEQ()) goto loc_820F07D0;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x820f0790
	if (cr6.getEQ()) goto loc_820F0790;
	// lwz r3,4188(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r10,12040
	ctx.r4.s64 = ctx.r10.s64 + 12040;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r5,r11,1
	ctx.r5.u64 = r11.u64 ^ 1;
	// bl 0x8209d4e8
	sub_8209D4E8(ctx, base);
loc_820F0790:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x820f07d0
	if (cr6.getEQ()) goto loc_820F07D0;
	// lwz r3,4188(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r10,12028
	ctx.r4.s64 = ctx.r10.s64 + 12028;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r5,r11,1
	ctx.r5.u64 = r11.u64 ^ 1;
	// bl 0x8209d4e8
	sub_8209D4E8(ctx, base);
loc_820F07D0:
	// lwz r3,4188(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4188);
loc_820F07D4:
	// li r9,8
	ctx.r9.s64 = 8;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,255
	ctx.r5.s64 = 255;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209ab98
	sub_8209AB98(ctx, base);
loc_820F07F0:
	// lwz r3,4192(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 4192);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f0818
	if (cr6.getEQ()) goto loc_820F0818;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,255
	ctx.r5.s64 = 255;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209ab98
	sub_8209AB98(ctx, base);
loc_820F0818:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82118aa8
	sub_82118AA8(ctx, base);
	// lwz r11,4188(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// mr r29,r24
	r29.u64 = r24.u64;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r10,14(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 14);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820f0884
	if (!cr6.getGT()) goto loc_820F0884;
	// mr r31,r24
	r31.u64 = r24.u64;
loc_820F0840:
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// add r3,r11,r31
	ctx.r3.u64 = r11.u64 + r31.u64;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// lwz r11,4188(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// add r4,r11,r31
	ctx.r4.u64 = r11.u64 + r31.u64;
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// lwz r11,4188(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4188);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r31,r31,64
	r31.s64 = r31.s64 + 64;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r10,14(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 14);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpw cr6,r29,r10
	cr6.compare<int32_t>(r29.s32, ctx.r10.s32, xer);
	// blt cr6,0x820f0840
	if (cr6.getLT()) goto loc_820F0840;
loc_820F0884:
	// lwz r11,4192(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4192);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f08f0
	if (cr6.getEQ()) goto loc_820F08F0;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mr r30,r24
	r30.u64 = r24.u64;
	// lhz r10,14(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 14);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820f08f0
	if (!cr6.getGT()) goto loc_820F08F0;
	// mr r31,r24
	r31.u64 = r24.u64;
loc_820F08AC:
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// add r3,r11,r31
	ctx.r3.u64 = r11.u64 + r31.u64;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// lwz r11,4192(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4192);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// add r4,r11,r31
	ctx.r4.u64 = r11.u64 + r31.u64;
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// lwz r11,4192(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4192);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r31,r31,64
	r31.s64 = r31.s64 + 64;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r10,14(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 14);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpw cr6,r30,r10
	cr6.compare<int32_t>(r30.s32, ctx.r10.s32, xer);
	// blt cr6,0x820f08ac
	if (cr6.getLT()) goto loc_820F08AC;
loc_820F08F0:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// li r25,-1
	r25.s64 = -1;
	// li r29,-256
	r29.s64 = -256;
	// lwz r11,4200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4200);
	// lis r30,-31991
	r30.s64 = -2096562176;
	// lfs f30,6596(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 6596);
	f30.f64 = double(temp.f32);
	// lis r31,-31994
	r31.s64 = -2096758784;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lfs f31,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	f31.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r26,-32010
	r26.s64 = -2097807360;
	// addi r27,r11,-16736
	r27.s64 = r11.s64 + -16736;
	// bne cr6,0x820f09f4
	if (!cr6.getEQ()) goto loc_820F09F4;
	// lwz r11,4176(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4176);
	// addi r9,r27,8
	ctx.r9.s64 = r27.s64 + 8;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + ctx.r9.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lwz r7,15124(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 15124);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r9,128(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// li r7,0
	ctx.r7.s64 = 0;
	// srawi r10,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r10.s64 = r11.s32 >> 1;
	// addi r6,r9,109
	ctx.r6.s64 = ctx.r9.s64 + 109;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// li r4,108
	ctx.r4.s64 = 108;
	// subfic r3,r10,315
	xer.ca = ctx.r10.u32 <= 315;
	ctx.r3.s64 = 315 - ctx.r10.s64;
	// add r11,r3,r11
	r11.u64 = ctx.r3.u64 + r11.u64;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// li r11,108
	r11.s64 = 108;
	// stw r3,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r3.u32);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r23,r3
	r23.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// fmuls f0,f21,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f21.f64 * f30.f64));
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lwz r7,15124(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 15124);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// stw r24,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r24.u32);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// stw r24,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r24.u32);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// mr r10,r23
	ctx.r10.u64 = r23.u64;
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// or r8,r11,r29
	ctx.r8.u64 = r11.u64 | r29.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820F09F4:
	// lwz r11,4176(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4176);
	// addi r9,r27,10
	ctx.r9.s64 = r27.s64 + 10;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + ctx.r9.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lwz r7,15124(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 15124);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r9,128(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// li r7,0
	ctx.r7.s64 = 0;
	// srawi r10,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r10.s64 = r11.s32 >> 1;
	// addi r6,r9,153
	ctx.r6.s64 = ctx.r9.s64 + 153;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// li r4,152
	ctx.r4.s64 = 152;
	// subfic r3,r10,315
	xer.ca = ctx.r10.u32 <= 315;
	ctx.r3.s64 = 315 - ctx.r10.s64;
	// add r11,r3,r11
	r11.u64 = ctx.r3.u64 + r11.u64;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// li r11,152
	r11.s64 = 152;
	// stw r3,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r3.u32);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// fmuls f0,f21,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f21.f64 * f30.f64));
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// or r29,r11,r29
	r29.u64 = r11.u64 | r29.u64;
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r23,r3
	r23.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 15124);
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// stw r24,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r24.u32);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// stw r24,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r24.u32);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// mr r10,r23
	ctx.r10.u64 = r23.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lwz r11,4176(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4176);
	// addi r9,r27,12
	ctx.r9.s64 = r27.s64 + 12;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + ctx.r9.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lwz r7,15124(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 15124);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// li r9,174
	ctx.r9.s64 = 174;
	// srawi r10,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r10.s64 = r11.s32 >> 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// li r4,174
	ctx.r4.s64 = 174;
	// subfic r3,r10,315
	xer.ca = ctx.r10.u32 <= 315;
	ctx.r3.s64 = 315 - ctx.r10.s64;
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// stw r9,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r9.u32);
	// add r11,r3,r11
	r11.u64 = ctx.r3.u64 + r11.u64;
	// addi r6,r10,175
	ctx.r6.s64 = ctx.r10.s64 + 175;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// stw r3,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r3.u32);
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lwz r7,15124(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 15124);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// stw r24,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r24.u32);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// stw r24,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r24.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820F0B74:
	// addi r1,r1,528
	ctx.r1.s64 = ctx.r1.s64 + 528;
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed578
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_820F0B88"))) PPC_WEAK_FUNC(sub_820F0B88);
PPC_FUNC_IMPL(__imp__sub_820F0B88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r9,-32141
	ctx.r9.s64 = -2106392576;
	// lwz r11,-19604(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19604);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x820f0bcc
	if (cr6.getEQ()) goto loc_820F0BCC;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r10,-16036(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + -16036);
	// lwz r11,-19596(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19596);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x820f0bd4
	if (cr6.getEQ()) goto loc_820F0BD4;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x820f0bdc
	if (cr6.getEQ()) goto loc_820F0BDC;
loc_820F0BCC:
	// li r11,-1
	r11.s64 = -1;
	// stw r11,-16036(r9)
	PPC_STORE_U32(ctx.r9.u32 + -16036, r11.u32);
loc_820F0BD4:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-15664(r10)
	PPC_STORE_U32(ctx.r10.u32 + -15664, r11.u32);
loc_820F0BDC:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r3,-19600(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -19600);
	// bl 0x820ae350
	sub_820AE350(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r3,-19592(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -19592);
	// bl 0x8209f5a8
	sub_8209F5A8(ctx, base);
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f0c10
	if (cr6.getEQ()) goto loc_820F0C10;
	// bl 0x821188f8
	sub_821188F8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, r11.u32);
loc_820F0C10:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,0
	r11.s64 = 0;
	// stb r11,-19556(r10)
	PPC_STORE_U8(ctx.r10.u32 + -19556, r11.u8);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F0C30"))) PPC_WEAK_FUNC(sub_820F0C30);
PPC_FUNC_IMPL(__imp__sub_820F0C30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,26214
	r11.s64 = 1717960704;
	// ori r8,r11,26215
	ctx.r8.u64 = r11.u64 | 26215;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r10,r11,-15584
	ctx.r10.s64 = r11.s64 + -15584;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r9,r11,-15564
	ctx.r9.s64 = r11.s64 + -15564;
	// mulhw r11,r3,r8
	r11.s64 = (int64_t(ctx.r3.s32) * int64_t(ctx.r8.s32)) >> 32;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// rlwinm r8,r11,1,31,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r11,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// lwzx r9,r7,r9
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r9.u32);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// std r9,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r9.u64);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r11.u64);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfd f0,-16(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,-8(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,-19564(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19564, temp.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// stfs f0,-19568(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19568, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F0CB0"))) PPC_WEAK_FUNC(sub_820F0CB0);
PPC_FUNC_IMPL(__imp__sub_820F0CB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,-1
	r11.s64 = -1;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r31,-32141
	r31.s64 = -2106392576;
	// stw r11,-19600(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19600, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19596(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19596, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3992(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3992, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,3996(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3996, r11.u32);
	// li r11,3
	r11.s64 = 3;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19420(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19420, r11.u32);
	// lwz r11,-19540(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19540);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f0d18
	if (cr6.getEQ()) goto loc_820F0D18;
	// li r4,23
	ctx.r4.s64 = 23;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-19540(r31)
	PPC_STORE_U32(r31.u32 + -19540, r11.u32);
loc_820F0D18:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f0d50
	if (!cr6.getEQ()) goto loc_820F0D50;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820F0D50:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F0D68"))) PPC_WEAK_FUNC(sub_820F0D68);
PPC_FUNC_IMPL(__imp__sub_820F0D68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// li r24,1
	r24.s64 = 1;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f0dac
	if (cr6.getEQ()) goto loc_820F0DAC;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r24.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F0DAC:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,76(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 76);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f0dcc
	if (cr6.getEQ()) goto loc_820F0DCC;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r24.u32);
loc_820F0DCC:
	// li r11,0
	r11.s64 = 0;
	// lis r25,-32010
	r25.s64 = -2097807360;
	// lis r26,-32010
	r26.s64 = -2097807360;
	// stw r11,4008(r25)
	PPC_STORE_U32(r25.u32 + 4008, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f13,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	f0.f64 = double(temp.f32);
	// li r11,-1
	r11.s64 = -1;
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// stw r11,2804(r26)
	PPC_STORE_U32(r26.u32 + 2804, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f12,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	ctx.f12.f64 = double(temp.f32);
	// ble cr6,0x820f0e20
	if (!cr6.getGT()) goto loc_820F0E20;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f12,f0
	cr6.compare(ctx.f12.f64, f0.f64);
	// ble cr6,0x820f0e20
	if (!cr6.getGT()) goto loc_820F0E20;
	// mr r11,r24
	r11.u64 = r24.u64;
	// stw r11,4008(r25)
	PPC_STORE_U32(r25.u32 + 4008, r11.u32);
	// b 0x820f0f94
	goto loc_820F0F94;
loc_820F0E20:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r10,r11,-15584
	ctx.r10.s64 = r11.s64 + -15584;
	// li r28,0
	r28.s64 = 0;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// lfs f0,2692(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2692);
	f0.f64 = double(temp.f32);
loc_820F0E38:
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// bge cr6,0x820f0e84
	if (!cr6.getLT()) goto loc_820F0E84;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f11,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// fmuls f11,f11,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f0.f64));
	// fcmpu cr6,f13,f11
	cr6.compare(ctx.f13.f64, ctx.f11.f64);
	// blt cr6,0x820f0e84
	if (cr6.getLT()) goto loc_820F0E84;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r9,r10,20
	ctx.r9.s64 = ctx.r10.s64 + 20;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x820f0e38
	if (cr6.getLT()) goto loc_820F0E38;
loc_820F0E84:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r30,0
	r30.s64 = 0;
	// addi r10,r11,-15564
	ctx.r10.s64 = r11.s64 + -15564;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_820F0E94:
	// addi r9,r10,12
	ctx.r9.s64 = ctx.r10.s64 + 12;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// bge cr6,0x820f0ee0
	if (!cr6.getLT()) goto loc_820F0EE0;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fcmpu cr6,f12,f13
	cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// blt cr6,0x820f0ee0
	if (cr6.getLT()) goto loc_820F0EE0;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x820f0e94
	if (cr6.getLT()) goto loc_820F0E94;
loc_820F0EE0:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x820f0f2c
	if (!cr6.getGT()) goto loc_820F0F2C;
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r29,r30,r11
	r29.u64 = r30.u64 + r11.u64;
loc_820F0EF0:
	// li r31,0
	r31.s64 = 0;
loc_820F0EF4:
	// add r3,r29,r31
	ctx.r3.u64 = r29.u64 + r31.u64;
	// bl 0x820eb6f8
	sub_820EB6F8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x820f0f14
	if (!cr6.getLT()) goto loc_820F0F14;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,5
	cr6.compare<int32_t>(r31.s32, 5, xer);
	// blt cr6,0x820f0ef4
	if (cr6.getLT()) goto loc_820F0EF4;
	// b 0x820f0f1c
	goto loc_820F0F1C;
loc_820F0F14:
	// cmpwi cr6,r31,5
	cr6.compare<int32_t>(r31.s32, 5, xer);
	// blt cr6,0x820f0f2c
	if (cr6.getLT()) goto loc_820F0F2C;
loc_820F0F1C:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r29,r29,-5
	r29.s64 = r29.s64 + -5;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bgt cr6,0x820f0ef0
	if (cr6.getGT()) goto loc_820F0EF0;
loc_820F0F2C:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// blt cr6,0x820f0f64
	if (cr6.getLT()) goto loc_820F0F64;
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r31,r30,r11
	r31.u64 = r30.u64 + r11.u64;
loc_820F0F3C:
	// add r3,r31,r28
	ctx.r3.u64 = r31.u64 + r28.u64;
	// bl 0x820eb6f8
	sub_820EB6F8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x820f0f5c
	if (!cr6.getLT()) goto loc_820F0F5C;
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bge cr6,0x820f0f3c
	if (!cr6.getLT()) goto loc_820F0F3C;
	// b 0x820f0f64
	goto loc_820F0F64;
loc_820F0F5C:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bge cr6,0x820f0f8c
	if (!cr6.getLT()) goto loc_820F0F8C;
loc_820F0F64:
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// li r28,0
	r28.s64 = 0;
	// add r31,r30,r11
	r31.u64 = r30.u64 + r11.u64;
loc_820F0F70:
	// add r3,r31,r28
	ctx.r3.u64 = r31.u64 + r28.u64;
	// bl 0x820eb6f8
	sub_820EB6F8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x820f0f8c
	if (!cr6.getLT()) goto loc_820F0F8C;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// cmpwi cr6,r28,5
	cr6.compare<int32_t>(r28.s32, 5, xer);
	// blt cr6,0x820f0f70
	if (cr6.getLT()) goto loc_820F0F70;
loc_820F0F8C:
	// add r11,r31,r28
	r11.u64 = r31.u64 + r28.u64;
	// stw r11,2804(r26)
	PPC_STORE_U32(r26.u32 + 2804, r11.u32);
loc_820F0F94:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r27,-32010
	r27.s64 = -2097807360;
	// addi r30,r11,-19088
	r30.s64 = r11.s64 + -19088;
	// lis r28,-32141
	r28.s64 = -2106392576;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// beq cr6,0x820f1064
	if (cr6.getEQ()) goto loc_820F1064;
	// lwz r11,4008(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 4008);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f0fd8
	if (cr6.getEQ()) goto loc_820F0FD8;
	// li r8,11004
	ctx.r8.s64 = 11004;
	// b 0x820f107c
	goto loc_820F107C;
loc_820F0FD8:
	// lwz r9,2804(r26)
	ctx.r9.u64 = PPC_LOAD_U32(r26.u32 + 2804);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x820f10a8
	if (cr6.getLT()) goto loc_820F10A8;
	// lhz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f1020
	if (cr6.getEQ()) goto loc_820F1020;
	// li r10,0
	ctx.r10.s64 = 0;
loc_820F0FF8:
	// addi r8,r30,20
	ctx.r8.s64 = r30.s64 + 20;
	// lwzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// cmpw cr6,r10,r9
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, xer);
	// beq cr6,0x820f1024
	if (cr6.getEQ()) goto loc_820F1024;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r8,r30,4
	ctx.r8.s64 = r30.s64 + 4;
	// mulli r10,r11,28
	ctx.r10.s64 = r11.s64 * 28;
	// lhzx r8,r10,r8
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r8.u32);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x820f0ff8
	if (!cr6.getEQ()) goto loc_820F0FF8;
loc_820F1020:
	// li r11,-1
	r11.s64 = -1;
loc_820F1024:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stw r11,-19596(r28)
	PPC_STORE_U32(r28.u32 + -19596, r11.u32);
	// mulli r31,r11,28
	r31.s64 = r11.s64 * 28;
	// addi r7,r10,24996
	ctx.r7.s64 = ctx.r10.s64 + 24996;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// addi r26,r30,8
	r26.s64 = r30.s64 + 8;
	// lis r9,-32141
	ctx.r9.s64 = -2106392576;
	// mr r11,r24
	r11.u64 = r24.u64;
	// li r8,11011
	ctx.r8.s64 = 11011;
	// lwz r6,19944(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + 19944);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// stw r11,3992(r27)
	PPC_STORE_U32(r27.u32 + 3992, r11.u32);
	// lwz r3,19936(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 19936);
	// lwzx r10,r31,r26
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + r26.u32);
	// stw r10,-19600(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19600, ctx.r10.u32);
	// b 0x820f109c
	goto loc_820F109C;
loc_820F1064:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f10a8
	if (cr6.getEQ()) goto loc_820F10A8;
	// li r8,11017
	ctx.r8.s64 = 11017;
loc_820F107C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r24
	r11.u64 = r24.u64;
	// stw r11,3996(r29)
	PPC_STORE_U32(r29.u32 + 3996, r11.u32);
loc_820F109C:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F10A8:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// lwz r11,3992(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 3992);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f1150
	if (cr6.getEQ()) goto loc_820F1150;
	// li r11,9
	r11.s64 = 9;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f1100
	if (cr6.getEQ()) goto loc_820F1100;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,25020(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25020);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19568(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19568, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,25064(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25064);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19564(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19564, temp.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_820F1100:
	// lwz r11,-19596(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -19596);
	// addi r10,r30,20
	ctx.r10.s64 = r30.s64 + 20;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// lwzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x820eb6f8
	sub_820EB6F8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,25020(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25020);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19568(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19568, temp.u32);
	// mulli r11,r3,30
	r11.s64 = ctx.r3.s64 * 30;
	// addi r11,r11,186
	r11.s64 = r11.s64 + 186;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,-19564(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19564, temp.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_820F1150:
	// lwz r11,3996(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 3996);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f119c
	if (cr6.getEQ()) goto loc_820F119C;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lwz r11,4024(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4024);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r11,r24
	r11.u64 = r24.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// beq cr6,0x820f118c
	if (cr6.getEQ()) goto loc_820F118C;
	// li r11,22
	r11.s64 = 22;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_820F118C:
	// li r11,7
	r11.s64 = 7;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// bl 0x820ee118
	sub_820EE118(ctx, base);
loc_820F119C:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_820F11A8"))) PPC_WEAK_FUNC(sub_820F11A8);
PPC_FUNC_IMPL(__imp__sub_820F11A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f11f0
	if (!cr6.getEQ()) goto loc_820F11F0;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820F11F0:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r10,-1
	ctx.r10.s64 = -1;
	// addi r11,r11,-15524
	r11.s64 = r11.s64 + -15524;
	// stw r10,-4(r11)
	PPC_STORE_U32(r11.u32 + -4, ctx.r10.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,8(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	f0.f64 = double(temp.f32);
	// lfs f13,2948(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2948);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,-19588(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + -19588, temp.u32);
	// lfs f0,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,-19584(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19584, temp.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F1248"))) PPC_WEAK_FUNC(sub_820F1248);
PPC_FUNC_IMPL(__imp__sub_820F1248) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r28,1
	r28.s64 = 1;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r30,-32010
	r30.s64 = -2097807360;
	// addi r29,r11,-15520
	r29.s64 = r11.s64 + -15520;
	// bne cr6,0x820f1324
	if (!cr6.getEQ()) goto loc_820F1324;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4008(r30)
	PPC_STORE_U32(r30.u32 + 4008, r11.u32);
	// stw r11,4004(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4004, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// stw r11,4000(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4000, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	f0.f64 = double(temp.f32);
	// ble cr6,0x820f12d8
	if (!cr6.getGT()) goto loc_820F12D8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f12d8
	if (!cr6.getGT()) goto loc_820F12D8;
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,4008(r30)
	PPC_STORE_U32(r30.u32 + 4008, r11.u32);
	// b 0x820f1324
	goto loc_820F1324;
loc_820F12D8:
	// li r11,4
	r11.s64 = 4;
	// lfs f13,-4(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -4);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// stw r11,-8(r29)
	PPC_STORE_U32(r29.u32 + -8, r11.u32);
	// li r11,0
	r11.s64 = 0;
loc_820F12EC:
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// extsw r9,r10
	ctx.r9.s64 = ctx.r10.s32;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f11,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// fmadds f11,f11,f12,f13
	ctx.f11.f64 = double(float(ctx.f11.f64 * ctx.f12.f64 + ctx.f13.f64));
	// fcmpu cr6,f0,f11
	cr6.compare(f0.f64, ctx.f11.f64);
	// ble cr6,0x820f1320
	if (!cr6.getGT()) goto loc_820F1320;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// blt cr6,0x820f12ec
	if (cr6.getLT()) goto loc_820F12EC;
	// b 0x820f1324
	goto loc_820F1324;
loc_820F1320:
	// stw r11,-8(r29)
	PPC_STORE_U32(r29.u32 + -8, r11.u32);
loc_820F1324:
	// lis r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r31,r11,1
	r31.u64 = r11.u64 ^ 1;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820f1484
	if (!cr6.getEQ()) goto loc_820F1484;
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// lwz r9,-8(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + -8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f14c4
	if (cr6.getEQ()) goto loc_820F14C4;
	// lwz r10,4008(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 4008);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820f1484
	if (!cr6.getEQ()) goto loc_820F1484;
	// cmpwi cr6,r9,4
	cr6.compare<int32_t>(ctx.r9.s32, 4, xer);
	// beq cr6,0x820f1484
	if (cr6.getEQ()) goto loc_820F1484;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f14c4
	if (cr6.getEQ()) goto loc_820F14C4;
	// cmplwi cr6,r9,3
	cr6.compare<uint32_t>(ctx.r9.u32, 3, xer);
	// bgt cr6,0x820f14c4
	if (cr6.getGT()) goto loc_820F14C4;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,5024
	r12.s64 = r12.s64 + 5024;
	// rlwinm r0,r9,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r9.u64) {
	case 0:
		goto loc_820F13B0;
	case 1:
		goto loc_820F13DC;
	case 2:
		goto loc_820F1408;
	case 3:
		goto loc_820F1434;
	default:
		__builtin_unreachable();
	}
	// lwz r16,5040(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 5040);
	// lwz r16,5084(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 5084);
	// lwz r16,5128(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 5128);
	// lwz r16,5172(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 5172);
loc_820F13B0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r8,11247
	ctx.r8.s64 = 11247;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// li r11,36
	r11.s64 = 36;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// b 0x820f14b8
	goto loc_820F14B8;
loc_820F13DC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r8,11252
	ctx.r8.s64 = 11252;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// li r11,34
	r11.s64 = 34;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// b 0x820f14b8
	goto loc_820F14B8;
loc_820F1408:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r8,11257
	ctx.r8.s64 = 11257;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// li r11,35
	r11.s64 = 35;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// b 0x820f14b8
	goto loc_820F14B8;
loc_820F1434:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r8,11266
	ctx.r8.s64 = 11266;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,4148(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4148, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,12
	r11.s64 = 12;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,54
	r11.s64 = 54;
	// stw r11,-19600(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19600, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,4204(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4204, r11.u32);
	// b 0x820f14b8
	goto loc_820F14B8;
loc_820F1484:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r8,11239
	ctx.r8.s64 = 11239;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,7
	r11.s64 = 7;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
loc_820F14B8:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F14C4:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f14f8
	if (cr6.getEQ()) goto loc_820F14F8;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F14F8:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f151c
	if (cr6.getEQ()) goto loc_820F151C;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F151C:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f1540
	if (cr6.getEQ()) goto loc_820F1540;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F1540:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f1564
	if (cr6.getEQ()) goto loc_820F1564;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F1564:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,48(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 48);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f1588
	if (cr6.getEQ()) goto loc_820F1588;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F1588:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,88(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 88);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f15a8
	if (cr6.getEQ()) goto loc_820F15A8;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
loc_820F15A8:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820F15B8"))) PPC_WEAK_FUNC(sub_820F15B8);
PPC_FUNC_IMPL(__imp__sub_820F15B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,4208(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4208);
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r27,1
	r27.s64 = 1;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r29,-32010
	r29.s64 = -2097807360;
	// addi r28,r11,-15396
	r28.s64 = r11.s64 + -15396;
	// bne cr6,0x820f1680
	if (!cr6.getEQ()) goto loc_820F1680;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4008(r29)
	PPC_STORE_U32(r29.u32 + 4008, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// lfs f0,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	f0.f64 = double(temp.f32);
	// ble cr6,0x820f1634
	if (!cr6.getGT()) goto loc_820F1634;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f1634
	if (!cr6.getGT()) goto loc_820F1634;
	// mr r11,r27
	r11.u64 = r27.u64;
	// stw r11,4008(r29)
	PPC_STORE_U32(r29.u32 + 4008, r11.u32);
	// b 0x820f1680
	goto loc_820F1680;
loc_820F1634:
	// li r11,4
	r11.s64 = 4;
	// lfs f13,-4(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + -4);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// stw r11,-16(r28)
	PPC_STORE_U32(r28.u32 + -16, r11.u32);
	// li r11,0
	r11.s64 = 0;
loc_820F1648:
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// extsw r9,r10
	ctx.r9.s64 = ctx.r10.s32;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f11,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// fmadds f11,f11,f12,f13
	ctx.f11.f64 = double(float(ctx.f11.f64 * ctx.f12.f64 + ctx.f13.f64));
	// fcmpu cr6,f0,f11
	cr6.compare(f0.f64, ctx.f11.f64);
	// ble cr6,0x820f167c
	if (!cr6.getGT()) goto loc_820F167C;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// blt cr6,0x820f1648
	if (cr6.getLT()) goto loc_820F1648;
	// b 0x820f1680
	goto loc_820F1680;
loc_820F167C:
	// stw r11,-16(r28)
	PPC_STORE_U32(r28.u32 + -16, r11.u32);
loc_820F1680:
	// lis r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4208(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4208);
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4208);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r31,r11,1
	r31.u64 = r11.u64 ^ 1;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820f1880
	if (!cr6.getEQ()) goto loc_820F1880;
	// clrlwi r10,r31,24
	ctx.r10.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f18c0
	if (cr6.getEQ()) goto loc_820F18C0;
	// lwz r11,4008(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4008);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f1880
	if (!cr6.getEQ()) goto loc_820F1880;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f18c0
	if (cr6.getEQ()) goto loc_820F18C0;
	// lwz r3,4208(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4208);
	// bl 0x820ca240
	sub_820CA240(ctx, base);
	// lwz r11,-16(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -16);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bgt cr6,0x820f18c0
	if (cr6.getGT()) goto loc_820F18C0;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,5888
	r12.s64 = r12.s64 + 5888;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820F1714;
	case 1:
		goto loc_820F1840;
	case 2:
		goto loc_820F1780;
	case 3:
		goto loc_820F17C0;
	case 4:
		goto loc_820F1800;
	default:
		__builtin_unreachable();
	}
	// lwz r16,5908(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 5908);
	// lwz r16,6208(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 6208);
	// lwz r16,6016(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 6016);
	// lwz r16,6080(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 6080);
	// lwz r16,6144(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 6144);
loc_820F1714:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f1730
	if (cr6.getEQ()) goto loc_820F1730;
	// bl 0x820e9148
	sub_820E9148(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x820f1734
	goto loc_820F1734;
loc_820F1730:
	// li r30,0
	r30.s64 = 0;
loc_820F1734:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f175c
	if (cr6.getEQ()) goto loc_820F175C;
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// srawi r10,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r10.s64 = r11.s32 >> 2;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r4,r10,r11
	ctx.r4.s64 = r11.s64 - ctx.r10.s64;
	// bl 0x820ea2d8
	sub_820EA2D8(ctx, base);
loc_820F175C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11427
	ctx.r8.s64 = 11427;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f18b8
	goto loc_820F18B8;
loc_820F1780:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c2cc0
	sub_820C2CC0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x820c2d18
	sub_820C2D18(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11432
	ctx.r8.s64 = 11432;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f18b8
	goto loc_820F18B8;
loc_820F17C0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c2df0
	sub_820C2DF0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x820c2e48
	sub_820C2E48(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11437
	ctx.r8.s64 = 11437;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f18b8
	goto loc_820F18B8;
loc_820F1800:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c2d58
	sub_820C2D58(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x820c2db0
	sub_820C2DB0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11442
	ctx.r8.s64 = 11442;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f18b8
	goto loc_820F18B8;
loc_820F1840:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c2c28
	sub_820C2C28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x820c2c80
	sub_820C2C80(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11447
	ctx.r8.s64 = 11447;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f18b8
	goto loc_820F18B8;
loc_820F1880:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r8,11417
	ctx.r8.s64 = 11417;
	// li r4,199
	ctx.r4.s64 = 199;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r27
	r11.u64 = r27.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,7
	r11.s64 = 7;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
loc_820F18B8:
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F18C0:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f18f4
	if (cr6.getEQ()) goto loc_820F18F4;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r27,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r27.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F18F4:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,168(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 168);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f1914
	if (cr6.getEQ()) goto loc_820F1914;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r27,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r27.u32);
loc_820F1914:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820F1928"))) PPC_WEAK_FUNC(sub_820F1928);
PPC_FUNC_IMPL(__imp__sub_820F1928) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f18{};
	PPCRegister f19{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed520
	// stwu r1,-448(r1)
	ea = -448 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// fmr f26,f1
	ctx.fpscr.disableFlushMode();
	f26.f64 = ctx.f1.f64;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// fmr f23,f2
	f23.f64 = ctx.f2.f64;
	// addi r28,r11,28184
	r28.s64 = r11.s64 + 28184;
	// fmr f31,f3
	f31.f64 = ctx.f3.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f22,f4
	f22.f64 = ctx.f4.f64;
	// addi r3,r28,128
	ctx.r3.s64 = r28.s64 + 128;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r8
	r29.u64 = ctx.r8.u64;
	// mr r31,r9
	r31.u64 = ctx.r9.u64;
	// lfs f30,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f30.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r24,r10
	r24.u64 = ctx.r10.u64;
	// lfs f27,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f27.f64 = double(temp.f32);
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// fmr f1,f26
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f26.f64;
	// li r8,1
	ctx.r8.s64 = 1;
	// fmr f2,f23
	ctx.f2.f64 = f23.f64;
	// li r9,2
	ctx.r9.s64 = 2;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// fmr f4,f27
	ctx.f4.f64 = f27.f64;
	// fmr f5,f27
	ctx.f5.f64 = f27.f64;
	// fmr f6,f30
	ctx.f6.f64 = f30.f64;
	// fmr f7,f30
	ctx.f7.f64 = f30.f64;
	// bl 0x82099480
	sub_82099480(ctx, base);
	// lis r25,-32141
	r25.s64 = -2106392576;
	// lis r26,-32141
	r26.s64 = -2106392576;
	// addi r3,r28,144
	ctx.r3.s64 = r28.s64 + 144;
	// lfs f0,-14696(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -14696);
	f0.f64 = double(temp.f32);
	// lfs f13,-14700(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -14700);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f29,f0,f31,f23
	f29.f64 = double(float(f0.f64 * f31.f64 + f23.f64));
	// fmadds f28,f13,f31,f26
	f28.f64 = double(float(ctx.f13.f64 * f31.f64 + f26.f64));
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// fmr f1,f28
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f28.f64;
	// li r8,1
	ctx.r8.s64 = 1;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// li r9,2
	ctx.r9.s64 = 2;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// fmr f4,f27
	ctx.f4.f64 = f27.f64;
	// fmr f5,f27
	ctx.f5.f64 = f27.f64;
	// fmr f6,f30
	ctx.f6.f64 = f30.f64;
	// fmr f7,f30
	ctx.f7.f64 = f30.f64;
	// bl 0x82099480
	sub_82099480(ctx, base);
	// lis r27,-32141
	r27.s64 = -2106392576;
	// lis r29,-32141
	r29.s64 = -2106392576;
	// addi r3,r28,144
	ctx.r3.s64 = r28.s64 + 144;
	// lfs f0,-14704(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + -14704);
	f0.f64 = double(temp.f32);
	// lfs f13,-14708(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -14708);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f29,f0,f31,f23
	f29.f64 = double(float(f0.f64 * f31.f64 + f23.f64));
	// fmadds f28,f13,f31,f26
	f28.f64 = double(float(ctx.f13.f64 * f31.f64 + f26.f64));
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// fmr f1,f28
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f28.f64;
	// li r8,1
	ctx.r8.s64 = 1;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// li r9,2
	ctx.r9.s64 = 2;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// fmr f4,f27
	ctx.f4.f64 = f27.f64;
	// fmr f5,f27
	ctx.f5.f64 = f27.f64;
	// fmr f6,f30
	ctx.f6.f64 = f30.f64;
	// fmr f7,f30
	ctx.f7.f64 = f30.f64;
	// bl 0x82099480
	sub_82099480(ctx, base);
	// addi r3,r28,160
	ctx.r3.s64 = r28.s64 + 160;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// addi r3,r28,176
	ctx.r3.s64 = r28.s64 + 176;
	// bne cr6,0x820f1a60
	if (!cr6.getEQ()) goto loc_820F1A60;
	// addi r3,r28,192
	ctx.r3.s64 = r28.s64 + 192;
loc_820F1A60:
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r23,1
	cr6.compare<int32_t>(r23.s32, 1, xer);
	// beq cr6,0x820f1a84
	if (cr6.getEQ()) goto loc_820F1A84;
	// cmpwi cr6,r23,2
	cr6.compare<int32_t>(r23.s32, 2, xer);
	// beq cr6,0x820f1a84
	if (cr6.getEQ()) goto loc_820F1A84;
	// lfs f0,-14704(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + -14704);
	f0.f64 = double(temp.f32);
	// lfs f13,-14708(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -14708);
	ctx.f13.f64 = double(temp.f32);
	// b 0x820f1a8c
	goto loc_820F1A8C;
loc_820F1A84:
	// lfs f0,-14696(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -14696);
	f0.f64 = double(temp.f32);
	// lfs f13,-14700(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -14700);
	ctx.f13.f64 = double(temp.f32);
loc_820F1A8C:
	// li r9,2
	ctx.r9.s64 = 2;
	// fmr f7,f30
	ctx.fpscr.disableFlushMode();
	ctx.f7.f64 = f30.f64;
	// li r8,1
	ctx.r8.s64 = 1;
	// fmr f6,f30
	ctx.f6.f64 = f30.f64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// fmr f5,f27
	ctx.f5.f64 = f27.f64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f4,f27
	ctx.f4.f64 = f27.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// fmadds f2,f0,f31,f23
	ctx.f2.f64 = double(float(f0.f64 * f31.f64 + f23.f64));
	// fmadds f1,f13,f31,f26
	ctx.f1.f64 = double(float(ctx.f13.f64 * f31.f64 + f26.f64));
	// bl 0x82099480
	sub_82099480(ctx, base);
	// cmpwi cr6,r23,3
	cr6.compare<int32_t>(r23.s32, 3, xer);
	// beq cr6,0x820f1ad8
	if (cr6.getEQ()) goto loc_820F1AD8;
	// cmpwi cr6,r23,2
	cr6.compare<int32_t>(r23.s32, 2, xer);
	// beq cr6,0x820f1ad8
	if (cr6.getEQ()) goto loc_820F1AD8;
	// lfs f0,-14704(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + -14704);
	f0.f64 = double(temp.f32);
	// lfs f13,-14708(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -14708);
	ctx.f13.f64 = double(temp.f32);
	// b 0x820f1ae0
	goto loc_820F1AE0;
loc_820F1AD8:
	// lfs f0,-14696(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -14696);
	f0.f64 = double(temp.f32);
	// lfs f13,-14700(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -14700);
	ctx.f13.f64 = double(temp.f32);
loc_820F1AE0:
	// li r9,2
	ctx.r9.s64 = 2;
	// fmr f7,f30
	ctx.fpscr.disableFlushMode();
	ctx.f7.f64 = f30.f64;
	// li r8,1
	ctx.r8.s64 = 1;
	// fmr f6,f30
	ctx.f6.f64 = f30.f64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// fmr f5,f27
	ctx.f5.f64 = f27.f64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f4,f27
	ctx.f4.f64 = f27.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// fmadds f2,f0,f31,f23
	ctx.f2.f64 = double(float(f0.f64 * f31.f64 + f23.f64));
	// fmadds f1,f13,f31,f26
	ctx.f1.f64 = double(float(ctx.f13.f64 * f31.f64 + f26.f64));
	// bl 0x82099480
	sub_82099480(ctx, base);
	// lis r20,-32141
	r20.s64 = -2106392576;
	// fmr f29,f27
	ctx.fpscr.disableFlushMode();
	f29.f64 = f27.f64;
	// li r24,0
	r24.s64 = 0;
	// fmr f28,f27
	f28.f64 = f27.f64;
	// mr r26,r24
	r26.u64 = r24.u64;
	// lwz r11,-15112(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + -15112);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820f1d98
	if (!cr6.getGT()) goto loc_820F1D98;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r21,548(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 548);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lwz r25,532(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 532);
	// addi r11,r11,-15392
	r11.s64 = r11.s64 + -15392;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r31,r11,12
	r31.s64 = r11.s64 + 12;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f20,2692(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2692);
	f20.f64 = double(temp.f32);
	// lis r29,-32141
	r29.s64 = -2106392576;
	// lis r30,-32141
	r30.s64 = -2106392576;
	// lfs f21,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	f21.f64 = double(temp.f32);
	// li r22,2
	r22.s64 = 2;
	// li r23,1
	r23.s64 = 1;
	// lfs f19,16140(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16140);
	f19.f64 = double(temp.f32);
loc_820F1B6C:
	// lwz r3,-12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -12);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lfs f0,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// fcmpu cr6,f0,f19
	cr6.compare(f0.f64, f19.f64);
	// beq cr6,0x820f1b90
	if (cr6.getEQ()) goto loc_820F1B90;
	// lfs f13,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f29,f0,f31,f26
	f29.f64 = double(float(f0.f64 * f31.f64 + f26.f64));
	// fmadds f28,f13,f31,f23
	f28.f64 = double(float(ctx.f13.f64 * f31.f64 + f23.f64));
loc_820F1B90:
	// addi r7,r1,160
	ctx.r7.s64 = ctx.r1.s64 + 160;
	// fmr f25,f29
	ctx.fpscr.disableFlushMode();
	f25.f64 = f29.f64;
	// addi r6,r1,208
	ctx.r6.s64 = ctx.r1.s64 + 208;
	// fmr f24,f28
	f24.f64 = f28.f64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// fmr f1,f21
	ctx.f1.f64 = f21.f64;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,164
	ctx.r3.s64 = ctx.r1.s64 + 164;
	// fmr f2,f28
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f28.f64;
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// lfs f0,8(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	f0.f64 = double(temp.f32);
	// addi r4,r1,164
	ctx.r4.s64 = ctx.r1.s64 + 164;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r3,r1,180
	ctx.r3.s64 = ctx.r1.s64 + 180;
	// fmadds f18,f31,f0,f26
	f18.f64 = double(float(f31.f64 * f0.f64 + f26.f64));
	// bl 0x8209ba58
	sub_8209BA58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// fmr f1,f18
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f18.f64;
	// bl 0x8209bc18
	sub_8209BC18(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,172
	ctx.r3.s64 = ctx.r1.s64 + 172;
	// fmr f1,f22
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f22.f64;
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,172
	ctx.r3.s64 = ctx.r1.s64 + 172;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,180
	ctx.r3.s64 = ctx.r1.s64 + 180;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,164
	ctx.r3.s64 = ctx.r1.s64 + 164;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,-4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -4);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820f1ccc
	if (cr6.getLT()) goto loc_820F1CCC;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r11,r28
	ctx.r3.u64 = r11.u64 + r28.u64;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// lfs f0,-14716(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + -14716);
	f0.f64 = double(temp.f32);
	// fadds f8,f0,f28
	ctx.f8.f64 = double(float(f0.f64 + f28.f64));
	// lfs f0,-14712(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -14712);
	f0.f64 = double(temp.f32);
	// fmr f12,f30
	ctx.f12.f64 = f30.f64;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// fmr f11,f30
	ctx.f11.f64 = f30.f64;
	// stw r23,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r23.u32);
	// fmr f10,f27
	ctx.f10.f64 = f27.f64;
	// stw r24,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r24.u32);
	// fmr f9,f27
	ctx.f9.f64 = f27.f64;
	// stw r24,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r24.u32);
	// fadds f7,f0,f29
	ctx.f7.f64 = double(float(f0.f64 + f29.f64));
	// fmr f6,f28
	ctx.f6.f64 = f28.f64;
	// fmr f5,f29
	ctx.f5.f64 = f29.f64;
	// fmr f4,f30
	ctx.f4.f64 = f30.f64;
	// fmr f3,f30
	ctx.f3.f64 = f30.f64;
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x820982e0
	sub_820982E0(ctx, base);
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// lfs f0,-14712(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -14712);
	f0.f64 = double(temp.f32);
	// fadds f25,f0,f29
	f25.f64 = double(float(f0.f64 + f29.f64));
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,-14716(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -14716);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f1ccc
	if (!cr6.getGT()) goto loc_820F1CCC;
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// addi r11,r1,160
	r11.s64 = ctx.r1.s64 + 160;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// fmadds f24,f13,f20,f28
	f24.f64 = double(float(ctx.f13.f64 * f20.f64 + f28.f64));
loc_820F1CCC:
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// addi r3,r1,204
	ctx.r3.s64 = ctx.r1.s64 + 204;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// fmr f2,f24
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f24.f64;
	// fmr f1,f25
	ctx.f1.f64 = f25.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// lfs f0,8(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	f0.f64 = double(temp.f32);
	// addi r4,r1,168
	ctx.r4.s64 = ctx.r1.s64 + 168;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// fmadds f25,f31,f0,f26
	f25.f64 = double(float(f31.f64 * f0.f64 + f26.f64));
	// bl 0x8209ba58
	sub_8209BA58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,196
	ctx.r3.s64 = ctx.r1.s64 + 196;
	// fmr f1,f25
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f25.f64;
	// bl 0x8209bc18
	sub_8209BC18(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,188
	ctx.r3.s64 = ctx.r1.s64 + 188;
	// fmr f1,f22
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f22.f64;
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,188
	ctx.r3.s64 = ctx.r1.s64 + 188;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,196
	ctx.r3.s64 = ctx.r1.s64 + 196;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,204
	ctx.r3.s64 = ctx.r1.s64 + 204;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// addi r31,r31,28
	r31.s64 = r31.s64 + 28;
	// std r11,224(r1)
	PPC_STORE_U64(ctx.r1.u32 + 224, r11.u64);
	// lwz r11,-15112(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + -15112);
	// cmpw cr6,r26,r11
	cr6.compare<int32_t>(r26.s32, r11.s32, xer);
	// lfd f0,224(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 224);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fadds f28,f0,f28
	f28.f64 = double(float(f0.f64 + f28.f64));
	// blt cr6,0x820f1b6c
	if (cr6.getLT()) goto loc_820F1B6C;
loc_820F1D98:
	// addi r1,r1,448
	ctx.r1.s64 = ctx.r1.s64 + 448;
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed56c
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_820F1DA8"))) PPC_WEAK_FUNC(sub_820F1DA8);
PPC_FUNC_IMPL(__imp__sub_820F1DA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,0
	r11.s64 = 0;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// ori r26,r11,40960
	r26.u64 = r11.u64 | 40960;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r3,4208(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 4208);
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r25,1
	r25.s64 = 1;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r27,-32141
	r27.s64 = -2106392576;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// addi r30,r11,-14944
	r30.s64 = r11.s64 + -14944;
	// bne cr6,0x820f1e3c
	if (!cr6.getEQ()) goto loc_820F1E3C;
	// li r11,0
	r11.s64 = 0;
	// lfs f0,-19588(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + -19588);
	f0.f64 = double(temp.f32);
	// stw r11,4008(r28)
	PPC_STORE_U32(r28.u32 + 4008, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// lfs f0,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	f0.f64 = double(temp.f32);
	// ble cr6,0x820f1e28
	if (!cr6.getGT()) goto loc_820F1E28;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f1e28
	if (!cr6.getGT()) goto loc_820F1E28;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,4008(r28)
	PPC_STORE_U32(r28.u32 + 4008, r11.u32);
	// b 0x820f1e3c
	goto loc_820F1E3C;
loc_820F1E28:
	// lfs f13,-12(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + -12);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f1f10
	if (!cr6.getLT()) goto loc_820F1F10;
	// li r11,0
	r11.s64 = 0;
loc_820F1E38:
	// stw r11,-164(r30)
	PPC_STORE_U32(r30.u32 + -164, r11.u32);
loc_820F1E3C:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r3,4208(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 4208);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r31,r11,1
	r31.u64 = r11.u64 ^ 1;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820f2250
	if (!cr6.getEQ()) goto loc_820F2250;
	// clrlwi r31,r31,24
	r31.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820f1e80
	if (cr6.getEQ()) goto loc_820F1E80;
	// lwz r11,4008(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4008);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f2250
	if (!cr6.getEQ()) goto loc_820F2250;
loc_820F1E80:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r3,4208(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 4208);
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f1fb0
	if (cr6.getEQ()) goto loc_820F1FB0;
	// lwz r10,-164(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -164);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820f1ea8
	if (cr6.getEQ()) goto loc_820F1EA8;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820f1fb0
	if (!cr6.getEQ()) goto loc_820F1FB0;
loc_820F1EA8:
	// lfs f0,-19588(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,-4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -4);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// lfs f13,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820f1edc
	if (cr6.getGT()) goto loc_820F1EDC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f1ee0
	if (!cr6.getLT()) goto loc_820F1EE0;
loc_820F1EDC:
	// fmr f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f13.f64;
loc_820F1EE0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lfs f13,25068(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25068);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// bne cr6,0x820f1f74
	if (!cr6.getEQ()) goto loc_820F1F74;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r3,86(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// bl 0x820c5898
	sub_820C5898(ctx, base);
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// bl 0x82144ad0
	sub_82144AD0(ctx, base);
	// b 0x820f1f88
	goto loc_820F1F88;
loc_820F1F10:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,-20(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + -20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,-24(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -24);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,3060(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	ctx.f11.f64 = double(temp.f32);
	// fmadds f11,f13,f11,f12
	ctx.f11.f64 = double(float(ctx.f13.f64 * ctx.f11.f64 + ctx.f12.f64));
	// fcmpu cr6,f0,f11
	cr6.compare(f0.f64, ctx.f11.f64);
	// bge cr6,0x820f1f34
	if (!cr6.getLT()) goto loc_820F1F34;
	// mr r11,r25
	r11.u64 = r25.u64;
	// b 0x820f1e38
	goto loc_820F1E38;
loc_820F1F34:
	// li r11,7
	r11.s64 = 7;
	// stw r11,-164(r30)
	PPC_STORE_U32(r30.u32 + -164, r11.u32);
	// li r11,2
	r11.s64 = 2;
loc_820F1F40:
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// extsw r9,r10
	ctx.r9.s64 = ctx.r10.s32;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f11,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// fmadds f11,f11,f13,f12
	ctx.f11.f64 = double(float(ctx.f11.f64 * ctx.f13.f64 + ctx.f12.f64));
	// fcmpu cr6,f0,f11
	cr6.compare(f0.f64, ctx.f11.f64);
	// ble cr6,0x820f1e38
	if (!cr6.getGT()) goto loc_820F1E38;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// blt cr6,0x820f1f40
	if (cr6.getLT()) goto loc_820F1F40;
	// b 0x820f1e3c
	goto loc_820F1E3C;
loc_820F1F74:
	// stfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r3,86(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// bl 0x820c5830
	sub_820C5830(ctx, base);
	// bl 0x820c5800
	sub_820C5800(ctx, base);
	// bl 0x82144a30
	sub_82144A30(ctx, base);
loc_820F1F88:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820f2290
	if (cr6.getEQ()) goto loc_820F2290;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11786
	ctx.r8.s64 = 11786;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f2284
	goto loc_820F2284;
loc_820F1FB0:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820f2290
	if (cr6.getEQ()) goto loc_820F2290;
	// lwz r3,4208(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 4208);
	// bl 0x820ca240
	sub_820CA240(ctx, base);
	// lwz r11,-164(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -164);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// bgt cr6,0x820f2290
	if (cr6.getGT()) goto loc_820F2290;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,8168
	r12.s64 = r12.s64 + 8168;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820F2008;
	case 1:
		goto loc_820F205C;
	case 2:
		goto loc_820F20B0;
	case 3:
		goto loc_820F20F0;
	case 4:
		goto loc_820F2130;
	case 5:
		goto loc_820F2170;
	case 6:
		goto loc_820F21B0;
	case 7:
		goto loc_820F2200;
	default:
		__builtin_unreachable();
	}
	// lwz r16,8200(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 8200);
	// lwz r16,8284(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 8284);
	// lwz r16,8368(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 8368);
	// lwz r16,8432(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 8432);
	// lwz r16,8496(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 8496);
	// lwz r16,8560(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 8560);
	// lwz r16,8624(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 8624);
	// lwz r16,8704(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 8704);
loc_820F2008:
	// lfs f0,-19588(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,-4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -4);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// fdivs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 / f0.f64));
	// lfs f0,16156(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16156);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r3,86(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// bl 0x820c5898
	sub_820C5898(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11797
	ctx.r8.s64 = 11797;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f2288
	goto loc_820F2288;
loc_820F205C:
	// lfs f0,-19588(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,-4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -4);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// fdivs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 / f0.f64));
	// lfs f0,16156(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16156);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r3,86(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// bl 0x820c5830
	sub_820C5830(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11802
	ctx.r8.s64 = 11802;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f2288
	goto loc_820F2288;
loc_820F20B0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c2e88
	sub_820C2E88(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x820c2ee0
	sub_820C2EE0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11807
	ctx.r8.s64 = 11807;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f2288
	goto loc_820F2288;
loc_820F20F0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c2f20
	sub_820C2F20(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x820c2f78
	sub_820C2F78(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11812
	ctx.r8.s64 = 11812;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f2288
	goto loc_820F2288;
loc_820F2130:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c2fb8
	sub_820C2FB8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x820c3010
	sub_820C3010(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11817
	ctx.r8.s64 = 11817;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f2288
	goto loc_820F2288;
loc_820F2170:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c3050
	sub_820C3050(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x820c30a8
	sub_820C30A8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11822
	ctx.r8.s64 = 11822;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f2288
	goto loc_820F2288;
loc_820F21B0:
	// bl 0x820c30e8
	sub_820C30E8(ctx, base);
	// lis r11,21845
	r11.s64 = 1431633920;
	// ori r10,r11,21846
	ctx.r10.u64 = r11.u64 | 21846;
	// addi r11,r3,1
	r11.s64 = ctx.r3.s64 + 1;
	// mulhw r10,r11,r10
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(ctx.r10.s32)) >> 32;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r3,r10,r11
	ctx.r3.s64 = r11.s64 - ctx.r10.s64;
	// bl 0x820c3158
	sub_820C3158(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11827
	ctx.r8.s64 = 11827;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f2288
	goto loc_820F2288;
loc_820F2200:
	// bl 0x820c31d0
	sub_820C31D0(ctx, base);
	// lis r11,21845
	r11.s64 = 1431633920;
	// ori r10,r11,21846
	ctx.r10.u64 = r11.u64 | 21846;
	// addi r11,r3,1
	r11.s64 = ctx.r3.s64 + 1;
	// mulhw r10,r11,r10
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(ctx.r10.s32)) >> 32;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r3,r10,r11
	ctx.r3.s64 = r11.s64 - ctx.r10.s64;
	// bl 0x820c3240
	sub_820C3240(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11832
	ctx.r8.s64 = 11832;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,18
	ctx.r4.s64 = 18;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// b 0x820f2288
	goto loc_820F2288;
loc_820F2250:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r8,11762
	ctx.r8.s64 = 11762;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,7
	r11.s64 = 7;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
loc_820F2284:
	// li r4,199
	ctx.r4.s64 = 199;
loc_820F2288:
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F2290:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f22c4
	if (cr6.getEQ()) goto loc_820F22C4;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F22C4:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f22e8
	if (cr6.getEQ()) goto loc_820F22E8;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F22E8:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f2308
	if (cr6.getEQ()) goto loc_820F2308;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
loc_820F2308:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_820F2318"))) PPC_WEAK_FUNC(sub_820F2318);
PPC_FUNC_IMPL(__imp__sub_820F2318) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// li r26,1
	r26.s64 = 1;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r27,-32010
	r27.s64 = -2097807360;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// bne cr6,0x820f23c0
	if (!cr6.getEQ()) goto loc_820F23C0;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4008(r30)
	PPC_STORE_U32(r30.u32 + 4008, r11.u32);
	// stw r11,4004(r29)
	PPC_STORE_U32(r29.u32 + 4004, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// stw r11,4000(r27)
	PPC_STORE_U32(r27.u32 + 4000, r11.u32);
	// ble cr6,0x820f23a4
	if (!cr6.getGT()) goto loc_820F23A4;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f23a4
	if (!cr6.getGT()) goto loc_820F23A4;
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,4008(r30)
	PPC_STORE_U32(r30.u32 + 4008, r11.u32);
	// b 0x820f23c0
	goto loc_820F23C0;
loc_820F23A4:
	// lwz r11,4296(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4296);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// mr r11,r26
	r11.u64 = r26.u64;
	// bne cr6,0x820f23bc
	if (!cr6.getEQ()) goto loc_820F23BC;
	// stw r11,4000(r27)
	PPC_STORE_U32(r27.u32 + 4000, r11.u32);
	// b 0x820f23c0
	goto loc_820F23C0;
loc_820F23BC:
	// stw r11,4004(r29)
	PPC_STORE_U32(r29.u32 + 4004, r11.u32);
loc_820F23C0:
	// lis r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r31,r11,1
	r31.u64 = r11.u64 ^ 1;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820f2494
	if (!cr6.getEQ()) goto loc_820F2494;
	// clrlwi r10,r31,24
	ctx.r10.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f24ec
	if (cr6.getEQ()) goto loc_820F24EC;
	// lwz r11,4008(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4008);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f2494
	if (!cr6.getEQ()) goto loc_820F2494;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f24ec
	if (cr6.getEQ()) goto loc_820F24EC;
	// lwz r11,4004(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4004);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f2448
	if (cr6.getEQ()) goto loc_820F2448;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,12005
	ctx.r8.s64 = 12005;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// lwz r11,4296(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4296);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,4296(r28)
	PPC_STORE_U32(r28.u32 + 4296, r11.u32);
	// b 0x820f24e0
	goto loc_820F24E0;
loc_820F2448:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f24ec
	if (cr6.getEQ()) goto loc_820F24EC;
	// lwz r11,4000(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4000);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f24ec
	if (cr6.getEQ()) goto loc_820F24EC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r8,12011
	ctx.r8.s64 = 12011;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,7
	r11.s64 = 7;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// b 0x820f24e0
	goto loc_820F24E0;
loc_820F2494:
	// lwz r11,4296(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4296);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f24bc
	if (!cr6.getEQ()) goto loc_820F24BC;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,7
	r11.s64 = 7;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// b 0x820f24c4
	goto loc_820F24C4;
loc_820F24BC:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,4296(r28)
	PPC_STORE_U32(r28.u32 + 4296, r11.u32);
loc_820F24C4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,11999
	ctx.r8.s64 = 11999;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
loc_820F24E0:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F24EC:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f2520
	if (cr6.getEQ()) goto loc_820F2520;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r26,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r26.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F2520:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f2544
	if (cr6.getEQ()) goto loc_820F2544;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r26,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r26.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F2544:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f2568
	if (cr6.getEQ()) goto loc_820F2568;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r26,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r26.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F2568:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,24(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f258c
	if (cr6.getEQ()) goto loc_820F258C;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r26,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r26.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F258C:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,48(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 48);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f25b0
	if (cr6.getEQ()) goto loc_820F25B0;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r26,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r26.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F25B0:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,88(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 88);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f25d0
	if (cr6.getEQ()) goto loc_820F25D0;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r26,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r26.u32);
loc_820F25D0:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820F25E0"))) PPC_WEAK_FUNC(sub_820F25E0);
PPC_FUNC_IMPL(__imp__sub_820F25E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r3,-19608(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -19608);
	// bl 0x820ca3e8
	sub_820CA3E8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lfs f0,2940(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2940);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stw r3,4300(r31)
	PPC_STORE_U32(r31.u32 + 4300, ctx.r3.u32);
	// stfs f0,-19588(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19588, temp.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19584(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19584, temp.u32);
	// bl 0x82159128
	sub_82159128(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r3,4300(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4300);
	// addi r30,r11,-19476
	r30.s64 = r11.s64 + -19476;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r31,r11,-14876
	r31.s64 = r11.s64 + -14876;
	// lwzx r11,r10,r30
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r30.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// bl 0x82159128
	sub_82159128(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// rlwinm r9,r3,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r11,3936(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3936, r11.u32);
	// lwzx r11,r9,r30
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r30.u32);
	// stw r11,-4(r31)
	PPC_STORE_U32(r31.u32 + -4, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F2680"))) PPC_WEAK_FUNC(sub_820F2680);
PPC_FUNC_IMPL(__imp__sub_820F2680) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r29,1
	r29.s64 = 1;
	// lis r24,-32010
	r24.s64 = -2097807360;
	// lis r25,-32010
	r25.s64 = -2097807360;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r26,-31994
	r26.s64 = -2096758784;
	// lis r27,-31994
	r27.s64 = -2096758784;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// lfs f0,-19584(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -19584);
	f0.f64 = double(temp.f32);
	// addi r28,r11,24996
	r28.s64 = r11.s64 + 24996;
	// ble cr6,0x820f2750
	if (!cr6.getGT()) goto loc_820F2750;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f2750
	if (!cr6.getGT()) goto loc_820F2750;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// addi r30,r11,4208
	r30.s64 = r11.s64 + 4208;
	// mr r11,r29
	r11.u64 = r29.u64;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// stw r11,4008(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4008, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,-1
	r11.s64 = -1;
	// stw r11,-14832(r10)
	PPC_STORE_U32(ctx.r10.u32 + -14832, r11.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f285c
	if (cr6.getEQ()) goto loc_820F285C;
	// mr r11,r29
	r11.u64 = r29.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// stw r11,4116(r25)
	PPC_STORE_U32(r25.u32 + 4116, r11.u32);
	// li r11,7
	r11.s64 = 7;
	// stw r11,4120(r24)
	PPC_STORE_U32(r24.u32 + 4120, r11.u32);
	// bl 0x820ee118
	sub_820EE118(ctx, base);
	// li r8,12776
	ctx.r8.s64 = 12776;
	// lwz r6,19944(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + 19944);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// lwz r3,19936(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 19936);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// bl 0x82144920
	sub_82144920(ctx, base);
	// b 0x820f285c
	goto loc_820F285C;
loc_820F2750:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r10,0
	ctx.r10.s64 = 0;
	// lis r9,-32010
	ctx.r9.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// lwz r11,-14692(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14692);
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// addi r8,r11,115
	ctx.r8.s64 = r11.s64 + 115;
	// stw r10,4008(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4008, ctx.r10.u32);
	// extsw r10,r8
	ctx.r10.s64 = ctx.r8.s32;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f27cc
	if (!cr6.getLT()) goto loc_820F27CC;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r30,r11,4208
	r30.s64 = r11.s64 + 4208;
	// mr r11,r29
	r11.u64 = r29.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// stw r11,-14832(r10)
	PPC_STORE_U32(ctx.r10.u32 + -14832, r11.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f285c
	if (cr6.getEQ()) goto loc_820F285C;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,4020(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4020, r11.u32);
	// bl 0x82160598
	sub_82160598(ctx, base);
	// li r11,15
	r11.s64 = 15;
	// b 0x820f2854
	goto loc_820F2854;
loc_820F27CC:
	// addi r11,r11,135
	r11.s64 = r11.s64 + 135;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r30,r11,4208
	r30.s64 = r11.s64 + 4208;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f2828
	if (!cr6.getLT()) goto loc_820F2828;
	// li r11,2
	r11.s64 = 2;
	// stw r11,-14832(r10)
	PPC_STORE_U32(ctx.r10.u32 + -14832, r11.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f285c
	if (cr6.getEQ()) goto loc_820F285C;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x82160598
	sub_82160598(ctx, base);
	// mr r11,r29
	r11.u64 = r29.u64;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4020(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4020, r11.u32);
	// li r11,28
	r11.s64 = 28;
	// b 0x820f2854
	goto loc_820F2854;
loc_820F2828:
	// li r11,0
	r11.s64 = 0;
	// stw r11,-14832(r10)
	PPC_STORE_U32(ctx.r10.u32 + -14832, r11.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bc 20,lt,0x820f285c
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r29
	r11.u64 = r29.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// stw r11,4020(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4020, r11.u32);
	// bl 0x82160598
	sub_82160598(ctx, base);
	// li r11,42
	r11.s64 = 42;
loc_820F2854:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
loc_820F285C:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f2890
	if (cr6.getEQ()) goto loc_820F2890;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F2890:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f28b4
	if (cr6.getEQ()) goto loc_820F28B4;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F28B4:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f28d8
	if (cr6.getEQ()) goto loc_820F28D8;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F28D8:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f28f8
	if (cr6.getEQ()) goto loc_820F28F8;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
loc_820F28F8:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f2940
	if (cr6.getEQ()) goto loc_820F2940;
	// mr r11,r29
	r11.u64 = r29.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// stw r11,4116(r25)
	PPC_STORE_U32(r25.u32 + 4116, r11.u32);
	// li r11,7
	r11.s64 = 7;
	// stw r11,4120(r24)
	PPC_STORE_U32(r24.u32 + 4120, r11.u32);
	// bl 0x820ee118
	sub_820EE118(ctx, base);
	// li r8,12831
	ctx.r8.s64 = 12831;
	// lwz r6,19944(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + 19944);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// lwz r3,19936(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 19936);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F2940:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_820F2948"))) PPC_WEAK_FUNC(sub_820F2948);
PPC_FUNC_IMPL(__imp__sub_820F2948) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r10,4224(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4224);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bge cr6,0x820f2974
	if (!cr6.getLT()) goto loc_820F2974;
	// li r10,4
	ctx.r10.s64 = 4;
	// stw r10,4224(r11)
	PPC_STORE_U32(r11.u32 + 4224, ctx.r10.u32);
loc_820F2974:
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f2a34
	if (!cr6.getEQ()) goto loc_820F2A34;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// lwz r3,4208(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4208);
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,3868(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3868);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f29dc
	if (!cr6.getEQ()) goto loc_820F29DC;
	// li r4,2
	ctx.r4.s64 = 2;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f2a08
	if (cr6.getEQ()) goto loc_820F2A08;
	// bl 0x821835e8
	sub_821835E8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f29d0
	if (!cr6.getEQ()) goto loc_820F29D0;
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x8235d788
	sub_8235D788(ctx, base);
	// b 0x820f2a34
	goto loc_820F2A34;
loc_820F29D0:
	// li r11,1
	r11.s64 = 1;
	// stw r11,3868(r31)
	PPC_STORE_U32(r31.u32 + 3868, r11.u32);
	// b 0x820f2a34
	goto loc_820F2A34;
loc_820F29DC:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820f2a14
	if (!cr6.getEQ()) goto loc_820F2A14;
	// li r4,2
	ctx.r4.s64 = 2;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f2a08
	if (cr6.getEQ()) goto loc_820F2A08;
	// bl 0x821835e8
	sub_821835E8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f2a34
	if (!cr6.getEQ()) goto loc_820F2A34;
loc_820F2A08:
	// li r11,2
	r11.s64 = 2;
	// stw r11,3868(r31)
	PPC_STORE_U32(r31.u32 + 3868, r11.u32);
	// b 0x820f2a34
	goto loc_820F2A34;
loc_820F2A14:
	// lis r11,-31993
	r11.s64 = -2096693248;
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// addi r3,r11,488
	ctx.r3.s64 = r11.s64 + 488;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// lwz r3,4208(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4208);
	// bl 0x8217ef58
	sub_8217EF58(ctx, base);
	// bl 0x8217f020
	sub_8217F020(ctx, base);
loc_820F2A34:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F2A50"))) PPC_WEAK_FUNC(sub_820F2A50);
PPC_FUNC_IMPL(__imp__sub_820F2A50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lis r25,-32010
	r25.s64 = -2097807360;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// stw r11,4008(r25)
	PPC_STORE_U32(r25.u32 + 4008, r11.u32);
	// li r11,-1
	r11.s64 = -1;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// stw r11,2804(r10)
	PPC_STORE_U32(ctx.r10.u32 + 2804, r11.u32);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// li r24,1
	r24.s64 = 1;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f2ab4
	if (cr6.getEQ()) goto loc_820F2AB4;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r24.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F2AB4:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f2ad8
	if (cr6.getEQ()) goto loc_820F2AD8;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r24.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F2AD8:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f2afc
	if (cr6.getEQ()) goto loc_820F2AFC;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r24.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F2AFC:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f2b1c
	if (cr6.getEQ()) goto loc_820F2B1C;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r24.u32);
loc_820F2B1C:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r26,-32010
	r26.s64 = -2097807360;
	// lis r27,-32010
	r27.s64 = -2097807360;
	// lis r28,-31994
	r28.s64 = -2096758784;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// lfs f0,-19584(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -19584);
	f0.f64 = double(temp.f32);
	// addi r30,r11,24996
	r30.s64 = r11.s64 + 24996;
	// ble cr6,0x820f2bbc
	if (!cr6.getGT()) goto loc_820F2BBC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f2bbc
	if (!cr6.getGT()) goto loc_820F2BBC;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// addi r31,r11,4208
	r31.s64 = r11.s64 + 4208;
	// mr r11,r24
	r11.u64 = r24.u64;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r11,4008(r25)
	PPC_STORE_U32(r25.u32 + 4008, r11.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f2c64
	if (cr6.getEQ()) goto loc_820F2C64;
	// mr r11,r24
	r11.u64 = r24.u64;
	// lwz r6,19944(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + 19944);
	// li r8,13190
	ctx.r8.s64 = 13190;
	// lwz r3,19936(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 19936);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// stw r11,4116(r27)
	PPC_STORE_U32(r27.u32 + 4116, r11.u32);
	// li r11,27
	r11.s64 = 27;
	// stw r11,4120(r26)
	PPC_STORE_U32(r26.u32 + 4120, r11.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// b 0x820f2c64
	goto loc_820F2C64;
loc_820F2BBC:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r4,0
	ctx.r4.s64 = 0;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r11,-14688(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14688);
	// addi r11,r11,115
	r11.s64 = r11.s64 + 115;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r31,r11,4208
	r31.s64 = r11.s64 + 4208;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f2c38
	if (!cr6.getLT()) goto loc_820F2C38;
	// mr r11,r24
	r11.u64 = r24.u64;
	// stb r11,-16891(r10)
	PPC_STORE_U8(ctx.r10.u32 + -16891, r11.u8);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f2c64
	if (cr6.getEQ()) goto loc_820F2C64;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f2c64
	if (!cr6.getEQ()) goto loc_820F2C64;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,29
	r11.s64 = 29;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r24
	r11.u64 = r24.u64;
	// stb r11,4130(r10)
	PPC_STORE_U8(ctx.r10.u32 + 4130, r11.u8);
	// b 0x820f2c64
	goto loc_820F2C64;
loc_820F2C38:
	// li r11,0
	r11.s64 = 0;
	// stb r11,-16891(r10)
	PPC_STORE_U8(ctx.r10.u32 + -16891, r11.u8);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f2c64
	if (cr6.getEQ()) goto loc_820F2C64;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f2c64
	if (!cr6.getEQ()) goto loc_820F2C64;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,30
	r11.s64 = 30;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
loc_820F2C64:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f2ca4
	if (cr6.getEQ()) goto loc_820F2CA4;
	// mr r11,r24
	r11.u64 = r24.u64;
	// lwz r6,19944(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + 19944);
	// li r8,13218
	ctx.r8.s64 = 13218;
	// lwz r3,19936(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 19936);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// stw r11,4116(r27)
	PPC_STORE_U32(r27.u32 + 4116, r11.u32);
	// li r11,27
	r11.s64 = 27;
	// stw r11,4120(r26)
	PPC_STORE_U32(r26.u32 + 4120, r11.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F2CA4:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_820F2CB0"))) PPC_WEAK_FUNC(sub_820F2CB0);
PPC_FUNC_IMPL(__imp__sub_820F2CB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stfd f30,-96(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -96, f30.u64);
	// stfd f31,-88(r1)
	PPC_STORE_U64(ctx.r1.u32 + -88, f31.u64);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r28,r5,24
	r28.u64 = ctx.r5.u32 & 0xFF;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r31,r7
	r31.u64 = ctx.r7.u64;
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x820f2cec
	if (!cr6.getEQ()) goto loc_820F2CEC;
	// clrlwi r11,r24,24
	r11.u64 = r24.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f2f2c
	if (cr6.getEQ()) goto loc_820F2F2C;
loc_820F2CEC:
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// li r9,50
	ctx.r9.s64 = 50;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// stw r9,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r9.u32);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r10,125
	ctx.r10.s64 = ctx.r10.s64 + 125;
	// stw r10,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r10.u32);
	// beq cr6,0x820f2d24
	if (cr6.getEQ()) goto loc_820F2D24;
	// clrlwi r8,r6,24
	ctx.r8.u64 = ctx.r6.u32 & 0xFF;
	// li r27,255
	r27.s64 = 255;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x820f2d28
	if (!cr6.getEQ()) goto loc_820F2D28;
loc_820F2D24:
	// li r27,112
	r27.s64 = 112;
loc_820F2D28:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x820f2de8
	if (!cr6.getEQ()) goto loc_820F2DE8;
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// blt cr6,0x820f2d48
	if (cr6.getLT()) goto loc_820F2D48;
	// li r9,230
	ctx.r9.s64 = 230;
	// addi r10,r10,-100
	ctx.r10.s64 = ctx.r10.s64 + -100;
	// stw r9,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r9.u32);
	// stw r10,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r10.u32);
loc_820F2D48:
	// extsw r8,r10
	ctx.r8.s64 = ctx.r10.s32;
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// std r8,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r8.u64);
	// lfd f0,144(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// std r9,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, ctx.r9.u64);
	// lfd f13,136(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lwz r10,-14684(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14684);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// addi r11,r11,28616
	r11.s64 = r11.s64 + 28616;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// frsp f30,f13
	f30.f64 = double(float(ctx.f13.f64));
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// li r8,2
	ctx.r8.s64 = 2;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// lfs f8,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f8.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// fmr f7,f8
	ctx.f7.f64 = ctx.f8.f64;
	// stw r8,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r8.u32);
	// stw r7,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r7.u32);
	// lfs f6,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f6.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f5,f6
	ctx.f5.f64 = ctx.f6.f64;
	// lfs f0,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f0.f64 = double(temp.f32);
	// fadds f4,f31,f0
	ctx.f4.f64 = double(float(f31.f64 + f0.f64));
	// fadds f3,f30,f0
	ctx.f3.f64 = double(float(f30.f64 + f0.f64));
	// bl 0x82099640
	sub_82099640(ctx, base);
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r11,r11,15
	r11.s64 = r11.s64 + 15;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
loc_820F2DE8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// lis r30,-31991
	r30.s64 = -2096562176;
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f2e4c
	if (cr6.getEQ()) goto loc_820F2E4C;
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// li r7,50
	ctx.r7.s64 = 50;
	// lwz r10,136(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// addi r3,r11,-2
	ctx.r3.s64 = r11.s64 + -2;
	// add r9,r10,r11
	ctx.r9.u64 = ctx.r10.u64 + r11.u64;
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// addi r6,r10,14
	ctx.r6.s64 = ctx.r10.s64 + 14;
	// addi r5,r9,3
	ctx.r5.s64 = ctx.r9.s64 + 3;
	// addi r4,r10,-1
	ctx.r4.s64 = ctx.r10.s64 + -1;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820F2E4C:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r23,r3
	r23.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r31,0
	r31.s64 = 0;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// mr r10,r23
	ctx.r10.u64 = r23.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820f2f20
	if (cr6.getEQ()) goto loc_820F2F20;
	// clrlwi r11,r24,24
	r11.u64 = r24.u32 & 0xFF;
	// lis r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f2eb8
	if (cr6.getEQ()) goto loc_820F2EB8;
	// ori r3,r3,40051
	ctx.r3.u64 = ctx.r3.u64 | 40051;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r27,-24576
	r27.s64 = -1610612736;
	// ori r27,r27,255
	r27.u64 = r27.u64 | 255;
	// b 0x820f2ec0
	goto loc_820F2EC0;
loc_820F2EB8:
	// ori r3,r3,40052
	ctx.r3.u64 = ctx.r3.u64 | 40052;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
loc_820F2EC0:
	// li r10,255
	ctx.r10.s64 = 255;
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,125
	r11.s64 = r11.s64 + 125;
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
loc_820F2F20:
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
loc_820F2F2C:
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lfd f30,-96(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -96);
	// lfd f31,-88(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_820F2F40"))) PPC_WEAK_FUNC(sub_820F2F40);
PPC_FUNC_IMPL(__imp__sub_820F2F40) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// addi r25,r11,-16904
	r25.s64 = r11.s64 + -16904;
	// mr r24,r4
	r24.u64 = ctx.r4.u64;
	// mr r21,r5
	r21.u64 = ctx.r5.u64;
	// li r30,0
	r30.s64 = 0;
	// mr r26,r25
	r26.u64 = r25.u64;
	// lis r27,-32141
	r27.s64 = -2106392576;
	// li r20,1
	r20.s64 = 1;
loc_820F2F70:
	// lhz r3,0(r26)
	ctx.r3.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3008
	if (cr6.getEQ()) goto loc_820F3008;
	// lbz r11,-19523(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + -19523);
	// slw r28,r20,r30
	r28.u64 = r30.u8 & 0x20 ? 0 : (r20.u32 << (r30.u8 & 0x3F));
	// and r11,r11,r28
	r11.u64 = r11.u64 & r28.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f2f9c
	if (!cr6.getEQ()) goto loc_820F2F9C;
	// clrlwi r11,r24,24
	r11.u64 = r24.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f3008
	if (cr6.getEQ()) goto loc_820F3008;
loc_820F2F9C:
	// cmpwi cr6,r30,4
	cr6.compare<int32_t>(r30.s32, 4, xer);
	// beq cr6,0x820f3008
	if (cr6.getEQ()) goto loc_820F3008;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// clrlwi r11,r24,24
	r11.u64 = r24.u32 & 0xFF;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r31,r20
	r31.u64 = r20.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f2fc0
	if (!cr6.getEQ()) goto loc_820F2FC0;
	// li r31,0
	r31.s64 = 0;
loc_820F2FC0:
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f2fd4
	if (cr6.getEQ()) goto loc_820F2FD4;
	// li r31,0
	r31.s64 = 0;
loc_820F2FD4:
	// lbz r11,-19523(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + -19523);
	// subf r10,r22,r30
	ctx.r10.s64 = r30.s64 - r22.s64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// and r11,r11,r28
	r11.u64 = r11.u64 & r28.u64;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r7,r10,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// xori r8,r11,1
	ctx.r8.u64 = r11.u64 ^ 1;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820f2cb0
	sub_820F2CB0(ctx, base);
loc_820F3008:
	// addi r26,r26,2
	r26.s64 = r26.s64 + 2;
	// addi r11,r25,12
	r11.s64 = r25.s64 + 12;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpw cr6,r26,r11
	cr6.compare<int32_t>(r26.s32, r11.s32, xer);
	// blt cr6,0x820f2f70
	if (cr6.getLT()) goto loc_820F2F70;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r23,0
	r23.s64 = 0;
	// addi r27,r11,3544
	r27.s64 = r11.s64 + 3544;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// clrlwi r26,r24,24
	r26.u64 = r24.u32 & 0xFF;
	// li r28,6
	r28.s64 = 6;
	// addi r25,r11,3440
	r25.s64 = r11.s64 + 3440;
loc_820F3038:
	// cmplwi cr6,r23,4
	cr6.compare<uint32_t>(r23.u32, 4, xer);
	// bgt cr6,0x820f3094
	if (cr6.getGT()) goto loc_820F3094;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,12376
	r12.s64 = r12.s64 + 12376;
	// rlwinm r0,r23,2,0,29
	r0.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r23.u64) {
	case 0:
		goto loc_820F306C;
	case 1:
		goto loc_820F3074;
	case 2:
		goto loc_820F307C;
	case 3:
		goto loc_820F3084;
	case 4:
		goto loc_820F308C;
	default:
		__builtin_unreachable();
	}
	// lwz r16,12396(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12396);
	// lwz r16,12404(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12404);
	// lwz r16,12412(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12412);
	// lwz r16,12420(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12420);
	// lwz r16,12428(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12428);
loc_820F306C:
	// li r31,11
	r31.s64 = 11;
	// b 0x820f3098
	goto loc_820F3098;
loc_820F3074:
	// li r31,12
	r31.s64 = 12;
	// b 0x820f3098
	goto loc_820F3098;
loc_820F307C:
	// li r31,15
	r31.s64 = 15;
	// b 0x820f3098
	goto loc_820F3098;
loc_820F3084:
	// li r31,23
	r31.s64 = 23;
	// b 0x820f3098
	goto loc_820F3098;
loc_820F308C:
	// li r31,24
	r31.s64 = 24;
	// b 0x820f3098
	goto loc_820F3098;
loc_820F3094:
	// li r31,0
	r31.s64 = 0;
loc_820F3098:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x820f30ac
	if (cr6.getEQ()) goto loc_820F30AC;
	// lbzx r11,r31,r25
	r11.u64 = PPC_LOAD_U8(r31.u32 + r25.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f30b8
	if (!cr6.getEQ()) goto loc_820F30B8;
loc_820F30AC:
	// lbzx r11,r31,r27
	r11.u64 = PPC_LOAD_U8(r31.u32 + r27.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f311c
	if (cr6.getEQ()) goto loc_820F311C;
loc_820F30B8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82136f70
	sub_82136F70(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r20
	r30.u64 = r20.u64;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// bne cr6,0x820f30d4
	if (!cr6.getEQ()) goto loc_820F30D4;
	// li r30,0
	r30.s64 = 0;
loc_820F30D4:
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f30e8
	if (cr6.getEQ()) goto loc_820F30E8;
	// li r30,0
	r30.s64 = 0;
loc_820F30E8:
	// subf r11,r22,r28
	r11.s64 = r28.s64 - r22.s64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// rlwinm r7,r11,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lbzx r11,r31,r27
	r11.u64 = PPC_LOAD_U8(r31.u32 + r27.u32);
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r8,r11,1
	ctx.r8.u64 = r11.u64 ^ 1;
	// bl 0x820f2cb0
	sub_820F2CB0(ctx, base);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_820F311C:
	// addi r23,r23,1
	r23.s64 = r23.s64 + 1;
	// cmpwi cr6,r23,5
	cr6.compare<int32_t>(r23.s32, 5, xer);
	// blt cr6,0x820f3038
	if (cr6.getLT()) goto loc_820F3038;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_820F3130"))) PPC_WEAK_FUNC(sub_820F3130);
PPC_FUNC_IMPL(__imp__sub_820F3130) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r30,0
	r30.s64 = 0;
	// li r31,0
	r31.s64 = 0;
loc_820F314C:
	// cmpwi cr6,r31,17
	cr6.compare<int32_t>(r31.s32, 17, xer);
	// beq cr6,0x820f319c
	if (cr6.getEQ()) goto loc_820F319C;
	// cmpwi cr6,r31,14
	cr6.compare<int32_t>(r31.s32, 14, xer);
	// beq cr6,0x820f319c
	if (cr6.getEQ()) goto loc_820F319C;
	// cmpwi cr6,r31,19
	cr6.compare<int32_t>(r31.s32, 19, xer);
	// beq cr6,0x820f319c
	if (cr6.getEQ()) goto loc_820F319C;
	// cmpwi cr6,r31,18
	cr6.compare<int32_t>(r31.s32, 18, xer);
	// beq cr6,0x820f319c
	if (cr6.getEQ()) goto loc_820F319C;
	// cmpwi cr6,r31,15
	cr6.compare<int32_t>(r31.s32, 15, xer);
	// beq cr6,0x820f319c
	if (cr6.getEQ()) goto loc_820F319C;
	// cmpwi cr6,r31,16
	cr6.compare<int32_t>(r31.s32, 16, xer);
	// beq cr6,0x820f319c
	if (cr6.getEQ()) goto loc_820F319C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8215fb90
	sub_8215FB90(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f319c
	if (cr6.getEQ()) goto loc_820F319C;
	// mr r30,r31
	r30.u64 = r31.u64;
	// cmpwi cr6,r31,6
	cr6.compare<int32_t>(r31.s32, 6, xer);
	// bne cr6,0x820f31a8
	if (!cr6.getEQ()) goto loc_820F31A8;
loc_820F319C:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,20
	cr6.compare<int32_t>(r31.s32, 20, xer);
	// blt cr6,0x820f314c
	if (cr6.getLT()) goto loc_820F314C;
loc_820F31A8:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F31C8"))) PPC_WEAK_FUNC(sub_820F31C8);
PPC_FUNC_IMPL(__imp__sub_820F31C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	// addi r11,r3,-1
	r11.s64 = ctx.r3.s64 + -1;
	// cmplwi cr6,r11,17
	cr6.compare<uint32_t>(r11.u32, 17, xer);
	// bgt cr6,0x820f3300
	if (cr6.getGT()) goto loc_820F3300;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,12780
	r12.s64 = r12.s64 + 12780;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820F3270;
	case 1:
		goto loc_820F32B8;
	case 2:
		goto loc_820F3288;
	case 3:
		goto loc_820F32AC;
	case 4:
		goto loc_820F32AC;
	case 5:
		goto loc_820F32A0;
	case 6:
		goto loc_820F3234;
	case 7:
		goto loc_820F3258;
	case 8:
		goto loc_820F324C;
	case 9:
		goto loc_820F3294;
	case 10:
		goto loc_820F327C;
	case 11:
		goto loc_820F3264;
	case 12:
		goto loc_820F3240;
	case 13:
		goto loc_820F32D0;
	case 14:
		goto loc_820F32E8;
	case 15:
		goto loc_820F32F4;
	case 16:
		goto loc_820F32C4;
	case 17:
		goto loc_820F32DC;
	default:
		__builtin_unreachable();
	}
	// lwz r16,12912(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12912);
	// lwz r16,12984(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12984);
	// lwz r16,12936(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12936);
	// lwz r16,12972(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12972);
	// lwz r16,12972(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12972);
	// lwz r16,12960(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12960);
	// lwz r16,12852(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12852);
	// lwz r16,12888(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12888);
	// lwz r16,12876(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12876);
	// lwz r16,12948(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12948);
	// lwz r16,12924(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12924);
	// lwz r16,12900(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12900);
	// lwz r16,12864(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12864);
	// lwz r16,13008(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 13008);
	// lwz r16,13032(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 13032);
	// lwz r16,13044(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 13044);
	// lwz r16,12996(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 12996);
	// lwz r16,13020(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 13020);
loc_820F3234:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40354
	ctx.r3.u64 = ctx.r3.u64 | 40354;
	// blr 
	return;
loc_820F3240:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40355
	ctx.r3.u64 = ctx.r3.u64 | 40355;
	// blr 
	return;
loc_820F324C:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40356
	ctx.r3.u64 = ctx.r3.u64 | 40356;
	// blr 
	return;
loc_820F3258:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40357
	ctx.r3.u64 = ctx.r3.u64 | 40357;
	// blr 
	return;
loc_820F3264:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40358
	ctx.r3.u64 = ctx.r3.u64 | 40358;
	// blr 
	return;
loc_820F3270:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40359
	ctx.r3.u64 = ctx.r3.u64 | 40359;
	// blr 
	return;
loc_820F327C:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40360
	ctx.r3.u64 = ctx.r3.u64 | 40360;
	// blr 
	return;
loc_820F3288:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40361
	ctx.r3.u64 = ctx.r3.u64 | 40361;
	// blr 
	return;
loc_820F3294:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40254
	ctx.r3.u64 = ctx.r3.u64 | 40254;
	// blr 
	return;
loc_820F32A0:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40363
	ctx.r3.u64 = ctx.r3.u64 | 40363;
	// blr 
	return;
loc_820F32AC:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40364
	ctx.r3.u64 = ctx.r3.u64 | 40364;
	// blr 
	return;
loc_820F32B8:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40365
	ctx.r3.u64 = ctx.r3.u64 | 40365;
	// blr 
	return;
loc_820F32C4:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40367
	ctx.r3.u64 = ctx.r3.u64 | 40367;
	// blr 
	return;
loc_820F32D0:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40368
	ctx.r3.u64 = ctx.r3.u64 | 40368;
	// blr 
	return;
loc_820F32DC:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40369
	ctx.r3.u64 = ctx.r3.u64 | 40369;
	// blr 
	return;
loc_820F32E8:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40370
	ctx.r3.u64 = ctx.r3.u64 | 40370;
	// blr 
	return;
loc_820F32F4:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40371
	ctx.r3.u64 = ctx.r3.u64 | 40371;
	// blr 
	return;
loc_820F3300:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40362
	ctx.r3.u64 = ctx.r3.u64 | 40362;
	// blr 
	return;
	// .long 0x0
}

__attribute__((alias("__imp__sub_820F3310"))) PPC_WEAK_FUNC(sub_820F3310);
PPC_FUNC_IMPL(__imp__sub_820F3310) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// li r29,0
	r29.s64 = 0;
	// stw r11,4008(r28)
	PPC_STORE_U32(r28.u32 + 4008, r11.u32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r25,r11,4312
	r25.s64 = r11.s64 + 4312;
	// lwz r11,-4(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -4);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x820f3350
	if (cr6.getEQ()) goto loc_820F3350;
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
loc_820F3350:
	// lis r11,0
	r11.s64 = 0;
	// lis r26,-32141
	r26.s64 = -2106392576;
	// ori r24,r11,40960
	r24.u64 = r11.u64 | 40960;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f33a8
	if (!cr6.getGT()) goto loc_820F33A8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-19584(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f33a8
	if (!cr6.getGT()) goto loc_820F33A8;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// addi r27,r11,4208
	r27.s64 = r11.s64 + 4208;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4008(r28)
	PPC_STORE_U32(r28.u32 + 4008, r11.u32);
	// b 0x820f33b4
	goto loc_820F33B4;
loc_820F33A8:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r4,16384
	ctx.r4.s64 = 16384;
	// addi r27,r11,4208
	r27.s64 = r11.s64 + 4208;
loc_820F33B4:
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f33d8
	if (cr6.getEQ()) goto loc_820F33D8;
	// li r11,1
	r11.s64 = 1;
	// li r29,1
	r29.s64 = 1;
	// stw r11,4116(r31)
	PPC_STORE_U32(r31.u32 + 4116, r11.u32);
	// li r11,28
	r11.s64 = 28;
	// stw r11,4120(r30)
	PPC_STORE_U32(r30.u32 + 4120, r11.u32);
loc_820F33D8:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f33f0
	if (cr6.getEQ()) goto loc_820F33F0;
	// bl 0x82160de0
	sub_82160DE0(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_820F33F0:
	// lwz r11,-4(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -4);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bgt cr6,0x820f3634
	if (cr6.getGT()) goto loc_820F3634;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,13332
	r12.s64 = r12.s64 + 13332;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820F3428;
	case 1:
		goto loc_820F3444;
	case 2:
		goto loc_820F3470;
	case 3:
		goto loc_820F35BC;
	case 4:
		goto loc_820F360C;
	default:
		__builtin_unreachable();
	}
	// lwz r16,13352(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 13352);
	// lwz r16,13380(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 13380);
	// lwz r16,13424(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 13424);
	// lwz r16,13756(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 13756);
	// lwz r16,13836(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 13836);
loc_820F3428:
	// bl 0x8215e558
	sub_8215E558(ctx, base);
	// bl 0x8215e4c0
	sub_8215E4C0(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,-4(r25)
	PPC_STORE_U32(r25.u32 + -4, r11.u32);
	// bl 0x8215fbf0
	sub_8215FBF0(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_820F3444:
	// bl 0x8215e570
	sub_8215E570(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f362c
	if (cr6.getEQ()) goto loc_820F362C;
	// bl 0x8215e580
	sub_8215E580(ctx, base);
	// cmplwi cr6,r3,2000
	cr6.compare<uint32_t>(ctx.r3.u32, 2000, xer);
	// ble cr6,0x820f3634
	if (!cr6.getGT()) goto loc_820F3634;
	// li r11,2
	r11.s64 = 2;
	// stw r11,-4(r25)
	PPC_STORE_U32(r25.u32 + -4, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_820F3470:
	// bl 0x8215e5b0
	sub_8215E5B0(ctx, base);
	// cmpwi cr6,r3,9
	cr6.compare<int32_t>(ctx.r3.s32, 9, xer);
	// ble cr6,0x820f3484
	if (!cr6.getGT()) goto loc_820F3484;
	// li r3,9
	ctx.r3.s64 = 9;
	// b 0x820f3490
	goto loc_820F3490;
loc_820F3484:
	// bl 0x8215e5b0
	sub_8215E5B0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x820f3554
	if (!cr6.getGT()) goto loc_820F3554;
loc_820F3490:
	// lwz r9,4008(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 4008);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x820f3558
	if (!cr6.getEQ()) goto loc_820F3558;
	// li r11,0
	r11.s64 = 0;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r31,-32141
	r31.s64 = -2106392576;
	// ble cr6,0x820f3508
	if (!cr6.getGT()) goto loc_820F3508;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lfs f0,-19584(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lis r9,-32141
	ctx.r9.s64 = -2106392576;
	// li r10,0
	ctx.r10.s64 = 0;
	// lfs f12,25072(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 25072);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,-14680(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -14680);
	ctx.f13.f64 = double(temp.f32);
loc_820F34C4:
	// extsw r9,r10
	ctx.r9.s64 = ctx.r10.s32;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f11,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// fadds f11,f11,f13
	ctx.f11.f64 = double(float(ctx.f11.f64 + ctx.f13.f64));
	// fadds f11,f11,f12
	ctx.f11.f64 = double(float(ctx.f11.f64 + ctx.f12.f64));
	// fcmpu cr6,f0,f11
	cr6.compare(f0.f64, ctx.f11.f64);
	// blt cr6,0x820f34fc
	if (cr6.getLT()) goto loc_820F34FC;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// cmpw cr6,r11,r3
	cr6.compare<int32_t>(r11.s32, ctx.r3.s32, xer);
	// blt cr6,0x820f34c4
	if (cr6.getLT()) goto loc_820F34C4;
	// b 0x820f3508
	goto loc_820F3508;
loc_820F34FC:
	// stw r11,-14828(r31)
	PPC_STORE_U32(r31.u32 + -14828, r11.u32);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x820f3510
	if (!cr6.getEQ()) goto loc_820F3510;
loc_820F3508:
	// addi r11,r3,-1
	r11.s64 = ctx.r3.s64 + -1;
	// stw r11,-14828(r31)
	PPC_STORE_U32(r31.u32 + -14828, r11.u32);
loc_820F3510:
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3634
	if (cr6.getEQ()) goto loc_820F3634;
	// lwz r3,-14828(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -14828);
	// bl 0x8215e5c0
	sub_8215E5C0(ctx, base);
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r5,r3,32
	ctx.r5.s64 = ctx.r3.s64 + 32;
	// addi r4,r3,16
	ctx.r4.s64 = ctx.r3.s64 + 16;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r3,r3,8
	ctx.r3.s64 = ctx.r3.s64 + 8;
	// bl 0x82164120
	sub_82164120(ctx, base);
	// li r11,3
	r11.s64 = 3;
	// stw r11,-4(r25)
	PPC_STORE_U32(r25.u32 + -4, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_820F3554:
	// lwz r9,4008(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 4008);
loc_820F3558:
	// li r11,-1
	r11.s64 = -1;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-14828(r10)
	PPC_STORE_U32(ctx.r10.u32 + -14828, r11.u32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4000(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4000);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f3634
	if (!cr6.getEQ()) goto loc_820F3634;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x820f3634
	if (!cr6.getEQ()) goto loc_820F3634;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3634
	if (cr6.getEQ()) goto loc_820F3634;
	// li r11,2
	r11.s64 = 2;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4116(r31)
	PPC_STORE_U32(r31.u32 + 4116, r11.u32);
	// li r11,29
	r11.s64 = 29;
	// stw r11,4124(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4124, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4120(r30)
	PPC_STORE_U32(r30.u32 + 4120, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// stb r11,4130(r10)
	PPC_STORE_U8(ctx.r10.u32 + 4130, r11.u8);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_820F35BC:
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x820f35f0
	if (!cr6.getEQ()) goto loc_820F35F0;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f35f0
	if (cr6.getEQ()) goto loc_820F35F0;
	// bl 0x8217f020
	sub_8217F020(ctx, base);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,31
	r11.s64 = 31;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_820F35F0:
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f3634
	if (!cr6.getEQ()) goto loc_820F3634;
	// li r11,4
	r11.s64 = 4;
	// stw r11,-4(r25)
	PPC_STORE_U32(r25.u32 + -4, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_820F360C:
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3634
	if (cr6.getEQ()) goto loc_820F3634;
	// lwz r11,4008(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4008);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f3634
	if (!cr6.getEQ()) goto loc_820F3634;
loc_820F362C:
	// li r11,0
	r11.s64 = 0;
	// stw r11,-4(r25)
	PPC_STORE_U32(r25.u32 + -4, r11.u32);
loc_820F3634:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_820F3640"))) PPC_WEAK_FUNC(sub_820F3640);
PPC_FUNC_IMPL(__imp__sub_820F3640) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820f3688
	if (cr6.getEQ()) goto loc_820F3688;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r10,5000
	ctx.r10.s64 = 5000;
	// lwz r11,4316(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4316);
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// subfc r11,r10,r11
	xer.ca = r11.u32 >= ctx.r10.u32;
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// addi r3,r11,1
	ctx.r3.s64 = r11.s64 + 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820F3688:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F36A0"))) PPC_WEAK_FUNC(sub_820F36A0);
PPC_FUNC_IMPL(__imp__sub_820F36A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r9,-1
	ctx.r9.s64 = -1;
	// lis r8,-32141
	ctx.r8.s64 = -2106392576;
	// lis r26,-32010
	r26.s64 = -2097807360;
	// lis r27,-32010
	r27.s64 = -2097807360;
	// stw r11,4008(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4008, r11.u32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r28,-31994
	r28.s64 = -2096758784;
	// addi r11,r11,4320
	r11.s64 = r11.s64 + 4320;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// stw r9,-1516(r11)
	PPC_STORE_U32(r11.u32 + -1516, ctx.r9.u32);
	// lis r9,-32141
	ctx.r9.s64 = -2106392576;
	// lfs f0,-19588(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f13,24800(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// lfs f0,-19584(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -19584);
	f0.f64 = double(temp.f32);
	// addi r30,r9,24996
	r30.s64 = ctx.r9.s64 + 24996;
	// ble cr6,0x820f3770
	if (!cr6.getGT()) goto loc_820F3770;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f13,24796(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f3770
	if (!cr6.getGT()) goto loc_820F3770;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// addi r31,r11,4208
	r31.s64 = r11.s64 + 4208;
	// li r11,1
	r11.s64 = 1;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r11,4008(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4008, r11.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3858
	if (cr6.getEQ()) goto loc_820F3858;
	// li r11,1
	r11.s64 = 1;
	// lwz r6,19944(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + 19944);
	// li r8,14850
	ctx.r8.s64 = 14850;
	// lwz r3,19936(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 19936);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// stw r11,4116(r27)
	PPC_STORE_U32(r27.u32 + 4116, r11.u32);
	// li r11,27
	r11.s64 = 27;
	// stw r11,4120(r26)
	PPC_STORE_U32(r26.u32 + 4120, r11.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// b 0x820f3858
	goto loc_820F3858;
loc_820F3770:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r10,-14676(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14676);
	// addi r9,r10,115
	ctx.r9.s64 = ctx.r10.s64 + 115;
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f37dc
	if (!cr6.getLT()) goto loc_820F37DC;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// addi r31,r10,4208
	r31.s64 = ctx.r10.s64 + 4208;
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3858
	if (cr6.getEQ()) goto loc_820F3858;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f3858
	if (!cr6.getEQ()) goto loc_820F3858;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,41
	r11.s64 = 41;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// b 0x820f3858
	goto loc_820F3858;
loc_820F37DC:
	// addi r10,r10,135
	ctx.r10.s64 = ctx.r10.s64 + 135;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// addi r31,r10,4208
	r31.s64 = ctx.r10.s64 + 4208;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f382c
	if (!cr6.getLT()) goto loc_820F382C;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3858
	if (cr6.getEQ()) goto loc_820F3858;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,39
	r11.s64 = 39;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// b 0x820f3858
	goto loc_820F3858;
loc_820F382C:
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3858
	if (cr6.getEQ()) goto loc_820F3858;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,29
	r11.s64 = 29;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// stb r11,4130(r10)
	PPC_STORE_U8(ctx.r10.u32 + 4130, r11.u8);
loc_820F3858:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3898
	if (cr6.getEQ()) goto loc_820F3898;
	// li r11,1
	r11.s64 = 1;
	// lwz r6,19944(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + 19944);
	// li r8,14889
	ctx.r8.s64 = 14889;
	// lwz r3,19936(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 19936);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// stw r11,4116(r27)
	PPC_STORE_U32(r27.u32 + 4116, r11.u32);
	// li r11,27
	r11.s64 = 27;
	// stw r11,4120(r26)
	PPC_STORE_U32(r26.u32 + 4120, r11.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F3898:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820F38A0"))) PPC_WEAK_FUNC(sub_820F38A0);
PPC_FUNC_IMPL(__imp__sub_820F38A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// stw r11,4000(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4000, r11.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// stw r11,4008(r30)
	PPC_STORE_U32(r30.u32 + 4008, r11.u32);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// li r28,1
	r28.s64 = 1;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f3900
	if (cr6.getEQ()) goto loc_820F3900;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F3900:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f3924
	if (cr6.getEQ()) goto loc_820F3924;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F3924:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f3948
	if (cr6.getEQ()) goto loc_820F3948;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F3948:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f3968
	if (cr6.getEQ()) goto loc_820F3968;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
loc_820F3968:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r29,-32141
	r29.s64 = -2106392576;
	// addi r31,r11,4242
	r31.s64 = r11.s64 + 4242;
	// li r11,0
	r11.s64 = 0;
	// stb r11,1(r31)
	PPC_STORE_U8(r31.u32 + 1, r11.u8);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// stb r11,82(r31)
	PPC_STORE_U8(r31.u32 + 82, r11.u8);
	// stb r11,84(r31)
	PPC_STORE_U8(r31.u32 + 84, r11.u8);
	// stb r11,83(r31)
	PPC_STORE_U8(r31.u32 + 83, r11.u8);
	// stb r11,86(r31)
	PPC_STORE_U8(r31.u32 + 86, r11.u8);
	// stb r11,85(r31)
	PPC_STORE_U8(r31.u32 + 85, r11.u8);
	// ble cr6,0x820f3a04
	if (!cr6.getGT()) goto loc_820F3A04;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-19584(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f3a04
	if (!cr6.getGT()) goto loc_820F3A04;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,4208(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4208);
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,4008(r30)
	PPC_STORE_U32(r30.u32 + 4008, r11.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3bfc
	if (cr6.getEQ()) goto loc_820F3BFC;
loc_820F39E4:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,38
	r11.s64 = 38;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820F3A04:
	// lis r30,-32010
	r30.s64 = -2097807360;
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820f39e4
	if (!cr6.getEQ()) goto loc_820F39E4;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-14672(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14672);
	// addi r10,r11,135
	ctx.r10.s64 = r11.s64 + 135;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,-19584(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -19584);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f3a7c
	if (!cr6.getLT()) goto loc_820F3A7C;
	// mr r11,r28
	r11.u64 = r28.u64;
	// lwz r3,4208(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4208);
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// stb r11,1(r31)
	PPC_STORE_U8(r31.u32 + 1, r11.u8);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3bfc
	if (cr6.getEQ()) goto loc_820F3BFC;
	// li r11,19
	r11.s64 = 19;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820F3A7C:
	// addi r10,r11,155
	ctx.r10.s64 = r11.s64 + 155;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f3ad0
	if (!cr6.getLT()) goto loc_820F3AD0;
	// mr r11,r28
	r11.u64 = r28.u64;
	// lwz r3,4208(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4208);
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// stb r11,84(r31)
	PPC_STORE_U8(r31.u32 + 84, r11.u8);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3bfc
	if (cr6.getEQ()) goto loc_820F3BFC;
	// li r11,20
	r11.s64 = 20;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820F3AD0:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lwz r10,4228(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4228);
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// beq cr6,0x820f3b34
	if (cr6.getEQ()) goto loc_820F3B34;
	// addi r10,r11,175
	ctx.r10.s64 = r11.s64 + 175;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f3b34
	if (!cr6.getLT()) goto loc_820F3B34;
	// mr r11,r28
	r11.u64 = r28.u64;
	// lwz r3,4208(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4208);
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// stb r11,82(r31)
	PPC_STORE_U8(r31.u32 + 82, r11.u8);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3bfc
	if (cr6.getEQ()) goto loc_820F3BFC;
	// li r11,32
	r11.s64 = 32;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820F3B34:
	// addi r10,r11,195
	ctx.r10.s64 = r11.s64 + 195;
	// lwz r3,4208(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4208);
	// lis r4,0
	ctx.r4.s64 = 0;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f3b8c
	if (!cr6.getLT()) goto loc_820F3B8C;
	// mr r11,r28
	r11.u64 = r28.u64;
	// stb r11,85(r31)
	PPC_STORE_U8(r31.u32 + 85, r11.u8);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3bfc
	if (cr6.getEQ()) goto loc_820F3BFC;
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820F3B8C:
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// mr r11,r28
	r11.u64 = r28.u64;
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f3bd4
	if (!cr6.getLT()) goto loc_820F3BD4;
	// stb r11,83(r31)
	PPC_STORE_U8(r31.u32 + 83, r11.u8);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3bfc
	if (cr6.getEQ()) goto loc_820F3BFC;
	// li r11,43
	r11.s64 = 43;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820F3BD4:
	// stb r11,86(r31)
	PPC_STORE_U8(r31.u32 + 86, r11.u8);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3bfc
	if (cr6.getEQ()) goto loc_820F3BFC;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f3bfc
	if (!cr6.getEQ()) goto loc_820F3BFC;
	// li r11,40
	r11.s64 = 40;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
loc_820F3BFC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820F3C08"))) PPC_WEAK_FUNC(sub_820F3C08);
PPC_FUNC_IMPL(__imp__sub_820F3C08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8215fbf0
	sub_8215FBF0(ctx, base);
	// bl 0x8215fa00
	sub_8215FA00(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// bl 0x8215f9d0
	sub_8215F9D0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82156130
	sub_82156130(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r30,r11,4332
	r30.s64 = r11.s64 + 4332;
	// lbz r4,-90(r30)
	ctx.r4.u64 = PPC_LOAD_U8(r30.u32 + -90);
	// bl 0x82156140
	sub_82156140(ctx, base);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lbz r4,-90(r30)
	ctx.r4.u64 = PPC_LOAD_U8(r30.u32 + -90);
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// addi r3,r11,988
	ctx.r3.s64 = r11.s64 + 988;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lbz r11,-16892(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -16892);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f3c90
	if (!cr6.getEQ()) goto loc_820F3C90;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,-19428(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + -19428);
	// bl 0x82156190
	sub_82156190(ctx, base);
loc_820F3C90:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lbz r11,-19522(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -19522);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f3cb0
	if (!cr6.getEQ()) goto loc_820F3CB0;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,4228(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 4228);
	// bl 0x82156158
	sub_82156158(ctx, base);
loc_820F3CB0:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lbz r11,-19521(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -19521);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f3cd0
	if (!cr6.getEQ()) goto loc_820F3CD0;
	// bl 0x820c9ab0
	sub_820C9AB0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821561c8
	sub_821561C8(ctx, base);
loc_820F3CD0:
	// bl 0x82184a40
	sub_82184A40(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3cf8
	if (cr6.getEQ()) goto loc_820F3CF8;
	// lwz r4,1368(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1368);
	// li r6,10
	ctx.r6.s64 = 10;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82156200
	sub_82156200(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// b 0x820f3cfc
	goto loc_820F3CFC;
loc_820F3CF8:
	// li r11,2
	r11.s64 = 2;
loc_820F3CFC:
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F3D18"))) PPC_WEAK_FUNC(sub_820F3D18);
PPC_FUNC_IMPL(__imp__sub_820F3D18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// li r31,0
	r31.s64 = 0;
	// stw r11,4000(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4000, r11.u32);
	// stw r11,4008(r28)
	PPC_STORE_U32(r28.u32 + 4008, r11.u32);
	// bl 0x8215fa00
	sub_8215FA00(ctx, base);
	// lis r11,0
	r11.s64 = 0;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// ori r24,r11,40960
	r24.u64 = r11.u64 | 40960;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r25,-32141
	r25.s64 = -2106392576;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f3da4
	if (!cr6.getGT()) goto loc_820F3DA4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-19584(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f3da4
	if (!cr6.getGT()) goto loc_820F3DA4;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// addi r27,r11,4208
	r27.s64 = r11.s64 + 4208;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4008(r28)
	PPC_STORE_U32(r28.u32 + 4008, r11.u32);
	// b 0x820f3db0
	goto loc_820F3DB0;
loc_820F3DA4:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r4,16384
	ctx.r4.s64 = 16384;
	// addi r27,r11,4208
	r27.s64 = r11.s64 + 4208;
loc_820F3DB0:
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f3dd4
	if (cr6.getEQ()) goto loc_820F3DD4;
	// li r11,1
	r11.s64 = 1;
	// li r31,1
	r31.s64 = 1;
	// stw r11,4116(r30)
	PPC_STORE_U32(r30.u32 + 4116, r11.u32);
	// li r11,39
	r11.s64 = 39;
	// stw r11,4120(r29)
	PPC_STORE_U32(r29.u32 + 4120, r11.u32);
loc_820F3DD4:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f3dec
	if (cr6.getEQ()) goto loc_820F3DEC;
	// bl 0x82160de0
	sub_82160DE0(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
loc_820F3DEC:
	// lis r23,-32010
	r23.s64 = -2097807360;
	// lwz r11,4332(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 4332);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bgt cr6,0x820f4038
	if (cr6.getGT()) goto loc_820F4038;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,15892
	r12.s64 = r12.s64 + 15892;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820F3E28;
	case 1:
		goto loc_820F3E34;
	case 2:
		goto loc_820F3E74;
	case 3:
		goto loc_820F3FC4;
	case 4:
		goto loc_820F4014;
	default:
		__builtin_unreachable();
	}
	// lwz r16,15912(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 15912);
	// lwz r16,15924(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 15924);
	// lwz r16,15988(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 15988);
	// lwz r16,16324(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 16324);
	// lwz r16,16404(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 16404);
loc_820F3E28:
	// bl 0x820f3c08
	sub_820F3C08(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
loc_820F3E34:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x820f3e48
	if (cr6.getEQ()) goto loc_820F3E48;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f4038
	if (!cr6.getEQ()) goto loc_820F4038;
loc_820F3E48:
	// lbz r11,798(r26)
	r11.u64 = PPC_LOAD_U8(r26.u32 + 798);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f3e64
	if (cr6.getEQ()) goto loc_820F3E64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82155c38
	sub_82155C38(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x820f4038
	if (!cr6.getGT()) goto loc_820F4038;
loc_820F3E64:
	// li r11,2
	r11.s64 = 2;
	// stw r11,4332(r23)
	PPC_STORE_U32(r23.u32 + 4332, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
loc_820F3E74:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82155c38
	sub_82155C38(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x820f3f5c
	if (!cr6.getGT()) goto loc_820F3F5C;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82155c38
	sub_82155C38(ctx, base);
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x820f4038
	if (!cr6.getGT()) goto loc_820F4038;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19584(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lwz r11,-14668(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14668);
	// addi r11,r11,115
	r11.s64 = r11.s64 + 115;
loc_820F3EA8:
	// extsw r10,r11
	ctx.r10.s64 = r11.s32;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820f3edc
	if (cr6.getLT()) goto loc_820F3EDC;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r11,r11,20
	r11.s64 = r11.s64 + 20;
	// cmpw cr6,r31,r3
	cr6.compare<int32_t>(r31.s32, ctx.r3.s32, xer);
	// blt cr6,0x820f3ea8
	if (cr6.getLT()) goto loc_820F3EA8;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
loc_820F3EDC:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// addi r11,r11,-19120
	r11.s64 = r11.s64 + -19120;
	// stw r31,4296(r11)
	PPC_STORE_U32(r11.u32 + 4296, r31.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f4038
	if (cr6.getEQ()) goto loc_820F4038;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82155dd0
	sub_82155DD0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82155c80
	sub_82155C80(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82155c60
	sub_82155C60(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82155c40
	sub_82155C40(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// bl 0x82164120
	sub_82164120(ctx, base);
	// li r11,3
	r11.s64 = 3;
	// stw r11,4332(r23)
	PPC_STORE_U32(r23.u32 + 4332, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
loc_820F3F5C:
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f4038
	if (cr6.getEQ()) goto loc_820F4038;
	// lwz r11,4008(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4008);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f4028
	if (!cr6.getEQ()) goto loc_820F4028;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19120(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19120);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f3fac
	if (!cr6.getEQ()) goto loc_820F3FAC;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,29
	r11.s64 = 29;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// stb r11,4130(r10)
	PPC_STORE_U8(ctx.r10.u32 + 4130, r11.u8);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
loc_820F3FAC:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820f4038
	if (!cr6.getEQ()) goto loc_820F4038;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4332(r23)
	PPC_STORE_U32(r23.u32 + 4332, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
loc_820F3FC4:
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x820f3ff8
	if (!cr6.getEQ()) goto loc_820F3FF8;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f3ff8
	if (cr6.getEQ()) goto loc_820F3FF8;
	// bl 0x8217f020
	sub_8217F020(ctx, base);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,31
	r11.s64 = 31;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
loc_820F3FF8:
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f4038
	if (!cr6.getEQ()) goto loc_820F4038;
	// li r11,4
	r11.s64 = 4;
	// stw r11,4332(r23)
	PPC_STORE_U32(r23.u32 + 4332, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
loc_820F4014:
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f4038
	if (cr6.getEQ()) goto loc_820F4038;
loc_820F4028:
	// li r11,1
	r11.s64 = 1;
	// stw r11,4116(r30)
	PPC_STORE_U32(r30.u32 + 4116, r11.u32);
	// li r11,39
	r11.s64 = 39;
	// stw r11,4120(r29)
	PPC_STORE_U32(r29.u32 + 4120, r11.u32);
loc_820F4038:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_820F4040"))) PPC_WEAK_FUNC(sub_820F4040);
PPC_FUNC_IMPL(__imp__sub_820F4040) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8215fbf0
	sub_8215FBF0(ctx, base);
	// bl 0x8215fa00
	sub_8215FA00(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// bl 0x8215f9d0
	sub_8215F9D0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82156130
	sub_82156130(ctx, base);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// addi r3,r11,988
	ctx.r3.s64 = r11.s64 + 988;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82156140
	sub_82156140(ctx, base);
	// bl 0x82184a40
	sub_82184A40(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f40cc
	if (cr6.getEQ()) goto loc_820F40CC;
	// lwz r4,1368(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1368);
	// li r6,10
	ctx.r6.s64 = 10;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82156200
	sub_82156200(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// b 0x820f40d0
	goto loc_820F40D0;
loc_820F40CC:
	// li r11,2
	r11.s64 = 2;
loc_820F40D0:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4336(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4336, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F40F0"))) PPC_WEAK_FUNC(sub_820F40F0);
PPC_FUNC_IMPL(__imp__sub_820F40F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// li r30,0
	r30.s64 = 0;
	// stw r11,4000(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4000, r11.u32);
	// stw r11,4008(r31)
	PPC_STORE_U32(r31.u32 + 4008, r11.u32);
	// bl 0x8215fa00
	sub_8215FA00(ctx, base);
	// lis r11,0
	r11.s64 = 0;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// ori r27,r11,40960
	r27.u64 = r11.u64 | 40960;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f4174
	if (!cr6.getGT()) goto loc_820F4174;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f4174
	if (!cr6.getGT()) goto loc_820F4174;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// addi r29,r11,4208
	r29.s64 = r11.s64 + 4208;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4008(r31)
	PPC_STORE_U32(r31.u32 + 4008, r11.u32);
	// b 0x820f4180
	goto loc_820F4180;
loc_820F4174:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r4,16384
	ctx.r4.s64 = 16384;
	// addi r29,r11,4208
	r29.s64 = r11.s64 + 4208;
loc_820F4180:
	// lwz r3,0(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f41ac
	if (cr6.getEQ()) goto loc_820F41AC;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// li r30,1
	r30.s64 = 1;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,39
	r11.s64 = 39;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
loc_820F41AC:
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f41c4
	if (cr6.getEQ()) goto loc_820F41C4;
	// bl 0x82160de0
	sub_82160DE0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820F41C4:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,4336(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4336);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bgt cr6,0x820f4380
	if (cr6.getGT()) goto loc_820F4380;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,16876
	r12.s64 = r12.s64 + 16876;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820F4200;
	case 1:
		goto loc_820F4214;
	case 2:
		goto loc_820F4254;
	case 3:
		goto loc_820F4304;
	case 4:
		goto loc_820F4354;
	default:
		__builtin_unreachable();
	}
	// lwz r16,16896(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 16896);
	// lwz r16,16916(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 16916);
	// lwz r16,16980(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 16980);
	// lwz r16,17156(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17156);
	// lwz r16,17236(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17236);
loc_820F4200:
	// bl 0x820f4040
	sub_820F4040(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,4336(r31)
	PPC_STORE_U32(r31.u32 + 4336, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820F4214:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x820f4228
	if (cr6.getEQ()) goto loc_820F4228;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f4380
	if (!cr6.getEQ()) goto loc_820F4380;
loc_820F4228:
	// lbz r11,798(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 798);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f4244
	if (cr6.getEQ()) goto loc_820F4244;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82155c38
	sub_82155C38(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x820f4380
	if (!cr6.getGT()) goto loc_820F4380;
loc_820F4244:
	// li r11,2
	r11.s64 = 2;
	// stw r11,4336(r31)
	PPC_STORE_U32(r31.u32 + 4336, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820F4254:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82155c38
	sub_82155C38(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x820f42c4
	if (!cr6.getGT()) goto loc_820F42C4;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82155dd0
	sub_82155DD0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82155c80
	sub_82155C80(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82155c60
	sub_82155C60(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82155c40
	sub_82155C40(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// bl 0x82164120
	sub_82164120(ctx, base);
	// li r11,3
	r11.s64 = 3;
	// stw r11,4336(r31)
	PPC_STORE_U32(r31.u32 + 4336, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820F42C4:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwz r3,0(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f4380
	if (cr6.getEQ()) goto loc_820F4380;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19120(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19120);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x820f4378
	if (cr6.getEQ()) goto loc_820F4378;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f4380
	if (!cr6.getEQ()) goto loc_820F4380;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,29
	r11.s64 = 29;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820F4304:
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x820f4338
	if (!cr6.getEQ()) goto loc_820F4338;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f4338
	if (cr6.getEQ()) goto loc_820F4338;
	// bl 0x8217f020
	sub_8217F020(ctx, base);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,31
	r11.s64 = 31;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820F4338:
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f4380
	if (!cr6.getEQ()) goto loc_820F4380;
	// li r11,4
	r11.s64 = 4;
	// stw r11,4336(r31)
	PPC_STORE_U32(r31.u32 + 4336, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820F4354:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwz r3,0(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f4380
	if (cr6.getEQ()) goto loc_820F4380;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19120(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19120);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f4380
	if (!cr6.getEQ()) goto loc_820F4380;
loc_820F4378:
	// li r11,0
	r11.s64 = 0;
	// stw r11,4336(r31)
	PPC_STORE_U32(r31.u32 + 4336, r11.u32);
loc_820F4380:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820F4388"))) PPC_WEAK_FUNC(sub_820F4388);
PPC_FUNC_IMPL(__imp__sub_820F4388) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// stw r11,4000(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4000, r11.u32);
	// stw r11,4008(r31)
	PPC_STORE_U32(r31.u32 + 4008, r11.u32);
	// bl 0x8215fa00
	sub_8215FA00(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r30,-32141
	r30.s64 = -2106392576;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f442c
	if (!cr6.getGT()) goto loc_820F442C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-19584(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f442c
	if (!cr6.getGT()) goto loc_820F442C;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,4208(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4208);
	// li r11,1
	r11.s64 = 1;
	// stw r11,4008(r31)
	PPC_STORE_U32(r31.u32 + 4008, r11.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f44e8
	if (cr6.getEQ()) goto loc_820F44E8;
loc_820F4410:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,38
	r11.s64 = 38;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// b 0x820f44e8
	goto loc_820F44E8;
loc_820F442C:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820f4410
	if (!cr6.getEQ()) goto loc_820F4410;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// lis r4,0
	ctx.r4.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r11,-14664(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14664);
	// addi r11,r11,115
	r11.s64 = r11.s64 + 115;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,-19584(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -19584);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820f44a8
	if (cr6.getGT()) goto loc_820F44A8;
	// li r11,1
	r11.s64 = 1;
	// stb r11,4240(r10)
	PPC_STORE_U8(ctx.r10.u32 + 4240, r11.u8);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f44e8
	if (cr6.getEQ()) goto loc_820F44E8;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f44e8
	if (!cr6.getEQ()) goto loc_820F44E8;
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x820f44cc
	goto loc_820F44CC;
loc_820F44A8:
	// li r11,0
	r11.s64 = 0;
	// stb r11,4240(r10)
	PPC_STORE_U8(ctx.r10.u32 + 4240, r11.u8);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f44e8
	if (cr6.getEQ()) goto loc_820F44E8;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f44e8
	if (!cr6.getEQ()) goto loc_820F44E8;
	// li r4,0
	ctx.r4.s64 = 0;
loc_820F44CC:
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// addi r3,r11,988
	ctx.r3.s64 = r11.s64 + 988;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,38
	r11.s64 = 38;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
loc_820F44E8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F4500"))) PPC_WEAK_FUNC(sub_820F4500);
PPC_FUNC_IMPL(__imp__sub_820F4500) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x820f4584
	if (cr6.getLT()) goto loc_820F4584;
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// fabs f0,f1
	ctx.fpscr.disableFlushMode();
	f0.u64 = ctx.f1.u64 & ~0x8000000000000000;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2948(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2948);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bgt cr6,0x820f4578
	if (cr6.getGT()) goto loc_820F4578;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fabs f0,f1
	ctx.fpscr.disableFlushMode();
	f0.u64 = ctx.f1.u64 & ~0x8000000000000000;
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bgt cr6,0x820f4578
	if (cr6.getGT()) goto loc_820F4578;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a0348
	sub_820A0348(ctx, base);
	// fabs f0,f1
	ctx.fpscr.disableFlushMode();
	f0.u64 = ctx.f1.u64 & ~0x8000000000000000;
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bgt cr6,0x820f4578
	if (cr6.getGT()) goto loc_820F4578;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a0448
	sub_820A0448(ctx, base);
	// fabs f0,f1
	ctx.fpscr.disableFlushMode();
	f0.u64 = ctx.f1.u64 & ~0x8000000000000000;
	// li r11,0
	r11.s64 = 0;
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x820f457c
	if (!cr6.getGT()) goto loc_820F457C;
loc_820F4578:
	// li r11,1
	r11.s64 = 1;
loc_820F457C:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// b 0x820f4588
	goto loc_820F4588;
loc_820F4584:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820F4588:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F45A0"))) PPC_WEAK_FUNC(sub_820F45A0);
PPC_FUNC_IMPL(__imp__sub_820F45A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	// addi r11,r3,-8
	r11.s64 = ctx.r3.s64 + -8;
	// cmplwi cr6,r11,14
	cr6.compare<uint32_t>(r11.u32, 14, xer);
	// bgt cr6,0x820f4608
	if (cr6.getGT()) goto loc_820F4608;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,17860
	r12.s64 = r12.s64 + 17860;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820F4600;
	case 1:
		goto loc_820F4600;
	case 2:
		goto loc_820F4600;
	case 3:
		goto loc_820F4600;
	case 4:
		goto loc_820F4600;
	case 5:
		goto loc_820F4600;
	case 6:
		goto loc_820F4600;
	case 7:
		goto loc_820F4608;
	case 8:
		goto loc_820F4600;
	case 9:
		goto loc_820F4600;
	case 10:
		goto loc_820F4600;
	case 11:
		goto loc_820F4608;
	case 12:
		goto loc_820F4608;
	case 13:
		goto loc_820F4608;
	case 14:
		goto loc_820F4600;
	default:
		__builtin_unreachable();
	}
	// lwz r16,17920(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17920);
	// lwz r16,17920(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17920);
	// lwz r16,17920(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17920);
	// lwz r16,17920(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17920);
	// lwz r16,17920(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17920);
	// lwz r16,17920(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17920);
	// lwz r16,17920(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17920);
	// lwz r16,17928(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17928);
	// lwz r16,17920(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17920);
	// lwz r16,17920(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17920);
	// lwz r16,17920(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17920);
	// lwz r16,17928(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17928);
	// lwz r16,17928(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17928);
	// lwz r16,17928(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17928);
	// lwz r16,17920(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 17920);
loc_820F4600:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_820F4608:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F4610"))) PPC_WEAK_FUNC(sub_820F4610);
PPC_FUNC_IMPL(__imp__sub_820F4610) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r30,0
	r30.s64 = 0;
	// li r31,0
	r31.s64 = 0;
loc_820F4630:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8215fb90
	sub_8215FB90(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f4654
	if (!cr6.getEQ()) goto loc_820F4654;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,20
	cr6.compare<int32_t>(r31.s32, 20, xer);
	// blt cr6,0x820f4630
	if (cr6.getLT()) goto loc_820F4630;
	// b 0x820f4664
	goto loc_820F4664;
loc_820F4654:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// mr r30,r31
	r30.u64 = r31.u64;
	// stb r11,4128(r10)
	PPC_STORE_U8(ctx.r10.u32 + 4128, r11.u8);
loc_820F4664:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r31,r11,4329
	r31.s64 = r11.s64 + 4329;
	// lwz r11,11(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 11);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,12468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12468);
	f31.f64 = double(temp.f32);
	// beq cr6,0x820f46c4
	if (cr6.getEQ()) goto loc_820F46C4;
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f4710
	if (cr6.getEQ()) goto loc_820F4710;
	// bl 0x8209dbf8
	sub_8209DBF8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f46b8
	if (!cr6.getEQ()) goto loc_820F46B8;
	// lwz r3,11(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 11);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// bl 0x820f31c8
	sub_820F31C8(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8209dbd8
	sub_8209DBD8(ctx, base);
loc_820F46B8:
	// lwz r11,11(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 11);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f4730
	if (!cr6.getEQ()) goto loc_820F4730;
loc_820F46C4:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x820f4730
	if (!cr6.getGT()) goto loc_820F4730;
	// cmpwi cr6,r30,19
	cr6.compare<int32_t>(r30.s32, 19, xer);
	// bgt cr6,0x820f4730
	if (cr6.getGT()) goto loc_820F4730;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r30,11(r31)
	PPC_STORE_U32(r31.u32 + 11, r30.u32);
	// bl 0x8215fbb0
	sub_8215FBB0(ctx, base);
	// bl 0x8209dbf8
	sub_8209DBF8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f4728
	if (!cr6.getEQ()) goto loc_820F4728;
	// lwz r3,11(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 11);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x820f31c8
	sub_820F31C8(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8209dbd8
	sub_8209DBD8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// b 0x820f472c
	goto loc_820F472C;
loc_820F4710:
	// bl 0x8209dbf8
	sub_8209DBF8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f46b8
	if (!cr6.getEQ()) goto loc_820F46B8;
	// stw r11,11(r31)
	PPC_STORE_U32(r31.u32 + 11, r11.u32);
	// b 0x820f46c4
	goto loc_820F46C4;
loc_820F4728:
	// li r11,1
	r11.s64 = 1;
loc_820F472C:
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
loc_820F4730:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F4750"))) PPC_WEAK_FUNC(sub_820F4750);
PPC_FUNC_IMPL(__imp__sub_820F4750) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r10,r11,8392
	ctx.r10.s64 = r11.s64 + 8392;
	// lbz r11,-4062(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + -4062);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-14812(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14812);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bnelr cr6
	if (!cr6.getEQ()) return;
	// lwz r9,-4048(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4048);
loc_820F477C:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x820f4790
	if (!cr6.getEQ()) goto loc_820F4790;
	// addi r8,r10,-4040
	ctx.r8.s64 = ctx.r10.s64 + -4040;
	// ldx r8,r11,r8
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + ctx.r8.u32);
	// b 0x820f4794
	goto loc_820F4794;
loc_820F4790:
	// ldx r8,r11,r10
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + ctx.r10.u32);
loc_820F4794:
	// cmpldi cr6,r8,0
	cr6.compare<uint64_t>(ctx.r8.u64, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// addi r11,r11,40
	r11.s64 = r11.s64 + 40;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// cmpwi cr6,r11,4040
	cr6.compare<int32_t>(r11.s32, 4040, xer);
	// blt cr6,0x820f477c
	if (cr6.getLT()) goto loc_820F477C;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F47B0"))) PPC_WEAK_FUNC(sub_820F47B0);
PPC_FUNC_IMPL(__imp__sub_820F47B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// bl 0x823b9238
	sub_823B9238(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lwz r11,-19620(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19620);
	// cmpwi cr6,r11,44
	cr6.compare<int32_t>(r11.s32, 44, xer);
	// bne cr6,0x820f4954
	if (!cr6.getEQ()) goto loc_820F4954;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r10,-14808(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -14808);
	// cmpw cr6,r31,r10
	cr6.compare<int32_t>(r31.s32, ctx.r10.s32, xer);
	// bne cr6,0x820f4954
	if (!cr6.getEQ()) goto loc_820F4954;
	// li r10,-1
	ctx.r10.s64 = -1;
	// clrlwi r9,r30,24
	ctx.r9.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r10,-14808(r11)
	PPC_STORE_U32(r11.u32 + -14808, ctx.r10.u32);
	// beq cr6,0x820f4954
	if (cr6.getEQ()) goto loc_820F4954;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r26,r11,4352
	r26.s64 = r11.s64 + 4352;
	// lwz r11,-8(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -8);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x820f48c0
	if (cr6.getLT()) goto loc_820F48C0;
	// bne cr6,0x820f494c
	if (!cr6.getEQ()) goto loc_820F494C;
	// addi r11,r26,4040
	r11.s64 = r26.s64 + 4040;
	// li r25,0
	r25.s64 = 0;
	// addi r31,r11,32
	r31.s64 = r11.s64 + 32;
	// mr r30,r25
	r30.u64 = r25.u64;
loc_820F4830:
	// addi r27,r31,-32
	r27.s64 = r31.s64 + -32;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// bl 0x823b9f90
	sub_823B9F90(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f4894
	if (cr6.getEQ()) goto loc_820F4894;
	// addi r6,r31,-24
	ctx.r6.s64 = r31.s64 + -24;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823b9f00
	sub_823B9F00(ctx, base);
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823b9e10
	sub_823B9E10(ctx, base);
	// addi r6,r31,-8
	ctx.r6.s64 = r31.s64 + -8;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823b9e88
	sub_823B9E88(ctx, base);
	// b 0x820f4898
	goto loc_820F4898;
loc_820F4894:
	// std r25,0(r27)
	PPC_STORE_U64(r27.u32 + 0, r25.u64);
loc_820F4898:
	// addi r11,r26,4040
	r11.s64 = r26.s64 + 4040;
	// addi r31,r31,40
	r31.s64 = r31.s64 + 40;
	// addi r11,r11,4072
	r11.s64 = r11.s64 + 4072;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x820f4830
	if (cr6.getLT()) goto loc_820F4830;
	// li r11,1
	r11.s64 = 1;
	// stb r11,-22(r26)
	PPC_STORE_U8(r26.u32 + -22, r11.u8);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
loc_820F48C0:
	// li r25,0
	r25.s64 = 0;
	// addi r31,r26,32
	r31.s64 = r26.s64 + 32;
	// mr r30,r25
	r30.u64 = r25.u64;
loc_820F48CC:
	// addi r27,r31,-32
	r27.s64 = r31.s64 + -32;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// bl 0x823b9f90
	sub_823B9F90(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f4934
	if (cr6.getEQ()) goto loc_820F4934;
	// addi r6,r31,-24
	ctx.r6.s64 = r31.s64 + -24;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823b9f00
	sub_823B9F00(ctx, base);
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823b9e10
	sub_823B9E10(ctx, base);
	// addi r7,r31,-8
	ctx.r7.s64 = r31.s64 + -8;
	// li r6,61
	ctx.r6.s64 = 61;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823ba418
	sub_823BA418(ctx, base);
	// b 0x820f4938
	goto loc_820F4938;
loc_820F4934:
	// std r25,0(r27)
	PPC_STORE_U64(r27.u32 + 0, r25.u64);
loc_820F4938:
	// addi r31,r31,40
	r31.s64 = r31.s64 + 40;
	// addi r11,r26,4072
	r11.s64 = r26.s64 + 4072;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x820f48cc
	if (cr6.getLT()) goto loc_820F48CC;
loc_820F494C:
	// li r11,1
	r11.s64 = 1;
	// stb r11,-22(r26)
	PPC_STORE_U8(r26.u32 + -22, r11.u8);
loc_820F4954:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_820F4960"))) PPC_WEAK_FUNC(sub_820F4960);
PPC_FUNC_IMPL(__imp__sub_820F4960) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f49a8
	if (!cr6.getEQ()) goto loc_820F49A8;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820F49A8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F49C0"))) PPC_WEAK_FUNC(sub_820F49C0);
PPC_FUNC_IMPL(__imp__sub_820F49C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r29,1
	r29.s64 = 1;
	// lis r30,-32141
	r30.s64 = -2106392576;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f4a40
	if (!cr6.getGT()) goto loc_820F4A40;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-19584(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f4a40
	if (!cr6.getGT()) goto loc_820F4A40;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,4208(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f4ad4
	if (cr6.getEQ()) goto loc_820F4AD4;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r29
	r11.u64 = r29.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,7
	r11.s64 = 7;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// b 0x820f4ad4
	goto loc_820F4AD4;
loc_820F4A40:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f4a74
	if (cr6.getEQ()) goto loc_820F4A74;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r29
	r11.u64 = r29.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,7
	r11.s64 = 7;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// b 0x820f4ad4
	goto loc_820F4AD4;
loc_820F4A74:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// lis r4,0
	ctx.r4.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r11,-14660(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14660);
	// addi r11,r11,115
	r11.s64 = r11.s64 + 115;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// li r11,0
	r11.s64 = 0;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,-19584(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -19584);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f4ab8
	if (!cr6.getGT()) goto loc_820F4AB8;
	// mr r11,r29
	r11.u64 = r29.u64;
loc_820F4AB8:
	// stw r11,4344(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4344, r11.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f4ad4
	if (cr6.getEQ()) goto loc_820F4AD4;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,44
	r11.s64 = 44;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
loc_820F4AD4:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f4b08
	if (cr6.getEQ()) goto loc_820F4B08;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F4B08:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f4b2c
	if (cr6.getEQ()) goto loc_820F4B2C;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F4B2C:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f4b50
	if (cr6.getEQ()) goto loc_820F4B50;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F4B50:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f4b70
	if (cr6.getEQ()) goto loc_820F4B70;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
loc_820F4B70:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820F4B78"))) PPC_WEAK_FUNC(sub_820F4B78);
PPC_FUNC_IMPL(__imp__sub_820F4B78) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f4bc0
	if (!cr6.getEQ()) goto loc_820F4BC0;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820F4BC0:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r31,r11,8392
	r31.s64 = r11.s64 + 8392;
	// li r11,0
	r11.s64 = 0;
	// addi r3,r31,-4040
	ctx.r3.s64 = r31.s64 + -4040;
	// li r5,4001
	ctx.r5.s64 = 4001;
	// li r4,0
	ctx.r4.s64 = 0;
	// stb r11,-4062(r31)
	PPC_STORE_U8(r31.u32 + -4062, r11.u8);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-14808
	r11.s64 = r11.s64 + -14808;
	// stw r10,-4(r11)
	PPC_STORE_U32(r11.u32 + -4, ctx.r10.u32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// li r5,4001
	ctx.r5.s64 = 4001;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F4C20"))) PPC_WEAK_FUNC(sub_820F4C20);
PPC_FUNC_IMPL(__imp__sub_820F4C20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-14808
	r11.s64 = r11.s64 + -14808;
	// lwz r10,-4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// stw r10,-4(r11)
	PPC_STORE_U32(r11.u32 + -4, ctx.r10.u32);
	// blt cr6,0x820f4c54
	if (cr6.getLT()) goto loc_820F4C54;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,-4(r11)
	PPC_STORE_U32(r11.u32 + -4, ctx.r10.u32);
loc_820F4C54:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r5,4001
	ctx.r5.s64 = 4001;
	// addi r31,r10,8392
	r31.s64 = ctx.r10.s64 + 8392;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r3,r31,-4040
	ctx.r3.s64 = r31.s64 + -4040;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r10,-4044(r31)
	PPC_STORE_U32(r31.u32 + -4044, ctx.r10.u32);
	// stb r10,-4062(r31)
	PPC_STORE_U8(r31.u32 + -4062, ctx.r10.u8);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// li r5,4001
	ctx.r5.s64 = 4001;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F4CA8"))) PPC_WEAK_FUNC(sub_820F4CA8);
PPC_FUNC_IMPL(__imp__sub_820F4CA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r31,r11,8392
	r31.s64 = r11.s64 + 8392;
	// lwz r11,-4048(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -4048);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820f4d20
	if (!cr6.getEQ()) goto loc_820F4D20;
	// lwz r11,4040(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4040);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,20
	cr6.compare<int32_t>(r11.s32, 20, xer);
	// stw r11,4040(r31)
	PPC_STORE_U32(r31.u32 + 4040, r11.u32);
	// blt cr6,0x820f4ce8
	if (cr6.getLT()) goto loc_820F4CE8;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4040(r31)
	PPC_STORE_U32(r31.u32 + 4040, r11.u32);
loc_820F4CE8:
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r3,r31,-4040
	ctx.r3.s64 = r31.s64 + -4040;
	// li r5,4001
	ctx.r5.s64 = 4001;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r11,-4044(r31)
	PPC_STORE_U32(r31.u32 + -4044, r11.u32);
	// stb r11,-4062(r31)
	PPC_STORE_U8(r31.u32 + -4062, r11.u8);
	// li r11,-1
	r11.s64 = -1;
	// stw r11,-14808(r10)
	PPC_STORE_U32(ctx.r10.u32 + -14808, r11.u32);
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// li r5,4001
	ctx.r5.s64 = 4001;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
loc_820F4D20:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F4D38"))) PPC_WEAK_FUNC(sub_820F4D38);
PPC_FUNC_IMPL(__imp__sub_820F4D38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-14812(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14812);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f4d80
	if (!cr6.getEQ()) goto loc_820F4D80;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r7,r11,4348
	ctx.r7.s64 = r11.s64 + 4348;
	// lbz r11,-18(r7)
	r11.u64 = PPC_LOAD_U8(ctx.r7.u32 + -18);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f4d80
	if (cr6.getEQ()) goto loc_820F4D80;
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// addi r6,r11,10
	ctx.r6.s64 = r11.s64 + 10;
	// bl 0x820f4750
	sub_820F4750(ctx, base);
	// cmpw cr6,r3,r6
	cr6.compare<int32_t>(ctx.r3.s32, ctx.r6.s32, xer);
	// ble cr6,0x820f4d80
	if (!cr6.getGT()) goto loc_820F4D80;
	// stw r6,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r6.u32);
loc_820F4D80:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F4D90"))) PPC_WEAK_FUNC(sub_820F4D90);
PPC_FUNC_IMPL(__imp__sub_820F4D90) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-14812(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14812);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bnelr cr6
	if (!cr6.getEQ()) return;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r11,r11,4348
	r11.s64 = r11.s64 + 4348;
	// lbz r10,-18(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + -18);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blelr cr6
	if (!cr6.getGT()) return;
	// addi r10,r10,-10
	ctx.r10.s64 = ctx.r10.s64 + -10;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bgelr cr6
	if (!cr6.getLT()) return;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F4DE0"))) PPC_WEAK_FUNC(sub_820F4DE0);
PPC_FUNC_IMPL(__imp__sub_820F4DE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r31,r11,8392
	r31.s64 = r11.s64 + 8392;
	// lwz r11,-4048(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -4048);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820f4e58
	if (!cr6.getEQ()) goto loc_820F4E58;
	// lwz r11,4044(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4044);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// stw r11,4044(r31)
	PPC_STORE_U32(r31.u32 + 4044, r11.u32);
	// blt cr6,0x820f4e20
	if (cr6.getLT()) goto loc_820F4E20;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4044(r31)
	PPC_STORE_U32(r31.u32 + 4044, r11.u32);
loc_820F4E20:
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// addi r3,r31,-4040
	ctx.r3.s64 = r31.s64 + -4040;
	// li r5,4001
	ctx.r5.s64 = 4001;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r11,-4044(r31)
	PPC_STORE_U32(r31.u32 + -4044, r11.u32);
	// stb r11,-4062(r31)
	PPC_STORE_U8(r31.u32 + -4062, r11.u8);
	// li r11,-1
	r11.s64 = -1;
	// stw r11,-14808(r10)
	PPC_STORE_U32(ctx.r10.u32 + -14808, r11.u32);
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// li r5,4001
	ctx.r5.s64 = 4001;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
loc_820F4E58:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F4E70"))) PPC_WEAK_FUNC(sub_820F4E70);
PPC_FUNC_IMPL(__imp__sub_820F4E70) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// stwu r1,-992(r1)
	ea = -992 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// bl 0x8217c108
	sub_8217C108(ctx, base);
	// lis r24,-32141
	r24.s64 = -2106392576;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// li r20,1
	r20.s64 = 1;
	// lis r23,-32141
	r23.s64 = -2106392576;
	// lfs f0,-19588(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f4ef8
	if (!cr6.getGT()) goto loc_820F4EF8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-19584(r23)
	temp.u32 = PPC_LOAD_U32(r23.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f4ef8
	if (!cr6.getGT()) goto loc_820F4EF8;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,4208(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f53d4
	if (cr6.getEQ()) goto loc_820F53D4;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,7
	r11.s64 = 7;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// b 0x820f53d4
	goto loc_820F53D4;
loc_820F4EF8:
	// lis r21,-32010
	r21.s64 = -2097807360;
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r21)
	ctx.r3.u64 = PPC_LOAD_U32(r21.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f4f2c
	if (cr6.getEQ()) goto loc_820F4F2C;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,7
	r11.s64 = 7;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// b 0x820f53d4
	goto loc_820F53D4;
loc_820F4F2C:
	// lis r4,1
	ctx.r4.s64 = 65536;
	// lwz r3,4208(r21)
	ctx.r3.u64 = PPC_LOAD_U32(r21.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f4f44
	if (cr6.getEQ()) goto loc_820F4F44;
	// bl 0x820f4c20
	sub_820F4C20(ctx, base);
loc_820F4F44:
	// bl 0x82184a40
	sub_82184A40(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// addi r31,r11,8392
	r31.s64 = r11.s64 + 8392;
	// lbz r11,-4062(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + -4062);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f50e0
	if (!cr6.getEQ()) goto loc_820F50E0;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r25,r11,-14812
	r25.s64 = r11.s64 + -14812;
	// lwz r11,4(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 4);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x820f50e0
	if (!cr6.getEQ()) goto loc_820F50E0;
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820f4fd0
	if (!cr6.getEQ()) goto loc_820F4FD0;
	// lwz r11,-4048(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -4048);
	// mr r30,r20
	r30.u64 = r20.u64;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x820f4fac
	if (cr6.getLT()) goto loc_820F4FAC;
	// bne cr6,0x820f4fb0
	if (!cr6.getEQ()) goto loc_820F4FB0;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r5,4044(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 4044);
	// lwz r4,4040(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 4040);
	// li r30,2
	r30.s64 = 2;
	// bl 0x8217c508
	sub_8217C508(ctx, base);
	// b 0x820f4fb0
	goto loc_820F4FB0;
loc_820F4FAC:
	// mr r30,r20
	r30.u64 = r20.u64;
loc_820F4FB0:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r6,10
	ctx.r6.s64 = 10;
	// addi r7,r11,18352
	ctx.r7.s64 = r11.s64 + 18352;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8217c680
	sub_8217C680(ctx, base);
	// b 0x820f50dc
	goto loc_820F50DC;
loc_820F4FD0:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lwz r11,-4048(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -4048);
	// bne cr6,0x820f507c
	if (!cr6.getEQ()) goto loc_820F507C;
	// li r27,0
	r27.s64 = 0;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x820f5004
	if (cr6.getLT()) goto loc_820F5004;
	// bne cr6,0x820f5008
	if (!cr6.getEQ()) goto loc_820F5008;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r5,4044(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 4044);
	// lwz r4,4040(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 4040);
	// li r27,3
	r27.s64 = 3;
	// bl 0x8217c508
	sub_8217C508(ctx, base);
	// b 0x820f5008
	goto loc_820F5008;
loc_820F5004:
	// li r27,0
	r27.s64 = 0;
loc_820F5008:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82183fe0
	sub_82183FE0(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// beq cr6,0x820f50e0
	if (cr6.getEQ()) goto loc_820F50E0;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82183858
	sub_82183858(ctx, base);
	// std r3,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r3.u64);
	// li r30,0
	r30.s64 = 0;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x820f505c
	if (!cr6.getGT()) goto loc_820F505C;
	// addi r29,r1,88
	r29.s64 = ctx.r1.s64 + 88;
loc_820F5038:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82183fe8
	sub_82183FE8(ctx, base);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpw cr6,r30,r28
	cr6.compare<int32_t>(r30.s32, r28.s32, xer);
	// std r11,0(r29)
	PPC_STORE_U64(r29.u32 + 0, r11.u64);
	// addi r29,r29,8
	r29.s64 = r29.s64 + 8;
	// blt cr6,0x820f5038
	if (cr6.getLT()) goto loc_820F5038;
loc_820F505C:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r6,r28,1
	ctx.r6.s64 = r28.s64 + 1;
	// addi r7,r11,18352
	ctx.r7.s64 = r11.s64 + 18352;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8217c570
	sub_8217C570(ctx, base);
	// b 0x820f50dc
	goto loc_820F50DC;
loc_820F507C:
	// li r30,4
	r30.s64 = 4;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x820f50a4
	if (cr6.getLT()) goto loc_820F50A4;
	// bne cr6,0x820f50a8
	if (!cr6.getEQ()) goto loc_820F50A8;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r5,4044(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 4044);
	// lwz r4,4040(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 4040);
	// li r30,5
	r30.s64 = 5;
	// bl 0x8217c508
	sub_8217C508(ctx, base);
	// b 0x820f50a8
	goto loc_820F50A8;
loc_820F50A4:
	// li r30,4
	r30.s64 = 4;
loc_820F50A8:
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// beq cr6,0x820f50e0
	if (cr6.getEQ()) goto loc_820F50E0;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82183858
	sub_82183858(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// cmpldi cr6,r5,0
	cr6.compare<uint64_t>(ctx.r5.u64, 0, xer);
	// beq cr6,0x820f50e0
	if (cr6.getEQ()) goto loc_820F50E0;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r6,10
	ctx.r6.s64 = 10;
	// addi r7,r11,18352
	ctx.r7.s64 = r11.s64 + 18352;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8217c748
	sub_8217C748(ctx, base);
loc_820F50DC:
	// stw r3,4(r25)
	PPC_STORE_U32(r25.u32 + 4, ctx.r3.u32);
loc_820F50E0:
	// li r11,0
	r11.s64 = 0;
	// lfs f0,-19588(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stw r11,4048(r31)
	PPC_STORE_U32(r31.u32 + 4048, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f8,25104(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 25104);
	ctx.f8.f64 = double(temp.f32);
	// lfs f9,6596(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 6596);
	ctx.f9.f64 = double(temp.f32);
	// lfs f10,25100(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 25100);
	ctx.f10.f64 = double(temp.f32);
	// lfs f12,14120(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14120);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// lfs f0,-19584(r23)
	temp.u32 = PPC_LOAD_U32(r23.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lfs f11,15344(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15344);
	ctx.f11.f64 = double(temp.f32);
	// ble cr6,0x820f51c0
	if (!cr6.getGT()) goto loc_820F51C0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,12460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12460);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f5148
	if (!cr6.getLT()) goto loc_820F5148;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,12452(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12452);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f5148
	if (!cr6.getGT()) goto loc_820F5148;
	// li r11,-1
	r11.s64 = -1;
	// b 0x820f528c
	goto loc_820F528C;
loc_820F5148:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,2940(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2940);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f5168
	if (!cr6.getLT()) goto loc_820F5168;
	// fcmpu cr6,f0,f11
	cr6.compare(f0.f64, ctx.f11.f64);
	// ble cr6,0x820f5168
	if (!cr6.getGT()) goto loc_820F5168;
	// li r11,-2
	r11.s64 = -2;
	// b 0x820f528c
	goto loc_820F528C;
loc_820F5168:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,15844(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15844);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f5188
	if (!cr6.getLT()) goto loc_820F5188;
	// fcmpu cr6,f0,f10
	cr6.compare(f0.f64, ctx.f10.f64);
	// ble cr6,0x820f5188
	if (!cr6.getGT()) goto loc_820F5188;
	// li r11,-3
	r11.s64 = -3;
	// b 0x820f528c
	goto loc_820F528C;
loc_820F5188:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,25096(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25096);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f51a8
	if (!cr6.getLT()) goto loc_820F51A8;
	// fcmpu cr6,f0,f9
	cr6.compare(f0.f64, ctx.f9.f64);
	// ble cr6,0x820f51a8
	if (!cr6.getGT()) goto loc_820F51A8;
	// li r11,-4
	r11.s64 = -4;
	// b 0x820f528c
	goto loc_820F528C;
loc_820F51A8:
	// fcmpu cr6,f0,f12
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f12.f64);
	// bge cr6,0x820f51c0
	if (!cr6.getLT()) goto loc_820F51C0;
	// fcmpu cr6,f0,f8
	cr6.compare(f0.f64, ctx.f8.f64);
	// ble cr6,0x820f51c0
	if (!cr6.getGT()) goto loc_820F51C0;
	// li r11,-5
	r11.s64 = -5;
	// b 0x820f528c
	goto loc_820F528C;
loc_820F51C0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,25072(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25072);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f51d8
	if (!cr6.getGT()) goto loc_820F51D8;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4048(r31)
	PPC_STORE_U32(r31.u32 + 4048, r11.u32);
loc_820F51D8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,25092(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25092);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f51f0
	if (!cr6.getGT()) goto loc_820F51F0;
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,4048(r31)
	PPC_STORE_U32(r31.u32 + 4048, r11.u32);
loc_820F51F0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,25088(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25088);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f5208
	if (!cr6.getGT()) goto loc_820F5208;
	// li r11,2
	r11.s64 = 2;
	// stw r11,4048(r31)
	PPC_STORE_U32(r31.u32 + 4048, r11.u32);
loc_820F5208:
	// fcmpu cr6,f0,f11
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f11.f64);
	// ble cr6,0x820f5218
	if (!cr6.getGT()) goto loc_820F5218;
	// li r11,3
	r11.s64 = 3;
	// stw r11,4048(r31)
	PPC_STORE_U32(r31.u32 + 4048, r11.u32);
loc_820F5218:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,25084(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25084);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f5230
	if (!cr6.getGT()) goto loc_820F5230;
	// li r11,4
	r11.s64 = 4;
	// stw r11,4048(r31)
	PPC_STORE_U32(r31.u32 + 4048, r11.u32);
loc_820F5230:
	// fcmpu cr6,f0,f10
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f10.f64);
	// ble cr6,0x820f5240
	if (!cr6.getGT()) goto loc_820F5240;
	// li r11,5
	r11.s64 = 5;
	// stw r11,4048(r31)
	PPC_STORE_U32(r31.u32 + 4048, r11.u32);
loc_820F5240:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,25080(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25080);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f5258
	if (!cr6.getGT()) goto loc_820F5258;
	// li r11,6
	r11.s64 = 6;
	// stw r11,4048(r31)
	PPC_STORE_U32(r31.u32 + 4048, r11.u32);
loc_820F5258:
	// fcmpu cr6,f0,f9
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f9.f64);
	// ble cr6,0x820f5268
	if (!cr6.getGT()) goto loc_820F5268;
	// li r11,7
	r11.s64 = 7;
	// stw r11,4048(r31)
	PPC_STORE_U32(r31.u32 + 4048, r11.u32);
loc_820F5268:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,25076(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25076);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f5280
	if (!cr6.getGT()) goto loc_820F5280;
	// li r11,8
	r11.s64 = 8;
	// stw r11,4048(r31)
	PPC_STORE_U32(r31.u32 + 4048, r11.u32);
loc_820F5280:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// ble cr6,0x820f5290
	if (!cr6.getGT()) goto loc_820F5290;
	// li r11,9
	r11.s64 = 9;
loc_820F528C:
	// stw r11,4048(r31)
	PPC_STORE_U32(r31.u32 + 4048, r11.u32);
loc_820F5290:
	// lis r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4208(r21)
	ctx.r3.u64 = PPC_LOAD_U32(r21.u32 + 4208);
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f53d4
	if (cr6.getEQ()) goto loc_820F53D4;
	// lwz r30,4048(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 4048);
	// addi r11,r30,5
	r11.s64 = r30.s64 + 5;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bgt cr6,0x820f5308
	if (cr6.getGT()) goto loc_820F5308;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,21200
	r12.s64 = r12.s64 + 21200;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820F5304;
	case 1:
		goto loc_820F52FC;
	case 2:
		goto loc_820F52F4;
	case 3:
		goto loc_820F52EC;
	case 4:
		goto loc_820F52E4;
	default:
		__builtin_unreachable();
	}
	// lwz r16,21252(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 21252);
	// lwz r16,21244(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 21244);
	// lwz r16,21236(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 21236);
	// lwz r16,21228(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 21228);
	// lwz r16,21220(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 21220);
loc_820F52E4:
	// bl 0x820f4c20
	sub_820F4C20(ctx, base);
	// b 0x820f5308
	goto loc_820F5308;
loc_820F52EC:
	// bl 0x820f4ca8
	sub_820F4CA8(ctx, base);
	// b 0x820f5308
	goto loc_820F5308;
loc_820F52F4:
	// bl 0x820f4de0
	sub_820F4DE0(ctx, base);
	// b 0x820f5308
	goto loc_820F5308;
loc_820F52FC:
	// bl 0x820f4d90
	sub_820F4D90(ctx, base);
	// b 0x820f5308
	goto loc_820F5308;
loc_820F5304:
	// bl 0x820f4d38
	sub_820F4D38(ctx, base);
loc_820F5308:
	// lbz r11,-4062(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + -4062);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f53d4
	if (cr6.getEQ()) goto loc_820F53D4;
	// cmplwi cr6,r30,9
	cr6.compare<uint32_t>(r30.u32, 9, xer);
	// bgt cr6,0x820f53d4
	if (cr6.getGT()) goto loc_820F53D4;
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// beq cr6,0x820f53d4
	if (cr6.getEQ()) goto loc_820F53D4;
	// lwz r11,-4048(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -4048);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f5384
	if (!cr6.getEQ()) goto loc_820F5384;
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r31,-4040
	ctx.r10.s64 = r31.s64 + -4040;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// ldx r4,r11,r10
	ctx.r4.u64 = PPC_LOAD_U64(r11.u32 + ctx.r10.u32);
	// cmpldi cr6,r4,0
	cr6.compare<uint64_t>(ctx.r4.u64, 0, xer);
	// beq cr6,0x820f53d4
	if (cr6.getEQ()) goto loc_820F53D4;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82184780
	sub_82184780(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f537c
	if (cr6.getEQ()) goto loc_820F537C;
	// lwz r11,4048(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4048);
	// addi r9,r31,-4040
	ctx.r9.s64 = r31.s64 + -4040;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// ldx r4,r11,r9
	ctx.r4.u64 = PPC_LOAD_U64(r11.u32 + ctx.r9.u32);
	// b 0x820f53cc
	goto loc_820F53CC;
loc_820F537C:
	// lwz r11,-4048(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -4048);
	// lwz r30,4048(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 4048);
loc_820F5384:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820f53d4
	if (!cr6.getEQ()) goto loc_820F53D4;
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// ldx r4,r11,r31
	ctx.r4.u64 = PPC_LOAD_U64(r11.u32 + r31.u32);
	// cmpldi cr6,r4,0
	cr6.compare<uint64_t>(ctx.r4.u64, 0, xer);
	// beq cr6,0x820f53d4
	if (cr6.getEQ()) goto loc_820F53D4;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82184780
	sub_82184780(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f53d4
	if (cr6.getEQ()) goto loc_820F53D4;
	// lwz r11,4048(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4048);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// ldx r4,r11,r31
	ctx.r4.u64 = PPC_LOAD_U64(r11.u32 + r31.u32);
loc_820F53CC:
	// lwz r3,1368(r22)
	ctx.r3.u64 = PPC_LOAD_U32(r22.u32 + 1368);
	// bl 0x8235d790
	sub_8235D790(ctx, base);
loc_820F53D4:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f5408
	if (cr6.getEQ()) goto loc_820F5408;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r20,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r20.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F5408:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f542c
	if (cr6.getEQ()) goto loc_820F542C;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r20,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r20.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F542C:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f5450
	if (cr6.getEQ()) goto loc_820F5450;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r20,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r20.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F5450:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f5470
	if (cr6.getEQ()) goto loc_820F5470;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r20,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r20.u32);
loc_820F5470:
	// addi r1,r1,992
	ctx.r1.s64 = ctx.r1.s64 + 992;
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_820F5478"))) PPC_WEAK_FUNC(sub_820F5478);
PPC_FUNC_IMPL(__imp__sub_820F5478) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// li r4,4
	ctx.r4.s64 = 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823ed808
	sub_823ED808(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F54C8"))) PPC_WEAK_FUNC(sub_820F54C8);
PPC_FUNC_IMPL(__imp__sub_820F54C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r31,r11,-19132
	r31.s64 = r11.s64 + -19132;
	// lwz r11,-8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -8);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,6580(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,12444(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12444);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r29,r3
	r29.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// li r10,0
	ctx.r10.s64 = 0;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r7,15124(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 15124);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
	// lwz r6,-31556(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -31556);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820F5558"))) PPC_WEAK_FUNC(sub_820F5558);
PPC_FUNC_IMPL(__imp__sub_820F5558) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stfd f30,-96(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -96, f30.u64);
	// stfd f31,-88(r1)
	PPC_STORE_U64(ctx.r1.u32 + -88, f31.u64);
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r24,r4,24
	r24.u64 = ctx.r4.u32 & 0xFF;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r23,r6
	r23.u64 = ctx.r6.u64;
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// addi r25,r11,4232
	r25.s64 = r11.s64 + 4232;
	// beq cr6,0x820f5598
	if (cr6.getEQ()) goto loc_820F5598;
	// li r11,1
	r11.s64 = 1;
	// li r28,255
	r28.s64 = 255;
	// stw r11,4(r25)
	PPC_STORE_U32(r25.u32 + 4, r11.u32);
	// b 0x820f55ac
	goto loc_820F55AC;
loc_820F5598:
	// clrlwi r11,r5,24
	r11.u64 = ctx.r5.u32 & 0xFF;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// andi. r11,r11,143
	r11.u64 = r11.u64 & 143;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r28,r11,112
	r28.s64 = r11.s64 + 112;
loc_820F55AC:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r30,-31991
	r30.s64 = -2096562176;
	// addi r31,r11,-19144
	r31.s64 = r11.s64 + -19144;
	// lwz r11,-16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -16);
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lwz r11,-12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -12);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,14492(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14492);
	f30.f64 = double(temp.f32);
	// blt cr6,0x820f5704
	if (cr6.getLT()) goto loc_820F5704;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r4,4
	ctx.r4.s64 = 4;
	// addi r5,r11,25108
	ctx.r5.s64 = r11.s64 + 25108;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// clrlwi r11,r23,24
	r11.u64 = r23.u32 & 0xFF;
	// lwz r4,-31556(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,152
	ctx.r5.s64 = ctx.r1.s64 + 152;
	// lwz r29,116(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r27,112(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// bne cr6,0x820f5670
	if (!cr6.getEQ()) goto loc_820F5670;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r10,r27
	ctx.r10.s64 = r27.s32;
	// extsw r11,r29
	r11.s64 = r29.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// std r10,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, ctx.r10.u64);
	// std r11,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, r11.u64);
	// lfd f0,136(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// lfd f13,160(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// b 0x820f56e8
	goto loc_820F56E8;
loc_820F5670:
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r29
	r11.s64 = r29.s32;
	// extsw r10,r27
	ctx.r10.s64 = r27.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// std r11,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, r11.u64);
	// std r10,168(r1)
	PPC_STORE_U64(ctx.r1.u32 + 168, ctx.r10.u64);
	// lfd f0,160(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// lfd f13,168(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 168);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
loc_820F56E8:
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r11,r11,15
	r11.s64 = r11.s64 + 15;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
loc_820F5704:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// lis r29,-31994
	r29.s64 = -2096758784;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// beq cr6,0x820f5778
	if (cr6.getEQ()) goto loc_820F5778;
	// clrlwi r11,r23,24
	r11.u64 = r23.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f572c
	if (cr6.getEQ()) goto loc_820F572C;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// b 0x820f5730
	goto loc_820F5730;
loc_820F572C:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
loc_820F5730:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,148
	ctx.r3.s64 = ctx.r1.s64 + 148;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,144(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// li r7,50
	ctx.r7.s64 = 50;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r6,r11,14
	ctx.r6.s64 = r11.s64 + 14;
	// addi r4,r11,-1
	ctx.r4.s64 = r11.s64 + -1;
	// lwz r11,-16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -16);
	// addi r5,r10,3
	ctx.r5.s64 = ctx.r10.s64 + 3;
	// addi r3,r11,-2
	ctx.r3.s64 = r11.s64 + -2;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820F5778:
	// clrlwi r11,r23,24
	r11.u64 = r23.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f5788
	if (cr6.getEQ()) goto loc_820F5788;
	// fmr f31,f30
	ctx.fpscr.disableFlushMode();
	f31.f64 = f30.f64;
loc_820F5788:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lwz r11,-12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -12);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lwz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lis r9,-32010
	ctx.r9.s64 = -2097807360;
	// stw r28,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r28.u32);
	// stw r11,12444(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12444, r11.u32);
	// lwz r10,-16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -16);
	// stw r10,12448(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12448, ctx.r10.u32);
	// lwz r9,-8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + -8);
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// lwz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmpwi cr6,r11,330
	cr6.compare<int32_t>(r11.s32, 330, xer);
	// stw r11,-12(r31)
	PPC_STORE_U32(r31.u32 + -12, r11.u32);
	// stw r9,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r9.u32);
	// lwz r9,0(r25)
	ctx.r9.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// stw r10,-16(r31)
	PPC_STORE_U32(r31.u32 + -16, ctx.r10.u32);
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// ble cr6,0x820f5838
	if (!cr6.getGT()) goto loc_820F5838;
	// lwz r11,-4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -4);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stw r10,-16(r31)
	PPC_STORE_U32(r31.u32 + -16, ctx.r10.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r11,-12(r31)
	PPC_STORE_U32(r31.u32 + -12, r11.u32);
loc_820F5838:
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f30,-96(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -96);
	// lfd f31,-88(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_820F5848"))) PPC_WEAK_FUNC(sub_820F5848);
PPC_FUNC_IMPL(__imp__sub_820F5848) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// clrlwi r11,r5,24
	r11.u64 = ctx.r5.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f588c
	if (cr6.getEQ()) goto loc_820F588C;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-19120
	r11.s64 = r11.s64 + -19120;
	// lwz r10,-8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -8);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// blt cr6,0x820f588c
	if (cr6.getLT()) goto loc_820F588C;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4236(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4236);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f588c
	if (!cr6.getEQ()) goto loc_820F588C;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x820f5558
	sub_820F5558(ctx, base);
	return;
loc_820F588C:
	// li r6,0
	ctx.r6.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x820f5558
	sub_820F5558(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820F5898"))) PPC_WEAK_FUNC(sub_820F5898);
PPC_FUNC_IMPL(__imp__sub_820F5898) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f58e4
	if (!cr6.getEQ()) goto loc_820F58E4;
	// li r3,278
	ctx.r3.s64 = 278;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// lis r11,-32164
	r11.s64 = -2107899904;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// lwz r3,4448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4448);
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,4168(r31)
	PPC_STORE_U32(r31.u32 + 4168, ctx.r3.u32);
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
loc_820F58E4:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x820eb288
	sub_820EB288(ctx, base);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r11,14(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r3,r11,6,0,25
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// bl 0x8209cd50
	sub_8209CD50(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,255
	ctx.r5.s64 = 255;
	// stw r30,12(r11)
	PPC_STORE_U32(r11.u32 + 12, r30.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x8209ab98
	sub_8209AB98(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,255
	ctx.r5.s64 = 255;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x8209ab98
	sub_8209AB98(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F5978"))) PPC_WEAK_FUNC(sub_820F5978);
PPC_FUNC_IMPL(__imp__sub_820F5978) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f19{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed524
	// stwu r1,-752(r1)
	ea = -752 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r3,r1,432
	ctx.r3.s64 = ctx.r1.s64 + 432;
	// bl 0x820eb288
	sub_820EB288(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r22,0
	r22.s64 = 0;
	// li r9,6
	ctx.r9.s64 = 6;
	// mr r10,r22
	ctx.r10.u64 = r22.u64;
	// ld r31,25116(r11)
	r31.u64 = PPC_LOAD_U64(r11.u32 + 25116);
	// addi r11,r1,296
	r11.s64 = ctx.r1.s64 + 296;
	// std r31,288(r1)
	PPC_STORE_U64(ctx.r1.u32 + 288, r31.u64);
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_820F59B4:
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x820f59b4
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820F59B4;
	// li r5,26
	ctx.r5.s64 = 26;
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r12,322
	r12.s64 = 322;
	// stdx r31,r1,r12
	PPC_STORE_U64(ctx.r1.u32 + r12.u32, r31.u64);
	// addi r3,r1,330
	ctx.r3.s64 = ctx.r1.s64 + 330;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// std r31,356(r1)
	PPC_STORE_U64(ctx.r1.u32 + 356, r31.u64);
	// addi r11,r1,364
	r11.s64 = ctx.r1.s64 + 364;
	// mr r10,r22
	ctx.r10.u64 = r22.u64;
	// li r9,6
	ctx.r9.s64 = 6;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_820F59F0:
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x820f59f0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820F59F0;
	// li r5,26
	ctx.r5.s64 = 26;
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r12,390
	r12.s64 = 390;
	// stdx r31,r1,r12
	PPC_STORE_U64(ctx.r1.u32 + r12.u32, r31.u64);
	// addi r3,r1,398
	ctx.r3.s64 = ctx.r1.s64 + 398;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// stb r22,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, r22.u8);
	// stb r22,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, r22.u8);
	// stb r22,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, r22.u8);
	// stb r22,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, r22.u8);
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f5ac4
	if (!cr6.getEQ()) goto loc_820F5AC4;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r31,r22
	r31.u64 = r22.u64;
	// addi r29,r1,288
	r29.s64 = ctx.r1.s64 + 288;
	// addi r30,r11,-19416
	r30.s64 = r11.s64 + -19416;
	// lis r28,-32010
	r28.s64 = -2097807360;
loc_820F5A48:
	// lbz r11,4131(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 4131);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f5ab0
	if (cr6.getEQ()) goto loc_820F5AB0;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// mr r11,r30
	r11.u64 = r30.u64;
loc_820F5A5C:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r10,r31
	cr6.compare<int32_t>(ctx.r10.s32, r31.s32, xer);
	// beq cr6,0x820f5a80
	if (cr6.getEQ()) goto loc_820F5A80;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r10,r30,12
	ctx.r10.s64 = r30.s64 + 12;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// ble cr6,0x820f5a5c
	if (!cr6.getGT()) goto loc_820F5A5C;
	// b 0x820f5ab0
	goto loc_820F5AB0;
loc_820F5A80:
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x820f5ab0
	if (cr6.getEQ()) goto loc_820F5AB0;
	// addi r11,r1,160
	r11.s64 = ctx.r1.s64 + 160;
	// li r10,1
	ctx.r10.s64 = 1;
	// stbx r10,r31,r11
	PPC_STORE_U8(r31.u32 + r11.u32, ctx.r10.u8);
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// bl 0x82183850
	sub_82183850(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,17
	ctx.r4.s64 = 17;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
loc_820F5AB0:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r29,r29,34
	r29.s64 = r29.s64 + 34;
	// cmpwi cr6,r31,3
	cr6.compare<int32_t>(r31.s32, 3, xer);
	// ble cr6,0x820f5a48
	if (!cr6.getGT()) goto loc_820F5A48;
	// b 0x820f5b9c
	goto loc_820F5B9C;
loc_820F5AC4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r22,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, r22.u32);
	// li r6,2
	ctx.r6.s64 = 2;
	// stw r22,244(r1)
	PPC_STORE_U32(ctx.r1.u32 + 244, r22.u32);
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// stw r22,248(r1)
	PPC_STORE_U32(ctx.r1.u32 + 248, r22.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r22,252(r1)
	PPC_STORE_U32(ctx.r1.u32 + 252, r22.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// mr r30,r22
	r30.u64 = r22.u64;
	// stw r11,256(r1)
	PPC_STORE_U32(ctx.r1.u32 + 256, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_820F5AF8:
	// lwz r3,268(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 268);
	// lwz r11,272(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 272);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x820f5b14
	if (cr6.getEQ()) goto loc_820F5B14;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// mr r11,r22
	r11.u64 = r22.u64;
	// bne cr6,0x820f5b18
	if (!cr6.getEQ()) goto loc_820F5B18;
loc_820F5B14:
	// li r11,1
	r11.s64 = 1;
loc_820F5B18:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820f5b90
	if (!cr6.getEQ()) goto loc_820F5B90;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// rlwinm r11,r3,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r1,240
	ctx.r10.s64 = ctx.r1.s64 + 240;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r29,r31,768
	r29.s64 = r31.s64 + 768;
	// stwx r31,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, r31.u32);
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mulli r11,r3,34
	r11.s64 = ctx.r3.s64 * 34;
	// addi r10,r1,288
	ctx.r10.s64 = ctx.r1.s64 + 288;
	// li r3,0
	ctx.r3.s64 = 0;
	// li r5,17
	ctx.r5.s64 = 17;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// li r7,17
	ctx.r7.s64 = 17;
	// bl 0x823eda38
	sub_823EDA38(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r1,160
	ctx.r10.s64 = ctx.r1.s64 + 160;
	// li r9,1
	ctx.r9.s64 = 1;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// stbx r9,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, ctx.r9.u8);
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// cmpwi cr6,r30,4
	cr6.compare<int32_t>(r30.s32, 4, xer);
	// blt cr6,0x820f5af8
	if (cr6.getLT()) goto loc_820F5AF8;
loc_820F5B90:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,14748
	r11.s64 = r11.s64 + 14748;
	// stw r11,256(r1)
	PPC_STORE_U32(ctx.r1.u32 + 256, r11.u32);
loc_820F5B9C:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lfs f26,-14580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14580);
	f26.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f20,12900(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 12900);
	f20.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f21,3060(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 3060);
	f21.f64 = double(temp.f32);
	// lfs f23,2692(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 2692);
	f23.f64 = double(temp.f32);
	// lis r14,-32010
	r14.s64 = -2097807360;
	// lfs f31,2776(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 2776);
	f31.f64 = double(temp.f32);
	// lis r20,-32010
	r20.s64 = -2097807360;
	// lfs f25,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f25.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f22,15412(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 15412);
	f22.f64 = double(temp.f32);
	// fmr f24,f25
	f24.f64 = f25.f64;
	// addi r11,r11,-19476
	r11.s64 = r11.s64 + -19476;
	// lfs f19,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	f19.f64 = double(temp.f32);
	// lis r15,-32141
	r15.s64 = -2106392576;
	// lis r16,-32141
	r16.s64 = -2106392576;
	// lis r17,-32141
	r17.s64 = -2106392576;
	// lis r18,-32141
	r18.s64 = -2106392576;
	// stw r11,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r28,-32141
	r28.s64 = -2106392576;
	// addi r26,r11,-17792
	r26.s64 = r11.s64 + -17792;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r29,-32141
	r29.s64 = -2106392576;
	// addi r11,r11,-1360
	r11.s64 = r11.s64 + -1360;
	// lis r19,-32141
	r19.s64 = -2106392576;
	// lis r30,-32141
	r30.s64 = -2106392576;
	// lis r23,-32141
	r23.s64 = -2106392576;
	// lis r27,-32141
	r27.s64 = -2106392576;
	// stw r11,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r24,-31991
	r24.s64 = -2096562176;
	// stw r11,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stw r11,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stw r11,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r11.u32);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r25,r11,27480
	r25.s64 = r11.s64 + 27480;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stw r11,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stw r11,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stw r11,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stw r11,228(r1)
	PPC_STORE_U32(ctx.r1.u32 + 228, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stw r11,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stw r11,220(r1)
	PPC_STORE_U32(ctx.r1.u32 + 220, r11.u32);
loc_820F5C84:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4224(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4224);
	// cmpw cr6,r22,r11
	cr6.compare<int32_t>(r22.s32, r11.s32, xer);
	// bge cr6,0x820f5f9c
	if (!cr6.getLT()) goto loc_820F5F9C;
	// mulli r11,r22,34
	r11.s64 = r22.s64 * 34;
	// lwz r4,-31544(r24)
	ctx.r4.u64 = PPC_LOAD_U32(r24.u32 + -31544);
	// addi r10,r1,288
	ctx.r10.s64 = ctx.r1.s64 + 288;
	// fmr f1,f19
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f19.f64;
	// addi r7,r1,168
	ctx.r7.s64 = ctx.r1.s64 + 168;
	// addi r6,r1,204
	ctx.r6.s64 = ctx.r1.s64 + 204;
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// add r21,r11,r10
	r21.u64 = r11.u64 + ctx.r10.u64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// cmpwi cr6,r22,2
	cr6.compare<int32_t>(r22.s32, 2, xer);
	// bne cr6,0x820f5ce0
	if (!cr6.getEQ()) goto loc_820F5CE0;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f26,-14580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14580);
	f26.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-14656(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14656);
	f0.f64 = double(temp.f32);
	// fadds f24,f24,f0
	f24.f64 = double(float(f24.f64 + f0.f64));
loc_820F5CE0:
	// lfs f0,-14616(r23)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r23.u32 + -14616);
	f0.f64 = double(temp.f32);
	// lwz r11,4228(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 4228);
	// lfs f13,-14620(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + -14620);
	ctx.f13.f64 = double(temp.f32);
	// fadds f3,f0,f13
	ctx.f3.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f30,-14612(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -14612);
	f30.f64 = double(temp.f32);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// fsubs f29,f3,f30
	f29.f64 = double(float(ctx.f3.f64 - f30.f64));
	// beq cr6,0x820f5d30
	if (cr6.getEQ()) goto loc_820F5D30;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x820f5d30
	if (cr6.getEQ()) goto loc_820F5D30;
	// addi r11,r1,160
	r11.s64 = ctx.r1.s64 + 160;
	// lbzx r31,r22,r11
	r31.u64 = PPC_LOAD_U8(r22.u32 + r11.u32);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820f5d24
	if (cr6.getEQ()) goto loc_820F5D24;
	// lwz r11,172(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// lwz r7,-14636(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + -14636);
	// b 0x820f5d8c
	goto loc_820F5D8C;
loc_820F5D24:
	// lwz r11,212(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	// lwz r7,-14632(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + -14632);
	// b 0x820f5d8c
	goto loc_820F5D8C;
loc_820F5D30:
	// lwz r10,180(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// mulli r11,r22,112
	r11.s64 = r22.s64 * 112;
	// addi r10,r10,105
	ctx.r10.s64 = ctx.r10.s64 + 105;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// addi r11,r1,160
	r11.s64 = ctx.r1.s64 + 160;
	// lbzx r31,r22,r11
	r31.u64 = PPC_LOAD_U8(r22.u32 + r11.u32);
	// beq cr6,0x820f5d70
	if (cr6.getEQ()) goto loc_820F5D70;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820f5d64
	if (cr6.getEQ()) goto loc_820F5D64;
	// lwz r11,220(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 220);
	// lwz r7,-14652(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + -14652);
	// b 0x820f5d8c
	goto loc_820F5D8C;
loc_820F5D64:
	// lwz r11,188(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// lwz r7,-14648(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + -14648);
	// b 0x820f5d8c
	goto loc_820F5D8C;
loc_820F5D70:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820f5d84
	if (cr6.getEQ()) goto loc_820F5D84;
	// lwz r11,228(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// lwz r7,-14644(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + -14644);
	// b 0x820f5d8c
	goto loc_820F5D8C;
loc_820F5D84:
	// lwz r11,196(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// lwz r7,-14640(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + -14640);
loc_820F5D8C:
	// lfs f0,-14604(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -14604);
	f0.f64 = double(temp.f32);
	// addi r8,r1,432
	ctx.r8.s64 = ctx.r1.s64 + 432;
	// fadds f2,f24,f0
	ctx.f2.f64 = double(float(f24.f64 + f0.f64));
	// lfs f0,-14600(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -14600);
	f0.f64 = double(temp.f32);
	// lfs f4,-14608(r19)
	temp.u32 = PPC_LOAD_U32(r19.u32 + -14608);
	ctx.f4.f64 = double(temp.f32);
	// fadds f1,f26,f0
	ctx.f1.f64 = double(float(f26.f64 + f0.f64));
	// bl 0x820eb358
	sub_820EB358(ctx, base);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820f5e64
	if (cr6.getEQ()) goto loc_820F5E64;
	// lwz r10,224(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	// rlwinm r11,r22,2,0,29
	r11.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x820f5dc8
	if (!cr6.getLT()) goto loc_820F5DC8;
	// mr r11,r22
	r11.u64 = r22.u64;
loc_820F5DC8:
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// fadds f13,f30,f24
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f30.f64 + f24.f64));
	// addi r9,r26,3
	ctx.r9.s64 = r26.s64 + 3;
	// fadds f12,f29,f26
	ctx.f12.f64 = double(float(f29.f64 + f26.f64));
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lfs f0,-14612(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -14612);
	f0.f64 = double(temp.f32);
	// fneg f28,f0
	f28.u64 = f0.u64 ^ 0x8000000000000000;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// fmuls f27,f0,f22
	f27.f64 = double(float(f0.f64 * f22.f64));
	// lfs f0,-14604(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -14604);
	f0.f64 = double(temp.f32);
	// lbzx r11,r11,r9
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r9.u32);
	// fadds f30,f13,f0
	f30.f64 = double(float(ctx.f13.f64 + f0.f64));
	// lfs f0,-14600(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -14600);
	f0.f64 = double(temp.f32);
	// rotlwi r11,r11,4
	r11.u64 = __builtin_rotateleft32(r11.u32, 4);
	// fadds f29,f12,f0
	f29.f64 = double(float(ctx.f12.f64 + f0.f64));
	// add r3,r11,r25
	ctx.r3.u64 = r11.u64 + r25.u64;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// li r10,2
	ctx.r10.s64 = 2;
	// addi r11,r1,432
	r11.s64 = ctx.r1.s64 + 432;
	// fmr f12,f31
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = f31.f64;
	// li r31,0
	r31.s64 = 0;
	// fmr f11,f31
	ctx.f11.f64 = f31.f64;
	// fmr f10,f25
	ctx.f10.f64 = f25.f64;
	// fmr f9,f25
	ctx.f9.f64 = f25.f64;
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// fadds f8,f30,f28
	ctx.f8.f64 = double(float(f30.f64 + f28.f64));
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// fadds f7,f29,f27
	ctx.f7.f64 = double(float(f29.f64 + f27.f64));
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r31.u32);
	// fmr f6,f30
	ctx.f6.f64 = f30.f64;
	// fmr f5,f29
	ctx.f5.f64 = f29.f64;
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// fmr f4,f31
	ctx.f4.f64 = f31.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x820982e0
	sub_820982E0(ctx, base);
	// b 0x820f5e68
	goto loc_820F5E68;
loc_820F5E64:
	// li r31,0
	r31.s64 = 0;
loc_820F5E68:
	// lwz r11,204(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// lfs f0,-14592(r17)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r17.u32 + -14592);
	f0.f64 = double(temp.f32);
	// fdivs f13,f31,f0
	ctx.f13.f64 = double(float(f31.f64 / f0.f64));
	// lfs f12,-14620(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + -14620);
	ctx.f12.f64 = double(temp.f32);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,280(r1)
	PPC_STORE_U64(ctx.r1.u32 + 280, r11.u64);
	// fmuls f11,f13,f26
	ctx.f11.f64 = double(float(ctx.f13.f64 * f26.f64));
	// lfd f0,280(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 280);
	// fcfid f10,f0
	ctx.f10.f64 = double(f0.s64);
	// lfs f0,-14588(r16)
	temp.u32 = PPC_LOAD_U32(r16.u32 + -14588);
	f0.f64 = double(temp.f32);
	// fnmsubs f29,f13,f24,f0
	f29.f64 = double(float(-(ctx.f13.f64 * f24.f64 - f0.f64)));
	// frsp f0,f10
	f0.f64 = double(float(ctx.f10.f64));
	// fmsubs f12,f13,f12,f0
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 - f0.f64));
	// lfs f13,-14584(r15)
	temp.u32 = PPC_LOAD_U32(r15.u32 + -14584);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// fmadds f11,f12,f23,f11
	ctx.f11.f64 = double(float(ctx.f12.f64 * f23.f64 + ctx.f11.f64));
	// lfs f12,-14596(r18)
	temp.u32 = PPC_LOAD_U32(r18.u32 + -14596);
	ctx.f12.f64 = double(temp.f32);
	// fadds f30,f11,f12
	f30.f64 = double(float(ctx.f11.f64 + ctx.f12.f64));
	// ble cr6,0x820f5ebc
	if (!cr6.getGT()) goto loc_820F5EBC;
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fnmsubs f30,f13,f23,f30
	f30.f64 = double(float(-(ctx.f13.f64 * f23.f64 - f30.f64)));
loc_820F5EBC:
	// lwz r11,164(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r11,-19608(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19608);
	// cmpw cr6,r11,r22
	cr6.compare<int32_t>(r11.s32, r22.s32, xer);
	// bne cr6,0x820f5f30
	if (!cr6.getEQ()) goto loc_820F5F30;
	// lwz r10,176(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// fmr f4,f20
	ctx.fpscr.disableFlushMode();
	ctx.f4.f64 = f20.f64;
	// lwz r11,168(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// fmr f3,f25
	ctx.f3.f64 = f25.f64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// fmr f2,f25
	ctx.f2.f64 = f25.f64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// fmr f1,f25
	ctx.f1.f64 = f25.f64;
	// lfs f13,-14628(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -14628);
	ctx.f13.f64 = double(temp.f32);
	// lwz r10,184(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// fmuls f12,f13,f21
	ctx.f12.f64 = double(float(ctx.f13.f64 * f21.f64));
	// fsubs f5,f30,f13
	ctx.f5.f64 = double(float(f30.f64 - ctx.f13.f64));
	// std r11,240(r1)
	PPC_STORE_U64(ctx.r1.u32 + 240, r11.u64);
	// lfs f11,-14624(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -14624);
	ctx.f11.f64 = double(temp.f32);
	// fadds f11,f29,f11
	ctx.f11.f64 = double(float(f29.f64 + ctx.f11.f64));
	// fadds f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 + f0.f64));
	// fsubs f6,f11,f13
	ctx.f6.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// lfd f13,240(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 240);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// fadds f7,f0,f5
	ctx.f7.f64 = double(float(f0.f64 + ctx.f5.f64));
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// fadds f0,f0,f12
	f0.f64 = double(float(f0.f64 + ctx.f12.f64));
	// fadds f8,f0,f6
	ctx.f8.f64 = double(float(f0.f64 + ctx.f6.f64));
	// bl 0x82096ba8
	sub_82096BA8(ctx, base);
loc_820F5F30:
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// lwz r4,-31544(r24)
	ctx.r4.u64 = PPC_LOAD_U32(r24.u32 + -31544);
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// bl 0x8209baa8
	sub_8209BAA8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// fmr f2,f29
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f29.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lfs f0,12460(r20)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r20.u32 + 12460);
	f0.f64 = double(temp.f32);
	// fadds f13,f26,f0
	ctx.f13.f64 = double(float(f26.f64 + f0.f64));
	// lfs f0,-14616(r23)
	temp.u32 = PPC_LOAD_U32(r23.u32 + -14616);
	f0.f64 = double(temp.f32);
	// fadds f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 + f0.f64));
	// lfs f0,-14620(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + -14620);
	f0.f64 = double(temp.f32);
	// fadds f26,f13,f0
	f26.f64 = double(float(ctx.f13.f64 + f0.f64));
loc_820F5F9C:
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// cmpwi cr6,r22,3
	cr6.compare<int32_t>(r22.s32, 3, xer);
	// ble cr6,0x820f5c84
	if (!cr6.getGT()) goto loc_820F5C84;
	// addi r1,r1,752
	ctx.r1.s64 = ctx.r1.s64 + 752;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed570
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_820F5FB8"))) PPC_WEAK_FUNC(sub_820F5FB8);
PPC_FUNC_IMPL(__imp__sub_820F5FB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stfd f31,-96(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -96, f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r22,55
	r22.s64 = 55;
	// li r29,0
	r29.s64 = 0;
	// lis r24,-31991
	r24.s64 = -2096562176;
	// lwz r3,-19592(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -19592);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r25,-31994
	r25.s64 = -2096758784;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lfs f31,6580(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// blt cr6,0x820f606c
	if (cr6.getLT()) goto loc_820F606C;
	// bl 0x820eb050
	sub_820EB050(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39968
	ctx.r3.u64 = ctx.r3.u64 | 39968;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// li r11,87
	r11.s64 = 87;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r30,r3
	r30.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r25)
	ctx.r7.u64 = PPC_LOAD_U32(r25.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r24)
	ctx.r6.u64 = PPC_LOAD_U32(r24.u32 + -31556);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
loc_820F606C:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r23,-32141
	r23.s64 = -2106392576;
	// addi r30,r11,-19088
	r30.s64 = r11.s64 + -19088;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r27,r11,15972
	r27.s64 = r11.s64 + 15972;
	// lwz r28,-19596(r23)
	r28.u64 = PPC_LOAD_U32(r23.u32 + -19596);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// addi r26,r11,25124
	r26.s64 = r11.s64 + 25124;
	// blt cr6,0x820f617c
	if (cr6.getLT()) goto loc_820F617C;
	// mulli r11,r28,28
	r11.s64 = r28.s64 * 28;
	// addi r10,r30,16
	ctx.r10.s64 = r30.s64 + 16;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
loc_820F60A0:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820f60c0
	if (!cr6.getEQ()) goto loc_820F60C0;
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// addi r11,r11,-28
	r11.s64 = r11.s64 + -28;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bge cr6,0x820f60a0
	if (!cr6.getLT()) goto loc_820F60A0;
	// b 0x820f617c
	goto loc_820F617C;
loc_820F60C0:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// blt cr6,0x820f617c
	if (cr6.getLT()) goto loc_820F617C;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39969
	ctx.r3.u64 = ctx.r3.u64 | 39969;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// mulli r28,r28,28
	r28.s64 = r28.s64 * 28;
	// lwzx r5,r28,r30
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + r30.u32);
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// lhzx r3,r28,r11
	ctx.r3.u64 = PPC_LOAD_U16(r28.u32 + r11.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// li r11,103
	r11.s64 = 103;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r25)
	ctx.r7.u64 = PPC_LOAD_U32(r25.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r24)
	ctx.r6.u64 = PPC_LOAD_U32(r24.u32 + -31556);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
loc_820F617C:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39970
	ctx.r3.u64 = ctx.r3.u64 | 39970;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// lwz r11,-19596(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -19596);
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// lwzx r5,r11,r30
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// lwz r11,-19596(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -19596);
	// addi r10,r30,4
	ctx.r10.s64 = r30.s64 + 4;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// lhzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// li r11,119
	r11.s64 = 119;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r30,r3
	r30.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r25)
	ctx.r7.u64 = PPC_LOAD_U32(r25.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r24)
	ctx.r6.u64 = PPC_LOAD_U32(r24.u32 + -31556);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-96(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -96);
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_820F6248"))) PPC_WEAK_FUNC(sub_820F6248);
PPC_FUNC_IMPL(__imp__sub_820F6248) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r10,4228(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4228);
	// cmpwi cr6,r10,6
	cr6.compare<int32_t>(ctx.r10.s32, 6, xer);
	// bne cr6,0x820f6274
	if (!cr6.getEQ()) goto loc_820F6274;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r11,r11,-1360
	r11.s64 = r11.s64 + -1360;
	// lbz r11,441(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 441);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x820f6274
	if (!cr6.getEQ()) goto loc_820F6274;
	// li r3,4
	ctx.r3.s64 = 4;
	// blr 
	return;
loc_820F6274:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-19116
	r11.s64 = r11.s64 + -19116;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// lbzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F6290"))) PPC_WEAK_FUNC(sub_820F6290);
PPC_FUNC_IMPL(__imp__sub_820F6290) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19604(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19604);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820f62ac
	if (!cr6.getEQ()) goto loc_820F62AC;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r3,4220(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4220);
	// blr 
	return;
loc_820F62AC:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F62B8"))) PPC_WEAK_FUNC(sub_820F62B8);
PPC_FUNC_IMPL(__imp__sub_820F62B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -160, f31.u64);
	// stwu r1,-384(r1)
	ea = -384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r31,0
	r31.s64 = 0;
	// lis r17,-32010
	r17.s64 = -2097807360;
	// mr r14,r31
	r14.u64 = r31.u64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// addi r21,r11,25132
	r21.s64 = r11.s64 + 25132;
	// lwz r11,3912(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 3912);
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// stw r14,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r14.u32);
	// lfs f31,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	f31.f64 = double(temp.f32);
	// mr r18,r5
	r18.u64 = ctx.r5.u64;
	// mr r22,r31
	r22.u64 = r31.u64;
	// mr r25,r31
	r25.u64 = r31.u64;
	// li r15,8
	r15.s64 = 8;
	// lis r29,-31991
	r29.s64 = -2096562176;
	// lis r28,-31994
	r28.s64 = -2096758784;
	// li r19,55
	r19.s64 = 55;
	// li r20,75
	r20.s64 = 75;
	// li r16,310
	r16.s64 = 310;
loc_820F6318:
	// lhzx r3,r15,r11
	ctx.r3.u64 = PPC_LOAD_U16(r15.u32 + r11.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f665c
	if (cr6.getEQ()) goto loc_820F665C;
	// add r10,r15,r11
	ctx.r10.u64 = r15.u64 + r11.u64;
	// lhz r9,2(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lwz r10,-19592(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -19592);
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// bgt cr6,0x820f665c
	if (cr6.getGT()) goto loc_820F665C;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// lhz r11,0(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 0);
	// li r8,0
	ctx.r8.s64 = 0;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// add r11,r11,r22
	r11.u64 = r11.u64 + r22.u64;
	// stw r31,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r31.u32);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r31.u32);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// sth r11,0(r30)
	PPC_STORE_U16(r30.u32 + 0, r11.u16);
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// lwz r6,-31556(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31556);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r19,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r19.u32);
	// mullw r11,r11,r25
	r11.s64 = int64_t(r11.s32) * int64_t(r25.s32);
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31556);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r20,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r20.u32);
	// mullw r11,r11,r25
	r11.s64 = int64_t(r11.s32) * int64_t(r25.s32);
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// lwz r4,-31556(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + -31556);
	// cmpwi cr6,r18,0
	cr6.compare<int32_t>(r18.s32, 0, xer);
	// lwz r27,116(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r7,r1,124
	ctx.r7.s64 = ctx.r1.s64 + 124;
	// lwz r26,112(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r6,r1,132
	ctx.r6.s64 = ctx.r1.s64 + 132;
	// stw r31,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r31.u32);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// beq cr6,0x820f64dc
	if (cr6.getEQ()) goto loc_820F64DC;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// extsw r11,r27
	r11.s64 = r27.s32;
	// extsw r10,r26
	ctx.r10.s64 = r26.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// std r11,168(r1)
	PPC_STORE_U64(ctx.r1.u32 + 168, r11.u64);
	// std r10,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.r10.u64);
	// lfd f0,168(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 168);
	// lfd f13,176(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,148
	ctx.r3.s64 = ctx.r1.s64 + 148;
	// addi r11,r11,221
	r11.s64 = r11.s64 + 221;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,184(r1)
	PPC_STORE_U64(ctx.r1.u32 + 184, r11.u64);
	// lfd f0,184(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 184);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209bc18
	sub_8209BC18(ctx, base);
	// addi r3,r1,148
	ctx.r3.s64 = ctx.r1.s64 + 148;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// li r9,220
	ctx.r9.s64 = 220;
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31556);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// b 0x820f658c
	goto loc_820F658C;
loc_820F64DC:
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// extsw r11,r27
	r11.s64 = r27.s32;
	// extsw r10,r26
	ctx.r10.s64 = r26.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// std r10,200(r1)
	PPC_STORE_U64(ctx.r1.u32 + 200, ctx.r10.u64);
	// lfd f0,192(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// lfd f13,200(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 200);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// addi r3,r1,156
	ctx.r3.s64 = ctx.r1.s64 + 156;
	// addi r11,r11,321
	r11.s64 = r11.s64 + 321;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,208(r1)
	PPC_STORE_U64(ctx.r1.u32 + 208, r11.u64);
	// lfd f0,208(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 208);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209bc18
	sub_8209BC18(ctx, base);
	// addi r3,r1,156
	ctx.r3.s64 = ctx.r1.s64 + 156;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// li r9,320
	ctx.r9.s64 = 320;
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31556);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
loc_820F658C:
	// lwz r9,120(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// li r23,1
	r23.s64 = 1;
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// twllei r9,0
	// divw r11,r10,r9
	r11.s32 = ctx.r10.s32 / ctx.r9.s32;
	// rotlwi r10,r10,1
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// andc r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 & ~ctx.r10.u64;
	// twlgei r10,-1
	// blt cr6,0x820f65bc
	if (cr6.getLT()) goto loc_820F65BC;
	// mr r23,r11
	r23.u64 = r11.u64;
loc_820F65BC:
	// cmpwi cr6,r18,0
	cr6.compare<int32_t>(r18.s32, 0, xer);
	// beq cr6,0x820f6650
	if (cr6.getEQ()) goto loc_820F6650;
	// mr r3,r14
	ctx.r3.u64 = r14.u64;
	// bl 0x820cc0d0
	sub_820CC0D0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// lis r3,0
	ctx.r3.s64 = 0;
	// beq cr6,0x820f65ec
	if (cr6.getEQ()) goto loc_820F65EC;
	// ori r3,r3,40028
	ctx.r3.u64 = ctx.r3.u64 | 40028;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r26,30720
	r26.s64 = 2013265920;
	// ori r26,r26,255
	r26.u64 = r26.u64 | 255;
	// b 0x820f65f8
	goto loc_820F65F8;
loc_820F65EC:
	// ori r3,r3,40027
	ctx.r3.u64 = ctx.r3.u64 | 40027;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r26,255
	r26.s64 = 255;
loc_820F65F8:
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// stw r16,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r16.u32);
	// mullw r11,r11,r25
	r11.s64 = int64_t(r11.s32) * int64_t(r25.s32);
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r14,r3
	r14.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// lwz r6,-31556(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31556);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r14
	ctx.r10.u64 = r14.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lwz r14,140(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
loc_820F6650:
	// lwz r11,3912(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 3912);
	// add r25,r23,r25
	r25.u64 = r23.u64 + r25.u64;
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
loc_820F665C:
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addi r15,r15,4
	r15.s64 = r15.s64 + 4;
	// cmpwi cr6,r15,48
	cr6.compare<int32_t>(r15.s32, 48, xer);
	// stw r14,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r14.u32);
	// blt cr6,0x820f6318
	if (cr6.getLT()) goto loc_820F6318;
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_820F6680"))) PPC_WEAK_FUNC(sub_820F6680);
PPC_FUNC_IMPL(__imp__sub_820F6680) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// cmplwi cr6,r3,6
	cr6.compare<uint32_t>(ctx.r3.u32, 6, xer);
	// lis r28,-32141
	r28.s64 = -2106392576;
	// lbz r11,4240(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 4240);
	// lwz r27,4228(r30)
	r27.u64 = PPC_LOAD_U32(r30.u32 + 4228);
	// cntlzw r10,r11
	ctx.r10.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// stw r3,4228(r30)
	PPC_STORE_U32(r30.u32 + 4228, ctx.r3.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r31,r11,-16860
	r31.s64 = r11.s64 + -16860;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-24(r31)
	PPC_STORE_U32(r31.u32 + -24, r11.u32);
	// stw r11,-20(r31)
	PPC_STORE_U32(r31.u32 + -20, r11.u32);
	// stw r11,-16(r31)
	PPC_STORE_U32(r31.u32 + -16, r11.u32);
	// stw r11,-12(r31)
	PPC_STORE_U32(r31.u32 + -12, r11.u32);
	// stw r11,-8(r31)
	PPC_STORE_U32(r31.u32 + -8, r11.u32);
	// stw r11,-4(r31)
	PPC_STORE_U32(r31.u32 + -4, r11.u32);
	// rlwinm r11,r10,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bgt cr6,0x820f6804
	if (cr6.getGT()) goto loc_820F6804;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,26356
	r12.s64 = r12.s64 + 26356;
	// rlwinm r0,r3,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_820F6710;
	case 1:
		goto loc_820F6740;
	case 2:
		goto loc_820F676C;
	case 3:
		goto loc_820F679C;
	case 4:
		goto loc_820F67DC;
	case 5:
		goto loc_820F6710;
	case 6:
		goto loc_820F6710;
	default:
		__builtin_unreachable();
	}
	// lwz r16,26384(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 26384);
	// lwz r16,26432(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 26432);
	// lwz r16,26476(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 26476);
	// lwz r16,26524(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 26524);
	// lwz r16,26588(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 26588);
	// lwz r16,26384(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 26384);
	// lwz r16,26384(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 26384);
loc_820F6710:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r10,-19424(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -19424);
	// cmpwi cr6,r10,7
	cr6.compare<int32_t>(ctx.r10.s32, 7, xer);
	// blt cr6,0x820f6728
	if (cr6.getLT()) goto loc_820F6728;
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r10,-19424(r11)
	PPC_STORE_U32(r11.u32 + -19424, ctx.r10.u32);
loc_820F6728:
	// bl 0x820c9ab0
	sub_820C9AB0(ctx, base);
	// cmpwi cr6,r3,16
	cr6.compare<int32_t>(ctx.r3.s32, 16, xer);
	// blt cr6,0x820f6804
	if (cr6.getLT()) goto loc_820F6804;
	// li r3,15
	ctx.r3.s64 = 15;
	// bl 0x820c9aa0
	sub_820C9AA0(ctx, base);
	// b 0x820f6804
	goto loc_820F6804;
loc_820F6740:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,7
	r11.s64 = 7;
	// stw r11,-19424(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19424, r11.u32);
	// bl 0x820c9ab0
	sub_820C9AB0(ctx, base);
	// cmpwi cr6,r3,16
	cr6.compare<int32_t>(ctx.r3.s32, 16, xer);
	// blt cr6,0x820f6760
	if (cr6.getLT()) goto loc_820F6760;
	// li r3,15
	ctx.r3.s64 = 15;
	// bl 0x820c9aa0
	sub_820C9AA0(ctx, base);
loc_820F6760:
	// li r11,0
	r11.s64 = 0;
	// stw r11,-20(r31)
	PPC_STORE_U32(r31.u32 + -20, r11.u32);
	// b 0x820f6804
	goto loc_820F6804;
loc_820F676C:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r10,-19424(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -19424);
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// blt cr6,0x820f6784
	if (cr6.getLT()) goto loc_820F6784;
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r10,-19424(r11)
	PPC_STORE_U32(r11.u32 + -19424, ctx.r10.u32);
loc_820F6784:
	// bl 0x820c9ab0
	sub_820C9AB0(ctx, base);
	// cmpwi cr6,r3,16
	cr6.compare<int32_t>(ctx.r3.s32, 16, xer);
	// blt cr6,0x820f6804
	if (cr6.getLT()) goto loc_820F6804;
	// li r3,15
	ctx.r3.s64 = 15;
	// bl 0x820c9aa0
	sub_820C9AA0(ctx, base);
	// b 0x820f6804
	goto loc_820F6804;
loc_820F679C:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r10,-19424(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -19424);
	// cmpwi cr6,r10,7
	cr6.compare<int32_t>(ctx.r10.s32, 7, xer);
	// blt cr6,0x820f67b4
	if (cr6.getLT()) goto loc_820F67B4;
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r10,-19424(r11)
	PPC_STORE_U32(r11.u32 + -19424, ctx.r10.u32);
loc_820F67B4:
	// li r3,14
	ctx.r3.s64 = 14;
	// bl 0x820c9aa0
	sub_820C9AA0(ctx, base);
	// lbz r11,-19523(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + -19523);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// andi. r11,r11,253
	r11.u64 = r11.u64 & 253;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stb r11,-19523(r28)
	PPC_STORE_U8(r28.u32 + -19523, r11.u8);
	// li r11,0
	r11.s64 = 0;
	// stb r11,-19521(r10)
	PPC_STORE_U8(ctx.r10.u32 + -19521, r11.u8);
	// stw r11,-12(r31)
	PPC_STORE_U32(r31.u32 + -12, r11.u32);
	// b 0x820f6804
	goto loc_820F6804;
loc_820F67DC:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r10,-19424(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -19424);
	// cmpwi cr6,r10,7
	cr6.compare<int32_t>(ctx.r10.s32, 7, xer);
	// blt cr6,0x820f67f4
	if (cr6.getLT()) goto loc_820F67F4;
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r10,-19424(r11)
	PPC_STORE_U32(r11.u32 + -19424, ctx.r10.u32);
loc_820F67F4:
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820c9aa0
	sub_820C9AA0(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-8(r31)
	PPC_STORE_U32(r31.u32 + -8, r11.u32);
loc_820F6804:
	// lwz r11,4228(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4228);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x820f6840
	if (cr6.getEQ()) goto loc_820F6840;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820f682c
	if (!cr6.getEQ()) goto loc_820F682C;
	// lbz r11,4240(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 4240);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x820f6830
	if (!cr6.getEQ()) goto loc_820F6830;
loc_820F682C:
	// li r11,0
	r11.s64 = 0;
loc_820F6830:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x820f6844
	if (cr6.getEQ()) goto loc_820F6844;
loc_820F6840:
	// li r11,0
	r11.s64 = 0;
loc_820F6844:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lbz r11,-19523(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + -19523);
	// beq cr6,0x820f685c
	if (cr6.getEQ()) goto loc_820F685C;
	// ori r11,r11,16
	r11.u64 = r11.u64 | 16;
	// b 0x820f6860
	goto loc_820F6860;
loc_820F685C:
	// andi. r11,r11,239
	r11.u64 = r11.u64 & 239;
	cr0.compare<int32_t>(r11.s32, 0, xer);
loc_820F6860:
	// stb r11,-19523(r28)
	PPC_STORE_U8(r28.u32 + -19523, r11.u8);
	// lwz r11,4228(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4228);
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x820f68c8
	if (cr6.getEQ()) goto loc_820F68C8;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// rlwinm r10,r27,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-19116
	r11.s64 = r11.s64 + -19116;
	// lis r8,-32010
	ctx.r8.s64 = -2097807360;
	// addi r9,r11,3
	ctx.r9.s64 = r11.s64 + 3;
	// addi r11,r11,3
	r11.s64 = r11.s64 + 3;
	// lbzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// lwz r9,4224(r8)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4224);
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// lwz r10,4228(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 4228);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r11,r10,r11
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// beq cr6,0x820f68ac
	if (cr6.getEQ()) goto loc_820F68AC;
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// ble cr6,0x820f68b8
	if (!cr6.getGT()) goto loc_820F68B8;
loc_820F68AC:
	// stw r11,4224(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4224, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820F68B8:
	// bl 0x820f6248
	sub_820F6248(ctx, base);
	// cmpw cr6,r9,r3
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r3.s32, xer);
	// bge cr6,0x820f68c8
	if (!cr6.getLT()) goto loc_820F68C8;
	// stw r3,4224(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4224, ctx.r3.u32);
loc_820F68C8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820F68D0"))) PPC_WEAK_FUNC(sub_820F68D0);
PPC_FUNC_IMPL(__imp__sub_820F68D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r9,3984(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3984);
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// cmpwi cr6,r11,240
	cr6.compare<int32_t>(r11.s32, 240, xer);
	// stw r11,3984(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3984, r11.u32);
	// ble cr6,0x820f693c
	if (!cr6.getGT()) goto loc_820F693C;
	// bl 0x8209fe50
	sub_8209FE50(ctx, base);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bge cr6,0x820f69b4
	if (!cr6.getLT()) goto loc_820F69B4;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19548(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19548);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f69b4
	if (cr6.getEQ()) goto loc_820F69B4;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// li r11,23
	r11.s64 = 23;
	// b 0x820f69d0
	goto loc_820F69D0;
loc_820F693C:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,65535
	ctx.r4.u64 = ctx.r4.u64 | 65535;
	// lwz r3,4208(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f69d8
	if (cr6.getEQ()) goto loc_820F69D8;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19548(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19548);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f69d8
	if (!cr6.getEQ()) goto loc_820F69D8;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19544(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19544);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f69b4
	if (!cr6.getEQ()) goto loc_820F69B4;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,7
	r11.s64 = 7;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
	// bl 0x820ee118
	sub_820EE118(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820F69B4:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// li r11,2
	r11.s64 = 2;
loc_820F69D0:
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
loc_820F69D8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F69E8"))) PPC_WEAK_FUNC(sub_820F69E8);
PPC_FUNC_IMPL(__imp__sub_820F69E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r9,3984(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3984);
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// cmpwi cr6,r11,500
	cr6.compare<int32_t>(r11.s32, 500, xer);
	// stw r11,3984(r10)
	PPC_STORE_U32(ctx.r10.u32 + 3984, r11.u32);
	// bgt cr6,0x820f6a84
	if (cr6.getGT()) goto loc_820F6A84;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,65535
	ctx.r4.u64 = ctx.r4.u64 | 65535;
	// lwz r3,4208(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f6aa8
	if (cr6.getEQ()) goto loc_820F6AA8;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19544(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19544);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x820f6a7c
	if (!cr6.getEQ()) goto loc_820F6A7C;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,7
	r11.s64 = 7;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
	// bl 0x820ee118
	sub_820EE118(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820F6A7C:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4132(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4132, r11.u32);
loc_820F6A84:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,3
	r11.s64 = 3;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
loc_820F6AA8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F6AB8"))) PPC_WEAK_FUNC(sub_820F6AB8);
PPC_FUNC_IMPL(__imp__sub_820F6AB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8210e300
	sub_8210E300(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-6384(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r9,3984(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 3984);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r10,3984(r11)
	PPC_STORE_U32(r11.u32 + 3984, ctx.r10.u32);
	// bl 0x82109fa0
	sub_82109FA0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f6b60
	if (!cr6.getEQ()) goto loc_820F6B60;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,65535
	ctx.r4.u64 = ctx.r4.u64 | 65535;
	// lwz r3,4208(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f6b84
	if (cr6.getEQ()) goto loc_820F6B84;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19544(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19544);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x820f6b58
	if (!cr6.getEQ()) goto loc_820F6B58;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,7
	r11.s64 = 7;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
	// bl 0x820ee118
	sub_820EE118(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820F6B58:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4132(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4132, r11.u32);
loc_820F6B60:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,4
	r11.s64 = 4;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
loc_820F6B84:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F6B98"))) PPC_WEAK_FUNC(sub_820F6B98);
PPC_FUNC_IMPL(__imp__sub_820F6B98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8210e300
	sub_8210E300(ctx, base);
	// bl 0x8210a848
	sub_8210A848(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f6c28
	if (!cr6.getEQ()) goto loc_820F6C28;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,65535
	ctx.r4.u64 = ctx.r4.u64 | 65535;
	// lwz r3,4208(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f6c4c
	if (cr6.getEQ()) goto loc_820F6C4C;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19544(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19544);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x820f6c20
	if (!cr6.getEQ()) goto loc_820F6C20;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,7
	r11.s64 = 7;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
	// bl 0x820ee118
	sub_820EE118(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820F6C20:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4132(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4132, r11.u32);
loc_820F6C28:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,5
	r11.s64 = 5;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
loc_820F6C4C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F6C60"))) PPC_WEAK_FUNC(sub_820F6C60);
PPC_FUNC_IMPL(__imp__sub_820F6C60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r31,-32141
	r31.s64 = -2106392576;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// lwz r10,-6384(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r9,3984(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 3984);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r10,3984(r11)
	PPC_STORE_U32(r11.u32 + 3984, ctx.r10.u32);
	// lwz r11,-19544(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19544);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f6ce4
	if (cr6.getEQ()) goto loc_820F6CE4;
	// cmpwi cr6,r10,180
	cr6.compare<int32_t>(ctx.r10.s32, 180, xer);
	// bgt cr6,0x820f6cec
	if (cr6.getGT()) goto loc_820F6CEC;
	// lwz r11,4136(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4136);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f6cbc
	if (cr6.getEQ()) goto loc_820F6CBC;
	// cmpwi cr6,r10,90
	cr6.compare<int32_t>(ctx.r10.s32, 90, xer);
	// bgt cr6,0x820f6ce4
	if (cr6.getGT()) goto loc_820F6CE4;
loc_820F6CBC:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,65535
	ctx.r4.u64 = ctx.r4.u64 | 65535;
	// lwz r3,4208(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f6d94
	if (cr6.getEQ()) goto loc_820F6D94;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4136(r30)
	PPC_STORE_U32(r30.u32 + 4136, r11.u32);
	// b 0x820f6d94
	goto loc_820F6D94;
loc_820F6CE4:
	// cmpwi cr6,r10,180
	cr6.compare<int32_t>(ctx.r10.s32, 180, xer);
	// ble cr6,0x820f6d34
	if (!cr6.getGT()) goto loc_820F6D34;
loc_820F6CEC:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4132(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4132);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f6d68
	if (!cr6.getEQ()) goto loc_820F6D68;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4200(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4200, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4176(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4176, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,25
	r11.s64 = 25;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
	// b 0x820f6d94
	goto loc_820F6D94;
loc_820F6D34:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,65535
	ctx.r4.u64 = ctx.r4.u64 | 65535;
	// lwz r3,4208(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820f6d68
	if (!cr6.getEQ()) goto loc_820F6D68;
	// lwz r11,-19544(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19544);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f6d94
	if (cr6.getEQ()) goto loc_820F6D94;
	// lwz r11,4136(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4136);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f6d94
	if (cr6.getEQ()) goto loc_820F6D94;
loc_820F6D68:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,7
	r11.s64 = 7;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
	// bl 0x820ee118
	sub_820EE118(ctx, base);
loc_820F6D94:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820F6DB0"))) PPC_WEAK_FUNC(sub_820F6DB0);
PPC_FUNC_IMPL(__imp__sub_820F6DB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -112, f30.u64);
	// stfd f31,-104(r1)
	PPC_STORE_U64(ctx.r1.u32 + -104, f31.u64);
	// stwu r1,-368(r1)
	ea = -368 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r24,-32010
	r24.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,65535
	ctx.r4.u64 = ctx.r4.u64 | 65535;
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820f6e4c
	if (!cr6.getEQ()) goto loc_820F6E4C;
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,3028(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3028);
	f30.f64 = double(temp.f32);
	// fcmpu cr6,f1,f30
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820f6e4c
	if (cr6.getLT()) goto loc_820F6E4C;
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2948(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2948);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820f6e4c
	if (cr6.getGT()) goto loc_820F6E4C;
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820f6e4c
	if (cr6.getLT()) goto loc_820F6E4C;
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820f6e4c
	if (cr6.getGT()) goto loc_820F6E4C;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r21,r10,3984
	r21.s64 = ctx.r10.s64 + 3984;
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// lwz r10,0(r21)
	ctx.r10.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x820f6e58
	goto loc_820F6E58;
loc_820F6E4C:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r21,r11,3984
	r21.s64 = r11.s64 + 3984;
	// li r11,0
	r11.s64 = 0;
loc_820F6E58:
	// stw r11,0(r21)
	PPC_STORE_U32(r21.u32 + 0, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// lfs f9,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f9.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f7,f9
	ctx.f7.f64 = ctx.f9.f64;
	// fmr f6,f9
	ctx.f6.f64 = ctx.f9.f64;
	// fmr f5,f9
	ctx.f5.f64 = ctx.f9.f64;
	// fmr f4,f9
	ctx.f4.f64 = ctx.f9.f64;
	// lfs f8,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f8.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f2,f9
	ctx.f2.f64 = ctx.f9.f64;
	// fmr f1,f9
	ctx.f1.f64 = ctx.f9.f64;
	// lfs f3,24792(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24792);
	ctx.f3.f64 = double(temp.f32);
	// bl 0x8210bf20
	sub_8210BF20(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r11,-19632
	ctx.r3.s64 = r11.s64 + -19632;
	// bl 0x8210c818
	sub_8210C818(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lfs f1,25160(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25160);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bcc8
	sub_8210BCC8(ctx, base);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lhz r11,14(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r3,r11,6,0,25
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// bl 0x8209cd50
	sub_8209CD50(ctx, base);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,4168(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r4,12(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r30,r11,2820
	r30.s64 = r11.s64 + 2820;
	// lwz r10,12(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// lfs f0,48(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 0, temp.u32);
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// lfs f0,52(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 52);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 4, temp.u32);
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// lfs f0,56(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 56);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 8, temp.u32);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec308
	sub_820EC308(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// li r22,1
	r22.s64 = 1;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,56(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 56);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f6f64
	if (cr6.getEQ()) goto loc_820F6F64;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r22,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r22.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F6F64:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,52(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 52);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f6f88
	if (cr6.getEQ()) goto loc_820F6F88;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r22,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r22.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F6F88:
	// lis r23,-32010
	r23.s64 = -2097807360;
	// lwz r11,4012(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 4012);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820f6fb4
	if (cr6.getLT()) goto loc_820F6FB4;
	// li r11,0
	r11.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,4012(r23)
	PPC_STORE_U32(r23.u32 + 4012, r11.u32);
	// bl 0x820eca70
	sub_820ECA70(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// stw r11,4012(r23)
	PPC_STORE_U32(r23.u32 + 4012, r11.u32);
loc_820F6FB4:
	// lis r25,-32141
	r25.s64 = -2106392576;
	// lwz r11,-19576(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -19576);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820f715c
	if (cr6.getLT()) goto loc_820F715C;
	// li r4,546
	ctx.r4.s64 = 546;
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r31,-32141
	r31.s64 = -2106392576;
	// lis r28,-31994
	r28.s64 = -2096758784;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// addi r30,r11,24996
	r30.s64 = r11.s64 + 24996;
	// beq cr6,0x820f7004
	if (cr6.getEQ()) goto loc_820F7004;
	// lwz r11,-19572(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19572);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f7004
	if (!cr6.getEQ()) goto loc_820F7004;
	// li r8,4323
	ctx.r8.s64 = 4323;
	// mr r11,r22
	r11.u64 = r22.u64;
	// b 0x820f702c
	goto loc_820F702C;
loc_820F7004:
	// li r4,273
	ctx.r4.s64 = 273;
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f7048
	if (cr6.getEQ()) goto loc_820F7048;
	// lwz r11,-19572(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19572);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f7048
	if (cr6.getEQ()) goto loc_820F7048;
	// li r8,4328
	ctx.r8.s64 = 4328;
	// li r11,0
	r11.s64 = 0;
loc_820F702C:
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// lwz r6,19944(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + 19944);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,19936(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 19936);
	// li r4,18
	ctx.r4.s64 = 18;
	// stw r11,-19572(r31)
	PPC_STORE_U32(r31.u32 + -19572, r11.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F7048:
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14100(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14100);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x820f7078
	if (!cr6.getLT()) goto loc_820F7078;
	// lwz r11,-19572(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19572);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f7078
	if (!cr6.getEQ()) goto loc_820F7078;
	// li r8,4334
	ctx.r8.s64 = 4334;
	// mr r11,r22
	r11.u64 = r22.u64;
	// b 0x820f70a4
	goto loc_820F70A4;
loc_820F7078:
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,24780(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24780);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// ble cr6,0x820f70c0
	if (!cr6.getGT()) goto loc_820F70C0;
	// lwz r11,-19572(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19572);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f70c0
	if (cr6.getEQ()) goto loc_820F70C0;
	// li r8,4339
	ctx.r8.s64 = 4339;
	// li r11,0
	r11.s64 = 0;
loc_820F70A4:
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// lwz r6,19944(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + 19944);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,19936(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 19936);
	// li r4,18
	ctx.r4.s64 = 18;
	// stw r11,-19572(r31)
	PPC_STORE_U32(r31.u32 + -19572, r11.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F70C0:
	// lis r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f7118
	if (cr6.getEQ()) goto loc_820F7118;
	// lwz r11,-19572(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19572);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// lwz r6,19944(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + 19944);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,19936(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 19936);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// li r4,118
	ctx.r4.s64 = 118;
	// li r8,4347
	ctx.r8.s64 = 4347;
	// beq cr6,0x820f7100
	if (cr6.getEQ()) goto loc_820F7100;
	// li r8,4351
	ctx.r8.s64 = 4351;
loc_820F7100:
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r3,-19576(r25)
	ctx.r3.u64 = PPC_LOAD_U32(r25.u32 + -19576);
	// bl 0x820eca70
	sub_820ECA70(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// stw r11,-19576(r25)
	PPC_STORE_U32(r25.u32 + -19576, r11.u32);
	// b 0x820f7384
	goto loc_820F7384;
loc_820F7118:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f7384
	if (cr6.getEQ()) goto loc_820F7384;
	// lwz r3,-19576(r25)
	ctx.r3.u64 = PPC_LOAD_U32(r25.u32 + -19576);
	// bl 0x820eca70
	sub_820ECA70(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// lwz r6,19944(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + 19944);
	// li r8,4360
	ctx.r8.s64 = 4360;
	// lwz r3,19936(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 19936);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,118
	ctx.r4.s64 = 118;
	// stw r11,-19576(r25)
	PPC_STORE_U32(r25.u32 + -19576, r11.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// b 0x820f7384
	goto loc_820F7384;
loc_820F715C:
	// addi r7,r1,120
	ctx.r7.s64 = ctx.r1.s64 + 120;
	// addi r6,r1,124
	ctx.r6.s64 = ctx.r1.s64 + 124;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// bl 0x820d4658
	sub_820D4658(ctx, base);
	// addi r7,r1,104
	ctx.r7.s64 = ctx.r1.s64 + 104;
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// addi r5,r1,120
	ctx.r5.s64 = ctx.r1.s64 + 120;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820d4698
	sub_820D4698(ctx, base);
	// lis r27,-32141
	r27.s64 = -2106392576;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f13.f64 = double(temp.f32);
	// lis r26,-32141
	r26.s64 = -2106392576;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// lfs f0,-19588(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r30,-31994
	r30.s64 = -2096758784;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// addi r31,r11,24996
	r31.s64 = r11.s64 + 24996;
	// blt cr6,0x820f7274
	if (cr6.getLT()) goto loc_820F7274;
	// lfs f13,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820f7274
	if (cr6.getGT()) goto loc_820F7274;
	// lfs f0,-19584(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820f7274
	if (cr6.getLT()) goto loc_820F7274;
	// lfs f13,108(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820f7274
	if (cr6.getGT()) goto loc_820F7274;
	// lis r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f7274
	if (cr6.getEQ()) goto loc_820F7274;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,25140
	ctx.r3.s64 = r11.s64 + 25140;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// lwz r11,4044(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4044);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f7220
	if (!cr6.getEQ()) goto loc_820F7220;
	// li r8,4393
	ctx.r8.s64 = 4393;
	// stw r11,4012(r23)
	PPC_STORE_U32(r23.u32 + 4012, r11.u32);
	// li r4,77
	ctx.r4.s64 = 77;
	// b 0x820f7260
	goto loc_820F7260;
loc_820F7220:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820f7234
	if (!cr6.getEQ()) goto loc_820F7234;
	// li r8,4399
	ctx.r8.s64 = 4399;
	// li r4,79
	ctx.r4.s64 = 79;
	// b 0x820f7258
	goto loc_820F7258;
loc_820F7234:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820f7274
	if (!cr6.getEQ()) goto loc_820F7274;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r8,4409
	ctx.r8.s64 = 4409;
	// li r4,18
	ctx.r4.s64 = 18;
	// stw r11,-19576(r25)
	PPC_STORE_U32(r25.u32 + -19576, r11.u32);
	// mr r11,r22
	r11.u64 = r22.u64;
	// stw r11,-19572(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19572, r11.u32);
loc_820F7258:
	// li r11,0
	r11.s64 = 0;
	// stw r11,4044(r28)
	PPC_STORE_U32(r28.u32 + 4044, r11.u32);
loc_820F7260:
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// lwz r6,19944(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 19944);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,19936(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F7274:
	// lis r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f7338
	if (cr6.getEQ()) goto loc_820F7338;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lfs f0,-19588(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + -19588);
	f0.f64 = double(temp.f32);
	// addi r11,r11,4244
	r11.s64 = r11.s64 + 4244;
	// lfs f13,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// lfs f13,-19584(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -19584);
	ctx.f13.f64 = double(temp.f32);
	// blt cr6,0x820f72dc
	if (cr6.getLT()) goto loc_820F72DC;
	// lfs f12,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// bgt cr6,0x820f72dc
	if (cr6.getGT()) goto loc_820F72DC;
	// lfs f12,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// blt cr6,0x820f72dc
	if (cr6.getLT()) goto loc_820F72DC;
	// lfs f12,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// bgt cr6,0x820f72dc
	if (cr6.getGT()) goto loc_820F72DC;
	// li r8,4441
	ctx.r8.s64 = 4441;
	// li r4,222
	ctx.r4.s64 = 222;
	// mr r11,r22
	r11.u64 = r22.u64;
	// b 0x820f7364
	goto loc_820F7364;
loc_820F72DC:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r11,r11,4260
	r11.s64 = r11.s64 + 4260;
	// lfs f12,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// blt cr6,0x820f7324
	if (cr6.getLT()) goto loc_820F7324;
	// lfs f12,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// bgt cr6,0x820f7324
	if (cr6.getGT()) goto loc_820F7324;
	// lfs f0,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// blt cr6,0x820f7324
	if (cr6.getLT()) goto loc_820F7324;
	// lfs f0,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bgt cr6,0x820f7324
	if (cr6.getGT()) goto loc_820F7324;
	// li r8,4447
	ctx.r8.s64 = 4447;
	// li r4,222
	ctx.r4.s64 = 222;
	// li r11,2
	r11.s64 = 2;
	// b 0x820f7364
	goto loc_820F7364;
loc_820F7324:
	// lwz r11,4044(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4044);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f737c
	if (cr6.getEQ()) goto loc_820F737C;
	// li r8,4452
	ctx.r8.s64 = 4452;
	// b 0x820f735c
	goto loc_820F735C;
loc_820F7338:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f737c
	if (cr6.getEQ()) goto loc_820F737C;
	// lwz r11,4044(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4044);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f737c
	if (cr6.getEQ()) goto loc_820F737C;
	// li r8,4460
	ctx.r8.s64 = 4460;
loc_820F735C:
	// li r11,0
	r11.s64 = 0;
	// li r4,118
	ctx.r4.s64 = 118;
loc_820F7364:
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// lwz r6,19944(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 19944);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,19936(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 19936);
	// stw r11,4044(r28)
	PPC_STORE_U32(r28.u32 + 4044, r11.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F737C:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
loc_820F7384:
	// lwz r11,4012(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 4012);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820f73b4
	if (cr6.getLT()) goto loc_820F73B4;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,7
	r11.s64 = 7;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// bl 0x820ee118
	sub_820EE118(ctx, base);
	// addi r1,r1,368
	ctx.r1.s64 = ctx.r1.s64 + 368;
	// lfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_820F73B4:
	// lwz r11,0(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// cmpwi cr6,r11,1800
	cr6.compare<int32_t>(r11.s32, 1800, xer);
	// ble cr6,0x820f73e4
	if (!cr6.getGT()) goto loc_820F73E4;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r22
	r11.u64 = r22.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// mr r11,r22
	r11.u64 = r22.u64;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
loc_820F73E4:
	// addi r1,r1,368
	ctx.r1.s64 = ctx.r1.s64 + 368;
	// lfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_820F73F8"))) PPC_WEAK_FUNC(sub_820F73F8);
PPC_FUNC_IMPL(__imp__sub_820F73F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed10c
	// stfd f30,-144(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -144, f30.u64);
	// stfd f31,-136(r1)
	PPC_STORE_U64(ctx.r1.u32 + -136, f31.u64);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r19,-32010
	r19.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,65535
	ctx.r4.u64 = ctx.r4.u64 | 65535;
	// lwz r3,4208(r19)
	ctx.r3.u64 = PPC_LOAD_U32(r19.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// li r17,0
	r17.s64 = 0;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820f7498
	if (!cr6.getEQ()) goto loc_820F7498;
	// lwz r3,4208(r19)
	ctx.r3.u64 = PPC_LOAD_U32(r19.u32 + 4208);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,3028(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3028);
	f30.f64 = double(temp.f32);
	// fcmpu cr6,f1,f30
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820f7498
	if (cr6.getLT()) goto loc_820F7498;
	// lwz r3,4208(r19)
	ctx.r3.u64 = PPC_LOAD_U32(r19.u32 + 4208);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2948(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2948);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820f7498
	if (cr6.getGT()) goto loc_820F7498;
	// lwz r3,4208(r19)
	ctx.r3.u64 = PPC_LOAD_U32(r19.u32 + 4208);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820f7498
	if (cr6.getLT()) goto loc_820F7498;
	// lwz r3,4208(r19)
	ctx.r3.u64 = PPC_LOAD_U32(r19.u32 + 4208);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820f7498
	if (cr6.getGT()) goto loc_820F7498;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r18,r10,3984
	r18.s64 = ctx.r10.s64 + 3984;
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// lwz r10,0(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x820f74a4
	goto loc_820F74A4;
loc_820F7498:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r18,r11,3984
	r18.s64 = r11.s64 + 3984;
	// mr r11,r17
	r11.u64 = r17.u64;
loc_820F74A4:
	// stw r11,0(r18)
	PPC_STORE_U32(r18.u32 + 0, r11.u32);
	// mr r11,r17
	r11.u64 = r17.u64;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r22,-32010
	r22.s64 = -2097807360;
	// li r20,1
	r20.s64 = 1;
	// mr r31,r20
	r31.u64 = r20.u64;
	// stw r11,4020(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4020, r11.u32);
	// stw r11,4152(r22)
	PPC_STORE_U32(r22.u32 + 4152, r11.u32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r30,r11,3440
	r30.s64 = r11.s64 + 3440;
loc_820F74CC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820ecd28
	sub_820ECD28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820f74ec
	if (cr6.getEQ()) goto loc_820F74EC;
	// mr r11,r20
	r11.u64 = r20.u64;
	// stbx r20,r30,r31
	PPC_STORE_U8(r30.u32 + r31.u32, r20.u8);
	// stw r11,4152(r22)
	PPC_STORE_U32(r22.u32 + 4152, r11.u32);
	// b 0x820f74f0
	goto loc_820F74F0;
loc_820F74EC:
	// stbx r17,r30,r31
	PPC_STORE_U8(r30.u32 + r31.u32, r17.u8);
loc_820F74F0:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,81
	cr6.compare<int32_t>(r31.s32, 81, xer);
	// blt cr6,0x820f74cc
	if (cr6.getLT()) goto loc_820F74CC;
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec308
	sub_820EC308(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f753c
	if (cr6.getEQ()) goto loc_820F753C;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r20,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r20.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F753C:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f7560
	if (cr6.getEQ()) goto loc_820F7560;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r20,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r20.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F7560:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f7584
	if (cr6.getEQ()) goto loc_820F7584;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r20,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r20.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F7584:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f75a4
	if (cr6.getEQ()) goto loc_820F75A4;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r20,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r20.u32);
loc_820F75A4:
	// mr r10,r17
	ctx.r10.u64 = r17.u64;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// lis r28,-32141
	r28.s64 = -2106392576;
	// lis r23,-32141
	r23.s64 = -2106392576;
	// lis r21,-32141
	r21.s64 = -2106392576;
	// stw r10,4008(r11)
	PPC_STORE_U32(r11.u32 + 4008, ctx.r10.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r25,-31994
	r25.s64 = -2096758784;
	// lis r26,-31994
	r26.s64 = -2096758784;
	// lis r24,-32010
	r24.s64 = -2097807360;
	// lfs f0,-19588(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,24800(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// stw r10,2804(r29)
	PPC_STORE_U32(r29.u32 + 2804, ctx.r10.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r27,r10,24996
	r27.s64 = ctx.r10.s64 + 24996;
	// ble cr6,0x820f763c
	if (!cr6.getGT()) goto loc_820F763C;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,-19584(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -19584);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,24796(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 24796);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x820f763c
	if (!cr6.getGT()) goto loc_820F763C;
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
	// lwz r3,4208(r19)
	ctx.r3.u64 = PPC_LOAD_U32(r19.u32 + 4208);
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// stw r10,4008(r11)
	PPC_STORE_U32(r11.u32 + 4008, ctx.r10.u32);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f783c
	if (cr6.getEQ()) goto loc_820F783C;
	// mr r11,r20
	r11.u64 = r20.u64;
	// li r8,4893
	ctx.r8.s64 = 4893;
	// li r4,199
	ctx.r4.s64 = 199;
	// stw r11,3996(r24)
	PPC_STORE_U32(r24.u32 + 3996, r11.u32);
	// b 0x820f7828
	goto loc_820F7828;
loc_820F763C:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r30,r17
	r30.u64 = r17.u64;
	// addi r31,r11,-19500
	r31.s64 = r11.s64 + -19500;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r10,-8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -8);
	// subf r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	// li r10,7
	ctx.r10.s64 = 7;
	// stw r10,2804(r29)
	PPC_STORE_U32(r29.u32 + 2804, ctx.r10.u32);
	// srawi r10,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r9.s32 >> 1;
	// lwz r9,-8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + -8);
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r11,-12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -12);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
loc_820F768C:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x820f76a8
	if (!cr6.getEQ()) goto loc_820F76A8;
	// lwz r11,4152(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 4152);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// b 0x820f76bc
	goto loc_820F76BC;
loc_820F76A8:
	// cmpwi cr6,r30,6
	cr6.compare<int32_t>(r30.s32, 6, xer);
	// bne cr6,0x820f76b8
	if (!cr6.getEQ()) goto loc_820F76B8;
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// b 0x820f76bc
	goto loc_820F76BC;
loc_820F76B8:
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
loc_820F76BC:
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f774c
	if (cr6.getEQ()) goto loc_820F774C;
	// lwz r11,-8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -8);
	// cmpwi cr6,r30,4
	cr6.compare<int32_t>(r30.s32, 4, xer);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fadds f31,f0,f31
	f31.f64 = double(float(f0.f64 + f31.f64));
	// bne cr6,0x820f7704
	if (!cr6.getEQ()) goto loc_820F7704;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8235da08
	sub_8235DA08(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// b 0x820f7734
	goto loc_820F7734;
loc_820F7704:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x820f7720
	if (!cr6.getEQ()) goto loc_820F7720;
	// lwz r11,4152(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 4152);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// b 0x820f7734
	goto loc_820F7734;
loc_820F7720:
	// cmpwi cr6,r30,6
	cr6.compare<int32_t>(r30.s32, 6, xer);
	// bne cr6,0x820f7730
	if (!cr6.getEQ()) goto loc_820F7730;
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// b 0x820f7734
	goto loc_820F7734;
loc_820F7730:
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
loc_820F7734:
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f774c
	if (cr6.getEQ()) goto loc_820F774C;
	// lfs f0,-19584(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + -19584);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// blt cr6,0x820f775c
	if (cr6.getLT()) goto loc_820F775C;
loc_820F774C:
	// b 0x830e0630
	// ERROR 830E0630
	return;
	// cmpwi cr6,r30,8
	cr6.compare<int32_t>(r30.s32, 8, xer);
	// blt cr6,0x820f768c
	if (cr6.getLT()) goto loc_820F768C;
	// b 0x820f7760
	goto loc_820F7760;
loc_820F775C:
	// stw r30,2804(r29)
	PPC_STORE_U32(r29.u32 + 2804, r30.u32);
loc_820F7760:
	// lis r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4208(r19)
	ctx.r3.u64 = PPC_LOAD_U32(r19.u32 + 4208);
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f783c
	if (cr6.getEQ()) goto loc_820F783C;
	// lwz r11,2804(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 2804);
	// addi r10,r11,-3
	ctx.r10.s64 = r11.s64 + -3;
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bgt cr6,0x820f781c
	if (cr6.getGT()) goto loc_820F781C;
	// lis r12,-32241
	r12.s64 = -2112946176;
	// addi r12,r12,30624
	r12.s64 = r12.s64 + 30624;
	// rlwinm r0,r10,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_820F77D0;
	case 1:
		goto loc_820F77B4;
	case 2:
		goto loc_820F77DC;
	case 3:
		goto loc_820F77E8;
	case 4:
		goto loc_820F780C;
	default:
		__builtin_unreachable();
	}
	// lwz r16,30672(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 30672);
	// lwz r16,30644(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 30644);
	// lwz r16,30684(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 30684);
	// lwz r16,30696(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 30696);
	// lwz r16,30732(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + 30732);
loc_820F77B4:
	// lwz r3,4208(r19)
	ctx.r3.u64 = PPC_LOAD_U32(r19.u32 + 4208);
	// bl 0x8235da08
	sub_8235DA08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820f7820
	if (cr6.getEQ()) goto loc_820F7820;
	// lwz r3,4208(r19)
	ctx.r3.u64 = PPC_LOAD_U32(r19.u32 + 4208);
	// bl 0x8235d798
	sub_8235D798(ctx, base);
	// b 0x820f7820
	goto loc_820F7820;
loc_820F77D0:
	// li r11,7
	r11.s64 = 7;
	// stw r11,-19612(r23)
	PPC_STORE_U32(r23.u32 + -19612, r11.u32);
	// b 0x820f7820
	goto loc_820F7820;
loc_820F77DC:
	// li r11,33
	r11.s64 = 33;
	// stw r11,-19612(r23)
	PPC_STORE_U32(r23.u32 + -19612, r11.u32);
	// b 0x820f7820
	goto loc_820F7820;
loc_820F77E8:
	// lis r11,22593
	r11.s64 = 1480654848;
	// lwz r3,4208(r19)
	ctx.r3.u64 = PPC_LOAD_U32(r19.u32 + 4208);
	// li r5,1
	ctx.r5.s64 = 1;
	// ori r11,r11,2217
	r11.u64 = r11.u64 | 2217;
	// li r6,-1
	ctx.r6.s64 = -1;
	// rldimi r5,r11,32,0
	ctx.r5.u64 = (__builtin_rotateleft64(r11.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r5.u64 & 0xFFFFFFFF);
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x8235d7a0
	sub_8235D7A0(ctx, base);
	// b 0x820f7820
	goto loc_820F7820;
loc_820F780C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,25164
	ctx.r3.s64 = r11.s64 + 25164;
	// bl 0x8235dc98
	sub_8235DC98(ctx, base);
loc_820F781C:
	// stw r11,-19604(r21)
	PPC_STORE_U32(r21.u32 + -19604, r11.u32);
loc_820F7820:
	// li r8,4947
	ctx.r8.s64 = 4947;
	// li r4,197
	ctx.r4.s64 = 197;
loc_820F7828:
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// lwz r6,19944(r26)
	ctx.r6.u64 = PPC_LOAD_U32(r26.u32 + 19944);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,19936(r25)
	ctx.r3.u64 = PPC_LOAD_U32(r25.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F783C:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r19)
	ctx.r3.u64 = PPC_LOAD_U32(r19.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f7874
	if (cr6.getEQ()) goto loc_820F7874;
	// mr r11,r20
	r11.u64 = r20.u64;
	// lwz r6,19944(r26)
	ctx.r6.u64 = PPC_LOAD_U32(r26.u32 + 19944);
	// li r8,4984
	ctx.r8.s64 = 4984;
	// lwz r3,19936(r25)
	ctx.r3.u64 = PPC_LOAD_U32(r25.u32 + 19936);
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// stw r11,3996(r24)
	PPC_STORE_U32(r24.u32 + 3996, r11.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F7874:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// lwz r11,-19604(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + -19604);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f78e8
	if (!cr6.getEQ()) goto loc_820F78E8;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-15584(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -15584);
	// extsw r10,r11
	ctx.r10.s64 = r11.s32;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lwz r11,-15564(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -15564);
	// extsw r9,r11
	ctx.r9.s64 = r11.s32;
	// li r11,8
	r11.s64 = 8;
	// std r9,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r9.u64);
	// stw r11,-19612(r23)
	PPC_STORE_U32(r23.u32 + -19612, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,-19568(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19568, temp.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// stfs f0,-19564(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19564, temp.u32);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// lfd f30,-144(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// lfd f31,-136(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -136);
	// b 0x823ed15c
	return;
loc_820F78E8:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820f7908
	if (!cr6.getEQ()) goto loc_820F7908;
	// li r11,27
	r11.s64 = 27;
	// stw r11,-19612(r23)
	PPC_STORE_U32(r23.u32 + -19612, r11.u32);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// lfd f30,-144(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// lfd f31,-136(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -136);
	// b 0x823ed15c
	return;
loc_820F7908:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820f7928
	if (!cr6.getEQ()) goto loc_820F7928;
	// li r11,22
	r11.s64 = 22;
	// stw r11,-19612(r23)
	PPC_STORE_U32(r23.u32 + -19612, r11.u32);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// lfd f30,-144(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// lfd f31,-136(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -136);
	// b 0x823ed15c
	return;
loc_820F7928:
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// cmpwi cr6,r11,1800
	cr6.compare<int32_t>(r11.s32, 1800, xer);
	// ble cr6,0x820f7958
	if (!cr6.getGT()) goto loc_820F7958;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r17
	r11.u64 = r17.u64;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
loc_820F7958:
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// lfd f30,-144(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// lfd f31,-136(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -136);
	// b 0x823ed15c
	return;
}

__attribute__((alias("__imp__sub_820F7968"))) PPC_WEAK_FUNC(sub_820F7968);
PPC_FUNC_IMPL(__imp__sub_820F7968) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed540
	// stwu r1,-448(r1)
	ea = -448 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820f5898
	sub_820F5898(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// addi r31,r11,-19520
	r31.s64 = r11.s64 + -19520;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f27,2688(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 2688);
	f27.f64 = double(temp.f32);
	// li r29,0
	r29.s64 = 0;
	// li r26,0
	r26.s64 = 0;
	// stw r11,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f31,2776(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2776);
	f31.f64 = double(temp.f32);
	// lis r21,-32010
	r21.s64 = -2097807360;
	// lfs f26,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	f26.f64 = double(temp.f32);
	// lis r14,-32141
	r14.s64 = -2106392576;
	// lis r18,-32141
	r18.s64 = -2106392576;
	// lis r15,-32141
	r15.s64 = -2106392576;
	// stw r11,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r24,-32141
	r24.s64 = -2106392576;
	// addi r17,r11,-14540
	r17.s64 = r11.s64 + -14540;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lis r30,-31991
	r30.s64 = -2096562176;
	// addi r16,r11,28184
	r16.s64 = r11.s64 + 28184;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r20,r11,-14576
	r20.s64 = r11.s64 + -14576;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r19,r11,25184
	r19.s64 = r11.s64 + 25184;
loc_820F79F0:
	// cmpwi cr6,r26,1
	cr6.compare<int32_t>(r26.s32, 1, xer);
	// bne cr6,0x820f7a10
	if (!cr6.getEQ()) goto loc_820F7A10;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4152(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4152);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// b 0x820f7a24
	goto loc_820F7A24;
loc_820F7A10:
	// cmpwi cr6,r26,6
	cr6.compare<int32_t>(r26.s32, 6, xer);
	// bne cr6,0x820f7a20
	if (!cr6.getEQ()) goto loc_820F7A20;
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// b 0x820f7a24
	goto loc_820F7A24;
loc_820F7A20:
	// li r3,1
	ctx.r3.s64 = 1;
loc_820F7A24:
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f7d00
	if (cr6.getEQ()) goto loc_820F7D00;
	// addi r22,r29,1
	r22.s64 = r29.s64 + 1;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r5,r19
	ctx.r5.u64 = r19.u64;
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r27,4(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mullw r10,r11,r29
	ctx.r10.s64 = int64_t(r11.s32) * int64_t(r29.s32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// add r25,r10,r11
	r25.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x820ee2d0
	sub_820EE2D0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// addi r5,r1,200
	ctx.r5.s64 = ctx.r1.s64 + 200;
	// lwz r4,-31556(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r3,r1,148
	ctx.r3.s64 = ctx.r1.s64 + 148;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// andi. r11,r11,143
	r11.u64 = r11.u64 & 143;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r28,r11,112
	r28.s64 = r11.s64 + 112;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r25
	r11.s64 = r25.s32;
	// extsw r10,r27
	ctx.r10.s64 = r27.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// std r11,208(r1)
	PPC_STORE_U64(ctx.r1.u32 + 208, r11.u64);
	// std r10,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r10.u64);
	// lfd f0,208(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 208);
	// lfd f13,216(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// lfs f30,-14544(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + -14544);
	f30.f64 = double(temp.f32);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,148
	ctx.r3.s64 = ctx.r1.s64 + 148;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// rlwinm r25,r26,2,0,29
	r25.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r25,r20
	ctx.r3.u64 = PPC_LOAD_U32(r25.u32 + r20.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// lfs f30,-14544(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + -14544);
	f30.f64 = double(temp.f32);
	// addi r7,r1,196
	ctx.r7.s64 = ctx.r1.s64 + 196;
	// lwz r4,-31556(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r6,r1,160
	ctx.r6.s64 = ctx.r1.s64 + 160;
	// fmr f1,f26
	ctx.f1.f64 = f26.f64;
	// addi r3,r1,156
	ctx.r3.s64 = ctx.r1.s64 + 156;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,156
	ctx.r3.s64 = ctx.r1.s64 + 156;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// lwz r23,0(r31)
	r23.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mullw r10,r11,r29
	ctx.r10.s64 = int64_t(r11.s32) * int64_t(r29.s32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// add r29,r10,r11
	r29.u64 = ctx.r10.u64 + r11.u64;
	// lwz r11,2804(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 2804);
	// cmpw cr6,r11,r26
	cr6.compare<int32_t>(r11.s32, r26.s32, xer);
	// bne cr6,0x820f7b94
	if (!cr6.getEQ()) goto loc_820F7B94;
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// li r7,50
	ctx.r7.s64 = 50;
	// addi r6,r29,14
	ctx.r6.s64 = r29.s64 + 14;
	// add r11,r23,r11
	r11.u64 = r23.u64 + r11.u64;
	// addi r4,r29,-2
	ctx.r4.s64 = r29.s64 + -2;
	// addi r5,r11,5
	ctx.r5.s64 = r11.s64 + 5;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r3,r11,-2
	ctx.r3.s64 = r11.s64 + -2;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820F7B94:
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r4,-31556(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r3,r1,172
	ctx.r3.s64 = ctx.r1.s64 + 172;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r29
	r11.s64 = r29.s32;
	// extsw r10,r23
	ctx.r10.s64 = r23.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// std r11,224(r1)
	PPC_STORE_U64(ctx.r1.u32 + 224, r11.u64);
	// std r10,232(r1)
	PPC_STORE_U64(ctx.r1.u32 + 232, ctx.r10.u64);
	// lfd f0,224(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 224);
	// lfd f13,232(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 232);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// lfs f30,-14544(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + -14544);
	f30.f64 = double(temp.f32);
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,164
	ctx.r3.s64 = ctx.r1.s64 + 164;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,164
	ctx.r3.s64 = ctx.r1.s64 + 164;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,172
	ctx.r3.s64 = ctx.r1.s64 + 172;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,2804(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 2804);
	// cmpw cr6,r11,r26
	cr6.compare<int32_t>(r11.s32, r26.s32, xer);
	// bne cr6,0x820f7cfc
	if (!cr6.getEQ()) goto loc_820F7CFC;
	// addi r3,r16,336
	ctx.r3.s64 = r16.s64 + 336;
	// lfs f30,-14508(r15)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r15.u32 + -14508);
	f30.f64 = double(temp.f32);
	// lfs f29,-14504(r18)
	temp.u32 = PPC_LOAD_U32(r18.u32 + -14504);
	f29.f64 = double(temp.f32);
	// lfs f28,-14500(r14)
	temp.u32 = PPC_LOAD_U32(r14.u32 + -14500);
	f28.f64 = double(temp.f32);
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// li r11,2
	r11.s64 = 2;
	// fmr f11,f31
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = f31.f64;
	// fmr f10,f31
	ctx.f10.f64 = f31.f64;
	// fmr f9,f27
	ctx.f9.f64 = f27.f64;
	// fmr f8,f27
	ctx.f8.f64 = f27.f64;
	// fmr f7,f30
	ctx.f7.f64 = f30.f64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// fmr f6,f29
	ctx.f6.f64 = f29.f64;
	// fmr f5,f28
	ctx.f5.f64 = f28.f64;
	// fmr f4,f31
	ctx.f4.f64 = f31.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x82099388
	sub_82099388(ctx, base);
	// lwzx r3,r25,r17
	ctx.r3.u64 = PPC_LOAD_U32(r25.u32 + r17.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// lfs f30,-14504(r18)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r18.u32 + -14504);
	f30.f64 = double(temp.f32);
	// lwz r4,-31556(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// lfs f29,-14496(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14496);
	f29.f64 = double(temp.f32);
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// li r5,112
	ctx.r5.s64 = 112;
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// addi r3,r1,188
	ctx.r3.s64 = ctx.r1.s64 + 188;
	// lfs f30,-14492(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -14492);
	f30.f64 = double(temp.f32);
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209bc18
	sub_8209BC18(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,188
	ctx.r3.s64 = ctx.r1.s64 + 188;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
loc_820F7CFC:
	// mr r29,r22
	r29.u64 = r22.u64;
loc_820F7D00:
	// b 0x830e06b0
	// ERROR 830E06B0
	return;
	// cmpwi cr6,r26,8
	cr6.compare<int32_t>(r26.s32, 8, xer);
	// blt cr6,0x820f79f0
	if (cr6.getLT()) goto loc_820F79F0;
	// bl 0x820ec700
	sub_820EC700(ctx, base);
	// addi r1,r1,448
	ctx.r1.s64 = ctx.r1.s64 + 448;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed58c
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_820F7D20"))) PPC_WEAK_FUNC(sub_820F7D20);
PPC_FUNC_IMPL(__imp__sub_820F7D20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r23,-32141
	r23.s64 = -2106392576;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r24,r11,-19088
	r24.s64 = r11.s64 + -19088;
	// lwz r11,-19596(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -19596);
	// addi r10,r24,20
	ctx.r10.s64 = r24.s64 + 20;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// lwzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x820eb6f8
	sub_820EB6F8(ctx, base);
	// lis r31,-32010
	r31.s64 = -2097807360;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// li r25,1
	r25.s64 = 1;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f7d88
	if (cr6.getEQ()) goto loc_820F7D88;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F7D88:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f7dac
	if (cr6.getEQ()) goto loc_820F7DAC;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F7DAC:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f7dd0
	if (cr6.getEQ()) goto loc_820F7DD0;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F7DD0:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f7df0
	if (cr6.getEQ()) goto loc_820F7DF0;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
loc_820F7DF0:
	// li r11,0
	r11.s64 = 0;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// stw r11,4008(r28)
	PPC_STORE_U32(r28.u32 + 4008, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// li r11,-1
	r11.s64 = -1;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// stw r11,2804(r30)
	PPC_STORE_U32(r30.u32 + 2804, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	f0.f64 = double(temp.f32);
	// ble cr6,0x820f7e44
	if (!cr6.getGT()) goto loc_820F7E44;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f7e44
	if (!cr6.getGT()) goto loc_820F7E44;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,4008(r28)
	PPC_STORE_U32(r28.u32 + 4008, r11.u32);
	// b 0x820f7ea8
	goto loc_820F7EA8;
loc_820F7E44:
	// cmpwi cr6,r29,3
	cr6.compare<int32_t>(r29.s32, 3, xer);
	// blt cr6,0x820f7e64
	if (cr6.getLT()) goto loc_820F7E64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,25076(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25076);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820f7e64
	if (cr6.getLT()) goto loc_820F7E64;
	// li r11,3
	r11.s64 = 3;
	// b 0x820f7ea4
	goto loc_820F7EA4;
loc_820F7E64:
	// cmpwi cr6,r29,2
	cr6.compare<int32_t>(r29.s32, 2, xer);
	// blt cr6,0x820f7e84
	if (cr6.getLT()) goto loc_820F7E84;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,25200(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25200);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820f7e84
	if (cr6.getLT()) goto loc_820F7E84;
	// li r11,2
	r11.s64 = 2;
	// b 0x820f7ea4
	goto loc_820F7EA4;
loc_820F7E84:
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// blt cr6,0x820f7ea0
	if (cr6.getLT()) goto loc_820F7EA0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,25196(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25196);
	ctx.f13.f64 = double(temp.f32);
	// mr r11,r25
	r11.u64 = r25.u64;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820f7ea4
	if (!cr6.getLT()) goto loc_820F7EA4;
loc_820F7EA0:
	// li r11,0
	r11.s64 = 0;
loc_820F7EA4:
	// stw r11,2804(r30)
	PPC_STORE_U32(r30.u32 + 2804, r11.u32);
loc_820F7EA8:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r27,-32010
	r27.s64 = -2097807360;
	// lis r26,-32141
	r26.s64 = -2106392576;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// beq cr6,0x820f7f20
	if (cr6.getEQ()) goto loc_820F7F20;
	// lwz r11,4008(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4008);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f7ee4
	if (cr6.getEQ()) goto loc_820F7EE4;
	// li r8,5249
	ctx.r8.s64 = 5249;
	// b 0x820f7f38
	goto loc_820F7F38;
loc_820F7EE4:
	// lwz r10,2804(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 2804);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x820f7f64
	if (cr6.getLT()) goto loc_820F7F64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r10,-19592(r26)
	PPC_STORE_U32(r26.u32 + -19592, ctx.r10.u32);
	// li r8,5255
	ctx.r8.s64 = 5255;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,77
	ctx.r4.s64 = 77;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,3992(r27)
	PPC_STORE_U32(r27.u32 + 3992, r11.u32);
	// b 0x820f7f5c
	goto loc_820F7F5C;
loc_820F7F20:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f7f64
	if (cr6.getEQ()) goto loc_820F7F64;
	// li r8,5261
	ctx.r8.s64 = 5261;
loc_820F7F38:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r4,199
	ctx.r4.s64 = 199;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,3996(r29)
	PPC_STORE_U32(r29.u32 + 3996, r11.u32);
loc_820F7F5C:
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F7F64:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// lwz r11,3992(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 3992);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f7fe8
	if (cr6.getEQ()) goto loc_820F7FE8;
	// lwz r11,-19592(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -19592);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x820f7fb8
	if (!cr6.getEQ()) goto loc_820F7FB8;
	// li r11,10
	r11.s64 = 10;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,25028(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25028);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19568(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19568, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,25024(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25024);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19564(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19564, temp.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
loc_820F7FB8:
	// li r11,11
	r11.s64 = 11;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,25028(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25028);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19568(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19568, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,25024(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25024);
	f0.f64 = double(temp.f32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// stfs f0,-19564(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -19564, temp.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
loc_820F7FE8:
	// lwz r11,3996(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 3996);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f8020
	if (cr6.getEQ()) goto loc_820F8020;
	// lwz r11,-19596(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -19596);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mulli r9,r11,28
	ctx.r9.s64 = r11.s64 * 28;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,8
	r11.s64 = 8;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// addi r11,r24,20
	r11.s64 = r24.s64 + 20;
	// lwzx r3,r9,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// bl 0x820f0c30
	sub_820F0C30(ctx, base);
loc_820F8020:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_820F8028"))) PPC_WEAK_FUNC(sub_820F8028);
PPC_FUNC_IMPL(__imp__sub_820F8028) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed10c
	// stfd f30,-144(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -144, f30.u64);
	// stfd f31,-136(r1)
	PPC_STORE_U64(ctx.r1.u32 + -136, f31.u64);
	// ld r12,-4096(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// stwu r1,-6320(r1)
	ea = -6320 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r18,-32141
	r18.s64 = -2106392576;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r19,r11,-19088
	r19.s64 = r11.s64 + -19088;
	// lwz r11,-19596(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -19596);
	// addi r10,r19,20
	ctx.r10.s64 = r19.s64 + 20;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// lwzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x820eb6f8
	sub_820EB6F8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r17,r3
	r17.u64 = ctx.r3.u64;
	// lfs f4,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f4.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// bl 0x82098290
	sub_82098290(ctx, base);
	// bl 0x820f5898
	sub_820F5898(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x820f5fb8
	sub_820F5FB8(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39971
	ctx.r3.u64 = ctx.r3.u64 | 39971;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r11,55
	r11.s64 = 55;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// li r11,143
	r11.s64 = 143;
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r30,r3
	r30.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r29,0
	r29.s64 = 0;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lis r26,-31994
	r26.s64 = -2096758784;
	// lis r27,-31991
	r27.s64 = -2096562176;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// lwz r7,15124(r26)
	ctx.r7.u64 = PPC_LOAD_U32(r26.u32 + 15124);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// lwz r6,-31556(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + -31556);
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r23,-31994
	r23.s64 = -2096758784;
	// lwz r11,2804(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 2804);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820f813c
	if (cr6.getLT()) goto loc_820F813C;
	// lwz r10,11488(r23)
	ctx.r10.u64 = PPC_LOAD_U32(r23.u32 + 11488);
	// mulli r11,r11,30
	r11.s64 = r11.s64 * 30;
	// subfic r10,r10,0
	xer.ca = ctx.r10.u32 <= 0;
	ctx.r10.s64 = 0 - ctx.r10.s64;
	// li r7,50
	ctx.r7.s64 = 50;
	// li r5,240
	ctx.r5.s64 = 240;
	// subfe r10,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// addi r6,r11,195
	ctx.r6.s64 = r11.s64 + 195;
	// addi r4,r11,178
	ctx.r4.s64 = r11.s64 + 178;
	// andi. r10,r10,50
	ctx.r10.u64 = ctx.r10.u64 & 50;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// subfic r3,r10,126
	xer.ca = ctx.r10.u32 <= 126;
	ctx.r3.s64 = 126 - ctx.r10.s64;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820F813C:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r22,r29
	r22.u64 = r29.u64;
	// addi r30,r11,-19524
	r30.s64 = r11.s64 + -19524;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r25,-1
	r25.s64 = -1;
	// addi r21,r11,25184
	r21.s64 = r11.s64 + 25184;
	// li r20,150
	r20.s64 = 150;
loc_820F8158:
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x820f8168
	if (cr6.getEQ()) goto loc_820F8168;
	// cmpw cr6,r17,r22
	cr6.compare<int32_t>(r17.s32, r22.s32, xer);
	// blt cr6,0x820f83ec
	if (cr6.getLT()) goto loc_820F83EC;
loc_820F8168:
	// lwz r11,11488(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 11488);
	// mr r31,r29
	r31.u64 = r29.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f81f8
	if (cr6.getEQ()) goto loc_820F81F8;
	// cmplwi cr6,r22,3
	cr6.compare<uint32_t>(r22.u32, 3, xer);
	// bgt cr6,0x820f8210
	if (cr6.getGT()) goto loc_820F8210;
	// lis r12,-32240
	r12.s64 = -2112880640;
	// addi r12,r12,-32360
	r12.s64 = r12.s64 + -32360;
	// rlwinm r0,r22,2,0,29
	r0.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r22.u64) {
	case 0:
		goto loc_820F81A8;
	case 1:
		goto loc_820F81BC;
	case 2:
		goto loc_820F81D0;
	case 3:
		goto loc_820F81E4;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-32344(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -32344);
	// lwz r16,-32324(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -32324);
	// lwz r16,-32304(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -32304);
	// lwz r16,-32284(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -32284);
loc_820F81A8:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40201
	ctx.r3.u64 = ctx.r3.u64 | 40201;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x820f8210
	goto loc_820F8210;
loc_820F81BC:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40202
	ctx.r3.u64 = ctx.r3.u64 | 40202;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x820f8210
	goto loc_820F8210;
loc_820F81D0:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40203
	ctx.r3.u64 = ctx.r3.u64 | 40203;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x820f8210
	goto loc_820F8210;
loc_820F81E4:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40204
	ctx.r3.u64 = ctx.r3.u64 | 40204;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x820f8210
	goto loc_820F8210;
loc_820F81F8:
	// addi r6,r22,1
	ctx.r6.s64 = r22.s64 + 1;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// addi r31,r1,176
	r31.s64 = ctx.r1.s64 + 176;
loc_820F8210:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15124(r26)
	ctx.r7.u64 = PPC_LOAD_U32(r26.u32 + 15124);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lwz r6,-31556(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + -31556);
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,11488(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 11488);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f8248
	if (cr6.getEQ()) goto loc_820F8248;
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// addi r11,r11,-10
	r11.s64 = r11.s64 + -10;
	// b 0x820f824c
	goto loc_820F824C;
loc_820F8248:
	// mr r11,r29
	r11.u64 = r29.u64;
loc_820F824C:
	// addi r10,r22,6
	ctx.r10.s64 = r22.s64 + 6;
	// subfic r11,r11,130
	xer.ca = r11.u32 <= 130;
	r11.s64 = 130 - r11.s64;
	// mulli r24,r10,30
	r24.s64 = ctx.r10.s64 * 30;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// stw r24,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r24.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lwz r11,11488(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 11488);
	// lwz r6,-31556(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + -31556);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// beq cr6,0x820f82d0
	if (cr6.getEQ()) goto loc_820F82D0;
	// lbz r10,-31(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + -31);
	// lbz r8,-30(r30)
	ctx.r8.u64 = PPC_LOAD_U8(r30.u32 + -30);
	// lbz r7,-29(r30)
	ctx.r7.u64 = PPC_LOAD_U8(r30.u32 + -29);
	// rlwimi r8,r10,8,16,23
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r10.u32, 8) & 0xFF00) | (ctx.r8.u64 & 0xFFFFFFFFFFFF00FF);
	// lbz r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// clrlwi r10,r8,16
	ctx.r10.u64 = ctx.r8.u32 & 0xFFFF;
	// stw r25,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r25.u32);
	// li r8,255
	ctx.r8.s64 = 255;
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r29.u32);
	// rlwimi r7,r10,8,0,23
	ctx.r7.u64 = (__builtin_rotateleft32(ctx.r10.u32, 8) & 0xFFFFFF00) | (ctx.r7.u64 & 0xFFFFFFFF000000FF);
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// rlwimi r9,r7,8,0,23
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r7.u32, 8) & 0xFFFFFF00) | (ctx.r9.u64 & 0xFFFFFFFF000000FF);
	// lwz r7,15124(r26)
	ctx.r7.u64 = PPC_LOAD_U32(r26.u32 + 15124);
	// bl 0x8213e398
	sub_8213E398(ctx, base);
	// b 0x820f82f0
	goto loc_820F82F0;
loc_820F82D0:
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// lwz r7,15124(r26)
	ctx.r7.u64 = PPC_LOAD_U32(r26.u32 + 15124);
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// li r8,255
	ctx.r8.s64 = 255;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820F82F0:
	// cmplwi cr6,r22,3
	cr6.compare<uint32_t>(r22.u32, 3, xer);
	// bgt cr6,0x820f8354
	if (cr6.getGT()) goto loc_820F8354;
	// lis r12,-32240
	r12.s64 = -2112880640;
	// addi r12,r12,-31984
	r12.s64 = r12.s64 + -31984;
	// rlwinm r0,r22,2,0,29
	r0.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r22.u64) {
	case 0:
		goto loc_820F8320;
	case 1:
		goto loc_820F832C;
	case 2:
		goto loc_820F8338;
	case 3:
		goto loc_820F8344;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-31968(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -31968);
	// lwz r16,-31956(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -31956);
	// lwz r16,-31944(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -31944);
	// lwz r16,-31932(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -31932);
loc_820F8320:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39972
	ctx.r3.u64 = ctx.r3.u64 | 39972;
	// b 0x820f834c
	goto loc_820F834C;
loc_820F832C:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39973
	ctx.r3.u64 = ctx.r3.u64 | 39973;
	// b 0x820f834c
	goto loc_820F834C;
loc_820F8338:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39974
	ctx.r3.u64 = ctx.r3.u64 | 39974;
	// b 0x820f834c
	goto loc_820F834C;
loc_820F8344:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39975
	ctx.r3.u64 = ctx.r3.u64 | 39975;
loc_820F834C:
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
loc_820F8354:
	// stw r20,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r20.u32);
	// stw r24,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r24.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lwz r11,11488(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 11488);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lwz r6,-31556(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + -31556);
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// beq cr6,0x820f83cc
	if (cr6.getEQ()) goto loc_820F83CC;
	// lbz r10,-31(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + -31);
	// lbz r8,-30(r30)
	ctx.r8.u64 = PPC_LOAD_U8(r30.u32 + -30);
	// lbz r7,-29(r30)
	ctx.r7.u64 = PPC_LOAD_U8(r30.u32 + -29);
	// rlwimi r8,r10,8,16,23
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r10.u32, 8) & 0xFF00) | (ctx.r8.u64 & 0xFFFFFFFFFFFF00FF);
	// lbz r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// clrlwi r10,r8,16
	ctx.r10.u64 = ctx.r8.u32 & 0xFFFF;
	// stw r25,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r25.u32);
	// li r8,255
	ctx.r8.s64 = 255;
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r29.u32);
	// rlwimi r7,r10,8,0,23
	ctx.r7.u64 = (__builtin_rotateleft32(ctx.r10.u32, 8) & 0xFFFFFF00) | (ctx.r7.u64 & 0xFFFFFFFF000000FF);
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// rlwimi r9,r7,8,0,23
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r7.u32, 8) & 0xFFFFFF00) | (ctx.r9.u64 & 0xFFFFFFFF000000FF);
	// lwz r7,15124(r26)
	ctx.r7.u64 = PPC_LOAD_U32(r26.u32 + 15124);
	// bl 0x8213e398
	sub_8213E398(ctx, base);
	// b 0x820f83ec
	goto loc_820F83EC;
loc_820F83CC:
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// lwz r7,15124(r26)
	ctx.r7.u64 = PPC_LOAD_U32(r26.u32 + 15124);
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// li r8,255
	ctx.r8.s64 = 255;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820F83EC:
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// cmpwi cr6,r22,3
	cr6.compare<int32_t>(r22.s32, 3, xer);
	// ble cr6,0x820f8158
	if (!cr6.getGT()) goto loc_820F8158;
	// bl 0x820ec830
	sub_820EC830(ctx, base);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r25,r29
	r25.u64 = r29.u64;
	// li r26,186
	r26.s64 = 186;
	// lfs f31,2692(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2692);
	f31.f64 = double(temp.f32);
	// lis r21,-32010
	r21.s64 = -2097807360;
	// lfs f30,25096(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 25096);
	f30.f64 = double(temp.f32);
	// addi r27,r11,28184
	r27.s64 = r11.s64 + 28184;
	// li r22,2
	r22.s64 = 2;
	// li r23,255
	r23.s64 = 255;
	// li r24,180
	r24.s64 = 180;
loc_820F842C:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x820f843c
	if (cr6.getEQ()) goto loc_820F843C;
	// cmpw cr6,r17,r25
	cr6.compare<int32_t>(r17.s32, r25.s32, xer);
	// blt cr6,0x820f8548
	if (cr6.getLT()) goto loc_820F8548;
loc_820F843C:
	// li r3,75
	ctx.r3.s64 = 75;
	// lwz r31,-19596(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + -19596);
	// bl 0x82136fa0
	sub_82136FA0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f84bc
	if (!cr6.getEQ()) goto loc_820F84BC;
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f8468
	if (cr6.getEQ()) goto loc_820F8468;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bgt cr6,0x820f8548
	if (cr6.getGT()) goto loc_820F8548;
loc_820F8468:
	// mulli r30,r31,28
	r30.s64 = r31.s64 * 28;
	// addi r28,r19,20
	r28.s64 = r19.s64 + 20;
	// lwzx r11,r30,r28
	r11.u64 = PPC_LOAD_U32(r30.u32 + r28.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820f8548
	if (cr6.getLT()) goto loc_820F8548;
	// lwz r3,4208(r21)
	ctx.r3.u64 = PPC_LOAD_U32(r21.u32 + 4208);
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f84a4
	if (cr6.getEQ()) goto loc_820F84A4;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// b 0x820f84a8
	goto loc_820F84A8;
loc_820F84A4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_820F84A8:
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// lwzx r4,r30,r28
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + r28.u32);
	// bl 0x820e96c8
	sub_820E96C8(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x820f8548
	if (!cr6.getEQ()) goto loc_820F8548;
loc_820F84BC:
	// extsw r9,r26
	ctx.r9.s64 = r26.s32;
	// lwz r6,72(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + 72);
	// lwz r7,76(r27)
	ctx.r7.u64 = PPC_LOAD_U32(r27.u32 + 76);
	// li r8,0
	ctx.r8.s64 = 0;
	// extsw r11,r6
	r11.s64 = ctx.r6.s32;
	// stfs f30,160(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// extsw r10,r7
	ctx.r10.s64 = ctx.r7.s32;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// addi r5,r1,152
	ctx.r5.s64 = ctx.r1.s64 + 152;
	// stw r23,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r23.u32);
	// std r9,168(r1)
	PPC_STORE_U64(ctx.r1.u32 + 168, ctx.r9.u64);
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r29.u32);
	// std r11,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, r11.u64);
	// lfd f0,144(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// std r10,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, ctx.r10.u64);
	// lfd f13,136(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// li r10,0
	ctx.r10.s64 = 0;
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// addi r3,r27,64
	ctx.r3.s64 = r27.s64 + 64;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// stw r24,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r24.u32);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// stfs f0,152(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// fmuls f0,f13,f31
	f0.f64 = double(float(ctx.f13.f64 * f31.f64));
	// stfs f0,156(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 156, temp.u32);
	// lfd f12,168(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 168);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// stfs f12,164(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// bl 0x8214ab68
	sub_8214AB68(ctx, base);
loc_820F8548:
	// addi r26,r26,30
	r26.s64 = r26.s64 + 30;
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// cmpwi cr6,r26,246
	cr6.compare<int32_t>(r26.s32, 246, xer);
	// ble cr6,0x820f842c
	if (!cr6.getGT()) goto loc_820F842C;
	// bl 0x820ec700
	sub_820EC700(ctx, base);
	// addi r1,r1,6320
	ctx.r1.s64 = ctx.r1.s64 + 6320;
	// lfd f30,-144(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// lfd f31,-136(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -136);
	// b 0x823ed15c
	return;
}

__attribute__((alias("__imp__sub_820F8570"))) PPC_WEAK_FUNC(sub_820F8570);
PPC_FUNC_IMPL(__imp__sub_820F8570) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// addi r12,r1,-88
	r12.s64 = ctx.r1.s64 + -88;
	// bl 0x823ed548
	// ld r12,-4096(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// stwu r1,-6272(r1)
	ea = -6272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820f5898
	sub_820F5898(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x820f5fb8
	sub_820F5FB8(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39976
	ctx.r3.u64 = ctx.r3.u64 | 39976;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r11,55
	r11.s64 = 55;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// li r11,143
	r11.s64 = 143;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r31,0
	r31.s64 = 0;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// lis r30,-31991
	r30.s64 = -2096562176;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39978
	ctx.r3.u64 = ctx.r3.u64 | 39978;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r26,57
	r26.s64 = 57;
	// li r24,164
	r24.s64 = 164;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// li r7,50
	ctx.r7.s64 = 50;
	// li r6,192
	ctx.r6.s64 = 192;
	// li r5,355
	ctx.r5.s64 = 355;
	// stw r26,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r26.u32);
	// li r4,181
	ctx.r4.s64 = 181;
	// stw r24,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r24.u32);
	// li r3,55
	ctx.r3.s64 = 55;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r28,-32141
	r28.s64 = -2106392576;
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// li r7,100
	ctx.r7.s64 = 100;
	// li r3,55
	ctx.r3.s64 = 55;
	// lfs f29,13964(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13964);
	f29.f64 = double(temp.f32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lfs f0,-19536(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -19536);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// addi r6,r11,28
	ctx.r6.s64 = r11.s64 + 28;
	// addi r4,r11,17
	ctx.r4.s64 = r11.s64 + 17;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,15444(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15444);
	f30.f64 = double(temp.f32);
	// fsqrts f0,f0
	f0.f64 = double(float(sqrt(f0.f64)));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// subfic r5,r11,55
	xer.ca = r11.u32 <= 55;
	ctx.r5.s64 = 55 - r11.s64;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r27,r11,3840
	r27.s64 = r11.s64 + 3840;
	// lwz r11,-988(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -988);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f86bc
	if (cr6.getEQ()) goto loc_820F86BC;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r7,50
	ctx.r7.s64 = 50;
	// li r5,199
	ctx.r5.s64 = 199;
	// addi r6,r11,14
	ctx.r6.s64 = r11.s64 + 14;
	// addi r4,r11,-1
	ctx.r4.s64 = r11.s64 + -1;
	// li r3,55
	ctx.r3.s64 = 55;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820F86BC:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r23,r3
	r23.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// mr r10,r23
	ctx.r10.u64 = r23.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-19536(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + -19536);
	f0.f64 = double(temp.f32);
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// lfs f28,2944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	f28.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// addi r28,r11,25204
	r28.s64 = r11.s64 + 25204;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r6,112(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// stw r31,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// stw r24,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r24.u32);
	// subfic r11,r11,285
	xer.ca = r11.u32 <= 285;
	r11.s64 = 285 - r11.s64;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r25,r3
	r25.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39979
	ctx.r3.u64 = ctx.r3.u64 | 39979;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r23,197
	r23.s64 = 197;
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// stw r26,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r26.u32);
	// li r7,50
	ctx.r7.s64 = 50;
	// li r6,225
	ctx.r6.s64 = 225;
	// li r5,355
	ctx.r5.s64 = 355;
	// li r4,214
	ctx.r4.s64 = 214;
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// li r3,55
	ctx.r3.s64 = 55;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// lis r25,-32141
	r25.s64 = -2106392576;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// li r7,100
	ctx.r7.s64 = 100;
	// addi r6,r11,28
	ctx.r6.s64 = r11.s64 + 28;
	// lfs f0,-19532(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -19532);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fsqrts f0,f0
	f0.f64 = double(float(sqrt(f0.f64)));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// addi r4,r11,17
	ctx.r4.s64 = r11.s64 + 17;
	// li r3,55
	ctx.r3.s64 = 55;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// subfic r5,r10,55
	xer.ca = ctx.r10.u32 <= 55;
	ctx.r5.s64 = 55 - ctx.r10.s64;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// lwz r11,-304(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f8840
	if (cr6.getEQ()) goto loc_820F8840;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r7,50
	ctx.r7.s64 = 50;
	// li r5,199
	ctx.r5.s64 = 199;
	// addi r6,r11,14
	ctx.r6.s64 = r11.s64 + 14;
	// addi r4,r11,-1
	ctx.r4.s64 = r11.s64 + -1;
	// li r3,55
	ctx.r3.s64 = 55;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820F8840:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r22,r3
	r22.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// mr r10,r22
	ctx.r10.u64 = r22.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lfs f0,-19532(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -19532);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r6,112(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// stw r31,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// subfic r11,r11,285
	xer.ca = r11.u32 <= 285;
	r11.s64 = 285 - r11.s64;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r25,r3
	r25.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39980
	ctx.r3.u64 = ctx.r3.u64 | 39980;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r23,230
	r23.s64 = 230;
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// stw r26,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r26.u32);
	// li r7,50
	ctx.r7.s64 = 50;
	// li r6,258
	ctx.r6.s64 = 258;
	// li r5,355
	ctx.r5.s64 = 355;
	// li r4,247
	ctx.r4.s64 = 247;
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// li r3,55
	ctx.r3.s64 = 55;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// lis r25,-32141
	r25.s64 = -2106392576;
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r7,100
	ctx.r7.s64 = 100;
	// addi r6,r11,28
	ctx.r6.s64 = r11.s64 + 28;
	// addi r4,r11,17
	ctx.r4.s64 = r11.s64 + 17;
	// lfs f0,-19528(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -19528);
	f0.f64 = double(temp.f32);
	// li r3,55
	ctx.r3.s64 = 55;
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fsqrts f0,f0
	f0.f64 = double(float(sqrt(f0.f64)));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// subfic r5,r10,55
	xer.ca = ctx.r10.u32 <= 55;
	ctx.r5.s64 = 55 - ctx.r10.s64;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// lwz r11,-588(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -588);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f89b4
	if (cr6.getEQ()) goto loc_820F89B4;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r7,50
	ctx.r7.s64 = 50;
	// li r5,199
	ctx.r5.s64 = 199;
	// addi r6,r11,14
	ctx.r6.s64 = r11.s64 + 14;
	// addi r4,r11,-1
	ctx.r4.s64 = r11.s64 + -1;
	// li r3,55
	ctx.r3.s64 = 55;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820F89B4:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r22,r3
	r22.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// mr r10,r22
	ctx.r10.u64 = r22.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-19528(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -19528);
	f0.f64 = double(temp.f32);
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// lfs f13,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	ctx.f13.f64 = double(temp.f32);
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r6,112(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// stw r31,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// subfic r11,r11,285
	xer.ca = r11.u32 <= 285;
	r11.s64 = 285 - r11.s64;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r25,r3
	r25.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,39977
	ctx.r3.u64 = ctx.r3.u64 | 39977;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r24,263
	r24.s64 = 263;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// stw r26,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r26.u32);
	// li r7,50
	ctx.r7.s64 = 50;
	// li r6,291
	ctx.r6.s64 = 291;
	// li r5,355
	ctx.r5.s64 = 355;
	// li r4,280
	ctx.r4.s64 = 280;
	// stw r24,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r24.u32);
	// li r3,55
	ctx.r3.s64 = 55;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// lis r26,-32010
	r26.s64 = -2097807360;
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r7,100
	ctx.r7.s64 = 100;
	// addi r6,r11,28
	ctx.r6.s64 = r11.s64 + 28;
	// addi r4,r11,17
	ctx.r4.s64 = r11.s64 + 17;
	// lfs f0,4172(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + 4172);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// subfic r5,r10,55
	xer.ca = ctx.r10.u32 <= 55;
	ctx.r5.s64 = 55 - ctx.r10.s64;
	// li r3,55
	ctx.r3.s64 = 55;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f8b28
	if (cr6.getEQ()) goto loc_820F8B28;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r7,50
	ctx.r7.s64 = 50;
	// li r5,199
	ctx.r5.s64 = 199;
	// addi r6,r11,14
	ctx.r6.s64 = r11.s64 + 14;
	// addi r4,r11,-1
	ctx.r4.s64 = r11.s64 + -1;
	// li r3,55
	ctx.r3.s64 = 55;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820F8B28:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lfs f0,4172(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + 4172);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r6,112(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// stw r31,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// stw r24,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r24.u32);
	// subfic r11,r11,285
	xer.ca = r11.u32 <= 285;
	r11.s64 = 285 - r11.s64;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// bl 0x820eacd8
	sub_820EACD8(ctx, base);
	// bl 0x820ec830
	sub_820EC830(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820eae68
	sub_820EAE68(ctx, base);
	// bl 0x820ec700
	sub_820EC700(ctx, base);
	// addi r1,r1,6272
	ctx.r1.s64 = ctx.r1.s64 + 6272;
	// addi r12,r1,-88
	r12.s64 = ctx.r1.s64 + -88;
	// bl 0x823ed594
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_820F8C28"))) PPC_WEAK_FUNC(sub_820F8C28);
PPC_FUNC_IMPL(__imp__sub_820F8C28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// lis r27,-32010
	r27.s64 = -2097807360;
	// stw r11,4008(r28)
	PPC_STORE_U32(r28.u32 + 4008, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r10,4040(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4040);
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// stw r11,4004(r30)
	PPC_STORE_U32(r30.u32 + 4004, r11.u32);
	// stw r11,4000(r29)
	PPC_STORE_U32(r29.u32 + 4000, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lwz r11,-19580(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19580);
	// ble cr6,0x820f8cd8
	if (!cr6.getGT()) goto loc_820F8CD8;
	// lis r9,-32141
	ctx.r9.s64 = -2106392576;
	// lfs f0,-19584(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f12,24796(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 24796);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x820f8ca0
	if (!cr6.getGT()) goto loc_820F8CA0;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4008(r28)
	PPC_STORE_U32(r28.u32 + 4008, r11.u32);
	// b 0x820f8cf8
	goto loc_820F8CF8;
loc_820F8CA0:
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f13,24804(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 24804);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f8cd0
	if (!cr6.getGT()) goto loc_820F8CD0;
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// bgt cr6,0x820f8cd0
	if (cr6.getGT()) goto loc_820F8CD0;
	// addi r9,r11,-1
	ctx.r9.s64 = r11.s64 + -1;
	// cmpw cr6,r10,r9
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, xer);
	// bge cr6,0x820f8cd0
	if (!cr6.getLT()) goto loc_820F8CD0;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4004(r30)
	PPC_STORE_U32(r30.u32 + 4004, r11.u32);
	// b 0x820f8cf8
	goto loc_820F8CF8;
loc_820F8CD0:
	// fcmpu cr6,f0,f13
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f8cf0
	if (!cr6.getGT()) goto loc_820F8CF0;
loc_820F8CD8:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bge cr6,0x820f8cf0
	if (!cr6.getLT()) goto loc_820F8CF0;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4004(r30)
	PPC_STORE_U32(r30.u32 + 4004, r11.u32);
	// b 0x820f8cf8
	goto loc_820F8CF8;
loc_820F8CF0:
	// li r11,1
	r11.s64 = 1;
	// stw r11,4000(r29)
	PPC_STORE_U32(r29.u32 + 4000, r11.u32);
loc_820F8CF8:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// li r4,4096
	ctx.r4.s64 = 4096;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r25,-32010
	r25.s64 = -2097807360;
	// lis r26,-32010
	r26.s64 = -2097807360;
	// beq cr6,0x820f8d40
	if (cr6.getEQ()) goto loc_820F8D40;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,5816
	ctx.r8.s64 = 5816;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// li r11,1
	r11.s64 = 1;
	// stw r11,3992(r26)
	PPC_STORE_U32(r26.u32 + 3992, r11.u32);
	// b 0x820f8e1c
	goto loc_820F8E1C;
loc_820F8D40:
	// lis r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f8dcc
	if (cr6.getEQ()) goto loc_820F8DCC;
	// lwz r11,4004(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4004);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f8d78
	if (cr6.getEQ()) goto loc_820F8D78;
	// lwz r11,4040(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4040);
	// li r8,5839
	ctx.r8.s64 = 5839;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,4040(r27)
	PPC_STORE_U32(r27.u32 + 4040, r11.u32);
	// b 0x820f8e04
	goto loc_820F8E04;
loc_820F8D78:
	// lwz r11,4008(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4008);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f8db0
	if (cr6.getEQ()) goto loc_820F8DB0;
	// lwz r11,4040(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4040);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820f8da0
	if (!cr6.getGT()) goto loc_820F8DA0;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// li r8,5839
	ctx.r8.s64 = 5839;
	// stw r11,4040(r27)
	PPC_STORE_U32(r27.u32 + 4040, r11.u32);
	// b 0x820f8e04
	goto loc_820F8E04;
loc_820F8DA0:
	// li r11,1
	r11.s64 = 1;
	// li r8,5839
	ctx.r8.s64 = 5839;
	// stw r11,3996(r25)
	PPC_STORE_U32(r25.u32 + 3996, r11.u32);
	// b 0x820f8e04
	goto loc_820F8E04;
loc_820F8DB0:
	// lwz r11,4000(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4000);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f8dc4
	if (cr6.getEQ()) goto loc_820F8DC4;
	// li r11,1
	r11.s64 = 1;
	// stw r11,3992(r26)
	PPC_STORE_U32(r26.u32 + 3992, r11.u32);
loc_820F8DC4:
	// li r8,5839
	ctx.r8.s64 = 5839;
	// b 0x820f8e04
	goto loc_820F8E04;
loc_820F8DCC:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f8e28
	if (cr6.getEQ()) goto loc_820F8E28;
	// lwz r11,4040(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4040);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820f8df8
	if (!cr6.getGT()) goto loc_820F8DF8;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,4040(r27)
	PPC_STORE_U32(r27.u32 + 4040, r11.u32);
	// b 0x820f8e00
	goto loc_820F8E00;
loc_820F8DF8:
	// li r11,1
	r11.s64 = 1;
	// stw r11,3996(r25)
	PPC_STORE_U32(r25.u32 + 3996, r11.u32);
loc_820F8E00:
	// li r8,5851
	ctx.r8.s64 = 5851;
loc_820F8E04:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
loc_820F8E1C:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F8E28:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,4040(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4040);
	// cntlzw r9,r11
	ctx.r9.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rlwinm r30,r9,27,31,31
	r30.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r9,48(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820f8e6c
	if (cr6.getEQ()) goto loc_820F8E6C;
	// rotlwi r4,r9,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// lwz r11,4040(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4040);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F8E6C:
	// lis r28,-32141
	r28.s64 = -2106392576;
	// lwz r9,8(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r29,r10,-19088
	r29.s64 = ctx.r10.s64 + -19088;
	// rlwinm r30,r11,27,31,31
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lwz r10,-19596(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -19596);
	// mulli r8,r10,28
	ctx.r8.s64 = ctx.r10.s64 * 28;
	// lwz r10,8(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 8);
	// addi r9,r29,20
	ctx.r9.s64 = r29.s64 + 20;
	// lwzx r11,r8,r9
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r9.u32);
	// addi r11,r11,22
	r11.s64 = r11.s64 + 22;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r10,r11
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820f8ebc
	if (cr6.getEQ()) goto loc_820F8EBC;
	// rotlwi r4,r9,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F8EBC:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f8ee4
	if (cr6.getEQ()) goto loc_820F8EE4;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F8EE4:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f8f0c
	if (cr6.getEQ()) goto loc_820F8F0C;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F8F0C:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f8f34
	if (cr6.getEQ()) goto loc_820F8F34;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F8F34:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,24(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f8f58
	if (cr6.getEQ()) goto loc_820F8F58;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_820F8F58:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// lwz r11,3992(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 3992);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f8f8c
	if (cr6.getEQ()) goto loc_820F8F8C;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4148(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4148, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,12
	r11.s64 = 12;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
loc_820F8F8C:
	// lwz r11,3996(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 3996);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f8fc4
	if (cr6.getEQ()) goto loc_820F8FC4;
	// lwz r11,-19596(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -19596);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mulli r9,r11,28
	ctx.r9.s64 = r11.s64 * 28;
	// li r11,2
	r11.s64 = 2;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,8
	r11.s64 = 8;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// addi r11,r29,20
	r11.s64 = r29.s64 + 20;
	// lwzx r3,r9,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// bl 0x820f0c30
	sub_820F0C30(ctx, base);
loc_820F8FC4:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_820F8FD0"))) PPC_WEAK_FUNC(sub_820F8FD0);
PPC_FUNC_IMPL(__imp__sub_820F8FD0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -72, f31.u64);
	// ld r12,-4096(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// stwu r1,-6208(r1)
	ea = -6208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f4,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f4.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// bl 0x82098290
	sub_82098290(ctx, base);
	// bl 0x820f5898
	sub_820F5898(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r31,r30
	r31.u64 = r30.u64;
	// bl 0x820f5fb8
	sub_820F5FB8(ctx, base);
	// lis r26,-32010
	r26.s64 = -2097807360;
	// lwz r11,4040(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4040);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bgt cr6,0x820f9090
	if (cr6.getGT()) goto loc_820F9090;
	// lis r12,-32240
	r12.s64 = -2112880640;
	// addi r12,r12,-28612
	r12.s64 = r12.s64 + -28612;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820F9050;
	case 1:
		goto loc_820F905C;
	case 2:
		goto loc_820F9068;
	case 3:
		goto loc_820F9074;
	case 4:
		goto loc_820F9080;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-28592(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -28592);
	// lwz r16,-28580(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -28580);
	// lwz r16,-28568(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -28568);
	// lwz r16,-28556(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -28556);
	// lwz r16,-28544(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -28544);
loc_820F9050:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40029
	ctx.r3.u64 = ctx.r3.u64 | 40029;
	// b 0x820f9088
	goto loc_820F9088;
loc_820F905C:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40030
	ctx.r3.u64 = ctx.r3.u64 | 40030;
	// b 0x820f9088
	goto loc_820F9088;
loc_820F9068:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40031
	ctx.r3.u64 = ctx.r3.u64 | 40031;
	// b 0x820f9088
	goto loc_820F9088;
loc_820F9074:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40032
	ctx.r3.u64 = ctx.r3.u64 | 40032;
	// b 0x820f9088
	goto loc_820F9088;
loc_820F9080:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40033
	ctx.r3.u64 = ctx.r3.u64 | 40033;
loc_820F9088:
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
loc_820F9090:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r27,55
	r27.s64 = 55;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// li r11,143
	r11.s64 = 143;
	// stw r27,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r27.u32);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r25,r3
	r25.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r28,-31994
	r28.s64 = -2096758784;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lis r29,-31991
	r29.s64 = -2096562176;
	// stw r30,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r30.u32);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r30.u32);
	// li r8,255
	ctx.r8.s64 = 255;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lwz r6,-31556(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31556);
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lwz r11,4040(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4040);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f910c
	if (!cr6.getEQ()) goto loc_820F910C;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// li r3,167
	ctx.r3.s64 = 167;
	// bl 0x820f62b8
	sub_820F62B8(ctx, base);
	// b 0x820f91d4
	goto loc_820F91D4;
loc_820F910C:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bgt cr6,0x820f9184
	if (cr6.getGT()) goto loc_820F9184;
	// lis r12,-32240
	r12.s64 = -2112880640;
	// addi r12,r12,-28368
	r12.s64 = r12.s64 + -28368;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820F9140;
	case 1:
		goto loc_820F9150;
	case 2:
		goto loc_820F9160;
	case 3:
		goto loc_820F9170;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-28352(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -28352);
	// lwz r16,-28336(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -28336);
	// lwz r16,-28320(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -28320);
	// lwz r16,-28304(r15)
	r16.u64 = PPC_LOAD_U32(r15.u32 + -28304);
loc_820F9140:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,3912(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 3912);
	// lhz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// b 0x820f917c
	goto loc_820F917C;
loc_820F9150:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,3912(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 3912);
	// lhz r3,2(r11)
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// b 0x820f917c
	goto loc_820F917C;
loc_820F9160:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,3912(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 3912);
	// lhz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + 4);
	// b 0x820f917c
	goto loc_820F917C;
loc_820F9170:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,3912(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 3912);
	// lhz r3,6(r11)
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + 6);
loc_820F917C:
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
loc_820F9184:
	// li r11,167
	r11.s64 = 167;
	// stw r27,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r27.u32);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// li r9,320
	ctx.r9.s64 = 320;
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31556);
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r30,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r30.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r30.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
loc_820F91D4:
	// bl 0x820eacd8
	sub_820EACD8(ctx, base);
	// bl 0x820ec830
	sub_820EC830(ctx, base);
	// lwz r11,4040(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4040);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bge cr6,0x820f91f0
	if (!cr6.getLT()) goto loc_820F91F0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820eae68
	sub_820EAE68(ctx, base);
loc_820F91F0:
	// bl 0x820ec700
	sub_820EC700(ctx, base);
	// addi r1,r1,6208
	ctx.r1.s64 = ctx.r1.s64 + 6208;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_820F9200"))) PPC_WEAK_FUNC(sub_820F9200);
PPC_FUNC_IMPL(__imp__sub_820F9200) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// lis r30,-32010
	r30.s64 = -2097807360;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// stw r11,4004(r30)
	PPC_STORE_U32(r30.u32 + 4004, r11.u32);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// stw r11,4008(r29)
	PPC_STORE_U32(r29.u32 + 4008, r11.u32);
	// ble cr6,0x820f926c
	if (!cr6.getGT()) goto loc_820F926C;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x820f9264
	if (!cr6.getGT()) goto loc_820F9264;
	// li r28,1
	r28.s64 = 1;
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,4008(r29)
	PPC_STORE_U32(r29.u32 + 4008, r11.u32);
	// b 0x820f9278
	goto loc_820F9278;
loc_820F9264:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24804(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24804);
	ctx.f13.f64 = double(temp.f32);
loc_820F926C:
	// li r28,1
	r28.s64 = 1;
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,4004(r30)
	PPC_STORE_U32(r30.u32 + 4004, r11.u32);
loc_820F9278:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r26,-32010
	r26.s64 = -2097807360;
	// lis r27,-32010
	r27.s64 = -2097807360;
	// beq cr6,0x820f92e4
	if (cr6.getEQ()) goto loc_820F92E4;
	// lwz r11,4008(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4008);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f92b0
	if (cr6.getEQ()) goto loc_820F92B0;
	// li r8,6058
	ctx.r8.s64 = 6058;
	// b 0x820f92fc
	goto loc_820F92FC;
loc_820F92B0:
	// lwz r11,4004(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4004);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f9328
	if (cr6.getEQ()) goto loc_820F9328;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,6063
	ctx.r8.s64 = 6063;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,3992(r26)
	PPC_STORE_U32(r26.u32 + 3992, r11.u32);
	// b 0x820f931c
	goto loc_820F931C;
loc_820F92E4:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f9328
	if (cr6.getEQ()) goto loc_820F9328;
	// li r8,6069
	ctx.r8.s64 = 6069;
loc_820F92FC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,3996(r27)
	PPC_STORE_U32(r27.u32 + 3996, r11.u32);
loc_820F931C:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F9328:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f935c
	if (cr6.getEQ()) goto loc_820F935C;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F935C:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f9380
	if (cr6.getEQ()) goto loc_820F9380;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F9380:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f93a4
	if (cr6.getEQ()) goto loc_820F93A4;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F93A4:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,24(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f93c4
	if (cr6.getEQ()) goto loc_820F93C4;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
loc_820F93C4:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// lwz r11,3992(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 3992);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f9404
	if (cr6.getEQ()) goto loc_820F9404;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,14
	r11.s64 = 14;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_820F9404:
	// lwz r11,3996(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 3996);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f9448
	if (cr6.getEQ()) goto loc_820F9448;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// lis r9,-32010
	ctx.r9.s64 = -2097807360;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-19088
	r11.s64 = r11.s64 + -19088;
	// lwz r10,-19596(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -19596);
	// addi r11,r11,20
	r11.s64 = r11.s64 + 20;
	// mulli r8,r10,28
	ctx.r8.s64 = ctx.r10.s64 * 28;
	// lwzx r3,r8,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// stw r10,4116(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4116, ctx.r10.u32);
	// lis r9,-32010
	ctx.r9.s64 = -2097807360;
	// li r10,8
	ctx.r10.s64 = 8;
	// stw r10,4120(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4120, ctx.r10.u32);
	// bl 0x820f0c30
	sub_820F0C30(ctx, base);
loc_820F9448:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820F9450"))) PPC_WEAK_FUNC(sub_820F9450);
PPC_FUNC_IMPL(__imp__sub_820F9450) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// ld r12,-4096(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// stwu r1,-6192(r1)
	ea = -6192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820f5898
	sub_820F5898(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x820f5fb8
	sub_820F5FB8(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40034
	ctx.r3.u64 = ctx.r3.u64 | 40034;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r27,55
	r27.s64 = 55;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// li r11,143
	r11.s64 = 143;
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r27.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r31,0
	r31.s64 = 0;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// lis r30,-31991
	r30.s64 = -2096562176;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40035
	ctx.r3.u64 = ctx.r3.u64 | 40035;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r31.u32);
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// li r26,167
	r26.s64 = 167;
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r27.u32);
	// stw r26,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r26.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4052(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4052);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f957c
	if (cr6.getEQ()) goto loc_820F957C;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40036
	ctx.r3.u64 = ctx.r3.u64 | 40036;
	// b 0x820f95bc
	goto loc_820F95BC;
loc_820F957C:
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,4048(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4048);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f9598
	if (cr6.getEQ()) goto loc_820F9598;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40037
	ctx.r3.u64 = ctx.r3.u64 | 40037;
	// b 0x820f95bc
	goto loc_820F95BC;
loc_820F9598:
	// bl 0x820ecc88
	sub_820ECC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r3,0
	ctx.r3.s64 = 0;
	// beq cr6,0x820f95b8
	if (cr6.getEQ()) goto loc_820F95B8;
	// ori r3,r3,40038
	ctx.r3.u64 = ctx.r3.u64 | 40038;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r27,255
	r27.s64 = 255;
	// b 0x820f95c8
	goto loc_820F95C8;
loc_820F95B8:
	// ori r3,r3,40039
	ctx.r3.u64 = ctx.r3.u64 | 40039;
loc_820F95BC:
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r27,30720
	r27.s64 = 2013265920;
	// ori r27,r27,255
	r27.u64 = r27.u64 | 255;
loc_820F95C8:
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// stw r26,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r26.u32);
	// addi r11,r11,55
	r11.s64 = r11.s64 + 55;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// li r3,191
	ctx.r3.s64 = 191;
	// bl 0x820f62b8
	sub_820F62B8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820eae68
	sub_820EAE68(ctx, base);
	// bl 0x820ec830
	sub_820EC830(ctx, base);
	// bl 0x820ec700
	sub_820EC700(ctx, base);
	// addi r1,r1,6192
	ctx.r1.s64 = ctx.r1.s64 + 6192;
	// lfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820F9648"))) PPC_WEAK_FUNC(sub_820F9648);
PPC_FUNC_IMPL(__imp__sub_820F9648) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// lis r27,-32010
	r27.s64 = -2097807360;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// lis r30,-32141
	r30.s64 = -2106392576;
	// lis r22,-32010
	r22.s64 = -2097807360;
	// lis r24,-32141
	r24.s64 = -2106392576;
	// stw r11,4008(r27)
	PPC_STORE_U32(r27.u32 + 4008, r11.u32);
	// lis r23,-32141
	r23.s64 = -2106392576;
	// stw r11,4004(r28)
	PPC_STORE_U32(r28.u32 + 4004, r11.u32);
	// lwz r11,-19592(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -19592);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r25,r11,-19088
	r25.s64 = r11.s64 + -19088;
	// bge cr6,0x820f9738
	if (!cr6.getLT()) goto loc_820F9738;
	// lwz r11,4024(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 4024);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f9738
	if (!cr6.getEQ()) goto loc_820F9738;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lis r29,-32141
	r29.s64 = -2106392576;
	// lwz r11,4048(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4048);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f96c8
	if (cr6.getEQ()) goto loc_820F96C8;
	// lwz r11,-16036(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -16036);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820f96c8
	if (cr6.getLT()) goto loc_820F96C8;
	// lwz r10,-19596(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + -19596);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x820f9748
	if (cr6.getEQ()) goto loc_820F9748;
loc_820F96C8:
	// li r11,-1
	r11.s64 = -1;
	// stw r11,-16036(r29)
	PPC_STORE_U32(r29.u32 + -16036, r11.u32);
	// bl 0x820ecc88
	sub_820ECC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820f9748
	if (cr6.getEQ()) goto loc_820F9748;
	// lwz r11,-19596(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -19596);
	// addi r9,r25,20
	ctx.r9.s64 = r25.s64 + 20;
	// mulli r10,r11,28
	ctx.r10.s64 = r11.s64 * 28;
	// lwzx r31,r10,r9
	r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// rlwinm r10,r31,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// add r9,r31,r10
	ctx.r9.u64 = r31.u64 + ctx.r10.u64;
	// lwz r10,-19592(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -19592);
	// addi r11,r11,-16856
	r11.s64 = r11.s64 + -16856;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r10,r11
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820f9748
	if (!cr6.getGT()) goto loc_820F9748;
	// bl 0x820ea630
	sub_820EA630(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820e9630
	sub_820E9630(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820f9748
	if (!cr6.getEQ()) goto loc_820F9748;
	// lwz r11,-19596(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -19596);
	// stw r11,-16036(r29)
	PPC_STORE_U32(r29.u32 + -16036, r11.u32);
	// b 0x820f9748
	goto loc_820F9748;
loc_820F9738:
	// li r11,-1
	r11.s64 = -1;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// stw r11,-15664(r23)
	PPC_STORE_U32(r23.u32 + -15664, r11.u32);
	// stw r11,-16036(r10)
	PPC_STORE_U32(ctx.r10.u32 + -16036, r11.u32);
loc_820F9748:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24800(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24800);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820f9790
	if (!cr6.getGT()) goto loc_820F9790;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lfs f0,-19584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -19584);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,24796(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24796);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x820f9788
	if (!cr6.getGT()) goto loc_820F9788;
	// li r26,1
	r26.s64 = 1;
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,4008(r27)
	PPC_STORE_U32(r27.u32 + 4008, r11.u32);
	// b 0x820f979c
	goto loc_820F979C;
loc_820F9788:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,24804(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24804);
	ctx.f13.f64 = double(temp.f32);
loc_820F9790:
	// li r26,1
	r26.s64 = 1;
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,4004(r28)
	PPC_STORE_U32(r28.u32 + 4004, r11.u32);
loc_820F979C:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,40960
	ctx.r4.u64 = ctx.r4.u64 | 40960;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r30,-32010
	r30.s64 = -2097807360;
	// lis r29,-32010
	r29.s64 = -2097807360;
	// beq cr6,0x820f9808
	if (cr6.getEQ()) goto loc_820F9808;
	// lwz r11,4004(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4004);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f97f4
	if (cr6.getEQ()) goto loc_820F97F4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,6266
	ctx.r8.s64 = 6266;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,3992(r29)
	PPC_STORE_U32(r29.u32 + 3992, r11.u32);
	// b 0x820f9840
	goto loc_820F9840;
loc_820F97F4:
	// lwz r11,4008(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4008);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f984c
	if (cr6.getEQ()) goto loc_820F984C;
	// li r8,6271
	ctx.r8.s64 = 6271;
	// b 0x820f9820
	goto loc_820F9820;
loc_820F9808:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// lwz r3,4208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4208);
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820f984c
	if (cr6.getEQ()) goto loc_820F984C;
	// li r8,6277
	ctx.r8.s64 = 6277;
loc_820F9820:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r7,r11,24996
	ctx.r7.s64 = r11.s64 + 24996;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,3996(r30)
	PPC_STORE_U32(r30.u32 + 3996, r11.u32);
loc_820F9840:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,199
	ctx.r4.s64 = 199;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820F984C:
	// lis r31,-32010
	r31.s64 = -2097807360;
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// bl 0x820ec288
	sub_820EC288(ctx, base);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f9880
	if (cr6.getEQ()) goto loc_820F9880;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r26,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r26.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F9880:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f98a4
	if (cr6.getEQ()) goto loc_820F98A4;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r26,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r26.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F98A4:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f98c8
	if (cr6.getEQ()) goto loc_820F98C8;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r26,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r26.u32);
	// lwz r3,4168(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4168);
loc_820F98C8:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,24(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820f98e8
	if (cr6.getEQ()) goto loc_820F98E8;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stw r26,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r26.u32);
loc_820F98E8:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820ec448
	sub_820EC448(ctx, base);
	// lwz r11,3992(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 3992);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f9a20
	if (cr6.getEQ()) goto loc_820F9A20;
	// bl 0x820ecc88
	sub_820ECC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820f99f4
	if (cr6.getEQ()) goto loc_820F99F4;
	// lwz r11,4024(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 4024);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820f99f4
	if (!cr6.getEQ()) goto loc_820F99F4;
	// lwz r10,-15664(r23)
	ctx.r10.u64 = PPC_LOAD_U32(r23.u32 + -15664);
	// lwz r11,-19596(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -19596);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// beq cr6,0x820f99f4
	if (cr6.getEQ()) goto loc_820F99F4;
	// mulli r10,r11,28
	ctx.r10.s64 = r11.s64 * 28;
	// addi r9,r25,20
	ctx.r9.s64 = r25.s64 + 20;
	// lwzx r3,r10,r9
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// cmpwi cr6,r3,17
	cr6.compare<int32_t>(ctx.r3.s32, 17, xer);
	// bne cr6,0x820f9964
	if (!cr6.getEQ()) goto loc_820F9964;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,4148(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4148, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,12
	r11.s64 = 12;
	// stw r11,-19616(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19616, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,54
	r11.s64 = 54;
	// stw r11,-19600(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19600, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed170
	return;
loc_820F9964:
	// ble cr6,0x820f998c
	if (!cr6.getGT()) goto loc_820F998C;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,8
	r11.s64 = 8;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// bl 0x820f0c30
	sub_820F0C30(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed170
	return;
loc_820F998C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r9,r25,4
	ctx.r9.s64 = r25.s64 + 4;
	// mulli r10,r11,28
	ctx.r10.s64 = r11.s64 * 28;
	// lhzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820f99cc
	if (cr6.getEQ()) goto loc_820F99CC;
loc_820F99A4:
	// addi r9,r25,8
	ctx.r9.s64 = r25.s64 + 8;
	// lwzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x820f99cc
	if (!cr6.getLT()) goto loc_820F99CC;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r9,r25,4
	ctx.r9.s64 = r25.s64 + 4;
	// mulli r10,r11,28
	ctx.r10.s64 = r11.s64 * 28;
	// lhzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820f99a4
	if (!cr6.getEQ()) goto loc_820F99A4;
loc_820F99CC:
	// mulli r10,r11,28
	ctx.r10.s64 = r11.s64 * 28;
	// addi r9,r25,4
	ctx.r9.s64 = r25.s64 + 4;
	// lhzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820f99f4
	if (cr6.getEQ()) goto loc_820F99F4;
	// stw r11,-19596(r24)
	PPC_STORE_U32(r24.u32 + -19596, r11.u32);
	// addi r11,r25,8
	r11.s64 = r25.s64 + 8;
	// lis r9,-32141
	ctx.r9.s64 = -2106392576;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// stw r11,-19600(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19600, r11.u32);
loc_820F99F4:
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// li r11,11
	r11.s64 = 11;
	// stw r11,-19612(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19612, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed170
	return;
loc_820F9A20:
	// lwz r11,3996(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 3996);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f9a58
	if (cr6.getEQ()) goto loc_820F9A58;
	// lwz r11,-19596(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -19596);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mulli r9,r11,28
	ctx.r9.s64 = r11.s64 * 28;
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,4116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4116, r11.u32);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,8
	r11.s64 = 8;
	// stw r11,4120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4120, r11.u32);
	// addi r11,r25,20
	r11.s64 = r25.s64 + 20;
	// lwzx r3,r9,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// bl 0x820f0c30
	sub_820F0C30(ctx, base);
loc_820F9A58:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_820F9A60"))) PPC_WEAK_FUNC(sub_820F9A60);
PPC_FUNC_IMPL(__imp__sub_820F9A60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed548
	// ld r12,-4096(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// stwu r1,-6352(r1)
	ea = -6352 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820f5898
	sub_820F5898(ctx, base);
	// bl 0x820b57f8
	sub_820B57F8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// bl 0x820a6888
	sub_820A6888(ctx, base);
	// stw r3,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r3.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a6670
	sub_820A6670(ctx, base);
	// mr r15,r3
	r15.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a6670
	sub_820A6670(ctx, base);
	// mr r20,r3
	r20.u64 = ctx.r3.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820a6670
	sub_820A6670(ctx, base);
	// mr r19,r3
	r19.u64 = ctx.r3.u64;
	// li r3,3
	ctx.r3.s64 = 3;
	// bl 0x820a6670
	sub_820A6670(ctx, base);
	// mr r18,r3
	r18.u64 = ctx.r3.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x820a6670
	sub_820A6670(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r3,5
	ctx.r3.s64 = 5;
	// bl 0x820a6670
	sub_820A6670(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r3,6
	ctx.r3.s64 = 6;
	// bl 0x820a6670
	sub_820A6670(ctx, base);
	// add r11,r3,r30
	r11.u64 = ctx.r3.u64 + r30.u64;
	// add r17,r30,r31
	r17.u64 = r30.u64 + r31.u64;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// add r11,r11,r18
	r11.u64 = r11.u64 + r18.u64;
	// add r11,r11,r19
	r11.u64 = r11.u64 + r19.u64;
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// add r11,r17,r18
	r11.u64 = r17.u64 + r18.u64;
	// add r11,r11,r19
	r11.u64 = r11.u64 + r19.u64;
	// add r14,r11,r20
	r14.u64 = r11.u64 + r20.u64;
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// bgt cr6,0x820f9b10
	if (cr6.getGT()) goto loc_820F9B10;
	// li r14,1
	r14.s64 = 1;
loc_820F9B10:
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x820f5fb8
	sub_820F5FB8(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40040
	ctx.r3.u64 = ctx.r3.u64 | 40040;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r22,55
	r22.s64 = 55;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// li r11,143
	r11.s64 = 143;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r31,0
	r31.s64 = 0;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// lis r30,-31991
	r30.s64 = -2096562176;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// addi r4,r1,148
	ctx.r4.s64 = ctx.r1.s64 + 148;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// stw r31,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r31.u32);
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40041
	ctx.r3.u64 = ctx.r3.u64 | 40041;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r21,167
	r21.s64 = 167;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// stw r21,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r21.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r11,-30584
	r11.s64 = -2004353024;
	// ori r28,r11,34953
	r28.u64 = r11.u64 | 34953;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r3,4208(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4208);
	// mulhw r11,r27,r28
	r11.s64 = (int64_t(r27.s32) * int64_t(r28.s32)) >> 32;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r26,r11,r10
	r26.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820f9c50
	if (cr6.getEQ()) goto loc_820F9C50;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// b 0x820f9c54
	goto loc_820F9C54;
loc_820F9C50:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
loc_820F9C54:
	// lis r25,-32141
	r25.s64 = -2106392576;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lis r16,-32141
	r16.s64 = -2106392576;
	// addi r24,r11,-19088
	r24.s64 = r11.s64 + -19088;
	// lwz r11,-19596(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -19596);
	// addi r10,r24,20
	ctx.r10.s64 = r24.s64 + 20;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// lwz r5,-19592(r16)
	ctx.r5.u64 = PPC_LOAD_U32(r16.u32 + -19592);
	// lwzx r4,r11,r10
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x820e92c0
	sub_820E92C0(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x820f9c90
	if (cr6.getEQ()) goto loc_820F9C90;
	// cmpwi cr6,r27,1023
	cr6.compare<int32_t>(r27.s32, 1023, xer);
	// blt cr6,0x820f9c94
	if (cr6.getLT()) goto loc_820F9C94;
loc_820F9C90:
	// li r27,-1
	r27.s64 = -1;
loc_820F9C94:
	// lwz r7,-19592(r16)
	ctx.r7.u64 = PPC_LOAD_U32(r16.u32 + -19592);
	// cmpwi cr6,r7,2
	cr6.compare<int32_t>(ctx.r7.s32, 2, xer);
	// ble cr6,0x820f9ca4
	if (!cr6.getGT()) goto loc_820F9CA4;
	// li r7,2
	ctx.r7.s64 = 2;
loc_820F9CA4:
	// lwz r11,-19596(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -19596);
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// sth r31,160(r1)
	PPC_STORE_U16(ctx.r1.u32 + 160, r31.u16);
	// mulli r10,r11,28
	ctx.r10.s64 = r11.s64 * 28;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r9,r11,-16856
	ctx.r9.s64 = r11.s64 + -16856;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r25,r11,25372
	r25.s64 = r11.s64 + 25372;
	// addi r11,r24,20
	r11.s64 = r24.s64 + 20;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// mulhw r10,r26,r28
	ctx.r10.s64 = (int64_t(r26.s32) * int64_t(r28.s32)) >> 32;
	// rlwinm r8,r11,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 + r26.u64;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// srawi r10,r10,5
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1F) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 5;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r9
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r9.u32);
	// extsh r24,r11
	r24.s64 = r11.s16;
	// rlwinm r11,r10,1,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r6,r10,r11
	ctx.r6.u64 = ctx.r10.u64 + r11.u64;
	// mulli r11,r6,60
	r11.s64 = ctx.r6.s64 * 60;
	// subf r7,r11,r26
	ctx.r7.s64 = r26.s64 - r11.s64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// li r23,130
	r23.s64 = 130;
	// stw r21,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r21.u32);
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,2796(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 2796);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820f9dd0
	if (cr6.getEQ()) goto loc_820F9DD0;
	// lis r3,0
	ctx.r3.s64 = 0;
	// sth r31,160(r1)
	PPC_STORE_U16(ctx.r1.u32 + 160, r31.u16);
	// ori r3,r3,40211
	ctx.r3.u64 = ctx.r3.u64 | 40211;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// addi r5,r11,25332
	ctx.r5.s64 = r11.s64 + 25332;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// stw r21,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r21.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r8,-24576
	ctx.r8.s64 = -1610612736;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// ori r8,r8,255
	ctx.r8.u64 = ctx.r8.u64 | 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
loc_820F9DD0:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// ble cr6,0x820f9f5c
	if (!cr6.getGT()) goto loc_820F9F5C;
	// lwz r11,-19592(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + -19592);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x820f9f5c
	if (cr6.getEQ()) goto loc_820F9F5C;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40210
	ctx.r3.u64 = ctx.r3.u64 | 40210;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// addi r11,r11,169
	r11.s64 = r11.s64 + 169;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r21,r3
	r21.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// mulhw r11,r24,r28
	r11.s64 = (int64_t(r24.s32) * int64_t(r28.s32)) >> 32;
	// sth r31,160(r1)
	PPC_STORE_U16(ctx.r1.u32 + 160, r31.u16);
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// mulli r11,r6,60
	r11.s64 = ctx.r6.s64 * 60;
	// subf r7,r11,r24
	ctx.r7.s64 = r24.s64 - r11.s64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// addi r11,r11,169
	r11.s64 = r11.s64 + 169;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// cmplwi cr6,r27,1022
	cr6.compare<uint32_t>(r27.u32, 1022, xer);
	// bgt cr6,0x820fa03c
	if (cr6.getGT()) goto loc_820FA03C;
	// mulhw r11,r27,r28
	r11.s64 = (int64_t(r27.s32) * int64_t(r28.s32)) >> 32;
	// sth r31,160(r1)
	PPC_STORE_U16(ctx.r1.u32 + 160, r31.u16);
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// lis r3,0
	ctx.r3.s64 = 0;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// ori r3,r3,40209
	ctx.r3.u64 = ctx.r3.u64 | 40209;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r28,r11,r10
	r28.u64 = r11.u64 + ctx.r10.u64;
	// mulli r11,r28,60
	r11.s64 = r28.s64 * 60;
	// subf r27,r11,r27
	r27.s64 = r27.s64 - r11.s64;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r5,r11,25272
	ctx.r5.s64 = r11.s64 + 25272;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// addi r11,r11,169
	r11.s64 = r11.s64 + 169;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// b 0x820fa03c
	goto loc_820FA03C;
loc_820F9F5C:
	// cmplwi cr6,r27,1022
	cr6.compare<uint32_t>(r27.u32, 1022, xer);
	// bgt cr6,0x820fa03c
	if (cr6.getGT()) goto loc_820FA03C;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40209
	ctx.r3.u64 = ctx.r3.u64 | 40209;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// addi r11,r11,169
	r11.s64 = r11.s64 + 169;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r24,r3
	r24.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r24
	ctx.r10.u64 = r24.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// mulhw r11,r27,r28
	r11.s64 = (int64_t(r27.s32) * int64_t(r28.s32)) >> 32;
	// sth r31,160(r1)
	PPC_STORE_U16(ctx.r1.u32 + 160, r31.u16);
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// mulli r11,r6,60
	r11.s64 = ctx.r6.s64 * 60;
	// subf r7,r11,r27
	ctx.r7.s64 = r27.s64 - r11.s64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// addi r11,r11,169
	r11.s64 = r11.s64 + 169;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
loc_820FA03C:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40042
	ctx.r3.u64 = ctx.r3.u64 | 40042;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r28,204
	r28.s64 = 204;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r28.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// lfs f28,2944(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	f28.f64 = double(temp.f32);
	// ble cr6,0x820fa0dc
	if (!cr6.getGT()) goto loc_820FA0DC;
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// extsw r10,r15
	ctx.r10.s64 = r15.s32;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r10,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, ctx.r10.u64);
	// std r11,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, r11.u64);
	// lfd f13,136(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lfd f0,128(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fdivs f1,f0,f13
	ctx.f1.f64 = double(float(f0.f64 / ctx.f13.f64));
	// b 0x820fa0e4
	goto loc_820FA0E4;
loc_820FA0DC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
loc_820FA0E4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfd f1,40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f1.u64);
	// li r4,3000
	ctx.r4.s64 = 3000;
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// addi r5,r11,25256
	ctx.r5.s64 = r11.s64 + 25256;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r28.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40043
	ctx.r3.u64 = ctx.r3.u64 | 40043;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r28,220
	r28.s64 = 220;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r28.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r27,r11,3952
	r27.s64 = r11.s64 + 3952;
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// bl 0x820a4308
	sub_820A4308(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820fa210
	if (!cr6.getGT()) goto loc_820FA210;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bne cr6,0x820fa210
	if (!cr6.getEQ()) goto loc_820FA210;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// addi r27,r11,25244
	r27.s64 = r11.s64 + 25244;
	// bl 0x823edbb8
	sub_823EDBB8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// subfic r26,r11,3000
	xer.ca = r11.u32 <= 3000;
	r26.s64 = 3000 - r11.s64;
	// bl 0x823edbb8
	sub_823EDBB8(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r1,160
	ctx.r10.s64 = ctx.r1.s64 + 160;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// addi r3,r11,-2
	ctx.r3.s64 = r11.s64 + -2;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
loc_820FA210:
	// li r11,190
	r11.s64 = 190;
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r28.u32);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40044
	ctx.r3.u64 = ctx.r3.u64 | 40044;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r25,244
	r25.s64 = 244;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// stw r25,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r25.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r6,r15
	ctx.r6.u64 = r15.u64;
	// addi r24,r11,25236
	r24.s64 = r11.s64 + 25236;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// stw r25,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r25.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40045
	ctx.r3.u64 = ctx.r3.u64 | 40045;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r26,180
	r26.s64 = 180;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// stw r25,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r25.u32);
	// stw r26,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r26.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// li r8,255
	ctx.r8.s64 = 255;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// extsw r11,r14
	r11.s64 = r14.s32;
	// extsw r10,r20
	ctx.r10.s64 = r20.s32;
	// std r11,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// std r10,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r10.u64);
	// lfs f29,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f29.f64 = double(temp.f32);
	// lfd f0,136(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// lfd f13,128(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fdivs f0,f0,f30
	f0.f64 = double(float(f0.f64 / f30.f64));
	// fadds f1,f0,f29
	ctx.f1.f64 = double(float(f0.f64 + f29.f64));
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// addi r28,r11,25216
	r28.s64 = r11.s64 + 25216;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r7,128(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// li r27,300
	r27.s64 = 300;
	// stw r25,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r25.u32);
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r27.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r25,r3
	r25.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40046
	ctx.r3.u64 = ctx.r3.u64 | 40046;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// stw r26,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r26.u32);
	// addi r11,r11,244
	r11.s64 = r11.s64 + 244;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r21,r3
	r21.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// extsw r11,r19
	r11.s64 = r19.s32;
	// std r11,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, r11.u64);
	// lfd f0,136(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fdivs f0,f0,f30
	f0.f64 = double(float(f0.f64 / f30.f64));
	// fadds f1,f0,f29
	ctx.f1.f64 = double(float(f0.f64 + f29.f64));
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// mr r6,r19
	ctx.r6.u64 = r19.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r7,128(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r27.u32);
	// addi r11,r11,244
	r11.s64 = r11.s64 + 244;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r25,r3
	r25.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40047
	ctx.r3.u64 = ctx.r3.u64 | 40047;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// stw r26,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r26.u32);
	// addi r11,r11,122
	r11.s64 = r11.s64 + 122;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r21,r3
	r21.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// extsw r11,r18
	r11.s64 = r18.s32;
	// std r11,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, r11.u64);
	// lfd f0,136(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fdivs f0,f0,f30
	f0.f64 = double(float(f0.f64 / f30.f64));
	// fadds f1,f0,f29
	ctx.f1.f64 = double(float(f0.f64 + f29.f64));
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// mr r6,r18
	ctx.r6.u64 = r18.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r7,128(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r27.u32);
	// addi r11,r11,122
	r11.s64 = r11.s64 + 122;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r25,r3
	r25.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40048
	ctx.r3.u64 = ctx.r3.u64 | 40048;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// stw r26,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r26.u32);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,244
	r11.s64 = r11.s64 + 244;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// extsw r11,r17
	r11.s64 = r17.s32;
	// std r11,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, r11.u64);
	// lfd f0,136(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fdivs f0,f0,f30
	f0.f64 = double(float(f0.f64 / f30.f64));
	// fadds f1,f0,f29
	ctx.f1.f64 = double(float(f0.f64 + f29.f64));
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// mr r6,r17
	ctx.r6.u64 = r17.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r7,128(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r27.u32);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,244
	r11.s64 = r11.s64 + 244;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40049
	ctx.r3.u64 = ctx.r3.u64 | 40049;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// addi r11,r11,244
	r11.s64 = r11.s64 + 244;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// lwz r6,144(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// addi r11,r11,244
	r11.s64 = r11.s64 + 244;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15124(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15124);
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r6,-31556(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820eae68
	sub_820EAE68(ctx, base);
	// bl 0x820ec830
	sub_820EC830(ctx, base);
	// bl 0x820ec700
	sub_820EC700(ctx, base);
	// addi r1,r1,6352
	ctx.r1.s64 = ctx.r1.s64 + 6352;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed594
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_820FA7F0"))) PPC_WEAK_FUNC(sub_820FA7F0);
PPC_FUNC_IMPL(__imp__sub_820FA7F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed114
	// stfd f31,-120(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -120, f31.u64);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820f5898
	sub_820F5898(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40023
	ctx.r3.u64 = ctx.r3.u64 | 40023;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r10,r11,4056
	ctx.r10.s64 = r11.s64 + 4056;
	// li r11,55
	r11.s64 = 55;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// li r11,102
	r11.s64 = 102;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_820FA830:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// li r28,0
	r28.s64 = 0;
	// cmpwi cr6,r9,39
	cr6.compare<int32_t>(ctx.r9.s32, 39, xer);
	// beq cr6,0x820fa970
	if (cr6.getEQ()) goto loc_820FA970;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r9,r10,60
	ctx.r9.s64 = ctx.r10.s64 + 60;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x820fa830
	if (cr6.getLT()) goto loc_820FA830;
	// mr r11,r28
	r11.u64 = r28.u64;
loc_820FA854:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// li r21,57
	r21.s64 = 57;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r27,r11,-19524
	r27.s64 = r11.s64 + -19524;
	// beq cr6,0x820fa978
	if (cr6.getEQ()) goto loc_820FA978;
	// li r11,90
	r11.s64 = 90;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,6580
	r11.s64 = r11.s64 + 6580;
	// lfs f31,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f31.f64 = double(temp.f32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// addi r31,r11,15124
	r31.s64 = r11.s64 + 15124;
	// stw r28,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r28.u32);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// li r8,255
	ctx.r8.s64 = 255;
	// addi r30,r11,-31556
	r30.s64 = r11.s64 + -31556;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40317
	ctx.r3.u64 = ctx.r3.u64 | 40317;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// li r11,109
	r11.s64 = 109;
	// stw r21,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r21.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lwz r11,3876(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 3876);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x820fa930
	if (!cr6.getEQ()) goto loc_820FA930;
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// li r7,50
	ctx.r7.s64 = 50;
	// li r6,123
	ctx.r6.s64 = 123;
	// addi r5,r11,60
	ctx.r5.s64 = r11.s64 + 60;
	// li r4,108
	ctx.r4.s64 = 108;
	// li r3,55
	ctx.r3.s64 = 55;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820FA930:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// lwz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// stw r28,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r28.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// b 0x820fa9d0
	goto loc_820FA9D0;
loc_820FA970:
	// li r11,1
	r11.s64 = 1;
	// b 0x820fa854
	goto loc_820FA854;
loc_820FA978:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,6580
	r11.s64 = r11.s64 + 6580;
	// lfs f31,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f31.f64 = double(temp.f32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// addi r31,r11,15124
	r31.s64 = r11.s64 + 15124;
	// stw r28,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r28.u32);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// li r8,255
	ctx.r8.s64 = 255;
	// addi r30,r11,-31556
	r30.s64 = r11.s64 + -31556;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
loc_820FA9D0:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r25,r28
	r25.u64 = r28.u64;
	// lis r19,-32010
	r19.s64 = -2097807360;
	// lis r20,-31994
	r20.s64 = -2096758784;
	// addi r22,r11,-19116
	r22.s64 = r11.s64 + -19116;
	// li r23,-1
	r23.s64 = -1;
loc_820FA9E8:
	// li r24,255
	r24.s64 = 255;
	// cmpwi cr6,r25,6
	cr6.compare<int32_t>(r25.s32, 6, xer);
	// bne cr6,0x820faa20
	if (!cr6.getEQ()) goto loc_820FAA20;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820faa10
	if (!cr6.getEQ()) goto loc_820FAA10;
	// lbz r11,4240(r19)
	r11.u64 = PPC_LOAD_U8(r19.u32 + 4240);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x820faa14
	if (!cr6.getEQ()) goto loc_820FAA14;
loc_820FAA10:
	// mr r11,r28
	r11.u64 = r28.u64;
loc_820FAA14:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820faa64
	if (!cr6.getEQ()) goto loc_820FAA64;
loc_820FAA20:
	// bl 0x820f6290
	sub_820F6290(ctx, base);
	// rlwinm r11,r25,2,0,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r22,3
	ctx.r10.s64 = r22.s64 + 3;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// ble cr6,0x820faa4c
	if (!cr6.getGT()) goto loc_820FAA4C;
	// li r3,39
	ctx.r3.s64 = 39;
	// bl 0x820ea4d0
	sub_820EA4D0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820faa64
	if (cr6.getEQ()) goto loc_820FAA64;
loc_820FAA4C:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x820faa68
	if (cr6.getEQ()) goto loc_820FAA68;
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820faa68
	if (cr6.getEQ()) goto loc_820FAA68;
loc_820FAA64:
	// li r24,112
	r24.s64 = 112;
loc_820FAA68:
	// rlwinm r11,r25,2,0,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r3,r11,r22
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + r22.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// mulli r11,r25,22
	r11.s64 = r25.s64 * 22;
	// stw r21,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r21.u32);
	// addi r10,r11,131
	ctx.r10.s64 = r11.s64 + 131;
	// lwz r11,3876(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 3876);
	// cmpw cr6,r11,r25
	cr6.compare<int32_t>(r11.s32, r25.s32, xer);
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// bne cr6,0x820faad0
	if (!cr6.getEQ()) goto loc_820FAAD0;
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// li r7,50
	ctx.r7.s64 = 50;
	// addi r6,r10,14
	ctx.r6.s64 = ctx.r10.s64 + 14;
	// addi r5,r11,60
	ctx.r5.s64 = r11.s64 + 60;
	// addi r4,r10,-1
	ctx.r4.s64 = ctx.r10.s64 + -1;
	// li r3,55
	ctx.r3.s64 = 55;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820FAAD0:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lwz r11,11488(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 11488);
	// extsh r8,r3
	ctx.r8.s64 = ctx.r3.s16;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// beq cr6,0x820fab40
	if (cr6.getEQ()) goto loc_820FAB40;
	// lbz r11,-31(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + -31);
	// lbz r7,-30(r27)
	ctx.r7.u64 = PPC_LOAD_U8(r27.u32 + -30);
	// lbz r10,-29(r27)
	ctx.r10.u64 = PPC_LOAD_U8(r27.u32 + -29);
	// rlwimi r7,r11,8,16,23
	ctx.r7.u64 = (__builtin_rotateleft32(r11.u32, 8) & 0xFF00) | (ctx.r7.u64 & 0xFFFFFFFFFFFF00FF);
	// lbz r9,0(r27)
	ctx.r9.u64 = PPC_LOAD_U8(r27.u32 + 0);
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// clrlwi r11,r7,16
	r11.u64 = ctx.r7.u32 & 0xFFFF;
	// lwz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r23,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r23.u32);
	// rlwimi r10,r11,8,0,23
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 8) & 0xFFFFFF00) | (ctx.r10.u64 & 0xFFFFFFFF000000FF);
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// stw r28,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r28.u32);
	// rlwimi r9,r10,8,0,23
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 8) & 0xFFFFFF00) | (ctx.r9.u64 & 0xFFFFFFFF000000FF);
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// bl 0x8213e398
	sub_8213E398(ctx, base);
	// b 0x820fab60
	goto loc_820FAB60;
loc_820FAB40:
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// lwz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// stw r23,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r23.u32);
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// stw r28,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r28.u32);
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820FAB60:
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// cmpwi cr6,r25,7
	cr6.compare<int32_t>(r25.s32, 7, xer);
	// blt cr6,0x820fa9e8
	if (cr6.getLT()) goto loc_820FA9E8;
	// bl 0x820ec830
	sub_820EC830(ctx, base);
	// bl 0x820ec700
	sub_820EC700(ctx, base);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lfd f31,-120(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -120);
	// b 0x823ed164
	return;
}

__attribute__((alias("__imp__sub_820FAB80"))) PPC_WEAK_FUNC(sub_820FAB80);
PPC_FUNC_IMPL(__imp__sub_820FAB80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stfd f31,-96(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -96, f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820f5898
	sub_820F5898(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40243
	ctx.r3.u64 = ctx.r3.u64 | 40243;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r11,55
	r11.s64 = 55;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// li r11,102
	r11.s64 = 102;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r30,r3
	r30.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r29,0
	r29.s64 = 0;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lis r26,-31994
	r26.s64 = -2096758784;
	// lis r27,-31991
	r27.s64 = -2096562176;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,255
	ctx.r8.s64 = 255;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// lwz r7,15124(r26)
	ctx.r7.u64 = PPC_LOAD_U32(r26.u32 + 15124);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lwz r6,-31556(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + -31556);
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// bl 0x820ec9c0
	sub_820EC9C0(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r23,r29
	r23.u64 = r29.u64;
	// addi r31,r11,-19524
	r31.s64 = r11.s64 + -19524;
	// lis r22,-31994
	r22.s64 = -2096758784;
	// li r24,-1
	r24.s64 = -1;
loc_820FAC18:
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// li r25,255
	r25.s64 = 255;
	// bl 0x820c99d8
	sub_820C99D8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820fac34
	if (!cr6.getEQ()) goto loc_820FAC34;
	// li r25,112
	r25.s64 = 112;
loc_820FAC34:
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x820c99b8
	sub_820C99B8(ctx, base);
	// lhz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// bne cr6,0x820fac74
	if (!cr6.getEQ()) goto loc_820FAC74;
	// li r3,39
	ctx.r3.s64 = 39;
	// bl 0x820ea4d0
	sub_820EA4D0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820fac74
	if (cr6.getEQ()) goto loc_820FAC74;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40317
	ctx.r3.u64 = ctx.r3.u64 | 40317;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
loc_820FAC74:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15124(r26)
	ctx.r7.u64 = PPC_LOAD_U32(r26.u32 + 15124);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// lwz r6,-31556(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + -31556);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// cmpwi cr6,r23,8
	cr6.compare<int32_t>(r23.s32, 8, xer);
	// li r9,202
	ctx.r9.s64 = 202;
	// bge cr6,0x820faca4
	if (!cr6.getLT()) goto loc_820FACA4;
	// li r9,57
	ctx.r9.s64 = 57;
loc_820FACA4:
	// lwz r11,3880(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3880);
	// clrlwi r10,r23,29
	ctx.r10.u64 = r23.u32 & 0x7;
	// stw r9,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r9.u32);
	// cmpw cr6,r11,r23
	cr6.compare<int32_t>(r11.s32, r23.s32, xer);
	// mulli r11,r10,22
	r11.s64 = ctx.r10.s64 * 22;
	// addi r11,r11,131
	r11.s64 = r11.s64 + 131;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bne cr6,0x820face4
	if (!cr6.getEQ()) goto loc_820FACE4;
	// lwz r10,120(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// li r7,50
	ctx.r7.s64 = 50;
	// addi r6,r11,14
	ctx.r6.s64 = r11.s64 + 14;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addi r4,r11,-1
	ctx.r4.s64 = r11.s64 + -1;
	// addi r5,r10,3
	ctx.r5.s64 = ctx.r10.s64 + 3;
	// addi r3,r9,-2
	ctx.r3.s64 = ctx.r9.s64 + -2;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
loc_820FACE4:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r30,r3
	r30.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lwz r11,11488(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 11488);
	// extsh r8,r3
	ctx.r8.s64 = ctx.r3.s16;
	// lwz r6,-31556(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + -31556);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// beq cr6,0x820fad54
	if (cr6.getEQ()) goto loc_820FAD54;
	// lbz r11,-31(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + -31);
	// lbz r7,-30(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + -30);
	// lbz r10,-29(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + -29);
	// rlwimi r7,r11,8,16,23
	ctx.r7.u64 = (__builtin_rotateleft32(r11.u32, 8) & 0xFF00) | (ctx.r7.u64 & 0xFFFFFFFFFFFF00FF);
	// lbz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// stw r30,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r30.u32);
	// clrlwi r11,r7,16
	r11.u64 = ctx.r7.u32 & 0xFFFF;
	// lwz r7,15124(r26)
	ctx.r7.u64 = PPC_LOAD_U32(r26.u32 + 15124);
	// stw r24,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r24.u32);
	// rlwimi r10,r11,8,0,23
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 8) & 0xFFFFFF00) | (ctx.r10.u64 & 0xFFFFFFFF000000FF);
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r29.u32);
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// rlwimi r9,r10,8,0,23
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 8) & 0xFFFFFF00) | (ctx.r9.u64 & 0xFFFFFFFF000000FF);
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// bl 0x8213e398
	sub_8213E398(ctx, base);
	// b 0x820fad74
	goto loc_820FAD74;
loc_820FAD54:
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// lwz r7,15124(r26)
	ctx.r7.u64 = PPC_LOAD_U32(r26.u32 + 15124);
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// stw r24,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r24.u32);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820FAD74:
	// addi r23,r23,1
	r23.s64 = r23.s64 + 1;
	// cmpwi cr6,r23,16
	cr6.compare<int32_t>(r23.s32, 16, xer);
	// blt cr6,0x820fac18
	if (cr6.getLT()) goto loc_820FAC18;
	// bl 0x820ec830
	sub_820EC830(ctx, base);
	// bl 0x820ec700
	sub_820EC700(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-96(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -96);
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_820FAD98"))) PPC_WEAK_FUNC(sub_820FAD98);
PPC_FUNC_IMPL(__imp__sub_820FAD98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820f5898
	sub_820F5898(ctx, base);
	// bl 0x820ec830
	sub_820EC830(ctx, base);
	// bl 0x820f5978
	sub_820F5978(ctx, base);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r10,r11,4056
	ctx.r10.s64 = r11.s64 + 4056;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_820FADC0:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r9,31
	cr6.compare<int32_t>(ctx.r9.s32, 31, xer);
	// beq cr6,0x820fae80
	if (cr6.getEQ()) goto loc_820FAE80;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r9,r10,60
	ctx.r9.s64 = ctx.r10.s64 + 60;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x820fadc0
	if (cr6.getLT()) goto loc_820FADC0;
	// li r31,0
	r31.s64 = 0;
loc_820FADE0:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40324
	ctx.r3.u64 = ctx.r3.u64 | 40324;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// lwz r4,-31556(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + -31556);
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f2,25392(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25392);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,24784(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24784);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// li r5,255
	ctx.r5.s64 = 255;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// cntlzw r10,r11
	ctx.r10.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// lis r11,-32010
	r11.s64 = -2097807360;
	// rlwinm r4,r10,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// lwz r3,4288(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4288);
	// li r11,0
	r11.s64 = 0;
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// bl 0x820f2f40
	sub_820F2F40(ctx, base);
	// bl 0x820ec700
	sub_820EC700(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820FAE80:
	// li r31,1
	r31.s64 = 1;
	// b 0x820fade0
	goto loc_820FADE0;
}

