#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_82175DA0"))) PPC_WEAK_FUNC(sub_82175DA0);
PPC_FUNC_IMPL(__imp__sub_82175DA0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// li r29,0
	r29.s64 = 0;
	// lwz r11,28(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82175de0
	if (cr6.getEQ()) goto loc_82175DE0;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82175e08
	if (!cr6.getEQ()) goto loc_82175E08;
loc_82175DE0:
	// lwz r11,28(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82175e80
	if (cr6.getEQ()) goto loc_82175E80;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82175e80
	if (cr6.getEQ()) goto loc_82175E80;
loc_82175E08:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821758d8
	sub_821758D8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82175e80
	if (cr6.getEQ()) goto loc_82175E80;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82175e80
	if (cr6.getLT()) goto loc_82175E80;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x823b3e30
	sub_823B3E30(ctx, base);
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82175e80
	if (cr6.getEQ()) goto loc_82175E80;
loc_82175E44:
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,55
	cr6.compare<int32_t>(ctx.r3.s32, 55, xer);
	// bne cr6,0x82175e6c
	if (!cr6.getEQ()) goto loc_82175E6C;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x82175e8c
	if (cr6.getEQ()) goto loc_82175E8C;
loc_82175E6C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823b3e60
	sub_823B3E60(ctx, base);
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82175e44
	if (!cr6.getEQ()) goto loc_82175E44;
loc_82175E80:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
loc_82175E8C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82175E98"))) PPC_WEAK_FUNC(sub_82175E98);
PPC_FUNC_IMPL(__imp__sub_82175E98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// lwz r11,28(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82175f7c
	if (cr6.getEQ()) goto loc_82175F7C;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82175f7c
	if (cr6.getEQ()) goto loc_82175F7C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821759e0
	sub_821759E0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82175f7c
	if (cr6.getEQ()) goto loc_82175F7C;
	// lwz r11,28(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82175f0c
	if (cr6.getEQ()) goto loc_82175F0C;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x82175f10
	goto loc_82175F10;
loc_82175F0C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82175F10:
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82175f7c
	if (cr6.getEQ()) goto loc_82175F7C;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82175f7c
	if (cr6.getLT()) goto loc_82175F7C;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x823b3e30
	sub_823B3E30(ctx, base);
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82175f7c
	if (cr6.getEQ()) goto loc_82175F7C;
loc_82175F40:
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,55
	cr6.compare<int32_t>(ctx.r3.s32, 55, xer);
	// bne cr6,0x82175f68
	if (!cr6.getEQ()) goto loc_82175F68;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x82175f88
	if (cr6.getEQ()) goto loc_82175F88;
loc_82175F68:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823b3e60
	sub_823B3E60(ctx, base);
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82175f40
	if (!cr6.getEQ()) goto loc_82175F40;
loc_82175F7C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
loc_82175F88:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82175F98"))) PPC_WEAK_FUNC(sub_82175F98);
PPC_FUNC_IMPL(__imp__sub_82175F98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82175fdc
	if (cr6.getEQ()) goto loc_82175FDC;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82176004
	if (!cr6.getEQ()) goto loc_82176004;
loc_82175FDC:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217602c
	if (cr6.getEQ()) goto loc_8217602C;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217602c
	if (cr6.getEQ()) goto loc_8217602C;
loc_82176004:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175da0
	sub_82175DA0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217602c
	if (cr6.getEQ()) goto loc_8217602C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217602C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82176048"))) PPC_WEAK_FUNC(sub_82176048);
PPC_FUNC_IMPL(__imp__sub_82176048) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821760a8
	if (cr6.getEQ()) goto loc_821760A8;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821760a8
	if (cr6.getEQ()) goto loc_821760A8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175e98
	sub_82175E98(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821760a8
	if (cr6.getEQ()) goto loc_821760A8;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_821760A8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821760C0"))) PPC_WEAK_FUNC(sub_821760C0);
PPC_FUNC_IMPL(__imp__sub_821760C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lbz r11,132(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821760f4
	if (cr6.getEQ()) goto loc_821760F4;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82176100
	if (!cr6.getEQ()) goto loc_82176100;
loc_821760F4:
	// lbz r11,32(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176298
	if (cr6.getEQ()) goto loc_82176298;
loc_82176100:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821761b8
	if (cr6.getEQ()) goto loc_821761B8;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821761b8
	if (cr6.getEQ()) goto loc_821761B8;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176150
	if (cr6.getEQ()) goto loc_82176150;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82176154
	goto loc_82176154;
loc_82176150:
	// li r30,0
	r30.s64 = 0;
loc_82176154:
	// lbz r11,12(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82176218
	if (!cr6.getEQ()) goto loc_82176218;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r29,64(r28)
	r29.u64 = PPC_LOAD_U32(r28.u32 + 64);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821758d8
	sub_821758D8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821761a8
	if (!cr6.getEQ()) goto loc_821761A8;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,88(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 88);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x821761ac
	if (!cr6.getEQ()) goto loc_821761AC;
loc_821761A8:
	// li r11,0
	r11.s64 = 0;
loc_821761AC:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_821761B8:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176298
	if (cr6.getEQ()) goto loc_82176298;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176298
	if (cr6.getEQ()) goto loc_82176298;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176208
	if (cr6.getEQ()) goto loc_82176208;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x8217620c
	goto loc_8217620C;
loc_82176208:
	// li r29,0
	r29.s64 = 0;
loc_8217620C:
	// lbz r11,12(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176224
	if (cr6.getEQ()) goto loc_82176224;
loc_82176218:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_82176224:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r30,64(r28)
	r30.u64 = PPC_LOAD_U32(r28.u32 + 64);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821758d8
	sub_821758D8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82176288
	if (!cr6.getEQ()) goto loc_82176288;
	// addi r11,r30,83
	r11.s64 = r30.s64 + 83;
	// addi r10,r30,19
	ctx.r10.s64 = r30.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r10,r10,r29
	ctx.r10.u64 = ctx.r10.u64 + r29.u64;
	// addi r8,r11,4
	ctx.r8.s64 = r11.s64 + 4;
loc_8217625C:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// subf. r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x8217627c
	if (!cr0.getEQ()) goto loc_8217627C;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// bne cr6,0x8217625c
	if (!cr6.getEQ()) goto loc_8217625C;
loc_8217627C:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x8217628c
	if (cr6.getEQ()) goto loc_8217628C;
loc_82176288:
	// li r11,0
	r11.s64 = 0;
loc_8217628C:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_82176298:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_821762A8"))) PPC_WEAK_FUNC(sub_821762A8);
PPC_FUNC_IMPL(__imp__sub_821762A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821763bc
	if (cr6.getEQ()) goto loc_821763BC;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821763bc
	if (cr6.getEQ()) goto loc_821763BC;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217630c
	if (cr6.getEQ()) goto loc_8217630C;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82176310
	goto loc_82176310;
loc_8217630C:
	// li r30,0
	r30.s64 = 0;
loc_82176310:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821763e8
	if (cr6.getEQ()) goto loc_821763E8;
	// lbz r11,132(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176338
	if (cr6.getEQ()) goto loc_82176338;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82176344
	if (!cr6.getEQ()) goto loc_82176344;
loc_82176338:
	// lbz r11,32(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821763e8
	if (cr6.getEQ()) goto loc_821763E8;
loc_82176344:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lbz r11,12(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176360
	if (cr6.getEQ()) goto loc_82176360;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_82176360:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821759e0
	sub_821759E0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821763ac
	if (!cr6.getEQ()) goto loc_821763AC;
	// addi r11,r30,12
	r11.s64 = r30.s64 + 12;
	// addi r10,r31,12
	ctx.r10.s64 = r31.s64 + 12;
	// addi r8,r11,4
	ctx.r8.s64 = r11.s64 + 4;
loc_82176380:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// subf. r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x821763a0
	if (!cr0.getEQ()) goto loc_821763A0;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// bne cr6,0x82176380
	if (!cr6.getEQ()) goto loc_82176380;
loc_821763A0:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x821763b0
	if (cr6.getEQ()) goto loc_821763B0;
loc_821763AC:
	// li r11,0
	r11.s64 = 0;
loc_821763B0:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_821763BC:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821763e8
	if (cr6.getEQ()) goto loc_821763E8;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// bne cr6,0x821763ec
	if (!cr6.getEQ()) goto loc_821763EC;
loc_821763E8:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
loc_821763EC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821763F8"))) PPC_WEAK_FUNC(sub_821763F8);
PPC_FUNC_IMPL(__imp__sub_821763F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82176460
	if (cr6.getEQ()) goto loc_82176460;
loc_82176438:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176478
	if (cr6.getEQ()) goto loc_82176478;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x82176438
	if (!cr6.getEQ()) goto loc_82176438;
loc_82176460:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82176478:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82176490"))) PPC_WEAK_FUNC(sub_82176490);
PPC_FUNC_IMPL(__imp__sub_82176490) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176530
	if (cr6.getEQ()) goto loc_82176530;
loc_821764D4:
	// lbz r10,132(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 132);
	// mr r31,r11
	r31.u64 = r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8217651c
	if (cr6.getEQ()) goto loc_8217651C;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217651c
	if (!cr6.getEQ()) goto loc_8217651C;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217654c
	if (cr6.getEQ()) goto loc_8217654C;
loc_8217651C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821764d4
	if (!cr6.getEQ()) goto loc_821764D4;
loc_82176530:
	// li r3,1
	ctx.r3.s64 = 1;
loc_82176534:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8217654C:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x82176534
	goto loc_82176534;
}

__attribute__((alias("__imp__sub_82176558"))) PPC_WEAK_FUNC(sub_82176558);
PPC_FUNC_IMPL(__imp__sub_82176558) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176660
	if (cr6.getEQ()) goto loc_82176660;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176660
	if (cr6.getEQ()) goto loc_82176660;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821765bc
	if (cr6.getEQ()) goto loc_821765BC;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x821765c0
	goto loc_821765C0;
loc_821765BC:
	// li r29,0
	r29.s64 = 0;
loc_821765C0:
	// lwz r30,64(r30)
	r30.u64 = PPC_LOAD_U32(r30.u32 + 64);
	// cmplwi cr6,r30,64
	cr6.compare<uint32_t>(r30.u32, 64, xer);
	// bge cr6,0x821767a4
	if (!cr6.getLT()) goto loc_821767A4;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r11,16
	ctx.r5.s64 = r11.s64 + 16;
	// lwz r11,36(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// srawi r11,r30,3
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7) != 0);
	r11.s64 = r30.s32 >> 3;
	// li r10,1
	ctx.r10.s64 = 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// srawi r9,r30,3
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7) != 0);
	ctx.r9.s64 = r30.s32 >> 3;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// addi r3,r31,4
	ctx.r3.s64 = r31.s64 + 4;
	// rlwinm r9,r9,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r9,r9,r30
	ctx.r9.s64 = r30.s64 - ctx.r9.s64;
	// slw r10,r10,r9
	ctx.r10.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r10.u32 << (ctx.r9.u8 & 0x3F));
	// lbz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// andc r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 & ~ctx.r10.u64;
	// stb r10,4(r11)
	PPC_STORE_U8(r11.u32 + 4, ctx.r10.u8);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
	// bl 0x821753b0
	sub_821753B0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821767a4
	if (cr6.getEQ()) goto loc_821767A4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175480
	sub_82175480(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_82176660:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821766e4
	if (cr6.getEQ()) goto loc_821766E4;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821766e4
	if (cr6.getEQ()) goto loc_821766E4;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821766ac
	if (cr6.getEQ()) goto loc_821766AC;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x821766b0
	goto loc_821766B0;
loc_821766AC:
	// li r3,0
	ctx.r3.s64 = 0;
loc_821766B0:
	// lwz r11,64(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 64);
	// cmplwi cr6,r11,64
	cr6.compare<uint32_t>(r11.u32, 64, xer);
	// bge cr6,0x821767a4
	if (!cr6.getLT()) goto loc_821767A4;
	// add r10,r11,r3
	ctx.r10.u64 = r11.u64 + ctx.r3.u64;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stb r9,4(r10)
	PPC_STORE_U8(ctx.r10.u32 + 4, ctx.r9.u8);
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r10,24(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// stwx r10,r11,r3
	PPC_STORE_U32(r11.u32 + ctx.r3.u32, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_821766E4:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821767a4
	if (cr6.getEQ()) goto loc_821767A4;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821767a4
	if (cr6.getEQ()) goto loc_821767A4;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176730
	if (cr6.getEQ()) goto loc_82176730;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x82176734
	goto loc_82176734;
loc_82176730:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82176734:
	// lwz r11,64(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 64);
	// cmplwi cr6,r11,64
	cr6.compare<uint32_t>(r11.u32, 64, xer);
	// bge cr6,0x821767a4
	if (!cr6.getLT()) goto loc_821767A4;
	// lwz r9,20(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r8,r11,19
	ctx.r8.s64 = r11.s64 + 19;
	// addi r6,r11,83
	ctx.r6.s64 = r11.s64 + 83;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r6,r6,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r5,r11,r3
	ctx.r5.u64 = r11.u64 + ctx.r3.u64;
	// lwz r9,24(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 24);
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// li r7,1
	ctx.r7.s64 = 1;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// stwx r9,r8,r3
	PPC_STORE_U32(ctx.r8.u32 + ctx.r3.u32, ctx.r9.u32);
	// lwz r9,20(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r9,24(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 24);
	// stwx r9,r6,r3
	PPC_STORE_U32(ctx.r6.u32 + ctx.r3.u32, ctx.r9.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// stb r9,12(r5)
	PPC_STORE_U8(ctx.r5.u32 + 12, ctx.r9.u8);
	// srawi r9,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r9.s64 = r11.s32 >> 3;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// rlwinm r9,r9,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// lbz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4);
	// slw r11,r7,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (ctx.r7.u32 << (r11.u8 & 0x3F));
	// andc r11,r9,r11
	r11.u64 = ctx.r9.u64 & ~r11.u64;
	// stb r11,4(r10)
	PPC_STORE_U8(ctx.r10.u32 + 4, r11.u8);
loc_821767A4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821767B0"))) PPC_WEAK_FUNC(sub_821767B0);
PPC_FUNC_IMPL(__imp__sub_821767B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821767f4
	if (cr6.getEQ()) goto loc_821767F4;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82176854
	if (!cr6.getEQ()) goto loc_82176854;
loc_821767F4:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217682c
	if (cr6.getEQ()) goto loc_8217682C;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217682c
	if (cr6.getEQ()) goto loc_8217682C;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175d18
	sub_82175D18(ctx, base);
	// b 0x82176878
	goto loc_82176878;
loc_8217682C:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176878
	if (cr6.getEQ()) goto loc_82176878;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176878
	if (cr6.getEQ()) goto loc_82176878;
loc_82176854:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beq cr6,0x82176878
	if (cr6.getEQ()) goto loc_82176878;
	// lwz r4,80(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 80);
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// blt cr6,0x82176878
	if (cr6.getLT()) goto loc_82176878;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175c10
	sub_82175C10(ctx, base);
loc_82176878:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

extern void TextureLoadHook(PPCRegister& r3, PPCRegister& r4);

extern void TextureUnloadHook(PPCRegister& r3);

__attribute__((alias("__imp__sub_82176890"))) PPC_WEAK_FUNC(sub_82176890);
PPC_FUNC_IMPL(__imp__sub_82176890) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	TextureLoadHook(ctx.r3, ctx.r4);
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// li r28,1
	r28.s64 = 1;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821768f8
	if (cr6.getEQ()) goto loc_821768F8;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821768f8
	if (cr6.getEQ()) goto loc_821768F8;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176a14
	if (cr6.getEQ()) goto loc_82176A14;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82176a18
	goto loc_82176A18;
loc_821768F8:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821769c4
	if (cr6.getEQ()) goto loc_821769C4;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821769c4
	if (cr6.getEQ()) goto loc_821769C4;
	// lwz r11,28(r31)
	TextureUnloadHook(ctx.r3);
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176948
	if (cr6.getEQ()) goto loc_82176948;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x8217694c
	goto loc_8217694C;
loc_82176948:
	// li r30,0
	r30.s64 = 0;
loc_8217694C:
	// lwz r3,8(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lbz r11,76(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 76);
	// lwz r10,64(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 64);
	// add r9,r10,r30
	ctx.r9.u64 = ctx.r10.u64 + r30.u64;
	// lbz r7,4(r9)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r9.u32 + 4);
	// subf r8,r7,r11
	ctx.r8.s64 = r11.s64 - ctx.r7.s64;
	// cmplwi cr6,r8,256
	cr6.compare<uint32_t>(ctx.r8.u32, 256, xer);
	// blt cr6,0x82176978
	if (cr6.getLT()) goto loc_82176978;
	// addi r8,r8,256
	ctx.r8.s64 = ctx.r8.s64 + 256;
loc_82176978:
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// cmplwi cr6,r8,126
	cr6.compare<uint32_t>(ctx.r8.u32, 126, xer);
	// bgt cr6,0x82176a94
	if (cr6.getGT()) goto loc_82176A94;
	// lbz r8,33(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 33);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x82176a5c
	if (!cr6.getEQ()) goto loc_82176A5C;
	// addi r10,r10,17
	ctx.r10.s64 = ctx.r10.s64 + 17;
	// stb r11,4(r9)
	PPC_STORE_U8(ctx.r9.u32 + 4, r11.u8);
	// lwz r11,56(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 56);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r11,r10,r30
	PPC_STORE_U32(ctx.r10.u32 + r30.u32, r11.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_821769C4:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176a94
	if (cr6.getEQ()) goto loc_82176A94;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176a94
	if (cr6.getEQ()) goto loc_82176A94;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176a14
	if (cr6.getEQ()) goto loc_82176A14;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82176a18
	goto loc_82176A18;
loc_82176A14:
	// li r30,0
	r30.s64 = 0;
loc_82176A18:
	// lwz r3,8(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// bne cr6,0x82176a94
	if (!cr6.getEQ()) goto loc_82176A94;
	// lbz r10,76(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 76);
	// lbz r11,8(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 8);
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// cmplwi cr6,r11,256
	cr6.compare<uint32_t>(r11.u32, 256, xer);
	// blt cr6,0x82176a44
	if (cr6.getLT()) goto loc_82176A44;
	// addi r11,r11,256
	r11.s64 = r11.s64 + 256;
loc_82176A44:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplwi cr6,r11,126
	cr6.compare<uint32_t>(r11.u32, 126, xer);
	// bgt cr6,0x82176a94
	if (cr6.getGT()) goto loc_82176A94;
	// lbz r11,33(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 33);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176a6c
	if (cr6.getEQ()) goto loc_82176A6C;
loc_82176A5C:
	// li r28,0
	r28.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_82176A6C:
	// stb r10,8(r30)
	PPC_STORE_U8(r30.u32 + 8, ctx.r10.u8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,52(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 52);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// lwz r11,56(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 56);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82176A94:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82176AA0"))) PPC_WEAK_FUNC(sub_82176AA0);
PPC_FUNC_IMPL(__imp__sub_82176AA0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lbz r11,-5072(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -5072);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176c70
	if (cr6.getEQ()) goto loc_82176C70;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176b80
	if (cr6.getEQ()) goto loc_82176B80;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176b80
	if (cr6.getEQ()) goto loc_82176B80;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176b14
	if (cr6.getEQ()) goto loc_82176B14;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82176b18
	goto loc_82176B18;
loc_82176B14:
	// li r30,0
	r30.s64 = 0;
loc_82176B18:
	// lwz r3,8(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r5,r29,48
	ctx.r5.s64 = r29.s64 + 48;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r29,64(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 64);
	// lwz r10,36(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,88(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 88);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82176c70
	if (!cr6.getEQ()) goto loc_82176C70;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175480
	sub_82175480(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_82176B80:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176bec
	if (cr6.getEQ()) goto loc_82176BEC;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176bec
	if (cr6.getEQ()) goto loc_82176BEC;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176bd0
	if (cr6.getEQ()) goto loc_82176BD0;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x82176bd4
	goto loc_82176BD4;
loc_82176BD0:
	// li r31,0
	r31.s64 = 0;
loc_82176BD4:
	// lwz r3,8(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r11,64(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 64);
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// b 0x82176c64
	goto loc_82176C64;
loc_82176BEC:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176c70
	if (cr6.getEQ()) goto loc_82176C70;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176c70
	if (cr6.getEQ()) goto loc_82176C70;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176c3c
	if (cr6.getEQ()) goto loc_82176C3C;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x82176c40
	goto loc_82176C40;
loc_82176C3C:
	// li r31,0
	r31.s64 = 0;
loc_82176C40:
	// lwz r3,8(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,56(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 56);
	// lwz r11,64(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 64);
	// addi r9,r11,83
	ctx.r9.s64 = r11.s64 + 83;
	// addi r11,r11,19
	r11.s64 = r11.s64 + 19;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r9,r31
	PPC_STORE_U32(ctx.r9.u32 + r31.u32, ctx.r10.u32);
loc_82176C64:
	// lwz r10,56(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 56);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, ctx.r10.u32);
loc_82176C70:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82176C80"))) PPC_WEAK_FUNC(sub_82176C80);
PPC_FUNC_IMPL(__imp__sub_82176C80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176cd0
	if (cr6.getEQ()) goto loc_82176CD0;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176cd0
	if (cr6.getEQ()) goto loc_82176CD0;
loc_82176CB8:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// clrlwi r10,r29,24
	ctx.r10.u64 = r29.u32 & 0xFF;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x82176d80
	if (cr6.getEQ()) goto loc_82176D80;
	// stb r29,12(r31)
	PPC_STORE_U8(r31.u32 + 12, r29.u8);
	// b 0x82176d64
	goto loc_82176D64;
loc_82176CD0:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176cf4
	if (cr6.getEQ()) goto loc_82176CF4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82176cb8
	if (!cr6.getEQ()) goto loc_82176CB8;
loc_82176CF4:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176d80
	if (cr6.getEQ()) goto loc_82176D80;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176d80
	if (cr6.getEQ()) goto loc_82176D80;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176d3c
	if (cr6.getEQ()) goto loc_82176D3C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82176d40
	goto loc_82176D40;
loc_82176D3C:
	// li r30,0
	r30.s64 = 0;
loc_82176D40:
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lwz r11,64(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 64);
	// clrlwi r10,r29,24
	ctx.r10.u64 = r29.u32 & 0xFF;
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r9,r11,r30
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + r30.u32);
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// beq cr6,0x82176d80
	if (cr6.getEQ()) goto loc_82176D80;
	// stbx r29,r11,r30
	PPC_STORE_U8(r11.u32 + r30.u32, r29.u8);
loc_82176D64:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175480
	sub_82175480(ctx, base);
loc_82176D80:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82176D88"))) PPC_WEAK_FUNC(sub_82176D88);
PPC_FUNC_IMPL(__imp__sub_82176D88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176e34
	if (cr6.getEQ()) goto loc_82176E34;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176e34
	if (cr6.getEQ()) goto loc_82176E34;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82176df0
	if (cr6.getEQ()) goto loc_82176DF0;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// b 0x82176df4
	goto loc_82176DF4;
loc_82176DF0:
	// li r10,0
	ctx.r10.s64 = 0;
loc_82176DF4:
	// lwz r11,64(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 64);
	// clrlwi r9,r30,24
	ctx.r9.u64 = r30.u32 & 0xFF;
	// addi r11,r11,19
	r11.s64 = r11.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r8,r11,r10
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplw cr6,r9,r8
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r8.u32, xer);
	// beq cr6,0x82176e34
	if (cr6.getEQ()) goto loc_82176E34;
	// stbx r30,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, r30.u8);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175480
	sub_82175480(ctx, base);
loc_82176E34:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82176E40"))) PPC_WEAK_FUNC(sub_82176E40);
PPC_FUNC_IMPL(__imp__sub_82176E40) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// extsb r29,r28
	r29.s64 = r28.s8;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lbz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 28);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r29,r10
	cr6.compare<int32_t>(r29.s32, ctx.r10.s32, xer);
	// blt cr6,0x82176f68
	if (cr6.getLT()) goto loc_82176F68;
	// lbz r11,29(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 29);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// bgt cr6,0x82176f68
	if (cr6.getGT()) goto loc_82176F68;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176eb8
	if (cr6.getEQ()) goto loc_82176EB8;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176eb8
	if (cr6.getEQ()) goto loc_82176EB8;
loc_82176EA0:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// beq cr6,0x82176f68
	if (cr6.getEQ()) goto loc_82176F68;
	// stb r28,12(r31)
	PPC_STORE_U8(r31.u32 + 12, r28.u8);
	// b 0x82176f4c
	goto loc_82176F4C;
loc_82176EB8:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176edc
	if (cr6.getEQ()) goto loc_82176EDC;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82176ea0
	if (!cr6.getEQ()) goto loc_82176EA0;
loc_82176EDC:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176f68
	if (cr6.getEQ()) goto loc_82176F68;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176f68
	if (cr6.getEQ()) goto loc_82176F68;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82176f24
	if (cr6.getEQ()) goto loc_82176F24;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82176f28
	goto loc_82176F28;
loc_82176F24:
	// li r30,0
	r30.s64 = 0;
loc_82176F28:
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lwz r11,64(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 64);
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + r30.u32);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r29,r10
	cr6.compare<int32_t>(r29.s32, ctx.r10.s32, xer);
	// beq cr6,0x82176f68
	if (cr6.getEQ()) goto loc_82176F68;
	// stbx r28,r11,r30
	PPC_STORE_U8(r11.u32 + r30.u32, r28.u8);
loc_82176F4C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175480
	sub_82175480(ctx, base);
loc_82176F68:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82176F70"))) PPC_WEAK_FUNC(sub_82176F70);
PPC_FUNC_IMPL(__imp__sub_82176F70) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// extsb r30,r28
	r30.s64 = r28.s8;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lbz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 28);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r30,r10
	cr6.compare<int32_t>(r30.s32, ctx.r10.s32, xer);
	// blt cr6,0x82177044
	if (cr6.getLT()) goto loc_82177044;
	// lbz r11,29(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 29);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// bgt cr6,0x82177044
	if (cr6.getGT()) goto loc_82177044;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82177044
	if (cr6.getEQ()) goto loc_82177044;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177044
	if (cr6.getEQ()) goto loc_82177044;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82177000
	if (cr6.getEQ()) goto loc_82177000;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// b 0x82177004
	goto loc_82177004;
loc_82177000:
	// li r10,0
	ctx.r10.s64 = 0;
loc_82177004:
	// lwz r11,64(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 64);
	// addi r11,r11,19
	r11.s64 = r11.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// cmpw cr6,r30,r9
	cr6.compare<int32_t>(r30.s32, ctx.r9.s32, xer);
	// beq cr6,0x82177044
	if (cr6.getEQ()) goto loc_82177044;
	// stbx r28,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, r28.u8);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175480
	sub_82175480(ctx, base);
loc_82177044:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82177050"))) PPC_WEAK_FUNC(sub_82177050);
PPC_FUNC_IMPL(__imp__sub_82177050) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82177090
	if (cr6.getEQ()) goto loc_82177090;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x821770c0
	if (!cr6.getEQ()) goto loc_821770C0;
loc_82177090:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821770b8
	if (cr6.getEQ()) goto loc_821770B8;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x821770c0
	if (!cr6.getEQ()) goto loc_821770C0;
loc_821770B8:
	// lbz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// b 0x821770dc
	goto loc_821770DC;
loc_821770C0:
	// lwz r30,0(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_821770DC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821770F8"))) PPC_WEAK_FUNC(sub_821770F8);
PPC_FUNC_IMPL(__imp__sub_821770F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82177188
	if (cr6.getEQ()) goto loc_82177188;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177188
	if (cr6.getEQ()) goto loc_82177188;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82177170
	if (cr6.getEQ()) goto loc_82177170;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,64(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 64);
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + ctx.r3.u32);
	// b 0x82177200
	goto loc_82177200;
loc_82177170:
	// lwz r11,64(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 64);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + ctx.r3.u32);
	// b 0x82177200
	goto loc_82177200;
loc_82177188:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821771fc
	if (cr6.getEQ()) goto loc_821771FC;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821771fc
	if (cr6.getEQ()) goto loc_821771FC;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821771e4
	if (cr6.getEQ()) goto loc_821771E4;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,64(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 64);
	// addi r11,r11,19
	r11.s64 = r11.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + ctx.r3.u32);
	// b 0x82177200
	goto loc_82177200;
loc_821771E4:
	// lwz r11,64(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 64);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r11,r11,19
	r11.s64 = r11.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + ctx.r3.u32);
	// b 0x82177200
	goto loc_82177200;
loc_821771FC:
	// lbz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 12);
loc_82177200:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177218"))) PPC_WEAK_FUNC(sub_82177218);
PPC_FUNC_IMPL(__imp__sub_82177218) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// clrlwi r29,r28,24
	r29.u64 = r28.u32 & 0xFF;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lbz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 28);
	// cmplw cr6,r29,r10
	cr6.compare<uint32_t>(r29.u32, ctx.r10.u32, xer);
	// blt cr6,0x82177330
	if (cr6.getLT()) goto loc_82177330;
	// lbz r11,29(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 29);
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bgt cr6,0x82177330
	if (cr6.getGT()) goto loc_82177330;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177284
	if (cr6.getEQ()) goto loc_82177284;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177284
	if (cr6.getEQ()) goto loc_82177284;
loc_82177270:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// beq cr6,0x82177330
	if (cr6.getEQ()) goto loc_82177330;
	// stb r28,12(r31)
	PPC_STORE_U8(r31.u32 + 12, r28.u8);
	// b 0x82177314
	goto loc_82177314;
loc_82177284:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821772a8
	if (cr6.getEQ()) goto loc_821772A8;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82177270
	if (!cr6.getEQ()) goto loc_82177270;
loc_821772A8:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177330
	if (cr6.getEQ()) goto loc_82177330;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177330
	if (cr6.getEQ()) goto loc_82177330;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821772f0
	if (cr6.getEQ()) goto loc_821772F0;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x821772f4
	goto loc_821772F4;
loc_821772F0:
	// li r30,0
	r30.s64 = 0;
loc_821772F4:
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lwz r11,64(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 64);
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + r30.u32);
	// cmplw cr6,r29,r10
	cr6.compare<uint32_t>(r29.u32, ctx.r10.u32, xer);
	// beq cr6,0x82177330
	if (cr6.getEQ()) goto loc_82177330;
	// stbx r28,r11,r30
	PPC_STORE_U8(r11.u32 + r30.u32, r28.u8);
loc_82177314:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175480
	sub_82175480(ctx, base);
loc_82177330:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82177338"))) PPC_WEAK_FUNC(sub_82177338);
PPC_FUNC_IMPL(__imp__sub_82177338) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821773bc
	if (cr6.getEQ()) goto loc_821773BC;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821773bc
	if (cr6.getEQ()) goto loc_821773BC;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821773a0
	if (cr6.getEQ()) goto loc_821773A0;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x821773a4
	goto loc_821773A4;
loc_821773A0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_821773A4:
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r4,64(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 64);
	// lwz r11,72(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 72);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x821773c0
	goto loc_821773C0;
loc_821773BC:
	// lbz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 12);
loc_821773C0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821773D8"))) PPC_WEAK_FUNC(sub_821773D8);
PPC_FUNC_IMPL(__imp__sub_821773D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82177418
	if (cr6.getEQ()) goto loc_82177418;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82177448
	if (!cr6.getEQ()) goto loc_82177448;
loc_82177418:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82177440
	if (cr6.getEQ()) goto loc_82177440;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82177448
	if (!cr6.getEQ()) goto loc_82177448;
loc_82177440:
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// b 0x82177464
	goto loc_82177464;
loc_82177448:
	// lwz r30,0(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82177464:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177480"))) PPC_WEAK_FUNC(sub_82177480);
PPC_FUNC_IMPL(__imp__sub_82177480) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r10,32(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmpw cr6,r29,r10
	cr6.compare<int32_t>(r29.s32, ctx.r10.s32, xer);
	// blt cr6,0x82177594
	if (cr6.getLT()) goto loc_82177594;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// bgt cr6,0x82177594
	if (cr6.getGT()) goto loc_82177594;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821774e8
	if (cr6.getEQ()) goto loc_821774E8;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821774e8
	if (cr6.getEQ()) goto loc_821774E8;
loc_821774D4:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// beq cr6,0x82177594
	if (cr6.getEQ()) goto loc_82177594;
	// stw r29,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r29.u32);
	// b 0x82177578
	goto loc_82177578;
loc_821774E8:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217750c
	if (cr6.getEQ()) goto loc_8217750C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x821774d4
	if (!cr6.getEQ()) goto loc_821774D4;
loc_8217750C:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177594
	if (cr6.getEQ()) goto loc_82177594;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177594
	if (cr6.getEQ()) goto loc_82177594;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177554
	if (cr6.getEQ()) goto loc_82177554;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82177558
	goto loc_82177558;
loc_82177554:
	// li r30,0
	r30.s64 = 0;
loc_82177558:
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lwz r11,64(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 64);
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// cmpw cr6,r29,r10
	cr6.compare<int32_t>(r29.s32, ctx.r10.s32, xer);
	// beq cr6,0x82177594
	if (cr6.getEQ()) goto loc_82177594;
	// stwx r29,r11,r30
	PPC_STORE_U32(r11.u32 + r30.u32, r29.u32);
loc_82177578:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175480
	sub_82175480(ctx, base);
loc_82177594:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821775A0"))) PPC_WEAK_FUNC(sub_821775A0);
PPC_FUNC_IMPL(__imp__sub_821775A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82177630
	if (cr6.getEQ()) goto loc_82177630;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177630
	if (cr6.getEQ()) goto loc_82177630;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82177618
	if (cr6.getEQ()) goto loc_82177618;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,64(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 64);
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// b 0x821776a8
	goto loc_821776A8;
loc_82177618:
	// lwz r11,64(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 64);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// b 0x821776a8
	goto loc_821776A8;
loc_82177630:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821776a4
	if (cr6.getEQ()) goto loc_821776A4;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821776a4
	if (cr6.getEQ()) goto loc_821776A4;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217768c
	if (cr6.getEQ()) goto loc_8217768C;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,64(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 64);
	// addi r11,r11,19
	r11.s64 = r11.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// b 0x821776a8
	goto loc_821776A8;
loc_8217768C:
	// lwz r11,64(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 64);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r11,r11,19
	r11.s64 = r11.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// b 0x821776a8
	goto loc_821776A8;
loc_821776A4:
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 12);
loc_821776A8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821776C0"))) PPC_WEAK_FUNC(sub_821776C0);
PPC_FUNC_IMPL(__imp__sub_821776C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r10,32(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplw cr6,r29,r10
	cr6.compare<uint32_t>(r29.u32, ctx.r10.u32, xer);
	// blt cr6,0x821777d4
	if (cr6.getLT()) goto loc_821777D4;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bgt cr6,0x821777d4
	if (cr6.getGT()) goto loc_821777D4;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177728
	if (cr6.getEQ()) goto loc_82177728;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177728
	if (cr6.getEQ()) goto loc_82177728;
loc_82177714:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// beq cr6,0x821777d4
	if (cr6.getEQ()) goto loc_821777D4;
	// stw r29,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r29.u32);
	// b 0x821777b8
	goto loc_821777B8;
loc_82177728:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217774c
	if (cr6.getEQ()) goto loc_8217774C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82177714
	if (!cr6.getEQ()) goto loc_82177714;
loc_8217774C:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821777d4
	if (cr6.getEQ()) goto loc_821777D4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821777d4
	if (cr6.getEQ()) goto loc_821777D4;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177794
	if (cr6.getEQ()) goto loc_82177794;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82177798
	goto loc_82177798;
loc_82177794:
	// li r30,0
	r30.s64 = 0;
loc_82177798:
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lwz r11,64(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 64);
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// cmplw cr6,r29,r10
	cr6.compare<uint32_t>(r29.u32, ctx.r10.u32, xer);
	// beq cr6,0x821777d4
	if (cr6.getEQ()) goto loc_821777D4;
	// stwx r29,r11,r30
	PPC_STORE_U32(r11.u32 + r30.u32, r29.u32);
loc_821777B8:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175480
	sub_82175480(ctx, base);
loc_821777D4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821777E0"))) PPC_WEAK_FUNC(sub_821777E0);
PPC_FUNC_IMPL(__imp__sub_821777E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-23668
	r11.s64 = r11.s64 + -23668;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821777F0"))) PPC_WEAK_FUNC(sub_821777F0);
PPC_FUNC_IMPL(__imp__sub_821777F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r30,r11,-5008
	r30.s64 = r11.s64 + -5008;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_82177810:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217782c
	if (cr6.getEQ()) goto loc_8217782C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217782C:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x82177810
	if (cr6.getLT()) goto loc_82177810;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177858"))) PPC_WEAK_FUNC(sub_82177858);
PPC_FUNC_IMPL(__imp__sub_82177858) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// li r30,1
	r30.s64 = 1;
	// addi r4,r31,60
	ctx.r4.s64 = r31.s64 + 60;
	// lwz r5,40(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// lwz r11,44(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821778a0
	if (cr6.getEQ()) goto loc_821778A0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x82176890
	sub_82176890(ctx, base);
	// b 0x821778a4
	goto loc_821778A4;
loc_821778A0:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_821778A4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821778C0"))) PPC_WEAK_FUNC(sub_821778C0);
PPC_FUNC_IMPL(__imp__sub_821778C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r4,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r4.u32);
	// stw r5,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r5.u32);
	// addi r10,r11,-23612
	ctx.r10.s64 = r11.s64 + -23612;
	// li r11,0
	r11.s64 = 0;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stw r11,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821778E8"))) PPC_WEAK_FUNC(sub_821778E8);
PPC_FUNC_IMPL(__imp__sub_821778E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-23612
	r11.s64 = r11.s64 + -23612;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x82177920
	if (cr6.getEQ()) goto loc_82177920;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r11.u32);
loc_82177920:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177938"))) PPC_WEAK_FUNC(sub_82177938);
PPC_FUNC_IMPL(__imp__sub_82177938) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82177a08
	if (cr6.getLT()) goto loc_82177A08;
	// rlwinm r10,r11,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// lis r9,16383
	ctx.r9.s64 = 1073676288;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// ori r9,r9,65535
	ctx.r9.u64 = ctx.r9.u64 | 65535;
	// addi r29,r11,8
	r29.s64 = r11.s64 + 8;
	// cmplw cr6,r29,r9
	cr6.compare<uint32_t>(r29.u32, ctx.r9.u32, xer);
	// rlwinm r3,r29,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// ble cr6,0x82177980
	if (!cr6.getGT()) goto loc_82177980;
	// li r3,-1
	ctx.r3.s64 = -1;
loc_82177980:
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// ble cr6,0x821779c0
	if (!cr6.getGT()) goto loc_821779C0;
	// li r10,0
	ctx.r10.s64 = 0;
loc_821779A0:
	// lwz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwzx r9,r9,r10
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// stwx r9,r10,r30
	PPC_STORE_U32(ctx.r10.u32 + r30.u32, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// lwz r9,12(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// blt cr6,0x821779a0
	if (cr6.getLT()) goto loc_821779A0;
loc_821779C0:
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// bge cr6,0x821779f0
	if (!cr6.getLT()) goto loc_821779F0;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r10,r11,r29
	ctx.r10.s64 = r29.s64 - r11.s64;
	// add r11,r9,r30
	r11.u64 = ctx.r9.u64 + r30.u64;
	// li r9,0
	ctx.r9.s64 = 0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821779f0
	if (cr6.getEQ()) goto loc_821779F0;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_821779E4:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x821779e4
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_821779E4;
loc_821779F0:
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177a00
	if (cr6.getEQ()) goto loc_82177A00;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
loc_82177A00:
	// stw r30,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r30.u32);
	// stw r29,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r29.u32);
loc_82177A08:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r9,r11,1
	ctx.r9.s64 = r11.s64 + 1;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bge cr6,0x82177a2c
	if (!cr6.getLT()) goto loc_82177A2C;
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r28,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, r28.u32);
loc_82177A2C:
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stw r11,8(r28)
	PPC_STORE_U32(r28.u32 + 8, r11.u32);
	// stw r10,4(r28)
	PPC_STORE_U32(r28.u32 + 4, ctx.r10.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82177A40"))) PPC_WEAK_FUNC(sub_82177A40);
PPC_FUNC_IMPL(__imp__sub_82177A40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// bge cr6,0x82177a5c
	if (!cr6.getLT()) goto loc_82177A5C;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// blr 
	return;
loc_82177A5C:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177A68"))) PPC_WEAK_FUNC(sub_82177A68);
PPC_FUNC_IMPL(__imp__sub_82177A68) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r10,r11,-23604
	ctx.r10.s64 = r11.s64 + -23604;
	// li r11,0
	r11.s64 = 0;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177A88"))) PPC_WEAK_FUNC(sub_82177A88);
PPC_FUNC_IMPL(__imp__sub_82177A88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-23604
	r11.s64 = r11.s64 + -23604;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x82177ac0
	if (cr6.getEQ()) goto loc_82177AC0;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82177AC0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177AD8"))) PPC_WEAK_FUNC(sub_82177AD8);
PPC_FUNC_IMPL(__imp__sub_82177AD8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,16383
	r11.s64 = 1073676288;
	// ori r11,r11,65535
	r11.u64 = r11.u64 | 65535;
	// stw r4,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r4.u32);
	// stw r5,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r5.u32);
	// lwz r30,8(r4)
	r30.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// rlwinm r3,r30,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// ble cr6,0x82177b14
	if (!cr6.getGT()) goto loc_82177B14;
	// li r3,-1
	ctx.r3.s64 = -1;
loc_82177B14:
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
	// beq cr6,0x82177b54
	if (cr6.getEQ()) goto loc_82177B54;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82177b54
	if (cr6.getEQ()) goto loc_82177B54;
	// li r9,0
	ctx.r9.s64 = 0;
	// mr r11,r30
	r11.u64 = r30.u64;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
loc_82177B3C:
	// lwz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stwx r9,r8,r10
	PPC_STORE_U32(ctx.r8.u32 + ctx.r10.u32, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bne cr6,0x82177b3c
	if (!cr6.getEQ()) goto loc_82177B3C;
loc_82177B54:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177B80"))) PPC_WEAK_FUNC(sub_82177B80);
PPC_FUNC_IMPL(__imp__sub_82177B80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r5,r11
	cr6.compare<uint32_t>(ctx.r5.u32, r11.u32, xer);
	// bgelr cr6
	if (!cr6.getLT()) return;
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// rlwinm r10,r5,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r4,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r4.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177BA0"))) PPC_WEAK_FUNC(sub_82177BA0);
PPC_FUNC_IMPL(__imp__sub_82177BA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// bge cr6,0x82177bc0
	if (!cr6.getLT()) goto loc_82177BC0;
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// blr 
	return;
loc_82177BC0:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177BC8"))) PPC_WEAK_FUNC(sub_82177BC8);
PPC_FUNC_IMPL(__imp__sub_82177BC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// li r31,0
	r31.s64 = 0;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// lwz r28,8(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82177c2c
	if (cr6.getEQ()) goto loc_82177C2C;
	// li r30,0
	r30.s64 = 0;
loc_82177BF4:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bge cr6,0x82177c1c
	if (!cr6.getLT()) goto loc_82177C1C;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// lwzx r3,r11,r30
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177c1c
	if (cr6.getEQ()) goto loc_82177C1C;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82176558
	sub_82176558(ctx, base);
loc_82177C1C:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// cmplw cr6,r31,r28
	cr6.compare<uint32_t>(r31.u32, r28.u32, xer);
	// blt cr6,0x82177bf4
	if (cr6.getLT()) goto loc_82177BF4;
loc_82177C2C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82177C38"))) PPC_WEAK_FUNC(sub_82177C38);
PPC_FUNC_IMPL(__imp__sub_82177C38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// li r11,0
	r11.s64 = 0;
	// lwz r10,4(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// lwz r8,8(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// li r10,0
	ctx.r10.s64 = 0;
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// bge cr6,0x82177c7c
	if (!cr6.getLT()) goto loc_82177C7C;
loc_82177C60:
	// lwz r9,12(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 12);
	// lwzx r9,r9,r10
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82177c7c
	if (cr6.getEQ()) goto loc_82177C7C;
	// lbz r9,35(r9)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r9.u32 + 35);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82177c90
	if (!cr6.getEQ()) goto loc_82177C90;
loc_82177C7C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// blt cr6,0x82177c60
	if (cr6.getLT()) goto loc_82177C60;
	// blr 
	return;
loc_82177C90:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177C98"))) PPC_WEAK_FUNC(sub_82177C98);
PPC_FUNC_IMPL(__imp__sub_82177C98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r27,0
	r27.s64 = 0;
	// mr r30,r27
	r30.u64 = r27.u64;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// lwz r26,8(r11)
	r26.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82177d1c
	if (cr6.getEQ()) goto loc_82177D1C;
	// mr r29,r27
	r29.u64 = r27.u64;
loc_82177CC4:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bge cr6,0x82177d0c
	if (!cr6.getLT()) goto loc_82177D0C;
	// lwz r11,12(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 12);
	// lwzx r31,r11,r29
	r31.u64 = PPC_LOAD_U32(r11.u32 + r29.u32);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82177d0c
	if (cr6.getEQ()) goto loc_82177D0C;
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177d08
	if (cr6.getEQ()) goto loc_82177D08;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r27,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r27.u32);
loc_82177D08:
	// stb r27,35(r31)
	PPC_STORE_U8(r31.u32 + 35, r27.u8);
loc_82177D0C:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// cmplw cr6,r30,r26
	cr6.compare<uint32_t>(r30.u32, r26.u32, xer);
	// blt cr6,0x82177cc4
	if (cr6.getLT()) goto loc_82177CC4;
loc_82177D1C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82177D28"))) PPC_WEAK_FUNC(sub_82177D28);
PPC_FUNC_IMPL(__imp__sub_82177D28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177d58
	if (cr6.getEQ()) goto loc_82177D58;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// stw r30,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r30.u32);
loc_82177D58:
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// stw r30,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177D78"))) PPC_WEAK_FUNC(sub_82177D78);
PPC_FUNC_IMPL(__imp__sub_82177D78) {
	PPC_FUNC_PROLOGUE();
	// li r3,55
	ctx.r3.s64 = 55;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177D80"))) PPC_WEAK_FUNC(sub_82177D80);
PPC_FUNC_IMPL(__imp__sub_82177D80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r30{};
	PPCRegister r31{};
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-23592
	ctx.r10.s64 = r11.s64 + -23592;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// addi r9,r9,-30724
	ctx.r9.s64 = ctx.r9.s64 + -30724;
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// addi r31,r10,-30724
	r31.s64 = ctx.r10.s64 + -30724;
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// addi r11,r3,60
	r11.s64 = ctx.r3.s64 + 60;
	// lwz r30,20(r4)
	r30.u64 = PPC_LOAD_U32(ctx.r4.u32 + 20);
	// stw r4,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, ctx.r4.u32);
	// stw r30,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r30.u32);
	// stw r9,48(r3)
	PPC_STORE_U32(ctx.r3.u32 + 48, ctx.r9.u32);
	// addi r9,r11,4
	ctx.r9.s64 = r11.s64 + 4;
	// stw r5,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, ctx.r5.u32);
	// lwz r10,0(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	// stw r10,56(r3)
	PPC_STORE_U32(ctx.r3.u32 + 56, ctx.r10.u32);
	// lwz r10,16(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 16);
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// addi r6,r10,4
	ctx.r6.s64 = ctx.r10.s64 + 4;
	// lwz r5,0(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	// stw r5,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r5.u32);
	// lwz r6,4(r6)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// stw r6,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r6.u32);
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// stb r7,76(r3)
	PPC_STORE_U8(ctx.r3.u32 + 76, ctx.r7.u8);
	// stw r8,80(r3)
	PPC_STORE_U32(ctx.r3.u32 + 80, ctx.r8.u32);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177E30"))) PPC_WEAK_FUNC(sub_82177E30);
PPC_FUNC_IMPL(__imp__sub_82177E30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-23592
	r11.s64 = r11.s64 + -23592;
	// lwz r3,44(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x82177e64
	if (cr6.getEQ()) goto loc_82177E64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x821767b0
	sub_821767B0(ctx, base);
loc_82177E64:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r11,r11,-30724
	r11.s64 = r11.s64 + -30724;
	// addi r10,r10,-30724
	ctx.r10.s64 = ctx.r10.s64 + -30724;
	// addi r9,r9,-30472
	ctx.r9.s64 = ctx.r9.s64 + -30472;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,60(r31)
	PPC_STORE_U32(r31.u32 + 60, r11.u32);
	// stw r10,48(r31)
	PPC_STORE_U32(r31.u32 + 48, ctx.r10.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// bl 0x823b7118
	sub_823B7118(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177EA8"))) PPC_WEAK_FUNC(sub_82177EA8);
PPC_FUNC_IMPL(__imp__sub_82177EA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82177f48
	if (cr6.getEQ()) goto loc_82177F48;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r10,r11,-23592
	ctx.r10.s64 = r11.s64 + -23592;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r6,7
	ctx.r6.s64 = 7;
	// addi r9,r11,-30724
	ctx.r9.s64 = r11.s64 + -30724;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r7,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r7.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// li r10,4
	ctx.r10.s64 = 4;
	// addi r8,r11,-30724
	ctx.r8.s64 = r11.s64 + -30724;
	// li r11,0
	r11.s64 = 0;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// stw r11,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, r11.u32);
	// stw r9,48(r3)
	PPC_STORE_U32(ctx.r3.u32 + 48, ctx.r9.u32);
	// stw r6,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, ctx.r6.u32);
	// stw r8,60(r3)
	PPC_STORE_U32(ctx.r3.u32 + 60, ctx.r8.u32);
	// stw r10,72(r3)
	PPC_STORE_U32(ctx.r3.u32 + 72, ctx.r10.u32);
	// stb r11,76(r3)
	PPC_STORE_U8(ctx.r3.u32 + 76, r11.u8);
	// stw r7,80(r3)
	PPC_STORE_U32(ctx.r3.u32 + 80, ctx.r7.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82177F48:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177F60"))) PPC_WEAK_FUNC(sub_82177F60);
PPC_FUNC_IMPL(__imp__sub_82177F60) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r11,r11,-5008
	r11.s64 = r11.s64 + -5008;
	// lwz r10,72(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 72);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82177F88"))) PPC_WEAK_FUNC(sub_82177F88);
PPC_FUNC_IMPL(__imp__sub_82177F88) {
	PPC_FUNC_PROLOGUE();
	// li r3,56
	ctx.r3.s64 = 56;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82177F90"))) PPC_WEAK_FUNC(sub_82177F90);
PPC_FUNC_IMPL(__imp__sub_82177F90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-23512
	ctx.r10.s64 = r11.s64 + -23512;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// addi r9,r9,-30724
	ctx.r9.s64 = ctx.r9.s64 + -30724;
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// addi r8,r10,-30724
	ctx.r8.s64 = ctx.r10.s64 + -30724;
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// addi r11,r3,60
	r11.s64 = ctx.r3.s64 + 60;
	// lwz r10,20(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 20);
	// stw r4,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, ctx.r4.u32);
	// stw r10,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, ctx.r10.u32);
	// stw r9,48(r3)
	PPC_STORE_U32(ctx.r3.u32 + 48, ctx.r9.u32);
	// addi r9,r11,4
	ctx.r9.s64 = r11.s64 + 4;
	// lwz r10,4(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + 4);
	// stw r10,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, ctx.r10.u32);
	// lwz r10,8(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	// stw r10,56(r3)
	PPC_STORE_U32(ctx.r3.u32 + 56, ctx.r10.u32);
	// lwz r10,16(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 16);
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r8,r10,4
	ctx.r8.s64 = ctx.r10.s64 + 4;
	// lwz r7,0(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// stw r7,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r7.u32);
	// lwz r8,4(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// stw r8,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r8.u32);
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82178030"))) PPC_WEAK_FUNC(sub_82178030);
PPC_FUNC_IMPL(__imp__sub_82178030) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,76
	ctx.r3.s64 = 76;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821780c8
	if (cr6.getEQ()) goto loc_821780C8;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r10,r11,-23512
	ctx.r10.s64 = r11.s64 + -23512;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r9,r11,-30724
	ctx.r9.s64 = r11.s64 + -30724;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r7,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r7.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// li r7,7
	ctx.r7.s64 = 7;
	// addi r8,r11,-30724
	ctx.r8.s64 = r11.s64 + -30724;
	// li r11,0
	r11.s64 = 0;
	// li r10,4
	ctx.r10.s64 = 4;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// stw r11,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, r11.u32);
	// stw r9,48(r3)
	PPC_STORE_U32(ctx.r3.u32 + 48, ctx.r9.u32);
	// stw r7,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, ctx.r7.u32);
	// stw r8,60(r3)
	PPC_STORE_U32(ctx.r3.u32 + 60, ctx.r8.u32);
	// stw r10,72(r3)
	PPC_STORE_U32(ctx.r3.u32 + 72, ctx.r10.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821780C8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821780E0"))) PPC_WEAK_FUNC(sub_821780E0);
PPC_FUNC_IMPL(__imp__sub_821780E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r30,1
	r30.s64 = 1;
	// addi r11,r11,-5008
	r11.s64 = r11.s64 + -5008;
	// addi r4,r31,60
	ctx.r4.s64 = r31.s64 + 60;
	// lwz r10,72(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 72);
	// lwz r5,40(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,44(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217813c
	if (cr6.getEQ()) goto loc_8217813C;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x82176aa0
	sub_82176AA0(ctx, base);
	// b 0x82178140
	goto loc_82178140;
loc_8217813C:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_82178140:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82178158"))) PPC_WEAK_FUNC(sub_82178158);
PPC_FUNC_IMPL(__imp__sub_82178158) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r30,r11,-5008
	r30.s64 = r11.s64 + -5008;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_82178178:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178194
	if (cr6.getEQ()) goto loc_82178194;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82178194:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x82178178
	if (cr6.getLT()) goto loc_82178178;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821781C0"))) PPC_WEAK_FUNC(sub_821781C0);
PPC_FUNC_IMPL(__imp__sub_821781C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r30,r11,-5008
	r30.s64 = r11.s64 + -5008;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_821781DC:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821781fc
	if (cr6.getEQ()) goto loc_821781FC;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_821781FC:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x821781dc
	if (cr6.getLT()) goto loc_821781DC;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82178218"))) PPC_WEAK_FUNC(sub_82178218);
PPC_FUNC_IMPL(__imp__sub_82178218) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r30,r11,-5008
	r30.s64 = r11.s64 + -5008;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_82178234:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178254
	if (cr6.getEQ()) goto loc_82178254;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82178254:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x82178234
	if (cr6.getLT()) goto loc_82178234;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82178270"))) PPC_WEAK_FUNC(sub_82178270);
PPC_FUNC_IMPL(__imp__sub_82178270) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r30,r11,-5008
	r30.s64 = r11.s64 + -5008;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_8217828C:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821782ac
	if (cr6.getEQ()) goto loc_821782AC;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_821782AC:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x8217828c
	if (cr6.getLT()) goto loc_8217828C;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821782C8"))) PPC_WEAK_FUNC(sub_821782C8);
PPC_FUNC_IMPL(__imp__sub_821782C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r30,r11,-5008
	r30.s64 = r11.s64 + -5008;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_821782E4:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178304
	if (cr6.getEQ()) goto loc_82178304;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82178304:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x821782e4
	if (cr6.getLT()) goto loc_821782E4;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82178320"))) PPC_WEAK_FUNC(sub_82178320);
PPC_FUNC_IMPL(__imp__sub_82178320) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r30,r11,-5008
	r30.s64 = r11.s64 + -5008;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_8217833C:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217835c
	if (cr6.getEQ()) goto loc_8217835C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217835C:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x8217833c
	if (cr6.getLT()) goto loc_8217833C;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82178378"))) PPC_WEAK_FUNC(sub_82178378);
PPC_FUNC_IMPL(__imp__sub_82178378) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r30,r11,-5008
	r30.s64 = r11.s64 + -5008;
	// li r11,0
	r11.s64 = 0;
	// mr r31,r30
	r31.u64 = r30.u64;
	// stb r11,-5072(r10)
	PPC_STORE_U8(ctx.r10.u32 + -5072, r11.u8);
loc_821783A4:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821783c0
	if (cr6.getEQ()) goto loc_821783C0;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_821783C0:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x821783a4
	if (cr6.getLT()) goto loc_821783A4;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821783E8"))) PPC_WEAK_FUNC(sub_821783E8);
PPC_FUNC_IMPL(__imp__sub_821783E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r27,-31992
	r27.s64 = -2096627712;
	// lis r28,-31993
	r28.s64 = -2096693248;
	// lbz r11,-5072(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + -5072);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821785b0
	if (cr6.getEQ()) goto loc_821785B0;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r29,1
	r29.s64 = 1;
	// addi r30,r11,-5008
	r30.s64 = r11.s64 + -5008;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_82178418:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178440
	if (cr6.getEQ()) goto loc_82178440;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178454
	if (cr6.getEQ()) goto loc_82178454;
loc_82178440:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x82178418
	if (cr6.getLT()) goto loc_82178418;
	// b 0x82178458
	goto loc_82178458;
loc_82178454:
	// li r29,0
	r29.s64 = 0;
loc_82178458:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178474
	if (cr6.getEQ()) goto loc_82178474;
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,1172
	ctx.r3.s64 = r11.s64 + 1172;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_82178474:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82178584
	if (cr6.getEQ()) goto loc_82178584;
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// addi r3,r11,1224
	ctx.r3.s64 = r11.s64 + 1224;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82178584
	if (!cr6.getEQ()) goto loc_82178584;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r30,1
	r30.s64 = 1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217855c
	if (cr6.getEQ()) goto loc_8217855C;
loc_821784D4:
	// lbz r10,132(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 132);
	// mr r31,r11
	r31.u64 = r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82178540
	if (cr6.getEQ()) goto loc_82178540;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82178540
	if (!cr6.getEQ()) goto loc_82178540;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821521d0
	sub_821521D0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82178540
	if (!cr6.getEQ()) goto loc_82178540;
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,1172
	ctx.r3.s64 = r11.s64 + 1172;
	// lwz r11,1172(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1172);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178558
	if (cr6.getEQ()) goto loc_82178558;
loc_82178540:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821784d4
	if (!cr6.getEQ()) goto loc_821784D4;
	// b 0x8217855c
	goto loc_8217855C;
loc_82178558:
	// li r30,0
	r30.s64 = 0;
loc_8217855C:
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178578
	if (cr6.getEQ()) goto loc_82178578;
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,1224
	ctx.r3.s64 = r11.s64 + 1224;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_82178578:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-30572
	r11.s64 = r11.s64 + -30572;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
loc_82178584:
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// addi r3,r11,1224
	ctx.r3.s64 = r11.s64 + 1224;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x821785b0
	if (!cr6.getEQ()) goto loc_821785B0;
	// li r11,0
	r11.s64 = 0;
	// stb r11,-5072(r27)
	PPC_STORE_U8(r27.u32 + -5072, r11.u8);
loc_821785B0:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217868c
	if (cr6.getEQ()) goto loc_8217868C;
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// addi r3,r11,1224
	ctx.r3.s64 = r11.s64 + 1224;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// bne cr6,0x82178644
	if (!cr6.getEQ()) goto loc_82178644;
	// addi r3,r11,1276
	ctx.r3.s64 = r11.s64 + 1276;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82178614
	if (!cr6.getEQ()) goto loc_82178614;
	// bl 0x82180188
	sub_82180188(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217868c
	if (cr6.getEQ()) goto loc_8217868C;
loc_82178614:
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// addi r3,r11,1224
	ctx.r3.s64 = r11.s64 + 1224;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217868c
	if (cr6.getEQ()) goto loc_8217868C;
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r11,1224
	ctx.r3.s64 = r11.s64 + 1224;
	// bl 0x82177218
	sub_82177218(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
loc_82178644:
	// addi r3,r11,1224
	ctx.r3.s64 = r11.s64 + 1224;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x8217868c
	if (!cr6.getEQ()) goto loc_8217868C;
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// addi r3,r11,1224
	ctx.r3.s64 = r11.s64 + 1224;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217868c
	if (cr6.getEQ()) goto loc_8217868C;
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,1224
	ctx.r3.s64 = r11.s64 + 1224;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_8217868C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82178698"))) PPC_WEAK_FUNC(sub_82178698);
PPC_FUNC_IMPL(__imp__sub_82178698) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// addi r3,r11,1224
	ctx.r3.s64 = r11.s64 + 1224;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x821786d4
	if (!cr6.getEQ()) goto loc_821786D4;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x82178218
	sub_82178218(ctx, base);
loc_821786D4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821786E8"))) PPC_WEAK_FUNC(sub_821786E8);
PPC_FUNC_IMPL(__imp__sub_821786E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r30,0
	r30.s64 = 0;
	// addi r11,r11,-23688
	r11.s64 = r11.s64 + -23688;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x82178788
	if (cr6.getEQ()) goto loc_82178788;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178788
	if (cr6.getEQ()) goto loc_82178788;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stb r30,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r30.u8);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82178778
	if (cr6.getEQ()) goto loc_82178778;
loc_8217875C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175f98
	sub_82175F98(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x8217875c
	if (!cr6.getEQ()) goto loc_8217875C;
loc_82178778:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-30572
	r11.s64 = r11.s64 + -30572;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// b 0x8217882c
	goto loc_8217882C;
loc_82178788:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821787b8
	if (cr6.getEQ()) goto loc_821787B8;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821787b8
	if (cr6.getEQ()) goto loc_821787B8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82176048
	sub_82176048(ctx, base);
	// b 0x8217882c
	goto loc_8217882C;
loc_821787B8:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217882c
	if (cr6.getEQ()) goto loc_8217882C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217882c
	if (cr6.getEQ()) goto loc_8217882C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stb r30,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, r30.u8);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r4,104(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82178820
	if (cr6.getEQ()) goto loc_82178820;
loc_82178804:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175f98
	sub_82175F98(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r4,104(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x82178804
	if (!cr6.getEQ()) goto loc_82178804;
loc_82178820:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-30572
	r11.s64 = r11.s64 + -30572;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
loc_8217882C:
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178850
	if (cr6.getEQ()) goto loc_82178850;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r30,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r30.u32);
loc_82178850:
	// lis r8,-31992
	ctx.r8.s64 = -2096627712;
	// lwz r9,40(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lwz r10,-5068(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + -5068);
	// bne cr6,0x8217887c
	if (!cr6.getEQ()) goto loc_8217887C;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217887c
	if (!cr6.getEQ()) goto loc_8217887C;
	// cmplw cr6,r10,r31
	cr6.compare<uint32_t>(ctx.r10.u32, r31.u32, xer);
	// mr r11,r30
	r11.u64 = r30.u64;
	// bne cr6,0x82178880
	if (!cr6.getEQ()) goto loc_82178880;
loc_8217887C:
	// li r11,1
	r11.s64 = 1;
loc_82178880:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821788c8
	if (cr6.getEQ()) goto loc_821788C8;
	// cmplw cr6,r10,r31
	cr6.compare<uint32_t>(ctx.r10.u32, r31.u32, xer);
	// bne cr6,0x82178898
	if (!cr6.getEQ()) goto loc_82178898;
	// stw r9,-5068(r8)
	PPC_STORE_U32(ctx.r8.u32 + -5068, ctx.r9.u32);
loc_82178898:
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821788ac
	if (cr6.getEQ()) goto loc_821788AC;
	// lwz r10,44(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// stw r10,44(r11)
	PPC_STORE_U32(r11.u32 + 44, ctx.r10.u32);
loc_821788AC:
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821788c0
	if (cr6.getEQ()) goto loc_821788C0;
	// lwz r10,40(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
loc_821788C0:
	// stw r30,40(r31)
	PPC_STORE_U32(r31.u32 + 40, r30.u32);
	// stw r30,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r30.u32);
loc_821788C8:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178908
	if (cr6.getEQ()) goto loc_82178908;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x821788fc
	if (cr6.getEQ()) goto loc_821788FC;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x821788fc
	if (cr6.getEQ()) goto loc_821788FC;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x821788fc
	if (cr6.getEQ()) goto loc_821788FC;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// b 0x82178904
	goto loc_82178904;
loc_821788FC:
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209cc20
	sub_8209CC20(ctx, base);
loc_82178904:
	// stw r30,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r30.u32);
loc_82178908:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-30724
	r11.s64 = r11.s64 + -30724;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82178930"))) PPC_WEAK_FUNC(sub_82178930);
PPC_FUNC_IMPL(__imp__sub_82178930) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821789c4
	if (cr6.getEQ()) goto loc_821789C4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821789c4
	if (cr6.getEQ()) goto loc_821789C4;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stb r30,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r30.u8);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x821789b4
	if (cr6.getEQ()) goto loc_821789B4;
loc_82178998:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175f98
	sub_82175F98(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x82178998
	if (!cr6.getEQ()) goto loc_82178998;
loc_821789B4:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-30572
	r11.s64 = r11.s64 + -30572;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// b 0x82178a68
	goto loc_82178A68;
loc_821789C4:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821789f4
	if (cr6.getEQ()) goto loc_821789F4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821789f4
	if (cr6.getEQ()) goto loc_821789F4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82176048
	sub_82176048(ctx, base);
	// b 0x82178a68
	goto loc_82178A68;
loc_821789F4:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178a68
	if (cr6.getEQ()) goto loc_82178A68;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178a68
	if (cr6.getEQ()) goto loc_82178A68;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stb r30,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, r30.u8);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r4,104(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82178a5c
	if (cr6.getEQ()) goto loc_82178A5C;
loc_82178A40:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175f98
	sub_82175F98(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r4,104(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x82178a40
	if (!cr6.getEQ()) goto loc_82178A40;
loc_82178A5C:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-30572
	r11.s64 = r11.s64 + -30572;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
loc_82178A68:
	// lis r8,-31992
	ctx.r8.s64 = -2096627712;
	// lwz r9,40(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lwz r10,-5068(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + -5068);
	// bne cr6,0x82178a94
	if (!cr6.getEQ()) goto loc_82178A94;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82178a94
	if (!cr6.getEQ()) goto loc_82178A94;
	// cmplw cr6,r10,r31
	cr6.compare<uint32_t>(ctx.r10.u32, r31.u32, xer);
	// mr r11,r30
	r11.u64 = r30.u64;
	// bne cr6,0x82178a98
	if (!cr6.getEQ()) goto loc_82178A98;
loc_82178A94:
	// li r11,1
	r11.s64 = 1;
loc_82178A98:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178ae0
	if (cr6.getEQ()) goto loc_82178AE0;
	// cmplw cr6,r10,r31
	cr6.compare<uint32_t>(ctx.r10.u32, r31.u32, xer);
	// bne cr6,0x82178ab0
	if (!cr6.getEQ()) goto loc_82178AB0;
	// stw r9,-5068(r8)
	PPC_STORE_U32(ctx.r8.u32 + -5068, ctx.r9.u32);
loc_82178AB0:
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178ac4
	if (cr6.getEQ()) goto loc_82178AC4;
	// lwz r10,44(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// stw r10,44(r11)
	PPC_STORE_U32(r11.u32 + 44, ctx.r10.u32);
loc_82178AC4:
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178ad8
	if (cr6.getEQ()) goto loc_82178AD8;
	// lwz r10,40(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
loc_82178AD8:
	// stw r30,40(r31)
	PPC_STORE_U32(r31.u32 + 40, r30.u32);
	// stw r30,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r30.u32);
loc_82178AE0:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178b20
	if (cr6.getEQ()) goto loc_82178B20;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x82178b14
	if (cr6.getEQ()) goto loc_82178B14;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82178b14
	if (cr6.getEQ()) goto loc_82178B14;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x82178b14
	if (cr6.getEQ()) goto loc_82178B14;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// b 0x82178b1c
	goto loc_82178B1C;
loc_82178B14:
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209cc20
	sub_8209CC20(ctx, base);
loc_82178B1C:
	// stw r30,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r30.u32);
loc_82178B20:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82178B38"))) PPC_WEAK_FUNC(sub_82178B38);
PPC_FUNC_IMPL(__imp__sub_82178B38) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178b7c
	if (cr6.getEQ()) goto loc_82178B7C;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82178c0c
	if (!cr6.getEQ()) goto loc_82178C0C;
loc_82178B7C:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178be4
	if (cr6.getEQ()) goto loc_82178BE4;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178be4
	if (cr6.getEQ()) goto loc_82178BE4;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178bc8
	if (cr6.getEQ()) goto loc_82178BC8;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x82178bcc
	goto loc_82178BCC;
loc_82178BC8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82178BCC:
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// bne cr6,0x82178cf4
	if (!cr6.getEQ()) goto loc_82178CF4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82176048
	sub_82176048(ctx, base);
	// b 0x82178cec
	goto loc_82178CEC;
loc_82178BE4:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178c1c
	if (cr6.getEQ()) goto loc_82178C1C;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178c1c
	if (cr6.getEQ()) goto loc_82178C1C;
loc_82178C0C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82175f98
	sub_82175F98(ctx, base);
	// b 0x82178cf4
	goto loc_82178CF4;
loc_82178C1C:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178c68
	if (cr6.getEQ()) goto loc_82178C68;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178c68
	if (cr6.getEQ()) goto loc_82178C68;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178cdc
	if (cr6.getEQ()) goto loc_82178CDC;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x82178ce0
	goto loc_82178CE0;
loc_82178C68:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178c90
	if (cr6.getEQ()) goto loc_82178C90;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82178cf4
	if (!cr6.getEQ()) goto loc_82178CF4;
loc_82178C90:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178cf4
	if (cr6.getEQ()) goto loc_82178CF4;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178cf4
	if (cr6.getEQ()) goto loc_82178CF4;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178cdc
	if (cr6.getEQ()) goto loc_82178CDC;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x82178ce0
	goto loc_82178CE0;
loc_82178CDC:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82178CE0:
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// bne cr6,0x82178cf4
	if (!cr6.getEQ()) goto loc_82178CF4;
loc_82178CEC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82178930
	sub_82178930(ctx, base);
loc_82178CF4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82178D10"))) PPC_WEAK_FUNC(sub_82178D10);
PPC_FUNC_IMPL(__imp__sub_82178D10) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r4,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r4.u32);
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r11,r11,-23668
	r11.s64 = r11.s64 + -23668;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r10,r10,-5008
	ctx.r10.s64 = ctx.r10.s64 + -5008;
	// rlwinm r8,r4,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stwx r3,r8,r10
	PPC_STORE_U32(ctx.r8.u32 + ctx.r10.u32, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82178D40"))) PPC_WEAK_FUNC(sub_82178D40);
PPC_FUNC_IMPL(__imp__sub_82178D40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-23668
	r11.s64 = r11.s64 + -23668;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x82178d74
	if (cr6.getEQ()) goto loc_82178D74;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82178D74:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82178D88"))) PPC_WEAK_FUNC(sub_82178D88);
PPC_FUNC_IMPL(__imp__sub_82178D88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r11,r11,-23612
	r11.s64 = r11.s64 + -23612;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x82178dc8
	if (cr6.getEQ()) goto loc_82178DC8;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r11.u32);
loc_82178DC8:
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178de0
	if (cr6.getEQ()) goto loc_82178DE0;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82178DE0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82178DF8"))) PPC_WEAK_FUNC(sub_82178DF8);
PPC_FUNC_IMPL(__imp__sub_82178DF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r11,r11,-23604
	r11.s64 = r11.s64 + -23604;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x82178e38
	if (cr6.getEQ()) goto loc_82178E38;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82178E38:
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178e50
	if (cr6.getEQ()) goto loc_82178E50;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82178E50:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82178E68"))) PPC_WEAK_FUNC(sub_82178E68);
PPC_FUNC_IMPL(__imp__sub_82178E68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178ee8
	if (cr6.getEQ()) goto loc_82178EE8;
	// lwz r28,8(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// li r27,0
	r27.s64 = 0;
	// mr r31,r27
	r31.u64 = r27.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82178ee8
	if (cr6.getEQ()) goto loc_82178EE8;
	// mr r30,r27
	r30.u64 = r27.u64;
loc_82178E9C:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bge cr6,0x82178ed8
	if (!cr6.getLT()) goto loc_82178ED8;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// lwzx r3,r11,r30
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178ed8
	if (cr6.getEQ()) goto loc_82178ED8;
	// bl 0x82178930
	sub_82178930(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bge cr6,0x82178ed8
	if (!cr6.getLT()) goto loc_82178ED8;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// stwx r27,r11,r30
	PPC_STORE_U32(r11.u32 + r30.u32, r27.u32);
loc_82178ED8:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// cmplw cr6,r31,r28
	cr6.compare<uint32_t>(r31.u32, r28.u32, xer);
	// blt cr6,0x82178e9c
	if (cr6.getLT()) goto loc_82178E9C;
loc_82178EE8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82178EF0"))) PPC_WEAK_FUNC(sub_82178EF0);
PPC_FUNC_IMPL(__imp__sub_82178EF0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82178e68
	sub_82178E68(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82178F30"))) PPC_WEAK_FUNC(sub_82178F30);
PPC_FUNC_IMPL(__imp__sub_82178F30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// li r31,0
	r31.s64 = 0;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// lwz r28,8(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82178f94
	if (cr6.getEQ()) goto loc_82178F94;
	// li r30,0
	r30.s64 = 0;
loc_82178F5C:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bge cr6,0x82178f84
	if (!cr6.getLT()) goto loc_82178F84;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// lwzx r3,r11,r30
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82178f84
	if (cr6.getEQ()) goto loc_82178F84;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82178b38
	sub_82178B38(ctx, base);
loc_82178F84:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// cmplw cr6,r31,r28
	cr6.compare<uint32_t>(r31.u32, r28.u32, xer);
	// blt cr6,0x82178f5c
	if (cr6.getLT()) goto loc_82178F5C;
loc_82178F94:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82178FA0"))) PPC_WEAK_FUNC(sub_82178FA0);
PPC_FUNC_IMPL(__imp__sub_82178FA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82177e30
	sub_82177E30(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82178fd8
	if (cr6.getEQ()) goto loc_82178FD8;
	// bl 0x8209e328
	sub_8209E328(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82178FD8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82178FF0"))) PPC_WEAK_FUNC(sub_82178FF0);
PPC_FUNC_IMPL(__imp__sub_82178FF0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-23592
	ctx.r10.s64 = r11.s64 + -23592;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// addi r9,r9,-30724
	ctx.r9.s64 = ctx.r9.s64 + -30724;
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// addi r8,r10,-30724
	ctx.r8.s64 = ctx.r10.s64 + -30724;
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// addi r11,r3,60
	r11.s64 = ctx.r3.s64 + 60;
	// lwz r10,20(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 20);
	// stw r4,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, ctx.r4.u32);
	// stw r10,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, ctx.r10.u32);
	// stw r9,48(r3)
	PPC_STORE_U32(ctx.r3.u32 + 48, ctx.r9.u32);
	// addi r9,r11,4
	ctx.r9.s64 = r11.s64 + 4;
	// lwz r10,4(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + 4);
	// stw r10,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, ctx.r10.u32);
	// lwz r10,8(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	// stw r10,56(r3)
	PPC_STORE_U32(ctx.r3.u32 + 56, ctx.r10.u32);
	// lwz r10,16(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 16);
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r8,r10,4
	ctx.r8.s64 = ctx.r10.s64 + 4;
	// lwz r5,0(r8)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// stw r5,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r5.u32);
	// lwz r8,4(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// stw r8,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r8.u32);
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// stb r6,76(r3)
	PPC_STORE_U8(ctx.r3.u32 + 76, ctx.r6.u8);
	// stw r7,80(r3)
	PPC_STORE_U32(ctx.r3.u32 + 80, ctx.r7.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179098"))) PPC_WEAK_FUNC(sub_82179098);
PPC_FUNC_IMPL(__imp__sub_82179098) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r29,r31,60
	r29.s64 = r31.s64 + 60;
	// li r5,2
	ctx.r5.s64 = 2;
	// lwz r28,40(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,12(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lwz r10,12(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// addi r11,r11,-5008
	r11.s64 = r11.s64 + -5008;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,48(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 48);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lbz r4,76(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 76);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lwz r3,40(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// addi r5,r31,48
	ctx.r5.s64 = r31.s64 + 48;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82179148"))) PPC_WEAK_FUNC(sub_82179148);
PPC_FUNC_IMPL(__imp__sub_82179148) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// addi r29,r31,40
	r29.s64 = r31.s64 + 40;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-5008
	r11.s64 = r11.s64 + -5008;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// addi r5,r31,60
	ctx.r5.s64 = r31.s64 + 60;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,52(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 52);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// stb r3,76(r31)
	PPC_STORE_U8(r31.u32 + 76, ctx.r3.u8);
	// addi r5,r31,48
	ctx.r5.s64 = r31.s64 + 48;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821791E8"))) PPC_WEAK_FUNC(sub_821791E8);
PPC_FUNC_IMPL(__imp__sub_821791E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r10,r10,-23512
	ctx.r10.s64 = ctx.r10.s64 + -23512;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// beq cr6,0x82179234
	if (cr6.getEQ()) goto loc_82179234;
	// lwz r10,36(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplw cr6,r10,r31
	cr6.compare<uint32_t>(ctx.r10.u32, r31.u32, xer);
	// bne cr6,0x82179234
	if (!cr6.getEQ()) goto loc_82179234;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,36(r11)
	PPC_STORE_U32(r11.u32 + 36, ctx.r10.u32);
	// stb r10,35(r11)
	PPC_STORE_U8(r11.u32 + 35, ctx.r10.u8);
loc_82179234:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r11,r11,-30724
	r11.s64 = r11.s64 + -30724;
	// addi r10,r10,-30724
	ctx.r10.s64 = ctx.r10.s64 + -30724;
	// addi r9,r9,-30472
	ctx.r9.s64 = ctx.r9.s64 + -30472;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,60(r31)
	PPC_STORE_U32(r31.u32 + 60, r11.u32);
	// stw r10,48(r31)
	PPC_STORE_U32(r31.u32 + 48, ctx.r10.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// bl 0x823b7118
	sub_823B7118(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179278
	if (cr6.getEQ()) goto loc_82179278;
	// bl 0x8209e328
	sub_8209E328(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82179278:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179290"))) PPC_WEAK_FUNC(sub_82179290);
PPC_FUNC_IMPL(__imp__sub_82179290) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r29,r31,60
	r29.s64 = r31.s64 + 60;
	// li r5,2
	ctx.r5.s64 = 2;
	// lwz r28,40(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,12(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lwz r10,12(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// addi r11,r11,-5008
	r11.s64 = r11.s64 + -5008;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,48(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 48);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r3,40(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// addi r5,r31,48
	ctx.r5.s64 = r31.s64 + 48;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82179330"))) PPC_WEAK_FUNC(sub_82179330);
PPC_FUNC_IMPL(__imp__sub_82179330) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// addi r29,r31,40
	r29.s64 = r31.s64 + 40;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-5008
	r11.s64 = r11.s64 + -5008;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// addi r5,r31,60
	ctx.r5.s64 = r31.s64 + 60;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,52(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 52);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r3,40(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// addi r5,r31,48
	ctx.r5.s64 = r31.s64 + 48;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821793B8"))) PPC_WEAK_FUNC(sub_821793B8);
PPC_FUNC_IMPL(__imp__sub_821793B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// add r11,r4,r3
	r11.u64 = ctx.r4.u64 + ctx.r3.u64;
	// lbz r3,12(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 12);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821793C8"))) PPC_WEAK_FUNC(sub_821793C8);
PPC_FUNC_IMPL(__imp__sub_821793C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// add r11,r4,r3
	r11.u64 = ctx.r4.u64 + ctx.r3.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r10,12(r11)
	PPC_STORE_U8(r11.u32 + 12, ctx.r10.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821793D8"))) PPC_WEAK_FUNC(sub_821793D8);
PPC_FUNC_IMPL(__imp__sub_821793D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// add r11,r4,r3
	r11.u64 = ctx.r4.u64 + ctx.r3.u64;
	// lbz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 12);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// cmpwi cr6,r10,256
	cr6.compare<int32_t>(ctx.r10.s32, 256, xer);
	// stb r10,12(r11)
	PPC_STORE_U8(r11.u32 + 12, ctx.r10.u8);
	// bltlr cr6
	if (cr6.getLT()) return;
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r10,12(r11)
	PPC_STORE_U8(r11.u32 + 12, ctx.r10.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179400"))) PPC_WEAK_FUNC(sub_82179400);
PPC_FUNC_IMPL(__imp__sub_82179400) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// addi r11,r3,4
	r11.s64 = ctx.r3.s64 + 4;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,8
	ctx.r10.s64 = 8;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82179410:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x82179410
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179410;
	// addi r11,r3,12
	r11.s64 = ctx.r3.s64 + 12;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,64
	ctx.r10.s64 = 64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8217942C:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x8217942c
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8217942C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r10,r3,76
	ctx.r10.s64 = ctx.r3.s64 + 76;
	// addi r9,r11,-23312
	ctx.r9.s64 = r11.s64 + -23312;
	// li r11,64
	r11.s64 = 64;
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
loc_8217944C:
	// lwz r9,24(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + 24);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bne cr6,0x8217944c
	if (!cr6.getEQ()) goto loc_8217944C;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179468"))) PPC_WEAK_FUNC(sub_82179468);
PPC_FUNC_IMPL(__imp__sub_82179468) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r4,19
	r11.s64 = ctx.r4.s64 + 19;
	// lwz r10,8(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r11,r3
	PPC_STORE_U32(r11.u32 + ctx.r3.u32, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179480"))) PPC_WEAK_FUNC(sub_82179480);
PPC_FUNC_IMPL(__imp__sub_82179480) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r4,19
	r11.s64 = ctx.r4.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stbx r5,r11,r3
	PPC_STORE_U8(r11.u32 + ctx.r3.u32, ctx.r5.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179490"))) PPC_WEAK_FUNC(sub_82179490);
PPC_FUNC_IMPL(__imp__sub_82179490) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r4,19
	r11.s64 = ctx.r4.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r5,r11,r3
	PPC_STORE_U32(r11.u32 + ctx.r3.u32, ctx.r5.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821794A0"))) PPC_WEAK_FUNC(sub_821794A0);
PPC_FUNC_IMPL(__imp__sub_821794A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// addi r11,r4,19
	r11.s64 = ctx.r4.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stfsx f1,r11,r3
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r11.u32 + ctx.r3.u32, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821794B0"))) PPC_WEAK_FUNC(sub_821794B0);
PPC_FUNC_IMPL(__imp__sub_821794B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r4,19
	r11.s64 = ctx.r4.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821794C0"))) PPC_WEAK_FUNC(sub_821794C0);
PPC_FUNC_IMPL(__imp__sub_821794C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r4,19
	r11.s64 = ctx.r4.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821794D0"))) PPC_WEAK_FUNC(sub_821794D0);
PPC_FUNC_IMPL(__imp__sub_821794D0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// addi r11,r4,19
	r11.s64 = ctx.r4.s64 + 19;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f1,r11,r3
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821794E0"))) PPC_WEAK_FUNC(sub_821794E0);
PPC_FUNC_IMPL(__imp__sub_821794E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// addi r11,r4,19
	r11.s64 = ctx.r4.s64 + 19;
	// addi r10,r5,8
	ctx.r10.s64 = ctx.r5.s64 + 8;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// addi r8,r11,4
	ctx.r8.s64 = r11.s64 + 4;
loc_821794F4:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// subf. r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x82179514
	if (!cr0.getEQ()) goto loc_82179514;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// bne cr6,0x821794f4
	if (!cr6.getEQ()) goto loc_821794F4;
loc_82179514:
	// cntlzw r11,r9
	r11.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179520"))) PPC_WEAK_FUNC(sub_82179520);
PPC_FUNC_IMPL(__imp__sub_82179520) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lwz r11,8(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	// addi r10,r4,19
	ctx.r10.s64 = ctx.r4.s64 + 19;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r11,r10,r3
	PPC_STORE_U32(ctx.r10.u32 + ctx.r3.u32, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179538"))) PPC_WEAK_FUNC(sub_82179538);
PPC_FUNC_IMPL(__imp__sub_82179538) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lbz r5,8(r5)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r5.u32 + 8);
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82179550"))) PPC_WEAK_FUNC(sub_82179550);
PPC_FUNC_IMPL(__imp__sub_82179550) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister temp{};
	// clrlwi r10,r5,24
	ctx.r10.u64 = ctx.r5.u32 & 0xFF;
	// srawi r11,r4,3
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x7) != 0);
	r11.s64 = ctx.r4.s32 >> 3;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// srawi r10,r4,3
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r4.s32 >> 3;
	// li r9,1
	ctx.r9.s64 = 1;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r10,r4
	ctx.r10.s64 = ctx.r4.s64 - ctx.r10.s64;
	// slw r10,r9,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r9.u32 << (ctx.r10.u8 & 0x3F));
	// lbz r9,76(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 76);
	// beq cr6,0x82179590
	if (cr6.getEQ()) goto loc_82179590;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// stb r10,76(r11)
	PPC_STORE_U8(r11.u32 + 76, ctx.r10.u8);
	// blr 
	return;
loc_82179590:
	// andc r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 & ~ctx.r10.u64;
	// stb r10,76(r11)
	PPC_STORE_U8(r11.u32 + 76, ctx.r10.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821795A0"))) PPC_WEAK_FUNC(sub_821795A0);
PPC_FUNC_IMPL(__imp__sub_821795A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister temp{};
	// srawi r11,r4,3
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x7) != 0);
	r11.s64 = ctx.r4.s32 >> 3;
	// li r10,1
	ctx.r10.s64 = 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// srawi r9,r4,3
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x7) != 0);
	ctx.r9.s64 = ctx.r4.s32 >> 3;
	// rlwinm r8,r11,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// addze r11,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	r11.s64 = temp.s64;
	// subf r9,r8,r4
	ctx.r9.s64 = ctx.r4.s64 - ctx.r8.s64;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// lbz r11,76(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 76);
	// slw r10,r10,r9
	ctx.r10.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r10.u32 << (ctx.r9.u8 & 0x3F));
	// and r11,r10,r11
	r11.u64 = ctx.r10.u64 & r11.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821795E0"))) PPC_WEAK_FUNC(sub_821795E0);
PPC_FUNC_IMPL(__imp__sub_821795E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lbz r31,8(r5)
	r31.u64 = PPC_LOAD_U8(ctx.r5.u32 + 8);
	// lwz r11,64(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 64);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// subf r11,r10,r31
	r11.s64 = r31.s64 - ctx.r10.s64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179628"))) PPC_WEAK_FUNC(sub_82179628);
PPC_FUNC_IMPL(__imp__sub_82179628) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// lbz r10,8(r5)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r5.u32 + 8);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r5,r10,27,31,31
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82179648"))) PPC_WEAK_FUNC(sub_82179648);
PPC_FUNC_IMPL(__imp__sub_82179648) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// addi r11,r3,4
	r11.s64 = ctx.r3.s64 + 4;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,8
	ctx.r10.s64 = 8;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82179658:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x82179658
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179658;
	// addi r11,r3,12
	r11.s64 = ctx.r3.s64 + 12;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,64
	ctx.r10.s64 = 64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82179674:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x82179674
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179674;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r9,r3,76
	ctx.r9.s64 = ctx.r3.s64 + 76;
	// addi r10,r11,-23120
	ctx.r10.s64 = r11.s64 + -23120;
	// li r11,0
	r11.s64 = 0;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
loc_82179694:
	// lbz r10,24(r4)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r4.u32 + 24);
	// stbx r10,r9,r11
	PPC_STORE_U8(ctx.r9.u32 + r11.u32, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,64
	cr6.compare<int32_t>(r11.s32, 64, xer);
	// blt cr6,0x82179694
	if (cr6.getLT()) goto loc_82179694;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821796B0"))) PPC_WEAK_FUNC(sub_821796B0);
PPC_FUNC_IMPL(__imp__sub_821796B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lbz r5,8(r5)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r5.u32 + 8);
	// lwz r11,44(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_821796C8"))) PPC_WEAK_FUNC(sub_821796C8);
PPC_FUNC_IMPL(__imp__sub_821796C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// add r11,r4,r3
	r11.u64 = ctx.r4.u64 + ctx.r3.u64;
	// stb r5,76(r11)
	PPC_STORE_U8(r11.u32 + 76, ctx.r5.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821796D8"))) PPC_WEAK_FUNC(sub_821796D8);
PPC_FUNC_IMPL(__imp__sub_821796D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// add r11,r4,r3
	r11.u64 = ctx.r4.u64 + ctx.r3.u64;
	// lbz r3,76(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 76);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821796E8"))) PPC_WEAK_FUNC(sub_821796E8);
PPC_FUNC_IMPL(__imp__sub_821796E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lbz r31,8(r5)
	r31.u64 = PPC_LOAD_U8(ctx.r5.u32 + 8);
	// lwz r11,68(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 68);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r10,r3
	ctx.r10.s64 = ctx.r3.s8;
	// extsb r11,r31
	r11.s64 = r31.s8;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179738"))) PPC_WEAK_FUNC(sub_82179738);
PPC_FUNC_IMPL(__imp__sub_82179738) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// lbz r11,8(r5)
	r11.u64 = PPC_LOAD_U8(ctx.r5.u32 + 8);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// lwz r10,44(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 44);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82179758"))) PPC_WEAK_FUNC(sub_82179758);
PPC_FUNC_IMPL(__imp__sub_82179758) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// addi r11,r3,4
	r11.s64 = ctx.r3.s64 + 4;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,8
	ctx.r10.s64 = 8;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82179768:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x82179768
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179768;
	// addi r11,r3,12
	r11.s64 = ctx.r3.s64 + 12;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,64
	ctx.r10.s64 = 64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82179784:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x82179784
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179784;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r9,r3,76
	ctx.r9.s64 = ctx.r3.s64 + 76;
	// addi r10,r11,-23024
	ctx.r10.s64 = r11.s64 + -23024;
	// li r11,0
	r11.s64 = 0;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
loc_821797A4:
	// lbz r10,24(r4)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r4.u32 + 24);
	// stbx r10,r9,r11
	PPC_STORE_U8(ctx.r9.u32 + r11.u32, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,64
	cr6.compare<int32_t>(r11.s32, 64, xer);
	// blt cr6,0x821797a4
	if (cr6.getLT()) goto loc_821797A4;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821797C0"))) PPC_WEAK_FUNC(sub_821797C0);
PPC_FUNC_IMPL(__imp__sub_821797C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lbz r5,8(r5)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r5.u32 + 8);
	// lwz r11,48(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 48);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_821797D8"))) PPC_WEAK_FUNC(sub_821797D8);
PPC_FUNC_IMPL(__imp__sub_821797D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lbz r31,8(r5)
	r31.u64 = PPC_LOAD_U8(ctx.r5.u32 + 8);
	// lwz r11,72(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 72);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// subf r11,r10,r31
	r11.s64 = r31.s64 - ctx.r10.s64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179820"))) PPC_WEAK_FUNC(sub_82179820);
PPC_FUNC_IMPL(__imp__sub_82179820) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// lbz r11,8(r5)
	r11.u64 = PPC_LOAD_U8(ctx.r5.u32 + 8);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r5,r11,24
	ctx.r5.u64 = r11.u32 & 0xFF;
	// lwz r10,48(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82179840"))) PPC_WEAK_FUNC(sub_82179840);
PPC_FUNC_IMPL(__imp__sub_82179840) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179878
	if (cr6.getEQ()) goto loc_82179878;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82179878:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179890"))) PPC_WEAK_FUNC(sub_82179890);
PPC_FUNC_IMPL(__imp__sub_82179890) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// clrlwi r10,r4,24
	ctx.r10.u64 = ctx.r4.u32 & 0xFF;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r11.u32);
	// beq cr6,0x821799e4
	if (cr6.getEQ()) goto loc_821799E4;
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82179968
	if (!cr6.getEQ()) goto loc_82179968;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821799d8
	if (cr6.getEQ()) goto loc_821799D8;
	// lwz r8,20(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// addi r11,r3,4
	r11.s64 = ctx.r3.s64 + 4;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,8
	ctx.r10.s64 = 8;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82179904:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x82179904
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179904;
	// addi r11,r3,12
	r11.s64 = ctx.r3.s64 + 12;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,64
	ctx.r10.s64 = 64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82179920:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x82179920
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179920;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,8
	ctx.r9.s64 = 8;
	// addi r10,r11,-23216
	ctx.r10.s64 = r11.s64 + -23216;
	// addi r11,r3,76
	r11.s64 = ctx.r3.s64 + 76;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lbz r10,24(r8)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + 24);
	// subfic r10,r10,0
	xer.ca = ctx.r10.u32 <= 0;
	ctx.r10.s64 = 0 - ctx.r10.s64;
	// subfe r10,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82179954:
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x82179954
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179954;
	// stw r3,28(r30)
	PPC_STORE_U32(r30.u32 + 28, ctx.r3.u32);
	// b 0x82179a1c
	goto loc_82179A1C;
loc_82179968:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82179990
	if (!cr6.getEQ()) goto loc_82179990;
	// li r3,140
	ctx.r3.s64 = 140;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821799d8
	if (cr6.getEQ()) goto loc_821799D8;
	// lwz r4,20(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// bl 0x82179648
	sub_82179648(ctx, base);
	// stw r3,28(r30)
	PPC_STORE_U32(r30.u32 + 28, ctx.r3.u32);
	// b 0x82179a1c
	goto loc_82179A1C;
loc_82179990:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x821799b8
	if (!cr6.getEQ()) goto loc_821799B8;
	// li r3,140
	ctx.r3.s64 = 140;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821799d8
	if (cr6.getEQ()) goto loc_821799D8;
	// lwz r4,20(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// bl 0x82179758
	sub_82179758(ctx, base);
	// stw r3,28(r30)
	PPC_STORE_U32(r30.u32 + 28, ctx.r3.u32);
	// b 0x82179a1c
	goto loc_82179A1C;
loc_821799B8:
	// li r3,332
	ctx.r3.s64 = 332;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821799d8
	if (cr6.getEQ()) goto loc_821799D8;
	// lwz r4,20(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// bl 0x82179400
	sub_82179400(ctx, base);
	// stw r3,28(r30)
	PPC_STORE_U32(r30.u32 + 28, ctx.r3.u32);
	// b 0x82179a1c
	goto loc_82179A1C;
loc_821799D8:
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r3,28(r30)
	PPC_STORE_U32(r30.u32 + 28, ctx.r3.u32);
	// b 0x82179a1c
	goto loc_82179A1C;
loc_821799E4:
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179a08
	if (cr6.getEQ()) goto loc_82179A08;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r10,r10,-23432
	ctx.r10.s64 = ctx.r10.s64 + -23432;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x82179a0c
	goto loc_82179A0C;
loc_82179A08:
	// li r11,0
	r11.s64 = 0;
loc_82179A0C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r11,28(r30)
	PPC_STORE_U32(r30.u32 + 28, r11.u32);
	// stw r31,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r31.u32);
	// stb r10,8(r11)
	PPC_STORE_U8(r11.u32 + 8, ctx.r10.u8);
loc_82179A1C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179A38"))) PPC_WEAK_FUNC(sub_82179A38);
PPC_FUNC_IMPL(__imp__sub_82179A38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// clrlwi r10,r4,24
	ctx.r10.u64 = ctx.r4.u32 & 0xFF;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// beq cr6,0x82179ac4
	if (cr6.getEQ()) goto loc_82179AC4;
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179aa0
	if (cr6.getEQ()) goto loc_82179AA0;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r10,r10,-23408
	ctx.r10.s64 = ctx.r10.s64 + -23408;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x82179aa4
	goto loc_82179AA4;
loc_82179AA0:
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
loc_82179AA4:
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// stb r7,8(r11)
	PPC_STORE_U8(r11.u32 + 8, ctx.r7.u8);
	// stb r7,9(r11)
	PPC_STORE_U8(r11.u32 + 9, ctx.r7.u8);
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r10,24(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// stw r30,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r30.u32);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// b 0x82179b20
	goto loc_82179B20;
loc_82179AC4:
	// li r3,324
	ctx.r3.s64 = 324;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82179aec
	if (cr6.getEQ()) goto loc_82179AEC;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-23384
	r11.s64 = r11.s64 + -23384;
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// b 0x82179af0
	goto loc_82179AF0;
loc_82179AEC:
	// mr r9,r7
	ctx.r9.u64 = ctx.r7.u64;
loc_82179AF0:
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
	// stw r9,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r9.u32);
	// addi r10,r9,68
	ctx.r10.s64 = ctx.r9.s64 + 68;
	// addi r8,r9,4
	ctx.r8.s64 = ctx.r9.s64 + 4;
loc_82179B00:
	// stbx r7,r8,r11
	PPC_STORE_U8(ctx.r8.u32 + r11.u32, ctx.r7.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r9,20(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmpwi cr6,r11,64
	cr6.compare<int32_t>(r11.s32, 64, xer);
	// lwz r9,24(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 24);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// blt cr6,0x82179b00
	if (cr6.getLT()) goto loc_82179B00;
loc_82179B20:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179B38"))) PPC_WEAK_FUNC(sub_82179B38);
PPC_FUNC_IMPL(__imp__sub_82179B38) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// clrlwi r10,r4,24
	ctx.r10.u64 = ctx.r4.u32 & 0xFF;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// beq cr6,0x82179c0c
	if (cr6.getEQ()) goto loc_82179C0C;
	// li r3,592
	ctx.r3.s64 = 592;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82179ba0
	if (cr6.getEQ()) goto loc_82179BA0;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-23360
	r11.s64 = r11.s64 + -23360;
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// b 0x82179ba4
	goto loc_82179BA4;
loc_82179BA0:
	// mr r9,r7
	ctx.r9.u64 = ctx.r7.u64;
loc_82179BA4:
	// addi r11,r9,4
	r11.s64 = ctx.r9.s64 + 4;
	// stw r9,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r9.u32);
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// li r10,8
	ctx.r10.s64 = 8;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82179BB8:
	// stb r8,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r8.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x82179bb8
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179BB8;
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
	// addi r10,r9,332
	ctx.r10.s64 = ctx.r9.s64 + 332;
	// addi r8,r9,12
	ctx.r8.s64 = ctx.r9.s64 + 12;
loc_82179BD0:
	// stbx r7,r8,r11
	PPC_STORE_U8(ctx.r8.u32 + r11.u32, ctx.r7.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r6,20(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmpwi cr6,r11,64
	cr6.compare<int32_t>(r11.s32, 64, xer);
	// lwz r6,24(r6)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + 24);
	// stw r6,-256(r10)
	PPC_STORE_U32(ctx.r10.u32 + -256, ctx.r6.u32);
	// lwz r6,20(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r6,24(r6)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + 24);
	// stw r6,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r6.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// blt cr6,0x82179bd0
	if (cr6.getLT()) goto loc_82179BD0;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,588(r9)
	PPC_STORE_U32(ctx.r9.u32 + 588, r11.u32);
	// b 0x82179c44
	goto loc_82179C44;
loc_82179C0C:
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179c34
	if (cr6.getEQ()) goto loc_82179C34;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r10,r10,-23336
	ctx.r10.s64 = ctx.r10.s64 + -23336;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x82179c38
	goto loc_82179C38;
loc_82179C34:
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
loc_82179C38:
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// stw r30,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r30.u32);
	// stb r7,8(r11)
	PPC_STORE_U8(r11.u32 + 8, ctx.r7.u8);
loc_82179C44:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82179C60"))) PPC_WEAK_FUNC(sub_82179C60);
PPC_FUNC_IMPL(__imp__sub_82179C60) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// bl 0x82178930
	sub_82178930(ctx, base);
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// li r4,0
	ctx.r4.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179dfc
	if (cr6.getEQ()) goto loc_82179DFC;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82179d20
	if (!cr6.getEQ()) goto loc_82179D20;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82179d84
	if (cr6.getEQ()) goto loc_82179D84;
	// lwz r8,20(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r11,r3,4
	r11.s64 = ctx.r3.s64 + 4;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,8
	ctx.r10.s64 = 8;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82179CC0:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x82179cc0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179CC0;
	// addi r11,r3,12
	r11.s64 = ctx.r3.s64 + 12;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,64
	ctx.r10.s64 = 64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82179CDC:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x82179cdc
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179CDC;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,8
	ctx.r9.s64 = 8;
	// addi r10,r11,-23216
	ctx.r10.s64 = r11.s64 + -23216;
	// addi r11,r3,76
	r11.s64 = ctx.r3.s64 + 76;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lbz r10,24(r8)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + 24);
	// subfic r10,r10,0
	xer.ca = ctx.r10.u32 <= 0;
	ctx.r10.s64 = 0 - ctx.r10.s64;
	// subfe r10,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82179D10:
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x82179d10
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179D10;
	// b 0x82179d88
	goto loc_82179D88;
loc_82179D20:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82179d44
	if (!cr6.getEQ()) goto loc_82179D44;
	// li r3,140
	ctx.r3.s64 = 140;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82179d84
	if (cr6.getEQ()) goto loc_82179D84;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x82179648
	sub_82179648(ctx, base);
	// b 0x82179d88
	goto loc_82179D88;
loc_82179D44:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x82179d68
	if (!cr6.getEQ()) goto loc_82179D68;
	// li r3,140
	ctx.r3.s64 = 140;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82179d84
	if (cr6.getEQ()) goto loc_82179D84;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x82179758
	sub_82179758(ctx, base);
	// b 0x82179d88
	goto loc_82179D88;
loc_82179D68:
	// li r3,332
	ctx.r3.s64 = 332;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82179d84
	if (cr6.getEQ()) goto loc_82179D84;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x82179400
	sub_82179400(ctx, base);
	// b 0x82179d88
	goto loc_82179D88;
loc_82179D84:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82179D88:
	// stw r3,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r3.u32);
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r4,64(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 64);
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,-5068(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5068);
	// bne cr6,0x82179dcc
	if (!cr6.getEQ()) goto loc_82179DCC;
	// lwz r9,44(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82179dcc
	if (!cr6.getEQ()) goto loc_82179DCC;
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// bne cr6,0x82179dd0
	if (!cr6.getEQ()) goto loc_82179DD0;
loc_82179DCC:
	// li r9,1
	ctx.r9.s64 = 1;
loc_82179DD0:
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82179e60
	if (!cr6.getEQ()) goto loc_82179E60;
	// stw r11,40(r31)
	PPC_STORE_U32(r31.u32 + 40, r11.u32);
	// lwz r11,-5068(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5068);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179df0
	if (cr6.getEQ()) goto loc_82179DF0;
	// stw r31,44(r11)
	PPC_STORE_U32(r11.u32 + 44, r31.u32);
loc_82179DF0:
	// stw r31,-5068(r10)
	PPC_STORE_U32(ctx.r10.u32 + -5068, r31.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_82179DFC:
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179e20
	if (cr6.getEQ()) goto loc_82179E20;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r10,r10,-23432
	ctx.r10.s64 = ctx.r10.s64 + -23432;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x82179e24
	goto loc_82179E24;
loc_82179E20:
	// li r11,0
	r11.s64 = 0;
loc_82179E24:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// stw r29,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r29.u32);
	// addi r3,r31,4
	ctx.r3.s64 = r31.s64 + 4;
	// stb r10,8(r11)
	PPC_STORE_U8(r11.u32 + 8, ctx.r10.u8);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
	// bl 0x821753b0
	sub_821753B0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179e60
	if (cr6.getEQ()) goto loc_82179E60;
	// li r11,1
	r11.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r11,35(r31)
	PPC_STORE_U8(r31.u32 + 35, r11.u8);
	// bl 0x82175480
	sub_82175480(ctx, base);
loc_82179E60:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82179E68"))) PPC_WEAK_FUNC(sub_82179E68);
PPC_FUNC_IMPL(__imp__sub_82179E68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// bl 0x82178930
	sub_82178930(ctx, base);
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// li r4,0
	ctx.r4.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179f10
	if (cr6.getEQ()) goto loc_82179F10;
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179ebc
	if (cr6.getEQ()) goto loc_82179EBC;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r10,r10,-23408
	ctx.r10.s64 = ctx.r10.s64 + -23408;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x82179ec0
	goto loc_82179EC0;
loc_82179EBC:
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
loc_82179EC0:
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// addi r3,r31,4
	ctx.r3.s64 = r31.s64 + 4;
	// stb r7,8(r11)
	PPC_STORE_U8(r11.u32 + 8, ctx.r7.u8);
	// stb r7,9(r11)
	PPC_STORE_U8(r11.u32 + 9, ctx.r7.u8);
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r10,24(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// stw r29,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r29.u32);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
	// bl 0x821753b0
	sub_821753B0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179f80
	if (cr6.getEQ()) goto loc_82179F80;
	// li r11,1
	r11.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r11,35(r31)
	PPC_STORE_U8(r31.u32 + 35, r11.u8);
	// bl 0x82175480
	sub_82175480(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_82179F10:
	// li r3,324
	ctx.r3.s64 = 324;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82179f38
	if (cr6.getEQ()) goto loc_82179F38;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-23384
	r11.s64 = r11.s64 + -23384;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// b 0x82179f3c
	goto loc_82179F3C;
loc_82179F38:
	// mr r10,r7
	ctx.r10.u64 = ctx.r7.u64;
loc_82179F3C:
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
	// stw r10,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r10.u32);
	// addi r9,r10,68
	ctx.r9.s64 = ctx.r10.s64 + 68;
	// addi r8,r10,4
	ctx.r8.s64 = ctx.r10.s64 + 4;
loc_82179F4C:
	// stbx r7,r8,r11
	PPC_STORE_U8(ctx.r8.u32 + r11.u32, ctx.r7.u8);
	// lwz r10,64(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 64);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x82179f64
	if (!cr6.getEQ()) goto loc_82179F64;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// b 0x82179f6c
	goto loc_82179F6C;
loc_82179F64:
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r10,24(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
loc_82179F6C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r10,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r10.u32);
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// cmplwi cr6,r11,64
	cr6.compare<uint32_t>(r11.u32, 64, xer);
	// blt cr6,0x82179f4c
	if (cr6.getLT()) goto loc_82179F4C;
loc_82179F80:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82179F88"))) PPC_WEAK_FUNC(sub_82179F88);
PPC_FUNC_IMPL(__imp__sub_82179F88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// bl 0x82178930
	sub_82178930(ctx, base);
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// li r4,0
	ctx.r4.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a0ac
	if (cr6.getEQ()) goto loc_8217A0AC;
	// li r3,592
	ctx.r3.s64 = 592;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82179fdc
	if (cr6.getEQ()) goto loc_82179FDC;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r10,r10,-23360
	ctx.r10.s64 = ctx.r10.s64 + -23360;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x82179fe0
	goto loc_82179FE0;
loc_82179FDC:
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_82179FE0:
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// li r9,8
	ctx.r9.s64 = 8;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82179FF0:
	// stb r8,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r8.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// bdnz 0x82179ff0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82179FF0;
	// addi r9,r11,332
	ctx.r9.s64 = r11.s64 + 332;
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
loc_8217A008:
	// stbx r8,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, ctx.r8.u8);
	// lwz r7,64(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 64);
	// cmplw cr6,r10,r7
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r7.u32, xer);
	// bne cr6,0x8217a028
	if (!cr6.getEQ()) goto loc_8217A028;
	// lwz r7,12(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// stw r7,-256(r9)
	PPC_STORE_U32(ctx.r9.u32 + -256, ctx.r7.u32);
	// lwz r7,12(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// b 0x8217a03c
	goto loc_8217A03C;
loc_8217A028:
	// lwz r7,20(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r7,24(r7)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + 24);
	// stw r7,-256(r9)
	PPC_STORE_U32(ctx.r9.u32 + -256, ctx.r7.u32);
	// lwz r7,20(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r7,24(r7)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + 24);
loc_8217A03C:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r7,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r7.u32);
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// cmplwi cr6,r10,64
	cr6.compare<uint32_t>(ctx.r10.u32, 64, xer);
	// blt cr6,0x8217a008
	if (cr6.getLT()) goto loc_8217A008;
	// lis r9,-31992
	ctx.r9.s64 = -2096627712;
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r10,-5068(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + -5068);
	// bne cr6,0x8217a07c
	if (!cr6.getEQ()) goto loc_8217A07C;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217a07c
	if (!cr6.getEQ()) goto loc_8217A07C;
	// cmplw cr6,r10,r31
	cr6.compare<uint32_t>(ctx.r10.u32, r31.u32, xer);
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
	// bne cr6,0x8217a080
	if (!cr6.getEQ()) goto loc_8217A080;
loc_8217A07C:
	// li r11,1
	r11.s64 = 1;
loc_8217A080:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217a110
	if (!cr6.getEQ()) goto loc_8217A110;
	// stw r10,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r10.u32);
	// lwz r11,-5068(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -5068);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a0a0
	if (cr6.getEQ()) goto loc_8217A0A0;
	// stw r31,44(r11)
	PPC_STORE_U32(r11.u32 + 44, r31.u32);
loc_8217A0A0:
	// stw r31,-5068(r9)
	PPC_STORE_U32(ctx.r9.u32 + -5068, r31.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8217A0AC:
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a0d4
	if (cr6.getEQ()) goto loc_8217A0D4;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r10,r10,-23336
	ctx.r10.s64 = ctx.r10.s64 + -23336;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x8217a0d8
	goto loc_8217A0D8;
loc_8217A0D4:
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_8217A0D8:
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// addi r3,r31,4
	ctx.r3.s64 = r31.s64 + 4;
	// stw r29,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r29.u32);
	// stb r8,8(r11)
	PPC_STORE_U8(r11.u32 + 8, ctx.r8.u8);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
	// bl 0x821753b0
	sub_821753B0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a110
	if (cr6.getEQ()) goto loc_8217A110;
	// li r11,1
	r11.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r11,35(r31)
	PPC_STORE_U8(r31.u32 + 35, r11.u8);
	// bl 0x82175480
	sub_82175480(ctx, base);
loc_8217A110:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8217A118"))) PPC_WEAK_FUNC(sub_8217A118);
PPC_FUNC_IMPL(__imp__sub_8217A118) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// lwz r3,24(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lbz r11,-5072(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -5072);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a2d4
	if (cr6.getEQ()) goto loc_8217A2D4;
	// lbz r11,35(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 35);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a2d4
	if (cr6.getEQ()) goto loc_8217A2D4;
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a2ac
	if (cr6.getEQ()) goto loc_8217A2AC;
	// lwz r11,36(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217a2d4
	if (!cr6.getEQ()) goto loc_8217A2D4;
	// lwz r3,28(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a1c8
	if (cr6.getEQ()) goto loc_8217A1C8;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a1c8
	if (cr6.getEQ()) goto loc_8217A1C8;
	// lwz r3,28(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a250
	if (cr6.getEQ()) goto loc_8217A250;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8217a254
	goto loc_8217A254;
loc_8217A1C8:
	// lwz r3,28(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a20c
	if (cr6.getEQ()) goto loc_8217A20C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a20c
	if (cr6.getEQ()) goto loc_8217A20C;
	// lwz r3,28(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a250
	if (cr6.getEQ()) goto loc_8217A250;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8217a254
	goto loc_8217A254;
loc_8217A20C:
	// lwz r3,28(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a2d4
	if (cr6.getEQ()) goto loc_8217A2D4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a2d4
	if (cr6.getEQ()) goto loc_8217A2D4;
	// lwz r3,28(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a250
	if (cr6.getEQ()) goto loc_8217A250;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8217a254
	goto loc_8217A254;
loc_8217A250:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_8217A254:
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmplw cr6,r11,r25
	cr6.compare<uint32_t>(r11.u32, r25.u32, xer);
	// bne cr6,0x8217a2d4
	if (!cr6.getEQ()) goto loc_8217A2D4;
	// li r3,76
	ctx.r3.s64 = 76;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a284
	if (cr6.getEQ()) goto loc_8217A284;
	// addi r5,r27,4
	ctx.r5.s64 = r27.s64 + 4;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177f90
	sub_82177F90(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8217a288
	goto loc_8217A288;
loc_8217A284:
	// mr r31,r30
	r31.u64 = r30.u64;
loc_8217A288:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,16(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// stw r31,36(r27)
	PPC_STORE_U32(r27.u32 + 36, r31.u32);
	// b 0x8217a2d4
	goto loc_8217A2D4;
loc_8217A2AC:
	// lwz r3,36(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 36);
	// stb r30,35(r27)
	PPC_STORE_U8(r27.u32 + 35, r30.u8);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a2d4
	if (cr6.getEQ()) goto loc_8217A2D4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r30,36(r27)
	PPC_STORE_U32(r27.u32 + 36, r30.u32);
loc_8217A2D4:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a788
	if (cr6.getEQ()) goto loc_8217A788;
	// lbz r11,33(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 33);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217a788
	if (!cr6.getEQ()) goto loc_8217A788;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a308
	if (cr6.getEQ()) goto loc_8217A308;
	// lbz r11,132(r25)
	r11.u64 = PPC_LOAD_U8(r25.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217a314
	if (!cr6.getEQ()) goto loc_8217A314;
loc_8217A308:
	// lbz r11,32(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a788
	if (cr6.getEQ()) goto loc_8217A788;
loc_8217A314:
	// lwz r3,28(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a494
	if (cr6.getEQ()) goto loc_8217A494;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a494
	if (cr6.getEQ()) goto loc_8217A494;
	// lwz r3,28(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a35c
	if (cr6.getEQ()) goto loc_8217A35C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8217a360
	goto loc_8217A360;
loc_8217A35C:
	// mr r31,r30
	r31.u64 = r30.u64;
loc_8217A360:
	// lwz r28,64(r25)
	r28.u64 = PPC_LOAD_U32(r25.u32 + 64);
	// cmplwi cr6,r28,64
	cr6.compare<uint32_t>(r28.u32, 64, xer);
	// bge cr6,0x8217a788
	if (!cr6.getLT()) goto loc_8217A788;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175da0
	sub_82175DA0(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// addi r29,r27,4
	r29.s64 = r27.s64 + 4;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// bne cr6,0x8217a3b4
	if (!cr6.getEQ()) goto loc_8217A3B4;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lwz r11,88(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 88);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217a788
	if (!cr6.getEQ()) goto loc_8217A788;
	// b 0x8217a3e4
	goto loc_8217A3E4;
loc_8217A3B4:
	// addi r3,r26,48
	ctx.r3.s64 = r26.s64 + 48;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x821753b0
	sub_821753B0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a788
	if (cr6.getEQ()) goto loc_8217A788;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217A3E4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x8217a444
	if (cr6.getEQ()) goto loc_8217A444;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// bl 0x82178ff0
	sub_82178FF0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
loc_8217A444:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,16(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r4,64(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 64);
	// bl 0x82175c10
	sub_82175C10(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
loc_8217A494:
	// lwz r3,28(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a5ec
	if (cr6.getEQ()) goto loc_8217A5EC;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a5ec
	if (cr6.getEQ()) goto loc_8217A5EC;
	// lwz r3,28(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a4dc
	if (cr6.getEQ()) goto loc_8217A4DC;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x8217a4e0
	goto loc_8217A4E0;
loc_8217A4DC:
	// mr r29,r30
	r29.u64 = r30.u64;
loc_8217A4E0:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// cmplw cr6,r25,r11
	cr6.compare<uint32_t>(r25.u32, r11.u32, xer);
	// bne cr6,0x8217a788
	if (!cr6.getEQ()) goto loc_8217A788;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175e98
	sub_82175E98(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8217a538
	if (!cr6.getEQ()) goto loc_8217A538;
	// addi r11,r29,12
	r11.s64 = r29.s64 + 12;
	// addi r10,r27,12
	ctx.r10.s64 = r27.s64 + 12;
	// addi r8,r11,4
	ctx.r8.s64 = r11.s64 + 4;
loc_8217A50C:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// subf. r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x8217a52c
	if (!cr0.getEQ()) goto loc_8217A52C;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// bne cr6,0x8217a50c
	if (!cr6.getEQ()) goto loc_8217A50C;
loc_8217A52C:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x8217a788
	if (cr6.getEQ()) goto loc_8217A788;
	// b 0x8217a568
	goto loc_8217A568;
loc_8217A538:
	// addi r4,r27,4
	ctx.r4.s64 = r27.s64 + 4;
	// addi r3,r31,48
	ctx.r3.s64 = r31.s64 + 48;
	// bl 0x821753b0
	sub_821753B0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a788
	if (cr6.getEQ()) goto loc_8217A788;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217A568:
	// lbz r11,9(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 9);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmpwi cr6,r11,256
	cr6.compare<int32_t>(r11.s32, 256, xer);
	// stb r11,9(r29)
	PPC_STORE_U8(r29.u32 + 9, r11.u8);
	// blt cr6,0x8217a584
	if (cr6.getLT()) goto loc_8217A584;
	// stb r30,9(r29)
	PPC_STORE_U8(r29.u32 + 9, r30.u8);
loc_8217A584:
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a5b0
	if (cr6.getEQ()) goto loc_8217A5B0;
	// addi r5,r27,4
	ctx.r5.s64 = r27.s64 + 4;
	// lwz r7,64(r25)
	ctx.r7.u64 = PPC_LOAD_U32(r25.u32 + 64);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lbz r6,9(r29)
	ctx.r6.u64 = PPC_LOAD_U8(r29.u32 + 9);
	// bl 0x82178ff0
	sub_82178FF0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8217a5b4
	goto loc_8217A5B4;
loc_8217A5B0:
	// mr r31,r30
	r31.u64 = r30.u64;
loc_8217A5B4:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,16(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175d18
	sub_82175D18(ctx, base);
	// lwz r11,12(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 12);
	// stw r11,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
loc_8217A5EC:
	// lwz r3,28(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a788
	if (cr6.getEQ()) goto loc_8217A788;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a788
	if (cr6.getEQ()) goto loc_8217A788;
	// lwz r3,28(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a634
	if (cr6.getEQ()) goto loc_8217A634;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// b 0x8217a638
	goto loc_8217A638;
loc_8217A634:
	// mr r26,r30
	r26.u64 = r30.u64;
loc_8217A638:
	// lwz r29,64(r25)
	r29.u64 = PPC_LOAD_U32(r25.u32 + 64);
	// cmplwi cr6,r29,64
	cr6.compare<uint32_t>(r29.u32, 64, xer);
	// bge cr6,0x8217a788
	if (!cr6.getLT()) goto loc_8217A788;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175da0
	sub_82175DA0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8217a6a4
	if (!cr6.getEQ()) goto loc_8217A6A4;
	// addi r11,r29,19
	r11.s64 = r29.s64 + 19;
	// addi r9,r29,83
	ctx.r9.s64 = r29.s64 + 83;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r28,r10,r26
	r28.u64 = ctx.r10.u64 + r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// addi r9,r11,4
	ctx.r9.s64 = r11.s64 + 4;
loc_8217A678:
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// subf. r8,r7,r8
	ctx.r8.s64 = ctx.r8.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x8217a698
	if (!cr0.getEQ()) goto loc_8217A698;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// bne cr6,0x8217a678
	if (!cr6.getEQ()) goto loc_8217A678;
loc_8217A698:
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x8217a788
	if (cr6.getEQ()) goto loc_8217A788;
	// b 0x8217a6f8
	goto loc_8217A6F8;
loc_8217A6A4:
	// addi r10,r29,19
	ctx.r10.s64 = r29.s64 + 19;
	// addi r11,r3,56
	r11.s64 = ctx.r3.s64 + 56;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r11,4
	ctx.r9.s64 = r11.s64 + 4;
	// add r28,r10,r26
	r28.u64 = ctx.r10.u64 + r26.u64;
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
loc_8217A6BC:
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// subf. r8,r7,r8
	ctx.r8.s64 = ctx.r8.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x8217a6dc
	if (!cr0.getEQ()) goto loc_8217A6DC;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// bne cr6,0x8217a6bc
	if (!cr6.getEQ()) goto loc_8217A6BC;
loc_8217A6DC:
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x8217a788
	if (cr6.getEQ()) goto loc_8217A788;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217A6F8:
	// add r31,r29,r26
	r31.u64 = r29.u64 + r26.u64;
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmpwi cr6,r11,256
	cr6.compare<int32_t>(r11.s32, 256, xer);
	// stb r11,12(r31)
	PPC_STORE_U8(r31.u32 + 12, r11.u8);
	// blt cr6,0x8217a718
	if (cr6.getLT()) goto loc_8217A718;
	// stb r30,12(r31)
	PPC_STORE_U8(r31.u32 + 12, r30.u8);
loc_8217A718:
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a748
	if (cr6.getEQ()) goto loc_8217A748;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lwz r5,8(r27)
	ctx.r5.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// lbz r7,12(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177d80
	sub_82177D80(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8217a74c
	goto loc_8217A74C;
loc_8217A748:
	// mr r31,r30
	r31.u64 = r30.u64;
loc_8217A74C:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,16(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r4,64(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 64);
	// bl 0x82175c10
	sub_82175C10(ctx, base);
	// addi r11,r29,83
	r11.s64 = r29.s64 + 83;
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r11,r26
	PPC_STORE_U32(r11.u32 + r26.u32, ctx.r10.u32);
loc_8217A788:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8217A790"))) PPC_WEAK_FUNC(sub_8217A790);
PPC_FUNC_IMPL(__imp__sub_8217A790) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r29,-31992
	r29.s64 = -2096627712;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// lwz r31,-5068(r29)
	r31.u64 = PPC_LOAD_U32(r29.u32 + -5068);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8217a910
	if (cr6.getEQ()) goto loc_8217A910;
	// li r27,0
	r27.s64 = 0;
loc_8217A7B4:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r28,40(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8217a118
	sub_8217A118(ctx, base);
	// lbz r11,35(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217a904
	if (!cr6.getEQ()) goto loc_8217A904;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r30,r27
	r30.u64 = r27.u64;
	// bl 0x82175a78
	sub_82175A78(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217a884
	if (!cr6.getEQ()) goto loc_8217A884;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a818
	if (cr6.getEQ()) goto loc_8217A818;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a818
	if (cr6.getEQ()) goto loc_8217A818;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821763f8
	sub_821763F8(ctx, base);
	// b 0x8217a874
	goto loc_8217A874;
loc_8217A818:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a848
	if (cr6.getEQ()) goto loc_8217A848;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a848
	if (cr6.getEQ()) goto loc_8217A848;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821763f8
	sub_821763F8(ctx, base);
	// b 0x8217a874
	goto loc_8217A874;
loc_8217A848:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a880
	if (cr6.getEQ()) goto loc_8217A880;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a880
	if (cr6.getEQ()) goto loc_8217A880;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821762a8
	sub_821762A8(ctx, base);
loc_8217A874:
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a884
	if (cr6.getEQ()) goto loc_8217A884;
loc_8217A880:
	// li r30,1
	r30.s64 = 1;
loc_8217A884:
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a904
	if (cr6.getEQ()) goto loc_8217A904;
	// lwz r9,40(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// lwz r10,-5068(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + -5068);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8217a8b8
	if (!cr6.getEQ()) goto loc_8217A8B8;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217a8b8
	if (!cr6.getEQ()) goto loc_8217A8B8;
	// cmplw cr6,r10,r31
	cr6.compare<uint32_t>(ctx.r10.u32, r31.u32, xer);
	// mr r11,r27
	r11.u64 = r27.u64;
	// bne cr6,0x8217a8bc
	if (!cr6.getEQ()) goto loc_8217A8BC;
loc_8217A8B8:
	// li r11,1
	r11.s64 = 1;
loc_8217A8BC:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a904
	if (cr6.getEQ()) goto loc_8217A904;
	// cmplw cr6,r10,r31
	cr6.compare<uint32_t>(ctx.r10.u32, r31.u32, xer);
	// bne cr6,0x8217a8d4
	if (!cr6.getEQ()) goto loc_8217A8D4;
	// stw r9,-5068(r29)
	PPC_STORE_U32(r29.u32 + -5068, ctx.r9.u32);
loc_8217A8D4:
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a8e8
	if (cr6.getEQ()) goto loc_8217A8E8;
	// lwz r10,44(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// stw r10,44(r11)
	PPC_STORE_U32(r11.u32 + 44, ctx.r10.u32);
loc_8217A8E8:
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217a8fc
	if (cr6.getEQ()) goto loc_8217A8FC;
	// lwz r10,40(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
loc_8217A8FC:
	// stw r27,40(r31)
	PPC_STORE_U32(r31.u32 + 40, r27.u32);
	// stw r27,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r27.u32);
loc_8217A904:
	// mr r31,r28
	r31.u64 = r28.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x8217a7b4
	if (!cr6.getEQ()) goto loc_8217A7B4;
loc_8217A910:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8217A918"))) PPC_WEAK_FUNC(sub_8217A918);
PPC_FUNC_IMPL(__imp__sub_8217A918) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-29824
	r11.s64 = r11.s64 + -29824;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a950
	if (cr6.getEQ()) goto loc_8217A950;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x82152458
	sub_82152458(ctx, base);
loc_8217A950:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r11,-30472
	r11.s64 = r11.s64 + -30472;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x823b7118
	sub_823B7118(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217A978"))) PPC_WEAK_FUNC(sub_8217A978);
PPC_FUNC_IMPL(__imp__sub_8217A978) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217a9e4
	if (cr6.getEQ()) goto loc_8217A9E4;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-29824
	ctx.r10.s64 = r11.s64 + -29824;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stb r11,40(r3)
	PPC_STORE_U8(ctx.r3.u32 + 40, r11.u8);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8217A9E4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217A9F8"))) PPC_WEAK_FUNC(sub_8217A9F8);
PPC_FUNC_IMPL(__imp__sub_8217A9F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217AA40"))) PPC_WEAK_FUNC(sub_8217AA40);
PPC_FUNC_IMPL(__imp__sub_8217AA40) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217AA48"))) PPC_WEAK_FUNC(sub_8217AA48);
PPC_FUNC_IMPL(__imp__sub_8217AA48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lbz r11,40(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 40);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217aa84
	if (cr6.getEQ()) goto loc_8217AA84;
	// bl 0x823b7320
	sub_823B7320(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8217aa84
	if (!cr6.getEQ()) goto loc_8217AA84;
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// b 0x8217aa90
	goto loc_8217AA90;
loc_8217AA84:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8215c580
	sub_8215C580(ctx, base);
loc_8217AA90:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217AAA8"))) PPC_WEAK_FUNC(sub_8217AAA8);
PPC_FUNC_IMPL(__imp__sub_8217AAA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8215c658
	sub_8215C658(ctx, base);
	// cmpwi cr6,r3,1000
	cr6.compare<int32_t>(ctx.r3.s32, 1000, xer);
	// ble cr6,0x8217aac4
	if (!cr6.getGT()) goto loc_8217AAC4;
	// li r3,1000
	ctx.r3.s64 = 1000;
loc_8217AAC4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217AAD8"))) PPC_WEAK_FUNC(sub_8217AAD8);
PPC_FUNC_IMPL(__imp__sub_8217AAD8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-22904
	r11.s64 = r11.s64 + -22904;
	// lbz r10,121(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 121);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x8217ab5c
	if (cr6.getEQ()) goto loc_8217AB5C;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8217ab28
	if (cr6.getLT()) goto loc_8217AB28;
	// bl 0x823b3838
	sub_823B3838(ctx, base);
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// bne cr6,0x8217ab28
	if (!cr6.getEQ()) goto loc_8217AB28;
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
loc_8217AB28:
	// lwz r11,124(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 124);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ab3c
	if (cr6.getEQ()) goto loc_8217AB3C;
	// lwz r10,128(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// stw r10,128(r11)
	PPC_STORE_U32(r11.u32 + 128, ctx.r10.u32);
loc_8217AB3C:
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ab50
	if (cr6.getEQ()) goto loc_8217AB50;
	// lwz r10,124(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 124);
	// stw r10,124(r11)
	PPC_STORE_U32(r11.u32 + 124, ctx.r10.u32);
loc_8217AB50:
	// li r11,0
	r11.s64 = 0;
	// stw r11,124(r31)
	PPC_STORE_U32(r31.u32 + 124, r11.u32);
	// stw r11,128(r31)
	PPC_STORE_U32(r31.u32 + 128, r11.u32);
loc_8217AB5C:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r11,-30472
	r11.s64 = r11.s64 + -30472;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x823b7118
	sub_823B7118(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217AB88"))) PPC_WEAK_FUNC(sub_8217AB88);
PPC_FUNC_IMPL(__imp__sub_8217AB88) {
	PPC_FUNC_PROLOGUE();
	// li r3,34
	ctx.r3.s64 = 34;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217AB90"))) PPC_WEAK_FUNC(sub_8217AB90);
PPC_FUNC_IMPL(__imp__sub_8217AB90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r4,100
	r11.s64 = ctx.r4.s64 + 100;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217ABA0"))) PPC_WEAK_FUNC(sub_8217ABA0);
PPC_FUNC_IMPL(__imp__sub_8217ABA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x8217aad8
	sub_8217AAD8(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217abd8
	if (cr6.getEQ()) goto loc_8217ABD8;
	// bl 0x8209e328
	sub_8209E328(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8217ABD8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217ABF0"))) PPC_WEAK_FUNC(sub_8217ABF0);
PPC_FUNC_IMPL(__imp__sub_8217ABF0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,7
	ctx.r5.s64 = 7;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,116(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,120(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 120);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,3
	ctx.r5.s64 = 3;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,112(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,40(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 40);
	// lbz r10,41(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 41);
	// li r8,1
	ctx.r8.s64 = 1;
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lwz r7,112(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// li r9,1
	ctx.r9.s64 = 1;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// cmpwi cr6,r7,1
	cr6.compare<int32_t>(ctx.r7.s32, 1, xer);
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// ble cr6,0x8217acd4
	if (!cr6.getGT()) goto loc_8217ACD4;
	// clrlwi r10,r11,16
	ctx.r10.u64 = r11.u32 & 0xFFFF;
	// addi r11,r31,51
	r11.s64 = r31.s64 + 51;
loc_8217AC98:
	// lbz r7,-1(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + -1);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lbz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// rotlwi r7,r7,8
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 8);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// or r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 | ctx.r6.u64;
	// cmplw cr6,r7,r10
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r10.u32, xer);
	// bne cr6,0x8217acd0
	if (!cr6.getEQ()) goto loc_8217ACD0;
	// lwz r7,112(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r11,r11,10
	r11.s64 = r11.s64 + 10;
	// cmpw cr6,r9,r7
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r7.s32, xer);
	// blt cr6,0x8217ac98
	if (cr6.getLT()) goto loc_8217AC98;
	// b 0x8217acd4
	goto loc_8217ACD4;
loc_8217ACD0:
	// li r8,0
	ctx.r8.s64 = 0;
loc_8217ACD4:
	// clrlwi r11,r8,24
	r11.u64 = ctx.r8.u32 & 0xFF;
	// stb r8,132(r31)
	PPC_STORE_U8(r31.u32 + 132, ctx.r8.u8);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217AD10"))) PPC_WEAK_FUNC(sub_8217AD10);
PPC_FUNC_IMPL(__imp__sub_8217AD10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// li r30,0
	r30.s64 = 0;
	// lwz r11,112(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 112);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8217ad7c
	if (!cr6.getGT()) goto loc_8217AD7C;
	// addi r31,r29,40
	r31.s64 = r29.s64 + 40;
loc_8217AD38:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x8217ad58
	if (cr6.getEQ()) goto loc_8217AD58;
	// lbz r11,132(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ad58
	if (cr6.getEQ()) goto loc_8217AD58;
	// li r5,8
	ctx.r5.s64 = 8;
	// addi r4,r31,2
	ctx.r4.s64 = r31.s64 + 2;
	// b 0x8217ad60
	goto loc_8217AD60;
loc_8217AD58:
	// li r5,10
	ctx.r5.s64 = 10;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
loc_8217AD60:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823b2fb0
	sub_823B2FB0(ctx, base);
	// lwz r11,112(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 112);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r31,r31,10
	r31.s64 = r31.s64 + 10;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8217ad38
	if (cr6.getLT()) goto loc_8217AD38;
loc_8217AD7C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8217AD88"))) PPC_WEAK_FUNC(sub_8217AD88);
PPC_FUNC_IMPL(__imp__sub_8217AD88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// li r4,7
	ctx.r4.s64 = 7;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,116(r30)
	PPC_STORE_U32(r30.u32 + 116, r11.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r4,3
	ctx.r4.s64 = 3;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,120(r30)
	PPC_STORE_U8(r30.u32 + 120, r11.u8);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,112(r30)
	PPC_STORE_U32(r30.u32 + 112, r11.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,132(r30)
	PPC_STORE_U8(r30.u32 + 132, r11.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217AE28"))) PPC_WEAK_FUNC(sub_8217AE28);
PPC_FUNC_IMPL(__imp__sub_8217AE28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// li r29,0
	r29.s64 = 0;
	// li r31,0
	r31.s64 = 0;
	// lwz r11,112(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 112);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8217aefc
	if (!cr6.getGT()) goto loc_8217AEFC;
loc_8217AE50:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x8217aeb0
	if (cr6.getEQ()) goto loc_8217AEB0;
	// lbz r11,132(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217aeb0
	if (cr6.getEQ()) goto loc_8217AEB0;
	// rlwinm r11,r31,2,0,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// li r5,8
	ctx.r5.s64 = 8;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r28,r11,r30
	r28.u64 = r11.u64 + r30.u64;
	// addi r4,r28,42
	ctx.r4.s64 = r28.s64 + 42;
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
	// clrlwi r10,r29,16
	ctx.r10.u64 = r29.u32 & 0xFFFF;
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// clrlwi r29,r10,16
	r29.u64 = ctx.r10.u32 & 0xFFFF;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r29,24,24,31
	ctx.r9.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 24) & 0xFF;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// stb r29,41(r28)
	PPC_STORE_U8(r28.u32 + 41, r29.u8);
	// stbx r9,r11,r30
	PPC_STORE_U8(r11.u32 + r30.u32, ctx.r9.u8);
	// b 0x8217aeec
	goto loc_8217AEEC;
loc_8217AEB0:
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// li r5,10
	ctx.r5.s64 = 10;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r4,r11,r30
	ctx.r4.u64 = r11.u64 + r30.u64;
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bne cr6,0x8217aeec
	if (!cr6.getEQ()) goto loc_8217AEEC;
	// lbz r11,40(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 40);
	// lbz r10,41(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 41);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// clrlwi r29,r11,16
	r29.u64 = r11.u32 & 0xFFFF;
loc_8217AEEC:
	// lwz r11,112(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 112);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x8217ae50
	if (cr6.getLT()) goto loc_8217AE50;
loc_8217AEFC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8217AF08"))) PPC_WEAK_FUNC(sub_8217AF08);
PPC_FUNC_IMPL(__imp__sub_8217AF08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,136
	ctx.r3.s64 = 136;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217af94
	if (cr6.getEQ()) goto loc_8217AF94;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-22904
	ctx.r10.s64 = r11.s64 + -22904;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stw r11,112(r3)
	PPC_STORE_U32(ctx.r3.u32 + 112, r11.u32);
	// lwz r10,-26072(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -26072);
	// stb r11,120(r3)
	PPC_STORE_U8(ctx.r3.u32 + 120, r11.u8);
	// stb r11,121(r3)
	PPC_STORE_U8(ctx.r3.u32 + 121, r11.u8);
	// stw r11,124(r3)
	PPC_STORE_U32(ctx.r3.u32 + 124, r11.u32);
	// stw r11,128(r3)
	PPC_STORE_U32(ctx.r3.u32 + 128, r11.u32);
	// stw r10,116(r3)
	PPC_STORE_U32(ctx.r3.u32 + 116, ctx.r10.u32);
	// stb r11,132(r3)
	PPC_STORE_U8(ctx.r3.u32 + 132, r11.u8);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8217AF94:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217AFA8"))) PPC_WEAK_FUNC(sub_8217AFA8);
PPC_FUNC_IMPL(__imp__sub_8217AFA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r24,r6
	r24.u64 = ctx.r6.u64;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r31,0
	r31.s64 = 0;
	// li r26,1
	r26.s64 = 1;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r29,r26
	r29.u64 = r26.u64;
	// mr r25,r31
	r25.u64 = r31.u64;
	// mr r23,r31
	r23.u64 = r31.u64;
	// bl 0x823b3838
	sub_823B3838(ctx, base);
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217b074
	if (cr6.getEQ()) goto loc_8217B074;
loc_8217AFEC:
	// lwz r10,116(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 116);
	// cmplw cr6,r10,r28
	cr6.compare<uint32_t>(ctx.r10.u32, r28.u32, xer);
	// beq cr6,0x8217b008
	if (cr6.getEQ()) goto loc_8217B008;
	// lwz r11,128(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 128);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217afec
	if (!cr6.getEQ()) goto loc_8217AFEC;
	// b 0x8217b074
	goto loc_8217B074;
loc_8217B008:
	// lwz r10,112(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 112);
	// cmpwi cr6,r10,7
	cr6.compare<int32_t>(ctx.r10.s32, 7, xer);
	// bge cr6,0x8217b05c
	if (!cr6.getLT()) goto loc_8217B05C;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// rlwinm r7,r10,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// li r8,10
	ctx.r8.s64 = 10;
	// add r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 + ctx.r7.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// mtctr r8
	ctr.u64 = ctx.r8.u64;
loc_8217B034:
	// lbz r8,0(r9)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// stb r8,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r8.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// bdnz 0x8217b034
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8217B034;
	// lwz r10,112(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 112);
	// mr r29,r31
	r29.u64 = r31.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,112(r11)
	PPC_STORE_U32(r11.u32 + 112, ctx.r10.u32);
	// b 0x8217b074
	goto loc_8217B074;
loc_8217B05C:
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r25,r26
	r25.u64 = r26.u64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r23,r11,r9
	r23.u64 = r11.u64 + ctx.r9.u64;
loc_8217B074:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217b1dc
	if (cr6.getEQ()) goto loc_8217B1DC;
	// li r3,136
	ctx.r3.s64 = 136;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217b110
	if (cr6.getEQ()) goto loc_8217B110;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// li r9,-1
	ctx.r9.s64 = -1;
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// addi r10,r10,-22904
	ctx.r10.s64 = ctx.r10.s64 + -22904;
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// addi r11,r3,40
	r11.s64 = ctx.r3.s64 + 40;
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// li r10,10
	ctx.r10.s64 = 10;
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r26,112(r3)
	PPC_STORE_U32(ctx.r3.u32 + 112, r26.u32);
	// stw r28,116(r3)
	PPC_STORE_U32(ctx.r3.u32 + 116, r28.u32);
	// stb r27,120(r3)
	PPC_STORE_U8(ctx.r3.u32 + 120, r27.u8);
	// stb r31,121(r3)
	PPC_STORE_U8(ctx.r3.u32 + 121, r31.u8);
	// stw r31,124(r3)
	PPC_STORE_U32(ctx.r3.u32 + 124, r31.u32);
	// stw r31,128(r3)
	PPC_STORE_U32(ctx.r3.u32 + 128, r31.u32);
	// stb r31,132(r3)
	PPC_STORE_U8(ctx.r3.u32 + 132, r31.u8);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8217B0F4:
	// lbz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x8217b0f4
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8217B0F4;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x8217b114
	goto loc_8217B114;
loc_8217B110:
	// mr r30,r31
	r30.u64 = r31.u64;
loc_8217B114:
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x823b3838
	sub_823B3838(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// stb r26,121(r30)
	PPC_STORE_U8(r30.u32 + 121, r26.u8);
	// stw r31,124(r30)
	PPC_STORE_U32(r30.u32 + 124, r31.u32);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r10,128(r30)
	PPC_STORE_U32(r30.u32 + 128, ctx.r10.u32);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8217b140
	if (cr6.getEQ()) goto loc_8217B140;
	// stw r30,124(r10)
	PPC_STORE_U32(ctx.r10.u32 + 124, r30.u32);
loc_8217B140:
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// stw r30,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r30.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// clrlwi r11,r25,24
	r11.u64 = r25.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217b1dc
	if (cr6.getEQ()) goto loc_8217B1DC;
	// lwz r10,24(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8217b174
	if (cr6.getEQ()) goto loc_8217B174;
	// lwz r9,28(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// stw r9,28(r10)
	PPC_STORE_U32(ctx.r10.u32 + 28, ctx.r9.u32);
loc_8217B174:
	// lwz r10,28(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8217b188
	if (cr6.getEQ()) goto loc_8217B188;
	// lwz r9,24(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// stw r9,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, ctx.r9.u32);
loc_8217B188:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r10,r30
	cr6.compare<uint32_t>(ctx.r10.u32, r30.u32, xer);
	// bne cr6,0x8217b19c
	if (!cr6.getEQ()) goto loc_8217B19C;
	// lwz r10,24(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_8217B19C:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r10,r30
	cr6.compare<uint32_t>(ctx.r10.u32, r30.u32, xer);
	// bne cr6,0x8217b1b0
	if (!cr6.getEQ()) goto loc_8217B1B0;
	// lwz r10,28(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
loc_8217B1B0:
	// stw r31,24(r30)
	PPC_STORE_U32(r30.u32 + 24, r31.u32);
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// stw r31,28(r30)
	PPC_STORE_U32(r30.u32 + 28, r31.u32);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// stw r31,20(r30)
	PPC_STORE_U32(r30.u32 + 20, r31.u32);
	// stw r23,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r23.u32);
	// bl 0x823b3ea8
	sub_823B3EA8(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82167da8
	sub_82167DA8(ctx, base);
loc_8217B1DC:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_8217B1E8"))) PPC_WEAK_FUNC(sub_8217B1E8);
PPC_FUNC_IMPL(__imp__sub_8217B1E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r11,128(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 128);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lwz r10,116(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 116);
loc_8217B200:
	// lwz r9,116(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 116);
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217b21c
	if (cr6.getEQ()) goto loc_8217B21C;
	// lwz r11,128(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 128);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217b200
	if (!cr6.getEQ()) goto loc_8217B200;
	// blr 
	return;
loc_8217B21C:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217B228"))) PPC_WEAK_FUNC(sub_8217B228);
PPC_FUNC_IMPL(__imp__sub_8217B228) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r23,r4
	r23.u64 = ctx.r4.u64;
	// mr r22,r5
	r22.u64 = ctx.r5.u64;
	// mr r24,r6
	r24.u64 = ctx.r6.u64;
	// bl 0x821606b8
	sub_821606B8(ctx, base);
	// cmpldi cr6,r3,0
	cr6.compare<uint64_t>(ctx.r3.u64, 0, xer);
	// beq cr6,0x8217b518
	if (cr6.getEQ()) goto loc_8217B518;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r25,-32254
	r25.s64 = -2113798144;
loc_8217B274:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8217b290
	if (cr6.getEQ()) goto loc_8217B290;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217b294
	if (!cr6.getEQ()) goto loc_8217B294;
loc_8217B290:
	// li r11,1
	r11.s64 = 1;
loc_8217B294:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217b4b8
	if (!cr6.getEQ()) goto loc_8217B4B8;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r26,r10
	r26.u64 = ctx.r10.u64;
	// li r27,1
	r27.s64 = 1;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217b2c0
	if (cr6.getEQ()) goto loc_8217B2C0;
	// li r27,0
	r27.s64 = 0;
loc_8217B2C0:
	// bl 0x8215fd20
	sub_8215FD20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8217b3dc
	if (!cr6.getEQ()) goto loc_8217B3DC;
	// lwz r3,820(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 820);
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// clrlwi r11,r24,24
	r11.u64 = r24.u32 & 0xFF;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217b2fc
	if (cr6.getEQ()) goto loc_8217B2FC;
	// ld r4,784(r29)
	ctx.r4.u64 = PPC_LOAD_U64(r29.u32 + 784);
	// bl 0x82184018
	sub_82184018(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217b2fc
	if (!cr6.getEQ()) goto loc_8217B2FC;
	// li r27,0
	r27.s64 = 0;
loc_8217B2FC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183990
	sub_82183990(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217b35c
	if (cr6.getEQ()) goto loc_8217B35C;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183ae8
	sub_82183AE8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217b35c
	if (!cr6.getEQ()) goto loc_8217B35C;
	// li r4,6
	ctx.r4.s64 = 6;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183ae8
	sub_82183AE8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217b358
	if (cr6.getEQ()) goto loc_8217B358;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// ld r4,784(r29)
	ctx.r4.u64 = PPC_LOAD_U64(r29.u32 + 784);
	// bl 0x82184018
	sub_82184018(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217b35c
	if (!cr6.getEQ()) goto loc_8217B35C;
loc_8217B358:
	// li r27,0
	r27.s64 = 0;
loc_8217B35C:
	// addi r31,r29,2324
	r31.s64 = r29.s64 + 2324;
	// subf r30,r29,r26
	r30.s64 = r26.s64 - r29.s64;
	// li r28,4
	r28.s64 = 4;
loc_8217B368:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// add r3,r30,r31
	ctx.r3.u64 = r30.u64 + r31.u64;
	// lwz r4,12(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8217b39c
	if (cr6.getLT()) goto loc_8217B39C;
	// lwz r10,104(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 104);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x8217b39c
	if (!cr6.getEQ()) goto loc_8217B39C;
	// li r27,0
	r27.s64 = 0;
loc_8217B39C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8217b3cc
	if (cr6.getLT()) goto loc_8217B3CC;
	// lwz r10,104(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 104);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x8217b3cc
	if (!cr6.getEQ()) goto loc_8217B3CC;
	// li r27,0
	r27.s64 = 0;
loc_8217B3CC:
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// addi r31,r31,52
	r31.s64 = r31.s64 + 52;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x8217b368
	if (!cr6.getEQ()) goto loc_8217B368;
loc_8217B3DC:
	// clrlwi r11,r27,24
	r11.u64 = r27.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217b450
	if (cr6.getEQ()) goto loc_8217B450;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8217b40c
	if (!cr6.getEQ()) goto loc_8217B40C;
	// ld r4,784(r29)
	ctx.r4.u64 = PPC_LOAD_U64(r29.u32 + 784);
	// lwz r3,820(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 820);
	// bl 0x823b8810
	sub_823B8810(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217b274
	goto loc_8217B274;
loc_8217B40C:
	// lwz r11,104(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 104);
	// lwz r10,-26072(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + -26072);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217b438
	if (cr6.getEQ()) goto loc_8217B438;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r3,820(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 820);
	// clrldi r4,r11,32
	ctx.r4.u64 = r11.u64 & 0xFFFFFFFF;
	// bl 0x823b8810
	sub_823B8810(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217b274
	goto loc_8217B274;
loc_8217B438:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,820(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 820);
	// bl 0x823b8810
	sub_823B8810(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217b274
	goto loc_8217B274;
loc_8217B450:
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8217b474
	if (!cr6.getEQ()) goto loc_8217B474;
	// ld r4,784(r29)
	ctx.r4.u64 = PPC_LOAD_U64(r29.u32 + 784);
	// lwz r3,820(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 820);
	// bl 0x823b8b30
	sub_823B8B30(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217b274
	goto loc_8217B274;
loc_8217B474:
	// lwz r11,104(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 104);
	// lwz r10,-26072(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + -26072);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217b4a0
	if (cr6.getEQ()) goto loc_8217B4A0;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r3,820(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 820);
	// clrldi r4,r11,32
	ctx.r4.u64 = r11.u64 & 0xFFFFFFFF;
	// bl 0x823b8b30
	sub_823B8B30(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217b274
	goto loc_8217B274;
loc_8217B4A0:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,820(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 820);
	// bl 0x823b8b30
	sub_823B8B30(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217b274
	goto loc_8217B274;
loc_8217B4B8:
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8217b4dc
	if (!cr6.getEQ()) goto loc_8217B4DC;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// ld r3,784(r29)
	ctx.r3.u64 = PPC_LOAD_U64(r29.u32 + 784);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bl 0x823b84b0
	sub_823B84B0(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed170
	return;
loc_8217B4DC:
	// lwz r11,104(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 104);
	// lwz r10,-26072(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + -26072);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217b508
	if (cr6.getEQ()) goto loc_8217B508;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// clrldi r3,r11,32
	ctx.r3.u64 = r11.u64 & 0xFFFFFFFF;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bl 0x823b84b0
	sub_823B84B0(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed170
	return;
loc_8217B508:
	// li r3,0
	ctx.r3.s64 = 0;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bl 0x823b84b0
	sub_823B84B0(ctx, base);
loc_8217B518:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_8217B520"))) PPC_WEAK_FUNC(sub_8217B520);
PPC_FUNC_IMPL(__imp__sub_8217B520) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed114
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r21,r4
	r21.u64 = ctx.r4.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r20,r6
	r20.u64 = ctx.r6.u64;
	// mr r19,r7
	r19.u64 = ctx.r7.u64;
	// bl 0x82158600
	sub_82158600(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x8217b6ec
	if (cr6.getEQ()) goto loc_8217B6EC;
	// li r25,0
	r25.s64 = 0;
	// li r27,0
	r27.s64 = 0;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// ble cr6,0x8217b6ec
	if (!cr6.getGT()) goto loc_8217B6EC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r23,r1,80
	r23.s64 = ctx.r1.s64 + 80;
	// addi r24,r11,14748
	r24.s64 = r11.s64 + 14748;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r26,r31
	r26.u64 = r31.u64;
	// lis r29,-32254
	r29.s64 = -2113798144;
	// addi r22,r11,14756
	r22.s64 = r11.s64 + 14756;
loc_8217B578:
	// li r6,2
	ctx.r6.s64 = 2;
	// stw r22,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r22.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// li r30,0
	r30.s64 = 0;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8217B594:
	// lwz r31,108(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x8217b5b0
	if (cr6.getEQ()) goto loc_8217B5B0;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217b5b4
	if (!cr6.getEQ()) goto loc_8217B5B4;
loc_8217B5B0:
	// li r11,1
	r11.s64 = 1;
loc_8217B5B4:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217b610
	if (!cr6.getEQ()) goto loc_8217B610;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8217b5d4
	if (!cr6.getEQ()) goto loc_8217B5D4;
	// ld r11,784(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 784);
	// b 0x8217b5f4
	goto loc_8217B5F4;
loc_8217B5D4:
	// lwz r11,104(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 104);
	// lwz r10,-26072(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + -26072);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217b5f0
	if (cr6.getEQ()) goto loc_8217B5F0;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// b 0x8217b5f4
	goto loc_8217B5F4;
loc_8217B5F0:
	// li r11,0
	r11.s64 = 0;
loc_8217B5F4:
	// ld r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U64(r26.u32 + 0);
	// cmpld cr6,r11,r10
	cr6.compare<uint64_t>(r11.u64, ctx.r10.u64, xer);
	// beq cr6,0x8217b60c
	if (cr6.getEQ()) goto loc_8217B60C;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217b594
	goto loc_8217B594;
loc_8217B60C:
	// lwz r30,108(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
loc_8217B610:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8216c168
	sub_8216C168(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// cmpw cr6,r27,r25
	cr6.compare<int32_t>(r27.s32, r25.s32, xer);
	// bge cr6,0x8217b63c
	if (!cr6.getLT()) goto loc_8217B63C;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
loc_8217B628:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r10,r6
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r6.s32, xer);
	// beq cr6,0x8217b6d8
	if (cr6.getEQ()) goto loc_8217B6D8;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// b 0x8217b628
	goto loc_8217B628;
loc_8217B63C:
	// stw r6,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r6.u32);
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// addi r23,r23,4
	r23.s64 = r23.s64 + 4;
	// blt cr6,0x8217b664
	if (cr6.getLT()) goto loc_8217B664;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,104(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 104);
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x8217afa8
	sub_8217AFA8(ctx, base);
	// b 0x8217b6d8
	goto loc_8217B6D8;
loc_8217B664:
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8217b678
	if (!cr6.getEQ()) goto loc_8217B678;
	// ld r11,784(r28)
	r11.u64 = PPC_LOAD_U64(r28.u32 + 784);
	// b 0x8217b690
	goto loc_8217B690;
loc_8217B678:
	// lwz r11,104(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 104);
	// lwz r10,-26072(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + -26072);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217b6d8
	if (cr6.getEQ()) goto loc_8217B6D8;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
loc_8217B690:
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// beq cr6,0x8217b6d8
	if (cr6.getEQ()) goto loc_8217B6D8;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8217b6ac
	if (!cr6.getEQ()) goto loc_8217B6AC;
	// ld r3,784(r28)
	ctx.r3.u64 = PPC_LOAD_U64(r28.u32 + 784);
	// b 0x8217b6cc
	goto loc_8217B6CC;
loc_8217B6AC:
	// lwz r11,104(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 104);
	// lwz r10,-26072(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + -26072);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217b6c8
	if (cr6.getEQ()) goto loc_8217B6C8;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrldi r3,r11,32
	ctx.r3.u64 = r11.u64 & 0xFFFFFFFF;
	// b 0x8217b6cc
	goto loc_8217B6CC;
loc_8217B6C8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8217B6CC:
	// mr r5,r19
	ctx.r5.u64 = r19.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x823b84b0
	sub_823B84B0(ctx, base);
loc_8217B6D8:
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// stw r24,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r24.u32);
	// addi r26,r26,8
	r26.s64 = r26.s64 + 8;
	// cmpw cr6,r27,r21
	cr6.compare<int32_t>(r27.s32, r21.s32, xer);
	// blt cr6,0x8217b578
	if (cr6.getLT()) goto loc_8217B578;
loc_8217B6EC:
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x823ed164
	return;
}

__attribute__((alias("__imp__sub_8217B6F8"))) PPC_WEAK_FUNC(sub_8217B6F8);
PPC_FUNC_IMPL(__imp__sub_8217B6F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r5,11
	ctx.r5.s64 = 11;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,81
	ctx.r3.s64 = ctx.r1.s64 + 81;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// lis r11,-32250
	r11.s64 = -2113536000;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r11,r11,0
	r11.s64 = r11.s64 + 0;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r11,4
	r11.s64 = 4;
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// li r11,3
	r11.s64 = 3;
	// stb r11,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, r11.u8);
	// li r11,0
	r11.s64 = 0;
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// li r11,48
	r11.s64 = 48;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, r11.u8);
	// bl 0x82364e90
	sub_82364E90(ctx, base);
	// lis r11,-32232
	r11.s64 = -2112356352;
	// addi r3,r11,-19168
	ctx.r3.s64 = r11.s64 + -19168;
	// bl 0x823b83a8
	sub_823B83A8(ctx, base);
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// lis r11,-32234
	r11.s64 = -2112487424;
	// addi r7,r10,-7384
	ctx.r7.s64 = ctx.r10.s64 + -7384;
	// addi r6,r11,-15064
	ctx.r6.s64 = r11.s64 + -15064;
	// li r5,6
	ctx.r5.s64 = 6;
	// li r4,4
	ctx.r4.s64 = 4;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x823b7f50
	sub_823B7F50(ctx, base);
	// bl 0x823b8398
	sub_823B8398(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217b78c
	if (cr6.getEQ()) goto loc_8217B78C;
	// bl 0x823b8398
	sub_823B8398(ctx, base);
	// li r4,4
	ctx.r4.s64 = 4;
	// bl 0x8235dd40
	sub_8235DD40(ctx, base);
loc_8217B78C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217B7A0"))) PPC_WEAK_FUNC(sub_8217B7A0);
PPC_FUNC_IMPL(__imp__sub_8217B7A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed110
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r20,0
	r20.s64 = 0;
	// addi r19,r11,-30556
	r19.s64 = r11.s64 + -30556;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// stb r20,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, r20.u8);
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r19,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r19.u32);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// stw r11,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r18,1
	r18.s64 = 1;
	// addi r21,r11,24796
	r21.s64 = r11.s64 + 24796;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r23,-1
	r23.s64 = -1;
	// addi r22,r11,24812
	r22.s64 = r11.s64 + 24812;
loc_8217B7F8:
	// lwz r10,172(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8217b814
	if (cr6.getEQ()) goto loc_8217B814;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// mr r11,r20
	r11.u64 = r20.u64;
	// bne cr6,0x8217b818
	if (!cr6.getEQ()) goto loc_8217B818;
loc_8217B814:
	// mr r11,r18
	r11.u64 = r18.u64;
loc_8217B818:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217ba38
	if (!cr6.getEQ()) goto loc_8217BA38;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r24,r10
	r24.u64 = ctx.r10.u64;
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ba2c
	if (cr6.getEQ()) goto loc_8217BA2C;
loc_8217B840:
	// mr r26,r11
	r26.u64 = r11.u64;
	// bl 0x8215fd20
	sub_8215FD20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217b87c
	if (cr6.getEQ()) goto loc_8217B87C;
	// addi r30,r24,2324
	r30.s64 = r24.s64 + 2324;
	// li r31,4
	r31.s64 = 4;
loc_8217B858:
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82176f70
	sub_82176F70(ctx, base);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r30,r30,52
	r30.s64 = r30.s64 + 52;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8217b858
	if (!cr6.getEQ()) goto loc_8217B858;
	// b 0x8217ba18
	goto loc_8217BA18;
loc_8217B87C:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// stw r22,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r22.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// mr r29,r20
	r29.u64 = r20.u64;
	// bl 0x821647b8
	sub_821647B8(ctx, base);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217b8f0
	if (cr6.getEQ()) goto loc_8217B8F0;
	// addi r30,r1,144
	r30.s64 = ctx.r1.s64 + 144;
loc_8217B8A0:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// stw r20,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r20.u32);
	// lwz r3,820(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 820);
	// mr r31,r11
	r31.u64 = r11.u64;
	// ld r4,784(r11)
	ctx.r4.u64 = PPC_LOAD_U64(r11.u32 + 784);
	// bl 0x823bd058
	sub_823BD058(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8217b8dc
	if (cr6.getEQ()) goto loc_8217B8DC;
	// cmpwi cr6,r29,4
	cr6.compare<int32_t>(r29.s32, 4, xer);
	// bge cr6,0x8217b8dc
	if (!cr6.getLT()) goto loc_8217B8DC;
	// lwz r11,104(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 104);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
loc_8217B8DC:
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x821647c8
	sub_821647C8(ctx, base);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217b8a0
	if (!cr6.getEQ()) goto loc_8217B8A0;
loc_8217B8F0:
	// addi r25,r24,2324
	r25.s64 = r24.s64 + 2324;
	// li r30,4
	r30.s64 = 4;
	// mr r31,r25
	r31.u64 = r25.u64;
loc_8217B8FC:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r9,r3
	ctx.r9.s64 = ctx.r3.s8;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x8217b980
	if (cr6.getLT()) goto loc_8217B980;
	// mr r8,r20
	ctx.r8.u64 = r20.u64;
	// mr r11,r20
	r11.u64 = r20.u64;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// ble cr6,0x8217b964
	if (!cr6.getGT()) goto loc_8217B964;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
loc_8217B934:
	// lwz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r7,r9
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r9.s32, xer);
	// beq cr6,0x8217b954
	if (cr6.getEQ()) goto loc_8217B954;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r11,r29
	cr6.compare<int32_t>(r11.s32, r29.s32, xer);
	// blt cr6,0x8217b934
	if (cr6.getLT()) goto loc_8217B934;
	// b 0x8217b964
	goto loc_8217B964;
loc_8217B954:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// mr r8,r18
	ctx.r8.u64 = r18.u64;
	// stwx r23,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, r23.u32);
loc_8217B964:
	// clrlwi r11,r8,24
	r11.u64 = ctx.r8.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217b980
	if (!cr6.getEQ()) goto loc_8217B980;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82176f70
	sub_82176F70(ctx, base);
loc_8217B980:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r31,r31,52
	r31.s64 = r31.s64 + 52;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x8217b8fc
	if (!cr6.getEQ()) goto loc_8217B8FC;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// ble cr6,0x8217ba14
	if (!cr6.getGT()) goto loc_8217BA14;
	// addi r28,r1,144
	r28.s64 = ctx.r1.s64 + 144;
	// mr r27,r29
	r27.u64 = r29.u64;
loc_8217B9A0:
	// lwz r29,0(r28)
	r29.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// blt cr6,0x8217ba04
	if (cr6.getLT()) goto loc_8217BA04;
	// mr r30,r20
	r30.u64 = r20.u64;
	// mr r31,r25
	r31.u64 = r25.u64;
loc_8217B9B4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8217b9ec
	if (cr6.getLT()) goto loc_8217B9EC;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r31,r31,52
	r31.s64 = r31.s64 + 52;
	// cmpwi cr6,r30,4
	cr6.compare<int32_t>(r30.s32, 4, xer);
	// blt cr6,0x8217b9b4
	if (cr6.getLT()) goto loc_8217B9B4;
	// b 0x8217ba04
	goto loc_8217BA04;
loc_8217B9EC:
	// mulli r11,r30,52
	r11.s64 = r30.s64 * 52;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// extsb r4,r29
	ctx.r4.s64 = r29.s8;
	// addi r3,r11,2324
	ctx.r3.s64 = r11.s64 + 2324;
	// bl 0x82176f70
	sub_82176F70(ctx, base);
loc_8217BA04:
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x8217b9a0
	if (!cr6.getEQ()) goto loc_8217B9A0;
loc_8217BA14:
	// stw r21,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r21.u32);
loc_8217BA18:
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217b840
	if (!cr6.getEQ()) goto loc_8217B840;
loc_8217BA2C:
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217b7f8
	goto loc_8217B7F8;
loc_8217BA38:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r22,r20
	r22.u64 = r20.u64;
	// addi r21,r11,-30572
	r21.s64 = r11.s64 + -30572;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r27,r20
	r27.u64 = r20.u64;
	// mr r31,r20
	r31.u64 = r20.u64;
	// addi r28,r11,-4968
	r28.s64 = r11.s64 + -4968;
loc_8217BA54:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82158600
	sub_82158600(ctx, base);
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// beq cr6,0x8217bbf8
	if (cr6.getEQ()) goto loc_8217BBF8;
	// addi r29,r28,25600
	r29.s64 = r28.s64 + 25600;
	// addi r23,r28,25616
	r23.s64 = r28.s64 + 25616;
	// lwzx r11,r31,r29
	r11.u64 = PPC_LOAD_U32(r31.u32 + r29.u32);
	// lwzx r10,r31,r23
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + r23.u32);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// addi r11,r28,25648
	r11.s64 = r28.s64 + 25648;
	// beq cr6,0x8217bbe8
	if (cr6.getEQ()) goto loc_8217BBE8;
	// mr r25,r20
	r25.u64 = r20.u64;
	// stbx r18,r22,r11
	PPC_STORE_U8(r22.u32 + r11.u32, r18.u8);
	// bl 0x8215fd20
	sub_8215FD20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8217bae8
	if (!cr6.getEQ()) goto loc_8217BAE8;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x82183990
	sub_82183990(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217bae8
	if (cr6.getEQ()) goto loc_8217BAE8;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183ae8
	sub_82183AE8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217bae8
	if (!cr6.getEQ()) goto loc_8217BAE8;
	// li r4,6
	ctx.r4.s64 = 6;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183ae8
	sub_82183AE8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217bae8
	if (cr6.getEQ()) goto loc_8217BAE8;
	// mr r25,r18
	r25.u64 = r18.u64;
loc_8217BAE8:
	// lwzx r11,r31,r29
	r11.u64 = PPC_LOAD_U32(r31.u32 + r29.u32);
	// addi r10,r28,12
	ctx.r10.s64 = r28.s64 + 12;
	// addi r26,r28,25632
	r26.s64 = r28.s64 + 25632;
	// add r11,r27,r11
	r11.u64 = r27.u64 + r11.u64;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwzx r30,r11,r10
	r30.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x823b3528
	sub_823B3528(ctx, base);
	// lwzx r11,r31,r26
	r11.u64 = PPC_LOAD_U32(r31.u32 + r26.u32);
	// subf r10,r30,r3
	ctx.r10.s64 = ctx.r3.s64 - r30.s64;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x8217bbc0
	if (cr6.getLT()) goto loc_8217BBC0;
loc_8217BB14:
	// lwzx r11,r31,r29
	r11.u64 = PPC_LOAD_U32(r31.u32 + r29.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r19,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r19.u32);
	// add r11,r27,r11
	r11.u64 = r27.u64 + r11.u64;
	// stb r20,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, r20.u8);
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r30,r11,r28
	r30.u64 = r11.u64 + r28.u64;
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217bb6c
	if (cr6.getEQ()) goto loc_8217BB6C;
loc_8217BB44:
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// lwz r6,16(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,104(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 104);
	// bl 0x8217afa8
	sub_8217AFA8(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217bb44
	if (!cr6.getEQ()) goto loc_8217BB44;
loc_8217BB6C:
	// lwzx r11,r31,r29
	r11.u64 = PPC_LOAD_U32(r31.u32 + r29.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,400
	cr6.compare<int32_t>(r11.s32, 400, xer);
	// stwx r11,r31,r29
	PPC_STORE_U32(r31.u32 + r29.u32, r11.u32);
	// blt cr6,0x8217bb84
	if (cr6.getLT()) goto loc_8217BB84;
	// stwx r20,r31,r29
	PPC_STORE_U32(r31.u32 + r29.u32, r20.u32);
loc_8217BB84:
	// lwzx r11,r31,r29
	r11.u64 = PPC_LOAD_U32(r31.u32 + r29.u32);
	// lwzx r10,r31,r23
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + r23.u32);
	// stw r21,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r21.u32);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x8217bc18
	if (cr6.getEQ()) goto loc_8217BC18;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// addi r10,r28,12
	ctx.r10.s64 = r28.s64 + 12;
	// add r11,r27,r11
	r11.u64 = r27.u64 + r11.u64;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwzx r30,r11,r10
	r30.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x823b3528
	sub_823B3528(ctx, base);
	// lwzx r11,r31,r26
	r11.u64 = PPC_LOAD_U32(r31.u32 + r26.u32);
	// subf r10,r30,r3
	ctx.r10.s64 = ctx.r3.s64 - r30.s64;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bge cr6,0x8217bb14
	if (!cr6.getLT()) goto loc_8217BB14;
loc_8217BBC0:
	// bl 0x823b3528
	sub_823B3528(ctx, base);
	// lwzx r11,r31,r26
	r11.u64 = PPC_LOAD_U32(r31.u32 + r26.u32);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// subf r11,r3,r11
	r11.s64 = r11.s64 - ctx.r3.s64;
	// cmplwi cr6,r11,60
	cr6.compare<uint32_t>(r11.u32, 60, xer);
	// blt cr6,0x8217bc18
	if (cr6.getLT()) goto loc_8217BC18;
	// bl 0x823b3528
	sub_823B3528(ctx, base);
	// subf r11,r30,r3
	r11.s64 = ctx.r3.s64 - r30.s64;
	// stwx r11,r31,r26
	PPC_STORE_U32(r31.u32 + r26.u32, r11.u32);
	// b 0x8217bc18
	goto loc_8217BC18;
loc_8217BBE8:
	// addi r10,r28,25632
	ctx.r10.s64 = r28.s64 + 25632;
	// stbx r20,r22,r11
	PPC_STORE_U8(r22.u32 + r11.u32, r20.u8);
	// stwx r20,r31,r10
	PPC_STORE_U32(r31.u32 + ctx.r10.u32, r20.u32);
	// b 0x8217bc18
	goto loc_8217BC18;
loc_8217BBF8:
	// addi r11,r28,25616
	r11.s64 = r28.s64 + 25616;
	// addi r10,r28,25648
	ctx.r10.s64 = r28.s64 + 25648;
	// addi r9,r28,25632
	ctx.r9.s64 = r28.s64 + 25632;
	// addi r8,r28,25600
	ctx.r8.s64 = r28.s64 + 25600;
	// lwzx r11,r31,r11
	r11.u64 = PPC_LOAD_U32(r31.u32 + r11.u32);
	// stbx r20,r22,r10
	PPC_STORE_U8(r22.u32 + ctx.r10.u32, r20.u8);
	// stwx r20,r31,r9
	PPC_STORE_U32(r31.u32 + ctx.r9.u32, r20.u32);
	// stwx r11,r31,r8
	PPC_STORE_U32(r31.u32 + ctx.r8.u32, r11.u32);
loc_8217BC18:
	// addi r27,r27,400
	r27.s64 = r27.s64 + 400;
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// cmpwi cr6,r27,1600
	cr6.compare<int32_t>(r27.s32, 1600, xer);
	// blt cr6,0x8217ba54
	if (cr6.getLT()) goto loc_8217BA54;
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed160
	return;
}

__attribute__((alias("__imp__sub_8217BC38"))) PPC_WEAK_FUNC(sub_8217BC38);
PPC_FUNC_IMPL(__imp__sub_8217BC38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r3,116(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 116);
	// bl 0x82158ab8
	sub_82158AB8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x8217bc98
	if (cr6.getEQ()) goto loc_8217BC98;
	// lwz r11,112(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 112);
	// li r30,0
	r30.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8217bc98
	if (!cr6.getGT()) goto loc_8217BC98;
	// addi r31,r29,40
	r31.s64 = r29.s64 + 40;
loc_8217BC70:
	// li r5,10
	ctx.r5.s64 = 10;
	// lbz r6,120(r29)
	ctx.r6.u64 = PPC_LOAD_U8(r29.u32 + 120);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8217b228
	sub_8217B228(ctx, base);
	// lwz r11,112(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 112);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r31,r31,10
	r31.s64 = r31.s64 + 10;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8217bc70
	if (cr6.getLT()) goto loc_8217BC70;
loc_8217BC98:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8217BCA8"))) PPC_WEAK_FUNC(sub_8217BCA8);
PPC_FUNC_IMPL(__imp__sub_8217BCA8) {
	PPC_FUNC_PROLOGUE();
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x8209d0f0
	sub_8209D0F0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8217BCB0"))) PPC_WEAK_FUNC(sub_8217BCB0);
PPC_FUNC_IMPL(__imp__sub_8217BCB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ea630
	sub_820EA630(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8217bd64
	if (cr6.getEQ()) goto loc_8217BD64;
	// bl 0x82183990
	sub_82183990(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217bd64
	if (cr6.getEQ()) goto loc_8217BD64;
	// lbz r11,1(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217bd64
	if (cr6.getEQ()) goto loc_8217BD64;
	// lbz r11,2(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 2);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217bd64
	if (cr6.getEQ()) goto loc_8217BD64;
	// li r11,1
	r11.s64 = 1;
	// stb r11,10120(r31)
	PPC_STORE_U8(r31.u32 + 10120, r11.u8);
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// stw r3,10104(r31)
	PPC_STORE_U32(r31.u32 + 10104, ctx.r3.u32);
	// bl 0x8209f598
	sub_8209F598(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r11,10108(r31)
	PPC_STORE_U32(r31.u32 + 10108, r11.u32);
	// bl 0x820ea300
	sub_820EA300(ctx, base);
	// stw r3,10112(r31)
	PPC_STORE_U32(r31.u32 + 10112, ctx.r3.u32);
	// bl 0x820b57f8
	sub_820B57F8(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// addi r10,r31,10116
	ctx.r10.s64 = r31.s64 + 10116;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,6576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6576);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f0,14108(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14108);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
loc_8217BD64:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217BD80"))) PPC_WEAK_FUNC(sub_8217BD80);
PPC_FUNC_IMPL(__imp__sub_8217BD80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// li r30,0
	r30.s64 = 0;
	// addi r10,r10,14756
	ctx.r10.s64 = ctx.r10.s64 + 14756;
	// lwz r11,60(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 60);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// beq cr6,0x8217bdbc
	if (cr6.getEQ()) goto loc_8217BDBC;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8217bdbc
	if (!cr6.getEQ()) goto loc_8217BDBC;
	// li r30,1
	r30.s64 = 1;
loc_8217BDBC:
	// lwz r11,64(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 64);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217bdd8
	if (cr6.getEQ()) goto loc_8217BDD8;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8217bdd8
	if (!cr6.getEQ()) goto loc_8217BDD8;
	// li r30,1
	r30.s64 = 1;
loc_8217BDD8:
	// lwz r11,68(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 68);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217bdf4
	if (cr6.getEQ()) goto loc_8217BDF4;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8217bdf4
	if (!cr6.getEQ()) goto loc_8217BDF4;
	// li r30,1
	r30.s64 = 1;
loc_8217BDF4:
	// lwz r11,72(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 72);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217be10
	if (cr6.getEQ()) goto loc_8217BE10;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8217be10
	if (!cr6.getEQ()) goto loc_8217BE10;
	// li r30,1
	r30.s64 = 1;
loc_8217BE10:
	// lwz r11,76(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 76);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217be2c
	if (cr6.getEQ()) goto loc_8217BE2C;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8217be2c
	if (!cr6.getEQ()) goto loc_8217BE2C;
	// li r30,1
	r30.s64 = 1;
loc_8217BE2C:
	// lwz r11,128(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 128);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8217be3c
	if (cr6.getEQ()) goto loc_8217BE3C;
	// li r30,1
	r30.s64 = 1;
loc_8217BE3C:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217beb0
	if (cr6.getEQ()) goto loc_8217BEB0;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8217BE60:
	// lwz r31,92(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x8217be7c
	if (cr6.getEQ()) goto loc_8217BE7C;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217be80
	if (!cr6.getEQ()) goto loc_8217BE80;
loc_8217BE7C:
	// li r11,1
	r11.s64 = 1;
loc_8217BE80:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217bec0
	if (!cr6.getEQ()) goto loc_8217BEC0;
	// lwz r3,820(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 820);
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// lbz r11,849(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 849);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217bea4
	if (cr6.getEQ()) goto loc_8217BEA4;
	// li r30,1
	r30.s64 = 1;
loc_8217BEA4:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217be60
	goto loc_8217BE60;
loc_8217BEB0:
	// lbz r11,10120(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 10120);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217bec0
	if (cr6.getEQ()) goto loc_8217BEC0;
	// li r30,1
	r30.s64 = 1;
loc_8217BEC0:
	// ld r11,80(r29)
	r11.u64 = PPC_LOAD_U64(r29.u32 + 80);
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// beq cr6,0x8217bed0
	if (cr6.getEQ()) goto loc_8217BED0;
	// li r30,1
	r30.s64 = 1;
loc_8217BED0:
	// ld r11,88(r29)
	r11.u64 = PPC_LOAD_U64(r29.u32 + 88);
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// beq cr6,0x8217bee0
	if (cr6.getEQ()) goto loc_8217BEE0;
	// li r30,1
	r30.s64 = 1;
loc_8217BEE0:
	// ld r11,96(r29)
	r11.u64 = PPC_LOAD_U64(r29.u32 + 96);
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// beq cr6,0x8217bef0
	if (cr6.getEQ()) goto loc_8217BEF0;
	// li r30,1
	r30.s64 = 1;
loc_8217BEF0:
	// ld r11,104(r29)
	r11.u64 = PPC_LOAD_U64(r29.u32 + 104);
	// li r3,1
	ctx.r3.s64 = 1;
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// bne cr6,0x8217bf04
	if (!cr6.getEQ()) goto loc_8217BF04;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_8217BF04:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8217BF10"))) PPC_WEAK_FUNC(sub_8217BF10);
PPC_FUNC_IMPL(__imp__sub_8217BF10) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8217bfdc
	if (!cr6.getEQ()) goto loc_8217BFDC;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r31,-31993
	r31.s64 = -2096693248;
loc_8217BF50:
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217bf6c
	if (cr6.getEQ()) goto loc_8217BF6C;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217bf70
	if (!cr6.getEQ()) goto loc_8217BF70;
loc_8217BF6C:
	// li r11,1
	r11.s64 = 1;
loc_8217BF70:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217bfdc
	if (!cr6.getEQ()) goto loc_8217BFDC;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217bfa0
	if (cr6.getEQ()) goto loc_8217BFA0;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r11,1
	r11.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r11,849(r10)
	PPC_STORE_U8(ctx.r10.u32 + 849, r11.u8);
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217bf50
	goto loc_8217BF50;
loc_8217BFA0:
	// lwz r11,29100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 29100);
	// addi r3,r11,988
	ctx.r3.s64 = r11.s64 + 988;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,849(r10)
	PPC_STORE_U8(ctx.r10.u32 + 849, r11.u8);
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217bf50
	goto loc_8217BF50;
loc_8217BFDC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217BFF0"))) PPC_WEAK_FUNC(sub_8217BFF0);
PPC_FUNC_IMPL(__imp__sub_8217BFF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// bl 0x8215fa20
	sub_8215FA20(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8217c0fc
	if (cr6.getEQ()) goto loc_8217C0FC;
	// li r31,0
	r31.s64 = 0;
	// addi r11,r30,60
	r11.s64 = r30.s64 + 60;
loc_8217C028:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8217c04c
	if (cr6.getEQ()) goto loc_8217C04C;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpwi cr6,r31,4
	cr6.compare<int32_t>(r31.s32, 4, xer);
	// blt cr6,0x8217c028
	if (cr6.getLT()) goto loc_8217C028;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
loc_8217C04C:
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,72
	ctx.r3.s64 = 72;
	// li r28,1
	r28.s64 = 1;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217c080
	if (cr6.getEQ()) goto loc_8217C080;
	// lis r10,-32233
	ctx.r10.s64 = -2112421888;
	// lis r11,-32232
	r11.s64 = -2112356352;
	// addi r6,r10,-21888
	ctx.r6.s64 = ctx.r10.s64 + -21888;
	// addi r5,r11,-17240
	ctx.r5.s64 = r11.s64 + -17240;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x823ba6c0
	sub_823BA6C0(ctx, base);
	// b 0x8217c084
	goto loc_8217C084;
loc_8217C080:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8217C084:
	// addi r11,r31,15
	r11.s64 = r31.s64 + 15;
	// rlwinm r31,r11,2,0,29
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r3,r31,r30
	PPC_STORE_U32(r31.u32 + r30.u32, ctx.r3.u32);
	// bl 0x823ba258
	sub_823BA258(ctx, base);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// lwzx r3,r31,r30
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x823ba2b0
	sub_823BA2B0(ctx, base);
	// lis r29,-1
	r29.s64 = -65536;
	// li r5,2
	ctx.r5.s64 = 2;
	// lwzx r3,r31,r30
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x823b9ae0
	sub_823B9AE0(ctx, base);
	// lis r5,4096
	ctx.r5.s64 = 268435456;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// lwzx r3,r31,r30
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// ori r5,r5,32778
	ctx.r5.u64 = ctx.r5.u64 | 32778;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x823ba308
	sub_823BA308(ctx, base);
	// lis r5,4096
	ctx.r5.s64 = 268435456;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// lwzx r3,r31,r30
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// ori r5,r5,32779
	ctx.r5.u64 = ctx.r5.u64 | 32779;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x823ba308
	sub_823BA308(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwzx r3,r31,r30
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// bl 0x823b99d8
	sub_823B99D8(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
loc_8217C0FC:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8217C108"))) PPC_WEAK_FUNC(sub_8217C108);
PPC_FUNC_IMPL(__imp__sub_8217C108) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r3,r11,20712
	ctx.r3.s64 = r11.s64 + 20712;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217C118"))) PPC_WEAK_FUNC(sub_8217C118);
PPC_FUNC_IMPL(__imp__sub_8217C118) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217c164
	if (!cr6.getEQ()) goto loc_8217C164;
	// bl 0x820ea630
	sub_820EA630(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8217c164
	if (cr6.getEQ()) goto loc_8217C164;
	// bl 0x82183990
	sub_82183990(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217c164
	if (cr6.getEQ()) goto loc_8217C164;
	// li r11,1
	r11.s64 = 1;
	// stb r11,1(r31)
	PPC_STORE_U8(r31.u32 + 1, r11.u8);
	// stb r11,2(r31)
	PPC_STORE_U8(r31.u32 + 2, r11.u8);
loc_8217C164:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217C178"))) PPC_WEAK_FUNC(sub_8217C178);
PPC_FUNC_IMPL(__imp__sub_8217C178) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r23{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r11,r6,24
	r11.u64 = ctx.r6.u32 & 0xFF;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// li r31,-1
	r31.s64 = -1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217c1ac
	if (cr6.getEQ()) goto loc_8217C1AC;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// bl 0x820eb008
	sub_820EB008(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
loc_8217C1AC:
	// cmplwi cr6,r30,1
	cr6.compare<uint32_t>(r30.u32, 1, xer);
	// blt cr6,0x8217c3e0
	if (cr6.getLT()) goto loc_8217C3E0;
	// beq cr6,0x8217c2d0
	if (cr6.getEQ()) goto loc_8217C2D0;
	// cmplwi cr6,r30,3
	cr6.compare<uint32_t>(r30.u32, 3, xer);
	// bge cr6,0x8217c4ec
	if (!cr6.getLT()) goto loc_8217C4EC;
	// cmplwi cr6,r4,19
	cr6.compare<uint32_t>(ctx.r4.u32, 19, xer);
	// bgt cr6,0x8217c4ec
	if (cr6.getGT()) goto loc_8217C4EC;
	// lis r12,-32232
	r12.s64 = -2112356352;
	// addi r12,r12,-15904
	r12.s64 = r12.s64 + -15904;
	// rlwinm r0,r4,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r4.u64) {
	case 0:
		goto loc_8217C230;
	case 1:
		goto loc_8217C238;
	case 2:
		goto loc_8217C240;
	case 3:
		goto loc_8217C248;
	case 4:
		goto loc_8217C250;
	case 5:
		goto loc_8217C258;
	case 6:
		goto loc_8217C260;
	case 7:
		goto loc_8217C268;
	case 8:
		goto loc_8217C270;
	case 9:
		goto loc_8217C278;
	case 10:
		goto loc_8217C280;
	case 11:
		goto loc_8217C288;
	case 12:
		goto loc_8217C290;
	case 13:
		goto loc_8217C298;
	case 14:
		goto loc_8217C2A0;
	case 15:
		goto loc_8217C2A8;
	case 16:
		goto loc_8217C2B0;
	case 17:
		goto loc_8217C2B8;
	case 18:
		goto loc_8217C2C0;
	case 19:
		goto loc_8217C2C8;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-15824(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15824);
	// lwz r16,-15816(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15816);
	// lwz r16,-15808(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15808);
	// lwz r16,-15800(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15800);
	// lwz r16,-15792(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15792);
	// lwz r16,-15784(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15784);
	// lwz r16,-15776(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15776);
	// lwz r16,-15768(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15768);
	// lwz r16,-15760(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15760);
	// lwz r16,-15752(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15752);
	// lwz r16,-15744(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15744);
	// lwz r16,-15736(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15736);
	// lwz r16,-15728(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15728);
	// lwz r16,-15720(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15720);
	// lwz r16,-15712(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15712);
	// lwz r16,-15704(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15704);
	// lwz r16,-15696(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15696);
	// lwz r16,-15688(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15688);
	// lwz r16,-15680(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15680);
	// lwz r16,-15672(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15672);
loc_8217C230:
	// li r31,47
	r31.s64 = 47;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C238:
	// li r31,48
	r31.s64 = 48;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C240:
	// li r31,49
	r31.s64 = 49;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C248:
	// li r31,5
	r31.s64 = 5;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C250:
	// li r31,50
	r31.s64 = 50;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C258:
	// li r31,51
	r31.s64 = 51;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C260:
	// li r31,52
	r31.s64 = 52;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C268:
	// li r31,53
	r31.s64 = 53;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C270:
	// li r31,54
	r31.s64 = 54;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C278:
	// li r31,55
	r31.s64 = 55;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C280:
	// li r31,56
	r31.s64 = 56;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C288:
	// li r31,57
	r31.s64 = 57;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C290:
	// li r31,58
	r31.s64 = 58;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C298:
	// li r31,59
	r31.s64 = 59;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C2A0:
	// li r31,6
	r31.s64 = 6;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C2A8:
	// li r31,60
	r31.s64 = 60;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C2B0:
	// li r31,61
	r31.s64 = 61;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C2B8:
	// li r31,7
	r31.s64 = 7;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C2C0:
	// li r31,8
	r31.s64 = 8;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C2C8:
	// li r31,9
	r31.s64 = 9;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C2D0:
	// cmplwi cr6,r4,19
	cr6.compare<uint32_t>(ctx.r4.u32, 19, xer);
	// bgt cr6,0x8217c4ec
	if (cr6.getGT()) goto loc_8217C4EC;
	// lis r12,-32232
	r12.s64 = -2112356352;
	// addi r12,r12,-15632
	r12.s64 = r12.s64 + -15632;
	// rlwinm r0,r4,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r4.u64) {
	case 0:
		goto loc_8217C340;
	case 1:
		goto loc_8217C348;
	case 2:
		goto loc_8217C350;
	case 3:
		goto loc_8217C358;
	case 4:
		goto loc_8217C360;
	case 5:
		goto loc_8217C368;
	case 6:
		goto loc_8217C370;
	case 7:
		goto loc_8217C378;
	case 8:
		goto loc_8217C380;
	case 9:
		goto loc_8217C388;
	case 10:
		goto loc_8217C390;
	case 11:
		goto loc_8217C398;
	case 12:
		goto loc_8217C3A0;
	case 13:
		goto loc_8217C3A8;
	case 14:
		goto loc_8217C3B0;
	case 15:
		goto loc_8217C3B8;
	case 16:
		goto loc_8217C3C0;
	case 17:
		goto loc_8217C3C8;
	case 18:
		goto loc_8217C3D0;
	case 19:
		goto loc_8217C3D8;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-15552(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15552);
	// lwz r16,-15544(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15544);
	// lwz r16,-15536(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15536);
	// lwz r16,-15528(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15528);
	// lwz r16,-15520(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15520);
	// lwz r16,-15512(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15512);
	// lwz r16,-15504(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15504);
	// lwz r16,-15496(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15496);
	// lwz r16,-15488(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15488);
	// lwz r16,-15480(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15480);
	// lwz r16,-15472(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15472);
	// lwz r16,-15464(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15464);
	// lwz r16,-15456(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15456);
	// lwz r16,-15448(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15448);
	// lwz r16,-15440(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15440);
	// lwz r16,-15432(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15432);
	// lwz r16,-15424(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15424);
	// lwz r16,-15416(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15416);
	// lwz r16,-15408(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15408);
	// lwz r16,-15400(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15400);
loc_8217C340:
	// li r31,29
	r31.s64 = 29;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C348:
	// li r31,3
	r31.s64 = 3;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C350:
	// li r31,30
	r31.s64 = 30;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C358:
	// li r31,31
	r31.s64 = 31;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C360:
	// li r31,32
	r31.s64 = 32;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C368:
	// li r31,33
	r31.s64 = 33;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C370:
	// li r31,34
	r31.s64 = 34;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C378:
	// li r31,35
	r31.s64 = 35;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C380:
	// li r31,36
	r31.s64 = 36;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C388:
	// li r31,37
	r31.s64 = 37;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C390:
	// li r31,38
	r31.s64 = 38;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C398:
	// li r31,39
	r31.s64 = 39;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C3A0:
	// li r31,4
	r31.s64 = 4;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C3A8:
	// li r31,40
	r31.s64 = 40;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C3B0:
	// li r31,41
	r31.s64 = 41;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C3B8:
	// li r31,42
	r31.s64 = 42;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C3C0:
	// li r31,43
	r31.s64 = 43;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C3C8:
	// li r31,44
	r31.s64 = 44;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C3D0:
	// li r31,45
	r31.s64 = 45;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C3D8:
	// li r31,46
	r31.s64 = 46;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C3E0:
	// cmplwi cr6,r4,19
	cr6.compare<uint32_t>(ctx.r4.u32, 19, xer);
	// bgt cr6,0x8217c4ec
	if (cr6.getGT()) goto loc_8217C4EC;
	// lis r12,-32232
	r12.s64 = -2112356352;
	// addi r12,r12,-15360
	r12.s64 = r12.s64 + -15360;
	// rlwinm r0,r4,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r4.u64) {
	case 0:
		goto loc_8217C450;
	case 1:
		goto loc_8217C458;
	case 2:
		goto loc_8217C460;
	case 3:
		goto loc_8217C468;
	case 4:
		goto loc_8217C470;
	case 5:
		goto loc_8217C478;
	case 6:
		goto loc_8217C480;
	case 7:
		goto loc_8217C488;
	case 8:
		goto loc_8217C490;
	case 9:
		goto loc_8217C498;
	case 10:
		goto loc_8217C4A0;
	case 11:
		goto loc_8217C4A8;
	case 12:
		goto loc_8217C4B0;
	case 13:
		goto loc_8217C4B8;
	case 14:
		goto loc_8217C4C0;
	case 15:
		goto loc_8217C4C8;
	case 16:
		goto loc_8217C4D0;
	case 17:
		goto loc_8217C4D8;
	case 18:
		goto loc_8217C4E0;
	case 19:
		goto loc_8217C4E8;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-15280(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15280);
	// lwz r16,-15272(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15272);
	// lwz r16,-15264(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15264);
	// lwz r16,-15256(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15256);
	// lwz r16,-15248(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15248);
	// lwz r16,-15240(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15240);
	// lwz r16,-15232(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15232);
	// lwz r16,-15224(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15224);
	// lwz r16,-15216(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15216);
	// lwz r16,-15208(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15208);
	// lwz r16,-15200(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15200);
	// lwz r16,-15192(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15192);
	// lwz r16,-15184(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15184);
	// lwz r16,-15176(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15176);
	// lwz r16,-15168(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15168);
	// lwz r16,-15160(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15160);
	// lwz r16,-15152(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15152);
	// lwz r16,-15144(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15144);
	// lwz r16,-15136(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15136);
	// lwz r16,-15128(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -15128);
loc_8217C450:
	// li r31,2
	r31.s64 = 2;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C458:
	// li r31,10
	r31.s64 = 10;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C460:
	// li r31,11
	r31.s64 = 11;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C468:
	// li r31,12
	r31.s64 = 12;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C470:
	// li r31,13
	r31.s64 = 13;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C478:
	// li r31,14
	r31.s64 = 14;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C480:
	// li r31,15
	r31.s64 = 15;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C488:
	// li r31,17
	r31.s64 = 17;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C490:
	// li r31,16
	r31.s64 = 16;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C498:
	// li r31,18
	r31.s64 = 18;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C4A0:
	// li r31,19
	r31.s64 = 19;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C4A8:
	// li r31,20
	r31.s64 = 20;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C4B0:
	// li r31,21
	r31.s64 = 21;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C4B8:
	// li r31,22
	r31.s64 = 22;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C4C0:
	// li r31,23
	r31.s64 = 23;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C4C8:
	// li r31,24
	r31.s64 = 24;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C4D0:
	// li r31,25
	r31.s64 = 25;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C4D8:
	// li r31,26
	r31.s64 = 26;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C4E0:
	// li r31,27
	r31.s64 = 27;
	// b 0x8217c4ec
	goto loc_8217C4EC;
loc_8217C4E8:
	// li r31,28
	r31.s64 = 28;
loc_8217C4EC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217C508"))) PPC_WEAK_FUNC(sub_8217C508);
PPC_FUNC_IMPL(__imp__sub_8217C508) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// bl 0x8217c178
	sub_8217C178(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,4800(r31)
	PPC_STORE_U32(r31.u32 + 4800, r11.u32);
	// bl 0x8217c178
	sub_8217C178(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,6128(r31)
	PPC_STORE_U32(r31.u32 + 6128, r11.u32);
	// bl 0x8217c178
	sub_8217C178(ctx, base);
	// stw r3,8784(r31)
	PPC_STORE_U32(r31.u32 + 8784, ctx.r3.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8217C570"))) PPC_WEAK_FUNC(sub_8217C570);
PPC_FUNC_IMPL(__imp__sub_8217C570) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r27,0
	r27.s64 = 0;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r24,r5
	r24.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// mr r28,r27
	r28.u64 = r27.u64;
	// addi r11,r31,12
	r11.s64 = r31.s64 + 12;
loc_8217C59C:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8217c5c4
	if (cr6.getEQ()) goto loc_8217C5C4;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpwi cr6,r28,10
	cr6.compare<int32_t>(r28.s32, 10, xer);
	// blt cr6,0x8217c59c
	if (cr6.getLT()) goto loc_8217C59C;
	// li r3,-1
	ctx.r3.s64 = -1;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_8217C5C4:
	// addi r11,r28,3
	r11.s64 = r28.s64 + 3;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,28
	ctx.r3.s64 = 28;
	// rlwinm r30,r11,2,0,29
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// lis r11,8191
	r11.s64 = 536805376;
	// stwx r3,r30,r31
	PPC_STORE_U32(r30.u32 + r31.u32, ctx.r3.u32);
	// rlwinm r3,r29,3,0,28
	ctx.r3.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// ori r11,r11,65535
	r11.u64 = r11.u64 | 65535;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// ble cr6,0x8217c5f4
	if (!cr6.getGT()) goto loc_8217C5F4;
	// li r3,-1
	ctx.r3.s64 = -1;
loc_8217C5F4:
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwzx r9,r30,r31
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// mulli r10,r26,1328
	ctx.r10.s64 = r26.s64 * 1328;
	// stw r3,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r3.u32);
	// addi r11,r11,20712
	r11.s64 = r11.s64 + 20712;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// addi r11,r11,2136
	r11.s64 = r11.s64 + 2136;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwzx r10,r30,r31
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// stw r29,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r29.u32);
	// lwzx r10,r30,r31
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// stw r27,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, r27.u32);
	// lwzx r10,r30,r31
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// stw r25,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, r25.u32);
	// lwzx r10,r30,r31
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// stw r28,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, r28.u32);
	// lwzx r10,r30,r31
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// stw r27,16(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16, r27.u32);
	// lwzx r10,r30,r31
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// ble cr6,0x8217c674
	if (!cr6.getGT()) goto loc_8217C674;
	// mr r11,r27
	r11.u64 = r27.u64;
loc_8217C654:
	// lwzx r10,r30,r31
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// ldx r9,r11,r24
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + r24.u32);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// stdx r9,r10,r11
	PPC_STORE_U64(ctx.r10.u32 + r11.u32, ctx.r9.u64);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// bne cr6,0x8217c654
	if (!cr6.getEQ()) goto loc_8217C654;
loc_8217C674:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_8217C680"))) PPC_WEAK_FUNC(sub_8217C680);
PPC_FUNC_IMPL(__imp__sub_8217C680) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// mr r30,r29
	r30.u64 = r29.u64;
	// addi r11,r31,12
	r11.s64 = r31.s64 + 12;
loc_8217C6AC:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8217c6d4
	if (cr6.getEQ()) goto loc_8217C6D4;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpwi cr6,r30,10
	cr6.compare<int32_t>(r30.s32, 10, xer);
	// blt cr6,0x8217c6ac
	if (cr6.getLT()) goto loc_8217C6AC;
	// li r3,-1
	ctx.r3.s64 = -1;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
loc_8217C6D4:
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,28
	ctx.r3.s64 = 28;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// addi r11,r30,3
	r11.s64 = r30.s64 + 3;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r9,-31992
	ctx.r9.s64 = -2096627712;
	// mulli r8,r28,1328
	ctx.r8.s64 = r28.s64 * 1328;
	// stwx r10,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, ctx.r10.u32);
	// stw r27,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, r27.u32);
	// lwzx r10,r11,r31
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// addi r9,r9,20712
	ctx.r9.s64 = ctx.r9.s64 + 20712;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r25,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, r25.u32);
	// addi r9,r9,2136
	ctx.r9.s64 = ctx.r9.s64 + 2136;
	// lwzx r10,r11,r31
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// stw r30,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, r30.u32);
	// lwzx r10,r11,r31
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// stw r26,16(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16, r26.u32);
	// lwzx r10,r11,r31
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// stw r29,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r29.u32);
	// lwzx r10,r11,r31
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// stw r29,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r29.u32);
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8217C748"))) PPC_WEAK_FUNC(sub_8217C748);
PPC_FUNC_IMPL(__imp__sub_8217C748) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// li r29,0
	r29.s64 = 0;
	// addi r11,r30,12
	r11.s64 = r30.s64 + 12;
loc_8217C770:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8217c798
	if (cr6.getEQ()) goto loc_8217C798;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpwi cr6,r29,10
	cr6.compare<int32_t>(r29.s32, 10, xer);
	// blt cr6,0x8217c770
	if (cr6.getLT()) goto loc_8217C770;
	// li r3,-1
	ctx.r3.s64 = -1;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
loc_8217C798:
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,28
	ctx.r3.s64 = 28;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// addi r10,r29,3
	ctx.r10.s64 = r29.s64 + 3;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// rlwinm r31,r10,2,0,29
	r31.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,8
	ctx.r3.s64 = 8;
	// stwx r11,r31,r30
	PPC_STORE_U32(r31.u32 + r30.u32, r11.u32);
	// stw r9,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r9.u32);
	// lwzx r11,r31,r30
	r11.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// stw r25,20(r11)
	PPC_STORE_U32(r11.u32 + 20, r25.u32);
	// lwzx r11,r31,r30
	r11.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// stw r29,24(r11)
	PPC_STORE_U32(r11.u32 + 24, r29.u32);
	// lwzx r11,r31,r30
	r11.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// stw r26,16(r11)
	PPC_STORE_U32(r11.u32 + 16, r26.u32);
	// lwzx r11,r31,r30
	r11.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// lwzx r8,r31,r30
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// mulli r9,r28,1328
	ctx.r9.s64 = r28.s64 * 1328;
	// stw r11,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r11.u32);
	// lwzx r11,r31,r30
	r11.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// addi r10,r10,20712
	ctx.r10.s64 = ctx.r10.s64 + 20712;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// addi r10,r10,2136
	ctx.r10.s64 = ctx.r10.s64 + 2136;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// std r27,0(r11)
	PPC_STORE_U64(r11.u32 + 0, r27.u64);
	// lwzx r11,r31,r30
	r11.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8217C830"))) PPC_WEAK_FUNC(sub_8217C830);
PPC_FUNC_IMPL(__imp__sub_8217C830) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r4,3
	r11.s64 = ctx.r4.s64 + 3;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// rlwinm r25,r11,2,0,29
	r25.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r25,r31
	r11.u64 = PPC_LOAD_U32(r25.u32 + r31.u32);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,1324(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1324);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8217c9b8
	if (!cr6.getEQ()) goto loc_8217C9B8;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,904
	ctx.r3.s64 = 904;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217c890
	if (cr6.getEQ()) goto loc_8217C890;
	// lis r10,-32233
	ctx.r10.s64 = -2112421888;
	// lis r11,-32232
	r11.s64 = -2112356352;
	// lis r4,22593
	ctx.r4.s64 = 1480654848;
	// addi r6,r10,-21888
	ctx.r6.s64 = ctx.r10.s64 + -21888;
	// addi r5,r11,-17240
	ctx.r5.s64 = r11.s64 + -17240;
	// ori r4,r4,2217
	ctx.r4.u64 = ctx.r4.u64 | 2217;
	// bl 0x823ba0b8
	sub_823BA0B8(ctx, base);
	// b 0x8217c894
	goto loc_8217C894;
loc_8217C890:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8217C894:
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// li r28,1
	r28.s64 = 1;
	// lwzx r11,r25,r31
	r11.u64 = PPC_LOAD_U32(r25.u32 + r31.u32);
	// li r30,0
	r30.s64 = 0;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8217c8ec
	if (!cr6.getGT()) goto loc_8217C8EC;
	// li r29,0
	r29.s64 = 0;
loc_8217C8B4:
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// ldx r4,r11,r29
	ctx.r4.u64 = PPC_LOAD_U64(r11.u32 + r29.u32);
	// bl 0x823b94f0
	sub_823B94F0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217c8d4
	if (cr6.getEQ()) goto loc_8217C8D4;
	// li r28,0
	r28.s64 = 0;
loc_8217C8D4:
	// lwzx r11,r25,r31
	r11.u64 = PPC_LOAD_U32(r25.u32 + r31.u32);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r29,r29,8
	r29.s64 = r29.s64 + 8;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpw cr6,r30,r10
	cr6.compare<int32_t>(r30.s32, ctx.r10.s32, xer);
	// blt cr6,0x8217c8b4
	if (cr6.getLT()) goto loc_8217C8B4;
loc_8217C8EC:
	// clrlwi r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217c98c
	if (!cr6.getEQ()) goto loc_8217C98C;
	// lwzx r11,r25,r31
	r11.u64 = PPC_LOAD_U32(r25.u32 + r31.u32);
	// lwz r27,0(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r4,0(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// bl 0x823b8cb0
	sub_823B8CB0(ctx, base);
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// li r26,0
	r26.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8217c984
	if (!cr6.getGT()) goto loc_8217C984;
	// addi r30,r27,4
	r30.s64 = r27.s64 + 4;
loc_8217C920:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217c964
	if (cr6.getEQ()) goto loc_8217C964;
	// li r28,0
	r28.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8217c970
	if (!cr6.getGT()) goto loc_8217C970;
	// addi r29,r30,8
	r29.s64 = r30.s64 + 8;
loc_8217C93C:
	// lwz r5,0(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x823b9040
	sub_823B9040(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// cmpw cr6,r28,r11
	cr6.compare<int32_t>(r28.s32, r11.s32, xer);
	// blt cr6,0x8217c93c
	if (cr6.getLT()) goto loc_8217C93C;
	// b 0x8217c970
	goto loc_8217C970;
loc_8217C964:
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x823b9128
	sub_823B9128(ctx, base);
loc_8217C970:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r30,r30,264
	r30.s64 = r30.s64 + 264;
	// cmpw cr6,r26,r11
	cr6.compare<int32_t>(r26.s32, r11.s32, xer);
	// blt cr6,0x8217c920
	if (cr6.getLT()) goto loc_8217C920;
loc_8217C984:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x8217cba0
	goto loc_8217CBA0;
loc_8217C98C:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217c9a8
	if (cr6.getEQ()) goto loc_8217C9A8;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217C9A8:
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
loc_8217C9B8:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8217caac
	if (!cr6.getEQ()) goto loc_8217CAAC;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,100
	ctx.r3.s64 = 100;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217c9f4
	if (cr6.getEQ()) goto loc_8217C9F4;
	// lis r10,-32233
	ctx.r10.s64 = -2112421888;
	// lis r11,-32232
	r11.s64 = -2112356352;
	// lis r4,22593
	ctx.r4.s64 = 1480654848;
	// addi r6,r10,-21888
	ctx.r6.s64 = ctx.r10.s64 + -21888;
	// addi r5,r11,-17240
	ctx.r5.s64 = r11.s64 + -17240;
	// ori r4,r4,2217
	ctx.r4.u64 = ctx.r4.u64 | 2217;
	// bl 0x823ba5f8
	sub_823BA5F8(ctx, base);
	// b 0x8217c9f8
	goto loc_8217C9F8;
loc_8217C9F4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8217C9F8:
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// lwzx r11,r25,r31
	r11.u64 = PPC_LOAD_U32(r25.u32 + r31.u32);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// stw r11,96(r3)
	PPC_STORE_U32(ctx.r3.u32 + 96, r11.u32);
	// lwzx r11,r25,r31
	r11.u64 = PPC_LOAD_U32(r25.u32 + r31.u32);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// stw r11,88(r10)
	PPC_STORE_U32(ctx.r10.u32 + 88, r11.u32);
	// lwzx r11,r25,r31
	r11.u64 = PPC_LOAD_U32(r25.u32 + r31.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r27,0(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r4,0(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// bl 0x823b8cb0
	sub_823B8CB0(ctx, base);
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// li r26,0
	r26.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8217caa4
	if (!cr6.getGT()) goto loc_8217CAA4;
	// addi r30,r27,4
	r30.s64 = r27.s64 + 4;
loc_8217CA40:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ca84
	if (cr6.getEQ()) goto loc_8217CA84;
	// li r28,0
	r28.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8217ca90
	if (!cr6.getGT()) goto loc_8217CA90;
	// addi r29,r30,8
	r29.s64 = r30.s64 + 8;
loc_8217CA5C:
	// lwz r5,0(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x823b9040
	sub_823B9040(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// cmpw cr6,r28,r11
	cr6.compare<int32_t>(r28.s32, r11.s32, xer);
	// blt cr6,0x8217ca5c
	if (cr6.getLT()) goto loc_8217CA5C;
	// b 0x8217ca90
	goto loc_8217CA90;
loc_8217CA84:
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x823b9128
	sub_823B9128(ctx, base);
loc_8217CA90:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r30,r30,264
	r30.s64 = r30.s64 + 264;
	// cmpw cr6,r26,r11
	cr6.compare<int32_t>(r26.s32, r11.s32, xer);
	// blt cr6,0x8217ca40
	if (cr6.getLT()) goto loc_8217CA40;
loc_8217CAA4:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// b 0x8217cba0
	goto loc_8217CBA0;
loc_8217CAAC:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8217cbc4
	if (!cr6.getEQ()) goto loc_8217CBC4;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,104
	ctx.r3.s64 = 104;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217cae8
	if (cr6.getEQ()) goto loc_8217CAE8;
	// lis r10,-32233
	ctx.r10.s64 = -2112421888;
	// lis r11,-32232
	r11.s64 = -2112356352;
	// lis r4,22593
	ctx.r4.s64 = 1480654848;
	// addi r6,r10,-21888
	ctx.r6.s64 = ctx.r10.s64 + -21888;
	// addi r5,r11,-17240
	ctx.r5.s64 = r11.s64 + -17240;
	// ori r4,r4,2217
	ctx.r4.u64 = ctx.r4.u64 | 2217;
	// bl 0x823ba528
	sub_823BA528(ctx, base);
	// b 0x8217caec
	goto loc_8217CAEC;
loc_8217CAE8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8217CAEC:
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwzx r11,r25,r31
	r11.u64 = PPC_LOAD_U32(r25.u32 + r31.u32);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// ld r11,0(r11)
	r11.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// std r11,96(r3)
	PPC_STORE_U64(ctx.r3.u32 + 96, r11.u64);
	// lwzx r11,r25,r31
	r11.u64 = PPC_LOAD_U32(r25.u32 + r31.u32);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// stw r11,88(r10)
	PPC_STORE_U32(ctx.r10.u32 + 88, r11.u32);
	// lwzx r11,r25,r31
	r11.u64 = PPC_LOAD_U32(r25.u32 + r31.u32);
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r27,0(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r4,0(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// bl 0x823b8cb0
	sub_823B8CB0(ctx, base);
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// li r26,0
	r26.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8217cb9c
	if (!cr6.getGT()) goto loc_8217CB9C;
	// addi r30,r27,4
	r30.s64 = r27.s64 + 4;
loc_8217CB38:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217cb7c
	if (cr6.getEQ()) goto loc_8217CB7C;
	// li r28,0
	r28.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8217cb88
	if (!cr6.getGT()) goto loc_8217CB88;
	// addi r29,r30,8
	r29.s64 = r30.s64 + 8;
loc_8217CB54:
	// lwz r5,0(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x823b9040
	sub_823B9040(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// cmpw cr6,r28,r11
	cr6.compare<int32_t>(r28.s32, r11.s32, xer);
	// blt cr6,0x8217cb54
	if (cr6.getLT()) goto loc_8217CB54;
	// b 0x8217cb88
	goto loc_8217CB88;
loc_8217CB7C:
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x823b9128
	sub_823B9128(ctx, base);
loc_8217CB88:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r30,r30,264
	r30.s64 = r30.s64 + 264;
	// cmpw cr6,r26,r11
	cr6.compare<int32_t>(r26.s32, r11.s32, xer);
	// blt cr6,0x8217cb38
	if (cr6.getLT()) goto loc_8217CB38;
loc_8217CB9C:
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
loc_8217CBA0:
	// lwzx r11,r25,r31
	r11.u64 = PPC_LOAD_U32(r25.u32 + r31.u32);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r5,24(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// lwz r4,20(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// stw r3,56(r31)
	PPC_STORE_U32(r31.u32 + 56, ctx.r3.u32);
loc_8217CBC4:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8217CBD0"))) PPC_WEAK_FUNC(sub_8217CBD0);
PPC_FUNC_IMPL(__imp__sub_8217CBD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
loc_8217CBE8:
	// add r11,r5,r29
	r11.u64 = ctx.r5.u64 + r29.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// ldx r11,r11,r30
	r11.u64 = PPC_LOAD_U64(r11.u32 + r30.u32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lwz r8,80(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_8217CC0C:
	// rlwinm r11,r31,3,0,28
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r11,r30
	ctx.r10.u64 = r11.u64 + r30.u64;
loc_8217CC14:
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// li r11,1
	r11.s64 = 1;
	// bgt cr6,0x8217cc28
	if (cr6.getGT()) goto loc_8217CC28;
	// li r11,0
	r11.s64 = 0;
loc_8217CC28:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217cc48
	if (cr6.getEQ()) goto loc_8217CC48;
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// bge cr6,0x8217cc48
	if (!cr6.getLT()) goto loc_8217CC48;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// b 0x8217cc14
	goto loc_8217CC14;
loc_8217CC48:
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r11,r30
	ctx.r10.u64 = r11.u64 + r30.u64;
loc_8217CC50:
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r8,r11
	cr6.compare<int32_t>(ctx.r8.s32, r11.s32, xer);
	// li r11,1
	r11.s64 = 1;
	// bgt cr6,0x8217cc64
	if (cr6.getGT()) goto loc_8217CC64;
	// li r11,0
	r11.s64 = 0;
loc_8217CC64:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217cc84
	if (cr6.getEQ()) goto loc_8217CC84;
	// cmpw cr6,r6,r5
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r5.s32, xer);
	// ble cr6,0x8217cc84
	if (!cr6.getGT()) goto loc_8217CC84;
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// addi r10,r10,-8
	ctx.r10.s64 = ctx.r10.s64 + -8;
	// b 0x8217cc50
	goto loc_8217CC50;
loc_8217CC84:
	// cmpw cr6,r31,r6
	cr6.compare<int32_t>(r31.s32, ctx.r6.s32, xer);
	// bgt cr6,0x8217ccc4
	if (cr6.getGT()) goto loc_8217CCC4;
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r10,r31,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// add r10,r10,r30
	ctx.r10.u64 = ctx.r10.u64 + r30.u64;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r31,r6
	cr6.compare<int32_t>(r31.s32, ctx.r6.s32, xer);
	// ld r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r10.u32 + 0);
	// stw r7,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r7.u32);
	// lwz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r7,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r7.u32);
	// std r9,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r9.u64);
	// ble cr6,0x8217cc0c
	if (!cr6.getGT()) goto loc_8217CC0C;
loc_8217CCC4:
	// cmpw cr6,r5,r6
	cr6.compare<int32_t>(ctx.r5.s32, ctx.r6.s32, xer);
	// bge cr6,0x8217ccd8
	if (!cr6.getLT()) goto loc_8217CCD8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8217cbd0
	sub_8217CBD0(ctx, base);
loc_8217CCD8:
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// bge cr6,0x8217cce8
	if (!cr6.getLT()) goto loc_8217CCE8;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// b 0x8217cbe8
	goto loc_8217CBE8;
loc_8217CCE8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8217CCF0"))) PPC_WEAK_FUNC(sub_8217CCF0);
PPC_FUNC_IMPL(__imp__sub_8217CCF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// lwz r11,76(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// mr r25,r8
	r25.u64 = ctx.r8.u64;
	// addi r30,r31,208
	r30.s64 = r31.s64 + 208;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217ce00
	if (!cr6.getEQ()) goto loc_8217CE00;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8217ce00
	if (cr6.getEQ()) goto loc_8217CE00;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,72
	ctx.r3.s64 = 72;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217cd60
	if (cr6.getEQ()) goto loc_8217CD60;
	// lis r10,-32233
	ctx.r10.s64 = -2112421888;
	// lis r11,-32232
	r11.s64 = -2112356352;
	// addi r6,r10,-21888
	ctx.r6.s64 = ctx.r10.s64 + -21888;
	// addi r5,r11,-17240
	ctx.r5.s64 = r11.s64 + -17240;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x823ba6c0
	sub_823BA6C0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// b 0x8217cd64
	goto loc_8217CD64;
loc_8217CD60:
	// li r11,0
	r11.s64 = 0;
loc_8217CD64:
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,76(r31)
	PPC_STORE_U32(r31.u32 + 76, r11.u32);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8217c178
	sub_8217C178(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,76(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// bl 0x823ba2b0
	sub_823BA2B0(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,76(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// bl 0x823b9ae0
	sub_823B9AE0(ctx, base);
	// clrldi r11,r28,32
	r11.u64 = r28.u64 & 0xFFFFFFFF;
	// lis r5,8192
	ctx.r5.s64 = 536870912;
	// lwz r3,76(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// neg r6,r11
	ctx.r6.s64 = -r11.s64;
	// ori r5,r5,7
	ctx.r5.u64 = ctx.r5.u64 | 7;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x823ba368
	sub_823BA368(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,62
	ctx.r4.s64 = 62;
	// lwz r3,76(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// bl 0x823b9ae0
	sub_823B9AE0(ctx, base);
	// lis r5,8192
	ctx.r5.s64 = 536870912;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// lwz r3,76(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// ori r5,r5,8
	ctx.r5.u64 = ctx.r5.u64 | 8;
	// li r4,62
	ctx.r4.s64 = 62;
	// bl 0x823ba368
	sub_823BA368(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,76(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// bl 0x823b99d8
	sub_823B99D8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
loc_8217CE00:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8217CE10"))) PPC_WEAK_FUNC(sub_8217CE10);
PPC_FUNC_IMPL(__imp__sub_8217CE10) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217ce48
	if (cr6.getEQ()) goto loc_8217CE48;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r30,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r30.u32);
loc_8217CE48:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217ce6c
	if (cr6.getEQ()) goto loc_8217CE6C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
loc_8217CE6C:
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217ce90
	if (cr6.getEQ()) goto loc_8217CE90;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r30,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r30.u32);
loc_8217CE90:
	// addi r31,r31,12
	r31.s64 = r31.s64 + 12;
	// li r29,10
	r29.s64 = 10;
loc_8217CE98:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217cec8
	if (cr6.getEQ()) goto loc_8217CEC8;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217cebc
	if (cr6.getEQ()) goto loc_8217CEBC;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r30,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r30.u32);
loc_8217CEBC:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// stw r30,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r30.u32);
loc_8217CEC8:
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8217ce98
	if (!cr6.getEQ()) goto loc_8217CE98;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8217CEE0"))) PPC_WEAK_FUNC(sub_8217CEE0);
PPC_FUNC_IMPL(__imp__sub_8217CEE0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8217cfb0
	if (!cr6.getEQ()) goto loc_8217CFB0;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217cfb0
	if (!cr6.getEQ()) goto loc_8217CFB0;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217cfb0
	if (!cr6.getEQ()) goto loc_8217CFB0;
	// lwz r30,56(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// subf r11,r30,r3
	r11.s64 = ctx.r3.s64 - r30.s64;
	// beq cr6,0x8217cf30
	if (cr6.getEQ()) goto loc_8217CF30;
	// cmplwi cr6,r11,1000
	cr6.compare<uint32_t>(r11.u32, 1000, xer);
	// ble cr6,0x8217d150
	if (!cr6.getGT()) goto loc_8217D150;
loc_8217CF30:
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// addi r9,r11,3
	ctx.r9.s64 = r11.s64 + 3;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217cf88
	if (!cr6.getEQ()) goto loc_8217CF88;
	// li r29,0
	r29.s64 = 0;
loc_8217CF50:
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217cf88
	if (cr6.getEQ()) goto loc_8217CF88;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r11,10
	cr6.compare<uint32_t>(r11.u32, 10, xer);
	// stw r11,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r11.u32);
	// ble cr6,0x8217cf70
	if (!cr6.getGT()) goto loc_8217CF70;
	// stw r29,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r29.u32);
loc_8217CF70:
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// addi r11,r11,3
	r11.s64 = r11.s64 + 3;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217cf50
	if (cr6.getEQ()) goto loc_8217CF50;
loc_8217CF88:
	// lwz r4,52(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// addi r11,r4,3
	r11.s64 = ctx.r4.s64 + 3;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d150
	if (cr6.getEQ()) goto loc_8217D150;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8217c830
	sub_8217C830(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8217CFB0:
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// mr r30,r29
	r30.u64 = r29.u64;
	// beq cr6,0x8217d00c
	if (cr6.getEQ()) goto loc_8217D00C;
	// bl 0x823b9220
	sub_823B9220(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217cfe8
	if (cr6.getEQ()) goto loc_8217CFE8;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8217d00c
	goto loc_8217D00C;
loc_8217CFE8:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217d004
	if (cr6.getEQ()) goto loc_8217D004;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217D004:
	// li r30,1
	r30.s64 = 1;
	// stw r29,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r29.u32);
loc_8217D00C:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217d064
	if (cr6.getEQ()) goto loc_8217D064;
	// bl 0x823b9220
	sub_823B9220(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d040
	if (cr6.getEQ()) goto loc_8217D040;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8217d064
	goto loc_8217D064;
loc_8217D040:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217d05c
	if (cr6.getEQ()) goto loc_8217D05C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217D05C:
	// li r30,1
	r30.s64 = 1;
	// stw r29,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r29.u32);
loc_8217D064:
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217d0bc
	if (cr6.getEQ()) goto loc_8217D0BC;
	// bl 0x823b9220
	sub_823B9220(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d098
	if (cr6.getEQ()) goto loc_8217D098;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8217d0bc
	goto loc_8217D0BC;
loc_8217D098:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217d0b4
	if (cr6.getEQ()) goto loc_8217D0B4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217D0B4:
	// li r30,1
	r30.s64 = 1;
	// stw r29,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r29.u32);
loc_8217D0BC:
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d150
	if (cr6.getEQ()) goto loc_8217D150;
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// addi r11,r11,3
	r11.s64 = r11.s64 + 3;
	// rlwinm r30,r11,2,0,29
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d104
	if (cr6.getEQ()) goto loc_8217D104;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217d0f8
	if (cr6.getEQ()) goto loc_8217D0F8;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// stw r29,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r29.u32);
loc_8217D0F8:
	// lwzx r3,r30,r31
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// stwx r29,r30,r31
	PPC_STORE_U32(r30.u32 + r31.u32, r29.u32);
loc_8217D104:
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_8217D10C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r11,10
	cr6.compare<uint32_t>(r11.u32, 10, xer);
	// stw r11,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r11.u32);
	// blt cr6,0x8217d120
	if (cr6.getLT()) goto loc_8217D120;
	// stw r29,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r29.u32);
loc_8217D120:
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// addi r9,r11,3
	ctx.r9.s64 = r11.s64 + 3;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r9,r31
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8217d140
	if (!cr6.getEQ()) goto loc_8217D140;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x8217d10c
	if (!cr6.getEQ()) goto loc_8217D10C;
loc_8217D140:
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x8217d150
	if (!cr6.getEQ()) goto loc_8217D150;
	// stw r29,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r29.u32);
loc_8217D150:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8217D158"))) PPC_WEAK_FUNC(sub_8217D158);
PPC_FUNC_IMPL(__imp__sub_8217D158) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// addi r11,r31,12
	r11.s64 = r31.s64 + 12;
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// li r10,10
	ctx.r10.s64 = 10;
	// stw r30,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r30.u32);
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// stw r30,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r30.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8217D190:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x8217d190
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8217D190;
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// stw r30,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r30.u32);
	// stw r30,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r30.u32);
	// stb r30,112(r31)
	PPC_STORE_U8(r31.u32 + 112, r30.u8);
	// bl 0x82155fa8
	sub_82155FA8(ctx, base);
	// stw r30,10104(r31)
	PPC_STORE_U32(r31.u32 + 10104, r30.u32);
	// addi r9,r31,60
	ctx.r9.s64 = r31.s64 + 60;
	// stw r30,10108(r31)
	PPC_STORE_U32(r31.u32 + 10108, r30.u32);
	// addi r10,r31,80
	ctx.r10.s64 = r31.s64 + 80;
	// stw r30,10112(r31)
	PPC_STORE_U32(r31.u32 + 10112, r30.u32);
	// li r11,4
	r11.s64 = 4;
	// stw r30,10116(r31)
	PPC_STORE_U32(r31.u32 + 10116, r30.u32);
	// stb r30,10120(r31)
	PPC_STORE_U8(r31.u32 + 10120, r30.u8);
loc_8217D1D0:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// std r30,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, r30.u64);
	// stw r30,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r30.u32);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217d1d0
	if (!cr6.getEQ()) goto loc_8217D1D0;
	// li r9,3
	ctx.r9.s64 = 3;
	// stw r30,76(r31)
	PPC_STORE_U32(r31.u32 + 76, r30.u32);
	// lis r10,-1
	ctx.r10.s64 = -65536;
	// stw r30,3460(r31)
	PPC_STORE_U32(r31.u32 + 3460, r30.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r30,4796(r31)
	PPC_STORE_U32(r31.u32 + 4796, r30.u32);
	// ori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 | 1;
	// stw r30,7444(r31)
	PPC_STORE_U32(r31.u32 + 7444, r30.u32);
	// li r8,61
	ctx.r8.s64 = 61;
	// stw r30,6124(r31)
	PPC_STORE_U32(r31.u32 + 6124, r30.u32);
	// stw r9,2140(r31)
	PPC_STORE_U32(r31.u32 + 2140, ctx.r9.u32);
	// li r9,2
	ctx.r9.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r30,8780(r31)
	PPC_STORE_U32(r31.u32 + 8780, r30.u32);
	// stw r11,2136(r31)
	PPC_STORE_U32(r31.u32 + 2136, r11.u32);
	// stw r10,2144(r31)
	PPC_STORE_U32(r31.u32 + 2144, ctx.r10.u32);
	// stw r8,2148(r31)
	PPC_STORE_U32(r31.u32 + 2148, ctx.r8.u32);
	// stw r11,3464(r31)
	PPC_STORE_U32(r31.u32 + 3464, r11.u32);
	// stw r11,4788(r31)
	PPC_STORE_U32(r31.u32 + 4788, r11.u32);
	// stw r10,3472(r31)
	PPC_STORE_U32(r31.u32 + 3472, ctx.r10.u32);
	// stw r11,3468(r31)
	PPC_STORE_U32(r31.u32 + 3468, r11.u32);
	// stw r8,3476(r31)
	PPC_STORE_U32(r31.u32 + 3476, ctx.r8.u32);
	// stw r11,4792(r31)
	PPC_STORE_U32(r31.u32 + 4792, r11.u32);
	// stw r11,6116(r31)
	PPC_STORE_U32(r31.u32 + 6116, r11.u32);
	// stw r9,4800(r31)
	PPC_STORE_U32(r31.u32 + 4800, ctx.r9.u32);
	// stw r11,6120(r31)
	PPC_STORE_U32(r31.u32 + 6120, r11.u32);
	// stw r9,6128(r31)
	PPC_STORE_U32(r31.u32 + 6128, ctx.r9.u32);
	// stw r11,7448(r31)
	PPC_STORE_U32(r31.u32 + 7448, r11.u32);
	// stw r9,8772(r31)
	PPC_STORE_U32(r31.u32 + 8772, ctx.r9.u32);
	// stw r10,7456(r31)
	PPC_STORE_U32(r31.u32 + 7456, ctx.r10.u32);
	// stw r11,7452(r31)
	PPC_STORE_U32(r31.u32 + 7452, r11.u32);
	// stw r8,7460(r31)
	PPC_STORE_U32(r31.u32 + 7460, ctx.r8.u32);
	// stw r11,8776(r31)
	PPC_STORE_U32(r31.u32 + 8776, r11.u32);
	// stw r9,10100(r31)
	PPC_STORE_U32(r31.u32 + 10100, ctx.r9.u32);
	// stw r9,8784(r31)
	PPC_STORE_U32(r31.u32 + 8784, ctx.r9.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217D290"))) PPC_WEAK_FUNC(sub_8217D290);
PPC_FUNC_IMPL(__imp__sub_8217D290) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r29,4
	r29.s64 = 4;
	// addi r31,r27,60
	r31.s64 = r27.s64 + 60;
	// li r28,0
	r28.s64 = 0;
loc_8217D2AC:
	// lwz r30,0(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8217d2cc
	if (cr6.getEQ()) goto loc_8217D2CC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823ba708
	sub_823BA708(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// stw r28,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r28.u32);
loc_8217D2CC:
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8217d2ac
	if (!cr6.getEQ()) goto loc_8217D2AC;
	// lwz r31,76(r27)
	r31.u64 = PPC_LOAD_U32(r27.u32 + 76);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8217d2fc
	if (cr6.getEQ()) goto loc_8217D2FC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ba708
	sub_823BA708(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// stw r28,76(r27)
	PPC_STORE_U32(r27.u32 + 76, r28.u32);
loc_8217D2FC:
	// addi r3,r27,120
	ctx.r3.s64 = r27.s64 + 120;
	// bl 0x82154758
	sub_82154758(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8217ce10
	sub_8217CE10(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8217D318"))) PPC_WEAK_FUNC(sub_8217D318);
PPC_FUNC_IMPL(__imp__sub_8217D318) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r25,0
	r25.s64 = 0;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// mr r27,r25
	r27.u64 = r25.u64;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// addi r31,r1,128
	r31.s64 = ctx.r1.s64 + 128;
loc_8217D35C:
	// lwz r3,108(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8217d378
	if (cr6.getEQ()) goto loc_8217D378;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// mr r11,r25
	r11.u64 = r25.u64;
	// bne cr6,0x8217d37c
	if (!cr6.getEQ()) goto loc_8217D37C;
loc_8217D378:
	// li r11,1
	r11.s64 = 1;
loc_8217D37C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217d3b0
	if (!cr6.getEQ()) goto loc_8217D3B0;
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// bl 0x82159128
	sub_82159128(ctx, base);
	// bl 0x8213a720
	sub_8213A720(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r31,r31,8
	r31.s64 = r31.s64 + 8;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217d35c
	goto loc_8217D35C;
loc_8217D3B0:
	// addi r6,r27,-1
	ctx.r6.s64 = r27.s64 + -1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8217cbd0
	sub_8217CBD0(ctx, base);
	// cmplwi cr6,r30,5
	cr6.compare<uint32_t>(r30.u32, 5, xer);
	// bge cr6,0x8217d444
	if (!cr6.getLT()) goto loc_8217D444;
	// mr r28,r27
	r28.u64 = r27.u64;
	// mr r29,r25
	r29.u64 = r25.u64;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// ble cr6,0x8217d444
	if (!cr6.getGT()) goto loc_8217D444;
loc_8217D3DC:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x8217d3fc
	if (!cr6.getEQ()) goto loc_8217D3FC;
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// stw r28,852(r11)
	PPC_STORE_U32(r11.u32 + 852, r28.u32);
	// lwz r3,132(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// bl 0x82159128
	sub_82159128(ctx, base);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// b 0x8217d434
	goto loc_8217D434;
loc_8217D3FC:
	// rlwinm r31,r29,3,0,28
	r31.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,-8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bge cr6,0x8217d41c
	if (!cr6.getLT()) goto loc_8217D41C;
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
loc_8217D41C:
	// addi r30,r1,132
	r30.s64 = ctx.r1.s64 + 132;
	// lwzx r11,r31,r30
	r11.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// stw r28,852(r11)
	PPC_STORE_U32(r11.u32 + 852, r28.u32);
	// lwzx r3,r31,r30
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// bl 0x82159128
	sub_82159128(ctx, base);
	// lwzx r11,r31,r30
	r11.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
loc_8217D434:
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// stw r3,856(r11)
	PPC_STORE_U32(r11.u32 + 856, ctx.r3.u32);
	// cmpw cr6,r29,r27
	cr6.compare<int32_t>(r29.s32, r27.s32, xer);
	// blt cr6,0x8217d3dc
	if (cr6.getLT()) goto loc_8217D3DC;
loc_8217D444:
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8217d4c0
	if (cr6.getEQ()) goto loc_8217D4C0;
	// lwz r11,1904(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1904);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8217d4c0
	if (cr6.getEQ()) goto loc_8217D4C0;
	// addi r29,r26,80
	r29.s64 = r26.s64 + 80;
	// std r25,80(r26)
	PPC_STORE_U64(r26.u32 + 80, r25.u64);
	// std r25,88(r26)
	PPC_STORE_U64(r26.u32 + 88, r25.u64);
	// std r25,96(r26)
	PPC_STORE_U64(r26.u32 + 96, r25.u64);
	// std r25,104(r26)
	PPC_STORE_U64(r26.u32 + 104, r25.u64);
	// bl 0x8214cf50
	sub_8214CF50(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r31,r25
	r31.u64 = r25.u64;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x8217d4c0
	if (!cr6.getGT()) goto loc_8217D4C0;
loc_8217D488:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8214cf70
	sub_8214CF70(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d4b4
	if (cr6.getEQ()) goto loc_8217D4B4;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8214cf58
	sub_8214CF58(ctx, base);
	// std r3,0(r29)
	PPC_STORE_U64(r29.u32 + 0, ctx.r3.u64);
	// addi r29,r29,8
	r29.s64 = r29.s64 + 8;
loc_8217D4B4:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r31,r28
	cr6.compare<int32_t>(r31.s32, r28.s32, xer);
	// blt cr6,0x8217d488
	if (cr6.getLT()) goto loc_8217D488;
loc_8217D4C0:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8217D4C8"))) PPC_WEAK_FUNC(sub_8217D4C8);
PPC_FUNC_IMPL(__imp__sub_8217D4C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ea630
	sub_820EA630(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// li r28,0
	r28.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217d534
	if (!cr6.getEQ()) goto loc_8217D534;
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217d534
	if (!cr6.getEQ()) goto loc_8217D534;
	// bl 0x820ae388
	sub_820AE388(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217d534
	if (!cr6.getEQ()) goto loc_8217D534;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8217d534
	if (cr6.getEQ()) goto loc_8217D534;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82183990
	sub_82183990(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217d534
	if (!cr6.getEQ()) goto loc_8217D534;
	// stb r28,2(r29)
	PPC_STORE_U8(r29.u32 + 2, r28.u8);
loc_8217D534:
	// lwz r3,76(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217d544
	if (cr6.getEQ()) goto loc_8217D544;
	// bl 0x823b9930
	sub_823B9930(ctx, base);
loc_8217D544:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8217d560
	if (cr6.getEQ()) goto loc_8217D560;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82183990
	sub_82183990(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217d564
	if (!cr6.getEQ()) goto loc_8217D564;
loc_8217D560:
	// stb r28,10120(r31)
	PPC_STORE_U8(r31.u32 + 10120, r28.u8);
loc_8217D564:
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8217d6ac
	if (cr6.getEQ()) goto loc_8217D6AC;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8217d704
	if (!cr6.getEQ()) goto loc_8217D704;
	// lbz r11,10120(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 10120);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d618
	if (cr6.getEQ()) goto loc_8217D618;
	// lwz r11,324(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 324);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8217d5b8
	if (!cr6.getEQ()) goto loc_8217D5B8;
	// addi r30,r31,120
	r30.s64 = r31.s64 + 120;
	// lwz r4,1368(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 1368);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823bb6d8
	sub_823BB6D8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,1368(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 1368);
	// bl 0x82155198
	sub_82155198(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823bb8f8
	sub_823BB8F8(ctx, base);
loc_8217D5B8:
	// lwz r11,324(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 324);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8217d704
	if (!cr6.getEQ()) goto loc_8217D704;
	// lwz r11,10112(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 10112);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r30,10108(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 10108);
	// lwz r27,10104(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 10104);
	// extsw r26,r11
	r26.s64 = r11.s32;
	// lwz r25,10116(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 10116);
	// bl 0x82183858
	sub_82183858(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// bl 0x8217ccf0
	sub_8217CCF0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d704
	if (cr6.getEQ()) goto loc_8217D704;
	// li r11,1
	r11.s64 = 1;
	// stb r11,0(r29)
	PPC_STORE_U8(r29.u32 + 0, r11.u8);
	// stb r28,10120(r31)
	PPC_STORE_U8(r31.u32 + 10120, r28.u8);
	// b 0x8217d704
	goto loc_8217D704;
loc_8217D618:
	// lwz r30,76(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// mr r29,r28
	r29.u64 = r28.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8217d654
	if (cr6.getEQ()) goto loc_8217D654;
	// lwz r11,36(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 36);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x8217d640
	if (cr6.getLT()) goto loc_8217D640;
	// beq cr6,0x8217d6a4
	if (cr6.getEQ()) goto loc_8217D6A4;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bge cr6,0x8217d654
	if (!cr6.getLT()) goto loc_8217D654;
loc_8217D640:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823ba708
	sub_823BA708(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// stw r28,76(r31)
	PPC_STORE_U32(r31.u32 + 76, r28.u32);
loc_8217D654:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217d704
	if (!cr6.getEQ()) goto loc_8217D704;
	// lwz r11,324(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 324);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8217d680
	if (!cr6.getEQ()) goto loc_8217D680;
	// lwz r11,120(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 120);
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217D680:
	// lwz r11,324(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 324);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8217d704
	if (!cr6.getEQ()) goto loc_8217D704;
	// lwz r11,120(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 120);
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8217d704
	goto loc_8217D704;
loc_8217D6A4:
	// li r29,1
	r29.s64 = 1;
	// b 0x8217d654
	goto loc_8217D654;
loc_8217D6AC:
	// lbz r11,10120(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 10120);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d704
	if (cr6.getEQ()) goto loc_8217D704;
	// addi r30,r31,120
	r30.s64 = r31.s64 + 120;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823ba910
	sub_823BA910(ctx, base);
	// li r7,2
	ctx.r7.s64 = 2;
	// li r11,1
	r11.s64 = 1;
	// lwz r4,1368(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 1368);
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r28,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r28.u8);
	// li r9,0
	ctx.r9.s64 = 0;
	// stb r28,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, r28.u8);
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, r11.u8);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821551e8
	sub_821551E8(ctx, base);
loc_8217D704:
	// lwz r11,120(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 120);
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8217D720"))) PPC_WEAK_FUNC(sub_8217D720);
PPC_FUNC_IMPL(__imp__sub_8217D720) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d8b4
	if (cr6.getEQ()) goto loc_8217D8B4;
	// bl 0x8217f288
	sub_8217F288(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d77c
	if (cr6.getEQ()) goto loc_8217D77C;
	// bl 0x8217fe10
	sub_8217FE10(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d77c
	if (cr6.getEQ()) goto loc_8217D77C;
	// lbz r11,112(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 112);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217d77c
	if (!cr6.getEQ()) goto loc_8217D77C;
	// li r11,1
	r11.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stb r11,112(r29)
	PPC_STORE_U8(r29.u32 + 112, r11.u8);
	// bl 0x8217d318
	sub_8217D318(ctx, base);
loc_8217D77C:
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// addi r3,r11,988
	ctx.r3.s64 = r11.s64 + 988;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// li r28,0
	r28.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217d7b4
	if (!cr6.getEQ()) goto loc_8217D7B4;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217d858
	if (cr6.getEQ()) goto loc_8217D858;
loc_8217D7B4:
	// lbz r11,112(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 112);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d858
	if (cr6.getEQ()) goto loc_8217D858;
	// mr r30,r28
	r30.u64 = r28.u64;
loc_8217D7C4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820ca3e8
	sub_820CA3E8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8217d808
	if (cr6.getEQ()) goto loc_8217D808;
	// lbz r11,849(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 849);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d808
	if (cr6.getEQ()) goto loc_8217D808;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// ld r6,784(r31)
	ctx.r6.u64 = PPC_LOAD_U64(r31.u32 + 784);
	// lwz r5,856(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 856);
	// lwz r4,852(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 852);
	// bl 0x8217bff0
	sub_8217BFF0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d808
	if (cr6.getEQ()) goto loc_8217D808;
	// stb r28,849(r31)
	PPC_STORE_U8(r31.u32 + 849, r28.u8);
loc_8217D808:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,4
	cr6.compare<int32_t>(r30.s32, 4, xer);
	// blt cr6,0x8217d7c4
	if (cr6.getLT()) goto loc_8217D7C4;
	// addi r31,r29,80
	r31.s64 = r29.s64 + 80;
	// li r30,4
	r30.s64 = 4;
loc_8217D81C:
	// ld r6,0(r31)
	ctx.r6.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// cmpldi cr6,r6,0
	cr6.compare<uint64_t>(ctx.r6.u64, 0, xer);
	// beq cr6,0x8217d848
	if (cr6.getEQ()) goto loc_8217D848;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8217bff0
	sub_8217BFF0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d848
	if (cr6.getEQ()) goto loc_8217D848;
	// std r28,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r28.u64);
loc_8217D848:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r31,r31,8
	r31.s64 = r31.s64 + 8;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x8217d81c
	if (!cr6.getEQ()) goto loc_8217D81C;
loc_8217D858:
	// addi r31,r29,60
	r31.s64 = r29.s64 + 60;
	// li r29,4
	r29.s64 = 4;
loc_8217D860:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217d8a4
	if (cr6.getEQ()) goto loc_8217D8A4;
	// bl 0x823b9930
	sub_823B9930(ctx, base);
	// lwz r30,0(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,36(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 36);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8217d888
	if (cr6.getEQ()) goto loc_8217D888;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8217d8a4
	if (!cr6.getEQ()) goto loc_8217D8A4;
loc_8217D888:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8217d8a0
	if (cr6.getEQ()) goto loc_8217D8A0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823ba708
	sub_823BA708(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
loc_8217D8A0:
	// stw r28,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r28.u32);
loc_8217D8A4:
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8217d860
	if (!cr6.getEQ()) goto loc_8217D860;
loc_8217D8B4:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8217D8C0"))) PPC_WEAK_FUNC(sub_8217D8C0);
PPC_FUNC_IMPL(__imp__sub_8217D8C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8217d4c8
	sub_8217D4C8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8217d720
	sub_8217D720(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8217cee0
	sub_8217CEE0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217D900"))) PPC_WEAK_FUNC(sub_8217D900);
PPC_FUNC_IMPL(__imp__sub_8217D900) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8217D934:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8217d950
	if (cr6.getEQ()) goto loc_8217D950;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217d954
	if (!cr6.getEQ()) goto loc_8217D954;
loc_8217D950:
	// li r11,1
	r11.s64 = 1;
loc_8217D954:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217d978
	if (!cr6.getEQ()) goto loc_8217D978;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r10,1232
	ctx.r3.s64 = ctx.r10.s64 + 1232;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217d934
	goto loc_8217D934;
loc_8217D978:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217D990"))) PPC_WEAK_FUNC(sub_8217D990);
PPC_FUNC_IMPL(__imp__sub_8217D990) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r31,0
	r31.s64 = 0;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217d9f8
	if (cr6.getEQ()) goto loc_8217D9F8;
	// addi r3,r11,1232
	ctx.r3.s64 = r11.s64 + 1232;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8217D9F8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217DA10"))) PPC_WEAK_FUNC(sub_8217DA10);
PPC_FUNC_IMPL(__imp__sub_8217DA10) {
	PPC_FUNC_PROLOGUE();
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x8217d900
	sub_8217D900(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8217DA18"))) PPC_WEAK_FUNC(sub_8217DA18);
PPC_FUNC_IMPL(__imp__sub_8217DA18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217dad0
	if (cr6.getEQ()) goto loc_8217DAD0;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x8217dad0
	if (!cr6.getEQ()) goto loc_8217DAD0;
	// li r27,0
	r27.s64 = 0;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r31,r27
	r31.u64 = r27.u64;
	// addi r28,r11,30888
	r28.s64 = r11.s64 + 30888;
loc_8217DA4C:
	// addi r29,r28,-4
	r29.s64 = r28.s64 + -4;
	// ori r30,r31,4
	r30.u64 = r31.u64 | 4;
	// lbzx r11,r31,r29
	r11.u64 = PPC_LOAD_U8(r31.u32 + r29.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217da8c
	if (cr6.getEQ()) goto loc_8217DA8C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82159590
	sub_82159590(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8217da8c
	if (!cr6.getEQ()) goto loc_8217DA8C;
	// li r4,88
	ctx.r4.s64 = 88;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820e34e0
	sub_820E34E0(ctx, base);
	// li r4,88
	ctx.r4.s64 = 88;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8215dab8
	sub_8215DAB8(ctx, base);
	// stbx r27,r31,r29
	PPC_STORE_U8(r31.u32 + r29.u32, r27.u8);
loc_8217DA8C:
	// lbzx r11,r28,r31
	r11.u64 = PPC_LOAD_U8(r28.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217dac4
	if (cr6.getEQ()) goto loc_8217DAC4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82159590
	sub_82159590(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8217dac4
	if (!cr6.getEQ()) goto loc_8217DAC4;
	// li r4,19
	ctx.r4.s64 = 19;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820e34e0
	sub_820E34E0(ctx, base);
	// li r4,19
	ctx.r4.s64 = 19;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8215dab8
	sub_8215DAB8(ctx, base);
	// stbx r27,r28,r31
	PPC_STORE_U8(r28.u32 + r31.u32, r27.u8);
loc_8217DAC4:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,4
	cr6.compare<int32_t>(r31.s32, 4, xer);
	// blt cr6,0x8217da4c
	if (cr6.getLT()) goto loc_8217DA4C;
loc_8217DAD0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8217DAD8"))) PPC_WEAK_FUNC(sub_8217DAD8);
PPC_FUNC_IMPL(__imp__sub_8217DAD8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217dec8
	if (cr6.getEQ()) goto loc_8217DEC8;
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,90
	cr6.compare<int32_t>(ctx.r3.s32, 90, xer);
	// beq cr6,0x8217dec8
	if (cr6.getEQ()) goto loc_8217DEC8;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x8217dec8
	if (!cr6.getEQ()) goto loc_8217DEC8;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x8217dec8
	if (!cr6.getEQ()) goto loc_8217DEC8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r26,0
	r26.s64 = 0;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r25,1
	r25.s64 = 1;
	// addi r27,r11,-1360
	r27.s64 = r11.s64 + -1360;
loc_8217DB48:
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217db64
	if (cr6.getEQ()) goto loc_8217DB64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217db68
	if (!cr6.getEQ()) goto loc_8217DB68;
loc_8217DB64:
	// mr r11,r25
	r11.u64 = r25.u64;
loc_8217DB68:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217dbe8
	if (!cr6.getEQ()) goto loc_8217DBE8;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8217dbb4
	if (!cr6.getEQ()) goto loc_8217DBB4;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,76(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 76);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mulli r11,r3,112
	r11.s64 = ctx.r3.s64 * 112;
	// addi r10,r27,105
	ctx.r10.s64 = r27.s64 + 105;
	// stbx r31,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, r31.u8);
loc_8217DBB4:
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r11,1004
	ctx.r3.s64 = r11.s64 + 1004;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8217dbdc
	if (!cr6.getEQ()) goto loc_8217DBDC;
	// mr r26,r25
	r26.u64 = r25.u64;
loc_8217DBDC:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217db48
	goto loc_8217DB48;
loc_8217DBE8:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217dcf8
	if (cr6.getEQ()) goto loc_8217DCF8;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8217DC08:
	// lwz r31,92(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x8217dc24
	if (cr6.getEQ()) goto loc_8217DC24;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217dc28
	if (!cr6.getEQ()) goto loc_8217DC28;
loc_8217DC24:
	// mr r11,r25
	r11.u64 = r25.u64;
loc_8217DC28:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217dcf8
	if (!cr6.getEQ()) goto loc_8217DCF8;
	// addi r30,r31,2116
	r30.s64 = r31.s64 + 2116;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r28,r31,2168
	r28.s64 = r31.s64 + 2168;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217dcec
	if (cr6.getEQ()) goto loc_8217DCEC;
	// addi r3,r31,1004
	ctx.r3.s64 = r31.s64 + 1004;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x8217dccc
	if (cr6.getEQ()) goto loc_8217DCCC;
	// clrlwi r11,r26,24
	r11.u64 = r26.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217dccc
	if (!cr6.getEQ()) goto loc_8217DCCC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mulli r11,r3,112
	r11.s64 = ctx.r3.s64 * 112;
	// addi r10,r27,105
	ctx.r10.s64 = r27.s64 + 105;
	// li r4,1
	ctx.r4.s64 = 1;
	// stbx r25,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, r25.u8);
	// lwz r11,76(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// bl 0x82176e40
	sub_82176E40(ctx, base);
	// mr r26,r25
	r26.u64 = r25.u64;
loc_8217DCCC:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_8217DCEC:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217dc08
	goto loc_8217DC08;
loc_8217DCF8:
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8217DD0C:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8217dd28
	if (cr6.getEQ()) goto loc_8217DD28;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217dd2c
	if (!cr6.getEQ()) goto loc_8217DD2C;
loc_8217DD28:
	// mr r11,r25
	r11.u64 = r25.u64;
loc_8217DD2C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217dec8
	if (!cr6.getEQ()) goto loc_8217DEC8;
	// addi r3,r10,1004
	ctx.r3.s64 = ctx.r10.s64 + 1004;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8217debc
	if (!cr6.getEQ()) goto loc_8217DEBC;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r11,r11,1336
	r11.s64 = r11.s64 + 1336;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r11,1336
	ctx.r3.s64 = r11.s64 + 1336;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r3,r3,24
	ctx.r3.u64 = ctx.r3.u32 & 0xFF;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// bl 0x820c1600
	sub_820C1600(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8217deb4
	if (!cr6.getEQ()) goto loc_8217DEB4;
	// li r3,19
	ctx.r3.s64 = 19;
	// bl 0x820dbae8
	sub_820DBAE8(ctx, base);
	// li r3,19
	ctx.r3.s64 = 19;
	// li r31,0
	r31.s64 = 0;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217ddc8
	if (cr6.getEQ()) goto loc_8217DDC8;
	// mr r31,r25
	r31.u64 = r25.u64;
loc_8217DDC8:
	// li r3,19
	ctx.r3.s64 = 19;
	// bl 0x820c1e70
	sub_820C1E70(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217dde0
	if (cr6.getEQ()) goto loc_8217DDE0;
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// b 0x8217ddf4
	goto loc_8217DDF4;
loc_8217DDE0:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ddf4
	if (cr6.getEQ()) goto loc_8217DDF4;
	// li r3,19
	ctx.r3.s64 = 19;
	// bl 0x820dc500
	sub_820DC500(ctx, base);
loc_8217DDF4:
	// bl 0x820cca38
	sub_820CCA38(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8217deb4
	if (cr6.getEQ()) goto loc_8217DEB4;
loc_8217DE04:
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217dea8
	if (cr6.getEQ()) goto loc_8217DEA8;
	// lbz r11,3(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 3);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x8217dea8
	if (!cr6.getEQ()) goto loc_8217DEA8;
	// lbz r11,128(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 128);
	// cmplwi cr6,r11,19
	cr6.compare<uint32_t>(r11.u32, 19, xer);
	// bne cr6,0x8217dea8
	if (!cr6.getEQ()) goto loc_8217DEA8;
	// lwz r11,60(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x8217de40
	if (!cr6.getLT()) goto loc_8217DE40;
	// lwz r11,56(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8217dea8
	if (cr6.getLT()) goto loc_8217DEA8;
loc_8217DE40:
	// lbz r11,2(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 2);
	// li r4,0
	ctx.r4.s64 = 0;
	// rlwinm r5,r11,0,29,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
	// lwz r11,60(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// cntlzw r10,r11
	ctx.r10.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r4,r10,1
	ctx.r4.u64 = ctx.r10.u64 ^ 1;
	// clrlwi r10,r4,24
	ctx.r10.u64 = ctx.r4.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8217de74
	if (!cr6.getEQ()) goto loc_8217DE74;
	// lwz r11,56(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 56);
loc_8217DE74:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x8216bce8
	sub_8216BCE8(ctx, base);
	// mr r30,r31
	r30.u64 = r31.u64;
	// lwz r31,40(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820ced38
	sub_820CED38(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820ccbb0
	sub_820CCBB0(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820cca28
	sub_820CCA28(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820ccb00
	sub_820CCB00(ctx, base);
	// b 0x8217deac
	goto loc_8217DEAC;
loc_8217DEA8:
	// lwz r31,40(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 40);
loc_8217DEAC:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8217de04
	if (!cr6.getEQ()) goto loc_8217DE04;
loc_8217DEB4:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
loc_8217DEBC:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217dd0c
	goto loc_8217DD0C;
loc_8217DEC8:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8217DED0"))) PPC_WEAK_FUNC(sub_8217DED0);
PPC_FUNC_IMPL(__imp__sub_8217DED0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217e02c
	if (cr6.getEQ()) goto loc_8217E02C;
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,90
	cr6.compare<int32_t>(ctx.r3.s32, 90, xer);
	// beq cr6,0x8217e02c
	if (cr6.getEQ()) goto loc_8217E02C;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x8217e02c
	if (!cr6.getEQ()) goto loc_8217E02C;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x8217e02c
	if (!cr6.getEQ()) goto loc_8217E02C;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217e02c
	if (cr6.getEQ()) goto loc_8217E02C;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// addi r29,r11,-1360
	r29.s64 = r11.s64 + -1360;
	// ble cr6,0x8217dfb8
	if (!cr6.getGT()) goto loc_8217DFB8;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r31,r29,104
	r31.s64 = r29.s64 + 104;
	// addi r5,r29,36
	ctx.r5.s64 = r29.s64 + 36;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r4,r11,-1384
	ctx.r4.s64 = r11.s64 + -1384;
loc_8217DF44:
	// li r8,0
	ctx.r8.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r9,r4
	ctx.r9.u64 = ctx.r4.u64;
	// mr r10,r5
	ctx.r10.u64 = ctx.r5.u64;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
loc_8217DF58:
	// lwz r7,0(r9)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// lwz r7,480(r7)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + 480);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// bne cr6,0x8217df6c
	if (!cr6.getEQ()) goto loc_8217DF6C;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
loc_8217DF6C:
	// lwz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// add r8,r7,r8
	ctx.r8.u64 = ctx.r7.u64 + ctx.r8.u64;
	// addi r10,r10,112
	ctx.r10.s64 = ctx.r10.s64 + 112;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217df58
	if (!cr6.getEQ()) goto loc_8217DF58;
	// cmpwi cr6,r8,2
	cr6.compare<int32_t>(ctx.r8.s32, 2, xer);
	// blt cr6,0x8217dfa4
	if (cr6.getLT()) goto loc_8217DFA4;
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217dfa4
	if (!cr6.getEQ()) goto loc_8217DFA4;
	// addi r11,r6,1
	r11.s64 = ctx.r6.s64 + 1;
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
loc_8217DFA4:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r5,r5,4
	ctx.r5.s64 = ctx.r5.s64 + 4;
	// addi r31,r31,112
	r31.s64 = r31.s64 + 112;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x8217df44
	if (!cr6.getEQ()) goto loc_8217DF44;
loc_8217DFB8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8217DFD8:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8217dff4
	if (cr6.getEQ()) goto loc_8217DFF4;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217dff8
	if (!cr6.getEQ()) goto loc_8217DFF8;
loc_8217DFF4:
	// li r11,1
	r11.s64 = 1;
loc_8217DFF8:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217e02c
	if (!cr6.getEQ()) goto loc_8217E02C;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mulli r11,r3,112
	r11.s64 = ctx.r3.s64 * 112;
	// addi r10,r29,104
	ctx.r10.s64 = r29.s64 + 104;
	// addi r3,r31,1856
	ctx.r3.s64 = r31.s64 + 1856;
	// lbzx r4,r11,r10
	ctx.r4.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// bl 0x82177218
	sub_82177218(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217dfd8
	goto loc_8217DFD8;
loc_8217E02C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8217E038"))) PPC_WEAK_FUNC(sub_8217E038);
PPC_FUNC_IMPL(__imp__sub_8217E038) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r10,r11,30924
	ctx.r10.s64 = r11.s64 + 30924;
	// li r11,0
	r11.s64 = 0;
	// addi r9,r10,-16
	ctx.r9.s64 = ctx.r10.s64 + -16;
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// stw r11,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r11.u32);
	// stw r11,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r11.u32);
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// stw r11,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r11.u32);
	// stw r11,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, r11.u32);
	// stw r11,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r11.u32);
	// stw r11,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, r11.u32);
	// stw r11,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, r11.u32);
	// stw r11,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, r11.u32);
	// stw r11,12(r8)
	PPC_STORE_U32(ctx.r8.u32 + 12, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217E080"))) PPC_WEAK_FUNC(sub_8217E080);
PPC_FUNC_IMPL(__imp__sub_8217E080) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// addi r12,r1,-88
	r12.s64 = ctx.r1.s64 + -88;
	// bl 0x823ed548
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217e648
	if (cr6.getEQ()) goto loc_8217E648;
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,90
	cr6.compare<int32_t>(ctx.r3.s32, 90, xer);
	// beq cr6,0x8217e648
	if (cr6.getEQ()) goto loc_8217E648;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x8217e648
	if (!cr6.getEQ()) goto loc_8217E648;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8217e648
	if (!cr6.getEQ()) goto loc_8217E648;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// li r23,0
	r23.s64 = 0;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r22,1
	r22.s64 = 1;
	// addi r25,r11,-1360
	r25.s64 = r11.s64 + -1360;
loc_8217E0FC:
	// lwz r31,108(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x8217e118
	if (cr6.getEQ()) goto loc_8217E118;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217e11c
	if (!cr6.getEQ()) goto loc_8217E11C;
loc_8217E118:
	// mr r11,r22
	r11.u64 = r22.u64;
loc_8217E11C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217e190
	if (!cr6.getEQ()) goto loc_8217E190;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8217e164
	if (!cr6.getEQ()) goto loc_8217E164;
	// lwz r11,76(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mulli r11,r3,112
	r11.s64 = ctx.r3.s64 * 112;
	// addi r10,r25,105
	ctx.r10.s64 = r25.s64 + 105;
	// stbx r30,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, r30.u8);
loc_8217E164:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mulli r11,r3,112
	r11.s64 = ctx.r3.s64 * 112;
	// addi r10,r25,105
	ctx.r10.s64 = r25.s64 + 105;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x8217e184
	if (!cr6.getEQ()) goto loc_8217E184;
	// mr r23,r22
	r23.u64 = r22.u64;
loc_8217E184:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217e0fc
	goto loc_8217E0FC;
loc_8217E190:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217e39c
	if (cr6.getEQ()) goto loc_8217E39C;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r27,r11,30924
	r27.s64 = r11.s64 + 30924;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r24,-31993
	r24.s64 = -2096693248;
	// lfs f29,13960(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 13960);
	f29.f64 = double(temp.f32);
	// lfs f30,14440(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14440);
	f30.f64 = double(temp.f32);
	// lfs f31,14108(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14108);
	f31.f64 = double(temp.f32);
loc_8217E1D4:
	// lwz r3,108(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8217e1f0
	if (cr6.getEQ()) goto loc_8217E1F0;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217e1f4
	if (!cr6.getEQ()) goto loc_8217E1F4;
loc_8217E1F0:
	// mr r11,r22
	r11.u64 = r22.u64;
loc_8217E1F4:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217e42c
	if (!cr6.getEQ()) goto loc_8217E42C;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// addi r30,r31,2116
	r30.s64 = r31.s64 + 2116;
	// clrlwi r26,r3,24
	r26.u64 = ctx.r3.u32 & 0xFF;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r28,r31,2168
	r28.s64 = r31.s64 + 2168;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217e2c8
	if (cr6.getEQ()) goto loc_8217E2C8;
	// lwz r11,76(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x8217e2a8
	if (cr6.getEQ()) goto loc_8217E2A8;
	// clrlwi r11,r23,24
	r11.u64 = r23.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217e2a8
	if (!cr6.getEQ()) goto loc_8217E2A8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mulli r11,r3,112
	r11.s64 = ctx.r3.s64 * 112;
	// addi r10,r25,105
	ctx.r10.s64 = r25.s64 + 105;
	// li r4,1
	ctx.r4.s64 = 1;
	// stbx r22,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, r22.u8);
	// lwz r11,76(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// bl 0x82176e40
	sub_82176E40(ctx, base);
	// mr r23,r22
	r23.u64 = r22.u64;
loc_8217E2A8:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_8217E2C8:
	// clrlwi r30,r26,24
	r30.u64 = r26.u32 & 0xFF;
	// addi r11,r25,105
	r11.s64 = r25.s64 + 105;
	// mulli r28,r30,112
	r28.s64 = r30.s64 * 112;
	// lbzx r11,r28,r11
	r11.u64 = PPC_LOAD_U8(r28.u32 + r11.u32);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x8217e304
	if (!cr6.getEQ()) goto loc_8217E304;
	// bl 0x8217f288
	sub_8217F288(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217e304
	if (!cr6.getEQ()) goto loc_8217E304;
	// addi r10,r27,-16
	ctx.r10.s64 = r27.s64 + -16;
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f0,r11,r10
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f28
	f0.f64 = double(float(f0.f64 + f28.f64));
	// stfsx f0,r11,r10
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, temp.u32);
loc_8217E304:
	// rlwinm r31,r30,2,0,29
	r31.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r27,-16
	ctx.r10.s64 = r27.s64 + -16;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// addi r11,r25,96
	r11.s64 = r25.s64 + 96;
	// addi r29,r27,-32
	r29.s64 = r27.s64 + -32;
	// add r8,r28,r11
	ctx.r8.u64 = r28.u64 + r11.u64;
	// lfsx f0,r31,r10
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + ctx.r10.u32);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r9
	PPC_STORE_U32(ctx.r9.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// stwx r11,r31,r29
	PPC_STORE_U32(r31.u32 + r29.u32, r11.u32);
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// lfd f0,88(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r8
	PPC_STORE_U32(ctx.r8.u32, f0.u32);
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwzx r11,r31,r27
	r11.u64 = PPC_LOAD_U32(r31.u32 + r27.u32);
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// cmplwi cr6,r11,1000
	cr6.compare<uint32_t>(r11.u32, 1000, xer);
	// ble cr6,0x8217e390
	if (!cr6.getGT()) goto loc_8217E390;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// mulli r10,r30,52
	ctx.r10.s64 = r30.s64 * 52;
	// lwzx r4,r31,r29
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + r29.u32);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r3,r11,4812
	ctx.r3.s64 = r11.s64 + 4812;
	// stwx r9,r31,r27
	PPC_STORE_U32(r31.u32 + r27.u32, ctx.r9.u32);
	// bl 0x821776c0
	sub_821776C0(ctx, base);
loc_8217E390:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217e1d4
	goto loc_8217E1D4;
loc_8217E39C:
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r28,r11,30924
	r28.s64 = r11.s64 + 30924;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r29,0
	r29.s64 = 0;
	// li r31,0
	r31.s64 = 0;
	// lfs f30,13960(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13960);
	f30.f64 = double(temp.f32);
	// addi r30,r25,96
	r30.s64 = r25.s64 + 96;
	// lis r27,-31993
	r27.s64 = -2096693248;
	// lfs f31,14440(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14440);
	f31.f64 = double(temp.f32);
loc_8217E3C4:
	// lwz r11,29100(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 29100);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r3,r11,4812
	ctx.r3.s64 = r11.s64 + 4812;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrldi r8,r3,32
	ctx.r8.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// addi r10,r28,-16
	ctx.r10.s64 = r28.s64 + -16;
	// addi r11,r28,-32
	r11.s64 = r28.s64 + -32;
	// addi r9,r25,544
	ctx.r9.s64 = r25.s64 + 544;
	// addi r29,r29,52
	r29.s64 = r29.s64 + 52;
	// std r8,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r8.u64);
	// stwx r3,r31,r11
	PPC_STORE_U32(r31.u32 + r11.u32, ctx.r3.u32);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// stfsx f0,r31,r10
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + ctx.r10.u32, temp.u32);
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// fmuls f13,f0,f30
	ctx.f13.f64 = double(float(f0.f64 * f30.f64));
	// fctiwz f0,f13
	f0.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfiwx f0,0,r30
	PPC_STORE_U32(r30.u32, f0.u32);
	// addi r30,r30,112
	r30.s64 = r30.s64 + 112;
	// cmpw cr6,r30,r9
	cr6.compare<int32_t>(r30.s32, ctx.r9.s32, xer);
	// blt cr6,0x8217e3c4
	if (cr6.getLT()) goto loc_8217E3C4;
loc_8217E42C:
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r28,-32014
	r28.s64 = -2098069504;
	// li r27,5
	r27.s64 = 5;
loc_8217E448:
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8217e464
	if (cr6.getEQ()) goto loc_8217E464;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217e468
	if (!cr6.getEQ()) goto loc_8217E468;
loc_8217E464:
	// mr r11,r22
	r11.u64 = r22.u64;
loc_8217E468:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217e648
	if (!cr6.getEQ()) goto loc_8217E648;
	// lwz r11,76(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 76);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8217e63c
	if (!cr6.getEQ()) goto loc_8217E63C;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r11,r11,1336
	r11.s64 = r11.s64 + 1336;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// addi r3,r11,1336
	ctx.r3.s64 = r11.s64 + 1336;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r3,r3,24
	ctx.r3.u64 = ctx.r3.u32 & 0xFF;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// bl 0x820c15a8
	sub_820C15A8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8217e604
	if (!cr6.getEQ()) goto loc_8217E604;
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lwz r11,480(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8217e604
	if (!cr6.getEQ()) goto loc_8217E604;
	// li r3,88
	ctx.r3.s64 = 88;
	// bl 0x820dbae8
	sub_820DBAE8(ctx, base);
	// li r3,88
	ctx.r3.s64 = 88;
	// li r31,0
	r31.s64 = 0;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217e518
	if (cr6.getEQ()) goto loc_8217E518;
	// mr r31,r22
	r31.u64 = r22.u64;
loc_8217E518:
	// li r3,88
	ctx.r3.s64 = 88;
	// bl 0x820c1e70
	sub_820C1E70(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217e530
	if (cr6.getEQ()) goto loc_8217E530;
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// b 0x8217e544
	goto loc_8217E544;
loc_8217E530:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217e544
	if (cr6.getEQ()) goto loc_8217E544;
	// li r3,88
	ctx.r3.s64 = 88;
	// bl 0x820dc500
	sub_820DC500(ctx, base);
loc_8217E544:
	// bl 0x820cca38
	sub_820CCA38(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8217e604
	if (cr6.getEQ()) goto loc_8217E604;
loc_8217E554:
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217e5f8
	if (cr6.getEQ()) goto loc_8217E5F8;
	// lbz r11,3(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 3);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x8217e5f8
	if (!cr6.getEQ()) goto loc_8217E5F8;
	// lbz r11,128(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 128);
	// cmplwi cr6,r11,88
	cr6.compare<uint32_t>(r11.u32, 88, xer);
	// bne cr6,0x8217e5f8
	if (!cr6.getEQ()) goto loc_8217E5F8;
	// lwz r11,60(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x8217e590
	if (!cr6.getLT()) goto loc_8217E590;
	// lwz r11,56(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8217e5f8
	if (cr6.getLT()) goto loc_8217E5F8;
loc_8217E590:
	// lbz r11,2(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 2);
	// li r4,0
	ctx.r4.s64 = 0;
	// rlwinm r5,r11,0,29,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// bl 0x820e0138
	sub_820E0138(ctx, base);
	// lwz r11,60(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// cntlzw r10,r11
	ctx.r10.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r4,r10,1
	ctx.r4.u64 = ctx.r10.u64 ^ 1;
	// clrlwi r10,r4,24
	ctx.r10.u64 = ctx.r4.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8217e5c4
	if (!cr6.getEQ()) goto loc_8217E5C4;
	// lwz r11,56(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 56);
loc_8217E5C4:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x8216bce8
	sub_8216BCE8(ctx, base);
	// mr r30,r31
	r30.u64 = r31.u64;
	// lwz r31,40(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820ced38
	sub_820CED38(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820ccbb0
	sub_820CCBB0(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820cca28
	sub_820CCA28(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820ccb00
	sub_820CCB00(ctx, base);
	// b 0x8217e5fc
	goto loc_8217E5FC;
loc_8217E5F8:
	// lwz r31,40(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 40);
loc_8217E5FC:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8217e554
	if (!cr6.getEQ()) goto loc_8217E554;
loc_8217E604:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpwi cr6,r3,88
	cr6.compare<int32_t>(ctx.r3.s32, 88, xer);
	// beq cr6,0x8217e634
	if (cr6.getEQ()) goto loc_8217E634;
	// li r4,88
	ctx.r4.s64 = 88;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lwz r10,2380(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 2380);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x8217e634
	if (!cr6.getEQ()) goto loc_8217E634;
	// stw r27,2380(r11)
	PPC_STORE_U32(r11.u32 + 2380, r27.u32);
loc_8217E634:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
loc_8217E63C:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217e448
	goto loc_8217E448;
loc_8217E648:
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// addi r12,r1,-88
	r12.s64 = ctx.r1.s64 + -88;
	// bl 0x823ed594
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_8217E658"))) PPC_WEAK_FUNC(sub_8217E658);
PPC_FUNC_IMPL(__imp__sub_8217E658) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stfd f30,-80(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -80, f30.u64);
	// stfd f31,-72(r1)
	PPC_STORE_U64(ctx.r1.u32 + -72, f31.u64);
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// fmr f30,f1
	f30.f64 = ctx.f1.f64;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// lis r29,-31993
	r29.s64 = -2096693248;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217e6e8
	if (cr6.getEQ()) goto loc_8217E6E8;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x8217e6e8
	if (!cr6.getEQ()) goto loc_8217E6E8;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8217e6e8
	if (!cr6.getEQ()) goto loc_8217E6E8;
	// lwz r11,29100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 29100);
	// addi r3,r11,652
	ctx.r3.s64 = r11.s64 + 652;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// beq cr6,0x8217e6e8
	if (cr6.getEQ()) goto loc_8217E6E8;
	// lwz r11,29100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 29100);
	// addi r3,r11,652
	ctx.r3.s64 = r11.s64 + 652;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r3,r3,24
	ctx.r3.u64 = ctx.r3.u32 & 0xFF;
	// bl 0x820ec278
	sub_820EC278(ctx, base);
loc_8217E6E8:
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r3,90
	cr6.compare<int32_t>(ctx.r3.s32, 90, xer);
	// addi r25,r11,14748
	r25.s64 = r11.s64 + 14748;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r28,r11,14756
	r28.s64 = r11.s64 + 14756;
	// bne cr6,0x8217eb14
	if (!cr6.getEQ()) goto loc_8217EB14;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x8217eb14
	if (!cr6.getEQ()) goto loc_8217EB14;
	// li r6,2
	ctx.r6.s64 = 2;
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r28.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r30,r11,-1360
	r30.s64 = r11.s64 + -1360;
loc_8217E730:
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217e74c
	if (cr6.getEQ()) goto loc_8217E74C;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217e750
	if (!cr6.getEQ()) goto loc_8217E750;
loc_8217E74C:
	// li r11,1
	r11.s64 = 1;
loc_8217E750:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217e7dc
	if (!cr6.getEQ()) goto loc_8217E7DC;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217e79c
	if (cr6.getEQ()) goto loc_8217E79C;
	// lwz r3,124(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mulli r10,r3,112
	ctx.r10.s64 = ctx.r3.s64 * 112;
	// lwz r11,76(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// addi r9,r30,105
	ctx.r9.s64 = r30.s64 + 105;
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// lbzx r11,r10,r9
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// bl 0x82176e40
	sub_82176E40(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217e730
	goto loc_8217E730;
loc_8217E79C:
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r11,76(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 76);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r3,124(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mulli r11,r3,112
	r11.s64 = ctx.r3.s64 * 112;
	// addi r10,r30,105
	ctx.r10.s64 = r30.s64 + 105;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stbx r31,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, r31.u8);
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217e730
	goto loc_8217E730;
loc_8217E7DC:
	// bl 0x8217c108
	sub_8217C108(ctx, base);
	// bl 0x8217bd80
	sub_8217BD80(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217eb10
	if (!cr6.getEQ()) goto loc_8217EB10;
	// bl 0x8217f7f0
	sub_8217F7F0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217eb10
	if (!cr6.getEQ()) goto loc_8217EB10;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// li r30,1
	r30.s64 = 1;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8217E818:
	// lwz r31,124(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x8217e834
	if (cr6.getEQ()) goto loc_8217E834;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217e838
	if (!cr6.getEQ()) goto loc_8217E838;
loc_8217E834:
	// li r11,1
	r11.s64 = 1;
loc_8217E838:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217e8cc
	if (!cr6.getEQ()) goto loc_8217E8CC;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8217e874
	if (!cr6.getEQ()) goto loc_8217E874;
	// lwz r11,29100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 29100);
	// addi r3,r11,1044
	ctx.r3.s64 = r11.s64 + 1044;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217e8c0
	if (cr6.getEQ()) goto loc_8217E8C0;
loc_8217E874:
	// addi r31,r31,1232
	r31.s64 = r31.s64 + 1232;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217e8bc
	if (cr6.getEQ()) goto loc_8217E8BC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217e8bc
	if (cr6.getEQ()) goto loc_8217E8BC;
	// bl 0x82159030
	sub_82159030(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217e8c0
	if (!cr6.getEQ()) goto loc_8217E8C0;
loc_8217E8BC:
	// li r30,0
	r30.s64 = 0;
loc_8217E8C0:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217e818
	goto loc_8217E818;
loc_8217E8CC:
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217eb10
	if (cr6.getEQ()) goto loc_8217EB10;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217ea3c
	if (cr6.getEQ()) goto loc_8217EA3C;
	// bl 0x8217f168
	sub_8217F168(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217e8fc
	if (cr6.getEQ()) goto loc_8217E8FC;
	// bl 0x8217f168
	sub_8217F168(ctx, base);
	// cmpwi cr6,r3,11
	cr6.compare<int32_t>(ctx.r3.s32, 11, xer);
	// bne cr6,0x8217eb10
	if (!cr6.getEQ()) goto loc_8217EB10;
loc_8217E8FC:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// li r30,1
	r30.s64 = 1;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217e9c8
	if (cr6.getEQ()) goto loc_8217E9C8;
loc_8217E92C:
	// lbz r10,134(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 134);
	// mr r31,r11
	r31.u64 = r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8217e9ac
	if (cr6.getEQ()) goto loc_8217E9AC;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217e9ac
	if (!cr6.getEQ()) goto loc_8217E9AC;
	// addi r3,r31,728
	ctx.r3.s64 = r31.s64 + 728;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217e9c4
	if (cr6.getEQ()) goto loc_8217E9C4;
	// lwz r11,29100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 29100);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,28
	r11.u64 = ctx.r3.u32 & 0xF;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8217e9ac
	if (cr6.getEQ()) goto loc_8217E9AC;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// bne cr6,0x8217e9c4
	if (!cr6.getEQ()) goto loc_8217E9C4;
loc_8217E9AC:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217e92c
	if (!cr6.getEQ()) goto loc_8217E92C;
	// b 0x8217e9c8
	goto loc_8217E9C8;
loc_8217E9C4:
	// li r30,0
	r30.s64 = 0;
loc_8217E9C8:
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ea2c
	if (cr6.getEQ()) goto loc_8217EA2C;
	// lwz r11,29100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 29100);
	// addi r3,r11,228
	ctx.r3.s64 = r11.s64 + 228;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217ea2c
	if (!cr6.getEQ()) goto loc_8217EA2C;
	// lwz r11,29100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 29100);
	// addi r3,r11,228
	ctx.r3.s64 = r11.s64 + 228;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ea2c
	if (cr6.getEQ()) goto loc_8217EA2C;
	// lwz r11,29100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 29100);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ea2c
	if (cr6.getEQ()) goto loc_8217EA2C;
	// bl 0x8217faf0
	sub_8217FAF0(ctx, base);
loc_8217EA2C:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-30572
	r11.s64 = r11.s64 + -30572;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// b 0x8217eb10
	goto loc_8217EB10;
loc_8217EA3C:
	// lwz r11,29100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 29100);
	// addi r3,r11,228
	ctx.r3.s64 = r11.s64 + 228;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217eb10
	if (cr6.getEQ()) goto loc_8217EB10;
	// bl 0x8217f240
	sub_8217F240(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217eb10
	if (!cr6.getEQ()) goto loc_8217EB10;
	// lwz r11,29100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 29100);
	// li r31,1
	r31.s64 = 1;
	// addi r3,r11,1044
	ctx.r3.s64 = r11.s64 + 1044;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217eb00
	if (!cr6.getEQ()) goto loc_8217EB00;
	// li r6,2
	ctx.r6.s64 = 2;
	// stw r28,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r28.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// li r31,0
	r31.s64 = 0;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8217EAB4:
	// lwz r10,156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8217ead0
	if (cr6.getEQ()) goto loc_8217EAD0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217ead4
	if (!cr6.getEQ()) goto loc_8217EAD4;
loc_8217EAD0:
	// li r11,1
	r11.s64 = 1;
loc_8217EAD4:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217eafc
	if (!cr6.getEQ()) goto loc_8217EAFC;
	// lbz r11,793(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 793);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217eaf8
	if (cr6.getEQ()) goto loc_8217EAF8;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217eab4
	goto loc_8217EAB4;
loc_8217EAF8:
	// li r31,1
	r31.s64 = 1;
loc_8217EAFC:
	// stw r25,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r25.u32);
loc_8217EB00:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217eb10
	if (cr6.getEQ()) goto loc_8217EB10;
	// bl 0x8217f620
	sub_8217F620(ctx, base);
loc_8217EB10:
	// stw r25,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r25.u32);
loc_8217EB14:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ecfc
	if (cr6.getEQ()) goto loc_8217ECFC;
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,90
	cr6.compare<int32_t>(ctx.r3.s32, 90, xer);
	// beq cr6,0x8217ecfc
	if (cr6.getEQ()) goto loc_8217ECFC;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x8217ecfc
	if (!cr6.getEQ()) goto loc_8217ECFC;
	// bl 0x82182470
	sub_82182470(ctx, base);
	// bl 0x821827a8
	sub_821827A8(ctx, base);
	// bl 0x8215cb90
	sub_8215CB90(ctx, base);
	// bl 0x8215d2f8
	sub_8215D2F8(ctx, base);
	// bl 0x82181e58
	sub_82181E58(ctx, base);
	// bl 0x82181e68
	sub_82181E68(ctx, base);
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r28,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r28.u32);
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r26,r11,-1384
	r26.s64 = r11.s64 + -1384;
	// lfs f31,2688(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f31.f64 = double(temp.f32);
loc_8217EB7C:
	// lwz r3,188(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// lwz r11,192(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8217eb98
	if (cr6.getEQ()) goto loc_8217EB98;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217eb9c
	if (!cr6.getEQ()) goto loc_8217EB9C;
loc_8217EB98:
	// li r11,1
	r11.s64 = 1;
loc_8217EB9C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217ecf8
	if (!cr6.getEQ()) goto loc_8217ECF8;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r26
	r11.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ecec
	if (cr6.getEQ()) goto loc_8217ECEC;
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ecec
	if (cr6.getEQ()) goto loc_8217ECEC;
	// lwz r28,8(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,20(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// rlwinm r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ecec
	if (cr6.getEQ()) goto loc_8217ECEC;
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217ec20
	if (cr6.getEQ()) goto loc_8217EC20;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8217ec4c
	if (cr6.getEQ()) goto loc_8217EC4C;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8217ec4c
	if (cr6.getEQ()) goto loc_8217EC4C;
	// addi r3,r30,1388
	ctx.r3.s64 = r30.s64 + 1388;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8217ec50
	goto loc_8217EC50;
loc_8217EC20:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8217ec4c
	if (cr6.getEQ()) goto loc_8217EC4C;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8217ec4c
	if (cr6.getEQ()) goto loc_8217EC4C;
	// addi r3,r30,1388
	ctx.r3.s64 = r30.s64 + 1388;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8217ec50
	goto loc_8217EC50;
loc_8217EC4C:
	// li r3,-1
	ctx.r3.s64 = -1;
loc_8217EC50:
	// extsb r3,r3
	ctx.r3.s64 = ctx.r3.s8;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8217ecec
	if (cr6.getLT()) goto loc_8217ECEC;
	// bl 0x820af838
	sub_820AF838(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8217ecec
	if (cr6.getEQ()) goto loc_8217ECEC;
	// lfs f0,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// lfs f0,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,84(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// lfs f0,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// lhz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// lbz r6,2(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// bl 0x820ca6d0
	sub_820CA6D0(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,56(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 56);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8216fc60
	sub_8216FC60(ctx, base);
	// lwz r11,20(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// rlwinm r11,r11,0,3,1
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFDFFFFFFF;
	// stw r11,20(r28)
	PPC_STORE_U32(r28.u32 + 20, r11.u32);
loc_8217ECEC:
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217eb7c
	goto loc_8217EB7C;
loc_8217ECF8:
	// stw r25,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r25.u32);
loc_8217ECFC:
	// bl 0x8217dad8
	sub_8217DAD8(ctx, base);
	// bl 0x8217ded0
	sub_8217DED0(ctx, base);
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8217e080
	sub_8217E080(ctx, base);
	// bl 0x8217da18
	sub_8217DA18(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f30,-80(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8217ED20"))) PPC_WEAK_FUNC(sub_8217ED20);
PPC_FUNC_IMPL(__imp__sub_8217ED20) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// li r11,1
	r11.s64 = 1;
	// stb r11,753(r3)
	PPC_STORE_U8(ctx.r3.u32 + 753, r11.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217ED30"))) PPC_WEAK_FUNC(sub_8217ED30);
PPC_FUNC_IMPL(__imp__sub_8217ED30) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-1384
	r11.s64 = r11.s64 + -1384;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ee30
	if (cr6.getEQ()) goto loc_8217EE30;
	// lwz r11,480(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8217ee30
	if (!cr6.getEQ()) goto loc_8217EE30;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8216c150
	sub_8216C150(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ee30
	if (cr6.getEQ()) goto loc_8217EE30;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r28,1
	r28.s64 = 1;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// addi r29,r11,30888
	r29.s64 = r11.s64 + 30888;
	// bne cr6,0x8217edd4
	if (!cr6.getEQ()) goto loc_8217EDD4;
	// lwz r11,76(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 76);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8217edd4
	if (cr6.getEQ()) goto loc_8217EDD4;
	// addi r11,r29,-4
	r11.s64 = r29.s64 + -4;
	// stbx r28,r31,r11
	PPC_STORE_U8(r31.u32 + r11.u32, r28.u8);
loc_8217EDD4:
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x8217ee08
	if (!cr6.getEQ()) goto loc_8217EE08;
	// lwz r11,76(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 76);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8217ee08
	if (cr6.getEQ()) goto loc_8217EE08;
	// stbx r28,r31,r29
	PPC_STORE_U8(r31.u32 + r29.u32, r28.u8);
loc_8217EE08:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// stfs f0,484(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 484, temp.u32);
	// stfs f0,488(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 488, temp.u32);
	// bl 0x820bebd0
	sub_820BEBD0(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
loc_8217EE30:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8217EE38"))) PPC_WEAK_FUNC(sub_8217EE38);
PPC_FUNC_IMPL(__imp__sub_8217EE38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r3,-1
	ctx.r3.s64 = -1;
	// addi r11,r11,30848
	r11.s64 = r11.s64 + 30848;
	// lbz r10,-3(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + -3);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217EE68"))) PPC_WEAK_FUNC(sub_8217EE68);
PPC_FUNC_IMPL(__imp__sub_8217EE68) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// li r11,0
	r11.s64 = 0;
	// stw r11,30848(r10)
	PPC_STORE_U32(ctx.r10.u32 + 30848, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217EE78"))) PPC_WEAK_FUNC(sub_8217EE78);
PPC_FUNC_IMPL(__imp__sub_8217EE78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// stb r3,30845(r11)
	PPC_STORE_U8(r11.u32 + 30845, ctx.r3.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217EE88"))) PPC_WEAK_FUNC(sub_8217EE88);
PPC_FUNC_IMPL(__imp__sub_8217EE88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r11,r11,30852
	r11.s64 = r11.s64 + 30852;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217EEA8"))) PPC_WEAK_FUNC(sub_8217EEA8);
PPC_FUNC_IMPL(__imp__sub_8217EEA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,30852
	r11.s64 = r11.s64 + 30852;
	// lwzx r8,r10,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// addi r9,r8,1
	ctx.r9.s64 = ctx.r8.s64 + 1;
	// cmpwi cr6,r9,1000
	cr6.compare<int32_t>(ctx.r9.s32, 1000, xer);
	// stwx r9,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r9.u32);
	// blt cr6,0x8217eed0
	if (cr6.getLT()) goto loc_8217EED0;
	// li r9,0
	ctx.r9.s64 = 0;
	// stwx r9,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r9.u32);
loc_8217EED0:
	// clrlwi r11,r4,24
	r11.u64 = ctx.r4.u32 & 0xFF;
	// rlwinm r10,r8,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// or r3,r11,r3
	ctx.r3.u64 = r11.u64 | ctx.r3.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217EEF8"))) PPC_WEAK_FUNC(sub_8217EEF8);
PPC_FUNC_IMPL(__imp__sub_8217EEF8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r11,r11,30868
	r11.s64 = r11.s64 + 30868;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217EF18"))) PPC_WEAK_FUNC(sub_8217EF18);
PPC_FUNC_IMPL(__imp__sub_8217EF18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,30868
	r11.s64 = r11.s64 + 30868;
	// lwzx r9,r10,r11
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// cmpwi cr6,r8,1000
	cr6.compare<int32_t>(ctx.r8.s32, 1000, xer);
	// stwx r8,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r8.u32);
	// blt cr6,0x8217ef4c
	if (cr6.getLT()) goto loc_8217EF4C;
	// li r8,0
	ctx.r8.s64 = 0;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// or r3,r9,r3
	ctx.r3.u64 = ctx.r9.u64 | ctx.r3.u64;
	// stwx r8,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r8.u32);
	// blr 
	return;
loc_8217EF4C:
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// or r3,r11,r3
	ctx.r3.u64 = r11.u64 | ctx.r3.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217EF58"))) PPC_WEAK_FUNC(sub_8217EF58);
PPC_FUNC_IMPL(__imp__sub_8217EF58) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32019
	r11.s64 = -2098397184;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,26240
	r11.s64 = r11.s64 + 26240;
	// li r9,-1
	ctx.r9.s64 = -1;
	// li r10,64
	ctx.r10.s64 = 64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8217EF80:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x8217ef80
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8217EF80;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// addi r11,r3,-2
	r11.s64 = ctx.r3.s64 + -2;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// bl 0x82163ee8
	sub_82163EE8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// li r31,1
	r31.s64 = 1;
loc_8217EFCC:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8217efe8
	if (cr6.getEQ()) goto loc_8217EFE8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217efec
	if (!cr6.getEQ()) goto loc_8217EFEC;
loc_8217EFE8:
	// mr r11,r31
	r11.u64 = r31.u64;
loc_8217EFEC:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217f008
	if (!cr6.getEQ()) goto loc_8217F008;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r31,753(r10)
	PPC_STORE_U8(ctx.r10.u32 + 753, r31.u8);
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217efcc
	goto loc_8217EFCC;
loc_8217F008:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F020"))) PPC_WEAK_FUNC(sub_8217F020);
PPC_FUNC_IMPL(__imp__sub_8217F020) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r31,0
	r31.s64 = 0;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8217f078
	if (!cr6.getEQ()) goto loc_8217F078;
	// bl 0x8217f200
	sub_8217F200(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217f078
	if (!cr6.getEQ()) goto loc_8217F078;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// addi r3,r11,1044
	ctx.r3.s64 = r11.s64 + 1044;
	// lwz r11,1044(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1044);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r31,r11,27,31,31
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
loc_8217F078:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8217d900
	sub_8217D900(ctx, base);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r3,728
	ctx.r3.s64 = ctx.r3.s64 + 728;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,832
	ctx.r3.s64 = ctx.r3.s64 + 832;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,936
	ctx.r3.s64 = ctx.r3.s64 + 936;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// stw r3,30840(r11)
	PPC_STORE_U32(r11.u32 + 30840, ctx.r3.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F0D0"))) PPC_WEAK_FUNC(sub_8217F0D0);
PPC_FUNC_IMPL(__imp__sub_8217F0D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31993
	r30.s64 = -2096693248;
	// lis r9,-31992
	ctx.r9.s64 = -2096627712;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r31,r9,30940
	r31.s64 = ctx.r9.s64 + 30940;
	// lwz r10,29100(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lwz r8,96(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 96);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x8217f120
	if (cr6.getEQ()) goto loc_8217F120;
	// lwz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r3,r10,68
	ctx.r3.s64 = ctx.r10.s64 + 68;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// or r11,r9,r11
	r11.u64 = ctx.r9.u64 | r11.u64;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_8217F120:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217f14c
	if (cr6.getEQ()) goto loc_8217F14C;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_8217F14C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F168"))) PPC_WEAK_FUNC(sub_8217F168);
PPC_FUNC_IMPL(__imp__sub_8217F168) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r3,30940(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 30940);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F178"))) PPC_WEAK_FUNC(sub_8217F178);
PPC_FUNC_IMPL(__imp__sub_8217F178) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31993
	r30.s64 = -2096693248;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// rlwinm r9,r11,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r10,29100(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// addi r3,r10,68
	ctx.r3.s64 = ctx.r10.s64 + 68;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r31,r10,30940
	r31.s64 = ctx.r10.s64 + 30940;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// clrlwi r4,r10,24
	ctx.r4.u64 = ctx.r10.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217f1e8
	if (cr6.getEQ()) goto loc_8217F1E8;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_8217F1E8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F200"))) PPC_WEAK_FUNC(sub_8217F200);
PPC_FUNC_IMPL(__imp__sub_8217F200) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r11,30940(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 30940);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8217f21c
	if (cr6.getEQ()) goto loc_8217F21C;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8217f220
	if (!cr6.getEQ()) goto loc_8217F220;
loc_8217F21C:
	// li r11,0
	r11.s64 = 0;
loc_8217F220:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F228"))) PPC_WEAK_FUNC(sub_8217F228);
PPC_FUNC_IMPL(__imp__sub_8217F228) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r11,30940(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 30940);
	// addi r11,r11,-5
	r11.s64 = r11.s64 + -5;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F240"))) PPC_WEAK_FUNC(sub_8217F240);
PPC_FUNC_IMPL(__imp__sub_8217F240) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r11,30940(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 30940);
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x8217f27c
	if (cr6.getEQ()) goto loc_8217F27C;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8217f27c
	if (cr6.getEQ()) goto loc_8217F27C;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// beq cr6,0x8217f27c
	if (cr6.getEQ()) goto loc_8217F27C;
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// beq cr6,0x8217f27c
	if (cr6.getEQ()) goto loc_8217F27C;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// beq cr6,0x8217f27c
	if (cr6.getEQ()) goto loc_8217F27C;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217f280
	if (!cr6.getEQ()) goto loc_8217F280;
loc_8217F27C:
	// li r11,1
	r11.s64 = 1;
loc_8217F280:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F288"))) PPC_WEAK_FUNC(sub_8217F288);
PPC_FUNC_IMPL(__imp__sub_8217F288) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r11,30940(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 30940);
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// beq cr6,0x8217f2ac
	if (cr6.getEQ()) goto loc_8217F2AC;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// beq cr6,0x8217f2ac
	if (cr6.getEQ()) goto loc_8217F2AC;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217f2b0
	if (!cr6.getEQ()) goto loc_8217F2B0;
loc_8217F2AC:
	// li r11,1
	r11.s64 = 1;
loc_8217F2B0:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F2B8"))) PPC_WEAK_FUNC(sub_8217F2B8);
PPC_FUNC_IMPL(__imp__sub_8217F2B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r11,30940(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 30940);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8217f2ec
	if (cr6.getEQ()) goto loc_8217F2EC;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x8217f2ec
	if (cr6.getEQ()) goto loc_8217F2EC;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8217f2ec
	if (cr6.getEQ()) goto loc_8217F2EC;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// beq cr6,0x8217f2ec
	if (cr6.getEQ()) goto loc_8217F2EC;
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217f2f0
	if (!cr6.getEQ()) goto loc_8217F2F0;
loc_8217F2EC:
	// li r11,1
	r11.s64 = 1;
loc_8217F2F0:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F2F8"))) PPC_WEAK_FUNC(sub_8217F2F8);
PPC_FUNC_IMPL(__imp__sub_8217F2F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lbz r3,30957(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 30957);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F308"))) PPC_WEAK_FUNC(sub_8217F308);
PPC_FUNC_IMPL(__imp__sub_8217F308) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lbz r3,30958(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 30958);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F318"))) PPC_WEAK_FUNC(sub_8217F318);
PPC_FUNC_IMPL(__imp__sub_8217F318) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f30.u64);
	// stfd f31,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r30,0
	r30.s64 = 0;
	// addi r29,r11,30966
	r29.s64 = r11.s64 + 30966;
	// mr r11,r30
	r11.u64 = r30.u64;
	// lis r28,-31993
	r28.s64 = -2096693248;
	// stb r11,-2(r29)
	PPC_STORE_U8(r29.u32 + -2, r11.u8);
	// lwz r3,29100(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// bl 0x8214fc40
	sub_8214FC40(ctx, base);
	// bl 0x8217e038
	sub_8217E038(ctx, base);
	// bl 0x8217ee68
	sub_8217EE68(ctx, base);
	// bl 0x8217eef8
	sub_8217EEF8(ctx, base);
	// bl 0x8217ee88
	sub_8217EE88(ctx, base);
	// bl 0x82182470
	sub_82182470(ctx, base);
	// bl 0x82182780
	sub_82182780(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2944(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2944);
	f31.f64 = double(temp.f32);
	// lfs f30,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f30.f64 = double(temp.f32);
loc_8217F394:
	// lwz r3,108(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8217f3b0
	if (cr6.getEQ()) goto loc_8217F3B0;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// mr r11,r30
	r11.u64 = r30.u64;
	// bne cr6,0x8217f3b4
	if (!cr6.getEQ()) goto loc_8217F3B4;
loc_8217F3B0:
	// li r11,1
	r11.s64 = 1;
loc_8217F3B4:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217f43c
	if (!cr6.getEQ()) goto loc_8217F43C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,64(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 64);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217f3fc
	if (cr6.getEQ()) goto loc_8217F3FC;
	// lwz r11,884(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 884);
	// addi r3,r31,884
	ctx.r3.s64 = r31.s64 + 884;
	// lwz r11,44(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217F3FC:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217f41c
	if (cr6.getEQ()) goto loc_8217F41C;
	// lwz r11,884(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 884);
	// addi r3,r31,884
	ctx.r3.s64 = r31.s64 + 884;
	// lwz r11,48(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 48);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8217F41C:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stfs f30,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 136, temp.u32);
	// stfs f31,132(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 132, temp.u32);
	// stb r30,140(r31)
	PPC_STORE_U8(r31.u32 + 140, r30.u8);
	// stfs f31,128(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 128, temp.u32);
	// stb r30,752(r31)
	PPC_STORE_U8(r31.u32 + 752, r30.u8);
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217f394
	goto loc_8217F394;
loc_8217F43C:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stb r30,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r30.u8);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217f488
	if (cr6.getEQ()) goto loc_8217F488;
loc_8217F464:
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x821528b8
	sub_821528B8(ctx, base);
	// addi r3,r31,244
	ctx.r3.s64 = r31.s64 + 244;
	// bl 0x82152a50
	sub_82152A50(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8217f464
	if (!cr6.getEQ()) goto loc_8217F464;
loc_8217F488:
	// bl 0x82175100
	sub_82175100(ctx, base);
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,436
	ctx.r3.s64 = r11.s64 + 436;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// mr r11,r30
	r11.u64 = r30.u64;
	// stb r11,0(r29)
	PPC_STORE_U8(r29.u32 + 0, r11.u8);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8217F4B8"))) PPC_WEAK_FUNC(sub_8217F4B8);
PPC_FUNC_IMPL(__imp__sub_8217F4B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// li r30,1
	r30.s64 = 1;
	// lwz r3,29100(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// bl 0x8214fcf0
	sub_8214FCF0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217f4ec
	if (!cr6.getEQ()) goto loc_8217F4EC;
	// li r30,0
	r30.s64 = 0;
loc_8217F4EC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8217F50C:
	// lwz r3,108(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8217f528
	if (cr6.getEQ()) goto loc_8217F528;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217f52c
	if (!cr6.getEQ()) goto loc_8217F52C;
loc_8217F528:
	// li r11,1
	r11.s64 = 1;
loc_8217F52C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217f5ac
	if (!cr6.getEQ()) goto loc_8217F5AC;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217f570
	if (cr6.getEQ()) goto loc_8217F570;
	// lwz r11,884(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 884);
	// addi r3,r31,884
	ctx.r3.s64 = r31.s64 + 884;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217f570
	if (!cr6.getEQ()) goto loc_8217F570;
	// li r30,0
	r30.s64 = 0;
loc_8217F570:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217f5a0
	if (cr6.getEQ()) goto loc_8217F5A0;
	// lwz r11,884(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 884);
	// addi r3,r31,884
	ctx.r3.s64 = r31.s64 + 884;
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217f5a0
	if (!cr6.getEQ()) goto loc_8217F5A0;
	// li r30,0
	r30.s64 = 0;
loc_8217F5A0:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217f50c
	goto loc_8217F50C;
loc_8217F5AC:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217f604
	if (cr6.getEQ()) goto loc_8217F604;
loc_8217F5D8:
	// addi r3,r11,244
	ctx.r3.s64 = r11.s64 + 244;
	// bl 0x82152a78
	sub_82152A78(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217f5f0
	if (!cr6.getEQ()) goto loc_8217F5F0;
	// li r30,0
	r30.s64 = 0;
loc_8217F5F0:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217f5d8
	if (!cr6.getEQ()) goto loc_8217F5D8;
loc_8217F604:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F620"))) PPC_WEAK_FUNC(sub_8217F620);
PPC_FUNC_IMPL(__imp__sub_8217F620) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8217d900
	sub_8217D900(ctx, base);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r3,29100(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// bl 0x8214fae8
	sub_8214FAE8(ctx, base);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,728
	ctx.r3.s64 = ctx.r3.s64 + 728;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r3,780
	ctx.r3.s64 = ctx.r3.s64 + 780;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,832
	ctx.r3.s64 = ctx.r3.s64 + 832;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,936
	ctx.r3.s64 = ctx.r3.s64 + 936;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r9,1
	ctx.r9.s64 = 1;
	// addi r10,r11,14756
	ctx.r10.s64 = r11.s64 + 14756;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,30958
	r11.s64 = r11.s64 + 30958;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r9,-1(r11)
	PPC_STORE_U8(r11.u32 + -1, ctx.r9.u8);
	// li r9,0
	ctx.r9.s64 = 0;
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8217F6B8:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8217f6d4
	if (cr6.getEQ()) goto loc_8217F6D4;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217f6d8
	if (!cr6.getEQ()) goto loc_8217F6D8;
loc_8217F6D4:
	// li r11,1
	r11.s64 = 1;
loc_8217F6D8:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217f6f4
	if (!cr6.getEQ()) goto loc_8217F6F4;
	// bl 0x821590e0
	sub_821590E0(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217f6b8
	goto loc_8217F6B8;
loc_8217F6F4:
	// bl 0x82101e68
	sub_82101E68(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F708"))) PPC_WEAK_FUNC(sub_8217F708);
PPC_FUNC_IMPL(__imp__sub_8217F708) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217f77c
	if (cr6.getEQ()) goto loc_8217F77C;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r31,r11,30940
	r31.s64 = r11.s64 + 30940;
	// li r11,0
	r11.s64 = 0;
	// stb r11,17(r31)
	PPC_STORE_U8(r31.u32 + 17, r11.u8);
	// li r11,1
	r11.s64 = 1;
	// stb r11,18(r31)
	PPC_STORE_U8(r31.u32 + 18, r11.u8);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,780
	ctx.r3.s64 = ctx.r3.s64 + 780;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r3,832
	ctx.r3.s64 = ctx.r3.s64 + 832;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x8217f77c
	if (!cr6.getEQ()) goto loc_8217F77C;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r3,884
	ctx.r3.s64 = ctx.r3.s64 + 884;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_8217F77C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F790"))) PPC_WEAK_FUNC(sub_8217F790);
PPC_FUNC_IMPL(__imp__sub_8217F790) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r11,r11,30958
	r11.s64 = r11.s64 + 30958;
	// stb r10,-1(r11)
	PPC_STORE_U8(r11.u32 + -1, ctx.r10.u8);
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,832
	ctx.r3.s64 = ctx.r3.s64 + 832;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r3,936
	ctx.r3.s64 = ctx.r3.s64 + 936;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F7E0"))) PPC_WEAK_FUNC(sub_8217F7E0);
PPC_FUNC_IMPL(__imp__sub_8217F7E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// li r11,1
	r11.s64 = 1;
	// stw r11,30968(r10)
	PPC_STORE_U32(ctx.r10.u32 + 30968, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F7F0"))) PPC_WEAK_FUNC(sub_8217F7F0);
PPC_FUNC_IMPL(__imp__sub_8217F7F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r11,30968(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 30968);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217F808"))) PPC_WEAK_FUNC(sub_8217F808);
PPC_FUNC_IMPL(__imp__sub_8217F808) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r23{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31993
	r31.s64 = -2096693248;
	// li r30,0
	r30.s64 = 0;
	// lwz r11,29100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 29100);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,29100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 29100);
	// rlwinm r31,r3,28,29,31
	r31.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 28) & 0x7;
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r10,r11,30940
	ctx.r10.s64 = r11.s64 + 30940;
	// lwz r11,4(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmpw cr6,r11,r31
	cr6.compare<int32_t>(r11.s32, r31.s32, xer);
	// clrlwi r11,r3,28
	r11.u64 = ctx.r3.u32 & 0xF;
	// beq cr6,0x8217f87c
	if (cr6.getEQ()) goto loc_8217F87C;
	// li r30,1
	r30.s64 = 1;
	// b 0x8217fa58
	goto loc_8217FA58;
loc_8217F87C:
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r10,12
	cr6.compare<uint32_t>(ctx.r10.u32, 12, xer);
	// bgt cr6,0x8217fa58
	if (cr6.getGT()) goto loc_8217FA58;
	// lis r12,-32232
	r12.s64 = -2112356352;
	// addi r12,r12,-1888
	r12.s64 = r12.s64 + -1888;
	// rlwinm r0,r10,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_8217F8D4;
	case 1:
		goto loc_8217F8FC;
	case 2:
		goto loc_8217F91C;
	case 3:
		goto loc_8217F944;
	case 4:
		goto loc_8217F964;
	case 5:
		goto loc_8217F984;
	case 6:
		goto loc_8217F9A4;
	case 7:
		goto loc_8217F9C4;
	case 8:
		goto loc_8217F9E4;
	case 9:
		goto loc_8217FA0C;
	case 10:
		goto loc_8217FA2C;
	case 11:
		goto loc_8217F8D4;
	case 12:
		goto loc_8217FA54;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-1836(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1836);
	// lwz r16,-1796(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1796);
	// lwz r16,-1764(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1764);
	// lwz r16,-1724(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1724);
	// lwz r16,-1692(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1692);
	// lwz r16,-1660(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1660);
	// lwz r16,-1628(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1628);
	// lwz r16,-1596(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1596);
	// lwz r16,-1564(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1564);
	// lwz r16,-1524(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1524);
	// lwz r16,-1492(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1492);
	// lwz r16,-1836(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1836);
	// lwz r16,-1452(r23)
	r16.u64 = PPC_LOAD_U32(r23.u32 + -1452);
loc_8217F8D4:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8217f8f0
	if (cr6.getEQ()) goto loc_8217F8F0;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// beq cr6,0x8217f8f0
	if (cr6.getEQ()) goto loc_8217F8F0;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8217f8f4
	if (!cr6.getEQ()) goto loc_8217F8F4;
loc_8217F8F0:
	// li r11,0
	r11.s64 = 0;
loc_8217F8F4:
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// b 0x8217fa58
	goto loc_8217FA58;
loc_8217F8FC:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x8217f910
	if (cr6.getEQ()) goto loc_8217F910;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8217f914
	if (!cr6.getEQ()) goto loc_8217F914;
loc_8217F910:
	// li r11,0
	r11.s64 = 0;
loc_8217F914:
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// b 0x8217fa58
	goto loc_8217FA58;
loc_8217F91C:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x8217f938
	if (cr6.getEQ()) goto loc_8217F938;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x8217f938
	if (cr6.getEQ()) goto loc_8217F938;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8217f93c
	if (!cr6.getEQ()) goto loc_8217F93C;
loc_8217F938:
	// li r11,0
	r11.s64 = 0;
loc_8217F93C:
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// b 0x8217fa58
	goto loc_8217FA58;
loc_8217F944:
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x8217f958
	if (cr6.getEQ()) goto loc_8217F958;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8217f95c
	if (!cr6.getEQ()) goto loc_8217F95C;
loc_8217F958:
	// li r11,0
	r11.s64 = 0;
loc_8217F95C:
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// b 0x8217fa58
	goto loc_8217FA58;
loc_8217F964:
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8217f978
	if (cr6.getEQ()) goto loc_8217F978;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8217f97c
	if (!cr6.getEQ()) goto loc_8217F97C;
loc_8217F978:
	// li r11,0
	r11.s64 = 0;
loc_8217F97C:
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// b 0x8217fa58
	goto loc_8217FA58;
loc_8217F984:
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8217f998
	if (cr6.getEQ()) goto loc_8217F998;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8217f99c
	if (!cr6.getEQ()) goto loc_8217F99C;
loc_8217F998:
	// li r11,0
	r11.s64 = 0;
loc_8217F99C:
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// b 0x8217fa58
	goto loc_8217FA58;
loc_8217F9A4:
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x8217f9b8
	if (cr6.getEQ()) goto loc_8217F9B8;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8217f9bc
	if (!cr6.getEQ()) goto loc_8217F9BC;
loc_8217F9B8:
	// li r11,0
	r11.s64 = 0;
loc_8217F9BC:
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// b 0x8217fa58
	goto loc_8217FA58;
loc_8217F9C4:
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8217f9d8
	if (cr6.getEQ()) goto loc_8217F9D8;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8217f9dc
	if (!cr6.getEQ()) goto loc_8217F9DC;
loc_8217F9D8:
	// li r11,0
	r11.s64 = 0;
loc_8217F9DC:
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// b 0x8217fa58
	goto loc_8217FA58;
loc_8217F9E4:
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// beq cr6,0x8217fa00
	if (cr6.getEQ()) goto loc_8217FA00;
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// beq cr6,0x8217fa00
	if (cr6.getEQ()) goto loc_8217FA00;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8217fa04
	if (!cr6.getEQ()) goto loc_8217FA04;
loc_8217FA00:
	// li r11,0
	r11.s64 = 0;
loc_8217FA04:
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// b 0x8217fa58
	goto loc_8217FA58;
loc_8217FA0C:
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// beq cr6,0x8217fa20
	if (cr6.getEQ()) goto loc_8217FA20;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8217fa24
	if (!cr6.getEQ()) goto loc_8217FA24;
loc_8217FA20:
	// li r11,0
	r11.s64 = 0;
loc_8217FA24:
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// b 0x8217fa58
	goto loc_8217FA58;
loc_8217FA2C:
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// beq cr6,0x8217fa48
	if (cr6.getEQ()) goto loc_8217FA48;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8217fa48
	if (cr6.getEQ()) goto loc_8217FA48;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8217fa4c
	if (!cr6.getEQ()) goto loc_8217FA4C;
loc_8217FA48:
	// li r11,0
	r11.s64 = 0;
loc_8217FA4C:
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// b 0x8217fa58
	goto loc_8217FA58;
loc_8217FA54:
	// li r30,0
	r30.s64 = 0;
loc_8217FA58:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217FA78"))) PPC_WEAK_FUNC(sub_8217FA78);
PPC_FUNC_IMPL(__imp__sub_8217FA78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8217f178
	sub_8217F178(ctx, base);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r3,29100(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// bl 0x8214fa78
	sub_8214FA78(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r31,r11,30966
	r31.s64 = r11.s64 + 30966;
	// li r11,0
	r11.s64 = 0;
	// stb r11,-9(r31)
	PPC_STORE_U8(r31.u32 + -9, r11.u8);
	// stb r11,-8(r31)
	PPC_STORE_U8(r31.u32 + -8, r11.u8);
	// stw r11,-18(r31)
	PPC_STORE_U32(r31.u32 + -18, r11.u32);
	// stw r11,-14(r31)
	PPC_STORE_U32(r31.u32 + -14, r11.u32);
	// stb r11,-10(r31)
	PPC_STORE_U8(r31.u32 + -10, r11.u8);
	// stw r11,-6(r31)
	PPC_STORE_U32(r31.u32 + -6, r11.u32);
	// bl 0x8217f318
	sub_8217F318(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,2(r31)
	PPC_STORE_U32(r31.u32 + 2, r11.u32);
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217FAF0"))) PPC_WEAK_FUNC(sub_8217FAF0);
PPC_FUNC_IMPL(__imp__sub_8217FAF0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217fb44
	if (cr6.getEQ()) goto loc_8217FB44;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r11,30944(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 30944);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8217fb2c
	if (cr6.getEQ()) goto loc_8217FB2C;
	// addi r3,r11,1
	ctx.r3.s64 = r11.s64 + 1;
	// cmpwi cr6,r3,7
	cr6.compare<int32_t>(ctx.r3.s32, 7, xer);
	// ble cr6,0x8217fb64
	if (!cr6.getGT()) goto loc_8217FB64;
loc_8217FB2C:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x8217f178
	sub_8217F178(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8217FB44:
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r3,r3,28,29,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 28) & 0x7;
loc_8217FB64:
	// bl 0x8217f178
	sub_8217F178(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217FB78"))) PPC_WEAK_FUNC(sub_8217FB78);
PPC_FUNC_IMPL(__imp__sub_8217FB78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,3
	ctx.r3.s64 = 3;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8217fc00
	if (cr6.getEQ()) goto loc_8217FC00;
	// bl 0x8215fd20
	sub_8215FD20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8217fc00
	if (!cr6.getEQ()) goto loc_8217FC00;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8217fc00
	if (!cr6.getEQ()) goto loc_8217FC00;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// addi r3,r11,988
	ctx.r3.s64 = r11.s64 + 988;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217fc00
	if (cr6.getEQ()) goto loc_8217FC00;
	// bl 0x82184a40
	sub_82184A40(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8217fc00
	if (cr6.getEQ()) goto loc_8217FC00;
	// lwz r31,1368(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1368);
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x8214d120
	sub_8214D120(ctx, base);
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// bl 0x8214d270
	sub_8214D270(ctx, base);
loc_8217FC00:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217FC18"))) PPC_WEAK_FUNC(sub_8217FC18);
PPC_FUNC_IMPL(__imp__sub_8217FC18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,5
	ctx.r3.s64 = 5;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r31,r11,30952
	r31.s64 = r11.s64 + 30952;
	// lbz r11,6(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217fc54
	if (cr6.getEQ()) goto loc_8217FC54;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r3,884
	ctx.r3.s64 = ctx.r3.s64 + 884;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_8217FC54:
	// lbz r11,4(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217fc74
	if (cr6.getEQ()) goto loc_8217FC74;
	// li r11,0
	r11.s64 = 0;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// stb r11,4(r31)
	PPC_STORE_U8(r31.u32 + 4, r11.u8);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x8217fc78
	goto loc_8217FC78;
loc_8217FC74:
	// bl 0x823b3600
	sub_823B3600(ctx, base);
loc_8217FC78:
	// stw r3,-4(r31)
	PPC_STORE_U32(r31.u32 + -4, ctx.r3.u32);
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// lbz r11,16(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217fcc0
	if (cr6.getEQ()) goto loc_8217FCC0;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// addi r3,r11,988
	ctx.r3.s64 = r11.s64 + 988;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217fcc0
	if (!cr6.getEQ()) goto loc_8217FCC0;
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// bl 0x823bb8f8
	sub_823BB8F8(ctx, base);
loc_8217FCC0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217FCD8"))) PPC_WEAK_FUNC(sub_8217FCD8);
PPC_FUNC_IMPL(__imp__sub_8217FCD8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,10
	ctx.r3.s64 = 10;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8217fd28
	if (!cr6.getEQ()) goto loc_8217FD28;
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// lbz r11,1164(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 1164);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217fd28
	if (cr6.getEQ()) goto loc_8217FD28;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// bl 0x8214d518
	sub_8214D518(ctx, base);
loc_8217FD28:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217FD38"))) PPC_WEAK_FUNC(sub_8217FD38);
PPC_FUNC_IMPL(__imp__sub_8217FD38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r31,r11,30940
	r31.s64 = r11.s64 + 30940;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x8217fd78
	if (!cr6.getEQ()) goto loc_8217FD78;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// subf r11,r30,r3
	r11.s64 = ctx.r3.s64 - r30.s64;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// b 0x8217fd8c
	goto loc_8217FD8C;
loc_8217FD78:
	// li r11,1
	r11.s64 = 1;
	// stb r11,16(r31)
	PPC_STORE_U8(r31.u32 + 16, r11.u8);
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// subf r11,r30,r3
	r11.s64 = ctx.r3.s64 - r30.s64;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
loc_8217FD8C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217FDA8"))) PPC_WEAK_FUNC(sub_8217FDA8);
PPC_FUNC_IMPL(__imp__sub_8217FDA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r31,r11,30940
	r31.s64 = r11.s64 + 30940;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x8217fdec
	if (!cr6.getEQ()) goto loc_8217FDEC;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// subf r3,r11,r3
	ctx.r3.s64 = ctx.r3.s64 - r11.s64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8217FDEC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// subf r3,r11,r10
	ctx.r3.s64 = ctx.r10.s64 - r11.s64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217FE10"))) PPC_WEAK_FUNC(sub_8217FE10);
PPC_FUNC_IMPL(__imp__sub_8217FE10) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lbz r3,30965(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 30965);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217FE20"))) PPC_WEAK_FUNC(sub_8217FE20);
PPC_FUNC_IMPL(__imp__sub_8217FE20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// addi r10,r10,-30556
	ctx.r10.s64 = ctx.r10.s64 + -30556;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r31,r11,30940
	r31.s64 = r11.s64 + 30940;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// beq cr6,0x8217fe78
	if (cr6.getEQ()) goto loc_8217FE78;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// beq cr6,0x8217fe78
	if (cr6.getEQ()) goto loc_8217FE78;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// li r10,0
	ctx.r10.s64 = 0;
	// bne cr6,0x8217fe7c
	if (!cr6.getEQ()) goto loc_8217FE7C;
loc_8217FE78:
	// li r10,1
	ctx.r10.s64 = 1;
loc_8217FE7C:
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8217ff74
	if (cr6.getEQ()) goto loc_8217FF74;
	// lbz r11,25(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 25);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217fee8
	if (!cr6.getEQ()) goto loc_8217FEE8;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8217FEA8:
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217fec4
	if (cr6.getEQ()) goto loc_8217FEC4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217fec8
	if (!cr6.getEQ()) goto loc_8217FEC8;
loc_8217FEC4:
	// li r11,1
	r11.s64 = 1;
loc_8217FEC8:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217fee0
	if (!cr6.getEQ()) goto loc_8217FEE0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217fea8
	goto loc_8217FEA8;
loc_8217FEE0:
	// li r11,1
	r11.s64 = 1;
	// stb r11,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r11.u8);
loc_8217FEE8:
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ff80
	if (cr6.getEQ()) goto loc_8217FF80;
loc_8217FF00:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8217FF14:
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8217ff30
	if (cr6.getEQ()) goto loc_8217FF30;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8217ff34
	if (!cr6.getEQ()) goto loc_8217FF34;
loc_8217FF30:
	// li r11,1
	r11.s64 = 1;
loc_8217FF34:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217ff4c
	if (!cr6.getEQ()) goto loc_8217FF4C;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8217ff14
	goto loc_8217FF14;
loc_8217FF4C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8217ff00
	if (!cr6.getEQ()) goto loc_8217FF00;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8217FF74:
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stb r11,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r11.u8);
loc_8217FF80:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8217FF98"))) PPC_WEAK_FUNC(sub_8217FF98);
PPC_FUNC_IMPL(__imp__sub_8217FF98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r26,0
	r26.s64 = 0;
	// lbz r11,30964(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 30964);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8217ffc4
	if (cr6.getEQ()) goto loc_8217FFC4;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed180
	return;
loc_8217FFC4:
	// bl 0x820ebb28
	sub_820EBB28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x8217ffe8
	if (!cr6.getGT()) goto loc_8217FFE8;
	// bl 0x8217fda8
	sub_8217FDA8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ebb28
	sub_820EBB28(ctx, base);
	// cmplw cr6,r31,r3
	cr6.compare<uint32_t>(r31.u32, ctx.r3.u32, xer);
	// blt cr6,0x8217ffe8
	if (cr6.getLT()) goto loc_8217FFE8;
	// li r26,1
	r26.s64 = 1;
loc_8217FFE8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x820ebb70
	sub_820EBB70(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x8218007c
	if (!cr6.getGT()) goto loc_8218007C;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r31,0
	r31.s64 = 0;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8218001C:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x82180038
	if (cr6.getEQ()) goto loc_82180038;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8218003c
	if (!cr6.getEQ()) goto loc_8218003C;
loc_82180038:
	// li r11,1
	r11.s64 = 1;
loc_8218003C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180070
	if (!cr6.getEQ()) goto loc_82180070;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// bl 0x8213a720
	sub_8213A720(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x820ebb70
	sub_820EBB70(ctx, base);
	// cmpw cr6,r30,r3
	cr6.compare<int32_t>(r30.s32, ctx.r3.s32, xer);
	// blt cr6,0x82180064
	if (cr6.getLT()) goto loc_82180064;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_82180064:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8218001c
	goto loc_8218001C;
loc_82180070:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// ble cr6,0x8218007c
	if (!cr6.getGT()) goto loc_8218007C;
	// li r26,1
	r26.s64 = 1;
loc_8218007C:
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x8218017c
	if (!cr6.getEQ()) goto loc_8218017C;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r27,0
	r27.s64 = 0;
	// li r28,0
	r28.s64 = 0;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r29,r11,-1360
	r29.s64 = r11.s64 + -1360;
loc_821800AC:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x821800c8
	if (cr6.getEQ()) goto loc_821800C8;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x821800cc
	if (!cr6.getEQ()) goto loc_821800CC;
loc_821800C8:
	// li r11,1
	r11.s64 = 1;
loc_821800CC:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8218016c
	if (!cr6.getEQ()) goto loc_8218016C;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// li r31,0
	r31.s64 = 0;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_821800FC:
	// lwz r3,124(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x82180118
	if (cr6.getEQ()) goto loc_82180118;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8218011c
	if (!cr6.getEQ()) goto loc_8218011C;
loc_82180118:
	// li r11,1
	r11.s64 = 1;
loc_8218011C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180154
	if (!cr6.getEQ()) goto loc_82180154;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r29,36
	ctx.r10.s64 = r29.s64 + 36;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// add r31,r11,r31
	r31.u64 = r11.u64 + r31.u64;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x821800fc
	goto loc_821800FC;
loc_82180154:
	// cmpwi cr6,r31,2
	cr6.compare<int32_t>(r31.s32, 2, xer);
	// blt cr6,0x82180160
	if (cr6.getLT()) goto loc_82180160;
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
loc_82180160:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x821800ac
	goto loc_821800AC;
loc_8218016C:
	// addi r11,r28,-1
	r11.s64 = r28.s64 + -1;
	// cmpw cr6,r27,r11
	cr6.compare<int32_t>(r27.s32, r11.s32, xer);
	// blt cr6,0x8218017c
	if (cr6.getLT()) goto loc_8218017C;
	// li r26,1
	r26.s64 = 1;
loc_8218017C:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82180188"))) PPC_WEAK_FUNC(sub_82180188);
PPC_FUNC_IMPL(__imp__sub_82180188) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r23,0
	r23.s64 = 0;
	// addi r24,r11,30940
	r24.s64 = r11.s64 + 30940;
	// mr r22,r23
	r22.u64 = r23.u64;
	// lwz r27,0(r24)
	r27.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bne cr6,0x821801b4
	if (!cr6.getEQ()) goto loc_821801B4;
	// li r27,11
	r27.s64 = 11;
loc_821801B4:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lwz r26,4(r24)
	r26.u64 = PPC_LOAD_U32(r24.u32 + 4);
	// li r4,0
	ctx.r4.s64 = 0;
	// stb r23,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r23.u8);
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r28,r27
	r28.u64 = r27.u64;
	// mr r29,r26
	r29.u64 = r26.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r25,-31993
	r25.s64 = -2096693248;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82180280
	if (cr6.getEQ()) goto loc_82180280;
loc_821801EC:
	// lwz r11,29100(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 29100);
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x82177338
	sub_82177338(ctx, base);
	// clrlwi r31,r3,28
	r31.u64 = ctx.r3.u32 & 0xF;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bne cr6,0x8218020c
	if (!cr6.getEQ()) goto loc_8218020C;
	// li r31,11
	r31.s64 = 11;
loc_8218020C:
	// lwz r11,29100(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 29100);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x82177338
	sub_82177338(ctx, base);
	// rlwinm r11,r3,28,29,31
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 28) & 0x7;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8218026c
	if (cr6.getEQ()) goto loc_8218026C;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x82180264
	if (cr6.getEQ()) goto loc_82180264;
	// cmpw cr6,r11,r29
	cr6.compare<int32_t>(r11.s32, r29.s32, xer);
	// bne cr6,0x82180244
	if (!cr6.getEQ()) goto loc_82180244;
	// cmpw cr6,r31,r28
	cr6.compare<int32_t>(r31.s32, r28.s32, xer);
	// ble cr6,0x8218026c
	if (!cr6.getGT()) goto loc_8218026C;
	// b 0x82180268
	goto loc_82180268;
loc_82180244:
	// addi r10,r29,1
	ctx.r10.s64 = r29.s64 + 1;
	// cmpwi cr6,r10,7
	cr6.compare<int32_t>(ctx.r10.s32, 7, xer);
	// ble cr6,0x82180254
	if (!cr6.getGT()) goto loc_82180254;
	// li r10,1
	ctx.r10.s64 = 1;
loc_82180254:
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bne cr6,0x8218026c
	if (!cr6.getEQ()) goto loc_8218026C;
	// cmpw cr6,r31,r28
	cr6.compare<int32_t>(r31.s32, r28.s32, xer);
	// ble cr6,0x8218026c
	if (!cr6.getGT()) goto loc_8218026C;
loc_82180264:
	// mr r29,r11
	r29.u64 = r11.u64;
loc_82180268:
	// mr r28,r31
	r28.u64 = r31.u64;
loc_8218026C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x821801ec
	if (!cr6.getEQ()) goto loc_821801EC;
loc_82180280:
	// cmpwi cr6,r27,12
	cr6.compare<int32_t>(r27.s32, 12, xer);
	// beq cr6,0x821804e4
	if (cr6.getEQ()) goto loc_821804E4;
	// cmpwi cr6,r28,12
	cr6.compare<int32_t>(r28.s32, 12, xer);
	// beq cr6,0x821804e4
	if (cr6.getEQ()) goto loc_821804E4;
	// cmpw cr6,r26,r29
	cr6.compare<int32_t>(r26.s32, r29.s32, xer);
	// bne cr6,0x821802a8
	if (!cr6.getEQ()) goto loc_821802A8;
	// cmpw cr6,r27,r28
	cr6.compare<int32_t>(r27.s32, r28.s32, xer);
	// bne cr6,0x821802d4
	if (!cr6.getEQ()) goto loc_821802D4;
	// li r22,1
	r22.s64 = 1;
	// b 0x821804f0
	goto loc_821804F0;
loc_821802A8:
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x821802bc
	if (cr6.getEQ()) goto loc_821802BC;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// bne cr6,0x82180330
	if (!cr6.getEQ()) goto loc_82180330;
loc_821802BC:
	// cmpwi cr6,r28,1
	cr6.compare<int32_t>(r28.s32, 1, xer);
	// bne cr6,0x82180330
	if (!cr6.getEQ()) goto loc_82180330;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x8217d900
	sub_8217D900(ctx, base);
	// bl 0x8217faf0
	sub_8217FAF0(ctx, base);
	// b 0x821804f0
	goto loc_821804F0;
loc_821802D4:
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmplwi cr6,r11,12
	cr6.compare<uint32_t>(r11.u32, 12, xer);
	// bgt cr6,0x821804f0
	if (cr6.getGT()) goto loc_821804F0;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lis r12,-32232
	r12.s64 = -2112356352;
	// addi r12,r12,764
	r12.s64 = r12.s64 + 764;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82180330;
	case 1:
		goto loc_82180340;
	case 2:
		goto loc_8218035C;
	case 3:
		goto loc_82180374;
	case 4:
		goto loc_82180398;
	case 5:
		goto loc_821803A8;
	case 6:
		goto loc_821803D4;
	case 7:
		goto loc_821803F8;
	case 8:
		goto loc_82180414;
	case 9:
		goto loc_82180458;
	case 10:
		goto loc_82180468;
	case 11:
		goto loc_82180330;
	case 12:
		goto loc_821804E4;
	default:
		__builtin_unreachable();
	}
	// lwz r16,816(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 816);
	// lwz r16,832(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 832);
	// lwz r16,860(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 860);
	// lwz r16,884(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 884);
	// lwz r16,920(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 920);
	// lwz r16,936(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 936);
	// lwz r16,980(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 980);
	// lwz r16,1016(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 1016);
	// lwz r16,1044(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 1044);
	// lwz r16,1112(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 1112);
	// lwz r16,1128(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 1128);
	// lwz r16,816(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 816);
	// lwz r16,1252(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 1252);
loc_82180330:
	// bl 0x8215fd50
	sub_8215FD50(ctx, base);
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x8215fbd0
	sub_8215FBD0(ctx, base);
	// b 0x821804f0
	goto loc_821804F0;
loc_82180340:
	// cmpwi cr6,r28,2
	cr6.compare<int32_t>(r28.s32, 2, xer);
	// bne cr6,0x82180330
	if (!cr6.getEQ()) goto loc_82180330;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// lwz r11,29100(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 29100);
	// stb r23,172(r11)
	PPC_STORE_U8(r11.u32 + 172, r23.u8);
	// b 0x821804f0
	goto loc_821804F0;
loc_8218035C:
	// cmpwi cr6,r28,3
	cr6.compare<int32_t>(r28.s32, 3, xer);
	// beq cr6,0x821804e4
	if (cr6.getEQ()) goto loc_821804E4;
	// bl 0x8215fd50
	sub_8215FD50(ctx, base);
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x8215fbd0
	sub_8215FBD0(ctx, base);
	// b 0x821804f0
	goto loc_821804F0;
loc_82180374:
	// cmpwi cr6,r28,4
	cr6.compare<int32_t>(r28.s32, 4, xer);
	// bne cr6,0x82180330
	if (!cr6.getEQ()) goto loc_82180330;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821804f0
	if (cr6.getEQ()) goto loc_821804F0;
	// bl 0x82170868
	sub_82170868(ctx, base);
	// b 0x821804f0
	goto loc_821804F0;
loc_82180398:
	// cmpwi cr6,r28,5
	cr6.compare<int32_t>(r28.s32, 5, xer);
	// bne cr6,0x82180330
	if (!cr6.getEQ()) goto loc_82180330;
	// bl 0x8217fc18
	sub_8217FC18(ctx, base);
	// b 0x821804f0
	goto loc_821804F0;
loc_821803A8:
	// cmpwi cr6,r28,6
	cr6.compare<int32_t>(r28.s32, 6, xer);
	// bne cr6,0x82180330
	if (!cr6.getEQ()) goto loc_82180330;
	// li r3,6
	ctx.r3.s64 = 6;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// stw r3,12(r24)
	PPC_STORE_U32(r24.u32 + 12, ctx.r3.u32);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,884
	ctx.r3.s64 = ctx.r3.s64 + 884;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// b 0x821804f0
	goto loc_821804F0;
loc_821803D4:
	// cmpwi cr6,r28,7
	cr6.compare<int32_t>(r28.s32, 7, xer);
	// bne cr6,0x82180330
	if (!cr6.getEQ()) goto loc_82180330;
	// li r3,7
	ctx.r3.s64 = 7;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821804f0
	if (cr6.getEQ()) goto loc_821804F0;
	// bl 0x821708c8
	sub_821708C8(ctx, base);
	// b 0x821804f0
	goto loc_821804F0;
loc_821803F8:
	// cmpwi cr6,r28,8
	cr6.compare<int32_t>(r28.s32, 8, xer);
	// bne cr6,0x82180330
	if (!cr6.getEQ()) goto loc_82180330;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82139ad8
	sub_82139AD8(ctx, base);
	// b 0x821804f0
	goto loc_821804F0;
loc_82180414:
	// cmpwi cr6,r28,9
	cr6.compare<int32_t>(r28.s32, 9, xer);
	// beq cr6,0x82180434
	if (cr6.getEQ()) goto loc_82180434;
	// cmpwi cr6,r28,10
	cr6.compare<int32_t>(r28.s32, 10, xer);
	// beq cr6,0x82180434
	if (cr6.getEQ()) goto loc_82180434;
	// bl 0x8215fd50
	sub_8215FD50(ctx, base);
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x8215fbd0
	sub_8215FBD0(ctx, base);
	// b 0x821804f0
	goto loc_821804F0;
loc_82180434:
	// li r3,9
	ctx.r3.s64 = 9;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821804f0
	if (cr6.getEQ()) goto loc_821804F0;
	// bl 0x8217c108
	sub_8217C108(ctx, base);
	// bl 0x8217bf10
	sub_8217BF10(ctx, base);
	// b 0x821804f0
	goto loc_821804F0;
loc_82180458:
	// cmpwi cr6,r28,10
	cr6.compare<int32_t>(r28.s32, 10, xer);
	// bne cr6,0x82180330
	if (!cr6.getEQ()) goto loc_82180330;
	// li r22,1
	r22.s64 = 1;
	// b 0x821804f0
	goto loc_821804F0;
loc_82180468:
	// cmpwi cr6,r28,11
	cr6.compare<int32_t>(r28.s32, 11, xer);
	// bne cr6,0x82180330
	if (!cr6.getEQ()) goto loc_82180330;
	// li r3,11
	ctx.r3.s64 = 11;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_82180498:
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x821804b4
	if (cr6.getEQ()) goto loc_821804B4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// mr r11,r23
	r11.u64 = r23.u64;
	// bne cr6,0x821804b8
	if (!cr6.getEQ()) goto loc_821804B8;
loc_821804B4:
	// li r11,1
	r11.s64 = 1;
loc_821804B8:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821804d4
	if (!cr6.getEQ()) goto loc_821804D4;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stb r23,793(r10)
	PPC_STORE_U8(ctx.r10.u32 + 793, r23.u8);
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82180498
	goto loc_82180498;
loc_821804D4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,14748
	r11.s64 = r11.s64 + 14748;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// b 0x821804f0
	goto loc_821804F0;
loc_821804E4:
	// li r3,12
	ctx.r3.s64 = 12;
	// li r22,1
	r22.s64 = 1;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
loc_821804F0:
	// clrlwi r11,r22,24
	r11.u64 = r22.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180618
	if (cr6.getEQ()) goto loc_82180618;
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8218052c
	if (!cr6.getEQ()) goto loc_8218052C;
	// lwz r11,29100(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 29100);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// bl 0x8217f318
	sub_8217F318(ctx, base);
	// lwz r11,29100(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 29100);
	// li r10,1
	ctx.r10.s64 = 1;
	// stb r10,172(r11)
	PPC_STORE_U8(r11.u32 + 172, ctx.r10.u8);
	// b 0x82180588
	goto loc_82180588;
loc_8218052C:
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x82180564
	if (!cr6.getEQ()) goto loc_82180564;
	// lwz r11,29100(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 29100);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// lwz r11,29100(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 29100);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,176
	ctx.r3.s64 = r11.s64 + 176;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// b 0x82180588
	goto loc_82180588;
loc_82180564:
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x82180578
	if (!cr6.getEQ()) goto loc_82180578;
	// bl 0x82170868
	sub_82170868(ctx, base);
	// b 0x82180588
	goto loc_82180588;
loc_82180578:
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// bne cr6,0x82180588
	if (!cr6.getEQ()) goto loc_82180588;
	// bl 0x821708c8
	sub_821708C8(ctx, base);
loc_82180588:
	// lwz r11,29100(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 29100);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,1276
	ctx.r3.s64 = r11.s64 + 1276;
	// mr r11,r23
	r11.u64 = r23.u64;
	// stw r11,28(r24)
	PPC_STORE_U32(r24.u32 + 28, r11.u32);
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x82180610
	if (cr6.getEQ()) goto loc_82180610;
	// cmpwi cr6,r28,11
	cr6.compare<int32_t>(r28.s32, 11, xer);
	// beq cr6,0x82180610
	if (cr6.getEQ()) goto loc_82180610;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// addi r3,r3,728
	ctx.r3.s64 = ctx.r3.s64 + 728;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180618
	if (cr6.getEQ()) goto loc_82180618;
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x821805ec
	if (cr6.getEQ()) goto loc_821805EC;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x821805f0
	if (!cr6.getEQ()) goto loc_821805F0;
loc_821805EC:
	// mr r11,r23
	r11.u64 = r23.u64;
loc_821805F0:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8218061c
	if (cr6.getEQ()) goto loc_8218061C;
	// li r11,1
	r11.s64 = 1;
	// stb r11,24(r24)
	PPC_STORE_U8(r24.u32 + 24, r11.u8);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed170
	return;
loc_82180610:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8217d900
	sub_8217D900(ctx, base);
loc_82180618:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
loc_8218061C:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_82180628"))) PPC_WEAK_FUNC(sub_82180628);
PPC_FUNC_IMPL(__imp__sub_82180628) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-368(r1)
	ea = -368 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r27,r11,30940
	r27.s64 = r11.s64 + 30940;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x821806ec
	if (cr6.getEQ()) goto loc_821806EC;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// beq cr6,0x821806ec
	if (cr6.getEQ()) goto loc_821806EC;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x821806ec
	if (cr6.getEQ()) goto loc_821806EC;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r25,0
	r25.s64 = 0;
	// addi r26,r11,-30556
	r26.s64 = r11.s64 + -30556;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// stb r25,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, r25.u8);
	// stw r26,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r26.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r4,184(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// addi r30,r11,29100
	r30.s64 = r11.s64 + 29100;
	// beq cr6,0x821806dc
	if (cr6.getEQ()) goto loc_821806DC;
loc_8218068C:
	// lbz r11,134(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 134);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821806b4
	if (cr6.getEQ()) goto loc_821806B4;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x8214f908
	sub_8214F908(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// li r4,1
	ctx.r4.s64 = 1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821806b8
	if (!cr6.getEQ()) goto loc_821806B8;
loc_821806B4:
	// li r4,0
	ctx.r4.s64 = 0;
loc_821806B8:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r11,228
	ctx.r3.s64 = r11.s64 + 228;
	// bl 0x82176d88
	sub_82176D88(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r4,184(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x8218068c
	if (!cr6.getEQ()) goto loc_8218068C;
loc_821806DC:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r11,-30572
	r28.s64 = r11.s64 + -30572;
	// stw r28,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r28.u32);
	// b 0x821807a8
	goto loc_821807A8;
loc_821806EC:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r25,0
	r25.s64 = 0;
	// addi r26,r11,-30556
	r26.s64 = r11.s64 + -30556;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stb r25,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, r25.u8);
	// stw r26,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r26.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r5,120(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// addi r30,r11,29100
	r30.s64 = r11.s64 + 29100;
	// beq cr6,0x8218079c
	if (cr6.getEQ()) goto loc_8218079C;
loc_82180720:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// addi r3,r11,228
	ctx.r3.s64 = r11.s64 + 228;
	// bl 0x82176d88
	sub_82176D88(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,280
	ctx.r3.s64 = r11.s64 + 280;
	// lwz r11,280(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 280);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180788
	if (!cr6.getEQ()) goto loc_82180788;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x8214f908
	sub_8214F908(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180788
	if (cr6.getEQ()) goto loc_82180788;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,280
	ctx.r3.s64 = r11.s64 + 280;
	// bl 0x82176d88
	sub_82176D88(ctx, base);
loc_82180788:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r5,120(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x82180720
	if (!cr6.getEQ()) goto loc_82180720;
loc_8218079C:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r11,-30572
	r28.s64 = r11.s64 + -30572;
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r28.u32);
loc_821807A8:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x821808e0
	if (!cr6.getEQ()) goto loc_821808E0;
	// li r4,1
	ctx.r4.s64 = 1;
	// stw r26,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, r26.u32);
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// stb r25,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, r25.u8);
	// li r29,1
	r29.s64 = 1;
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,216(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180874
	if (cr6.getEQ()) goto loc_82180874;
loc_821807D8:
	// lbz r10,134(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 134);
	// mr r31,r11
	r31.u64 = r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82180858
	if (cr6.getEQ()) goto loc_82180858;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180858
	if (!cr6.getEQ()) goto loc_82180858;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,176
	ctx.r3.s64 = r11.s64 + 176;
	// lwz r11,176(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 176);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180870
	if (!cr6.getEQ()) goto loc_82180870;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,28
	r11.u64 = ctx.r3.u32 & 0xF;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x82180870
	if (!cr6.getEQ()) goto loc_82180870;
loc_82180858:
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,216(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821807d8
	if (!cr6.getEQ()) goto loc_821807D8;
	// b 0x82180874
	goto loc_82180874;
loc_82180870:
	// mr r29,r25
	r29.u64 = r25.u64;
loc_82180874:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821808dc
	if (cr6.getEQ()) goto loc_821808DC;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x8214f828
	sub_8214F828(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821808dc
	if (cr6.getEQ()) goto loc_821808DC;
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821808dc
	if (cr6.getEQ()) goto loc_821808DC;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// stb r25,172(r11)
	PPC_STORE_U8(r11.u32 + 172, r25.u8);
	// bl 0x8217f318
	sub_8217F318(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r10,1
	ctx.r10.s64 = 1;
	// stb r10,172(r11)
	PPC_STORE_U8(r11.u32 + 172, ctx.r10.u8);
loc_821808DC:
	// stw r28,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, r28.u32);
loc_821808E0:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82180904
	if (cr6.getEQ()) goto loc_82180904;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82180904
	if (cr6.getEQ()) goto loc_82180904;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x82180948
	if (!cr6.getEQ()) goto loc_82180948;
loc_82180904:
	// lbz r11,18(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 18);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180948
	if (!cr6.getEQ()) goto loc_82180948;
	// lbz r11,17(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 17);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180948
	if (!cr6.getEQ()) goto loc_82180948;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x82180948
	if (!cr6.getEQ()) goto loc_82180948;
	// bl 0x8217d990
	sub_8217D990(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180948
	if (cr6.getEQ()) goto loc_82180948;
	// lbz r11,24(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180948
	if (!cr6.getEQ()) goto loc_82180948;
	// bl 0x8217f620
	sub_8217F620(ctx, base);
loc_82180948:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x82180b1c
	if (!cr6.getEQ()) goto loc_82180B1C;
	// bl 0x8217f4b8
	sub_8217F4B8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180974
	if (cr6.getEQ()) goto loc_82180974;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,176
	ctx.r3.s64 = r11.s64 + 176;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_82180974:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180b1c
	if (cr6.getEQ()) goto loc_82180B1C;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r26,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, r26.u32);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// stb r25,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, r25.u8);
	// li r29,1
	r29.s64 = 1;
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,200(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180a24
	if (cr6.getEQ()) goto loc_82180A24;
loc_821809B0:
	// lbz r10,134(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 134);
	// mr r31,r11
	r31.u64 = r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82180a08
	if (cr6.getEQ()) goto loc_82180A08;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180a08
	if (!cr6.getEQ()) goto loc_82180A08;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,176
	ctx.r3.s64 = r11.s64 + 176;
	// lwz r11,176(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 176);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180a20
	if (cr6.getEQ()) goto loc_82180A20;
loc_82180A08:
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,200(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821809b0
	if (!cr6.getEQ()) goto loc_821809B0;
	// b 0x82180a24
	goto loc_82180A24;
loc_82180A20:
	// mr r29,r25
	r29.u64 = r25.u64;
loc_82180A24:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180b18
	if (cr6.getEQ()) goto loc_82180B18;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r26,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r26.u32);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stb r25,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, r25.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r31,152(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82180acc
	if (cr6.getEQ()) goto loc_82180ACC;
loc_82180A50:
	// addi r3,r31,468
	ctx.r3.s64 = r31.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180ab0
	if (!cr6.getEQ()) goto loc_82180AB0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x8214f908
	sub_8214F908(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180ac8
	if (cr6.getEQ()) goto loc_82180AC8;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,28
	r11.u64 = ctx.r3.u32 & 0xF;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x82180ac8
	if (!cr6.getEQ()) goto loc_82180AC8;
loc_82180AB0:
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r31,152(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82180a50
	if (!cr6.getEQ()) goto loc_82180A50;
	// b 0x82180acc
	goto loc_82180ACC;
loc_82180AC8:
	// mr r29,r25
	r29.u64 = r25.u64;
loc_82180ACC:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180b14
	if (cr6.getEQ()) goto loc_82180B14;
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180b14
	if (cr6.getEQ()) goto loc_82180B14;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,176
	ctx.r3.s64 = r11.s64 + 176;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// bl 0x8217fb78
	sub_8217FB78(ctx, base);
loc_82180B14:
	// stw r28,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r28.u32);
loc_82180B18:
	// stw r28,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, r28.u32);
loc_82180B1C:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x82180bf0
	if (!cr6.getEQ()) goto loc_82180BF0;
	// bl 0x8215fd20
	sub_8215FD20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82180b84
	if (!cr6.getEQ()) goto loc_82180B84;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,988
	ctx.r3.s64 = r11.s64 + 988;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180b84
	if (cr6.getEQ()) goto loc_82180B84;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// lwz r11,1904(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1904);
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// beq cr6,0x82180b84
	if (cr6.getEQ()) goto loc_82180B84;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// lwz r11,1904(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1904);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82180bf0
	if (!cr6.getEQ()) goto loc_82180BF0;
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// b 0x82180bf0
	goto loc_82180BF0;
loc_82180B84:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r10,4
	ctx.r10.s64 = 4;
	// lwz r9,96(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 96);
	// stw r10,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82180bb4
	if (cr6.getEQ()) goto loc_82180BB4;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// clrlwi r11,r10,24
	r11.u64 = ctx.r10.u32 & 0xFF;
	// ori r4,r11,4
	ctx.r4.u64 = r11.u64 | 4;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_82180BB4:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82180be0
	if (cr6.getEQ()) goto loc_82180BE0;
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_82180BE0:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82180bf0
	if (cr6.getEQ()) goto loc_82180BF0;
	// bl 0x82170868
	sub_82170868(ctx, base);
loc_82180BF0:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82180c20
	if (!cr6.getEQ()) goto loc_82180C20;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180c20
	if (cr6.getEQ()) goto loc_82180C20;
	// li r3,17
	ctx.r3.s64 = 17;
	// bl 0x8215fbd0
	sub_8215FBD0(ctx, base);
	// bl 0x8215fd50
	sub_8215FD50(ctx, base);
loc_82180C20:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x82180d24
	if (!cr6.getEQ()) goto loc_82180D24;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180d24
	if (cr6.getEQ()) goto loc_82180D24;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180d24
	if (cr6.getEQ()) goto loc_82180D24;
	// bl 0x82170928
	sub_82170928(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180d24
	if (cr6.getEQ()) goto loc_82180D24;
	// lbz r11,18(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 18);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180d24
	if (cr6.getEQ()) goto loc_82180D24;
	// li r4,1
	ctx.r4.s64 = 1;
	// stw r26,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r26.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r25,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r25.u8);
	// li r29,1
	r29.s64 = 1;
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180d10
	if (cr6.getEQ()) goto loc_82180D10;
loc_82180C9C:
	// lbz r10,134(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 134);
	// mr r31,r11
	r31.u64 = r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82180cf4
	if (cr6.getEQ()) goto loc_82180CF4;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180cf4
	if (!cr6.getEQ()) goto loc_82180CF4;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,28
	r11.u64 = ctx.r3.u32 & 0xF;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bne cr6,0x82180d0c
	if (!cr6.getEQ()) goto loc_82180D0C;
loc_82180CF4:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180c9c
	if (!cr6.getEQ()) goto loc_82180C9C;
	// b 0x82180d10
	goto loc_82180D10;
loc_82180D0C:
	// mr r29,r25
	r29.u64 = r25.u64;
loc_82180D10:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180d20
	if (cr6.getEQ()) goto loc_82180D20;
	// bl 0x8217fc18
	sub_8217FC18(ctx, base);
loc_82180D20:
	// stw r28,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r28.u32);
loc_82180D24:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x82180dcc
	if (!cr6.getEQ()) goto loc_82180DCC;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180dcc
	if (cr6.getEQ()) goto loc_82180DCC;
	// bl 0x8217ff98
	sub_8217FF98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180dcc
	if (cr6.getEQ()) goto loc_82180DCC;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r10,6
	ctx.r10.s64 = 6;
	// lwz r9,96(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 96);
	// stw r10,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82180d88
	if (cr6.getEQ()) goto loc_82180D88;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// clrlwi r11,r10,24
	r11.u64 = ctx.r10.u32 & 0xFF;
	// ori r4,r11,6
	ctx.r4.u64 = r11.u64 | 6;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_82180D88:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82180db4
	if (cr6.getEQ()) goto loc_82180DB4;
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_82180DB4:
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// stw r3,12(r27)
	PPC_STORE_U32(r27.u32 + 12, ctx.r3.u32);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,884
	ctx.r3.s64 = ctx.r3.s64 + 884;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_82180DCC:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x82180f2c
	if (!cr6.getEQ()) goto loc_82180F2C;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r26,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r26.u32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stb r25,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, r25.u8);
	// li r29,1
	r29.s64 = 1;
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180e98
	if (cr6.getEQ()) goto loc_82180E98;
loc_82180DFC:
	// lbz r10,134(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 134);
	// mr r31,r11
	r31.u64 = r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82180e7c
	if (cr6.getEQ()) goto loc_82180E7C;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180e7c
	if (!cr6.getEQ()) goto loc_82180E7C;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,436
	ctx.r3.s64 = r11.s64 + 436;
	// lwz r11,436(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 436);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180e94
	if (!cr6.getEQ()) goto loc_82180E94;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,28
	r11.u64 = ctx.r3.u32 & 0xF;
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// bne cr6,0x82180e94
	if (!cr6.getEQ()) goto loc_82180E94;
loc_82180E7C:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180dfc
	if (!cr6.getEQ()) goto loc_82180DFC;
	// b 0x82180e98
	goto loc_82180E98;
loc_82180E94:
	// mr r29,r25
	r29.u64 = r25.u64;
loc_82180E98:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180f28
	if (cr6.getEQ()) goto loc_82180F28;
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180f28
	if (cr6.getEQ()) goto loc_82180F28;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r10,7
	ctx.r10.s64 = 7;
	// lwz r9,96(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 96);
	// stw r10,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82180eec
	if (cr6.getEQ()) goto loc_82180EEC;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// li r11,7
	r11.s64 = 7;
	// rlwinm r4,r10,4,0,27
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// rlwimi r4,r11,0,29,23
	ctx.r4.u64 = (__builtin_rotateleft32(r11.u32, 0) & 0xFFFFFFFFFFFFFF07) | (ctx.r4.u64 & 0xF8);
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_82180EEC:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82180f18
	if (cr6.getEQ()) goto loc_82180F18;
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_82180F18:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82180f28
	if (cr6.getEQ()) goto loc_82180F28;
	// bl 0x821708c8
	sub_821708C8(ctx, base);
loc_82180F28:
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r28.u32);
loc_82180F2C:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// bne cr6,0x821810b4
	if (!cr6.getEQ()) goto loc_821810B4;
	// bl 0x8217f4b8
	sub_8217F4B8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82180f58
	if (cr6.getEQ()) goto loc_82180F58;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,436
	ctx.r3.s64 = r11.s64 + 436;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_82180F58:
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r26,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r26.u32);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stb r25,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, r25.u8);
	// li r29,1
	r29.s64 = 1;
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181018
	if (cr6.getEQ()) goto loc_82181018;
loc_82180F7C:
	// lbz r10,134(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 134);
	// mr r31,r11
	r31.u64 = r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82180ffc
	if (cr6.getEQ()) goto loc_82180FFC;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180ffc
	if (!cr6.getEQ()) goto loc_82180FFC;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,436
	ctx.r3.s64 = r11.s64 + 436;
	// lwz r11,436(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 436);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181014
	if (cr6.getEQ()) goto loc_82181014;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,28
	r11.u64 = ctx.r3.u32 & 0xF;
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// bne cr6,0x82181014
	if (!cr6.getEQ()) goto loc_82181014;
loc_82180FFC:
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82180f7c
	if (!cr6.getEQ()) goto loc_82180F7C;
	// b 0x82181018
	goto loc_82181018;
loc_82181014:
	// mr r29,r25
	r29.u64 = r25.u64;
loc_82181018:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821810b0
	if (cr6.getEQ()) goto loc_821810B0;
	// bl 0x82170a18
	sub_82170A18(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821810b0
	if (cr6.getEQ()) goto loc_821810B0;
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821810b0
	if (cr6.getEQ()) goto loc_821810B0;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r10,8
	ctx.r10.s64 = 8;
	// lwz r9,96(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 96);
	// stw r10,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x8218107c
	if (cr6.getEQ()) goto loc_8218107C;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// clrlwi r11,r10,24
	r11.u64 = ctx.r10.u32 & 0xFF;
	// ori r4,r11,8
	ctx.r4.u64 = r11.u64 | 8;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_8218107C:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821810a8
	if (cr6.getEQ()) goto loc_821810A8;
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_821810A8:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82139ad8
	sub_82139AD8(ctx, base);
loc_821810B0:
	// stw r28,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r28.u32);
loc_821810B4:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// bne cr6,0x821811f4
	if (!cr6.getEQ()) goto loc_821811F4;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821811f4
	if (cr6.getEQ()) goto loc_821811F4;
	// li r4,1
	ctx.r4.s64 = 1;
	// stw r26,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r26.u32);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// stb r25,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, r25.u8);
	// li r29,1
	r29.s64 = 1;
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,168(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181170
	if (cr6.getEQ()) goto loc_82181170;
loc_821810FC:
	// lbz r10,134(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 134);
	// mr r31,r11
	r31.u64 = r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82181154
	if (cr6.getEQ()) goto loc_82181154;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82181154
	if (!cr6.getEQ()) goto loc_82181154;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,28
	r11.u64 = ctx.r3.u32 & 0xF;
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x8218116c
	if (!cr6.getEQ()) goto loc_8218116C;
loc_82181154:
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,168(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821810fc
	if (!cr6.getEQ()) goto loc_821810FC;
	// b 0x82181170
	goto loc_82181170;
loc_8218116C:
	// mr r29,r25
	r29.u64 = r25.u64;
loc_82181170:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821811f0
	if (cr6.getEQ()) goto loc_821811F0;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r10,9
	ctx.r10.s64 = 9;
	// lwz r9,96(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 96);
	// stw r10,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x821811ac
	if (cr6.getEQ()) goto loc_821811AC;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// clrlwi r11,r10,24
	r11.u64 = ctx.r10.u32 & 0xFF;
	// ori r4,r11,9
	ctx.r4.u64 = r11.u64 | 9;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_821811AC:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821811d8
	if (cr6.getEQ()) goto loc_821811D8;
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_821811D8:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821811f0
	if (cr6.getEQ()) goto loc_821811F0;
	// bl 0x8217c108
	sub_8217C108(ctx, base);
	// bl 0x8217bf10
	sub_8217BF10(ctx, base);
loc_821811F0:
	// stw r28,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r28.u32);
loc_821811F4:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r28,r11,14756
	r28.s64 = r11.s64 + 14756;
	// bne cr6,0x82181364
	if (!cr6.getEQ()) goto loc_82181364;
	// li r31,1
	r31.s64 = 1;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821812c4
	if (cr6.getEQ()) goto loc_821812C4;
	// mr r31,r25
	r31.u64 = r25.u64;
	// stw r28,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, r28.u32);
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8218128c
	if (!cr6.getEQ()) goto loc_8218128C;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_82181244:
	// lwz r10,252(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 252);
	// lwz r11,256(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 256);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x82181260
	if (cr6.getEQ()) goto loc_82181260;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// mr r11,r25
	r11.u64 = r25.u64;
	// bne cr6,0x82181264
	if (!cr6.getEQ()) goto loc_82181264;
loc_82181260:
	// li r11,1
	r11.s64 = 1;
loc_82181264:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8218128c
	if (!cr6.getEQ()) goto loc_8218128C;
	// lbz r11,848(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 848);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181280
	if (cr6.getEQ()) goto loc_82181280;
	// li r31,1
	r31.s64 = 1;
loc_82181280:
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82181244
	goto loc_82181244;
loc_8218128C:
	// bl 0x8217c108
	sub_8217C108(ctx, base);
	// bl 0x8217bd80
	sub_8217BD80(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821812b0
	if (!cr6.getEQ()) goto loc_821812B0;
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// li r10,1
	ctx.r10.s64 = 1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821812b4
	if (cr6.getEQ()) goto loc_821812B4;
loc_821812B0:
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
loc_821812B4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// clrlwi r31,r10,24
	r31.u64 = ctx.r10.u32 & 0xFF;
	// addi r11,r11,14748
	r11.s64 = r11.s64 + 14748;
	// stw r11,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, r11.u32);
loc_821812C4:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181364
	if (cr6.getEQ()) goto loc_82181364;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r10,10
	ctx.r10.s64 = 10;
	// lwz r9,96(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 96);
	// stw r10,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82181300
	if (cr6.getEQ()) goto loc_82181300;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// clrlwi r11,r10,24
	r11.u64 = ctx.r10.u32 & 0xFF;
	// ori r4,r11,10
	ctx.r4.u64 = r11.u64 | 10;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_82181300:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8218132c
	if (cr6.getEQ()) goto loc_8218132C;
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_8218132C:
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x82181364
	if (!cr6.getEQ()) goto loc_82181364;
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lbz r11,1164(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 1164);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181364
	if (cr6.getEQ()) goto loc_82181364;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// bl 0x8214d518
	sub_8214D518(ctx, base);
loc_82181364:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bne cr6,0x821814dc
	if (!cr6.getEQ()) goto loc_821814DC;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821814dc
	if (cr6.getEQ()) goto loc_821814DC;
	// li r4,1
	ctx.r4.s64 = 1;
	// stw r26,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, r26.u32);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// stb r25,236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 236, r25.u8);
	// li r29,1
	r29.s64 = 1;
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,232(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181420
	if (cr6.getEQ()) goto loc_82181420;
loc_821813AC:
	// lbz r10,134(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 134);
	// mr r31,r11
	r31.u64 = r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82181404
	if (cr6.getEQ()) goto loc_82181404;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82181404
	if (!cr6.getEQ()) goto loc_82181404;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,28
	r11.u64 = ctx.r3.u32 & 0xF;
	// cmplwi cr6,r11,10
	cr6.compare<uint32_t>(r11.u32, 10, xer);
	// bne cr6,0x8218141c
	if (!cr6.getEQ()) goto loc_8218141C;
loc_82181404:
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,232(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821813ac
	if (!cr6.getEQ()) goto loc_821813AC;
	// b 0x82181420
	goto loc_82181420;
loc_8218141C:
	// mr r29,r25
	r29.u64 = r25.u64;
loc_82181420:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821814dc
	if (cr6.getEQ()) goto loc_821814DC;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r10,11
	ctx.r10.s64 = 11;
	// lwz r9,96(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 96);
	// stw r10,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x8218145c
	if (cr6.getEQ()) goto loc_8218145C;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// addi r3,r11,68
	ctx.r3.s64 = r11.s64 + 68;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// clrlwi r11,r10,24
	r11.u64 = ctx.r10.u32 & 0xFF;
	// ori r4,r11,11
	ctx.r4.u64 = r11.u64 | 11;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_8218145C:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82181488
	if (cr6.getEQ()) goto loc_82181488;
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_82181488:
	// li r6,2
	ctx.r6.s64 = 2;
	// stw r28,272(r1)
	PPC_STORE_U32(ctx.r1.u32 + 272, r28.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_821814A0:
	// lwz r10,284(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 284);
	// lwz r11,288(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 288);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x821814bc
	if (cr6.getEQ()) goto loc_821814BC;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// mr r11,r25
	r11.u64 = r25.u64;
	// bne cr6,0x821814c0
	if (!cr6.getEQ()) goto loc_821814C0;
loc_821814BC:
	// li r11,1
	r11.s64 = 1;
loc_821814C0:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821814dc
	if (!cr6.getEQ()) goto loc_821814DC;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// stb r25,793(r10)
	PPC_STORE_U8(ctx.r10.u32 + 793, r25.u8);
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x821814a0
	goto loc_821814A0;
loc_821814DC:
	// addi r1,r1,368
	ctx.r1.s64 = ctx.r1.s64 + 368;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_821814E8"))) PPC_WEAK_FUNC(sub_821814E8);
PPC_FUNC_IMPL(__imp__sub_821814E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31993
	r31.s64 = -2096693248;
	// lwz r11,29100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 29100);
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// clrlwi r28,r3,28
	r28.u64 = ctx.r3.u32 & 0xF;
	// addi r29,r11,30940
	r29.s64 = r11.s64 + 30940;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82181534
	if (cr6.getEQ()) goto loc_82181534;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// bne cr6,0x82181548
	if (!cr6.getEQ()) goto loc_82181548;
loc_82181534:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x82181548
	if (cr6.getEQ()) goto loc_82181548;
	// cmpwi cr6,r28,11
	cr6.compare<int32_t>(r28.s32, 11, xer);
	// beq cr6,0x82181548
	if (cr6.getEQ()) goto loc_82181548;
	// bl 0x8217faf0
	sub_8217FAF0(ctx, base);
loc_82181548:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// li r27,0
	r27.s64 = 0;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82181570
	if (!cr6.getEQ()) goto loc_82181570;
	// cmpwi cr6,r28,1
	cr6.compare<int32_t>(r28.s32, 1, xer);
	// beq cr6,0x8218188c
	if (cr6.getEQ()) goto loc_8218188C;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// lwz r11,29100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 29100);
	// stb r27,172(r11)
	PPC_STORE_U8(r11.u32 + 172, r27.u8);
loc_82181570:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x82181600
	if (!cr6.getEQ()) goto loc_82181600;
	// lwz r11,29100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 29100);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821815e4
	if (cr6.getEQ()) goto loc_821815E4;
	// lwz r11,29100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 29100);
	// lbz r11,172(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 172);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821815c4
	if (!cr6.getEQ()) goto loc_821815C4;
	// bl 0x8217f318
	sub_8217F318(ctx, base);
	// lwz r11,29100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 29100);
	// li r10,1
	ctx.r10.s64 = 1;
	// stb r10,172(r11)
	PPC_STORE_U8(r11.u32 + 172, ctx.r10.u8);
	// b 0x821815e4
	goto loc_821815E4;
loc_821815C4:
	// bl 0x8217f4b8
	sub_8217F4B8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821815e4
	if (cr6.getEQ()) goto loc_821815E4;
	// lwz r11,29100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 29100);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,176
	ctx.r3.s64 = r11.s64 + 176;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_821815E4:
	// cmpwi cr6,r28,2
	cr6.compare<int32_t>(r28.s32, 2, xer);
	// beq cr6,0x82181600
	if (cr6.getEQ()) goto loc_82181600;
	// lwz r11,29100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 29100);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,176
	ctx.r3.s64 = r11.s64 + 176;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// bl 0x8217fb78
	sub_8217FB78(ctx, base);
loc_82181600:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x82181644
	if (!cr6.getEQ()) goto loc_82181644;
	// cmpwi cr6,r28,12
	cr6.compare<int32_t>(r28.s32, 12, xer);
	// bne cr6,0x82181624
	if (!cr6.getEQ()) goto loc_82181624;
	// li r3,17
	ctx.r3.s64 = 17;
	// bl 0x8215fbd0
	sub_8215FBD0(ctx, base);
	// bl 0x8215fd50
	sub_8215FD50(ctx, base);
	// b 0x82181644
	goto loc_82181644;
loc_82181624:
	// cmpwi cr6,r28,3
	cr6.compare<int32_t>(r28.s32, 3, xer);
	// beq cr6,0x8218188c
	if (cr6.getEQ()) goto loc_8218188C;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82181644
	if (cr6.getEQ()) goto loc_82181644;
	// bl 0x82170868
	sub_82170868(ctx, base);
loc_82181644:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x8218165c
	if (!cr6.getEQ()) goto loc_8218165C;
	// cmpwi cr6,r28,4
	cr6.compare<int32_t>(r28.s32, 4, xer);
	// beq cr6,0x8218188c
	if (cr6.getEQ()) goto loc_8218188C;
	// bl 0x8217fc18
	sub_8217FC18(ctx, base);
loc_8218165C:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x82181690
	if (!cr6.getEQ()) goto loc_82181690;
	// cmpwi cr6,r28,5
	cr6.compare<int32_t>(r28.s32, 5, xer);
	// beq cr6,0x8218188c
	if (cr6.getEQ()) goto loc_8218188C;
	// li r3,6
	ctx.r3.s64 = 6;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// stw r3,12(r29)
	PPC_STORE_U32(r29.u32 + 12, ctx.r3.u32);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,884
	ctx.r3.s64 = ctx.r3.s64 + 884;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_82181690:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x821816bc
	if (!cr6.getEQ()) goto loc_821816BC;
	// cmpwi cr6,r28,6
	cr6.compare<int32_t>(r28.s32, 6, xer);
	// beq cr6,0x8218188c
	if (cr6.getEQ()) goto loc_8218188C;
	// li r3,7
	ctx.r3.s64 = 7;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821816bc
	if (cr6.getEQ()) goto loc_821816BC;
	// bl 0x821708c8
	sub_821708C8(ctx, base);
loc_821816BC:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// bne cr6,0x82181700
	if (!cr6.getEQ()) goto loc_82181700;
	// bl 0x8217f4b8
	sub_8217F4B8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821816e8
	if (cr6.getEQ()) goto loc_821816E8;
	// lwz r11,29100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 29100);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,436
	ctx.r3.s64 = r11.s64 + 436;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_821816E8:
	// cmpwi cr6,r28,7
	cr6.compare<int32_t>(r28.s32, 7, xer);
	// beq cr6,0x82181700
	if (cr6.getEQ()) goto loc_82181700;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82139ad8
	sub_82139AD8(ctx, base);
loc_82181700:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// bne cr6,0x82181734
	if (!cr6.getEQ()) goto loc_82181734;
	// cmpwi cr6,r28,8
	cr6.compare<int32_t>(r28.s32, 8, xer);
	// beq cr6,0x8218188c
	if (cr6.getEQ()) goto loc_8218188C;
	// li r3,9
	ctx.r3.s64 = 9;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181734
	if (cr6.getEQ()) goto loc_82181734;
	// bl 0x8217c108
	sub_8217C108(ctx, base);
	// bl 0x8217bf10
	sub_8217BF10(ctx, base);
loc_82181734:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r30,r11,14756
	r30.s64 = r11.s64 + 14756;
	// bne cr6,0x82181814
	if (!cr6.getEQ()) goto loc_82181814;
	// li r31,1
	r31.s64 = 1;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181804
	if (cr6.getEQ()) goto loc_82181804;
	// mr r31,r27
	r31.u64 = r27.u64;
	// stw r30,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r30.u32);
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x821817cc
	if (!cr6.getEQ()) goto loc_821817CC;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_82181784:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x821817a0
	if (cr6.getEQ()) goto loc_821817A0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// mr r11,r27
	r11.u64 = r27.u64;
	// bne cr6,0x821817a4
	if (!cr6.getEQ()) goto loc_821817A4;
loc_821817A0:
	// li r11,1
	r11.s64 = 1;
loc_821817A4:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821817cc
	if (!cr6.getEQ()) goto loc_821817CC;
	// lbz r11,848(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 848);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821817c0
	if (cr6.getEQ()) goto loc_821817C0;
	// li r31,1
	r31.s64 = 1;
loc_821817C0:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82181784
	goto loc_82181784;
loc_821817CC:
	// bl 0x8217c108
	sub_8217C108(ctx, base);
	// bl 0x8217bd80
	sub_8217BD80(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821817f0
	if (!cr6.getEQ()) goto loc_821817F0;
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// li r10,1
	ctx.r10.s64 = 1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821817f4
	if (cr6.getEQ()) goto loc_821817F4;
loc_821817F0:
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
loc_821817F4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// clrlwi r31,r10,24
	r31.u64 = ctx.r10.u32 & 0xFF;
	// addi r11,r11,14748
	r11.s64 = r11.s64 + 14748;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
loc_82181804:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181814
	if (cr6.getEQ()) goto loc_82181814;
	// bl 0x8217fcd8
	sub_8217FCD8(ctx, base);
loc_82181814:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bne cr6,0x8218188c
	if (!cr6.getEQ()) goto loc_8218188C;
	// cmpwi cr6,r28,10
	cr6.compare<int32_t>(r28.s32, 10, xer);
	// beq cr6,0x8218188c
	if (cr6.getEQ()) goto loc_8218188C;
	// cmpwi cr6,r28,9
	cr6.compare<int32_t>(r28.s32, 9, xer);
	// beq cr6,0x8218188c
	if (cr6.getEQ()) goto loc_8218188C;
	// li r3,11
	ctx.r3.s64 = 11;
	// bl 0x8217f0d0
	sub_8217F0D0(ctx, base);
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r30,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r30.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_82181850:
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8218186c
	if (cr6.getEQ()) goto loc_8218186C;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// mr r11,r27
	r11.u64 = r27.u64;
	// bne cr6,0x82181870
	if (!cr6.getEQ()) goto loc_82181870;
loc_8218186C:
	// li r11,1
	r11.s64 = 1;
loc_82181870:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8218188c
	if (!cr6.getEQ()) goto loc_8218188C;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stb r27,793(r10)
	PPC_STORE_U8(ctx.r10.u32 + 793, r27.u8);
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82181850
	goto loc_82181850;
loc_8218188C:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82181898"))) PPC_WEAK_FUNC(sub_82181898);
PPC_FUNC_IMPL(__imp__sub_82181898) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181a6c
	if (cr6.getEQ()) goto loc_82181A6C;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82181a6c
	if (cr6.getEQ()) goto loc_82181A6C;
	// bl 0x8217fe20
	sub_8217FE20(ctx, base);
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r30,-31993
	r30.s64 = -2096693248;
	// beq cr6,0x82181928
	if (cr6.getEQ()) goto loc_82181928;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// addi r3,r11,1276
	ctx.r3.s64 = r11.s64 + 1276;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181928
	if (cr6.getEQ()) goto loc_82181928;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// addi r3,r11,1276
	ctx.r3.s64 = r11.s64 + 1276;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181928
	if (cr6.getEQ()) goto loc_82181928;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,1276
	ctx.r3.s64 = r11.s64 + 1276;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_82181928:
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r31,r11,30940
	r31.s64 = r11.s64 + 30940;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8218197c
	if (cr6.getEQ()) goto loc_8218197C;
	// bl 0x821603d8
	sub_821603D8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82181994
	if (!cr6.getEQ()) goto loc_82181994;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// addi r3,r11,1276
	ctx.r3.s64 = r11.s64 + 1276;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181994
	if (cr6.getEQ()) goto loc_82181994;
	// li r11,0
	r11.s64 = 0;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// b 0x82181994
	goto loc_82181994;
loc_8218197C:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82181990
	if (cr6.getEQ()) goto loc_82181990;
	// bl 0x82180628
	sub_82180628(ctx, base);
	// b 0x82181994
	goto loc_82181994;
loc_82181990:
	// bl 0x821814e8
	sub_821814E8(ctx, base);
loc_82181994:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x821819cc
	if (cr6.getEQ()) goto loc_821819CC;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x821819cc
	if (cr6.getEQ()) goto loc_821819CC;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// beq cr6,0x821819cc
	if (cr6.getEQ()) goto loc_821819CC;
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// beq cr6,0x821819cc
	if (cr6.getEQ()) goto loc_821819CC;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// beq cr6,0x821819cc
	if (cr6.getEQ()) goto loc_821819CC;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x821819d0
	if (!cr6.getEQ()) goto loc_821819D0;
loc_821819CC:
	// li r11,1
	r11.s64 = 1;
loc_821819D0:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181a6c
	if (cr6.getEQ()) goto loc_82181A6C;
	// lbz r11,18(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 18);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181a6c
	if (cr6.getEQ()) goto loc_82181A6C;
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82181a6c
	if (!cr6.getEQ()) goto loc_82181A6C;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// subf r10,r11,r3
	ctx.r10.s64 = ctx.r3.s64 - r11.s64;
	// lis r11,-32019
	r11.s64 = -2098397184;
	// lwz r11,26496(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 26496);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// ble cr6,0x82181a6c
	if (!cr6.getGT()) goto loc_82181A6C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_82181A34:
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x82181a50
	if (cr6.getEQ()) goto loc_82181A50;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x82181a54
	if (!cr6.getEQ()) goto loc_82181A54;
loc_82181A50:
	// li r11,1
	r11.s64 = 1;
loc_82181A54:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82181a6c
	if (!cr6.getEQ()) goto loc_82181A6C;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82181a34
	goto loc_82181A34;
loc_82181A6C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82181A88"))) PPC_WEAK_FUNC(sub_82181A88);
PPC_FUNC_IMPL(__imp__sub_82181A88) {
	PPC_FUNC_PROLOGUE();
	// li r3,93
	ctx.r3.s64 = 93;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82181A90"))) PPC_WEAK_FUNC(sub_82181A90);
PPC_FUNC_IMPL(__imp__sub_82181A90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,52(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,5
	ctx.r5.s64 = 5;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,44(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,48(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 48);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,48(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 48);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82181b40
	if (!cr6.getEQ()) goto loc_82181B40;
	// lbz r11,41(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 41);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lbz r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 40);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
loc_82181B40:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82181B58"))) PPC_WEAK_FUNC(sub_82181B58);
PPC_FUNC_IMPL(__imp__sub_82181B58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,5
	ctx.r4.s64 = 5;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,52(r30)
	PPC_STORE_U32(r30.u32 + 52, r11.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,44(r30)
	PPC_STORE_U32(r30.u32 + 44, r11.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// subfic r11,r3,0
	xer.ca = ctx.r3.u32 <= 0;
	r11.s64 = 0 - ctx.r3.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stb r11,48(r30)
	PPC_STORE_U8(r30.u32 + 48, r11.u8);
	// bne cr6,0x82181bf8
	if (!cr6.getEQ()) goto loc_82181BF8;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// subfic r11,r3,0
	xer.ca = ctx.r3.u32 <= 0;
	r11.s64 = 0 - ctx.r3.s64;
	// li r4,8
	ctx.r4.s64 = 8;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// stb r11,41(r30)
	PPC_STORE_U8(r30.u32 + 41, r11.u8);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// stb r3,40(r30)
	PPC_STORE_U8(r30.u32 + 40, ctx.r3.u8);
loc_82181BF8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82181C10"))) PPC_WEAK_FUNC(sub_82181C10);
PPC_FUNC_IMPL(__imp__sub_82181C10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,56
	ctx.r3.s64 = 56;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82181c8c
	if (cr6.getEQ()) goto loc_82181C8C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-22816
	ctx.r10.s64 = r11.s64 + -22816;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stb r11,40(r3)
	PPC_STORE_U8(ctx.r3.u32 + 40, r11.u8);
	// stb r11,41(r3)
	PPC_STORE_U8(ctx.r3.u32 + 41, r11.u8);
	// stw r11,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, r11.u32);
	// stb r11,48(r3)
	PPC_STORE_U8(ctx.r3.u32 + 48, r11.u8);
	// stw r11,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82181C8C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82181CA0"))) PPC_WEAK_FUNC(sub_82181CA0);
PPC_FUNC_IMPL(__imp__sub_82181CA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r4,65
	r11.s64 = ctx.r4.s64 + 65;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r11,r3
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// cmplw cr6,r5,r10
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r10.u32, xer);
	// beq cr6,0x82181d80
	if (cr6.getEQ()) goto loc_82181D80;
	// addi r10,r4,1
	ctx.r10.s64 = ctx.r4.s64 + 1;
	// stwx r5,r11,r3
	PPC_STORE_U32(r11.u32 + ctx.r3.u32, ctx.r5.u32);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r10,r3
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r3.u32);
	// bl 0x820cf1a0
	sub_820CF1A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82181d80
	if (cr6.getEQ()) goto loc_82181D80;
	// lwz r31,8(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82181d80
	if (cr6.getEQ()) goto loc_82181D80;
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,42
	cr6.compare<uint32_t>(r11.u32, 42, xer);
	// beq cr6,0x82181d64
	if (cr6.getEQ()) goto loc_82181D64;
	// cmplwi cr6,r11,47
	cr6.compare<uint32_t>(r11.u32, 47, xer);
	// beq cr6,0x82181d64
	if (cr6.getEQ()) goto loc_82181D64;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r10,r11,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// beq cr6,0x82181d24
	if (cr6.getEQ()) goto loc_82181D24;
	// ori r10,r10,256
	ctx.r10.u64 = ctx.r10.u64 | 256;
	// b 0x82181d28
	goto loc_82181D28;
loc_82181D24:
	// rlwinm r10,r10,0,24,22
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFEFF;
loc_82181D28:
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// clrlwi r10,r11,25
	ctx.r10.u64 = r11.u32 & 0x7F;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// stb r10,2(r31)
	PPC_STORE_U8(r31.u32 + 2, ctx.r10.u8);
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// stfs f0,112(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 112, temp.u32);
	// bl 0x820dc5f0
	sub_820DC5F0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,16144(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16144);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f0,68(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 68, temp.u32);
	// lfs f0,16140(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16140);
	f0.f64 = double(temp.f32);
	// stfs f0,72(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 72, temp.u32);
	// b 0x82181d80
	goto loc_82181D80;
loc_82181D64:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820cca18
	sub_820CCA18(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820ced08
	sub_820CED08(ctx, base);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,21,19
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFF7FF;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
loc_82181D80:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82181D98"))) PPC_WEAK_FUNC(sub_82181D98);
PPC_FUNC_IMPL(__imp__sub_82181D98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r10,64
	ctx.r10.s64 = 64;
	// addi r11,r30,260
	r11.s64 = r30.s64 + 260;
	// li r8,-1
	ctx.r8.s64 = -1;
	// li r9,0
	ctx.r9.s64 = 0;
loc_82181DB8:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stw r8,-256(r11)
	PPC_STORE_U32(r11.u32 + -256, ctx.r8.u32);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82181db8
	if (!cr6.getEQ()) goto loc_82181DB8;
	// stw r9,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r9.u32);
	// bl 0x820cca38
	sub_820CCA38(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82181e50
	if (cr6.getEQ()) goto loc_82181E50;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r11,-22736
	r28.s64 = r11.s64 + -22736;
loc_82181DEC:
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// lwz r29,40(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x82181e44
	if (!cr6.getEQ()) goto loc_82181E44;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplwi cr6,r11,64
	cr6.compare<uint32_t>(r11.u32, 64, xer);
	// bge cr6,0x82181e3c
	if (!cr6.getLT()) goto loc_82181E3C;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x820dae70
	sub_820DAE70(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82181e44
	if (cr6.getEQ()) goto loc_82181E44;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r10,56(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r11,r30
	PPC_STORE_U32(r11.u32 + r30.u32, ctx.r10.u32);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// b 0x82181e44
	goto loc_82181E44;
loc_82181E3C:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82181E44:
	// mr r31,r29
	r31.u64 = r29.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x82181dec
	if (!cr6.getEQ()) goto loc_82181DEC;
loc_82181E50:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82181E58"))) PPC_WEAK_FUNC(sub_82181E58);
PPC_FUNC_IMPL(__imp__sub_82181E58) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r3,r11,30976
	ctx.r3.s64 = r11.s64 + 30976;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82181E68"))) PPC_WEAK_FUNC(sub_82181E68);
PPC_FUNC_IMPL(__imp__sub_82181E68) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// addi r12,r1,-72
	r12.s64 = ctx.r1.s64 + -72;
	// bl 0x823ed548
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// li r25,0
	r25.s64 = 0;
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// ble cr6,0x8218200c
	if (!cr6.getGT()) goto loc_8218200C;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r31,0
	r31.s64 = 0;
	// addi r26,r24,4
	r26.s64 = r24.s64 + 4;
	// lis r28,-31993
	r28.s64 = -2096693248;
	// lfs f28,2776(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	f28.f64 = double(temp.f32);
	// lfs f29,2944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	f29.f64 = double(temp.f32);
loc_82181EAC:
	// lwz r3,0(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x82181ff4
	if (cr6.getEQ()) goto loc_82181FF4;
	// bl 0x820cf1a0
	sub_820CF1A0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82181ff4
	if (cr6.getEQ()) goto loc_82181FF4;
	// lwz r27,8(r3)
	r27.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82181ff4
	if (cr6.getEQ()) goto loc_82181FF4;
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r3,r11,5020
	ctx.r3.s64 = r11.s64 + 5020;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lbz r11,2(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 2);
	// rlwinm r10,r3,30,26,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 30) & 0x3F;
	// lfs f0,112(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 112);
	f0.f64 = double(temp.f32);
	// rlwinm r11,r11,0,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// lfs f13,116(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 116);
	ctx.f13.f64 = double(temp.f32);
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// fmuls f30,f0,f29
	f30.f64 = double(float(f0.f64 * f29.f64));
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// bne cr6,0x82181f3c
	if (!cr6.getEQ()) goto loc_82181F3C;
	// lwz r11,100(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 100);
	// li r10,0
	ctx.r10.s64 = 0;
	// rlwinm r11,r11,0,20,20
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82181f40
	if (cr6.getEQ()) goto loc_82181F40;
loc_82181F3C:
	// li r10,1
	ctx.r10.s64 = 1;
loc_82181F40:
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// clrlwi r29,r10,24
	r29.u64 = ctx.r10.u32 & 0xFF;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r3,r11,5020
	ctx.r3.s64 = r11.s64 + 5020;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,29100(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 29100);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r3,r11,5020
	ctx.r3.s64 = r11.s64 + 5020;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r11,r3,31,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 31) & 0x1;
	// lwz r10,256(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 256);
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x82181ff4
	if (!cr6.getEQ()) goto loc_82181FF4;
	// clrlwi r30,r30,24
	r30.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82181fb8
	if (cr6.getEQ()) goto loc_82181FB8;
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82181fb8
	if (!cr6.getEQ()) goto loc_82181FB8;
	// li r5,1
	ctx.r5.s64 = 1;
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f29.f64;
	// b 0x82181fec
	goto loc_82181FEC;
loc_82181FB8:
	// fcmpu cr6,f30,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f30.f64, f31.f64);
	// bge cr6,0x82181ff4
	if (!cr6.getLT()) goto loc_82181FF4;
	// fsubs f1,f31,f30
	ctx.f1.f64 = double(float(f31.f64 - f30.f64));
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fcmpu cr6,f1,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f28.f64);
	// ble cr6,0x82181ff4
	if (!cr6.getGT()) goto loc_82181FF4;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82181ff4
	if (!cr6.getEQ()) goto loc_82181FF4;
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82181ff4
	if (!cr6.getEQ()) goto loc_82181FF4;
	// li r5,0
	ctx.r5.s64 = 0;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
loc_82181FEC:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820e16f0
	sub_820E16F0(ctx, base);
loc_82181FF4:
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// addi r31,r31,52
	r31.s64 = r31.s64 + 52;
	// cmplw cr6,r25,r11
	cr6.compare<uint32_t>(r25.u32, r11.u32, xer);
	// blt cr6,0x82181eac
	if (cr6.getLT()) goto loc_82181EAC;
loc_8218200C:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// addi r12,r1,-72
	r12.s64 = ctx.r1.s64 + -72;
	// bl 0x823ed594
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_82182020"))) PPC_WEAK_FUNC(sub_82182020);
PPC_FUNC_IMPL(__imp__sub_82182020) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8218214c
	if (cr6.getEQ()) goto loc_8218214C;
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r29
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + r29.u32);
	// bl 0x820cf1a0
	sub_820CF1A0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8218214c
	if (cr6.getEQ()) goto loc_8218214C;
	// lwz r31,8(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8218214c
	if (cr6.getEQ()) goto loc_8218214C;
	// clrlwi r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	// lfs f13,116(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 116);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,112(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	f31.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f1
	cr6.compare(f0.f64, ctx.f1.f64);
	// bge cr6,0x821820c0
	if (!cr6.getLT()) goto loc_821820C0;
	// clrlwi r11,r26,24
	r11.u64 = r26.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821820c0
	if (!cr6.getEQ()) goto loc_821820C0;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820e16f0
	sub_820E16F0(ctx, base);
loc_821820C0:
	// lfs f0,112(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	f0.f64 = double(temp.f32);
	// lfs f13,116(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 116);
	ctx.f13.f64 = double(temp.f32);
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x821820e0
	if (!cr6.getGT()) goto loc_821820E0;
	// fmr f0,f31
	f0.f64 = f31.f64;
	// b 0x821820f4
	goto loc_821820F4;
loc_821820E0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x821820f4
	if (!cr6.getLT()) goto loc_821820F4;
	// fmr f0,f13
	f0.f64 = ctx.f13.f64;
loc_821820F4:
	// fctidz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// addi r11,r30,65
	r11.s64 = r30.s64 + 65;
	// clrlwi r10,r27,24
	ctx.r10.u64 = r27.u32 & 0xFF;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cntlzw r9,r10
	ctx.r9.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// mulli r10,r30,52
	ctx.r10.s64 = r30.s64 * 52;
	// lwzx r11,r11,r29
	r11.u64 = PPC_LOAD_U32(r11.u32 + r29.u32);
	// clrlwi r8,r11,24
	ctx.r8.u64 = r11.u32 & 0xFF;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// rlwinm r9,r9,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// xori r10,r9,1
	ctx.r10.u64 = ctx.r9.u64 ^ 1;
	// addi r3,r11,5020
	ctx.r3.s64 = r11.s64 + 5020;
	// lbz r11,87(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 87);
	// rlwinm r11,r11,1,24,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFE;
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// rlwinm r11,r11,1,24,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFE;
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// or r4,r11,r10
	ctx.r4.u64 = r11.u64 | ctx.r10.u64;
	// bl 0x821776c0
	sub_821776C0(ctx, base);
loc_8218214C:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82182158"))) PPC_WEAK_FUNC(sub_82182158);
PPC_FUNC_IMPL(__imp__sub_82182158) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821822c0
	if (cr6.getEQ()) goto loc_821822C0;
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// li r31,0
	r31.s64 = 0;
	// mr r30,r31
	r30.u64 = r31.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821822c0
	if (cr6.getEQ()) goto loc_821822C0;
	// addi r11,r27,4
	r11.s64 = r27.s64 + 4;
loc_82182190:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r9,r29
	cr6.compare<int32_t>(ctx.r9.s32, r29.s32, xer);
	// beq cr6,0x821821b4
	if (cr6.getEQ()) goto loc_821821B4;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplw cr6,r30,r10
	cr6.compare<uint32_t>(r30.u32, ctx.r10.u32, xer);
	// blt cr6,0x82182190
	if (cr6.getLT()) goto loc_82182190;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
loc_821821B4:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x821822c0
	if (cr6.getLT()) goto loc_821822C0;
	// addi r11,r30,65
	r11.s64 = r30.s64 + 65;
	// mulli r10,r30,52
	ctx.r10.s64 = r30.s64 * 52;
	// rlwinm r29,r11,2,0,29
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r29,r27
	r11.u64 = PPC_LOAD_U32(r29.u32 + r27.u32);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// rlwinm r4,r9,1,24,30
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFE;
	// stwx r11,r29,r27
	PPC_STORE_U32(r29.u32 + r27.u32, r11.u32);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r3,r11,5020
	ctx.r3.s64 = r11.s64 + 5020;
	// bl 0x821776c0
	sub_821776C0(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r4,1
	ctx.r4.s64 = 1;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r31.u8);
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821822c0
	if (cr6.getEQ()) goto loc_821822C0;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// li r24,-1
	r24.s64 = -1;
	// addi r26,r10,-22816
	r26.s64 = ctx.r10.s64 + -22816;
	// li r25,1
	r25.s64 = 1;
loc_8218222C:
	// li r3,56
	ctx.r3.s64 = 56;
	// mr r23,r11
	r23.u64 = r11.u64;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8218228c
	if (cr6.getEQ()) goto loc_8218228C;
	// lwzx r11,r29,r27
	r11.u64 = PPC_LOAD_U32(r29.u32 + r27.u32);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// stw r24,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r24.u32);
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r26,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r26.u32);
	// stb r31,40(r3)
	PPC_STORE_U8(ctx.r3.u32 + 40, r31.u8);
	// stb r31,41(r3)
	PPC_STORE_U8(ctx.r3.u32 + 41, r31.u8);
	// stw r30,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, r30.u32);
	// stb r25,48(r3)
	PPC_STORE_U8(ctx.r3.u32 + 48, r25.u8);
	// stw r11,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, r11.u32);
	// b 0x82182290
	goto loc_82182290;
loc_8218228C:
	// mr r28,r31
	r28.u64 = r31.u64;
loc_82182290:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r4,16(r23)
	ctx.r4.u64 = PPC_LOAD_U32(r23.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8218222c
	if (!cr6.getEQ()) goto loc_8218222C;
loc_821822C0:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_821822C8"))) PPC_WEAK_FUNC(sub_821822C8);
PPC_FUNC_IMPL(__imp__sub_821822C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r31,0
	r31.s64 = 0;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r8,r31
	ctx.r8.u64 = r31.u64;
	// lwz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r30,r31
	r30.u64 = r31.u64;
	// mr r11,r31
	r11.u64 = r31.u64;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82182328
	if (cr6.getEQ()) goto loc_82182328;
	// addi r10,r29,4
	ctx.r10.s64 = r29.s64 + 4;
loc_82182300:
	// lwz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r7,r4
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r4.s32, xer);
	// beq cr6,0x82182320
	if (cr6.getEQ()) goto loc_82182320;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// blt cr6,0x82182300
	if (cr6.getLT()) goto loc_82182300;
	// b 0x82182328
	goto loc_82182328;
loc_82182320:
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r30,r11
	r30.u64 = r11.u64;
loc_82182328:
	// clrlwi r11,r8,24
	r11.u64 = ctx.r8.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82182400
	if (cr6.getEQ()) goto loc_82182400;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82182360
	if (cr6.getEQ()) goto loc_82182360;
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82182020
	sub_82182020(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_82182360:
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82182400
	if (cr6.getEQ()) goto loc_82182400;
	// li r3,56
	ctx.r3.s64 = 56;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821823e0
	if (cr6.getEQ()) goto loc_821823E0;
	// addi r10,r30,65
	ctx.r10.s64 = r30.s64 + 65;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-22816
	r11.s64 = r11.s64 + -22816;
	// li r9,-1
	ctx.r9.s64 = -1;
	// lwzx r10,r10,r29
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r29.u32);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// stb r28,40(r3)
	PPC_STORE_U8(ctx.r3.u32 + 40, r28.u8);
	// stb r27,41(r3)
	PPC_STORE_U8(ctx.r3.u32 + 41, r27.u8);
	// stw r30,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, r30.u32);
	// stb r31,48(r3)
	PPC_STORE_U8(ctx.r3.u32 + 48, r31.u8);
	// stw r10,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, ctx.r10.u32);
	// b 0x821823e4
	goto loc_821823E4;
loc_821823E0:
	// mr r29,r31
	r29.u64 = r31.u64;
loc_821823E4:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r4,16(r26)
	ctx.r4.u64 = PPC_LOAD_U32(r26.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_82182400:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82182408"))) PPC_WEAK_FUNC(sub_82182408);
PPC_FUNC_IMPL(__imp__sub_82182408) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lbz r10,48(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 48);
	// lwz r4,44(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r3,r10,30976
	ctx.r3.s64 = ctx.r10.s64 + 30976;
	// bne cr6,0x82182454
	if (!cr6.getEQ()) goto loc_82182454;
	// li r7,0
	ctx.r7.s64 = 0;
	// lbz r6,41(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 41);
	// lbz r5,40(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 40);
	// bl 0x82182020
	sub_82182020(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82182454:
	// lwz r5,52(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 52);
	// bl 0x82181ca0
	sub_82181CA0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82182470"))) PPC_WEAK_FUNC(sub_82182470);
PPC_FUNC_IMPL(__imp__sub_82182470) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r3,r11,31520
	ctx.r3.s64 = r11.s64 + 31520;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82182480"))) PPC_WEAK_FUNC(sub_82182480);
PPC_FUNC_IMPL(__imp__sub_82182480) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed110
	// stfd f30,-136(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -136, f30.u64);
	// stfd f31,-128(r1)
	PPC_STORE_U64(ctx.r1.u32 + -128, f31.u64);
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r24,0
	r24.s64 = 0;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r18,r4
	r18.u64 = ctx.r4.u64;
	// li r5,15
	ctx.r5.s64 = 15;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,113
	ctx.r3.s64 = ctx.r1.s64 + 113;
	// stb r24,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, r24.u8);
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r10,r1,100
	ctx.r10.s64 = ctx.r1.s64 + 100;
	// addi r11,r1,84
	r11.s64 = ctx.r1.s64 + 84;
	// mr r22,r24
	r22.u64 = r24.u64;
	// mr r20,r24
	r20.u64 = r24.u64;
	// lfs f0,2688(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stw r24,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r24.u32);
	// stw r24,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r24.u32);
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stw r24,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r24.u32);
	// stw r24,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r24.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f30,-22676(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -22676);
	f30.f64 = double(temp.f32);
	// addi r25,r11,-1384
	r25.s64 = r11.s64 + -1384;
	// lfs f31,16140(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16140);
	f31.f64 = double(temp.f32);
loc_821824FC:
	// cmpwi cr6,r20,2
	cr6.compare<int32_t>(r20.s32, 2, xer);
	// li r19,5000
	r19.s64 = 5000;
	// bne cr6,0x8218250c
	if (!cr6.getEQ()) goto loc_8218250C;
	// li r19,1000
	r19.s64 = 1000;
loc_8218250C:
	// mr r21,r24
	r21.u64 = r24.u64;
	// bl 0x820af868
	sub_820AF868(ctx, base);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82182664
	if (!cr6.getGT()) goto loc_82182664;
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// mr r27,r24
	r27.u64 = r24.u64;
	// add r23,r22,r11
	r23.u64 = r22.u64 + r11.u64;
loc_8218252C:
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r26
	r11.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x82182648
	if (!cr6.getEQ()) goto loc_82182648;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820af838
	sub_820AF838(ctx, base);
	// addi r11,r27,16
	r11.s64 = r27.s64 + 16;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// rlwinm r31,r11,2,0,29
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r28,r24
	r28.u64 = r24.u64;
	// lwzx r11,r31,r26
	r11.u64 = PPC_LOAD_U32(r31.u32 + r26.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82182578
	if (cr6.getEQ()) goto loc_82182578;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwzx r11,r31,r26
	r11.u64 = PPC_LOAD_U32(r31.u32 + r26.u32);
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// cmplw cr6,r11,r19
	cr6.compare<uint32_t>(r11.u32, r19.u32, xer);
	// bge cr6,0x82182578
	if (!cr6.getLT()) goto loc_82182578;
	// li r28,1
	r28.s64 = 1;
loc_82182578:
	// mr r30,r24
	r30.u64 = r24.u64;
	// mr r31,r25
	r31.u64 = r25.u64;
loc_82182580:
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// cmpw cr6,r3,r30
	cr6.compare<int32_t>(ctx.r3.s32, r30.s32, xer);
	// beq cr6,0x8218261c
	if (cr6.getEQ()) goto loc_8218261C;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8218261c
	if (cr6.getEQ()) goto loc_8218261C;
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8218261c
	if (cr6.getEQ()) goto loc_8218261C;
	// lwz r10,480(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x8218261c
	if (!cr6.getEQ()) goto loc_8218261C;
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f0,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,84(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// lfs f0,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lfs f0,12(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lfs f0,16(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,100(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lfs f0,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// bl 0x8238c5a8
	sub_8238C5A8(ctx, base);
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// bne cr6,0x8218260c
	if (!cr6.getEQ()) goto loc_8218260C;
	// fmr f0,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = f31.f64;
	// b 0x82182610
	goto loc_82182610;
loc_8218260C:
	// fmr f0,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = f30.f64;
loc_82182610:
	// fcmpu cr6,f1,f0
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x8218261c
	if (!cr6.getLT()) goto loc_8218261C;
	// li r28,1
	r28.s64 = 1;
loc_8218261C:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r11,r25,16
	r11.s64 = r25.s64 + 16;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x82182580
	if (cr6.getLT()) goto loc_82182580;
	// clrlwi r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82182648
	if (!cr6.getEQ()) goto loc_82182648;
	// stb r21,0(r23)
	PPC_STORE_U8(r23.u32 + 0, r21.u8);
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// addi r23,r23,1
	r23.s64 = r23.s64 + 1;
loc_82182648:
	// addi r11,r27,1
	r11.s64 = r27.s64 + 1;
	// extsb r21,r11
	r21.s64 = r11.s8;
	// mr r27,r21
	r27.u64 = r21.u64;
	// bl 0x820af868
	sub_820AF868(ctx, base);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpw cr6,r27,r11
	cr6.compare<int32_t>(r27.s32, r11.s32, xer);
	// blt cr6,0x8218252c
	if (cr6.getLT()) goto loc_8218252C;
loc_82182664:
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// bgt cr6,0x8218268c
	if (cr6.getGT()) goto loc_8218268C;
	// addi r20,r20,1
	r20.s64 = r20.s64 + 1;
	// cmpwi cr6,r20,3
	cr6.compare<int32_t>(r20.s32, 3, xer);
	// blt cr6,0x821824fc
	if (cr6.getLT()) goto loc_821824FC;
	// li r3,-1
	ctx.r3.s64 = -1;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f30,-136(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -136);
	// lfd f31,-128(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -128);
	// b 0x823ed160
	return;
loc_8218268C:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// divw r11,r3,r22
	r11.s32 = ctx.r3.s32 / r22.s32;
	// addi r9,r1,112
	ctx.r9.s64 = ctx.r1.s64 + 112;
	// lwz r8,104(r18)
	ctx.r8.u64 = PPC_LOAD_U32(r18.u32 + 104);
	// mullw r11,r11,r22
	r11.s64 = int64_t(r11.s32) * int64_t(r22.s32);
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// rotlwi r10,r3,1
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r3.u32, 1);
	// twllei r22,0
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lbzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + ctx.r9.u32);
	// andc r10,r22,r10
	ctx.r10.u64 = r22.u64 & ~ctx.r10.u64;
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// twlgei r10,-1
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r8,r11,r26
	PPC_STORE_U32(r11.u32 + r26.u32, ctx.r8.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f30,-136(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -136);
	// lfd f31,-128(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -128);
	// b 0x823ed160
	return;
}

__attribute__((alias("__imp__sub_821826D8"))) PPC_WEAK_FUNC(sub_821826D8);
PPC_FUNC_IMPL(__imp__sub_821826D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r29,104(r4)
	r29.u64 = PPC_LOAD_U32(ctx.r4.u32 + 104);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,16
	r30.s64 = 16;
	// li r28,-1
	r28.s64 = -1;
loc_821826F4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpw cr6,r11,r29
	cr6.compare<int32_t>(r11.s32, r29.s32, xer);
	// bne cr6,0x8218270c
	if (!cr6.getEQ()) goto loc_8218270C;
	// stw r28,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r28.u32);
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// stw r3,64(r31)
	PPC_STORE_U32(r31.u32 + 64, ctx.r3.u32);
loc_8218270C:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x821826f4
	if (!cr6.getEQ()) goto loc_821826F4;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82182728"))) PPC_WEAK_FUNC(sub_82182728);
PPC_FUNC_IMPL(__imp__sub_82182728) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82182768
	if (cr6.getEQ()) goto loc_82182768;
	// li r4,-1
	ctx.r4.s64 = -1;
	// addi r3,r31,1388
	ctx.r3.s64 = r31.s64 + 1388;
	// bl 0x82176e40
	sub_82176E40(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821826d8
	sub_821826D8(ctx, base);
loc_82182768:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82182780"))) PPC_WEAK_FUNC(sub_82182780);
PPC_FUNC_IMPL(__imp__sub_82182780) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// li r11,16
	r11.s64 = 16;
	// li r9,-1
	ctx.r9.s64 = -1;
	// li r10,0
	ctx.r10.s64 = 0;
loc_8218278C:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
	// stw r10,64(r3)
	PPC_STORE_U32(ctx.r3.u32 + 64, ctx.r10.u32);
	// addi r3,r3,4
	ctx.r3.s64 = ctx.r3.s64 + 4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8218278c
	if (!cr6.getEQ()) goto loc_8218278C;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821827A8"))) PPC_WEAK_FUNC(sub_821827A8);
PPC_FUNC_IMPL(__imp__sub_821827A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821828e8
	if (cr6.getEQ()) goto loc_821828E8;
	// mr r31,r28
	r31.u64 = r28.u64;
	// li r30,16
	r30.s64 = 16;
	// li r29,-1
	r29.s64 = -1;
loc_821827D0:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x821827ec
	if (cr6.getEQ()) goto loc_821827EC;
	// bl 0x82158ab8
	sub_82158AB8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x821827ec
	if (!cr6.getEQ()) goto loc_821827EC;
	// stw r29,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r29.u32);
loc_821827EC:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x821827d0
	if (!cr6.getEQ()) goto loc_821827D0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// li r29,0
	r29.s64 = 0;
loc_82182820:
	// lwz r31,92(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x8218283c
	if (cr6.getEQ()) goto loc_8218283C;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// mr r11,r29
	r11.u64 = r29.u64;
	// bne cr6,0x82182840
	if (!cr6.getEQ()) goto loc_82182840;
loc_8218283C:
	// li r11,1
	r11.s64 = 1;
loc_82182840:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821828e8
	if (!cr6.getEQ()) goto loc_821828E8;
	// addi r30,r31,1388
	r30.s64 = r31.s64 + 1388;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lbz r11,753(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 753);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821828b4
	if (!cr6.getEQ()) goto loc_821828B4;
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x821828dc
	if (!cr6.getEQ()) goto loc_821828DC;
	// lbz r10,140(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 140);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x821828b4
	if (!cr6.getEQ()) goto loc_821828B4;
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x821828dc
	if (!cr6.getEQ()) goto loc_821828DC;
	// clrlwi r11,r10,24
	r11.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821828dc
	if (!cr6.getEQ()) goto loc_821828DC;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x821826d8
	sub_821826D8(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82182820
	goto loc_82182820;
loc_821828B4:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82182480
	sub_82182480(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// extsb r11,r4
	r11.s64 = ctx.r4.s8;
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beq cr6,0x821828dc
	if (cr6.getEQ()) goto loc_821828DC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82176e40
	sub_82176E40(ctx, base);
	// stb r29,753(r31)
	PPC_STORE_U8(r31.u32 + 753, r29.u8);
loc_821828DC:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82182820
	goto loc_82182820;
loc_821828E8:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_821828F0"))) PPC_WEAK_FUNC(sub_821828F0);
PPC_FUNC_IMPL(__imp__sub_821828F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// li r11,-1
	r11.s64 = -1;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82182930
	if (cr6.getEQ()) goto loc_82182930;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r8,r9,-22672
	ctx.r8.s64 = ctx.r9.s64 + -22672;
loc_82182908:
	// lbz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// rlwinm r7,r11,24,8,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0xFFFFFF;
	// addi r4,r4,-1
	ctx.r4.s64 = ctx.r4.s64 + -1;
	// xor r11,r9,r11
	r11.u64 = ctx.r9.u64 ^ r11.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r11,r11,2,22,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0x3FC;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// lwzx r11,r11,r8
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// xor r11,r11,r7
	r11.u64 = r11.u64 ^ ctx.r7.u64;
	// bne cr6,0x82182908
	if (!cr6.getEQ()) goto loc_82182908;
loc_82182930:
	// not r3,r11
	ctx.r3.u64 = ~r11.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82182938"))) PPC_WEAK_FUNC(sub_82182938);
PPC_FUNC_IMPL(__imp__sub_82182938) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82182988
	if (cr6.getEQ()) goto loc_82182988;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x82183588
	sub_82183588(ctx, base);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x82182984
	if (!cr6.getLT()) goto loc_82182984;
	// li r11,0
	r11.s64 = 0;
loc_82182984:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
loc_82182988:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821829A0"))) PPC_WEAK_FUNC(sub_821829A0);
PPC_FUNC_IMPL(__imp__sub_821829A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,31680
	r30.s64 = r11.s64 + 31680;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183398
	sub_82183398(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82182abc
	if (!cr6.getEQ()) goto loc_82182ABC;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r30,r11,31704
	r30.s64 = r11.s64 + 31704;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183398
	sub_82183398(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82182abc
	if (!cr6.getEQ()) goto loc_82182ABC;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r30,r11,31800
	r30.s64 = r11.s64 + 31800;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183398
	sub_82183398(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82182abc
	if (!cr6.getEQ()) goto loc_82182ABC;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r30,r11,31656
	r30.s64 = r11.s64 + 31656;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183398
	sub_82183398(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82182abc
	if (!cr6.getEQ()) goto loc_82182ABC;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r30,r11,31752
	r30.s64 = r11.s64 + 31752;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183398
	sub_82183398(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82182abc
	if (!cr6.getEQ()) goto loc_82182ABC;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r30,r11,31776
	r30.s64 = r11.s64 + 31776;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183398
	sub_82183398(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82182abc
	if (!cr6.getEQ()) goto loc_82182ABC;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r30,r11,31728
	r30.s64 = r11.s64 + 31728;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183398
	sub_82183398(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82182abc
	if (!cr6.getEQ()) goto loc_82182ABC;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r30,r11,31824
	r30.s64 = r11.s64 + 31824;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183398
	sub_82183398(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82182ac4
	if (cr6.getEQ()) goto loc_82182AC4;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
loc_82182ABC:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183378
	sub_82183378(ctx, base);
loc_82182AC4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82182AE0"))) PPC_WEAK_FUNC(sub_82182AE0);
PPC_FUNC_IMPL(__imp__sub_82182AE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r4,0(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82182b20
	if (cr6.getEQ()) goto loc_82182B20;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82182b20
	if (cr6.getEQ()) goto loc_82182B20;
	// bl 0x823eda40
	sub_823EDA40(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82182B20:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82182B38"))) PPC_WEAK_FUNC(sub_82182B38);
PPC_FUNC_IMPL(__imp__sub_82182B38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// li r4,0
	ctx.r4.s64 = 0;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// li r29,0
	r29.s64 = 0;
	// rlwinm r3,r11,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82182b90
	if (cr6.getEQ()) goto loc_82182B90;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// stw r6,20(r30)
	PPC_STORE_U32(r30.u32 + 20, ctx.r6.u32);
	// li r4,12
	ctx.r4.s64 = 12;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183410
	sub_82183410(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_82182B90:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82182BA0"))) PPC_WEAK_FUNC(sub_82182BA0);
PPC_FUNC_IMPL(__imp__sub_82182BA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bnelr cr6
	if (!cr6.getEQ()) return;
	// b 0x821829a0
	sub_821829A0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82182BCC"))) PPC_WEAK_FUNC(sub_82182BCC);
PPC_FUNC_IMPL(__imp__sub_82182BCC) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82182BD0"))) PPC_WEAK_FUNC(sub_82182BD0);
PPC_FUNC_IMPL(__imp__sub_82182BD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r10,31648(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 31648);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r24,r10,31728
	r24.s64 = ctx.r10.s64 + 31728;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r25,r10,31776
	r25.s64 = ctx.r10.s64 + 31776;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r26,r10,31752
	r26.s64 = ctx.r10.s64 + 31752;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r27,r10,31656
	r27.s64 = ctx.r10.s64 + 31656;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r28,r10,31800
	r28.s64 = ctx.r10.s64 + 31800;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r29,r10,31704
	r29.s64 = ctx.r10.s64 + 31704;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r30,r10,31680
	r30.s64 = ctx.r10.s64 + 31680;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r23,r10,31824
	r23.s64 = ctx.r10.s64 + 31824;
	// bne cr6,0x82182d78
	if (!cr6.getEQ()) goto loc_82182D78;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r4,512
	ctx.r4.s64 = 512;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stb r10,31648(r11)
	PPC_STORE_U8(r11.u32 + 31648, ctx.r10.u8);
	// bl 0x82182b38
	sub_82182B38(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,16384
	ctx.r3.s64 = 16384;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82182c70
	if (cr6.getEQ()) goto loc_82182C70;
	// li r5,512
	ctx.r5.s64 = 512;
	// stw r6,20(r29)
	PPC_STORE_U32(r29.u32 + 20, ctx.r6.u32);
	// li r4,32
	ctx.r4.s64 = 32;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82183410
	sub_82183410(ctx, base);
loc_82182C70:
	// li r4,0
	ctx.r4.s64 = 0;
	// lis r3,1
	ctx.r3.s64 = 65536;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82182c9c
	if (cr6.getEQ()) goto loc_82182C9C;
	// li r5,1024
	ctx.r5.s64 = 1024;
	// stw r6,20(r28)
	PPC_STORE_U32(r28.u32 + 20, ctx.r6.u32);
	// li r4,64
	ctx.r4.s64 = 64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82183410
	sub_82183410(ctx, base);
loc_82182C9C:
	// li r4,0
	ctx.r4.s64 = 0;
	// lis r3,1
	ctx.r3.s64 = 65536;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82182cc8
	if (cr6.getEQ()) goto loc_82182CC8;
	// li r5,512
	ctx.r5.s64 = 512;
	// stw r6,20(r27)
	PPC_STORE_U32(r27.u32 + 20, ctx.r6.u32);
	// li r4,128
	ctx.r4.s64 = 128;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82183410
	sub_82183410(ctx, base);
loc_82182CC8:
	// li r4,0
	ctx.r4.s64 = 0;
	// lis r3,1
	ctx.r3.s64 = 65536;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82182cf4
	if (cr6.getEQ()) goto loc_82182CF4;
	// li r5,256
	ctx.r5.s64 = 256;
	// stw r6,20(r26)
	PPC_STORE_U32(r26.u32 + 20, ctx.r6.u32);
	// li r4,256
	ctx.r4.s64 = 256;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82183410
	sub_82183410(ctx, base);
loc_82182CF4:
	// li r4,0
	ctx.r4.s64 = 0;
	// lis r3,2
	ctx.r3.s64 = 131072;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82182d20
	if (cr6.getEQ()) goto loc_82182D20;
	// li r5,256
	ctx.r5.s64 = 256;
	// stw r6,20(r25)
	PPC_STORE_U32(r25.u32 + 20, ctx.r6.u32);
	// li r4,512
	ctx.r4.s64 = 512;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x82183410
	sub_82183410(ctx, base);
loc_82182D20:
	// li r4,0
	ctx.r4.s64 = 0;
	// lis r3,2
	ctx.r3.s64 = 131072;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82182d4c
	if (cr6.getEQ()) goto loc_82182D4C;
	// li r5,128
	ctx.r5.s64 = 128;
	// stw r6,20(r24)
	PPC_STORE_U32(r24.u32 + 20, ctx.r6.u32);
	// li r4,1024
	ctx.r4.s64 = 1024;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x82183410
	sub_82183410(ctx, base);
loc_82182D4C:
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,20480
	ctx.r3.s64 = 20480;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82182d78
	if (cr6.getEQ()) goto loc_82182D78;
	// li r5,10
	ctx.r5.s64 = 10;
	// stw r6,20(r23)
	PPC_STORE_U32(r23.u32 + 20, ctx.r6.u32);
	// li r4,2048
	ctx.r4.s64 = 2048;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82183410
	sub_82183410(ctx, base);
loc_82182D78:
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r31,12
	cr6.compare<uint32_t>(r31.u32, 12, xer);
	// bne cr6,0x82182d94
	if (!cr6.getEQ()) goto loc_82182D94;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183340
	sub_82183340(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
loc_82182D94:
	// cmplwi cr6,r31,16
	cr6.compare<uint32_t>(r31.u32, 16, xer);
	// bgt cr6,0x82182dac
	if (cr6.getGT()) goto loc_82182DAC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82183348
	sub_82183348(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
loc_82182DAC:
	// cmplwi cr6,r31,32
	cr6.compare<uint32_t>(r31.u32, 32, xer);
	// bgt cr6,0x82182dc4
	if (cr6.getGT()) goto loc_82182DC4;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82183348
	sub_82183348(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
loc_82182DC4:
	// cmplwi cr6,r31,64
	cr6.compare<uint32_t>(r31.u32, 64, xer);
	// bgt cr6,0x82182ddc
	if (cr6.getGT()) goto loc_82182DDC;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82183348
	sub_82183348(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
loc_82182DDC:
	// cmplwi cr6,r31,128
	cr6.compare<uint32_t>(r31.u32, 128, xer);
	// bgt cr6,0x82182df4
	if (cr6.getGT()) goto loc_82182DF4;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82183348
	sub_82183348(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
loc_82182DF4:
	// cmplwi cr6,r31,256
	cr6.compare<uint32_t>(r31.u32, 256, xer);
	// bgt cr6,0x82182e0c
	if (cr6.getGT()) goto loc_82182E0C;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x82183348
	sub_82183348(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
loc_82182E0C:
	// cmplwi cr6,r31,512
	cr6.compare<uint32_t>(r31.u32, 512, xer);
	// bgt cr6,0x82182e24
	if (cr6.getGT()) goto loc_82182E24;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x82183348
	sub_82183348(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
loc_82182E24:
	// cmplwi cr6,r31,1024
	cr6.compare<uint32_t>(r31.u32, 1024, xer);
	// bgt cr6,0x82182e34
	if (cr6.getGT()) goto loc_82182E34;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82183348
	sub_82183348(ctx, base);
loc_82182E34:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_82182E40"))) PPC_WEAK_FUNC(sub_82182E40);
PPC_FUNC_IMPL(__imp__sub_82182E40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bge cr6,0x82182e6c
	if (!cr6.getLT()) goto loc_82182E6C;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_82182E6C:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r10,r30,1
	ctx.r10.s64 = r30.s64 + 1;
	// li r27,0
	r27.s64 = 0;
	// addi r9,r11,1
	ctx.r9.s64 = r11.s64 + 1;
	// mr r28,r11
	r28.u64 = r11.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// cntlzw r11,r9
	r11.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// stw r27,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r27.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r26,r11,27,31,31
	r26.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// ble cr6,0x82182eb0
	if (!cr6.getGT()) goto loc_82182EB0;
loc_82182E98:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82182e98
	if (cr6.getLT()) goto loc_82182E98;
loc_82182EB0:
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r3,r28
	cr6.compare<int32_t>(ctx.r3.s32, r28.s32, xer);
	// bne cr6,0x82182ef4
	if (!cr6.getEQ()) goto loc_82182EF4;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82182ef4
	if (cr6.getEQ()) goto loc_82182EF4;
	// clrlwi r10,r26,24
	ctx.r10.u64 = r26.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82182ef4
	if (!cr6.getEQ()) goto loc_82182EF4;
	// clrlwi r10,r25,24
	ctx.r10.u64 = r25.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82182ee8
	if (!cr6.getEQ()) goto loc_82182EE8;
	// sth r27,0(r11)
	PPC_STORE_U16(r11.u32 + 0, r27.u16);
	// stw r27,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r27.u32);
loc_82182EE8:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_82182EF4:
	// bl 0x82182bd0
	sub_82182BD0(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cntlzw r11,r29
	r11.u64 = r29.u32 == 0 ? 32 : __builtin_clz(r29.u32);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r24,r11,1
	r24.u64 = r11.u64 ^ 1;
	// beq cr6,0x82182f84
	if (cr6.getEQ()) goto loc_82182F84;
	// clrlwi r11,r25,24
	r11.u64 = r25.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82182f50
	if (cr6.getEQ()) goto loc_82182F50;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82182f50
	if (cr6.getEQ()) goto loc_82182F50;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x82182f38
	if (cr6.getLT()) goto loc_82182F38;
	// mr r30,r11
	r30.u64 = r11.u64;
loc_82182F38:
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// rlwinm r5,r11,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// b 0x82182f54
	goto loc_82182F54;
loc_82182F50:
	// stw r27,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r27.u32);
loc_82182F54:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// clrlwi r10,r26,24
	ctx.r10.u64 = r26.u32 & 0xFF;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// sthx r27,r11,r29
	PPC_STORE_U16(r11.u32 + r29.u32, r27.u16);
	// bne cr6,0x82182f74
	if (!cr6.getEQ()) goto loc_82182F74;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x821829a0
	sub_821829A0(ctx, base);
loc_82182F74:
	// stw r29,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r29.u32);
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_82182F84:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82182fcc
	if (cr6.getEQ()) goto loc_82182FCC;
	// clrlwi r10,r26,24
	ctx.r10.u64 = r26.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82182fcc
	if (!cr6.getEQ()) goto loc_82182FCC;
	// clrlwi r10,r25,24
	ctx.r10.u64 = r25.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82182fbc
	if (cr6.getEQ()) goto loc_82182FBC;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmpw cr6,r30,r10
	cr6.compare<int32_t>(r30.s32, ctx.r10.s32, xer);
	// bgt cr6,0x82182fc0
	if (cr6.getGT()) goto loc_82182FC0;
	// li r24,1
	r24.s64 = 1;
	// b 0x82182fc0
	goto loc_82182FC0;
loc_82182FBC:
	// stw r27,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r27.u32);
loc_82182FC0:
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// sthx r27,r10,r11
	PPC_STORE_U16(ctx.r10.u32 + r11.u32, r27.u16);
loc_82182FCC:
	// stw r28,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r28.u32);
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_82182FE0"))) PPC_WEAK_FUNC(sub_82182FE0);
PPC_FUNC_IMPL(__imp__sub_82182FE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8218305c
	if (cr6.getEQ()) goto loc_8218305C;
	// mr r11,r29
	r11.u64 = r29.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_82183004:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82183004
	if (!cr6.getEQ()) goto loc_82183004;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rotlwi r31,r11,0
	r31.u64 = __builtin_rotateleft32(r11.u32, 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x82182e40
	sub_82182E40(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8218305c
	if (cr6.getEQ()) goto loc_8218305C;
	// addi r5,r31,1
	ctx.r5.s64 = r31.s64 + 1;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82183530
	sub_82183530(ctx, base);
	// stw r31,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r31.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8218305C:
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,31652
	ctx.r4.s64 = r11.s64 + 31652;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82183080
	sub_82183080(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82183080"))) PPC_WEAK_FUNC(sub_82183080);
PPC_FUNC_IMPL(__imp__sub_82183080) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8218314c
	if (cr6.getEQ()) goto loc_8218314C;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// blt cr6,0x821830b0
	if (cr6.getLT()) goto loc_821830B0;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// b 0x821830bc
	goto loc_821830BC;
loc_821830B0:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823edbb8
	sub_823EDBB8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
loc_821830BC:
	// clrlwi r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8218310c
	if (cr6.getEQ()) goto loc_8218310C;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821830f0
	if (cr6.getEQ()) goto loc_821830F0;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821830f0
	if (!cr6.getEQ()) goto loc_821830F0;
	// bl 0x821829a0
	sub_821829A0(ctx, base);
loc_821830F0:
	// li r11,-1
	r11.s64 = -1;
	// stw r29,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r29.u32);
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_8218310C:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82182e40
	sub_82182E40(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8218314c
	if (cr6.getEQ()) goto loc_8218314C;
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// rlwinm r5,r11,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_8218314C:
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,31652
	ctx.r4.s64 = r11.s64 + 31652;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183080
	sub_82183080(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82183170"))) PPC_WEAK_FUNC(sub_82183170);
PPC_FUNC_IMPL(__imp__sub_82183170) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// ld r12,-4096(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// ld r12,-8192(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8192);
	// ld r12,-12288(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -12288);
	// ld r12,-16384(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16384);
	// stwu r1,-16512(r1)
	ea = -16512 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x821831fc
	if (cr6.getEQ()) goto loc_821831FC;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lwz r5,0(r4)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// addi r10,r1,16544
	ctx.r10.s64 = ctx.r1.s64 + 16544;
	// li r4,8193
	ctx.r4.s64 = 8193;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823ed808
	sub_823ED808(ctx, base);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183080
	sub_82183080(ctx, base);
	// addi r1,r1,16512
	ctx.r1.s64 = ctx.r1.s64 + 16512;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_821831FC:
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,31652
	ctx.r4.s64 = r11.s64 + 31652;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183080
	sub_82183080(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,16512
	ctx.r1.s64 = ctx.r1.s64 + 16512;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82183230"))) PPC_WEAK_FUNC(sub_82183230);
PPC_FUNC_IMPL(__imp__sub_82183230) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r10,31652
	ctx.r4.s64 = ctx.r10.s64 + 31652;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bl 0x82183080
	sub_82183080(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82183280"))) PPC_WEAK_FUNC(sub_82183280);
PPC_FUNC_IMPL(__imp__sub_82183280) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bl 0x82182fe0
	sub_82182FE0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821832C0"))) PPC_WEAK_FUNC(sub_821832C0);
PPC_FUNC_IMPL(__imp__sub_821832C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r11,0
	r11.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,-1
	ctx.r5.s64 = -1;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bl 0x82183080
	sub_82183080(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82183308"))) PPC_WEAK_FUNC(sub_82183308);
PPC_FUNC_IMPL(__imp__sub_82183308) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,-1
	ctx.r5.s64 = -1;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82183080
	sub_82183080(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82183340"))) PPC_WEAK_FUNC(sub_82183340);
PPC_FUNC_IMPL(__imp__sub_82183340) {
	PPC_FUNC_PROLOGUE();
	// b 0x82183348
	sub_82183348(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82183348"))) PPC_WEAK_FUNC(sub_82183348);
PPC_FUNC_IMPL(__imp__sub_82183348) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lwz r9,16(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// stw r8,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r8.u32);
	// stw r9,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r9.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82183378"))) PPC_WEAK_FUNC(sub_82183378);
PPC_FUNC_IMPL(__imp__sub_82183378) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// stw r4,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r4.u32);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82183398"))) PPC_WEAK_FUNC(sub_82183398);
PPC_FUNC_IMPL(__imp__sub_82183398) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister temp{};
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// subfc r10,r11,r4
	xer.ca = ctx.r4.u32 >= r11.u32;
	ctx.r10.s64 = ctx.r4.s64 - r11.s64;
	// subfe r10,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821833d0
	if (cr6.getEQ()) goto loc_821833D0;
	// lwz r10,12(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// lwz r9,8(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// mullw r10,r10,r9
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r9.s32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// li r10,1
	ctx.r10.s64 = 1;
	// blt cr6,0x821833d4
	if (cr6.getLT()) goto loc_821833D4;
loc_821833D0:
	// li r10,0
	ctx.r10.s64 = 0;
loc_821833D4:
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82183400
	if (cr6.getEQ()) goto loc_82183400;
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// subf r11,r11,r4
	r11.s64 = ctx.r4.s64 - r11.s64;
	// divwu r9,r11,r10
	ctx.r9.u32 = r11.u32 / ctx.r10.u32;
	// twllei r10,0
	// mullw r10,r9,r10
	ctx.r10.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq 0x82183404
	if (cr0.getEQ()) goto loc_82183404;
loc_82183400:
	// li r11,0
	r11.s64 = 0;
loc_82183404:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82183410"))) PPC_WEAK_FUNC(sub_82183410);
PPC_FUNC_IMPL(__imp__sub_82183410) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r6,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r6.u32);
	// stw r4,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r4.u32);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// stw r5,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r5.u32);
	// stw r8,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r8.u32);
	// stw r8,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r8.u32);
	// beq cr6,0x82183450
	if (cr6.getEQ()) goto loc_82183450;
	// mr r10,r6
	ctx.r10.u64 = ctx.r6.u64;
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
loc_82183438:
	// add r9,r10,r4
	ctx.r9.u64 = ctx.r10.u64 + ctx.r4.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// bne cr6,0x82183438
	if (!cr6.getEQ()) goto loc_82183438;
loc_82183450:
	// addi r11,r5,-1
	r11.s64 = ctx.r5.s64 + -1;
	// mullw r11,r11,r4
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r4.s32);
	// stwx r8,r11,r6
	PPC_STORE_U32(r11.u32 + ctx.r6.u32, ctx.r8.u32);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// stw r8,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r8.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82183470"))) PPC_WEAK_FUNC(sub_82183470);
PPC_FUNC_IMPL(__imp__sub_82183470) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stw r11,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82183490"))) PPC_WEAK_FUNC(sub_82183490);
PPC_FUNC_IMPL(__imp__sub_82183490) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// li r9,0
	ctx.r9.s64 = 0;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// subf r8,r3,r4
	ctx.r8.s64 = ctx.r4.s64 - ctx.r3.s64;
loc_821834A4:
	// lbzx r10,r8,r11
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + r11.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// beq cr6,0x821834c4
	if (cr6.getEQ()) goto loc_821834C4;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplw cr6,r9,r5
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r5.u32, xer);
	// blt cr6,0x821834a4
	if (cr6.getLT()) goto loc_821834A4;
loc_821834C4:
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// add r11,r3,r5
	r11.u64 = ctx.r3.u64 + ctx.r5.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r10,-1(r11)
	PPC_STORE_U8(r11.u32 + -1, ctx.r10.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821834E0"))) PPC_WEAK_FUNC(sub_821834E0);
PPC_FUNC_IMPL(__imp__sub_821834E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// li r9,0
	ctx.r9.s64 = 0;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// subf r8,r3,r4
	ctx.r8.s64 = ctx.r4.s64 - ctx.r3.s64;
loc_821834F4:
	// lhzx r10,r8,r11
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + r11.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// beq cr6,0x82183514
	if (cr6.getEQ()) goto loc_82183514;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// cmplw cr6,r9,r5
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r5.u32, xer);
	// blt cr6,0x821834f4
	if (cr6.getLT()) goto loc_821834F4;
loc_82183514:
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// rlwinm r11,r5,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// li r10,0
	ctx.r10.s64 = 0;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// sth r10,-2(r11)
	PPC_STORE_U16(r11.u32 + -2, ctx.r10.u16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82183530"))) PPC_WEAK_FUNC(sub_82183530);
PPC_FUNC_IMPL(__imp__sub_82183530) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
loc_82183540:
	// lbzx r10,r11,r4
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + ctx.r4.u32);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// sth r10,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r10.u16);
	// beq cr6,0x82183568
	if (cr6.getEQ()) goto loc_82183568;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// cmplw cr6,r11,r5
	cr6.compare<uint32_t>(r11.u32, ctx.r5.u32, xer);
	// blt cr6,0x82183540
	if (cr6.getLT()) goto loc_82183540;
loc_82183568:
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// rlwinm r11,r5,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// li r10,0
	ctx.r10.s64 = 0;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// sth r10,-2(r11)
	PPC_STORE_U16(r11.u32 + -2, ctx.r10.u16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82183588"))) PPC_WEAK_FUNC(sub_82183588);
PPC_FUNC_IMPL(__imp__sub_82183588) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// li r9,63
	ctx.r9.s64 = 63;
loc_82183598:
	// lhz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// cmplwi cr6,r10,597
	cr6.compare<uint32_t>(ctx.r10.u32, 597, xer);
	// bgt cr6,0x821835ac
	if (cr6.getGT()) goto loc_821835AC;
	// stbx r10,r11,r3
	PPC_STORE_U8(r11.u32 + ctx.r3.u32, ctx.r10.u8);
	// b 0x821835b0
	goto loc_821835B0;
loc_821835AC:
	// stbx r9,r11,r3
	PPC_STORE_U8(r11.u32 + ctx.r3.u32, ctx.r9.u8);
loc_821835B0:
	// lbzx r10,r11,r3
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + ctx.r3.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821835cc
	if (cr6.getEQ()) goto loc_821835CC;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r4,r4,2
	ctx.r4.s64 = ctx.r4.s64 + 2;
	// cmplw cr6,r11,r5
	cr6.compare<uint32_t>(r11.u32, ctx.r5.u32, xer);
	// blt cr6,0x82183598
	if (cr6.getLT()) goto loc_82183598;
loc_821835CC:
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// add r11,r3,r5
	r11.u64 = ctx.r3.u64 + ctx.r5.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r10,-1(r11)
	PPC_STORE_U8(r11.u32 + -1, ctx.r10.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821835E8"))) PPC_WEAK_FUNC(sub_821835E8);
PPC_FUNC_IMPL(__imp__sub_821835E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31991
	r11.s64 = -2096562176;
	// lwz r11,-31884(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -31884);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82183600"))) PPC_WEAK_FUNC(sub_82183600);
PPC_FUNC_IMPL(__imp__sub_82183600) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r29,0
	r29.s64 = 0;
	// addi r30,r11,31880
	r30.s64 = r11.s64 + 31880;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r26,r29
	r26.u64 = r29.u64;
	// mr r28,r29
	r28.u64 = r29.u64;
	// addi r25,r30,36
	r25.s64 = r30.s64 + 36;
	// addi r24,r11,-20432
	r24.s64 = r11.s64 + -20432;
	// li r27,1
	r27.s64 = 1;
loc_82183630:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
loc_82183638:
	// lbz r11,0(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82183670
	if (cr6.getEQ()) goto loc_82183670;
	// lwz r9,-28(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -28);
	// addi r11,r10,-28
	r11.s64 = ctx.r10.s64 + -28;
	// cmplwi cr6,r9,997
	cr6.compare<uint32_t>(ctx.r9.u32, 997, xer);
	// beq cr6,0x82183670
	if (cr6.getEQ()) goto loc_82183670;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// stb r29,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r29.u8);
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82183664:
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x82183664
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82183664;
loc_82183670:
	// lbz r11,0(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82183688
	if (!cr6.getEQ()) goto loc_82183688;
	// lbz r11,-32(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + -32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8218369c
	if (!cr6.getEQ()) goto loc_8218369C;
loc_82183688:
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r10,r10,40
	ctx.r10.s64 = ctx.r10.s64 + 40;
	// cmpwi cr6,r5,9
	cr6.compare<int32_t>(ctx.r5.s32, 9, xer);
	// blt cr6,0x82183638
	if (cr6.getLT()) goto loc_82183638;
	// b 0x821836f4
	goto loc_821836F4;
loc_8218369C:
	// add r11,r28,r5
	r11.u64 = r28.u64 + ctx.r5.u64;
	// addi r9,r30,8
	ctx.r9.s64 = r30.s64 + 8;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r30,36
	ctx.r4.s64 = r30.s64 + 36;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// rlwinm r31,r11,3,0,28
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// li r10,7
	ctx.r10.s64 = 7;
	// add r6,r31,r9
	ctx.r6.u64 = r31.u64 + ctx.r9.u64;
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
	// stbx r27,r31,r4
	PPC_STORE_U8(r31.u32 + ctx.r4.u32, r27.u8);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_821836CC:
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x821836cc
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_821836CC;
	// rlwinm r11,r5,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r5,r31,r30
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwzx r4,r11,r24
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + r24.u32);
	// bl 0x8235d8b8
	sub_8235D8B8(ctx, base);
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// stbx r29,r31,r11
	PPC_STORE_U8(r31.u32 + r11.u32, r29.u8);
loc_821836F4:
	// addi r25,r25,360
	r25.s64 = r25.s64 + 360;
	// addi r11,r30,1476
	r11.s64 = r30.s64 + 1476;
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r28,r28,9
	r28.s64 = r28.s64 + 9;
	// cmpw cr6,r25,r11
	cr6.compare<int32_t>(r25.s32, r11.s32, xer);
	// blt cr6,0x82183630
	if (cr6.getLT()) goto loc_82183630;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_82183718"))) PPC_WEAK_FUNC(sub_82183718);
PPC_FUNC_IMPL(__imp__sub_82183718) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-1712(r1)
	ea = -1712 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r31,0
	r31.s64 = 0;
	// lwz r3,1368(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1368);
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// addi r8,r1,88
	ctx.r8.s64 = ctx.r1.s64 + 88;
	// li r7,5
	ctx.r7.s64 = 5;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r27,r31
	r27.u64 = r31.u64;
	// bl 0x8235d690
	sub_8235D690(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bne cr6,0x82183834
	if (!cr6.getEQ()) goto loc_82183834;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,84
	ctx.r6.s64 = ctx.r1.s64 + 84;
	// li r5,1540
	ctx.r5.s64 = 1540;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// bl 0x8235de80
	sub_8235DE80(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82183820
	if (!cr6.getEQ()) goto loc_82183820;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82183820
	if (cr6.getEQ()) goto loc_82183820;
	// lis r11,-32019
	r11.s64 = -2098397184;
	// addi r28,r11,26504
	r28.s64 = r11.s64 + 26504;
	// mr r11,r28
	r11.u64 = r28.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_82183798:
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x82183798
	if (!cr6.getEQ()) goto loc_82183798;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r29,r11,0
	r29.u64 = __builtin_rotateleft32(r11.u32, 0);
	// beq cr6,0x82183820
	if (cr6.getEQ()) goto loc_82183820;
	// addi r30,r1,360
	r30.s64 = ctx.r1.s64 + 360;
loc_821837C0:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823ee630
	sub_823EE630(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82183800
	if (cr6.getEQ()) goto loc_82183800;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r30,r30,308
	r30.s64 = r30.s64 + 308;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// blt cr6,0x821837c0
	if (cr6.getLT()) goto loc_821837C0;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x8235d388
	sub_8235D388(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r1,r1,1712
	ctx.r1.s64 = ctx.r1.s64 + 1712;
	// b 0x823ed17c
	return;
loc_82183800:
	// mulli r11,r31,308
	r11.s64 = r31.s64 * 308;
	// addi r10,r1,360
	ctx.r10.s64 = ctx.r1.s64 + 360;
	// li r6,42
	ctx.r6.s64 = 42;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// add r5,r11,r10
	ctx.r5.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x823ecf88
	sub_823ECF88(ctx, base);
	// li r27,1
	r27.s64 = 1;
loc_82183820:
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x8235d388
	sub_8235D388(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r1,r1,1712
	ctx.r1.s64 = ctx.r1.s64 + 1712;
	// b 0x823ed17c
	return;
loc_82183834:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82183840
	if (cr6.getEQ()) goto loc_82183840;
	// bl 0x8235d388
	sub_8235D388(ctx, base);
loc_82183840:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,1712
	ctx.r1.s64 = ctx.r1.s64 + 1712;
	// b 0x823ed17c
	return;
}

