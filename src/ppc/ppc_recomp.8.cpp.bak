#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_8213EAC0"))) PPC_WEAK_FUNC(sub_8213EAC0);
PPC_FUNC_IMPL(__imp__sub_8213EAC0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed528
	// stwu r1,-368(r1)
	ea = -368 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// stfs f31,80(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// stfs f31,84(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// stfs f31,88(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stfs f31,96(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// sth r11,92(r1)
	PPC_STORE_U16(ctx.r1.u32 + 92, r11.u16);
	// li r11,255
	r11.s64 = 255;
	// stfs f31,100(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stb r11,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, r11.u8);
	// stb r11,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, r11.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, r11.u8);
	// bl 0x8210d870
	sub_8210D870(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x820b3dc0
	sub_820B3DC0(ctx, base);
	// lfs f0,4(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f8,4(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	ctx.f8.f64 = double(temp.f32);
	// fsubs f11,f0,f8
	ctx.f11.f64 = double(float(f0.f64 - ctx.f8.f64));
	// lfs f13,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// lfs f5,8(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	ctx.f5.f64 = double(temp.f32);
	// fsubs f10,f13,f5
	ctx.f10.f64 = double(float(ctx.f13.f64 - ctx.f5.f64));
	// lfs f12,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// lfs f7,0(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	ctx.f7.f64 = double(temp.f32);
	// fsubs f9,f12,f7
	ctx.f9.f64 = double(float(ctx.f12.f64 - ctx.f7.f64));
	// lfs f13,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f0,f11,f11
	f0.f64 = double(float(ctx.f11.f64 * ctx.f11.f64));
	// lfs f12,2944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f10,f10,f0
	f0.f64 = double(float(ctx.f10.f64 * ctx.f10.f64 + f0.f64));
	// fmadds f0,f9,f9,f0
	f0.f64 = double(float(ctx.f9.f64 * ctx.f9.f64 + f0.f64));
	// fsqrts f0,f0
	f0.f64 = double(float(sqrt(f0.f64)));
	// fmuls f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// ble cr6,0x8213eb74
	if (!cr6.getGT()) goto loc_8213EB74;
	// fmr f13,f12
	ctx.f13.f64 = ctx.f12.f64;
loc_8213EB74:
	// fcmpu cr6,f0,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f31.f64);
	// bne cr6,0x8213eb84
	if (!cr6.getEQ()) goto loc_8213EB84;
	// fmr f0,f31
	f0.f64 = f31.f64;
	// b 0x8213eb8c
	goto loc_8213EB8C;
loc_8213EB84:
	// fsubs f13,f0,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
loc_8213EB8C:
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f12,12(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lfs f6,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	ctx.f6.f64 = double(temp.f32);
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// li r9,7
	ctx.r9.s64 = 7;
	// fmadds f7,f0,f9,f7
	ctx.f7.f64 = double(float(f0.f64 * ctx.f9.f64 + ctx.f7.f64));
	// fmadds f5,f0,f10,f5
	ctx.f5.f64 = double(float(f0.f64 * ctx.f10.f64 + ctx.f5.f64));
	// lfs f13,580(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 580);
	ctx.f13.f64 = double(temp.f32);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fmuls f12,f12,f13
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f6,f6,f13
	ctx.f6.f64 = double(float(ctx.f6.f64 * ctx.f13.f64));
	// fmuls f13,f12,f0
	ctx.f13.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f12,f6,f0
	ctx.f12.f64 = double(float(ctx.f6.f64 * f0.f64));
	// fmadds f6,f0,f11,f8
	ctx.f6.f64 = double(float(f0.f64 * ctx.f11.f64 + ctx.f8.f64));
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213EBC8:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8213ebc8
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213EBC8;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213EBEC:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8213ebec
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213EBEC;
	// addi r10,r1,168
	ctx.r10.s64 = ctx.r1.s64 + 168;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213EC10:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8213ec10
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213EC10;
	// addi r10,r1,196
	ctx.r10.s64 = ctx.r1.s64 + 196;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213EC34:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8213ec34
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213EC34;
	// lis r11,-32123
	r11.s64 = -2105212928;
	// lfs f29,24(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 24);
	f29.f64 = double(temp.f32);
	// lfs f4,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,16(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	ctx.f1.f64 = double(temp.f32);
	// lfs f0,32576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32576);
	f0.f64 = double(temp.f32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f30,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	f30.f64 = double(temp.f32);
	// fmuls f27,f1,f12
	f27.f64 = double(float(ctx.f1.f64 * ctx.f12.f64));
	// stfs f31,132(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// fmuls f26,f30,f12
	f26.f64 = double(float(f30.f64 * ctx.f12.f64));
	// stfs f31,156(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 156, temp.u32);
	// fmuls f1,f1,f13
	ctx.f1.f64 = double(float(ctx.f1.f64 * ctx.f13.f64));
	// stfs f31,160(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// fmuls f30,f30,f13
	f30.f64 = double(float(f30.f64 * ctx.f13.f64));
	// lfs f8,584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 584);
	ctx.f8.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f31,184(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 184, temp.u32);
	// fmuls f31,f3,f13
	f31.f64 = double(float(ctx.f3.f64 * ctx.f13.f64));
	// fmuls f3,f3,f12
	ctx.f3.f64 = double(float(ctx.f3.f64 * ctx.f12.f64));
	// lfs f9,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f9.f64 = double(temp.f32);
	// lfs f11,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// lfs f10,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	ctx.f10.f64 = double(temp.f32);
	// lfs f28,6596(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6596);
	f28.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f28,f8,f28
	f28.f64 = double(float(ctx.f8.f64 * f28.f64));
	// lfs f8,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f8.f64 = double(temp.f32);
	// stfs f8,128(r1)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// fsubs f24,f6,f31
	f24.f64 = double(float(ctx.f6.f64 - f31.f64));
	// stfs f8,188(r1)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r1.u32 + 188, temp.u32);
	// fadds f21,f3,f6
	f21.f64 = double(float(ctx.f3.f64 + ctx.f6.f64));
	// stfs f8,212(r1)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r1.u32 + 212, temp.u32);
	// fadds f31,f26,f31
	f31.f64 = double(float(f26.f64 + f31.f64));
	// stfs f8,216(r1)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r1.u32 + 216, temp.u32);
	// fmuls f8,f4,f13
	ctx.f8.f64 = double(float(ctx.f4.f64 * ctx.f13.f64));
	// fmuls f4,f4,f12
	ctx.f4.f64 = double(float(ctx.f4.f64 * ctx.f12.f64));
	// fctidz f25,f28
	f25.s64 = (f28.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f28.f64));
	// fmuls f28,f2,f13
	f28.f64 = double(float(ctx.f2.f64 * ctx.f13.f64));
	// fmuls f2,f2,f12
	ctx.f2.f64 = double(float(ctx.f2.f64 * ctx.f12.f64));
	// fmuls f12,f29,f12
	ctx.f12.f64 = double(float(f29.f64 * ctx.f12.f64));
	// fmuls f13,f29,f13
	ctx.f13.f64 = double(float(f29.f64 * ctx.f13.f64));
	// fsubs f3,f6,f3
	ctx.f3.f64 = double(float(ctx.f6.f64 - ctx.f3.f64));
	// fsubs f29,f7,f8
	f29.f64 = double(float(ctx.f7.f64 - ctx.f8.f64));
	// fadds f22,f4,f7
	f22.f64 = double(float(ctx.f4.f64 + ctx.f7.f64));
	// fadds f8,f27,f8
	ctx.f8.f64 = double(float(f27.f64 + ctx.f8.f64));
	// fsubs f23,f5,f28
	f23.f64 = double(float(ctx.f5.f64 - f28.f64));
	// fadds f20,f2,f5
	f20.f64 = double(float(ctx.f2.f64 + ctx.f5.f64));
	// fadds f28,f12,f28
	f28.f64 = double(float(ctx.f12.f64 + f28.f64));
	// fsubs f4,f7,f4
	ctx.f4.f64 = double(float(ctx.f7.f64 - ctx.f4.f64));
	// fsubs f2,f5,f2
	ctx.f2.f64 = double(float(ctx.f5.f64 - ctx.f2.f64));
	// fsubs f29,f29,f27
	f29.f64 = double(float(f29.f64 - f27.f64));
	// fsubs f27,f24,f26
	f27.f64 = double(float(f24.f64 - f26.f64));
	// fsubs f26,f22,f1
	f26.f64 = double(float(f22.f64 - ctx.f1.f64));
	// fsubs f12,f23,f12
	ctx.f12.f64 = double(float(f23.f64 - ctx.f12.f64));
	// fsubs f24,f21,f30
	f24.f64 = double(float(f21.f64 - f30.f64));
	// fsubs f23,f20,f13
	f23.f64 = double(float(f20.f64 - ctx.f13.f64));
	// fadds f8,f8,f7
	ctx.f8.f64 = double(float(ctx.f8.f64 + ctx.f7.f64));
	// fadds f7,f31,f6
	ctx.f7.f64 = double(float(f31.f64 + ctx.f6.f64));
	// fadds f6,f28,f5
	ctx.f6.f64 = double(float(f28.f64 + ctx.f5.f64));
	// fadds f5,f4,f1
	ctx.f5.f64 = double(float(ctx.f4.f64 + ctx.f1.f64));
	// fadds f4,f3,f30
	ctx.f4.f64 = double(float(ctx.f3.f64 + f30.f64));
	// fmsubs f3,f29,f0,f11
	ctx.f3.f64 = double(float(f29.f64 * f0.f64 - ctx.f11.f64));
	// stfs f3,112(r1)
	temp.f32 = float(ctx.f3.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// fmsubs f3,f27,f0,f10
	ctx.f3.f64 = double(float(f27.f64 * f0.f64 - ctx.f10.f64));
	// stfs f3,116(r1)
	temp.f32 = float(ctx.f3.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// fmsubs f12,f12,f0,f9
	ctx.f12.f64 = double(float(ctx.f12.f64 * f0.f64 - ctx.f9.f64));
	// stfs f12,120(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// fmsubs f12,f26,f0,f11
	ctx.f12.f64 = double(float(f26.f64 * f0.f64 - ctx.f11.f64));
	// stfs f12,140(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// fmsubs f12,f24,f0,f10
	ctx.f12.f64 = double(float(f24.f64 * f0.f64 - ctx.f10.f64));
	// stfs f12,144(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// fmsubs f12,f23,f0,f9
	ctx.f12.f64 = double(float(f23.f64 * f0.f64 - ctx.f9.f64));
	// stfs f12,148(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// fmsubs f12,f8,f0,f11
	ctx.f12.f64 = double(float(ctx.f8.f64 * f0.f64 - ctx.f11.f64));
	// stfs f12,168(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// fmsubs f12,f7,f0,f10
	ctx.f12.f64 = double(float(ctx.f7.f64 * f0.f64 - ctx.f10.f64));
	// stfs f12,172(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 172, temp.u32);
	// fmsubs f12,f6,f0,f9
	ctx.f12.f64 = double(float(ctx.f6.f64 * f0.f64 - ctx.f9.f64));
	// stfs f12,176(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 176, temp.u32);
	// fadds f13,f2,f13
	ctx.f13.f64 = double(float(ctx.f2.f64 + ctx.f13.f64));
	// stfd f25,224(r1)
	PPC_STORE_U64(ctx.r1.u32 + 224, f25.u64);
	// fmsubs f12,f5,f0,f11
	ctx.f12.f64 = double(float(ctx.f5.f64 * f0.f64 - ctx.f11.f64));
	// stfs f12,196(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 196, temp.u32);
	// fmsubs f12,f4,f0,f10
	ctx.f12.f64 = double(float(ctx.f4.f64 * f0.f64 - ctx.f10.f64));
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// fmsubs f0,f13,f0,f9
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 - ctx.f9.f64));
	// stfs f12,200(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 200, temp.u32);
	// stfs f0,204(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 204, temp.u32);
	// lbz r11,231(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 231);
	// stb r11,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, r11.u8);
	// stb r11,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, r11.u8);
	// stb r11,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, r11.u8);
	// stb r11,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, r11.u8);
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r1,196
	ctx.r3.s64 = ctx.r1.s64 + 196;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r1,r1,368
	ctx.r1.s64 = ctx.r1.s64 + 368;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed574
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8213EE00"))) PPC_WEAK_FUNC(sub_8213EE00);
PPC_FUNC_IMPL(__imp__sub_8213EE00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f19{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// addi r12,r1,-72
	r12.s64 = ctx.r1.s64 + -72;
	// bl 0x823ed524
	// stwu r1,-544(r1)
	ea = -544 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r26,0
	r26.s64 = 0;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// stfs f31,144(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// sth r26,156(r1)
	PPC_STORE_U16(ctx.r1.u32 + 156, r26.u16);
	// stfs f31,148(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// stb r26,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, r26.u8);
	// stfs f31,152(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// stb r26,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, r26.u8);
	// stfs f31,160(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// stb r26,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, r26.u8);
	// stfs f31,164(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// stb r26,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, r26.u8);
	// bl 0x8210d870
	sub_8210D870(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820b3dc0
	sub_820B3DC0(ctx, base);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lhz r10,6(r25)
	ctx.r10.u64 = PPC_LOAD_U16(r25.u32 + 6);
	// lfs f0,32(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 32);
	f0.f64 = double(temp.f32);
	// addi r28,r11,-8800
	r28.s64 = r11.s64 + -8800;
	// lhz r9,36(r30)
	ctx.r9.u64 = PPC_LOAD_U16(r30.u32 + 36);
	// extsh r11,r10
	r11.s64 = ctx.r10.s16;
	// extsh r10,r9
	ctx.r10.s64 = ctx.r9.s16;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r8,r28,2
	ctx.r8.s64 = r28.s64 + 2;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lhzx r11,r11,r8
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r8.u32);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bgt cr6,0x8213eee0
	if (cr6.getGT()) goto loc_8213EEE0;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r11,288(r1)
	PPC_STORE_U64(ctx.r1.u32 + 288, r11.u64);
	// std r10,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r10.u64);
	// lfd f13,288(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 288);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lfd f12,128(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// fmuls f0,f0,f12
	f0.f64 = double(float(f0.f64 * ctx.f12.f64));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, f0.u64);
	// lbz r29,135(r1)
	r29.u64 = PPC_LOAD_U8(ctx.r1.u32 + 135);
	// b 0x8213eeec
	goto loc_8213EEEC;
loc_8213EEE0:
	// fctidz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, f0.u64);
	// lbz r29,135(r1)
	r29.u64 = PPC_LOAD_U8(ctx.r1.u32 + 135);
loc_8213EEEC:
	// addi r10,r1,176
	ctx.r10.s64 = ctx.r1.s64 + 176;
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213EEFC:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8213eefc
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213EEFC;
	// addi r10,r1,204
	ctx.r10.s64 = ctx.r1.s64 + 204;
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213EF20:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8213ef20
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213EF20;
	// addi r10,r1,232
	ctx.r10.s64 = ctx.r1.s64 + 232;
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213EF44:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8213ef44
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213EF44;
	// addi r10,r1,260
	ctx.r10.s64 = ctx.r1.s64 + 260;
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213EF68:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8213ef68
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213EF68;
	// lfs f1,16(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// lfs f0,16(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	f0.f64 = double(temp.f32);
	// lfs f12,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// fmuls f29,f12,f13
	f29.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// lfs f0,24(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 24);
	f0.f64 = double(temp.f32);
	// lfs f12,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// fmuls f25,f12,f13
	f25.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 28);
	f0.f64 = double(temp.f32);
	// lfs f12,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// lfs f28,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	f28.f64 = double(temp.f32);
	// lfs f30,13968(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13968);
	f30.f64 = double(temp.f32);
	// fmadds f24,f13,f30,f12
	f24.f64 = double(float(ctx.f13.f64 * f30.f64 + ctx.f12.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lfs f13,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// lfs f5,4(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 4);
	ctx.f5.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f6,f28,f5
	ctx.f6.f64 = double(float(f28.f64 - ctx.f5.f64));
	// lfs f27,8(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 8);
	f27.f64 = double(temp.f32);
	// lfs f26,0(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 0);
	f26.f64 = double(temp.f32);
	// fsubs f7,f24,f26
	ctx.f7.f64 = double(float(f24.f64 - f26.f64));
	// fmadds f0,f0,f30,f13
	f0.f64 = double(float(f0.f64 * f30.f64 + ctx.f13.f64));
	// lfs f13,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,2944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f28,f0,f27
	f28.f64 = double(float(f0.f64 - f27.f64));
	// fmuls f0,f6,f6
	f0.f64 = double(float(ctx.f6.f64 * ctx.f6.f64));
	// fmadds f0,f28,f28,f0
	f0.f64 = double(float(f28.f64 * f28.f64 + f0.f64));
	// fmadds f0,f7,f7,f0
	f0.f64 = double(float(ctx.f7.f64 * ctx.f7.f64 + f0.f64));
	// fsqrts f0,f0
	f0.f64 = double(float(sqrt(f0.f64)));
	// fmuls f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// ble cr6,0x8213f02c
	if (!cr6.getGT()) goto loc_8213F02C;
	// fmr f13,f12
	ctx.f13.f64 = ctx.f12.f64;
loc_8213F02C:
	// fcmpu cr6,f0,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f31.f64);
	// bne cr6,0x8213f03c
	if (!cr6.getEQ()) goto loc_8213F03C;
	// fmr f11,f31
	ctx.f11.f64 = f31.f64;
	// b 0x8213f044
	goto loc_8213F044;
loc_8213F03C:
	// fsubs f13,f0,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fdivs f11,f13,f0
	ctx.f11.f64 = double(float(ctx.f13.f64 / f0.f64));
loc_8213F044:
	// fmuls f13,f11,f29
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f11.f64 * f29.f64));
	// lfs f3,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	ctx.f3.f64 = double(temp.f32);
	// fmuls f12,f11,f25
	ctx.f12.f64 = double(float(ctx.f11.f64 * f25.f64));
	// lfs f2,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// fmadds f7,f11,f7,f26
	ctx.f7.f64 = double(float(ctx.f11.f64 * ctx.f7.f64 + f26.f64));
	// lfs f4,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f4.f64 = double(temp.f32);
	// fmadds f6,f11,f6,f5
	ctx.f6.f64 = double(float(ctx.f11.f64 * ctx.f6.f64 + ctx.f5.f64));
	// lfs f1,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	ctx.f1.f64 = double(temp.f32);
	// fmadds f11,f11,f28,f27
	ctx.f11.f64 = double(float(ctx.f11.f64 * f28.f64 + f27.f64));
	// lfs f29,24(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	f29.f64 = double(temp.f32);
	// lfs f30,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	f30.f64 = double(temp.f32);
	// lis r10,-32123
	ctx.r10.s64 = -2105212928;
	// lhz r11,6(r25)
	r11.u64 = PPC_LOAD_U16(r25.u32 + 6);
	// addi r8,r28,12
	ctx.r8.s64 = r28.s64 + 12;
	// lfs f9,4(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 4);
	ctx.f9.f64 = double(temp.f32);
	// addi r7,r28,13
	ctx.r7.s64 = r28.s64 + 13;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lfs f8,8(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 8);
	ctx.f8.f64 = double(temp.f32);
	// lfs f10,0(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 0);
	ctx.f10.f64 = double(temp.f32);
	// addi r6,r28,14
	ctx.r6.s64 = r28.s64 + 14;
	// fmuls f27,f3,f13
	f27.f64 = double(float(ctx.f3.f64 * ctx.f13.f64));
	// lfs f0,32576(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 32576);
	f0.f64 = double(temp.f32);
	// fmuls f26,f2,f13
	f26.f64 = double(float(ctx.f2.f64 * ctx.f13.f64));
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fmuls f28,f4,f13
	f28.f64 = double(float(ctx.f4.f64 * ctx.f13.f64));
	// stfs f31,196(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 196, temp.u32);
	// fmuls f4,f4,f12
	ctx.f4.f64 = double(float(ctx.f4.f64 * ctx.f12.f64));
	// stb r29,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, r29.u8);
	// fmuls f25,f1,f13
	f25.f64 = double(float(ctx.f1.f64 * ctx.f13.f64));
	// stb r29,231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 231, r29.u8);
	// fmuls f23,f29,f12
	f23.f64 = double(float(f29.f64 * ctx.f12.f64));
	// fmuls f24,f30,f12
	f24.f64 = double(float(f30.f64 * ctx.f12.f64));
	// lfs f5,2776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	ctx.f5.f64 = double(temp.f32);
	// fmuls f1,f1,f12
	ctx.f1.f64 = double(float(ctx.f1.f64 * ctx.f12.f64));
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// fmuls f3,f3,f12
	ctx.f3.f64 = double(float(ctx.f3.f64 * ctx.f12.f64));
	// stfs f5,192(r1)
	temp.f32 = float(ctx.f5.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// fmuls f12,f2,f12
	ctx.f12.f64 = double(float(ctx.f2.f64 * ctx.f12.f64));
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// fmuls f2,f29,f13
	ctx.f2.f64 = double(float(f29.f64 * ctx.f13.f64));
	// fsubs f29,f6,f27
	f29.f64 = double(float(ctx.f6.f64 - f27.f64));
	// rlwinm r9,r11,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// fsubs f22,f11,f26
	f22.f64 = double(float(ctx.f11.f64 - f26.f64));
	// fmuls f30,f30,f13
	f30.f64 = double(float(f30.f64 * ctx.f13.f64));
	// fadds f21,f4,f7
	f21.f64 = double(float(ctx.f4.f64 + ctx.f7.f64));
	// fsubs f13,f7,f28
	ctx.f13.f64 = double(float(ctx.f7.f64 - f28.f64));
	// lbzx r11,r9,r8
	r11.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r8.u32);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lbzx r10,r9,r7
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r7.u32);
	// fsubs f4,f7,f4
	ctx.f4.f64 = double(float(ctx.f7.f64 - ctx.f4.f64));
	// fadds f20,f3,f6
	f20.f64 = double(float(ctx.f3.f64 + ctx.f6.f64));
	// lbzx r9,r9,r6
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r6.u32);
	// fsubs f29,f29,f24
	f29.f64 = double(float(f29.f64 - f24.f64));
	// stb r11,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, r11.u8);
	// fsubs f22,f22,f23
	f22.f64 = double(float(f22.f64 - f23.f64));
	// stb r10,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r10.u8);
	// stb r9,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r9.u8);
	// fsubs f21,f21,f25
	f21.f64 = double(float(f21.f64 - f25.f64));
	// stb r11,228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 228, r11.u8);
	// fsubs f13,f13,f1
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f1.f64));
	// stb r10,229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 229, ctx.r10.u8);
	// fadds f1,f1,f28
	ctx.f1.f64 = double(float(ctx.f1.f64 + f28.f64));
	// stb r9,230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 230, ctx.r9.u8);
	// fadds f28,f24,f27
	f28.f64 = double(float(f24.f64 + f27.f64));
	// stb r11,256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 256, r11.u8);
	// fsubs f20,f20,f30
	f20.f64 = double(float(f20.f64 - f30.f64));
	// fadds f27,f23,f26
	f27.f64 = double(float(f23.f64 + f26.f64));
	// fmsubs f29,f29,f0,f9
	f29.f64 = double(float(f29.f64 * f0.f64 - ctx.f9.f64));
	// fmsubs f22,f22,f0,f8
	f22.f64 = double(float(f22.f64 * f0.f64 - ctx.f8.f64));
	// fmsubs f21,f21,f0,f10
	f21.f64 = double(float(f21.f64 * f0.f64 - ctx.f10.f64));
	// fmsubs f19,f13,f0,f10
	f19.f64 = double(float(ctx.f13.f64 * f0.f64 - ctx.f10.f64));
	// lfs f13,2952(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 2952);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f29,f29,f13
	f29.f64 = double(float(f29.f64 * ctx.f13.f64));
	// stfs f29,180(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 180, temp.u32);
	// fmuls f29,f22,f13
	f29.f64 = double(float(f22.f64 * ctx.f13.f64));
	// stfs f29,184(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 184, temp.u32);
	// fmuls f29,f21,f13
	f29.f64 = double(float(f21.f64 * ctx.f13.f64));
	// stfs f29,204(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 204, temp.u32);
	// fmuls f19,f19,f13
	f19.f64 = double(float(f19.f64 * ctx.f13.f64));
	// stfs f19,176(r1)
	temp.f32 = float(f19.f64);
	PPC_STORE_U32(ctx.r1.u32 + 176, temp.u32);
	// fadds f29,f12,f11
	f29.f64 = double(float(ctx.f12.f64 + ctx.f11.f64));
	// fsubs f3,f6,f3
	ctx.f3.f64 = double(float(ctx.f6.f64 - ctx.f3.f64));
	// stfs f31,220(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 220, temp.u32);
	// fsubs f12,f11,f12
	ctx.f12.f64 = double(float(ctx.f11.f64 - ctx.f12.f64));
	// stfs f31,224(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 224, temp.u32);
	// fsubs f29,f29,f2
	f29.f64 = double(float(f29.f64 - ctx.f2.f64));
	// stfs f31,248(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 248, temp.u32);
	// fadds f7,f1,f7
	ctx.f7.f64 = double(float(ctx.f1.f64 + ctx.f7.f64));
	// stfs f5,252(r1)
	temp.f32 = float(ctx.f5.f64);
	PPC_STORE_U32(ctx.r1.u32 + 252, temp.u32);
	// fadds f6,f28,f6
	ctx.f6.f64 = double(float(f28.f64 + ctx.f6.f64));
	// stfs f5,276(r1)
	temp.f32 = float(ctx.f5.f64);
	PPC_STORE_U32(ctx.r1.u32 + 276, temp.u32);
	// fadds f11,f27,f11
	ctx.f11.f64 = double(float(f27.f64 + ctx.f11.f64));
	// stfs f5,280(r1)
	temp.f32 = float(ctx.f5.f64);
	PPC_STORE_U32(ctx.r1.u32 + 280, temp.u32);
	// fadds f4,f4,f25
	ctx.f4.f64 = double(float(ctx.f4.f64 + f25.f64));
	// stb r10,257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 257, ctx.r10.u8);
	// stb r9,258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 258, ctx.r9.u8);
	// stb r29,259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 259, r29.u8);
	// stb r11,284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 284, r11.u8);
	// fadds f3,f3,f30
	ctx.f3.f64 = double(float(ctx.f3.f64 + f30.f64));
	// stb r10,285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 285, ctx.r10.u8);
	// fadds f12,f12,f2
	ctx.f12.f64 = double(float(ctx.f12.f64 + ctx.f2.f64));
	// stb r9,286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 286, ctx.r9.u8);
	// fmsubs f2,f20,f0,f9
	ctx.f2.f64 = double(float(f20.f64 * f0.f64 - ctx.f9.f64));
	// stb r29,287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 287, r29.u8);
	// fmsubs f1,f29,f0,f8
	ctx.f1.f64 = double(float(f29.f64 * f0.f64 - ctx.f8.f64));
	// fmsubs f7,f7,f0,f10
	ctx.f7.f64 = double(float(ctx.f7.f64 * f0.f64 - ctx.f10.f64));
	// fmsubs f6,f6,f0,f9
	ctx.f6.f64 = double(float(ctx.f6.f64 * f0.f64 - ctx.f9.f64));
	// fmsubs f11,f11,f0,f8
	ctx.f11.f64 = double(float(ctx.f11.f64 * f0.f64 - ctx.f8.f64));
	// fmsubs f10,f4,f0,f10
	ctx.f10.f64 = double(float(ctx.f4.f64 * f0.f64 - ctx.f10.f64));
	// fmsubs f9,f3,f0,f9
	ctx.f9.f64 = double(float(ctx.f3.f64 * f0.f64 - ctx.f9.f64));
	// fmsubs f0,f12,f0,f8
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 - ctx.f8.f64));
	// fmuls f12,f2,f13
	ctx.f12.f64 = double(float(ctx.f2.f64 * ctx.f13.f64));
	// stfs f12,208(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 208, temp.u32);
	// fmuls f12,f1,f13
	ctx.f12.f64 = double(float(ctx.f1.f64 * ctx.f13.f64));
	// stfs f12,212(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 212, temp.u32);
	// fmuls f12,f7,f13
	ctx.f12.f64 = double(float(ctx.f7.f64 * ctx.f13.f64));
	// stfs f12,232(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 232, temp.u32);
	// fmuls f12,f6,f13
	ctx.f12.f64 = double(float(ctx.f6.f64 * ctx.f13.f64));
	// stfs f12,236(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 236, temp.u32);
	// fmuls f12,f11,f13
	ctx.f12.f64 = double(float(ctx.f11.f64 * ctx.f13.f64));
	// stfs f12,240(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 240, temp.u32);
	// fmuls f12,f10,f13
	ctx.f12.f64 = double(float(ctx.f10.f64 * ctx.f13.f64));
	// stfs f12,260(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 260, temp.u32);
	// fmuls f12,f9,f13
	ctx.f12.f64 = double(float(ctx.f9.f64 * ctx.f13.f64));
	// stfs f12,264(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 264, temp.u32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f0,268(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 268, temp.u32);
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// addi r10,r1,304
	ctx.r10.s64 = ctx.r1.s64 + 304;
	// li r11,8
	r11.s64 = 8;
	// mtctr r11
	ctr.u64 = r11.u64;
loc_8213F250:
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// addi r3,r3,8
	ctx.r3.s64 = ctx.r3.s64 + 8;
	// std r11,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, r11.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// bdnz 0x8213f250
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213F250;
	// lis r11,-32123
	r11.s64 = -2105212928;
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// lfs f3,32580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32580);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// bl 0x8238b228
	sub_8238B228(ctx, base);
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// lfs f3,8(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 8);
	ctx.f3.f64 = double(temp.f32);
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// lfs f2,4(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 4);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8238b128
	sub_8238B128(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// lfs f3,13964(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13964);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// bl 0x8238b228
	sub_8238B228(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r26,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r26.u32);
	// li r9,3
	ctx.r9.s64 = 3;
	// stw r26,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r26.u32);
	// li r8,2
	ctx.r8.s64 = 2;
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r26.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r26,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r26.u32);
	// li r6,2
	ctx.r6.s64 = 2;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82099060
	sub_82099060(ctx, base);
	// addi r1,r1,544
	ctx.r1.s64 = ctx.r1.s64 + 544;
	// addi r12,r1,-72
	r12.s64 = ctx.r1.s64 + -72;
	// bl 0x823ed570
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_8213F300"))) PPC_WEAK_FUNC(sub_8213F300);
PPC_FUNC_IMPL(__imp__sub_8213F300) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// lwz r9,15144(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 15144);
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// li r11,0
	r11.s64 = 0;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
loc_8213F330:
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x8213f354
	if (cr6.getEQ()) goto loc_8213F354;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,408
	ctx.r10.s64 = ctx.r10.s64 + 408;
	// cmpwi cr6,r11,100
	cr6.compare<int32_t>(r11.s32, 100, xer);
	// blt cr6,0x8213f330
	if (cr6.getLT()) goto loc_8213F330;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
loc_8213F354:
	// mulli r11,r11,408
	r11.s64 = r11.s64 * 408;
	// add r28,r11,r9
	r28.u64 = r11.u64 + ctx.r9.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x8213f41c
	if (cr6.getEQ()) goto loc_8213F41C;
	// bl 0x820cca48
	sub_820CCA48(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8213f41c
	if (cr6.getEQ()) goto loc_8213F41C;
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// li r10,8
	ctx.r10.s64 = 8;
	// stw r28,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r28.u32);
	// ori r9,r11,2
	ctx.r9.u64 = r11.u64 | 2;
	// stw r27,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r27.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r10,0(r31)
	PPC_STORE_U8(r31.u32 + 0, ctx.r10.u8);
	// stb r9,1(r31)
	PPC_STORE_U8(r31.u32 + 1, ctx.r9.u8);
	// lfs f0,0(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// lfs f0,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,16(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// lfs f0,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// lbz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 0);
	// cmplwi cr6,r10,255
	cr6.compare<uint32_t>(ctx.r10.u32, 255, xer);
	// beq cr6,0x8213f3dc
	if (cr6.getEQ()) goto loc_8213F3DC;
loc_8213F3B8:
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// bge cr6,0x8213f3dc
	if (!cr6.getLT()) goto loc_8213F3DC;
	// lbzx r10,r11,r29
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + r29.u32);
	// add r9,r31,r11
	ctx.r9.u64 = r31.u64 + r11.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stb r10,48(r9)
	PPC_STORE_U8(ctx.r9.u32 + 48, ctx.r10.u8);
	// lbzx r10,r11,r29
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + r29.u32);
	// cmplwi cr6,r10,255
	cr6.compare<uint32_t>(ctx.r10.u32, 255, xer);
	// bne cr6,0x8213f3b8
	if (!cr6.getEQ()) goto loc_8213F3B8;
loc_8213F3DC:
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// li r10,255
	ctx.r10.s64 = 255;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// stb r10,48(r11)
	PPC_STORE_U8(r11.u32 + 48, ctx.r10.u8);
	// beq cr6,0x8213f3fc
	if (cr6.getEQ()) goto loc_8213F3FC;
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// ori r11,r11,8
	r11.u64 = r11.u64 | 8;
	// stb r11,1(r31)
	PPC_STORE_U8(r31.u32 + 1, r11.u8);
loc_8213F3FC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820ccb68
	sub_820CCB68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820cca18
	sub_820CCA18(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r31,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r31.u32);
	// sth r25,6(r28)
	PPC_STORE_U16(r28.u32 + 6, r25.u16);
	// sth r11,4(r28)
	PPC_STORE_U16(r28.u32 + 4, r11.u16);
loc_8213F41C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8213F428"))) PPC_WEAK_FUNC(sub_8213F428);
PPC_FUNC_IMPL(__imp__sub_8213F428) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f12,16(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,20(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	ctx.f11.f64 = double(temp.f32);
	// lfs f13,12(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,2776(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2776);
	f0.f64 = double(temp.f32);
	// addi r9,r11,20
	ctx.r9.s64 = r11.s64 + 20;
	// fsubs f9,f12,f0
	ctx.f9.f64 = double(float(ctx.f12.f64 - f0.f64));
	// lfs f1,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// fsubs f8,f11,f0
	ctx.f8.f64 = double(float(ctx.f11.f64 - f0.f64));
	// stfs f9,100(r1)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// fsubs f10,f13,f0
	ctx.f10.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f8,104(r1)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// fadds f7,f13,f0
	ctx.f7.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f10,96(r1)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// fadds f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 + f0.f64));
	// stfs f7,80(r1)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// fadds f11,f11,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 + f0.f64));
	// stfs f12,84(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// stfs f11,88(r1)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// li r10,10
	ctx.r10.s64 = 10;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
loc_8213F490:
	// lfs f13,0(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f1
	cr6.compare(ctx.f13.f64, ctx.f1.f64);
	// beq cr6,0x8213f508
	if (cr6.getEQ()) goto loc_8213F508;
	// lfs f0,-4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -4);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fcmpu cr6,f0,f10
	cr6.compare(f0.f64, ctx.f10.f64);
	// bge cr6,0x8213f4b4
	if (!cr6.getLT()) goto loc_8213F4B4;
	// fmr f10,f0
	ctx.f10.f64 = f0.f64;
	// b 0x8213f4c0
	goto loc_8213F4C0;
loc_8213F4B4:
	// fcmpu cr6,f0,f7
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f7.f64);
	// ble cr6,0x8213f4c0
	if (!cr6.getGT()) goto loc_8213F4C0;
	// fmr f7,f0
	ctx.f7.f64 = f0.f64;
loc_8213F4C0:
	// lfs f0,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fcmpu cr6,f0,f9
	cr6.compare(f0.f64, ctx.f9.f64);
	// bge cr6,0x8213f4d8
	if (!cr6.getLT()) goto loc_8213F4D8;
	// fmr f9,f0
	ctx.f9.f64 = f0.f64;
	// b 0x8213f4e4
	goto loc_8213F4E4;
loc_8213F4D8:
	// fcmpu cr6,f0,f12
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x8213f4e4
	if (!cr6.getGT()) goto loc_8213F4E4;
	// fmr f12,f0
	ctx.f12.f64 = f0.f64;
loc_8213F4E4:
	// lfs f0,4(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fcmpu cr6,f0,f8
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x8213f4fc
	if (!cr6.getLT()) goto loc_8213F4FC;
	// fmr f8,f0
	ctx.f8.f64 = f0.f64;
	// b 0x8213f508
	goto loc_8213F508;
loc_8213F4FC:
	// fcmpu cr6,f0,f11
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f11.f64);
	// ble cr6,0x8213f508
	if (!cr6.getGT()) goto loc_8213F508;
	// fmr f11,f0
	ctx.f11.f64 = f0.f64;
loc_8213F508:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,40
	r11.s64 = r11.s64 + 40;
	// addi r9,r9,40
	ctx.r9.s64 = ctx.r9.s64 + 40;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8213f490
	if (!cr6.getEQ()) goto loc_8213F490;
	// stfs f12,84(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// lfs f12,12(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f0,f12,f10
	f0.f64 = double(float(ctx.f12.f64 - ctx.f10.f64));
	// stfs f11,88(r1)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stfs f8,104(r1)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// stfs f9,100(r1)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stfs f7,80(r1)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// stfs f10,96(r1)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// fcmpu cr6,f0,f1
	cr6.compare(f0.f64, ctx.f1.f64);
	// ble cr6,0x8213f548
	if (!cr6.getGT()) goto loc_8213F548;
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
loc_8213F548:
	// lfs f13,20(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f13,f8
	f0.f64 = double(float(ctx.f13.f64 - ctx.f8.f64));
	// fcmpu cr6,f0,f1
	cr6.compare(f0.f64, ctx.f1.f64);
	// ble cr6,0x8213f55c
	if (!cr6.getGT()) goto loc_8213F55C;
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
loc_8213F55C:
	// fsubs f0,f7,f12
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f7.f64 - ctx.f12.f64));
	// fcmpu cr6,f0,f1
	cr6.compare(f0.f64, ctx.f1.f64);
	// ble cr6,0x8213f56c
	if (!cr6.getGT()) goto loc_8213F56C;
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
loc_8213F56C:
	// fsubs f0,f11,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// fcmpu cr6,f0,f1
	cr6.compare(f0.f64, ctx.f1.f64);
	// ble cr6,0x8213f57c
	if (!cr6.getGT()) goto loc_8213F57C;
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
loc_8213F57C:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// bl 0x820cedf8
	sub_820CEDF8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213F598"))) PPC_WEAK_FUNC(sub_8213F598);
PPC_FUNC_IMPL(__imp__sub_8213F598) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed538
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r29,8(r3)
	r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// bge cr6,0x8213f5d8
	if (!cr6.getLT()) goto loc_8213F5D8;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// b 0x8213f5e0
	goto loc_8213F5E0;
loc_8213F5D8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	f0.f64 = double(temp.f32);
loc_8213F5E0:
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lhz r9,6(r29)
	ctx.r9.u64 = PPC_LOAD_U16(r29.u32 + 6);
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// fctiwz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// addi r10,r11,-8800
	ctx.r10.s64 = r11.s64 + -8800;
	// extsh r11,r9
	r11.s64 = ctx.r9.s16;
	// addi r7,r10,16
	ctx.r7.s64 = ctx.r10.s64 + 16;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// stfiwx f0,0,r8
	PPC_STORE_U32(ctx.r8.u32, f0.u32);
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lfsx f25,r11,r7
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	f25.f64 = double(temp.f32);
	// ble cr6,0x8213f73c
	if (!cr6.getGT()) goto loc_8213F73C;
	// mr r27,r9
	r27.u64 = ctx.r9.u64;
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f26,12468(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 12468);
	f26.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,14460(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 14460);
	f29.f64 = double(temp.f32);
	// lfs f30,3904(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 3904);
	f30.f64 = double(temp.f32);
	// addi r28,r29,44
	r28.s64 = r29.s64 + 44;
	// lfs f31,14028(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 14028);
	f31.f64 = double(temp.f32);
	// lfs f27,14396(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14396);
	f27.f64 = double(temp.f32);
	// lfs f28,14016(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14016);
	f28.f64 = double(temp.f32);
	// lfs f24,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f24.f64 = double(temp.f32);
loc_8213F65C:
	// lhz r11,4(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 4);
	// mr r31,r28
	r31.u64 = r28.u64;
	// li r30,10
	r30.s64 = 10;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// sth r11,4(r29)
	PPC_STORE_U16(r29.u32 + 4, r11.u16);
loc_8213F670:
	// lfs f0,-24(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + -24);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f24
	cr6.compare(f0.f64, f24.f64);
	// beq cr6,0x8213f720
	if (cr6.getEQ()) goto loc_8213F720;
	// lhz r11,0(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// lfs f13,-32(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -32);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,-4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -4);
	ctx.f12.f64 = double(temp.f32);
	// fadds f13,f13,f28
	ctx.f13.f64 = double(float(ctx.f13.f64 + f28.f64));
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lfs f11,-20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -20);
	ctx.f11.f64 = double(temp.f32);
	// lfs f10,-16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -16);
	ctx.f10.f64 = double(temp.f32);
	// fadds f0,f0,f27
	f0.f64 = double(float(f0.f64 + f27.f64));
	// stfs f13,-32(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + -32, temp.u32);
	// fsubs f12,f12,f25
	ctx.f12.f64 = double(float(ctx.f12.f64 - f25.f64));
	// fadds f13,f10,f11
	ctx.f13.f64 = double(float(ctx.f10.f64 + ctx.f11.f64));
	// stfs f0,-24(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -24, temp.u32);
	// stfs f12,-4(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + -4, temp.u32);
	// stfs f13,-20(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + -20, temp.u32);
	// sth r11,0(r31)
	PPC_STORE_U16(r31.u32 + 0, r11.u16);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lfs f0,-12(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + -12);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f13,f13,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64));
	// fmadds f0,f13,f30,f0
	f0.f64 = double(float(ctx.f13.f64 * f30.f64 + f0.f64));
	// fadds f0,f0,f29
	f0.f64 = double(float(f0.f64 + f29.f64));
	// stfs f0,-12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -12, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lfs f13,-4(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + -4);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f26
	cr6.compare(ctx.f13.f64, f26.f64);
	// lfs f0,-8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -8);
	f0.f64 = double(temp.f32);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f13,f13,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64));
	// fmadds f0,f13,f30,f0
	f0.f64 = double(float(ctx.f13.f64 * f30.f64 + f0.f64));
	// fadds f0,f0,f29
	f0.f64 = double(float(f0.f64 + f29.f64));
	// stfs f0,-8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -8, temp.u32);
	// bge cr6,0x8213f720
	if (!cr6.getLT()) goto loc_8213F720;
	// stfs f24,-24(r31)
	temp.f32 = float(f24.f64);
	PPC_STORE_U32(r31.u32 + -24, temp.u32);
loc_8213F720:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r31,r31,40
	r31.s64 = r31.s64 + 40;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x8213f670
	if (!cr6.getEQ()) goto loc_8213F670;
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x8213f65c
	if (!cr6.getEQ()) goto loc_8213F65C;
loc_8213F73C:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed584
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8213F750"))) PPC_WEAK_FUNC(sub_8213F750);
PPC_FUNC_IMPL(__imp__sub_8213F750) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed540
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// lwz r30,8(r28)
	r30.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// bge cr6,0x8213f794
	if (!cr6.getLT()) goto loc_8213F794;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// b 0x8213f79c
	goto loc_8213F79C;
loc_8213F794:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	f0.f64 = double(temp.f32);
loc_8213F79C:
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fctiwz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8213fa9c
	if (!cr6.getGT()) goto loc_8213FA9C;
	// mr r25,r11
	r25.u64 = r11.u64;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f27,6588(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 6588);
	f27.f64 = double(temp.f32);
	// addi r29,r11,-8800
	r29.s64 = r11.s64 + -8800;
	// lfs f28,15336(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 15336);
	f28.f64 = double(temp.f32);
	// lis r11,-11235
	r11.s64 = -736296960;
	// lfs f29,2776(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 2776);
	f29.f64 = double(temp.f32);
	// lfs f30,2692(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 2692);
	f30.f64 = double(temp.f32);
	// li r26,0
	r26.s64 = 0;
	// lfs f31,14028(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14028);
	f31.f64 = double(temp.f32);
	// ori r27,r11,16853
	r27.u64 = r11.u64 | 16853;
	// lfs f26,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f26.f64 = double(temp.f32);
loc_8213F7FC:
	// lhz r11,6(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 6);
	// lhz r9,4(r30)
	ctx.r9.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// extsh r10,r11
	ctx.r10.s64 = r11.s16;
	// extsh r11,r9
	r11.s64 = ctx.r9.s16;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// lhzx r9,r10,r29
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + r29.u32);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// bge cr6,0x8213fa90
	if (!cr6.getLT()) goto loc_8213FA90;
	// addi r8,r29,4
	ctx.r8.s64 = r29.s64 + 4;
	// rotlwi r9,r11,1
	ctx.r9.u64 = __builtin_rotateleft32(r11.u32, 1);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// lhzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r8.u32);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// divw r8,r11,r10
	ctx.r8.s32 = r11.s32 / ctx.r10.s32;
	// andc r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 & ~ctx.r9.u64;
	// twllei r10,0
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// twlgei r9,-1
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8213fa90
	if (!cr6.getEQ()) goto loc_8213FA90;
	// mr r11,r26
	r11.u64 = r26.u64;
	// addi r10,r30,20
	ctx.r10.s64 = r30.s64 + 20;
loc_8213F864:
	// lfs f0,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f26
	cr6.compare(f0.f64, f26.f64);
	// beq cr6,0x8213f884
	if (cr6.getEQ()) goto loc_8213F884;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,40
	ctx.r10.s64 = ctx.r10.s64 + 40;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// blt cr6,0x8213f864
	if (cr6.getLT()) goto loc_8213F864;
	// b 0x8213fa90
	goto loc_8213FA90;
loc_8213F884:
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addi r31,r11,8
	r31.s64 = r11.s64 + 8;
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r10,r3,32
	ctx.r10.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lhz r11,6(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 6);
	// addi r9,r29,6
	ctx.r9.s64 = r29.s64 + 6;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lhzx r11,r11,r9
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r9.u32);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmadds f0,f0,f30,f29
	f0.f64 = double(float(f0.f64 * f30.f64 + f29.f64));
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f0,12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// mulhwu r11,r3,r27
	r11.u64 = (uint64_t(ctx.r3.u32) * uint64_t(r27.u32)) >> 32;
	// sth r26,36(r31)
	PPC_STORE_U16(r31.u32 + 36, r26.u16);
	// subf r10,r11,r3
	ctx.r10.s64 = ctx.r3.s64 - r11.s64;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// rlwinm r11,r11,26,6,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 26) & 0x3FFFFFF;
	// mulli r11,r11,70
	r11.s64 = r11.s64 * 70;
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fadds f0,f0,f28
	f0.f64 = double(float(f0.f64 + f28.f64));
	// stfs f0,32(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 32, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, r11.u64);
	// lfd f0,104(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f27
	f0.f64 = double(float(f0.f64 * f27.f64));
	// stfs f0,16(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r10,r3,32
	ctx.r10.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lhz r11,6(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 6);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r10,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r10.u64);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r10,r29,8
	ctx.r10.s64 = r29.s64 + 8;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lfsx f13,r11,r10
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	ctx.f13.f64 = double(temp.f32);
	// lfd f0,112(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fnmsubs f0,f0,f31,f30
	f0.f64 = double(float(-(f0.f64 * f31.f64 - f30.f64)));
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f0,20(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// lfs f0,12(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// lfs f0,16(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// lfs f0,20(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f0,120(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,24(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// addi r8,r29,20
	ctx.r8.s64 = r29.s64 + 20;
	// std r11,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, r11.u64);
	// lfd f0,128(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,28(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 28, temp.u32);
	// lhz r11,6(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 6);
	// lhz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lhzx r9,r11,r8
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + ctx.r8.u32);
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// ble cr6,0x8213fa90
	if (!cr6.getGT()) goto loc_8213FA90;
	// lhz r11,6(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 6);
	// addi r8,r29,20
	ctx.r8.s64 = r29.s64 + 20;
	// lfs f0,32(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 32);
	f0.f64 = double(temp.f32);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lhzx r9,r11,r29
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// lhzx r11,r11,r8
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r8.u32);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// subf r10,r10,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r11,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, r11.u64);
	// std r10,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r10.u64);
	// lfd f13,136(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lfd f12,144(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// fdivs f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 / ctx.f13.f64));
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,32(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 32, temp.u32);
loc_8213FA90:
	// addi r25,r25,-1
	r25.s64 = r25.s64 + -1;
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// bne cr6,0x8213f7fc
	if (!cr6.getEQ()) goto loc_8213F7FC;
loc_8213FA9C:
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed58c
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8213FAB0"))) PPC_WEAK_FUNC(sub_8213FAB0);
PPC_FUNC_IMPL(__imp__sub_8213FAB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// lwz r30,8(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213fb64
	if (cr6.getEQ()) goto loc_8213FB64;
	// bl 0x8213f598
	sub_8213F598(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8213f750
	sub_8213F750(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8213f428
	sub_8213F428(ctx, base);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lhz r9,6(r30)
	ctx.r9.u64 = PPC_LOAD_U16(r30.u32 + 6);
	// lhz r8,4(r30)
	ctx.r8.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// addi r10,r11,-8800
	ctx.r10.s64 = r11.s64 + -8800;
	// extsh r11,r9
	r11.s64 = ctx.r9.s16;
	// extsh r9,r8
	ctx.r9.s64 = ctx.r8.s16;
	// addi r8,r10,4
	ctx.r8.s64 = ctx.r10.s64 + 4;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lhzx r11,r11,r8
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r8.u32);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// ble cr6,0x8213fb64
	if (!cr6.getGT()) goto loc_8213FB64;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// li r11,0
	r11.s64 = 0;
	// addi r10,r30,20
	ctx.r10.s64 = r30.s64 + 20;
	// lfs f0,2688(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2688);
	f0.f64 = double(temp.f32);
loc_8213FB38:
	// lfs f13,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bgt cr6,0x8213fb64
	if (cr6.getGT()) goto loc_8213FB64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,40
	ctx.r10.s64 = ctx.r10.s64 + 40;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// blt cr6,0x8213fb38
	if (cr6.getLT()) goto loc_8213FB38;
	// li r11,0
	r11.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// b 0x8213fb68
	goto loc_8213FB68;
loc_8213FB64:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8213FB68:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213FB80"))) PPC_WEAK_FUNC(sub_8213FB80);
PPC_FUNC_IMPL(__imp__sub_8213FB80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lbz r3,48(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 48);
	// lwz r28,8(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// bl 0x821184a0
	sub_821184A0(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x8213fd54
	if (cr6.getEQ()) goto loc_8213FD54;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,20(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 20);
	f0.f64 = double(temp.f32);
	// li r30,0
	r30.s64 = 0;
	// addi r31,r28,20
	r31.s64 = r28.s64 + 20;
	// lfs f31,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8213fbd0
	if (!cr6.getGT()) goto loc_8213FBD0;
	// li r30,2
	r30.s64 = 2;
loc_8213FBD0:
	// lfs f0,60(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 60);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8213fbe0
	if (!cr6.getGT()) goto loc_8213FBE0;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
loc_8213FBE0:
	// lfs f0,100(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 100);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8213fbf0
	if (!cr6.getGT()) goto loc_8213FBF0;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
loc_8213FBF0:
	// lfs f0,140(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 140);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8213fc00
	if (!cr6.getGT()) goto loc_8213FC00;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
loc_8213FC00:
	// lfs f0,180(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8213fc10
	if (!cr6.getGT()) goto loc_8213FC10;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
loc_8213FC10:
	// lfs f0,220(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 220);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8213fc20
	if (!cr6.getGT()) goto loc_8213FC20;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
loc_8213FC20:
	// lfs f0,260(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 260);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8213fc30
	if (!cr6.getGT()) goto loc_8213FC30;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
loc_8213FC30:
	// lfs f0,300(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 300);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8213fc40
	if (!cr6.getGT()) goto loc_8213FC40;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
loc_8213FC40:
	// lfs f0,340(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 340);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8213fc50
	if (!cr6.getGT()) goto loc_8213FC50;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
loc_8213FC50:
	// lfs f0,380(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 380);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8213fc60
	if (!cr6.getGT()) goto loc_8213FC60;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
loc_8213FC60:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x8213fd54
	if (!cr6.getGT()) goto loc_8213FD54;
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// li r9,8
	ctx.r9.s64 = 8;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213FC7C:
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// bdnz 0x8213fc7c
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213FC7C;
	// lis r11,-32123
	r11.s64 = -2105212928;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f3,32580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32580);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// bl 0x8238b228
	sub_8238B228(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lfs f3,8(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f3.f64 = double(temp.f32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f2,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8238b128
	sub_8238B128(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f3,13964(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13964);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// bl 0x8238b228
	sub_8238B228(ctx, base);
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// addi r11,r11,27432
	r11.s64 = r11.s64 + 27432;
	// addi r26,r1,80
	r26.s64 = ctx.r1.s64 + 80;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r8,2
	ctx.r8.s64 = 2;
	// li r9,0
	ctx.r9.s64 = 0;
	// bl 0x82098748
	sub_82098748(ctx, base);
	// li r30,10
	r30.s64 = 10;
loc_8213FD1C:
	// lfs f0,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8213fd3c
	if (!cr6.getGT()) goto loc_8213FD3C;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r31,-12
	ctx.r4.s64 = r31.s64 + -12;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8213ee00
	sub_8213EE00(ctx, base);
	// b 0x8213fd40
	goto loc_8213FD40;
loc_8213FD3C:
	// stfs f31,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
loc_8213FD40:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r31,r31,40
	r31.s64 = r31.s64 + 40;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x8213fd1c
	if (!cr6.getEQ()) goto loc_8213FD1C;
	// bl 0x820987a8
	sub_820987A8(ctx, base);
loc_8213FD54:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// lfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8213FD60"))) PPC_WEAK_FUNC(sub_8213FD60);
PPC_FUNC_IMPL(__imp__sub_8213FD60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed534
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// fmr f27,f2
	f27.f64 = ctx.f2.f64;
	// fmr f23,f3
	f23.f64 = ctx.f3.f64;
	// fmr f29,f4
	f29.f64 = ctx.f4.f64;
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f26,3060(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f26.f64 = double(temp.f32);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f30.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f25,f0,f26,f30
	f25.f64 = double(float(f0.f64 * f26.f64 - f30.f64));
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28556(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28556);
	f0.f64 = double(temp.f32);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f12,f13,f31
	ctx.f12.f64 = double(float(ctx.f13.f64 * f31.f64));
	// lfs f13,24884(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24884);
	ctx.f13.f64 = double(temp.f32);
	// fmsubs f24,f12,f0,f13
	f24.f64 = double(float(ctx.f12.f64 * f0.f64 - ctx.f13.f64));
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lis r31,-31994
	r31.s64 = -2096758784;
	// fmuls f13,f25,f27
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f25.f64 * f27.f64));
	// lis r30,-31994
	r30.s64 = -2096758784;
	// fmuls f12,f24,f23
	ctx.f12.f64 = double(float(f24.f64 * f23.f64));
	// li r9,1
	ctx.r9.s64 = 1;
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// stwx r9,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r9.u32);
	// lfs f0,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// fmadds f0,f25,f28,f0
	f0.f64 = double(float(f25.f64 * f28.f64 + f0.f64));
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f0,4(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// lfs f0,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// fmadds f0,f24,f28,f0
	f0.f64 = double(float(f24.f64 * f28.f64 + f0.f64));
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// lfs f11,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f11.f64 = double(temp.f32);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f0,f0,f26,f30
	f0.f64 = double(float(f0.f64 * f26.f64 - f30.f64));
	// fmuls f10,f0,f27
	ctx.f10.f64 = double(float(f0.f64 * f27.f64));
	// fmadds f0,f0,f28,f11
	f0.f64 = double(float(f0.f64 * f28.f64 + ctx.f11.f64));
	// stfs f0,12(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f13,28(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 28, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f12,32(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 32, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f10,36(r11)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(r11.u32 + 36, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f28,12888(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12888);
	f28.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f0,f0,f31,f30
	f0.f64 = double(float(f0.f64 * f31.f64 + f30.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r11,86(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r9,r11
	ctx.r9.s64 = r11.s16;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfs f27,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f27.f64 = double(temp.f32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,52(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 52, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f27,56(r11)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 56, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r9,r3,32
	ctx.r9.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f0,f0,f31,f30
	f0.f64 = double(float(f0.f64 * f31.f64 + f30.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,60(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 60, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r9,r3,32
	ctx.r9.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f0,f0,f31,f30
	f0.f64 = double(float(f0.f64 * f31.f64 + f30.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,80(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 80, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f27,84(r11)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 84, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f0,f0,f31,f30
	f0.f64 = double(float(f0.f64 * f31.f64 + f30.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r11,86(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,88(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 88, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r9,r3,32
	ctx.r9.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f0,f0,f31,f30
	f0.f64 = double(float(f0.f64 * f31.f64 + f30.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,108(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 108, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f27,112(r11)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 112, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r9,r3,32
	ctx.r9.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f0,f0,f31,f30
	f0.f64 = double(float(f0.f64 * f31.f64 + f30.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,116(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 116, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// clrldi r9,r3,32
	ctx.r9.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f0,f0,f31,f30
	f0.f64 = double(float(f0.f64 * f31.f64 + f30.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,136(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 136, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f27,140(r11)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 140, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r9,r3,32
	ctx.r9.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f0,f0,f31,f30
	f0.f64 = double(float(f0.f64 * f31.f64 + f30.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,144(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 144, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// rlwinm r29,r3,8,22,23
	r29.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 8) & 0x300;
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r9,15236(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mr r11,r29
	r11.u64 = r29.u64;
	// mulli r8,r9,164
	ctx.r8.s64 = ctx.r9.s64 * 164;
	// lwz r9,15224(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// addi r8,r11,224
	ctx.r8.s64 = r11.s64 + 224;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// rlwinm r10,r3,8,22,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 8) & 0x300;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// addi r11,r10,224
	r11.s64 = ctx.r10.s64 + 224;
	// std r8,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r8.u64);
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r10,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r10.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f12,f0
	ctx.f12.f64 = double(float(f0.f64));
	// lfs f0,17732(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17732);
	f0.f64 = double(temp.f32);
	// frsp f11,f13
	ctx.f11.f64 = double(float(ctx.f13.f64));
	// fmuls f13,f12,f0
	ctx.f13.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f12,f11,f0
	ctx.f12.f64 = double(float(ctx.f11.f64 * f0.f64));
	// lfd f11,96(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// lfd f10,88(r1)
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f10,f10
	ctx.f10.f64 = double(ctx.f10.s64);
	// frsp f10,f10
	ctx.f10.f64 = double(float(ctx.f10.f64));
	// stfs f12,68(r9)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r9.u32 + 68, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// fmuls f11,f11,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f0.f64));
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// fmuls f0,f10,f0
	f0.f64 = double(float(ctx.f10.f64 * f0.f64));
	// stfs f0,72(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 72, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f12,96(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 96, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f11,100(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r11.u32 + 100, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f13,124(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 124, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f11,128(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r11.u32 + 128, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f13,152(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 152, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f0,156(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 156, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82140440
	if (cr6.getEQ()) goto loc_82140440;
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// clrlwi r9,r3,26
	ctx.r9.u64 = ctx.r3.u32 & 0x3F;
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// subfic r9,r9,255
	xer.ca = ctx.r9.u32 <= 255;
	ctx.r9.s64 = 255 - ctx.r9.s64;
	// stb r9,78(r11)
	PPC_STORE_U8(r11.u32 + 78, ctx.r9.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,78(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 78);
	// stb r10,77(r11)
	PPC_STORE_U8(r11.u32 + 77, ctx.r10.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,77(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 77);
	// stb r10,76(r11)
	PPC_STORE_U8(r11.u32 + 76, ctx.r10.u8);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// clrlwi r9,r3,26
	ctx.r9.u64 = ctx.r3.u32 & 0x3F;
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// subfic r9,r9,255
	xer.ca = ctx.r9.u32 <= 255;
	ctx.r9.s64 = 255 - ctx.r9.s64;
	// stb r9,106(r11)
	PPC_STORE_U8(r11.u32 + 106, ctx.r9.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,106(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 106);
	// stb r10,105(r11)
	PPC_STORE_U8(r11.u32 + 105, ctx.r10.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,105(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 105);
	// stb r10,104(r11)
	PPC_STORE_U8(r11.u32 + 104, ctx.r10.u8);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// clrlwi r9,r3,26
	ctx.r9.u64 = ctx.r3.u32 & 0x3F;
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// subfic r9,r9,255
	xer.ca = ctx.r9.u32 <= 255;
	ctx.r9.s64 = 255 - ctx.r9.s64;
	// stb r9,134(r11)
	PPC_STORE_U8(r11.u32 + 134, ctx.r9.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,134(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 134);
	// stb r10,133(r11)
	PPC_STORE_U8(r11.u32 + 133, ctx.r10.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,133(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 133);
	// stb r10,132(r11)
	PPC_STORE_U8(r11.u32 + 132, ctx.r10.u8);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// clrlwi r9,r3,26
	ctx.r9.u64 = ctx.r3.u32 & 0x3F;
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// subfic r9,r9,255
	xer.ca = ctx.r9.u32 <= 255;
	ctx.r9.s64 = 255 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stb r9,162(r11)
	PPC_STORE_U8(r11.u32 + 162, ctx.r9.u8);
	// b 0x82140540
	goto loc_82140540;
loc_82140440:
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// clrlwi r10,r3,26
	ctx.r10.u64 = ctx.r3.u32 & 0x3F;
	// stb r10,78(r11)
	PPC_STORE_U8(r11.u32 + 78, ctx.r10.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,78(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 78);
	// stb r10,77(r11)
	PPC_STORE_U8(r11.u32 + 77, ctx.r10.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,77(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 77);
	// stb r10,76(r11)
	PPC_STORE_U8(r11.u32 + 76, ctx.r10.u8);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// clrlwi r10,r3,26
	ctx.r10.u64 = ctx.r3.u32 & 0x3F;
	// stb r10,106(r11)
	PPC_STORE_U8(r11.u32 + 106, ctx.r10.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,106(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 106);
	// stb r10,105(r11)
	PPC_STORE_U8(r11.u32 + 105, ctx.r10.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,105(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 105);
	// stb r10,104(r11)
	PPC_STORE_U8(r11.u32 + 104, ctx.r10.u8);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// clrlwi r10,r3,26
	ctx.r10.u64 = ctx.r3.u32 & 0x3F;
	// stb r10,134(r11)
	PPC_STORE_U8(r11.u32 + 134, ctx.r10.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,134(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 134);
	// stb r10,133(r11)
	PPC_STORE_U8(r11.u32 + 133, ctx.r10.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,133(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 133);
	// stb r10,132(r11)
	PPC_STORE_U8(r11.u32 + 132, ctx.r10.u8);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// clrlwi r10,r3,26
	ctx.r10.u64 = ctx.r3.u32 & 0x3F;
	// stb r10,162(r11)
	PPC_STORE_U8(r11.u32 + 162, ctx.r10.u8);
loc_82140540:
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,162(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 162);
	// stb r10,161(r11)
	PPC_STORE_U8(r11.u32 + 161, ctx.r10.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,161(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 161);
	// stb r10,160(r11)
	PPC_STORE_U8(r11.u32 + 160, ctx.r10.u8);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// li r11,220
	r11.s64 = 220;
	// stb r11,79(r10)
	PPC_STORE_U8(ctx.r10.u32 + 79, r11.u8);
	// lwz r10,15236(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r9,r10,164
	ctx.r9.s64 = ctx.r10.s64 * 164;
	// lwz r10,15224(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stb r11,107(r10)
	PPC_STORE_U8(ctx.r10.u32 + 107, r11.u8);
	// lwz r10,15236(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r9,r10,164
	ctx.r9.s64 = ctx.r10.s64 * 164;
	// lwz r10,15224(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stb r11,135(r10)
	PPC_STORE_U8(ctx.r10.u32 + 135, r11.u8);
	// lwz r10,15236(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r9,r10,164
	ctx.r9.s64 = ctx.r10.s64 * 164;
	// lwz r10,15224(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stb r11,163(r10)
	PPC_STORE_U8(ctx.r10.u32 + 163, r11.u8);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r9,r3,32
	ctx.r9.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// std r9,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r9.u64);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,6588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f30.f64 = double(temp.f32);
	// lfd f0,96(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,16(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 16, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r9,r3,32
	ctx.r9.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// std r9,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r9.u64);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,20(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 20, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r9,r3,32
	ctx.r9.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// std r9,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r9.u64);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,24(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 24, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// clrldi r9,r3,32
	ctx.r9.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// std r9,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r9.u64);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfs f30,13964(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13964);
	f30.f64 = double(temp.f32);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,40(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 40, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r9,r3,32
	ctx.r9.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// std r9,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r9.u64);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,44(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 44, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// mulli r10,r11,164
	ctx.r10.s64 = r11.s64 * 164;
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,48(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 48, temp.u32);
	// lwz r11,15236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15236);
	// lwz r10,15216(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 15216);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// stw r11,15236(r31)
	PPC_STORE_U32(r31.u32 + 15236, r11.u32);
	// blt cr6,0x82140730
	if (cr6.getLT()) goto loc_82140730;
	// li r11,0
	r11.s64 = 0;
	// stw r11,15236(r31)
	PPC_STORE_U32(r31.u32 + 15236, r11.u32);
loc_82140730:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed580
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82140740"))) PPC_WEAK_FUNC(sub_82140740);
PPC_FUNC_IMPL(__imp__sub_82140740) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed544
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// bge cr6,0x8214077c
	if (!cr6.getLT()) goto loc_8214077C;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f27,f0
	f27.f64 = double(float(f0.f64));
	// b 0x82140784
	goto loc_82140784;
loc_8214077C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f27,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	f27.f64 = double(temp.f32);
loc_82140784:
	// lis r27,-31994
	r27.s64 = -2096758784;
	// li r29,0
	r29.s64 = 0;
	// mr r28,r29
	r28.u64 = r29.u64;
	// lwz r11,15216(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 15216);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x821409bc
	if (!cr6.getGT()) goto loc_821409BC;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r30,-31994
	r30.s64 = -2096758784;
	// lfs f31,24888(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24888);
	f31.f64 = double(temp.f32);
	// mr r31,r29
	r31.u64 = r29.u64;
	// lfs f28,14184(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 14184);
	f28.f64 = double(temp.f32);
	// lfs f29,14180(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14180);
	f29.f64 = double(temp.f32);
	// lfs f30,12892(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12892);
	f30.f64 = double(temp.f32);
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
loc_821407C8:
	// lwzx r10,r31,r11
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + r11.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x821409a8
	if (!cr6.getGT()) goto loc_821409A8;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// fctiwz f0,f27
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f27.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f27.f64));
	// rotlwi r10,r10,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// stfiwx f0,0,r9
	PPC_STORE_U32(ctx.r9.u32, f0.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 + ctx.r7.u64;
	// cmpwi cr6,r7,4
	cr6.compare<int32_t>(ctx.r7.s32, 4, xer);
	// stwx r10,r31,r11
	PPC_STORE_U32(r31.u32 + r11.u32, ctx.r10.u32);
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r9,r31,r11
	ctx.r9.u64 = r31.u64 + r11.u64;
	// lfs f13,16(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,40(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 40);
	f0.f64 = double(temp.f32);
	// fmadds f0,f0,f27,f13
	f0.f64 = double(float(f0.f64 * f27.f64 + ctx.f13.f64));
	// stfs f0,16(r9)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 16, temp.u32);
	// lfs f13,20(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,44(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 44);
	f0.f64 = double(temp.f32);
	// fmadds f0,f0,f27,f13
	f0.f64 = double(float(f0.f64 * f27.f64 + ctx.f13.f64));
	// stfs f0,20(r9)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 20, temp.u32);
	// lfs f13,24(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 24);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,48(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 48);
	f0.f64 = double(temp.f32);
	// fmadds f0,f0,f27,f13
	f0.f64 = double(float(f0.f64 * f27.f64 + ctx.f13.f64));
	// stfs f0,24(r9)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 24, temp.u32);
	// lfs f13,4(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,28(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 28);
	f0.f64 = double(temp.f32);
	// fmadds f0,f0,f27,f13
	f0.f64 = double(float(f0.f64 * f27.f64 + ctx.f13.f64));
	// stfs f0,4(r9)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 4, temp.u32);
	// lfs f0,36(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 36);
	f0.f64 = double(temp.f32);
	// lfs f13,12(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f27,f13
	f0.f64 = double(float(f0.f64 * f27.f64 + ctx.f13.f64));
	// stfs f0,12(r9)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 12, temp.u32);
	// blt cr6,0x8214090c
	if (cr6.getLT()) goto loc_8214090C;
	// addi r10,r7,-4
	ctx.r10.s64 = ctx.r7.s64 + -4;
	// addi r11,r31,32
	r11.s64 = r31.s64 + 32;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// addi r5,r10,1
	ctx.r5.s64 = ctx.r10.s64 + 1;
	// lwz r10,15224(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// add r8,r11,r10
	ctx.r8.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r6,r5,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
loc_82140870:
	// lfs f0,-24(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -24);
	f0.f64 = double(temp.f32);
	// lfsx f13,r11,r10
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,-24(r8)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r8.u32 + -24, temp.u32);
	// lfsx f0,r11,r10
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x82140894
	if (!cr6.getGT()) goto loc_82140894;
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
	// stfsx f0,r11,r10
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, temp.u32);
loc_82140894:
	// lfs f0,-24(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -24);
	f0.f64 = double(temp.f32);
	// lfsx f13,r11,r10
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,-24(r8)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r8.u32 + -24, temp.u32);
	// lfsx f0,r11,r10
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x821408b8
	if (!cr6.getGT()) goto loc_821408B8;
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
	// stfsx f0,r11,r10
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, temp.u32);
loc_821408B8:
	// lfs f0,-24(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -24);
	f0.f64 = double(temp.f32);
	// lfsx f13,r11,r10
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,-24(r8)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r8.u32 + -24, temp.u32);
	// lfsx f0,r11,r10
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x821408dc
	if (!cr6.getGT()) goto loc_821408DC;
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
	// stfsx f0,r11,r10
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, temp.u32);
loc_821408DC:
	// lfs f0,-24(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -24);
	f0.f64 = double(temp.f32);
	// lfsx f13,r11,r10
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,-24(r8)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r8.u32 + -24, temp.u32);
	// lfsx f0,r11,r10
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x82140900
	if (!cr6.getGT()) goto loc_82140900;
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
	// stfsx f0,r11,r10
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, temp.u32);
loc_82140900:
	// addi r5,r5,-1
	ctx.r5.s64 = ctx.r5.s64 + -1;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x82140870
	if (!cr6.getEQ()) goto loc_82140870;
loc_8214090C:
	// cmpw cr6,r6,r7
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r7.s32, xer);
	// bge cr6,0x82140954
	if (!cr6.getLT()) goto loc_82140954;
	// lwz r10,15224(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// addi r11,r31,32
	r11.s64 = r31.s64 + 32;
	// subf r7,r6,r7
	ctx.r7.s64 = ctx.r7.s64 - ctx.r6.s64;
	// add r8,r11,r10
	ctx.r8.u64 = r11.u64 + ctx.r10.u64;
loc_82140924:
	// lfs f0,-24(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -24);
	f0.f64 = double(temp.f32);
	// lfsx f13,r11,r10
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,-24(r8)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r8.u32 + -24, temp.u32);
	// lfsx f0,r11,r10
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x82140948
	if (!cr6.getGT()) goto loc_82140948;
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
	// stfsx f0,r11,r10
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, temp.u32);
loc_82140948:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x82140924
	if (!cr6.getEQ()) goto loc_82140924;
loc_82140954:
	// lwz r11,0(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmpwi cr6,r11,100
	cr6.compare<int32_t>(r11.s32, 100, xer);
	// ble cr6,0x82140984
	if (!cr6.getGT()) goto loc_82140984;
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrlwi r11,r3,27
	r11.u64 = ctx.r3.u32 & 0x1F;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// beq cr6,0x82140980
	if (cr6.getEQ()) goto loc_82140980;
	// lwzx r10,r31,r11
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + r11.u32);
	// cmpwi cr6,r10,300
	cr6.compare<int32_t>(ctx.r10.s32, 300, xer);
	// bne cr6,0x82140988
	if (!cr6.getEQ()) goto loc_82140988;
loc_82140980:
	// stwx r29,r31,r11
	PPC_STORE_U32(r31.u32 + r11.u32, r29.u32);
loc_82140984:
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
loc_82140988:
	// add r10,r31,r11
	ctx.r10.u64 = r31.u64 + r11.u64;
	// lfs f0,8(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// blt cr6,0x821409a0
	if (cr6.getLT()) goto loc_821409A0;
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// ble cr6,0x821409a8
	if (!cr6.getGT()) goto loc_821409A8;
loc_821409A0:
	// stw r29,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r29.u32);
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
loc_821409A8:
	// lwz r10,15216(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 15216);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// addi r31,r31,164
	r31.s64 = r31.s64 + 164;
	// cmpw cr6,r28,r10
	cr6.compare<int32_t>(r28.s32, ctx.r10.s32, xer);
	// blt cr6,0x821407c8
	if (cr6.getLT()) goto loc_821407C8;
loc_821409BC:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed590
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_821409D0"))) PPC_WEAK_FUNC(sub_821409D0);
PPC_FUNC_IMPL(__imp__sub_821409D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r26,-31994
	r26.s64 = -2096758784;
	// li r24,0
	r24.s64 = 0;
	// lwz r11,15216(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 15216);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82140b68
	if (!cr6.getGT()) goto loc_82140B68;
	// lis r30,-31994
	r30.s64 = -2096758784;
	// lwz r10,15224(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 15224);
loc_821409F8:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82140a08
	if (!cr6.getGT()) goto loc_82140A08;
	// addi r24,r24,1
	r24.s64 = r24.s64 + 1;
loc_82140A08:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r10,r10,164
	ctx.r10.s64 = ctx.r10.s64 + 164;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821409f8
	if (!cr6.getEQ()) goto loc_821409F8;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x82140b68
	if (cr6.getEQ()) goto loc_82140B68;
	// li r29,0
	r29.s64 = 0;
	// ble cr6,0x82140b68
	if (!cr6.getGT()) goto loc_82140B68;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r25,r11,29576
	r25.s64 = r11.s64 + 29576;
loc_82140A30:
	// addi r28,r29,1660
	r28.s64 = r29.s64 + 1660;
	// cmpw cr6,r24,r28
	cr6.compare<int32_t>(r24.s32, r28.s32, xer);
	// bge cr6,0x82140a40
	if (!cr6.getLT()) goto loc_82140A40;
	// mr r28,r24
	r28.u64 = r24.u64;
loc_82140A40:
	// subf r31,r29,r28
	r31.s64 = r28.s64 - r29.s64;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// rlwinm r6,r31,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r8,2
	ctx.r8.s64 = 2;
	// li r9,0
	ctx.r9.s64 = 0;
	// bl 0x82098748
	sub_82098748(ctx, base);
	// lwz r10,15216(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 15216);
	// li r27,0
	r27.s64 = 0;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82140b5c
	if (!cr6.getGT()) goto loc_82140B5C;
	// lwz r9,15224(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// li r31,0
	r31.s64 = 0;
loc_82140A90:
	// lwzx r8,r31,r9
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + ctx.r9.u32);
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82140b4c
	if (!cr6.getGT()) goto loc_82140B4C;
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
	// addi r3,r11,4
	ctx.r3.s64 = r11.s64 + 4;
	// bl 0x8210c7c0
	sub_8210C7C0(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// li r5,64
	ctx.r5.s64 = 64;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r4,r11,52
	ctx.r4.s64 = r11.s64 + 52;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r4,r11,80
	ctx.r4.s64 = r11.s64 + 80;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r4,r11,108
	ctx.r4.s64 = r11.s64 + 108;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r4,r11,52
	ctx.r4.s64 = r11.s64 + 52;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r4,r11,108
	ctx.r4.s64 = r11.s64 + 108;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lwz r11,15224(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15224);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r4,r11,136
	ctx.r4.s64 = r11.s64 + 136;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// cmpw cr6,r29,r28
	cr6.compare<int32_t>(r29.s32, r28.s32, xer);
	// bge cr6,0x82140b5c
	if (!cr6.getLT()) goto loc_82140B5C;
	// lwz r10,15216(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 15216);
	// lwz r9,15224(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 15224);
loc_82140B4C:
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// addi r31,r31,164
	r31.s64 = r31.s64 + 164;
	// cmpw cr6,r27,r10
	cr6.compare<int32_t>(r27.s32, ctx.r10.s32, xer);
	// blt cr6,0x82140a90
	if (cr6.getLT()) goto loc_82140A90;
loc_82140B5C:
	// bl 0x820987a8
	sub_820987A8(ctx, base);
	// cmpw cr6,r29,r24
	cr6.compare<int32_t>(r29.s32, r24.s32, xer);
	// blt cr6,0x82140a30
	if (cr6.getLT()) goto loc_82140A30;
loc_82140B68:
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_82140B70"))) PPC_WEAK_FUNC(sub_82140B70);
PPC_FUNC_IMPL(__imp__sub_82140B70) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// addi r12,r1,-56
	r12.s64 = ctx.r1.s64 + -56;
	// bl 0x823ed544
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// li r26,0
	r26.s64 = 0;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// lfs f29,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f29.f64 = double(temp.f32);
	// li r11,220
	r11.s64 = 220;
	// stfs f29,96(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// sth r26,108(r1)
	PPC_STORE_U16(ctx.r1.u32 + 108, r26.u16);
	// stfs f29,100(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stb r26,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, r26.u8);
	// stfs f29,104(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// stb r26,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, r26.u8);
	// stfs f29,112(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// stb r26,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, r26.u8);
	// stfs f29,116(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// stb r11,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, r11.u8);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f28,14028(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f28.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f13,f0,f28
	ctx.f13.f64 = double(float(f0.f64 * f28.f64));
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fmuls f30,f13,f0
	f30.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lis r10,-13108
	ctx.r10.s64 = -859045888;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// ori r10,r10,52429
	ctx.r10.u64 = ctx.r10.u64 | 52429;
	// extsh r3,r28
	ctx.r3.s64 = r28.s16;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,26,6,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 26) & 0x3FFFFFF;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subfic r11,r11,255
	xer.ca = r11.u32 <= 255;
	r11.s64 = 255 - r11.s64;
	// clrlwi r27,r11,24
	r27.u64 = r11.u32 & 0xFF;
	// bl 0x821184a0
	sub_821184A0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lfs f0,2940(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2940);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// ble cr6,0x82140c48
	if (!cr6.getGT()) goto loc_82140C48;
	// fmr f31,f0
	f31.f64 = f0.f64;
loc_82140C48:
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r10,r3,32
	ctx.r10.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// lfs f10,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	ctx.f10.f64 = double(temp.f32);
	// lfs f9,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f9.f64 = double(temp.f32);
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,12892(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12892);
	f0.f64 = double(temp.f32);
	// lis r11,-32123
	r11.s64 = -2105212928;
	// lfs f13,32576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32576);
	ctx.f13.f64 = double(temp.f32);
	// fmsubs f13,f11,f13,f12
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f13.f64 - ctx.f12.f64));
	// stfs f13,0(r29)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r29.u32 + 0, temp.u32);
	// lfs f12,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,32576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32576);
	ctx.f13.f64 = double(temp.f32);
	// fmsubs f13,f10,f13,f12
	ctx.f13.f64 = double(float(ctx.f10.f64 * ctx.f13.f64 - ctx.f12.f64));
	// stfs f13,4(r29)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r29.u32 + 4, temp.u32);
	// lfs f12,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,32576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32576);
	ctx.f13.f64 = double(temp.f32);
	// fmsubs f13,f9,f13,f12
	ctx.f13.f64 = double(float(ctx.f9.f64 * ctx.f13.f64 - ctx.f12.f64));
	// stfs f13,8(r29)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r29.u32 + 8, temp.u32);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f12,f13,f28
	ctx.f12.f64 = double(float(ctx.f13.f64 * f28.f64));
	// lfs f13,14112(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14112);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// lfs f13,32576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32576);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f30,f0,f31
	f30.f64 = double(float(f0.f64 * f31.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// lis r31,-31994
	r31.s64 = -2096758784;
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lis r30,-31994
	r30.s64 = -2096758784;
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// lwz r10,15220(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// mulli r9,r11,132
	ctx.r9.s64 = r11.s64 * 132;
	// fmuls f28,f0,f31
	f28.f64 = double(float(f0.f64 * f31.f64));
	// sthx r28,r9,r10
	PPC_STORE_U16(ctx.r9.u32 + ctx.r10.u32, r28.u16);
	// lfs f13,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lwz r10,15240(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r9,r10,132
	ctx.r9.s64 = ctx.r10.s64 * 132;
	// lwz r10,15220(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// li r11,7
	r11.s64 = 7;
	// stfs f13,4(r10)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// lwz r10,15240(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// lfs f0,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// mulli r9,r10,132
	ctx.r9.s64 = ctx.r10.s64 * 132;
	// lwz r10,15220(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stfs f0,8(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 8, temp.u32);
	// lwz r10,15240(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// lfs f0,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	f0.f64 = double(temp.f32);
	// mulli r9,r10,132
	ctx.r9.s64 = ctx.r10.s64 * 132;
	// lwz r10,15220(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stfs f0,12(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 12, temp.u32);
	// lwz r10,15240(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r9,r10,132
	ctx.r9.s64 = ctx.r10.s64 * 132;
	// lwz r10,15220(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stfs f31,16(r10)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r10.u32 + 16, temp.u32);
	// lwz r10,15240(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r9,r10,132
	ctx.r9.s64 = ctx.r10.s64 * 132;
	// lwz r10,15220(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// mtctr r11
	ctr.u64 = r11.u64;
loc_82140D7C:
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x82140d7c
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82140D7C;
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// li r9,7
	ctx.r9.s64 = 7;
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82140DB0:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x82140db0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82140DB0;
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// li r9,7
	ctx.r9.s64 = 7;
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// addi r10,r10,76
	ctx.r10.s64 = ctx.r10.s64 + 76;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82140DE4:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x82140de4
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82140DE4;
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// li r9,7
	ctx.r9.s64 = 7;
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// addi r10,r10,104
	ctx.r10.s64 = ctx.r10.s64 + 104;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82140E18:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x82140e18
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82140E18;
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// fadds f0,f0,f30
	f0.f64 = double(float(f0.f64 + f30.f64));
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lfs f31,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f31.f64 = double(temp.f32);
	// lhz r11,86(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,20(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 20, temp.u32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// lfs f0,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f27,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f27.f64 = double(temp.f32);
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// fadds f0,f0,f27
	f0.f64 = double(float(f0.f64 + f27.f64));
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,24(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 24, temp.u32);
	// lfs f0,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	f0.f64 = double(temp.f32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// fadds f0,f0,f28
	f0.f64 = double(float(f0.f64 + f28.f64));
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,28(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 28, temp.u32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f29,36(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 36, temp.u32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f31,40(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 40, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lis r11,20971
	r11.s64 = 1374355456;
	// ori r28,r11,34079
	r28.u64 = r11.u64 | 34079;
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// mulhwu r10,r3,r28
	ctx.r10.u64 = (uint64_t(ctx.r3.u32) * uint64_t(r28.u32)) >> 32;
	// rlwinm r10,r10,28,4,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 28) & 0xFFFFFFF;
	// mulli r10,r10,50
	ctx.r10.s64 = ctx.r10.s64 * 50;
	// subf r10,r10,r3
	ctx.r10.s64 = ctx.r3.s64 - ctx.r10.s64;
	// stb r10,46(r11)
	PPC_STORE_U8(r11.u32 + 46, ctx.r10.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,46(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 46);
	// stb r10,45(r11)
	PPC_STORE_U8(r11.u32 + 45, ctx.r10.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,45(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 45);
	// stb r10,44(r11)
	PPC_STORE_U8(r11.u32 + 44, ctx.r10.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stb r27,47(r11)
	PPC_STORE_U8(r11.u32 + 47, r27.u8);
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f28
	f0.f64 = double(float(f0.f64 + f28.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r11,86(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r9,r11
	ctx.r9.s64 = r11.s16;
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,48(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 48, temp.u32);
	// lfs f0,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// fadds f0,f0,f27
	f0.f64 = double(float(f0.f64 + f27.f64));
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,52(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 52, temp.u32);
	// lfs f0,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	f0.f64 = double(temp.f32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,56(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 56, temp.u32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f29,64(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 64, temp.u32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f29,68(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 68, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// mulhwu r10,r3,r28
	ctx.r10.u64 = (uint64_t(ctx.r3.u32) * uint64_t(r28.u32)) >> 32;
	// rlwinm r10,r10,28,4,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 28) & 0xFFFFFFF;
	// mulli r10,r10,50
	ctx.r10.s64 = ctx.r10.s64 * 50;
	// subf r10,r10,r3
	ctx.r10.s64 = ctx.r3.s64 - ctx.r10.s64;
	// stb r10,74(r11)
	PPC_STORE_U8(r11.u32 + 74, ctx.r10.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,74(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 74);
	// stb r10,73(r11)
	PPC_STORE_U8(r11.u32 + 73, ctx.r10.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,73(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 73);
	// stb r10,72(r11)
	PPC_STORE_U8(r11.u32 + 72, ctx.r10.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stb r27,75(r11)
	PPC_STORE_U8(r11.u32 + 75, r27.u8);
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,76(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 76, temp.u32);
	// lfs f0,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// fadds f0,f0,f27
	f0.f64 = double(float(f0.f64 + f27.f64));
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,80(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 80, temp.u32);
	// lfs f0,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	f0.f64 = double(temp.f32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// fsubs f0,f0,f28
	f0.f64 = double(float(f0.f64 - f28.f64));
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,84(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 84, temp.u32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f31,92(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 92, temp.u32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f29,96(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 96, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// mulhwu r10,r3,r28
	ctx.r10.u64 = (uint64_t(ctx.r3.u32) * uint64_t(r28.u32)) >> 32;
	// rlwinm r10,r10,28,4,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 28) & 0xFFFFFFF;
	// mulli r10,r10,50
	ctx.r10.s64 = ctx.r10.s64 * 50;
	// subf r10,r10,r3
	ctx.r10.s64 = ctx.r3.s64 - ctx.r10.s64;
	// stb r10,102(r11)
	PPC_STORE_U8(r11.u32 + 102, ctx.r10.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,102(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 102);
	// stb r10,101(r11)
	PPC_STORE_U8(r11.u32 + 101, ctx.r10.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,101(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 101);
	// stb r10,100(r11)
	PPC_STORE_U8(r11.u32 + 100, ctx.r10.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stb r27,103(r11)
	PPC_STORE_U8(r11.u32 + 103, r27.u8);
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f28
	f0.f64 = double(float(f0.f64 - f28.f64));
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,104(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 104, temp.u32);
	// lfs f0,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f27
	f0.f64 = double(float(f0.f64 + f27.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r11,86(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,108(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 108, temp.u32);
	// lfs f0,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	f0.f64 = double(temp.f32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// fadds f0,f0,f30
	f0.f64 = double(float(f0.f64 + f30.f64));
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,112(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 112, temp.u32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f31,120(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 120, temp.u32);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f31,124(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 124, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// mulhwu r10,r3,r28
	ctx.r10.u64 = (uint64_t(ctx.r3.u32) * uint64_t(r28.u32)) >> 32;
	// rlwinm r10,r10,28,4,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 28) & 0xFFFFFFF;
	// mulli r10,r10,50
	ctx.r10.s64 = ctx.r10.s64 * 50;
	// subf r10,r10,r3
	ctx.r10.s64 = ctx.r3.s64 - ctx.r10.s64;
	// stb r10,130(r11)
	PPC_STORE_U8(r11.u32 + 130, ctx.r10.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,130(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 130);
	// stb r10,129(r11)
	PPC_STORE_U8(r11.u32 + 129, ctx.r10.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lbz r10,129(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 129);
	// stb r10,128(r11)
	PPC_STORE_U8(r11.u32 + 128, ctx.r10.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// mulli r10,r11,132
	ctx.r10.s64 = r11.s64 * 132;
	// lwz r11,15220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15220);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stb r27,131(r11)
	PPC_STORE_U8(r11.u32 + 131, r27.u8);
	// lwz r11,15240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15240);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,20
	cr6.compare<int32_t>(r11.s32, 20, xer);
	// stw r11,15240(r31)
	PPC_STORE_U32(r31.u32 + 15240, r11.u32);
	// blt cr6,0x82141380
	if (cr6.getLT()) goto loc_82141380;
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,15240(r31)
	PPC_STORE_U32(r31.u32 + 15240, r11.u32);
loc_82141380:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// addi r12,r1,-56
	r12.s64 = ctx.r1.s64 + -56;
	// bl 0x823ed590
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82141390"))) PPC_WEAK_FUNC(sub_82141390);
PPC_FUNC_IMPL(__imp__sub_82141390) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// stwu r1,-352(r1)
	ea = -352 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32009
	r11.s64 = -2097741824;
	// li r31,0
	r31.s64 = 0;
	// addi r22,r11,-9856
	r22.s64 = r11.s64 + -9856;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r28,r31
	r28.u64 = r31.u64;
	// lis r25,-32123
	r25.s64 = -2105212928;
	// addi r26,r11,28600
	r26.s64 = r11.s64 + 28600;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// li r27,2
	r27.s64 = 2;
	// li r23,3
	r23.s64 = 3;
	// li r24,1
	r24.s64 = 1;
loc_821413C8:
	// lwz r11,15220(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 15220);
	// lhzx r11,r28,r11
	r11.u64 = PPC_LOAD_U16(r28.u32 + r11.u32);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x821414c4
	if (cr6.getLT()) goto loc_821414C4;
	// mulli r11,r11,156
	r11.s64 = r11.s64 * 156;
	// lbzx r11,r11,r22
	r11.u64 = PPC_LOAD_U8(r11.u32 + r22.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821414c4
	if (cr6.getEQ()) goto loc_821414C4;
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r1,176
	ctx.r10.s64 = ctx.r1.s64 + 176;
	// li r9,8
	ctx.r9.s64 = 8;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82141400:
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// bdnz 0x82141400
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82141400;
	// lwz r11,15220(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 15220);
	// lhzx r11,r28,r11
	r11.u64 = PPC_LOAD_U16(r28.u32 + r11.u32);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// bl 0x821184a0
	sub_821184A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lfs f3,32580(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + 32580);
	ctx.f3.f64 = double(temp.f32);
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// bl 0x8238b228
	sub_8238B228(ctx, base);
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// lfs f3,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8238b128
	sub_8238B128(ctx, base);
	// lwz r11,15220(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 15220);
	// add r11,r28,r11
	r11.u64 = r28.u64 + r11.u64;
	// addi r30,r11,20
	r30.s64 = r11.s64 + 20;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// addi r20,r1,176
	r20.s64 = ctx.r1.s64 + 176;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r27.u32);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r23,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r23.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r31.u32);
	// li r8,1
	ctx.r8.s64 = 1;
	// stw r31,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r31.u32);
	// li r9,2
	ctx.r9.s64 = 2;
	// stw r31,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r31.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// stw r31,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r31.u32);
	// stw r31,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r31.u32);
	// stw r24,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r24.u32);
	// stw r27,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r27.u32);
	// stw r31,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r31.u32);
	// bl 0x82098e58
	sub_82098E58(ctx, base);
loc_821414C4:
	// addi r28,r28,132
	r28.s64 = r28.s64 + 132;
	// cmpwi cr6,r28,2640
	cr6.compare<int32_t>(r28.s32, 2640, xer);
	// blt cr6,0x821413c8
	if (cr6.getLT()) goto loc_821413C8;
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_821414D8"))) PPC_WEAK_FUNC(sub_821414D8);
PPC_FUNC_IMPL(__imp__sub_821414D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// lis r7,-32015
	ctx.r7.s64 = -2098135040;
	// addi r8,r10,15136
	ctx.r8.s64 = ctx.r10.s64 + 15136;
	// li r6,-1
	ctx.r6.s64 = -1;
loc_821414EC:
	// lbz r10,-8431(r7)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r7.u32 + -8431);
	// rotlwi r10,r10,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// lwzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r9,116(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 116);
	// cmplw cr6,r9,r3
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r3.u32, xer);
	// bne cr6,0x82141520
	if (!cr6.getEQ()) goto loc_82141520;
	// lbz r9,121(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 121);
	// extsb r5,r4
	ctx.r5.s64 = ctx.r4.s8;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// cmpw cr6,r9,r5
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r5.s32, xer);
	// bne cr6,0x82141520
	if (!cr6.getEQ()) goto loc_82141520;
	// sth r6,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r6.u16);
loc_82141520:
	// lbz r10,-8431(r7)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r7.u32 + -8431);
	// rotlwi r10,r10,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// lwzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r9,240(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 240);
	// cmplw cr6,r9,r3
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r3.u32, xer);
	// bne cr6,0x82141554
	if (!cr6.getEQ()) goto loc_82141554;
	// lbz r9,245(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 245);
	// extsb r5,r4
	ctx.r5.s64 = ctx.r4.s8;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// cmpw cr6,r9,r5
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r5.s32, xer);
	// bne cr6,0x82141554
	if (!cr6.getEQ()) goto loc_82141554;
	// sth r6,124(r10)
	PPC_STORE_U16(ctx.r10.u32 + 124, ctx.r6.u16);
loc_82141554:
	// lbz r10,-8431(r7)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r7.u32 + -8431);
	// rotlwi r10,r10,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// lwzx r9,r10,r8
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// add r10,r11,r9
	ctx.r10.u64 = r11.u64 + ctx.r9.u64;
	// lwz r5,364(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 364);
	// cmplw cr6,r5,r3
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r3.u32, xer);
	// bne cr6,0x8214158c
	if (!cr6.getEQ()) goto loc_8214158C;
	// lbz r10,369(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 369);
	// extsb r5,r4
	ctx.r5.s64 = ctx.r4.s8;
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r10,r5
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r5.s32, xer);
	// bne cr6,0x8214158c
	if (!cr6.getEQ()) goto loc_8214158C;
	// add r10,r11,r9
	ctx.r10.u64 = r11.u64 + ctx.r9.u64;
	// sth r6,248(r10)
	PPC_STORE_U16(ctx.r10.u32 + 248, ctx.r6.u16);
loc_8214158C:
	// lbz r10,-8431(r7)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r7.u32 + -8431);
	// rotlwi r10,r10,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// lwzx r9,r10,r8
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// add r10,r11,r9
	ctx.r10.u64 = r11.u64 + ctx.r9.u64;
	// lwz r5,488(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 488);
	// cmplw cr6,r5,r3
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r3.u32, xer);
	// bne cr6,0x821415c4
	if (!cr6.getEQ()) goto loc_821415C4;
	// lbz r10,493(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 493);
	// extsb r5,r4
	ctx.r5.s64 = ctx.r4.s8;
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r10,r5
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r5.s32, xer);
	// bne cr6,0x821415c4
	if (!cr6.getEQ()) goto loc_821415C4;
	// add r10,r11,r9
	ctx.r10.u64 = r11.u64 + ctx.r9.u64;
	// sth r6,372(r10)
	PPC_STORE_U16(ctx.r10.u32 + 372, ctx.r6.u16);
loc_821415C4:
	// lbz r10,-8431(r7)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r7.u32 + -8431);
	// rotlwi r10,r10,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// lwzx r9,r10,r8
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// add r10,r11,r9
	ctx.r10.u64 = r11.u64 + ctx.r9.u64;
	// lwz r5,612(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 612);
	// cmplw cr6,r5,r3
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r3.u32, xer);
	// bne cr6,0x821415fc
	if (!cr6.getEQ()) goto loc_821415FC;
	// lbz r10,617(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 617);
	// extsb r5,r4
	ctx.r5.s64 = ctx.r4.s8;
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r10,r5
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r5.s32, xer);
	// bne cr6,0x821415fc
	if (!cr6.getEQ()) goto loc_821415FC;
	// add r10,r11,r9
	ctx.r10.u64 = r11.u64 + ctx.r9.u64;
	// sth r6,496(r10)
	PPC_STORE_U16(ctx.r10.u32 + 496, ctx.r6.u16);
loc_821415FC:
	// addi r11,r11,620
	r11.s64 = r11.s64 + 620;
	// cmpwi cr6,r11,12400
	cr6.compare<int32_t>(r11.s32, 12400, xer);
	// blt cr6,0x821414ec
	if (cr6.getLT()) goto loc_821414EC;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82141610"))) PPC_WEAK_FUNC(sub_82141610);
PPC_FUNC_IMPL(__imp__sub_82141610) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mulli r9,r3,124
	ctx.r9.s64 = ctx.r3.s64 * 124;
	// lbz r8,-8431(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// addi r11,r11,15136
	r11.s64 = r11.s64 + 15136;
	// rotlwi r7,r8,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r8,r3,1
	ctx.r8.s64 = ctx.r3.s64 + 1;
	// cmpwi cr6,r8,100
	cr6.compare<int32_t>(ctx.r8.s32, 100, xer);
	// lwzx r7,r7,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r6,115(r7)
	PPC_STORE_U8(ctx.r7.u32 + 115, ctx.r6.u8);
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// lbz r5,115(r7)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r7.u32 + 115);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,87(r7)
	PPC_STORE_U8(ctx.r7.u32 + 87, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,59(r7)
	PPC_STORE_U8(ctx.r7.u32 + 59, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,31(r9)
	PPC_STORE_U8(ctx.r9.u32 + 31, ctx.r5.u8);
	// blt cr6,0x82141690
	if (cr6.getLT()) goto loc_82141690;
	// li r8,0
	ctx.r8.s64 = 0;
loc_82141690:
	// lbz r7,-8431(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// mulli r9,r8,124
	ctx.r9.s64 = ctx.r8.s64 * 124;
	// rotlwi r7,r7,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// li r6,25
	ctx.r6.s64 = 25;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmpwi cr6,r8,100
	cr6.compare<int32_t>(ctx.r8.s32, 100, xer);
	// lwzx r7,r7,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r6,115(r7)
	PPC_STORE_U8(ctx.r7.u32 + 115, ctx.r6.u8);
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// lbz r5,115(r7)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r7.u32 + 115);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,87(r7)
	PPC_STORE_U8(ctx.r7.u32 + 87, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,59(r7)
	PPC_STORE_U8(ctx.r7.u32 + 59, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,31(r9)
	PPC_STORE_U8(ctx.r9.u32 + 31, ctx.r5.u8);
	// blt cr6,0x82141704
	if (cr6.getLT()) goto loc_82141704;
	// li r8,0
	ctx.r8.s64 = 0;
loc_82141704:
	// lbz r7,-8431(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// mulli r9,r8,124
	ctx.r9.s64 = ctx.r8.s64 * 124;
	// rotlwi r7,r7,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// li r6,51
	ctx.r6.s64 = 51;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmpwi cr6,r8,100
	cr6.compare<int32_t>(ctx.r8.s32, 100, xer);
	// lwzx r7,r7,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r6,115(r7)
	PPC_STORE_U8(ctx.r7.u32 + 115, ctx.r6.u8);
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// lbz r5,115(r7)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r7.u32 + 115);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,87(r7)
	PPC_STORE_U8(ctx.r7.u32 + 87, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,59(r7)
	PPC_STORE_U8(ctx.r7.u32 + 59, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,31(r9)
	PPC_STORE_U8(ctx.r9.u32 + 31, ctx.r5.u8);
	// blt cr6,0x82141778
	if (cr6.getLT()) goto loc_82141778;
	// li r8,0
	ctx.r8.s64 = 0;
loc_82141778:
	// lbz r7,-8431(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// mulli r9,r8,124
	ctx.r9.s64 = ctx.r8.s64 * 124;
	// rotlwi r7,r7,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// li r6,76
	ctx.r6.s64 = 76;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmpwi cr6,r8,100
	cr6.compare<int32_t>(ctx.r8.s32, 100, xer);
	// lwzx r7,r7,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r6,115(r7)
	PPC_STORE_U8(ctx.r7.u32 + 115, ctx.r6.u8);
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// lbz r5,115(r7)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r7.u32 + 115);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,87(r7)
	PPC_STORE_U8(ctx.r7.u32 + 87, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,59(r7)
	PPC_STORE_U8(ctx.r7.u32 + 59, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,31(r9)
	PPC_STORE_U8(ctx.r9.u32 + 31, ctx.r5.u8);
	// blt cr6,0x821417ec
	if (cr6.getLT()) goto loc_821417EC;
	// li r8,0
	ctx.r8.s64 = 0;
loc_821417EC:
	// lbz r7,-8431(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// mulli r9,r8,124
	ctx.r9.s64 = ctx.r8.s64 * 124;
	// rotlwi r7,r7,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// li r6,102
	ctx.r6.s64 = 102;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmpwi cr6,r8,100
	cr6.compare<int32_t>(ctx.r8.s32, 100, xer);
	// lwzx r7,r7,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r6,115(r7)
	PPC_STORE_U8(ctx.r7.u32 + 115, ctx.r6.u8);
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// lbz r5,115(r7)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r7.u32 + 115);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,87(r7)
	PPC_STORE_U8(ctx.r7.u32 + 87, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,59(r7)
	PPC_STORE_U8(ctx.r7.u32 + 59, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,31(r9)
	PPC_STORE_U8(ctx.r9.u32 + 31, ctx.r5.u8);
	// blt cr6,0x82141860
	if (cr6.getLT()) goto loc_82141860;
	// li r8,0
	ctx.r8.s64 = 0;
loc_82141860:
	// lbz r7,-8431(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// mulli r9,r8,124
	ctx.r9.s64 = ctx.r8.s64 * 124;
	// rotlwi r7,r7,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// li r6,127
	ctx.r6.s64 = 127;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmpwi cr6,r8,100
	cr6.compare<int32_t>(ctx.r8.s32, 100, xer);
	// lwzx r7,r7,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r6,115(r7)
	PPC_STORE_U8(ctx.r7.u32 + 115, ctx.r6.u8);
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// lbz r5,115(r7)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r7.u32 + 115);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,87(r7)
	PPC_STORE_U8(ctx.r7.u32 + 87, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,59(r7)
	PPC_STORE_U8(ctx.r7.u32 + 59, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,31(r9)
	PPC_STORE_U8(ctx.r9.u32 + 31, ctx.r5.u8);
	// blt cr6,0x821418d4
	if (cr6.getLT()) goto loc_821418D4;
	// li r8,0
	ctx.r8.s64 = 0;
loc_821418D4:
	// lbz r7,-8431(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// mulli r9,r8,124
	ctx.r9.s64 = ctx.r8.s64 * 124;
	// rotlwi r7,r7,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// li r6,153
	ctx.r6.s64 = 153;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmpwi cr6,r8,100
	cr6.compare<int32_t>(ctx.r8.s32, 100, xer);
	// lwzx r7,r7,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r6,115(r7)
	PPC_STORE_U8(ctx.r7.u32 + 115, ctx.r6.u8);
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// lbz r5,115(r7)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r7.u32 + 115);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,87(r7)
	PPC_STORE_U8(ctx.r7.u32 + 87, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,59(r7)
	PPC_STORE_U8(ctx.r7.u32 + 59, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,31(r9)
	PPC_STORE_U8(ctx.r9.u32 + 31, ctx.r5.u8);
	// blt cr6,0x82141948
	if (cr6.getLT()) goto loc_82141948;
	// li r8,0
	ctx.r8.s64 = 0;
loc_82141948:
	// lbz r7,-8431(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// mulli r9,r8,124
	ctx.r9.s64 = ctx.r8.s64 * 124;
	// rotlwi r7,r7,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// li r6,178
	ctx.r6.s64 = 178;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmpwi cr6,r8,100
	cr6.compare<int32_t>(ctx.r8.s32, 100, xer);
	// lwzx r7,r7,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r6,115(r7)
	PPC_STORE_U8(ctx.r7.u32 + 115, ctx.r6.u8);
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// lbz r5,115(r7)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r7.u32 + 115);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,87(r7)
	PPC_STORE_U8(ctx.r7.u32 + 87, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,59(r7)
	PPC_STORE_U8(ctx.r7.u32 + 59, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,31(r9)
	PPC_STORE_U8(ctx.r9.u32 + 31, ctx.r5.u8);
	// blt cr6,0x821419bc
	if (cr6.getLT()) goto loc_821419BC;
	// li r8,0
	ctx.r8.s64 = 0;
loc_821419BC:
	// lbz r7,-8431(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// mulli r9,r8,124
	ctx.r9.s64 = ctx.r8.s64 * 124;
	// rotlwi r7,r7,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// li r6,204
	ctx.r6.s64 = 204;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmpwi cr6,r8,100
	cr6.compare<int32_t>(ctx.r8.s32, 100, xer);
	// lwzx r7,r7,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r6,115(r7)
	PPC_STORE_U8(ctx.r7.u32 + 115, ctx.r6.u8);
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// lbz r5,115(r7)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r7.u32 + 115);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,87(r7)
	PPC_STORE_U8(ctx.r7.u32 + 87, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,59(r7)
	PPC_STORE_U8(ctx.r7.u32 + 59, ctx.r5.u8);
	// clrlwi r5,r5,24
	ctx.r5.u64 = ctx.r5.u32 & 0xFF;
	// lbz r6,-8431(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r6,r6,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// lwzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stb r5,31(r9)
	PPC_STORE_U8(ctx.r9.u32 + 31, ctx.r5.u8);
	// blt cr6,0x82141a30
	if (cr6.getLT()) goto loc_82141A30;
	// li r8,0
	ctx.r8.s64 = 0;
loc_82141A30:
	// mulli r9,r8,124
	ctx.r9.s64 = ctx.r8.s64 * 124;
	// lbz r8,-8431(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r8,r8,2
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// li r7,229
	ctx.r7.s64 = 229;
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// add r8,r8,r9
	ctx.r8.u64 = ctx.r8.u64 + ctx.r9.u64;
	// stb r7,115(r8)
	PPC_STORE_U8(ctx.r8.u32 + 115, ctx.r7.u8);
	// lbz r7,-8431(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// lbz r6,115(r8)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r8.u32 + 115);
	// rotlwi r7,r7,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// lwzx r8,r7,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// add r8,r8,r9
	ctx.r8.u64 = ctx.r8.u64 + ctx.r9.u64;
	// stb r6,87(r8)
	PPC_STORE_U8(ctx.r8.u32 + 87, ctx.r6.u8);
	// clrlwi r6,r6,24
	ctx.r6.u64 = ctx.r6.u32 & 0xFF;
	// lbz r7,-8431(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r7,r7,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// lwzx r8,r7,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// add r8,r8,r9
	ctx.r8.u64 = ctx.r8.u64 + ctx.r9.u64;
	// stb r6,59(r8)
	PPC_STORE_U8(ctx.r8.u32 + 59, ctx.r6.u8);
	// clrlwi r8,r6,24
	ctx.r8.u64 = ctx.r6.u32 & 0xFF;
	// lbz r10,-8431(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r10,r10,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stb r8,31(r11)
	PPC_STORE_U8(r11.u32 + 31, ctx.r8.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82141A98"))) PPC_WEAK_FUNC(sub_82141A98);
PPC_FUNC_IMPL(__imp__sub_82141A98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed528
	// stwu r1,-352(r1)
	ea = -352 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r21,0
	r21.s64 = 0;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r3,15
	ctx.r3.s64 = 15;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lfs f30,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f30.f64 = double(temp.f32);
	// li r11,220
	r11.s64 = 220;
	// stfs f30,112(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// stfs f30,116(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// stfs f30,120(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// stfs f30,128(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// stfs f30,132(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// mr r24,r9
	r24.u64 = ctx.r9.u64;
	// sth r21,124(r1)
	PPC_STORE_U16(ctx.r1.u32 + 124, r21.u16);
	// stb r21,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, r21.u8);
	// stb r21,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, r21.u8);
	// stb r21,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, r21.u8);
	// stb r11,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, r11.u8);
	// bl 0x82136fa0
	sub_82136FA0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82141b14
	if (cr6.getEQ()) goto loc_82141B14;
	// li r27,16
	r27.s64 = 16;
loc_82141B14:
	// lfs f13,4(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// fmuls f13,f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// lfs f0,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f12,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// extsh r11,r27
	r11.s64 = r27.s16;
	// addi r23,r10,-7192
	r23.s64 = ctx.r10.s64 + -7192;
	// lfs f29,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f29.f64 = double(temp.f32);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lfs f28,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	f28.f64 = double(temp.f32);
	// addi r9,r23,4
	ctx.r9.s64 = r23.s64 + 4;
	// lfs f27,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	f27.f64 = double(temp.f32);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r20,r11,2,0,29
	r20.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// fmadds f13,f0,f0,f13
	ctx.f13.f64 = double(float(f0.f64 * f0.f64 + ctx.f13.f64));
	// lfsx f21,r20,r23
	temp.u32 = PPC_LOAD_U32(r20.u32 + r23.u32);
	f21.f64 = double(temp.f32);
	// lfd f9,24952(r11)
	ctx.f9.u64 = PPC_LOAD_U64(r11.u32 + 24952);
	// lfsx f20,r20,r9
	temp.u32 = PPC_LOAD_U32(r20.u32 + ctx.r9.u32);
	f20.f64 = double(temp.f32);
	// fmadds f13,f12,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + ctx.f13.f64));
	// fsqrts f13,f13
	ctx.f13.f64 = double(float(sqrt(ctx.f13.f64)));
	// fcmpu cr6,f13,f9
	cr6.compare(ctx.f13.f64, ctx.f9.f64);
	// blt cr6,0x821422ec
	if (cr6.getLT()) goto loc_821422EC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f10,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	ctx.f10.f64 = double(temp.f32);
	// lfs f31,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f31.f64 = double(temp.f32);
	// fdivs f11,f31,f13
	ctx.f11.f64 = double(float(f31.f64 / ctx.f13.f64));
	// fmr f13,f12
	ctx.f13.f64 = ctx.f12.f64;
	// fmuls f12,f11,f0
	ctx.f12.f64 = double(float(ctx.f11.f64 * f0.f64));
	// fmuls f13,f13,f11
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f11.f64));
	// fmuls f10,f10,f11
	ctx.f10.f64 = double(float(ctx.f10.f64 * ctx.f11.f64));
	// fmuls f0,f12,f12
	f0.f64 = double(float(ctx.f12.f64 * ctx.f12.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fsqrts f0,f0
	f0.f64 = double(float(sqrt(f0.f64)));
	// fcmpu cr6,f0,f9
	cr6.compare(f0.f64, ctx.f9.f64);
	// bge cr6,0x82141bbc
	if (!cr6.getLT()) goto loc_82141BBC;
	// fmr f23,f30
	f23.f64 = f30.f64;
	// fmr f26,f30
	f26.f64 = f30.f64;
	// fmr f22,f31
	f22.f64 = f31.f64;
	// fmr f24,f31
	f24.f64 = f31.f64;
	// fmr f25,f30
	f25.f64 = f30.f64;
	// b 0x82141bd8
	goto loc_82141BD8;
loc_82141BBC:
	// fdivs f11,f31,f0
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = double(float(f31.f64 / f0.f64));
	// fneg f26,f0
	f26.u64 = f0.u64 ^ 0x8000000000000000;
	// fmuls f0,f11,f12
	f0.f64 = double(float(ctx.f11.f64 * ctx.f12.f64));
	// fmuls f24,f11,f13
	f24.f64 = double(float(ctx.f11.f64 * ctx.f13.f64));
	// fneg f25,f0
	f25.u64 = f0.u64 ^ 0x8000000000000000;
	// fmuls f23,f0,f10
	f23.f64 = double(float(f0.f64 * ctx.f10.f64));
	// fmuls f22,f24,f10
	f22.f64 = double(float(f24.f64 * ctx.f10.f64));
loc_82141BD8:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// lis r29,-32015
	r29.s64 = -2098135040;
	// beq cr6,0x82141ce0
	if (cr6.getEQ()) goto loc_82141CE0;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r30,8(r28)
	r30.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// li r6,33
	ctx.r6.s64 = 33;
	// addi r31,r11,15264
	r31.s64 = r11.s64 + 15264;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lwz r4,20(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// bl 0x8209b548
	sub_8209B548(ctx, base);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// beq cr6,0x82141c20
	if (cr6.getEQ()) goto loc_82141C20;
	// lwz r11,52(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 52);
	// b 0x82141c24
	goto loc_82141C24;
loc_82141C20:
	// lwz r11,56(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 56);
loc_82141C24:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82141c3c
	if (cr6.getEQ()) goto loc_82141C3C;
	// extsb r10,r26
	ctx.r10.s64 = r26.s8;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// b 0x82141c40
	goto loc_82141C40;
loc_82141C3C:
	// extsb r11,r26
	r11.s64 = r26.s8;
loc_82141C40:
	// rlwinm r11,r11,6,0,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// stfs f24,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f24.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stfs f30,84(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// add r31,r11,r31
	r31.u64 = r11.u64 + r31.u64;
	// stfs f25,88(r1)
	temp.f32 = float(f25.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stfs f23,96(r1)
	temp.f32 = float(f23.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stfs f26,100(r1)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stfs f22,104(r1)
	temp.f32 = float(f22.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// bl 0x8210b5c8
	sub_8210B5C8(ctx, base);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8210b5c8
	sub_8210B5C8(ctx, base);
	// lfs f0,88(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	f0.f64 = double(temp.f32);
	// fmr f12,f0
	ctx.f12.f64 = f0.f64;
	// lbz r11,2(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 2);
	// fmr f13,f0
	ctx.f13.f64 = f0.f64;
	// lfs f0,84(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	f0.f64 = double(temp.f32);
	// fmuls f11,f0,f0
	ctx.f11.f64 = double(float(f0.f64 * f0.f64));
	// lfs f0,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	f0.f64 = double(temp.f32);
	// fmr f10,f0
	ctx.f10.f64 = f0.f64;
	// ori r11,r11,2
	r11.u64 = r11.u64 | 2;
	// fmr f9,f0
	ctx.f9.f64 = f0.f64;
	// lfs f0,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	f0.f64 = double(temp.f32);
	// fmuls f8,f0,f0
	ctx.f8.f64 = double(float(f0.f64 * f0.f64));
	// lfs f0,80(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	f0.f64 = double(temp.f32);
	// fmr f7,f0
	ctx.f7.f64 = f0.f64;
	// fmr f6,f0
	ctx.f6.f64 = f0.f64;
	// lfs f0,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f0.f64 = double(temp.f32);
	// stb r11,2(r30)
	PPC_STORE_U8(r30.u32 + 2, r11.u8);
	// fmadds f13,f13,f12,f11
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 + ctx.f11.f64));
	// fmadds f12,f10,f9,f8
	ctx.f12.f64 = double(float(ctx.f10.f64 * ctx.f9.f64 + ctx.f8.f64));
	// fmadds f13,f7,f6,f13
	ctx.f13.f64 = double(float(ctx.f7.f64 * ctx.f6.f64 + ctx.f13.f64));
	// fmadds f0,f0,f0,f12
	f0.f64 = double(float(f0.f64 * f0.f64 + ctx.f12.f64));
	// fsqrts f13,f13
	ctx.f13.f64 = double(float(sqrt(ctx.f13.f64)));
	// fsqrts f0,f0
	f0.f64 = double(float(sqrt(f0.f64)));
	// fdivs f10,f21,f13
	ctx.f10.f64 = double(float(f21.f64 / ctx.f13.f64));
	// fdivs f9,f20,f0
	ctx.f9.f64 = double(float(f20.f64 / f0.f64));
	// b 0x82141d10
	goto loc_82141D10;
loc_82141CE0:
	// extsh r3,r25
	ctx.r3.s64 = r25.s16;
	// bl 0x821184a0
	sub_821184A0(ctx, base);
	// lis r11,-32123
	r11.s64 = -2105212928;
	// lfs f13,0(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,4(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,32576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32576);
	f0.f64 = double(temp.f32);
	// fmsubs f29,f0,f29,f13
	f29.f64 = double(float(f0.f64 * f29.f64 - ctx.f13.f64));
	// lfs f13,8(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f10,f21,f0
	ctx.f10.f64 = double(float(f21.f64 * f0.f64));
	// fmuls f9,f20,f0
	ctx.f9.f64 = double(float(f20.f64 * f0.f64));
	// fmsubs f28,f0,f28,f12
	f28.f64 = double(float(f0.f64 * f28.f64 - ctx.f12.f64));
	// fmsubs f27,f0,f27,f13
	f27.f64 = double(float(f0.f64 * f27.f64 - ctx.f13.f64));
loc_82141D10:
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// addi r31,r10,15244
	r31.s64 = ctx.r10.s64 + 15244;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// addi r30,r10,15136
	r30.s64 = ctx.r10.s64 + 15136;
	// li r10,7
	ctx.r10.s64 = 7;
	// lwzx r7,r11,r31
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r9,r11,r30
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r7,124
	r11.s64 = ctx.r7.s64 * 124;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stw r28,116(r11)
	PPC_STORE_U32(r11.u32 + 116, r28.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r7,r11,r31
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r9,r11,r30
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r7,124
	r11.s64 = ctx.r7.s64 * 124;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stb r26,120(r11)
	PPC_STORE_U8(r11.u32 + 120, r26.u8);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r7,r11,r31
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r9,r11,r30
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r7,124
	r11.s64 = ctx.r7.s64 * 124;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stb r24,121(r11)
	PPC_STORE_U8(r11.u32 + 121, r24.u8);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r9,r9,124
	ctx.r9.s64 = ctx.r9.s64 * 124;
	// sthx r25,r9,r11
	PPC_STORE_U16(ctx.r9.u32 + r11.u32, r25.u16);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r7,r11,r31
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r9,r11,r30
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r7,124
	r11.s64 = ctx.r7.s64 * 124;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// sth r27,2(r11)
	PPC_STORE_U16(r11.u32 + 2, r27.u16);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r7,r11,r31
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r9,r11,r30
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r7,124
	r11.s64 = ctx.r7.s64 * 124;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82141DD0:
	// lwz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x82141dd0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82141DD0;
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// li r9,7
	ctx.r9.s64 = 7;
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r7,r11,r31
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r8,r11,r30
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r7,124
	r11.s64 = ctx.r7.s64 * 124;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82141E0C:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x82141e0c
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82141E0C;
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// li r9,7
	ctx.r9.s64 = 7;
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r7,r11,r31
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r8,r11,r30
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r7,124
	r11.s64 = ctx.r7.s64 * 124;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// addi r11,r11,60
	r11.s64 = r11.s64 + 60;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82141E48:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x82141e48
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82141E48;
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// li r9,7
	ctx.r9.s64 = 7;
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r7,r11,r31
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r8,r11,r30
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r7,124
	r11.s64 = ctx.r7.s64 * 124;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// addi r11,r11,88
	r11.s64 = r11.s64 + 88;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82141E84:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x82141e84
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82141E84;
	// fmuls f0,f24,f10
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f24.f64 * ctx.f10.f64));
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// fmuls f13,f23,f9
	ctx.f13.f64 = double(float(f23.f64 * ctx.f9.f64));
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// fmuls f12,f10,f30
	ctx.f12.f64 = double(float(ctx.f10.f64 * f30.f64));
	// fmuls f11,f26,f9
	ctx.f11.f64 = double(float(f26.f64 * ctx.f9.f64));
	// fmuls f10,f25,f10
	ctx.f10.f64 = double(float(f25.f64 * ctx.f10.f64));
	// fmuls f9,f22,f9
	ctx.f9.f64 = double(float(f22.f64 * ctx.f9.f64));
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// fsubs f8,f29,f0
	ctx.f8.f64 = double(float(f29.f64 - f0.f64));
	// fsubs f7,f29,f0
	ctx.f7.f64 = double(float(f29.f64 - f0.f64));
	// fsubs f6,f28,f12
	ctx.f6.f64 = double(float(f28.f64 - ctx.f12.f64));
	// fsubs f5,f28,f12
	ctx.f5.f64 = double(float(f28.f64 - ctx.f12.f64));
	// fsubs f4,f27,f10
	ctx.f4.f64 = double(float(f27.f64 - ctx.f10.f64));
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// fsubs f8,f8,f13
	ctx.f8.f64 = double(float(ctx.f8.f64 - ctx.f13.f64));
	// fadds f7,f7,f13
	ctx.f7.f64 = double(float(ctx.f7.f64 + ctx.f13.f64));
	// stfs f8,4(r11)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// fsubs f6,f6,f11
	ctx.f6.f64 = double(float(ctx.f6.f64 - ctx.f11.f64));
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// fsubs f8,f4,f9
	ctx.f8.f64 = double(float(ctx.f4.f64 - ctx.f9.f64));
	// fadds f5,f5,f11
	ctx.f5.f64 = double(float(ctx.f5.f64 + ctx.f11.f64));
	// fadds f4,f9,f10
	ctx.f4.f64 = double(float(ctx.f9.f64 + ctx.f10.f64));
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// fadds f4,f4,f27
	ctx.f4.f64 = double(float(ctx.f4.f64 + f27.f64));
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f6,8(r11)
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// fadds f6,f12,f11
	ctx.f6.f64 = double(float(ctx.f12.f64 + ctx.f11.f64));
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// fadds f6,f6,f28
	ctx.f6.f64 = double(float(ctx.f6.f64 + f28.f64));
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f8,12(r11)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// fsubs f8,f27,f10
	ctx.f8.f64 = double(float(f27.f64 - ctx.f10.f64));
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// fadds f8,f8,f9
	ctx.f8.f64 = double(float(ctx.f8.f64 + ctx.f9.f64));
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f30,20(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 20, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f30,24(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 24, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f7,32(r11)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(r11.u32 + 32, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// fadds f7,f13,f0
	ctx.f7.f64 = double(float(ctx.f13.f64 + f0.f64));
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// fadds f7,f7,f29
	ctx.f7.f64 = double(float(ctx.f7.f64 + f29.f64));
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f5,36(r11)
	temp.f32 = float(ctx.f5.f64);
	PPC_STORE_U32(r11.u32 + 36, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f8,40(r11)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(r11.u32 + 40, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// fadds f0,f0,f29
	f0.f64 = double(float(f0.f64 + f29.f64));
	// fadds f12,f12,f28
	ctx.f12.f64 = double(float(ctx.f12.f64 + f28.f64));
	// addi r24,r23,8
	r24.s64 = r23.s64 + 8;
	// fadds f10,f10,f27
	ctx.f10.f64 = double(float(ctx.f10.f64 + f27.f64));
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fsubs f13,f12,f11
	ctx.f13.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fsubs f12,f10,f9
	ctx.f12.f64 = double(float(ctx.f10.f64 - ctx.f9.f64));
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f30,48(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 48, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f31,52(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 52, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f7,60(r11)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(r11.u32 + 60, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f6,64(r11)
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(r11.u32 + 64, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f4,68(r11)
	temp.f32 = float(ctx.f4.f64);
	PPC_STORE_U32(r11.u32 + 68, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r10,r11,r31
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r10,r10,124
	ctx.r10.s64 = ctx.r10.s64 * 124;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f31,76(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 76, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f31,80(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 80, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f0,88(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 88, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f13,92(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 92, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f12,96(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 96, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mr r28,r21
	r28.u64 = r21.u64;
	// li r25,255
	r25.s64 = 255;
	// stfs f31,104(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 104, temp.u32);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stfs f30,108(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 108, temp.u32);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r22,r11,24892
	r22.s64 = r11.s64 + 24892;
	// lis r11,-13108
	r11.s64 = -859045888;
	// ori r23,r11,52429
	r23.u64 = r11.u64 | 52429;
loc_8214215C:
	// lbzx r11,r20,r24
	r11.u64 = PPC_LOAD_U8(r20.u32 + r24.u32);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x821421f0
	if (cr6.getLT()) goto loc_821421F0;
	// beq cr6,0x821421cc
	if (cr6.getEQ()) goto loc_821421CC;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// blt cr6,0x8214218c
	if (cr6.getLT()) goto loc_8214218C;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// mr r27,r21
	r27.u64 = r21.u64;
	// mr r26,r21
	r26.u64 = r21.u64;
	// b 0x82142218
	goto loc_82142218;
loc_8214218C:
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r26,r11,24
	r26.u64 = r11.u32 & 0xFF;
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r27,r11,24
	r27.u64 = r11.u32 & 0xFF;
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r10,r11,24
	ctx.r10.u64 = r11.u32 & 0xFF;
	// b 0x82142218
	goto loc_82142218;
loc_821421CC:
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// mulhwu r11,r3,r23
	r11.u64 = (uint64_t(ctx.r3.u32) * uint64_t(r23.u32)) >> 32;
	// rlwinm r11,r11,27,5,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x7FFFFFF;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// subfic r11,r11,255
	xer.ca = r11.u32 <= 255;
	r11.s64 = 255 - r11.s64;
	// b 0x8214220c
	goto loc_8214220C;
loc_821421F0:
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// mulhwu r11,r3,r23
	r11.u64 = (uint64_t(ctx.r3.u32) * uint64_t(r23.u32)) >> 32;
	// rlwinm r11,r11,27,5,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x7FFFFFF;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
loc_8214220C:
	// clrlwi r10,r11,24
	ctx.r10.u64 = r11.u32 & 0xFF;
	// mr r26,r10
	r26.u64 = ctx.r10.u64;
	// mr r27,r10
	r27.u64 = ctx.r10.u64;
loc_82142218:
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r8,r11,r31
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r9,r11,r30
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r8,124
	r11.s64 = ctx.r8.s64 * 124;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// stb r26,28(r11)
	PPC_STORE_U8(r11.u32 + 28, r26.u8);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r8,r11,r31
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r9,r11,r30
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r8,124
	r11.s64 = ctx.r8.s64 * 124;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// stb r27,29(r11)
	PPC_STORE_U8(r11.u32 + 29, r27.u8);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r8,r11,r31
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r9,r11,r30
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r8,124
	r11.s64 = ctx.r8.s64 * 124;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// stb r10,30(r11)
	PPC_STORE_U8(r11.u32 + 30, ctx.r10.u8);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r10,r11,r30
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r11,r9,124
	r11.s64 = ctx.r9.s64 * 124;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// addi r28,r28,28
	r28.s64 = r28.s64 + 28;
	// cmpwi cr6,r28,112
	cr6.compare<int32_t>(r28.s32, 112, xer);
	// stb r25,31(r11)
	PPC_STORE_U8(r11.u32 + 31, r25.u8);
	// blt cr6,0x8214215c
	if (cr6.getLT()) goto loc_8214215C;
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r10,r11,r31
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stwx r10,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, ctx.r10.u32);
	// rotlwi r10,r10,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// cmpwi cr6,r10,100
	cr6.compare<int32_t>(ctx.r10.s32, 100, xer);
	// blt cr6,0x821422c8
	if (cr6.getLT()) goto loc_821422C8;
	// stwx r21,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, r21.u32);
loc_821422C8:
	// lwzx r3,r11,r31
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// bl 0x82141610
	sub_82141610(ctx, base);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// li r10,-1
	ctx.r10.s64 = -1;
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mulli r9,r9,124
	ctx.r9.s64 = ctx.r9.s64 * 124;
	// sthx r10,r9,r11
	PPC_STORE_U16(ctx.r9.u32 + r11.u32, ctx.r10.u16);
loc_821422EC:
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed574
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_82142300"))) PPC_WEAK_FUNC(sub_82142300);
PPC_FUNC_IMPL(__imp__sub_82142300) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// addi r11,r11,15136
	r11.s64 = r11.s64 + 15136;
	// lbz r10,-8431(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// rotlwi r9,r10,2
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// mulli r10,r3,124
	ctx.r10.s64 = ctx.r3.s64 * 124;
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// add r9,r11,r10
	ctx.r9.u64 = r11.u64 + ctx.r10.u64;
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// addi r10,r10,-7192
	ctx.r10.s64 = ctx.r10.s64 + -7192;
	// lhz r11,2(r9)
	r11.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// addi r8,r10,9
	ctx.r8.s64 = ctx.r10.s64 + 9;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r11,r11,r8
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r8.u32);
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// beq cr6,0x8214235c
	if (cr6.getEQ()) goto loc_8214235C;
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// b 0x82142364
	goto loc_82142364;
loc_8214235C:
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
loc_82142364:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// li r11,0
	r11.s64 = 0;
	// addi r10,r9,8
	ctx.r10.s64 = ctx.r9.s64 + 8;
loc_82142374:
	// lfs f0,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f1
	cr6.compare(f0.f64, ctx.f1.f64);
	// bgt cr6,0x82142394
	if (cr6.getGT()) goto loc_82142394;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,28
	ctx.r10.s64 = ctx.r10.s64 + 28;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// blt cr6,0x82142374
	if (cr6.getLT()) goto loc_82142374;
	// blr 
	return;
loc_82142394:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821423A0"))) PPC_WEAK_FUNC(sub_821423A0);
PPC_FUNC_IMPL(__imp__sub_821423A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -160, f31.u64);
	// ld r12,-4096(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// ld r12,-8192(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8192);
	// stwu r1,-8384(r1)
	ea = -8384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// li r19,0
	r19.s64 = 0;
	// mr r16,r3
	r16.u64 = ctx.r3.u64;
	// mr r15,r19
	r15.u64 = r19.u64;
	// lfs f31,16140(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16140);
	f31.f64 = double(temp.f32);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// stw r28,8412(r1)
	PPC_STORE_U32(ctx.r1.u32 + 8412, r28.u32);
	// mr r14,r19
	r14.u64 = r19.u64;
	// mr r21,r19
	r21.u64 = r19.u64;
	// cmplwi cr6,r16,0
	cr6.compare<uint32_t>(r16.u32, 0, xer);
	// lis r29,-32015
	r29.s64 = -2098135040;
	// addi r26,r11,17376
	r26.s64 = r11.s64 + 17376;
	// beq cr6,0x82142444
	if (cr6.getEQ()) goto loc_82142444;
	// lwz r14,8(r16)
	r14.u64 = PPC_LOAD_U32(r16.u32 + 8);
	// li r6,33
	ctx.r6.s64 = 33;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// lwz r4,20(r14)
	ctx.r4.u64 = PPC_LOAD_U32(r14.u32 + 20);
	// bl 0x8209b548
	sub_8209B548(ctx, base);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,20(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 20);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// beq cr6,0x82142420
	if (cr6.getEQ()) goto loc_82142420;
	// lwz r21,52(r11)
	r21.u64 = PPC_LOAD_U32(r11.u32 + 52);
	// b 0x82142424
	goto loc_82142424;
loc_82142420:
	// lwz r21,56(r11)
	r21.u64 = PPC_LOAD_U32(r11.u32 + 56);
loc_82142424:
	// lbz r11,0(r16)
	r11.u64 = PPC_LOAD_U8(r16.u32 + 0);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x82142444
	if (!cr6.getEQ()) goto loc_82142444;
	// mr r3,r14
	ctx.r3.u64 = r14.u64;
	// bl 0x820d49c8
	sub_820D49C8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82142444
	if (cr6.getEQ()) goto loc_82142444;
	// lfs f31,72(r16)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r16.u32 + 72);
	f31.f64 = double(temp.f32);
loc_82142444:
	// li r5,76
	ctx.r5.s64 = 76;
	// stw r19,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r19.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,148
	ctx.r3.s64 = ctx.r1.s64 + 148;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r7,r19
	ctx.r7.u64 = r19.u64;
	// addi r30,r11,15136
	r30.s64 = r11.s64 + 15136;
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r6,r11,r30
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
loc_82142470:
	// lwz r11,116(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 116);
	// cmplw cr6,r11,r16
	cr6.compare<uint32_t>(r11.u32, r16.u32, xer);
	// bne cr6,0x821424d4
	if (!cr6.getEQ()) goto loc_821424D4;
	// lhz r11,0(r6)
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + 0);
	// cmplwi cr6,r11,32768
	cr6.compare<uint32_t>(r11.u32, 32768, xer);
	// bge cr6,0x821424d4
	if (!cr6.getLT()) goto loc_821424D4;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r3,r7
	ctx.r3.u64 = ctx.r7.u64;
	// bl 0x82142300
	sub_82142300(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821424d4
	if (cr6.getEQ()) goto loc_821424D4;
	// lhz r11,2(r6)
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + 2);
	// addi r9,r1,144
	ctx.r9.s64 = ctx.r1.s64 + 144;
	// addi r5,r1,224
	ctx.r5.s64 = ctx.r1.s64 + 224;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// li r15,1
	r15.s64 = 1;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mulli r8,r11,100
	ctx.r8.s64 = r11.s64 * 100;
	// lwzx r11,r10,r9
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r11,r10,r9
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, r11.u32);
	// stwx r7,r8,r5
	PPC_STORE_U32(ctx.r8.u32 + ctx.r5.u32, ctx.r7.u32);
loc_821424D4:
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// addi r6,r6,124
	ctx.r6.s64 = ctx.r6.s64 + 124;
	// cmpwi cr6,r7,100
	cr6.compare<int32_t>(ctx.r7.s32, 100, xer);
	// blt cr6,0x82142470
	if (cr6.getLT()) goto loc_82142470;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820979e8
	sub_820979E8(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r18,r1,144
	r18.s64 = ctx.r1.s64 + 144;
	// addi r17,r11,28616
	r17.s64 = r11.s64 + 28616;
	// lis r11,-32250
	r11.s64 = -2113536000;
	// mr r20,r17
	r20.u64 = r17.u64;
	// lis r22,-32123
	r22.s64 = -2105212928;
	// addi r23,r11,11952
	r23.s64 = r11.s64 + 11952;
loc_82142508:
	// lwz r31,0(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// ble cr6,0x8214275c
	if (!cr6.getGT()) goto loc_8214275C;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// rlwinm r6,r31,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r8,2
	ctx.r8.s64 = 2;
	// li r9,0
	ctx.r9.s64 = 0;
	// bl 0x82098748
	sub_82098748(ctx, base);
	// addi r24,r31,-1
	r24.s64 = r31.s64 + -1;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// blt cr6,0x82142758
	if (cr6.getLT()) goto loc_82142758;
	// add r11,r19,r24
	r11.u64 = r19.u64 + r24.u64;
	// lbz r7,-8431(r29)
	ctx.r7.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// addi r10,r1,224
	ctx.r10.s64 = ctx.r1.s64 + 224;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r25,r11,r10
	r25.u64 = r11.u64 + ctx.r10.u64;
loc_82142560:
	// lwz r27,0(r25)
	r27.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// mr r11,r23
	r11.u64 = r23.u64;
	// li r9,8
	ctx.r9.s64 = 8;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82142574:
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// bdnz 0x82142574
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82142574;
	// cmplwi cr6,r16,0
	cr6.compare<uint32_t>(r16.u32, 0, xer);
	// beq cr6,0x82142608
	if (cr6.getEQ()) goto loc_82142608;
	// rlwinm r11,r7,2,22,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0x3FC;
	// mulli r31,r27,124
	r31.s64 = r27.s64 * 124;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// cmplwi cr6,r21,0
	cr6.compare<uint32_t>(r21.u32, 0, xer);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// li r9,8
	ctx.r9.s64 = 8;
	// lbz r11,120(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 120);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// beq cr6,0x821425e4
	if (cr6.getEQ()) goto loc_821425E4;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r21
	r11.u64 = PPC_LOAD_U32(r11.u32 + r21.u32);
	// rlwinm r11,r11,6,0,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_821425CC:
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// bdnz 0x821425cc
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_821425CC;
	// b 0x82142688
	goto loc_82142688;
loc_821425E4:
	// rlwinm r11,r11,6,0,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_821425F0:
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// bdnz 0x821425f0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_821425F0;
	// b 0x82142688
	goto loc_82142688;
loc_82142608:
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// li r9,8
	ctx.r9.s64 = 8;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8214261C:
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// bdnz 0x8214261c
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8214261C;
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// mulli r31,r27,124
	r31.s64 = r27.s64 * 124;
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// lhzx r11,r11,r31
	r11.u64 = PPC_LOAD_U16(r11.u32 + r31.u32);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// bl 0x821184a0
	sub_821184A0(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lfs f3,32580(r22)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r22.u32 + 32580);
	ctx.f3.f64 = double(temp.f32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// bl 0x8238b228
	sub_8238B228(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f3,8(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,4(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 4);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8238b128
	sub_8238B128(ctx, base);
	// lbz r7,-8431(r29)
	ctx.r7.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// lwz r28,8412(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 8412);
loc_82142688:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82142300
	sub_82142300(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82142748
	if (cr6.getEQ()) goto loc_82142748;
	// rlwinm r11,r7,2,22,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0x3FC;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r4,r11,4
	ctx.r4.s64 = r11.s64 + 4;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r4,r11,32
	ctx.r4.s64 = r11.s64 + 32;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r4,r11,60
	ctx.r4.s64 = r11.s64 + 60;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r4,r11,4
	ctx.r4.s64 = r11.s64 + 4;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r4,r11,60
	ctx.r4.s64 = r11.s64 + 60;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lbz r11,-8431(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -8431);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// rotlwi r11,r11,2
	r11.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r4,r11,88
	ctx.r4.s64 = r11.s64 + 88;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lbz r7,-8431(r29)
	ctx.r7.u64 = PPC_LOAD_U8(r29.u32 + -8431);
loc_82142748:
	// addi r24,r24,-1
	r24.s64 = r24.s64 + -1;
	// addi r25,r25,-4
	r25.s64 = r25.s64 + -4;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// bge cr6,0x82142560
	if (!cr6.getLT()) goto loc_82142560;
loc_82142758:
	// bl 0x820987a8
	sub_820987A8(ctx, base);
loc_8214275C:
	// addi r20,r20,16
	r20.s64 = r20.s64 + 16;
	// addi r11,r17,320
	r11.s64 = r17.s64 + 320;
	// addi r18,r18,4
	r18.s64 = r18.s64 + 4;
	// addi r19,r19,100
	r19.s64 = r19.s64 + 100;
	// cmpw cr6,r20,r11
	cr6.compare<int32_t>(r20.s32, r11.s32, xer);
	// blt cr6,0x82142508
	if (cr6.getLT()) goto loc_82142508;
	// bl 0x82097a90
	sub_82097A90(ctx, base);
	// cmplwi cr6,r16,0
	cr6.compare<uint32_t>(r16.u32, 0, xer);
	// beq cr6,0x8214279c
	if (cr6.getEQ()) goto loc_8214279C;
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// bne cr6,0x8214279c
	if (!cr6.getEQ()) goto loc_8214279C;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r11,2(r14)
	r11.u64 = PPC_LOAD_U8(r14.u32 + 2);
	// slw r10,r10,r28
	ctx.r10.u64 = r28.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r28.u8 & 0x3F));
	// andc r11,r11,r10
	r11.u64 = r11.u64 & ~ctx.r10.u64;
	// stb r11,2(r14)
	PPC_STORE_U8(r14.u32 + 2, r11.u8);
loc_8214279C:
	// addi r1,r1,8384
	ctx.r1.s64 = ctx.r1.s64 + 8384;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_821427A8"))) PPC_WEAK_FUNC(sub_821427A8);
PPC_FUNC_IMPL(__imp__sub_821427A8) {
	PPC_FUNC_PROLOGUE();
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x821423a0
	sub_821423A0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821427B8"))) PPC_WEAK_FUNC(sub_821427B8);
PPC_FUNC_IMPL(__imp__sub_821427B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// stfd f30,-120(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -120, f30.u64);
	// stfd f31,-112(r1)
	PPC_STORE_U64(ctx.r1.u32 + -112, f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r20,r10
	r20.u64 = ctx.r10.u64;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// extsh r28,r25
	r28.s64 = r25.s16;
	// mr r27,r9
	r27.u64 = ctx.r9.u64;
	// lwz r9,15148(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 15148);
	// addi r11,r11,-8536
	r11.s64 = r11.s64 + -8536;
	// rlwinm r10,r28,6,0,25
	ctx.r10.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 6) & 0xFFFFFFC0;
	// mr r23,r7
	r23.u64 = ctx.r7.u64;
	// mr r21,r8
	r21.u64 = ctx.r8.u64;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r22,r5
	r22.u64 = ctx.r5.u64;
	// li r31,0
	r31.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r7,r9,4
	ctx.r7.s64 = ctx.r9.s64 + 4;
	// add r24,r10,r11
	r24.u64 = ctx.r10.u64 + r11.u64;
loc_82142814:
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82142834
	if (cr6.getEQ()) goto loc_82142834;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// addi r7,r7,992
	ctx.r7.s64 = ctx.r7.s64 + 992;
	// cmpwi cr6,r8,12
	cr6.compare<int32_t>(ctx.r8.s32, 12, xer);
	// blt cr6,0x82142814
	if (cr6.getLT()) goto loc_82142814;
	// b 0x82142bc4
	goto loc_82142BC4;
loc_82142834:
	// mulli r11,r8,992
	r11.s64 = ctx.r8.s64 * 992;
	// add r31,r11,r9
	r31.u64 = r11.u64 + ctx.r9.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82142bc4
	if (cr6.getEQ()) goto loc_82142BC4;
	// bl 0x820cca48
	sub_820CCA48(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r28,16
	cr6.compare<int32_t>(r28.s32, 16, xer);
	// beq cr6,0x82142868
	if (cr6.getEQ()) goto loc_82142868;
	// cmpwi cr6,r28,1
	cr6.compare<int32_t>(r28.s32, 1, xer);
	// beq cr6,0x82142868
	if (cr6.getEQ()) goto loc_82142868;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,6
	r11.s64 = 6;
	// stw r11,15228(r10)
	PPC_STORE_U32(ctx.r10.u32 + 15228, r11.u32);
loc_82142868:
	// lbz r4,57(r24)
	ctx.r4.u64 = PPC_LOAD_U8(r24.u32 + 57);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x821428a0
	if (cr6.getEQ()) goto loc_821428A0;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r8,268
	ctx.r8.s64 = 268;
	// addi r7,r11,24964
	ctx.r7.s64 = r11.s64 + 24964;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x820dd8d8
	sub_820DD8D8(ctx, base);
loc_821428A0:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82142bc4
	if (cr6.getEQ()) goto loc_82142BC4;
	// lbz r11,1(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1);
	// li r10,7
	ctx.r10.s64 = 7;
	// stw r31,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r31.u32);
	// ori r11,r11,2
	r11.u64 = r11.u64 | 2;
	// stw r22,24(r30)
	PPC_STORE_U32(r30.u32 + 24, r22.u32);
	// stb r10,0(r30)
	PPC_STORE_U8(r30.u32 + 0, ctx.r10.u8);
	// stb r11,1(r30)
	PPC_STORE_U8(r30.u32 + 1, r11.u8);
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,12(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 12, temp.u32);
	// li r11,0
	r11.s64 = 0;
	// lfs f0,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,16(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 16, temp.u32);
	// lfs f0,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 20, temp.u32);
	// lbz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U8(r27.u32 + 0);
	// cmplwi cr6,r10,255
	cr6.compare<uint32_t>(ctx.r10.u32, 255, xer);
	// beq cr6,0x82142910
	if (cr6.getEQ()) goto loc_82142910;
loc_821428EC:
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// bge cr6,0x82142910
	if (!cr6.getLT()) goto loc_82142910;
	// lbzx r10,r11,r27
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// add r9,r30,r11
	ctx.r9.u64 = r30.u64 + r11.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stb r10,48(r9)
	PPC_STORE_U8(ctx.r9.u32 + 48, ctx.r10.u8);
	// lbzx r10,r11,r27
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// cmplwi cr6,r10,255
	cr6.compare<uint32_t>(ctx.r10.u32, 255, xer);
	// bne cr6,0x821428ec
	if (!cr6.getEQ()) goto loc_821428EC;
loc_82142910:
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// li r10,255
	ctx.r10.s64 = 255;
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// stb r10,48(r11)
	PPC_STORE_U8(r11.u32 + 48, ctx.r10.u8);
	// beq cr6,0x82142930
	if (cr6.getEQ()) goto loc_82142930;
	// lbz r11,1(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1);
	// ori r11,r11,8
	r11.u64 = r11.u64 | 8;
	// stb r11,1(r30)
	PPC_STORE_U8(r30.u32 + 1, r11.u8);
loc_82142930:
	// lbz r27,319(r1)
	r27.u64 = PPC_LOAD_U8(ctx.r1.u32 + 319);
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82142948
	if (cr6.getEQ()) goto loc_82142948;
	// lbz r11,1(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1);
	// ori r11,r11,64
	r11.u64 = r11.u64 | 64;
	// stb r11,1(r30)
	PPC_STORE_U8(r30.u32 + 1, r11.u8);
loc_82142948:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820ccb68
	sub_820CCB68(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820cca18
	sub_820CCA18(ctx, base);
	// li r10,-1
	ctx.r10.s64 = -1;
	// li r8,0
	ctx.r8.s64 = 0;
	// stb r25,972(r31)
	PPC_STORE_U8(r31.u32 + 972, r25.u8);
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// stw r26,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r26.u32);
	// stb r23,973(r31)
	PPC_STORE_U8(r31.u32 + 973, r23.u8);
	// sth r10,970(r31)
	PPC_STORE_U16(r31.u32 + 970, ctx.r10.u16);
	// sth r8,968(r31)
	PPC_STORE_U16(r31.u32 + 968, ctx.r8.u16);
	// stb r21,974(r31)
	PPC_STORE_U8(r31.u32 + 974, r21.u8);
	// beq cr6,0x82142a18
	if (cr6.getEQ()) goto loc_82142A18;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x821429d8
	if (cr6.getEQ()) goto loc_821429D8;
	// lwz r11,24(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821429d8
	if (cr6.getEQ()) goto loc_821429D8;
	// lfs f0,12(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,976(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 976, temp.u32);
	// lwz r3,24(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// lfs f2,20(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,12(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x821108b0
	sub_821108B0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,12468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12468);
	f0.f64 = double(temp.f32);
	// fadds f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 + f0.f64));
	// stfs f0,980(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 980, temp.u32);
	// lfs f0,20(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,984(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 984, temp.u32);
	// lwz r3,24(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// bl 0x82110d78
	sub_82110D78(ctx, base);
	// sth r3,988(r31)
	PPC_STORE_U16(r31.u32 + 988, ctx.r3.u16);
	// b 0x82142a24
	goto loc_82142A24;
loc_821429D8:
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// stfs f0,976(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 976, temp.u32);
	// lfs f2,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x821108b0
	sub_821108B0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lfs f0,12468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12468);
	f0.f64 = double(temp.f32);
	// fadds f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 + f0.f64));
	// stfs f0,980(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 980, temp.u32);
	// lfs f0,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,984(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 984, temp.u32);
	// bl 0x82110d78
	sub_82110D78(ctx, base);
	// sth r3,988(r31)
	PPC_STORE_U16(r31.u32 + 988, ctx.r3.u16);
	// b 0x82142a24
	goto loc_82142A24;
loc_82142A18:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// lfs f0,24960(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24960);
	f0.f64 = double(temp.f32);
	// stfs f0,976(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 976, temp.u32);
loc_82142A24:
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,16(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + 16);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f0.f64 = double(temp.f32);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f11,f13,f31
	ctx.f11.f64 = double(float(ctx.f13.f64 * f31.f64));
	// lfs f13,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f11,f0,f13
	f0.f64 = double(float(ctx.f11.f64 * f0.f64 + ctx.f13.f64));
	// fmuls f30,f0,f12
	f30.f64 = double(float(f0.f64 * ctx.f12.f64));
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f13,f0,f31
	ctx.f13.f64 = double(float(f0.f64 * f31.f64));
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,20(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// li r11,1
	r11.s64 = 1;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// sth r11,28(r31)
	PPC_STORE_U16(r31.u32 + 28, r11.u16);
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,24(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
	// lfs f0,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// lfs f0,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// lfs f0,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,16(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// lhz r11,36(r24)
	r11.u64 = PPC_LOAD_U16(r24.u32 + 36);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 588);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r28,80(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x82142b38
	if (!cr6.getGT()) goto loc_82142B38;
loc_82142B14:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lfs f4,40(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + 40);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,52(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 52);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,48(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 48);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,44(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 44);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8213fd60
	sub_8213FD60(ctx, base);
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x82142b14
	if (!cr6.getEQ()) goto loc_82142B14;
loc_82142B38:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82142bc4
	if (cr6.getEQ()) goto loc_82142BC4;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82142bc4
	if (cr6.getEQ()) goto loc_82142BC4;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x82142bc4
	if (!cr6.getEQ()) goto loc_82142BC4;
	// lbz r10,972(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 972);
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// beq cr6,0x82142bc4
	if (cr6.getEQ()) goto loc_82142BC4;
	// lbz r9,973(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 973);
	// extsb r6,r10
	ctx.r6.s64 = ctx.r10.s8;
	// cntlzw r8,r20
	ctx.r8.u64 = r20.u32 == 0 ? 32 : __builtin_clz(r20.u32);
	// lwz r11,24(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// extsb r10,r9
	ctx.r10.s64 = ctx.r9.s8;
	// lfs f0,12(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// rlwinm r8,r8,27,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 27) & 0x1;
	// cntlzw r9,r10
	ctx.r9.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// lfs f0,16(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,84(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// xori r8,r8,1
	ctx.r8.u64 = ctx.r8.u64 ^ 1;
	// rlwinm r7,r9,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// lfs f0,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	f0.f64 = double(temp.f32);
	// addi r9,r30,48
	ctx.r9.s64 = r30.s64 + 48;
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// xori r7,r7,1
	ctx.r7.u64 = ctx.r7.u64 ^ 1;
	// lwz r10,308(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 308);
	// clrlwi r6,r6,16
	ctx.r6.u64 = ctx.r6.u32 & 0xFFFF;
	// lhz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lbz r4,2(r11)
	ctx.r4.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// bl 0x8215e370
	sub_8215E370(ctx, base);
loc_82142BC4:
	// cntlzw r11,r31
	r11.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f30,-120(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -120);
	// lfd f31,-112(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_82142BE0"))) PPC_WEAK_FUNC(sub_82142BE0);
PPC_FUNC_IMPL(__imp__sub_82142BE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed534
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// addi r10,r11,-8536
	ctx.r10.s64 = r11.s64 + -8536;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r26,8(r25)
	r26.u64 = PPC_LOAD_U32(r25.u32 + 8);
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// lbz r9,972(r26)
	ctx.r9.u64 = PPC_LOAD_U8(r26.u32 + 972);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// extsb r8,r9
	ctx.r8.s64 = ctx.r9.s8;
	// rlwinm r9,r8,6,0,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 6) & 0xFFFFFFC0;
	// add r27,r9,r10
	r27.u64 = ctx.r9.u64 + ctx.r10.u64;
	// beq cr6,0x821431a8
	if (cr6.getEQ()) goto loc_821431A8;
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// bge cr6,0x82142c44
	if (!cr6.getLT()) goto loc_82142C44;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f23,f0
	f23.f64 = double(float(f0.f64));
	// b 0x82142c4c
	goto loc_82142C4C;
loc_82142C44:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f23,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	f23.f64 = double(temp.f32);
loc_82142C4C:
	// lhz r11,968(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 968);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// ble cr6,0x82142f9c
	if (!cr6.getGT()) goto loc_82142F9C;
	// lhz r10,28(r27)
	ctx.r10.u64 = PPC_LOAD_U16(r27.u32 + 28);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x82142f9c
	if (!cr6.getLT()) goto loc_82142F9C;
	// extsw r10,r11
	ctx.r10.s64 = r11.s32;
	// lfs f13,8(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,0(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// cmpwi cr6,r8,14
	cr6.compare<int32_t>(ctx.r8.s32, 14, xer);
	// lfs f11,12(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 12);
	ctx.f11.f64 = double(temp.f32);
	// lfs f10,4(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 4);
	ctx.f10.f64 = double(temp.f32);
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f27,f13,f0,f12
	f27.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// fmadds f26,f11,f0,f10
	f26.f64 = double(float(ctx.f11.f64 * f0.f64 + ctx.f10.f64));
	// bne cr6,0x82142d10
	if (!cr6.getEQ()) goto loc_82142D10;
	// cmpwi cr6,r11,32
	cr6.compare<int32_t>(r11.s32, 32, xer);
	// bge cr6,0x82142cbc
	if (!cr6.getLT()) goto loc_82142CBC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,16(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f0.f64 = double(temp.f32);
	// fmadds f0,f23,f0,f13
	f0.f64 = double(float(f23.f64 * f0.f64 + ctx.f13.f64));
	// stfs f0,16(r25)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r25.u32 + 16, temp.u32);
loc_82142CBC:
	// lhz r11,968(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 968);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,32
	cr6.compare<int32_t>(r11.s32, 32, xer);
	// ble cr6,0x82142d10
	if (!cr6.getGT()) goto loc_82142D10;
	// extsw r9,r11
	ctx.r9.s64 = r11.s32;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lfs f0,3908(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3908);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lfs f13,2956(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2956);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fmadds f27,f12,f0,f13
	f27.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// lfs f0,12020(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12020);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f27,f0
	cr6.compare(f27.f64, f0.f64);
	// ble cr6,0x82142d08
	if (!cr6.getGT()) goto loc_82142D08;
	// fmr f27,f0
	f27.f64 = f0.f64;
loc_82142D08:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f26,2948(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2948);
	f26.f64 = double(temp.f32);
loc_82142D10:
	// lhz r10,30(r27)
	ctx.r10.u64 = PPC_LOAD_U16(r27.u32 + 30);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// lhz r9,28(r27)
	ctx.r9.u64 = PPC_LOAD_U16(r27.u32 + 28);
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// extsh r11,r9
	r11.s64 = ctx.r9.s16;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lfd f12,96(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f0,592(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 592);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fdivs f0,f0,f12
	f0.f64 = double(float(f0.f64 / ctx.f12.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r8
	PPC_STORE_U32(ctx.r8.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lfs f31,2692(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2692);
	f31.f64 = double(temp.f32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82142ee4
	if (!cr6.getGT()) goto loc_82142EE4;
	// mr r28,r11
	r28.u64 = r11.u64;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r29,r26,28
	r29.s64 = r26.s64 + 28;
	// li r30,1
	r30.s64 = 1;
	// lfs f24,6588(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 6588);
	f24.f64 = double(temp.f32);
	// lfs f25,2776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	f25.f64 = double(temp.f32);
	// lfs f30,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f30.f64 = double(temp.f32);
loc_82142DB0:
	// li r11,0
	r11.s64 = 0;
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
loc_82142DB8:
	// lhz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82142dd8
	if (cr6.getEQ()) goto loc_82142DD8;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 24;
	// cmpwi cr6,r11,40
	cr6.compare<int32_t>(r11.s32, 40, xer);
	// blt cr6,0x82142db8
	if (cr6.getLT()) goto loc_82142DB8;
	// b 0x82142ed8
	goto loc_82142ED8;
loc_82142DD8:
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r31,r11,r26
	r31.u64 = r11.u64 + r26.u64;
	// sth r30,28(r31)
	PPC_STORE_U16(r31.u32 + 28, r30.u16);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lfs f0,12(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + 12);
	f0.f64 = double(temp.f32);
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f13,96(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmsubs f13,f13,f30,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f30.f64 - f31.f64));
	// fmadds f0,f13,f27,f0
	f0.f64 = double(float(ctx.f13.f64 * f27.f64 + f0.f64));
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lfs f0,16(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + 16);
	f0.f64 = double(temp.f32);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmsubs f13,f13,f30,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f30.f64 - f31.f64));
	// fmadds f0,f13,f26,f0
	f0.f64 = double(float(ctx.f13.f64 * f26.f64 + f0.f64));
	// stfs f0,12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lfs f0,20(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + 20);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmsubs f13,f13,f30,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f30.f64 - f31.f64));
	// fmadds f0,f13,f27,f0
	f0.f64 = double(float(ctx.f13.f64 * f27.f64 + f0.f64));
	// stfs f0,16(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// lfs f0,16(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 16);
	f0.f64 = double(temp.f32);
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, r11.u64);
	// lfd f13,104(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f13,f13,f30
	ctx.f13.f64 = double(float(ctx.f13.f64 * f30.f64));
	// fmadds f13,f13,f31,f25
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f25.f64));
	// fmuls f29,f13,f0
	f29.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f0,120(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fmuls f28,f0,f24
	f28.f64 = double(float(f0.f64 * f24.f64));
	// fmr f1,f28
	ctx.f1.f64 = f28.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f28
	ctx.f1.f64 = f28.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// stfs f0,20(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// stfs f0,24(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
loc_82142ED8:
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x82142db0
	if (!cr6.getEQ()) goto loc_82142DB0;
loc_82142EE4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,16(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,16(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + 16);
	ctx.f12.f64 = double(temp.f32);
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// lfs f11,20(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + 20);
	ctx.f11.f64 = double(temp.f32);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// lfs f0,12896(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12896);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f13,12(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f1,f27,f31,f0
	ctx.f1.f64 = double(float(f27.f64 * f31.f64 + f0.f64));
	// fmadds f0,f26,f31,f0
	f0.f64 = double(float(f26.f64 * f31.f64 + f0.f64));
	// fsubs f10,f13,f1
	ctx.f10.f64 = double(float(ctx.f13.f64 - ctx.f1.f64));
	// stfs f10,120(r1)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// fsubs f10,f12,f0
	ctx.f10.f64 = double(float(ctx.f12.f64 - f0.f64));
	// stfs f10,124(r1)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// fadds f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 + f0.f64));
	// stfs f0,108(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// fsubs f10,f11,f1
	ctx.f10.f64 = double(float(ctx.f11.f64 - ctx.f1.f64));
	// stfs f10,128(r1)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// fadds f13,f13,f1
	ctx.f13.f64 = double(float(ctx.f13.f64 + ctx.f1.f64));
	// stfs f13,104(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// fadds f0,f11,f1
	f0.f64 = double(float(ctx.f11.f64 + ctx.f1.f64));
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// bl 0x820cedf8
	sub_820CEDF8(ctx, base);
	// lhz r11,968(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 968);
	// lhz r10,28(r27)
	ctx.r10.u64 = PPC_LOAD_U16(r27.u32 + 28);
	// lfs f0,20(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 20);
	f0.f64 = double(temp.f32);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lfs f13,24(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 24);
	ctx.f13.f64 = double(temp.f32);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// fsubs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 - f0.f64));
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f12,120(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// std r10,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r10.u64);
	// lfd f11,104(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// fmuls f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64));
	// fdivs f13,f13,f11
	ctx.f13.f64 = double(float(ctx.f13.f64 / ctx.f11.f64));
	// fadds f2,f13,f0
	ctx.f2.f64 = double(float(ctx.f13.f64 + f0.f64));
	// fmr f1,f2
	ctx.f1.f64 = ctx.f2.f64;
	// bl 0x8213e648
	sub_8213E648(ctx, base);
loc_82142F9C:
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fctiwz f0,f23
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f23.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f23.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82143150
	if (!cr6.getGT()) goto loc_82143150;
	// mr r30,r11
	r30.u64 = r11.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r31,r26,52
	r31.s64 = r26.s64 + 52;
	// lfs f31,12468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12468);
	f31.f64 = double(temp.f32);
loc_82142FC4:
	// lhz r10,968(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 968);
	// mr r11,r31
	r11.u64 = r31.u64;
	// li r9,8
	ctx.r9.s64 = 8;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// sth r10,968(r26)
	PPC_STORE_U16(r26.u32 + 968, ctx.r10.u16);
loc_82142FD8:
	// lhz r10,-24(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + -24);
	// extsh r8,r10
	ctx.r8.s64 = ctx.r10.s16;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82142ff0
	if (!cr6.getGT()) goto loc_82142FF0;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// sth r10,-24(r11)
	PPC_STORE_U16(r11.u32 + -24, ctx.r10.u16);
loc_82142FF0:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r8,r10
	ctx.r8.s64 = ctx.r10.s16;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82143008
	if (!cr6.getGT()) goto loc_82143008;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
loc_82143008:
	// lhz r10,24(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 24);
	// extsh r8,r10
	ctx.r8.s64 = ctx.r10.s16;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82143020
	if (!cr6.getGT()) goto loc_82143020;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// sth r10,24(r11)
	PPC_STORE_U16(r11.u32 + 24, ctx.r10.u16);
loc_82143020:
	// lhz r10,48(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 48);
	// extsh r8,r10
	ctx.r8.s64 = ctx.r10.s16;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82143038
	if (!cr6.getGT()) goto loc_82143038;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// sth r10,48(r11)
	PPC_STORE_U16(r11.u32 + 48, ctx.r10.u16);
loc_82143038:
	// lhz r10,72(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 72);
	// extsh r8,r10
	ctx.r8.s64 = ctx.r10.s16;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82143050
	if (!cr6.getGT()) goto loc_82143050;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// sth r10,72(r11)
	PPC_STORE_U16(r11.u32 + 72, ctx.r10.u16);
loc_82143050:
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r11,r11,120
	r11.s64 = r11.s64 + 120;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82142fd8
	if (!cr6.getEQ()) goto loc_82142FD8;
	// lhz r11,968(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 968);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// bne cr6,0x8214307c
	if (!cr6.getEQ()) goto loc_8214307C;
	// lbz r10,972(r26)
	ctx.r10.u64 = PPC_LOAD_U8(r26.u32 + 972);
	// cmplwi cr6,r10,14
	cr6.compare<uint32_t>(ctx.r10.u32, 14, xer);
	// beq cr6,0x8214309c
	if (cr6.getEQ()) goto loc_8214309C;
loc_8214307C:
	// lhz r10,28(r27)
	ctx.r10.u64 = PPC_LOAD_U16(r27.u32 + 28);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// addi r10,r10,-20
	ctx.r10.s64 = ctx.r10.s64 + -20;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bne cr6,0x82143108
	if (!cr6.getEQ()) goto loc_82143108;
	// lbz r11,972(r26)
	r11.u64 = PPC_LOAD_U8(r26.u32 + 972);
	// cmplwi cr6,r11,14
	cr6.compare<uint32_t>(r11.u32, 14, xer);
	// beq cr6,0x82143108
	if (cr6.getEQ()) goto loc_82143108;
loc_8214309C:
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821430ec
	if (cr6.getEQ()) goto loc_821430EC;
	// lwz r4,24(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x821430ec
	if (cr6.getEQ()) goto loc_821430EC;
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r6,r11,48
	ctx.r6.s64 = r11.s64 + 48;
	// lbz r5,56(r27)
	ctx.r5.u64 = PPC_LOAD_U8(r27.u32 + 56);
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// bne cr6,0x821430dc
	if (!cr6.getEQ()) goto loc_821430DC;
	// lbz r9,1(r25)
	ctx.r9.u64 = PPC_LOAD_U8(r25.u32 + 1);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwinm r7,r9,29,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 29) & 0x1;
	// addi r3,r10,88
	ctx.r3.s64 = ctx.r10.s64 + 88;
	// b 0x82143104
	goto loc_82143104;
loc_821430DC:
	// lbz r10,1(r25)
	ctx.r10.u64 = PPC_LOAD_U8(r25.u32 + 1);
	// addi r3,r11,12
	ctx.r3.s64 = r11.s64 + 12;
	// rlwinm r7,r10,29,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 29) & 0x1;
	// b 0x82143104
	goto loc_82143104;
loc_821430EC:
	// lbz r11,1(r25)
	r11.u64 = PPC_LOAD_U8(r25.u32 + 1);
	// addi r6,r25,48
	ctx.r6.s64 = r25.s64 + 48;
	// lbz r5,56(r27)
	ctx.r5.u64 = PPC_LOAD_U8(r27.u32 + 56);
	// addi r3,r25,12
	ctx.r3.s64 = r25.s64 + 12;
	// lwz r4,24(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 24);
	// rlwinm r7,r11,29,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1;
loc_82143104:
	// bl 0x8213f300
	sub_8213F300(ctx, base);
loc_82143108:
	// lhz r11,28(r27)
	r11.u64 = PPC_LOAD_U16(r27.u32 + 28);
	// lhz r10,968(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 968);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bne cr6,0x82143144
	if (!cr6.getEQ()) goto loc_82143144;
	// lbz r11,973(r26)
	r11.u64 = PPC_LOAD_U8(r26.u32 + 973);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82143144
	if (cr6.getEQ()) goto loc_82143144;
	// lfs f0,16(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 16);
	f0.f64 = double(temp.f32);
	// addi r3,r26,976
	ctx.r3.s64 = r26.s64 + 976;
	// lhz r5,988(r26)
	ctx.r5.u64 = PPC_LOAD_U16(r26.u32 + 988);
	// fmuls f1,f0,f31
	ctx.f1.f64 = double(float(f0.f64 * f31.f64));
	// bl 0x82140b70
	sub_82140B70(ctx, base);
loc_82143144:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82142fc4
	if (!cr6.getEQ()) goto loc_82142FC4;
loc_82143150:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// lfs f13,32(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 32);
	ctx.f13.f64 = double(temp.f32);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lhz r9,968(r26)
	ctx.r9.u64 = PPC_LOAD_U16(r26.u32 + 968);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// lfs f0,24988(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24988);
	f0.f64 = double(temp.f32);
	// lhz r11,28(r27)
	r11.u64 = PPC_LOAD_U16(r27.u32 + 28);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// extsh r11,r11
	r11.s64 = r11.s16;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// blt cr6,0x821431a8
	if (cr6.getLT()) goto loc_821431A8;
	// li r11,0
	r11.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed580
	// b 0x823ed17c
	return;
loc_821431A8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed580
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_821431C0"))) PPC_WEAK_FUNC(sub_821431C0);
PPC_FUNC_IMPL(__imp__sub_821431C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -88, f31.u64);
	// ld r12,-4096(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// stwu r1,-5264(r1)
	ea = -5264 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r29,8(r3)
	r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lbz r3,48(r3)
	ctx.r3.u64 = PPC_LOAD_U8(ctx.r3.u32 + 48);
	// addi r31,r11,-8536
	r31.s64 = r11.s64 + -8536;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r11,r31,32
	r11.s64 = r31.s64 + 32;
	// lbz r9,972(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 972);
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// rlwinm r9,r9,6,0,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
	// lfsx f0,r9,r11
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14436(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	f31.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// bl 0x821184a0
	sub_821184A0(ctx, base);
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x82143950
	if (cr6.getEQ()) goto loc_82143950;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// li r23,0
	r23.s64 = 0;
	// lbz r11,-8431(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -8431);
	// subfic r10,r11,0
	xer.ca = r11.u32 <= 0;
	ctx.r10.s64 = 0 - r11.s64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// subfe r11,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	r11.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,31,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF1;
	// addi r30,r11,30
	r30.s64 = r11.s64 + 30;
	// extsw r11,r30
	r11.s64 = r30.s32;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fdivs f31,f31,f0
	f31.f64 = double(float(f31.f64 / f0.f64));
	// bne cr6,0x82143274
	if (!cr6.getEQ()) goto loc_82143274;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// li r28,2
	r28.s64 = 2;
	// lbz r11,579(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 579);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82143278
	if (!cr6.getEQ()) goto loc_82143278;
loc_82143274:
	// mr r28,r23
	r28.u64 = r23.u64;
loc_82143278:
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r1,304
	ctx.r10.s64 = ctx.r1.s64 + 304;
	// li r9,8
	ctx.r9.s64 = 8;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8214328C:
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// bdnz 0x8214328c
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8214328C;
	// lis r11,-32123
	r11.s64 = -2105212928;
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// lfs f3,32580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32580);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// bl 0x8238b228
	sub_8238B228(ctx, base);
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// lfs f3,8(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + 8);
	ctx.f3.f64 = double(temp.f32);
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// lfs f2,4(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 4);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8238b128
	sub_8238B128(ctx, base);
	// li r5,116
	ctx.r5.s64 = 116;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r23,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r23.u32);
	// addi r3,r1,180
	ctx.r3.s64 = ctx.r1.s64 + 180;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// lwz r25,80(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r11,2
	r11.s64 = 2;
	// addi r5,r29,52
	ctx.r5.s64 = r29.s64 + 52;
loc_821432F4:
	// lhz r10,-24(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + -24);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8214337c
	if (!cr6.getGT()) goto loc_8214337C;
	// cmpw cr6,r10,r25
	cr6.compare<int32_t>(ctx.r10.s32, r25.s32, xer);
	// bgt cr6,0x8214337c
	if (cr6.getGT()) goto loc_8214337C;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lbz r9,972(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 972);
	// addi r7,r31,32
	ctx.r7.s64 = r31.s64 + 32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// addi r8,r1,176
	ctx.r8.s64 = ctx.r1.s64 + 176;
	// rlwinm r9,r9,6,0,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r4,r11,-2
	ctx.r4.s64 = r11.s64 + -2;
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,368
	ctx.r3.s64 = ctx.r1.s64 + 368;
	// lfsx f0,r9,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm r9,r7,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r9,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// mulli r6,r10,30
	ctx.r6.s64 = ctx.r10.s64 * 30;
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, ctx.r10.u32);
	// stwx r4,r7,r3
	PPC_STORE_U32(ctx.r7.u32 + ctx.r3.u32, ctx.r4.u32);
loc_8214337C:
	// lhz r10,0(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + 0);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82143404
	if (!cr6.getGT()) goto loc_82143404;
	// cmpw cr6,r10,r25
	cr6.compare<int32_t>(ctx.r10.s32, r25.s32, xer);
	// bgt cr6,0x82143404
	if (cr6.getGT()) goto loc_82143404;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lbz r9,972(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 972);
	// addi r7,r31,32
	ctx.r7.s64 = r31.s64 + 32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// addi r8,r1,176
	ctx.r8.s64 = ctx.r1.s64 + 176;
	// rlwinm r9,r9,6,0,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r4,r11,-1
	ctx.r4.s64 = r11.s64 + -1;
	// std r10,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, ctx.r10.u64);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,368
	ctx.r3.s64 = ctx.r1.s64 + 368;
	// lfsx f0,r9,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// lfd f13,160(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm r9,r7,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r9,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// mulli r6,r10,30
	ctx.r6.s64 = ctx.r10.s64 * 30;
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, ctx.r10.u32);
	// stwx r4,r7,r3
	PPC_STORE_U32(ctx.r7.u32 + ctx.r3.u32, ctx.r4.u32);
loc_82143404:
	// lhz r10,24(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + 24);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82143488
	if (!cr6.getGT()) goto loc_82143488;
	// cmpw cr6,r10,r25
	cr6.compare<int32_t>(ctx.r10.s32, r25.s32, xer);
	// bgt cr6,0x82143488
	if (cr6.getGT()) goto loc_82143488;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lbz r9,972(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 972);
	// addi r7,r31,32
	ctx.r7.s64 = r31.s64 + 32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// addi r8,r1,176
	ctx.r8.s64 = ctx.r1.s64 + 176;
	// rlwinm r9,r9,6,0,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r4,r1,368
	ctx.r4.s64 = ctx.r1.s64 + 368;
	// std r10,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r10.u64);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfsx f0,r9,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// lfd f13,112(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm r9,r7,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r9,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// mulli r6,r10,30
	ctx.r6.s64 = ctx.r10.s64 * 30;
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, ctx.r10.u32);
	// stwx r11,r7,r4
	PPC_STORE_U32(ctx.r7.u32 + ctx.r4.u32, r11.u32);
loc_82143488:
	// lhz r10,48(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + 48);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82143510
	if (!cr6.getGT()) goto loc_82143510;
	// cmpw cr6,r10,r25
	cr6.compare<int32_t>(ctx.r10.s32, r25.s32, xer);
	// bgt cr6,0x82143510
	if (cr6.getGT()) goto loc_82143510;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lbz r9,972(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 972);
	// addi r7,r31,32
	ctx.r7.s64 = r31.s64 + 32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// addi r8,r1,176
	ctx.r8.s64 = ctx.r1.s64 + 176;
	// rlwinm r9,r9,6,0,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// std r10,152(r1)
	PPC_STORE_U64(ctx.r1.u32 + 152, ctx.r10.u64);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,368
	ctx.r3.s64 = ctx.r1.s64 + 368;
	// lfsx f0,r9,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// lfd f13,152(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 152);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm r9,r7,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r9,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// mulli r6,r10,30
	ctx.r6.s64 = ctx.r10.s64 * 30;
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, ctx.r10.u32);
	// stwx r4,r7,r3
	PPC_STORE_U32(ctx.r7.u32 + ctx.r3.u32, ctx.r4.u32);
loc_82143510:
	// lhz r10,72(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + 72);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82143598
	if (!cr6.getGT()) goto loc_82143598;
	// cmpw cr6,r10,r25
	cr6.compare<int32_t>(ctx.r10.s32, r25.s32, xer);
	// bgt cr6,0x82143598
	if (cr6.getGT()) goto loc_82143598;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lbz r9,972(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 972);
	// addi r7,r31,32
	ctx.r7.s64 = r31.s64 + 32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// addi r8,r1,176
	ctx.r8.s64 = ctx.r1.s64 + 176;
	// rlwinm r9,r9,6,0,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r4,r11,2
	ctx.r4.s64 = r11.s64 + 2;
	// std r10,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r10.u64);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,368
	ctx.r3.s64 = ctx.r1.s64 + 368;
	// lfsx f0,r9,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// lfd f13,128(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm r9,r7,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r9,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// mulli r6,r10,30
	ctx.r6.s64 = ctx.r10.s64 * 30;
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, ctx.r10.u32);
	// stwx r4,r7,r3
	PPC_STORE_U32(ctx.r7.u32 + ctx.r3.u32, ctx.r4.u32);
loc_82143598:
	// lhz r10,96(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + 96);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82143620
	if (!cr6.getGT()) goto loc_82143620;
	// cmpw cr6,r10,r25
	cr6.compare<int32_t>(ctx.r10.s32, r25.s32, xer);
	// bgt cr6,0x82143620
	if (cr6.getGT()) goto loc_82143620;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lbz r9,972(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 972);
	// addi r7,r31,32
	ctx.r7.s64 = r31.s64 + 32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// addi r8,r1,176
	ctx.r8.s64 = ctx.r1.s64 + 176;
	// rlwinm r9,r9,6,0,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r4,r11,3
	ctx.r4.s64 = r11.s64 + 3;
	// std r10,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r10.u64);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,368
	ctx.r3.s64 = ctx.r1.s64 + 368;
	// lfsx f0,r9,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// lfd f13,96(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm r9,r7,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r9,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// mulli r6,r10,30
	ctx.r6.s64 = ctx.r10.s64 * 30;
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, ctx.r10.u32);
	// stwx r4,r7,r3
	PPC_STORE_U32(ctx.r7.u32 + ctx.r3.u32, ctx.r4.u32);
loc_82143620:
	// lhz r10,120(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + 120);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x821436a8
	if (!cr6.getGT()) goto loc_821436A8;
	// cmpw cr6,r10,r25
	cr6.compare<int32_t>(ctx.r10.s32, r25.s32, xer);
	// bgt cr6,0x821436a8
	if (cr6.getGT()) goto loc_821436A8;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lbz r9,972(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 972);
	// addi r7,r31,32
	ctx.r7.s64 = r31.s64 + 32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// addi r8,r1,176
	ctx.r8.s64 = ctx.r1.s64 + 176;
	// rlwinm r9,r9,6,0,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r4,r11,4
	ctx.r4.s64 = r11.s64 + 4;
	// std r10,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r10.u64);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,368
	ctx.r3.s64 = ctx.r1.s64 + 368;
	// lfsx f0,r9,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// lfd f13,144(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm r9,r7,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r9,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// mulli r6,r10,30
	ctx.r6.s64 = ctx.r10.s64 * 30;
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, ctx.r10.u32);
	// stwx r4,r7,r3
	PPC_STORE_U32(ctx.r7.u32 + ctx.r3.u32, ctx.r4.u32);
loc_821436A8:
	// lhz r10,144(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + 144);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82143730
	if (!cr6.getGT()) goto loc_82143730;
	// cmpw cr6,r10,r25
	cr6.compare<int32_t>(ctx.r10.s32, r25.s32, xer);
	// bgt cr6,0x82143730
	if (cr6.getGT()) goto loc_82143730;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lbz r9,972(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 972);
	// addi r7,r31,32
	ctx.r7.s64 = r31.s64 + 32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// addi r8,r1,176
	ctx.r8.s64 = ctx.r1.s64 + 176;
	// rlwinm r9,r9,6,0,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r4,r11,5
	ctx.r4.s64 = r11.s64 + 5;
	// std r10,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r10.u64);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,368
	ctx.r3.s64 = ctx.r1.s64 + 368;
	// lfsx f0,r9,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// lfd f13,104(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm r9,r7,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r9,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// mulli r6,r10,30
	ctx.r6.s64 = ctx.r10.s64 * 30;
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, ctx.r10.u32);
	// stwx r4,r7,r3
	PPC_STORE_U32(ctx.r7.u32 + ctx.r3.u32, ctx.r4.u32);
loc_82143730:
	// lhz r10,168(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + 168);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x821437b8
	if (!cr6.getGT()) goto loc_821437B8;
	// cmpw cr6,r10,r25
	cr6.compare<int32_t>(ctx.r10.s32, r25.s32, xer);
	// bgt cr6,0x821437b8
	if (cr6.getGT()) goto loc_821437B8;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lbz r9,972(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 972);
	// addi r7,r31,32
	ctx.r7.s64 = r31.s64 + 32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// addi r8,r1,176
	ctx.r8.s64 = ctx.r1.s64 + 176;
	// rlwinm r9,r9,6,0,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// std r10,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, ctx.r10.u64);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,368
	ctx.r3.s64 = ctx.r1.s64 + 368;
	// lfsx f0,r9,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// lfd f13,120(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm r9,r7,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r9,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// mulli r6,r10,30
	ctx.r6.s64 = ctx.r10.s64 * 30;
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, ctx.r10.u32);
	// stwx r4,r7,r3
	PPC_STORE_U32(ctx.r7.u32 + ctx.r3.u32, ctx.r4.u32);
loc_821437B8:
	// lhz r10,192(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + 192);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82143840
	if (!cr6.getGT()) goto loc_82143840;
	// cmpw cr6,r10,r25
	cr6.compare<int32_t>(ctx.r10.s32, r25.s32, xer);
	// bgt cr6,0x82143840
	if (cr6.getGT()) goto loc_82143840;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lbz r9,972(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 972);
	// addi r7,r31,32
	ctx.r7.s64 = r31.s64 + 32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// addi r8,r1,176
	ctx.r8.s64 = ctx.r1.s64 + 176;
	// rlwinm r9,r9,6,0,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r4,r11,7
	ctx.r4.s64 = r11.s64 + 7;
	// std r10,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, ctx.r10.u64);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,368
	ctx.r3.s64 = ctx.r1.s64 + 368;
	// lfsx f0,r9,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// lfd f13,136(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm r9,r7,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r9,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// mulli r6,r10,30
	ctx.r6.s64 = ctx.r10.s64 * 30;
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, ctx.r10.u32);
	// stwx r4,r7,r3
	PPC_STORE_U32(ctx.r7.u32 + ctx.r3.u32, ctx.r4.u32);
loc_82143840:
	// addi r11,r11,10
	r11.s64 = r11.s64 + 10;
	// addi r5,r5,240
	ctx.r5.s64 = ctx.r5.s64 + 240;
	// addi r10,r11,-2
	ctx.r10.s64 = r11.s64 + -2;
	// cmpwi cr6,r10,40
	cr6.compare<int32_t>(ctx.r10.s32, 40, xer);
	// blt cr6,0x821432f4
	if (cr6.getLT()) goto loc_821432F4;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r11,r11,28184
	r11.s64 = r11.s64 + 28184;
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r7,2
	ctx.r7.s64 = 2;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwz r3,320(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 320);
	// bl 0x820976b0
	sub_820976B0(ctx, base);
	// addi r27,r30,-1
	r27.s64 = r30.s64 + -1;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// blt cr6,0x82143920
	if (cr6.getLT()) goto loc_82143920;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// rlwinm r10,r27,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,28968
	r11.s64 = r11.s64 + 28968;
	// rlwinm r28,r27,2,0,29
	r28.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// add r26,r10,r11
	r26.u64 = ctx.r10.u64 + r11.u64;
loc_8214389C:
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// lwzx r31,r28,r11
	r31.u64 = PPC_LOAD_U32(r28.u32 + r11.u32);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// ble cr6,0x8214390c
	if (!cr6.getGT()) goto loc_8214390C;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8239a518
	sub_8239A518(ctx, base);
	// rlwinm r3,r31,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// bl 0x82097838
	sub_82097838(ctx, base);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// ble cr6,0x82143908
	if (!cr6.getGT()) goto loc_82143908;
	// addi r11,r1,368
	r11.s64 = ctx.r1.s64 + 368;
	// add r30,r28,r11
	r30.u64 = r28.u64 + r11.u64;
loc_821438D4:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// addi r3,r11,8
	ctx.r3.s64 = r11.s64 + 8;
	// bl 0x8213eac0
	sub_8213EAC0(ctx, base);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r30,r30,120
	r30.s64 = r30.s64 + 120;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x821438d4
	if (!cr6.getEQ()) goto loc_821438D4;
loc_82143908:
	// bl 0x820987a8
	sub_820987A8(ctx, base);
loc_8214390C:
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// addi r26,r26,-16
	r26.s64 = r26.s64 + -16;
	// addi r28,r28,-4
	r28.s64 = r28.s64 + -4;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bge cr6,0x8214389c
	if (!cr6.getLT()) goto loc_8214389C;
loc_82143920:
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// addi r11,r29,28
	r11.s64 = r29.s64 + 28;
	// li r10,40
	ctx.r10.s64 = 40;
loc_8214392C:
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// cmpw cr6,r9,r25
	cr6.compare<int32_t>(ctx.r9.s32, r25.s32, xer);
	// ble cr6,0x82143940
	if (!cr6.getGT()) goto loc_82143940;
	// sth r23,0(r11)
	PPC_STORE_U16(r11.u32 + 0, r23.u16);
loc_82143940:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,24
	r11.s64 = r11.s64 + 24;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8214392c
	if (!cr6.getEQ()) goto loc_8214392C;
loc_82143950:
	// addi r1,r1,5264
	ctx.r1.s64 = ctx.r1.s64 + 5264;
	// lfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_82143960"))) PPC_WEAK_FUNC(sub_82143960);
PPC_FUNC_IMPL(__imp__sub_82143960) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r29,0
	r29.s64 = 0;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// mr r11,r29
	r11.u64 = r29.u64;
	// lis r31,-31994
	r31.s64 = -2096758784;
	// stw r11,15228(r10)
	PPC_STORE_U32(ctx.r10.u32 + 15228, r11.u32);
	// lwz r11,15148(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15148);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821439e0
	if (cr6.getEQ()) goto loc_821439E0;
	// mr r30,r29
	r30.u64 = r29.u64;
loc_82143990:
	// add r10,r30,r11
	ctx.r10.u64 = r30.u64 + r11.u64;
	// lwz r3,4(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821439d4
	if (cr6.getEQ()) goto loc_821439D4;
	// bl 0x820ccbb0
	sub_820CCBB0(ctx, base);
	// lwz r11,15148(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15148);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x820cca28
	sub_820CCA28(ctx, base);
	// lwz r11,15148(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15148);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x820ccb00
	sub_820CCB00(ctx, base);
	// lwz r11,15148(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15148);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// stw r29,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r29.u32);
	// lwz r11,15148(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15148);
loc_821439D4:
	// addi r30,r30,992
	r30.s64 = r30.s64 + 992;
	// cmpwi cr6,r30,11904
	cr6.compare<int32_t>(r30.s32, 11904, xer);
	// blt cr6,0x82143990
	if (cr6.getLT()) goto loc_82143990;
loc_821439E0:
	// lis r30,-31994
	r30.s64 = -2096758784;
	// lwz r11,15144(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15144);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82143a3c
	if (cr6.getEQ()) goto loc_82143A3C;
	// lis r10,0
	ctx.r10.s64 = 0;
	// mr r31,r29
	r31.u64 = r29.u64;
	// ori r28,r10,40800
	r28.u64 = ctx.r10.u64 | 40800;
loc_821439FC:
	// lwzx r3,r31,r11
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + r11.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82143a30
	if (cr6.getEQ()) goto loc_82143A30;
	// bl 0x820ccbb0
	sub_820CCBB0(ctx, base);
	// lwz r11,15144(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15144);
	// lwzx r3,r31,r11
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + r11.u32);
	// bl 0x820cca28
	sub_820CCA28(ctx, base);
	// lwz r11,15144(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15144);
	// lwzx r3,r31,r11
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + r11.u32);
	// bl 0x820ccb00
	sub_820CCB00(ctx, base);
	// lwz r11,15144(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15144);
	// stwx r29,r31,r11
	PPC_STORE_U32(r31.u32 + r11.u32, r29.u32);
	// lwz r11,15144(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 15144);
loc_82143A30:
	// addi r31,r31,408
	r31.s64 = r31.s64 + 408;
	// cmpw cr6,r31,r28
	cr6.compare<int32_t>(r31.s32, r28.s32, xer);
	// blt cr6,0x821439fc
	if (cr6.getLT()) goto loc_821439FC;
loc_82143A3C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82143A48"))) PPC_WEAK_FUNC(sub_82143A48);
PPC_FUNC_IMPL(__imp__sub_82143A48) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r3,r11,15152
	ctx.r3.s64 = r11.s64 + 15152;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,13964(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13964);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// b 0x8238b078
	sub_8238B078(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82143A68"))) PPC_WEAK_FUNC(sub_82143A68);
PPC_FUNC_IMPL(__imp__sub_82143A68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r27,0
	r27.s64 = 0;
	// addi r3,r11,25156
	ctx.r3.s64 = r11.s64 + 25156;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r4,11904
	ctx.r4.s64 = 11904;
	// lfs f0,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// stfs f0,-8808(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -8808, temp.u32);
	// mr r11,r27
	r11.u64 = r27.u64;
	// stw r11,15228(r10)
	PPC_STORE_U32(ctx.r10.u32 + 15228, r11.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// stw r11,15232(r10)
	PPC_STORE_U32(ctx.r10.u32 + 15232, r11.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// stw r11,15236(r10)
	PPC_STORE_U32(ctx.r10.u32 + 15236, r11.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// stw r11,15240(r10)
	PPC_STORE_U32(ctx.r10.u32 + 15240, r11.u32);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// addi r11,r11,15244
	r11.s64 = r11.s64 + 15244;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,11904
	ctx.r3.s64 = 11904;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// lis r9,-31994
	ctx.r9.s64 = -2096758784;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// stw r3,15148(r9)
	PPC_STORE_U32(ctx.r9.u32 + 15148, ctx.r3.u32);
	// b 0x82143af0
	goto loc_82143AF0;
loc_82143AEC:
	// lwz r3,15148(r9)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + 15148);
loc_82143AF0:
	// add r8,r7,r3
	ctx.r8.u64 = ctx.r7.u64 + ctx.r3.u64;
	// mr r10,r7
	ctx.r10.u64 = ctx.r7.u64;
	// li r11,40
	r11.s64 = 40;
	// stw r27,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r27.u32);
loc_82143B00:
	// lwz r8,15148(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 15148);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// addi r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 24;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// sth r27,28(r8)
	PPC_STORE_U16(ctx.r8.u32 + 28, r27.u16);
	// bne cr6,0x82143b00
	if (!cr6.getEQ()) goto loc_82143B00;
	// addi r7,r7,992
	ctx.r7.s64 = ctx.r7.s64 + 992;
	// cmpwi cr6,r7,11904
	cr6.compare<int32_t>(ctx.r7.s32, 11904, xer);
	// blt cr6,0x82143aec
	if (cr6.getLT()) goto loc_82143AEC;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r3,r11,25120
	ctx.r3.s64 = r11.s64 + 25120;
	// lis r11,0
	r11.s64 = 0;
	// ori r31,r11,40800
	r31.u64 = r11.u64 | 40800;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// lis r7,-31994
	ctx.r7.s64 = -2096758784;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r3,15144(r7)
	PPC_STORE_U32(ctx.r7.u32 + 15144, ctx.r3.u32);
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// b 0x82143b68
	goto loc_82143B68;
loc_82143B64:
	// lwz r3,15144(r7)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r7.u32 + 15144);
loc_82143B68:
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
	// stwx r27,r8,r3
	PPC_STORE_U32(ctx.r8.u32 + ctx.r3.u32, r27.u32);
	// li r11,10
	r11.s64 = 10;
loc_82143B74:
	// lwz r9,15144(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 15144);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addi r10,r10,40
	ctx.r10.s64 = ctx.r10.s64 + 40;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stfs f0,20(r9)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 20, temp.u32);
	// bne cr6,0x82143b74
	if (!cr6.getEQ()) goto loc_82143B74;
	// addi r8,r8,408
	ctx.r8.s64 = ctx.r8.s64 + 408;
	// cmpw cr6,r8,r31
	cr6.compare<int32_t>(ctx.r8.s32, r31.s32, xer);
	// blt cr6,0x82143b64
	if (cr6.getLT()) goto loc_82143B64;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r4,2640
	ctx.r4.s64 = 2640;
	// addi r3,r11,25080
	ctx.r3.s64 = r11.s64 + 25080;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,2640
	ctx.r3.s64 = 2640;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// mr r11,r27
	r11.u64 = r27.u64;
	// li r30,-1
	r30.s64 = -1;
	// stw r3,15220(r10)
	PPC_STORE_U32(ctx.r10.u32 + 15220, ctx.r3.u32);
	// b 0x82143bd0
	goto loc_82143BD0;
loc_82143BCC:
	// lwz r3,15220(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 15220);
loc_82143BD0:
	// sthx r30,r11,r3
	PPC_STORE_U16(r11.u32 + ctx.r3.u32, r30.u16);
	// addi r11,r11,132
	r11.s64 = r11.s64 + 132;
	// cmpwi cr6,r11,2640
	cr6.compare<int32_t>(r11.s32, 2640, xer);
	// blt cr6,0x82143bcc
	if (cr6.getLT()) goto loc_82143BCC;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r28,r11,15136
	r28.s64 = r11.s64 + 15136;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r31,r28
	r31.u64 = r28.u64;
	// addi r29,r11,25040
	r29.s64 = r11.s64 + 25040;
loc_82143BF4:
	// li r4,12400
	ctx.r4.s64 = 12400;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,12400
	ctx.r3.s64 = 12400;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r11,r27
	r11.u64 = r27.u64;
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
loc_82143C14:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// sthx r30,r10,r11
	PPC_STORE_U16(ctx.r10.u32 + r11.u32, r30.u16);
	// addi r11,r11,124
	r11.s64 = r11.s64 + 124;
	// cmpwi cr6,r11,12400
	cr6.compare<int32_t>(r11.s32, 12400, xer);
	// blt cr6,0x82143c14
	if (cr6.getLT()) goto loc_82143C14;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r11,r28,4
	r11.s64 = r28.s64 + 4;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// ble cr6,0x82143bf4
	if (!cr6.getGT()) goto loc_82143BF4;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// li r11,400
	r11.s64 = 400;
	// lis r31,-31994
	r31.s64 = -2096758784;
	// divw r11,r11,r3
	r11.s32 = r11.s32 / ctx.r3.s32;
	// twllei r3,0
	// stw r11,15216(r31)
	PPC_STORE_U32(r31.u32 + 15216, r11.u32);
	// bl 0x8209ec18
	sub_8209EC18(ctx, base);
	// cmpwi cr6,r3,29
	cr6.compare<int32_t>(ctx.r3.s32, 29, xer);
	// beq cr6,0x82143c68
	if (cr6.getEQ()) goto loc_82143C68;
	// bl 0x8209ec18
	sub_8209EC18(ctx, base);
	// cmpwi cr6,r3,30
	cr6.compare<int32_t>(ctx.r3.s32, 30, xer);
	// bne cr6,0x82143c78
	if (!cr6.getEQ()) goto loc_82143C78;
loc_82143C68:
	// lwz r11,15216(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15216);
	// srawi r5,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r5.s64 = r11.s32 >> 1;
	// stw r5,15216(r31)
	PPC_STORE_U32(r31.u32 + 15216, ctx.r5.u32);
	// b 0x82143c7c
	goto loc_82143C7C;
loc_82143C78:
	// lwz r5,15216(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 15216);
loc_82143C7C:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mulli r4,r5,164
	ctx.r4.s64 = ctx.r5.s64 * 164;
	// addi r3,r11,24992
	ctx.r3.s64 = r11.s64 + 24992;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// lwz r11,15216(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15216);
	// li r4,1
	ctx.r4.s64 = 1;
	// mulli r11,r11,164
	r11.s64 = r11.s64 * 164;
	// addi r11,r11,15
	r11.s64 = r11.s64 + 15;
	// rlwinm r3,r11,0,0,27
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF0;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// lis r8,-31994
	ctx.r8.s64 = -2096758784;
	// lwz r10,15216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15216);
	// mr r11,r27
	r11.u64 = r27.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r3,15224(r8)
	PPC_STORE_U32(ctx.r8.u32 + 15224, ctx.r3.u32);
	// ble cr6,0x82143ce0
	if (!cr6.getGT()) goto loc_82143CE0;
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// b 0x82143cc8
	goto loc_82143CC8;
loc_82143CC4:
	// lwz r3,15224(r8)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + 15224);
loc_82143CC8:
	// stwx r27,r10,r3
	PPC_STORE_U32(ctx.r10.u32 + ctx.r3.u32, r27.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r9,15216(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 15216);
	// addi r10,r10,164
	ctx.r10.s64 = ctx.r10.s64 + 164;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x82143cc4
	if (cr6.getLT()) goto loc_82143CC4;
loc_82143CE0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82143CE8"))) PPC_WEAK_FUNC(sub_82143CE8);
PPC_FUNC_IMPL(__imp__sub_82143CE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82143d18
	if (!cr6.getEQ()) goto loc_82143D18;
	// lis r3,-32768
	ctx.r3.s64 = -2147483648;
	// ori r3,r3,16387
	ctx.r3.u64 = ctx.r3.u64 | 16387;
	// b 0x82143d90
	goto loc_82143D90;
loc_82143D18:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,31764
	ctx.r4.s64 = r11.s64 + 31764;
	// lwz r11,72(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 72);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,80(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 80);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x82143d90
	if (cr6.getLT()) goto loc_82143D90;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x82143d8c
	if (cr6.getLT()) goto loc_82143D8C;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r3,116(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lfs f1,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82388f18
	sub_82388F18(ctx, base);
loc_82143D8C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82143D90:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82143DA8"))) PPC_WEAK_FUNC(sub_82143DA8);
PPC_FUNC_IMPL(__imp__sub_82143DA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r20{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r7,r6
	ctx.r7.u64 = ctx.r6.u64;
	// li r31,0
	r31.s64 = 0;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82143dd8
	if (cr6.getEQ()) goto loc_82143DD8;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x82143dd8
	if (cr6.getEQ()) goto loc_82143DD8;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x82143df4
	if (!cr6.getEQ()) goto loc_82143DF4;
loc_82143DD8:
	// lis r3,-32768
	ctx.r3.s64 = -2147483648;
	// ori r3,r3,16387
	ctx.r3.u64 = ctx.r3.u64 | 16387;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82143DF4:
	// lwz r11,60(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 60);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// ble cr6,0x82143e68
	if (!cr6.getGT()) goto loc_82143E68;
	// lwz r10,68(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + 68);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82143e68
	if (!cr6.getEQ()) goto loc_82143E68;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// lfs f0,2776(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	f0.f64 = double(temp.f32);
	// stfs f0,64(r5)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r5.u32 + 64, temp.u32);
	// bgt cr6,0x82143efc
	if (cr6.getGT()) goto loc_82143EFC;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,15932
	r12.s64 = r12.s64 + 15932;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82143E58;
	case 1:
		goto loc_82143EB0;
	case 2:
		goto loc_82143EC0;
	case 3:
		goto loc_82143ED0;
	case 4:
		goto loc_82143EE0;
	case 5:
		goto loc_82143EFC;
	case 6:
		goto loc_82143EF0;
	default:
		__builtin_unreachable();
	}
	// lwz r16,15960(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 15960);
	// lwz r16,16048(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 16048);
	// lwz r16,16064(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 16064);
	// lwz r16,16080(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 16080);
	// lwz r16,16096(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 16096);
	// lwz r16,16124(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 16124);
	// lwz r16,16112(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 16112);
loc_82143E58:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r11,r11,31732
	r11.s64 = r11.s64 + 31732;
	// addi r11,r11,-80
	r11.s64 = r11.s64 + -80;
loc_82143E64:
	// stw r11,68(r5)
	PPC_STORE_U32(ctx.r5.u32 + 68, r11.u32);
loc_82143E68:
	// lwz r11,72(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 72);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// addi r11,r11,-5620
	r11.s64 = r11.s64 + -5620;
	// bne cr6,0x82143e80
	if (!cr6.getEQ()) goto loc_82143E80;
	// stw r11,72(r5)
	PPC_STORE_U32(ctx.r5.u32 + 72, r11.u32);
loc_82143E80:
	// lwz r10,76(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + 76);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82143e90
	if (!cr6.getEQ()) goto loc_82143E90;
	// stw r11,76(r5)
	PPC_STORE_U32(ctx.r5.u32 + 76, r11.u32);
loc_82143E90:
	// li r6,97
	ctx.r6.s64 = 97;
	// bl 0x8238a998
	sub_8238A998(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82143EB0:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r11,r11,31732
	r11.s64 = r11.s64 + 31732;
	// addi r11,r11,-72
	r11.s64 = r11.s64 + -72;
	// b 0x82143e64
	goto loc_82143E64;
loc_82143EC0:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r11,r11,31732
	r11.s64 = r11.s64 + 31732;
	// addi r11,r11,-60
	r11.s64 = r11.s64 + -60;
	// b 0x82143e64
	goto loc_82143E64;
loc_82143ED0:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r11,r11,31732
	r11.s64 = r11.s64 + 31732;
	// addi r11,r11,-44
	r11.s64 = r11.s64 + -44;
	// b 0x82143e64
	goto loc_82143E64;
loc_82143EE0:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r11,r11,31732
	r11.s64 = r11.s64 + 31732;
	// addi r11,r11,-24
	r11.s64 = r11.s64 + -24;
	// b 0x82143e64
	goto loc_82143E64;
loc_82143EF0:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r11,r11,31732
	r11.s64 = r11.s64 + 31732;
	// b 0x82143e64
	goto loc_82143E64;
loc_82143EFC:
	// lis r3,-32768
	ctx.r3.s64 = -2147483648;
	// ori r3,r3,16389
	ctx.r3.u64 = ctx.r3.u64 | 16389;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82143F18"))) PPC_WEAK_FUNC(sub_82143F18);
PPC_FUNC_IMPL(__imp__sub_82143F18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82143f44
	if (cr6.getEQ()) goto loc_82143F44;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82143f50
	if (!cr6.getEQ()) goto loc_82143F50;
loc_82143F44:
	// lis r3,-32768
	ctx.r3.s64 = -2147483648;
	// ori r3,r3,16387
	ctx.r3.u64 = ctx.r3.u64 | 16387;
	// b 0x8214403c
	goto loc_8214403C;
loc_82143F50:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r5,12(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// lwz r4,8(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8214403c
	if (cr6.getLT()) goto loc_8214403C;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,31820
	ctx.r4.s64 = r11.s64 + 31820;
	// lwz r11,36(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lfs f1,36(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 36);
	ctx.f1.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8214403c
	if (cr6.getLT()) goto loc_8214403C;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,31800
	ctx.r4.s64 = r11.s64 + 31800;
	// lwz r11,36(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lfs f1,28(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 28);
	ctx.f1.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8214403c
	if (cr6.getLT()) goto loc_8214403C;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,31780
	ctx.r4.s64 = r11.s64 + 31780;
	// lwz r11,36(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfs f13,32(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 32);
	ctx.f13.f64 = double(temp.f32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f0,14308(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14308);
	f0.f64 = double(temp.f32);
	// lwz r11,40(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 40);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8214403C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82144058"))) PPC_WEAK_FUNC(sub_82144058);
PPC_FUNC_IMPL(__imp__sub_82144058) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r11,r11,19968
	r11.s64 = r11.s64 + 19968;
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
loc_82144074:
	// lwz r8,0(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x821440ac
	if (cr6.getEQ()) goto loc_821440AC;
	// addi r9,r9,32
	ctx.r9.s64 = ctx.r9.s64 + 32;
	// addi r8,r11,6400
	ctx.r8.s64 = r11.s64 + 6400;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r9,r8
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r8.s32, xer);
	// blt cr6,0x82144074
	if (cr6.getLT()) goto loc_82144074;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r3,r11,31832
	ctx.r3.s64 = r11.s64 + 31832;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_821440AC:
	// lis r9,-31994
	ctx.r9.s64 = -2096758784;
	// rlwinm r10,r10,5,0,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0xFFFFFFE0;
	// addi r8,r11,12
	ctx.r8.s64 = r11.s64 + 12;
	// addi r7,r11,4
	ctx.r7.s64 = r11.s64 + 4;
	// addi r31,r11,16
	r31.s64 = r11.s64 + 16;
	// lfs f0,26388(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 26388);
	f0.f64 = double(temp.f32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r30,r11,20
	r30.s64 = r11.s64 + 20;
	// addi r29,r11,24
	r29.s64 = r11.s64 + 24;
	// stwx r6,r10,r8
	PPC_STORE_U32(ctx.r10.u32 + ctx.r8.u32, ctx.r6.u32);
	// addi r28,r11,28
	r28.s64 = r11.s64 + 28;
	// stwx r4,r10,r7
	PPC_STORE_U32(ctx.r10.u32 + ctx.r7.u32, ctx.r4.u32);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// lfs f13,2688(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2688);
	ctx.f13.f64 = double(temp.f32);
	// lis r9,-31994
	ctx.r9.s64 = -2096758784;
	// stfsx f0,r10,r30
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + r30.u32, temp.u32);
	// stfsx f13,r10,r29
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r10.u32 + r29.u32, temp.u32);
	// lfs f12,26384(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 26384);
	ctx.f12.f64 = double(temp.f32);
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfsx f12,r10,r28
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + r28.u32, temp.u32);
	// stwx r5,r10,r9
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, ctx.r5.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r3,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r3.u32);
	// stbx r9,r10,r31
	PPC_STORE_U8(ctx.r10.u32 + r31.u32, ctx.r9.u8);
	// beq cr6,0x82144118
	if (cr6.getEQ()) goto loc_82144118;
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
loc_82144118:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82144128"))) PPC_WEAK_FUNC(sub_82144128);
PPC_FUNC_IMPL(__imp__sub_82144128) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r28,0
	r28.s64 = 0;
	// addi r10,r11,19968
	ctx.r10.s64 = r11.s64 + 19968;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82144144:
	// stw r28,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r28.u32);
	// addi r9,r10,6400
	ctx.r9.s64 = ctx.r10.s64 + 6400;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x82144144
	if (cr6.getLT()) goto loc_82144144;
	// li r11,262
	r11.s64 = 262;
	// lis r31,-31994
	r31.s64 = -2096758784;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// li r3,28
	ctx.r3.s64 = 28;
	// stw r11,19632(r31)
	PPC_STORE_U32(r31.u32 + 19632, r11.u32);
	// li r11,64
	r11.s64 = 64;
	// stw r11,19588(r29)
	PPC_STORE_U32(r29.u32 + 19588, r11.u32);
	// bl 0x8209d088
	sub_8209D088(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821441bc
	if (cr6.getEQ()) goto loc_821441BC;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r8,19632(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 19632);
	// li r9,1
	ctx.r9.s64 = 1;
	// addi r7,r11,-6952
	ctx.r7.s64 = r11.s64 + -6952;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r6,r11,31940
	ctx.r6.s64 = r11.s64 + 31940;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r5,r11,31924
	ctx.r5.s64 = r11.s64 + 31924;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r4,r11,31908
	ctx.r4.s64 = r11.s64 + 31908;
	// bl 0x82090998
	sub_82090998(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r30,r11,19944
	r30.s64 = r11.s64 + 19944;
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// b 0x821441cc
	goto loc_821441CC;
loc_821441BC:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r30,r11,19944
	r30.s64 = r11.s64 + 19944;
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
loc_821441CC:
	// li r3,28
	ctx.r3.s64 = 28;
	// bl 0x8209d088
	sub_8209D088(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82144214
	if (cr6.getEQ()) goto loc_82144214;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r8,19588(r29)
	ctx.r8.u64 = PPC_LOAD_U32(r29.u32 + 19588);
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r7,r11,-5904
	ctx.r7.s64 = r11.s64 + -5904;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r6,r11,31892
	ctx.r6.s64 = r11.s64 + 31892;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r5,r11,31876
	ctx.r5.s64 = r11.s64 + 31876;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r4,r11,31860
	ctx.r4.s64 = r11.s64 + 31860;
	// bl 0x82090998
	sub_82090998(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// stw r3,19948(r11)
	PPC_STORE_U32(r11.u32 + 19948, ctx.r3.u32);
	// b 0x82144220
	goto loc_82144220;
loc_82144214:
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// mr r11,r28
	r11.u64 = r28.u64;
	// stw r11,19948(r10)
	PPC_STORE_U32(ctx.r10.u32 + 19948, r11.u32);
loc_82144220:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,19488
	r31.s64 = r11.s64 + 19488;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r31,148
	ctx.r4.s64 = r31.s64 + 148;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x82143ce8
	sub_82143CE8(ctx, base);
	// addi r10,r31,432
	ctx.r10.s64 = r31.s64 + 432;
	// li r9,-1
	ctx.r9.s64 = -1;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// addi r11,r31,224
	r11.s64 = r31.s64 + 224;
	// stw r9,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r9.u32);
	// stw r9,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r9.u32);
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// stfs f0,84(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// lwz r8,80(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lfs f13,2776(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,15676(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 15676);
	ctx.f12.f64 = double(temp.f32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
loc_82144288:
	// addi r6,r11,32
	ctx.r6.s64 = r11.s64 + 32;
	// stfs f0,-4(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -4, temp.u32);
	// addi r7,r31,224
	ctx.r7.s64 = r31.s64 + 224;
	// stfs f0,0(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// stfs f13,4(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// stw r28,44(r11)
	PPC_STORE_U32(r11.u32 + 44, r28.u32);
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// addi r7,r7,212
	ctx.r7.s64 = ctx.r7.s64 + 212;
	// stfs f13,12(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// stfs f0,16(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// stw r8,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, ctx.r8.u32);
	// stfs f0,20(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 20, temp.u32);
	// stw r9,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r9.u32);
	// stfs f0,24(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 24, temp.u32);
	// stw r10,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, ctx.r10.u32);
	// stfs f12,28(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 28, temp.u32);
	// addi r11,r11,52
	r11.s64 = r11.s64 + 52;
	// cmpw cr6,r11,r7
	cr6.compare<int32_t>(r11.s32, ctx.r7.s32, xer);
	// blt cr6,0x82144288
	if (cr6.getLT()) goto loc_82144288;
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// addi r11,r31,28
	r11.s64 = r31.s64 + 28;
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// addi r5,r31,40
	ctx.r5.s64 = r31.s64 + 40;
	// stfs f13,12(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// addi r6,r31,112
	ctx.r6.s64 = r31.s64 + 112;
	// stfs f0,16(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// li r3,24
	ctx.r3.s64 = 24;
	// stfs f13,20(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// stfs f0,24(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// stfs f0,112(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 112, temp.u32);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// stw r8,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r8.u32);
	// stfs f0,116(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 116, temp.u32);
	// stw r9,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r9.u32);
	// addi r7,r11,-5636
	ctx.r7.s64 = r11.s64 + -5636;
	// stw r10,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r10.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// stfs f0,52(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// stfs f0,56(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 56, temp.u32);
	// stw r6,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r6.u32);
	// addi r11,r11,19592
	r11.s64 = r11.s64 + 19592;
	// stfs f0,120(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 120, temp.u32);
	// stfs f13,124(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 124, temp.u32);
	// lis r9,-31994
	ctx.r9.s64 = -2096758784;
	// stw r10,432(r31)
	PPC_STORE_U32(r31.u32 + 432, ctx.r10.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// stfs f0,128(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 128, temp.u32);
	// addi r9,r9,26368
	ctx.r9.s64 = ctx.r9.s64 + 26368;
	// stfs f13,132(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 132, temp.u32);
	// stfs f0,136(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 136, temp.u32);
	// stfs f13,140(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 140, temp.u32);
	// stw r10,168(r31)
	PPC_STORE_U32(r31.u32 + 168, ctx.r10.u32);
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// stw r10,60(r31)
	PPC_STORE_U32(r31.u32 + 60, ctx.r10.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stfs f0,64(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 64, temp.u32);
	// stw r11,72(r31)
	PPC_STORE_U32(r31.u32 + 72, r11.u32);
	// lfs f0,17848(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 17848);
	f0.f64 = double(temp.f32);
	// stfs f0,92(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 92, temp.u32);
	// stw r11,76(r31)
	PPC_STORE_U32(r31.u32 + 76, r11.u32);
	// mr r11,r28
	r11.u64 = r28.u64;
	// stfs f13,96(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 96, temp.u32);
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r9,68(r31)
	PPC_STORE_U32(r31.u32 + 68, ctx.r9.u32);
	// stw r11,180(r31)
	PPC_STORE_U32(r31.u32 + 180, r11.u32);
	// li r11,6
	r11.s64 = 6;
	// stw r11,184(r31)
	PPC_STORE_U32(r31.u32 + 184, r11.u32);
	// bl 0x8209d088
	sub_8209D088(ctx, base);
	// stw r3,172(r31)
	PPC_STORE_U32(r31.u32 + 172, ctx.r3.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_821443D0"))) PPC_WEAK_FUNC(sub_821443D0);
PPC_FUNC_IMPL(__imp__sub_821443D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,90
	cr6.compare<int32_t>(ctx.r3.s32, 90, xer);
	// bne cr6,0x82144408
	if (!cr6.getEQ()) goto loc_82144408;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82144408:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,-1
	ctx.r3.s64 = -1;
	// li r10,0
	ctx.r10.s64 = 0;
	// lfs f8,28468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28468);
	ctx.f8.f64 = double(temp.f32);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r9,r11,19712
	ctx.r9.s64 = r11.s64 + 19712;
	// lwz r7,-56(r9)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + -56);
	// cmpwi cr6,r7,4
	cr6.compare<int32_t>(ctx.r7.s32, 4, xer);
	// blt cr6,0x82144540
	if (cr6.getLT()) goto loc_82144540;
	// lfs f11,36(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 36);
	ctx.f11.f64 = double(temp.f32);
	// addi r8,r7,-3
	ctx.r8.s64 = ctx.r7.s64 + -3;
	// lfs f10,32(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 32);
	ctx.f10.f64 = double(temp.f32);
	// addi r11,r9,28
	r11.s64 = ctx.r9.s64 + 28;
	// lfs f9,28(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 28);
	ctx.f9.f64 = double(temp.f32);
loc_82144440:
	// lfs f13,-4(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -4);
	ctx.f13.f64 = double(temp.f32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// fsubs f13,f13,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f9.f64));
	// lfs f0,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f10
	f0.f64 = double(float(f0.f64 - ctx.f10.f64));
	// lfs f12,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f11
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fmuls f13,f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// fmadds f0,f0,f0,f13
	f0.f64 = double(float(f0.f64 * f0.f64 + ctx.f13.f64));
	// fmadds f0,f12,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// beq cr6,0x82144474
	if (cr6.getEQ()) goto loc_82144474;
	// fcmpu cr6,f0,f8
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x8214447c
	if (!cr6.getLT()) goto loc_8214447C;
loc_82144474:
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// fmr f8,f0
	ctx.fpscr.disableFlushMode();
	ctx.f8.f64 = f0.f64;
loc_8214447C:
	// lfs f0,52(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 52);
	f0.f64 = double(temp.f32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// fsubs f0,f0,f10
	f0.f64 = double(float(f0.f64 - ctx.f10.f64));
	// lfs f13,48(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 48);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f13,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f9.f64));
	// lfs f12,56(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 56);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f11
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f0,f12,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// beq cr6,0x821444b0
	if (cr6.getEQ()) goto loc_821444B0;
	// fcmpu cr6,f0,f8
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x821444b8
	if (!cr6.getLT()) goto loc_821444B8;
loc_821444B0:
	// addi r3,r10,1
	ctx.r3.s64 = ctx.r10.s64 + 1;
	// fmr f8,f0
	ctx.fpscr.disableFlushMode();
	ctx.f8.f64 = f0.f64;
loc_821444B8:
	// lfs f0,104(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 104);
	f0.f64 = double(temp.f32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// fsubs f0,f0,f10
	f0.f64 = double(float(f0.f64 - ctx.f10.f64));
	// lfs f13,100(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f13,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f9.f64));
	// lfs f12,108(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 108);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f11
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f0,f12,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// beq cr6,0x821444ec
	if (cr6.getEQ()) goto loc_821444EC;
	// fcmpu cr6,f0,f8
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x821444f4
	if (!cr6.getLT()) goto loc_821444F4;
loc_821444EC:
	// addi r3,r10,2
	ctx.r3.s64 = ctx.r10.s64 + 2;
	// fmr f8,f0
	ctx.fpscr.disableFlushMode();
	ctx.f8.f64 = f0.f64;
loc_821444F4:
	// lfs f0,156(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 156);
	f0.f64 = double(temp.f32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// fsubs f0,f0,f10
	f0.f64 = double(float(f0.f64 - ctx.f10.f64));
	// lfs f13,152(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 152);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f13,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f9.f64));
	// lfs f12,160(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 160);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f11
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f0,f12,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// beq cr6,0x82144528
	if (cr6.getEQ()) goto loc_82144528;
	// fcmpu cr6,f0,f8
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x82144530
	if (!cr6.getLT()) goto loc_82144530;
loc_82144528:
	// addi r3,r10,3
	ctx.r3.s64 = ctx.r10.s64 + 3;
	// fmr f8,f0
	ctx.fpscr.disableFlushMode();
	ctx.f8.f64 = f0.f64;
loc_82144530:
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r11,r11,208
	r11.s64 = r11.s64 + 208;
	// cmpw cr6,r10,r8
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r8.s32, xer);
	// blt cr6,0x82144440
	if (cr6.getLT()) goto loc_82144440;
loc_82144540:
	// cmpw cr6,r10,r7
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r7.s32, xer);
	// bge cr6,0x821445ac
	if (!cr6.getLT()) goto loc_821445AC;
	// mulli r11,r10,52
	r11.s64 = ctx.r10.s64 * 52;
	// lfs f11,36(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 36);
	ctx.f11.f64 = double(temp.f32);
	// addi r9,r9,28
	ctx.r9.s64 = ctx.r9.s64 + 28;
	// lfs f10,32(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 32);
	ctx.f10.f64 = double(temp.f32);
	// lfs f9,28(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 28);
	ctx.f9.f64 = double(temp.f32);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
loc_82144560:
	// lfs f0,4(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// fsubs f0,f0,f11
	f0.f64 = double(float(f0.f64 - ctx.f11.f64));
	// lfs f13,-4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -4);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f13,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f9.f64));
	// lfs f12,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f10
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f10.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f0,f12,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// beq cr6,0x82144594
	if (cr6.getEQ()) goto loc_82144594;
	// fcmpu cr6,f0,f8
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x8214459c
	if (!cr6.getLT()) goto loc_8214459C;
loc_82144594:
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// fmr f8,f0
	ctx.fpscr.disableFlushMode();
	ctx.f8.f64 = f0.f64;
loc_8214459C:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,52
	r11.s64 = r11.s64 + 52;
	// cmpw cr6,r10,r7
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r7.s32, xer);
	// blt cr6,0x82144560
	if (cr6.getLT()) goto loc_82144560;
loc_821445AC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821445C0"))) PPC_WEAK_FUNC(sub_821445C0);
PPC_FUNC_IMPL(__imp__sub_821445C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,19488
	r31.s64 = r11.s64 + 19488;
	// li r11,-1
	r11.s64 = -1;
	// stw r11,432(r31)
	PPC_STORE_U32(r31.u32 + 432, r11.u32);
	// stw r11,436(r31)
	PPC_STORE_U32(r31.u32 + 436, r11.u32);
	// stw r11,440(r31)
	PPC_STORE_U32(r31.u32 + 440, r11.u32);
	// stw r11,444(r31)
	PPC_STORE_U32(r31.u32 + 444, r11.u32);
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r3,90
	cr6.compare<int32_t>(ctx.r3.s32, 90, xer);
	// li r27,0
	r27.s64 = 0;
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// bne cr6,0x8214465c
	if (!cr6.getEQ()) goto loc_8214465C;
	// li r11,1
	r11.s64 = 1;
	// stfs f31,248(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 248, temp.u32);
	// stfs f31,252(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 252, temp.u32);
	// stfs f31,256(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 256, temp.u32);
	// stw r11,168(r31)
	PPC_STORE_U32(r31.u32 + 168, r11.u32);
	// mr r11,r27
	r11.u64 = r27.u64;
	// stw r11,432(r31)
	PPC_STORE_U32(r31.u32 + 432, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f0,224(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 224, temp.u32);
	// stfs f31,228(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 228, temp.u32);
	// stfs f31,232(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 232, temp.u32);
	// stfs f31,236(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 236, temp.u32);
	// lfs f0,6580(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f0.f64 = double(temp.f32);
	// stfs f0,240(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 240, temp.u32);
	// stfs f31,244(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 244, temp.u32);
	// stfs f31,260(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 260, temp.u32);
	// stfs f31,264(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 264, temp.u32);
	// stfs f31,268(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 268, temp.u32);
	// b 0x82144754
	goto loc_82144754;
loc_8214465C:
	// mr r11,r27
	r11.u64 = r27.u64;
	// stw r11,168(r31)
	PPC_STORE_U32(r31.u32 + 168, r11.u32);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r9,168(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 168);
	// mr r11,r27
	r11.u64 = r27.u64;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// addi r7,r10,-1384
	ctx.r7.s64 = ctx.r10.s64 + -1384;
	// ble cr6,0x821446c0
	if (!cr6.getGT()) goto loc_821446C0;
	// addi r8,r31,432
	ctx.r8.s64 = r31.s64 + 432;
	// rlwinm r10,r9,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
loc_82144690:
	// lwz r6,0(r8)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// lwz r6,8528(r6)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + 8528);
	// cmpwi cr6,r6,-1
	cr6.compare<int32_t>(ctx.r6.s32, -1, xer);
	// beq cr6,0x821446ac
	if (cr6.getEQ()) goto loc_821446AC;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
loc_821446AC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// cmpw cr6,r11,r3
	cr6.compare<int32_t>(r11.s32, ctx.r3.s32, xer);
	// blt cr6,0x82144690
	if (cr6.getLT()) goto loc_82144690;
	// stw r9,168(r31)
	PPC_STORE_U32(r31.u32 + 168, ctx.r9.u32);
loc_821446C0:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82144754
	if (!cr6.getGT()) goto loc_82144754;
	// addi r11,r31,224
	r11.s64 = r31.s64 + 224;
	// addi r8,r31,432
	ctx.r8.s64 = r31.s64 + 432;
	// addi r11,r11,28
	r11.s64 = r11.s64 + 28;
loc_821446D4:
	// lwz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lwzx r10,r10,r7
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r7.u32);
	// lfs f0,1500(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1500);
	f0.f64 = double(temp.f32);
	// stfs f0,-4(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -4, temp.u32);
	// lfs f0,1504(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1504);
	f0.f64 = double(temp.f32);
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,0(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lfs f0,1508(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1508);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lfs f0,1512(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1512);
	f0.f64 = double(temp.f32);
	// stfs f0,-28(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -28, temp.u32);
	// lfs f0,1516(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1516);
	f0.f64 = double(temp.f32);
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,-24(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -24, temp.u32);
	// lfs f0,1520(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1520);
	f0.f64 = double(temp.f32);
	// stfs f0,-20(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -20, temp.u32);
	// lfs f0,1524(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1524);
	f0.f64 = double(temp.f32);
	// stfs f0,-16(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -16, temp.u32);
	// lfs f0,1528(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1528);
	f0.f64 = double(temp.f32);
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,-12(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -12, temp.u32);
	// lfs f0,1532(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1532);
	f0.f64 = double(temp.f32);
	// stfs f0,-8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -8, temp.u32);
	// stfs f31,8(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// stfs f31,12(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// stfs f31,16(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// addi r11,r11,52
	r11.s64 = r11.s64 + 52;
	// bne cr6,0x821446d4
	if (!cr6.getEQ()) goto loc_821446D4;
loc_82144754:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// stfs f31,40(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 40, temp.u32);
	// stfs f31,44(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 44, temp.u32);
	// addi r28,r11,19968
	r28.s64 = r11.s64 + 19968;
	// stfs f31,48(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
	// addi r30,r28,4
	r30.s64 = r28.s64 + 4;
loc_8214476C:
	// lwz r29,-4(r30)
	r29.u64 = PPC_LOAD_U32(r30.u32 + -4);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x82144860
	if (cr6.getEQ()) goto loc_82144860;
	// lbz r11,12(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821447d4
	if (cr6.getEQ()) goto loc_821447D4;
	// lfs f0,16(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	f0.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stfs f0,28(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 28, temp.u32);
	// lfs f0,24(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 24);
	f0.f64 = double(temp.f32);
	// lfs f13,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// stfs f0,36(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 36, temp.u32);
	// fneg f0,f13
	f0.u64 = ctx.f13.u64 ^ 0x8000000000000000;
	// stfs f0,32(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 32, temp.u32);
	// bl 0x821443d0
	sub_821443D0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r31,224
	ctx.r10.s64 = r31.s64 + 224;
	// mulli r11,r11,52
	r11.s64 = r11.s64 * 52;
	// addi r6,r31,172
	ctx.r6.s64 = r31.s64 + 172;
	// addi r3,r31,148
	ctx.r3.s64 = r31.s64 + 148;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x82143da8
	sub_82143DA8(ctx, base);
	// addi r3,r31,172
	ctx.r3.s64 = r31.s64 + 172;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82143f18
	sub_82143F18(ctx, base);
loc_821447D4:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bne cr6,0x82144810
	if (!cr6.getEQ()) goto loc_82144810;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x82144860
	goto loc_82144860;
loc_82144810:
	// cmplwi cr6,r11,32
	cr6.compare<uint32_t>(r11.u32, 32, xer);
	// bne cr6,0x82144860
	if (!cr6.getEQ()) goto loc_82144860;
	// lwz r11,-4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82144860
	if (cr6.getEQ()) goto loc_82144860;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82144848
	if (cr6.getEQ()) goto loc_82144848;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r9,r30,-4
	ctx.r9.s64 = r30.s64 + -4;
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// bne cr6,0x82144848
	if (!cr6.getEQ()) goto loc_82144848;
	// stw r27,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r27.u32);
	// stw r27,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r27.u32);
loc_82144848:
	// lwz r3,-4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + -4);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r27,-4(r30)
	PPC_STORE_U32(r30.u32 + -4, r27.u32);
loc_82144860:
	// addi r30,r30,32
	r30.s64 = r30.s64 + 32;
	// addi r11,r28,6404
	r11.s64 = r28.s64 + 6404;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8214476c
	if (cr6.getLT()) goto loc_8214476C;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82144880"))) PPC_WEAK_FUNC(sub_82144880);
PPC_FUNC_IMPL(__imp__sub_82144880) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r30,0
	r30.s64 = 0;
	// addi r29,r11,19968
	r29.s64 = r11.s64 + 19968;
	// mr r31,r29
	r31.u64 = r29.u64;
loc_8214489C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821448e0
	if (cr6.getEQ()) goto loc_821448E0;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821448c8
	if (cr6.getEQ()) goto loc_821448C8;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r31,r10
	cr6.compare<uint32_t>(r31.u32, ctx.r10.u32, xer);
	// bne cr6,0x821448c8
	if (!cr6.getEQ()) goto loc_821448C8;
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
loc_821448C8:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r30,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r30.u32);
loc_821448E0:
	// addi r31,r31,32
	r31.s64 = r31.s64 + 32;
	// addi r11,r29,6400
	r11.s64 = r29.s64 + 6400;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x8214489c
	if (cr6.getLT()) goto loc_8214489C;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821448F8"))) PPC_WEAK_FUNC(sub_821448F8);
PPC_FUNC_IMPL(__imp__sub_821448F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// li r11,1
	r11.s64 = 1;
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// lfs f0,0(r4)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 20, temp.u32);
	// lfs f0,4(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,24(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 24, temp.u32);
	// lfs f0,8(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,28(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 28, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82144920"))) PPC_WEAK_FUNC(sub_82144920);
PPC_FUNC_IMPL(__imp__sub_82144920) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r3,r6
	ctx.r3.u64 = ctx.r6.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// mr r29,r8
	r29.u64 = ctx.r8.u64;
	// bl 0x82090870
	sub_82090870(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82144964
	if (cr6.getEQ()) goto loc_82144964;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x82144058
	sub_82144058(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_82144964:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82144970"))) PPC_WEAK_FUNC(sub_82144970);
PPC_FUNC_IMPL(__imp__sub_82144970) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821449f0
	if (cr6.getEQ()) goto loc_821449F0;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x821449f0
	if (cr6.getLT()) goto loc_821449F0;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,16
	cr6.compare<uint32_t>(r11.u32, 16, xer);
	// bne cr6,0x821449c4
	if (!cr6.getEQ()) goto loc_821449C4;
	// li r3,2
	ctx.r3.s64 = 2;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821449C4:
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// beq cr6,0x821449dc
	if (cr6.getEQ()) goto loc_821449DC;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// beq cr6,0x821449dc
	if (cr6.getEQ()) goto loc_821449DC;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x821449f0
	if (!cr6.getEQ()) goto loc_821449F0;
loc_821449DC:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821449F0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82144A08"))) PPC_WEAK_FUNC(sub_82144A08);
PPC_FUNC_IMPL(__imp__sub_82144A08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82144A28"))) PPC_WEAK_FUNC(sub_82144A28);
PPC_FUNC_IMPL(__imp__sub_82144A28) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82144A30"))) PPC_WEAK_FUNC(sub_82144A30);
PPC_FUNC_IMPL(__imp__sub_82144A30) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r10,r3,16
	ctx.r10.u64 = ctx.r3.u32 & 0xFFFF;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r4,r11,31956
	ctx.r4.s64 = r11.s64 + 31956;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lwz r3,19944(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,-5596(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -5596);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x82090930
	sub_82090930(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82144A80"))) PPC_WEAK_FUNC(sub_82144A80);
PPC_FUNC_IMPL(__imp__sub_82144A80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// rlwinm r11,r3,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r10,-5648
	ctx.r10.s64 = ctx.r10.s64 + -5648;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r9,-1
	cr6.compare<int32_t>(ctx.r9.s32, -1, xer);
	// ble cr6,0x82144aa0
	if (!cr6.getGT()) goto loc_82144AA0;
	// li r9,-1
	ctx.r9.s64 = -1;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_82144AA0:
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// addi r10,r10,19956
	ctx.r10.s64 = ctx.r10.s64 + 19956;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82144ACC"))) PPC_WEAK_FUNC(sub_82144ACC);
PPC_FUNC_IMPL(__imp__sub_82144ACC) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82144AD0"))) PPC_WEAK_FUNC(sub_82144AD0);
PPC_FUNC_IMPL(__imp__sub_82144AD0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r10,r3,16
	ctx.r10.u64 = ctx.r3.u32 & 0xFFFF;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r4,r11,31968
	ctx.r4.s64 = r11.s64 + 31968;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lwz r3,19948(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19948);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,-5592(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -5592);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x82090930
	sub_82090930(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82144B20"))) PPC_WEAK_FUNC(sub_82144B20);
PPC_FUNC_IMPL(__imp__sub_82144B20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82144880
	sub_82144880(ctx, base);
	// lis r30,-31994
	r30.s64 = -2096758784;
	// lwz r31,19944(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 19944);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82144b60
	if (cr6.getEQ()) goto loc_82144B60;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82090708
	sub_82090708(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,19944(r30)
	PPC_STORE_U32(r30.u32 + 19944, r11.u32);
loc_82144B60:
	// lis r30,-31994
	r30.s64 = -2096758784;
	// lwz r31,19948(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 19948);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82144b88
	if (cr6.getEQ()) goto loc_82144B88;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82090708
	sub_82090708(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,19948(r30)
	PPC_STORE_U32(r30.u32 + 19948, r11.u32);
loc_82144B88:
	// bl 0x82144128
	sub_82144128(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82144BA8"))) PPC_WEAK_FUNC(sub_82144BA8);
PPC_FUNC_IMPL(__imp__sub_82144BA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// rlwinm r31,r3,2,0,29
	r31.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r30,r11,-5648
	r30.s64 = r11.s64 + -5648;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwzx r11,r31,r30
	r11.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r28,r11,19956
	r28.s64 = r11.s64 + 19956;
	// ble cr6,0x82144c04
	if (!cr6.getGT()) goto loc_82144C04;
	// li r11,-1
	r11.s64 = -1;
	// stwx r11,r31,r30
	PPC_STORE_U32(r31.u32 + r30.u32, r11.u32);
	// lwzx r11,r31,r28
	r11.u64 = PPC_LOAD_U32(r31.u32 + r28.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82144c04
	if (cr6.getEQ()) goto loc_82144C04;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82144C04:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,19952(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 19952);
	// add r4,r11,r29
	ctx.r4.u64 = r11.u64 + r29.u64;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19948(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19948);
	// bl 0x82090870
	sub_82090870(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82144c38
	if (cr6.getEQ()) goto loc_82144C38;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r6,840
	ctx.r6.s64 = 840;
	// addi r5,r11,31980
	ctx.r5.s64 = r11.s64 + 31980;
	// add r4,r31,r28
	ctx.r4.u64 = r31.u64 + r28.u64;
	// bl 0x82144058
	sub_82144058(ctx, base);
loc_82144C38:
	// stwx r29,r31,r30
	PPC_STORE_U32(r31.u32 + r30.u32, r29.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82144C48"))) PPC_WEAK_FUNC(sub_82144C48);
PPC_FUNC_IMPL(__imp__sub_82144C48) {
	PPC_FUNC_PROLOGUE();
	// b 0x820c5868
	sub_820C5868(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82144C50"))) PPC_WEAK_FUNC(sub_82144C50);
PPC_FUNC_IMPL(__imp__sub_82144C50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,26448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 26448);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82144C60"))) PPC_WEAK_FUNC(sub_82144C60);
PPC_FUNC_IMPL(__imp__sub_82144C60) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r20{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r10,26448(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 26448);
	// stw r4,26448(r11)
	PPC_STORE_U32(r11.u32 + 26448, ctx.r4.u32);
	// cmplwi cr6,r10,6
	cr6.compare<uint32_t>(ctx.r10.u32, 6, xer);
	// bgt cr6,0x821450f0
	if (cr6.getGT()) goto loc_821450F0;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,19620
	r12.s64 = r12.s64 + 19620;
	// rlwinm r0,r10,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_82144CC0;
	case 1:
		goto loc_82144D6C;
	case 2:
		goto loc_82144E50;
	case 3:
		goto loc_82144EC4;
	case 4:
		goto loc_82144FB0;
	case 5:
		goto loc_8214505C;
	case 6:
		goto loc_821450DC;
	default:
		__builtin_unreachable();
	}
	// lwz r16,19648(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 19648);
	// lwz r16,19820(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 19820);
	// lwz r16,20048(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20048);
	// lwz r16,20164(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20164);
	// lwz r16,20400(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20400);
	// lwz r16,20572(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20572);
	// lwz r16,20700(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20700);
loc_82144CC0:
	// cmplwi cr6,r4,1
	cr6.compare<uint32_t>(ctx.r4.u32, 1, xer);
	// blt cr6,0x82144da8
	if (cr6.getLT()) goto loc_82144DA8;
	// beq cr6,0x82144d38
	if (cr6.getEQ()) goto loc_82144D38;
	// cmplwi cr6,r4,4
	cr6.compare<uint32_t>(ctx.r4.u32, 4, xer);
	// bne cr6,0x82144d6c
	if (!cr6.getEQ()) goto loc_82144D6C;
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// lis r31,-31994
	r31.s64 = -2096758784;
	// stw r11,26372(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26372, r11.u32);
	// lwz r3,26444(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 26444);
	// bl 0x821453c0
	sub_821453C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// bl 0x820c5800
	sub_820C5800(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// lwz r3,26444(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 26444);
	// stw r11,26380(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26380, r11.u32);
	// bl 0x821454c0
	sub_821454C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// b 0x82144e34
	goto loc_82144E34;
loc_82144D38:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lwz r3,26444(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 26444);
	// li r11,0
	r11.s64 = 0;
	// stw r11,26372(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26372, r11.u32);
	// bl 0x821453c0
	sub_821453C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x82144e34
	goto loc_82144E34;
loc_82144D6C:
	// cmplwi cr6,r4,6
	cr6.compare<uint32_t>(ctx.r4.u32, 6, xer);
	// bgt cr6,0x82144e50
	if (cr6.getGT()) goto loc_82144E50;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,19852
	r12.s64 = r12.s64 + 19852;
	// rlwinm r0,r4,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r4.u64) {
	case 0:
		goto loc_82144DA8;
	case 1:
		goto loc_82144E50;
	case 2:
		goto loc_82144FC8;
	case 3:
		goto loc_82144DC4;
	case 4:
		goto loc_82144E50;
	case 5:
		goto loc_82144E50;
	case 6:
		goto loc_82144E00;
	default:
		__builtin_unreachable();
	}
	// lwz r16,19880(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 19880);
	// lwz r16,20048(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20048);
	// lwz r16,20424(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20424);
	// lwz r16,19908(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 19908);
	// lwz r16,20048(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20048);
	// lwz r16,20048(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20048);
	// lwz r16,19968(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 19968);
loc_82144DA8:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82144a80
	sub_82144A80(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x82144a80
	sub_82144A80(ctx, base);
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x82144a80
	sub_82144A80(ctx, base);
	// b 0x82144e38
	goto loc_82144E38;
loc_82144DC4:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// li r4,24
	ctx.r4.s64 = 24;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,26376(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26376, r11.u32);
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f1,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x82144e38
	goto loc_82144E38;
loc_82144E00:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f1,14460(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14460);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
loc_82144E20:
	// li r4,58
	ctx.r4.s64 = 58;
loc_82144E24:
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// stw r11,26376(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26376, r11.u32);
loc_82144E30:
	// li r3,1
	ctx.r3.s64 = 1;
loc_82144E34:
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
loc_82144E38:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82144E50:
	// cmplwi cr6,r4,3
	cr6.compare<uint32_t>(ctx.r4.u32, 3, xer);
	// bgt cr6,0x82144ec4
	if (cr6.getGT()) goto loc_82144EC4;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,20080
	r12.s64 = r12.s64 + 20080;
	// rlwinm r0,r4,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r4.u64) {
	case 0:
		goto loc_82144DA8;
	case 1:
		goto loc_82144E80;
	case 2:
		goto loc_82144E38;
	case 3:
		goto loc_82144EAC;
	default:
		__builtin_unreachable();
	}
	// lwz r16,19880(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 19880);
	// lwz r16,20096(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20096);
	// lwz r16,20024(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20024);
	// lwz r16,20140(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20140);
loc_82144E80:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f31,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x82144e38
	goto loc_82144E38;
loc_82144EAC:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r4,24
	ctx.r4.s64 = 24;
	// b 0x82144e24
	goto loc_82144E24;
loc_82144EC4:
	// cmplwi cr6,r4,5
	cr6.compare<uint32_t>(ctx.r4.u32, 5, xer);
	// bgt cr6,0x82144fb0
	if (cr6.getGT()) goto loc_82144FB0;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,20196
	r12.s64 = r12.s64 + 20196;
	// rlwinm r0,r4,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r4.u64) {
	case 0:
		goto loc_82144DA8;
	case 1:
		goto loc_82144EFC;
	case 2:
		goto loc_82144F80;
	case 3:
		goto loc_82144FB0;
	case 4:
		goto loc_82144F28;
	case 5:
		goto loc_82144F68;
	default:
		__builtin_unreachable();
	}
	// lwz r16,19880(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 19880);
	// lwz r16,20220(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20220);
	// lwz r16,20352(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20352);
	// lwz r16,20400(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20400);
	// lwz r16,20264(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20264);
	// lwz r16,20328(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20328);
loc_82144EFC:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f31,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x82144e38
	goto loc_82144E38;
loc_82144F28:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f31,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// bl 0x820c5800
	sub_820C5800(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x82144e38
	goto loc_82144E38;
loc_82144F68:
	// bl 0x820c5800
	sub_820C5800(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
loc_82144F80:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lwz r3,26444(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 26444);
	// li r11,0
	r11.s64 = 0;
	// stw r11,26376(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26376, r11.u32);
	// bl 0x82145518
	sub_82145518(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// b 0x82144e30
	goto loc_82144E30;
loc_82144FB0:
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// beq cr6,0x82144da8
	if (cr6.getEQ()) goto loc_82144DA8;
	// cmpwi cr6,r4,3
	cr6.compare<int32_t>(ctx.r4.s32, 3, xer);
	// beq cr6,0x82145010
	if (cr6.getEQ()) goto loc_82145010;
	// cmpwi cr6,r4,5
	cr6.compare<int32_t>(ctx.r4.s32, 5, xer);
	// bne cr6,0x8214505c
	if (!cr6.getEQ()) goto loc_8214505C;
loc_82144FC8:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lwz r3,26444(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 26444);
	// li r11,0
	r11.s64 = 0;
	// stw r11,26376(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26376, r11.u32);
	// bl 0x82145518
	sub_82145518(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f1,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x82144e38
	goto loc_82144E38;
loc_82145010:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// li r4,24
	ctx.r4.s64 = 24;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,26376(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26376, r11.u32);
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f31,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r3,2
	ctx.r3.s64 = 2;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x82144e38
	goto loc_82144E38;
loc_8214505C:
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// beq cr6,0x82144da8
	if (cr6.getEQ()) goto loc_82144DA8;
	// cmpwi cr6,r4,3
	cr6.compare<int32_t>(ctx.r4.s32, 3, xer);
	// beq cr6,0x821450a0
	if (cr6.getEQ()) goto loc_821450A0;
	// cmpwi cr6,r4,4
	cr6.compare<int32_t>(ctx.r4.s32, 4, xer);
	// bne cr6,0x821450dc
	if (!cr6.getEQ()) goto loc_821450DC;
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f31,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x82144e38
	goto loc_82144E38;
loc_821450A0:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// li r4,24
	ctx.r4.s64 = 24;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,26376(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26376, r11.u32);
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,2
	ctx.r3.s64 = 2;
	// lfs f1,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x82144e38
	goto loc_82144E38;
loc_821450DC:
	// cmplwi cr6,r4,1
	cr6.compare<uint32_t>(ctx.r4.u32, 1, xer);
	// blt cr6,0x82144da8
	if (cr6.getLT()) goto loc_82144DA8;
	// beq cr6,0x82145100
	if (cr6.getEQ()) goto loc_82145100;
	// cmplwi cr6,r4,6
	cr6.compare<uint32_t>(ctx.r4.u32, 6, xer);
	// beq cr6,0x82144e20
	if (cr6.getEQ()) goto loc_82144E20;
loc_821450F0:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r3,r11,32004
	ctx.r3.s64 = r11.s64 + 32004;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_821450FC:
	// b 0x821450fc
	goto loc_821450FC;
loc_82145100:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f31,3060(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x82144e38
	goto loc_82144E38;
}

__attribute__((alias("__imp__sub_82145130"))) PPC_WEAK_FUNC(sub_82145130);
PPC_FUNC_IMPL(__imp__sub_82145130) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r20{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82144a80
	sub_82144A80(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x82144a80
	sub_82144A80(ctx, base);
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x82144a80
	sub_82144A80(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lis r30,-31994
	r30.s64 = -2096758784;
	// lis r31,-31994
	r31.s64 = -2096758784;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,26448(r30)
	PPC_STORE_U32(r30.u32 + 26448, r11.u32);
	// stw r29,26444(r31)
	PPC_STORE_U32(r31.u32 + 26444, r29.u32);
	// bl 0x821454c0
	sub_821454C0(ctx, base);
	// lwz r11,26448(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26448);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x82145280
	if (!cr6.getLT()) goto loc_82145280;
	// li r10,1
	ctx.r10.s64 = 1;
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// stw r10,26448(r30)
	PPC_STORE_U32(r30.u32 + 26448, ctx.r10.u32);
	// bgt cr6,0x8214526c
	if (cr6.getGT()) goto loc_8214526C;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,20908
	r12.s64 = r12.s64 + 20908;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_821451C8;
	case 1:
		goto loc_82145378;
	case 2:
		goto loc_82145378;
	case 3:
		goto loc_82145204;
	case 4:
		goto loc_82145238;
	case 5:
		goto loc_82145238;
	case 6:
		goto loc_82145238;
	default:
		__builtin_unreachable();
	}
	// lwz r16,20936(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20936);
	// lwz r16,21368(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 21368);
	// lwz r16,21368(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 21368);
	// lwz r16,20996(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 20996);
	// lwz r16,21048(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 21048);
	// lwz r16,21048(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 21048);
	// lwz r16,21048(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 21048);
loc_821451C8:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// lwz r3,26444(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 26444);
	// stw r11,26372(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26372, r11.u32);
	// bl 0x821453c0
	sub_821453C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82145204:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f31,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82145238:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f31,3060(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_8214526C:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,32004
	ctx.r3.s64 = r11.s64 + 32004;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_8214527C:
	// b 0x8214527c
	goto loc_8214527C;
loc_82145280:
	// li r10,4
	ctx.r10.s64 = 4;
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// stw r10,26448(r30)
	PPC_STORE_U32(r30.u32 + 26448, ctx.r10.u32);
	// bgt cr6,0x821453ac
	if (cr6.getGT()) goto loc_821453AC;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,21160
	r12.s64 = r12.s64 + 21160;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_821452C4;
	case 1:
		goto loc_82145330;
	case 2:
		goto loc_82145330;
	case 3:
		goto loc_82145330;
	case 4:
		goto loc_82145378;
	case 5:
		goto loc_82145378;
	case 6:
		goto loc_821453AC;
	default:
		__builtin_unreachable();
	}
	// lwz r16,21188(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 21188);
	// lwz r16,21296(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 21296);
	// lwz r16,21296(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 21296);
	// lwz r16,21296(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 21296);
	// lwz r16,21368(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 21368);
	// lwz r16,21368(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 21368);
	// lwz r16,21420(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 21420);
loc_821452C4:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// lwz r3,26444(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 26444);
	// stw r11,26372(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26372, r11.u32);
	// bl 0x821453c0
	sub_821453C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// bl 0x820c5800
	sub_820C5800(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// lwz r3,26444(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 26444);
	// stw r11,26380(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26380, r11.u32);
	// bl 0x821454c0
	sub_821454C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82145330:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f31,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// bl 0x820c5800
	sub_820C5800(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82145378:
	// bl 0x820c5868
	sub_820C5868(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f31,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_821453AC:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r4,4
	ctx.r4.s64 = 4;
	// addi r3,r11,32004
	ctx.r3.s64 = r11.s64 + 32004;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_821453BC:
	// b 0x821453bc
	goto loc_821453BC;
}

__attribute__((alias("__imp__sub_821453C0"))) PPC_WEAK_FUNC(sub_821453C0);
PPC_FUNC_IMPL(__imp__sub_821453C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// addi r9,r11,-5584
	ctx.r9.s64 = r11.s64 + -5584;
	// li r11,0
	r11.s64 = 0;
	// lhz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82145408
	if (cr6.getEQ()) goto loc_82145408;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
loc_821453E8:
	// cmpw cr6,r10,r3
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r3.s32, xer);
	// beq cr6,0x82145470
	if (cr6.getEQ()) goto loc_82145470;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lhzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x821453e8
	if (!cr6.getEQ()) goto loc_821453E8;
loc_82145408:
	// lis r11,-32033
	r11.s64 = -2099314688;
	// li r31,0
	r31.s64 = 0;
	// addi r30,r11,-5392
	r30.s64 = r11.s64 + -5392;
	// lhz r11,0(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82145438
	if (cr6.getEQ()) goto loc_82145438;
	// mr r11,r30
	r11.u64 = r30.u64;
loc_82145424:
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82145424
	if (!cr6.getEQ()) goto loc_82145424;
loc_82145438:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// twllei r31,0
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// divwu r10,r11,r31
	ctx.r10.u32 = r11.u32 / r31.u32;
	// mullw r10,r10,r31
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r31.s32);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r30
	r11.u64 = PPC_LOAD_U16(r11.u32 + r30.u32);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
loc_82145468:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_82145470:
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r9,2
	ctx.r10.s64 = ctx.r9.s64 + 2;
	// lhzx r11,r11,r10
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// bne cr6,0x82145468
	if (!cr6.getEQ()) goto loc_82145468;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// li r31,0
	r31.s64 = 0;
	// addi r30,r11,-5392
	r30.s64 = r11.s64 + -5392;
	// lhz r11,0(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82145438
	if (cr6.getEQ()) goto loc_82145438;
	// mr r11,r30
	r11.u64 = r30.u64;
loc_821454A4:
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x821454a4
	if (!cr6.getEQ()) goto loc_821454A4;
	// b 0x82145438
	goto loc_82145438;
}

__attribute__((alias("__imp__sub_821454C0"))) PPC_WEAK_FUNC(sub_821454C0);
PPC_FUNC_IMPL(__imp__sub_821454C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32033
	r11.s64 = -2099314688;
	// addi r9,r11,-5584
	ctx.r9.s64 = r11.s64 + -5584;
	// li r11,0
	r11.s64 = 0;
	// lhz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821454fc
	if (cr6.getEQ()) goto loc_821454FC;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
loc_821454DC:
	// cmpw cr6,r10,r3
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r3.s32, xer);
	// beq cr6,0x82145504
	if (cr6.getEQ()) goto loc_82145504;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lhzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x821454dc
	if (!cr6.getEQ()) goto loc_821454DC;
loc_821454FC:
	// li r3,-1
	ctx.r3.s64 = -1;
	// blr 
	return;
loc_82145504:
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r9,4
	ctx.r10.s64 = ctx.r9.s64 + 4;
	// lhzx r11,r11,r10
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82145518"))) PPC_WEAK_FUNC(sub_82145518);
PPC_FUNC_IMPL(__imp__sub_82145518) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32033
	r11.s64 = -2099314688;
	// addi r9,r11,-5584
	ctx.r9.s64 = r11.s64 + -5584;
	// li r11,0
	r11.s64 = 0;
	// lhz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82145554
	if (cr6.getEQ()) goto loc_82145554;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
loc_82145534:
	// cmpw cr6,r10,r3
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r3.s32, xer);
	// beq cr6,0x8214555c
	if (cr6.getEQ()) goto loc_8214555C;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lhzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82145534
	if (!cr6.getEQ()) goto loc_82145534;
loc_82145554:
	// li r3,-1
	ctx.r3.s64 = -1;
	// blr 
	return;
loc_8214555C:
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r9,6
	ctx.r10.s64 = ctx.r9.s64 + 6;
	// lhzx r11,r11,r10
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82145570"))) PPC_WEAK_FUNC(sub_82145570);
PPC_FUNC_IMPL(__imp__sub_82145570) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed53c
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// fmr f26,f1
	ctx.fpscr.disableFlushMode();
	f26.f64 = ctx.f1.f64;
	// fmr f28,f2
	f28.f64 = ctx.f2.f64;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f30,3060(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3060);
	f30.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f29.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmsubs f27,f0,f30,f29
	f27.f64 = double(float(f0.f64 * f30.f64 - f29.f64));
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,28556(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 28556);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f12,f13,f31
	ctx.f12.f64 = double(float(ctx.f13.f64 * f31.f64));
	// lfs f13,24884(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24884);
	ctx.f13.f64 = double(temp.f32);
	// fmsubs f25,f12,f0,f13
	f25.f64 = double(float(ctx.f12.f64 * f0.f64 - ctx.f13.f64));
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r31,-31994
	r31.s64 = -2096758784;
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r9,r11,136
	ctx.r9.s64 = r11.s64 * 136;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,12896(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12896);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f12,f27,f0
	ctx.f12.f64 = double(float(f27.f64 * f0.f64));
	// lfs f13,3908(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3908);
	ctx.f13.f64 = double(temp.f32);
	// add r11,r10,r30
	r11.u64 = ctx.r10.u64 + r30.u64;
	// lis r30,-31994
	r30.s64 = -2096758784;
	// fmuls f13,f25,f13
	ctx.f13.f64 = double(float(f25.f64 * ctx.f13.f64));
	// clrldi r8,r11,32
	ctx.r8.u64 = r11.u64 & 0xFFFFFFFF;
	// li r10,1
	ctx.r10.s64 = 1;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// std r8,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r8.u64);
	// stwx r10,r9,r11
	PPC_STORE_U32(ctx.r9.u32 + r11.u32, ctx.r10.u32);
	// lfs f11,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f11,4(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// lfs f11,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	ctx.f11.f64 = double(temp.f32);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f11,8(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// lfs f11,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f11.f64 = double(temp.f32);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f11,12(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// lfd f11,80(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f12,28(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 28, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// frsp f12,f11
	ctx.f12.f64 = double(float(ctx.f11.f64));
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f13,32(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 32, temp.u32);
	// fmuls f13,f12,f31
	ctx.f13.f64 = double(float(ctx.f12.f64 * f31.f64));
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// fmsubs f13,f13,f30,f29
	ctx.f13.f64 = double(float(ctx.f13.f64 * f30.f64 - f29.f64));
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,36(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 36, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f27,2692(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2692);
	f27.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmadds f0,f0,f27,f29
	f0.f64 = double(float(f0.f64 * f27.f64 + f29.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,52(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 52, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// mulli r9,r11,136
	ctx.r9.s64 = r11.s64 * 136;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f30.f64 = double(temp.f32);
	// add r11,r10,r29
	r11.u64 = ctx.r10.u64 + r29.u64;
	// lwz r10,26452(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmadds f0,f0,f27,f29
	f0.f64 = double(float(f0.f64 * f27.f64 + f29.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r11,86(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,56(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 56, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f30,60(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 60, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// mulli r9,r11,136
	ctx.r9.s64 = r11.s64 * 136;
	// add r11,r10,r29
	r11.u64 = ctx.r10.u64 + r29.u64;
	// lwz r10,26452(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmadds f0,f0,f27,f29
	f0.f64 = double(float(f0.f64 * f27.f64 + f29.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r11,86(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,80(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 80, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmadds f0,f0,f27,f29
	f0.f64 = double(float(f0.f64 * f27.f64 + f29.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,84(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 84, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f30,88(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 88, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// mulli r9,r11,136
	ctx.r9.s64 = r11.s64 * 136;
	// add r11,r10,r29
	r11.u64 = ctx.r10.u64 + r29.u64;
	// lwz r10,26452(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmadds f0,f0,f27,f29
	f0.f64 = double(float(f0.f64 * f27.f64 + f29.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r11,86(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,108(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 108, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// li r8,5
	ctx.r8.s64 = 5;
	// mulli r9,r11,136
	ctx.r9.s64 = r11.s64 * 136;
	// add r11,r10,r29
	r11.u64 = ctx.r10.u64 + r29.u64;
	// lwz r10,26452(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// li r9,126
	ctx.r9.s64 = 126;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmadds f0,f0,f27,f29
	f0.f64 = double(float(f0.f64 * f27.f64 + f29.f64));
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lhz r11,86(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,112(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 112, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f30,116(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 116, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f30,68(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 68, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f30,72(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 72, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// li r10,251
	ctx.r10.s64 = 251;
	// stfs f30,96(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 96, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r7,r11,136
	ctx.r7.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r7,r7,r11
	ctx.r7.u64 = ctx.r7.u64 + r11.u64;
	// li r11,255
	r11.s64 = 255;
	// stfs f30,100(r7)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r7.u32 + 100, temp.u32);
	// lwz r7,26460(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r6,r7,136
	ctx.r6.s64 = ctx.r7.s64 * 136;
	// lwz r7,26452(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// stfs f30,124(r7)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r7.u32 + 124, temp.u32);
	// lwz r7,26460(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r6,r7,136
	ctx.r6.s64 = ctx.r7.s64 * 136;
	// lwz r7,26452(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// stfs f30,128(r7)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r7.u32 + 128, temp.u32);
	// lwz r7,26460(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r6,r7,136
	ctx.r6.s64 = ctx.r7.s64 * 136;
	// lwz r7,26452(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// stb r8,76(r7)
	PPC_STORE_U8(ctx.r7.u32 + 76, ctx.r8.u8);
	// lwz r7,26460(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r6,r7,136
	ctx.r6.s64 = ctx.r7.s64 * 136;
	// lwz r7,26452(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// stb r8,77(r7)
	PPC_STORE_U8(ctx.r7.u32 + 77, ctx.r8.u8);
	// lwz r7,26460(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r6,r7,136
	ctx.r6.s64 = ctx.r7.s64 * 136;
	// lwz r7,26452(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// stb r9,78(r7)
	PPC_STORE_U8(ctx.r7.u32 + 78, ctx.r9.u8);
	// lwz r7,26460(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r6,r7,136
	ctx.r6.s64 = ctx.r7.s64 * 136;
	// lwz r7,26452(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// stb r8,104(r7)
	PPC_STORE_U8(ctx.r7.u32 + 104, ctx.r8.u8);
	// lwz r8,26460(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r7,r8,136
	ctx.r7.s64 = ctx.r8.s64 * 136;
	// lwz r8,26452(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r8,r7,r8
	ctx.r8.u64 = ctx.r7.u64 + ctx.r8.u64;
	// stb r10,105(r8)
	PPC_STORE_U8(ctx.r8.u32 + 105, ctx.r10.u8);
	// lwz r8,26460(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r7,r8,136
	ctx.r7.s64 = ctx.r8.s64 * 136;
	// lwz r8,26452(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r8,r7,r8
	ctx.r8.u64 = ctx.r7.u64 + ctx.r8.u64;
	// stb r9,106(r8)
	PPC_STORE_U8(ctx.r8.u32 + 106, ctx.r9.u8);
	// lwz r8,26460(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r7,r8,136
	ctx.r7.s64 = ctx.r8.s64 * 136;
	// lwz r8,26452(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r8,r7,r8
	ctx.r8.u64 = ctx.r7.u64 + ctx.r8.u64;
	// stb r10,132(r8)
	PPC_STORE_U8(ctx.r8.u32 + 132, ctx.r10.u8);
	// lwz r8,26460(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r7,r8,136
	ctx.r7.s64 = ctx.r8.s64 * 136;
	// lwz r8,26452(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r8,r7,r8
	ctx.r8.u64 = ctx.r7.u64 + ctx.r8.u64;
	// stb r10,133(r8)
	PPC_STORE_U8(ctx.r8.u32 + 133, ctx.r10.u8);
	// lwz r10,26460(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r8,r10,136
	ctx.r8.s64 = ctx.r10.s64 * 136;
	// lwz r10,26452(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r10,r8,r10
	ctx.r10.u64 = ctx.r8.u64 + ctx.r10.u64;
	// stb r9,134(r10)
	PPC_STORE_U8(ctx.r10.u32 + 134, ctx.r9.u8);
	// lwz r10,26460(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r9,r10,136
	ctx.r9.s64 = ctx.r10.s64 * 136;
	// lwz r10,26452(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stb r11,135(r10)
	PPC_STORE_U8(ctx.r10.u32 + 135, r11.u8);
	// lwz r10,26460(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r9,r10,136
	ctx.r9.s64 = ctx.r10.s64 * 136;
	// lwz r10,26452(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stb r11,107(r10)
	PPC_STORE_U8(ctx.r10.u32 + 107, r11.u8);
	// lwz r10,26460(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r9,r10,136
	ctx.r9.s64 = ctx.r10.s64 * 136;
	// lwz r10,26452(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stb r11,79(r10)
	PPC_STORE_U8(ctx.r10.u32 + 79, r11.u8);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f26,16(r11)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stfs f30,20(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 20, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// mulli r10,r11,136
	ctx.r10.s64 = r11.s64 * 136;
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f13,f0,f31
	ctx.f13.f64 = double(float(f0.f64 * f31.f64));
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,24(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 24, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// mulli r9,r11,136
	ctx.r9.s64 = r11.s64 * 136;
	// add r11,r10,r29
	r11.u64 = ctx.r10.u64 + r29.u64;
	// lwz r10,26452(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,13964(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13964);
	f30.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,40(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 40, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// mulli r9,r11,136
	ctx.r9.s64 = r11.s64 * 136;
	// add r11,r10,r29
	r11.u64 = ctx.r10.u64 + r29.u64;
	// lwz r10,26452(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,44(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 44, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// mulli r9,r11,136
	ctx.r9.s64 = r11.s64 * 136;
	// add r11,r10,r29
	r11.u64 = ctx.r10.u64 + r29.u64;
	// lwz r10,26452(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,48(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 48, temp.u32);
	// lwz r11,26460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26460);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,26456(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 26456);
	// stw r11,26460(r31)
	PPC_STORE_U32(r31.u32 + 26460, r11.u32);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82145cb0
	if (cr6.getLT()) goto loc_82145CB0;
	// li r11,0
	r11.s64 = 0;
	// stw r11,26460(r31)
	PPC_STORE_U32(r31.u32 + 26460, r11.u32);
loc_82145CB0:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed588
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82145CC0"))) PPC_WEAK_FUNC(sub_82145CC0);
PPC_FUNC_IMPL(__imp__sub_82145CC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	// mflr r12
	// bl 0x823ed13c
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// bge cr6,0x82145cf0
	if (!cr6.getLT()) goto loc_82145CF0;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, r11.u64);
	// lfd f0,-48(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f12,f0
	ctx.f12.f64 = double(float(f0.f64));
	// b 0x82145cf8
	goto loc_82145CF8;
loc_82145CF0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f12.f64 = double(temp.f32);
loc_82145CF8:
	// lis r29,-31994
	r29.s64 = -2096758784;
	// li r31,0
	r31.s64 = 0;
	// mr r30,r31
	r30.u64 = r31.u64;
	// lwz r11,26456(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 26456);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82145ed4
	if (!cr6.getGT()) goto loc_82145ED4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r3,-31994
	ctx.r3.s64 = -2096758784;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lfs f0,13964(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13964);
	f0.f64 = double(temp.f32);
	// lfs f10,14184(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14184);
	ctx.f10.f64 = double(temp.f32);
	// lfs f11,14180(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14180);
	ctx.f11.f64 = double(temp.f32);
	// lwz r11,26452(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 26452);
loc_82145D34:
	// lwzx r10,r5,r11
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + r11.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82145ec0
	if (!cr6.getGT()) goto loc_82145EC0;
	// addi r9,r1,-48
	ctx.r9.s64 = ctx.r1.s64 + -48;
	// fctiwz f13,f12
	ctx.fpscr.disableFlushMode();
	ctx.f13.s64 = (ctx.f12.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f12.f64));
	// rotlwi r10,r10,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// stfiwx f13,0,r9
	PPC_STORE_U32(ctx.r9.u32, ctx.f13.u32);
	// lwz r6,-48(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -48);
	// add r10,r6,r10
	ctx.r10.u64 = ctx.r6.u64 + ctx.r10.u64;
	// cmpwi cr6,r6,4
	cr6.compare<int32_t>(ctx.r6.s32, 4, xer);
	// stwx r10,r5,r11
	PPC_STORE_U32(ctx.r5.u32 + r11.u32, ctx.r10.u32);
	// lwz r11,26452(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 26452);
	// add r11,r5,r11
	r11.u64 = ctx.r5.u64 + r11.u64;
	// lfs f9,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	ctx.f9.f64 = double(temp.f32);
	// lfs f13,40(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 40);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f13,f13,f12,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 + ctx.f9.f64));
	// stfs f13,16(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// lfs f9,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f9.f64 = double(temp.f32);
	// lfs f13,44(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 44);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f13,f13,f12,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 + ctx.f9.f64));
	// stfs f13,20(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 20, temp.u32);
	// lfs f9,24(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24);
	ctx.f9.f64 = double(temp.f32);
	// lfs f13,48(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 48);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f13,f13,f12,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 + ctx.f9.f64));
	// stfs f13,24(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 24, temp.u32);
	// lfs f9,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	ctx.f9.f64 = double(temp.f32);
	// lfs f13,28(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f13,f13,f12,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 + ctx.f9.f64));
	// stfs f13,4(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lfs f13,36(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 36);
	ctx.f13.f64 = double(temp.f32);
	// lfs f9,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	ctx.f9.f64 = double(temp.f32);
	// fmadds f13,f13,f12,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 + ctx.f9.f64));
	// stfs f13,12(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// blt cr6,0x82145e4c
	if (cr6.getLT()) goto loc_82145E4C;
	// addi r9,r6,-4
	ctx.r9.s64 = ctx.r6.s64 + -4;
	// addi r10,r5,32
	ctx.r10.s64 = ctx.r5.s64 + 32;
	// rlwinm r9,r9,30,2,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 30) & 0x3FFFFFFF;
	// addi r7,r9,1
	ctx.r7.s64 = ctx.r9.s64 + 1;
	// lwz r9,26452(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 26452);
	// add r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r4,r7,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
loc_82145DDC:
	// lfsx f9,r10,r9
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	ctx.f9.f64 = double(temp.f32);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// lfs f13,-24(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -24);
	ctx.f13.f64 = double(temp.f32);
	// fadds f13,f13,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 + ctx.f9.f64));
	// stfs f13,-24(r8)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r8.u32 + -24, temp.u32);
	// lfsx f13,r10,r9
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	ctx.f13.f64 = double(temp.f32);
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// fsubs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfsx f13,r10,r9
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, temp.u32);
	// lfs f9,-24(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -24);
	ctx.f9.f64 = double(temp.f32);
	// fadds f13,f9,f13
	ctx.f13.f64 = double(float(ctx.f9.f64 + ctx.f13.f64));
	// stfs f13,-24(r8)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r8.u32 + -24, temp.u32);
	// lfsx f13,r10,r9
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfsx f13,r10,r9
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, temp.u32);
	// lfs f9,-24(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -24);
	ctx.f9.f64 = double(temp.f32);
	// fadds f13,f9,f13
	ctx.f13.f64 = double(float(ctx.f9.f64 + ctx.f13.f64));
	// stfs f13,-24(r8)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r8.u32 + -24, temp.u32);
	// lfsx f13,r10,r9
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfsx f13,r10,r9
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, temp.u32);
	// lfs f9,-24(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -24);
	ctx.f9.f64 = double(temp.f32);
	// fadds f13,f9,f13
	ctx.f13.f64 = double(float(ctx.f9.f64 + ctx.f13.f64));
	// stfs f13,-24(r8)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r8.u32 + -24, temp.u32);
	// lfsx f13,r10,r9
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfsx f13,r10,r9
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, temp.u32);
	// bne cr6,0x82145ddc
	if (!cr6.getEQ()) goto loc_82145DDC;
loc_82145E4C:
	// cmpw cr6,r4,r6
	cr6.compare<int32_t>(ctx.r4.s32, ctx.r6.s32, xer);
	// bge cr6,0x82145e8c
	if (!cr6.getLT()) goto loc_82145E8C;
	// lwz r9,26452(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 26452);
	// addi r10,r5,32
	ctx.r10.s64 = ctx.r5.s64 + 32;
	// subf r8,r4,r6
	ctx.r8.s64 = ctx.r6.s64 - ctx.r4.s64;
	// add r7,r10,r9
	ctx.r7.u64 = ctx.r10.u64 + ctx.r9.u64;
loc_82145E64:
	// lfs f13,-24(r7)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + -24);
	ctx.f13.f64 = double(temp.f32);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lfsx f9,r10,r9
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	ctx.f9.f64 = double(temp.f32);
	// fadds f13,f13,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 + ctx.f9.f64));
	// stfs f13,-24(r7)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r7.u32 + -24, temp.u32);
	// lfsx f13,r10,r9
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	ctx.f13.f64 = double(temp.f32);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// fsubs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfsx f13,r10,r9
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, temp.u32);
	// bne cr6,0x82145e64
	if (!cr6.getEQ()) goto loc_82145E64;
loc_82145E8C:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,150
	cr6.compare<int32_t>(ctx.r10.s32, 150, xer);
	// blt cr6,0x82145e9c
	if (cr6.getLT()) goto loc_82145E9C;
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
loc_82145E9C:
	// lwz r11,26452(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 26452);
	// add r10,r5,r11
	ctx.r10.u64 = ctx.r5.u64 + r11.u64;
	// lfs f13,8(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f11
	cr6.compare(ctx.f13.f64, ctx.f11.f64);
	// blt cr6,0x82145eb8
	if (cr6.getLT()) goto loc_82145EB8;
	// fcmpu cr6,f13,f10
	cr6.compare(ctx.f13.f64, ctx.f10.f64);
	// ble cr6,0x82145ec0
	if (!cr6.getGT()) goto loc_82145EC0;
loc_82145EB8:
	// stw r31,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r31.u32);
	// lwz r11,26452(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 26452);
loc_82145EC0:
	// lwz r10,26456(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 26456);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r5,r5,136
	ctx.r5.s64 = ctx.r5.s64 + 136;
	// cmpw cr6,r30,r10
	cr6.compare<int32_t>(r30.s32, ctx.r10.s32, xer);
	// blt cr6,0x82145d34
	if (cr6.getLT()) goto loc_82145D34;
loc_82145ED4:
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82145ED8"))) PPC_WEAK_FUNC(sub_82145ED8);
PPC_FUNC_IMPL(__imp__sub_82145ED8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r28,-31994
	r28.s64 = -2096758784;
	// li r31,0
	r31.s64 = 0;
	// lwz r11,26456(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 26456);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82146038
	if (!cr6.getGT()) goto loc_82146038;
	// lis r30,-31994
	r30.s64 = -2096758784;
	// lwz r10,26452(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 26452);
loc_82145F00:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82145f10
	if (!cr6.getGT()) goto loc_82145F10;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_82145F10:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r10,r10,136
	ctx.r10.s64 = ctx.r10.s64 + 136;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82145f00
	if (!cr6.getEQ()) goto loc_82145F00;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// ble cr6,0x82146038
	if (!cr6.getGT()) goto loc_82146038;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x8210d790
	sub_8210D790(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// addi r11,r11,29592
	r11.s64 = r11.s64 + 29592;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r8,2
	ctx.r8.s64 = 2;
	// li r9,0
	ctx.r9.s64 = 0;
	// bl 0x82098748
	sub_82098748(ctx, base);
	// lwz r10,26456(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 26456);
	// li r27,0
	r27.s64 = 0;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82146034
	if (!cr6.getGT()) goto loc_82146034;
	// lwz r9,26452(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// li r31,0
	r31.s64 = 0;
	// lis r29,-32014
	r29.s64 = -2098069504;
loc_82145F80:
	// lwzx r8,r31,r9
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + ctx.r9.u32);
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82146024
	if (!cr6.getGT()) goto loc_82146024;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
	// addi r3,r11,4
	ctx.r3.s64 = r11.s64 + 4;
	// bl 0x8210c7c0
	sub_8210C7C0(ctx, base);
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// lfs f13,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	ctx.f13.f64 = double(temp.f32);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f0,184(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 184);
	f0.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f0,128(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// lfs f0,188(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 188);
	f0.f64 = double(temp.f32);
	// lfs f13,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f0,132(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// lfs f0,192(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 192);
	f0.f64 = double(temp.f32);
	// lfs f13,136(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r4,r11,52
	ctx.r4.s64 = r11.s64 + 52;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r4,r11,80
	ctx.r4.s64 = r11.s64 + 80;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lwz r11,26452(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26452);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r4,r11,108
	ctx.r4.s64 = r11.s64 + 108;
	// bl 0x82097900
	sub_82097900(ctx, base);
	// lwz r10,26456(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 26456);
	// lwz r9,26452(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 26452);
loc_82146024:
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// addi r31,r31,136
	r31.s64 = r31.s64 + 136;
	// cmpw cr6,r27,r10
	cr6.compare<int32_t>(r27.s32, ctx.r10.s32, xer);
	// blt cr6,0x82145f80
	if (cr6.getLT()) goto loc_82145F80;
loc_82146034:
	// bl 0x820987a8
	sub_820987A8(ctx, base);
loc_82146038:
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82146040"))) PPC_WEAK_FUNC(sub_82146040);
PPC_FUNC_IMPL(__imp__sub_82146040) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f14{};
	PPCRegister f15{};
	PPCRegister f16{};
	PPCRegister f17{};
	PPCRegister f18{};
	PPCRegister f19{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed510
	// stwu r1,-320(r1)
	ea = -320 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lfs f13,4(r4)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// fmr f31,f2
	f31.f64 = ctx.f2.f64;
	// fmuls f8,f13,f13
	ctx.f8.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// lfs f0,8(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	f0.f64 = double(temp.f32);
	// lfs f10,4(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 4);
	ctx.f10.f64 = double(temp.f32);
	// fmr f24,f4
	f24.f64 = ctx.f4.f64;
	// fmuls f7,f10,f10
	ctx.f7.f64 = double(float(ctx.f10.f64 * ctx.f10.f64));
	// lfs f12,0(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,8(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	ctx.f11.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f9,0(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	ctx.f9.f64 = double(temp.f32);
	// fmr f5,f1
	ctx.f5.f64 = ctx.f1.f64;
	// lfs f2,8(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lfs f1,0(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// lfs f6,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f6.f64 = double(temp.f32);
	// fmadds f8,f0,f0,f8
	ctx.f8.f64 = double(float(f0.f64 * f0.f64 + ctx.f8.f64));
	// fmadds f7,f11,f11,f7
	ctx.f7.f64 = double(float(ctx.f11.f64 * ctx.f11.f64 + ctx.f7.f64));
	// fmadds f8,f12,f12,f8
	ctx.f8.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + ctx.f8.f64));
	// fmadds f4,f9,f9,f7
	ctx.f4.f64 = double(float(ctx.f9.f64 * ctx.f9.f64 + ctx.f7.f64));
	// fsqrts f8,f8
	ctx.f8.f64 = double(float(sqrt(ctx.f8.f64)));
	// fdivs f7,f6,f8
	ctx.f7.f64 = double(float(ctx.f6.f64 / ctx.f8.f64));
	// fmuls f25,f8,f31
	f25.f64 = double(float(ctx.f8.f64 * f31.f64));
	// fsqrts f31,f4
	f31.f64 = double(float(sqrt(ctx.f4.f64)));
	// fmuls f28,f7,f0
	f28.f64 = double(float(ctx.f7.f64 * f0.f64));
	// fdivs f0,f6,f31
	f0.f64 = double(float(ctx.f6.f64 / f31.f64));
	// fmuls f27,f8,f5
	f27.f64 = double(float(ctx.f8.f64 * ctx.f5.f64));
	// fmuls f30,f7,f12
	f30.f64 = double(float(ctx.f7.f64 * ctx.f12.f64));
	// fmuls f29,f7,f13
	f29.f64 = double(float(ctx.f7.f64 * ctx.f13.f64));
	// fmuls f26,f31,f3
	f26.f64 = double(float(f31.f64 * ctx.f3.f64));
	// fmuls f16,f9,f0
	f16.f64 = double(float(ctx.f9.f64 * f0.f64));
	// fmuls f15,f10,f0
	f15.f64 = double(float(ctx.f10.f64 * f0.f64));
	// fmuls f14,f11,f0
	f14.f64 = double(float(ctx.f11.f64 * f0.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// fmsubs f24,f31,f24,f26
	ctx.fpscr.disableFlushMode();
	f24.f64 = double(float(f31.f64 * f24.f64 - f26.f64));
	// fsubs f25,f25,f27
	f25.f64 = double(float(f25.f64 - f27.f64));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f12,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fmr f23,f1
	f23.f64 = ctx.f1.f64;
	// lfs f10,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f10.f64 = double(temp.f32);
	// li r8,106
	ctx.r8.s64 = 106;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,26456(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 26456);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// fmuls f13,f24,f25
	ctx.f13.f64 = double(float(f24.f64 * f25.f64));
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f0,96(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fsqrts f31,f0
	f31.f64 = double(float(sqrt(f0.f64)));
	// fctiwz f0,f31
	f0.s64 = (f31.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f31.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r30,80(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// srawi r11,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	r11.s64 = r30.s32 >> 1;
	// srawi r10,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	ctx.r10.s64 = r30.s32 >> 1;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// addi r7,r11,32036
	ctx.r7.s64 = r11.s64 + 32036;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fadds f13,f13,f27
	ctx.f13.f64 = double(float(ctx.f13.f64 + f27.f64));
	// fmuls f11,f13,f30
	ctx.f11.f64 = double(float(ctx.f13.f64 * f30.f64));
	// lfd f0,96(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fadds f0,f0,f26
	f0.f64 = double(float(f0.f64 + f26.f64));
	// fmadds f11,f0,f16,f11
	ctx.f11.f64 = double(float(f0.f64 * f16.f64 + ctx.f11.f64));
	// fadds f22,f11,f12
	f22.f64 = double(float(ctx.f11.f64 + ctx.f12.f64));
	// lfs f11,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	ctx.f11.f64 = double(temp.f32);
	// fmuls f12,f13,f29
	ctx.f12.f64 = double(float(ctx.f13.f64 * f29.f64));
	// fmuls f13,f13,f28
	ctx.f13.f64 = double(float(ctx.f13.f64 * f28.f64));
	// fmadds f12,f0,f15,f12
	ctx.f12.f64 = double(float(f0.f64 * f15.f64 + ctx.f12.f64));
	// lis r11,-31994
	r11.s64 = -2096758784;
	// fmadds f0,f0,f14,f13
	f0.f64 = double(float(f0.f64 * f14.f64 + ctx.f13.f64));
	// li r4,71
	ctx.r4.s64 = 71;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// fadds f21,f12,f11
	f21.f64 = double(float(ctx.f12.f64 + ctx.f11.f64));
	// fadds f20,f0,f10
	f20.f64 = double(float(f0.f64 + ctx.f10.f64));
	// bl 0x82144920
	sub_82144920(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820dd8d8
	sub_820DD8D8(ctx, base);
	// extsw r11,r30
	r11.s64 = r30.s32;
	// extsw r10,r30
	ctx.r10.s64 = r30.s32;
	// addi r9,r1,88
	ctx.r9.s64 = ctx.r1.s64 + 88;
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// li r28,0
	r28.s64 = 0;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// lfd f13,88(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lfd f0,96(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f27,f0
	f27.f64 = double(float(f0.f64));
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// fdivs f13,f25,f27
	ctx.f13.f64 = double(float(f25.f64 / f27.f64));
	// fdivs f12,f24,f0
	ctx.f12.f64 = double(float(f24.f64 / f0.f64));
	// fctiwz f13,f13
	ctx.f13.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfiwx f13,0,r9
	PPC_STORE_U32(ctx.r9.u32, ctx.f13.u32);
	// fctiwz f13,f12
	ctx.f13.s64 = (ctx.f12.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f12.f64));
	// stfiwx f13,0,r8
	PPC_STORE_U32(ctx.r8.u32, ctx.f13.u32);
	// lwz r27,80(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// ble cr6,0x82146300
	if (!cr6.getGT()) goto loc_82146300;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lwz r29,88(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f17,13964(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 13964);
	f17.f64 = double(temp.f32);
	// lfs f18,2720(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2720);
	f18.f64 = double(temp.f32);
	// lfs f19,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f19.f64 = double(temp.f32);
loc_82146238:
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// ble cr6,0x821462f4
	if (!cr6.getGT()) goto loc_821462F4;
	// extsw r11,r28
	r11.s64 = r28.s32;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f13,88(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fmuls f26,f0,f16
	f26.f64 = double(float(f0.f64 * f16.f64));
	// fmuls f25,f0,f15
	f25.f64 = double(float(f0.f64 * f15.f64));
	// fmuls f24,f0,f14
	f24.f64 = double(float(f0.f64 * f14.f64));
loc_82146268:
	// extsw r11,r31
	r11.s64 = r31.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f27
	f0.f64 = double(float(f0.f64 * f27.f64));
	// fmadds f13,f0,f30,f26
	ctx.f13.f64 = double(float(f0.f64 * f30.f64 + f26.f64));
	// fmadds f12,f0,f29,f25
	ctx.f12.f64 = double(float(f0.f64 * f29.f64 + f25.f64));
	// fmadds f0,f0,f28,f24
	f0.f64 = double(float(f0.f64 * f28.f64 + f24.f64));
	// fadds f13,f13,f22
	ctx.f13.f64 = double(float(ctx.f13.f64 + f22.f64));
	// stfs f13,112(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// fadds f13,f12,f21
	ctx.f13.f64 = double(float(ctx.f12.f64 + f21.f64));
	// stfs f13,116(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// fadds f0,f0,f20
	f0.f64 = double(float(f0.f64 + f20.f64));
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// fmr f1,f23
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f23.f64;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, r11.u64);
	// lfd f0,104(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f19
	f0.f64 = double(float(f0.f64 * f19.f64));
	// fmadds f0,f0,f18,f17
	f0.f64 = double(float(f0.f64 * f18.f64 + f17.f64));
	// fmuls f2,f0,f31
	ctx.f2.f64 = double(float(f0.f64 * f31.f64));
	// bl 0x82145570
	sub_82145570(ctx, base);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// blt cr6,0x82146268
	if (cr6.getLT()) goto loc_82146268;
	// lfs f0,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f0.f64 = double(temp.f32);
loc_821462F4:
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// cmpw cr6,r28,r27
	cr6.compare<int32_t>(r28.s32, r27.s32, xer);
	// blt cr6,0x82146238
	if (cr6.getLT()) goto loc_82146238;
loc_82146300:
	// addi r1,r1,320
	ctx.r1.s64 = ctx.r1.s64 + 320;
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed55c
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82146310"))) PPC_WEAK_FUNC(sub_82146310);
PPC_FUNC_IMPL(__imp__sub_82146310) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8209ec18
	sub_8209EC18(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// li r11,200
	r11.s64 = 200;
	// lis r31,-31994
	r31.s64 = -2096758784;
	// divw r5,r11,r3
	ctx.r5.s32 = r11.s32 / ctx.r3.s32;
	// cmpwi cr6,r30,29
	cr6.compare<int32_t>(r30.s32, 29, xer);
	// twllei r3,0
	// stw r5,26456(r31)
	PPC_STORE_U32(r31.u32 + 26456, ctx.r5.u32);
	// beq cr6,0x82146354
	if (cr6.getEQ()) goto loc_82146354;
	// cmpwi cr6,r30,30
	cr6.compare<int32_t>(r30.s32, 30, xer);
	// bne cr6,0x8214635c
	if (!cr6.getEQ()) goto loc_8214635C;
loc_82146354:
	// srawi r5,r5,1
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x1) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 1;
	// stw r5,26456(r31)
	PPC_STORE_U32(r31.u32 + 26456, ctx.r5.u32);
loc_8214635C:
	// mulli r11,r5,136
	r11.s64 = ctx.r5.s64 * 136;
	// addi r10,r11,15
	ctx.r10.s64 = r11.s64 + 15;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// rlwinm r4,r10,0,0,27
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFF0;
	// addi r3,r11,32056
	ctx.r3.s64 = r11.s64 + 32056;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// lwz r11,26456(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 26456);
	// li r4,1
	ctx.r4.s64 = 1;
	// mulli r11,r11,136
	r11.s64 = r11.s64 * 136;
	// addi r11,r11,15
	r11.s64 = r11.s64 + 15;
	// rlwinm r3,r11,0,0,27
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF0;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// lis r8,-31994
	ctx.r8.s64 = -2096758784;
	// lwz r10,26456(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 26456);
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r3,26452(r8)
	PPC_STORE_U32(ctx.r8.u32 + 26452, ctx.r3.u32);
	// ble cr6,0x821463cc
	if (!cr6.getGT()) goto loc_821463CC;
	// mr r10,r7
	ctx.r10.u64 = ctx.r7.u64;
	// b 0x821463b4
	goto loc_821463B4;
loc_821463B0:
	// lwz r3,26452(r8)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + 26452);
loc_821463B4:
	// stwx r7,r10,r3
	PPC_STORE_U32(ctx.r10.u32 + ctx.r3.u32, ctx.r7.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r9,26456(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 26456);
	// addi r10,r10,136
	ctx.r10.s64 = ctx.r10.s64 + 136;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x821463b0
	if (cr6.getLT()) goto loc_821463B0;
loc_821463CC:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// stw r7,26460(r11)
	PPC_STORE_U32(r11.u32 + 26460, ctx.r7.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821463F0"))) PPC_WEAK_FUNC(sub_821463F0);
PPC_FUNC_IMPL(__imp__sub_821463F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lbz r10,-8431(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + -8431);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82146410
	if (!cr6.getEQ()) goto loc_82146410;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bnelr cr6
	if (!cr6.getEQ()) return;
loc_82146410:
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82146418"))) PPC_WEAK_FUNC(sub_82146418);
PPC_FUNC_IMPL(__imp__sub_82146418) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-560(r1)
	ea = -560 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r28,r31,4
	r28.s64 = r31.s64 + 4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146474
	if (!cr6.getEQ()) goto loc_82146474;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// addi r5,r11,32308
	ctx.r5.s64 = r11.s64 + 32308;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146474:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214652c
	if (!cr6.getEQ()) goto loc_8214652C;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// addi r5,r11,32260
	ctx.r5.s64 = r11.s64 + 32260;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821464ec
	if (cr6.getEQ()) goto loc_821464EC;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// blt cr6,0x821464c8
	if (cr6.getLT()) goto loc_821464C8;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// b 0x821464cc
	goto loc_821464CC;
loc_821464C8:
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
loc_821464CC:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// bge cr6,0x82146510
	if (!cr6.getLT()) goto loc_82146510;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x823ed180
	return;
loc_821464EC:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// blt cr6,0x821464fc
	if (cr6.getLT()) goto loc_821464FC;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// b 0x82146504
	goto loc_82146504;
loc_821464FC:
	// lwz r3,0(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
loc_82146504:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// blt cr6,0x82146520
	if (cr6.getLT()) goto loc_82146520;
loc_82146510:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x823ed180
	return;
loc_82146520:
	// lwz r3,0(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_8214652C:
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82146538"))) PPC_WEAK_FUNC(sub_82146538);
PPC_FUNC_IMPL(__imp__sub_82146538) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// lis r12,-1
	r12.s64 = -65536;
	// ori r12,r12,25504
	r12.u64 = r12.u64 | 25504;
	// bl 0x823eee14
	sub_823EEE14(ctx, base);
	// stwux r1,r1,r12
	ea = ctx.r1.u32 + r12.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28040
	r31.s64 = r11.s64 + 28040;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r22,r11,32308
	r22.s64 = r11.s64 + 32308;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31168
	r30.s64 = r11.s64 + -31168;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r23,r11,-31172
	r23.s64 = r11.s64 + -31172;
	// bne cr6,0x821465a4
	if (!cr6.getEQ()) goto loc_821465A4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,19504
	ctx.r3.s64 = ctx.r1.s64 + 19504;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,19504
	ctx.r3.s64 = ctx.r1.s64 + 19504;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821465A4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r24,r11,32260
	r24.s64 = r11.s64 + 32260;
	// bne cr6,0x821465f4
	if (!cr6.getEQ()) goto loc_821465F4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,784
	ctx.r3.s64 = ctx.r1.s64 + 784;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,784
	ctx.r3.s64 = ctx.r1.s64 + 784;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,32
	r11.s64 = 32;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_821465F4:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,27912
	r31.s64 = r11.s64 + 27912;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31180
	r30.s64 = r11.s64 + -31180;
	// bne cr6,0x82146638
	if (!cr6.getEQ()) goto loc_82146638;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,20336
	ctx.r3.s64 = ctx.r1.s64 + 20336;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,20336
	ctx.r3.s64 = ctx.r1.s64 + 20336;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146638:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146680
	if (!cr6.getEQ()) goto loc_82146680;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,1200
	ctx.r3.s64 = ctx.r1.s64 + 1200;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,1200
	ctx.r3.s64 = ctx.r1.s64 + 1200;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,32
	r11.s64 = 32;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146680:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,29560
	r31.s64 = r11.s64 + 29560;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31192
	r30.s64 = r11.s64 + -31192;
	// bne cr6,0x821466d4
	if (!cr6.getEQ()) goto loc_821466D4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,34896
	r12.u64 = r12.u64 | 34896;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,34896
	r12.u64 = r12.u64 | 34896;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821466D4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146720
	if (!cr6.getEQ()) goto loc_82146720;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,1616
	ctx.r3.s64 = ctx.r1.s64 + 1616;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,1616
	ctx.r3.s64 = ctx.r1.s64 + 1616;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,5
	r11.s64 = 5;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r11,12
	r11.s64 = 12;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146720:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28088
	r31.s64 = r11.s64 + 28088;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31208
	r30.s64 = r11.s64 + -31208;
	// bne cr6,0x82146764
	if (!cr6.getEQ()) goto loc_82146764;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,20752
	ctx.r3.s64 = ctx.r1.s64 + 20752;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,20752
	ctx.r3.s64 = ctx.r1.s64 + 20752;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146764:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821467b0
	if (!cr6.getEQ()) goto loc_821467B0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,2032
	ctx.r3.s64 = ctx.r1.s64 + 2032;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,2032
	ctx.r3.s64 = ctx.r1.s64 + 2032;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,5
	r11.s64 = 5;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r11,28
	r11.s64 = 28;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_821467B0:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,29544
	r31.s64 = r11.s64 + 29544;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31224
	r30.s64 = r11.s64 + -31224;
	// bne cr6,0x821467f4
	if (!cr6.getEQ()) goto loc_821467F4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,30320
	ctx.r3.s64 = ctx.r1.s64 + 30320;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,30320
	ctx.r3.s64 = ctx.r1.s64 + 30320;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821467F4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146840
	if (!cr6.getEQ()) goto loc_82146840;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,2448
	ctx.r3.s64 = ctx.r1.s64 + 2448;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,2448
	ctx.r3.s64 = ctx.r1.s64 + 2448;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,6
	r11.s64 = 6;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r11,20
	r11.s64 = 20;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146840:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28024
	r31.s64 = r11.s64 + 28024;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31240
	r30.s64 = r11.s64 + -31240;
	// bne cr6,0x82146884
	if (!cr6.getEQ()) goto loc_82146884;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,21168
	ctx.r3.s64 = ctx.r1.s64 + 21168;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,21168
	ctx.r3.s64 = ctx.r1.s64 + 21168;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146884:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821468d0
	if (!cr6.getEQ()) goto loc_821468D0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,2864
	ctx.r3.s64 = ctx.r1.s64 + 2864;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,2864
	ctx.r3.s64 = ctx.r1.s64 + 2864;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,6
	r11.s64 = 6;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r11,24
	r11.s64 = 24;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_821468D0:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,26488
	r31.s64 = r11.s64 + 26488;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31256
	r30.s64 = r11.s64 + -31256;
	// bne cr6,0x82146924
	if (!cr6.getEQ()) goto loc_82146924;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,37392
	r12.u64 = r12.u64 | 37392;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,37392
	r12.u64 = r12.u64 | 37392;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146924:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146970
	if (!cr6.getEQ()) goto loc_82146970;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,3280
	ctx.r3.s64 = ctx.r1.s64 + 3280;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,3280
	ctx.r3.s64 = ctx.r1.s64 + 3280;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,8
	r11.s64 = 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r11,21
	r11.s64 = 21;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146970:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28136
	r31.s64 = r11.s64 + 28136;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31272
	r30.s64 = r11.s64 + -31272;
	// bne cr6,0x821469b4
	if (!cr6.getEQ()) goto loc_821469B4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,21584
	ctx.r3.s64 = ctx.r1.s64 + 21584;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,21584
	ctx.r3.s64 = ctx.r1.s64 + 21584;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821469B4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146a00
	if (!cr6.getEQ()) goto loc_82146A00;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,3696
	ctx.r3.s64 = ctx.r1.s64 + 3696;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,3696
	ctx.r3.s64 = ctx.r1.s64 + 3696;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,7
	r11.s64 = 7;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r11,22
	r11.s64 = 22;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146A00:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28952
	r31.s64 = r11.s64 + 28952;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31288
	r30.s64 = r11.s64 + -31288;
	// bne cr6,0x82146a44
	if (!cr6.getEQ()) goto loc_82146A44;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,30736
	ctx.r3.s64 = ctx.r1.s64 + 30736;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,30736
	ctx.r3.s64 = ctx.r1.s64 + 30736;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146A44:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146a8c
	if (!cr6.getEQ()) goto loc_82146A8C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,4112
	ctx.r3.s64 = ctx.r1.s64 + 4112;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,4112
	ctx.r3.s64 = ctx.r1.s64 + 4112;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,14
	r11.s64 = 14;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146A8C:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28056
	r31.s64 = r11.s64 + 28056;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31304
	r30.s64 = r11.s64 + -31304;
	// bne cr6,0x82146ad0
	if (!cr6.getEQ()) goto loc_82146AD0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,22000
	ctx.r3.s64 = ctx.r1.s64 + 22000;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,22000
	ctx.r3.s64 = ctx.r1.s64 + 22000;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146AD0:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146b1c
	if (!cr6.getEQ()) goto loc_82146B1C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,4528
	ctx.r3.s64 = ctx.r1.s64 + 4528;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,4528
	ctx.r3.s64 = ctx.r1.s64 + 4528;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,14
	r11.s64 = 14;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r11,18
	r11.s64 = 18;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146B1C:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,26472
	r31.s64 = r11.s64 + 26472;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31320
	r30.s64 = r11.s64 + -31320;
	// bne cr6,0x82146b70
	if (!cr6.getEQ()) goto loc_82146B70;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,35312
	r12.u64 = r12.u64 | 35312;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,35312
	r12.u64 = r12.u64 | 35312;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146B70:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146bbc
	if (!cr6.getEQ()) goto loc_82146BBC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,4944
	ctx.r3.s64 = ctx.r1.s64 + 4944;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,4944
	ctx.r3.s64 = ctx.r1.s64 + 4944;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,5
	r11.s64 = 5;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r11,15
	r11.s64 = 15;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146BBC:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28168
	r31.s64 = r11.s64 + 28168;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31336
	r30.s64 = r11.s64 + -31336;
	// bne cr6,0x82146c00
	if (!cr6.getEQ()) goto loc_82146C00;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,22416
	ctx.r3.s64 = ctx.r1.s64 + 22416;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,22416
	ctx.r3.s64 = ctx.r1.s64 + 22416;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146C00:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146c4c
	if (!cr6.getEQ()) goto loc_82146C4C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,5360
	ctx.r3.s64 = ctx.r1.s64 + 5360;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,5360
	ctx.r3.s64 = ctx.r1.s64 + 5360;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,5
	r11.s64 = 5;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r11,12
	r11.s64 = 12;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146C4C:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,26504
	r31.s64 = r11.s64 + 26504;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31352
	r30.s64 = r11.s64 + -31352;
	// bne cr6,0x82146c90
	if (!cr6.getEQ()) goto loc_82146C90;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,31152
	ctx.r3.s64 = ctx.r1.s64 + 31152;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,31152
	ctx.r3.s64 = ctx.r1.s64 + 31152;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146C90:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146cd8
	if (!cr6.getEQ()) goto loc_82146CD8;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,5776
	ctx.r3.s64 = ctx.r1.s64 + 5776;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,5776
	ctx.r3.s64 = ctx.r1.s64 + 5776;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,14
	r11.s64 = 14;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146CD8:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,27416
	r31.s64 = r11.s64 + 27416;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31372
	r30.s64 = r11.s64 + -31372;
	// bne cr6,0x82146d1c
	if (!cr6.getEQ()) goto loc_82146D1C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,22832
	ctx.r3.s64 = ctx.r1.s64 + 22832;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,22832
	ctx.r3.s64 = ctx.r1.s64 + 22832;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146D1C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146d64
	if (!cr6.getEQ()) goto loc_82146D64;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,6192
	ctx.r3.s64 = ctx.r1.s64 + 6192;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,6192
	ctx.r3.s64 = ctx.r1.s64 + 6192;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,14
	r11.s64 = 14;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146D64:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,26600
	r31.s64 = r11.s64 + 26600;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31392
	r30.s64 = r11.s64 + -31392;
	// bne cr6,0x82146db8
	if (!cr6.getEQ()) goto loc_82146DB8;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,38640
	r12.u64 = r12.u64 | 38640;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,38640
	r12.u64 = r12.u64 | 38640;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146DB8:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146e00
	if (!cr6.getEQ()) goto loc_82146E00;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,6608
	ctx.r3.s64 = ctx.r1.s64 + 6608;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,6608
	ctx.r3.s64 = ctx.r1.s64 + 6608;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,14
	r11.s64 = 14;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146E00:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28152
	r31.s64 = r11.s64 + 28152;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31412
	r30.s64 = r11.s64 + -31412;
	// bne cr6,0x82146e44
	if (!cr6.getEQ()) goto loc_82146E44;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,23248
	ctx.r3.s64 = ctx.r1.s64 + 23248;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,23248
	ctx.r3.s64 = ctx.r1.s64 + 23248;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146E44:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146e90
	if (!cr6.getEQ()) goto loc_82146E90;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,7024
	ctx.r3.s64 = ctx.r1.s64 + 7024;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,7024
	ctx.r3.s64 = ctx.r1.s64 + 7024;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,7
	r11.s64 = 7;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r11,22
	r11.s64 = 22;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_82146E90:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,27432
	r31.s64 = r11.s64 + 27432;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31420
	r30.s64 = r11.s64 + -31420;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r25,r11,24652
	r25.s64 = r11.s64 + 24652;
	// bne cr6,0x82146edc
	if (!cr6.getEQ()) goto loc_82146EDC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,31568
	ctx.r3.s64 = ctx.r1.s64 + 31568;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,31568
	ctx.r3.s64 = ctx.r1.s64 + 31568;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146EDC:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146f44
	if (!cr6.getEQ()) goto loc_82146F44;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,7440
	ctx.r3.s64 = ctx.r1.s64 + 7440;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,7440
	ctx.r3.s64 = ctx.r1.s64 + 7440;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82146f2c
	if (cr6.getEQ()) goto loc_82146F2C;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x82146f3c
	goto loc_82146F3C;
loc_82146F2C:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_82146F3C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_82146F44:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,29576
	r31.s64 = r11.s64 + 29576;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31428
	r30.s64 = r11.s64 + -31428;
	// bne cr6,0x82146f88
	if (!cr6.getEQ()) goto loc_82146F88;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,23664
	ctx.r3.s64 = ctx.r1.s64 + 23664;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,23664
	ctx.r3.s64 = ctx.r1.s64 + 23664;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82146F88:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82146ff0
	if (!cr6.getEQ()) goto loc_82146FF0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,7856
	ctx.r3.s64 = ctx.r1.s64 + 7856;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,7856
	ctx.r3.s64 = ctx.r1.s64 + 7856;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82146fd8
	if (cr6.getEQ()) goto loc_82146FD8;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x82146fe8
	goto loc_82146FE8;
loc_82146FD8:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_82146FE8:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_82146FF0:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r29,0
	r29.s64 = 0;
	// addi r28,r11,28968
	r28.s64 = r11.s64 + 28968;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r31,r28,4
	r31.s64 = r28.s64 + 4;
	// addi r27,r11,-31440
	r27.s64 = r11.s64 + -31440;
loc_82147008:
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// li r4,20
	ctx.r4.s64 = 20;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147060
	if (!cr6.getEQ()) goto loc_82147060;
	// addi r7,r1,304
	ctx.r7.s64 = ctx.r1.s64 + 304;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,35728
	r12.u64 = r12.u64 | 35728;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,35728
	r12.u64 = r12.u64 | 35728;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147060:
	// lwz r11,-4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -4);
	// addi r30,r31,-4
	r30.s64 = r31.s64 + -4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821470d0
	if (!cr6.getEQ()) goto loc_821470D0;
	// addi r7,r1,304
	ctx.r7.s64 = ctx.r1.s64 + 304;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,8272
	ctx.r3.s64 = ctx.r1.s64 + 8272;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,8272
	ctx.r3.s64 = ctx.r1.s64 + 8272;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821470b4
	if (cr6.getEQ()) goto loc_821470B4;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// b 0x821470c4
	goto loc_821470C4;
loc_821470B4:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
loc_821470C4:
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
loc_821470D0:
	// addi r31,r31,16
	r31.s64 = r31.s64 + 16;
	// addi r11,r28,484
	r11.s64 = r28.s64 + 484;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x82147008
	if (cr6.getLT()) goto loc_82147008;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28936
	r31.s64 = r11.s64 + 28936;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r30,r11,13672
	r30.s64 = r11.s64 + 13672;
	// bne cr6,0x82147128
	if (!cr6.getEQ()) goto loc_82147128;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,24080
	ctx.r3.s64 = ctx.r1.s64 + 24080;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,24080
	ctx.r3.s64 = ctx.r1.s64 + 24080;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147128:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147190
	if (!cr6.getEQ()) goto loc_82147190;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,8688
	ctx.r3.s64 = ctx.r1.s64 + 8688;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,8688
	ctx.r3.s64 = ctx.r1.s64 + 8688;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147178
	if (cr6.getEQ()) goto loc_82147178;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x82147188
	goto loc_82147188;
loc_82147178:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_82147188:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_82147190:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,26536
	r31.s64 = r11.s64 + 26536;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31448
	r30.s64 = r11.s64 + -31448;
	// bne cr6,0x821471d4
	if (!cr6.getEQ()) goto loc_821471D4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,31984
	ctx.r3.s64 = ctx.r1.s64 + 31984;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,31984
	ctx.r3.s64 = ctx.r1.s64 + 31984;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821471D4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214723c
	if (!cr6.getEQ()) goto loc_8214723C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,9104
	ctx.r3.s64 = ctx.r1.s64 + 9104;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,9104
	ctx.r3.s64 = ctx.r1.s64 + 9104;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147224
	if (cr6.getEQ()) goto loc_82147224;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x82147234
	goto loc_82147234;
loc_82147224:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_82147234:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_8214723C:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28072
	r31.s64 = r11.s64 + 28072;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31460
	r30.s64 = r11.s64 + -31460;
	// bne cr6,0x82147280
	if (!cr6.getEQ()) goto loc_82147280;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,24496
	ctx.r3.s64 = ctx.r1.s64 + 24496;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,24496
	ctx.r3.s64 = ctx.r1.s64 + 24496;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147280:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821472e8
	if (!cr6.getEQ()) goto loc_821472E8;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,9520
	ctx.r3.s64 = ctx.r1.s64 + 9520;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,9520
	ctx.r3.s64 = ctx.r1.s64 + 9520;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821472d0
	if (cr6.getEQ()) goto loc_821472D0;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x821472e0
	goto loc_821472E0;
loc_821472D0:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_821472E0:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_821472E8:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,27928
	r31.s64 = r11.s64 + 27928;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31468
	r30.s64 = r11.s64 + -31468;
	// bne cr6,0x8214733c
	if (!cr6.getEQ()) goto loc_8214733C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,37808
	r12.u64 = r12.u64 | 37808;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,37808
	r12.u64 = r12.u64 | 37808;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_8214733C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821473a4
	if (!cr6.getEQ()) goto loc_821473A4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,9936
	ctx.r3.s64 = ctx.r1.s64 + 9936;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,9936
	ctx.r3.s64 = ctx.r1.s64 + 9936;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214738c
	if (cr6.getEQ()) goto loc_8214738C;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x8214739c
	goto loc_8214739C;
loc_8214738C:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_8214739C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_821473A4:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31476
	r30.s64 = r11.s64 + -31476;
	// bne cr6,0x821473e0
	if (!cr6.getEQ()) goto loc_821473E0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,24912
	ctx.r3.s64 = ctx.r1.s64 + 24912;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,24912
	ctx.r3.s64 = ctx.r1.s64 + 24912;
	// addi r5,r31,20
	ctx.r5.s64 = r31.s64 + 20;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821473E0:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147448
	if (!cr6.getEQ()) goto loc_82147448;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,10352
	ctx.r3.s64 = ctx.r1.s64 + 10352;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,10352
	ctx.r3.s64 = ctx.r1.s64 + 10352;
	// addi r5,r31,16
	ctx.r5.s64 = r31.s64 + 16;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147430
	if (cr6.getEQ()) goto loc_82147430;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// b 0x82147440
	goto loc_82147440;
loc_82147430:
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
loc_82147440:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r3.u32);
loc_82147448:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31484
	r30.s64 = r11.s64 + -31484;
	// bne cr6,0x82147484
	if (!cr6.getEQ()) goto loc_82147484;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,32400
	ctx.r3.s64 = ctx.r1.s64 + 32400;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,32400
	ctx.r3.s64 = ctx.r1.s64 + 32400;
	// addi r5,r31,36
	ctx.r5.s64 = r31.s64 + 36;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147484:
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821474ec
	if (!cr6.getEQ()) goto loc_821474EC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,10768
	ctx.r3.s64 = ctx.r1.s64 + 10768;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,10768
	ctx.r3.s64 = ctx.r1.s64 + 10768;
	// addi r5,r31,32
	ctx.r5.s64 = r31.s64 + 32;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821474d4
	if (cr6.getEQ()) goto loc_821474D4;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r3.u32);
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// b 0x821474e4
	goto loc_821474E4;
loc_821474D4:
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r3.u32);
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
loc_821474E4:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,44(r31)
	PPC_STORE_U32(r31.u32 + 44, ctx.r3.u32);
loc_821474EC:
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31492
	r30.s64 = r11.s64 + -31492;
	// bne cr6,0x82147528
	if (!cr6.getEQ()) goto loc_82147528;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,25328
	ctx.r3.s64 = ctx.r1.s64 + 25328;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,25328
	ctx.r3.s64 = ctx.r1.s64 + 25328;
	// addi r5,r31,52
	ctx.r5.s64 = r31.s64 + 52;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147528:
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147590
	if (!cr6.getEQ()) goto loc_82147590;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,11184
	ctx.r3.s64 = ctx.r1.s64 + 11184;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,11184
	ctx.r3.s64 = ctx.r1.s64 + 11184;
	// addi r5,r31,48
	ctx.r5.s64 = r31.s64 + 48;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,48(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147578
	if (cr6.getEQ()) goto loc_82147578;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,56(r31)
	PPC_STORE_U32(r31.u32 + 56, ctx.r3.u32);
	// lwz r3,48(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// b 0x82147588
	goto loc_82147588;
loc_82147578:
	// lwz r3,52(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,56(r31)
	PPC_STORE_U32(r31.u32 + 56, ctx.r3.u32);
	// lwz r3,52(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 52);
loc_82147588:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,60(r31)
	PPC_STORE_U32(r31.u32 + 60, ctx.r3.u32);
loc_82147590:
	// lwz r11,68(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31500
	r30.s64 = r11.s64 + -31500;
	// bne cr6,0x821475dc
	if (!cr6.getEQ()) goto loc_821475DC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,36144
	r12.u64 = r12.u64 | 36144;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,36144
	r12.u64 = r12.u64 | 36144;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,68
	ctx.r5.s64 = r31.s64 + 68;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821475DC:
	// lwz r11,64(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147644
	if (!cr6.getEQ()) goto loc_82147644;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,11600
	ctx.r3.s64 = ctx.r1.s64 + 11600;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,11600
	ctx.r3.s64 = ctx.r1.s64 + 11600;
	// addi r5,r31,64
	ctx.r5.s64 = r31.s64 + 64;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,64(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214762c
	if (cr6.getEQ()) goto loc_8214762C;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,72(r31)
	PPC_STORE_U32(r31.u32 + 72, ctx.r3.u32);
	// lwz r3,64(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// b 0x8214763c
	goto loc_8214763C;
loc_8214762C:
	// lwz r3,68(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,72(r31)
	PPC_STORE_U32(r31.u32 + 72, ctx.r3.u32);
	// lwz r3,68(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 68);
loc_8214763C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,76(r31)
	PPC_STORE_U32(r31.u32 + 76, ctx.r3.u32);
loc_82147644:
	// lwz r11,84(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31508
	r30.s64 = r11.s64 + -31508;
	// bne cr6,0x82147680
	if (!cr6.getEQ()) goto loc_82147680;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,25744
	ctx.r3.s64 = ctx.r1.s64 + 25744;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,25744
	ctx.r3.s64 = ctx.r1.s64 + 25744;
	// addi r5,r31,84
	ctx.r5.s64 = r31.s64 + 84;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147680:
	// lwz r11,80(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821476e8
	if (!cr6.getEQ()) goto loc_821476E8;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,12016
	ctx.r3.s64 = ctx.r1.s64 + 12016;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,12016
	ctx.r3.s64 = ctx.r1.s64 + 12016;
	// addi r5,r31,80
	ctx.r5.s64 = r31.s64 + 80;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821476d0
	if (cr6.getEQ()) goto loc_821476D0;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,88(r31)
	PPC_STORE_U32(r31.u32 + 88, ctx.r3.u32);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// b 0x821476e0
	goto loc_821476E0;
loc_821476D0:
	// lwz r3,84(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,88(r31)
	PPC_STORE_U32(r31.u32 + 88, ctx.r3.u32);
	// lwz r3,84(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 84);
loc_821476E0:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r3.u32);
loc_821476E8:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,29448
	r31.s64 = r11.s64 + 29448;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31520
	r30.s64 = r11.s64 + -31520;
	// bne cr6,0x8214773c
	if (!cr6.getEQ()) goto loc_8214773C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,32816
	r12.u64 = r12.u64 | 32816;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,32816
	r12.u64 = r12.u64 | 32816;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_8214773C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821477a4
	if (!cr6.getEQ()) goto loc_821477A4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,12432
	ctx.r3.s64 = ctx.r1.s64 + 12432;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,12432
	ctx.r3.s64 = ctx.r1.s64 + 12432;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214778c
	if (cr6.getEQ()) goto loc_8214778C;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x8214779c
	goto loc_8214779C;
loc_8214778C:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_8214779C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_821477A4:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,29464
	r31.s64 = r11.s64 + 29464;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31532
	r30.s64 = r11.s64 + -31532;
	// bne cr6,0x821477e8
	if (!cr6.getEQ()) goto loc_821477E8;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,26160
	ctx.r3.s64 = ctx.r1.s64 + 26160;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,26160
	ctx.r3.s64 = ctx.r1.s64 + 26160;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821477E8:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147850
	if (!cr6.getEQ()) goto loc_82147850;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,12848
	ctx.r3.s64 = ctx.r1.s64 + 12848;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,12848
	ctx.r3.s64 = ctx.r1.s64 + 12848;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147838
	if (cr6.getEQ()) goto loc_82147838;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x82147848
	goto loc_82147848;
loc_82147838:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_82147848:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_82147850:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31544
	r30.s64 = r11.s64 + -31544;
	// bne cr6,0x8214789c
	if (!cr6.getEQ()) goto loc_8214789C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,39472
	r12.u64 = r12.u64 | 39472;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,39472
	r12.u64 = r12.u64 | 39472;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,20
	ctx.r5.s64 = r31.s64 + 20;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_8214789C:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147904
	if (!cr6.getEQ()) goto loc_82147904;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,13264
	ctx.r3.s64 = ctx.r1.s64 + 13264;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,13264
	ctx.r3.s64 = ctx.r1.s64 + 13264;
	// addi r5,r31,16
	ctx.r5.s64 = r31.s64 + 16;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821478ec
	if (cr6.getEQ()) goto loc_821478EC;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// b 0x821478fc
	goto loc_821478FC;
loc_821478EC:
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
loc_821478FC:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r3.u32);
loc_82147904:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31556
	r30.s64 = r11.s64 + -31556;
	// bne cr6,0x82147940
	if (!cr6.getEQ()) goto loc_82147940;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,26576
	ctx.r3.s64 = ctx.r1.s64 + 26576;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,26576
	ctx.r3.s64 = ctx.r1.s64 + 26576;
	// addi r5,r31,36
	ctx.r5.s64 = r31.s64 + 36;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147940:
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821479a8
	if (!cr6.getEQ()) goto loc_821479A8;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,13680
	ctx.r3.s64 = ctx.r1.s64 + 13680;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,13680
	ctx.r3.s64 = ctx.r1.s64 + 13680;
	// addi r5,r31,32
	ctx.r5.s64 = r31.s64 + 32;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147990
	if (cr6.getEQ()) goto loc_82147990;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r3.u32);
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// b 0x821479a0
	goto loc_821479A0;
loc_82147990:
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r3.u32);
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
loc_821479A0:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,44(r31)
	PPC_STORE_U32(r31.u32 + 44, ctx.r3.u32);
loc_821479A8:
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31568
	r30.s64 = r11.s64 + -31568;
	// bne cr6,0x821479f4
	if (!cr6.getEQ()) goto loc_821479F4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,33232
	r12.u64 = r12.u64 | 33232;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,33232
	r12.u64 = r12.u64 | 33232;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,52
	ctx.r5.s64 = r31.s64 + 52;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821479F4:
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147a5c
	if (!cr6.getEQ()) goto loc_82147A5C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,14096
	ctx.r3.s64 = ctx.r1.s64 + 14096;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,14096
	ctx.r3.s64 = ctx.r1.s64 + 14096;
	// addi r5,r31,48
	ctx.r5.s64 = r31.s64 + 48;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,48(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147a44
	if (cr6.getEQ()) goto loc_82147A44;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,56(r31)
	PPC_STORE_U32(r31.u32 + 56, ctx.r3.u32);
	// lwz r3,48(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// b 0x82147a54
	goto loc_82147A54;
loc_82147A44:
	// lwz r3,52(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,56(r31)
	PPC_STORE_U32(r31.u32 + 56, ctx.r3.u32);
	// lwz r3,52(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 52);
loc_82147A54:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,60(r31)
	PPC_STORE_U32(r31.u32 + 60, ctx.r3.u32);
loc_82147A5C:
	// lwz r11,68(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31580
	r30.s64 = r11.s64 + -31580;
	// bne cr6,0x82147a98
	if (!cr6.getEQ()) goto loc_82147A98;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,26992
	ctx.r3.s64 = ctx.r1.s64 + 26992;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,26992
	ctx.r3.s64 = ctx.r1.s64 + 26992;
	// addi r5,r31,68
	ctx.r5.s64 = r31.s64 + 68;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147A98:
	// lwz r11,64(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147b00
	if (!cr6.getEQ()) goto loc_82147B00;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,14512
	ctx.r3.s64 = ctx.r1.s64 + 14512;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,14512
	ctx.r3.s64 = ctx.r1.s64 + 14512;
	// addi r5,r31,64
	ctx.r5.s64 = r31.s64 + 64;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,64(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147ae8
	if (cr6.getEQ()) goto loc_82147AE8;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,72(r31)
	PPC_STORE_U32(r31.u32 + 72, ctx.r3.u32);
	// lwz r3,64(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// b 0x82147af8
	goto loc_82147AF8;
loc_82147AE8:
	// lwz r3,68(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,72(r31)
	PPC_STORE_U32(r31.u32 + 72, ctx.r3.u32);
	// lwz r3,68(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 68);
loc_82147AF8:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,76(r31)
	PPC_STORE_U32(r31.u32 + 76, ctx.r3.u32);
loc_82147B00:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28600
	r31.s64 = r11.s64 + 28600;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31588
	r30.s64 = r11.s64 + -31588;
	// bne cr6,0x82147b54
	if (!cr6.getEQ()) goto loc_82147B54;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,36560
	r12.u64 = r12.u64 | 36560;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,36560
	r12.u64 = r12.u64 | 36560;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147B54:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147bbc
	if (!cr6.getEQ()) goto loc_82147BBC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,14928
	ctx.r3.s64 = ctx.r1.s64 + 14928;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,14928
	ctx.r3.s64 = ctx.r1.s64 + 14928;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147ba4
	if (cr6.getEQ()) goto loc_82147BA4;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x82147bb4
	goto loc_82147BB4;
loc_82147BA4:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_82147BB4:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_82147BBC:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28104
	r31.s64 = r11.s64 + 28104;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31600
	r30.s64 = r11.s64 + -31600;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r11,-31612
	r29.s64 = r11.s64 + -31612;
	// bne cr6,0x82147c08
	if (!cr6.getEQ()) goto loc_82147C08;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,27408
	ctx.r3.s64 = ctx.r1.s64 + 27408;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,27408
	ctx.r3.s64 = ctx.r1.s64 + 27408;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147C08:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147c70
	if (!cr6.getEQ()) goto loc_82147C70;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,15344
	ctx.r3.s64 = ctx.r1.s64 + 15344;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,15344
	ctx.r3.s64 = ctx.r1.s64 + 15344;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147c58
	if (cr6.getEQ()) goto loc_82147C58;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x82147c68
	goto loc_82147C68;
loc_82147C58:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_82147C68:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_82147C70:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31628
	r30.s64 = r11.s64 + -31628;
	// bne cr6,0x82147cbc
	if (!cr6.getEQ()) goto loc_82147CBC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,33648
	r12.u64 = r12.u64 | 33648;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,33648
	r12.u64 = r12.u64 | 33648;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,20
	ctx.r5.s64 = r31.s64 + 20;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147CBC:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147d24
	if (!cr6.getEQ()) goto loc_82147D24;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,15760
	ctx.r3.s64 = ctx.r1.s64 + 15760;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,15760
	ctx.r3.s64 = ctx.r1.s64 + 15760;
	// addi r5,r31,16
	ctx.r5.s64 = r31.s64 + 16;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147d0c
	if (cr6.getEQ()) goto loc_82147D0C;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// b 0x82147d1c
	goto loc_82147D1C;
loc_82147D0C:
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
loc_82147D1C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r3.u32);
loc_82147D24:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,29592
	r31.s64 = r11.s64 + 29592;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31636
	r30.s64 = r11.s64 + -31636;
	// bne cr6,0x82147d68
	if (!cr6.getEQ()) goto loc_82147D68;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,27824
	ctx.r3.s64 = ctx.r1.s64 + 27824;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,27824
	ctx.r3.s64 = ctx.r1.s64 + 27824;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147D68:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147dd0
	if (!cr6.getEQ()) goto loc_82147DD0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,16176
	ctx.r3.s64 = ctx.r1.s64 + 16176;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,16176
	ctx.r3.s64 = ctx.r1.s64 + 16176;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147db8
	if (cr6.getEQ()) goto loc_82147DB8;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x82147dc8
	goto loc_82147DC8;
loc_82147DB8:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_82147DC8:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_82147DD0:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,26520
	r31.s64 = r11.s64 + 26520;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31648
	r30.s64 = r11.s64 + -31648;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r26,r11,-31656
	r26.s64 = r11.s64 + -31656;
	// bne cr6,0x82147e2c
	if (!cr6.getEQ()) goto loc_82147E2C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,38224
	r12.u64 = r12.u64 | 38224;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,38224
	r12.u64 = r12.u64 | 38224;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147E2C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147e94
	if (!cr6.getEQ()) goto loc_82147E94;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,16592
	ctx.r3.s64 = ctx.r1.s64 + 16592;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,16592
	ctx.r3.s64 = ctx.r1.s64 + 16592;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147e7c
	if (cr6.getEQ()) goto loc_82147E7C;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x82147e8c
	goto loc_82147E8C;
loc_82147E7C:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_82147E8C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_82147E94:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,27448
	r31.s64 = r11.s64 + 27448;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31664
	r30.s64 = r11.s64 + -31664;
	// bne cr6,0x82147ed8
	if (!cr6.getEQ()) goto loc_82147ED8;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,28240
	ctx.r3.s64 = ctx.r1.s64 + 28240;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,28240
	ctx.r3.s64 = ctx.r1.s64 + 28240;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147ED8:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147f40
	if (!cr6.getEQ()) goto loc_82147F40;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,17008
	ctx.r3.s64 = ctx.r1.s64 + 17008;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,17008
	ctx.r3.s64 = ctx.r1.s64 + 17008;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147f28
	if (cr6.getEQ()) goto loc_82147F28;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x82147f38
	goto loc_82147F38;
loc_82147F28:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_82147F38:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_82147F40:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31672
	r30.s64 = r11.s64 + -31672;
	// bne cr6,0x82147f8c
	if (!cr6.getEQ()) goto loc_82147F8C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,34064
	r12.u64 = r12.u64 | 34064;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,34064
	r12.u64 = r12.u64 | 34064;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,20
	ctx.r5.s64 = r31.s64 + 20;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82147F8C:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82147ff4
	if (!cr6.getEQ()) goto loc_82147FF4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,17424
	ctx.r3.s64 = ctx.r1.s64 + 17424;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,17424
	ctx.r3.s64 = ctx.r1.s64 + 17424;
	// addi r5,r31,16
	ctx.r5.s64 = r31.s64 + 16;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82147fdc
	if (cr6.getEQ()) goto loc_82147FDC;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// b 0x82147fec
	goto loc_82147FEC;
loc_82147FDC:
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
loc_82147FEC:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r3.u32);
loc_82147FF4:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28616
	r31.s64 = r11.s64 + 28616;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r27,r11,-31684
	r27.s64 = r11.s64 + -31684;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r11,-31696
	r29.s64 = r11.s64 + -31696;
	// bne cr6,0x82148040
	if (!cr6.getEQ()) goto loc_82148040;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,28656
	ctx.r3.s64 = ctx.r1.s64 + 28656;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,28656
	ctx.r3.s64 = ctx.r1.s64 + 28656;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148040:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821480a8
	if (!cr6.getEQ()) goto loc_821480A8;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,17840
	ctx.r3.s64 = ctx.r1.s64 + 17840;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,17840
	ctx.r3.s64 = ctx.r1.s64 + 17840;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148090
	if (cr6.getEQ()) goto loc_82148090;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x821480a0
	goto loc_821480A0;
loc_82148090:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_821480A0:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_821480A8:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31708
	r30.s64 = r11.s64 + -31708;
	// bne cr6,0x821480f4
	if (!cr6.getEQ()) goto loc_821480F4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,36976
	r12.u64 = r12.u64 | 36976;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,36976
	r12.u64 = r12.u64 | 36976;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,20
	ctx.r5.s64 = r31.s64 + 20;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821480F4:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214815c
	if (!cr6.getEQ()) goto loc_8214815C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,18256
	ctx.r3.s64 = ctx.r1.s64 + 18256;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,18256
	ctx.r3.s64 = ctx.r1.s64 + 18256;
	// addi r5,r31,16
	ctx.r5.s64 = r31.s64 + 16;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148144
	if (cr6.getEQ()) goto loc_82148144;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// b 0x82148154
	goto loc_82148154;
loc_82148144:
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
loc_82148154:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r3.u32);
loc_8214815C:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r11,-31716
	r28.s64 = r11.s64 + -31716;
	// bne cr6,0x82148198
	if (!cr6.getEQ()) goto loc_82148198;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,29072
	ctx.r3.s64 = ctx.r1.s64 + 29072;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,29072
	ctx.r3.s64 = ctx.r1.s64 + 29072;
	// addi r5,r31,36
	ctx.r5.s64 = r31.s64 + 36;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148198:
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148200
	if (!cr6.getEQ()) goto loc_82148200;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,18672
	ctx.r3.s64 = ctx.r1.s64 + 18672;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,18672
	ctx.r3.s64 = ctx.r1.s64 + 18672;
	// addi r5,r31,32
	ctx.r5.s64 = r31.s64 + 32;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821481e8
	if (cr6.getEQ()) goto loc_821481E8;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r3.u32);
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// b 0x821481f8
	goto loc_821481F8;
loc_821481E8:
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r3.u32);
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
loc_821481F8:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,44(r31)
	PPC_STORE_U32(r31.u32 + 44, ctx.r3.u32);
loc_82148200:
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31736
	r30.s64 = r11.s64 + -31736;
	// bne cr6,0x8214824c
	if (!cr6.getEQ()) goto loc_8214824C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,34480
	r12.u64 = r12.u64 | 34480;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,34480
	r12.u64 = r12.u64 | 34480;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,52
	ctx.r5.s64 = r31.s64 + 52;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_8214824C:
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821482b4
	if (!cr6.getEQ()) goto loc_821482B4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,19088
	ctx.r3.s64 = ctx.r1.s64 + 19088;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,19088
	ctx.r3.s64 = ctx.r1.s64 + 19088;
	// addi r5,r31,48
	ctx.r5.s64 = r31.s64 + 48;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,48(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214829c
	if (cr6.getEQ()) goto loc_8214829C;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,56(r31)
	PPC_STORE_U32(r31.u32 + 56, ctx.r3.u32);
	// lwz r3,48(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// b 0x821482ac
	goto loc_821482AC;
loc_8214829C:
	// lwz r3,52(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,56(r31)
	PPC_STORE_U32(r31.u32 + 56, ctx.r3.u32);
	// lwz r3,52(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 52);
loc_821482AC:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,60(r31)
	PPC_STORE_U32(r31.u32 + 60, ctx.r3.u32);
loc_821482B4:
	// lwz r11,68(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821482e8
	if (!cr6.getEQ()) goto loc_821482E8;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,29488
	ctx.r3.s64 = ctx.r1.s64 + 29488;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,29488
	ctx.r3.s64 = ctx.r1.s64 + 29488;
	// addi r5,r31,68
	ctx.r5.s64 = r31.s64 + 68;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821482E8:
	// lwz r11,64(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148350
	if (!cr6.getEQ()) goto loc_82148350;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,368
	ctx.r3.s64 = ctx.r1.s64 + 368;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,368
	ctx.r3.s64 = ctx.r1.s64 + 368;
	// addi r5,r31,64
	ctx.r5.s64 = r31.s64 + 64;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,64(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148338
	if (cr6.getEQ()) goto loc_82148338;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,72(r31)
	PPC_STORE_U32(r31.u32 + 72, ctx.r3.u32);
	// lwz r3,64(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// b 0x82148348
	goto loc_82148348;
loc_82148338:
	// lwz r3,68(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,72(r31)
	PPC_STORE_U32(r31.u32 + 72, ctx.r3.u32);
	// lwz r3,68(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 68);
loc_82148348:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,76(r31)
	PPC_STORE_U32(r31.u32 + 76, ctx.r3.u32);
loc_82148350:
	// lwz r11,84(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148394
	if (!cr6.getEQ()) goto loc_82148394;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,39056
	r12.u64 = r12.u64 | 39056;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,39056
	r12.u64 = r12.u64 | 39056;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,84
	ctx.r5.s64 = r31.s64 + 84;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148394:
	// lwz r11,80(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821483fc
	if (!cr6.getEQ()) goto loc_821483FC;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,19920
	ctx.r3.s64 = ctx.r1.s64 + 19920;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,19920
	ctx.r3.s64 = ctx.r1.s64 + 19920;
	// addi r5,r31,80
	ctx.r5.s64 = r31.s64 + 80;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821483e4
	if (cr6.getEQ()) goto loc_821483E4;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,88(r31)
	PPC_STORE_U32(r31.u32 + 88, ctx.r3.u32);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// b 0x821483f4
	goto loc_821483F4;
loc_821483E4:
	// lwz r3,84(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,88(r31)
	PPC_STORE_U32(r31.u32 + 88, ctx.r3.u32);
	// lwz r3,84(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 84);
loc_821483F4:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r3.u32);
loc_821483FC:
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148430
	if (!cr6.getEQ()) goto loc_82148430;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,29904
	ctx.r3.s64 = ctx.r1.s64 + 29904;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,29904
	ctx.r3.s64 = ctx.r1.s64 + 29904;
	// addi r5,r31,100
	ctx.r5.s64 = r31.s64 + 100;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148430:
	// lwz r11,96(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 96);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148498
	if (!cr6.getEQ()) goto loc_82148498;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,576
	ctx.r3.s64 = ctx.r1.s64 + 576;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,576
	ctx.r3.s64 = ctx.r1.s64 + 576;
	// addi r5,r31,96
	ctx.r5.s64 = r31.s64 + 96;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,96(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 96);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148480
	if (cr6.getEQ()) goto loc_82148480;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,104(r31)
	PPC_STORE_U32(r31.u32 + 104, ctx.r3.u32);
	// lwz r3,96(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 96);
	// b 0x82148490
	goto loc_82148490;
loc_82148480:
	// lwz r3,100(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,104(r31)
	PPC_STORE_U32(r31.u32 + 104, ctx.r3.u32);
	// lwz r3,100(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 100);
loc_82148490:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,108(r31)
	PPC_STORE_U32(r31.u32 + 108, ctx.r3.u32);
loc_82148498:
	// lwz r11,116(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31748
	r30.s64 = r11.s64 + -31748;
	// bne cr6,0x821484d4
	if (!cr6.getEQ()) goto loc_821484D4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,992
	ctx.r3.s64 = ctx.r1.s64 + 992;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,992
	ctx.r3.s64 = ctx.r1.s64 + 992;
	// addi r5,r31,116
	ctx.r5.s64 = r31.s64 + 116;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821484D4:
	// lwz r11,112(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214853c
	if (!cr6.getEQ()) goto loc_8214853C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,1408
	ctx.r3.s64 = ctx.r1.s64 + 1408;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,1408
	ctx.r3.s64 = ctx.r1.s64 + 1408;
	// addi r5,r31,112
	ctx.r5.s64 = r31.s64 + 112;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,112(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148524
	if (cr6.getEQ()) goto loc_82148524;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,120(r31)
	PPC_STORE_U32(r31.u32 + 120, ctx.r3.u32);
	// lwz r3,112(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// b 0x82148534
	goto loc_82148534;
loc_82148524:
	// lwz r3,116(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,120(r31)
	PPC_STORE_U32(r31.u32 + 120, ctx.r3.u32);
	// lwz r3,116(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 116);
loc_82148534:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,124(r31)
	PPC_STORE_U32(r31.u32 + 124, ctx.r3.u32);
loc_8214853C:
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31772
	r30.s64 = r11.s64 + -31772;
	// bne cr6,0x82148578
	if (!cr6.getEQ()) goto loc_82148578;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,1824
	ctx.r3.s64 = ctx.r1.s64 + 1824;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,1824
	ctx.r3.s64 = ctx.r1.s64 + 1824;
	// addi r5,r31,132
	ctx.r5.s64 = r31.s64 + 132;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148578:
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821485e0
	if (!cr6.getEQ()) goto loc_821485E0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,2240
	ctx.r3.s64 = ctx.r1.s64 + 2240;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,2240
	ctx.r3.s64 = ctx.r1.s64 + 2240;
	// addi r5,r31,128
	ctx.r5.s64 = r31.s64 + 128;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821485c8
	if (cr6.getEQ()) goto loc_821485C8;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,136(r31)
	PPC_STORE_U32(r31.u32 + 136, ctx.r3.u32);
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// b 0x821485d8
	goto loc_821485D8;
loc_821485C8:
	// lwz r3,132(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,136(r31)
	PPC_STORE_U32(r31.u32 + 136, ctx.r3.u32);
	// lwz r3,132(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 132);
loc_821485D8:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,140(r31)
	PPC_STORE_U32(r31.u32 + 140, ctx.r3.u32);
loc_821485E0:
	// lwz r11,148(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 148);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31784
	r30.s64 = r11.s64 + -31784;
	// bne cr6,0x8214861c
	if (!cr6.getEQ()) goto loc_8214861C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,2656
	ctx.r3.s64 = ctx.r1.s64 + 2656;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,2656
	ctx.r3.s64 = ctx.r1.s64 + 2656;
	// addi r5,r31,148
	ctx.r5.s64 = r31.s64 + 148;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_8214861C:
	// lwz r11,144(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 144);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148684
	if (!cr6.getEQ()) goto loc_82148684;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,3072
	ctx.r3.s64 = ctx.r1.s64 + 3072;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,3072
	ctx.r3.s64 = ctx.r1.s64 + 3072;
	// addi r5,r31,144
	ctx.r5.s64 = r31.s64 + 144;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,144(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 144);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214866c
	if (cr6.getEQ()) goto loc_8214866C;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,152(r31)
	PPC_STORE_U32(r31.u32 + 152, ctx.r3.u32);
	// lwz r3,144(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 144);
	// b 0x8214867c
	goto loc_8214867C;
loc_8214866C:
	// lwz r3,148(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 148);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,152(r31)
	PPC_STORE_U32(r31.u32 + 152, ctx.r3.u32);
	// lwz r3,148(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 148);
loc_8214867C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,156(r31)
	PPC_STORE_U32(r31.u32 + 156, ctx.r3.u32);
loc_82148684:
	// lwz r11,164(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31796
	r30.s64 = r11.s64 + -31796;
	// bne cr6,0x821486c0
	if (!cr6.getEQ()) goto loc_821486C0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,3488
	ctx.r3.s64 = ctx.r1.s64 + 3488;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,3488
	ctx.r3.s64 = ctx.r1.s64 + 3488;
	// addi r5,r31,164
	ctx.r5.s64 = r31.s64 + 164;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821486C0:
	// lwz r11,160(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 160);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148728
	if (!cr6.getEQ()) goto loc_82148728;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,3904
	ctx.r3.s64 = ctx.r1.s64 + 3904;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,3904
	ctx.r3.s64 = ctx.r1.s64 + 3904;
	// addi r5,r31,160
	ctx.r5.s64 = r31.s64 + 160;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,160(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 160);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148710
	if (cr6.getEQ()) goto loc_82148710;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,168(r31)
	PPC_STORE_U32(r31.u32 + 168, ctx.r3.u32);
	// lwz r3,160(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 160);
	// b 0x82148720
	goto loc_82148720;
loc_82148710:
	// lwz r3,164(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,168(r31)
	PPC_STORE_U32(r31.u32 + 168, ctx.r3.u32);
	// lwz r3,164(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 164);
loc_82148720:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,172(r31)
	PPC_STORE_U32(r31.u32 + 172, ctx.r3.u32);
loc_82148728:
	// lwz r11,180(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31808
	r30.s64 = r11.s64 + -31808;
	// bne cr6,0x82148764
	if (!cr6.getEQ()) goto loc_82148764;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,4320
	ctx.r3.s64 = ctx.r1.s64 + 4320;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,4320
	ctx.r3.s64 = ctx.r1.s64 + 4320;
	// addi r5,r31,180
	ctx.r5.s64 = r31.s64 + 180;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148764:
	// lwz r11,176(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821487cc
	if (!cr6.getEQ()) goto loc_821487CC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,4736
	ctx.r3.s64 = ctx.r1.s64 + 4736;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,4736
	ctx.r3.s64 = ctx.r1.s64 + 4736;
	// addi r5,r31,176
	ctx.r5.s64 = r31.s64 + 176;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,176(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821487b4
	if (cr6.getEQ()) goto loc_821487B4;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,184(r31)
	PPC_STORE_U32(r31.u32 + 184, ctx.r3.u32);
	// lwz r3,176(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// b 0x821487c4
	goto loc_821487C4;
loc_821487B4:
	// lwz r3,180(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,184(r31)
	PPC_STORE_U32(r31.u32 + 184, ctx.r3.u32);
	// lwz r3,180(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 180);
loc_821487C4:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,188(r31)
	PPC_STORE_U32(r31.u32 + 188, ctx.r3.u32);
loc_821487CC:
	// lwz r11,196(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31820
	r30.s64 = r11.s64 + -31820;
	// bne cr6,0x82148808
	if (!cr6.getEQ()) goto loc_82148808;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,5152
	ctx.r3.s64 = ctx.r1.s64 + 5152;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,5152
	ctx.r3.s64 = ctx.r1.s64 + 5152;
	// addi r5,r31,196
	ctx.r5.s64 = r31.s64 + 196;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148808:
	// lwz r11,192(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148870
	if (!cr6.getEQ()) goto loc_82148870;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,5568
	ctx.r3.s64 = ctx.r1.s64 + 5568;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,5568
	ctx.r3.s64 = ctx.r1.s64 + 5568;
	// addi r5,r31,192
	ctx.r5.s64 = r31.s64 + 192;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,192(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148858
	if (cr6.getEQ()) goto loc_82148858;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,200(r31)
	PPC_STORE_U32(r31.u32 + 200, ctx.r3.u32);
	// lwz r3,192(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// b 0x82148868
	goto loc_82148868;
loc_82148858:
	// lwz r3,196(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,200(r31)
	PPC_STORE_U32(r31.u32 + 200, ctx.r3.u32);
	// lwz r3,196(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 196);
loc_82148868:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,204(r31)
	PPC_STORE_U32(r31.u32 + 204, ctx.r3.u32);
loc_82148870:
	// lwz r11,212(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 212);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31832
	r30.s64 = r11.s64 + -31832;
	// bne cr6,0x821488ac
	if (!cr6.getEQ()) goto loc_821488AC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,5984
	ctx.r3.s64 = ctx.r1.s64 + 5984;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,5984
	ctx.r3.s64 = ctx.r1.s64 + 5984;
	// addi r5,r31,212
	ctx.r5.s64 = r31.s64 + 212;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821488AC:
	// lwz r11,208(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 208);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148914
	if (!cr6.getEQ()) goto loc_82148914;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,6400
	ctx.r3.s64 = ctx.r1.s64 + 6400;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,6400
	ctx.r3.s64 = ctx.r1.s64 + 6400;
	// addi r5,r31,208
	ctx.r5.s64 = r31.s64 + 208;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 208);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821488fc
	if (cr6.getEQ()) goto loc_821488FC;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,216(r31)
	PPC_STORE_U32(r31.u32 + 216, ctx.r3.u32);
	// lwz r3,208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 208);
	// b 0x8214890c
	goto loc_8214890C;
loc_821488FC:
	// lwz r3,212(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 212);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,216(r31)
	PPC_STORE_U32(r31.u32 + 216, ctx.r3.u32);
	// lwz r3,212(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 212);
loc_8214890C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,220(r31)
	PPC_STORE_U32(r31.u32 + 220, ctx.r3.u32);
loc_82148914:
	// lwz r11,228(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 228);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31844
	r30.s64 = r11.s64 + -31844;
	// bne cr6,0x82148950
	if (!cr6.getEQ()) goto loc_82148950;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,6816
	ctx.r3.s64 = ctx.r1.s64 + 6816;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,6816
	ctx.r3.s64 = ctx.r1.s64 + 6816;
	// addi r5,r31,228
	ctx.r5.s64 = r31.s64 + 228;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148950:
	// lwz r11,224(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821489b8
	if (!cr6.getEQ()) goto loc_821489B8;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,7232
	ctx.r3.s64 = ctx.r1.s64 + 7232;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,7232
	ctx.r3.s64 = ctx.r1.s64 + 7232;
	// addi r5,r31,224
	ctx.r5.s64 = r31.s64 + 224;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,224(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821489a0
	if (cr6.getEQ()) goto loc_821489A0;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,232(r31)
	PPC_STORE_U32(r31.u32 + 232, ctx.r3.u32);
	// lwz r3,224(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// b 0x821489b0
	goto loc_821489B0;
loc_821489A0:
	// lwz r3,228(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 228);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,232(r31)
	PPC_STORE_U32(r31.u32 + 232, ctx.r3.u32);
	// lwz r3,228(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 228);
loc_821489B0:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,236(r31)
	PPC_STORE_U32(r31.u32 + 236, ctx.r3.u32);
loc_821489B8:
	// lwz r11,244(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 244);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31856
	r30.s64 = r11.s64 + -31856;
	// bne cr6,0x821489f4
	if (!cr6.getEQ()) goto loc_821489F4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,7648
	ctx.r3.s64 = ctx.r1.s64 + 7648;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,7648
	ctx.r3.s64 = ctx.r1.s64 + 7648;
	// addi r5,r31,244
	ctx.r5.s64 = r31.s64 + 244;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821489F4:
	// lwz r11,240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 240);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148a5c
	if (!cr6.getEQ()) goto loc_82148A5C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,8064
	ctx.r3.s64 = ctx.r1.s64 + 8064;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,8064
	ctx.r3.s64 = ctx.r1.s64 + 8064;
	// addi r5,r31,240
	ctx.r5.s64 = r31.s64 + 240;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,240(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 240);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148a44
	if (cr6.getEQ()) goto loc_82148A44;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,248(r31)
	PPC_STORE_U32(r31.u32 + 248, ctx.r3.u32);
	// lwz r3,240(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 240);
	// b 0x82148a54
	goto loc_82148A54;
loc_82148A44:
	// lwz r3,244(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 244);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,248(r31)
	PPC_STORE_U32(r31.u32 + 248, ctx.r3.u32);
	// lwz r3,244(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 244);
loc_82148A54:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,252(r31)
	PPC_STORE_U32(r31.u32 + 252, ctx.r3.u32);
loc_82148A5C:
	// lwz r11,260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148a90
	if (!cr6.getEQ()) goto loc_82148A90;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,8480
	ctx.r3.s64 = ctx.r1.s64 + 8480;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,8480
	ctx.r3.s64 = ctx.r1.s64 + 8480;
	// addi r5,r31,260
	ctx.r5.s64 = r31.s64 + 260;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148A90:
	// lwz r11,256(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 256);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148af8
	if (!cr6.getEQ()) goto loc_82148AF8;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,8896
	ctx.r3.s64 = ctx.r1.s64 + 8896;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,8896
	ctx.r3.s64 = ctx.r1.s64 + 8896;
	// addi r5,r31,256
	ctx.r5.s64 = r31.s64 + 256;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,256(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 256);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148ae0
	if (cr6.getEQ()) goto loc_82148AE0;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,264(r31)
	PPC_STORE_U32(r31.u32 + 264, ctx.r3.u32);
	// lwz r3,256(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 256);
	// b 0x82148af0
	goto loc_82148AF0;
loc_82148AE0:
	// lwz r3,260(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,264(r31)
	PPC_STORE_U32(r31.u32 + 264, ctx.r3.u32);
	// lwz r3,260(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 260);
loc_82148AF0:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,268(r31)
	PPC_STORE_U32(r31.u32 + 268, ctx.r3.u32);
loc_82148AF8:
	// lwz r11,276(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 276);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148b2c
	if (!cr6.getEQ()) goto loc_82148B2C;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,9312
	ctx.r3.s64 = ctx.r1.s64 + 9312;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,9312
	ctx.r3.s64 = ctx.r1.s64 + 9312;
	// addi r5,r31,276
	ctx.r5.s64 = r31.s64 + 276;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148B2C:
	// lwz r11,272(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 272);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148b94
	if (!cr6.getEQ()) goto loc_82148B94;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,9728
	ctx.r3.s64 = ctx.r1.s64 + 9728;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,9728
	ctx.r3.s64 = ctx.r1.s64 + 9728;
	// addi r5,r31,272
	ctx.r5.s64 = r31.s64 + 272;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,272(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 272);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148b7c
	if (cr6.getEQ()) goto loc_82148B7C;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,280(r31)
	PPC_STORE_U32(r31.u32 + 280, ctx.r3.u32);
	// lwz r3,272(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 272);
	// b 0x82148b8c
	goto loc_82148B8C;
loc_82148B7C:
	// lwz r3,276(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 276);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,280(r31)
	PPC_STORE_U32(r31.u32 + 280, ctx.r3.u32);
	// lwz r3,276(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 276);
loc_82148B8C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,284(r31)
	PPC_STORE_U32(r31.u32 + 284, ctx.r3.u32);
loc_82148B94:
	// lwz r11,292(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 292);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148bc8
	if (!cr6.getEQ()) goto loc_82148BC8;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,10144
	ctx.r3.s64 = ctx.r1.s64 + 10144;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,10144
	ctx.r3.s64 = ctx.r1.s64 + 10144;
	// addi r5,r31,292
	ctx.r5.s64 = r31.s64 + 292;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148BC8:
	// lwz r11,288(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 288);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148c30
	if (!cr6.getEQ()) goto loc_82148C30;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,10560
	ctx.r3.s64 = ctx.r1.s64 + 10560;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,10560
	ctx.r3.s64 = ctx.r1.s64 + 10560;
	// addi r5,r31,288
	ctx.r5.s64 = r31.s64 + 288;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,288(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 288);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148c18
	if (cr6.getEQ()) goto loc_82148C18;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,296(r31)
	PPC_STORE_U32(r31.u32 + 296, ctx.r3.u32);
	// lwz r3,288(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 288);
	// b 0x82148c28
	goto loc_82148C28;
loc_82148C18:
	// lwz r3,292(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 292);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,296(r31)
	PPC_STORE_U32(r31.u32 + 296, ctx.r3.u32);
	// lwz r3,292(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 292);
loc_82148C28:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,300(r31)
	PPC_STORE_U32(r31.u32 + 300, ctx.r3.u32);
loc_82148C30:
	// lwz r11,308(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 308);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148c64
	if (!cr6.getEQ()) goto loc_82148C64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,10976
	ctx.r3.s64 = ctx.r1.s64 + 10976;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,10976
	ctx.r3.s64 = ctx.r1.s64 + 10976;
	// addi r5,r31,308
	ctx.r5.s64 = r31.s64 + 308;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148C64:
	// lwz r11,304(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 304);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148ccc
	if (!cr6.getEQ()) goto loc_82148CCC;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,11392
	ctx.r3.s64 = ctx.r1.s64 + 11392;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,11392
	ctx.r3.s64 = ctx.r1.s64 + 11392;
	// addi r5,r31,304
	ctx.r5.s64 = r31.s64 + 304;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 304);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148cb4
	if (cr6.getEQ()) goto loc_82148CB4;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,312(r31)
	PPC_STORE_U32(r31.u32 + 312, ctx.r3.u32);
	// lwz r3,304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 304);
	// b 0x82148cc4
	goto loc_82148CC4;
loc_82148CB4:
	// lwz r3,308(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 308);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,312(r31)
	PPC_STORE_U32(r31.u32 + 312, ctx.r3.u32);
	// lwz r3,308(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 308);
loc_82148CC4:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,316(r31)
	PPC_STORE_U32(r31.u32 + 316, ctx.r3.u32);
loc_82148CCC:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,26552
	r31.s64 = r11.s64 + 26552;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31864
	r30.s64 = r11.s64 + -31864;
	// bne cr6,0x82148d10
	if (!cr6.getEQ()) goto loc_82148D10;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,11808
	ctx.r3.s64 = ctx.r1.s64 + 11808;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,11808
	ctx.r3.s64 = ctx.r1.s64 + 11808;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148D10:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148d78
	if (!cr6.getEQ()) goto loc_82148D78;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,12224
	ctx.r3.s64 = ctx.r1.s64 + 12224;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,12224
	ctx.r3.s64 = ctx.r1.s64 + 12224;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148d60
	if (cr6.getEQ()) goto loc_82148D60;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x82148d70
	goto loc_82148D70;
loc_82148D60:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_82148D70:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_82148D78:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31872
	r30.s64 = r11.s64 + -31872;
	// bne cr6,0x82148db4
	if (!cr6.getEQ()) goto loc_82148DB4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,12640
	ctx.r3.s64 = ctx.r1.s64 + 12640;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,12640
	ctx.r3.s64 = ctx.r1.s64 + 12640;
	// addi r5,r31,20
	ctx.r5.s64 = r31.s64 + 20;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148DB4:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148e1c
	if (!cr6.getEQ()) goto loc_82148E1C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,13056
	ctx.r3.s64 = ctx.r1.s64 + 13056;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,13056
	ctx.r3.s64 = ctx.r1.s64 + 13056;
	// addi r5,r31,16
	ctx.r5.s64 = r31.s64 + 16;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148e04
	if (cr6.getEQ()) goto loc_82148E04;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// b 0x82148e14
	goto loc_82148E14;
loc_82148E04:
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
loc_82148E14:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r3.u32);
loc_82148E1C:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31880
	r30.s64 = r11.s64 + -31880;
	// bne cr6,0x82148e58
	if (!cr6.getEQ()) goto loc_82148E58;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,13472
	ctx.r3.s64 = ctx.r1.s64 + 13472;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,13472
	ctx.r3.s64 = ctx.r1.s64 + 13472;
	// addi r5,r31,36
	ctx.r5.s64 = r31.s64 + 36;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148E58:
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148ec0
	if (!cr6.getEQ()) goto loc_82148EC0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,13888
	ctx.r3.s64 = ctx.r1.s64 + 13888;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,13888
	ctx.r3.s64 = ctx.r1.s64 + 13888;
	// addi r5,r31,32
	ctx.r5.s64 = r31.s64 + 32;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82148ea8
	if (cr6.getEQ()) goto loc_82148EA8;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r3.u32);
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// b 0x82148eb8
	goto loc_82148EB8;
loc_82148EA8:
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r3.u32);
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
loc_82148EB8:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,44(r31)
	PPC_STORE_U32(r31.u32 + 44, ctx.r3.u32);
loc_82148EC0:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,28184
	r31.s64 = r11.s64 + 28184;
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31888
	r30.s64 = r11.s64 + -31888;
	// bne cr6,0x82148f04
	if (!cr6.getEQ()) goto loc_82148F04;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,14304
	ctx.r3.s64 = ctx.r1.s64 + 14304;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,14304
	ctx.r3.s64 = ctx.r1.s64 + 14304;
	// addi r5,r31,52
	ctx.r5.s64 = r31.s64 + 52;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148F04:
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148f4c
	if (!cr6.getEQ()) goto loc_82148F4C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,14720
	ctx.r3.s64 = ctx.r1.s64 + 14720;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,14720
	ctx.r3.s64 = ctx.r1.s64 + 14720;
	// addi r5,r31,48
	ctx.r5.s64 = r31.s64 + 48;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,15
	r11.s64 = 15;
	// stw r11,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r11.u32);
	// stw r11,60(r31)
	PPC_STORE_U32(r31.u32 + 60, r11.u32);
loc_82148F4C:
	// lwz r11,68(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31896
	r30.s64 = r11.s64 + -31896;
	// bne cr6,0x82148f88
	if (!cr6.getEQ()) goto loc_82148F88;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,15136
	ctx.r3.s64 = ctx.r1.s64 + 15136;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,15136
	ctx.r3.s64 = ctx.r1.s64 + 15136;
	// addi r5,r31,68
	ctx.r5.s64 = r31.s64 + 68;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82148F88:
	// lwz r11,64(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82148fd0
	if (!cr6.getEQ()) goto loc_82148FD0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,15552
	ctx.r3.s64 = ctx.r1.s64 + 15552;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,15552
	ctx.r3.s64 = ctx.r1.s64 + 15552;
	// addi r5,r31,64
	ctx.r5.s64 = r31.s64 + 64;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,64(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,20
	r11.s64 = 20;
	// stw r11,72(r31)
	PPC_STORE_U32(r31.u32 + 72, r11.u32);
	// stw r11,76(r31)
	PPC_STORE_U32(r31.u32 + 76, r11.u32);
loc_82148FD0:
	// lwz r11,84(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31908
	r30.s64 = r11.s64 + -31908;
	// bne cr6,0x8214900c
	if (!cr6.getEQ()) goto loc_8214900C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,15968
	ctx.r3.s64 = ctx.r1.s64 + 15968;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,15968
	ctx.r3.s64 = ctx.r1.s64 + 15968;
	// addi r5,r31,84
	ctx.r5.s64 = r31.s64 + 84;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_8214900C:
	// lwz r11,80(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149058
	if (!cr6.getEQ()) goto loc_82149058;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,16384
	ctx.r3.s64 = ctx.r1.s64 + 16384;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,16384
	ctx.r3.s64 = ctx.r1.s64 + 16384;
	// addi r5,r31,80
	ctx.r5.s64 = r31.s64 + 80;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,80(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,7
	r11.s64 = 7;
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
	// li r11,8
	r11.s64 = 8;
	// stw r11,92(r31)
	PPC_STORE_U32(r31.u32 + 92, r11.u32);
loc_82149058:
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31916
	r30.s64 = r11.s64 + -31916;
	// bne cr6,0x82149094
	if (!cr6.getEQ()) goto loc_82149094;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,16800
	ctx.r3.s64 = ctx.r1.s64 + 16800;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,16800
	ctx.r3.s64 = ctx.r1.s64 + 16800;
	// addi r5,r31,100
	ctx.r5.s64 = r31.s64 + 100;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149094:
	// lwz r11,96(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 96);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821490e0
	if (!cr6.getEQ()) goto loc_821490E0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,17216
	ctx.r3.s64 = ctx.r1.s64 + 17216;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,17216
	ctx.r3.s64 = ctx.r1.s64 + 17216;
	// addi r5,r31,96
	ctx.r5.s64 = r31.s64 + 96;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,96(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 96);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,68
	r11.s64 = 68;
	// stw r11,104(r31)
	PPC_STORE_U32(r31.u32 + 104, r11.u32);
	// li r11,44
	r11.s64 = 44;
	// stw r11,108(r31)
	PPC_STORE_U32(r31.u32 + 108, r11.u32);
loc_821490E0:
	// lwz r11,116(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31924
	r30.s64 = r11.s64 + -31924;
	// bne cr6,0x8214911c
	if (!cr6.getEQ()) goto loc_8214911C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,17632
	ctx.r3.s64 = ctx.r1.s64 + 17632;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,17632
	ctx.r3.s64 = ctx.r1.s64 + 17632;
	// addi r5,r31,116
	ctx.r5.s64 = r31.s64 + 116;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_8214911C:
	// lwz r11,112(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149184
	if (!cr6.getEQ()) goto loc_82149184;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,18048
	ctx.r3.s64 = ctx.r1.s64 + 18048;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,18048
	ctx.r3.s64 = ctx.r1.s64 + 18048;
	// addi r5,r31,112
	ctx.r5.s64 = r31.s64 + 112;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,112(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214916c
	if (cr6.getEQ()) goto loc_8214916C;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,120(r31)
	PPC_STORE_U32(r31.u32 + 120, ctx.r3.u32);
	// lwz r3,112(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// b 0x8214917c
	goto loc_8214917C;
loc_8214916C:
	// lwz r3,116(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,120(r31)
	PPC_STORE_U32(r31.u32 + 120, ctx.r3.u32);
	// lwz r3,116(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 116);
loc_8214917C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,124(r31)
	PPC_STORE_U32(r31.u32 + 124, ctx.r3.u32);
loc_82149184:
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31928
	r30.s64 = r11.s64 + -31928;
	// bne cr6,0x821491c0
	if (!cr6.getEQ()) goto loc_821491C0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,18464
	ctx.r3.s64 = ctx.r1.s64 + 18464;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,18464
	ctx.r3.s64 = ctx.r1.s64 + 18464;
	// addi r5,r31,132
	ctx.r5.s64 = r31.s64 + 132;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821491C0:
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149228
	if (!cr6.getEQ()) goto loc_82149228;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,18880
	ctx.r3.s64 = ctx.r1.s64 + 18880;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,18880
	ctx.r3.s64 = ctx.r1.s64 + 18880;
	// addi r5,r31,128
	ctx.r5.s64 = r31.s64 + 128;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82149210
	if (cr6.getEQ()) goto loc_82149210;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,136(r31)
	PPC_STORE_U32(r31.u32 + 136, ctx.r3.u32);
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// b 0x82149220
	goto loc_82149220;
loc_82149210:
	// lwz r3,132(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,136(r31)
	PPC_STORE_U32(r31.u32 + 136, ctx.r3.u32);
	// lwz r3,132(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 132);
loc_82149220:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,140(r31)
	PPC_STORE_U32(r31.u32 + 140, ctx.r3.u32);
loc_82149228:
	// lwz r11,180(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31940
	r30.s64 = r11.s64 + -31940;
	// bne cr6,0x82149264
	if (!cr6.getEQ()) goto loc_82149264;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,19296
	ctx.r3.s64 = ctx.r1.s64 + 19296;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,19296
	ctx.r3.s64 = ctx.r1.s64 + 19296;
	// addi r5,r31,180
	ctx.r5.s64 = r31.s64 + 180;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149264:
	// lwz r11,176(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821492cc
	if (!cr6.getEQ()) goto loc_821492CC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,19712
	ctx.r3.s64 = ctx.r1.s64 + 19712;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,19712
	ctx.r3.s64 = ctx.r1.s64 + 19712;
	// addi r5,r31,176
	ctx.r5.s64 = r31.s64 + 176;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,176(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821492b4
	if (cr6.getEQ()) goto loc_821492B4;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,184(r31)
	PPC_STORE_U32(r31.u32 + 184, ctx.r3.u32);
	// lwz r3,176(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// b 0x821492c4
	goto loc_821492C4;
loc_821492B4:
	// lwz r3,180(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,184(r31)
	PPC_STORE_U32(r31.u32 + 184, ctx.r3.u32);
	// lwz r3,180(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 180);
loc_821492C4:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,188(r31)
	PPC_STORE_U32(r31.u32 + 188, ctx.r3.u32);
loc_821492CC:
	// lwz r11,196(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31960
	r30.s64 = r11.s64 + -31960;
	// bne cr6,0x82149308
	if (!cr6.getEQ()) goto loc_82149308;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,20128
	ctx.r3.s64 = ctx.r1.s64 + 20128;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,20128
	ctx.r3.s64 = ctx.r1.s64 + 20128;
	// addi r5,r31,196
	ctx.r5.s64 = r31.s64 + 196;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149308:
	// lwz r11,192(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149370
	if (!cr6.getEQ()) goto loc_82149370;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,20544
	ctx.r3.s64 = ctx.r1.s64 + 20544;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,20544
	ctx.r3.s64 = ctx.r1.s64 + 20544;
	// addi r5,r31,192
	ctx.r5.s64 = r31.s64 + 192;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,192(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82149358
	if (cr6.getEQ()) goto loc_82149358;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,200(r31)
	PPC_STORE_U32(r31.u32 + 200, ctx.r3.u32);
	// lwz r3,192(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// b 0x82149368
	goto loc_82149368;
loc_82149358:
	// lwz r3,196(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,200(r31)
	PPC_STORE_U32(r31.u32 + 200, ctx.r3.u32);
	// lwz r3,196(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 196);
loc_82149368:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,204(r31)
	PPC_STORE_U32(r31.u32 + 204, ctx.r3.u32);
loc_82149370:
	// lwz r11,148(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 148);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31972
	r30.s64 = r11.s64 + -31972;
	// bne cr6,0x821493ac
	if (!cr6.getEQ()) goto loc_821493AC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,20960
	ctx.r3.s64 = ctx.r1.s64 + 20960;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,20960
	ctx.r3.s64 = ctx.r1.s64 + 20960;
	// addi r5,r31,148
	ctx.r5.s64 = r31.s64 + 148;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821493AC:
	// lwz r11,144(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 144);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149414
	if (!cr6.getEQ()) goto loc_82149414;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,21376
	ctx.r3.s64 = ctx.r1.s64 + 21376;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,21376
	ctx.r3.s64 = ctx.r1.s64 + 21376;
	// addi r5,r31,144
	ctx.r5.s64 = r31.s64 + 144;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,144(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 144);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821493fc
	if (cr6.getEQ()) goto loc_821493FC;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,152(r31)
	PPC_STORE_U32(r31.u32 + 152, ctx.r3.u32);
	// lwz r3,144(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 144);
	// b 0x8214940c
	goto loc_8214940C;
loc_821493FC:
	// lwz r3,148(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 148);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,152(r31)
	PPC_STORE_U32(r31.u32 + 152, ctx.r3.u32);
	// lwz r3,148(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 148);
loc_8214940C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,156(r31)
	PPC_STORE_U32(r31.u32 + 156, ctx.r3.u32);
loc_82149414:
	// lwz r11,164(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31984
	r30.s64 = r11.s64 + -31984;
	// bne cr6,0x82149450
	if (!cr6.getEQ()) goto loc_82149450;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,21792
	ctx.r3.s64 = ctx.r1.s64 + 21792;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,21792
	ctx.r3.s64 = ctx.r1.s64 + 21792;
	// addi r5,r31,164
	ctx.r5.s64 = r31.s64 + 164;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149450:
	// lwz r11,160(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 160);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821494b8
	if (!cr6.getEQ()) goto loc_821494B8;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,22208
	ctx.r3.s64 = ctx.r1.s64 + 22208;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,22208
	ctx.r3.s64 = ctx.r1.s64 + 22208;
	// addi r5,r31,160
	ctx.r5.s64 = r31.s64 + 160;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,160(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 160);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821494a0
	if (cr6.getEQ()) goto loc_821494A0;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,168(r31)
	PPC_STORE_U32(r31.u32 + 168, ctx.r3.u32);
	// lwz r3,160(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 160);
	// b 0x821494b0
	goto loc_821494B0;
loc_821494A0:
	// lwz r3,164(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,168(r31)
	PPC_STORE_U32(r31.u32 + 168, ctx.r3.u32);
	// lwz r3,164(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 164);
loc_821494B0:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,172(r31)
	PPC_STORE_U32(r31.u32 + 172, ctx.r3.u32);
loc_821494B8:
	// lwz r11,212(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 212);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-31996
	r30.s64 = r11.s64 + -31996;
	// bne cr6,0x821494f4
	if (!cr6.getEQ()) goto loc_821494F4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,22624
	ctx.r3.s64 = ctx.r1.s64 + 22624;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,22624
	ctx.r3.s64 = ctx.r1.s64 + 22624;
	// addi r5,r31,212
	ctx.r5.s64 = r31.s64 + 212;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821494F4:
	// lwz r11,208(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 208);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214955c
	if (!cr6.getEQ()) goto loc_8214955C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,23040
	ctx.r3.s64 = ctx.r1.s64 + 23040;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,23040
	ctx.r3.s64 = ctx.r1.s64 + 23040;
	// addi r5,r31,208
	ctx.r5.s64 = r31.s64 + 208;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 208);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82149544
	if (cr6.getEQ()) goto loc_82149544;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,216(r31)
	PPC_STORE_U32(r31.u32 + 216, ctx.r3.u32);
	// lwz r3,208(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 208);
	// b 0x82149554
	goto loc_82149554;
loc_82149544:
	// lwz r3,212(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 212);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,216(r31)
	PPC_STORE_U32(r31.u32 + 216, ctx.r3.u32);
	// lwz r3,212(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 212);
loc_82149554:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,220(r31)
	PPC_STORE_U32(r31.u32 + 220, ctx.r3.u32);
loc_8214955C:
	// lwz r11,228(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 228);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32008
	r30.s64 = r11.s64 + -32008;
	// bne cr6,0x82149598
	if (!cr6.getEQ()) goto loc_82149598;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,23456
	ctx.r3.s64 = ctx.r1.s64 + 23456;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,23456
	ctx.r3.s64 = ctx.r1.s64 + 23456;
	// addi r5,r31,228
	ctx.r5.s64 = r31.s64 + 228;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149598:
	// lwz r11,224(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149600
	if (!cr6.getEQ()) goto loc_82149600;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,23872
	ctx.r3.s64 = ctx.r1.s64 + 23872;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,23872
	ctx.r3.s64 = ctx.r1.s64 + 23872;
	// addi r5,r31,224
	ctx.r5.s64 = r31.s64 + 224;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,224(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821495e8
	if (cr6.getEQ()) goto loc_821495E8;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,232(r31)
	PPC_STORE_U32(r31.u32 + 232, ctx.r3.u32);
	// lwz r3,224(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// b 0x821495f8
	goto loc_821495F8;
loc_821495E8:
	// lwz r3,228(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 228);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,232(r31)
	PPC_STORE_U32(r31.u32 + 232, ctx.r3.u32);
	// lwz r3,228(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 228);
loc_821495F8:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,236(r31)
	PPC_STORE_U32(r31.u32 + 236, ctx.r3.u32);
loc_82149600:
	// lwz r11,276(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 276);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32024
	r30.s64 = r11.s64 + -32024;
	// bne cr6,0x8214963c
	if (!cr6.getEQ()) goto loc_8214963C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,24288
	ctx.r3.s64 = ctx.r1.s64 + 24288;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,24288
	ctx.r3.s64 = ctx.r1.s64 + 24288;
	// addi r5,r31,276
	ctx.r5.s64 = r31.s64 + 276;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_8214963C:
	// lwz r11,272(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 272);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821496a4
	if (!cr6.getEQ()) goto loc_821496A4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,24704
	ctx.r3.s64 = ctx.r1.s64 + 24704;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,24704
	ctx.r3.s64 = ctx.r1.s64 + 24704;
	// addi r5,r31,272
	ctx.r5.s64 = r31.s64 + 272;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,272(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 272);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214968c
	if (cr6.getEQ()) goto loc_8214968C;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,280(r31)
	PPC_STORE_U32(r31.u32 + 280, ctx.r3.u32);
	// lwz r3,272(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 272);
	// b 0x8214969c
	goto loc_8214969C;
loc_8214968C:
	// lwz r3,276(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 276);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,280(r31)
	PPC_STORE_U32(r31.u32 + 280, ctx.r3.u32);
	// lwz r3,276(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 276);
loc_8214969C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,284(r31)
	PPC_STORE_U32(r31.u32 + 284, ctx.r3.u32);
loc_821496A4:
	// lwz r11,260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32040
	r30.s64 = r11.s64 + -32040;
	// bne cr6,0x821496e0
	if (!cr6.getEQ()) goto loc_821496E0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,25120
	ctx.r3.s64 = ctx.r1.s64 + 25120;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,25120
	ctx.r3.s64 = ctx.r1.s64 + 25120;
	// addi r5,r31,260
	ctx.r5.s64 = r31.s64 + 260;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821496E0:
	// lwz r11,256(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 256);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149748
	if (!cr6.getEQ()) goto loc_82149748;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,25536
	ctx.r3.s64 = ctx.r1.s64 + 25536;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,25536
	ctx.r3.s64 = ctx.r1.s64 + 25536;
	// addi r5,r31,256
	ctx.r5.s64 = r31.s64 + 256;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,256(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 256);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82149730
	if (cr6.getEQ()) goto loc_82149730;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,264(r31)
	PPC_STORE_U32(r31.u32 + 264, ctx.r3.u32);
	// lwz r3,256(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 256);
	// b 0x82149740
	goto loc_82149740;
loc_82149730:
	// lwz r3,260(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,264(r31)
	PPC_STORE_U32(r31.u32 + 264, ctx.r3.u32);
	// lwz r3,260(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 260);
loc_82149740:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,268(r31)
	PPC_STORE_U32(r31.u32 + 268, ctx.r3.u32);
loc_82149748:
	// lwz r11,244(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 244);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32052
	r30.s64 = r11.s64 + -32052;
	// bne cr6,0x82149784
	if (!cr6.getEQ()) goto loc_82149784;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,25952
	ctx.r3.s64 = ctx.r1.s64 + 25952;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,25952
	ctx.r3.s64 = ctx.r1.s64 + 25952;
	// addi r5,r31,244
	ctx.r5.s64 = r31.s64 + 244;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149784:
	// lwz r11,240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 240);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821497ec
	if (!cr6.getEQ()) goto loc_821497EC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,26368
	ctx.r3.s64 = ctx.r1.s64 + 26368;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,26368
	ctx.r3.s64 = ctx.r1.s64 + 26368;
	// addi r5,r31,240
	ctx.r5.s64 = r31.s64 + 240;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,240(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 240);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821497d4
	if (cr6.getEQ()) goto loc_821497D4;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,248(r31)
	PPC_STORE_U32(r31.u32 + 248, ctx.r3.u32);
	// lwz r3,240(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 240);
	// b 0x821497e4
	goto loc_821497E4;
loc_821497D4:
	// lwz r3,244(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 244);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,248(r31)
	PPC_STORE_U32(r31.u32 + 248, ctx.r3.u32);
	// lwz r3,244(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 244);
loc_821497E4:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,252(r31)
	PPC_STORE_U32(r31.u32 + 252, ctx.r3.u32);
loc_821497EC:
	// lwz r11,292(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 292);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32064
	r30.s64 = r11.s64 + -32064;
	// bne cr6,0x82149828
	if (!cr6.getEQ()) goto loc_82149828;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,26784
	ctx.r3.s64 = ctx.r1.s64 + 26784;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,26784
	ctx.r3.s64 = ctx.r1.s64 + 26784;
	// addi r5,r31,292
	ctx.r5.s64 = r31.s64 + 292;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149828:
	// lwz r11,288(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 288);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149870
	if (!cr6.getEQ()) goto loc_82149870;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,27200
	ctx.r3.s64 = ctx.r1.s64 + 27200;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,27200
	ctx.r3.s64 = ctx.r1.s64 + 27200;
	// addi r5,r31,288
	ctx.r5.s64 = r31.s64 + 288;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,288(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 288);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,32
	r11.s64 = 32;
	// stw r11,296(r31)
	PPC_STORE_U32(r31.u32 + 296, r11.u32);
	// stw r11,300(r31)
	PPC_STORE_U32(r31.u32 + 300, r11.u32);
loc_82149870:
	// lwz r11,308(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 308);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32072
	r30.s64 = r11.s64 + -32072;
	// bne cr6,0x821498ac
	if (!cr6.getEQ()) goto loc_821498AC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,27616
	ctx.r3.s64 = ctx.r1.s64 + 27616;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,27616
	ctx.r3.s64 = ctx.r1.s64 + 27616;
	// addi r5,r31,308
	ctx.r5.s64 = r31.s64 + 308;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821498AC:
	// lwz r11,304(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 304);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149914
	if (!cr6.getEQ()) goto loc_82149914;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,28032
	ctx.r3.s64 = ctx.r1.s64 + 28032;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,28032
	ctx.r3.s64 = ctx.r1.s64 + 28032;
	// addi r5,r31,304
	ctx.r5.s64 = r31.s64 + 304;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 304);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821498fc
	if (cr6.getEQ()) goto loc_821498FC;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,312(r31)
	PPC_STORE_U32(r31.u32 + 312, ctx.r3.u32);
	// lwz r3,304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 304);
	// b 0x8214990c
	goto loc_8214990C;
loc_821498FC:
	// lwz r3,308(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 308);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,312(r31)
	PPC_STORE_U32(r31.u32 + 312, ctx.r3.u32);
	// lwz r3,308(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 308);
loc_8214990C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,316(r31)
	PPC_STORE_U32(r31.u32 + 316, ctx.r3.u32);
loc_82149914:
	// lwz r11,324(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 324);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32080
	r30.s64 = r11.s64 + -32080;
	// bne cr6,0x82149950
	if (!cr6.getEQ()) goto loc_82149950;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,28448
	ctx.r3.s64 = ctx.r1.s64 + 28448;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,28448
	ctx.r3.s64 = ctx.r1.s64 + 28448;
	// addi r5,r31,324
	ctx.r5.s64 = r31.s64 + 324;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149950:
	// lwz r11,320(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 320);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821499b8
	if (!cr6.getEQ()) goto loc_821499B8;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,28864
	ctx.r3.s64 = ctx.r1.s64 + 28864;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,28864
	ctx.r3.s64 = ctx.r1.s64 + 28864;
	// addi r5,r31,320
	ctx.r5.s64 = r31.s64 + 320;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,320(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 320);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821499a0
	if (cr6.getEQ()) goto loc_821499A0;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,328(r31)
	PPC_STORE_U32(r31.u32 + 328, ctx.r3.u32);
	// lwz r3,320(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 320);
	// b 0x821499b0
	goto loc_821499B0;
loc_821499A0:
	// lwz r3,324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 324);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,328(r31)
	PPC_STORE_U32(r31.u32 + 328, ctx.r3.u32);
	// lwz r3,324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 324);
loc_821499B0:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,332(r31)
	PPC_STORE_U32(r31.u32 + 332, ctx.r3.u32);
loc_821499B8:
	// lwz r11,340(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 340);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32088
	r30.s64 = r11.s64 + -32088;
	// bne cr6,0x821499f4
	if (!cr6.getEQ()) goto loc_821499F4;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,29280
	ctx.r3.s64 = ctx.r1.s64 + 29280;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,29280
	ctx.r3.s64 = ctx.r1.s64 + 29280;
	// addi r5,r31,340
	ctx.r5.s64 = r31.s64 + 340;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_821499F4:
	// lwz r11,336(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 336);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149a3c
	if (!cr6.getEQ()) goto loc_82149A3C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,29696
	ctx.r3.s64 = ctx.r1.s64 + 29696;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,29696
	ctx.r3.s64 = ctx.r1.s64 + 29696;
	// addi r5,r31,336
	ctx.r5.s64 = r31.s64 + 336;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,336(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 336);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,16
	r11.s64 = 16;
	// stw r11,344(r31)
	PPC_STORE_U32(r31.u32 + 344, r11.u32);
	// stw r11,348(r31)
	PPC_STORE_U32(r31.u32 + 348, r11.u32);
loc_82149A3C:
	// lwz r11,356(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 356);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32096
	r30.s64 = r11.s64 + -32096;
	// bne cr6,0x82149a78
	if (!cr6.getEQ()) goto loc_82149A78;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,30112
	ctx.r3.s64 = ctx.r1.s64 + 30112;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,30112
	ctx.r3.s64 = ctx.r1.s64 + 30112;
	// addi r5,r31,356
	ctx.r5.s64 = r31.s64 + 356;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149A78:
	// lwz r11,352(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 352);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149ac0
	if (!cr6.getEQ()) goto loc_82149AC0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,30528
	ctx.r3.s64 = ctx.r1.s64 + 30528;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,30528
	ctx.r3.s64 = ctx.r1.s64 + 30528;
	// addi r5,r31,352
	ctx.r5.s64 = r31.s64 + 352;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,352(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 352);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,16
	r11.s64 = 16;
	// stw r11,360(r31)
	PPC_STORE_U32(r31.u32 + 360, r11.u32);
	// stw r11,364(r31)
	PPC_STORE_U32(r31.u32 + 364, r11.u32);
loc_82149AC0:
	// lwz r11,372(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 372);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32104
	r30.s64 = r11.s64 + -32104;
	// bne cr6,0x82149afc
	if (!cr6.getEQ()) goto loc_82149AFC;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,30944
	ctx.r3.s64 = ctx.r1.s64 + 30944;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,30944
	ctx.r3.s64 = ctx.r1.s64 + 30944;
	// addi r5,r31,372
	ctx.r5.s64 = r31.s64 + 372;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149AFC:
	// lwz r11,368(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 368);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149b44
	if (!cr6.getEQ()) goto loc_82149B44;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,31360
	ctx.r3.s64 = ctx.r1.s64 + 31360;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,31360
	ctx.r3.s64 = ctx.r1.s64 + 31360;
	// addi r5,r31,368
	ctx.r5.s64 = r31.s64 + 368;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,368(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 368);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,16
	r11.s64 = 16;
	// stw r11,376(r31)
	PPC_STORE_U32(r31.u32 + 376, r11.u32);
	// stw r11,380(r31)
	PPC_STORE_U32(r31.u32 + 380, r11.u32);
loc_82149B44:
	// lwz r11,388(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 388);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32112
	r30.s64 = r11.s64 + -32112;
	// bne cr6,0x82149b80
	if (!cr6.getEQ()) goto loc_82149B80;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,31776
	ctx.r3.s64 = ctx.r1.s64 + 31776;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,31776
	ctx.r3.s64 = ctx.r1.s64 + 31776;
	// addi r5,r31,388
	ctx.r5.s64 = r31.s64 + 388;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149B80:
	// lwz r11,384(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 384);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149bc8
	if (!cr6.getEQ()) goto loc_82149BC8;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,32192
	ctx.r3.s64 = ctx.r1.s64 + 32192;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,32192
	ctx.r3.s64 = ctx.r1.s64 + 32192;
	// addi r5,r31,384
	ctx.r5.s64 = r31.s64 + 384;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,384(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 384);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,16
	r11.s64 = 16;
	// stw r11,392(r31)
	PPC_STORE_U32(r31.u32 + 392, r11.u32);
	// stw r11,396(r31)
	PPC_STORE_U32(r31.u32 + 396, r11.u32);
loc_82149BC8:
	// lwz r11,404(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 404);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32124
	r30.s64 = r11.s64 + -32124;
	// bne cr6,0x82149c04
	if (!cr6.getEQ()) goto loc_82149C04;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,32608
	ctx.r3.s64 = ctx.r1.s64 + 32608;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,32608
	ctx.r3.s64 = ctx.r1.s64 + 32608;
	// addi r5,r31,404
	ctx.r5.s64 = r31.s64 + 404;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149C04:
	// lwz r11,400(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 400);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149c5c
	if (!cr6.getEQ()) goto loc_82149C5C;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,33024
	r12.u64 = r12.u64 | 33024;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,33024
	r12.u64 = r12.u64 | 33024;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,400
	ctx.r5.s64 = r31.s64 + 400;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r11,400(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 400);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,16
	r11.s64 = 16;
	// stw r11,408(r31)
	PPC_STORE_U32(r31.u32 + 408, r11.u32);
	// stw r11,412(r31)
	PPC_STORE_U32(r31.u32 + 412, r11.u32);
loc_82149C5C:
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// addi r28,r10,-32136
	r28.s64 = ctx.r10.s64 + -32136;
	// addi r27,r11,16704
	r27.s64 = r11.s64 + 16704;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// li r11,0
	r11.s64 = 0;
	// addi r31,r27,4
	r31.s64 = r27.s64 + 4;
	// addi r26,r10,-32148
	r26.s64 = ctx.r10.s64 + -32148;
loc_82149C7C:
	// addi r29,r11,1
	r29.s64 = r11.s64 + 1;
	// li r4,30
	ctx.r4.s64 = 30;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r3,r1,336
	ctx.r3.s64 = ctx.r1.s64 + 336;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149cd8
	if (!cr6.getEQ()) goto loc_82149CD8;
	// addi r7,r1,336
	ctx.r7.s64 = ctx.r1.s64 + 336;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,33440
	r12.u64 = r12.u64 | 33440;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,33440
	r12.u64 = r12.u64 | 33440;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149CD8:
	// lwz r11,-4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -4);
	// addi r30,r31,-4
	r30.s64 = r31.s64 + -4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149d58
	if (!cr6.getEQ()) goto loc_82149D58;
	// addi r7,r1,336
	ctx.r7.s64 = ctx.r1.s64 + 336;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,33856
	r12.u64 = r12.u64 | 33856;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,33856
	r12.u64 = r12.u64 | 33856;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82149d3c
	if (cr6.getEQ()) goto loc_82149D3C;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// b 0x82149d4c
	goto loc_82149D4C;
loc_82149D3C:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
loc_82149D4C:
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
loc_82149D58:
	// addi r31,r31,16
	r31.s64 = r31.s64 + 16;
	// addi r10,r27,644
	ctx.r10.s64 = r27.s64 + 644;
	// mr r11,r29
	r11.u64 = r29.u64;
	// cmpw cr6,r31,r10
	cr6.compare<int32_t>(r31.s32, ctx.r10.s32, xer);
	// blt cr6,0x82149c7c
	if (cr6.getLT()) goto loc_82149C7C;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,27480
	r31.s64 = r11.s64 + 27480;
	// lwz r11,180(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r11,-32156
	r29.s64 = r11.s64 + -32156;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-32168
	r30.s64 = r11.s64 + -32168;
	// bne cr6,0x82149dc8
	if (!cr6.getEQ()) goto loc_82149DC8;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,34272
	r12.u64 = r12.u64 | 34272;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,34272
	r12.u64 = r12.u64 | 34272;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,180
	ctx.r5.s64 = r31.s64 + 180;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149DC8:
	// lwz r11,176(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149e40
	if (!cr6.getEQ()) goto loc_82149E40;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,34688
	r12.u64 = r12.u64 | 34688;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,34688
	r12.u64 = r12.u64 | 34688;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,176
	ctx.r5.s64 = r31.s64 + 176;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,176(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82149e28
	if (cr6.getEQ()) goto loc_82149E28;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,184(r31)
	PPC_STORE_U32(r31.u32 + 184, ctx.r3.u32);
	// lwz r3,176(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 176);
	// b 0x82149e38
	goto loc_82149E38;
loc_82149E28:
	// lwz r3,180(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,184(r31)
	PPC_STORE_U32(r31.u32 + 184, ctx.r3.u32);
	// lwz r3,180(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 180);
loc_82149E38:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,188(r31)
	PPC_STORE_U32(r31.u32 + 188, ctx.r3.u32);
loc_82149E40:
	// lwz r11,84(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r29,r11,24168
	r29.s64 = r11.s64 + 24168;
	// bne cr6,0x82149e8c
	if (!cr6.getEQ()) goto loc_82149E8C;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,35104
	r12.u64 = r12.u64 | 35104;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,35104
	r12.u64 = r12.u64 | 35104;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,84
	ctx.r5.s64 = r31.s64 + 84;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149E8C:
	// lwz r11,80(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149f04
	if (!cr6.getEQ()) goto loc_82149F04;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,35520
	r12.u64 = r12.u64 | 35520;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,35520
	r12.u64 = r12.u64 | 35520;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,80
	ctx.r5.s64 = r31.s64 + 80;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82149eec
	if (cr6.getEQ()) goto loc_82149EEC;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,88(r31)
	PPC_STORE_U32(r31.u32 + 88, ctx.r3.u32);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// b 0x82149efc
	goto loc_82149EFC;
loc_82149EEC:
	// lwz r3,84(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,88(r31)
	PPC_STORE_U32(r31.u32 + 88, ctx.r3.u32);
	// lwz r3,84(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 84);
loc_82149EFC:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r3.u32);
loc_82149F04:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r11,-32176
	r29.s64 = r11.s64 + -32176;
	// bne cr6,0x82149f50
	if (!cr6.getEQ()) goto loc_82149F50;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,35936
	r12.u64 = r12.u64 | 35936;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,35936
	r12.u64 = r12.u64 | 35936;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_82149F50:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82149fc8
	if (!cr6.getEQ()) goto loc_82149FC8;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,36352
	r12.u64 = r12.u64 | 36352;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,36352
	r12.u64 = r12.u64 | 36352;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82149fb0
	if (cr6.getEQ()) goto loc_82149FB0;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x82149fc0
	goto loc_82149FC0;
loc_82149FB0:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_82149FC0:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r3.u32);
loc_82149FC8:
	// lwz r11,148(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 148);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r29,r11,24096
	r29.s64 = r11.s64 + 24096;
	// bne cr6,0x8214a014
	if (!cr6.getEQ()) goto loc_8214A014;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,36768
	r12.u64 = r12.u64 | 36768;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,36768
	r12.u64 = r12.u64 | 36768;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,148
	ctx.r5.s64 = r31.s64 + 148;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_8214A014:
	// lwz r11,144(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 144);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214a08c
	if (!cr6.getEQ()) goto loc_8214A08C;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,37184
	r12.u64 = r12.u64 | 37184;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,37184
	r12.u64 = r12.u64 | 37184;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,144
	ctx.r5.s64 = r31.s64 + 144;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,144(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 144);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214a074
	if (cr6.getEQ()) goto loc_8214A074;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,152(r31)
	PPC_STORE_U32(r31.u32 + 152, ctx.r3.u32);
	// lwz r3,144(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 144);
	// b 0x8214a084
	goto loc_8214A084;
loc_8214A074:
	// lwz r3,148(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 148);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,152(r31)
	PPC_STORE_U32(r31.u32 + 152, ctx.r3.u32);
	// lwz r3,148(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 148);
loc_8214A084:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,156(r31)
	PPC_STORE_U32(r31.u32 + 156, ctx.r3.u32);
loc_8214A08C:
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r29,r11,24088
	r29.s64 = r11.s64 + 24088;
	// bne cr6,0x8214a0d8
	if (!cr6.getEQ()) goto loc_8214A0D8;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,37600
	r12.u64 = r12.u64 | 37600;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,37600
	r12.u64 = r12.u64 | 37600;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,132
	ctx.r5.s64 = r31.s64 + 132;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_8214A0D8:
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214a150
	if (!cr6.getEQ()) goto loc_8214A150;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,38016
	r12.u64 = r12.u64 | 38016;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,38016
	r12.u64 = r12.u64 | 38016;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,128
	ctx.r5.s64 = r31.s64 + 128;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214a138
	if (cr6.getEQ()) goto loc_8214A138;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,136(r31)
	PPC_STORE_U32(r31.u32 + 136, ctx.r3.u32);
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// b 0x8214a148
	goto loc_8214A148;
loc_8214A138:
	// lwz r3,132(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,136(r31)
	PPC_STORE_U32(r31.u32 + 136, ctx.r3.u32);
	// lwz r3,132(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 132);
loc_8214A148:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,140(r31)
	PPC_STORE_U32(r31.u32 + 140, ctx.r3.u32);
loc_8214A150:
	// lwz r11,116(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r11,-32184
	r29.s64 = r11.s64 + -32184;
	// bne cr6,0x8214a19c
	if (!cr6.getEQ()) goto loc_8214A19C;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,38432
	r12.u64 = r12.u64 | 38432;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,38432
	r12.u64 = r12.u64 | 38432;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,116
	ctx.r5.s64 = r31.s64 + 116;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_8214A19C:
	// lwz r11,112(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214a214
	if (!cr6.getEQ()) goto loc_8214A214;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,38848
	r12.u64 = r12.u64 | 38848;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,38848
	r12.u64 = r12.u64 | 38848;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,112
	ctx.r5.s64 = r31.s64 + 112;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,112(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214a1fc
	if (cr6.getEQ()) goto loc_8214A1FC;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,120(r31)
	PPC_STORE_U32(r31.u32 + 120, ctx.r3.u32);
	// lwz r3,112(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// b 0x8214a20c
	goto loc_8214A20C;
loc_8214A1FC:
	// lwz r3,116(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,120(r31)
	PPC_STORE_U32(r31.u32 + 120, ctx.r3.u32);
	// lwz r3,116(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 116);
loc_8214A20C:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,124(r31)
	PPC_STORE_U32(r31.u32 + 124, ctx.r3.u32);
loc_8214A214:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r29,r11,24072
	r29.s64 = r11.s64 + 24072;
	// bne cr6,0x8214a260
	if (!cr6.getEQ()) goto loc_8214A260;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,39264
	r12.u64 = r12.u64 | 39264;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,39264
	r12.u64 = r12.u64 | 39264;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,20
	ctx.r5.s64 = r31.s64 + 20;
	// bl 0x82090420
	sub_82090420(ctx, base);
loc_8214A260:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214a2d8
	if (!cr6.getEQ()) goto loc_8214A2D8;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,39680
	r12.u64 = r12.u64 | 39680;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lis r12,0
	r12.s64 = 0;
	// ori r12,r12,39680
	r12.u64 = r12.u64 | 39680;
	// add r3,r1,r12
	ctx.r3.u64 = ctx.r1.u64 + r12.u64;
	// addi r5,r31,16
	ctx.r5.s64 = r31.s64 + 16;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214a2c0
	if (cr6.getEQ()) goto loc_8214A2C0;
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// b 0x8214a2d0
	goto loc_8214A2D0;
loc_8214A2C0:
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// bl 0x8239bc60
	sub_8239BC60(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
loc_8214A2D0:
	// bl 0x8239bc68
	sub_8239BC68(ctx, base);
	// stw r3,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r3.u32);
loc_8214A2D8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,24080
	ctx.r4.s64 = r11.s64 + 24080;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,160
	ctx.r3.s64 = r31.s64 + 160;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32192
	ctx.r4.s64 = r11.s64 + -32192;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,64
	ctx.r3.s64 = r31.s64 + 64;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,24148
	ctx.r4.s64 = r11.s64 + 24148;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,32
	ctx.r3.s64 = r31.s64 + 32;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,24124
	ctx.r4.s64 = r11.s64 + 24124;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,96
	ctx.r3.s64 = r31.s64 + 96;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,24116
	ctx.r4.s64 = r11.s64 + 24116;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,48
	ctx.r3.s64 = r31.s64 + 48;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32208
	ctx.r4.s64 = r11.s64 + -32208;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,192
	ctx.r3.s64 = r31.s64 + 192;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32224
	ctx.r4.s64 = r11.s64 + -32224;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,208
	ctx.r3.s64 = r31.s64 + 208;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32236
	ctx.r4.s64 = r11.s64 + -32236;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,224
	ctx.r3.s64 = r31.s64 + 224;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32248
	ctx.r4.s64 = r11.s64 + -32248;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,240
	ctx.r3.s64 = r31.s64 + 240;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32264
	ctx.r4.s64 = r11.s64 + -32264;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,256
	ctx.r3.s64 = r31.s64 + 256;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32276
	ctx.r4.s64 = r11.s64 + -32276;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,272
	ctx.r3.s64 = r31.s64 + 272;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32292
	ctx.r4.s64 = r11.s64 + -32292;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,288
	ctx.r3.s64 = r31.s64 + 288;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32304
	ctx.r4.s64 = r11.s64 + -32304;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,304
	ctx.r3.s64 = r31.s64 + 304;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32320
	ctx.r4.s64 = r11.s64 + -32320;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,320
	ctx.r3.s64 = r31.s64 + 320;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32336
	ctx.r4.s64 = r11.s64 + -32336;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,336
	ctx.r3.s64 = r31.s64 + 336;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32352
	ctx.r4.s64 = r11.s64 + -32352;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,352
	ctx.r3.s64 = r31.s64 + 352;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// li r6,-1
	ctx.r6.s64 = -1;
	// addi r4,r11,-32368
	ctx.r4.s64 = r11.s64 + -32368;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,368
	ctx.r3.s64 = r31.s64 + 368;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32392
	ctx.r4.s64 = r11.s64 + -32392;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,384
	ctx.r3.s64 = r31.s64 + 384;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32412
	ctx.r4.s64 = r11.s64 + -32412;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,400
	ctx.r3.s64 = r31.s64 + 400;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r4,r11,-32416
	ctx.r4.s64 = r11.s64 + -32416;
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r31,416
	ctx.r3.s64 = r31.s64 + 416;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// lis r6,-32254
	ctx.r6.s64 = -2113798144;
	// lis r5,-32254
	ctx.r5.s64 = -2113798144;
	// lis r4,-32254
	ctx.r4.s64 = -2113798144;
	// lis r3,-32254
	ctx.r3.s64 = -2113798144;
	// lis r31,-32254
	r31.s64 = -2113798144;
	// lis r30,-32254
	r30.s64 = -2113798144;
	// addi r11,r11,-32428
	r11.s64 = r11.s64 + -32428;
	// addi r10,r10,-32440
	ctx.r10.s64 = ctx.r10.s64 + -32440;
	// addi r9,r9,-32456
	ctx.r9.s64 = ctx.r9.s64 + -32456;
	// addi r8,r8,-32468
	ctx.r8.s64 = ctx.r8.s64 + -32468;
	// addi r7,r7,-32484
	ctx.r7.s64 = ctx.r7.s64 + -32484;
	// addi r6,r6,-32500
	ctx.r6.s64 = ctx.r6.s64 + -32500;
	// addi r5,r5,-32516
	ctx.r5.s64 = ctx.r5.s64 + -32516;
	// addi r4,r4,-32524
	ctx.r4.s64 = ctx.r4.s64 + -32524;
	// addi r3,r3,-32532
	ctx.r3.s64 = ctx.r3.s64 + -32532;
	// addi r31,r31,-32540
	r31.s64 = r31.s64 + -32540;
	// addi r30,r30,-32548
	r30.s64 = r30.s64 + -32548;
	// lis r29,-32254
	r29.s64 = -2113798144;
	// stw r31,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r31.u32);
	// lis r31,-32254
	r31.s64 = -2113798144;
	// stw r30,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r30.u32);
	// addi r29,r29,-32556
	r29.s64 = r29.s64 + -32556;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// lis r28,-32254
	r28.s64 = -2113798144;
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// addi r30,r31,-32568
	r30.s64 = r31.s64 + -32568;
	// stw r9,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r9.u32);
	// addi r28,r28,-32576
	r28.s64 = r28.s64 + -32576;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// lis r31,-32254
	r31.s64 = -2113798144;
	// stw r7,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r7.u32);
	// lis r27,-32254
	r27.s64 = -2113798144;
	// stw r29,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r29.u32);
	// addi r29,r31,-32588
	r29.s64 = r31.s64 + -32588;
	// stw r6,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r6.u32);
	// addi r27,r27,-32596
	r27.s64 = r27.s64 + -32596;
	// stw r5,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r5.u32);
	// lis r31,-32254
	r31.s64 = -2113798144;
	// stw r28,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r28.u32);
	// lis r26,-32254
	r26.s64 = -2113798144;
	// stw r4,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r4.u32);
	// addi r28,r31,-32604
	r28.s64 = r31.s64 + -32604;
	// stw r3,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r3.u32);
	// addi r26,r26,-32612
	r26.s64 = r26.s64 + -32612;
	// lis r31,-32254
	r31.s64 = -2113798144;
	// stw r27,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r27.u32);
	// lis r25,-32254
	r25.s64 = -2113798144;
	// addi r27,r31,-32620
	r27.s64 = r31.s64 + -32620;
	// addi r25,r25,-32628
	r25.s64 = r25.s64 + -32628;
	// lis r31,-32254
	r31.s64 = -2113798144;
	// stw r26,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r26.u32);
	// lis r24,-32254
	r24.s64 = -2113798144;
	// addi r26,r31,-32636
	r26.s64 = r31.s64 + -32636;
	// addi r24,r24,-32644
	r24.s64 = r24.s64 + -32644;
	// lis r31,-32254
	r31.s64 = -2113798144;
	// stw r25,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r25.u32);
	// lis r23,-32254
	r23.s64 = -2113798144;
	// addi r25,r31,-32652
	r25.s64 = r31.s64 + -32652;
	// addi r23,r23,-32660
	r23.s64 = r23.s64 + -32660;
	// lis r31,-32254
	r31.s64 = -2113798144;
	// stw r24,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r24.u32);
	// lis r22,-32254
	r22.s64 = -2113798144;
	// addi r24,r31,-32668
	r24.s64 = r31.s64 + -32668;
	// addi r22,r22,-32676
	r22.s64 = r22.s64 + -32676;
	// lis r31,-32254
	r31.s64 = -2113798144;
	// stw r23,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r23.u32);
	// lis r21,-32254
	r21.s64 = -2113798144;
	// addi r23,r31,-32684
	r23.s64 = r31.s64 + -32684;
	// addi r21,r21,-32692
	r21.s64 = r21.s64 + -32692;
	// lis r31,-32254
	r31.s64 = -2113798144;
	// stw r22,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r22.u32);
	// lis r20,-32254
	r20.s64 = -2113798144;
	// addi r22,r31,-32700
	r22.s64 = r31.s64 + -32700;
	// addi r20,r20,-32708
	r20.s64 = r20.s64 + -32708;
	// lis r31,-32254
	r31.s64 = -2113798144;
	// stw r21,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r21.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r21,r31,-32716
	r21.s64 = r31.s64 + -32716;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// stw r20,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r20.u32);
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// lis r6,-32254
	ctx.r6.s64 = -2113798144;
	// lis r5,-32255
	ctx.r5.s64 = -2113863680;
	// lis r4,-32255
	ctx.r4.s64 = -2113863680;
	// lis r3,-32255
	ctx.r3.s64 = -2113863680;
	// lis r31,-32255
	r31.s64 = -2113863680;
	// addi r11,r11,-32724
	r11.s64 = r11.s64 + -32724;
	// addi r10,r10,-32732
	ctx.r10.s64 = ctx.r10.s64 + -32732;
	// addi r9,r9,-32740
	ctx.r9.s64 = ctx.r9.s64 + -32740;
	// addi r8,r8,-32748
	ctx.r8.s64 = ctx.r8.s64 + -32748;
	// addi r7,r7,-32756
	ctx.r7.s64 = ctx.r7.s64 + -32756;
	// addi r6,r6,-32764
	ctx.r6.s64 = ctx.r6.s64 + -32764;
	// addi r5,r5,32756
	ctx.r5.s64 = ctx.r5.s64 + 32756;
	// addi r4,r4,32744
	ctx.r4.s64 = ctx.r4.s64 + 32744;
	// addi r3,r3,32732
	ctx.r3.s64 = ctx.r3.s64 + 32732;
	// addi r20,r31,32724
	r20.s64 = r31.s64 + 32724;
	// lis r31,-32255
	r31.s64 = -2113863680;
	// stw r11,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r11.u32);
	// stw r30,216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 216, r30.u32);
	// addi r19,r31,32716
	r19.s64 = r31.s64 + 32716;
	// stw r29,220(r1)
	PPC_STORE_U32(ctx.r1.u32 + 220, r29.u32);
	// lis r31,-32255
	r31.s64 = -2113863680;
	// stw r28,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, r28.u32);
	// stw r10,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r10.u32);
	// addi r29,r1,96
	r29.s64 = ctx.r1.s64 + 96;
	// addi r18,r31,32708
	r18.s64 = r31.s64 + 32708;
	// stw r9,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, ctx.r9.u32);
	// lis r31,-32255
	r31.s64 = -2113863680;
	// stw r8,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, ctx.r8.u32);
	// stw r7,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, ctx.r7.u32);
	// addi r17,r31,32700
	r17.s64 = r31.s64 + 32700;
	// stw r6,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, ctx.r6.u32);
	// lis r31,-32255
	r31.s64 = -2113863680;
	// stw r5,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, ctx.r5.u32);
	// stw r4,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, ctx.r4.u32);
	// addi r16,r31,32688
	r16.s64 = r31.s64 + 32688;
	// stw r3,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, ctx.r3.u32);
	// lis r31,-32255
	r31.s64 = -2113863680;
	// stw r27,228(r1)
	PPC_STORE_U32(ctx.r1.u32 + 228, r27.u32);
	// stw r26,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, r26.u32);
	// addi r15,r31,32680
	r15.s64 = r31.s64 + 32680;
	// stw r25,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, r25.u32);
	// lis r31,-32255
	r31.s64 = -2113863680;
	// stw r24,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, r24.u32);
	// stw r23,244(r1)
	PPC_STORE_U32(ctx.r1.u32 + 244, r23.u32);
	// addi r14,r31,32672
	r14.s64 = r31.s64 + 32672;
	// stw r22,248(r1)
	PPC_STORE_U32(ctx.r1.u32 + 248, r22.u32);
	// lis r31,-32255
	r31.s64 = -2113863680;
	// stw r21,252(r1)
	PPC_STORE_U32(ctx.r1.u32 + 252, r21.u32);
	// stw r20,256(r1)
	PPC_STORE_U32(ctx.r1.u32 + 256, r20.u32);
	// addi r31,r31,32664
	r31.s64 = r31.s64 + 32664;
	// stw r19,260(r1)
	PPC_STORE_U32(ctx.r1.u32 + 260, r19.u32);
	// stw r18,264(r1)
	PPC_STORE_U32(ctx.r1.u32 + 264, r18.u32);
	// stw r17,268(r1)
	PPC_STORE_U32(ctx.r1.u32 + 268, r17.u32);
	// stw r16,272(r1)
	PPC_STORE_U32(ctx.r1.u32 + 272, r16.u32);
	// stw r15,276(r1)
	PPC_STORE_U32(ctx.r1.u32 + 276, r15.u32);
	// stw r31,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r31.u32);
	// lis r31,-32255
	r31.s64 = -2113863680;
	// stw r14,280(r1)
	PPC_STORE_U32(ctx.r1.u32 + 280, r14.u32);
	// addi r31,r31,32652
	r31.s64 = r31.s64 + 32652;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// lis r31,-32255
	r31.s64 = -2113863680;
	// addi r31,r31,32640
	r31.s64 = r31.s64 + 32640;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// lis r31,-31994
	r31.s64 = -2096758784;
	// addi r31,r31,26616
	r31.s64 = r31.s64 + 26616;
	// mr r30,r31
	r30.u64 = r31.u64;
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r11,284(r1)
	PPC_STORE_U32(ctx.r1.u32 + 284, r11.u32);
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,288(r1)
	PPC_STORE_U32(ctx.r1.u32 + 288, r11.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r11,292(r1)
	PPC_STORE_U32(ctx.r1.u32 + 292, r11.u32);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r28,r11,32628
	r28.s64 = r11.s64 + 32628;
loc_8214A790:
	// li r7,-1
	ctx.r7.s64 = -1;
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// li r6,-1
	ctx.r6.s64 = -1;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// addi r11,r31,800
	r11.s64 = r31.s64 + 800;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8214a790
	if (cr6.getLT()) goto loc_8214A790;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,9
	ctx.r3.s64 = 9;
	// addi r31,r11,24752
	r31.s64 = r11.s64 + 24752;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r30,r11,32620
	r30.s64 = r11.s64 + 32620;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,20
	ctx.r3.s64 = 20;
	// addi r30,r11,32608
	r30.s64 = r11.s64 + 32608;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,22
	ctx.r3.s64 = 22;
	// addi r30,r11,32596
	r30.s64 = r11.s64 + 32596;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,23
	ctx.r3.s64 = 23;
	// addi r30,r11,32584
	r30.s64 = r11.s64 + 32584;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,24
	ctx.r3.s64 = 24;
	// addi r30,r11,32572
	r30.s64 = r11.s64 + 32572;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,25
	ctx.r3.s64 = 25;
	// addi r30,r11,32564
	r30.s64 = r11.s64 + 32564;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,26
	ctx.r3.s64 = 26;
	// addi r30,r11,32552
	r30.s64 = r11.s64 + 32552;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,27
	ctx.r3.s64 = 27;
	// addi r30,r11,32540
	r30.s64 = r11.s64 + 32540;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,28
	ctx.r3.s64 = 28;
	// addi r30,r11,32532
	r30.s64 = r11.s64 + 32532;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,29
	ctx.r3.s64 = 29;
	// addi r30,r11,32520
	r30.s64 = r11.s64 + 32520;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,30
	ctx.r3.s64 = 30;
	// addi r30,r11,32508
	r30.s64 = r11.s64 + 32508;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,31
	ctx.r3.s64 = 31;
	// addi r30,r11,32492
	r30.s64 = r11.s64 + 32492;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r30,r11,32480
	r30.s64 = r11.s64 + 32480;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,33
	ctx.r3.s64 = 33;
	// addi r30,r11,32472
	r30.s64 = r11.s64 + 32472;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,34
	ctx.r3.s64 = 34;
	// addi r30,r11,32464
	r30.s64 = r11.s64 + 32464;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,35
	ctx.r3.s64 = 35;
	// addi r30,r11,32456
	r30.s64 = r11.s64 + 32456;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,36
	ctx.r3.s64 = 36;
	// addi r30,r11,32444
	r30.s64 = r11.s64 + 32444;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,37
	ctx.r3.s64 = 37;
	// addi r30,r11,32436
	r30.s64 = r11.s64 + 32436;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,38
	ctx.r3.s64 = 38;
	// addi r30,r11,32420
	r30.s64 = r11.s64 + 32420;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,39
	ctx.r3.s64 = 39;
	// addi r30,r11,32408
	r30.s64 = r11.s64 + 32408;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,41
	ctx.r3.s64 = 41;
	// addi r30,r11,32396
	r30.s64 = r11.s64 + 32396;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,43
	ctx.r3.s64 = 43;
	// addi r30,r11,32384
	r30.s64 = r11.s64 + 32384;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,45
	ctx.r3.s64 = 45;
	// addi r30,r11,32372
	r30.s64 = r11.s64 + 32372;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// li r3,46
	ctx.r3.s64 = 46;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// li r3,48
	ctx.r3.s64 = 48;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r3,50
	ctx.r3.s64 = 50;
	// addi r30,r11,32360
	r30.s64 = r11.s64 + 32360;
	// bl 0x82115958
	sub_82115958(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,68
	ctx.r6.s64 = 68;
	// li r7,44
	ctx.r7.s64 = 44;
	// bl 0x82146418
	sub_82146418(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_8214AB68"))) PPC_WEAK_FUNC(sub_8214AB68);
PPC_FUNC_IMPL(__imp__sub_8214AB68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r12,r1,-16
	r12.s64 = ctx.r1.s64 + -16;
	// bl 0x823ed528
	// stwu r1,-320(r1)
	ea = -320 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,0(r5)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f13,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x8214ad70
	if (!cr6.getGT()) goto loc_8214AD70;
	// lfs f11,4(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 4);
	ctx.f11.f64 = double(temp.f32);
	// fcmpu cr6,f11,f13
	cr6.compare(ctx.f11.f64, ctx.f13.f64);
	// ble cr6,0x8214ad70
	if (!cr6.getGT()) goto loc_8214AD70;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lfs f12,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,3060
	r11.s64 = r11.s64 + 3060;
	// lfs f13,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// beq cr6,0x8214abe4
	if (cr6.getEQ()) goto loc_8214ABE4;
	// lwz r8,8(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// fmuls f11,f0,f13
	ctx.f11.f64 = double(float(f0.f64 * ctx.f13.f64));
	// extsw r11,r8
	r11.s64 = ctx.r8.s32;
	// std r11,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, r11.u64);
	// lfd f10,160(r1)
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f10,f10
	ctx.f10.f64 = double(ctx.f10.s64);
	// frsp f10,f10
	ctx.f10.f64 = double(float(ctx.f10.f64));
	// fdivs f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 / ctx.f10.f64));
	// fsubs f30,f12,f11
	f30.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// b 0x8214ac04
	goto loc_8214AC04;
loc_8214ABE4:
	// lwz r8,12(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// fmuls f11,f11,f13
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = double(float(ctx.f11.f64 * ctx.f13.f64));
	// extsw r11,r8
	r11.s64 = ctx.r8.s32;
	// std r11,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, r11.u64);
	// lfd f10,160(r1)
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f10,f10
	ctx.f10.f64 = double(ctx.f10.s64);
	// frsp f10,f10
	ctx.f10.f64 = double(float(ctx.f10.f64));
	// fdivs f30,f11,f10
	f30.f64 = double(float(ctx.f11.f64 / ctx.f10.f64));
loc_8214AC04:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// fmuls f13,f0,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f0.f64 * ctx.f13.f64));
	// extsw r11,r11
	r11.s64 = r11.s32;
	// beq cr6,0x8214ac34
	if (cr6.getEQ()) goto loc_8214AC34;
	// std r11,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, r11.u64);
	// lfd f11,160(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// fdivs f13,f13,f11
	ctx.f13.f64 = double(float(ctx.f13.f64 / ctx.f11.f64));
	// fsubs f31,f12,f13
	f31.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// b 0x8214ac48
	goto loc_8214AC48;
loc_8214AC34:
	// std r11,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, r11.u64);
	// lfd f12,160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// fdivs f31,f13,f12
	f31.f64 = double(float(ctx.f13.f64 / ctx.f12.f64));
loc_8214AC48:
	// lwz r11,428(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 428);
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// lwz r8,420(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 420);
	// cntlzw r9,r9
	ctx.r9.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// lwz r7,412(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 412);
	// lwz r6,404(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 404);
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// extsw r7,r7
	ctx.r7.s64 = ctx.r7.s32;
	// lfs f13,4(r4)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// extsw r6,r6
	ctx.r6.s64 = ctx.r6.s32;
	// lfs f12,4(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,0(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// fadds f29,f12,f13
	f29.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// std r11,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, r11.u64);
	// rlwinm r11,r10,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// rlwinm r10,r9,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// std r8,168(r1)
	PPC_STORE_U64(ctx.r1.u32 + 168, ctx.r8.u64);
	// std r7,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.r7.u64);
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// std r6,184(r1)
	PPC_STORE_U64(ctx.r1.u32 + 184, ctx.r6.u64);
	// xori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 ^ 1;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// fadds f28,f11,f0
	f28.f64 = double(float(ctx.f11.f64 + f0.f64));
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// fsubs f27,f13,f12
	f27.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// fsubs f26,f11,f0
	f26.f64 = double(float(ctx.f11.f64 - f0.f64));
	// lwz r31,436(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 436);
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// std r10,200(r1)
	PPC_STORE_U64(ctx.r1.u32 + 200, ctx.r10.u64);
	// lfd f0,160(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// lfd f13,168(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 168);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f12,176(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lfd f11,184(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 184);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// lfd f10,192(r1)
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// lfd f9,200(r1)
	ctx.f9.u64 = PPC_LOAD_U64(ctx.r1.u32 + 200);
	// fcfid f10,f10
	ctx.f10.f64 = double(ctx.f10.s64);
	// frsp f8,f0
	ctx.f8.f64 = double(float(f0.f64));
	// lfs f0,6592(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6592);
	f0.f64 = double(temp.f32);
	// fcfid f9,f9
	ctx.f9.f64 = double(ctx.f9.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// frsp f25,f10
	f25.f64 = double(float(ctx.f10.f64));
	// fmuls f23,f8,f0
	f23.f64 = double(float(ctx.f8.f64 * f0.f64));
	// frsp f24,f9
	f24.f64 = double(float(ctx.f9.f64));
	// fmuls f22,f13,f0
	f22.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fmuls f21,f12,f0
	f21.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f20,f11,f0
	f20.f64 = double(float(ctx.f11.f64 * f0.f64));
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// fmr f1,f20
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f20.f64;
	// li r10,1
	ctx.r10.s64 = 1;
	// fmr f2,f21
	ctx.f2.f64 = f21.f64;
	// fmr f3,f22
	ctx.f3.f64 = f22.f64;
	// stw r31,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r31.u32);
	// fmr f4,f23
	ctx.f4.f64 = f23.f64;
	// fmr f5,f26
	ctx.f5.f64 = f26.f64;
	// fmr f6,f27
	ctx.f6.f64 = f27.f64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// fmr f7,f28
	ctx.f7.f64 = f28.f64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// fmr f8,f29
	ctx.f8.f64 = f29.f64;
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// fmr f9,f24
	ctx.f9.f64 = f24.f64;
	// fmr f10,f25
	ctx.f10.f64 = f25.f64;
	// fmr f11,f31
	ctx.f11.f64 = f31.f64;
	// fmr f12,f30
	ctx.f12.f64 = f30.f64;
	// bl 0x820982e0
	sub_820982E0(ctx, base);
loc_8214AD70:
	// addi r1,r1,320
	ctx.r1.s64 = ctx.r1.s64 + 320;
	// addi r12,r1,-16
	r12.s64 = ctx.r1.s64 + -16;
	// bl 0x823ed574
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214AD90"))) PPC_WEAK_FUNC(sub_8214AD90);
PPC_FUNC_IMPL(__imp__sub_8214AD90) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lfs f0,-6368(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lfs f13,28996(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28996);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f13,-30732(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -30732);
	ctx.f13.f64 = double(temp.f32);
	// stfs f0,28996(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 28996, temp.u32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blelr cr6
	if (!cr6.getGT()) return;
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,28996(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 28996, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214ADC8"))) PPC_WEAK_FUNC(sub_8214ADC8);
PPC_FUNC_IMPL(__imp__sub_8214ADC8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed548
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// fmr f30,f2
	f30.f64 = ctx.f2.f64;
	// mr r30,r9
	r30.u64 = ctx.r9.u64;
	// fmr f28,f3
	f28.f64 = ctx.f3.f64;
	// mr r29,r10
	r29.u64 = ctx.r10.u64;
	// fmr f29,f4
	f29.f64 = ctx.f4.f64;
	// bl 0x82117908
	sub_82117908(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stfs f28,4(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// lfs f0,-30752(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -30752);
	f0.f64 = double(temp.f32);
	// fmuls f13,f31,f0
	ctx.f13.f64 = double(float(f31.f64 * f0.f64));
	// stfs f13,0(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// fmuls f0,f30,f0
	f0.f64 = double(float(f30.f64 * f0.f64));
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// lfs f0,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// fmuls f13,f31,f29
	ctx.f13.f64 = double(float(f31.f64 * f29.f64));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lbz r11,87(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 87);
	// stb r11,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r11.u8);
	// lfs f0,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	f0.f64 = double(temp.f32);
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// lbz r11,87(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 87);
	// stb r11,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r11.u8);
	// lfs f0,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	f0.f64 = double(temp.f32);
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// stfs f13,16(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// stb r29,27(r31)
	PPC_STORE_U8(r31.u32 + 27, r29.u8);
	// lbz r11,87(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 87);
	// stb r11,26(r31)
	PPC_STORE_U8(r31.u32 + 26, r11.u8);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lfs f0,28996(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28996);
	f0.f64 = double(temp.f32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lfs f13,-30728(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -30728);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fmadds f0,f30,f29,f0
	f0.f64 = double(float(f30.f64 * f29.f64 + f0.f64));
	// stfs f0,20(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed594
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8214AE90"))) PPC_WEAK_FUNC(sub_8214AE90);
PPC_FUNC_IMPL(__imp__sub_8214AE90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// addi r12,r1,-40
	r12.s64 = ctx.r1.s64 + -40;
	// bl 0x823ed544
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f30,f2
	f30.f64 = ctx.f2.f64;
	// mr r30,r9
	r30.u64 = ctx.r9.u64;
	// fmr f29,f3
	f29.f64 = ctx.f3.f64;
	// mr r31,r8
	r31.u64 = ctx.r8.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// lfs f28,6580(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f28.f64 = double(temp.f32);
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// fmr f2,f28
	ctx.f2.f64 = f28.f64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// fmr f1,f28
	ctx.f1.f64 = f28.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// fmr f4,f30
	ctx.f4.f64 = f30.f64;
	// fmr f5,f29
	ctx.f5.f64 = f29.f64;
	// bl 0x8214adc8
	sub_8214ADC8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f5,f29
	ctx.fpscr.disableFlushMode();
	ctx.f5.f64 = f29.f64;
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// fmr f4,f30
	ctx.f4.f64 = f30.f64;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// fmr f2,f28
	ctx.f2.f64 = f28.f64;
	// lfs f27,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f27.f64 = double(temp.f32);
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// bl 0x8214adc8
	sub_8214ADC8(ctx, base);
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// fmr f5,f29
	ctx.fpscr.disableFlushMode();
	ctx.f5.f64 = f29.f64;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// fmr f4,f30
	ctx.f4.f64 = f30.f64;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// fmr f2,f27
	ctx.f2.f64 = f27.f64;
	// fmr f1,f28
	ctx.f1.f64 = f28.f64;
	// bl 0x8214adc8
	sub_8214ADC8(ctx, base);
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// fmr f5,f29
	ctx.fpscr.disableFlushMode();
	ctx.f5.f64 = f29.f64;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// fmr f4,f30
	ctx.f4.f64 = f30.f64;
	// addi r3,r1,164
	ctx.r3.s64 = ctx.r1.s64 + 164;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// fmr f2,f27
	ctx.f2.f64 = f27.f64;
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// bl 0x8214adc8
	sub_8214ADC8(ctx, base);
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// bl 0x82098748
	sub_82098748(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r1,164
	ctx.r3.s64 = ctx.r1.s64 + 164;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// bl 0x820987a8
	sub_820987A8(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-40
	r12.s64 = ctx.r1.s64 + -40;
	// bl 0x823ed590
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8214AFC8"))) PPC_WEAK_FUNC(sub_8214AFC8);
PPC_FUNC_IMPL(__imp__sub_8214AFC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82117908
	sub_82117908(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r30,r11,26552
	r30.s64 = r11.s64 + 26552;
	// lhz r11,36(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 36);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// lhz r11,60(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 60);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// addi r11,r11,28184
	r11.s64 = r11.s64 + 28184;
	// addi r3,r11,320
	ctx.r3.s64 = r11.s64 + 320;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// lis r11,-32019
	r11.s64 = -2098397184;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// addi r30,r1,128
	r30.s64 = ctx.r1.s64 + 128;
	// lfs f31,25976(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25976);
	f31.f64 = double(temp.f32);
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// bl 0x8238b6a8
	sub_8238B6A8(ctx, base);
	// lbz r11,52(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 52);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,-30748
	r30.s64 = r11.s64 + -30748;
	// lis r11,-32019
	r11.s64 = -2098397184;
	// addi r29,r11,25972
	r29.s64 = r11.s64 + 25972;
	// beq cr6,0x8214b094
	if (cr6.getEQ()) goto loc_8214B094;
	// bl 0x82097b10
	sub_82097B10(ctx, base);
	// addi r8,r31,64
	ctx.r8.s64 = r31.s64 + 64;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lbz r9,1(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 1);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lfs f1,56(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 56);
	ctx.f1.f64 = double(temp.f32);
	// lfs f3,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// bl 0x8214ae90
	sub_8214AE90(ctx, base);
	// bl 0x82097b50
	sub_82097B50(ctx, base);
loc_8214B094:
	// lbz r11,28(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214b13c
	if (cr6.getEQ()) goto loc_8214B13C;
	// lbz r7,8(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lbz r10,9(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// li r9,255
	ctx.r9.s64 = 255;
	// lbz r6,10(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lfs f1,32(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 32);
	ctx.f1.f64 = double(temp.f32);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lfs f3,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f3.f64 = double(temp.f32);
	// std r7,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r7.u64);
	// lfs f0,6596(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6596);
	f0.f64 = double(temp.f32);
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// stfs f0,124(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// std r6,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r6.u64);
	// lfs f2,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f2.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f12,96(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// stfs f0,116(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// frsp f0,f12
	f0.f64 = double(float(ctx.f12.f64));
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// bl 0x8214ae90
	sub_8214AE90(ctx, base);
	// bl 0x82097b10
	sub_82097B10(ctx, base);
	// addi r8,r31,40
	ctx.r8.s64 = r31.s64 + 40;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lbz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 0);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lfs f1,32(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 32);
	ctx.f1.f64 = double(temp.f32);
	// lfs f3,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f2.f64 = double(temp.f32);
	// bl 0x8214ae90
	sub_8214AE90(ctx, base);
	// bl 0x82097b50
	sub_82097B50(ctx, base);
loc_8214B13C:
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8214B148"))) PPC_WEAK_FUNC(sub_8214B148);
PPC_FUNC_IMPL(__imp__sub_8214B148) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30724
	r11.s64 = r11.s64 + -30724;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x8214b17c
	if (cr6.getEQ()) goto loc_8214B17C;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214B17C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B190"))) PPC_WEAK_FUNC(sub_8214B190);
PPC_FUNC_IMPL(__imp__sub_8214B190) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30720
	r11.s64 = r11.s64 + -30720;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x8214b1c4
	if (cr6.getEQ()) goto loc_8214B1C4;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214B1C4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B1D8"))) PPC_WEAK_FUNC(sub_8214B1D8);
PPC_FUNC_IMPL(__imp__sub_8214B1D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30696
	r11.s64 = r11.s64 + -30696;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x821777e0
	sub_821777E0(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214b21c
	if (cr6.getEQ()) goto loc_8214B21C;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214B21C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B238"))) PPC_WEAK_FUNC(sub_8214B238);
PPC_FUNC_IMPL(__imp__sub_8214B238) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,14748
	r11.s64 = r11.s64 + 14748;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x8214b26c
	if (cr6.getEQ()) goto loc_8214B26C;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214B26C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B280"))) PPC_WEAK_FUNC(sub_8214B280);
PPC_FUNC_IMPL(__imp__sub_8214B280) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// lis r11,-31993
	r11.s64 = -2096693248;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r11,r11,29000
	r11.s64 = r11.s64 + 29000;
	// li r10,36
	ctx.r10.s64 = 36;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8214B294:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x8214b294
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8214B294;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B2A8"))) PPC_WEAK_FUNC(sub_8214B2A8);
PPC_FUNC_IMPL(__imp__sub_8214B2A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// addi r31,r11,-29352
	r31.s64 = r11.s64 + -29352;
loc_8214B2C4:
	// cmplwi cr6,r29,2
	cr6.compare<uint32_t>(r29.u32, 2, xer);
	// bne cr6,0x8214b2fc
	if (!cr6.getEQ()) goto loc_8214B2FC;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// ble cr6,0x8214b2fc
	if (!cr6.getGT()) goto loc_8214B2FC;
	// stw r3,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r3.u32);
loc_8214B2FC:
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// cmpwi cr6,r29,3
	cr6.compare<int32_t>(r29.s32, 3, xer);
	// blt cr6,0x8214b2c4
	if (cr6.getLT()) goto loc_8214B2C4;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8214B310"))) PPC_WEAK_FUNC(sub_8214B310);
PPC_FUNC_IMPL(__imp__sub_8214B310) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8214B33C:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8214b358
	if (cr6.getEQ()) goto loc_8214B358;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8214b35c
	if (!cr6.getEQ()) goto loc_8214B35C;
loc_8214B358:
	// li r11,1
	r11.s64 = 1;
loc_8214B35C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214b37c
	if (!cr6.getEQ()) goto loc_8214B37C;
	// lwz r3,76(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 76);
	// bl 0x82178ef0
	sub_82178EF0(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214b33c
	goto loc_8214B33C;
loc_8214B37C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B390"))) PPC_WEAK_FUNC(sub_8214B390);
PPC_FUNC_IMPL(__imp__sub_8214B390) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8214B3C4:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8214b3e0
	if (cr6.getEQ()) goto loc_8214B3E0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8214b3e4
	if (!cr6.getEQ()) goto loc_8214B3E4;
loc_8214B3E0:
	// li r11,1
	r11.s64 = 1;
loc_8214B3E4:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214b414
	if (!cr6.getEQ()) goto loc_8214B414;
	// lwz r3,76(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 76);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214b3c4
	goto loc_8214B3C4;
loc_8214B414:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B428"))) PPC_WEAK_FUNC(sub_8214B428);
PPC_FUNC_IMPL(__imp__sub_8214B428) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8214B45C:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8214b478
	if (cr6.getEQ()) goto loc_8214B478;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8214b47c
	if (!cr6.getEQ()) goto loc_8214B47C;
loc_8214B478:
	// li r11,1
	r11.s64 = 1;
loc_8214B47C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214b4ac
	if (!cr6.getEQ()) goto loc_8214B4AC;
	// lwz r3,76(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 76);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214b45c
	goto loc_8214B45C;
loc_8214B4AC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B4C0"))) PPC_WEAK_FUNC(sub_8214B4C0);
PPC_FUNC_IMPL(__imp__sub_8214B4C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8214B4F4:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8214b510
	if (cr6.getEQ()) goto loc_8214B510;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8214b514
	if (!cr6.getEQ()) goto loc_8214B514;
loc_8214B510:
	// li r11,1
	r11.s64 = 1;
loc_8214B514:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214b544
	if (!cr6.getEQ()) goto loc_8214B544;
	// lwz r3,76(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 76);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214b4f4
	goto loc_8214B4F4;
loc_8214B544:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B558"))) PPC_WEAK_FUNC(sub_8214B558);
PPC_FUNC_IMPL(__imp__sub_8214B558) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r31,1
	r31.s64 = 1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8214B58C:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8214b5a8
	if (cr6.getEQ()) goto loc_8214B5A8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8214b5ac
	if (!cr6.getEQ()) goto loc_8214B5AC;
loc_8214B5A8:
	// li r11,1
	r11.s64 = 1;
loc_8214B5AC:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214b5f0
	if (!cr6.getEQ()) goto loc_8214B5F0;
	// lwz r3,76(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 76);
	// bl 0x82177c38
	sub_82177C38(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214b5d8
	if (cr6.getEQ()) goto loc_8214B5D8;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214b58c
	goto loc_8214B58C;
loc_8214B5D8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8214B5F0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B608"))) PPC_WEAK_FUNC(sub_8214B608);
PPC_FUNC_IMPL(__imp__sub_8214B608) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8214B634:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8214b650
	if (cr6.getEQ()) goto loc_8214B650;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8214b654
	if (!cr6.getEQ()) goto loc_8214B654;
loc_8214B650:
	// li r11,1
	r11.s64 = 1;
loc_8214B654:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214b674
	if (!cr6.getEQ()) goto loc_8214B674;
	// lwz r3,76(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 76);
	// bl 0x82177c98
	sub_82177C98(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214b634
	goto loc_8214B634;
loc_8214B674:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B688"))) PPC_WEAK_FUNC(sub_8214B688);
PPC_FUNC_IMPL(__imp__sub_8214B688) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8214B6BC:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8214b6d8
	if (cr6.getEQ()) goto loc_8214B6D8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8214b6dc
	if (!cr6.getEQ()) goto loc_8214B6DC;
loc_8214B6D8:
	// li r11,1
	r11.s64 = 1;
loc_8214B6DC:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214b700
	if (!cr6.getEQ()) goto loc_8214B700;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r3,76(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 76);
	// bl 0x82177bc8
	sub_82177BC8(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214b6bc
	goto loc_8214B6BC;
loc_8214B700:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B718"))) PPC_WEAK_FUNC(sub_8214B718);
PPC_FUNC_IMPL(__imp__sub_8214B718) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8214B74C:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8214b768
	if (cr6.getEQ()) goto loc_8214B768;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8214b76c
	if (!cr6.getEQ()) goto loc_8214B76C;
loc_8214B768:
	// li r11,1
	r11.s64 = 1;
loc_8214B76C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214b790
	if (!cr6.getEQ()) goto loc_8214B790;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r3,76(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 76);
	// bl 0x82178f30
	sub_82178F30(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214b74c
	goto loc_8214B74C;
loc_8214B790:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B7A8"))) PPC_WEAK_FUNC(sub_8214B7A8);
PPC_FUNC_IMPL(__imp__sub_8214B7A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r4,8(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// li r29,0
	r29.s64 = 0;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r28,r29
	r28.u64 = r29.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x8214b7e0
	if (!cr6.getGT()) goto loc_8214B7E0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
loc_8214B7E0:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r29,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r29.u32);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// addi r11,r11,-30724
	r11.s64 = r11.s64 + -30724;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// li r11,-1
	r11.s64 = -1;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x8216c0e0
	sub_8216C0E0(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r10,1
	ctx.r10.s64 = 1;
	// lwz r9,88(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// stw r10,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r10.u32);
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bne cr6,0x8214b848
	if (!cr6.getEQ()) goto loc_8214B848;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// addi r3,r11,-29352
	ctx.r3.s64 = r11.s64 + -29352;
	// bl 0x82177a40
	sub_82177A40(ctx, base);
	// stw r3,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r3.u32);
loc_8214B848:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8214B850"))) PPC_WEAK_FUNC(sub_8214B850);
PPC_FUNC_IMPL(__imp__sub_8214B850) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lwz r11,344(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 344);
	// lwz r10,104(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 104);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B878"))) PPC_WEAK_FUNC(sub_8214B878);
PPC_FUNC_IMPL(__imp__sub_8214B878) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bnelr cr6
	if (!cr6.getEQ()) return;
	// lwz r3,8(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// b 0x82158ab8
	sub_82158AB8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214B894"))) PPC_WEAK_FUNC(sub_8214B894);
PPC_FUNC_IMPL(__imp__sub_8214B894) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B898"))) PPC_WEAK_FUNC(sub_8214B898);
PPC_FUNC_IMPL(__imp__sub_8214B898) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82159660
	sub_82159660(ctx, base);
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214b950
	if (!cr6.getEQ()) goto loc_8214B950;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8214b950
	if (cr6.getEQ()) goto loc_8214B950;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8214B8E8:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8214b904
	if (cr6.getEQ()) goto loc_8214B904;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8214b908
	if (!cr6.getEQ()) goto loc_8214B908;
loc_8214B904:
	// li r11,1
	r11.s64 = 1;
loc_8214B908:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214b950
	if (!cr6.getEQ()) goto loc_8214B950;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214b944
	if (cr6.getEQ()) goto loc_8214B944;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,44(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8214B944:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214b8e8
	goto loc_8214B8E8;
loc_8214B950:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B968"))) PPC_WEAK_FUNC(sub_8214B968);
PPC_FUNC_IMPL(__imp__sub_8214B968) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// addi r9,r11,-30640
	ctx.r9.s64 = r11.s64 + -30640;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r5,4
	ctx.r5.s64 = 4;
	// addi r8,r11,-30724
	ctx.r8.s64 = r11.s64 + -30724;
	// li r11,0
	r11.s64 = 0;
	// addi r10,r3,96
	ctx.r10.s64 = ctx.r3.s64 + 96;
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
	// addi r7,r7,-30724
	ctx.r7.s64 = ctx.r7.s64 + -30724;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// li r6,-1
	ctx.r6.s64 = -1;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stw r11,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, r11.u32);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r8,60(r3)
	PPC_STORE_U32(ctx.r3.u32 + 60, ctx.r8.u32);
	// stw r5,72(r3)
	PPC_STORE_U32(ctx.r3.u32 + 72, ctx.r5.u32);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// stw r7,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r7.u32);
	// lwz r9,-26072(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + -26072);
	// stw r11,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, r11.u32);
	// stw r6,16(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16, ctx.r6.u32);
	// stw r9,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r9.u32);
	// stw r6,156(r3)
	PPC_STORE_U32(ctx.r3.u32 + 156, ctx.r6.u32);
	// stw r3,108(r3)
	PPC_STORE_U32(ctx.r3.u32 + 108, ctx.r3.u32);
	// stw r11,112(r3)
	PPC_STORE_U32(ctx.r3.u32 + 112, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B9E8"))) PPC_WEAK_FUNC(sub_8214B9E8);
PPC_FUNC_IMPL(__imp__sub_8214B9E8) {
	PPC_FUNC_PROLOGUE();
	// stb r4,116(r3)
	PPC_STORE_U8(ctx.r3.u32 + 116, ctx.r4.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214B9F0"))) PPC_WEAK_FUNC(sub_8214B9F0);
PPC_FUNC_IMPL(__imp__sub_8214B9F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r11,r11,-30724
	r11.s64 = r11.s64 + -30724;
	// addi r10,r10,-30724
	ctx.r10.s64 = ctx.r10.s64 + -30724;
	// addi r9,r9,-30720
	ctx.r9.s64 = ctx.r9.s64 + -30720;
	// stw r11,100(r3)
	PPC_STORE_U32(ctx.r3.u32 + 100, r11.u32);
	// stw r10,60(r3)
	PPC_STORE_U32(ctx.r3.u32 + 60, ctx.r10.u32);
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214BA18"))) PPC_WEAK_FUNC(sub_8214BA18);
PPC_FUNC_IMPL(__imp__sub_8214BA18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32250
	r11.s64 = -2113536000;
	// addi r8,r3,40
	ctx.r8.s64 = ctx.r3.s64 + 40;
	// addi r7,r11,11808
	ctx.r7.s64 = r11.s64 + 11808;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// li r11,0
	r11.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r9,36
	ctx.r9.s64 = 36;
	// lwz r5,0(r7)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lfs f0,2688(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f0.f64 = double(temp.f32);
	// addi r10,r3,160
	ctx.r10.s64 = ctx.r3.s64 + 160;
	// stw r5,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r5.u32);
	// lwz r5,4(r7)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// stw r5,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r5.u32);
	// lwz r7,8(r7)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + 8);
	// stfs f0,52(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 52, temp.u32);
	// stb r6,56(r3)
	PPC_STORE_U8(ctx.r3.u32 + 56, ctx.r6.u8);
	// stw r11,124(r3)
	PPC_STORE_U32(ctx.r3.u32 + 124, r11.u32);
	// stb r11,116(r3)
	PPC_STORE_U8(ctx.r3.u32 + 116, r11.u8);
	// stb r11,140(r3)
	PPC_STORE_U8(ctx.r3.u32 + 140, r11.u8);
	// stw r7,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, ctx.r7.u32);
	// stw r11,152(r3)
	PPC_STORE_U32(ctx.r3.u32 + 152, r11.u32);
loc_8214BA6C:
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// stfs f0,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// stfs f0,288(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 288, temp.u32);
	// stw r11,144(r10)
	PPC_STORE_U32(ctx.r10.u32 + 144, r11.u32);
	// stw r11,432(r10)
	PPC_STORE_U32(ctx.r10.u32 + 432, r11.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bne cr6,0x8214ba6c
	if (!cr6.getEQ()) goto loc_8214BA6C;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stfs f0,80(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 80, temp.u32);
	// stfs f0,744(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 744, temp.u32);
	// stw r11,736(r3)
	PPC_STORE_U32(ctx.r3.u32 + 736, r11.u32);
	// stfs f0,92(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 92, temp.u32);
	// stw r11,144(r3)
	PPC_STORE_U32(ctx.r3.u32 + 144, r11.u32);
	// stb r11,148(r3)
	PPC_STORE_U8(ctx.r3.u32 + 148, r11.u8);
	// stb r11,32(r3)
	PPC_STORE_U8(ctx.r3.u32 + 32, r11.u8);
	// lfs f13,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	ctx.f13.f64 = double(temp.f32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stfs f13,764(r3)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 764, temp.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stw r11,748(r3)
	PPC_STORE_U32(ctx.r3.u32 + 748, r11.u32);
	// stb r11,752(r3)
	PPC_STORE_U8(ctx.r3.u32 + 752, r11.u8);
	// stb r11,753(r3)
	PPC_STORE_U8(ctx.r3.u32 + 753, r11.u8);
	// stw r11,756(r3)
	PPC_STORE_U32(ctx.r3.u32 + 756, r11.u32);
	// stb r10,740(r3)
	PPC_STORE_U8(ctx.r3.u32 + 740, ctx.r10.u8);
	// stw r11,84(r3)
	PPC_STORE_U32(ctx.r3.u32 + 84, r11.u32);
	// stb r11,88(r3)
	PPC_STORE_U8(ctx.r3.u32 + 88, r11.u8);
	// stw r11,760(r3)
	PPC_STORE_U32(ctx.r3.u32 + 760, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214BAE0"))) PPC_WEAK_FUNC(sub_8214BAE0);
PPC_FUNC_IMPL(__imp__sub_8214BAE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r11,r4,24
	r11.u64 = ctx.r4.u32 & 0xFF;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r4,0
	ctx.r4.s64 = 0;
	// beq cr6,0x8214bb50
	if (cr6.getEQ()) goto loc_8214BB50;
	// li r3,5524
	ctx.r3.s64 = 5524;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214bb34
	if (cr6.getEQ()) goto loc_8214BB34;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x82169160
	sub_82169160(ctx, base);
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8214BB34:
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8214BB50:
	// li r3,6144
	ctx.r3.s64 = 6144;
	// bl 0x8209d0f0
	sub_8209D0F0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214bb6c
	if (cr6.getEQ()) goto loc_8214BB6C;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x8216a5b0
	sub_8216A5B0(ctx, base);
	// b 0x8214bb70
	goto loc_8214BB70;
loc_8214BB6C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8214BB70:
	// stw r3,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r3.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214BB88"))) PPC_WEAK_FUNC(sub_8214BB88);
PPC_FUNC_IMPL(__imp__sub_8214BB88) {
	PPC_FUNC_PROLOGUE();
	// stw r4,104(r3)
	PPC_STORE_U32(ctx.r3.u32 + 104, ctx.r4.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214BB90"))) PPC_WEAK_FUNC(sub_8214BB90);
PPC_FUNC_IMPL(__imp__sub_8214BB90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// stw r11,104(r3)
	PPC_STORE_U32(ctx.r3.u32 + 104, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214BBA0"))) PPC_WEAK_FUNC(sub_8214BBA0);
PPC_FUNC_IMPL(__imp__sub_8214BBA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,156(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 156);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgelr cr6
	if (!cr6.getLT()) return;
	// lis r10,-31993
	ctx.r10.s64 = -2096693248;
	// li r11,0
	r11.s64 = 0;
	// addi r10,r10,29000
	ctx.r10.s64 = ctx.r10.s64 + 29000;
loc_8214BBB8:
	// lbzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x8214bbd4
	if (cr6.getEQ()) goto loc_8214BBD4;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,36
	cr6.compare<int32_t>(r11.s32, 36, xer);
	// blt cr6,0x8214bbb8
	if (cr6.getLT()) goto loc_8214BBB8;
	// blr 
	return;
loc_8214BBD4:
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r11,156(r3)
	PPC_STORE_U32(ctx.r3.u32 + 156, r11.u32);
	// stbx r9,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, ctx.r9.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214BBE8"))) PPC_WEAK_FUNC(sub_8214BBE8);
PPC_FUNC_IMPL(__imp__sub_8214BBE8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f30,-64(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -64, f30.u64);
	// stfd f31,-56(r1)
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// lwz r30,156(r4)
	r30.u64 = PPC_LOAD_U32(ctx.r4.u32 + 156);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r30,76
	r11.s64 = r30.s64 + 76;
	// rlwinm r28,r11,2,0,29
	r28.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// fmuls f30,f31,f2
	f30.f64 = double(float(f31.f64 * ctx.f2.f64));
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwzx r10,r28,r31
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + r31.u32);
	// addi r11,r30,148
	r11.s64 = r30.s64 + 148;
	// rlwinm r27,r11,2,0,29
	r27.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r29,r10,r3
	r29.s64 = ctx.r3.s64 - ctx.r10.s64;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwzx r11,r27,r31
	r11.u64 = PPC_LOAD_U32(r27.u32 + r31.u32);
	// cmplwi cr6,r29,30000
	cr6.compare<uint32_t>(r29.u32, 30000, xer);
	// subf r29,r11,r3
	r29.s64 = ctx.r3.s64 - r11.s64;
	// bge cr6,0x8214bc60
	if (!cr6.getLT()) goto loc_8214BC60;
	// lwzx r11,r28,r31
	r11.u64 = PPC_LOAD_U32(r28.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214bc60
	if (cr6.getEQ()) goto loc_8214BC60;
	// addi r11,r30,40
	r11.s64 = r30.s64 + 40;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f0,r11,r31
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + r31.u32);
	f0.f64 = double(temp.f32);
	// fadds f0,f30,f0
	f0.f64 = double(float(f30.f64 + f0.f64));
	// stfsx f0,r11,r31
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + r31.u32, temp.u32);
	// b 0x8214bc6c
	goto loc_8214BC6C;
loc_8214BC60:
	// addi r11,r30,40
	r11.s64 = r30.s64 + 40;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stfsx f30,r11,r31
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + r31.u32, temp.u32);
loc_8214BC6C:
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// cmplwi cr6,r29,5000
	cr6.compare<uint32_t>(r29.u32, 5000, xer);
	// stwx r3,r28,r31
	PPC_STORE_U32(r28.u32 + r31.u32, ctx.r3.u32);
	// bge cr6,0x8214bca0
	if (!cr6.getLT()) goto loc_8214BCA0;
	// lwzx r11,r27,r31
	r11.u64 = PPC_LOAD_U32(r27.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214bca0
	if (cr6.getEQ()) goto loc_8214BCA0;
	// addi r11,r30,112
	r11.s64 = r30.s64 + 112;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f0,r11,r31
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + r31.u32);
	f0.f64 = double(temp.f32);
	// fadds f0,f31,f0
	f0.f64 = double(float(f31.f64 + f0.f64));
	// stfsx f0,r11,r31
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + r31.u32, temp.u32);
	// b 0x8214bcac
	goto loc_8214BCAC;
loc_8214BCA0:
	// addi r11,r30,112
	r11.s64 = r30.s64 + 112;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stfsx f31,r11,r31
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + r31.u32, temp.u32);
loc_8214BCAC:
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// stwx r3,r27,r31
	PPC_STORE_U32(r27.u32 + r31.u32, ctx.r3.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-64(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// lfd f31,-56(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8214BCC8"))) PPC_WEAK_FUNC(sub_8214BCC8);
PPC_FUNC_IMPL(__imp__sub_8214BCC8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stb r30,753(r31)
	PPC_STORE_U8(r31.u32 + 753, r30.u8);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8214bd44
	if (!cr6.getEQ()) goto loc_8214BD44;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bge cr6,0x8214bd44
	if (!cr6.getLT()) goto loc_8214BD44;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-1384
	r11.s64 = r11.s64 + -1384;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214bd44
	if (cr6.getEQ()) goto loc_8214BD44;
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214bd44
	if (cr6.getEQ()) goto loc_8214BD44;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// rlwinm r10,r10,0,3,1
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFDFFFFFFF;
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
loc_8214BD44:
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r11,r31,160
	r11.s64 = r31.s64 + 160;
	// li r10,36
	ctx.r10.s64 = 36;
	// lfs f0,2688(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2688);
	f0.f64 = double(temp.f32);
loc_8214BD54:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stfs f0,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// stfs f0,288(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 288, temp.u32);
	// stw r30,144(r11)
	PPC_STORE_U32(r11.u32 + 144, r30.u32);
	// stw r30,432(r11)
	PPC_STORE_U32(r11.u32 + 432, r30.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bne cr6,0x8214bd54
	if (!cr6.getEQ()) goto loc_8214BD54;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214bdc8
	if (cr6.getEQ()) goto loc_8214BDC8;
	// lwz r3,24(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x8214bdac
	if (!cr6.getEQ()) goto loc_8214BDAC;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,2
	ctx.r4.s64 = 2;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8214BDAC:
	// lwz r3,24(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// li r4,4
	ctx.r4.s64 = 4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8214bddc
	goto loc_8214BDDC;
loc_8214BDC8:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,44(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8214BDDC:
	// li r11,1
	r11.s64 = 1;
	// stb r11,56(r31)
	PPC_STORE_U8(r31.u32 + 56, r11.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214BE00"))) PPC_WEAK_FUNC(sub_8214BE00);
PPC_FUNC_IMPL(__imp__sub_8214BE00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrldi r10,r4,32
	ctx.r10.u64 = ctx.r4.u64 & 0xFFFFFFFF;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfs f0,13968(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13968);
	f0.f64 = double(temp.f32);
	// stfs f0,80(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 80, temp.u32);
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stb r30,752(r31)
	PPC_STORE_U8(r31.u32 + 752, r30.u8);
	// stb r30,140(r31)
	PPC_STORE_U8(r31.u32 + 140, r30.u8);
	// lwz r11,60(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 60);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,132(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 132, temp.u32);
	// stfs f0,128(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 128, temp.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stb r30,88(r31)
	PPC_STORE_U8(r31.u32 + 88, r30.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214BE78"))) PPC_WEAK_FUNC(sub_8214BE78);
PPC_FUNC_IMPL(__imp__sub_8214BE78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r10,0
	ctx.r10.s64 = 0;
	// lfs f0,2944(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	f0.f64 = double(temp.f32);
	// lwz r11,60(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 60);
	// stfs f0,132(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 132, temp.u32);
	// stb r10,140(r3)
	PPC_STORE_U8(ctx.r3.u32 + 140, ctx.r10.u8);
	// stfs f0,128(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 128, temp.u32);
	// stb r10,752(r3)
	PPC_STORE_U8(ctx.r3.u32 + 752, ctx.r10.u8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_8214BEA8"))) PPC_WEAK_FUNC(sub_8214BEA8);
PPC_FUNC_IMPL(__imp__sub_8214BEA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214bed4
	if (cr6.getEQ()) goto loc_8214BED4;
	// li r11,1
	r11.s64 = 1;
	// b 0x8214bee0
	goto loc_8214BEE0;
loc_8214BED4:
	// lbz r11,752(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 752);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
loc_8214BEE0:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// li r10,0
	ctx.r10.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214bf24
	if (cr6.getEQ()) goto loc_8214BF24;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2944(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	f0.f64 = double(temp.f32);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// stfs f0,132(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 132, temp.u32);
	// stfs f0,128(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 128, temp.u32);
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// lbz r11,1156(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 1156);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214bf1c
	if (cr6.getEQ()) goto loc_8214BF1C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
loc_8214BF1C:
	// stfs f0,136(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 136, temp.u32);
	// stb r10,140(r31)
	PPC_STORE_U8(r31.u32 + 140, ctx.r10.u8);
loc_8214BF24:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r10,752(r31)
	PPC_STORE_U8(r31.u32 + 752, ctx.r10.u8);
	// lwz r11,60(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 60);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214BF50"))) PPC_WEAK_FUNC(sub_8214BF50);
PPC_FUNC_IMPL(__imp__sub_8214BF50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// stw r11,152(r3)
	PPC_STORE_U32(ctx.r3.u32 + 152, r11.u32);
	// beq cr6,0x8214bf78
	if (cr6.getEQ()) goto loc_8214BF78;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r5,r8
	ctx.r5.u64 = ctx.r8.u64;
	// mr r4,r7
	ctx.r4.u64 = ctx.r7.u64;
	// lwz r11,48(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 48);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
loc_8214BF78:
	// clrlwi r11,r6,24
	r11.u64 = ctx.r6.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// beq cr6,0x8214bf94
	if (cr6.getEQ()) goto loc_8214BF94;
	// lwz r11,52(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 52);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
loc_8214BF94:
	// lwz r11,56(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 56);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_8214BFA0"))) PPC_WEAK_FUNC(sub_8214BFA0);
PPC_FUNC_IMPL(__imp__sub_8214BFA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// li r30,1
	r30.s64 = 1;
	// addi r10,r10,11808
	ctx.r10.s64 = ctx.r10.s64 + 11808;
	// li r29,0
	r29.s64 = 0;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f0,2688(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2688);
	f0.f64 = double(temp.f32);
	// addi r9,r31,40
	ctx.r9.s64 = r31.s64 + 40;
	// stb r30,56(r31)
	PPC_STORE_U8(r31.u32 + 56, r30.u8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// stw r8,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r8.u32);
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// stfs f0,52(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// stfs f0,744(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 744, temp.u32);
	// stw r29,756(r31)
	PPC_STORE_U32(r31.u32 + 756, r29.u32);
	// stw r10,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, ctx.r10.u32);
	// beq cr6,0x8214c030
	if (cr6.getEQ()) goto loc_8214C030;
	// stb r30,65(r11)
	PPC_STORE_U8(r11.u32 + 65, r30.u8);
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x821672a8
	sub_821672A8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x8214c030
	if (!cr6.getGT()) goto loc_8214C030;
loc_8214C014:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x821673a8
	sub_821673A8(ctx, base);
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x821672a8
	sub_821672A8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bgt cr6,0x8214c014
	if (cr6.getGT()) goto loc_8214C014;
loc_8214C030:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r29,88(r31)
	PPC_STORE_U8(r31.u32 + 88, r29.u8);
	// stb r30,753(r31)
	PPC_STORE_U8(r31.u32 + 753, r30.u8);
	// stw r29,760(r31)
	PPC_STORE_U32(r31.u32 + 760, r29.u32);
	// lfs f0,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f0.f64 = double(temp.f32);
	// stfs f0,764(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 764, temp.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8214C050"))) PPC_WEAK_FUNC(sub_8214C050);
PPC_FUNC_IMPL(__imp__sub_8214C050) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,8(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// lwz r3,4(r4)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// li r30,0
	r30.s64 = 0;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8214c098
	if (!cr6.getEQ()) goto loc_8214C098;
	// bl 0x82158ab8
	sub_82158AB8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214c098
	if (cr6.getEQ()) goto loc_8214C098;
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r3,76(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 76);
	// bl 0x82177ba0
	sub_82177BA0(ctx, base);
	// b 0x8214c09c
	goto loc_8214C09C;
loc_8214C098:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_8214C09C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214C0B8"))) PPC_WEAK_FUNC(sub_8214C0B8);
PPC_FUNC_IMPL(__imp__sub_8214C0B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// lwz r5,8(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// ble cr6,0x8214c0ec
	if (!cr6.getGT()) goto loc_8214C0EC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,8(r6)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r6.u32 + 8);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
loc_8214C0EC:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r11,r11,-30724
	r11.s64 = r11.s64 + -30724;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// li r11,-1
	r11.s64 = -1;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x8216c080
	sub_8216C080(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214C140"))) PPC_WEAK_FUNC(sub_8214C140);
PPC_FUNC_IMPL(__imp__sub_8214C140) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30724
	r11.s64 = r11.s64 + -30724;
	// addi r10,r10,-30724
	ctx.r10.s64 = ctx.r10.s64 + -30724;
	// addi r9,r9,-30720
	ctx.r9.s64 = ctx.r9.s64 + -30720;
	// clrlwi r8,r4,31
	ctx.r8.u64 = ctx.r4.u32 & 0x1;
	// stw r11,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r11.u32);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// stw r10,60(r31)
	PPC_STORE_U32(r31.u32 + 60, ctx.r10.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// beq cr6,0x8214c18c
	if (cr6.getEQ()) goto loc_8214C18C;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214C18C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214C1A0"))) PPC_WEAK_FUNC(sub_8214C1A0);
PPC_FUNC_IMPL(__imp__sub_8214C1A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8216bf28
	sub_8216BF28(ctx, base);
	// lwz r11,156(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 156);
	// li r30,0
	r30.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8214c1e8
	if (cr6.getLT()) goto loc_8214C1E8;
	// cmpwi cr6,r11,36
	cr6.compare<int32_t>(r11.s32, 36, xer);
	// bge cr6,0x8214c1e0
	if (!cr6.getLT()) goto loc_8214C1E0;
	// lis r10,-31993
	ctx.r10.s64 = -2096693248;
	// addi r10,r10,29000
	ctx.r10.s64 = ctx.r10.s64 + 29000;
	// stbx r30,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, r30.u8);
loc_8214C1E0:
	// li r11,-1
	r11.s64 = -1;
	// stw r11,156(r31)
	PPC_STORE_U32(r31.u32 + 156, r11.u32);
loc_8214C1E8:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lwz r10,104(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 104);
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8214c210
	if (cr6.getEQ()) goto loc_8214C210;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8214C210:
	// lwz r3,24(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214c234
	if (cr6.getEQ()) goto loc_8214C234;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r30,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r30.u32);
loc_8214C234:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214c258
	if (cr6.getEQ()) goto loc_8214C258;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r30,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r30.u32);
loc_8214C258:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214C270"))) PPC_WEAK_FUNC(sub_8214C270);
PPC_FUNC_IMPL(__imp__sub_8214C270) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30572
	r11.s64 = r11.s64 + -30572;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x8214c2a4
	if (cr6.getEQ()) goto loc_8214C2A4;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214C2A4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214C2B8"))) PPC_WEAK_FUNC(sub_8214C2B8);
PPC_FUNC_IMPL(__imp__sub_8214C2B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32019
	r11.s64 = -2098397184;
	// lfs f1,25984(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25984);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214C2C8"))) PPC_WEAK_FUNC(sub_8214C2C8);
PPC_FUNC_IMPL(__imp__sub_8214C2C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r3,29064(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29064);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214C2D8"))) PPC_WEAK_FUNC(sub_8214C2D8);
PPC_FUNC_IMPL(__imp__sub_8214C2D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,60
	ctx.r4.s64 = 60;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823b3088
	sub_823B3088(ctx, base);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// stb r10,12(r11)
	PPC_STORE_U8(r11.u32 + 12, ctx.r10.u8);
	// li r11,13
	r11.s64 = 13;
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// li r11,64
	r11.s64 = 64;
	// stb r11,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, r11.u8);
	// stb r11,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, r11.u8);
	// li r11,224
	r11.s64 = 224;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, r11.u8);
	// bl 0x823bc540
	sub_823BC540(ctx, base);
	// bl 0x823b3750
	sub_823B3750(ctx, base);
	// lis r11,-32234
	r11.s64 = -2112487424;
	// addi r3,r11,-15064
	ctx.r3.s64 = r11.s64 + -15064;
	// bl 0x823b7ec0
	sub_823B7EC0(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// addi r3,r11,-7384
	ctx.r3.s64 = r11.s64 + -7384;
	// bl 0x823b7ed0
	sub_823B7ED0(ctx, base);
	// lis r11,-32234
	r11.s64 = -2112487424;
	// addi r3,r11,-15064
	ctx.r3.s64 = r11.s64 + -15064;
	// bl 0x823b7ee0
	sub_823B7EE0(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// addi r3,r11,-7384
	ctx.r3.s64 = r11.s64 + -7384;
	// bl 0x823b7ef0
	sub_823B7EF0(ctx, base);
	// li r4,44
	ctx.r4.s64 = 44;
	// li r3,64
	ctx.r3.s64 = 64;
	// bl 0x823b6fa8
	sub_823B6FA8(ctx, base);
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,94
	ctx.r3.s64 = 94;
	// bl 0x823b7448
	sub_823B7448(ctx, base);
	// lis r11,-32195
	r11.s64 = -2109931520;
	// addi r3,r11,8928
	ctx.r3.s64 = r11.s64 + 8928;
	// bl 0x823b44f8
	sub_823B44F8(ctx, base);
	// lis r11,-32195
	r11.s64 = -2109931520;
	// addi r3,r11,8928
	ctx.r3.s64 = r11.s64 + 8928;
	// bl 0x823b4508
	sub_823B4508(ctx, base);
	// lis r11,-32195
	r11.s64 = -2109931520;
	// addi r3,r11,8928
	ctx.r3.s64 = r11.s64 + 8928;
	// bl 0x823b4518
	sub_823B4518(ctx, base);
	// bl 0x823ba710
	sub_823BA710(ctx, base);
	// bl 0x82161a98
	sub_82161A98(ctx, base);
	// bl 0x8216be88
	sub_8216BE88(ctx, base);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// bl 0x8217b6f8
	sub_8217B6F8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214C3C0"))) PPC_WEAK_FUNC(sub_8214C3C0);
PPC_FUNC_IMPL(__imp__sub_8214C3C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823b34c0
	sub_823B34C0(ctx, base);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lbz r3,29048(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 29048);
	// bl 0x823b44e8
	sub_823B44E8(ctx, base);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lbz r3,29055(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 29055);
	// bl 0x823b4528
	sub_823B4528(ctx, base);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lbz r3,29061(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 29061);
	// bl 0x823b4538
	sub_823B4538(ctx, base);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lbz r3,29062(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 29062);
	// bl 0x823b4548
	sub_823B4548(ctx, base);
	// lis r11,-32019
	r11.s64 = -2098397184;
	// lbz r11,25980(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 25980);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r31,r11,1
	r31.u64 = r11.u64 ^ 1;
	// bl 0x8215fa00
	sub_8215FA00(ctx, base);
	// lis r11,1
	r11.s64 = 65536;
	// stb r31,797(r3)
	PPC_STORE_U8(ctx.r3.u32 + 797, r31.u8);
	// mr r30,r11
	r30.u64 = r11.u64;
	// mr r29,r11
	r29.u64 = r11.u64;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lbz r11,29060(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 29060);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r31,r11,1
	r31.u64 = r11.u64 ^ 1;
	// bl 0x8215b5f0
	sub_8215B5F0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// bl 0x8215b670
	sub_8215B670(ctx, base);
	// lis r31,-32190
	r31.s64 = -2109603840;
	// lbz r11,608(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 608);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214c464
	if (cr6.getEQ()) goto loc_8214C464;
	// bl 0x823b83b8
	sub_823B83B8(ctx, base);
loc_8214C464:
	// bl 0x8217b7a0
	sub_8217B7A0(ctx, base);
	// bl 0x82170b68
	sub_82170B68(ctx, base);
	// bl 0x823ba758
	sub_823BA758(ctx, base);
	// bl 0x823b70c8
	sub_823B70C8(ctx, base);
	// bl 0x82162528
	sub_82162528(ctx, base);
	// lbz r11,608(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 608);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214c488
	if (cr6.getEQ()) goto loc_8214C488;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
loc_8214C488:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214c5a0
	if (cr6.getEQ()) goto loc_8214C5A0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r31,1
	r31.s64 = 1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8214C4BC:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8214c4d8
	if (cr6.getEQ()) goto loc_8214C4D8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8214c4dc
	if (!cr6.getEQ()) goto loc_8214C4DC;
loc_8214C4D8:
	// li r11,1
	r11.s64 = 1;
loc_8214C4DC:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214c538
	if (!cr6.getEQ()) goto loc_8214C538;
	// lbz r11,864(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 864);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214c528
	if (cr6.getEQ()) goto loc_8214C528;
	// bl 0x821581e8
	sub_821581E8(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x8214c52c
	if (!cr6.getGT()) goto loc_8214C52C;
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// bl 0x821603c8
	sub_821603C8(ctx, base);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,820(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 820);
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// bl 0x821584c0
	sub_821584C0(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214c4bc
	goto loc_8214C4BC;
loc_8214C528:
	// li r31,0
	r31.s64 = 0;
loc_8214C52C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214c4bc
	goto loc_8214C4BC;
loc_8214C538:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214c5a0
	if (cr6.getEQ()) goto loc_8214C5A0;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,5
	cr6.compare<int32_t>(ctx.r3.s32, 5, xer);
	// beq cr6,0x8214c560
	if (cr6.getEQ()) goto loc_8214C560;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8214c560
	if (cr6.getEQ()) goto loc_8214C560;
	// bl 0x82160de0
	sub_82160DE0(ctx, base);
loc_8214C560:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214c5a0
	if (cr6.getEQ()) goto loc_8214C5A0;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8214c5a0
	if (cr6.getEQ()) goto loc_8214C5A0;
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,90
	cr6.compare<int32_t>(ctx.r3.s32, 90, xer);
	// beq cr6,0x8214c5a0
	if (cr6.getEQ()) goto loc_8214C5A0;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820ea488
	sub_820EA488(ctx, base);
	// li r3,27
	ctx.r3.s64 = 27;
	// bl 0x820ea498
	sub_820EA498(ctx, base);
	// li r3,90
	ctx.r3.s64 = 90;
	// bl 0x820ae350
	sub_820AE350(ctx, base);
loc_8214C5A0:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8214C5A8"))) PPC_WEAK_FUNC(sub_8214C5A8);
PPC_FUNC_IMPL(__imp__sub_8214C5A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lbz r11,-13402(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -13402);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// b 0x8209cdb0
	sub_8209CDB0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214C5BC"))) PPC_WEAK_FUNC(sub_8214C5BC);
PPC_FUNC_IMPL(__imp__sub_8214C5BC) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214C5C0"))) PPC_WEAK_FUNC(sub_8214C5C0);
PPC_FUNC_IMPL(__imp__sub_8214C5C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// mr r24,r6
	r24.u64 = ctx.r6.u64;
loc_8214C5DC:
	// add r11,r25,r24
	r11.u64 = r25.u64 + r24.u64;
	// mr r30,r25
	r30.u64 = r25.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// mr r31,r24
	r31.u64 = r24.u64;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r28,r11,r27
	r28.u64 = PPC_LOAD_U32(r11.u32 + r27.u32);
loc_8214C5F8:
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// add r29,r11,r27
	r29.u64 = r11.u64 + r27.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bl 0x821660f8
	sub_821660F8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214c648
	if (cr6.getEQ()) goto loc_8214C648;
loc_8214C61C:
	// cmpw cr6,r30,r24
	cr6.compare<int32_t>(r30.s32, r24.s32, xer);
	// bge cr6,0x8214c648
	if (!cr6.getLT()) goto loc_8214C648;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bl 0x821660f8
	sub_821660F8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214c61c
	if (!cr6.getEQ()) goto loc_8214C61C;
loc_8214C648:
	// rlwinm r11,r31,2,0,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// add r29,r11,r27
	r29.u64 = r11.u64 + r27.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r5,0(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bl 0x821660f8
	sub_821660F8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214c698
	if (cr6.getEQ()) goto loc_8214C698;
loc_8214C66C:
	// cmpw cr6,r31,r25
	cr6.compare<int32_t>(r31.s32, r25.s32, xer);
	// ble cr6,0x8214c698
	if (!cr6.getGT()) goto loc_8214C698;
	// addi r29,r29,-4
	r29.s64 = r29.s64 + -4;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// lwz r5,0(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bl 0x821660f8
	sub_821660F8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214c66c
	if (!cr6.getEQ()) goto loc_8214C66C;
loc_8214C698:
	// cmpw cr6,r30,r31
	cr6.compare<int32_t>(r30.s32, r31.s32, xer);
	// bgt cr6,0x8214c6c8
	if (cr6.getGT()) goto loc_8214C6C8;
	// rlwinm r11,r31,2,0,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r30,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// lwzx r8,r11,r27
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + r27.u32);
	// cmpw cr6,r30,r31
	cr6.compare<int32_t>(r30.s32, r31.s32, xer);
	// lwzx r9,r10,r27
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + r27.u32);
	// stwx r8,r10,r27
	PPC_STORE_U32(ctx.r10.u32 + r27.u32, ctx.r8.u32);
	// stwx r9,r11,r27
	PPC_STORE_U32(r11.u32 + r27.u32, ctx.r9.u32);
	// ble cr6,0x8214c5f8
	if (!cr6.getGT()) goto loc_8214C5F8;
loc_8214C6C8:
	// cmpw cr6,r25,r31
	cr6.compare<int32_t>(r25.s32, r31.s32, xer);
	// bge cr6,0x8214c6e4
	if (!cr6.getLT()) goto loc_8214C6E4;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8214c5c0
	sub_8214C5C0(ctx, base);
loc_8214C6E4:
	// cmpw cr6,r30,r24
	cr6.compare<int32_t>(r30.s32, r24.s32, xer);
	// bge cr6,0x8214c6f4
	if (!cr6.getLT()) goto loc_8214C6F4;
	// mr r25,r30
	r25.u64 = r30.u64;
	// b 0x8214c5dc
	goto loc_8214C5DC;
loc_8214C6F4:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_8214C700"))) PPC_WEAK_FUNC(sub_8214C700);
PPC_FUNC_IMPL(__imp__sub_8214C700) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stfd f31,-104(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -104, f31.u64);
	// stwu r1,-816(r1)
	ea = -816 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r26,-32019
	r26.s64 = -2098397184;
	// lis r25,-31993
	r25.s64 = -2096693248;
	// lfs f31,13960(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	f31.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// stfs f31,25984(r26)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r26.u32 + 25984, temp.u32);
	// stw r11,29064(r25)
	PPC_STORE_U32(r25.u32 + 29064, r11.u32);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214cbb8
	if (cr6.getEQ()) goto loc_8214CBB8;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8214cbb8
	if (cr6.getEQ()) goto loc_8214CBB8;
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214c798
	if (!cr6.getEQ()) goto loc_8214C798;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214c798
	if (cr6.getEQ()) goto loc_8214C798;
	// bl 0x82165fb8
	sub_82165FB8(ctx, base);
	// lwz r31,0(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8214c798
	if (cr6.getEQ()) goto loc_8214C798;
loc_8214C778:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r31,4(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8214c778
	if (!cr6.getEQ()) goto loc_8214C778;
loc_8214C798:
	// li r31,0
	r31.s64 = 0;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214c90c
	if (cr6.getEQ()) goto loc_8214C90C;
	// addi r27,r1,80
	r27.s64 = ctx.r1.s64 + 80;
	// addi r28,r1,96
	r28.s64 = ctx.r1.s64 + 96;
	// addi r29,r1,144
	r29.s64 = ctx.r1.s64 + 144;
loc_8214C7DC:
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// mr r30,r11
	r30.u64 = r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214c8f8
	if (!cr6.getEQ()) goto loc_8214C8F8;
	// lwz r11,168(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 168);
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r6,172(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 172);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// subf r7,r11,r21
	ctx.r7.s64 = r21.s64 - r11.s64;
	// ble cr6,0x8214c8dc
	if (!cr6.getGT()) goto loc_8214C8DC;
	// li r11,0
	r11.s64 = 0;
loc_8214C81C:
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// lwzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmplw cr6,r7,r10
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r10.u32, xer);
	// bgt cr6,0x8214c854
	if (cr6.getGT()) goto loc_8214C854;
	// bne cr6,0x8214c840
	if (!cr6.getEQ()) goto loc_8214C840;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lwzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpw cr6,r6,r10
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r10.s32, xer);
	// blt cr6,0x8214c854
	if (cr6.getLT()) goto loc_8214C854;
loc_8214C840:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpw cr6,r9,r31
	cr6.compare<int32_t>(ctx.r9.s32, r31.s32, xer);
	// blt cr6,0x8214c81c
	if (cr6.getLT()) goto loc_8214C81C;
	// b 0x8214c8dc
	goto loc_8214C8DC;
loc_8214C854:
	// cmpw cr6,r31,r9
	cr6.compare<int32_t>(r31.s32, ctx.r9.s32, xer);
	// blt cr6,0x8214c8a8
	if (cr6.getLT()) goto loc_8214C8A8;
	// subf r10,r9,r31
	ctx.r10.s64 = r31.s64 - ctx.r9.s64;
	// rlwinm r11,r31,2,0,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_8214C868:
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// addi r8,r1,148
	ctx.r8.s64 = ctx.r1.s64 + 148;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
	// lwzx r5,r11,r5
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + ctx.r5.u32);
	// addi r24,r1,84
	r24.s64 = ctx.r1.s64 + 84;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lwzx r4,r11,r4
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + ctx.r4.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stwx r5,r11,r3
	PPC_STORE_U32(r11.u32 + ctx.r3.u32, ctx.r5.u32);
	// lwz r5,-4(r8)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + -4);
	// stwx r4,r11,r24
	PPC_STORE_U32(r11.u32 + r24.u32, ctx.r4.u32);
	// addi r11,r11,-4
	r11.s64 = r11.s64 + -4;
	// stw r5,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r5.u32);
	// bne cr6,0x8214c868
	if (!cr6.getEQ()) goto loc_8214C868;
loc_8214C8A8:
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// stwx r30,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, r30.u32);
	// addi r27,r27,4
	r27.s64 = r27.s64 + 4;
	// stwx r7,r11,r8
	PPC_STORE_U32(r11.u32 + ctx.r8.u32, ctx.r7.u32);
	// cmpw cr6,r9,r31
	cr6.compare<int32_t>(ctx.r9.s32, r31.s32, xer);
	// stwx r6,r11,r5
	PPC_STORE_U32(r11.u32 + ctx.r5.u32, ctx.r6.u32);
	// blt cr6,0x8214c8f8
	if (cr6.getLT()) goto loc_8214C8F8;
loc_8214C8DC:
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// stw r7,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r7.u32);
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// stw r6,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r6.u32);
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// addi r27,r27,4
	r27.s64 = r27.s64 + 4;
loc_8214C8F8:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214c7dc
	if (!cr6.getEQ()) goto loc_8214C7DC;
loc_8214C90C:
	// stw r31,29064(r25)
	PPC_STORE_U32(r25.u32 + 29064, r31.u32);
	// bl 0x8215fd20
	sub_8215FD20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8214c92c
	if (cr6.getEQ()) goto loc_8214C92C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,25712(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25712);
	f0.f64 = double(temp.f32);
	// stfs f0,25984(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 25984, temp.u32);
	// b 0x8214c930
	goto loc_8214C930;
loc_8214C92C:
	// stfs f31,25984(r26)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r26.u32 + 25984, temp.u32);
loc_8214C930:
	// bl 0x823b34e8
	sub_823B34E8(ctx, base);
	// lis r30,-31993
	r30.s64 = -2096693248;
	// lfs f0,25984(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + 25984);
	f0.f64 = double(temp.f32);
	// lfs f13,29072(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 29072);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f1,f1,f0,f13
	ctx.f1.f64 = double(float(ctx.f1.f64 * f0.f64 + ctx.f13.f64));
	// stfs f1,29072(r30)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r30.u32 + 29072, temp.u32);
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r24,80(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// extsw r11,r24
	r11.s64 = r24.s32;
	// cmpw cr6,r24,r31
	cr6.compare<int32_t>(r24.s32, r31.s32, xer);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,29072(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 29072);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,29072(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 29072, temp.u32);
	// ble cr6,0x8214c98c
	if (!cr6.getGT()) goto loc_8214C98C;
	// mr r24,r31
	r24.u64 = r31.u64;
loc_8214C98C:
	// bl 0x8215fd20
	sub_8215FD20(ctx, base);
	// subfic r11,r3,0
	xer.ca = ctx.r3.u32 <= 0;
	r11.s64 = 0 - ctx.r3.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r11,r11,26
	r11.u64 = r11.u32 & 0x3F;
	// addi r31,r11,7
	r31.s64 = r11.s64 + 7;
	// bl 0x823b34e8
	sub_823B34E8(ctx, base);
	// clrldi r11,r31,32
	r11.u64 = r31.u64 & 0xFFFFFFFF;
	// li r22,0
	r22.s64 = 0;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r22,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r22.u32);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f13,f1,f0
	ctx.f13.f64 = double(float(ctx.f1.f64 * f0.f64));
	// lfs f0,3112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// ble cr6,0x8214ca38
	if (!cr6.getGT()) goto loc_8214CA38;
	// extsw r11,r24
	r11.s64 = r24.s32;
	// lis r31,-31993
	r31.s64 = -2096693248;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f13,96(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 / ctx.f13.f64));
	// lfs f0,29068(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 29068);
	f0.f64 = double(temp.f32);
	// fadds f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f1,29068(r31)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r31.u32 + 29068, temp.u32);
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// extsw r11,r22
	r11.s64 = r22.s32;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f0,96(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,29068(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 29068);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,29068(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 29068, temp.u32);
loc_8214CA38:
	// li r25,0
	r25.s64 = 0;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// ble cr6,0x8214cbac
	if (!cr6.getGT()) goto loc_8214CBAC;
	// addi r23,r1,144
	r23.s64 = ctx.r1.s64 + 144;
loc_8214CA48:
	// lwz r28,0(r23)
	r28.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214cb88
	if (!cr6.getEQ()) goto loc_8214CB88;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214cb88
	if (cr6.getEQ()) goto loc_8214CB88;
	// lbz r11,132(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214cb88
	if (cr6.getEQ()) goto loc_8214CB88;
	// li r26,0
	r26.s64 = 0;
	// bl 0x82165fb8
	sub_82165FB8(ctx, base);
	// lwz r31,0(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8214cb88
	if (cr6.getEQ()) goto loc_8214CB88;
	// addi r30,r1,160
	r30.s64 = ctx.r1.s64 + 160;
loc_8214CA90:
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8214cab8
	if (!cr6.getEQ()) goto loc_8214CAB8;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8214cafc
	goto loc_8214CAFC;
loc_8214CAB8:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8214cae8
	if (cr6.getEQ()) goto loc_8214CAE8;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214cafc
	if (cr6.getEQ()) goto loc_8214CAFC;
loc_8214CAE8:
	// cmplwi cr6,r26,138
	cr6.compare<uint32_t>(r26.u32, 138, xer);
	// bge cr6,0x8214cafc
	if (!cr6.getLT()) goto loc_8214CAFC;
	// stw r31,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r31.u32);
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
loc_8214CAFC:
	// lwz r31,4(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8214ca90
	if (!cr6.getEQ()) goto loc_8214CA90;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x8214cb88
	if (cr6.getEQ()) goto loc_8214CB88;
	// addi r6,r26,-1
	ctx.r6.s64 = r26.s64 + -1;
	// stw r28,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r28.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r21,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r21.u32);
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8214c5c0
	sub_8214C5C0(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// mr r27,r22
	r27.u64 = r22.u64;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x8214cb88
	if (cr6.getEQ()) goto loc_8214CB88;
	// addi r29,r1,160
	r29.s64 = ctx.r1.s64 + 160;
loc_8214CB40:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x8214cb88
	if (cr6.getEQ()) goto loc_8214CB88;
	// lwz r31,0(r29)
	r31.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821660e0
	sub_821660E0(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// cmplw cr6,r30,r26
	cr6.compare<uint32_t>(r30.u32, r26.u32, xer);
	// blt cr6,0x8214cb40
	if (cr6.getLT()) goto loc_8214CB40;
loc_8214CB88:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8217a790
	sub_8217A790(ctx, base);
	// mr r11,r25
	r11.u64 = r25.u64;
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// stw r21,168(r28)
	PPC_STORE_U32(r28.u32 + 168, r21.u32);
	// addi r23,r23,4
	r23.s64 = r23.s64 + 4;
	// cmpw cr6,r25,r24
	cr6.compare<int32_t>(r25.s32, r24.s32, xer);
	// stw r11,172(r28)
	PPC_STORE_U32(r28.u32 + 172, r11.u32);
	// blt cr6,0x8214ca48
	if (cr6.getLT()) goto loc_8214CA48;
loc_8214CBAC:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-30572
	r11.s64 = r11.s64 + -30572;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
loc_8214CBB8:
	// bl 0x823b70f0
	sub_823B70F0(ctx, base);
	// addi r1,r1,816
	ctx.r1.s64 = ctx.r1.s64 + 816;
	// lfd f31,-104(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_8214CBC8"))) PPC_WEAK_FUNC(sub_8214CBC8);
PPC_FUNC_IMPL(__imp__sub_8214CBC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x8214cc18
	if (cr6.getEQ()) goto loc_8214CC18;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// rlwinm r11,r29,3,0,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r3,r30
	ctx.r10.s64 = r30.s64 - ctx.r3.s64;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// li r11,1
	r11.s64 = 1;
	// ble cr6,0x8214cc14
	if (!cr6.getGT()) goto loc_8214CC14;
	// li r11,0
	r11.s64 = 0;
loc_8214CC14:
	// stb r11,0(r28)
	PPC_STORE_U8(r28.u32 + 0, r11.u8);
loc_8214CC18:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8214CC30"))) PPC_WEAK_FUNC(sub_8214CC30);
PPC_FUNC_IMPL(__imp__sub_8214CC30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x823b7118
	sub_823B7118(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214cc68
	if (cr6.getEQ()) goto loc_8214CC68;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214CC68:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214CC80"))) PPC_WEAK_FUNC(sub_8214CC80);
PPC_FUNC_IMPL(__imp__sub_8214CC80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r9,r11,-30392
	ctx.r9.s64 = r11.s64 + -30392;
	// li r11,0
	r11.s64 = 0;
	// mr r8,r4
	ctx.r8.u64 = ctx.r4.u64;
	// mr r10,r5
	ctx.r10.u64 = ctx.r5.u64;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// addi r7,r31,44
	ctx.r7.s64 = r31.s64 + 44;
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// mr r9,r7
	ctx.r9.u64 = ctx.r7.u64;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// stb r11,16(r31)
	PPC_STORE_U8(r31.u32 + 16, r11.u8);
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// stw r11,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r11.u32);
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// stb r11,80(r31)
	PPC_STORE_U8(r31.u32 + 80, r11.u8);
	// li r11,8
	r11.s64 = 8;
	// stw r8,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r8.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
loc_8214CCF8:
	// lbz r11,0(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stb r11,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, r11.u8);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// bdnz 0x8214ccf8
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8214CCF8;
	// addi r3,r31,52
	ctx.r3.s64 = r31.s64 + 52;
	// li r5,16
	ctx.r5.s64 = 16;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// std r30,72(r31)
	PPC_STORE_U64(r31.u32 + 72, r30.u64);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214CD40"))) PPC_WEAK_FUNC(sub_8214CD40);
PPC_FUNC_IMPL(__imp__sub_8214CD40) {
	PPC_FUNC_PROLOGUE();
	// li r3,88
	ctx.r3.s64 = 88;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214CD48"))) PPC_WEAK_FUNC(sub_8214CD48);
PPC_FUNC_IMPL(__imp__sub_8214CD48) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x823ba7b8
	sub_823BA7B8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r10,r11,-30312
	ctx.r10.s64 = r11.s64 + -30312;
	// li r11,0
	r11.s64 = 0;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stw r11,312(r31)
	PPC_STORE_U32(r31.u32 + 312, r11.u32);
	// stw r11,1856(r31)
	PPC_STORE_U32(r31.u32 + 1856, r11.u32);
	// stb r11,1888(r31)
	PPC_STORE_U8(r31.u32 + 1888, r11.u8);
	// stb r11,1889(r31)
	PPC_STORE_U8(r31.u32 + 1889, r11.u8);
	// std r11,1896(r31)
	PPC_STORE_U64(r31.u32 + 1896, r11.u64);
	// stw r11,1904(r31)
	PPC_STORE_U32(r31.u32 + 1904, r11.u32);
	// stb r11,1908(r31)
	PPC_STORE_U8(r31.u32 + 1908, r11.u8);
	// stw r11,1912(r31)
	PPC_STORE_U32(r31.u32 + 1912, r11.u32);
	// stw r11,1916(r31)
	PPC_STORE_U32(r31.u32 + 1916, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214CDB0"))) PPC_WEAK_FUNC(sub_8214CDB0);
PPC_FUNC_IMPL(__imp__sub_8214CDB0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-30312
	r11.s64 = r11.s64 + -30312;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// b 0x823ba900
	sub_823BA900(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214CDC0"))) PPC_WEAK_FUNC(sub_8214CDC0);
PPC_FUNC_IMPL(__imp__sub_8214CDC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,312(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 312);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r10,0
	ctx.r10.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8214ce00
	if (!cr6.getGT()) goto loc_8214CE00;
	// addi r9,r3,320
	ctx.r9.s64 = ctx.r3.s64 + 320;
loc_8214CDD8:
	// ld r7,0(r9)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r9.u32 + 0);
	// cmpld cr6,r7,r4
	cr6.compare<uint64_t>(ctx.r7.u64, ctx.r4.u64, xer);
	// beq cr6,0x8214cdfc
	if (cr6.getEQ()) goto loc_8214CDFC;
	// lwz r7,312(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 312);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r9,r9,24
	ctx.r9.s64 = ctx.r9.s64 + 24;
	// cmpw cr6,r10,r7
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r7.s32, xer);
	// blt cr6,0x8214cdd8
	if (cr6.getLT()) goto loc_8214CDD8;
	// b 0x8214ce00
	goto loc_8214CE00;
loc_8214CDFC:
	// li r8,1
	ctx.r8.s64 = 1;
loc_8214CE00:
	// clrlwi r10,r8,24
	ctx.r10.u64 = ctx.r8.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bnelr cr6
	if (!cr6.getEQ()) return;
	// cmpwi cr6,r11,64
	cr6.compare<int32_t>(r11.s32, 64, xer);
	// bgelr cr6
	if (!cr6.getLT()) return;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// clrlwi r10,r5,24
	ctx.r10.u64 = ctx.r5.u32 & 0xFF;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// std r4,320(r11)
	PPC_STORE_U64(r11.u32 + 320, ctx.r4.u64);
	// lwz r11,312(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 312);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// stb r5,328(r11)
	PPC_STORE_U8(r11.u32 + 328, ctx.r5.u8);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,312(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 312);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// stw r6,332(r11)
	PPC_STORE_U32(r11.u32 + 332, ctx.r6.u32);
	// lwz r11,312(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 312);
	// addi r11,r11,14
	r11.s64 = r11.s64 + 14;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stbx r10,r11,r3
	PPC_STORE_U8(r11.u32 + ctx.r3.u32, ctx.r10.u8);
	// lwz r11,312(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 312);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,312(r3)
	PPC_STORE_U32(ctx.r3.u32 + 312, r11.u32);
	// beq cr6,0x8214ce98
	if (cr6.getEQ()) goto loc_8214CE98;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// b 0x823bb6d8
	sub_823BB6D8(ctx, base);
	return;
loc_8214CE98:
	// b 0x823bb730
	sub_823BB730(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214CE9C"))) PPC_WEAK_FUNC(sub_8214CE9C);
PPC_FUNC_IMPL(__imp__sub_8214CE9C) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214CEA0"))) PPC_WEAK_FUNC(sub_8214CEA0);
PPC_FUNC_IMPL(__imp__sub_8214CEA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// li r29,0
	r29.s64 = 0;
	// lwz r11,312(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 312);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8214cf44
	if (!cr6.getGT()) goto loc_8214CF44;
	// addi r30,r31,320
	r30.s64 = r31.s64 + 320;
loc_8214CEC8:
	// ld r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// cmpld cr6,r4,r28
	cr6.compare<uint64_t>(ctx.r4.u64, r28.u64, xer);
	// bne cr6,0x8214cf30
	if (!cr6.getEQ()) goto loc_8214CF30;
	// lbz r11,8(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214cef0
	if (cr6.getEQ()) goto loc_8214CEF0;
	// lwz r4,12(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// bl 0x823bb788
	sub_823BB788(ctx, base);
	// b 0x8214cef4
	goto loc_8214CEF4;
loc_8214CEF0:
	// bl 0x823bb7d8
	sub_823BB7D8(ctx, base);
loc_8214CEF4:
	// lwz r11,312(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 312);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r11,r11,296
	r11.s64 = r11.s64 + 296;
	// ld r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// std r10,0(r30)
	PPC_STORE_U64(r30.u32 + 0, ctx.r10.u64);
	// ld r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// std r10,8(r30)
	PPC_STORE_U64(r30.u32 + 8, ctx.r10.u64);
	// ld r11,16(r11)
	r11.u64 = PPC_LOAD_U64(r11.u32 + 16);
	// std r11,16(r30)
	PPC_STORE_U64(r30.u32 + 16, r11.u64);
	// lwz r11,312(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 312);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,312(r31)
	PPC_STORE_U32(r31.u32 + 312, r11.u32);
loc_8214CF30:
	// lwz r11,312(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 312);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r30,r30,24
	r30.s64 = r30.s64 + 24;
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// blt cr6,0x8214cec8
	if (cr6.getLT()) goto loc_8214CEC8;
loc_8214CF44:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8214CF50"))) PPC_WEAK_FUNC(sub_8214CF50);
PPC_FUNC_IMPL(__imp__sub_8214CF50) {
	PPC_FUNC_PROLOGUE();
	// lwz r3,312(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 312);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214CF58"))) PPC_WEAK_FUNC(sub_8214CF58);
PPC_FUNC_IMPL(__imp__sub_8214CF58) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// ld r3,320(r11)
	ctx.r3.u64 = PPC_LOAD_U64(r11.u32 + 320);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214CF70"))) PPC_WEAK_FUNC(sub_8214CF70);
PPC_FUNC_IMPL(__imp__sub_8214CF70) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r4,14
	r11.s64 = ctx.r4.s64 + 14;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lbzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214CF88"))) PPC_WEAK_FUNC(sub_8214CF88);
PPC_FUNC_IMPL(__imp__sub_8214CF88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,1904(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1904);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8214cfa8
	if (cr6.getEQ()) goto loc_8214CFA8;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x8214cfa8
	if (cr6.getEQ()) goto loc_8214CFA8;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8214cfac
	if (!cr6.getEQ()) goto loc_8214CFAC;
loc_8214CFA8:
	// li r11,1
	r11.s64 = 1;
loc_8214CFAC:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214CFB8"))) PPC_WEAK_FUNC(sub_8214CFB8);
PPC_FUNC_IMPL(__imp__sub_8214CFB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,1904(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1904);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x8214cfe8
	if (cr6.getEQ()) goto loc_8214CFE8;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x8214d06c
	if (!cr6.getEQ()) goto loc_8214D06C;
loc_8214CFE8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8214d06c
	if (!cr6.getEQ()) goto loc_8214D06C;
	// lbz r11,132(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214d06c
	if (cr6.getEQ()) goto loc_8214D06C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821521d0
	sub_821521D0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214d06c
	if (!cr6.getEQ()) goto loc_8214D06C;
	// lbz r11,12(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214d06c
	if (!cr6.getEQ()) goto loc_8214D06C;
	// li r3,88
	ctx.r3.s64 = 88;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214d04c
	if (cr6.getEQ()) goto loc_8214D04C;
	// addi r6,r31,61
	ctx.r6.s64 = r31.s64 + 61;
	// ld r7,1896(r31)
	ctx.r7.u64 = PPC_LOAD_U64(r31.u32 + 1896);
	// addi r5,r31,17
	ctx.r5.s64 = r31.s64 + 17;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8214cc80
	sub_8214CC80(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8214d050
	goto loc_8214D050;
loc_8214D04C:
	// li r31,0
	r31.s64 = 0;
loc_8214D050:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,16(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8214D06C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214D088"))) PPC_WEAK_FUNC(sub_8214D088);
PPC_FUNC_IMPL(__imp__sub_8214D088) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,1904(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1904);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bnelr cr6
	if (!cr6.getEQ()) return;
	// b 0x8214cdc0
	sub_8214CDC0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214D098"))) PPC_WEAK_FUNC(sub_8214D098);
PPC_FUNC_IMPL(__imp__sub_8214D098) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214D0A0"))) PPC_WEAK_FUNC(sub_8214D0A0);
PPC_FUNC_IMPL(__imp__sub_8214D0A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,1904(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1904);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8214d11c
	if (cr6.getEQ()) goto loc_8214D11C;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x8214d11c
	if (cr6.getEQ()) goto loc_8214D11C;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x8214d11c
	if (cr6.getEQ()) goto loc_8214D11C;
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// beq cr6,0x8214d11c
	if (cr6.getEQ()) goto loc_8214D11C;
	// cmpwi cr6,r11,16
	cr6.compare<int32_t>(r11.s32, 16, xer);
	// beq cr6,0x8214d11c
	if (cr6.getEQ()) goto loc_8214D11C;
	// lwz r9,312(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 312);
	// li r11,0
	r11.s64 = 0;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x8214d0fc
	if (!cr6.getGT()) goto loc_8214D0FC;
	// addi r10,r3,320
	ctx.r10.s64 = ctx.r3.s64 + 320;
loc_8214D0E0:
	// ld r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U64(ctx.r10.u32 + 0);
	// cmpld cr6,r8,r4
	cr6.compare<uint64_t>(ctx.r8.u64, ctx.r4.u64, xer);
	// beq cr6,0x8214d100
	if (cr6.getEQ()) goto loc_8214D100;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 24;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x8214d0e0
	if (cr6.getLT()) goto loc_8214D0E0;
loc_8214D0FC:
	// blr 
	return;
loc_8214D100:
	// addi r11,r11,14
	r11.s64 = r11.s64 + 14;
	// li r9,1
	ctx.r9.s64 = 1;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stbx r9,r11,r3
	PPC_STORE_U8(r11.u32 + ctx.r3.u32, ctx.r9.u8);
	// blr 
	return;
loc_8214D11C:
	// b 0x8214cea0
	sub_8214CEA0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214D120"))) PPC_WEAK_FUNC(sub_8214D120);
PPC_FUNC_IMPL(__imp__sub_8214D120) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r3,1856(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1856);
	// stw r30,312(r31)
	PPC_STORE_U32(r31.u32 + 312, r30.u32);
	// stw r30,1916(r31)
	PPC_STORE_U32(r31.u32 + 1916, r30.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stb r30,1889(r31)
	PPC_STORE_U8(r31.u32 + 1889, r30.u8);
	// beq cr6,0x8214d15c
	if (cr6.getEQ()) goto loc_8214D15C;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209cc20
	sub_8209CC20(ctx, base);
	// stw r30,1856(r31)
	PPC_STORE_U32(r31.u32 + 1856, r30.u32);
loc_8214D15C:
	// li r7,64
	ctx.r7.s64 = 64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r30,1908(r31)
	PPC_STORE_U8(r31.u32 + 1908, r30.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r30,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r30.u32);
	// li r8,1
	ctx.r8.s64 = 1;
	// stb r30,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r30.u8);
	// li r6,1
	ctx.r6.s64 = 1;
	// stb r30,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, r30.u8);
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r11,1904(r31)
	PPC_STORE_U32(r31.u32 + 1904, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8214D1B8"))) PPC_WEAK_FUNC(sub_8214D1B8);
PPC_FUNC_IMPL(__imp__sub_8214D1B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// lwz r3,1856(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1856);
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// stw r30,312(r31)
	PPC_STORE_U32(r31.u32 + 312, r30.u32);
	// stw r30,1916(r31)
	PPC_STORE_U32(r31.u32 + 1916, r30.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stb r30,1889(r31)
	PPC_STORE_U8(r31.u32 + 1889, r30.u8);
	// beq cr6,0x8214d204
	if (cr6.getEQ()) goto loc_8214D204;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209cc20
	sub_8209CC20(ctx, base);
	// stw r30,1856(r31)
	PPC_STORE_U32(r31.u32 + 1856, r30.u32);
loc_8214D204:
	// li r10,64
	ctx.r10.s64 = 64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// li r29,1
	r29.s64 = 1;
	// stb r30,1908(r31)
	PPC_STORE_U8(r31.u32 + 1908, r30.u8);
	// std r24,1896(r31)
	PPC_STORE_U64(r31.u32 + 1896, r24.u64);
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r30,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r30.u32);
	// li r8,0
	ctx.r8.s64 = 0;
	// stb r30,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, r30.u8);
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r30,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, r30.u8);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stb r30,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, r30.u8);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r29,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r29.u8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r29,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, r29.u8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r29,1904(r31)
	PPC_STORE_U32(r31.u32 + 1904, r29.u32);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_8214D270"))) PPC_WEAK_FUNC(sub_8214D270);
PPC_FUNC_IMPL(__imp__sub_8214D270) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// li r11,1
	r11.s64 = 1;
	// stb r11,1908(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1908, r11.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214D280"))) PPC_WEAK_FUNC(sub_8214D280);
PPC_FUNC_IMPL(__imp__sub_8214D280) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// li r4,0
	ctx.r4.s64 = 0;
	// ld r5,1896(r31)
	ctx.r5.u64 = PPC_LOAD_U64(r31.u32 + 1896);
	// lwz r3,88(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// stb r30,1889(r31)
	PPC_STORE_U8(r31.u32 + 1889, r30.u8);
	// stw r30,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r30.u32);
	// bl 0x823bcc88
	sub_823BCC88(ctx, base);
	// cmplwi cr6,r3,122
	cr6.compare<uint32_t>(ctx.r3.u32, 122, xer);
	// bne cr6,0x8214d34c
	if (!cr6.getEQ()) goto loc_8214D34C;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,1856(r31)
	PPC_STORE_U32(r31.u32 + 1856, ctx.r3.u32);
	// beq cr6,0x8214d34c
	if (cr6.getEQ()) goto loc_8214D34C;
	// addi r8,r31,1860
	ctx.r8.s64 = r31.s64 + 1860;
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// li r10,7
	ctx.r10.s64 = 7;
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8214D2F4:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x8214d2f4
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8214D2F4;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// lwz r7,1856(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1856);
	// li r4,0
	ctx.r4.s64 = 0;
	// ld r5,1896(r31)
	ctx.r5.u64 = PPC_LOAD_U64(r31.u32 + 1896);
	// lwz r3,88(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// bl 0x823bcc88
	sub_823BCC88(ctx, base);
	// cmplwi cr6,r3,997
	cr6.compare<uint32_t>(ctx.r3.u32, 997, xer);
	// bne cr6,0x8214d334
	if (!cr6.getEQ()) goto loc_8214D334;
	// li r11,1
	r11.s64 = 1;
	// li r10,4
	ctx.r10.s64 = 4;
	// stb r11,1888(r31)
	PPC_STORE_U8(r31.u32 + 1888, r11.u8);
	// stw r10,1904(r31)
	PPC_STORE_U32(r31.u32 + 1904, ctx.r10.u32);
	// b 0x8214d34c
	goto loc_8214D34C;
loc_8214D334:
	// li r11,2
	r11.s64 = 2;
	// lwz r3,1856(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1856);
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r11,1904(r31)
	PPC_STORE_U32(r31.u32 + 1904, r11.u32);
	// bl 0x8209cc20
	sub_8209CC20(ctx, base);
	// stw r30,1856(r31)
	PPC_STORE_U32(r31.u32 + 1856, r30.u32);
loc_8214D34C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214D368"))) PPC_WEAK_FUNC(sub_8214D368);
PPC_FUNC_IMPL(__imp__sub_8214D368) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// li r4,0
	ctx.r4.s64 = 0;
	// ld r5,1896(r31)
	ctx.r5.u64 = PPC_LOAD_U64(r31.u32 + 1896);
	// lwz r3,88(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// stb r30,1889(r31)
	PPC_STORE_U8(r31.u32 + 1889, r30.u8);
	// stw r30,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r30.u32);
	// bl 0x823bcc88
	sub_823BCC88(ctx, base);
	// cmplwi cr6,r3,122
	cr6.compare<uint32_t>(ctx.r3.u32, 122, xer);
	// bne cr6,0x8214d434
	if (!cr6.getEQ()) goto loc_8214D434;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,1856(r31)
	PPC_STORE_U32(r31.u32 + 1856, ctx.r3.u32);
	// beq cr6,0x8214d434
	if (cr6.getEQ()) goto loc_8214D434;
	// addi r8,r31,1860
	ctx.r8.s64 = r31.s64 + 1860;
	// li r29,7
	r29.s64 = 7;
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8214D3D8:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x8214d3d8
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8214D3D8;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// lwz r7,1856(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1856);
	// li r4,0
	ctx.r4.s64 = 0;
	// ld r5,1896(r31)
	ctx.r5.u64 = PPC_LOAD_U64(r31.u32 + 1896);
	// lwz r3,88(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// bl 0x823bcc88
	sub_823BCC88(ctx, base);
	// cmplwi cr6,r3,997
	cr6.compare<uint32_t>(ctx.r3.u32, 997, xer);
	// bne cr6,0x8214d418
	if (!cr6.getEQ()) goto loc_8214D418;
	// li r11,1
	r11.s64 = 1;
	// stw r29,1904(r31)
	PPC_STORE_U32(r31.u32 + 1904, r29.u32);
	// stb r11,1888(r31)
	PPC_STORE_U8(r31.u32 + 1888, r11.u8);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
loc_8214D418:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,1856(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1856);
	// bl 0x8209cc20
	sub_8209CC20(ctx, base);
	// stw r30,1856(r31)
	PPC_STORE_U32(r31.u32 + 1856, r30.u32);
	// stb r30,1888(r31)
	PPC_STORE_U8(r31.u32 + 1888, r30.u8);
	// stb r30,1889(r31)
	PPC_STORE_U8(r31.u32 + 1889, r30.u8);
	// stw r29,1904(r31)
	PPC_STORE_U32(r31.u32 + 1904, r29.u32);
loc_8214D434:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8214D440"))) PPC_WEAK_FUNC(sub_8214D440);
PPC_FUNC_IMPL(__imp__sub_8214D440) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,1856(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1856);
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// ld r6,784(r4)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r4.u32 + 784);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blelr cr6
	if (!cr6.getGT()) return;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mr r7,r10
	ctx.r7.u64 = ctx.r10.u64;
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
loc_8214D46C:
	// lwz r9,-4(r8)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + -4);
	// li r10,0
	ctx.r10.s64 = 0;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x8214d4a4
	if (!cr6.getGT()) goto loc_8214D4A4;
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
loc_8214D480:
	// ld r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// cmpld cr6,r5,r6
	cr6.compare<uint64_t>(ctx.r5.u64, ctx.r6.u64, xer);
	// beq cr6,0x8214d4a0
	if (cr6.getEQ()) goto loc_8214D4A0;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// cmpw cr6,r10,r9
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, xer);
	// blt cr6,0x8214d480
	if (cr6.getLT()) goto loc_8214D480;
	// b 0x8214d4a4
	goto loc_8214D4A4;
loc_8214D4A0:
	// li r3,1
	ctx.r3.s64 = 1;
loc_8214D4A4:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r8,r8,24
	ctx.r8.s64 = ctx.r8.s64 + 24;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8214d46c
	if (!cr6.getEQ()) goto loc_8214D46C;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214D4B8"))) PPC_WEAK_FUNC(sub_8214D4B8);
PPC_FUNC_IMPL(__imp__sub_8214D4B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r9,1916(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1916);
	// li r11,0
	r11.s64 = 0;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blelr cr6
	if (!cr6.getGT()) return;
	// addi r10,r3,1920
	ctx.r10.s64 = ctx.r3.s64 + 1920;
loc_8214D4CC:
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplw cr6,r8,r4
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r4.u32, xer);
	// beq cr6,0x8214d4f0
	if (cr6.getEQ()) goto loc_8214D4F0;
	// lwz r8,1916(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1916);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// blt cr6,0x8214d4cc
	if (cr6.getLT()) goto loc_8214D4CC;
	// blr 
	return;
loc_8214D4F0:
	// addi r10,r9,479
	ctx.r10.s64 = ctx.r9.s64 + 479;
	// addi r11,r11,480
	r11.s64 = r11.s64 + 480;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r3
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r3.u32);
	// stwx r10,r11,r3
	PPC_STORE_U32(r11.u32 + ctx.r3.u32, ctx.r10.u32);
	// lwz r11,1916(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1916);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,1916(r3)
	PPC_STORE_U32(ctx.r3.u32 + 1916, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214D518"))) PPC_WEAK_FUNC(sub_8214D518);
PPC_FUNC_IMPL(__imp__sub_8214D518) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,1904(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1904);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// li r11,13
	r11.s64 = 13;
	// stw r11,1904(r3)
	PPC_STORE_U32(ctx.r3.u32 + 1904, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214D530"))) PPC_WEAK_FUNC(sub_8214D530);
PPC_FUNC_IMPL(__imp__sub_8214D530) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,88
	ctx.r3.s64 = 88;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214d59c
	if (cr6.getEQ()) goto loc_8214D59C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-30392
	ctx.r10.s64 = r11.s64 + -30392;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stw r9,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, ctx.r9.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8214D59C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214D5B0"))) PPC_WEAK_FUNC(sub_8214D5B0);
PPC_FUNC_IMPL(__imp__sub_8214D5B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r20{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,3
	ctx.r5.s64 = 3;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bgt cr6,0x8214d664
	if (cr6.getGT()) goto loc_8214D664;
	// lis r12,-32235
	r12.s64 = -2112552960;
	// addi r12,r12,-10720
	r12.s64 = r12.s64 + -10720;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_8214D634;
	case 1:
		goto loc_8214D654;
	case 2:
		goto loc_8214D67C;
	case 3:
		goto loc_8214D654;
	case 4:
		goto loc_8214D654;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-10700(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -10700);
	// lwz r16,-10668(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -10668);
	// lwz r16,-10628(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -10628);
	// lwz r16,-10668(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -10668);
	// lwz r16,-10668(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -10668);
loc_8214D634:
	// li r5,8
	ctx.r5.s64 = 8;
	// addi r4,r31,44
	ctx.r4.s64 = r31.s64 + 44;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2fb0
	sub_823B2FB0(ctx, base);
	// li r5,16
	ctx.r5.s64 = 16;
	// addi r4,r31,52
	ctx.r4.s64 = r31.s64 + 52;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2fb0
	sub_823B2FB0(ctx, base);
loc_8214D654:
	// li r5,8
	ctx.r5.s64 = 8;
	// addi r4,r31,72
	ctx.r4.s64 = r31.s64 + 72;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2fb0
	sub_823B2FB0(ctx, base);
loc_8214D664:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8214D67C:
	// li r5,8
	ctx.r5.s64 = 8;
	// addi r4,r31,72
	ctx.r4.s64 = r31.s64 + 72;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2fb0
	sub_823B2FB0(ctx, base);
	// lbz r11,80(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 80);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// b 0x8214d664
	goto loc_8214D664;
}

__attribute__((alias("__imp__sub_8214D6B0"))) PPC_WEAK_FUNC(sub_8214D6B0);
PPC_FUNC_IMPL(__imp__sub_8214D6B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r20{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cmplwi cr6,r3,4
	cr6.compare<uint32_t>(ctx.r3.u32, 4, xer);
	// stw r3,40(r30)
	PPC_STORE_U32(r30.u32 + 40, ctx.r3.u32);
	// bgt cr6,0x8214d748
	if (cr6.getGT()) goto loc_8214D748;
	// lis r12,-32235
	r12.s64 = -2112552960;
	// addi r12,r12,-10492
	r12.s64 = r12.s64 + -10492;
	// rlwinm r0,r3,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_8214D718;
	case 1:
		goto loc_8214D738;
	case 2:
		goto loc_8214D750;
	case 3:
		goto loc_8214D738;
	case 4:
		goto loc_8214D738;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-10472(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -10472);
	// lwz r16,-10440(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -10440);
	// lwz r16,-10416(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -10416);
	// lwz r16,-10440(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -10440);
	// lwz r16,-10440(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -10440);
loc_8214D718:
	// li r5,8
	ctx.r5.s64 = 8;
	// addi r4,r30,44
	ctx.r4.s64 = r30.s64 + 44;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
	// li r5,16
	ctx.r5.s64 = 16;
	// addi r4,r30,52
	ctx.r4.s64 = r30.s64 + 52;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
loc_8214D738:
	// li r5,8
	ctx.r5.s64 = 8;
	// addi r4,r30,72
	ctx.r4.s64 = r30.s64 + 72;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
loc_8214D748:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8214D750:
	// li r5,8
	ctx.r5.s64 = 8;
	// addi r4,r30,72
	ctx.r4.s64 = r30.s64 + 72;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r29
	r11.u64 = r29.u32 == 0 ? 32 : __builtin_clz(r29.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,80(r30)
	PPC_STORE_U8(r30.u32 + 80, r11.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8214D788"))) PPC_WEAK_FUNC(sub_8214D788);
PPC_FUNC_IMPL(__imp__sub_8214D788) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r20{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r28,1
	r28.s64 = 1;
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bgt cr6,0x8214da30
	if (cr6.getGT()) goto loc_8214DA30;
	// lis r12,-32235
	r12.s64 = -2112552960;
	// addi r12,r12,-10304
	r12.s64 = r12.s64 + -10304;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_8214D7D4;
	case 1:
		goto loc_8214D8D4;
	case 2:
		goto loc_8214D948;
	case 3:
		goto loc_8214D9A0;
	case 4:
		goto loc_8214D9F4;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-10284(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -10284);
	// lwz r16,-10028(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -10028);
	// lwz r16,-9912(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -9912);
	// lwz r16,-9824(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -9824);
	// lwz r16,-9740(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -9740);
loc_8214D7D4:
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214da30
	if (cr6.getEQ()) goto loc_8214DA30;
	// lbz r11,36(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214da30
	if (cr6.getEQ()) goto loc_8214DA30;
	// bl 0x82184a40
	sub_82184A40(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8214da30
	if (cr6.getEQ()) goto loc_8214DA30;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x823b38b0
	sub_823B38B0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8214d854
	if (!cr6.getEQ()) goto loc_8214D854;
	// ld r27,72(r31)
	r27.u64 = PPC_LOAD_U64(r31.u32 + 72);
	// addi r26,r31,52
	r26.s64 = r31.s64 + 52;
	// lwz r29,1368(r29)
	r29.u64 = PPC_LOAD_U32(r29.u32 + 1368);
	// addi r31,r31,44
	r31.s64 = r31.s64 + 44;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// bl 0x8214d1b8
	sub_8214D1B8(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_8214D854:
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// mr r11,r30
	r11.u64 = r30.u64;
	// addi r10,r3,25
	ctx.r10.s64 = ctx.r3.s64 + 25;
	// addi r8,r11,36
	ctx.r8.s64 = r11.s64 + 36;
loc_8214D864:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// subf. r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x8214d884
	if (!cr0.getEQ()) goto loc_8214D884;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// bne cr6,0x8214d864
	if (!cr6.getEQ()) goto loc_8214D864;
loc_8214D884:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x8214d8a0
	if (!cr6.getEQ()) goto loc_8214D8A0;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// ld r11,72(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 72);
	// ld r10,1896(r3)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r3.u32 + 1896);
	// cmpld cr6,r10,r11
	cr6.compare<uint64_t>(ctx.r10.u64, r11.u64, xer);
	// beq cr6,0x8214da30
	if (cr6.getEQ()) goto loc_8214DA30;
loc_8214D8A0:
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x8214d8c4
	if (!cr6.getEQ()) goto loc_8214D8C4;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8214D8C4:
	// li r28,0
	r28.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_8214D8D4:
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214da30
	if (cr6.getEQ()) goto loc_8214DA30;
	// lbz r11,36(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214da30
	if (cr6.getEQ()) goto loc_8214DA30;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// ld r11,72(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 72);
	// ld r10,1896(r3)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r3.u32 + 1896);
	// cmpld cr6,r10,r11
	cr6.compare<uint64_t>(ctx.r10.u64, r11.u64, xer);
	// bne cr6,0x8214d8c4
	if (!cr6.getEQ()) goto loc_8214D8C4;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// lwz r11,1904(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1904);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8214d928
	if (!cr6.getEQ()) goto loc_8214D928;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// bl 0x8214d280
	sub_8214D280(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_8214D928:
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// lwz r11,1904(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1904);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bge cr6,0x8214da30
	if (!cr6.getLT()) goto loc_8214DA30;
	// li r28,0
	r28.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_8214D948:
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8214da30
	if (cr6.getEQ()) goto loc_8214DA30;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8214da30
	if (cr6.getEQ()) goto loc_8214DA30;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// ld r11,72(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 72);
	// ld r10,1896(r3)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r3.u32 + 1896);
	// cmpld cr6,r10,r11
	cr6.compare<uint64_t>(ctx.r10.u64, r11.u64, xer);
	// bne cr6,0x8214da30
	if (!cr6.getEQ()) goto loc_8214DA30;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// lwz r11,1904(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1904);
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8214da30
	if (!cr6.getEQ()) goto loc_8214DA30;
	// lbz r11,80(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 80);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stb r11,152(r30)
	PPC_STORE_U8(r30.u32 + 152, r11.u8);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_8214D9A0:
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214da30
	if (cr6.getEQ()) goto loc_8214DA30;
	// lbz r11,36(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214da30
	if (cr6.getEQ()) goto loc_8214DA30;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// lwz r11,1904(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1904);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x8214da30
	if (!cr6.getEQ()) goto loc_8214DA30;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// ld r11,72(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 72);
	// ld r10,1896(r3)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r3.u32 + 1896);
	// cmpld cr6,r10,r11
	cr6.compare<uint64_t>(ctx.r10.u64, r11.u64, xer);
	// bne cr6,0x8214da30
	if (!cr6.getEQ()) goto loc_8214DA30;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// bl 0x823bb8f8
	sub_823BB8F8(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_8214D9F4:
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214da30
	if (cr6.getEQ()) goto loc_8214DA30;
	// lbz r11,36(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214da30
	if (cr6.getEQ()) goto loc_8214DA30;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// ld r11,72(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 72);
	// ld r10,1896(r3)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r3.u32 + 1896);
	// cmpld cr6,r10,r11
	cr6.compare<uint64_t>(ctx.r10.u64, r11.u64, xer);
	// bne cr6,0x8214da30
	if (!cr6.getEQ()) goto loc_8214DA30;
	// li r3,17
	ctx.r3.s64 = 17;
	// bl 0x8215fbd0
	sub_8215FBD0(ctx, base);
	// bl 0x8215fd50
	sub_8215FD50(ctx, base);
loc_8214DA30:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8214DA40"))) PPC_WEAK_FUNC(sub_8214DA40);
PPC_FUNC_IMPL(__imp__sub_8214DA40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30312
	r11.s64 = r11.s64 + -30312;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x823ba900
	sub_823BA900(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214da84
	if (cr6.getEQ()) goto loc_8214DA84;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214DA84:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214DAA0"))) PPC_WEAK_FUNC(sub_8214DAA0);
PPC_FUNC_IMPL(__imp__sub_8214DAA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lbz r11,152(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 152);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r31,0
	r31.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214db14
	if (cr6.getEQ()) goto loc_8214DB14;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r11,r11,24812
	r11.s64 = r11.s64 + 24812;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x821647b8
	sub_821647B8(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x8214db14
	if (cr6.getEQ()) goto loc_8214DB14;
	// li r31,1
	r31.s64 = 1;
loc_8214DAEC:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8214d440
	sub_8214D440(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214db30
	if (cr6.getEQ()) goto loc_8214DB30;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x821647c8
	sub_821647C8(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x8214daec
	if (!cr6.getEQ()) goto loc_8214DAEC;
loc_8214DB14:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214DB18:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8214DB30:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x8214db18
	goto loc_8214DB18;
}

__attribute__((alias("__imp__sub_8214DB38"))) PPC_WEAK_FUNC(sub_8214DB38);
PPC_FUNC_IMPL(__imp__sub_8214DB38) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r20{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x823bb3d0
	sub_823BB3D0(ctx, base);
	// lbz r11,1888(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1888);
	// li r26,1
	r26.s64 = 1;
	// li r31,0
	r31.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214db8c
	if (cr6.getEQ()) goto loc_8214DB8C;
	// lwz r11,1860(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1860);
	// addi r3,r30,1860
	ctx.r3.s64 = r30.s64 + 1860;
	// cmplwi cr6,r11,997
	cr6.compare<uint32_t>(r11.u32, 997, xer);
	// beq cr6,0x8214db8c
	if (cr6.getEQ()) goto loc_8214DB8C;
	// li r5,0
	ctx.r5.s64 = 0;
	// stb r31,1888(r30)
	PPC_STORE_U8(r30.u32 + 1888, r31.u8);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8235d6e0
	sub_8235D6E0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8214db8c
	if (!cr6.getEQ()) goto loc_8214DB8C;
	// stb r26,1889(r30)
	PPC_STORE_U8(r30.u32 + 1889, r26.u8);
loc_8214DB8C:
	// lwz r11,1904(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1904);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplwi cr6,r11,15
	cr6.compare<uint32_t>(r11.u32, 15, xer);
	// bgt cr6,0x8214e464
	if (cr6.getGT()) goto loc_8214E464;
	// lis r12,-32235
	r12.s64 = -2112552960;
	// addi r12,r12,-9292
	r12.s64 = r12.s64 + -9292;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_8214DBF4;
	case 1:
		goto loc_8214DD5C;
	case 2:
		goto loc_8214DD78;
	case 3:
		goto loc_8214DF48;
	case 4:
		goto loc_8214E464;
	case 5:
		goto loc_8214E040;
	case 6:
		goto loc_8214E0F0;
	case 7:
		goto loc_8214E14C;
	case 8:
		goto loc_8214E288;
	case 9:
		goto loc_8214E2A4;
	case 10:
		goto loc_8214E2B4;
	case 11:
		goto loc_8214E464;
	case 12:
		goto loc_8214E3AC;
	case 13:
		goto loc_8214E3D0;
	case 14:
		goto loc_8214E400;
	case 15:
		goto loc_8214E454;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-9228(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -9228);
	// lwz r16,-8868(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -8868);
	// lwz r16,-8840(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -8840);
	// lwz r16,-8376(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -8376);
	// lwz r16,-7068(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -7068);
	// lwz r16,-8128(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -8128);
	// lwz r16,-7952(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -7952);
	// lwz r16,-7860(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -7860);
	// lwz r16,-7544(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -7544);
	// lwz r16,-7516(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -7516);
	// lwz r16,-7500(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -7500);
	// lwz r16,-7068(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -7068);
	// lwz r16,-7252(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -7252);
	// lwz r16,-7216(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -7216);
	// lwz r16,-7168(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -7168);
	// lwz r16,-7084(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + -7084);
loc_8214DBF4:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8214dcbc
	if (!cr6.getEQ()) goto loc_8214DCBC;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// ld r10,80(r30)
	ctx.r10.u64 = PPC_LOAD_U64(r30.u32 + 80);
	// li r4,1
	ctx.r4.s64 = 1;
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, r31.u8);
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// std r10,1896(r30)
	PPC_STORE_U64(r30.u32 + 1896, ctx.r10.u64);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214dcb0
	if (cr6.getEQ()) goto loc_8214DCB0;
loc_8214DC30:
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214dc9c
	if (cr6.getEQ()) goto loc_8214DC9C;
	// bl 0x821521d0
	sub_821521D0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214dc9c
	if (!cr6.getEQ()) goto loc_8214DC9C;
	// li r3,88
	ctx.r3.s64 = 88;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214dc7c
	if (cr6.getEQ()) goto loc_8214DC7C;
	// addi r6,r30,61
	ctx.r6.s64 = r30.s64 + 61;
	// ld r7,1896(r30)
	ctx.r7.u64 = PPC_LOAD_U64(r30.u32 + 1896);
	// addi r5,r30,17
	ctx.r5.s64 = r30.s64 + 17;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8214cc80
	sub_8214CC80(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x8214dc80
	goto loc_8214DC80;
loc_8214DC7C:
	// mr r29,r31
	r29.u64 = r31.u64;
loc_8214DC80:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r4,16(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8214DC9C:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8214dc30
	if (!cr6.getEQ()) goto loc_8214DC30;
loc_8214DCB0:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-30572
	r11.s64 = r11.s64 + -30572;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
loc_8214DCBC:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x8214dcd0
	if (cr6.getEQ()) goto loc_8214DCD0;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x8214e464
	if (!cr6.getEQ()) goto loc_8214E464;
loc_8214DCD0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,2
	ctx.r10.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// stw r10,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, ctx.r10.u32);
	// stw r11,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8214DCF8:
	// lwz r3,204(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// lwz r11,208(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8214dd14
	if (cr6.getEQ()) goto loc_8214DD14;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// mr r11,r31
	r11.u64 = r31.u64;
	// bne cr6,0x8214dd18
	if (!cr6.getEQ()) goto loc_8214DD18;
loc_8214DD14:
	// mr r11,r26
	r11.u64 = r26.u64;
loc_8214DD18:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214e464
	if (!cr6.getEQ()) goto loc_8214E464;
	// lbz r11,116(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214dd50
	if (cr6.getEQ()) goto loc_8214DD50;
	// lwz r29,820(r3)
	r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 820);
	// ld r28,784(r3)
	r28.u64 = PPC_LOAD_U64(ctx.r3.u32 + 784);
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// bl 0x8214cdc0
	sub_8214CDC0(ctx, base);
loc_8214DD50:
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214dcf8
	goto loc_8214DCF8;
loc_8214DD5C:
	// lbz r11,1908(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1908);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214e464
	if (cr6.getEQ()) goto loc_8214E464;
	// li r11,3
	r11.s64 = 3;
	// stw r11,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214DD78:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r31.u8);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r29,r26
	r29.u64 = r26.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214ddcc
	if (cr6.getEQ()) goto loc_8214DDCC;
loc_8214DDA4:
	// lbz r11,132(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214ddc8
	if (cr6.getEQ()) goto loc_8214DDC8;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214dda4
	if (!cr6.getEQ()) goto loc_8214DDA4;
	// b 0x8214ddcc
	goto loc_8214DDCC;
loc_8214DDC8:
	// mr r29,r31
	r29.u64 = r31.u64;
loc_8214DDCC:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214de4c
	if (cr6.getEQ()) goto loc_8214DE4C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// stw r11,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_8214DDF8:
	// lwz r10,172(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8214de14
	if (cr6.getEQ()) goto loc_8214DE14;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// mr r11,r31
	r11.u64 = r31.u64;
	// bne cr6,0x8214de18
	if (!cr6.getEQ()) goto loc_8214DE18;
loc_8214DE14:
	// mr r11,r26
	r11.u64 = r26.u64;
loc_8214DE18:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214de40
	if (!cr6.getEQ()) goto loc_8214DE40;
	// lbz r11,116(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214de3c
	if (cr6.getEQ()) goto loc_8214DE3C;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8214ddf8
	goto loc_8214DDF8;
loc_8214DE3C:
	// mr r29,r31
	r29.u64 = r31.u64;
loc_8214DE40:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,14748
	r11.s64 = r11.s64 + 14748;
	// stw r11,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r11.u32);
loc_8214DE4C:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214e464
	if (cr6.getEQ()) goto loc_8214E464;
	// bl 0x823b3528
	sub_823B3528(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,6
	ctx.r10.s64 = 6;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,1912(r30)
	PPC_STORE_U32(r30.u32 + 1912, r11.u32);
	// stw r10,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, ctx.r10.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214e464
	if (cr6.getEQ()) goto loc_8214E464;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// li r25,-1
	r25.s64 = -1;
	// addi r28,r10,-30392
	r28.s64 = ctx.r10.s64 + -30392;
loc_8214DE90:
	// mr r27,r11
	r27.u64 = r11.u64;
	// stb r31,152(r11)
	PPC_STORE_U8(r11.u32 + 152, r31.u8);
	// lbz r11,132(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214df2c
	if (cr6.getEQ()) goto loc_8214DF2C;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x821521d0
	sub_821521D0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214df2c
	if (!cr6.getEQ()) goto loc_8214DF2C;
	// li r3,88
	ctx.r3.s64 = 88;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214df0c
	if (cr6.getEQ()) goto loc_8214DF0C;
	// ld r11,1896(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 1896);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// stw r25,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r25.u32);
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// stb r31,80(r3)
	PPC_STORE_U8(ctx.r3.u32 + 80, r31.u8);
	// stw r26,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r26.u32);
	// std r11,72(r3)
	PPC_STORE_U64(ctx.r3.u32 + 72, r11.u64);
	// b 0x8214df10
	goto loc_8214DF10;
loc_8214DF0C:
	// mr r29,r31
	r29.u64 = r31.u64;
loc_8214DF10:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r4,16(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8214DF2C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214de90
	if (!cr6.getEQ()) goto loc_8214DE90;
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214DF48:
	// lbz r11,1888(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1888);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214e464
	if (!cr6.getEQ()) goto loc_8214E464;
	// lbz r11,1889(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1889);
	// li r29,2
	r29.s64 = 2;
	// lwz r3,1856(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 1856);
	// li r4,0
	ctx.r4.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214df78
	if (cr6.getEQ()) goto loc_8214DF78;
	// li r11,5
	r11.s64 = 5;
	// stw r11,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r11.u32);
	// b 0x8214df7c
	goto loc_8214DF7C;
loc_8214DF78:
	// stw r29,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r29.u32);
loc_8214DF7C:
	// bl 0x8209cc20
	sub_8209CC20(ctx, base);
	// stw r31,1856(r30)
	PPC_STORE_U32(r30.u32 + 1856, r31.u32);
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214e464
	if (cr6.getEQ()) goto loc_8214E464;
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// lbz r11,12(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214e464
	if (!cr6.getEQ()) goto loc_8214E464;
	// li r3,88
	ctx.r3.s64 = 88;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214e010
	if (cr6.getEQ()) goto loc_8214E010;
	// lwz r9,1904(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 1904);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// ld r11,1896(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 1896);
	// li r8,-1
	ctx.r8.s64 = -1;
	// addi r9,r9,-5
	ctx.r9.s64 = ctx.r9.s64 + -5;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// addi r10,r10,-30392
	ctx.r10.s64 = ctx.r10.s64 + -30392;
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// cntlzw r9,r9
	ctx.r9.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// rlwinm r9,r9,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// stw r8,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r8.u32);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r29,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r29.u32);
	// std r11,72(r3)
	PPC_STORE_U64(ctx.r3.u32 + 72, r11.u64);
	// stb r9,80(r3)
	PPC_STORE_U8(ctx.r3.u32 + 80, ctx.r9.u8);
	// b 0x8214e014
	goto loc_8214E014;
loc_8214E010:
	// mr r30,r31
	r30.u64 = r31.u64;
loc_8214E014:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,16(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214E040:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, r31.u8);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r28,r26
	r28.u64 = r26.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r3,120(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214e0b0
	if (cr6.getEQ()) goto loc_8214E0B0;
loc_8214E06C:
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214e09c
	if (cr6.getEQ()) goto loc_8214E09C;
	// bl 0x821521d0
	sub_821521D0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214e09c
	if (!cr6.getEQ()) goto loc_8214E09C;
	// lbz r11,152(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 152);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214e09c
	if (!cr6.getEQ()) goto loc_8214E09C;
	// mr r28,r31
	r28.u64 = r31.u64;
loc_8214E09C:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r3,120(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8214e06c
	if (!cr6.getEQ()) goto loc_8214E06C;
loc_8214E0B0:
	// bl 0x823b3528
	sub_823B3528(ctx, base);
	// lwz r11,1912(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1912);
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// cmplwi cr6,r11,30000
	cr6.compare<uint32_t>(r11.u32, 30000, xer);
	// ble cr6,0x8214e0c8
	if (!cr6.getGT()) goto loc_8214E0C8;
	// mr r31,r26
	r31.u64 = r26.u64;
loc_8214E0C8:
	// clrlwi r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214e0e0
	if (!cr6.getEQ()) goto loc_8214E0E0;
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214e464
	if (cr6.getEQ()) goto loc_8214E464;
loc_8214E0E0:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8214d368
	sub_8214D368(ctx, base);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214E0F0:
	// lbz r11,1888(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1888);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214e464
	if (!cr6.getEQ()) goto loc_8214E464;
	// lbz r11,1889(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1889);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214e118
	if (cr6.getEQ()) goto loc_8214E118;
	// li r11,8
	r11.s64 = 8;
	// stw r11,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214E118:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,1856(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 1856);
	// bl 0x8209cc20
	sub_8209CC20(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r31,1856(r30)
	PPC_STORE_U32(r30.u32 + 1856, r31.u32);
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r11,15
	r11.s64 = 15;
	// stw r11,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214E14C:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r31,1916(r30)
	PPC_STORE_U32(r30.u32 + 1916, r31.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, r31.u8);
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lwz r28,136(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lis r23,-32254
	r23.s64 = -2113798144;
	// addi r27,r11,-30392
	r27.s64 = r11.s64 + -30392;
	// li r25,-1
	r25.s64 = -1;
	// li r26,4
	r26.s64 = 4;
loc_8214E184:
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r24,136(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// bl 0x8214daa0
	sub_8214DAA0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214e268
	if (!cr6.getEQ()) goto loc_8214E268;
	// lbz r11,12(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214e268
	if (!cr6.getEQ()) goto loc_8214E268;
	// lwz r11,52(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 52);
	// lwz r10,-26072(r23)
	ctx.r10.u64 = PPC_LOAD_U32(r23.u32 + -26072);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8214e1e8
	if (cr6.getEQ()) goto loc_8214E1E8;
	// lwz r10,1916(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 1916);
	// cmpwi cr6,r10,64
	cr6.compare<int32_t>(ctx.r10.s32, 64, xer);
	// bge cr6,0x8214e1e8
	if (!cr6.getLT()) goto loc_8214E1E8;
	// addi r10,r10,480
	ctx.r10.s64 = ctx.r10.s64 + 480;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r11,r10,r30
	PPC_STORE_U32(ctx.r10.u32 + r30.u32, r11.u32);
	// lwz r11,1916(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1916);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,1916(r30)
	PPC_STORE_U32(r30.u32 + 1916, r11.u32);
loc_8214E1E8:
	// li r3,88
	ctx.r3.s64 = 88;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214e23c
	if (cr6.getEQ()) goto loc_8214E23C;
	// ld r11,1896(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 1896);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// stw r25,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r25.u32);
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r27,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r27.u32);
	// stb r31,80(r3)
	PPC_STORE_U8(ctx.r3.u32 + 80, r31.u8);
	// stw r26,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r26.u32);
	// std r11,72(r3)
	PPC_STORE_U64(ctx.r3.u32 + 72, r11.u64);
	// b 0x8214e240
	goto loc_8214E240;
loc_8214E23C:
	// mr r29,r31
	r29.u64 = r31.u64;
loc_8214E240:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r4,16(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r28,468
	ctx.r3.s64 = r28.s64 + 468;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_8214E268:
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// beq cr6,0x8214e278
	if (cr6.getEQ()) goto loc_8214E278;
	// mr r28,r24
	r28.u64 = r24.u64;
	// b 0x8214e184
	goto loc_8214E184;
loc_8214E278:
	// li r11,9
	r11.s64 = 9;
	// stw r11,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214E288:
	// lwz r11,1916(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1916);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8214e464
	if (!cr6.getEQ()) goto loc_8214E464;
	// li r11,10
	r11.s64 = 10;
	// stw r11,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214E2A4:
	// li r11,11
	r11.s64 = 11;
	// stw r11,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214E2B4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823bb8f8
	sub_823BB8F8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r4,1
	ctx.r4.s64 = 1;
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, r31.u8);
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r3,152(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214e39c
	if (cr6.getEQ()) goto loc_8214E39C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r27,3
	r27.s64 = 3;
	// addi r28,r11,-30392
	r28.s64 = r11.s64 + -30392;
	// li r25,-1
	r25.s64 = -1;
loc_8214E2F4:
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214e388
	if (cr6.getEQ()) goto loc_8214E388;
	// bl 0x821521d0
	sub_821521D0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214e388
	if (!cr6.getEQ()) goto loc_8214E388;
	// li r3,88
	ctx.r3.s64 = 88;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214e368
	if (cr6.getEQ()) goto loc_8214E368;
	// ld r11,1896(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 1896);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// stw r25,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r25.u32);
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// stb r31,80(r3)
	PPC_STORE_U8(ctx.r3.u32 + 80, r31.u8);
	// stw r27,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r27.u32);
	// std r11,72(r3)
	PPC_STORE_U64(ctx.r3.u32 + 72, r11.u64);
	// b 0x8214e36c
	goto loc_8214E36C;
loc_8214E368:
	// mr r29,r31
	r29.u64 = r31.u64;
loc_8214E36C:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r4,16(r26)
	ctx.r4.u64 = PPC_LOAD_U32(r26.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8214E388:
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r3,152(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8214e2f4
	if (!cr6.getEQ()) goto loc_8214E2F4;
loc_8214E39C:
	// li r11,12
	r11.s64 = 12;
	// stw r11,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214E3AC:
	// bl 0x8217c108
	sub_8217C108(ctx, base);
	// bl 0x8217bd80
	sub_8217BD80(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214e464
	if (!cr6.getEQ()) goto loc_8214E464;
	// li r11,14
	r11.s64 = 14;
	// stw r11,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214E3D0:
	// lbz r11,1888(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1888);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214e464
	if (!cr6.getEQ()) goto loc_8214E464;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r11,15
	r11.s64 = 15;
	// stw r11,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214E400:
	// lwz r11,204(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 204);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8214e464
	if (!cr6.getEQ()) goto loc_8214E464;
	// lwz r11,312(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 312);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8214e430
	if (!cr6.getGT()) goto loc_8214E430;
loc_8214E418:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// ld r4,320(r30)
	ctx.r4.u64 = PPC_LOAD_U64(r30.u32 + 320);
	// bl 0x8214cea0
	sub_8214CEA0(ctx, base);
	// lwz r11,312(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 312);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x8214e418
	if (cr6.getGT()) goto loc_8214E418;
loc_8214E430:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r11,16
	r11.s64 = 16;
	// stw r11,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
loc_8214E454:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8214e464
	if (!cr6.getEQ()) goto loc_8214E464;
	// stw r31,1904(r30)
	PPC_STORE_U32(r30.u32 + 1904, r31.u32);
loc_8214E464:
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_8214E470"))) PPC_WEAK_FUNC(sub_8214E470);
PPC_FUNC_IMPL(__imp__sub_8214E470) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30192
	r11.s64 = r11.s64 + -30192;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214e4b4
	if (cr6.getEQ()) goto loc_8214E4B4;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214E4B4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214E4D0"))) PPC_WEAK_FUNC(sub_8214E4D0);
PPC_FUNC_IMPL(__imp__sub_8214E4D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-29564
	r11.s64 = r11.s64 + -29564;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214e514
	if (cr6.getEQ()) goto loc_8214E514;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214E514:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214E530"))) PPC_WEAK_FUNC(sub_8214E530);
PPC_FUNC_IMPL(__imp__sub_8214E530) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30052
	r11.s64 = r11.s64 + -30052;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x821777e0
	sub_821777E0(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214e574
	if (cr6.getEQ()) goto loc_8214E574;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214E574:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214E590"))) PPC_WEAK_FUNC(sub_8214E590);
PPC_FUNC_IMPL(__imp__sub_8214E590) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82177a68
	sub_82177A68(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r31,16
	r30.s64 = r31.s64 + 16;
	// addi r11,r11,-29996
	r11.s64 = r11.s64 + -29996;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r31,68
	r29.s64 = r31.s64 + 68;
	// addi r25,r11,-29564
	r25.s64 = r11.s64 + -29564;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r25,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r25.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,120
	r28.s64 = r31.s64 + 120;
	// stw r25,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r25.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r31,176
	r29.s64 = r31.s64 + 176;
	// addi r30,r11,-29564
	r30.s64 = r11.s64 + -29564;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,228
	r28.s64 = r31.s64 + 228;
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r29,r31,280
	r29.s64 = r31.s64 + 280;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,332
	r28.s64 = r31.s64 + 332;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r29,r31,384
	r29.s64 = r31.s64 + 384;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,436
	r28.s64 = r31.s64 + 436;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r29,r31,488
	r29.s64 = r31.s64 + 488;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r27,r31,540
	r27.s64 = r31.s64 + 540;
	// addi r11,r11,-30108
	r11.s64 = r11.s64 + -30108;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r29,0
	r29.s64 = 0;
	// addi r28,r11,-30164
	r28.s64 = r11.s64 + -30164;
	// addi r26,r31,596
	r26.s64 = r31.s64 + 596;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stw r29,52(r27)
	PPC_STORE_U32(r27.u32 + 52, r29.u32);
	// stw r28,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r28.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,652
	r27.s64 = r31.s64 + 652;
	// stw r29,52(r26)
	PPC_STORE_U32(r26.u32 + 52, r29.u32);
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r28,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r28.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r26,r31,708
	r26.s64 = r31.s64 + 708;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r29,52(r27)
	PPC_STORE_U32(r27.u32 + 52, r29.u32);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stw r28,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r28.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,764
	r27.s64 = r31.s64 + 764;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r29,52(r26)
	PPC_STORE_U32(r26.u32 + 52, r29.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r28,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r28.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r26,r31,820
	r26.s64 = r31.s64 + 820;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r29,52(r27)
	PPC_STORE_U32(r27.u32 + 52, r29.u32);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stw r28,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r28.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,876
	r27.s64 = r31.s64 + 876;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r29,52(r26)
	PPC_STORE_U32(r26.u32 + 52, r29.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r28,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r28.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r26,r31,932
	r26.s64 = r31.s64 + 932;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r29,52(r27)
	PPC_STORE_U32(r27.u32 + 52, r29.u32);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stw r28,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r28.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,988
	r27.s64 = r31.s64 + 988;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r29,52(r26)
	PPC_STORE_U32(r26.u32 + 52, r29.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r28,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r28.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r31,1044
	r28.s64 = r31.s64 + 1044;
	// stw r29,52(r27)
	PPC_STORE_U32(r27.u32 + 52, r29.u32);
	// addi r26,r11,-30164
	r26.s64 = r11.s64 + -30164;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r26,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r26.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,1100
	r27.s64 = r31.s64 + 1100;
	// stw r26,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r26.u32);
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r29,52(r28)
	PPC_STORE_U32(r28.u32 + 52, r29.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r31,1172
	r28.s64 = r31.s64 + 1172;
	// stw r29,52(r27)
	PPC_STORE_U32(r27.u32 + 52, r29.u32);
	// addi r11,r11,-30136
	r11.s64 = r11.s64 + -30136;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r11,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r11.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r29,r31,1224
	r29.s64 = r31.s64 + 1224;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r31,1276
	r28.s64 = r31.s64 + 1276;
	// addi r11,r11,-30080
	r11.s64 = r11.s64 + -30080;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r29,r31,1328
	r29.s64 = r31.s64 + 1328;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,1380
	r28.s64 = r31.s64 + 1380;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r29,r31,1432
	r29.s64 = r31.s64 + 1432;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r31,1484
	r30.s64 = r31.s64 + 1484;
	// addi r11,r11,-30192
	r11.s64 = r11.s64 + -30192;
	// li r28,63
	r28.s64 = 63;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
loc_8214E844:
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// stw r25,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r25.u32);
	// addi r30,r30,52
	r30.s64 = r30.s64 + 52;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bge cr6,0x8214e844
	if (!cr6.getLT()) goto loc_8214E844;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r31,4812
	r30.s64 = r31.s64 + 4812;
	// li r29,3
	r29.s64 = 3;
	// addi r28,r11,-30192
	r28.s64 = r11.s64 + -30192;
loc_8214E874:
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// stw r28,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r28.u32);
	// addi r30,r30,52
	r30.s64 = r30.s64 + 52;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bge cr6,0x8214e874
	if (!cr6.getLT()) goto loc_8214E874;
	// addi r30,r31,5020
	r30.s64 = r31.s64 + 5020;
	// li r29,63
	r29.s64 = 63;
loc_8214E89C:
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// stw r28,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r28.u32);
	// addi r30,r30,52
	r30.s64 = r30.s64 + 52;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bge cr6,0x8214e89c
	if (!cr6.getLT()) goto loc_8214E89C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8214E8C8"))) PPC_WEAK_FUNC(sub_8214E8C8);
PPC_FUNC_IMPL(__imp__sub_8214E8C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-29996
	r11.s64 = r11.s64 + -29996;
	// addi r27,r31,3328
	r27.s64 = r31.s64 + 3328;
	// li r29,63
	r29.s64 = 63;
	// addi r30,r27,5020
	r30.s64 = r27.s64 + 5020;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r11,-30192
	r28.s64 = r11.s64 + -30192;
loc_8214E8F8:
	// addi r30,r30,-52
	r30.s64 = r30.s64 + -52;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r28,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r28.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bge cr6,0x8214e8f8
	if (!cr6.getLT()) goto loc_8214E8F8;
	// addi r30,r31,5020
	r30.s64 = r31.s64 + 5020;
	// li r29,3
	r29.s64 = 3;
loc_8214E91C:
	// addi r30,r30,-52
	r30.s64 = r30.s64 + -52;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r28,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r28.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bge cr6,0x8214e91c
	if (!cr6.getLT()) goto loc_8214E91C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r27,1484
	r30.s64 = r27.s64 + 1484;
	// li r28,63
	r28.s64 = 63;
	// addi r29,r11,-29564
	r29.s64 = r11.s64 + -29564;
loc_8214E948:
	// addi r30,r30,-52
	r30.s64 = r30.s64 + -52;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r29,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bge cr6,0x8214e948
	if (!cr6.getLT()) goto loc_8214E948;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r31,1432
	ctx.r3.s64 = r31.s64 + 1432;
	// addi r11,r11,-30192
	r11.s64 = r11.s64 + -30192;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r31,1380
	ctx.r3.s64 = r31.s64 + 1380;
	// addi r30,r11,-29564
	r30.s64 = r11.s64 + -29564;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,1328
	ctx.r3.s64 = r31.s64 + 1328;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,1276
	ctx.r3.s64 = r31.s64 + 1276;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,1224
	ctx.r3.s64 = r31.s64 + 1224;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,1172
	ctx.r3.s64 = r31.s64 + 1172;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,1100
	ctx.r3.s64 = r31.s64 + 1100;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,1044
	ctx.r3.s64 = r31.s64 + 1044;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,988
	ctx.r3.s64 = r31.s64 + 988;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,932
	ctx.r3.s64 = r31.s64 + 932;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,876
	ctx.r3.s64 = r31.s64 + 876;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,820
	ctx.r3.s64 = r31.s64 + 820;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,764
	ctx.r3.s64 = r31.s64 + 764;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,708
	ctx.r3.s64 = r31.s64 + 708;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,652
	ctx.r3.s64 = r31.s64 + 652;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,596
	ctx.r3.s64 = r31.s64 + 596;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,540
	ctx.r3.s64 = r31.s64 + 540;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,488
	ctx.r3.s64 = r31.s64 + 488;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,436
	ctx.r3.s64 = r31.s64 + 436;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,384
	ctx.r3.s64 = r31.s64 + 384;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,332
	ctx.r3.s64 = r31.s64 + 332;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,280
	ctx.r3.s64 = r31.s64 + 280;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,228
	ctx.r3.s64 = r31.s64 + 228;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,176
	ctx.r3.s64 = r31.s64 + 176;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,68
	ctx.r3.s64 = r31.s64 + 68;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,16
	ctx.r3.s64 = r31.s64 + 16;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82177a88
	sub_82177A88(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8214EAC8"))) PPC_WEAK_FUNC(sub_8214EAC8);
PPC_FUNC_IMPL(__imp__sub_8214EAC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x8214e8c8
	sub_8214E8C8(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214eb00
	if (cr6.getEQ()) goto loc_8214EB00;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214EB00:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214EB18"))) PPC_WEAK_FUNC(sub_8214EB18);
PPC_FUNC_IMPL(__imp__sub_8214EB18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32019
	r11.s64 = -2098397184;
	// li r3,8348
	ctx.r3.s64 = 8348;
	// addi r31,r11,25988
	r31.s64 = r11.s64 + 25988;
	// li r11,0
	r11.s64 = 0;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// bl 0x8209d088
	sub_8209D088(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214eb50
	if (cr6.getEQ()) goto loc_8214EB50;
	// bl 0x8214e590
	sub_8214E590(ctx, base);
	// b 0x8214eb54
	goto loc_8214EB54;
loc_8214EB50:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8214EB54:
	// lis r11,-31993
	r11.s64 = -2096693248;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r11,r11,29100
	r11.s64 = r11.s64 + 29100;
	// stw r3,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r3.u32);
	// lis r11,-31993
	r11.s64 = -2096693248;
	// addi r4,r11,29116
	ctx.r4.s64 = r11.s64 + 29116;
	// bl 0x82177ad8
	sub_82177AD8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214EB88"))) PPC_WEAK_FUNC(sub_8214EB88);
PPC_FUNC_IMPL(__imp__sub_8214EB88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,12(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214ebe8
	if (cr6.getEQ()) goto loc_8214EBE8;
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214ebe8
	if (cr6.getEQ()) goto loc_8214EBE8;
	// bl 0x8217f2f8
	sub_8217F2F8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214ebdc
	if (!cr6.getEQ()) goto loc_8214EBDC;
	// bl 0x8217f308
	sub_8217F308(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214ebe8
	if (cr6.getEQ()) goto loc_8214EBE8;
loc_8214EBDC:
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// lbz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// b 0x8214ebf4
	goto loc_8214EBF4;
loc_8214EBE8:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821770f8
	sub_821770F8(ctx, base);
loc_8214EBF4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214EC10"))) PPC_WEAK_FUNC(sub_8214EC10);
PPC_FUNC_IMPL(__imp__sub_8214EC10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214ec6c
	if (cr6.getEQ()) goto loc_8214EC6C;
	// bl 0x8217f2f8
	sub_8217F2F8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214ec50
	if (!cr6.getEQ()) goto loc_8214EC50;
	// bl 0x8217f308
	sub_8217F308(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214ec6c
	if (cr6.getEQ()) goto loc_8214EC6C;
loc_8214EC50:
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// lbz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8214EC6C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82177050
	sub_82177050(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214EC88"))) PPC_WEAK_FUNC(sub_8214EC88);
PPC_FUNC_IMPL(__imp__sub_8214EC88) {
	PPC_FUNC_PROLOGUE();
	// b 0x8215fa58
	sub_8215FA58(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214EC90"))) PPC_WEAK_FUNC(sub_8214EC90);
PPC_FUNC_IMPL(__imp__sub_8214EC90) {
	PPC_FUNC_PROLOGUE();
	// b 0x82160ac0
	sub_82160AC0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214EC98"))) PPC_WEAK_FUNC(sub_8214EC98);
PPC_FUNC_IMPL(__imp__sub_8214EC98) {
	PPC_FUNC_PROLOGUE();
	// b 0x82178698
	sub_82178698(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214ECA0"))) PPC_WEAK_FUNC(sub_8214ECA0);
PPC_FUNC_IMPL(__imp__sub_8214ECA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r3,29100(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// b 0x82178ef0
	sub_82178EF0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214ECB4"))) PPC_WEAK_FUNC(sub_8214ECB4);
PPC_FUNC_IMPL(__imp__sub_8214ECB4) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214ECB8"))) PPC_WEAK_FUNC(sub_8214ECB8);
PPC_FUNC_IMPL(__imp__sub_8214ECB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// li r31,1
	r31.s64 = 1;
	// lwz r3,29100(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8214ecf0
	if (cr6.getEQ()) goto loc_8214ECF0;
	// bl 0x82177c38
	sub_82177C38(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214ecf4
	if (cr6.getEQ()) goto loc_8214ECF4;
loc_8214ECF0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8214ECF4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214ED08"))) PPC_WEAK_FUNC(sub_8214ED08);
PPC_FUNC_IMPL(__imp__sub_8214ED08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r3,29100(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// b 0x82177c98
	sub_82177C98(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214ED1C"))) PPC_WEAK_FUNC(sub_8214ED1C);
PPC_FUNC_IMPL(__imp__sub_8214ED1C) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214ED20"))) PPC_WEAK_FUNC(sub_8214ED20);
PPC_FUNC_IMPL(__imp__sub_8214ED20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r3,29100(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// b 0x82177bc8
	sub_82177BC8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214ED34"))) PPC_WEAK_FUNC(sub_8214ED34);
PPC_FUNC_IMPL(__imp__sub_8214ED34) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214ED38"))) PPC_WEAK_FUNC(sub_8214ED38);
PPC_FUNC_IMPL(__imp__sub_8214ED38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r3,29100(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// b 0x82178f30
	sub_82178F30(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214ED4C"))) PPC_WEAK_FUNC(sub_8214ED4C);
PPC_FUNC_IMPL(__imp__sub_8214ED4C) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214ED50"))) PPC_WEAK_FUNC(sub_8214ED50);
PPC_FUNC_IMPL(__imp__sub_8214ED50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r4,8(r5)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	// lwz r3,29100(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// b 0x82177ba0
	sub_82177BA0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214ED60"))) PPC_WEAK_FUNC(sub_8214ED60);
PPC_FUNC_IMPL(__imp__sub_8214ED60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r5,8(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// blelr cr6
	if (!cr6.getGT()) return;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// lwz r4,8(r6)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r6.u32 + 8);
	// b 0x823b2af8
	sub_823B2AF8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8214ED7C"))) PPC_WEAK_FUNC(sub_8214ED7C);
PPC_FUNC_IMPL(__imp__sub_8214ED7C) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214ED80"))) PPC_WEAK_FUNC(sub_8214ED80);
PPC_FUNC_IMPL(__imp__sub_8214ED80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8214edc0
	if (!cr6.getGT()) goto loc_8214EDC0;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
loc_8214EDC0:
	// lis r11,-31993
	r11.s64 = -2096693248;
	// addi r3,r11,29116
	ctx.r3.s64 = r11.s64 + 29116;
	// bl 0x82177a40
	sub_82177A40(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214EDF0"))) PPC_WEAK_FUNC(sub_8214EDF0);
PPC_FUNC_IMPL(__imp__sub_8214EDF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// addi r29,r31,24
	r29.s64 = r31.s64 + 24;
	// li r28,124
	r28.s64 = 124;
	// li r3,124
	ctx.r3.s64 = 124;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,60
	r29.s64 = r31.s64 + 60;
	// li r3,124
	ctx.r3.s64 = 124;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,96
	ctx.r4.s64 = r31.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,124
	ctx.r4.s64 = r31.s64 + 124;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,152
	ctx.r4.s64 = r31.s64 + 152;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,180
	ctx.r4.s64 = r31.s64 + 180;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,208
	ctx.r4.s64 = r31.s64 + 208;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,236
	ctx.r4.s64 = r31.s64 + 236;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,264
	ctx.r4.s64 = r31.s64 + 264;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,292
	ctx.r4.s64 = r31.s64 + 292;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,320
	r29.s64 = r31.s64 + 320;
	// li r11,3
	r11.s64 = 3;
	// li r3,3
	ctx.r3.s64 = 3;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,356
	r29.s64 = r31.s64 + 356;
	// li r28,15
	r28.s64 = 15;
	// li r3,15
	ctx.r3.s64 = 15;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,392
	r29.s64 = r31.s64 + 392;
	// li r11,6
	r11.s64 = 6;
	// li r3,6
	ctx.r3.s64 = 6;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,428
	r29.s64 = r31.s64 + 428;
	// li r3,15
	ctx.r3.s64 = 15;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,464
	r29.s64 = r31.s64 + 464;
	// li r11,7
	r11.s64 = 7;
	// li r3,7
	ctx.r3.s64 = 7;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,500
	r29.s64 = r31.s64 + 500;
	// li r11,63
	r11.s64 = 63;
	// li r3,63
	ctx.r3.s64 = 63;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,536
	r29.s64 = r31.s64 + 536;
	// li r11,31
	r11.s64 = 31;
	// li r3,31
	ctx.r3.s64 = 31;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,572
	r29.s64 = r31.s64 + 572;
	// li r3,15
	ctx.r3.s64 = 15;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,608
	ctx.r4.s64 = r31.s64 + 608;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,636
	ctx.r4.s64 = r31.s64 + 636;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,664
	r29.s64 = r31.s64 + 664;
	// li r26,4
	r26.s64 = 4;
	// li r25,1
	r25.s64 = 1;
	// li r3,3
	ctx.r3.s64 = 3;
	// stb r26,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r26.u8);
	// stb r25,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r25.u8);
	// stb r26,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r26.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,700
	ctx.r4.s64 = r31.s64 + 700;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,728
	r29.s64 = r31.s64 + 728;
	// li r11,2
	r11.s64 = 2;
	// li r3,2
	ctx.r3.s64 = 2;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,764
	ctx.r4.s64 = r31.s64 + 764;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,792
	ctx.r4.s64 = r31.s64 + 792;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,820
	ctx.r4.s64 = r31.s64 + 820;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,848
	r29.s64 = r31.s64 + 848;
	// li r11,-1
	r11.s64 = -1;
	// li r10,127
	ctx.r10.s64 = 127;
	// li r3,128
	ctx.r3.s64 = 128;
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stw r11,24(r29)
	PPC_STORE_U32(r29.u32 + 24, r11.u32);
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// stw r10,36(r29)
	PPC_STORE_U32(r29.u32 + 36, ctx.r10.u32);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,40(r29)
	PPC_STORE_U32(r29.u32 + 40, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,920
	r29.s64 = r31.s64 + 920;
	// li r27,64
	r27.s64 = 64;
loc_8214F15C:
	// li r3,15
	ctx.r3.s64 = 15;
	// stb r30,-4(r29)
	PPC_STORE_U8(r29.u32 + -4, r30.u8);
	// stb r30,0(r29)
	PPC_STORE_U8(r29.u32 + 0, r30.u8);
	// stb r28,1(r29)
	PPC_STORE_U8(r29.u32 + 1, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r4,r29,-28
	ctx.r4.s64 = r29.s64 + -28;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// addi r29,r29,36
	r29.s64 = r29.s64 + 36;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x8214f15c
	if (!cr6.getEQ()) goto loc_8214F15C;
	// addi r29,r31,3224
	r29.s64 = r31.s64 + 3224;
	// li r28,-1
	r28.s64 = -1;
loc_8214F19C:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r30,-4(r29)
	PPC_STORE_U32(r29.u32 + -4, r30.u32);
	// stb r25,0(r29)
	PPC_STORE_U8(r29.u32 + 0, r25.u8);
	// stw r30,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r30.u32);
	// stw r28,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r28.u32);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r4,r29,-28
	ctx.r4.s64 = r29.s64 + -28;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r26,r26,-1
	r26.s64 = r26.s64 + -1;
	// addi r29,r29,44
	r29.s64 = r29.s64 + 44;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// bne cr6,0x8214f19c
	if (!cr6.getEQ()) goto loc_8214F19C;
	// addi r29,r31,3400
	r29.s64 = r31.s64 + 3400;
	// li r28,64
	r28.s64 = 64;
	// li r27,511
	r27.s64 = 511;
loc_8214F1E4:
	// li r3,511
	ctx.r3.s64 = 511;
	// stw r30,-4(r29)
	PPC_STORE_U32(r29.u32 + -4, r30.u32);
	// stb r30,0(r29)
	PPC_STORE_U8(r29.u32 + 0, r30.u8);
	// stw r30,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r30.u32);
	// stw r27,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r27.u32);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r4,r29,-28
	ctx.r4.s64 = r29.s64 + -28;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// addi r29,r29,44
	r29.s64 = r29.s64 + 44;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x8214f1e4
	if (!cr6.getEQ()) goto loc_8214F1E4;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8214F228"))) PPC_WEAK_FUNC(sub_8214F228);
PPC_FUNC_IMPL(__imp__sub_8214F228) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,16
	ctx.r3.s64 = r30.s64 + 16;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,68
	ctx.r3.s64 = r30.s64 + 68;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,120
	ctx.r3.s64 = r30.s64 + 120;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,176
	ctx.r3.s64 = r30.s64 + 176;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,228
	ctx.r3.s64 = r30.s64 + 228;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179b38
	sub_82179B38(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,280
	ctx.r3.s64 = r30.s64 + 280;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179b38
	sub_82179B38(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,332
	ctx.r3.s64 = r30.s64 + 332;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,384
	ctx.r3.s64 = r30.s64 + 384;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,436
	ctx.r3.s64 = r30.s64 + 436;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,488
	ctx.r3.s64 = r30.s64 + 488;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,540
	ctx.r3.s64 = r30.s64 + 540;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,596
	ctx.r3.s64 = r30.s64 + 596;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,652
	ctx.r3.s64 = r30.s64 + 652;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,708
	ctx.r3.s64 = r30.s64 + 708;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,764
	ctx.r3.s64 = r30.s64 + 764;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,820
	ctx.r3.s64 = r30.s64 + 820;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,876
	ctx.r3.s64 = r30.s64 + 876;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,932
	ctx.r3.s64 = r30.s64 + 932;
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,988
	ctx.r3.s64 = r30.s64 + 988;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,1044
	ctx.r3.s64 = r30.s64 + 1044;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,1100
	ctx.r3.s64 = r30.s64 + 1100;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,1172
	ctx.r3.s64 = r30.s64 + 1172;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,1224
	ctx.r3.s64 = r30.s64 + 1224;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,1276
	ctx.r3.s64 = r30.s64 + 1276;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,1328
	ctx.r3.s64 = r30.s64 + 1328;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179b38
	sub_82179B38(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,1380
	ctx.r3.s64 = r30.s64 + 1380;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,1432
	ctx.r3.s64 = r30.s64 + 1432;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// addi r28,r30,1484
	r28.s64 = r30.s64 + 1484;
	// li r29,64
	r29.s64 = 64;
loc_8214F42C:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// addi r28,r28,52
	r28.s64 = r28.s64 + 52;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8214f42c
	if (!cr6.getEQ()) goto loc_8214F42C;
	// addi r28,r30,4812
	r28.s64 = r30.s64 + 4812;
	// li r29,4
	r29.s64 = 4;
loc_8214F454:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// addi r28,r28,52
	r28.s64 = r28.s64 + 52;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8214f454
	if (!cr6.getEQ()) goto loc_8214F454;
	// addi r29,r30,5020
	r29.s64 = r30.s64 + 5020;
	// li r30,64
	r30.s64 = 64;
loc_8214F47C:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r29,r29,52
	r29.s64 = r29.s64 + 52;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x8214f47c
	if (!cr6.getEQ()) goto loc_8214F47C;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8214F4A8"))) PPC_WEAK_FUNC(sub_8214F4A8);
PPC_FUNC_IMPL(__imp__sub_8214F4A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// clrlwi r11,r4,24
	r11.u64 = ctx.r4.u32 & 0xFF;
	// addi r9,r3,1517
	ctx.r9.s64 = ctx.r3.s64 + 1517;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// li r10,64
	ctx.r10.s64 = 64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stb r11,49(r3)
	PPC_STORE_U8(ctx.r3.u32 + 49, r11.u8);
	// stb r11,101(r3)
	PPC_STORE_U8(ctx.r3.u32 + 101, r11.u8);
	// stb r11,153(r3)
	PPC_STORE_U8(ctx.r3.u32 + 153, r11.u8);
	// stb r11,209(r3)
	PPC_STORE_U8(ctx.r3.u32 + 209, r11.u8);
	// stb r11,261(r3)
	PPC_STORE_U8(ctx.r3.u32 + 261, r11.u8);
	// stb r11,313(r3)
	PPC_STORE_U8(ctx.r3.u32 + 313, r11.u8);
	// stb r11,365(r3)
	PPC_STORE_U8(ctx.r3.u32 + 365, r11.u8);
	// stb r11,417(r3)
	PPC_STORE_U8(ctx.r3.u32 + 417, r11.u8);
	// stb r11,469(r3)
	PPC_STORE_U8(ctx.r3.u32 + 469, r11.u8);
	// stb r11,521(r3)
	PPC_STORE_U8(ctx.r3.u32 + 521, r11.u8);
	// stb r11,573(r3)
	PPC_STORE_U8(ctx.r3.u32 + 573, r11.u8);
	// stb r11,629(r3)
	PPC_STORE_U8(ctx.r3.u32 + 629, r11.u8);
	// stb r11,685(r3)
	PPC_STORE_U8(ctx.r3.u32 + 685, r11.u8);
	// stb r11,741(r3)
	PPC_STORE_U8(ctx.r3.u32 + 741, r11.u8);
	// stb r11,797(r3)
	PPC_STORE_U8(ctx.r3.u32 + 797, r11.u8);
	// stb r11,853(r3)
	PPC_STORE_U8(ctx.r3.u32 + 853, r11.u8);
	// stb r11,909(r3)
	PPC_STORE_U8(ctx.r3.u32 + 909, r11.u8);
	// stb r11,965(r3)
	PPC_STORE_U8(ctx.r3.u32 + 965, r11.u8);
	// stb r11,1021(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1021, r11.u8);
	// stb r11,1077(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1077, r11.u8);
	// stb r11,1133(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1133, r11.u8);
	// stb r11,1361(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1361, r11.u8);
	// stb r11,1413(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1413, r11.u8);
	// stb r11,1465(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1465, r11.u8);
loc_8214F51C:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stb r11,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, r11.u8);
	// addi r9,r9,52
	ctx.r9.s64 = ctx.r9.s64 + 52;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8214f51c
	if (!cr6.getEQ()) goto loc_8214F51C;
	// addi r9,r3,4845
	ctx.r9.s64 = ctx.r3.s64 + 4845;
	// li r10,4
	ctx.r10.s64 = 4;
loc_8214F538:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stb r11,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, r11.u8);
	// addi r9,r9,52
	ctx.r9.s64 = ctx.r9.s64 + 52;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8214f538
	if (!cr6.getEQ()) goto loc_8214F538;
	// addi r9,r3,5053
	ctx.r9.s64 = ctx.r3.s64 + 5053;
	// li r10,64
	ctx.r10.s64 = 64;
loc_8214F554:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stb r11,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, r11.u8);
	// addi r9,r9,52
	ctx.r9.s64 = ctx.r9.s64 + 52;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8214f554
	if (!cr6.getEQ()) goto loc_8214F554;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214F570"))) PPC_WEAK_FUNC(sub_8214F570);
PPC_FUNC_IMPL(__imp__sub_8214F570) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,16
	ctx.r3.s64 = r30.s64 + 16;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,68
	ctx.r3.s64 = r30.s64 + 68;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179e68
	sub_82179E68(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,120
	ctx.r3.s64 = r30.s64 + 120;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,176
	ctx.r3.s64 = r30.s64 + 176;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179e68
	sub_82179E68(ctx, base);
	// addi r29,r30,228
	r29.s64 = r30.s64 + 228;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82178930
	sub_82178930(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179b38
	sub_82179B38(ctx, base);
	// addi r29,r30,280
	r29.s64 = r30.s64 + 280;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82178930
	sub_82178930(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179b38
	sub_82179B38(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,332
	ctx.r3.s64 = r30.s64 + 332;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,384
	ctx.r3.s64 = r30.s64 + 384;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179e68
	sub_82179E68(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,436
	ctx.r3.s64 = r30.s64 + 436;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179e68
	sub_82179E68(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,488
	ctx.r3.s64 = r30.s64 + 488;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,540
	ctx.r3.s64 = r30.s64 + 540;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,596
	ctx.r3.s64 = r30.s64 + 596;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,652
	ctx.r3.s64 = r30.s64 + 652;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,708
	ctx.r3.s64 = r30.s64 + 708;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,764
	ctx.r3.s64 = r30.s64 + 764;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,820
	ctx.r3.s64 = r30.s64 + 820;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,876
	ctx.r3.s64 = r30.s64 + 876;
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,932
	ctx.r3.s64 = r30.s64 + 932;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,988
	ctx.r3.s64 = r30.s64 + 988;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,1044
	ctx.r3.s64 = r30.s64 + 1044;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,1100
	ctx.r3.s64 = r30.s64 + 1100;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// addi r29,r30,1172
	r29.s64 = r30.s64 + 1172;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82178930
	sub_82178930(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// addi r29,r30,1224
	r29.s64 = r30.s64 + 1224;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82178930
	sub_82178930(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r29,r30,1276
	r29.s64 = r30.s64 + 1276;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82178930
	sub_82178930(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,1328
	ctx.r3.s64 = r30.s64 + 1328;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179f88
	sub_82179F88(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,1380
	ctx.r3.s64 = r30.s64 + 1380;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179e68
	sub_82179E68(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,1432
	ctx.r3.s64 = r30.s64 + 1432;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179e68
	sub_82179E68(ctx, base);
	// addi r28,r30,1484
	r28.s64 = r30.s64 + 1484;
	// li r29,64
	r29.s64 = 64;
loc_8214F7B0:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// addi r28,r28,52
	r28.s64 = r28.s64 + 52;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8214f7b0
	if (!cr6.getEQ()) goto loc_8214F7B0;
	// addi r28,r30,4812
	r28.s64 = r30.s64 + 4812;
	// li r29,4
	r29.s64 = 4;
loc_8214F7D8:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// addi r28,r28,52
	r28.s64 = r28.s64 + 52;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8214f7d8
	if (!cr6.getEQ()) goto loc_8214F7D8;
	// addi r29,r30,5020
	r29.s64 = r30.s64 + 5020;
	// li r30,4
	r30.s64 = 4;
loc_8214F800:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r29,r29,52
	r29.s64 = r29.s64 + 52;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x8214f800
	if (!cr6.getEQ()) goto loc_8214F800;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8214F828"))) PPC_WEAK_FUNC(sub_8214F828);
PPC_FUNC_IMPL(__imp__sub_8214F828) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r28,1
	r28.s64 = 1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214f8ec
	if (cr6.getEQ()) goto loc_8214F8EC;
loc_8214F868:
	// lbz r10,132(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 132);
	// mr r30,r11
	r30.u64 = r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8214f8d8
	if (cr6.getEQ()) goto loc_8214F8D8;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214f8d8
	if (!cr6.getEQ()) goto loc_8214F8D8;
	// addi r31,r29,228
	r31.s64 = r29.s64 + 228;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214f8f8
	if (!cr6.getEQ()) goto loc_8214F8F8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214f8f8
	if (cr6.getEQ()) goto loc_8214F8F8;
loc_8214F8D8:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214f868
	if (!cr6.getEQ()) goto loc_8214F868;
loc_8214F8EC:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
loc_8214F8F8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8214F908"))) PPC_WEAK_FUNC(sub_8214F908);
PPC_FUNC_IMPL(__imp__sub_8214F908) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r3,r31,488
	ctx.r3.s64 = r31.s64 + 488;
	// li r29,1
	r29.s64 = 1;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214f938
	if (!cr6.getEQ()) goto loc_8214F938;
	// li r29,0
	r29.s64 = 0;
loc_8214F938:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,540
	ctx.r3.s64 = r31.s64 + 540;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214f954
	if (!cr6.getEQ()) goto loc_8214F954;
	// li r29,0
	r29.s64 = 0;
loc_8214F954:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,596
	ctx.r3.s64 = r31.s64 + 596;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214f970
	if (!cr6.getEQ()) goto loc_8214F970;
	// li r29,0
	r29.s64 = 0;
loc_8214F970:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,652
	ctx.r3.s64 = r31.s64 + 652;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214f98c
	if (!cr6.getEQ()) goto loc_8214F98C;
	// li r29,0
	r29.s64 = 0;
loc_8214F98C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,708
	ctx.r3.s64 = r31.s64 + 708;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214f9a8
	if (!cr6.getEQ()) goto loc_8214F9A8;
	// li r29,0
	r29.s64 = 0;
loc_8214F9A8:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,764
	ctx.r3.s64 = r31.s64 + 764;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214f9c4
	if (!cr6.getEQ()) goto loc_8214F9C4;
	// li r29,0
	r29.s64 = 0;
loc_8214F9C4:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,820
	ctx.r3.s64 = r31.s64 + 820;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214f9e0
	if (!cr6.getEQ()) goto loc_8214F9E0;
	// li r29,0
	r29.s64 = 0;
loc_8214F9E0:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,876
	ctx.r3.s64 = r31.s64 + 876;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214f9fc
	if (!cr6.getEQ()) goto loc_8214F9FC;
	// li r29,0
	r29.s64 = 0;
loc_8214F9FC:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,932
	ctx.r3.s64 = r31.s64 + 932;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214fa18
	if (!cr6.getEQ()) goto loc_8214FA18;
	// li r29,0
	r29.s64 = 0;
loc_8214FA18:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,988
	ctx.r3.s64 = r31.s64 + 988;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214fa34
	if (!cr6.getEQ()) goto loc_8214FA34;
	// li r29,0
	r29.s64 = 0;
loc_8214FA34:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,1044
	ctx.r3.s64 = r31.s64 + 1044;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214fa50
	if (!cr6.getEQ()) goto loc_8214FA50;
	// li r29,0
	r29.s64 = 0;
loc_8214FA50:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,1100
	ctx.r3.s64 = r31.s64 + 1100;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8214fa70
	if (cr6.getEQ()) goto loc_8214FA70;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
loc_8214FA70:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8214FA78"))) PPC_WEAK_FUNC(sub_8214FA78);
PPC_FUNC_IMPL(__imp__sub_8214FA78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31993
	r11.s64 = -2096693248;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r11,r11,29116
	r11.s64 = r11.s64 + 29116;
	// lbz r10,344(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 344);
	// stb r10,1156(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1156, ctx.r10.u8);
	// lbz r10,380(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 380);
	// stb r10,1157(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1157, ctx.r10.u8);
	// lbz r10,416(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 416);
	// stb r10,1158(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1158, ctx.r10.u8);
	// lbz r10,452(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 452);
	// stb r10,1159(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1159, ctx.r10.u8);
	// lbz r10,488(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 488);
	// stb r10,1160(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1160, ctx.r10.u8);
	// lbz r10,524(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 524);
	// stb r10,1161(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1161, ctx.r10.u8);
	// lbz r10,560(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 560);
	// stb r10,1162(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1162, ctx.r10.u8);
	// lbz r10,596(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 596);
	// stb r10,1163(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1163, ctx.r10.u8);
	// lbz r10,632(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 632);
	// stb r10,1164(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1164, ctx.r10.u8);
	// lbz r10,660(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 660);
	// stb r10,1165(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1165, ctx.r10.u8);
	// lbz r11,688(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 688);
	// stb r9,1167(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1167, ctx.r9.u8);
	// stb r11,1166(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1166, r11.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214FAE8"))) PPC_WEAK_FUNC(sub_8214FAE8);
PPC_FUNC_IMPL(__imp__sub_8214FAE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r3,r31,540
	ctx.r3.s64 = r31.s64 + 540;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r31,596
	r11.s64 = r31.s64 + 596;
	// stb r3,1156(r31)
	PPC_STORE_U8(r31.u32 + 1156, ctx.r3.u8);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r31,652
	r11.s64 = r31.s64 + 652;
	// stb r3,1157(r31)
	PPC_STORE_U8(r31.u32 + 1157, ctx.r3.u8);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r31,708
	r11.s64 = r31.s64 + 708;
	// stb r3,1158(r31)
	PPC_STORE_U8(r31.u32 + 1158, ctx.r3.u8);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r31,764
	r11.s64 = r31.s64 + 764;
	// stb r3,1159(r31)
	PPC_STORE_U8(r31.u32 + 1159, ctx.r3.u8);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r31,820
	r11.s64 = r31.s64 + 820;
	// stb r3,1160(r31)
	PPC_STORE_U8(r31.u32 + 1160, ctx.r3.u8);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r31,876
	r11.s64 = r31.s64 + 876;
	// stb r3,1161(r31)
	PPC_STORE_U8(r31.u32 + 1161, ctx.r3.u8);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r31,932
	r11.s64 = r31.s64 + 932;
	// stb r3,1162(r31)
	PPC_STORE_U8(r31.u32 + 1162, ctx.r3.u8);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r31,988
	r11.s64 = r31.s64 + 988;
	// stb r3,1163(r31)
	PPC_STORE_U8(r31.u32 + 1163, ctx.r3.u8);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r31,1044
	r11.s64 = r31.s64 + 1044;
	// stb r3,1164(r31)
	PPC_STORE_U8(r31.u32 + 1164, ctx.r3.u8);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r31,1100
	r11.s64 = r31.s64 + 1100;
	// stb r3,1165(r31)
	PPC_STORE_U8(r31.u32 + 1165, ctx.r3.u8);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stb r3,1166(r31)
	PPC_STORE_U8(r31.u32 + 1166, ctx.r3.u8);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8214FC40"))) PPC_WEAK_FUNC(sub_8214FC40);
PPC_FUNC_IMPL(__imp__sub_8214FC40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8214fcdc
	if (cr6.getEQ()) goto loc_8214FCDC;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// addi r29,r28,1484
	r29.s64 = r28.s64 + 1484;
	// addi r31,r11,29116
	r31.s64 = r11.s64 + 29116;
	// addi r30,r31,916
	r30.s64 = r31.s64 + 916;
loc_8214FC6C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lbz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// bl 0x82177218
	sub_82177218(ctx, base);
	// addi r30,r30,36
	r30.s64 = r30.s64 + 36;
	// addi r11,r31,3220
	r11.s64 = r31.s64 + 3220;
	// addi r29,r29,52
	r29.s64 = r29.s64 + 52;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8214fc6c
	if (cr6.getLT()) goto loc_8214FC6C;
	// addi r29,r28,4812
	r29.s64 = r28.s64 + 4812;
	// addi r30,r31,3220
	r30.s64 = r31.s64 + 3220;
loc_8214FC94:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x821776c0
	sub_821776C0(ctx, base);
	// addi r30,r30,44
	r30.s64 = r30.s64 + 44;
	// addi r11,r31,3396
	r11.s64 = r31.s64 + 3396;
	// addi r29,r29,52
	r29.s64 = r29.s64 + 52;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8214fc94
	if (cr6.getLT()) goto loc_8214FC94;
	// addi r29,r28,5020
	r29.s64 = r28.s64 + 5020;
	// addi r30,r31,3396
	r30.s64 = r31.s64 + 3396;
loc_8214FCBC:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x821776c0
	sub_821776C0(ctx, base);
	// addi r30,r30,44
	r30.s64 = r30.s64 + 44;
	// addi r11,r31,6212
	r11.s64 = r31.s64 + 6212;
	// addi r29,r29,52
	r29.s64 = r29.s64 + 52;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8214fcbc
	if (cr6.getLT()) goto loc_8214FCBC;
loc_8214FCDC:
	// li r11,0
	r11.s64 = 0;
	// stb r11,1167(r28)
	PPC_STORE_U8(r28.u32 + 1167, r11.u8);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8214FCF0"))) PPC_WEAK_FUNC(sub_8214FCF0);
PPC_FUNC_IMPL(__imp__sub_8214FCF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r28,1
	r28.s64 = 1;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8214fda0
	if (cr6.getEQ()) goto loc_8214FDA0;
	// addi r30,r29,1484
	r30.s64 = r29.s64 + 1484;
	// li r31,64
	r31.s64 = 64;
loc_8214FD18:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214fd30
	if (!cr6.getEQ()) goto loc_8214FD30;
	// li r28,0
	r28.s64 = 0;
loc_8214FD30:
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r30,r30,52
	r30.s64 = r30.s64 + 52;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8214fd18
	if (!cr6.getEQ()) goto loc_8214FD18;
	// addi r30,r29,4812
	r30.s64 = r29.s64 + 4812;
	// li r31,4
	r31.s64 = 4;
loc_8214FD48:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214fd60
	if (!cr6.getEQ()) goto loc_8214FD60;
	// li r28,0
	r28.s64 = 0;
loc_8214FD60:
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r30,r30,52
	r30.s64 = r30.s64 + 52;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8214fd48
	if (!cr6.getEQ()) goto loc_8214FD48;
	// addi r30,r29,5020
	r30.s64 = r29.s64 + 5020;
	// li r31,64
	r31.s64 = 64;
loc_8214FD78:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8214fd90
	if (!cr6.getEQ()) goto loc_8214FD90;
	// li r28,0
	r28.s64 = 0;
loc_8214FD90:
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r30,r30,52
	r30.s64 = r30.s64 + 52;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8214fd78
	if (!cr6.getEQ()) goto loc_8214FD78;
loc_8214FDA0:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8214FDB0"))) PPC_WEAK_FUNC(sub_8214FDB0);
PPC_FUNC_IMPL(__imp__sub_8214FDB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,29116
	r30.s64 = r11.s64 + 29116;
	// addi r29,r31,16
	r29.s64 = r31.s64 + 16;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r5,32(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 32);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r30,24
	ctx.r5.s64 = r30.s64 + 24;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,48(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 48);
	// addi r28,r31,68
	r28.s64 = r31.s64 + 68;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r11,12(r29)
	PPC_STORE_U8(r29.u32 + 12, r11.u8);
	// lwz r5,68(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 68);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r5,r30,60
	ctx.r5.s64 = r30.s64 + 60;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,84(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 84);
	// addi r29,r31,120
	r29.s64 = r31.s64 + 120;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r11,12(r28)
	PPC_STORE_U8(r28.u32 + 12, r11.u8);
	// lwz r5,104(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 104);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r30,96
	ctx.r5.s64 = r30.s64 + 96;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,120(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 120);
	// li r27,0
	r27.s64 = 0;
	// addi r28,r31,176
	r28.s64 = r31.s64 + 176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r11,12(r29)
	PPC_STORE_U8(r29.u32 + 12, r11.u8);
	// stb r27,172(r31)
	PPC_STORE_U8(r31.u32 + 172, r27.u8);
	// lwz r5,132(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 132);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r5,r30,124
	ctx.r5.s64 = r30.s64 + 124;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,148(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 148);
	// addi r29,r31,228
	r29.s64 = r31.s64 + 228;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r11,12(r28)
	PPC_STORE_U8(r28.u32 + 12, r11.u8);
	// lwz r5,160(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 160);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r30,152
	ctx.r5.s64 = r30.s64 + 152;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,176(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 176);
	// addi r28,r31,280
	r28.s64 = r31.s64 + 280;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r11,12(r29)
	PPC_STORE_U8(r29.u32 + 12, r11.u8);
	// lwz r5,188(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 188);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// addi r5,r30,180
	ctx.r5.s64 = r30.s64 + 180;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,204(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 204);
	// addi r29,r31,332
	r29.s64 = r31.s64 + 332;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r11,12(r28)
	PPC_STORE_U8(r28.u32 + 12, r11.u8);
	// lwz r5,216(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 216);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r30,208
	ctx.r5.s64 = r30.s64 + 208;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,232(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 232);
	// addi r28,r31,384
	r28.s64 = r31.s64 + 384;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r11,12(r29)
	PPC_STORE_U8(r29.u32 + 12, r11.u8);
	// lwz r5,244(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 244);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r5,r30,236
	ctx.r5.s64 = r30.s64 + 236;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,260(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 260);
	// addi r29,r31,436
	r29.s64 = r31.s64 + 436;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r11,12(r28)
	PPC_STORE_U8(r28.u32 + 12, r11.u8);
	// lwz r5,272(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 272);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r30,264
	ctx.r5.s64 = r30.s64 + 264;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,288(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 288);
	// addi r28,r31,488
	r28.s64 = r31.s64 + 488;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r11,12(r29)
	PPC_STORE_U8(r29.u32 + 12, r11.u8);
	// lwz r5,300(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 300);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r5,r30,292
	ctx.r5.s64 = r30.s64 + 292;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r10,316(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 316);
	// addi r11,r31,1156
	r11.s64 = r31.s64 + 1156;
	// addi r29,r31,540
	r29.s64 = r31.s64 + 540;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r10,12(r28)
	PPC_STORE_U8(r28.u32 + 12, ctx.r10.u8);
	// stw r11,52(r29)
	PPC_STORE_U32(r29.u32 + 52, r11.u32);
	// lwz r5,328(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 328);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r30,320
	ctx.r5.s64 = r30.s64 + 320;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,344(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 344);
	// addi r28,r31,596
	r28.s64 = r31.s64 + 596;
	// addi r10,r31,1157
	ctx.r10.s64 = r31.s64 + 1157;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r11,12(r29)
	PPC_STORE_U8(r29.u32 + 12, r11.u8);
	// stw r10,52(r28)
	PPC_STORE_U32(r28.u32 + 52, ctx.r10.u32);
	// lwz r5,364(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 364);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r5,r30,356
	ctx.r5.s64 = r30.s64 + 356;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r10,380(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 380);
	// addi r11,r31,1158
	r11.s64 = r31.s64 + 1158;
	// addi r29,r31,652
	r29.s64 = r31.s64 + 652;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r10,12(r28)
	PPC_STORE_U8(r28.u32 + 12, ctx.r10.u8);
	// stw r11,52(r29)
	PPC_STORE_U32(r29.u32 + 52, r11.u32);
	// lwz r5,400(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 400);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r30,392
	ctx.r5.s64 = r30.s64 + 392;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r10,416(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 416);
	// addi r11,r31,1159
	r11.s64 = r31.s64 + 1159;
	// addi r28,r31,708
	r28.s64 = r31.s64 + 708;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r10,12(r29)
	PPC_STORE_U8(r29.u32 + 12, ctx.r10.u8);
	// stw r11,52(r28)
	PPC_STORE_U32(r28.u32 + 52, r11.u32);
	// lwz r5,436(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 436);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r5,r30,428
	ctx.r5.s64 = r30.s64 + 428;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r10,452(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 452);
	// addi r11,r31,1160
	r11.s64 = r31.s64 + 1160;
	// addi r29,r31,764
	r29.s64 = r31.s64 + 764;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r10,12(r28)
	PPC_STORE_U8(r28.u32 + 12, ctx.r10.u8);
	// stw r11,52(r29)
	PPC_STORE_U32(r29.u32 + 52, r11.u32);
	// lwz r5,472(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 472);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r30,464
	ctx.r5.s64 = r30.s64 + 464;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r10,488(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 488);
	// addi r11,r31,1161
	r11.s64 = r31.s64 + 1161;
	// addi r28,r31,820
	r28.s64 = r31.s64 + 820;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r10,12(r29)
	PPC_STORE_U8(r29.u32 + 12, ctx.r10.u8);
	// stw r11,52(r28)
	PPC_STORE_U32(r28.u32 + 52, r11.u32);
	// lwz r5,508(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 508);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r5,r30,500
	ctx.r5.s64 = r30.s64 + 500;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r10,524(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 524);
	// addi r11,r31,1162
	r11.s64 = r31.s64 + 1162;
	// addi r29,r31,876
	r29.s64 = r31.s64 + 876;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r10,12(r28)
	PPC_STORE_U8(r28.u32 + 12, ctx.r10.u8);
	// stw r11,52(r29)
	PPC_STORE_U32(r29.u32 + 52, r11.u32);
	// lwz r5,544(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 544);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r30,536
	ctx.r5.s64 = r30.s64 + 536;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r10,560(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 560);
	// addi r11,r31,1163
	r11.s64 = r31.s64 + 1163;
	// addi r28,r31,932
	r28.s64 = r31.s64 + 932;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r10,12(r29)
	PPC_STORE_U8(r29.u32 + 12, ctx.r10.u8);
	// stw r11,52(r28)
	PPC_STORE_U32(r28.u32 + 52, r11.u32);
	// lwz r5,580(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 580);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r5,r30,572
	ctx.r5.s64 = r30.s64 + 572;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r10,596(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 596);
	// addi r11,r31,1164
	r11.s64 = r31.s64 + 1164;
	// addi r29,r31,988
	r29.s64 = r31.s64 + 988;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r10,12(r28)
	PPC_STORE_U8(r28.u32 + 12, ctx.r10.u8);
	// stw r11,52(r29)
	PPC_STORE_U32(r29.u32 + 52, r11.u32);
	// lwz r5,616(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 616);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r30,608
	ctx.r5.s64 = r30.s64 + 608;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r10,632(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 632);
	// addi r11,r31,1165
	r11.s64 = r31.s64 + 1165;
	// addi r28,r31,1044
	r28.s64 = r31.s64 + 1044;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r10,12(r29)
	PPC_STORE_U8(r29.u32 + 12, ctx.r10.u8);
	// stw r11,52(r28)
	PPC_STORE_U32(r28.u32 + 52, r11.u32);
	// lwz r5,644(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 644);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r5,r30,636
	ctx.r5.s64 = r30.s64 + 636;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r10,660(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 660);
	// addi r11,r31,1166
	r11.s64 = r31.s64 + 1166;
	// addi r29,r31,1100
	r29.s64 = r31.s64 + 1100;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r10,12(r28)
	PPC_STORE_U8(r28.u32 + 12, ctx.r10.u8);
	// stw r11,52(r29)
	PPC_STORE_U32(r29.u32 + 52, r11.u32);
	// lwz r5,672(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 672);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// addi r5,r30,664
	ctx.r5.s64 = r30.s64 + 664;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,688(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 688);
	// addi r28,r31,1172
	r28.s64 = r31.s64 + 1172;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r11,12(r29)
	PPC_STORE_U8(r29.u32 + 12, r11.u8);
	// lbz r11,344(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 344);
	// stb r11,1156(r31)
	PPC_STORE_U8(r31.u32 + 1156, r11.u8);
	// lbz r11,380(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 380);
	// stb r11,1157(r31)
	PPC_STORE_U8(r31.u32 + 1157, r11.u8);
	// lbz r11,416(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 416);
	// stb r11,1158(r31)
	PPC_STORE_U8(r31.u32 + 1158, r11.u8);
	// lbz r11,452(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 452);
	// stb r11,1159(r31)
	PPC_STORE_U8(r31.u32 + 1159, r11.u8);
	// lbz r11,488(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 488);
	// stb r11,1160(r31)
	PPC_STORE_U8(r31.u32 + 1160, r11.u8);
	// lbz r11,524(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 524);
	// stb r11,1161(r31)
	PPC_STORE_U8(r31.u32 + 1161, r11.u8);
	// lbz r11,560(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 560);
	// stb r11,1162(r31)
	PPC_STORE_U8(r31.u32 + 1162, r11.u8);
	// lbz r11,596(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 596);
	// stb r11,1163(r31)
	PPC_STORE_U8(r31.u32 + 1163, r11.u8);
	// lbz r11,632(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 632);
	// stb r11,1164(r31)
	PPC_STORE_U8(r31.u32 + 1164, r11.u8);
	// lbz r11,660(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 660);
	// stb r11,1165(r31)
	PPC_STORE_U8(r31.u32 + 1165, r11.u8);
	// lbz r11,688(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 688);
	// stb r27,1167(r31)
	PPC_STORE_U8(r31.u32 + 1167, r27.u8);
	// stb r11,1166(r31)
	PPC_STORE_U8(r31.u32 + 1166, r11.u8);
	// lwz r5,708(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 708);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r5,r30,700
	ctx.r5.s64 = r30.s64 + 700;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,724(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 724);
	// addi r29,r31,1224
	r29.s64 = r31.s64 + 1224;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r11,12(r28)
	PPC_STORE_U8(r28.u32 + 12, r11.u8);
	// lwz r5,736(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 736);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r30,728
	ctx.r5.s64 = r30.s64 + 728;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// addi r28,r31,1276
	r28.s64 = r31.s64 + 1276;
	// lbz r11,752(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 752);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r11,12(r29)
	PPC_STORE_U8(r29.u32 + 12, r11.u8);
	// lwz r5,772(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 772);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r5,r30,764
	ctx.r5.s64 = r30.s64 + 764;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,788(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 788);
	// addi r29,r31,1328
	r29.s64 = r31.s64 + 1328;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r11,12(r28)
	PPC_STORE_U8(r28.u32 + 12, r11.u8);
	// lwz r5,800(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 800);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// addi r5,r30,792
	ctx.r5.s64 = r30.s64 + 792;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,816(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 816);
	// addi r28,r31,1380
	r28.s64 = r31.s64 + 1380;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stb r11,12(r29)
	PPC_STORE_U8(r29.u32 + 12, r11.u8);
	// lwz r5,828(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 828);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r5,r30,820
	ctx.r5.s64 = r30.s64 + 820;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,844(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 844);
	// addi r29,r31,1432
	r29.s64 = r31.s64 + 1432;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r11,12(r28)
	PPC_STORE_U8(r28.u32 + 12, r11.u8);
	// lwz r5,856(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 856);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r30,848
	ctx.r5.s64 = r30.s64 + 848;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lwz r11,872(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 872);
	// addi r28,r31,1484
	r28.s64 = r31.s64 + 1484;
	// stw r11,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r11.u32);
	// addi r29,r30,916
	r29.s64 = r30.s64 + 916;
loc_82150398:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r5,-16(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + -16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// addi r5,r29,-24
	ctx.r5.s64 = r29.s64 + -24;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,0(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 0);
	// addi r29,r29,36
	r29.s64 = r29.s64 + 36;
	// stb r11,12(r28)
	PPC_STORE_U8(r28.u32 + 12, r11.u8);
	// addi r11,r30,3220
	r11.s64 = r30.s64 + 3220;
	// addi r28,r28,52
	r28.s64 = r28.s64 + 52;
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// blt cr6,0x82150398
	if (cr6.getLT()) goto loc_82150398;
	// addi r28,r31,4812
	r28.s64 = r31.s64 + 4812;
	// addi r29,r30,3220
	r29.s64 = r30.s64 + 3220;
loc_821503E0:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r5,-16(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + -16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// addi r5,r29,-24
	ctx.r5.s64 = r29.s64 + -24;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r29,r29,44
	r29.s64 = r29.s64 + 44;
	// stw r11,12(r28)
	PPC_STORE_U32(r28.u32 + 12, r11.u32);
	// addi r11,r30,3396
	r11.s64 = r30.s64 + 3396;
	// addi r28,r28,52
	r28.s64 = r28.s64 + 52;
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// blt cr6,0x821503e0
	if (cr6.getLT()) goto loc_821503E0;
	// addi r28,r31,5020
	r28.s64 = r31.s64 + 5020;
	// addi r29,r30,3396
	r29.s64 = r30.s64 + 3396;
loc_82150428:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r5,-16(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + -16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// addi r5,r29,-24
	ctx.r5.s64 = r29.s64 + -24;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r29,r29,44
	r29.s64 = r29.s64 + 44;
	// stw r11,12(r28)
	PPC_STORE_U32(r28.u32 + 12, r11.u32);
	// addi r11,r30,6212
	r11.s64 = r30.s64 + 6212;
	// addi r28,r28,52
	r28.s64 = r28.s64 + 52;
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// blt cr6,0x82150428
	if (cr6.getLT()) goto loc_82150428;
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82150484
	if (cr6.getEQ()) goto loc_82150484;
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8214f228
	sub_8214F228(ctx, base);
loc_82150484:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82150490"))) PPC_WEAK_FUNC(sub_82150490);
PPC_FUNC_IMPL(__imp__sub_82150490) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30252
	r11.s64 = r11.s64 + -30252;
	// addi r10,r10,-30724
	ctx.r10.s64 = ctx.r10.s64 + -30724;
	// clrlwi r9,r4,31
	ctx.r9.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r10,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r10.u32);
	// beq cr6,0x821504d0
	if (cr6.getEQ()) goto loc_821504D0;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_821504D0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821504E8"))) PPC_WEAK_FUNC(sub_821504E8);
PPC_FUNC_IMPL(__imp__sub_821504E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed114
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r31,260(r1)
	PPC_STORE_U32(ctx.r1.u32 + 260, r31.u32);
	// bl 0x821778c0
	sub_821778C0(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r11,r11,-29984
	r11.s64 = r11.s64 + -29984;
	// lis r29,-32254
	r29.s64 = -2113798144;
	// addi r6,r31,24
	ctx.r6.s64 = r31.s64 + 24;
	// addi r9,r10,-30724
	ctx.r9.s64 = ctx.r10.s64 + -30724;
	// li r8,4
	ctx.r8.s64 = 4;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r10,-1
	ctx.r10.s64 = -1;
	// addi r23,r29,-30228
	r23.s64 = r29.s64 + -30228;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r29,r6,16
	r29.s64 = ctx.r6.s64 + 16;
	// stw r8,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r8.u32);
	// li r7,7
	ctx.r7.s64 = 7;
	// addi r28,r11,-30228
	r28.s64 = r11.s64 + -30228;
	// stw r10,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, ctx.r10.u32);
	// li r11,0
	r11.s64 = 0;
	// addi r5,r31,60
	ctx.r5.s64 = r31.s64 + 60;
	// stw r3,12(r6)
	PPC_STORE_U32(ctx.r6.u32 + 12, ctx.r3.u32);
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r9,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r9.u32);
	// li r25,255
	r25.s64 = 255;
	// stw r7,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r7.u32);
	// li r24,8
	r24.s64 = 8;
	// stw r28,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r28.u32);
	// addi r27,r5,16
	r27.s64 = ctx.r5.s64 + 16;
	// stw r11,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r11.u32);
	// stb r11,28(r6)
	PPC_STORE_U8(ctx.r6.u32 + 28, r11.u8);
	// stw r4,20(r6)
	PPC_STORE_U32(ctx.r6.u32 + 20, ctx.r4.u32);
	// addi r30,r31,96
	r30.s64 = r31.s64 + 96;
	// stb r25,29(r6)
	PPC_STORE_U8(ctx.r6.u32 + 29, r25.u8);
	// addi r29,r31,180
	r29.s64 = r31.s64 + 180;
	// stw r24,32(r6)
	PPC_STORE_U32(ctx.r6.u32 + 32, r24.u32);
	// addi r26,r30,16
	r26.s64 = r30.s64 + 16;
	// stb r11,24(r6)
	PPC_STORE_U8(ctx.r6.u32 + 24, r11.u8);
	// li r20,3
	r20.s64 = 3;
	// stw r28,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r28.u32);
	// addi r6,r31,124
	ctx.r6.s64 = r31.s64 + 124;
	// stw r8,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r8.u32);
	// stw r10,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r10.u32);
	// stw r4,12(r5)
	PPC_STORE_U32(ctx.r5.u32 + 12, ctx.r4.u32);
	// stw r9,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r9.u32);
	// stw r7,4(r27)
	PPC_STORE_U32(r27.u32 + 4, ctx.r7.u32);
	// stw r11,8(r27)
	PPC_STORE_U32(r27.u32 + 8, r11.u32);
	// lis r27,-32254
	r27.s64 = -2113798144;
	// stb r11,28(r5)
	PPC_STORE_U8(ctx.r5.u32 + 28, r11.u8);
	// addi r27,r27,-30240
	r27.s64 = r27.s64 + -30240;
	// stb r25,29(r5)
	PPC_STORE_U8(ctx.r5.u32 + 29, r25.u8);
	// stw r24,32(r5)
	PPC_STORE_U32(ctx.r5.u32 + 32, r24.u32);
	// stw r4,20(r5)
	PPC_STORE_U32(ctx.r5.u32 + 20, ctx.r4.u32);
	// stb r11,24(r5)
	PPC_STORE_U8(ctx.r5.u32 + 24, r11.u8);
	// stw r23,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r23.u32);
	// addi r5,r31,152
	ctx.r5.s64 = r31.s64 + 152;
	// stw r8,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r8.u32);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// stw r3,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r3.u32);
	// stw r9,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r9.u32);
	// stw r7,4(r26)
	PPC_STORE_U32(r26.u32 + 4, ctx.r7.u32);
	// stw r11,8(r26)
	PPC_STORE_U32(r26.u32 + 8, r11.u32);
	// stw r11,20(r30)
	PPC_STORE_U32(r30.u32 + 20, r11.u32);
	// stb r11,24(r30)
	PPC_STORE_U8(r30.u32 + 24, r11.u8);
	// stw r27,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r27.u32);
	// lis r30,-32254
	r30.s64 = -2113798144;
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r27.u32);
	// addi r26,r30,-30240
	r26.s64 = r30.s64 + -30240;
	// stw r8,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r8.u32);
	// lis r30,-32254
	r30.s64 = -2113798144;
	// addi r21,r30,-30240
	r21.s64 = r30.s64 + -30240;
	// addi r30,r6,16
	r30.s64 = ctx.r6.s64 + 16;
	// stw r26,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r26.u32);
	// stw r21,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r21.u32);
	// stw r10,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, ctx.r10.u32);
	// addi r23,r5,16
	r23.s64 = ctx.r5.s64 + 16;
	// stw r4,12(r6)
	PPC_STORE_U32(ctx.r6.u32 + 12, ctx.r4.u32);
	// addi r22,r29,16
	r22.s64 = r29.s64 + 16;
	// stw r9,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r9.u32);
	// stw r7,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r7.u32);
	// stw r11,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r11.u32);
	// stw r26,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r26.u32);
	// addi r30,r31,264
	r30.s64 = r31.s64 + 264;
	// stw r11,20(r6)
	PPC_STORE_U32(ctx.r6.u32 + 20, r11.u32);
	// stb r11,24(r6)
	PPC_STORE_U8(ctx.r6.u32 + 24, r11.u8);
	// addi r6,r31,208
	ctx.r6.s64 = r31.s64 + 208;
	// stw r20,12(r5)
	PPC_STORE_U32(ctx.r5.u32 + 12, r20.u32);
	// stw r8,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r8.u32);
	// stw r10,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r10.u32);
	// stw r9,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r9.u32);
	// stw r7,4(r23)
	PPC_STORE_U32(r23.u32 + 4, ctx.r7.u32);
	// stw r11,8(r23)
	PPC_STORE_U32(r23.u32 + 8, r11.u32);
	// stw r21,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r21.u32);
	// addi r23,r6,16
	r23.s64 = ctx.r6.s64 + 16;
	// stw r11,20(r5)
	PPC_STORE_U32(ctx.r5.u32 + 20, r11.u32);
	// stb r11,24(r5)
	PPC_STORE_U8(ctx.r5.u32 + 24, r11.u8);
	// addi r5,r31,236
	ctx.r5.s64 = r31.s64 + 236;
	// stw r20,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r20.u32);
	// stw r8,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r8.u32);
	// stw r10,8(r29)
	PPC_STORE_U32(r29.u32 + 8, ctx.r10.u32);
	// stw r9,0(r22)
	PPC_STORE_U32(r22.u32 + 0, ctx.r9.u32);
	// stw r7,4(r22)
	PPC_STORE_U32(r22.u32 + 4, ctx.r7.u32);
	// stw r11,8(r22)
	PPC_STORE_U32(r22.u32 + 8, r11.u32);
	// stw r21,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r21.u32);
	// addi r22,r5,16
	r22.s64 = ctx.r5.s64 + 16;
	// stw r11,20(r29)
	PPC_STORE_U32(r29.u32 + 20, r11.u32);
	// addi r21,r30,16
	r21.s64 = r30.s64 + 16;
	// stb r11,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r11.u8);
	// addi r29,r31,292
	r29.s64 = r31.s64 + 292;
	// stw r8,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r8.u32);
	// stw r10,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, ctx.r10.u32);
	// addi r20,r29,16
	r20.s64 = r29.s64 + 16;
	// stw r3,12(r6)
	PPC_STORE_U32(ctx.r6.u32 + 12, ctx.r3.u32);
	// stw r9,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r9.u32);
	// stw r7,4(r23)
	PPC_STORE_U32(r23.u32 + 4, ctx.r7.u32);
	// stw r11,8(r23)
	PPC_STORE_U32(r23.u32 + 8, r11.u32);
	// stw r11,20(r6)
	PPC_STORE_U32(ctx.r6.u32 + 20, r11.u32);
	// stb r11,24(r6)
	PPC_STORE_U8(ctx.r6.u32 + 24, r11.u8);
	// stw r27,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r27.u32);
	// addi r6,r31,320
	ctx.r6.s64 = r31.s64 + 320;
	// stw r8,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r8.u32);
	// stw r10,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r10.u32);
	// stw r4,12(r5)
	PPC_STORE_U32(ctx.r5.u32 + 12, ctx.r4.u32);
	// stw r9,0(r22)
	PPC_STORE_U32(r22.u32 + 0, ctx.r9.u32);
	// stw r7,4(r22)
	PPC_STORE_U32(r22.u32 + 4, ctx.r7.u32);
	// stw r11,8(r22)
	PPC_STORE_U32(r22.u32 + 8, r11.u32);
	// stw r26,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r26.u32);
	// stw r11,20(r5)
	PPC_STORE_U32(ctx.r5.u32 + 20, r11.u32);
	// stb r11,24(r5)
	PPC_STORE_U8(ctx.r5.u32 + 24, r11.u8);
	// addi r5,r31,356
	ctx.r5.s64 = r31.s64 + 356;
	// stw r8,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r8.u32);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// addi r23,r5,16
	r23.s64 = ctx.r5.s64 + 16;
	// stw r4,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r4.u32);
	// stw r9,0(r21)
	PPC_STORE_U32(r21.u32 + 0, ctx.r9.u32);
	// stw r7,4(r21)
	PPC_STORE_U32(r21.u32 + 4, ctx.r7.u32);
	// stw r11,8(r21)
	PPC_STORE_U32(r21.u32 + 8, r11.u32);
	// stw r26,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r26.u32);
	// addi r26,r6,16
	r26.s64 = ctx.r6.s64 + 16;
	// stw r11,20(r30)
	PPC_STORE_U32(r30.u32 + 20, r11.u32);
	// stb r11,24(r30)
	PPC_STORE_U8(r30.u32 + 24, r11.u8);
	// addi r30,r31,392
	r30.s64 = r31.s64 + 392;
	// stw r8,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r8.u32);
	// stw r10,8(r29)
	PPC_STORE_U32(r29.u32 + 8, ctx.r10.u32);
	// stw r3,12(r29)
	PPC_STORE_U32(r29.u32 + 12, ctx.r3.u32);
	// stw r7,4(r20)
	PPC_STORE_U32(r20.u32 + 4, ctx.r7.u32);
	// stw r9,0(r20)
	PPC_STORE_U32(r20.u32 + 0, ctx.r9.u32);
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r30.u32);
	// stw r11,8(r20)
	PPC_STORE_U32(r20.u32 + 8, r11.u32);
	// stw r7,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r7.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// stw r11,20(r29)
	PPC_STORE_U32(r29.u32 + 20, r11.u32);
	// stb r11,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r11.u8);
	// stw r27,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r27.u32);
	// li r27,255
	r27.s64 = 255;
	// stw r8,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r8.u32);
	// stw r10,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, ctx.r10.u32);
	// stw r3,12(r6)
	PPC_STORE_U32(ctx.r6.u32 + 12, ctx.r3.u32);
	// stw r7,4(r26)
	PPC_STORE_U32(r26.u32 + 4, ctx.r7.u32);
	// stw r9,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r9.u32);
	// stw r11,8(r26)
	PPC_STORE_U32(r26.u32 + 8, r11.u32);
	// stb r11,28(r6)
	PPC_STORE_U8(ctx.r6.u32 + 28, r11.u8);
	// li r26,8
	r26.s64 = 8;
	// stb r11,24(r6)
	PPC_STORE_U8(ctx.r6.u32 + 24, r11.u8);
	// stw r4,20(r6)
	PPC_STORE_U32(ctx.r6.u32 + 20, ctx.r4.u32);
	// stw r28,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r28.u32);
	// stb r25,29(r6)
	PPC_STORE_U8(ctx.r6.u32 + 29, r25.u8);
	// stw r24,32(r6)
	PPC_STORE_U32(ctx.r6.u32 + 32, r24.u32);
	// addi r6,r31,428
	ctx.r6.s64 = r31.s64 + 428;
	// stw r8,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r8.u32);
	// stw r10,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r10.u32);
	// stw r3,12(r5)
	PPC_STORE_U32(ctx.r5.u32 + 12, ctx.r3.u32);
	// stw r7,4(r23)
	PPC_STORE_U32(r23.u32 + 4, ctx.r7.u32);
	// mr r7,r10
	ctx.r7.u64 = ctx.r10.u64;
	// stw r9,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r9.u32);
	// stw r11,8(r23)
	PPC_STORE_U32(r23.u32 + 8, r11.u32);
	// stb r11,28(r5)
	PPC_STORE_U8(ctx.r5.u32 + 28, r11.u8);
	// stb r11,24(r5)
	PPC_STORE_U8(ctx.r5.u32 + 24, r11.u8);
	// addi r11,r6,16
	r11.s64 = ctx.r6.s64 + 16;
	// stw r6,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r6.u32);
	// li r6,2
	ctx.r6.s64 = 2;
	// stw r4,20(r5)
	PPC_STORE_U32(ctx.r5.u32 + 20, ctx.r4.u32);
	// stw r28,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r28.u32);
	// rotlwi r28,r28,0
	r28.u64 = __builtin_rotateleft32(r28.u32, 0);
	// stb r25,29(r5)
	PPC_STORE_U8(ctx.r5.u32 + 29, r25.u8);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// stw r24,32(r5)
	PPC_STORE_U32(ctx.r5.u32 + 32, r24.u32);
	// addi r5,r31,464
	ctx.r5.s64 = r31.s64 + 464;
	// stw r8,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r8.u32);
	// addi r8,r30,16
	ctx.r8.s64 = r30.s64 + 16;
	// addi r11,r5,16
	r11.s64 = ctx.r5.s64 + 16;
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// stw r3,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r3.u32);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// rotlwi r10,r30,0
	ctx.r10.u64 = __builtin_rotateleft32(r30.u32, 0);
	// stw r5,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r5.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r9,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r9.u32);
	// li r9,4
	ctx.r9.s64 = 4;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r11,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r11.u32);
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r27,29(r10)
	PPC_STORE_U8(ctx.r10.u32 + 29, r27.u8);
	// stw r26,32(r10)
	PPC_STORE_U32(ctx.r10.u32 + 32, r26.u32);
	// stw r6,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, ctx.r6.u32);
	// stw r28,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r28.u32);
	// stb r11,28(r10)
	PPC_STORE_U8(ctx.r10.u32 + 28, r11.u8);
	// stb r11,24(r10)
	PPC_STORE_U8(ctx.r10.u32 + 24, r11.u8);
	// lwz r8,100(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r4,104(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r7,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r7.u32);
	// li r7,7
	ctx.r7.s64 = 7;
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// stw r5,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r5.u32);
	// stw r8,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r8.u32);
	// stw r7,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r7.u32);
	// stw r11,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, r11.u32);
	// stb r11,28(r10)
	PPC_STORE_U8(ctx.r10.u32 + 28, r11.u8);
	// stb r27,29(r10)
	PPC_STORE_U8(ctx.r10.u32 + 29, r27.u8);
	// stw r26,32(r10)
	PPC_STORE_U32(ctx.r10.u32 + 32, r26.u32);
	// stw r6,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, ctx.r6.u32);
	// lwz r29,108(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// stb r11,24(r10)
	PPC_STORE_U8(ctx.r10.u32 + 24, r11.u8);
	// stw r28,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r28.u32);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r23,116(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// stw r3,8(r29)
	PPC_STORE_U32(r29.u32 + 8, ctx.r3.u32);
	// stw r9,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r9.u32);
	// stw r5,12(r29)
	PPC_STORE_U32(r29.u32 + 12, ctx.r5.u32);
	// lwz r3,260(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 260);
	// stw r8,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r8.u32);
	// stw r7,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r7.u32);
	// addi r4,r3,500
	ctx.r4.s64 = ctx.r3.s64 + 500;
	// stw r11,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r11.u32);
	// stb r11,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r11.u8);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stb r27,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r27.u8);
	// addi r31,r3,536
	r31.s64 = ctx.r3.s64 + 536;
	// stw r26,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r26.u32);
	// addi r30,r3,572
	r30.s64 = ctx.r3.s64 + 572;
	// stw r6,20(r29)
	PPC_STORE_U32(r29.u32 + 20, ctx.r6.u32);
	// addi r25,r31,16
	r25.s64 = r31.s64 + 16;
	// stb r11,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r11.u8);
	// addi r24,r30,16
	r24.s64 = r30.s64 + 16;
	// stw r28,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r28.u32);
	// addi r29,r4,16
	r29.s64 = ctx.r4.s64 + 16;
	// stw r9,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r9.u32);
	// stw r10,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r10.u32);
	// stw r5,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, ctx.r5.u32);
	// stw r8,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r8.u32);
	// stw r7,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r7.u32);
	// stw r11,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r11.u32);
	// stb r11,28(r4)
	PPC_STORE_U8(ctx.r4.u32 + 28, r11.u8);
	// addi r29,r3,636
	r29.s64 = ctx.r3.s64 + 636;
	// stb r27,29(r4)
	PPC_STORE_U8(ctx.r4.u32 + 29, r27.u8);
	// stw r26,32(r4)
	PPC_STORE_U32(ctx.r4.u32 + 32, r26.u32);
	// stw r6,20(r4)
	PPC_STORE_U32(ctx.r4.u32 + 20, ctx.r6.u32);
	// stb r11,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r11.u8);
	// stw r28,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r28.u32);
	// addi r4,r3,664
	ctx.r4.s64 = ctx.r3.s64 + 664;
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// stw r5,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r5.u32);
	// stw r8,0(r25)
	PPC_STORE_U32(r25.u32 + 0, ctx.r8.u32);
	// stw r7,4(r25)
	PPC_STORE_U32(r25.u32 + 4, ctx.r7.u32);
	// stw r11,8(r25)
	PPC_STORE_U32(r25.u32 + 8, r11.u32);
	// stb r11,28(r31)
	PPC_STORE_U8(r31.u32 + 28, r11.u8);
	// addi r25,r29,16
	r25.s64 = r29.s64 + 16;
	// stb r27,29(r31)
	PPC_STORE_U8(r31.u32 + 29, r27.u8);
	// stw r26,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r26.u32);
	// stw r6,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r6.u32);
	// stb r11,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r11.u8);
	// stw r28,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r28.u32);
	// addi r31,r3,608
	r31.s64 = ctx.r3.s64 + 608;
	// stw r9,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r9.u32);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// stw r5,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r5.u32);
	// stw r8,0(r24)
	PPC_STORE_U32(r24.u32 + 0, ctx.r8.u32);
	// stw r7,4(r24)
	PPC_STORE_U32(r24.u32 + 4, ctx.r7.u32);
	// stw r11,8(r24)
	PPC_STORE_U32(r24.u32 + 8, r11.u32);
	// stb r11,28(r30)
	PPC_STORE_U8(r30.u32 + 28, r11.u8);
	// addi r24,r4,16
	r24.s64 = ctx.r4.s64 + 16;
	// stb r27,29(r30)
	PPC_STORE_U8(r30.u32 + 29, r27.u8);
	// stw r26,32(r30)
	PPC_STORE_U32(r30.u32 + 32, r26.u32);
	// stw r6,20(r30)
	PPC_STORE_U32(r30.u32 + 20, ctx.r6.u32);
	// stb r11,24(r30)
	PPC_STORE_U8(r30.u32 + 24, r11.u8);
	// stw r28,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r28.u32);
	// addi r30,r31,16
	r30.s64 = r31.s64 + 16;
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// stw r5,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r5.u32);
	// stw r8,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r8.u32);
	// stw r7,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r7.u32);
	// stw r11,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r11.u32);
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// stb r11,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r11.u8);
	// stw r23,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r23.u32);
	// stw r9,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r9.u32);
	// addi r30,r3,700
	r30.s64 = ctx.r3.s64 + 700;
	// stw r10,8(r29)
	PPC_STORE_U32(r29.u32 + 8, ctx.r10.u32);
	// addi r31,r3,728
	r31.s64 = ctx.r3.s64 + 728;
	// stw r5,12(r29)
	PPC_STORE_U32(r29.u32 + 12, ctx.r5.u32);
	// lis r20,-32768
	r20.s64 = -2147483648;
	// stw r8,0(r25)
	PPC_STORE_U32(r25.u32 + 0, ctx.r8.u32);
	// li r21,32
	r21.s64 = 32;
	// stw r7,4(r25)
	PPC_STORE_U32(r25.u32 + 4, ctx.r7.u32);
	// stw r11,8(r25)
	PPC_STORE_U32(r25.u32 + 8, r11.u32);
	// stw r23,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r23.u32);
	// addi r25,r31,16
	r25.s64 = r31.s64 + 16;
	// stw r11,20(r29)
	PPC_STORE_U32(r29.u32 + 20, r11.u32);
	// stb r11,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r11.u8);
	// addi r29,r3,764
	r29.s64 = ctx.r3.s64 + 764;
	// stw r9,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r9.u32);
	// stw r10,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r10.u32);
	// stw r5,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, ctx.r5.u32);
	// stw r8,0(r24)
	PPC_STORE_U32(r24.u32 + 0, ctx.r8.u32);
	// stw r7,4(r24)
	PPC_STORE_U32(r24.u32 + 4, ctx.r7.u32);
	// stw r11,8(r24)
	PPC_STORE_U32(r24.u32 + 8, r11.u32);
	// stb r11,28(r4)
	PPC_STORE_U8(ctx.r4.u32 + 28, r11.u8);
	// addi r24,r29,16
	r24.s64 = r29.s64 + 16;
	// stb r27,29(r4)
	PPC_STORE_U8(ctx.r4.u32 + 29, r27.u8);
	// stw r26,32(r4)
	PPC_STORE_U32(ctx.r4.u32 + 32, r26.u32);
	// stw r6,20(r4)
	PPC_STORE_U32(ctx.r4.u32 + 20, ctx.r6.u32);
	// stb r11,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r11.u8);
	// stw r28,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r28.u32);
	// addi r4,r30,16
	ctx.r4.s64 = r30.s64 + 16;
	// lwz r22,120(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r9,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r9.u32);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// stw r6,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r6.u32);
	// stw r8,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r8.u32);
	// stw r7,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r7.u32);
	// stw r11,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, r11.u32);
	// stw r11,20(r30)
	PPC_STORE_U32(r30.u32 + 20, r11.u32);
	// addi r4,r3,848
	ctx.r4.s64 = ctx.r3.s64 + 848;
	// stb r11,24(r30)
	PPC_STORE_U8(r30.u32 + 24, r11.u8);
	// stw r22,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r22.u32);
	// addi r30,r3,820
	r30.s64 = ctx.r3.s64 + 820;
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// stw r5,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r5.u32);
	// stw r8,0(r25)
	PPC_STORE_U32(r25.u32 + 0, ctx.r8.u32);
	// stw r7,4(r25)
	PPC_STORE_U32(r25.u32 + 4, ctx.r7.u32);
	// stw r11,8(r25)
	PPC_STORE_U32(r25.u32 + 8, r11.u32);
	// stb r11,28(r31)
	PPC_STORE_U8(r31.u32 + 28, r11.u8);
	// addi r25,r30,16
	r25.s64 = r30.s64 + 16;
	// stb r27,29(r31)
	PPC_STORE_U8(r31.u32 + 29, r27.u8);
	// stw r26,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r26.u32);
	// stw r6,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r6.u32);
	// stb r11,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r11.u8);
	// stw r28,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r28.u32);
	// addi r31,r3,792
	r31.s64 = ctx.r3.s64 + 792;
	// stw r9,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r9.u32);
	// stw r10,8(r29)
	PPC_STORE_U32(r29.u32 + 8, ctx.r10.u32);
	// stw r5,12(r29)
	PPC_STORE_U32(r29.u32 + 12, ctx.r5.u32);
	// stw r8,0(r24)
	PPC_STORE_U32(r24.u32 + 0, ctx.r8.u32);
	// stw r7,4(r24)
	PPC_STORE_U32(r24.u32 + 4, ctx.r7.u32);
	// stw r11,8(r24)
	PPC_STORE_U32(r24.u32 + 8, r11.u32);
	// stw r23,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r23.u32);
	// li r23,3
	r23.s64 = 3;
	// stw r11,20(r29)
	PPC_STORE_U32(r29.u32 + 20, r11.u32);
	// addi r24,r4,16
	r24.s64 = ctx.r4.s64 + 16;
	// stb r11,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r11.u8);
	// lis r29,32767
	r29.s64 = 2147418112;
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// ori r19,r29,65535
	r19.u64 = r29.u64 | 65535;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// addi r29,r31,16
	r29.s64 = r31.s64 + 16;
	// stw r23,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r23.u32);
	// stw r8,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r8.u32);
	// stw r7,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r7.u32);
	// stw r11,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r11.u32);
	// lwz r29,124(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// stb r11,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r11.u8);
	// stw r29,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r29.u32);
	// addi r31,r3,892
	r31.s64 = ctx.r3.s64 + 892;
	// stw r9,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r9.u32);
	// li r29,63
	r29.s64 = 63;
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// stw r6,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r6.u32);
	// stw r8,0(r25)
	PPC_STORE_U32(r25.u32 + 0, ctx.r8.u32);
	// stw r7,4(r25)
	PPC_STORE_U32(r25.u32 + 4, ctx.r7.u32);
	// stw r11,8(r25)
	PPC_STORE_U32(r25.u32 + 8, r11.u32);
	// stw r11,20(r30)
	PPC_STORE_U32(r30.u32 + 20, r11.u32);
	// stb r11,24(r30)
	PPC_STORE_U8(r30.u32 + 24, r11.u8);
	// stw r22,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r22.u32);
	// lis r30,-32254
	r30.s64 = -2113798144;
	// stw r9,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r9.u32);
	// addi r30,r30,-30216
	r30.s64 = r30.s64 + -30216;
	// stw r10,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r10.u32);
	// stw r6,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, ctx.r6.u32);
	// stw r8,0(r24)
	PPC_STORE_U32(r24.u32 + 0, ctx.r8.u32);
	// stw r7,4(r24)
	PPC_STORE_U32(r24.u32 + 4, ctx.r7.u32);
	// stw r11,8(r24)
	PPC_STORE_U32(r24.u32 + 8, r11.u32);
	// stb r11,28(r4)
	PPC_STORE_U8(ctx.r4.u32 + 28, r11.u8);
	// stw r20,32(r4)
	PPC_STORE_U32(ctx.r4.u32 + 32, r20.u32);
	// stw r19,36(r4)
	PPC_STORE_U32(ctx.r4.u32 + 36, r19.u32);
	// stw r21,40(r4)
	PPC_STORE_U32(ctx.r4.u32 + 40, r21.u32);
	// stw r23,20(r4)
	PPC_STORE_U32(ctx.r4.u32 + 20, r23.u32);
	// stw r11,24(r4)
	PPC_STORE_U32(ctx.r4.u32 + 24, r11.u32);
	// stw r30,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r30.u32);
	// addi r4,r31,24
	ctx.r4.s64 = r31.s64 + 24;
loc_82150B60:
	// stw r9,-20(r4)
	PPC_STORE_U32(ctx.r4.u32 + -20, ctx.r9.u32);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// stw r10,-16(r4)
	PPC_STORE_U32(ctx.r4.u32 + -16, ctx.r10.u32);
	// stw r5,-12(r4)
	PPC_STORE_U32(ctx.r4.u32 + -12, ctx.r5.u32);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// stw r8,-8(r4)
	PPC_STORE_U32(ctx.r4.u32 + -8, ctx.r8.u32);
	// stw r7,-4(r4)
	PPC_STORE_U32(ctx.r4.u32 + -4, ctx.r7.u32);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// stb r11,4(r4)
	PPC_STORE_U8(ctx.r4.u32 + 4, r11.u8);
	// stb r27,5(r4)
	PPC_STORE_U8(ctx.r4.u32 + 5, r27.u8);
	// stw r26,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, r26.u32);
	// stw r6,-4(r4)
	PPC_STORE_U32(ctx.r4.u32 + -4, ctx.r6.u32);
	// stb r11,0(r4)
	PPC_STORE_U8(ctx.r4.u32 + 0, r11.u8);
	// addi r4,r4,36
	ctx.r4.s64 = ctx.r4.s64 + 36;
	// stw r28,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r28.u32);
	// addi r31,r31,36
	r31.s64 = r31.s64 + 36;
	// bge cr6,0x82150b60
	if (!cr6.getLT()) goto loc_82150B60;
	// addi r4,r3,3196
	ctx.r4.s64 = ctx.r3.s64 + 3196;
	// lis r31,-32254
	r31.s64 = -2113798144;
	// addi r6,r4,24
	ctx.r6.s64 = ctx.r4.s64 + 24;
	// addi r30,r31,-30204
	r30.s64 = r31.s64 + -30204;
loc_82150BB4:
	// stw r9,-20(r6)
	PPC_STORE_U32(ctx.r6.u32 + -20, ctx.r9.u32);
	// addi r23,r23,-1
	r23.s64 = r23.s64 + -1;
	// stw r10,-16(r6)
	PPC_STORE_U32(ctx.r6.u32 + -16, ctx.r10.u32);
	// stw r5,-12(r6)
	PPC_STORE_U32(ctx.r6.u32 + -12, ctx.r5.u32);
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// stw r8,-8(r6)
	PPC_STORE_U32(ctx.r6.u32 + -8, ctx.r8.u32);
	// stw r7,-4(r6)
	PPC_STORE_U32(ctx.r6.u32 + -4, ctx.r7.u32);
	// stw r11,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r11.u32);
	// stb r11,4(r6)
	PPC_STORE_U8(ctx.r6.u32 + 4, r11.u8);
	// stw r11,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, r11.u32);
	// stw r10,12(r6)
	PPC_STORE_U32(ctx.r6.u32 + 12, ctx.r10.u32);
	// stw r21,16(r6)
	PPC_STORE_U32(ctx.r6.u32 + 16, r21.u32);
	// stw r9,-4(r6)
	PPC_STORE_U32(ctx.r6.u32 + -4, ctx.r9.u32);
	// stw r11,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r11.u32);
	// addi r6,r6,44
	ctx.r6.s64 = ctx.r6.s64 + 44;
	// stw r30,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r30.u32);
	// addi r4,r4,44
	ctx.r4.s64 = ctx.r4.s64 + 44;
	// bge cr6,0x82150bb4
	if (!cr6.getLT()) goto loc_82150BB4;
	// addi r4,r3,3372
	ctx.r4.s64 = ctx.r3.s64 + 3372;
	// li r31,63
	r31.s64 = 63;
	// addi r6,r4,24
	ctx.r6.s64 = ctx.r4.s64 + 24;
loc_82150C08:
	// stw r9,-20(r6)
	PPC_STORE_U32(ctx.r6.u32 + -20, ctx.r9.u32);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// stw r10,-16(r6)
	PPC_STORE_U32(ctx.r6.u32 + -16, ctx.r10.u32);
	// stw r5,-12(r6)
	PPC_STORE_U32(ctx.r6.u32 + -12, ctx.r5.u32);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// stw r8,-8(r6)
	PPC_STORE_U32(ctx.r6.u32 + -8, ctx.r8.u32);
	// stw r7,-4(r6)
	PPC_STORE_U32(ctx.r6.u32 + -4, ctx.r7.u32);
	// stw r11,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r11.u32);
	// stb r11,4(r6)
	PPC_STORE_U8(ctx.r6.u32 + 4, r11.u8);
	// stw r11,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, r11.u32);
	// stw r10,12(r6)
	PPC_STORE_U32(ctx.r6.u32 + 12, ctx.r10.u32);
	// stw r21,16(r6)
	PPC_STORE_U32(ctx.r6.u32 + 16, r21.u32);
	// stw r9,-4(r6)
	PPC_STORE_U32(ctx.r6.u32 + -4, ctx.r9.u32);
	// stw r11,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r11.u32);
	// addi r6,r6,44
	ctx.r6.s64 = ctx.r6.s64 + 44;
	// stw r30,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r30.u32);
	// addi r4,r4,44
	ctx.r4.s64 = ctx.r4.s64 + 44;
	// bge cr6,0x82150c08
	if (!cr6.getLT()) goto loc_82150C08;
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x823ed164
	return;
}

extern void FileOpenHook(PPCRegister& r3, PPCRegister& r4);

extern void FileCloseHook(PPCRegister& r3);

__attribute__((alias("__imp__sub_82150C58"))) PPC_WEAK_FUNC(sub_82150C58);
PPC_FUNC_IMPL(__imp__sub_82150C58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32254
	FileOpenHook(ctx.r3, ctx.r4);
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r11,r11,-29984
	r11.s64 = r11.s64 + -29984;
	// addi r9,r3,6188
	ctx.r9.s64 = ctx.r3.s64 + 6188;
	// li r8,63
	ctx.r8.s64 = 63;
	// addi r10,r10,-30252
	ctx.r10.s64 = ctx.r10.s64 + -30252;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-30724
	r11.s64 = r11.s64 + -30724;
loc_82150C7C:
	// addi r9,r9,-44
	ctx.r9.s64 = ctx.r9.s64 + -44;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stw r10,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r10.u32);
	// stw r11,16(r9)
	PPC_STORE_U32(ctx.r9.u32 + 16, r11.u32);
	// bge cr6,0x82150c7c
	if (!cr6.getLT()) goto loc_82150C7C;
	// addi r9,r3,3372
	ctx.r9.s64 = ctx.r3.s64 + 3372;
	// li r8,3
	ctx.r8.s64 = 3;
loc_82150C9C:
	// addi r9,r9,-44
	ctx.r9.s64 = ctx.r9.s64 + -44;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stw r10,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r10.u32);
	// stw r11,16(r9)
	PPC_STORE_U32(ctx.r9.u32 + 16, r11.u32);
	// bge cr6,0x82150c9c
	if (!cr6.getLT()) goto loc_82150C9C;
	// addi r9,r3,3196
	ctx.r9.s64 = ctx.r3.s64 + 3196;
	// li r8,63
	ctx.r8.s64 = 63;
loc_82150CBC:
	// addi r9,r9,-36
	ctx.r9.s64 = ctx.r9.s64 + -36;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stw r10,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r10.u32);
	// stw r11,16(r9)
	PPC_STORE_U32(ctx.r9.u32 + 16, r11.u32);
	// bge cr6,0x82150cbc
	if (!cr6.getLT()) goto loc_82150CBC;
	// stw r10,848(r3)
	PPC_STORE_U32(ctx.r3.u32 + 848, ctx.r10.u32);
	// stw r11,864(r3)
	PPC_STORE_U32(ctx.r3.u32 + 864, r11.u32);
	// stw r10,820(r3)
	PPC_STORE_U32(ctx.r3.u32 + 820, ctx.r10.u32);
	// stw r11,836(r3)
	PPC_STORE_U32(ctx.r3.u32 + 836, r11.u32);
	// stw r10,792(r3)
	PPC_STORE_U32(ctx.r3.u32 + 792, ctx.r10.u32);
	// stw r11,808(r3)
	PPC_STORE_U32(ctx.r3.u32 + 808, r11.u32);
	// stw r10,764(r3)
	PPC_STORE_U32(ctx.r3.u32 + 764, ctx.r10.u32);
	// stw r11,780(r3)
	PPC_STORE_U32(ctx.r3.u32 + 780, r11.u32);
	// stw r10,728(r3)
	PPC_STORE_U32(ctx.r3.u32 + 728, ctx.r10.u32);
	// stw r11,744(r3)
	PPC_STORE_U32(ctx.r3.u32 + 744, r11.u32);
	// stw r10,700(r3)
	PPC_STORE_U32(ctx.r3.u32 + 700, ctx.r10.u32);
	// stw r11,716(r3)
	PPC_STORE_U32(ctx.r3.u32 + 716, r11.u32);
	// stw r10,664(r3)
	PPC_STORE_U32(ctx.r3.u32 + 664, ctx.r10.u32);
	// stw r11,680(r3)
	PPC_STORE_U32(ctx.r3.u32 + 680, r11.u32);
	// stw r10,636(r3)
	PPC_STORE_U32(ctx.r3.u32 + 636, ctx.r10.u32);
	// stw r11,652(r3)
	PPC_STORE_U32(ctx.r3.u32 + 652, r11.u32);
	// stw r10,608(r3)
	PPC_STORE_U32(ctx.r3.u32 + 608, ctx.r10.u32);
	// stw r11,624(r3)
	PPC_STORE_U32(ctx.r3.u32 + 624, r11.u32);
	// stw r10,572(r3)
	PPC_STORE_U32(ctx.r3.u32 + 572, ctx.r10.u32);
	// stw r11,588(r3)
	FileCloseHook(ctx.r3);
	PPC_STORE_U32(ctx.r3.u32 + 588, r11.u32);
	// stw r10,536(r3)
	PPC_STORE_U32(ctx.r3.u32 + 536, ctx.r10.u32);
	// stw r11,552(r3)
	PPC_STORE_U32(ctx.r3.u32 + 552, r11.u32);
	// stw r10,500(r3)
	PPC_STORE_U32(ctx.r3.u32 + 500, ctx.r10.u32);
	// stw r11,516(r3)
	PPC_STORE_U32(ctx.r3.u32 + 516, r11.u32);
	// stw r10,464(r3)
	PPC_STORE_U32(ctx.r3.u32 + 464, ctx.r10.u32);
	// stw r11,480(r3)
	PPC_STORE_U32(ctx.r3.u32 + 480, r11.u32);
	// stw r10,428(r3)
	PPC_STORE_U32(ctx.r3.u32 + 428, ctx.r10.u32);
	// stw r11,444(r3)
	PPC_STORE_U32(ctx.r3.u32 + 444, r11.u32);
	// stw r10,392(r3)
	PPC_STORE_U32(ctx.r3.u32 + 392, ctx.r10.u32);
	// stw r11,408(r3)
	PPC_STORE_U32(ctx.r3.u32 + 408, r11.u32);
	// stw r10,356(r3)
	PPC_STORE_U32(ctx.r3.u32 + 356, ctx.r10.u32);
	// stw r11,372(r3)
	PPC_STORE_U32(ctx.r3.u32 + 372, r11.u32);
	// stw r10,320(r3)
	PPC_STORE_U32(ctx.r3.u32 + 320, ctx.r10.u32);
	// stw r11,336(r3)
	PPC_STORE_U32(ctx.r3.u32 + 336, r11.u32);
	// stw r10,292(r3)
	PPC_STORE_U32(ctx.r3.u32 + 292, ctx.r10.u32);
	// stw r11,308(r3)
	PPC_STORE_U32(ctx.r3.u32 + 308, r11.u32);
	// stw r10,264(r3)
	PPC_STORE_U32(ctx.r3.u32 + 264, ctx.r10.u32);
	// stw r11,280(r3)
	PPC_STORE_U32(ctx.r3.u32 + 280, r11.u32);
	// stw r10,236(r3)
	PPC_STORE_U32(ctx.r3.u32 + 236, ctx.r10.u32);
	// stw r11,252(r3)
	PPC_STORE_U32(ctx.r3.u32 + 252, r11.u32);
	// stw r10,208(r3)
	PPC_STORE_U32(ctx.r3.u32 + 208, ctx.r10.u32);
	// stw r11,224(r3)
	PPC_STORE_U32(ctx.r3.u32 + 224, r11.u32);
	// stw r10,180(r3)
	PPC_STORE_U32(ctx.r3.u32 + 180, ctx.r10.u32);
	// stw r11,196(r3)
	PPC_STORE_U32(ctx.r3.u32 + 196, r11.u32);
	// stw r10,152(r3)
	PPC_STORE_U32(ctx.r3.u32 + 152, ctx.r10.u32);
	// stw r11,168(r3)
	PPC_STORE_U32(ctx.r3.u32 + 168, r11.u32);
	// stw r10,124(r3)
	PPC_STORE_U32(ctx.r3.u32 + 124, ctx.r10.u32);
	// stw r11,140(r3)
	PPC_STORE_U32(ctx.r3.u32 + 140, r11.u32);
	// stw r10,96(r3)
	PPC_STORE_U32(ctx.r3.u32 + 96, ctx.r10.u32);
	// stw r11,112(r3)
	PPC_STORE_U32(ctx.r3.u32 + 112, r11.u32);
	// stw r10,60(r3)
	PPC_STORE_U32(ctx.r3.u32 + 60, ctx.r10.u32);
	// stw r11,76(r3)
	PPC_STORE_U32(ctx.r3.u32 + 76, r11.u32);
	// stw r10,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, ctx.r10.u32);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// b 0x821778e8
	sub_821778E8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82150DB0"))) PPC_WEAK_FUNC(sub_82150DB0);
PPC_FUNC_IMPL(__imp__sub_82150DB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82150c58
	sub_82150C58(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82150de8
	if (cr6.getEQ()) goto loc_82150DE8;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82150DE8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82150E00"))) PPC_WEAK_FUNC(sub_82150E00);
PPC_FUNC_IMPL(__imp__sub_82150E00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r31,r11,29116
	r31.s64 = r11.s64 + 29116;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8214edf0
	sub_8214EDF0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// stw r3,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r3.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82150E50"))) PPC_WEAK_FUNC(sub_82150E50);
PPC_FUNC_IMPL(__imp__sub_82150E50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r3,29100(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// b 0x8214f228
	sub_8214F228(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82150E64"))) PPC_WEAK_FUNC(sub_82150E64);
PPC_FUNC_IMPL(__imp__sub_82150E64) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82150E68"))) PPC_WEAK_FUNC(sub_82150E68);
PPC_FUNC_IMPL(__imp__sub_82150E68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r3,29100(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// b 0x8214f4a8
	sub_8214F4A8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82150E7C"))) PPC_WEAK_FUNC(sub_82150E7C);
PPC_FUNC_IMPL(__imp__sub_82150E7C) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

extern void FileReadHook(PPCRegister& r3, PPCRegister& r4, PPCRegister& r5);

__attribute__((alias("__imp__sub_82150E80"))) PPC_WEAK_FUNC(sub_82150E80);
PPC_FUNC_IMPL(__imp__sub_82150E80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r3,29100(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// cmplwi cr6,r3,0
	FileReadHook(ctx.r3, ctx.r4, ctx.r5);
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// b 0x8214f570
	sub_8214F570(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82150E94"))) PPC_WEAK_FUNC(sub_82150E94);
PPC_FUNC_IMPL(__imp__sub_82150E94) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82150E98"))) PPC_WEAK_FUNC(sub_82150E98);
PPC_FUNC_IMPL(__imp__sub_82150E98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-29976
	r11.s64 = r11.s64 + -29976;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x82150ecc
	if (cr6.getEQ()) goto loc_82150ECC;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82150ECC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82150EE0"))) PPC_WEAK_FUNC(sub_82150EE0);
PPC_FUNC_IMPL(__imp__sub_82150EE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-29956
	r11.s64 = r11.s64 + -29956;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x821777e0
	sub_821777E0(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82150f24
	if (cr6.getEQ()) goto loc_82150F24;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82150F24:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82150F40"))) PPC_WEAK_FUNC(sub_82150F40);
PPC_FUNC_IMPL(__imp__sub_82150F40) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r5,64
	ctx.r5.s64 = 64;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x821778c0
	sub_821778C0(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r11,r11,-29900
	r11.s64 = r11.s64 + -29900;
	// addi r4,r31,24
	ctx.r4.s64 = r31.s64 + 24;
	// addi r8,r10,-30724
	ctx.r8.s64 = ctx.r10.s64 + -30724;
	// li r9,4
	ctx.r9.s64 = 4;
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r27,2
	r27.s64 = 2;
	// addi r30,r4,16
	r30.s64 = ctx.r4.s64 + 16;
	// li r7,7
	ctx.r7.s64 = 7;
	// stw r9,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r9.u32);
	// addi r25,r11,-30240
	r25.s64 = r11.s64 + -30240;
	// stw r10,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r10.u32);
	// li r11,0
	r11.s64 = 0;
	// addi r3,r31,52
	ctx.r3.s64 = r31.s64 + 52;
	// stw r27,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, r27.u32);
	// stw r8,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r8.u32);
	// addi r5,r31,80
	ctx.r5.s64 = r31.s64 + 80;
	// stw r7,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r7.u32);
	// addi r29,r3,16
	r29.s64 = ctx.r3.s64 + 16;
	// addi r28,r5,16
	r28.s64 = ctx.r5.s64 + 16;
	// stw r11,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r11.u32);
	// stw r11,20(r4)
	PPC_STORE_U32(ctx.r4.u32 + 20, r11.u32);
	// li r21,-128
	r21.s64 = -128;
	// stb r11,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r11.u8);
	// li r22,127
	r22.s64 = 127;
	// stw r25,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r25.u32);
	// li r26,8
	r26.s64 = 8;
	// stw r9,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r9.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r10,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r10.u32);
	// addi r4,r31,116
	ctx.r4.s64 = r31.s64 + 116;
	// stw r27,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r27.u32);
	// addi r30,r31,152
	r30.s64 = r31.s64 + 152;
	// stw r8,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r8.u32);
	// stw r7,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r7.u32);
	// stw r11,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r11.u32);
	// lis r29,-32254
	r29.s64 = -2113798144;
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// addi r23,r29,-29968
	r23.s64 = r29.s64 + -29968;
	// stb r11,24(r3)
	PPC_STORE_U8(ctx.r3.u32 + 24, r11.u8);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
	// addi r3,r31,180
	ctx.r3.s64 = r31.s64 + 180;
	// stw r9,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r9.u32);
	// stw r10,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r10.u32);
	// addi r24,r3,16
	r24.s64 = ctx.r3.s64 + 16;
	// stw r27,12(r5)
	PPC_STORE_U32(ctx.r5.u32 + 12, r27.u32);
	// stw r8,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r8.u32);
	// stw r7,4(r28)
	PPC_STORE_U32(r28.u32 + 4, ctx.r7.u32);
	// stw r11,8(r28)
	PPC_STORE_U32(r28.u32 + 8, r11.u32);
	// stb r21,28(r5)
	PPC_STORE_U8(ctx.r5.u32 + 28, r21.u8);
	// addi r28,r30,16
	r28.s64 = r30.s64 + 16;
	// stb r22,29(r5)
	PPC_STORE_U8(ctx.r5.u32 + 29, r22.u8);
	// stw r26,32(r5)
	PPC_STORE_U32(ctx.r5.u32 + 32, r26.u32);
	// stw r6,20(r5)
	PPC_STORE_U32(ctx.r5.u32 + 20, ctx.r6.u32);
	// stb r11,24(r5)
	PPC_STORE_U8(ctx.r5.u32 + 24, r11.u8);
	// stw r23,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r23.u32);
	// lis r5,-32254
	ctx.r5.s64 = -2113798144;
	// stw r9,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r9.u32);
	// addi r29,r5,-30240
	r29.s64 = ctx.r5.s64 + -30240;
	// stw r10,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r10.u32);
	// addi r5,r4,16
	ctx.r5.s64 = ctx.r4.s64 + 16;
	// stw r27,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, r27.u32);
	// stw r8,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r8.u32);
	// stw r7,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r7.u32);
	// stw r11,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, r11.u32);
	// stb r21,28(r4)
	PPC_STORE_U8(ctx.r4.u32 + 28, r21.u8);
	// stb r22,29(r4)
	PPC_STORE_U8(ctx.r4.u32 + 29, r22.u8);
	// stw r26,32(r4)
	PPC_STORE_U32(ctx.r4.u32 + 32, r26.u32);
	// stw r6,20(r4)
	PPC_STORE_U32(ctx.r4.u32 + 20, ctx.r6.u32);
	// stb r11,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r11.u8);
	// stw r23,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r23.u32);
	// addi r5,r31,216
	ctx.r5.s64 = r31.s64 + 216;
	// stw r9,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r9.u32);
	// addi r4,r31,252
	ctx.r4.s64 = r31.s64 + 252;
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// li r20,3
	r20.s64 = 3;
	// stw r6,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r6.u32);
	// stw r8,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r8.u32);
	// stw r7,4(r28)
	PPC_STORE_U32(r28.u32 + 4, ctx.r7.u32);
	// stw r11,8(r28)
	PPC_STORE_U32(r28.u32 + 8, r11.u32);
	// lis r28,-32254
	r28.s64 = -2113798144;
	// stw r11,20(r30)
	PPC_STORE_U32(r30.u32 + 20, r11.u32);
	// stb r11,24(r30)
	PPC_STORE_U8(r30.u32 + 24, r11.u8);
	// addi r28,r28,-29968
	r28.s64 = r28.s64 + -29968;
	// stw r29,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r29.u32);
	// addi r30,r31,280
	r30.s64 = r31.s64 + 280;
	// stw r9,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r9.u32);
	// stw r10,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r10.u32);
	// addi r23,r30,16
	r23.s64 = r30.s64 + 16;
	// stw r6,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r6.u32);
	// stw r8,0(r24)
	PPC_STORE_U32(r24.u32 + 0, ctx.r8.u32);
	// stw r7,4(r24)
	PPC_STORE_U32(r24.u32 + 4, ctx.r7.u32);
	// stw r11,8(r24)
	PPC_STORE_U32(r24.u32 + 8, r11.u32);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// addi r28,r4,16
	r28.s64 = ctx.r4.s64 + 16;
	// stb r21,28(r3)
	PPC_STORE_U8(ctx.r3.u32 + 28, r21.u8);
	// li r21,255
	r21.s64 = 255;
	// stb r22,29(r3)
	PPC_STORE_U8(ctx.r3.u32 + 29, r22.u8);
	// stw r26,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r26.u32);
	// stw r6,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r6.u32);
	// stb r11,24(r3)
	PPC_STORE_U8(ctx.r3.u32 + 24, r11.u8);
	// lis r3,-32254
	ctx.r3.s64 = -2113798144;
	// stw r9,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r9.u32);
	// addi r24,r3,-30228
	r24.s64 = ctx.r3.s64 + -30228;
	// stw r10,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r10.u32);
	// lis r3,-32254
	ctx.r3.s64 = -2113798144;
	// stw r6,12(r5)
	PPC_STORE_U32(ctx.r5.u32 + 12, ctx.r6.u32);
	// addi r22,r3,-30240
	r22.s64 = ctx.r3.s64 + -30240;
	// addi r3,r5,16
	ctx.r3.s64 = ctx.r5.s64 + 16;
	// stw r8,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r8.u32);
	// stw r7,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r7.u32);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// stb r11,28(r5)
	PPC_STORE_U8(ctx.r5.u32 + 28, r11.u8);
	// addi r3,r31,364
	ctx.r3.s64 = r31.s64 + 364;
	// stb r21,29(r5)
	PPC_STORE_U8(ctx.r5.u32 + 29, r21.u8);
	// stw r26,32(r5)
	PPC_STORE_U32(ctx.r5.u32 + 32, r26.u32);
	// stw r27,20(r5)
	PPC_STORE_U32(ctx.r5.u32 + 20, r27.u32);
	// stb r11,24(r5)
	PPC_STORE_U8(ctx.r5.u32 + 24, r11.u8);
	// stw r24,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r24.u32);
	// addi r5,r31,308
	ctx.r5.s64 = r31.s64 + 308;
	// stw r9,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r9.u32);
	// stw r10,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r10.u32);
	// stw r20,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, r20.u32);
	// stw r8,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r8.u32);
	// stw r7,4(r28)
	PPC_STORE_U32(r28.u32 + 4, ctx.r7.u32);
	// stw r11,8(r28)
	PPC_STORE_U32(r28.u32 + 8, r11.u32);
	// stw r11,20(r4)
	PPC_STORE_U32(ctx.r4.u32 + 20, r11.u32);
	// addi r28,r31,392
	r28.s64 = r31.s64 + 392;
	// stb r11,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r11.u8);
	// stw r22,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r22.u32);
	// addi r4,r31,336
	ctx.r4.s64 = r31.s64 + 336;
	// stw r9,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r9.u32);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// stw r27,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r27.u32);
	// stw r8,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r8.u32);
	// stw r7,4(r23)
	PPC_STORE_U32(r23.u32 + 4, ctx.r7.u32);
	// stw r11,8(r23)
	PPC_STORE_U32(r23.u32 + 8, r11.u32);
	// stw r25,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r25.u32);
	// addi r23,r3,16
	r23.s64 = ctx.r3.s64 + 16;
	// stw r11,20(r30)
	PPC_STORE_U32(r30.u32 + 20, r11.u32);
	// addi r25,r4,16
	r25.s64 = ctx.r4.s64 + 16;
	// stb r11,24(r30)
	PPC_STORE_U8(r30.u32 + 24, r11.u8);
	// addi r30,r5,16
	r30.s64 = ctx.r5.s64 + 16;
	// stw r9,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r9.u32);
	// stw r10,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r10.u32);
	// stw r6,12(r5)
	PPC_STORE_U32(ctx.r5.u32 + 12, ctx.r6.u32);
	// stw r8,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r8.u32);
	// li r20,32
	r20.s64 = 32;
	// stw r7,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r7.u32);
	// stw r11,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r11.u32);
	// stw r11,20(r5)
	PPC_STORE_U32(ctx.r5.u32 + 20, r11.u32);
	// addi r30,r28,16
	r30.s64 = r28.s64 + 16;
	// stb r11,24(r5)
	PPC_STORE_U8(ctx.r5.u32 + 24, r11.u8);
	// stw r29,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r29.u32);
	// addi r5,r31,448
	ctx.r5.s64 = r31.s64 + 448;
	// stw r9,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r9.u32);
	// stw r10,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r10.u32);
	// stw r6,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, ctx.r6.u32);
	// stw r8,0(r25)
	PPC_STORE_U32(r25.u32 + 0, ctx.r8.u32);
	// stw r7,4(r25)
	PPC_STORE_U32(r25.u32 + 4, ctx.r7.u32);
	// stw r11,8(r25)
	PPC_STORE_U32(r25.u32 + 8, r11.u32);
	// stw r11,20(r4)
	PPC_STORE_U32(ctx.r4.u32 + 20, r11.u32);
	// stb r11,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r11.u8);
	// stw r29,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r29.u32);
	// addi r4,r31,420
	ctx.r4.s64 = r31.s64 + 420;
	// stw r9,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r9.u32);
	// stw r10,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r10.u32);
	// addi r25,r4,16
	r25.s64 = ctx.r4.s64 + 16;
	// stw r6,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r6.u32);
	// stw r8,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r8.u32);
	// stw r7,4(r23)
	PPC_STORE_U32(r23.u32 + 4, ctx.r7.u32);
	// stw r11,8(r23)
	PPC_STORE_U32(r23.u32 + 8, r11.u32);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// addi r23,r5,16
	r23.s64 = ctx.r5.s64 + 16;
	// stb r11,24(r3)
	PPC_STORE_U8(ctx.r3.u32 + 24, r11.u8);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// addi r3,r31,484
	ctx.r3.s64 = r31.s64 + 484;
	// stw r9,4(r28)
	PPC_STORE_U32(r28.u32 + 4, ctx.r9.u32);
	// stw r10,8(r28)
	PPC_STORE_U32(r28.u32 + 8, ctx.r10.u32);
	// addi r22,r3,16
	r22.s64 = ctx.r3.s64 + 16;
	// stw r6,12(r28)
	PPC_STORE_U32(r28.u32 + 12, ctx.r6.u32);
	// stw r8,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r8.u32);
	// stw r7,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r7.u32);
	// stw r11,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r11.u32);
	// stw r11,20(r28)
	PPC_STORE_U32(r28.u32 + 20, r11.u32);
	// addi r30,r31,520
	r30.s64 = r31.s64 + 520;
	// stb r11,24(r28)
	PPC_STORE_U8(r28.u32 + 24, r11.u8);
	// stw r29,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r29.u32);
	// lis r28,-32254
	r28.s64 = -2113798144;
	// stw r9,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r9.u32);
	// stw r10,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r10.u32);
	// stw r6,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, ctx.r6.u32);
	// stw r8,0(r25)
	PPC_STORE_U32(r25.u32 + 0, ctx.r8.u32);
	// stw r7,4(r25)
	PPC_STORE_U32(r25.u32 + 4, ctx.r7.u32);
	// stw r11,8(r25)
	PPC_STORE_U32(r25.u32 + 8, r11.u32);
	// stw r11,20(r4)
	PPC_STORE_U32(ctx.r4.u32 + 20, r11.u32);
	// stb r11,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r11.u8);
	// stw r29,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r29.u32);
	// addi r4,r31,592
	ctx.r4.s64 = r31.s64 + 592;
	// stw r9,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r9.u32);
	// stw r10,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r10.u32);
	// stw r6,12(r5)
	PPC_STORE_U32(ctx.r5.u32 + 12, ctx.r6.u32);
	// stw r8,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r8.u32);
	// stw r7,4(r23)
	PPC_STORE_U32(r23.u32 + 4, ctx.r7.u32);
	// stw r11,8(r23)
	PPC_STORE_U32(r23.u32 + 8, r11.u32);
	// stb r11,28(r5)
	PPC_STORE_U8(ctx.r5.u32 + 28, r11.u8);
	// addi r23,r28,-30204
	r23.s64 = r28.s64 + -30204;
	// stb r21,29(r5)
	PPC_STORE_U8(ctx.r5.u32 + 29, r21.u8);
	// addi r28,r30,16
	r28.s64 = r30.s64 + 16;
	// stw r26,32(r5)
	PPC_STORE_U32(ctx.r5.u32 + 32, r26.u32);
	// stw r27,20(r5)
	PPC_STORE_U32(ctx.r5.u32 + 20, r27.u32);
	// stb r11,24(r5)
	PPC_STORE_U8(ctx.r5.u32 + 24, r11.u8);
	// stw r24,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r24.u32);
	// addi r5,r31,548
	ctx.r5.s64 = r31.s64 + 548;
	// stw r9,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r9.u32);
	// stw r10,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r10.u32);
	// addi r25,r5,16
	r25.s64 = ctx.r5.s64 + 16;
	// stw r6,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r6.u32);
	// stw r7,4(r22)
	PPC_STORE_U32(r22.u32 + 4, ctx.r7.u32);
	// stw r8,0(r22)
	PPC_STORE_U32(r22.u32 + 0, ctx.r8.u32);
	// stw r11,8(r22)
	PPC_STORE_U32(r22.u32 + 8, r11.u32);
	// stb r11,28(r3)
	PPC_STORE_U8(ctx.r3.u32 + 28, r11.u8);
	// stb r21,29(r3)
	PPC_STORE_U8(ctx.r3.u32 + 29, r21.u8);
	// stw r26,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r26.u32);
	// stw r27,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r27.u32);
	// stb r11,24(r3)
	PPC_STORE_U8(ctx.r3.u32 + 24, r11.u8);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r24.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r9,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r9.u32);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// stw r6,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r6.u32);
	// stw r8,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r8.u32);
	// stw r7,4(r28)
	PPC_STORE_U32(r28.u32 + 4, ctx.r7.u32);
	// stw r11,8(r28)
	PPC_STORE_U32(r28.u32 + 8, r11.u32);
	// stw r11,20(r30)
	PPC_STORE_U32(r30.u32 + 20, r11.u32);
	// stb r11,24(r30)
	PPC_STORE_U8(r30.u32 + 24, r11.u8);
	// stw r29,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r29.u32);
	// stw r9,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r9.u32);
	// stw r10,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r10.u32);
	// stw r6,12(r5)
	PPC_STORE_U32(ctx.r5.u32 + 12, ctx.r6.u32);
	// stw r8,0(r25)
	PPC_STORE_U32(r25.u32 + 0, ctx.r8.u32);
	// stw r7,4(r25)
	PPC_STORE_U32(r25.u32 + 4, ctx.r7.u32);
	// stw r11,8(r25)
	PPC_STORE_U32(r25.u32 + 8, r11.u32);
	// stb r11,28(r5)
	PPC_STORE_U8(ctx.r5.u32 + 28, r11.u8);
	// stw r11,32(r5)
	PPC_STORE_U32(ctx.r5.u32 + 32, r11.u32);
	// stw r10,36(r5)
	PPC_STORE_U32(ctx.r5.u32 + 36, ctx.r10.u32);
	// stw r20,40(r5)
	PPC_STORE_U32(ctx.r5.u32 + 40, r20.u32);
	// stw r9,20(r5)
	PPC_STORE_U32(ctx.r5.u32 + 20, ctx.r9.u32);
	// stw r11,24(r5)
	PPC_STORE_U32(ctx.r5.u32 + 24, r11.u32);
	// stw r23,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r23.u32);
	// addi r5,r4,16
	ctx.r5.s64 = ctx.r4.s64 + 16;
	// stw r9,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r9.u32);
	// stw r10,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r10.u32);
	// stw r6,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, ctx.r6.u32);
	// stw r8,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r8.u32);
	// stw r7,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r7.u32);
	// stw r11,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, r11.u32);
	// stb r11,28(r4)
	PPC_STORE_U8(ctx.r4.u32 + 28, r11.u8);
	// stw r11,32(r4)
	PPC_STORE_U32(ctx.r4.u32 + 32, r11.u32);
	// stw r10,36(r4)
	PPC_STORE_U32(ctx.r4.u32 + 36, ctx.r10.u32);
	// stw r20,40(r4)
	PPC_STORE_U32(ctx.r4.u32 + 40, r20.u32);
	// stw r9,20(r4)
	PPC_STORE_U32(ctx.r4.u32 + 20, ctx.r9.u32);
	// stw r11,24(r4)
	PPC_STORE_U32(ctx.r4.u32 + 24, r11.u32);
	// stw r23,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r23.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_82151390"))) PPC_WEAK_FUNC(sub_82151390);
PPC_FUNC_IMPL(__imp__sub_82151390) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r9,r11,-29900
	ctx.r9.s64 = r11.s64 + -29900;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r10,r10,-30724
	ctx.r10.s64 = ctx.r10.s64 + -30724;
	// addi r11,r11,-30252
	r11.s64 = r11.s64 + -30252;
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
	// stw r10,608(r3)
	PPC_STORE_U32(ctx.r3.u32 + 608, ctx.r10.u32);
	// stw r11,592(r3)
	PPC_STORE_U32(ctx.r3.u32 + 592, r11.u32);
	// stw r11,548(r3)
	PPC_STORE_U32(ctx.r3.u32 + 548, r11.u32);
	// stw r10,564(r3)
	PPC_STORE_U32(ctx.r3.u32 + 564, ctx.r10.u32);
	// stw r11,520(r3)
	PPC_STORE_U32(ctx.r3.u32 + 520, r11.u32);
	// stw r10,536(r3)
	PPC_STORE_U32(ctx.r3.u32 + 536, ctx.r10.u32);
	// stw r11,484(r3)
	PPC_STORE_U32(ctx.r3.u32 + 484, r11.u32);
	// stw r10,500(r3)
	PPC_STORE_U32(ctx.r3.u32 + 500, ctx.r10.u32);
	// stw r11,448(r3)
	PPC_STORE_U32(ctx.r3.u32 + 448, r11.u32);
	// stw r10,464(r3)
	PPC_STORE_U32(ctx.r3.u32 + 464, ctx.r10.u32);
	// stw r11,420(r3)
	PPC_STORE_U32(ctx.r3.u32 + 420, r11.u32);
	// stw r10,436(r3)
	PPC_STORE_U32(ctx.r3.u32 + 436, ctx.r10.u32);
	// stw r11,392(r3)
	PPC_STORE_U32(ctx.r3.u32 + 392, r11.u32);
	// stw r10,408(r3)
	PPC_STORE_U32(ctx.r3.u32 + 408, ctx.r10.u32);
	// stw r11,364(r3)
	PPC_STORE_U32(ctx.r3.u32 + 364, r11.u32);
	// stw r10,380(r3)
	PPC_STORE_U32(ctx.r3.u32 + 380, ctx.r10.u32);
	// stw r11,336(r3)
	PPC_STORE_U32(ctx.r3.u32 + 336, r11.u32);
	// stw r10,352(r3)
	PPC_STORE_U32(ctx.r3.u32 + 352, ctx.r10.u32);
	// stw r11,308(r3)
	PPC_STORE_U32(ctx.r3.u32 + 308, r11.u32);
	// stw r10,324(r3)
	PPC_STORE_U32(ctx.r3.u32 + 324, ctx.r10.u32);
	// stw r11,280(r3)
	PPC_STORE_U32(ctx.r3.u32 + 280, r11.u32);
	// stw r10,296(r3)
	PPC_STORE_U32(ctx.r3.u32 + 296, ctx.r10.u32);
	// stw r11,252(r3)
	PPC_STORE_U32(ctx.r3.u32 + 252, r11.u32);
	// stw r10,268(r3)
	PPC_STORE_U32(ctx.r3.u32 + 268, ctx.r10.u32);
	// stw r11,216(r3)
	PPC_STORE_U32(ctx.r3.u32 + 216, r11.u32);
	// stw r10,232(r3)
	PPC_STORE_U32(ctx.r3.u32 + 232, ctx.r10.u32);
	// stw r11,180(r3)
	PPC_STORE_U32(ctx.r3.u32 + 180, r11.u32);
	// stw r10,196(r3)
	PPC_STORE_U32(ctx.r3.u32 + 196, ctx.r10.u32);
	// stw r11,152(r3)
	PPC_STORE_U32(ctx.r3.u32 + 152, r11.u32);
	// stw r10,168(r3)
	PPC_STORE_U32(ctx.r3.u32 + 168, ctx.r10.u32);
	// stw r11,116(r3)
	PPC_STORE_U32(ctx.r3.u32 + 116, r11.u32);
	// stw r10,132(r3)
	PPC_STORE_U32(ctx.r3.u32 + 132, ctx.r10.u32);
	// stw r11,80(r3)
	PPC_STORE_U32(ctx.r3.u32 + 80, r11.u32);
	// stw r10,96(r3)
	PPC_STORE_U32(ctx.r3.u32 + 96, ctx.r10.u32);
	// stw r11,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, r11.u32);
	// stw r10,68(r3)
	PPC_STORE_U32(ctx.r3.u32 + 68, ctx.r10.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r10,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, ctx.r10.u32);
	// b 0x821778e8
	sub_821778E8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82151448"))) PPC_WEAK_FUNC(sub_82151448);
PPC_FUNC_IMPL(__imp__sub_82151448) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// addi r4,r31,24
	ctx.r4.s64 = r31.s64 + 24;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,52
	ctx.r4.s64 = r31.s64 + 52;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,80
	r29.s64 = r31.s64 + 80;
	// li r28,2
	r28.s64 = 2;
	// li r3,2
	ctx.r3.s64 = 2;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,116
	r29.s64 = r31.s64 + 116;
	// li r3,2
	ctx.r3.s64 = 2;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,152
	ctx.r4.s64 = r31.s64 + 152;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,180
	r29.s64 = r31.s64 + 180;
	// li r11,-1
	r11.s64 = -1;
	// li r10,30
	ctx.r10.s64 = 30;
	// li r3,31
	ctx.r3.s64 = 31;
	// stb r11,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r11.u8);
	// stb r11,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r11.u8);
	// stb r10,29(r29)
	PPC_STORE_U8(r29.u32 + 29, ctx.r10.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,216
	r29.s64 = r31.s64 + 216;
	// li r11,5
	r11.s64 = 5;
	// li r3,5
	ctx.r3.s64 = 5;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,252
	ctx.r4.s64 = r31.s64 + 252;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,280
	ctx.r4.s64 = r31.s64 + 280;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,308
	ctx.r4.s64 = r31.s64 + 308;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,336
	ctx.r4.s64 = r31.s64 + 336;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,364
	ctx.r4.s64 = r31.s64 + 364;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,392
	ctx.r4.s64 = r31.s64 + 392;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,420
	ctx.r4.s64 = r31.s64 + 420;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,448
	r29.s64 = r31.s64 + 448;
	// li r27,4
	r27.s64 = 4;
	// li r28,64
	r28.s64 = 64;
	// li r3,64
	ctx.r3.s64 = 64;
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r27,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r27.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,484
	r29.s64 = r31.s64 + 484;
	// li r3,64
	ctx.r3.s64 = 64;
	// stb r27,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r27.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,520
	ctx.r4.s64 = r31.s64 + 520;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,548
	r29.s64 = r31.s64 + 548;
	// li r28,-1
	r28.s64 = -1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r30,24(r29)
	PPC_STORE_U32(r29.u32 + 24, r30.u32);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stw r30,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r30.u32);
	// stw r28,36(r29)
	PPC_STORE_U32(r29.u32 + 36, r28.u32);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// stw r3,40(r29)
	PPC_STORE_U32(r29.u32 + 40, ctx.r3.u32);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,592
	r29.s64 = r31.s64 + 592;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r30,24(r29)
	PPC_STORE_U32(r29.u32 + 24, r30.u32);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stw r30,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r30.u32);
	// stw r28,36(r29)
	PPC_STORE_U32(r29.u32 + 36, r28.u32);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,40(r29)
	PPC_STORE_U32(r29.u32 + 40, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82151690"))) PPC_WEAK_FUNC(sub_82151690);
PPC_FUNC_IMPL(__imp__sub_82151690) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82151390
	sub_82151390(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821516c8
	if (cr6.getEQ()) goto loc_821516C8;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_821516C8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821516E0"))) PPC_WEAK_FUNC(sub_821516E0);
PPC_FUNC_IMPL(__imp__sub_821516E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82177a68
	sub_82177A68(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r31,16
	r29.s64 = r31.s64 + 16;
	// addi r11,r11,-29836
	r11.s64 = r11.s64 + -29836;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r31,68
	r28.s64 = r31.s64 + 68;
	// addi r30,r11,-29564
	r30.s64 = r11.s64 + -29564;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r29,r31,120
	r29.s64 = r31.s64 + 120;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r31,172
	r28.s64 = r31.s64 + 172;
	// addi r27,r11,-29564
	r27.s64 = r11.s64 + -29564;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r27,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r27.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r29,r31,224
	r29.s64 = r31.s64 + 224;
	// stw r27,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r27.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,276
	r28.s64 = r31.s64 + 276;
	// li r4,1
	ctx.r4.s64 = 1;
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r27,r31,328
	r27.s64 = r31.s64 + 328;
	// addi r11,r11,-29892
	r11.s64 = r11.s64 + -29892;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r31,380
	r28.s64 = r31.s64 + 380;
	// addi r29,r11,-29564
	r29.s64 = r11.s64 + -29564;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r29,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r29.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,432
	r27.s64 = r31.s64 + 432;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,484
	r28.s64 = r31.s64 + 484;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r30,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r30.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,536
	r27.s64 = r31.s64 + 536;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,588
	r28.s64 = r31.s64 + 588;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r30,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r30.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r27,r31,640
	r27.s64 = r31.s64 + 640;
	// addi r11,r11,-29864
	r11.s64 = r11.s64 + -29864;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,692
	r28.s64 = r31.s64 + 692;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r30,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r30.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,744
	r27.s64 = r31.s64 + 744;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,796
	r28.s64 = r31.s64 + 796;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r29,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r29.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,848
	r27.s64 = r31.s64 + 848;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r29,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r29.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r29,r31,900
	r29.s64 = r31.s64 + 900;
	// li r4,4
	ctx.r4.s64 = 4;
	// stw r30,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r30.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r31,952
	r30.s64 = r31.s64 + 952;
	// addi r28,r11,-30192
	r28.s64 = r11.s64 + -30192;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r28,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r28.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r28,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r28.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,1004(r31)
	PPC_STORE_U32(r31.u32 + 1004, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_821518C0"))) PPC_WEAK_FUNC(sub_821518C0);
PPC_FUNC_IMPL(__imp__sub_821518C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r11,r11,-29836
	r11.s64 = r11.s64 + -29836;
	// addi r3,r31,952
	ctx.r3.s64 = r31.s64 + 952;
	// addi r30,r10,-30192
	r30.s64 = ctx.r10.s64 + -30192;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,900
	ctx.r3.s64 = r31.s64 + 900;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r31,848
	ctx.r3.s64 = r31.s64 + 848;
	// addi r30,r11,-29564
	r30.s64 = r11.s64 + -29564;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r31,796
	ctx.r3.s64 = r31.s64 + 796;
	// addi r29,r11,-29564
	r29.s64 = r11.s64 + -29564;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,744
	ctx.r3.s64 = r31.s64 + 744;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,692
	ctx.r3.s64 = r31.s64 + 692;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,640
	ctx.r3.s64 = r31.s64 + 640;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,588
	ctx.r3.s64 = r31.s64 + 588;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,536
	ctx.r3.s64 = r31.s64 + 536;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,484
	ctx.r3.s64 = r31.s64 + 484;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,432
	ctx.r3.s64 = r31.s64 + 432;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,380
	ctx.r3.s64 = r31.s64 + 380;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,328
	ctx.r3.s64 = r31.s64 + 328;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r31,276
	ctx.r3.s64 = r31.s64 + 276;
	// addi r29,r11,-29564
	r29.s64 = r11.s64 + -29564;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,224
	ctx.r3.s64 = r31.s64 + 224;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,172
	ctx.r3.s64 = r31.s64 + 172;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,68
	ctx.r3.s64 = r31.s64 + 68;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,16
	ctx.r3.s64 = r31.s64 + 16;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82177a88
	sub_82177A88(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821519F0"))) PPC_WEAK_FUNC(sub_821519F0);
PPC_FUNC_IMPL(__imp__sub_821519F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,16
	ctx.r3.s64 = r30.s64 + 16;
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,68
	ctx.r3.s64 = r30.s64 + 68;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,120
	ctx.r3.s64 = r30.s64 + 120;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,172
	ctx.r3.s64 = r30.s64 + 172;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,224
	ctx.r3.s64 = r30.s64 + 224;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,276
	ctx.r3.s64 = r30.s64 + 276;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151AA8"))) PPC_WEAK_FUNC(sub_82151AA8);
PPC_FUNC_IMPL(__imp__sub_82151AA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,16
	ctx.r3.s64 = r30.s64 + 16;
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179e68
	sub_82179E68(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,68
	ctx.r3.s64 = r30.s64 + 68;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179e68
	sub_82179E68(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,120
	ctx.r3.s64 = r30.s64 + 120;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179e68
	sub_82179E68(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r3,r30,172
	ctx.r3.s64 = r30.s64 + 172;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179e68
	sub_82179E68(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,224
	ctx.r3.s64 = r30.s64 + 224;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,276
	ctx.r3.s64 = r30.s64 + 276;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151B60"))) PPC_WEAK_FUNC(sub_82151B60);
PPC_FUNC_IMPL(__imp__sub_82151B60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x821518c0
	sub_821518C0(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82151b98
	if (cr6.getEQ()) goto loc_82151B98;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82151B98:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151BB0"))) PPC_WEAK_FUNC(sub_82151BB0);
PPC_FUNC_IMPL(__imp__sub_82151BB0) {
	PPC_FUNC_PROLOGUE();
	// li r3,27
	ctx.r3.s64 = 27;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151BB8"))) PPC_WEAK_FUNC(sub_82151BB8);
PPC_FUNC_IMPL(__imp__sub_82151BB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x8217a918
	sub_8217A918(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82151bf0
	if (cr6.getEQ()) goto loc_82151BF0;
	// bl 0x8209e328
	sub_8209E328(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82151BF0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151C08"))) PPC_WEAK_FUNC(sub_82151C08);
PPC_FUNC_IMPL(__imp__sub_82151C08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823b3838
	sub_823B3838(ctx, base);
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151C30"))) PPC_WEAK_FUNC(sub_82151C30);
PPC_FUNC_IMPL(__imp__sub_82151C30) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r3,-30232(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -30232);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151C40"))) PPC_WEAK_FUNC(sub_82151C40);
PPC_FUNC_IMPL(__imp__sub_82151C40) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r3,-30228(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -30228);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151C50"))) PPC_WEAK_FUNC(sub_82151C50);
PPC_FUNC_IMPL(__imp__sub_82151C50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// stw r3,-30228(r11)
	PPC_STORE_U32(r11.u32 + -30228, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151C60"))) PPC_WEAK_FUNC(sub_82151C60);
PPC_FUNC_IMPL(__imp__sub_82151C60) {
	PPC_FUNC_PROLOGUE();
	// b 0x82164510
	sub_82164510(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82151C68"))) PPC_WEAK_FUNC(sub_82151C68);
PPC_FUNC_IMPL(__imp__sub_82151C68) {
	PPC_FUNC_PROLOGUE();
	// b 0x82164500
	sub_82164500(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82151C70"))) PPC_WEAK_FUNC(sub_82151C70);
PPC_FUNC_IMPL(__imp__sub_82151C70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30232
	r11.s64 = r11.s64 + -30232;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r31,r10
	cr6.compare<uint32_t>(r31.u32, ctx.r10.u32, xer);
	// bne cr6,0x82151ca0
	if (!cr6.getEQ()) goto loc_82151CA0;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_82151CA0:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r31,r10
	cr6.compare<uint32_t>(r31.u32, ctx.r10.u32, xer);
	// bne cr6,0x82151cb4
	if (!cr6.getEQ()) goto loc_82151CB4;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
loc_82151CB4:
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x82151ccc
	if (cr6.getLT()) goto loc_82151CCC;
	// bl 0x823b3838
	sub_823B3838(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_82151CCC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821645f0
	sub_821645F0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151CE8"))) PPC_WEAK_FUNC(sub_82151CE8);
PPC_FUNC_IMPL(__imp__sub_82151CE8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82164610
	sub_82164610(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x82151d20
	if (cr6.getLT()) goto loc_82151D20;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b3838
	sub_823B3838(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
loc_82151D20:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151D40"))) PPC_WEAK_FUNC(sub_82151D40);
PPC_FUNC_IMPL(__imp__sub_82151D40) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r10,-1
	ctx.r10.s64 = -1;
	// li r30,1
	r30.s64 = 1;
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r7,r7,-30724
	ctx.r7.s64 = ctx.r7.s64 + -30724;
	// addi r9,r11,-29744
	ctx.r9.s64 = r11.s64 + -29744;
	// stw r10,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r10.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stb r30,12(r31)
	PPC_STORE_U8(r31.u32 + 12, r30.u8);
	// li r6,4
	ctx.r6.s64 = 4;
	// addi r8,r11,-30724
	ctx.r8.s64 = r11.s64 + -30724;
	// li r11,0
	r11.s64 = 0;
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r3,r31,244
	ctx.r3.s64 = r31.s64 + 244;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
	// stw r8,48(r31)
	PPC_STORE_U32(r31.u32 + 48, ctx.r8.u32);
	// lwz r9,-26072(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + -26072);
	// stw r11,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r11.u32);
	// stw r10,60(r31)
	PPC_STORE_U32(r31.u32 + 60, ctx.r10.u32);
	// stw r9,52(r31)
	PPC_STORE_U32(r31.u32 + 52, ctx.r9.u32);
	// stfs f0,180(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 180, temp.u32);
	// stfs f0,184(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 184, temp.u32);
	// stw r10,64(r31)
	PPC_STORE_U32(r31.u32 + 64, ctx.r10.u32);
	// stfs f0,188(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 188, temp.u32);
	// stw r11,176(r31)
	PPC_STORE_U32(r31.u32 + 176, r11.u32);
	// stw r7,228(r31)
	PPC_STORE_U32(r31.u32 + 228, ctx.r7.u32);
	// stw r6,240(r31)
	PPC_STORE_U32(r31.u32 + 240, ctx.r6.u32);
	// bl 0x821516e0
	sub_821516E0(ctx, base);
	// stw r31,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r31.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r30,60(r31)
	PPC_STORE_U32(r31.u32 + 60, r30.u32);
	// stw r31,1248(r31)
	PPC_STORE_U32(r31.u32 + 1248, r31.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151E08"))) PPC_WEAK_FUNC(sub_82151E08);
PPC_FUNC_IMPL(__imp__sub_82151E08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-29744
	r11.s64 = r11.s64 + -29744;
	// addi r3,r31,244
	ctx.r3.s64 = r31.s64 + 244;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x821518c0
	sub_821518C0(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r11,r11,-30724
	r11.s64 = r11.s64 + -30724;
	// addi r10,r10,-30724
	ctx.r10.s64 = ctx.r10.s64 + -30724;
	// addi r9,r9,-29976
	ctx.r9.s64 = ctx.r9.s64 + -29976;
	// stw r11,228(r31)
	PPC_STORE_U32(r31.u32 + 228, r11.u32);
	// stw r10,48(r31)
	PPC_STORE_U32(r31.u32 + 48, ctx.r10.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151E68"))) PPC_WEAK_FUNC(sub_82151E68);
PPC_FUNC_IMPL(__imp__sub_82151E68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f30.u64);
	// stfd f31,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lfs f0,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	f0.f64 = double(temp.f32);
	// lis r10,26546
	ctx.r10.s64 = 1739718656;
	// lwz r11,-30224(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -30224);
	// ori r10,r10,14933
	ctx.r10.u64 = ctx.r10.u64 | 14933;
	// stfs f0,32(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 32, temp.u32);
	// subf r11,r11,r31
	r11.s64 = r31.s64 - r11.s64;
	// stw r30,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r30.u32);
	// stb r30,36(r31)
	PPC_STORE_U8(r31.u32 + 36, r30.u8);
	// mulhw r11,r11,r10
	r11.s64 = (int64_t(r11.s32) * int64_t(ctx.r10.s32)) >> 32;
	// std r30,40(r31)
	PPC_STORE_U64(r31.u32 + 40, r30.u64);
	// srawi r11,r11,9
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1FF) != 0);
	r11.s64 = r11.s32 >> 9;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// stw r3,68(r31)
	PPC_STORE_U32(r31.u32 + 68, ctx.r3.u32);
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r3,72(r31)
	PPC_STORE_U32(r31.u32 + 72, ctx.r3.u32);
	// stb r30,76(r31)
	PPC_STORE_U8(r31.u32 + 76, r30.u8);
	// stw r30,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r30.u32);
	// stb r30,92(r31)
	PPC_STORE_U8(r31.u32 + 92, r30.u8);
	// stb r30,93(r31)
	PPC_STORE_U8(r31.u32 + 93, r30.u8);
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f31,84(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 84, temp.u32);
	// stw r30,96(r31)
	PPC_STORE_U32(r31.u32 + 96, r30.u32);
	// stfs f31,1256(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 1256, temp.u32);
	// stw r30,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r30.u32);
	// stw r30,104(r31)
	PPC_STORE_U32(r31.u32 + 104, r30.u32);
	// stw r30,108(r31)
	PPC_STORE_U32(r31.u32 + 108, r30.u32);
	// lfs f30,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f30.f64 = double(temp.f32);
	// li r11,-1
	r11.s64 = -1;
	// stfs f30,160(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 160, temp.u32);
	// stw r30,112(r31)
	PPC_STORE_U32(r31.u32 + 112, r30.u32);
	// stfs f30,164(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 164, temp.u32);
	// stb r30,116(r31)
	PPC_STORE_U8(r31.u32 + 116, r30.u8);
	// stw r30,120(r31)
	PPC_STORE_U32(r31.u32 + 120, r30.u32);
	// stw r30,124(r31)
	PPC_STORE_U32(r31.u32 + 124, r30.u32);
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
	// li r11,659
	r11.s64 = 659;
	// stw r30,128(r31)
	PPC_STORE_U32(r31.u32 + 128, r30.u32);
	// stb r30,218(r31)
	PPC_STORE_U8(r31.u32 + 218, r30.u8);
	// stw r30,220(r31)
	PPC_STORE_U32(r31.u32 + 220, r30.u32);
	// stb r30,224(r31)
	PPC_STORE_U8(r31.u32 + 224, r30.u8);
	// stb r30,132(r31)
	PPC_STORE_U8(r31.u32 + 132, r30.u8);
	// stb r30,133(r31)
	PPC_STORE_U8(r31.u32 + 133, r30.u8);
	// stb r30,134(r31)
	PPC_STORE_U8(r31.u32 + 134, r30.u8);
	// stw r30,136(r31)
	PPC_STORE_U32(r31.u32 + 136, r30.u32);
	// stw r30,140(r31)
	PPC_STORE_U32(r31.u32 + 140, r30.u32);
	// stb r30,1252(r31)
	PPC_STORE_U8(r31.u32 + 1252, r30.u8);
	// stb r30,144(r31)
	PPC_STORE_U8(r31.u32 + 144, r30.u8);
	// stw r30,148(r31)
	PPC_STORE_U32(r31.u32 + 148, r30.u32);
	// stb r30,152(r31)
	PPC_STORE_U8(r31.u32 + 152, r30.u8);
	// stw r11,156(r31)
	PPC_STORE_U32(r31.u32 + 156, r11.u32);
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// stw r3,168(r31)
	PPC_STORE_U32(r31.u32 + 168, ctx.r3.u32);
	// stfs f31,180(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 180, temp.u32);
	// stw r30,172(r31)
	PPC_STORE_U32(r31.u32 + 172, r30.u32);
	// addi r4,r11,-30092
	ctx.r4.s64 = r11.s64 + -30092;
	// stfs f31,184(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 184, temp.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stfs f31,188(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 188, temp.u32);
	// stfs f30,196(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 196, temp.u32);
	// stw r30,176(r31)
	PPC_STORE_U32(r31.u32 + 176, r30.u32);
	// stb r30,192(r31)
	PPC_STORE_U8(r31.u32 + 192, r30.u8);
	// addi r5,r31,228
	ctx.r5.s64 = r31.s64 + 228;
	// stb r30,193(r31)
	PPC_STORE_U8(r31.u32 + 193, r30.u8);
	// addi r3,r31,244
	ctx.r3.s64 = r31.s64 + 244;
	// stw r30,200(r31)
	PPC_STORE_U32(r31.u32 + 200, r30.u32);
	// stw r30,204(r31)
	PPC_STORE_U32(r31.u32 + 204, r30.u32);
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// stw r30,212(r31)
	PPC_STORE_U32(r31.u32 + 212, r30.u32);
	// stw r11,208(r31)
	PPC_STORE_U32(r31.u32 + 208, r11.u32);
	// bl 0x82177ad8
	sub_82177AD8(ctx, base);
	// stb r30,216(r31)
	PPC_STORE_U8(r31.u32 + 216, r30.u8);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82151FE8"))) PPC_WEAK_FUNC(sub_82151FE8);
PPC_FUNC_IMPL(__imp__sub_82151FE8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lbz r11,36(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// beq cr6,0x82152000
	if (cr6.getEQ()) goto loc_82152000;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,-30232(r11)
	PPC_STORE_U32(r11.u32 + -30232, ctx.r10.u32);
loc_82152000:
	// clrlwi r10,r4,24
	ctx.r10.u64 = ctx.r4.u32 & 0xFF;
	// stb r4,36(r3)
	PPC_STORE_U8(ctx.r3.u32 + 36, ctx.r4.u8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// stw r3,-30232(r11)
	PPC_STORE_U32(r11.u32 + -30232, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152018"))) PPC_WEAK_FUNC(sub_82152018);
PPC_FUNC_IMPL(__imp__sub_82152018) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r3,r11,-30220
	ctx.r3.s64 = r11.s64 + -30220;
	// stw r30,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r30.u32);
	// bl 0x8216a950
	sub_8216A950(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r4,r31,48
	ctx.r4.s64 = r31.s64 + 48;
	// addi r3,r11,-30192
	ctx.r3.s64 = r11.s64 + -30192;
	// stb r10,216(r31)
	PPC_STORE_U8(r31.u32 + 216, ctx.r10.u8);
	// bl 0x8216b878
	sub_8216B878(ctx, base);
	// li r11,2
	r11.s64 = 2;
	// stw r30,232(r31)
	PPC_STORE_U32(r31.u32 + 232, r30.u32);
	// stw r11,240(r31)
	PPC_STORE_U32(r31.u32 + 240, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152080"))) PPC_WEAK_FUNC(sub_82152080);
PPC_FUNC_IMPL(__imp__sub_82152080) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r4,r31,48
	ctx.r4.s64 = r31.s64 + 48;
	// addi r3,r11,-30192
	ctx.r3.s64 = r11.s64 + -30192;
	// bl 0x8216b620
	sub_8216B620(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r10,4
	ctx.r10.s64 = 4;
	// addi r3,r31,244
	ctx.r3.s64 = r31.s64 + 244;
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// stw r10,240(r31)
	PPC_STORE_U32(r31.u32 + 240, ctx.r10.u32);
	// stw r11,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r11.u32);
	// bl 0x82178e68
	sub_82178E68(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821520D8"))) PPC_WEAK_FUNC(sub_821520D8);
PPC_FUNC_IMPL(__imp__sub_821520D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r11,-30192
	ctx.r3.s64 = r11.s64 + -30192;
	// li r31,0
	r31.s64 = 0;
	// bl 0x8216abf8
	sub_8216ABF8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215211c
	if (cr6.getEQ()) goto loc_8215211C;
	// lwz r3,8(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8215211C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152138"))) PPC_WEAK_FUNC(sub_82152138);
PPC_FUNC_IMPL(__imp__sub_82152138) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r3,r11,-30220
	ctx.r3.s64 = r11.s64 + -30220;
	// b 0x8216a8d8
	sub_8216A8D8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82152148"))) PPC_WEAK_FUNC(sub_82152148);
PPC_FUNC_IMPL(__imp__sub_82152148) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x8214d4b8
	sub_8214D4B8(ctx, base);
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215218c
	if (cr6.getEQ()) goto loc_8215218C;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r30,r11,-30120
	r30.s64 = r11.s64 + -30120;
	// b 0x82152194
	goto loc_82152194;
loc_8215218C:
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r30,r11,-30220
	r30.s64 = r11.s64 + -30220;
loc_82152194:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8216a9c0
	sub_8216A9C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821521b4
	if (cr6.getEQ()) goto loc_821521B4;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8216a8e8
	sub_8216A8E8(ctx, base);
loc_821521B4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821521D0"))) PPC_WEAK_FUNC(sub_821521D0);
PPC_FUNC_IMPL(__imp__sub_821521D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82152400
	if (!cr6.getEQ()) goto loc_82152400;
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// blt cr6,0x8215220c
	if (cr6.getLT()) goto loc_8215220C;
loc_821521FC:
	// li r29,1
	r29.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
loc_8215220C:
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x82152398
	if (cr6.getLT()) goto loc_82152398;
	// bl 0x823b3b68
	sub_823B3B68(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821522bc
	if (cr6.getEQ()) goto loc_821522BC;
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// stw r11,136(r31)
	PPC_STORE_U32(r31.u32 + 136, r11.u32);
	// bge cr6,0x821521fc
	if (!cr6.getLT()) goto loc_821521FC;
	// bl 0x8215f9f0
	sub_8215F9F0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82152400
	if (cr6.getEQ()) goto loc_82152400;
	// bl 0x8215f9f0
	sub_8215F9F0(ctx, base);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82152400
	if (cr6.getEQ()) goto loc_82152400;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x823b3858
	sub_823B3858(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152270
	if (cr6.getEQ()) goto loc_82152270;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// bl 0x823bc5d8
	sub_823BC5D8(ctx, base);
loc_82152270:
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x823b38b0
	sub_823B38B0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x8215f9f0
	sub_8215F9F0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r4,r11,17
	ctx.r4.s64 = r11.s64 + 17;
	// bl 0x823bc590
	sub_823BC590(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82152400
	if (!cr6.getEQ()) goto loc_82152400;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x823b3880
	sub_823B3880(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823bc5e8
	sub_823BC5E8(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
loc_821522BC:
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lis r30,-32019
	r30.s64 = -2098397184;
	// lwz r11,72(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 72);
	// subf r10,r11,r3
	ctx.r10.s64 = ctx.r3.s64 - r11.s64;
	// lwz r11,26192(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26192);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// ble cr6,0x821523b0
	if (!cr6.getGT()) goto loc_821523B0;
	// lwz r11,140(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8215237c
	if (!cr6.getEQ()) goto loc_8215237C;
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r10,140(r31)
	PPC_STORE_U32(r31.u32 + 140, ctx.r10.u32);
	// stw r11,136(r31)
	PPC_STORE_U32(r31.u32 + 136, r11.u32);
	// bl 0x8215f9f0
	sub_8215F9F0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82152400
	if (cr6.getEQ()) goto loc_82152400;
	// bl 0x8215f9f0
	sub_8215F9F0(ctx, base);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82152400
	if (cr6.getEQ()) goto loc_82152400;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x823b3858
	sub_823B3858(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152330
	if (cr6.getEQ()) goto loc_82152330;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// bl 0x823bc5d8
	sub_823BC5D8(ctx, base);
loc_82152330:
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x823b38b0
	sub_823B38B0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x8215f9f0
	sub_8215F9F0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r4,r11,17
	ctx.r4.s64 = r11.s64 + 17;
	// bl 0x823bc590
	sub_823BC590(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82152400
	if (!cr6.getEQ()) goto loc_82152400;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x823b3880
	sub_823B3880(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823bc5e8
	sub_823BC5E8(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
loc_8215237C:
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwz r11,26192(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 26192);
	// lwz r10,72(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 72);
	// addi r9,r11,6000
	ctx.r9.s64 = r11.s64 + 6000;
	// subf r11,r10,r3
	r11.s64 = ctx.r3.s64 - ctx.r10.s64;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// ble cr6,0x82152400
	if (!cr6.getGT()) goto loc_82152400;
loc_82152398:
	// li r11,3
	r11.s64 = 3;
	// li r29,1
	r29.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,136(r31)
	PPC_STORE_U32(r31.u32 + 136, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
loc_821523B0:
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,84(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 84);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x82152398
	if (cr6.getGT()) goto loc_82152398;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x823b3bb8
	sub_823B3BB8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82152400
	if (cr6.getEQ()) goto loc_82152400;
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x821523f0
	if (cr6.getEQ()) goto loc_821523F0;
	// stw r29,136(r31)
	PPC_STORE_U32(r31.u32 + 136, r29.u32);
loc_821523F0:
	// lwz r11,140(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82152400
	if (cr6.getEQ()) goto loc_82152400;
	// stw r29,140(r31)
	PPC_STORE_U32(r31.u32 + 140, r29.u32);
loc_82152400:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82152410"))) PPC_WEAK_FUNC(sub_82152410);
PPC_FUNC_IMPL(__imp__sub_82152410) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lbz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82152428
	if (cr6.getEQ()) goto loc_82152428;
	// blr 
	return;
loc_82152428:
	// lwz r10,136(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 136);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bgt cr6,0x82152440
	if (cr6.getGT()) goto loc_82152440;
	// lwz r11,140(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 140);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blelr cr6
	if (!cr6.getGT()) return;
loc_82152440:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152448"))) PPC_WEAK_FUNC(sub_82152448);
PPC_FUNC_IMPL(__imp__sub_82152448) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// li r11,3
	r11.s64 = 3;
	// stw r11,136(r3)
	PPC_STORE_U32(ctx.r3.u32 + 136, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152458"))) PPC_WEAK_FUNC(sub_82152458);
PPC_FUNC_IMPL(__imp__sub_82152458) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,80(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 80);
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// bnelr cr6
	if (!cr6.getEQ()) return;
	// li r11,0
	r11.s64 = 0;
	// stw r11,80(r3)
	PPC_STORE_U32(ctx.r3.u32 + 80, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152470"))) PPC_WEAK_FUNC(sub_82152470);
PPC_FUNC_IMPL(__imp__sub_82152470) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82164500
	sub_82164500(ctx, base);
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152524
	if (cr6.getEQ()) goto loc_82152524;
	// lbz r11,132(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152524
	if (cr6.getEQ()) goto loc_82152524;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82152524
	if (!cr6.getEQ()) goto loc_82152524;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwz r11,112(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// subf r11,r11,r30
	r11.s64 = r30.s64 - r11.s64;
	// cmplwi cr6,r11,30000
	cr6.compare<uint32_t>(r11.u32, 30000, xer);
	// ble cr6,0x82152524
	if (!cr6.getGT()) goto loc_82152524;
	// li r10,1
	ctx.r10.s64 = 1;
	// lwz r11,96(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 96);
	// li r3,44
	ctx.r3.s64 = 44;
	// subfic r11,r11,1
	xer.ca = r11.u32 <= 1;
	r11.s64 = 1 - r11.s64;
	// stb r10,93(r31)
	PPC_STORE_U8(r31.u32 + 93, ctx.r10.u8);
	// addi r10,r11,25
	ctx.r10.s64 = r11.s64 + 25;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r11,96(r31)
	PPC_STORE_U32(r31.u32 + 96, r11.u32);
	// stwx r30,r10,r31
	PPC_STORE_U32(ctx.r10.u32 + r31.u32, r30.u32);
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82152504
	if (cr6.getEQ()) goto loc_82152504;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82175160
	sub_82175160(ctx, base);
	// b 0x82152508
	goto loc_82152508;
loc_82152504:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82152508:
	// li r5,-1
	ctx.r5.s64 = -1;
	// stw r3,108(r31)
	PPC_STORE_U32(r31.u32 + 108, ctx.r3.u32);
	// li r4,300
	ctx.r4.s64 = 300;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// lwz r4,16(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r3,108(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_82152524:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152540"))) PPC_WEAK_FUNC(sub_82152540);
PPC_FUNC_IMPL(__imp__sub_82152540) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// bne cr6,0x82152570
	if (!cr6.getEQ()) goto loc_82152570;
	// li r11,0
	r11.s64 = 0;
	// stw r11,108(r31)
	PPC_STORE_U32(r31.u32 + 108, r11.u32);
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// stw r3,112(r31)
	PPC_STORE_U32(r31.u32 + 112, ctx.r3.u32);
loc_82152570:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152588"))) PPC_WEAK_FUNC(sub_82152588);
PPC_FUNC_IMPL(__imp__sub_82152588) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,108(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 108);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,96(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 96);
	// beq cr6,0x8215259c
	if (cr6.getEQ()) goto loc_8215259C;
	// subfic r11,r11,1
	xer.ca = r11.u32 <= 1;
	r11.s64 = 1 - r11.s64;
loc_8215259C:
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// addi r11,r11,25
	r11.s64 = r11.s64 + 25;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821525B8"))) PPC_WEAK_FUNC(sub_821525B8);
PPC_FUNC_IMPL(__imp__sub_821525B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lbz r11,116(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 116);
	// li r10,0
	ctx.r10.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821525f0
	if (cr6.getEQ()) goto loc_821525F0;
	// lwz r11,120(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 120);
	// lis r9,32767
	ctx.r9.s64 = 2147418112;
	// addi r11,r11,31
	r11.s64 = r11.s64 + 31;
	// ori r9,r9,65534
	ctx.r9.u64 = ctx.r9.u64 | 65534;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r3
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// subf r11,r11,r4
	r11.s64 = ctx.r4.s64 - r11.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bgt cr6,0x821525f4
	if (cr6.getGT()) goto loc_821525F4;
loc_821525F0:
	// li r10,1
	ctx.r10.s64 = 1;
loc_821525F4:
	// clrlwi r11,r10,24
	r11.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// li r10,1
	ctx.r10.s64 = 1;
	// lwz r11,120(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 120);
	// subfic r11,r11,1
	xer.ca = r11.u32 <= 1;
	r11.s64 = 1 - r11.s64;
	// stb r10,116(r3)
	PPC_STORE_U8(ctx.r3.u32 + 116, ctx.r10.u8);
	// addi r10,r11,31
	ctx.r10.s64 = r11.s64 + 31;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r11,120(r3)
	PPC_STORE_U32(ctx.r3.u32 + 120, r11.u32);
	// stwx r4,r10,r3
	PPC_STORE_U32(ctx.r10.u32 + ctx.r3.u32, ctx.r4.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152628"))) PPC_WEAK_FUNC(sub_82152628);
PPC_FUNC_IMPL(__imp__sub_82152628) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r4,31
	r11.s64 = ctx.r4.s64 + 31;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152638"))) PPC_WEAK_FUNC(sub_82152638);
PPC_FUNC_IMPL(__imp__sub_82152638) {
	PPC_FUNC_PROLOGUE();
	// stb r4,132(r3)
	PPC_STORE_U8(ctx.r3.u32 + 132, ctx.r4.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152640"))) PPC_WEAK_FUNC(sub_82152640);
PPC_FUNC_IMPL(__imp__sub_82152640) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,133(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 133);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82152708
	if (!cr6.getEQ()) goto loc_82152708;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r30,1
	r30.s64 = 1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_82152688:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x821526a4
	if (cr6.getEQ()) goto loc_821526A4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x821526a8
	if (!cr6.getEQ()) goto loc_821526A8;
loc_821526A4:
	// li r11,1
	r11.s64 = 1;
loc_821526A8:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821526f4
	if (!cr6.getEQ()) goto loc_821526F4;
	// lbz r11,116(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821526e4
	if (cr6.getEQ()) goto loc_821526E4;
	// addi r3,r10,900
	ctx.r3.s64 = ctx.r10.s64 + 900;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821526f0
	if (cr6.getEQ()) goto loc_821526F0;
loc_821526E4:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82152688
	goto loc_82152688;
loc_821526F0:
	// li r30,0
	r30.s64 = 0;
loc_821526F4:
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152708
	if (cr6.getEQ()) goto loc_82152708;
	// li r11,1
	r11.s64 = 1;
	// stb r11,133(r31)
	PPC_STORE_U8(r31.u32 + 133, r11.u8);
loc_82152708:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152720"))) PPC_WEAK_FUNC(sub_82152720);
PPC_FUNC_IMPL(__imp__sub_82152720) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// clrlwi r11,r4,24
	r11.u64 = ctx.r4.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stb r4,134(r30)
	PPC_STORE_U8(r30.u32 + 134, ctx.r4.u8);
	// beq cr6,0x82152770
	if (cr6.getEQ()) goto loc_82152770;
	// bl 0x821724a0
	sub_821724A0(ctx, base);
	// lwz r31,0(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82152770
	if (cr6.getEQ()) goto loc_82152770;
loc_82152758:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82174258
	sub_82174258(ctx, base);
	// lwz r31,64(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82152758
	if (!cr6.getEQ()) goto loc_82152758;
loc_82152770:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152788"))) PPC_WEAK_FUNC(sub_82152788);
PPC_FUNC_IMPL(__imp__sub_82152788) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// bl 0x823bc5c0
	sub_823BC5C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821527d8
	if (cr6.getEQ()) goto loc_821527D8;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r6,r31,-1
	ctx.r6.s64 = r31.s64 + -1;
	// addi r5,r11,-29736
	ctx.r5.s64 = r11.s64 + -29736;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823ecf88
	sub_823ECF88(ctx, base);
	// add r11,r30,r31
	r11.u64 = r30.u64 + r31.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r10,-1(r11)
	PPC_STORE_U8(r11.u32 + -1, ctx.r10.u8);
loc_821527D8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821527F0"))) PPC_WEAK_FUNC(sub_821527F0);
PPC_FUNC_IMPL(__imp__sub_821527F0) {
	PPC_FUNC_PROLOGUE();
	// lbz r3,144(r3)
	ctx.r3.u64 = PPC_LOAD_U8(ctx.r3.u32 + 144);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821527F8"))) PPC_WEAK_FUNC(sub_821527F8);
PPC_FUNC_IMPL(__imp__sub_821527F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// lbz r11,144(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 144);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821528ac
	if (cr6.getEQ()) goto loc_821528AC;
	// lis r30,-31993
	r30.s64 = -2096693248;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// addi r3,r11,1328
	ctx.r3.s64 = r11.s64 + 1328;
	// lwz r11,1328(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1328);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152894
	if (cr6.getEQ()) goto loc_82152894;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,1328
	ctx.r3.s64 = r11.s64 + 1328;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152894
	if (cr6.getEQ()) goto loc_82152894;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,1380
	ctx.r3.s64 = r11.s64 + 1380;
	// lwz r11,1380(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1380);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152894
	if (cr6.getEQ()) goto loc_82152894;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_82152894:
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwz r11,148(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 148);
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// li r3,1
	ctx.r3.s64 = 1;
	// cmplwi cr6,r11,5000
	cr6.compare<uint32_t>(r11.u32, 5000, xer);
	// bge cr6,0x821528b0
	if (!cr6.getLT()) goto loc_821528B0;
loc_821528AC:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
loc_821528B0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821528B8"))) PPC_WEAK_FUNC(sub_821528B8);
PPC_FUNC_IMPL(__imp__sub_821528B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// li r11,0
	r11.s64 = 0;
	// lfs f0,2776(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	f0.f64 = double(temp.f32);
	// stfs f0,196(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 196, temp.u32);
	// stb r11,92(r3)
	PPC_STORE_U8(ctx.r3.u32 + 92, r11.u8);
	// stw r11,200(r3)
	PPC_STORE_U32(ctx.r3.u32 + 200, r11.u32);
	// stw r11,204(r3)
	PPC_STORE_U32(ctx.r3.u32 + 204, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821528D8"))) PPC_WEAK_FUNC(sub_821528D8);
PPC_FUNC_IMPL(__imp__sub_821528D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r3,-1
	ctx.r3.s64 = -1;
	// lwz r30,52(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// beq cr6,0x8215298c
	if (cr6.getEQ()) goto loc_8215298C;
	// lwz r11,600(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 600);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215298c
	if (cr6.getEQ()) goto loc_8215298C;
	// addi r3,r31,572
	ctx.r3.s64 = r31.s64 + 572;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82152984
	if (!cr6.getEQ()) goto loc_82152984;
	// addi r3,r31,728
	ctx.r3.s64 = r31.s64 + 728;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215295c
	if (cr6.getEQ()) goto loc_8215295C;
	// li r11,3
	r11.s64 = 3;
	// b 0x82152984
	goto loc_82152984;
loc_8215295C:
	// addi r3,r31,780
	ctx.r3.s64 = r31.s64 + 780;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82152984:
	// rlwinm r11,r11,7,0,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 7) & 0xFFFFFF80;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
loc_8215298C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821529A8"))) PPC_WEAK_FUNC(sub_821529A8);
PPC_FUNC_IMPL(__imp__sub_821529A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r11,r31,16
	r11.s64 = r31.s64 + 16;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// li r28,1
	r28.s64 = 1;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// beq cr6,0x82152a44
	if (cr6.getEQ()) goto loc_82152A44;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82152a1c
	if (cr6.getEQ()) goto loc_82152A1C;
	// addi r11,r31,224
	r11.s64 = r31.s64 + 224;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x82152a1c
	if (!cr6.getEQ()) goto loc_82152A1C;
	// lwz r11,1004(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1004);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152a44
	if (cr6.getEQ()) goto loc_82152A44;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x82152a44
	if (cr6.getEQ()) goto loc_82152A44;
	// addi r3,r11,260
	ctx.r3.s64 = r11.s64 + 260;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// b 0x82152a38
	goto loc_82152A38;
loc_82152A1C:
	// lbz r11,32(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82152a44
	if (!cr6.getEQ()) goto loc_82152A44;
	// lwz r11,1004(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1004);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152a44
	if (cr6.getEQ()) goto loc_82152A44;
	// lbz r11,132(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 132);
loc_82152A38:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82152a44
	if (!cr6.getEQ()) goto loc_82152A44;
	// li r28,0
	r28.s64 = 0;
loc_82152A44:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82152A50"))) PPC_WEAK_FUNC(sub_82152A50);
PPC_FUNC_IMPL(__imp__sub_82152A50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,1004(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1004);
	// lbz r11,12(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r3,r3,848
	ctx.r3.s64 = ctx.r3.s64 + 848;
	// addi r11,r11,-30092
	r11.s64 = r11.s64 + -30092;
	// lbz r4,544(r11)
	ctx.r4.u64 = PPC_LOAD_U8(r11.u32 + 544);
	// b 0x82176c80
	sub_82176C80(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82152A74"))) PPC_WEAK_FUNC(sub_82152A74);
PPC_FUNC_IMPL(__imp__sub_82152A74) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152A78"))) PPC_WEAK_FUNC(sub_82152A78);
PPC_FUNC_IMPL(__imp__sub_82152A78) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,1004(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1004);
	// li r31,1
	r31.s64 = 1;
	// lbz r11,12(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152ab4
	if (cr6.getEQ()) goto loc_82152AB4;
	// addi r3,r3,848
	ctx.r3.s64 = ctx.r3.s64 + 848;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152ab8
	if (cr6.getEQ()) goto loc_82152AB8;
loc_82152AB4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82152AB8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152AD0"))) PPC_WEAK_FUNC(sub_82152AD0);
PPC_FUNC_IMPL(__imp__sub_82152AD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bnelr cr6
	if (!cr6.getEQ()) return;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// b 0x821520d8
	sub_821520D8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82152AF0"))) PPC_WEAK_FUNC(sub_82152AF0);
PPC_FUNC_IMPL(__imp__sub_82152AF0) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152AF8"))) PPC_WEAK_FUNC(sub_82152AF8);
PPC_FUNC_IMPL(__imp__sub_82152AF8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r31,r11,-30092
	r31.s64 = r11.s64 + -30092;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82151448
	sub_82151448(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// stw r3,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r3.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152B48"))) PPC_WEAK_FUNC(sub_82152B48);
PPC_FUNC_IMPL(__imp__sub_82152B48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r4,4(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// addi r3,r11,-30192
	ctx.r3.s64 = r11.s64 + -30192;
	// li r30,0
	r30.s64 = 0;
	// bl 0x8216abf8
	sub_8216ABF8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82152b98
	if (cr6.getEQ()) goto loc_82152B98;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82152b98
	if (cr6.getEQ()) goto loc_82152B98;
	// addi r3,r11,244
	ctx.r3.s64 = r11.s64 + 244;
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x82177ba0
	sub_82177BA0(ctx, base);
	// b 0x82152b9c
	goto loc_82152B9C;
loc_82152B98:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_82152B9C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152BB8"))) PPC_WEAK_FUNC(sub_82152BB8);
PPC_FUNC_IMPL(__imp__sub_82152BB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// lwz r5,8(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// ble cr6,0x82152bec
	if (!cr6.getGT()) goto loc_82152BEC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,8(r6)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r6.u32 + 8);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
loc_82152BEC:
	// li r5,7
	ctx.r5.s64 = 7;
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152C18"))) PPC_WEAK_FUNC(sub_82152C18);
PPC_FUNC_IMPL(__imp__sub_82152C18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r4,8(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// li r11,0
	r11.s64 = 0;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x82152c4c
	if (!cr6.getGT()) goto loc_82152C4C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
loc_82152C4C:
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// addi r3,r10,-30092
	ctx.r3.s64 = ctx.r10.s64 + -30092;
	// bl 0x82177a40
	sub_82177A40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,7
	ctx.r4.s64 = 7;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// li r11,2
	r11.s64 = 2;
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82152C88"))) PPC_WEAK_FUNC(sub_82152C88);
PPC_FUNC_IMPL(__imp__sub_82152C88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82164728
	sub_82164728(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82152cd8
	if (!cr6.getEQ()) goto loc_82152CD8;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82152cd8
	if (cr6.getEQ()) goto loc_82152CD8;
loc_82152CB8:
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82152cd8
	if (cr6.getEQ()) goto loc_82152CD8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82152cb8
	if (!cr6.getEQ()) goto loc_82152CB8;
loc_82152CD8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152CF0"))) PPC_WEAK_FUNC(sub_82152CF0);
PPC_FUNC_IMPL(__imp__sub_82152CF0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// stb r5,12(r3)
	PPC_STORE_U8(ctx.r3.u32 + 12, ctx.r5.u8);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82152D08"))) PPC_WEAK_FUNC(sub_82152D08);
PPC_FUNC_IMPL(__imp__sub_82152D08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82152d58
	if (!cr6.getEQ()) goto loc_82152D58;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82152d58
	if (cr6.getEQ()) goto loc_82152D58;
loc_82152D38:
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82152d58
	if (cr6.getEQ()) goto loc_82152D58;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82152d38
	if (!cr6.getEQ()) goto loc_82152D38;
loc_82152D58:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82152D70"))) PPC_WEAK_FUNC(sub_82152D70);
PPC_FUNC_IMPL(__imp__sub_82152D70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r27,r31,16
	r27.s64 = r31.s64 + 16;
	// addi r30,r11,-30092
	r30.s64 = r11.s64 + -30092;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwz r29,1004(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 1004);
	// lwz r5,32(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 32);
	// lbz r28,12(r29)
	r28.u64 = PPC_LOAD_U8(r29.u32 + 12);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r5,r30,24
	ctx.r5.s64 = r30.s64 + 24;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,48(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 48);
	// li r25,1
	r25.s64 = 1;
	// addi r26,r31,68
	r26.s64 = r31.s64 + 68;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// stb r25,48(r31)
	PPC_STORE_U8(r31.u32 + 48, r25.u8);
	// lwz r5,60(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 60);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// addi r5,r30,52
	ctx.r5.s64 = r30.s64 + 52;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,76(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 76);
	// addi r27,r31,120
	r27.s64 = r31.s64 + 120;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// stb r11,12(r26)
	PPC_STORE_U8(r26.u32 + 12, r11.u8);
	// stb r25,100(r31)
	PPC_STORE_U8(r31.u32 + 100, r25.u8);
	// lwz r5,88(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 88);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r5,r30,80
	ctx.r5.s64 = r30.s64 + 80;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,104(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 104);
	// addi r26,r31,172
	r26.s64 = r31.s64 + 172;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// lwz r5,124(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 124);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// addi r5,r30,116
	ctx.r5.s64 = r30.s64 + 116;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,140(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 140);
	// addi r27,r31,224
	r27.s64 = r31.s64 + 224;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// stb r11,12(r26)
	PPC_STORE_U8(r26.u32 + 12, r11.u8);
	// lwz r5,160(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 160);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r5,r30,152
	ctx.r5.s64 = r30.s64 + 152;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,176(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 176);
	// addi r26,r31,276
	r26.s64 = r31.s64 + 276;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// stb r25,256(r31)
	PPC_STORE_U8(r31.u32 + 256, r25.u8);
	// lwz r5,188(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 188);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// addi r5,r30,180
	ctx.r5.s64 = r30.s64 + 180;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,204(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 204);
	// addi r27,r31,328
	r27.s64 = r31.s64 + 328;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// stb r11,12(r26)
	PPC_STORE_U8(r26.u32 + 12, r11.u8);
	// lwz r5,224(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 224);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,216
	ctx.r5.s64 = r30.s64 + 216;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,240(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 240);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,380
	r27.s64 = r31.s64 + 380;
	// lwz r5,260(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 260);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,252
	ctx.r5.s64 = r30.s64 + 252;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,276(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 276);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179b38
	sub_82179B38(ctx, base);
	// addi r27,r31,432
	r27.s64 = r31.s64 + 432;
	// lwz r5,288(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 288);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,280
	ctx.r5.s64 = r30.s64 + 280;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// lbz r11,304(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 304);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// rlwinm r4,r10,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// addi r27,r31,484
	r27.s64 = r31.s64 + 484;
	// lwz r5,316(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 316);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// addi r5,r30,308
	ctx.r5.s64 = r30.s64 + 308;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,332(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 332);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,536
	r27.s64 = r31.s64 + 536;
	// lwz r5,344(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 344);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,336
	ctx.r5.s64 = r30.s64 + 336;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,360(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 360);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,588
	r27.s64 = r31.s64 + 588;
	// lwz r5,372(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 372);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,364
	ctx.r5.s64 = r30.s64 + 364;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,388(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 388);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,640
	r27.s64 = r31.s64 + 640;
	// lwz r5,400(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 400);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,392
	ctx.r5.s64 = r30.s64 + 392;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,416(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 416);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,692
	r27.s64 = r31.s64 + 692;
	// lwz r5,428(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 428);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,420
	ctx.r5.s64 = r30.s64 + 420;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,444(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 444);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,744
	r27.s64 = r31.s64 + 744;
	// lwz r5,456(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 456);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,448
	ctx.r5.s64 = r30.s64 + 448;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,472(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 472);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,796
	r27.s64 = r31.s64 + 796;
	// lwz r5,492(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 492);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,484
	ctx.r5.s64 = r30.s64 + 484;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,508(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 508);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,848
	r27.s64 = r31.s64 + 848;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,528(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 528);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,520
	ctx.r5.s64 = r30.s64 + 520;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,544(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 544);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,900
	r27.s64 = r31.s64 + 900;
	// lwz r5,556(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 556);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,548
	ctx.r5.s64 = r30.s64 + 548;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lwz r11,572(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 572);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,12(r27)
	PPC_STORE_U32(r27.u32 + 12, r11.u32);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,952
	r27.s64 = r31.s64 + 952;
	// lwz r5,600(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 600);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,592
	ctx.r5.s64 = r30.s64 + 592;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lwz r11,616(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 616);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,12(r27)
	PPC_STORE_U32(r27.u32 + 12, r11.u32);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r4,-30232(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + -30232);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x8215321c
	if (cr6.getEQ()) goto loc_8215321C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821519f0
	sub_821519F0(ctx, base);
loc_8215321C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82153228"))) PPC_WEAK_FUNC(sub_82153228);
PPC_FUNC_IMPL(__imp__sub_82153228) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r3,1
	ctx.r3.s64 = 65536;
	// ori r3,r3,15368
	ctx.r3.u64 = ctx.r3.u64 | 15368;
	// bl 0x8209d088
	sub_8209D088(ctx, base);
	// li r27,0
	r27.s64 = 0;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82153298
	if (cr6.getEQ()) goto loc_82153298;
	// li r11,64
	r11.s64 = 64;
	// addi r29,r3,8
	r29.s64 = ctx.r3.s64 + 8;
	// li r31,63
	r31.s64 = 63;
	// mr r30,r29
	r30.u64 = r29.u64;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_82153260:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82151d40
	sub_82151D40(ctx, base);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r30,r30,1264
	r30.s64 = r30.s64 + 1264;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x82153260
	if (!cr6.getLT()) goto loc_82153260;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lis r10,1
	ctx.r10.s64 = 65536;
	// addi r31,r11,-30232
	r31.s64 = r11.s64 + -30232;
	// mr r11,r29
	r11.u64 = r29.u64;
	// mr r29,r27
	r29.u64 = r27.u64;
	// ori r28,r10,15360
	r28.u64 = ctx.r10.u64 | 15360;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x821532bc
	goto loc_821532BC;
loc_82153298:
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lis r10,1
	ctx.r10.s64 = 65536;
	// addi r31,r11,-30232
	r31.s64 = r11.s64 + -30232;
	// mr r11,r27
	r11.u64 = r27.u64;
	// mr r29,r27
	r29.u64 = r27.u64;
	// ori r28,r10,15360
	r28.u64 = ctx.r10.u64 | 15360;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x821532bc
	goto loc_821532BC;
loc_821532B8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
loc_821532BC:
	// add r30,r29,r11
	r30.u64 = r29.u64 + r11.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x821532d4
	if (!cr6.getEQ()) goto loc_821532D4;
	// mr r11,r27
	r11.u64 = r27.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_821532D4:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x821532e8
	if (!cr6.getEQ()) goto loc_821532E8;
	// mr r11,r27
	r11.u64 = r27.u64;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
loc_821532E8:
	// lwz r3,16(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x821532fc
	if (cr6.getLT()) goto loc_821532FC;
	// bl 0x823b3838
	sub_823B3838(ctx, base);
	// stw r27,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r27.u32);
loc_821532FC:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821645f0
	sub_821645F0(ctx, base);
	// addi r29,r29,1264
	r29.s64 = r29.s64 + 1264;
	// cmpw cr6,r29,r28
	cr6.compare<int32_t>(r29.s32, r28.s32, xer);
	// blt cr6,0x821532b8
	if (cr6.getLT()) goto loc_821532B8;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82153318"))) PPC_WEAK_FUNC(sub_82153318);
PPC_FUNC_IMPL(__imp__sub_82153318) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r24,r4
	r24.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// rlwinm r11,r24,0,30,30
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821533bc
	if (cr6.getEQ()) goto loc_821533BC;
	// lwz r11,-8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -8);
	// addi r25,r31,-8
	r25.s64 = r31.s64 + -8;
	// mulli r10,r11,1264
	ctx.r10.s64 = r11.s64 * 1264;
	// addi r30,r11,-1
	r30.s64 = r11.s64 + -1;
	// add r31,r10,r31
	r31.u64 = ctx.r10.u64 + r31.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x8215339c
	if (cr6.getLT()) goto loc_8215339C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r11,-29976
	r29.s64 = r11.s64 + -29976;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r11,-30724
	r28.s64 = r11.s64 + -30724;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r27,r11,-30724
	r27.s64 = r11.s64 + -30724;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r26,r11,-29744
	r26.s64 = r11.s64 + -29744;
loc_82153374:
	// addi r31,r31,-1264
	r31.s64 = r31.s64 + -1264;
	// addi r3,r31,244
	ctx.r3.s64 = r31.s64 + 244;
	// stw r26,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r26.u32);
	// bl 0x821518c0
	sub_821518C0(ctx, base);
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// stw r27,228(r31)
	PPC_STORE_U32(r31.u32 + 228, r27.u32);
	// stw r28,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r28.u32);
	// stw r29,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r29.u32);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bge cr6,0x82153374
	if (!cr6.getLT()) goto loc_82153374;
loc_8215339C:
	// clrlwi r11,r24,31
	r11.u64 = r24.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821533b0
	if (cr6.getEQ()) goto loc_821533B0;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
loc_821533B0:
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_821533BC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82151e08
	sub_82151E08(ctx, base);
	// clrlwi r11,r24,31
	r11.u64 = r24.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821533d8
	if (cr6.getEQ()) goto loc_821533D8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
loc_821533D8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_821533E8"))) PPC_WEAK_FUNC(sub_821533E8);
PPC_FUNC_IMPL(__imp__sub_821533E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r30,-32254
	r30.s64 = -2113798144;
	// lwz r10,52(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// lwz r11,-26072(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -26072);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8215343c
	if (cr6.getEQ()) goto loc_8215343C;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r4,r31,48
	ctx.r4.s64 = r31.s64 + 48;
	// addi r3,r11,-30192
	ctx.r3.s64 = r11.s64 + -30192;
	// bl 0x8216b620
	sub_8216B620(ctx, base);
	// lwz r11,-26072(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -26072);
	// li r10,4
	ctx.r10.s64 = 4;
	// addi r3,r31,244
	ctx.r3.s64 = r31.s64 + 244;
	// stw r11,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r11.u32);
	// stw r10,240(r31)
	PPC_STORE_U32(r31.u32 + 240, ctx.r10.u32);
	// bl 0x82178e68
	sub_82178E68(ctx, base);
loc_8215343C:
	// addi r30,r31,244
	r30.s64 = r31.s64 + 244;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82178e68
	sub_82178E68(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82177d28
	sub_82177D28(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82164568
	sub_82164568(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82153470"))) PPC_WEAK_FUNC(sub_82153470);
PPC_FUNC_IMPL(__imp__sub_82153470) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f30.u64);
	// stfd f31,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x82152470
	sub_82152470(ctx, base);
	// lwz r11,80(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 80);
	// li r31,0
	r31.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153530
	if (!cr6.getEQ()) goto loc_82153530;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwz r11,68(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 68);
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// cmplwi cr6,r11,1000
	cr6.compare<uint32_t>(r11.u32, 1000, xer);
	// blt cr6,0x82153530
	if (cr6.getLT()) goto loc_82153530;
	// lwz r11,16(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82153530
	if (cr6.getLT()) goto loc_82153530;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82153510
	if (cr6.getEQ()) goto loc_82153510;
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// addi r11,r11,-29824
	r11.s64 = r11.s64 + -29824;
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r10,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r10.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// stb r10,40(r3)
	PPC_STORE_U8(ctx.r3.u32 + 40, ctx.r10.u8);
	// b 0x82153514
	goto loc_82153514;
loc_82153510:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82153514:
	// li r5,-1
	ctx.r5.s64 = -1;
	// stw r3,80(r30)
	PPC_STORE_U32(r30.u32 + 80, ctx.r3.u32);
	// li r4,300
	ctx.r4.s64 = 300;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// lwz r4,16(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// lwz r3,80(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 80);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_82153530:
	// lbz r11,132(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// bne cr6,0x82153564
	if (!cr6.getEQ()) goto loc_82153564;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821535d0
	if (cr6.getEQ()) goto loc_821535D0;
	// bl 0x823b34e8
	sub_823B34E8(ctx, base);
	// lfs f0,188(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 188);
	f0.f64 = double(temp.f32);
	// fadds f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 + f0.f64));
	// stfs f0,188(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 188, temp.u32);
	// b 0x821535d0
	goto loc_821535D0;
loc_82153564:
	// lwz r11,176(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 176);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82153594
	if (!cr6.getGT()) goto loc_82153594;
	// lfs f30,180(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	f30.f64 = double(temp.f32);
	// fcmpu cr6,f30,f31
	cr6.compare(f30.f64, f31.f64);
	// blt cr6,0x82153594
	if (cr6.getLT()) goto loc_82153594;
	// bl 0x823b34e8
	sub_823B34E8(ctx, base);
	// fsubs f0,f30,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f30.f64 - ctx.f1.f64));
	// stfs f0,180(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 180, temp.u32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x82153594
	if (!cr6.getLT()) goto loc_82153594;
	// stw r31,176(r30)
	PPC_STORE_U32(r30.u32 + 176, r31.u32);
loc_82153594:
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x821535c0
	if (!cr6.getEQ()) goto loc_821535C0;
	// lwz r11,176(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 176);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x821535c0
	if (!cr6.getEQ()) goto loc_821535C0;
	// bl 0x823b34e8
	sub_823B34E8(ctx, base);
	// lfs f0,184(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 184);
	f0.f64 = double(temp.f32);
	// fadds f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 + f0.f64));
	// stfs f0,184(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 184, temp.u32);
	// b 0x821535d0
	goto loc_821535D0;
loc_821535C0:
	// lfs f0,184(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 184);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// beq cr6,0x821535d0
	if (cr6.getEQ()) goto loc_821535D0;
	// stfs f31,184(r30)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r30.u32 + 184, temp.u32);
loc_821535D0:
	// lwz r3,16(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8215369c
	if (cr6.getLT()) goto loc_8215369C;
	// li r5,10
	ctx.r5.s64 = 10;
	// li r4,45
	ctx.r4.s64 = 45;
	// bl 0x823b44d0
	sub_823B44D0(ctx, base);
	// stfs f1,84(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r30.u32 + 84, temp.u32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x8215369c
	if (cr6.getGT()) goto loc_8215369C;
	// bl 0x823b3528
	sub_823B3528(ctx, base);
	// lwz r11,16(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// fmr f30,f31
	ctx.fpscr.disableFlushMode();
	f30.f64 = f31.f64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// mr r29,r31
	r29.u64 = r31.u64;
	// bl 0x823b3ec0
	sub_823B3EC0(ctx, base);
	// lwz r31,0(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8215366c
	if (cr6.getEQ()) goto loc_8215366C;
loc_8215361C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7320
	sub_823B7320(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82153658
	if (cr6.getEQ()) goto loc_82153658;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// subf r11,r11,r28
	r11.s64 = r28.s64 - r11.s64;
	// cmpwi cr6,r29,10
	cr6.compare<int32_t>(r29.s32, 10, xer);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fadds f30,f0,f30
	f30.f64 = double(float(f0.f64 + f30.f64));
	// bge cr6,0x82153664
	if (!cr6.getLT()) goto loc_82153664;
loc_82153658:
	// lwz r31,24(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8215361c
	if (!cr6.getEQ()) goto loc_8215361C;
loc_82153664:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x82153680
	if (!cr6.getEQ()) goto loc_82153680;
loc_8215366C:
	// stfs f31,84(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r30.u32 + 84, temp.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_82153680:
	// extsw r11,r29
	r11.s64 = r29.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fdivs f0,f30,f0
	f0.f64 = double(float(f30.f64 / f0.f64));
	// stfs f0,84(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 84, temp.u32);
loc_8215369C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_821536B0"))) PPC_WEAK_FUNC(sub_821536B0);
PPC_FUNC_IMPL(__imp__sub_821536B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lwz r10,52(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 52);
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8215389c
	if (cr6.getEQ()) goto loc_8215389C;
	// lbz r11,132(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215389c
	if (!cr6.getEQ()) goto loc_8215389C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r30,1
	r30.s64 = 1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82153788
	if (cr6.getEQ()) goto loc_82153788;
loc_82153710:
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmplw cr6,r4,r28
	cr6.compare<uint32_t>(ctx.r4.u32, r28.u32, xer);
	// beq cr6,0x8215376c
	if (cr6.getEQ()) goto loc_8215376C;
	// lbz r11,132(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215376c
	if (cr6.getEQ()) goto loc_8215376C;
	// addi r3,r28,312
	ctx.r3.s64 = r28.s64 + 312;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153784
	if (cr6.getEQ()) goto loc_82153784;
	// addi r3,r31,312
	ctx.r3.s64 = r31.s64 + 312;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153784
	if (cr6.getEQ()) goto loc_82153784;
loc_8215376C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x82153710
	if (!cr6.getEQ()) goto loc_82153710;
	// b 0x82153788
	goto loc_82153788;
loc_82153784:
	// li r30,0
	r30.s64 = 0;
loc_82153788:
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215389c
	if (cr6.getEQ()) goto loc_8215389C;
	// li r11,1
	r11.s64 = 1;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r11,132(r28)
	PPC_STORE_U8(r28.u32 + 132, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215389c
	if (cr6.getEQ()) goto loc_8215389C;
loc_821537B4:
	// addi r3,r11,520
	ctx.r3.s64 = r11.s64 + 520;
	// mr r30,r11
	r30.u64 = r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lbz r11,132(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 132);
	// extsb r29,r3
	r29.s64 = ctx.r3.s8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153888
	if (cr6.getEQ()) goto loc_82153888;
	// lbz r11,134(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 134);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153888
	if (!cr6.getEQ()) goto loc_82153888;
	// lbz r11,217(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 217);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153888
	if (!cr6.getEQ()) goto loc_82153888;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// blt cr6,0x82153888
	if (cr6.getLT()) goto loc_82153888;
	// li r3,72
	ctx.r3.s64 = 72;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82153820
	if (cr6.getEQ()) goto loc_82153820;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x82171cc0
	sub_82171CC0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x82153824
	goto loc_82153824;
loc_82153820:
	// li r31,0
	r31.s64 = 0;
loc_82153824:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,16(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// li r3,52
	ctx.r3.s64 = 52;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82153868
	if (cr6.getEQ()) goto loc_82153868;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lwz r6,220(r28)
	ctx.r6.u64 = PPC_LOAD_U32(r28.u32 + 220);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82171600
	sub_82171600(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8215386c
	goto loc_8215386C;
loc_82153868:
	// li r31,0
	r31.s64 = 0;
loc_8215386C:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,16(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_82153888:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821537b4
	if (!cr6.getEQ()) goto loc_821537B4;
loc_8215389C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
}

