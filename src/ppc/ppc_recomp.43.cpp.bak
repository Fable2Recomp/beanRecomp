#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_823F0600"))) PPC_WEAK_FUNC(sub_823F0600);
PPC_FUNC_IMPL(__imp__sub_823F0600) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
loc_823F060C:
	// lbz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// beq 0x823f062c
	if (cr0.getEQ()) goto loc_823F062C;
	// addic. r5,r5,-1
	xer.ca = ctx.r5.u32 > 0;
	ctx.r5.s64 = ctx.r5.s64 + -1;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// bne 0x823f060c
	if (!cr0.getEQ()) goto loc_823F060C;
loc_823F062C:
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// addic. r10,r5,-1
	xer.ca = ctx.r5.u32 > 0;
	ctx.r10.s64 = ctx.r5.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beqlr 
	if (cr0.getEQ()) return;
	// li r9,0
	ctx.r9.s64 = 0;
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beqlr 
	if (cr0.getEQ()) return;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_823F064C:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x823f064c
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_823F064C;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0660"))) PPC_WEAK_FUNC(sub_823F0660);
PPC_FUNC_IMPL(__imp__sub_823F0660) {
	PPC_FUNC_PROLOGUE();
	// li r5,10
	ctx.r5.s64 = 10;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x823eedc8
	sub_823EEDC8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F0670"))) PPC_WEAK_FUNC(sub_823F0670);
PPC_FUNC_IMPL(__imp__sub_823F0670) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	uint32_t ea{};
	// lbz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// cmpw r5,r4
	cr0.compare<int32_t>(ctx.r5.s32, ctx.r4.s32, xer);
	// beq cr6,0x823f06b4
	if (cr6.getEQ()) goto loc_823F06B4;
	// li r3,0
	ctx.r3.s64 = 0;
	// beq 0x823f06a0
	if (cr0.getEQ()) goto loc_823F06A0;
loc_823F068C:
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq cr6,0x823f06c4
	if (cr6.getEQ()) goto loc_823F06C4;
	// lbzu r5,1(r9)
	ea = 1 + ctx.r9.u32;
	ctx.r5.u64 = PPC_LOAD_U8(ea);
	ctx.r9.u32 = ea;
	// cmpw r4,r5
	cr0.compare<int32_t>(ctx.r4.s32, ctx.r5.s32, xer);
	// bne 0x823f068c
	if (!cr0.getEQ()) goto loc_823F068C;
loc_823F06A0:
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// lbzu r5,1(r9)
	ea = 1 + ctx.r9.u32;
	ctx.r5.u64 = PPC_LOAD_U8(ea);
	ctx.r9.u32 = ea;
	// cmpw r4,r5
	cr0.compare<int32_t>(ctx.r4.s32, ctx.r5.s32, xer);
	// beq 0x823f06a0
	if (cr0.getEQ()) goto loc_823F06A0;
	// b 0x823f068c
	goto loc_823F068C;
loc_823F06B4:
	// beq 0x823f06c4
	if (cr0.getEQ()) goto loc_823F06C4;
	// lbzu r5,1(r3)
	ea = 1 + ctx.r3.u32;
	ctx.r5.u64 = PPC_LOAD_U8(ea);
	ctx.r3.u32 = ea;
	// cmpwi r5,0
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// b 0x823f06b4
	goto loc_823F06B4;
loc_823F06C4:
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F06C8"))) PPC_WEAK_FUNC(sub_823F06C8);
PPC_FUNC_IMPL(__imp__sub_823F06C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x823f0750
	if (cr6.getEQ()) goto loc_823F0750;
	// mr r11,r29
	r11.u64 = r29.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F06E8:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f06e8
	if (!cr6.getEQ()) goto loc_823F06E8;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// addi r30,r11,1
	r30.s64 = r11.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823ed2b0
	sub_823ED2B0(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x823f0750
	if (cr0.getEQ()) goto loc_823F0750;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ee540
	sub_823EE540(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f0748
	if (cr0.getEQ()) goto loc_823F0748;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f3cf0
	sub_823F3CF0(ctx, base);
loc_823F0748:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x823f0754
	goto loc_823F0754;
loc_823F0750:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F0754:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F0760"))) PPC_WEAK_FUNC(sub_823F0760);
PPC_FUNC_IMPL(__imp__sub_823F0760) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x823f0790
	if (cr6.getEQ()) goto loc_823F0790;
	// lbz r11,0(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// extsb. r11,r11
	r11.s64 = r11.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f0790
	if (cr0.getEQ()) goto loc_823F0790;
	// cmpwi cr6,r11,67
	cr6.compare<int32_t>(r11.s32, 67, xer);
	// bne cr6,0x823f0788
	if (!cr6.getEQ()) goto loc_823F0788;
	// lbz r11,1(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 1);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823f0790
	if (cr6.getEQ()) goto loc_823F0790;
loc_823F0788:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_823F0790:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r3,r11,-21408
	ctx.r3.s64 = r11.s64 + -21408;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F07A0"))) PPC_WEAK_FUNC(sub_823F07A0);
PPC_FUNC_IMPL(__imp__sub_823F07A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr1{};
	PPCCRRegister cr5{};
	PPCCRRegister cr6{};
	PPCCRRegister cr7{};
	uint32_t ea{};
	// addi r9,r3,-1
	ctx.r9.s64 = ctx.r3.s64 + -1;
	// addi r4,r4,-1
	ctx.r4.s64 = ctx.r4.s64 + -1;
loc_823F07A8:
	// lbzu r6,1(r4)
	ea = 1 + ctx.r4.u32;
	ctx.r6.u64 = PPC_LOAD_U8(ea);
	ctx.r4.u32 = ea;
	// lbzu r5,1(r9)
	ea = 1 + ctx.r9.u32;
	ctx.r5.u64 = PPC_LOAD_U8(ea);
	ctx.r9.u32 = ea;
	// cmpwi cr7,r6,0
	cr7.compare<int32_t>(ctx.r6.s32, 0, xer);
	// subf. r3,r6,r5
	ctx.r3.s64 = ctx.r5.s64 - ctx.r6.s64;
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr7,0x823f07f0
	if (cr7.getEQ()) goto loc_823F07F0;
	// beq 0x823f07a8
	if (cr0.getEQ()) goto loc_823F07A8;
	// cmpwi cr5,r6,65
	cr5.compare<int32_t>(ctx.r6.s32, 65, xer);
	// cmpwi cr6,r6,90
	cr6.compare<int32_t>(ctx.r6.s32, 90, xer);
	// blt cr5,0x823f07d4
	if (cr5.getLT()) goto loc_823F07D4;
	// bgt cr6,0x823f07d4
	if (cr6.getGT()) goto loc_823F07D4;
	// ori r6,r6,32
	ctx.r6.u64 = ctx.r6.u64 | 32;
loc_823F07D4:
	// cmpwi r5,65
	cr0.compare<int32_t>(ctx.r5.s32, 65, xer);
	// cmpwi cr1,r5,90
	cr1.compare<int32_t>(ctx.r5.s32, 90, xer);
	// blt 0x823f07e8
	if (cr0.getLT()) goto loc_823F07E8;
	// bgt cr1,0x823f07e8
	if (cr1.getGT()) goto loc_823F07E8;
	// ori r5,r5,32
	ctx.r5.u64 = ctx.r5.u64 | 32;
loc_823F07E8:
	// subf. r3,r6,r5
	ctx.r3.s64 = ctx.r5.s64 - ctx.r6.s64;
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f07a8
	if (cr0.getEQ()) goto loc_823F07A8;
loc_823F07F0:
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F07F8"))) PPC_WEAK_FUNC(sub_823F07F8);
PPC_FUNC_IMPL(__imp__sub_823F07F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,-19680
	r11.s64 = r11.s64 + -19680;
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// lhzx r11,r10,r11
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// andi. r3,r11,259
	ctx.r3.u64 = r11.u64 & 259;
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0818"))) PPC_WEAK_FUNC(sub_823F0818);
PPC_FUNC_IMPL(__imp__sub_823F0818) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,-19680
	r11.s64 = r11.s64 + -19680;
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// lhzx r11,r10,r11
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// rlwinm r3,r11,0,29,29
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0838"))) PPC_WEAK_FUNC(sub_823F0838);
PPC_FUNC_IMPL(__imp__sub_823F0838) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,-19680
	r11.s64 = r11.s64 + -19680;
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// lhzx r11,r10,r11
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// rlwinm r3,r11,0,24,24
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0858"))) PPC_WEAK_FUNC(sub_823F0858);
PPC_FUNC_IMPL(__imp__sub_823F0858) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,-19680
	r11.s64 = r11.s64 + -19680;
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// lhzx r11,r10,r11
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// rlwinm r3,r11,0,28,28
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0878"))) PPC_WEAK_FUNC(sub_823F0878);
PPC_FUNC_IMPL(__imp__sub_823F0878) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,-19680
	r11.s64 = r11.s64 + -19680;
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// lhzx r11,r10,r11
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// andi. r3,r11,263
	ctx.r3.u64 = r11.u64 & 263;
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0898"))) PPC_WEAK_FUNC(sub_823F0898);
PPC_FUNC_IMPL(__imp__sub_823F0898) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f08ec
	if (!cr6.getEQ()) goto loc_823F08EC;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f1,2752(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// b 0x823f0980
	goto loc_823F0980;
loc_823F08EC:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r30,r11,-19456
	r30.s64 = r11.s64 + -19456;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
loc_823F08F8:
	// lwz r10,172(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 172);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// ble cr6,0x823f091c
	if (!cr6.getGT()) goto loc_823F091C;
	// li r4,8
	ctx.r4.s64 = 8;
	// lbz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x823f7db8
	sub_823F7DB8(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// b 0x823f0930
	goto loc_823F0930;
loc_823F091C:
	// lbz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// lwz r9,200(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// rotlwi r10,r10,1
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// lhzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// rlwinm r3,r10,0,28,28
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x8;
loc_823F0930:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x823f0940
	if (cr6.getEQ()) goto loc_823F0940;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// b 0x823f08f8
	goto loc_823F08F8;
loc_823F0940:
	// mr r11,r31
	r11.u64 = r31.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F0948:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f0948
	if (!cr6.getEQ()) goto loc_823F0948;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// li r7,0
	ctx.r7.s64 = 0;
	// rotlwi r5,r11,0
	ctx.r5.u64 = __builtin_rotateleft32(r11.u32, 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823f8dc8
	sub_823F8DC8(ctx, base);
	// lfd f1,16(r3)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r3.u32 + 16);
loc_823F0980:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0998"))) PPC_WEAK_FUNC(sub_823F0998);
PPC_FUNC_IMPL(__imp__sub_823F0998) {
	PPC_FUNC_PROLOGUE();
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x823f0898
	sub_823F0898(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F09A0"))) PPC_WEAK_FUNC(sub_823F09A0);
PPC_FUNC_IMPL(__imp__sub_823F09A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// addi r11,r3,-97
	r11.s64 = ctx.r3.s64 + -97;
	// cmplwi cr6,r11,25
	cr6.compare<uint32_t>(r11.u32, 25, xer);
	// bgtlr cr6
	if (cr6.getGT()) return;
	// addi r3,r3,-32
	ctx.r3.s64 = ctx.r3.s64 + -32;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F09B8"))) PPC_WEAK_FUNC(sub_823F09B8);
PPC_FUNC_IMPL(__imp__sub_823F09B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfd f1,16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// stfd f2,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.f2.u64);
	// lfd f0,2752(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// stfd f0,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, f0.u64);
	// lwz r10,24(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 24);
	// lwz r11,16(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 16);
	// lwz r9,20(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// rlwimi r10,r11,0,1,31
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 0) & 0x7FFFFFFF) | (ctx.r10.u64 & 0xFFFFFFFF80000000);
	// stw r9,-12(r1)
	PPC_STORE_U32(ctx.r1.u32 + -12, ctx.r9.u32);
	// stw r10,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, ctx.r10.u32);
	// lfd f1,-16(r1)
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F09F0"))) PPC_WEAK_FUNC(sub_823F09F0);
PPC_FUNC_IMPL(__imp__sub_823F09F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	// stfd f1,16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfd f0,2752(r10)
	f0.u64 = PPC_LOAD_U64(ctx.r10.u32 + 2752);
	// lwz r11,16(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 16);
	// stfd f0,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, f0.u64);
	// not r9,r11
	ctx.r9.u64 = ~r11.u64;
	// rlwimi r9,r11,0,1,31
	ctx.r9.u64 = (__builtin_rotateleft32(r11.u32, 0) & 0x7FFFFFFF) | (ctx.r9.u64 & 0xFFFFFFFF80000000);
	// stw r9,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, ctx.r9.u32);
	// lwz r10,20(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// stw r10,-12(r1)
	PPC_STORE_U32(ctx.r1.u32 + -12, ctx.r10.u32);
	// lfd f1,-16(r1)
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0A20"))) PPC_WEAK_FUNC(sub_823F0A20);
PPC_FUNC_IMPL(__imp__sub_823F0A20) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// stfd f1,16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// lhz r11,16(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 16);
	// rlwinm r11,r11,0,17,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x7FF0;
	// addi r11,r11,-32752
	r11.s64 = r11.s64 + -32752;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0A40"))) PPC_WEAK_FUNC(sub_823F0A40);
PPC_FUNC_IMPL(__imp__sub_823F0A40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// stfd f1,16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// lhz r11,16(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 16);
	// rlwinm r11,r11,0,17,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x7FF8;
	// cmplwi cr6,r11,32752
	cr6.compare<uint32_t>(r11.u32, 32752, xer);
	// bne cr6,0x823f0a6c
	if (!cr6.getEQ()) goto loc_823F0A6C;
	// lwz r10,16(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 16);
	// clrlwi. r10,r10,13
	ctx.r10.u64 = ctx.r10.u32 & 0x7FFFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823f0a74
	if (!cr0.getEQ()) goto loc_823F0A74;
	// lwz r10,20(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x823f0a74
	if (!cr6.getEQ()) goto loc_823F0A74;
loc_823F0A6C:
	// cmplwi cr6,r11,32760
	cr6.compare<uint32_t>(r11.u32, 32760, xer);
	// bne cr6,0x823f0a7c
	if (!cr6.getEQ()) goto loc_823F0A7C;
loc_823F0A74:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
loc_823F0A7C:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0A88"))) PPC_WEAK_FUNC(sub_823F0A88);
PPC_FUNC_IMPL(__imp__sub_823F0A88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stfd f1,112(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.f1.u64);
	// lhz r11,112(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 112);
	// rlwinm r10,r11,0,17,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x7FF0;
	// cmplwi cr6,r10,32752
	cr6.compare<uint32_t>(ctx.r10.u32, 32752, xer);
	// bne cr6,0x823f0ae0
	if (!cr6.getEQ()) goto loc_823F0AE0;
	// bl 0x823f7780
	sub_823F7780(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x823f0ad8
	if (cr6.getEQ()) goto loc_823F0AD8;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// beq cr6,0x823f0ad0
	if (cr6.getEQ()) goto loc_823F0AD0;
	// addi r11,r3,-3
	r11.s64 = ctx.r3.s64 + -3;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r3,r11,1
	ctx.r3.s64 = r11.s64 + 1;
	// b 0x823f0b4c
	goto loc_823F0B4C;
loc_823F0AD0:
	// li r3,4
	ctx.r3.s64 = 4;
	// b 0x823f0b4c
	goto loc_823F0B4C;
loc_823F0AD8:
	// li r3,512
	ctx.r3.s64 = 512;
	// b 0x823f0b4c
	goto loc_823F0B4C;
loc_823F0AE0:
	// rlwinm r11,r11,0,16,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x823f0b1c
	if (!cr6.getEQ()) goto loc_823F0B1C;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// clrlwi. r10,r10,12
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823f0b04
	if (!cr0.getEQ()) goto loc_823F0B04;
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x823f0b1c
	if (cr6.getEQ()) goto loc_823F0B1C;
loc_823F0B04:
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF0;
	// rlwinm r11,r11,0,27,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFF9F;
	// addi r3,r11,128
	ctx.r3.s64 = r11.s64 + 128;
	// b 0x823f0b4c
	goto loc_823F0B4C;
loc_823F0B1C:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// lfd f0,2752(r10)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r10.u32 + 2752);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bne cr6,0x823f0b40
	if (!cr6.getEQ()) goto loc_823F0B40;
	// rlwinm r11,r11,0,0,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFE0;
	// addi r3,r11,64
	ctx.r3.s64 = r11.s64 + 64;
	// b 0x823f0b4c
	goto loc_823F0B4C;
loc_823F0B40:
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// rlwinm r11,r11,0,28,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFF0F;
	// addi r3,r11,256
	ctx.r3.s64 = r11.s64 + 256;
loc_823F0B4C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0B60"))) PPC_WEAK_FUNC(sub_823F0B60);
PPC_FUNC_IMPL(__imp__sub_823F0B60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// fabs f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = ctx.f1.u64 & ~0x8000000000000000;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// stfd f13,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.f13.u64);
	// addi r11,r11,-21392
	r11.s64 = r11.s64 + -21392;
	// lfs f0,176(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 176);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x823f0b9c
	if (!cr6.getGT()) goto loc_823F0B9C;
	// lfd f12,48(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 48);
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// ble cr6,0x823f0b90
	if (!cr6.getGT()) goto loc_823F0B90;
	// lfd f0,8(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// b 0x823f0c2c
	goto loc_823F0C2C;
loc_823F0B90:
	// li r10,2
	ctx.r10.s64 = 2;
	// fdiv f13,f0,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = f0.f64 / ctx.f13.f64;
	// b 0x823f0ba0
	goto loc_823F0BA0;
loc_823F0B9C:
	// li r10,0
	ctx.r10.s64 = 0;
loc_823F0BA0:
	// lfd f12,24(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 24);
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// ble cr6,0x823f0bc0
	if (!cr6.getGT()) goto loc_823F0BC0;
	// lfd f12,40(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 40);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// fadd f11,f12,f13
	ctx.f11.f64 = ctx.f12.f64 + ctx.f13.f64;
	// fmsub f0,f12,f13,f0
	f0.f64 = ctx.f12.f64 * ctx.f13.f64 - f0.f64;
	// fdiv f13,f0,f11
	ctx.f13.f64 = f0.f64 / ctx.f11.f64;
loc_823F0BC0:
	// fmul f0,f13,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f13.f64 * ctx.f13.f64;
	// lfd f11,112(r11)
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 112);
	// lfd f12,80(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 80);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// fadd f10,f11,f0
	ctx.f10.f64 = ctx.f11.f64 + f0.f64;
	// lfd f11,72(r11)
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 72);
	// fmadd f11,f12,f0,f11
	ctx.f11.f64 = ctx.f12.f64 * f0.f64 + ctx.f11.f64;
	// lfd f12,104(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 104);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,64(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 64);
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,96(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 96);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,56(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 56);
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,88(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 88);
	// fmadd f12,f10,f0,f12
	ctx.f12.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// fmul f0,f11,f0
	f0.f64 = ctx.f11.f64 * f0.f64;
	// fmul f0,f0,f13
	f0.f64 = f0.f64 * ctx.f13.f64;
	// fdiv f0,f0,f12
	f0.f64 = f0.f64 / ctx.f12.f64;
	// fadd f0,f0,f13
	f0.f64 = f0.f64 + ctx.f13.f64;
	// ble cr6,0x823f0c1c
	if (!cr6.getGT()) goto loc_823F0C1C;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_823F0C1C:
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// lfdx f13,r10,r11
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r10.u32 + r11.u32);
	// fadd f0,f13,f0
	f0.f64 = ctx.f13.f64 + f0.f64;
loc_823F0C2C:
	// ld r11,-16(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// cmpdi cr6,r11,0
	cr6.compare<int64_t>(r11.s64, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// fneg f13,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = f0.u64 ^ 0x8000000000000000;
	// fsel f1,f1,f0,f13
	ctx.f1.f64 = ctx.f1.f64 >= 0.0 ? f0.f64 : ctx.f13.f64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0C48"))) PPC_WEAK_FUNC(sub_823F0C48);
PPC_FUNC_IMPL(__imp__sub_823F0C48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// stfd f1,16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// stfd f2,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.f2.u64);
	// addi r11,r11,-21392
	r11.s64 = r11.s64 + -21392;
	// lfs f0,168(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 168);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f2,f0
	cr6.compare(ctx.f2.f64, f0.f64);
	// bne cr6,0x823f0ca0
	if (!cr6.getEQ()) goto loc_823F0CA0;
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bne cr6,0x823f0c98
	if (!cr6.getEQ()) goto loc_823F0C98;
	// lwz r10,24(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 24);
	// rlwinm. r10,r10,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beqlr 
	if (cr0.getEQ()) return;
	// lwz r10,16(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 16);
	// rlwinm. r10,r10,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f0c90
	if (cr0.getEQ()) goto loc_823F0C90;
	// lfd f0,16(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 16);
	// fneg f1,f0
	ctx.f1.u64 = f0.u64 ^ 0x8000000000000000;
	// blr 
	return;
loc_823F0C90:
	// lfd f1,16(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(r11.u32 + 16);
	// blr 
	return;
loc_823F0C98:
	// lfd f0,8(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// b 0x823f0d58
	goto loc_823F0D58;
loc_823F0CA0:
	// fabs f12,f2
	ctx.fpscr.disableFlushMode();
	ctx.f12.u64 = ctx.f2.u64 & ~0x8000000000000000;
	// li r10,0
	ctx.r10.s64 = 0;
	// fabs f13,f1
	ctx.f13.u64 = ctx.f1.u64 & ~0x8000000000000000;
	// fmr f0,f12
	f0.f64 = ctx.f12.f64;
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x823f0cc4
	if (!cr6.getGT()) goto loc_823F0CC4;
	// fmr f0,f13
	f0.f64 = ctx.f13.f64;
	// li r10,2
	ctx.r10.s64 = 2;
	// fmr f13,f12
	ctx.f13.f64 = ctx.f12.f64;
loc_823F0CC4:
	// fdiv f13,f13,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = ctx.f13.f64 / f0.f64;
	// lfd f0,24(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 24);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x823f0cec
	if (!cr6.getGT()) goto loc_823F0CEC;
	// lfd f0,40(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 40);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lfs f12,176(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 176);
	ctx.f12.f64 = double(temp.f32);
	// fadd f11,f0,f13
	ctx.f11.f64 = f0.f64 + ctx.f13.f64;
	// fmsub f0,f0,f13,f12
	f0.f64 = f0.f64 * ctx.f13.f64 - ctx.f12.f64;
	// fdiv f13,f0,f11
	ctx.f13.f64 = f0.f64 / ctx.f11.f64;
loc_823F0CEC:
	// fmul f0,f13,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f13.f64 * ctx.f13.f64;
	// lfd f11,112(r11)
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 112);
	// lfd f12,80(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 80);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// fadd f10,f11,f0
	ctx.f10.f64 = ctx.f11.f64 + f0.f64;
	// lfd f11,72(r11)
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 72);
	// fmadd f11,f12,f0,f11
	ctx.f11.f64 = ctx.f12.f64 * f0.f64 + ctx.f11.f64;
	// lfd f12,104(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 104);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,64(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 64);
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,96(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 96);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,56(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 56);
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,88(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 88);
	// fmadd f12,f10,f0,f12
	ctx.f12.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// fmul f0,f11,f0
	f0.f64 = ctx.f11.f64 * f0.f64;
	// fmul f0,f0,f13
	f0.f64 = f0.f64 * ctx.f13.f64;
	// fdiv f0,f0,f12
	f0.f64 = f0.f64 / ctx.f12.f64;
	// fadd f0,f0,f13
	f0.f64 = f0.f64 + ctx.f13.f64;
	// ble cr6,0x823f0d48
	if (!cr6.getGT()) goto loc_823F0D48;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_823F0D48:
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r9,r11,128
	ctx.r9.s64 = r11.s64 + 128;
	// lfdx f13,r10,r9
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r10.u32 + ctx.r9.u32);
	// fadd f0,f13,f0
	f0.f64 = ctx.f13.f64 + f0.f64;
loc_823F0D58:
	// lfd f13,16(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(r11.u32 + 16);
	// lwz r11,16(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 16);
	// fsub f13,f13,f0
	ctx.f13.f64 = ctx.f13.f64 - f0.f64;
	// fsel f1,f2,f0,f13
	ctx.f1.f64 = ctx.f2.f64 >= 0.0 ? f0.f64 : ctx.f13.f64;
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beqlr 
	if (cr0.getEQ()) return;
	// fneg f1,f1
	ctx.f1.u64 = ctx.f1.u64 ^ 0x8000000000000000;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0D78"))) PPC_WEAK_FUNC(sub_823F0D78);
PPC_FUNC_IMPL(__imp__sub_823F0D78) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// fabs f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = ctx.f1.u64 & ~0x8000000000000000;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r11,r11,-21208
	r11.s64 = r11.s64 + -21208;
	// lfs f0,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x823f0db4
	if (!cr6.getGT()) goto loc_823F0DB4;
	// lfs f12,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// subfic r10,r4,1
	xer.ca = ctx.r4.u32 <= 1;
	ctx.r10.s64 = 1 - ctx.r4.s64;
	// fsub f13,f12,f13
	ctx.f13.f64 = ctx.f12.f64 - ctx.f13.f64;
	// lfs f11,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f11.f64 = double(temp.f32);
	// fmul f0,f13,f0
	f0.f64 = ctx.f13.f64 * f0.f64;
	// fsqrt f13,f0
	ctx.f13.f64 = sqrt(f0.f64);
	// fmul f13,f13,f11
	ctx.f13.f64 = ctx.f13.f64 * ctx.f11.f64;
	// fneg f13,f13
	ctx.f13.u64 = ctx.f13.u64 ^ 0x8000000000000000;
	// b 0x823f0dd0
	goto loc_823F0DD0;
loc_823F0DB4:
	// mr r10,r4
	ctx.r10.u64 = ctx.r4.u64;
	// fmul f0,f13,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f13.f64 * ctx.f13.f64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// bne cr6,0x823f0dd0
	if (!cr6.getEQ()) goto loc_823F0DD0;
	// lfs f12,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f1,f12
	cr6.compare(ctx.f1.f64, ctx.f12.f64);
	// beqlr cr6
	if (cr6.getEQ()) return;
loc_823F0DD0:
	// lfd f11,120(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 120);
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// fadd f10,f11,f0
	ctx.f10.f64 = ctx.f11.f64 + f0.f64;
	// lfd f12,80(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 80);
	// lfd f11,72(r11)
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 72);
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// fmadd f11,f12,f0,f11
	ctx.f11.f64 = ctx.f12.f64 * f0.f64 + ctx.f11.f64;
	// lfd f12,112(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 112);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,64(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 64);
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,104(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 104);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,56(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 56);
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,96(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 96);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,48(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 48);
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,88(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 88);
	// fmadd f12,f10,f0,f12
	ctx.f12.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// fmul f0,f11,f0
	f0.f64 = ctx.f11.f64 * f0.f64;
	// fmul f0,f0,f13
	f0.f64 = f0.f64 * ctx.f13.f64;
	// fdiv f0,f0,f12
	f0.f64 = f0.f64 / ctx.f12.f64;
	// fadd f0,f0,f13
	f0.f64 = f0.f64 + ctx.f13.f64;
	// bne cr6,0x823f0e50
	if (!cr6.getEQ()) goto loc_823F0E50;
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// lfdx f13,r10,r11
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r10.u32 + r11.u32);
	// fadd f0,f13,f0
	f0.f64 = ctx.f13.f64 + f0.f64;
	// fneg f13,f0
	ctx.f13.u64 = f0.u64 ^ 0x8000000000000000;
	// fsel f1,f1,f0,f13
	ctx.f1.f64 = ctx.f1.f64 >= 0.0 ? f0.f64 : ctx.f13.f64;
	// blr 
	return;
loc_823F0E50:
	// addi r9,r11,16
	ctx.r9.s64 = r11.s64 + 16;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// lfdx f13,r10,r9
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r10.u32 + ctx.r9.u32);
	// lfdx f12,r10,r11
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r10.u32 + r11.u32);
	// fsub f13,f13,f0
	ctx.f13.f64 = ctx.f13.f64 - f0.f64;
	// fadd f0,f12,f0
	f0.f64 = ctx.f12.f64 + f0.f64;
	// fsel f1,f1,f13,f0
	ctx.f1.f64 = ctx.f1.f64 >= 0.0 ? ctx.f13.f64 : f0.f64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0E70"))) PPC_WEAK_FUNC(sub_823F0E70);
PPC_FUNC_IMPL(__imp__sub_823F0E70) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// fabs f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = ctx.f1.u64 & ~0x8000000000000000;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r11,r11,-21208
	r11.s64 = r11.s64 + -21208;
	// lfs f0,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x823f0eac
	if (!cr6.getGT()) goto loc_823F0EAC;
	// lfs f12,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// li r10,1
	ctx.r10.s64 = 1;
	// fsub f13,f12,f13
	ctx.f13.f64 = ctx.f12.f64 - ctx.f13.f64;
	// lfs f11,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f11.f64 = double(temp.f32);
	// fmul f0,f13,f0
	f0.f64 = ctx.f13.f64 * f0.f64;
	// fsqrt f13,f0
	ctx.f13.f64 = sqrt(f0.f64);
	// fmul f13,f13,f11
	ctx.f13.f64 = ctx.f13.f64 * ctx.f11.f64;
	// fneg f13,f13
	ctx.f13.u64 = ctx.f13.u64 ^ 0x8000000000000000;
	// b 0x823f0ec0
	goto loc_823F0EC0;
loc_823F0EAC:
	// lfs f12,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// li r10,0
	ctx.r10.s64 = 0;
	// fmul f0,f13,f13
	f0.f64 = ctx.f13.f64 * ctx.f13.f64;
	// fcmpu cr6,f1,f12
	cr6.compare(ctx.f1.f64, ctx.f12.f64);
	// beqlr cr6
	if (cr6.getEQ()) return;
loc_823F0EC0:
	// lfd f11,120(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 120);
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// fadd f10,f11,f0
	ctx.f10.f64 = ctx.f11.f64 + f0.f64;
	// lfd f12,80(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 80);
	// lfd f11,72(r11)
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 72);
	// addi r9,r11,16
	ctx.r9.s64 = r11.s64 + 16;
	// fmadd f11,f12,f0,f11
	ctx.f11.f64 = ctx.f12.f64 * f0.f64 + ctx.f11.f64;
	// lfd f12,112(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 112);
	// lfdx f9,r10,r9
	ctx.f9.u64 = PPC_LOAD_U64(ctx.r10.u32 + ctx.r9.u32);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,64(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 64);
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,104(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 104);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,56(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 56);
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,96(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 96);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,48(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 48);
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,88(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 88);
	// fmadd f12,f10,f0,f12
	ctx.f12.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// fmul f0,f11,f0
	f0.f64 = ctx.f11.f64 * f0.f64;
	// fmul f0,f0,f13
	f0.f64 = f0.f64 * ctx.f13.f64;
	// fdiv f0,f0,f12
	f0.f64 = f0.f64 / ctx.f12.f64;
	// fadd f0,f0,f13
	f0.f64 = f0.f64 + ctx.f13.f64;
	// fadd f0,f0,f9
	f0.f64 = f0.f64 + ctx.f9.f64;
	// fneg f13,f0
	ctx.f13.u64 = f0.u64 ^ 0x8000000000000000;
	// fsel f1,f1,f0,f13
	ctx.f1.f64 = ctx.f1.f64 >= 0.0 ? f0.f64 : ctx.f13.f64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F0F38"))) PPC_WEAK_FUNC(sub_823F0F38);
PPC_FUNC_IMPL(__imp__sub_823F0F38) {
	PPC_FUNC_PROLOGUE();
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x823f0d78
	sub_823F0D78(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F0F40"))) PPC_WEAK_FUNC(sub_823F0F40);
PPC_FUNC_IMPL(__imp__sub_823F0F40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfd f1,16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// lfd f8,2728(r11)
	ctx.f8.u64 = PPC_LOAD_U64(r11.u32 + 2728);
	// fcmpu cr6,f1,f8
	cr6.compare(ctx.f1.f64, ctx.f8.f64);
	// bne cr6,0x823f0f60
	if (!cr6.getEQ()) goto loc_823F0F60;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f1,2752(r11)
	ctx.f1.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// blr 
	return;
loc_823F0F60:
	// lhz r11,16(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 16);
	// rlwinm r10,r11,0,17,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x7FF0;
	// cmplwi cr6,r10,32752
	cr6.compare<uint32_t>(ctx.r10.u32, 32752, xer);
	// bne cr6,0x823f0f90
	if (!cr6.getEQ()) goto loc_823F0F90;
	// lis r11,-32249
	r11.s64 = -2113470464;
	// lfd f0,9296(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 9296);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bgtlr cr6
	if (cr6.getGT()) return;
loc_823F0F80:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lfd f0,-19440(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + -19440);
loc_823F0F88:
	// fneg f1,f0
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = f0.u64 ^ 0x8000000000000000;
	// blr 
	return;
loc_823F0F90:
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfd f0,2752(r9)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r9.u32 + 2752);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bgt cr6,0x823f0fb4
	if (cr6.getGT()) goto loc_823F0FB4;
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bne cr6,0x823f0f80
	if (!cr6.getEQ()) goto loc_823F0F80;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lfd f0,-19448(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + -19448);
	// b 0x823f0f88
	goto loc_823F0F88;
loc_823F0FB4:
	// lis r9,-32249
	ctx.r9.s64 = -2113470464;
	// lfd f0,9288(r9)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r9.u32 + 9288);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x823f0fe4
	if (!cr6.getLT()) goto loc_823F0FE4;
	// lis r11,-32249
	r11.s64 = -2113470464;
	// lfd f0,9280(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 9280);
	// fmul f1,f1,f0
	ctx.f1.f64 = ctx.f1.f64 * f0.f64;
	// stfd f1,16(r1)
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// lhz r11,16(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 16);
	// rlwinm r10,r11,28,21,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0x7FF;
	// addi r10,r10,-1075
	ctx.r10.s64 = ctx.r10.s64 + -1075;
	// b 0x823f0fec
	goto loc_823F0FEC;
loc_823F0FE4:
	// rlwinm r10,r10,28,20,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 28) & 0xFFF;
	// addi r10,r10,-1022
	ctx.r10.s64 = ctx.r10.s64 + -1022;
loc_823F0FEC:
	// andi. r11,r11,32783
	r11.u64 = r11.u64 & 32783;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stfd f1,-16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.f1.u64);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// ori r11,r11,16352
	r11.u64 = r11.u64 | 16352;
	// sth r11,-16(r1)
	PPC_STORE_U16(ctx.r1.u32 + -16, r11.u16);
	// lis r11,-32249
	r11.s64 = -2113470464;
	// addi r11,r11,9160
	r11.s64 = r11.s64 + 9160;
	// lfd f13,0(r11)
	ctx.f13.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// lfd f0,-16(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// lfd f13,28168(r9)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r9.u32 + 28168);
	// ble cr6,0x823f1030
	if (!cr6.getGT()) goto loc_823F1030;
	// fsub f12,f0,f13
	ctx.f12.f64 = f0.f64 - ctx.f13.f64;
	// fadd f11,f0,f8
	ctx.f11.f64 = f0.f64 + ctx.f8.f64;
	// fsub f0,f12,f13
	f0.f64 = ctx.f12.f64 - ctx.f13.f64;
	// fmul f13,f11,f13
	ctx.f13.f64 = ctx.f11.f64 * ctx.f13.f64;
	// b 0x823f1040
	goto loc_823F1040;
loc_823F1030:
	// fsub f0,f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = f0.f64 - ctx.f13.f64;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// fadd f12,f0,f8
	ctx.f12.f64 = f0.f64 + ctx.f8.f64;
	// fmul f13,f12,f13
	ctx.f13.f64 = ctx.f12.f64 * ctx.f13.f64;
loc_823F1040:
	// extsw r9,r10
	ctx.r9.s64 = ctx.r10.s32;
	// fdiv f13,f0,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = f0.f64 / ctx.f13.f64;
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// lfd f10,8(r11)
	ctx.f10.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// std r9,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r9.u64);
	// lfd f11,9272(r10)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r10.u32 + 9272);
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// fmul f0,f13,f13
	f0.f64 = ctx.f13.f64 * ctx.f13.f64;
	// lfd f9,9264(r10)
	ctx.f9.u64 = PPC_LOAD_U64(ctx.r10.u32 + 9264);
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// fsub f7,f0,f9
	ctx.f7.f64 = f0.f64 - ctx.f9.f64;
	// lfd f9,9256(r10)
	ctx.f9.u64 = PPC_LOAD_U64(ctx.r10.u32 + 9256);
	// lfd f12,-16(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// fmul f6,f12,f9
	ctx.f6.f64 = ctx.f12.f64 * ctx.f9.f64;
	// lfd f9,40(r11)
	ctx.f9.u64 = PPC_LOAD_U64(r11.u32 + 40);
	// fnmsub f9,f0,f11,f9
	ctx.f9.f64 = -(f0.f64 * ctx.f11.f64 - ctx.f9.f64);
	// lfd f11,64(r11)
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 64);
	// lis r11,-32249
	r11.s64 = -2113470464;
	// fmadd f7,f7,f0,f11
	ctx.f7.f64 = ctx.f7.f64 * f0.f64 + ctx.f11.f64;
	// lfd f11,9248(r11)
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 9248);
	// lis r11,-32249
	r11.s64 = -2113470464;
	// fmsub f9,f9,f0,f11
	ctx.f9.f64 = ctx.f9.f64 * f0.f64 - ctx.f11.f64;
	// lfd f11,9240(r11)
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 9240);
	// fmsub f11,f7,f0,f11
	ctx.f11.f64 = ctx.f7.f64 * f0.f64 - ctx.f11.f64;
	// fmul f0,f9,f0
	f0.f64 = ctx.f9.f64 * f0.f64;
	// fdiv f0,f0,f11
	f0.f64 = f0.f64 / ctx.f11.f64;
	// fadd f0,f0,f8
	f0.f64 = f0.f64 + ctx.f8.f64;
	// fmsub f0,f0,f13,f6
	f0.f64 = f0.f64 * ctx.f13.f64 - ctx.f6.f64;
	// fmadd f1,f12,f10,f0
	ctx.f1.f64 = ctx.f12.f64 * ctx.f10.f64 + f0.f64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F10C0"))) PPC_WEAK_FUNC(sub_823F10C0);
PPC_FUNC_IMPL(__imp__sub_823F10C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823f0f40
	sub_823F0F40(ctx, base);
	// lis r11,-32249
	r11.s64 = -2113470464;
	// lfd f0,9184(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 9184);
	// fmul f1,f1,f0
	ctx.f1.f64 = ctx.f1.f64 * f0.f64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F10F0"))) PPC_WEAK_FUNC(sub_823F10F0);
PPC_FUNC_IMPL(__imp__sub_823F10F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr1{};
	uint32_t ea{};
	// lbz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// cmpwi r4,0
	cr0.compare<int32_t>(ctx.r4.s32, 0, xer);
	// beq 0x823f1114
	if (cr0.getEQ()) goto loc_823F1114;
loc_823F10FC:
	// cmpwi cr1,r6,0
	cr1.compare<int32_t>(ctx.r6.s32, 0, xer);
	// cmpw r6,r4
	cr0.compare<int32_t>(ctx.r6.s32, ctx.r4.s32, xer);
	// beq cr1,0x823f1124
	if (cr1.getEQ()) goto loc_823F1124;
	// beq 0x823f1128
	if (cr0.getEQ()) goto loc_823F1128;
	// lbzu r6,1(r3)
	ea = 1 + ctx.r3.u32;
	ctx.r6.u64 = PPC_LOAD_U8(ea);
	ctx.r3.u32 = ea;
	// b 0x823f10fc
	goto loc_823F10FC;
loc_823F1114:
	// cmpwi r6,0
	cr0.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq 0x823f1128
	if (cr0.getEQ()) goto loc_823F1128;
	// lbzu r6,1(r3)
	ea = 1 + ctx.r3.u32;
	ctx.r6.u64 = PPC_LOAD_U8(ea);
	ctx.r3.u32 = ea;
	// b 0x823f1114
	goto loc_823F1114;
loc_823F1124:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F1128:
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F1130"))) PPC_WEAK_FUNC(sub_823F1130);
PPC_FUNC_IMPL(__imp__sub_823F1130) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// clrlwi. r10,r3,30
	ctx.r10.u64 = ctx.r3.u32 & 0x3;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// beq 0x823f1168
	if (cr0.getEQ()) goto loc_823F1168;
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// bne cr6,0x823f114c
	if (!cr6.getEQ()) goto loc_823F114C;
	// li r11,768
	r11.s64 = 768;
	// b 0x823f1168
	goto loc_823F1168;
loc_823F114C:
	// cmplwi cr6,r10,2
	cr6.compare<uint32_t>(ctx.r10.u32, 2, xer);
	// bne cr6,0x823f115c
	if (!cr6.getEQ()) goto loc_823F115C;
	// li r11,512
	r11.s64 = 512;
	// b 0x823f1168
	goto loc_823F1168;
loc_823F115C:
	// cmplwi cr6,r10,3
	cr6.compare<uint32_t>(ctx.r10.u32, 3, xer);
	// bne cr6,0x823f1168
	if (!cr6.getEQ()) goto loc_823F1168;
	// li r11,256
	r11.s64 = 256;
loc_823F1168:
	// rlwinm. r10,r3,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f1174
	if (cr0.getEQ()) goto loc_823F1174;
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
loc_823F1174:
	// rlwinm. r10,r3,0,26,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f1180
	if (cr0.getEQ()) goto loc_823F1180;
	// ori r11,r11,2
	r11.u64 = r11.u64 | 2;
loc_823F1180:
	// rlwinm. r10,r3,0,25,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f118c
	if (cr0.getEQ()) goto loc_823F118C;
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
loc_823F118C:
	// rlwinm. r10,r3,0,27,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f1198
	if (cr0.getEQ()) goto loc_823F1198;
	// ori r11,r11,8
	r11.u64 = r11.u64 | 8;
loc_823F1198:
	// rlwinm. r10,r3,0,24,24
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f11a4
	if (cr0.getEQ()) goto loc_823F11A4;
	// ori r11,r11,16
	r11.u64 = r11.u64 | 16;
loc_823F11A4:
	// oris r3,r11,8
	ctx.r3.u64 = r11.u64 | 524288;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F11B0"))) PPC_WEAK_FUNC(sub_823F11B0);
PPC_FUNC_IMPL(__imp__sub_823F11B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// rlwinm r8,r4,0,22,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x300;
	// rlwinm r9,r4,0,24,21
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0xFFFFFFFFFFFFFCFF;
	// li r3,0
	ctx.r3.s64 = 0;
	// rlwinm. r11,r10,0,22,23
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x300;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f1204
	if (cr0.getEQ()) goto loc_823F1204;
	// cmplwi cr6,r11,768
	cr6.compare<uint32_t>(r11.u32, 768, xer);
	// bne cr6,0x823f11e8
	if (!cr6.getEQ()) goto loc_823F11E8;
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x823f1204
	goto loc_823F1204;
loc_823F11E8:
	// cmplwi cr6,r11,512
	cr6.compare<uint32_t>(r11.u32, 512, xer);
	// bne cr6,0x823f11f8
	if (!cr6.getEQ()) goto loc_823F11F8;
	// li r3,2
	ctx.r3.s64 = 2;
	// b 0x823f1204
	goto loc_823F1204;
loc_823F11F8:
	// cmplwi cr6,r11,256
	cr6.compare<uint32_t>(r11.u32, 256, xer);
	// bne cr6,0x823f1204
	if (!cr6.getEQ()) goto loc_823F1204;
	// li r3,3
	ctx.r3.s64 = 3;
loc_823F1204:
	// clrlwi. r11,r10,31
	r11.u64 = ctx.r10.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f1210
	if (cr0.getEQ()) goto loc_823F1210;
	// ori r3,r3,8
	ctx.r3.u64 = ctx.r3.u64 | 8;
loc_823F1210:
	// rlwinm. r11,r10,0,30,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f121c
	if (cr0.getEQ()) goto loc_823F121C;
	// ori r3,r3,32
	ctx.r3.u64 = ctx.r3.u64 | 32;
loc_823F121C:
	// rlwinm. r11,r10,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f1228
	if (cr0.getEQ()) goto loc_823F1228;
	// ori r3,r3,64
	ctx.r3.u64 = ctx.r3.u64 | 64;
loc_823F1228:
	// rlwinm. r11,r10,0,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f1234
	if (cr0.getEQ()) goto loc_823F1234;
	// ori r3,r3,16
	ctx.r3.u64 = ctx.r3.u64 | 16;
loc_823F1234:
	// rlwinm. r11,r10,0,27,27
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f1240
	if (cr0.getEQ()) goto loc_823F1240;
	// ori r3,r3,128
	ctx.r3.u64 = ctx.r3.u64 | 128;
loc_823F1240:
	// rlwinm. r10,r9,0,22,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x300;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// beq 0x823f1278
	if (cr0.getEQ()) goto loc_823F1278;
	// cmplwi cr6,r10,768
	cr6.compare<uint32_t>(ctx.r10.u32, 768, xer);
	// bne cr6,0x823f125c
	if (!cr6.getEQ()) goto loc_823F125C;
	// li r11,1
	r11.s64 = 1;
	// b 0x823f1278
	goto loc_823F1278;
loc_823F125C:
	// cmplwi cr6,r10,512
	cr6.compare<uint32_t>(ctx.r10.u32, 512, xer);
	// bne cr6,0x823f126c
	if (!cr6.getEQ()) goto loc_823F126C;
	// li r11,2
	r11.s64 = 2;
	// b 0x823f1278
	goto loc_823F1278;
loc_823F126C:
	// cmplwi cr6,r10,256
	cr6.compare<uint32_t>(ctx.r10.u32, 256, xer);
	// bne cr6,0x823f1278
	if (!cr6.getEQ()) goto loc_823F1278;
	// li r11,3
	r11.s64 = 3;
loc_823F1278:
	// clrlwi. r10,r9,31
	ctx.r10.u64 = ctx.r9.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f1284
	if (cr0.getEQ()) goto loc_823F1284;
	// ori r11,r11,8
	r11.u64 = r11.u64 | 8;
loc_823F1284:
	// rlwinm. r10,r9,0,30,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f1290
	if (cr0.getEQ()) goto loc_823F1290;
	// ori r11,r11,32
	r11.u64 = r11.u64 | 32;
loc_823F1290:
	// rlwinm. r10,r9,0,29,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f129c
	if (cr0.getEQ()) goto loc_823F129C;
	// ori r11,r11,64
	r11.u64 = r11.u64 | 64;
loc_823F129C:
	// rlwinm. r10,r9,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f12a8
	if (cr0.getEQ()) goto loc_823F12A8;
	// ori r11,r11,16
	r11.u64 = r11.u64 | 16;
loc_823F12A8:
	// rlwinm. r10,r9,0,27,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f12b4
	if (cr0.getEQ()) goto loc_823F12B4;
	// ori r11,r11,128
	r11.u64 = r11.u64 | 128;
loc_823F12B4:
	// rlwinm r10,r8,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 24) & 0xFFFFFF;
	// or r4,r10,r11
	ctx.r4.u64 = ctx.r10.u64 | r11.u64;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// bl 0x823f1130
	sub_823F1130(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// bl 0x823f1130
	sub_823F1130(ctx, base);
	// clrlwi r11,r3,12
	r11.u64 = ctx.r3.u32 & 0xFFFFF;
	// lis r10,8
	ctx.r10.s64 = 524288;
	// rlwinm r11,r11,0,27,12
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFF8001F;
	// ori r10,r10,31
	ctx.r10.u64 = ctx.r10.u64 | 31;
	// li r3,1
	ctx.r3.s64 = 1;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x823f12f8
	if (!cr6.getEQ()) goto loc_823F12F8;
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F12F8:
	// bl 0x824101ec
	__imp__KeEnableFpuExceptions(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F1318"))) PPC_WEAK_FUNC(sub_823F1318);
PPC_FUNC_IMPL(__imp__sub_823F1318) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r4,-8
	ctx.r4.s64 = -524288;
	// li r3,0
	ctx.r3.s64 = 0;
	// ori r4,r4,1792
	ctx.r4.u64 = ctx.r4.u64 | 1792;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// bl 0x823f1130
	sub_823F1130(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F1348"))) PPC_WEAK_FUNC(sub_823F1348);
PPC_FUNC_IMPL(__imp__sub_823F1348) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x823f1364
	if (cr6.getEQ()) goto loc_823F1364;
	// li r10,45
	ctx.r10.s64 = 45;
	// addi r11,r4,1
	r11.s64 = ctx.r4.s64 + 1;
	// neg r3,r3
	ctx.r3.s64 = -ctx.r3.s64;
	// stb r10,0(r4)
	PPC_STORE_U8(ctx.r4.u32 + 0, ctx.r10.u8);
loc_823F1364:
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
loc_823F1368:
	// divwu r10,r3,r5
	ctx.r10.u32 = ctx.r3.u32 / ctx.r5.u32;
	// twllei r5,0
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// subf r10,r10,r3
	ctx.r10.s64 = ctx.r3.s64 - ctx.r10.s64;
	// divwu r3,r3,r5
	ctx.r3.u32 = ctx.r3.u32 / ctx.r5.u32;
	// twllei r5,0
	// cmplwi cr6,r10,9
	cr6.compare<uint32_t>(ctx.r10.u32, 9, xer);
	// ble cr6,0x823f1390
	if (!cr6.getGT()) goto loc_823F1390;
	// addi r10,r10,87
	ctx.r10.s64 = ctx.r10.s64 + 87;
	// b 0x823f1394
	goto loc_823F1394;
loc_823F1390:
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
loc_823F1394:
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bne cr6,0x823f1368
	if (!cr6.getEQ()) goto loc_823F1368;
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
loc_823F13B0:
	// lbz r8,0(r9)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stb r8,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r8.u8);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stb r10,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, ctx.r10.u8);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmplw cr6,r9,r11
	cr6.compare<uint32_t>(ctx.r9.u32, r11.u32, xer);
	// blt cr6,0x823f13b0
	if (cr6.getLT()) goto loc_823F13B0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F13D8"))) PPC_WEAK_FUNC(sub_823F13D8);
PPC_FUNC_IMPL(__imp__sub_823F13D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r6,0
	ctx.r6.s64 = 0;
	// bl 0x823f1348
	sub_823F1348(ctx, base);
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F1400"))) PPC_WEAK_FUNC(sub_823F1400);
PPC_FUNC_IMPL(__imp__sub_823F1400) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stfd f30,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, f30.u64);
	// stfd f31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// fmr f30,f1
	f30.f64 = ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,2752(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// fabs f13,f30
	ctx.f13.u64 = f30.u64 & ~0x8000000000000000;
	// fcmpu cr6,f30,f0
	cr6.compare(f30.f64, f0.f64);
	// bne cr6,0x823f1430
	if (!cr6.getEQ()) goto loc_823F1430;
	// b 0x823f14e8
	goto loc_823F14E8;
loc_823F1430:
	// lis r11,-32249
	r11.s64 = -2113470464;
	// addi r11,r11,9352
	r11.s64 = r11.s64 + 9352;
	// lfd f0,-32(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + -32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x823f1490
	if (!cr6.getGT()) goto loc_823F1490;
	// lfd f0,-40(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + -40);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x823f145c
	if (!cr6.getGT()) goto loc_823F145C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,2728(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2728);
	// b 0x823f14e0
	goto loc_823F14E0;
loc_823F145C:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lfd f31,27256(r11)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(r11.u32 + 27256);
	// fmul f1,f13,f31
	ctx.f1.f64 = ctx.f13.f64 * f31.f64;
	// bl 0x823f1b90
	sub_823F1B90(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,2728(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2728);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fadd f13,f1,f0
	ctx.f13.f64 = ctx.f1.f64 + f0.f64;
	// fdiv f13,f0,f13
	ctx.f13.f64 = f0.f64 / ctx.f13.f64;
	// lfd f0,28168(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 28168);
	// fsub f0,f0,f13
	f0.f64 = f0.f64 - ctx.f13.f64;
	// fmul f0,f0,f31
	f0.f64 = f0.f64 * f31.f64;
	// b 0x823f14e0
	goto loc_823F14E0;
loc_823F1490:
	// fmul f0,f13,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f13.f64 * ctx.f13.f64;
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// lfd f11,16(r11)
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 16);
	// lfd f12,9392(r10)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r10.u32 + 9392);
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// fadd f10,f0,f11
	ctx.f10.f64 = f0.f64 + ctx.f11.f64;
	// lfd f11,-16(r11)
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + -16);
	// fnmsub f11,f0,f12,f11
	ctx.f11.f64 = -(f0.f64 * ctx.f12.f64 - ctx.f11.f64);
	// lfd f12,8(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,9384(r10)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r10.u32 + 9384);
	// fmsub f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 - ctx.f12.f64;
	// lfd f12,0(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmadd f12,f10,f0,f12
	ctx.f12.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// fmul f0,f11,f0
	f0.f64 = ctx.f11.f64 * f0.f64;
	// fdiv f12,f0,f12
	ctx.f12.f64 = f0.f64 / ctx.f12.f64;
	// lfd f0,2728(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2728);
	// fadd f0,f12,f0
	f0.f64 = ctx.f12.f64 + f0.f64;
	// fmul f0,f0,f13
	f0.f64 = f0.f64 * ctx.f13.f64;
loc_823F14E0:
	// fneg f13,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = f0.u64 ^ 0x8000000000000000;
	// fsel f1,f30,f0,f13
	ctx.f1.f64 = f30.f64 >= 0.0 ? f0.f64 : ctx.f13.f64;
loc_823F14E8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f30,-24(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// lfd f31,-16(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F1500"))) PPC_WEAK_FUNC(sub_823F1500);
PPC_FUNC_IMPL(__imp__sub_823F1500) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,2752(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lis r11,-32249
	r11.s64 = -2113470464;
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// addi r11,r11,9400
	r11.s64 = r11.s64 + 9400;
	// addi r10,r10,-21072
	ctx.r10.s64 = ctx.r10.s64 + -21072;
	// lfd f0,0(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// fmul f0,f1,f0
	f0.f64 = ctx.f1.f64 * f0.f64;
	// lfd f12,0(r10)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r10.u32 + 0);
	// lfd f11,8(r10)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r10.u32 + 8);
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// lfd f9,80(r11)
	ctx.f9.u64 = PPC_LOAD_U64(r11.u32 + 80);
	// lfd f10,9512(r10)
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r10.u32 + 9512);
	// fctid f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvtsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, f0.u64);
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// fnmsub f0,f12,f13,f1
	f0.f64 = -(ctx.f12.f64 * ctx.f13.f64 - ctx.f1.f64);
	// lfd f12,32(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 32);
	// fnmsub f13,f11,f13,f0
	ctx.f13.f64 = -(ctx.f11.f64 * ctx.f13.f64 - f0.f64);
	// fmul f0,f13,f13
	f0.f64 = ctx.f13.f64 * ctx.f13.f64;
	// ld r10,-16(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// fnmsub f11,f0,f10,f12
	ctx.f11.f64 = -(f0.f64 * ctx.f10.f64 - ctx.f12.f64);
	// clrldi r10,r10,63
	ctx.r10.u64 = ctx.r10.u64 & 0x1;
	// cmpdi cr6,r10,0
	cr6.compare<int64_t>(ctx.r10.s64, 0, xer);
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// lfd f12,9504(r10)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r10.u32 + 9504);
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// fmsub f10,f0,f9,f12
	ctx.f10.f64 = f0.f64 * ctx.f9.f64 - ctx.f12.f64;
	// lfd f12,9496(r10)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r10.u32 + 9496);
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// fmsub f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 - ctx.f12.f64;
	// lfd f12,64(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 64);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,48(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 48);
	// fmadd f9,f11,f0,f12
	ctx.f9.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f11,9488(r10)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r10.u32 + 9488);
	// fmsub f11,f10,f0,f11
	ctx.f11.f64 = ctx.f10.f64 * f0.f64 - ctx.f11.f64;
	// fmul f13,f9,f13
	ctx.f13.f64 = ctx.f9.f64 * ctx.f13.f64;
	// fmadd f0,f11,f0,f12
	f0.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// beq cr6,0x823f15b4
	if (cr6.getEQ()) goto loc_823F15B4;
	// fneg f13,f13
	ctx.f13.u64 = ctx.f13.u64 ^ 0x8000000000000000;
	// fdiv f0,f0,f13
	f0.f64 = f0.f64 / ctx.f13.f64;
	// b 0x823f15b8
	goto loc_823F15B8;
loc_823F15B4:
	// fdiv f0,f13,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f13.f64 / f0.f64;
loc_823F15B8:
	// fabs f12,f1
	ctx.fpscr.disableFlushMode();
	ctx.f12.u64 = ctx.f1.u64 & ~0x8000000000000000;
	// lfd f13,16(r11)
	ctx.f13.u64 = PPC_LOAD_U64(r11.u32 + 16);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// fsub f12,f12,f13
	ctx.f12.f64 = ctx.f12.f64 - ctx.f13.f64;
	// lfd f13,-19440(r11)
	ctx.f13.u64 = PPC_LOAD_U64(r11.u32 + -19440);
	// fsel f1,f12,f13,f0
	ctx.f1.f64 = ctx.f12.f64 >= 0.0 ? ctx.f13.f64 : f0.f64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F15D8"))) PPC_WEAK_FUNC(sub_823F15D8);
PPC_FUNC_IMPL(__imp__sub_823F15D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f30,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f30.u64);
	// stfd f31,-40(r1)
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-16377
	r11.s64 = -1073283072;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// li r3,248
	ctx.r3.s64 = 248;
	// stfd f31,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, f31.u64);
	// ori r29,r11,65279
	r29.u64 = r11.u64 | 65279;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// lhz r11,160(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 160);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// rlwinm r11,r11,0,17,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x7FF0;
	// cmplwi cr6,r11,32752
	cr6.compare<uint32_t>(r11.u32, 32752, xer);
	// bne cr6,0x823f1678
	if (!cr6.getEQ()) goto loc_823F1678;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823f7780
	sub_823F7780(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble 0x823f1664
	if (!cr0.getGT()) goto loc_823F1664;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// ble cr6,0x823f1650
	if (!cr6.getGT()) goto loc_823F1650;
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x823f1664
	if (!cr6.getEQ()) goto loc_823F1664;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// li r3,31
	ctx.r3.s64 = 31;
	// bl 0x823f8a58
	sub_823F8A58(ctx, base);
	// b 0x823f182c
	goto loc_823F182C;
loc_823F1650:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// b 0x823f182c
	goto loc_823F182C;
loc_823F1664:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,8
	ctx.r3.s64 = 8;
	// lfd f0,2728(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2728);
	// fadd f2,f31,f0
	ctx.f2.f64 = f31.f64 + f0.f64;
	// b 0x823f181c
	goto loc_823F181C;
loc_823F1678:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,2752(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// beq cr6,0x823f1650
	if (cr6.getEQ()) goto loc_823F1650;
	// fneg f13,f31
	ctx.f13.u64 = f31.u64 ^ 0x8000000000000000;
	// li r31,-1
	r31.s64 = -1;
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// fsel f1,f31,f31,f13
	ctx.f1.f64 = f31.f64 >= 0.0 ? f31.f64 : ctx.f13.f64;
	// blt cr6,0x823f16a0
	if (cr6.getLT()) goto loc_823F16A0;
	// li r31,1
	r31.s64 = 1;
loc_823F16A0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f30,2728(r11)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(r11.u32 + 2728);
	// lis r11,-32249
	r11.s64 = -2113470464;
	// fcmpu cr6,f1,f30
	cr6.compare(ctx.f1.f64, f30.f64);
	// addi r11,r11,9520
	r11.s64 = r11.s64 + 9520;
	// ble cr6,0x823f1750
	if (!cr6.getGT()) goto loc_823F1750;
	// lfd f0,8(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// ble cr6,0x823f171c
	if (!cr6.getGT()) goto loc_823F171C;
	// lfd f0,16(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 16);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// ble cr6,0x823f16e4
	if (!cr6.getGT()) goto loc_823F16E4;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lfd f0,-19448(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + -19448);
	// fmul f2,f0,f31
	ctx.f2.f64 = f0.f64 * f31.f64;
loc_823F16DC:
	// li r3,17
	ctx.r3.s64 = 17;
	// b 0x823f181c
	goto loc_823F181C;
loc_823F16E4:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x823f1c70
	sub_823F1C70(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r4,r11,-1
	ctx.r4.s64 = r11.s64 + -1;
	// cmpwi cr6,r4,1024
	cr6.compare<int32_t>(ctx.r4.s32, 1024, xer);
	// stw r4,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r4.u32);
	// ble cr6,0x823f1710
	if (!cr6.getGT()) goto loc_823F1710;
	// addi r4,r4,-1536
	ctx.r4.s64 = ctx.r4.s64 + -1536;
	// bl 0x823f7708
	sub_823F7708(ctx, base);
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// b 0x823f16dc
	goto loc_823F16DC;
loc_823F1710:
	// bl 0x823f7708
	sub_823F7708(ctx, base);
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// b 0x823f1740
	goto loc_823F1740;
loc_823F171C:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x823f1c70
	sub_823F1C70(ctx, base);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823f7708
	sub_823F7708(ctx, base);
	// fdiv f0,f30,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = f30.f64 / ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsub f13,f1,f0
	ctx.f13.f64 = ctx.f1.f64 - f0.f64;
	// lfd f0,28168(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 28168);
	// fmul f30,f13,f0
	f30.f64 = ctx.f13.f64 * f0.f64;
loc_823F1740:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x823f17f8
	if (!cr6.getLT()) goto loc_823F17F8;
	// fneg f30,f30
	ctx.fpscr.disableFlushMode();
	f30.u64 = f30.u64 ^ 0x8000000000000000;
	// b 0x823f17f8
	goto loc_823F17F8;
loc_823F1750:
	// lfd f0,0(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x823f17a0
	if (!cr6.getLT()) goto loc_823F17A0;
	// fmr f30,f31
	f30.f64 = f31.f64;
	// stfd f30,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, f30.u64);
	// lhz r11,88(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 88);
	// rlwinm. r11,r11,0,17,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x7FF0;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f17f8
	if (!cr0.getEQ()) goto loc_823F17F8;
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// clrlwi. r11,r11,12
	r11.u64 = r11.u32 & 0xFFFFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f1788
	if (!cr0.getEQ()) goto loc_823F1788;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823f17f8
	if (cr6.getEQ()) goto loc_823F17F8;
loc_823F1788:
	// li r4,1536
	ctx.r4.s64 = 1536;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823f7748
	sub_823F7748(ctx, base);
	// li r3,18
	ctx.r3.s64 = 18;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// b 0x823f181c
	goto loc_823F181C;
loc_823F17A0:
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// fmul f0,f31,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = f31.f64 * f31.f64;
	// lfd f13,9632(r10)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r10.u32 + 9632);
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// lfd f12,9624(r10)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r10.u32 + 9624);
	// fsub f11,f0,f12
	ctx.f11.f64 = f0.f64 - ctx.f12.f64;
	// lfd f12,40(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 40);
	// fnmsub f12,f0,f13,f12
	ctx.f12.f64 = -(f0.f64 * ctx.f13.f64 - ctx.f12.f64);
	// lfd f13,64(r11)
	ctx.f13.u64 = PPC_LOAD_U64(r11.u32 + 64);
	// lis r11,-32249
	r11.s64 = -2113470464;
	// fmadd f11,f11,f0,f13
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f13.f64;
	// lfd f13,9616(r11)
	ctx.f13.u64 = PPC_LOAD_U64(r11.u32 + 9616);
	// lis r11,-32249
	r11.s64 = -2113470464;
	// fmsub f12,f12,f0,f13
	ctx.f12.f64 = ctx.f12.f64 * f0.f64 - ctx.f13.f64;
	// lfd f13,9608(r11)
	ctx.f13.u64 = PPC_LOAD_U64(r11.u32 + 9608);
	// lis r11,-32249
	r11.s64 = -2113470464;
	// fmsub f11,f11,f0,f13
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 - ctx.f13.f64;
	// lfd f13,9600(r11)
	ctx.f13.u64 = PPC_LOAD_U64(r11.u32 + 9600);
	// fmsub f13,f12,f0,f13
	ctx.f13.f64 = ctx.f12.f64 * f0.f64 - ctx.f13.f64;
	// fdiv f13,f13,f11
	ctx.f13.f64 = ctx.f13.f64 / ctx.f11.f64;
	// fmadd f0,f13,f0,f30
	f0.f64 = ctx.f13.f64 * f0.f64 + f30.f64;
	// fmul f30,f0,f31
	f30.f64 = f0.f64 * f31.f64;
loc_823F17F8:
	// rlwinm. r11,r30,0,28,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f1814
	if (cr0.getEQ()) goto loc_823F1814;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// b 0x823f182c
	goto loc_823F182C;
loc_823F1814:
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// li r3,16
	ctx.r3.s64 = 16;
loc_823F181C:
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// li r4,31
	ctx.r4.s64 = 31;
	// bl 0x823f8b60
	sub_823F8B60(ctx, base);
loc_823F182C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-48(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F1840"))) PPC_WEAK_FUNC(sub_823F1840);
PPC_FUNC_IMPL(__imp__sub_823F1840) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f30.u64);
	// stfd f31,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-16377
	r11.s64 = -1073283072;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// li r3,248
	ctx.r3.s64 = 248;
	// stfd f31,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, f31.u64);
	// ori r30,r11,65279
	r30.u64 = r11.u64 | 65279;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// lhz r11,144(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 144);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// rlwinm r11,r11,0,17,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x7FF0;
	// cmplwi cr6,r11,32752
	cr6.compare<uint32_t>(r11.u32, 32752, xer);
	// bne cr6,0x823f18ec
	if (!cr6.getEQ()) goto loc_823F18EC;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823f7780
	sub_823F7780(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble 0x823f18d8
	if (!cr0.getGT()) goto loc_823F18D8;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// ble cr6,0x823f18c0
	if (!cr6.getGT()) goto loc_823F18C0;
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x823f18d8
	if (!cr6.getEQ()) goto loc_823F18D8;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// li r3,19
	ctx.r3.s64 = 19;
	// bl 0x823f8a58
	sub_823F8A58(ctx, base);
	// b 0x823f19e4
	goto loc_823F19E4;
loc_823F18C0:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lfd f1,-19448(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(r11.u32 + -19448);
	// b 0x823f19e4
	goto loc_823F19E4;
loc_823F18D8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,8
	ctx.r3.s64 = 8;
	// lfd f0,2728(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2728);
	// fadd f2,f31,f0
	ctx.f2.f64 = f31.f64 + f0.f64;
	// b 0x823f19d4
	goto loc_823F19D4;
loc_823F18EC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,2752(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// bne cr6,0x823f1914
	if (!cr6.getEQ()) goto loc_823F1914;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f1,2728(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(r11.u32 + 2728);
	// b 0x823f19e4
	goto loc_823F19E4;
loc_823F1914:
	// fneg f0,f31
	ctx.fpscr.disableFlushMode();
	f0.u64 = f31.u64 ^ 0x8000000000000000;
	// lis r11,-32249
	r11.s64 = -2113470464;
	// addi r11,r11,9536
	r11.s64 = r11.s64 + 9536;
	// fsel f1,f31,f31,f0
	ctx.f1.f64 = f31.f64 >= 0.0 ? f31.f64 : f0.f64;
	// lfd f0,-8(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + -8);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// ble cr6,0x823f1984
	if (!cr6.getGT()) goto loc_823F1984;
	// lfd f0,0(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// ble cr6,0x823f194c
	if (!cr6.getGT()) goto loc_823F194C;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lfd f2,-19448(r11)
	ctx.f2.u64 = PPC_LOAD_U64(r11.u32 + -19448);
loc_823F1944:
	// li r3,17
	ctx.r3.s64 = 17;
	// b 0x823f19d4
	goto loc_823F19D4;
loc_823F194C:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x823f1c70
	sub_823F1C70(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r4,r11,-1
	ctx.r4.s64 = r11.s64 + -1;
	// cmpwi cr6,r4,1024
	cr6.compare<int32_t>(ctx.r4.s32, 1024, xer);
	// stw r4,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r4.u32);
	// ble cr6,0x823f1978
	if (!cr6.getGT()) goto loc_823F1978;
	// addi r4,r4,-1536
	ctx.r4.s64 = ctx.r4.s64 + -1536;
	// bl 0x823f7708
	sub_823F7708(ctx, base);
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// b 0x823f1944
	goto loc_823F1944;
loc_823F1978:
	// bl 0x823f7708
	sub_823F7708(ctx, base);
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// b 0x823f19b0
	goto loc_823F19B0;
loc_823F1984:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x823f1c70
	sub_823F1C70(ctx, base);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823f7708
	sub_823F7708(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,2728(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2728);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fdiv f0,f0,f1
	f0.f64 = f0.f64 / ctx.f1.f64;
	// fadd f13,f0,f1
	ctx.f13.f64 = f0.f64 + ctx.f1.f64;
	// lfd f0,28168(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 28168);
	// fmul f30,f13,f0
	f30.f64 = ctx.f13.f64 * f0.f64;
loc_823F19B0:
	// rlwinm. r11,r31,0,28,28
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f19cc
	if (cr0.getEQ()) goto loc_823F19CC;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// b 0x823f19e4
	goto loc_823F19E4;
loc_823F19CC:
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// li r3,16
	ctx.r3.s64 = 16;
loc_823F19D4:
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// li r4,19
	ctx.r4.s64 = 19;
	// bl 0x823f8b60
	sub_823F8B60(ctx, base);
loc_823F19E4:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F1A08"))) PPC_WEAK_FUNC(sub_823F1A08);
PPC_FUNC_IMPL(__imp__sub_823F1A08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// stfd f1,16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// stfd f2,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.f2.u64);
	// lhz r11,16(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 16);
	// rlwinm r11,r11,0,17,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x7FF0;
	// cmplwi cr6,r11,32752
	cr6.compare<uint32_t>(r11.u32, 32752, xer);
	// bne cr6,0x823f1a2c
	if (!cr6.getEQ()) goto loc_823F1A2C;
loc_823F1A20:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lfd f1,-19440(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(r11.u32 + -19440);
	// blr 
	return;
loc_823F1A2C:
	// lhz r11,24(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 24);
	// rlwinm r11,r11,0,17,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x7FF0;
	// cmplwi cr6,r11,32752
	cr6.compare<uint32_t>(r11.u32, 32752, xer);
	// bne cr6,0x823f1a70
	if (!cr6.getEQ()) goto loc_823F1A70;
	// lwz r11,24(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 24);
	// lis r10,32752
	ctx.r10.s64 = 2146435072;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// lwz r10,28(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 28);
	// bne cr6,0x823f1a58
	if (!cr6.getEQ()) goto loc_823F1A58;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
loc_823F1A58:
	// lis r9,-16
	ctx.r9.s64 = -1048576;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bne cr6,0x823f1a20
	if (!cr6.getEQ()) goto loc_823F1A20;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// b 0x823f1a20
	goto loc_823F1A20;
loc_823F1A70:
	// ld r10,24(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 24);
	// ld r7,16(r1)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r1.u32 + 16);
	// clrldi r11,r10,1
	r11.u64 = ctx.r10.u64 & 0x7FFFFFFFFFFFFFFF;
	// clrldi r9,r7,1
	ctx.r9.u64 = ctx.r7.u64 & 0x7FFFFFFFFFFFFFFF;
	// cmpld cr6,r9,r11
	cr6.compare<uint64_t>(ctx.r9.u64, r11.u64, xer);
	// bltlr cr6
	if (cr6.getLT()) return;
	// rldicr r4,r7,0,0
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r7.u64, 0) & 0x8000000000000000;
	// rldicl r8,r10,12,53
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u64, 12) & 0x7FF;
	// rldicl r10,r10,11,1
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u64, 11) & 0x7FFFFFFFFFFFFFFF;
	// li r9,1
	ctx.r9.s64 = 1;
	// rldicl r11,r7,12,53
	r11.u64 = __builtin_rotateleft64(ctx.r7.u64, 12) & 0x7FF;
	// std r4,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r4.u64);
	// rldicr r10,r10,0,52
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u64, 0) & 0xFFFFFFFFFFFFF800;
	// rldicr r6,r9,63,63
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r9.u64, 63) & 0xFFFFFFFFFFFFFFFF;
	// cmpdi cr6,r8,0
	cr6.compare<int64_t>(ctx.r8.s64, 0, xer);
	// bne cr6,0x823f1acc
	if (!cr6.getEQ()) goto loc_823F1ACC;
	// cmpldi cr6,r10,0
	cr6.compare<uint64_t>(ctx.r10.u64, 0, xer);
	// beq cr6,0x823f1a20
	if (cr6.getEQ()) goto loc_823F1A20;
	// cntlzd r9,r10
	ctx.r9.u64 = ctx.r10.u64 == 0 ? 64 : __builtin_clzll(ctx.r10.u64);
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// subfic r8,r9,1
	xer.ca = ctx.r9.u32 <= 1;
	ctx.r8.s64 = 1 - ctx.r9.s64;
	// sld r5,r10,r9
	ctx.r5.u64 = ctx.r9.u8 & 0x40 ? 0 : (ctx.r10.u64 << (ctx.r9.u8 & 0x7F));
	// b 0x823f1ad0
	goto loc_823F1AD0;
loc_823F1ACC:
	// or r5,r10,r6
	ctx.r5.u64 = ctx.r10.u64 | ctx.r6.u64;
loc_823F1AD0:
	// li r10,0
	ctx.r10.s64 = 0;
	// cmpdi cr6,r11,0
	cr6.compare<int64_t>(r11.s64, 0, xer);
	// rldimi r10,r7,11,1
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r7.u64, 11) & 0x7FFFFFFFFFFFF800) | (ctx.r10.u64 & 0x80000000000007FF);
	// bne cr6,0x823f1afc
	if (!cr6.getEQ()) goto loc_823F1AFC;
	// cmpldi cr6,r10,0
	cr6.compare<uint64_t>(ctx.r10.u64, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// cntlzd r11,r10
	r11.u64 = ctx.r10.u64 == 0 ? 64 : __builtin_clzll(ctx.r10.u64);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// sld r10,r10,r11
	ctx.r10.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// subfic r11,r11,1
	xer.ca = r11.u32 <= 1;
	r11.s64 = 1 - r11.s64;
	// b 0x823f1b00
	goto loc_823F1B00;
loc_823F1AFC:
	// or r10,r10,r6
	ctx.r10.u64 = ctx.r10.u64 | ctx.r6.u64;
loc_823F1B00:
	// rldicl r7,r5,63,1
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r5.u64, 63) & 0x7FFFFFFFFFFFFFFF;
	// b 0x823f1b2c
	goto loc_823F1B2C;
loc_823F1B08:
	// cmpld cr6,r10,r5
	cr6.compare<uint64_t>(ctx.r10.u64, ctx.r5.u64, xer);
	// mr r9,r5
	ctx.r9.u64 = ctx.r5.u64;
	// bge cr6,0x823f1b18
	if (!cr6.getLT()) goto loc_823F1B18;
	// mr r9,r7
	ctx.r9.u64 = ctx.r7.u64;
loc_823F1B18:
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// cntlzd r9,r10
	ctx.r9.u64 = ctx.r10.u64 == 0 ? 64 : __builtin_clzll(ctx.r10.u64);
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// sld r10,r10,r9
	ctx.r10.u64 = ctx.r9.u8 & 0x40 ? 0 : (ctx.r10.u64 << (ctx.r9.u8 & 0x7F));
loc_823F1B2C:
	// cmpd cr6,r11,r8
	cr6.compare<int64_t>(r11.s64, ctx.r8.s64, xer);
	// bgt cr6,0x823f1b08
	if (cr6.getGT()) goto loc_823F1B08;
	// bne cr6,0x823f1b54
	if (!cr6.getEQ()) goto loc_823F1B54;
	// cmpld cr6,r10,r5
	cr6.compare<uint64_t>(ctx.r10.u64, ctx.r5.u64, xer);
	// blt cr6,0x823f1b54
	if (cr6.getLT()) goto loc_823F1B54;
	// subf r10,r5,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r5.s64;
	// cntlzd r9,r10
	ctx.r9.u64 = ctx.r10.u64 == 0 ? 64 : __builtin_clzll(ctx.r10.u64);
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// sld r10,r10,r9
	ctx.r10.u64 = ctx.r9.u8 & 0x40 ? 0 : (ctx.r10.u64 << (ctx.r9.u8 & 0x7F));
loc_823F1B54:
	// cmpldi cr6,r10,0
	cr6.compare<uint64_t>(ctx.r10.u64, 0, xer);
	// beq cr6,0x823f1b84
	if (cr6.getEQ()) goto loc_823F1B84;
	// cmpdi cr6,r11,0
	cr6.compare<int64_t>(r11.s64, 0, xer);
	// bgt cr6,0x823f1b70
	if (cr6.getGT()) goto loc_823F1B70;
	// subfic r9,r11,1
	xer.ca = r11.u32 <= 1;
	ctx.r9.s64 = 1 - r11.s64;
	// li r11,0
	r11.s64 = 0;
	// srd r10,r10,r9
	ctx.r10.u64 = ctx.r9.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r9.u8 & 0x7F));
loc_823F1B70:
	// rldicr r11,r11,52,11
	r11.u64 = __builtin_rotateleft64(r11.u64, 52) & 0xFFF0000000000000;
	// rldicl r10,r10,53,12
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u64, 53) & 0xFFFFFFFFFFFFF;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// std r11,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r11.u64);
loc_823F1B84:
	// lfd f1,-16(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F1B90"))) PPC_WEAK_FUNC(sub_823F1B90);
PPC_FUNC_IMPL(__imp__sub_823F1B90) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r10,r1,-32
	ctx.r10.s64 = ctx.r1.s64 + -32;
	// addi r11,r11,-21056
	r11.s64 = r11.s64 + -21056;
	// lfd f0,32(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 32);
	// fmul f0,f0,f1
	f0.f64 = f0.f64 * ctx.f1.f64;
	// lfd f13,40(r11)
	ctx.f13.u64 = PPC_LOAD_U64(r11.u32 + 40);
	// lfd f12,48(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 48);
	// lfd f11,72(r11)
	ctx.f11.u64 = PPC_LOAD_U64(r11.u32 + 72);
	// lfd f10,96(r11)
	ctx.f10.u64 = PPC_LOAD_U64(r11.u32 + 96);
	// lfs f9,108(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 108);
	ctx.f9.f64 = double(temp.f32);
	// fctid f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvtsd_si64(_mm_load_sd(&f0.f64));
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fnmsub f13,f13,f0,f1
	ctx.f13.f64 = -(ctx.f13.f64 * f0.f64 - ctx.f1.f64);
	// fctiwz f8,f0
	ctx.f8.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f8,0,r10
	PPC_STORE_U32(ctx.r10.u32, ctx.f8.u32);
	// fnmsub f13,f12,f0,f13
	ctx.f13.f64 = -(ctx.f12.f64 * f0.f64 - ctx.f13.f64);
	// lfd f12,64(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 64);
	// fmul f0,f13,f13
	f0.f64 = ctx.f13.f64 * ctx.f13.f64;
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,88(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 88);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,56(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 56);
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,80(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 80);
	// fmadd f12,f10,f0,f12
	ctx.f12.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// fmul f0,f11,f13
	f0.f64 = ctx.f11.f64 * ctx.f13.f64;
	// lwz r10,-32(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -32);
	// addic. r10,r10,1
	xer.ca = ctx.r10.u32 > 4294967294;
	ctx.r10.s64 = ctx.r10.s64 + 1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// fsub f13,f12,f0
	ctx.f13.f64 = ctx.f12.f64 - f0.f64;
	// fdiv f0,f0,f13
	f0.f64 = f0.f64 / ctx.f13.f64;
	// fadd f0,f0,f9
	f0.f64 = f0.f64 + ctx.f9.f64;
	// beq 0x823f1c4c
	if (cr0.getEQ()) goto loc_823F1C4C;
	// stfd f0,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, f0.u64);
	// stfd f0,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, f0.u64);
	// stfd f0,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f0.u64);
	// lhz r9,-24(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + -24);
	// lhz r8,-16(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + -16);
	// rlwinm r9,r9,28,21,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 28) & 0x7FF;
	// addi r9,r9,-1022
	ctx.r9.s64 = ctx.r9.s64 + -1022;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,1022
	ctx.r10.s64 = ctx.r10.s64 + 1022;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// andi. r8,r8,32783
	ctx.r8.u64 = ctx.r8.u64 & 32783;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// or r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 | ctx.r8.u64;
	// sth r10,-32(r1)
	PPC_STORE_U16(ctx.r1.u32 + -32, ctx.r10.u16);
	// lfd f0,-32(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
loc_823F1C4C:
	// lfd f13,0(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// fsub f11,f1,f13
	ctx.f11.f64 = ctx.f1.f64 - ctx.f13.f64;
	// lfd f13,8(r11)
	ctx.f13.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// lfd f12,16(r11)
	ctx.f12.u64 = PPC_LOAD_U64(r11.u32 + 16);
	// fsub f10,f13,f1
	ctx.f10.f64 = ctx.f13.f64 - ctx.f1.f64;
	// lfs f13,104(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// fsel f0,f11,f12,f0
	f0.f64 = ctx.f11.f64 >= 0.0 ? ctx.f12.f64 : f0.f64;
	// fsel f1,f10,f13,f0
	ctx.f1.f64 = ctx.f10.f64 >= 0.0 ? ctx.f13.f64 : f0.f64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F1C70"))) PPC_WEAK_FUNC(sub_823F1C70);
PPC_FUNC_IMPL(__imp__sub_823F1C70) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f30.u64);
	// stfd f31,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// fmr f30,f1
	f30.f64 = ctx.f1.f64;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r31,r11,-21056
	r31.s64 = r11.s64 + -21056;
	// lfd f0,32(r31)
	f0.u64 = PPC_LOAD_U64(r31.u32 + 32);
	// fmul f1,f0,f30
	ctx.f1.f64 = f0.f64 * f30.f64;
	// bl 0x823f9800
	sub_823F9800(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// lfd f0,40(r31)
	f0.u64 = PPC_LOAD_U64(r31.u32 + 40);
	// lfd f13,48(r31)
	ctx.f13.u64 = PPC_LOAD_U64(r31.u32 + 48);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f12,72(r31)
	ctx.f12.u64 = PPC_LOAD_U64(r31.u32 + 72);
	// lfd f10,64(r31)
	ctx.f10.u64 = PPC_LOAD_U64(r31.u32 + 64);
	// lfd f11,96(r31)
	ctx.f11.u64 = PPC_LOAD_U64(r31.u32 + 96);
	// fnmsub f0,f0,f31,f30
	f0.f64 = -(f0.f64 * f31.f64 - f30.f64);
	// fnmsub f13,f13,f31,f0
	ctx.f13.f64 = -(ctx.f13.f64 * f31.f64 - f0.f64);
	// fmul f0,f13,f13
	f0.f64 = ctx.f13.f64 * ctx.f13.f64;
	// fmadd f10,f12,f0,f10
	ctx.f10.f64 = ctx.f12.f64 * f0.f64 + ctx.f10.f64;
	// lfd f12,88(r31)
	ctx.f12.u64 = PPC_LOAD_U64(r31.u32 + 88);
	// fmadd f11,f11,f0,f12
	ctx.f11.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,56(r31)
	ctx.f12.u64 = PPC_LOAD_U64(r31.u32 + 56);
	// fmadd f10,f10,f0,f12
	ctx.f10.f64 = ctx.f10.f64 * f0.f64 + ctx.f12.f64;
	// lfd f12,80(r31)
	ctx.f12.u64 = PPC_LOAD_U64(r31.u32 + 80);
	// fmadd f12,f11,f0,f12
	ctx.f12.f64 = ctx.f11.f64 * f0.f64 + ctx.f12.f64;
	// fmul f0,f10,f13
	f0.f64 = ctx.f10.f64 * ctx.f13.f64;
	// fsub f13,f12,f0
	ctx.f13.f64 = ctx.f12.f64 - f0.f64;
	// fdiv f13,f0,f13
	ctx.f13.f64 = f0.f64 / ctx.f13.f64;
	// lfd f0,28168(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 28168);
	// fadd f30,f13,f0
	f30.f64 = ctx.f13.f64 + f0.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x823f7730
	sub_823F7730(ctx, base);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fctiwz f0,f31
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f31.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f31.f64));
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r11,r3,r11
	r11.u64 = ctx.r3.u64 + r11.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f30,-40(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F1D48"))) PPC_WEAK_FUNC(sub_823F1D48);
PPC_FUNC_IMPL(__imp__sub_823F1D48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x823f1db4
	if (!cr6.getEQ()) goto loc_823F1DB4;
loc_823F1D84:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x823f1e44
	goto loc_823F1E44;
loc_823F1DB4:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823f1dc4
	if (cr6.getEQ()) goto loc_823F1DC4;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x823f1d84
	if (cr6.getEQ()) goto loc_823F1D84;
loc_823F1DC4:
	// lis r10,32767
	ctx.r10.s64 = 2147418112;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// ori r10,r10,65535
	ctx.r10.u64 = ctx.r10.u64 | 65535;
	// addi r8,r1,200
	ctx.r8.s64 = ctx.r1.s64 + 200;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// bgt cr6,0x823f1de8
	if (cr6.getGT()) goto loc_823F1DE8;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
loc_823F1DE8:
	// li r11,66
	r11.s64 = 66;
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r31,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r31.u32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r31,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r31.u32);
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// bl 0x823f52b0
	sub_823F52B0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x823f1e40
	if (cr6.getEQ()) goto loc_823F1E40;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// blt 0x823f1e34
	if (cr0.getLT()) goto loc_823F1E34;
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// li r11,0
	r11.s64 = 0;
	// stb r11,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r11.u8);
	// b 0x823f1e40
	goto loc_823F1E40;
loc_823F1E34:
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f5e28
	sub_823F5E28(ctx, base);
loc_823F1E40:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_823F1E44:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F1E60"))) PPC_WEAK_FUNC(sub_823F1E60);
PPC_FUNC_IMPL(__imp__sub_823F1E60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// li r30,-4096
	r30.s64 = -4096;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x823f1ebc
	if (cr6.getEQ()) goto loc_823F1EBC;
	// divwu r11,r30,r3
	r11.u32 = r30.u32 / ctx.r3.u32;
	// twllei r3,0
	// cmplw cr6,r11,r4
	cr6.compare<uint32_t>(r11.u32, ctx.r4.u32, xer);
	// bge cr6,0x823f1ebc
	if (!cr6.getLT()) goto loc_823F1EBC;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,12
	ctx.r10.s64 = 12;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
loc_823F1EB4:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x823f1f30
	goto loc_823F1F30;
loc_823F1EBC:
	// mullw. r31,r3,r4
	r31.s64 = int64_t(ctx.r3.s32) * int64_t(ctx.r4.s32);
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x823f1ec8
	if (!cr0.getEQ()) goto loc_823F1EC8;
	// li r31,1
	r31.s64 = 1;
loc_823F1EC8:
	// lis r29,-31987
	r29.s64 = -2096300032;
loc_823F1ECC:
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplw cr6,r31,r30
	cr6.compare<uint32_t>(r31.u32, r30.u32, xer);
	// bgt cr6,0x823f1ef0
	if (cr6.getGT()) goto loc_823F1EF0;
	// bl 0x82364478
	sub_82364478(ctx, base);
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// bl 0x82362ff0
	sub_82362FF0(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x823f1f30
	if (!cr0.getEQ()) goto loc_823F1F30;
loc_823F1EF0:
	// lwz r11,-20080(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -20080);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x823f1f20
	if (cr6.getEQ()) goto loc_823F1F20;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f4dd8
	sub_823F4DD8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f1ecc
	if (!cr0.getEQ()) goto loc_823F1ECC;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x823f1eb4
	if (cr6.getEQ()) goto loc_823F1EB4;
	// li r11,12
	r11.s64 = 12;
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
	// b 0x823f1eb4
	goto loc_823F1EB4;
loc_823F1F20:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x823f1f30
	if (cr6.getEQ()) goto loc_823F1F30;
	// li r11,12
	r11.s64 = 12;
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
loc_823F1F30:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823F1F38"))) PPC_WEAK_FUNC(sub_823F1F38);
PPC_FUNC_IMPL(__imp__sub_823F1F38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x823f1e60
	sub_823F1E60(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x823f1f84
	if (!cr0.getEQ()) goto loc_823F1F84;
	// lwz r30,80(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x823f1f84
	if (cr6.getEQ()) goto loc_823F1F84;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f1f84
	if (cr0.getEQ()) goto loc_823F1F84;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
loc_823F1F84:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F1FA0"))) PPC_WEAK_FUNC(sub_823F1FA0);
PPC_FUNC_IMPL(__imp__sub_823F1FA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr1{};
	PPCCRRegister cr2{};
	PPCCRRegister cr3{};
	PPCCRRegister cr4{};
	PPCCRRegister cr5{};
	PPCCRRegister cr6{};
	PPCCRRegister cr7{};
	PPCRegister r0{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f14{};
	PPCRegister f15{};
	PPCRegister f16{};
	PPCRegister f17{};
	PPCRegister f18{};
	PPCRegister f19{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCVRegister v64{};
	PPCVRegister v65{};
	PPCVRegister v66{};
	PPCVRegister v67{};
	PPCVRegister v68{};
	PPCVRegister v69{};
	PPCVRegister v70{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// mflr r0
	// stwu r1,-80(r1)
	ea = -80 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r0,8(r1)
	PPC_STORE_U32(ctx.r1.u32 + 8, r0.u32);
	// mr r6,r4
	ctx.r6.u64 = ctx.r4.u64;
	// cmpwi r4,0
	cr0.compare<int32_t>(ctx.r4.s32, 0, xer);
	// lwz r0,312(r3)
	r0.u64 = PPC_LOAD_U32(ctx.r3.u32 + 312);
	// cmpwi cr1,r0,0
	cr1.compare<int32_t>(r0.s32, 0, xer);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bne 0x823f1fcc
	if (!cr0.getEQ()) goto loc_823F1FCC;
	// li r6,1
	ctx.r6.s64 = 1;
loc_823F1FCC:
	// bne cr1,0x823f228c
	if (!cr1.getEQ()) goto loc_823F228C;
	// lwz r3,308(r7)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r7.u32 + 308);
	// lwz r4,144(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + 144);
	// bl 0x823f9850
	sub_823F9850(ctx, base);
	// lfd f14,0(r7)
	ctx.fpscr.disableFlushMode();
	f14.u64 = PPC_LOAD_U64(ctx.r7.u32 + 0);
	// lfd f15,8(r7)
	f15.u64 = PPC_LOAD_U64(ctx.r7.u32 + 8);
	// lfd f16,16(r7)
	f16.u64 = PPC_LOAD_U64(ctx.r7.u32 + 16);
	// lfd f17,24(r7)
	f17.u64 = PPC_LOAD_U64(ctx.r7.u32 + 24);
	// lfd f18,32(r7)
	f18.u64 = PPC_LOAD_U64(ctx.r7.u32 + 32);
	// lfd f19,40(r7)
	f19.u64 = PPC_LOAD_U64(ctx.r7.u32 + 40);
	// lfd f20,48(r7)
	f20.u64 = PPC_LOAD_U64(ctx.r7.u32 + 48);
	// lfd f21,56(r7)
	f21.u64 = PPC_LOAD_U64(ctx.r7.u32 + 56);
	// lfd f22,64(r7)
	f22.u64 = PPC_LOAD_U64(ctx.r7.u32 + 64);
	// lfd f23,72(r7)
	f23.u64 = PPC_LOAD_U64(ctx.r7.u32 + 72);
	// lfd f24,80(r7)
	f24.u64 = PPC_LOAD_U64(ctx.r7.u32 + 80);
	// lfd f25,88(r7)
	f25.u64 = PPC_LOAD_U64(ctx.r7.u32 + 88);
	// lfd f26,96(r7)
	f26.u64 = PPC_LOAD_U64(ctx.r7.u32 + 96);
	// lfd f27,104(r7)
	f27.u64 = PPC_LOAD_U64(ctx.r7.u32 + 104);
	// lfd f28,112(r7)
	f28.u64 = PPC_LOAD_U64(ctx.r7.u32 + 112);
	// lfd f29,120(r7)
	f29.u64 = PPC_LOAD_U64(ctx.r7.u32 + 120);
	// lfd f30,128(r7)
	f30.u64 = PPC_LOAD_U64(ctx.r7.u32 + 128);
	// lfd f31,136(r7)
	f31.u64 = PPC_LOAD_U64(ctx.r7.u32 + 136);
	// ld r13,152(r7)
	ctx.r13.u64 = PPC_LOAD_U64(ctx.r7.u32 + 152);
	// ld r14,160(r7)
	r14.u64 = PPC_LOAD_U64(ctx.r7.u32 + 160);
	// ld r15,168(r7)
	r15.u64 = PPC_LOAD_U64(ctx.r7.u32 + 168);
	// ld r16,176(r7)
	r16.u64 = PPC_LOAD_U64(ctx.r7.u32 + 176);
	// ld r17,184(r7)
	r17.u64 = PPC_LOAD_U64(ctx.r7.u32 + 184);
	// ld r18,192(r7)
	r18.u64 = PPC_LOAD_U64(ctx.r7.u32 + 192);
	// ld r19,200(r7)
	r19.u64 = PPC_LOAD_U64(ctx.r7.u32 + 200);
	// ld r20,208(r7)
	r20.u64 = PPC_LOAD_U64(ctx.r7.u32 + 208);
	// ld r21,216(r7)
	r21.u64 = PPC_LOAD_U64(ctx.r7.u32 + 216);
	// ld r22,224(r7)
	r22.u64 = PPC_LOAD_U64(ctx.r7.u32 + 224);
	// ld r23,232(r7)
	r23.u64 = PPC_LOAD_U64(ctx.r7.u32 + 232);
	// ld r24,240(r7)
	r24.u64 = PPC_LOAD_U64(ctx.r7.u32 + 240);
	// ld r25,248(r7)
	r25.u64 = PPC_LOAD_U64(ctx.r7.u32 + 248);
	// ld r26,256(r7)
	r26.u64 = PPC_LOAD_U64(ctx.r7.u32 + 256);
	// ld r27,264(r7)
	r27.u64 = PPC_LOAD_U64(ctx.r7.u32 + 264);
	// ld r28,272(r7)
	r28.u64 = PPC_LOAD_U64(ctx.r7.u32 + 272);
	// ld r29,280(r7)
	r29.u64 = PPC_LOAD_U64(ctx.r7.u32 + 280);
	// ld r30,288(r7)
	r30.u64 = PPC_LOAD_U64(ctx.r7.u32 + 288);
	// ld r31,296(r7)
	r31.u64 = PPC_LOAD_U64(ctx.r7.u32 + 296);
	// li r3,320
	ctx.r3.s64 = 320;
	// lvx128 v64,r3,r7
	_mm_store_si128((__m128i*)v64.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,336
	ctx.r3.s64 = 336;
	// lvx128 v65,r3,r7
	_mm_store_si128((__m128i*)v65.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,352
	ctx.r3.s64 = 352;
	// lvx128 v66,r3,r7
	_mm_store_si128((__m128i*)v66.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,368
	ctx.r3.s64 = 368;
	// lvx128 v67,r3,r7
	_mm_store_si128((__m128i*)v67.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,384
	ctx.r3.s64 = 384;
	// lvx128 v68,r3,r7
	_mm_store_si128((__m128i*)v68.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,400
	ctx.r3.s64 = 400;
	// lvx128 v69,r3,r7
	_mm_store_si128((__m128i*)v69.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,416
	ctx.r3.s64 = 416;
	// lvx128 v70,r3,r7
	_mm_store_si128((__m128i*)v70.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,432
	ctx.r3.s64 = 432;
	// lvx128 v71,r3,r7
	_mm_store_si128((__m128i*)v71.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,448
	ctx.r3.s64 = 448;
	// lvx128 v72,r3,r7
	_mm_store_si128((__m128i*)v72.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,464
	ctx.r3.s64 = 464;
	// lvx128 v73,r3,r7
	_mm_store_si128((__m128i*)v73.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,480
	ctx.r3.s64 = 480;
	// lvx128 v74,r3,r7
	_mm_store_si128((__m128i*)v74.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,496
	ctx.r3.s64 = 496;
	// lvx128 v75,r3,r7
	_mm_store_si128((__m128i*)v75.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,512
	ctx.r3.s64 = 512;
	// lvx128 v76,r3,r7
	_mm_store_si128((__m128i*)v76.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,528
	ctx.r3.s64 = 528;
	// lvx128 v77,r3,r7
	_mm_store_si128((__m128i*)v77.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,544
	ctx.r3.s64 = 544;
	// lvx128 v78,r3,r7
	_mm_store_si128((__m128i*)v78.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,560
	ctx.r3.s64 = 560;
	// lvx128 v79,r3,r7
	_mm_store_si128((__m128i*)v79.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,576
	ctx.r3.s64 = 576;
	// lvx128 v80,r3,r7
	_mm_store_si128((__m128i*)v80.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,592
	ctx.r3.s64 = 592;
	// lvx128 v81,r3,r7
	_mm_store_si128((__m128i*)v81.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,608
	ctx.r3.s64 = 608;
	// lvx128 v82,r3,r7
	_mm_store_si128((__m128i*)v82.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,624
	ctx.r3.s64 = 624;
	// lvx128 v83,r3,r7
	_mm_store_si128((__m128i*)v83.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,640
	ctx.r3.s64 = 640;
	// lvx128 v84,r3,r7
	_mm_store_si128((__m128i*)v84.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,656
	ctx.r3.s64 = 656;
	// lvx128 v85,r3,r7
	_mm_store_si128((__m128i*)v85.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,672
	ctx.r3.s64 = 672;
	// lvx128 v86,r3,r7
	_mm_store_si128((__m128i*)v86.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,688
	ctx.r3.s64 = 688;
	// lvx128 v87,r3,r7
	_mm_store_si128((__m128i*)v87.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,704
	ctx.r3.s64 = 704;
	// lvx128 v88,r3,r7
	_mm_store_si128((__m128i*)v88.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,720
	ctx.r3.s64 = 720;
	// lvx128 v89,r3,r7
	_mm_store_si128((__m128i*)v89.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,736
	ctx.r3.s64 = 736;
	// lvx128 v90,r3,r7
	_mm_store_si128((__m128i*)v90.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,752
	ctx.r3.s64 = 752;
	// lvx128 v91,r3,r7
	_mm_store_si128((__m128i*)v91.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,768
	ctx.r3.s64 = 768;
	// lvx128 v92,r3,r7
	_mm_store_si128((__m128i*)v92.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,784
	ctx.r3.s64 = 784;
	// lvx128 v93,r3,r7
	_mm_store_si128((__m128i*)v93.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,800
	ctx.r3.s64 = 800;
	// lvx128 v94,r3,r7
	_mm_store_si128((__m128i*)v94.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,816
	ctx.r3.s64 = 816;
	// lvx128 v95,r3,r7
	_mm_store_si128((__m128i*)v95.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,832
	ctx.r3.s64 = 832;
	// lvx128 v96,r3,r7
	_mm_store_si128((__m128i*)v96.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,848
	ctx.r3.s64 = 848;
	// lvx128 v97,r3,r7
	_mm_store_si128((__m128i*)v97.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,864
	ctx.r3.s64 = 864;
	// lvx128 v98,r3,r7
	_mm_store_si128((__m128i*)v98.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,880
	ctx.r3.s64 = 880;
	// lvx128 v99,r3,r7
	_mm_store_si128((__m128i*)v99.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,896
	ctx.r3.s64 = 896;
	// lvx128 v100,r3,r7
	_mm_store_si128((__m128i*)v100.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,912
	ctx.r3.s64 = 912;
	// lvx128 v101,r3,r7
	_mm_store_si128((__m128i*)v101.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,928
	ctx.r3.s64 = 928;
	// lvx128 v102,r3,r7
	_mm_store_si128((__m128i*)v102.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,944
	ctx.r3.s64 = 944;
	// lvx128 v103,r3,r7
	_mm_store_si128((__m128i*)v103.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,960
	ctx.r3.s64 = 960;
	// lvx128 v104,r3,r7
	_mm_store_si128((__m128i*)v104.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,976
	ctx.r3.s64 = 976;
	// lvx128 v105,r3,r7
	_mm_store_si128((__m128i*)v105.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,992
	ctx.r3.s64 = 992;
	// lvx128 v106,r3,r7
	_mm_store_si128((__m128i*)v106.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1008
	ctx.r3.s64 = 1008;
	// lvx128 v107,r3,r7
	_mm_store_si128((__m128i*)v107.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1024
	ctx.r3.s64 = 1024;
	// lvx128 v108,r3,r7
	_mm_store_si128((__m128i*)v108.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1040
	ctx.r3.s64 = 1040;
	// lvx128 v109,r3,r7
	_mm_store_si128((__m128i*)v109.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1056
	ctx.r3.s64 = 1056;
	// lvx128 v110,r3,r7
	_mm_store_si128((__m128i*)v110.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1072
	ctx.r3.s64 = 1072;
	// lvx128 v111,r3,r7
	_mm_store_si128((__m128i*)v111.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1088
	ctx.r3.s64 = 1088;
	// lvx128 v112,r3,r7
	_mm_store_si128((__m128i*)v112.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1104
	ctx.r3.s64 = 1104;
	// lvx128 v113,r3,r7
	_mm_store_si128((__m128i*)v113.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1120
	ctx.r3.s64 = 1120;
	// lvx128 v114,r3,r7
	_mm_store_si128((__m128i*)v114.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1136
	ctx.r3.s64 = 1136;
	// lvx128 v115,r3,r7
	_mm_store_si128((__m128i*)v115.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1152
	ctx.r3.s64 = 1152;
	// lvx128 v116,r3,r7
	_mm_store_si128((__m128i*)v116.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1168
	ctx.r3.s64 = 1168;
	// lvx128 v117,r3,r7
	_mm_store_si128((__m128i*)v117.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1184
	ctx.r3.s64 = 1184;
	// lvx128 v118,r3,r7
	_mm_store_si128((__m128i*)v118.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1200
	ctx.r3.s64 = 1200;
	// lvx128 v119,r3,r7
	_mm_store_si128((__m128i*)v119.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1216
	ctx.r3.s64 = 1216;
	// lvx128 v120,r3,r7
	_mm_store_si128((__m128i*)v120.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1232
	ctx.r3.s64 = 1232;
	// lvx128 v121,r3,r7
	_mm_store_si128((__m128i*)v121.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1248
	ctx.r3.s64 = 1248;
	// lvx128 v122,r3,r7
	_mm_store_si128((__m128i*)v122.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1264
	ctx.r3.s64 = 1264;
	// lvx128 v123,r3,r7
	_mm_store_si128((__m128i*)v123.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1280
	ctx.r3.s64 = 1280;
	// lvx128 v124,r3,r7
	_mm_store_si128((__m128i*)v124.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1296
	ctx.r3.s64 = 1296;
	// lvx128 v125,r3,r7
	_mm_store_si128((__m128i*)v125.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1312
	ctx.r3.s64 = 1312;
	// lvx128 v126,r3,r7
	_mm_store_si128((__m128i*)v126.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,1328
	ctx.r3.s64 = 1328;
	// lvx128 v127,r3,r7
	_mm_store_si128((__m128i*)v127.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r5,308(r7)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r7.u32 + 308);
	// lwz r4,304(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + 304);
	// mtlr r5
	// ld r1,144(r7)
	ctx.r1.u64 = PPC_LOAD_U64(ctx.r7.u32 + 144);
	// mtcr r4
	cr0.getLT() = (ctx.r4.u32 & 0x80000000) != 0;
	cr0.getGT() = (ctx.r4.u32 & 0x40000000) != 0;
	cr0.getEQ() = (ctx.r4.u32 & 0x20000000) != 0;
	cr0.getSO() = (ctx.r4.u32 & 0x10000000) != 0;
	cr1.getLT() = (ctx.r4.u32 & 0x8000000) != 0;
	cr1.getGT() = (ctx.r4.u32 & 0x4000000) != 0;
	cr1.getEQ() = (ctx.r4.u32 & 0x2000000) != 0;
	cr1.getSO() = (ctx.r4.u32 & 0x1000000) != 0;
	cr2.getLT() = (ctx.r4.u32 & 0x800000) != 0;
	cr2.getGT() = (ctx.r4.u32 & 0x400000) != 0;
	cr2.getEQ() = (ctx.r4.u32 & 0x200000) != 0;
	cr2.getSO() = (ctx.r4.u32 & 0x100000) != 0;
	cr3.getLT() = (ctx.r4.u32 & 0x80000) != 0;
	cr3.getGT() = (ctx.r4.u32 & 0x40000) != 0;
	cr3.getEQ() = (ctx.r4.u32 & 0x20000) != 0;
	cr3.getSO() = (ctx.r4.u32 & 0x10000) != 0;
	cr4.getLT() = (ctx.r4.u32 & 0x8000) != 0;
	cr4.getGT() = (ctx.r4.u32 & 0x4000) != 0;
	cr4.getEQ() = (ctx.r4.u32 & 0x2000) != 0;
	cr4.getSO() = (ctx.r4.u32 & 0x1000) != 0;
	cr5.getLT() = (ctx.r4.u32 & 0x800) != 0;
	cr5.getGT() = (ctx.r4.u32 & 0x400) != 0;
	cr5.getEQ() = (ctx.r4.u32 & 0x200) != 0;
	cr5.getSO() = (ctx.r4.u32 & 0x100) != 0;
	cr6.getLT() = (ctx.r4.u32 & 0x80) != 0;
	cr6.getGT() = (ctx.r4.u32 & 0x40) != 0;
	cr6.getEQ() = (ctx.r4.u32 & 0x20) != 0;
	cr6.getSO() = (ctx.r4.u32 & 0x10) != 0;
	cr7.getLT() = (ctx.r4.u32 & 0x8) != 0;
	cr7.getGT() = (ctx.r4.u32 & 0x4) != 0;
	cr7.getEQ() = (ctx.r4.u32 & 0x2) != 0;
	cr7.getSO() = (ctx.r4.u32 & 0x1) != 0;
	// mr r3,r6
	ctx.r3.u64 = ctx.r6.u64;
	// blr 
	return;
loc_823F228C:
	// lwz r3,4(r7)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// lwz r4,0(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// bl 0x823f9850
	sub_823F9850(ctx, base);
	// lwz r3,0(r7)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lwz r4,4(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// bl 0x824101fc
	__imp__RtlUnwind(ctx, base);
	// lwz r0,8(r1)
	r0.u64 = PPC_LOAD_U32(ctx.r1.u32 + 8);
	// mtlr r0
	// addi r1,r1,80
	ctx.r1.s64 = ctx.r1.s64 + 80;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F22C0"))) PPC_WEAK_FUNC(sub_823F22C0);
PPC_FUNC_IMPL(__imp__sub_823F22C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr1{};
	PPCCRRegister cr2{};
	PPCCRRegister cr3{};
	PPCCRRegister cr4{};
	PPCCRRegister cr5{};
	PPCCRRegister cr6{};
	PPCCRRegister cr7{};
	PPCRegister r0{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f14{};
	PPCRegister f15{};
	PPCRegister f16{};
	PPCRegister f17{};
	PPCRegister f18{};
	PPCRegister f19{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCVRegister v64{};
	PPCVRegister v65{};
	PPCVRegister v66{};
	PPCVRegister v67{};
	PPCVRegister v68{};
	PPCVRegister v69{};
	PPCVRegister v70{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// lis r4,-31987
	ctx.r4.s64 = -2096300032;
	// lwz r0,-15568(r4)
	r0.u64 = PPC_LOAD_U32(ctx.r4.u32 + -15568);
	// cmpwi r0,0
	cr0.compare<int32_t>(r0.s32, 0, xer);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bnectr 
	if (!cr0.getEQ()) {
		PPC_CALL_INDIRECT_FUNC(ctr.u32);
		return;
	}
	// mflr r0
	// mfcr r4
	ctx.r4.u64 = cr0.getLT() ? 0x80000000 : 0;
	ctx.r4.u64 |= cr0.getGT() ? 0x40000000 : 0;
	ctx.r4.u64 |= cr0.getEQ() ? 0x20000000 : 0;
	ctx.r4.u64 |= cr0.getSO() ? 0x10000000 : 0;
	ctx.r4.u64 |= cr1.getLT() ? 0x8000000 : 0;
	ctx.r4.u64 |= cr1.getGT() ? 0x4000000 : 0;
	ctx.r4.u64 |= cr1.getEQ() ? 0x2000000 : 0;
	ctx.r4.u64 |= cr1.getSO() ? 0x1000000 : 0;
	ctx.r4.u64 |= cr2.getLT() ? 0x800000 : 0;
	ctx.r4.u64 |= cr2.getGT() ? 0x400000 : 0;
	ctx.r4.u64 |= cr2.getEQ() ? 0x200000 : 0;
	ctx.r4.u64 |= cr2.getSO() ? 0x100000 : 0;
	ctx.r4.u64 |= cr3.getLT() ? 0x80000 : 0;
	ctx.r4.u64 |= cr3.getGT() ? 0x40000 : 0;
	ctx.r4.u64 |= cr3.getEQ() ? 0x20000 : 0;
	ctx.r4.u64 |= cr3.getSO() ? 0x10000 : 0;
	ctx.r4.u64 |= cr4.getLT() ? 0x8000 : 0;
	ctx.r4.u64 |= cr4.getGT() ? 0x4000 : 0;
	ctx.r4.u64 |= cr4.getEQ() ? 0x2000 : 0;
	ctx.r4.u64 |= cr4.getSO() ? 0x1000 : 0;
	ctx.r4.u64 |= cr5.getLT() ? 0x800 : 0;
	ctx.r4.u64 |= cr5.getGT() ? 0x400 : 0;
	ctx.r4.u64 |= cr5.getEQ() ? 0x200 : 0;
	ctx.r4.u64 |= cr5.getSO() ? 0x100 : 0;
	ctx.r4.u64 |= cr6.getLT() ? 0x80 : 0;
	ctx.r4.u64 |= cr6.getGT() ? 0x40 : 0;
	ctx.r4.u64 |= cr6.getEQ() ? 0x20 : 0;
	ctx.r4.u64 |= cr6.getSO() ? 0x10 : 0;
	ctx.r4.u64 |= cr7.getLT() ? 0x8 : 0;
	ctx.r4.u64 |= cr7.getGT() ? 0x4 : 0;
	ctx.r4.u64 |= cr7.getEQ() ? 0x2 : 0;
	ctx.r4.u64 |= cr7.getSO() ? 0x1 : 0;
	// stfd f14,0(r3)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r3.u32 + 0, f14.u64);
	// stfd f15,8(r3)
	PPC_STORE_U64(ctx.r3.u32 + 8, f15.u64);
	// stfd f16,16(r3)
	PPC_STORE_U64(ctx.r3.u32 + 16, f16.u64);
	// stfd f17,24(r3)
	PPC_STORE_U64(ctx.r3.u32 + 24, f17.u64);
	// stfd f18,32(r3)
	PPC_STORE_U64(ctx.r3.u32 + 32, f18.u64);
	// stfd f19,40(r3)
	PPC_STORE_U64(ctx.r3.u32 + 40, f19.u64);
	// stfd f20,48(r3)
	PPC_STORE_U64(ctx.r3.u32 + 48, f20.u64);
	// stfd f21,56(r3)
	PPC_STORE_U64(ctx.r3.u32 + 56, f21.u64);
	// stfd f22,64(r3)
	PPC_STORE_U64(ctx.r3.u32 + 64, f22.u64);
	// stfd f23,72(r3)
	PPC_STORE_U64(ctx.r3.u32 + 72, f23.u64);
	// stfd f24,80(r3)
	PPC_STORE_U64(ctx.r3.u32 + 80, f24.u64);
	// stfd f25,88(r3)
	PPC_STORE_U64(ctx.r3.u32 + 88, f25.u64);
	// stfd f26,96(r3)
	PPC_STORE_U64(ctx.r3.u32 + 96, f26.u64);
	// stfd f27,104(r3)
	PPC_STORE_U64(ctx.r3.u32 + 104, f27.u64);
	// stfd f28,112(r3)
	PPC_STORE_U64(ctx.r3.u32 + 112, f28.u64);
	// stfd f29,120(r3)
	PPC_STORE_U64(ctx.r3.u32 + 120, f29.u64);
	// stfd f30,128(r3)
	PPC_STORE_U64(ctx.r3.u32 + 128, f30.u64);
	// stfd f31,136(r3)
	PPC_STORE_U64(ctx.r3.u32 + 136, f31.u64);
	// std r13,152(r3)
	PPC_STORE_U64(ctx.r3.u32 + 152, ctx.r13.u64);
	// std r14,160(r3)
	PPC_STORE_U64(ctx.r3.u32 + 160, r14.u64);
	// std r15,168(r3)
	PPC_STORE_U64(ctx.r3.u32 + 168, r15.u64);
	// std r16,176(r3)
	PPC_STORE_U64(ctx.r3.u32 + 176, r16.u64);
	// std r17,184(r3)
	PPC_STORE_U64(ctx.r3.u32 + 184, r17.u64);
	// std r18,192(r3)
	PPC_STORE_U64(ctx.r3.u32 + 192, r18.u64);
	// std r19,200(r3)
	PPC_STORE_U64(ctx.r3.u32 + 200, r19.u64);
	// std r20,208(r3)
	PPC_STORE_U64(ctx.r3.u32 + 208, r20.u64);
	// std r21,216(r3)
	PPC_STORE_U64(ctx.r3.u32 + 216, r21.u64);
	// std r22,224(r3)
	PPC_STORE_U64(ctx.r3.u32 + 224, r22.u64);
	// std r23,232(r3)
	PPC_STORE_U64(ctx.r3.u32 + 232, r23.u64);
	// std r24,240(r3)
	PPC_STORE_U64(ctx.r3.u32 + 240, r24.u64);
	// std r25,248(r3)
	PPC_STORE_U64(ctx.r3.u32 + 248, r25.u64);
	// std r26,256(r3)
	PPC_STORE_U64(ctx.r3.u32 + 256, r26.u64);
	// std r27,264(r3)
	PPC_STORE_U64(ctx.r3.u32 + 264, r27.u64);
	// std r28,272(r3)
	PPC_STORE_U64(ctx.r3.u32 + 272, r28.u64);
	// std r29,280(r3)
	PPC_STORE_U64(ctx.r3.u32 + 280, r29.u64);
	// std r30,288(r3)
	PPC_STORE_U64(ctx.r3.u32 + 288, r30.u64);
	// std r31,296(r3)
	PPC_STORE_U64(ctx.r3.u32 + 296, r31.u64);
	// li r5,320
	ctx.r5.s64 = 320;
	// stvlx128 v64,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v64.u8[15 - i]);
	// li r5,336
	ctx.r5.s64 = 336;
	// stvlx128 v65,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v65.u8[15 - i]);
	// li r5,352
	ctx.r5.s64 = 352;
	// stvlx128 v66,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v66.u8[15 - i]);
	// li r5,368
	ctx.r5.s64 = 368;
	// stvlx128 v67,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v67.u8[15 - i]);
	// li r5,384
	ctx.r5.s64 = 384;
	// stvlx128 v68,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v68.u8[15 - i]);
	// li r5,400
	ctx.r5.s64 = 400;
	// stvlx128 v69,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v69.u8[15 - i]);
	// li r5,416
	ctx.r5.s64 = 416;
	// stvlx128 v70,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v70.u8[15 - i]);
	// li r5,432
	ctx.r5.s64 = 432;
	// stvlx128 v71,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v71.u8[15 - i]);
	// li r5,448
	ctx.r5.s64 = 448;
	// stvlx128 v72,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v72.u8[15 - i]);
	// li r5,464
	ctx.r5.s64 = 464;
	// stvlx128 v73,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v73.u8[15 - i]);
	// li r5,480
	ctx.r5.s64 = 480;
	// stvlx128 v74,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v74.u8[15 - i]);
	// li r5,496
	ctx.r5.s64 = 496;
	// stvlx128 v75,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v75.u8[15 - i]);
	// li r5,512
	ctx.r5.s64 = 512;
	// stvlx128 v76,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v76.u8[15 - i]);
	// li r5,528
	ctx.r5.s64 = 528;
	// stvlx128 v77,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v77.u8[15 - i]);
	// li r5,544
	ctx.r5.s64 = 544;
	// stvlx128 v78,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v78.u8[15 - i]);
	// li r5,560
	ctx.r5.s64 = 560;
	// stvlx128 v79,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v79.u8[15 - i]);
	// li r5,576
	ctx.r5.s64 = 576;
	// stvlx128 v80,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v80.u8[15 - i]);
	// li r5,592
	ctx.r5.s64 = 592;
	// stvlx128 v81,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v81.u8[15 - i]);
	// li r5,608
	ctx.r5.s64 = 608;
	// stvlx128 v82,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v82.u8[15 - i]);
	// li r5,624
	ctx.r5.s64 = 624;
	// stvlx128 v83,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v83.u8[15 - i]);
	// li r5,640
	ctx.r5.s64 = 640;
	// stvlx128 v84,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v84.u8[15 - i]);
	// li r5,656
	ctx.r5.s64 = 656;
	// stvlx128 v85,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v85.u8[15 - i]);
	// li r5,672
	ctx.r5.s64 = 672;
	// stvlx128 v86,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v86.u8[15 - i]);
	// li r5,688
	ctx.r5.s64 = 688;
	// stvlx128 v87,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v87.u8[15 - i]);
	// li r5,704
	ctx.r5.s64 = 704;
	// stvlx128 v88,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v88.u8[15 - i]);
	// li r5,720
	ctx.r5.s64 = 720;
	// stvlx128 v89,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v89.u8[15 - i]);
	// li r5,736
	ctx.r5.s64 = 736;
	// stvlx128 v90,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v90.u8[15 - i]);
	// li r5,752
	ctx.r5.s64 = 752;
	// stvlx128 v91,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v91.u8[15 - i]);
	// li r5,768
	ctx.r5.s64 = 768;
	// stvlx128 v92,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v92.u8[15 - i]);
	// li r5,784
	ctx.r5.s64 = 784;
	// stvlx128 v93,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v93.u8[15 - i]);
	// li r5,800
	ctx.r5.s64 = 800;
	// stvlx128 v94,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v94.u8[15 - i]);
	// li r5,816
	ctx.r5.s64 = 816;
	// stvlx128 v95,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v95.u8[15 - i]);
	// li r5,832
	ctx.r5.s64 = 832;
	// stvlx128 v96,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v96.u8[15 - i]);
	// li r5,848
	ctx.r5.s64 = 848;
	// stvlx128 v97,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v97.u8[15 - i]);
	// li r5,864
	ctx.r5.s64 = 864;
	// stvlx128 v98,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v98.u8[15 - i]);
	// li r5,880
	ctx.r5.s64 = 880;
	// stvlx128 v99,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v99.u8[15 - i]);
	// li r5,896
	ctx.r5.s64 = 896;
	// stvlx128 v100,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v100.u8[15 - i]);
	// li r5,912
	ctx.r5.s64 = 912;
	// stvlx128 v101,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v101.u8[15 - i]);
	// li r5,928
	ctx.r5.s64 = 928;
	// stvlx128 v102,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v102.u8[15 - i]);
	// li r5,944
	ctx.r5.s64 = 944;
	// stvlx128 v103,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v103.u8[15 - i]);
	// li r5,960
	ctx.r5.s64 = 960;
	// stvlx128 v104,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v104.u8[15 - i]);
	// li r5,976
	ctx.r5.s64 = 976;
	// stvlx128 v105,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v105.u8[15 - i]);
	// li r5,992
	ctx.r5.s64 = 992;
	// stvlx128 v106,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v106.u8[15 - i]);
	// li r5,1008
	ctx.r5.s64 = 1008;
	// stvlx128 v107,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v107.u8[15 - i]);
	// li r5,1024
	ctx.r5.s64 = 1024;
	// stvlx128 v108,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v108.u8[15 - i]);
	// li r5,1040
	ctx.r5.s64 = 1040;
	// stvlx128 v109,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v109.u8[15 - i]);
	// li r5,1056
	ctx.r5.s64 = 1056;
	// stvlx128 v110,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v110.u8[15 - i]);
	// li r5,1072
	ctx.r5.s64 = 1072;
	// stvlx128 v111,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v111.u8[15 - i]);
	// li r5,1088
	ctx.r5.s64 = 1088;
	// stvlx128 v112,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v112.u8[15 - i]);
	// li r5,1104
	ctx.r5.s64 = 1104;
	// stvlx128 v113,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v113.u8[15 - i]);
	// li r5,1120
	ctx.r5.s64 = 1120;
	// stvlx128 v114,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v114.u8[15 - i]);
	// li r5,1136
	ctx.r5.s64 = 1136;
	// stvlx128 v115,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v115.u8[15 - i]);
	// li r5,1152
	ctx.r5.s64 = 1152;
	// stvlx128 v116,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v116.u8[15 - i]);
	// li r5,1168
	ctx.r5.s64 = 1168;
	// stvlx128 v117,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v117.u8[15 - i]);
	// li r5,1184
	ctx.r5.s64 = 1184;
	// stvlx128 v118,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v118.u8[15 - i]);
	// li r5,1200
	ctx.r5.s64 = 1200;
	// stvlx128 v119,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v119.u8[15 - i]);
	// li r5,1216
	ctx.r5.s64 = 1216;
	// stvlx128 v120,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v120.u8[15 - i]);
	// li r5,1232
	ctx.r5.s64 = 1232;
	// stvlx128 v121,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v121.u8[15 - i]);
	// li r5,1248
	ctx.r5.s64 = 1248;
	// stvlx128 v122,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v122.u8[15 - i]);
	// li r5,1264
	ctx.r5.s64 = 1264;
	// stvlx128 v123,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v123.u8[15 - i]);
	// li r5,1280
	ctx.r5.s64 = 1280;
	// stvlx128 v124,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v124.u8[15 - i]);
	// li r5,1296
	ctx.r5.s64 = 1296;
	// stvlx128 v125,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v125.u8[15 - i]);
	// li r5,1312
	ctx.r5.s64 = 1312;
	// stvlx128 v126,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v126.u8[15 - i]);
	// li r5,1328
	ctx.r5.s64 = 1328;
	// stvlx128 v127,r5,r3
	ea = ctx.r5.u32 + ctx.r3.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, v127.u8[15 - i]);
	// stw r0,308(r3)
	PPC_STORE_U32(ctx.r3.u32 + 308, r0.u32);
	// stw r4,304(r3)
	PPC_STORE_U32(ctx.r3.u32 + 304, ctx.r4.u32);
	// std r1,144(r3)
	PPC_STORE_U64(ctx.r3.u32 + 144, ctx.r1.u64);
	// li r0,0
	r0.s64 = 0;
	// stw r0,312(r3)
	PPC_STORE_U32(ctx.r3.u32 + 312, r0.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F2590"))) PPC_WEAK_FUNC(sub_823F2590);
PPC_FUNC_IMPL(__imp__sub_823F2590) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// li r4,0
	ctx.r4.s64 = 0;
	// stfd f31,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, f31.u64);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// lis r11,-16377
	r11.s64 = -1073283072;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// ori r28,r11,65279
	r28.u64 = r11.u64 | 65279;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r3,-20944(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -20944);
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// lhz r30,160(r1)
	r30.u64 = PPC_LOAD_U16(ctx.r1.u32 + 160);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// rlwinm r11,r30,0,17,27
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x7FF0;
	// cmplwi cr6,r11,32752
	cr6.compare<uint32_t>(r11.u32, 32752, xer);
	// bne cr6,0x823f266c
	if (!cr6.getEQ()) goto loc_823F266C;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lfd f0,-19440(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + -19440);
	// stfd f0,0(r31)
	PPC_STORE_U64(r31.u32 + 0, f0.u64);
	// bl 0x823f7780
	sub_823F7780(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble 0x823f2644
	if (!cr0.getGT()) goto loc_823F2644;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// ble cr6,0x823f2628
	if (!cr6.getGT()) goto loc_823F2628;
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x823f2644
	if (!cr6.getEQ()) goto loc_823F2644;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// stfd f31,0(r31)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(r31.u32 + 0, f31.u64);
	// li r3,28
	ctx.r3.s64 = 28;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823f8a58
	sub_823F8A58(ctx, base);
	// b 0x823f26b0
	goto loc_823F26B0;
loc_823F2628:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfd f31,0(r31)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(r31.u32 + 0, f31.u64);
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// lfd f1,2752(r11)
	ctx.f1.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// bl 0x823f09b8
	sub_823F09B8(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// b 0x823f26a0
	goto loc_823F26A0;
loc_823F2644:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// li r4,28
	ctx.r4.s64 = 28;
	// li r3,8
	ctx.r3.s64 = 8;
	// lfd f0,2728(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2728);
	// fadd f2,f31,f0
	ctx.f2.f64 = f31.f64 + f0.f64;
	// stfd f2,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.f2.u64);
	// bl 0x823f8b60
	sub_823F8B60(ctx, base);
	// b 0x823f26b0
	goto loc_823F26B0;
loc_823F266C:
	// bl 0x823f9800
	sub_823F9800(ctx, base);
	// fsub f31,f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = f31.f64 - ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfd f31,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f31.u64);
	// stfd f1,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.f1.u64);
	// lfd f0,2752(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// bne cr6,0x823f26a0
	if (!cr6.getEQ()) goto loc_823F26A0;
	// lhz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// rlwinm r11,r30,0,16,16
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x8000;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// sth r11,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, r11.u16);
	// lfd f31,80(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
loc_823F26A0:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
loc_823F26B0:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823F26C0"))) PPC_WEAK_FUNC(sub_823F26C0);
PPC_FUNC_IMPL(__imp__sub_823F26C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x823f2718
	if (cr6.getEQ()) goto loc_823F2718;
loc_823F26C8:
	// lbz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// addi r11,r10,-65
	r11.s64 = ctx.r10.s64 + -65;
	// cmplwi cr6,r11,25
	cr6.compare<uint32_t>(r11.u32, 25, xer);
	// bgt cr6,0x823f26e0
	if (cr6.getGT()) goto loc_823F26E0;
	// addi r10,r10,32
	ctx.r10.s64 = ctx.r10.s64 + 32;
loc_823F26E0:
	// lbz r11,0(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// addi r9,r11,-65
	ctx.r9.s64 = r11.s64 + -65;
	// cmplwi cr6,r9,25
	cr6.compare<uint32_t>(ctx.r9.u32, 25, xer);
	// bgt cr6,0x823f26f8
	if (cr6.getGT()) goto loc_823F26F8;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
loc_823F26F8:
	// addic. r5,r5,-1
	xer.ca = ctx.r5.u32 > 0;
	ctx.r5.s64 = ctx.r5.s64 + -1;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x823f2710
	if (cr0.getEQ()) goto loc_823F2710;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x823f2710
	if (cr6.getEQ()) goto loc_823F2710;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// beq cr6,0x823f26c8
	if (cr6.getEQ()) goto loc_823F26C8;
loc_823F2710:
	// subf r3,r11,r10
	ctx.r3.s64 = ctx.r10.s64 - r11.s64;
	// blr 
	return;
loc_823F2718:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F2720"))) PPC_WEAK_FUNC(sub_823F2720);
PPC_FUNC_IMPL(__imp__sub_823F2720) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x823f276c
	if (!cr6.getEQ()) goto loc_823F276C;
loc_823F2738:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// lis r3,32767
	ctx.r3.s64 = 2147418112;
	// ori r3,r3,65535
	ctx.r3.u64 = ctx.r3.u64 | 65535;
	// b 0x823f27b8
	goto loc_823F27B8;
loc_823F276C:
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x823f2738
	if (cr6.getEQ()) goto loc_823F2738;
	// lis r11,32767
	r11.s64 = 2147418112;
	// ori r31,r11,65535
	r31.u64 = r11.u64 | 65535;
	// cmplw cr6,r5,r31
	cr6.compare<uint32_t>(ctx.r5.u32, r31.u32, xer);
	// ble cr6,0x823f27b4
	if (!cr6.getGT()) goto loc_823F27B4;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x823f27b8
	goto loc_823F27B8;
loc_823F27B4:
	// bl 0x823f26c0
	sub_823F26C0(ctx, base);
loc_823F27B8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F27D0"))) PPC_WEAK_FUNC(sub_823F27D0);
PPC_FUNC_IMPL(__imp__sub_823F27D0) {
	PPC_FUNC_PROLOGUE();
	// b 0x8240fc1c
	__imp__KeTlsAlloc(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F27D8"))) PPC_WEAK_FUNC(sub_823F27D8);
PPC_FUNC_IMPL(__imp__sub_823F27D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-32015
	r30.s64 = -2098135040;
	// lwz r3,-20936(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + -20936);
	// bl 0x8240fbfc
	__imp__KeTlsGetValue(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x823f2814
	if (!cr0.getEQ()) goto loc_823F2814;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// lwz r3,-20936(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + -20936);
	// lwz r31,-20096(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + -20096);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x8240fc0c
	__imp__KeTlsSetValue(ctx, base);
loc_823F2814:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F2830"))) PPC_WEAK_FUNC(sub_823F2830);
PPC_FUNC_IMPL(__imp__sub_823F2830) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32015
	r31.s64 = -2098135040;
	// li r30,-1
	r30.s64 = -1;
	// lwz r3,-20940(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -20940);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x823f2870
	if (cr6.getEQ()) goto loc_823F2870;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// lwz r11,-20088(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20088);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r11,r30
	r11.u64 = r30.u64;
	// stw r11,-20940(r31)
	PPC_STORE_U32(r31.u32 + -20940, r11.u32);
loc_823F2870:
	// lis r31,-32015
	r31.s64 = -2098135040;
	// lwz r3,-20936(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -20936);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x823f288c
	if (cr6.getEQ()) goto loc_823F288C;
	// bl 0x8240fc2c
	__imp__KeTlsFree(ctx, base);
	// mr r11,r30
	r11.u64 = r30.u64;
	// stw r11,-20936(r31)
	PPC_STORE_U32(r31.u32 + -20936, r11.u32);
loc_823F288C:
	// bl 0x823f7e70
	sub_823F7E70(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F28A8"))) PPC_WEAK_FUNC(sub_823F28A8);
PPC_FUNC_IMPL(__imp__sub_823F28A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8235df68
	sub_8235DF68(ctx, base);
	// lis r30,-32015
	r30.s64 = -2098135040;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r31,-20940(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + -20940);
	// bl 0x823f27d8
	sub_823F27D8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x823f2948
	if (!cr0.getEQ()) goto loc_823F2948;
	// li r4,196
	ctx.r4.s64 = 196;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823f1f38
	sub_823F1F38(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x823f2948
	if (cr0.getEQ()) goto loc_823F2948;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// lwz r3,-20940(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + -20940);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r11,-20092(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20092);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f293c
	if (cr0.getEQ()) goto loc_823F293C;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r11,r11,-19112
	r11.s64 = r11.s64 + -19112;
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// stw r11,92(r31)
	PPC_STORE_U32(r31.u32 + 92, r11.u32);
	// bl 0x8235eaa8
	sub_8235EAA8(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// b 0x823f2948
	goto loc_823F2948;
loc_823F293C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// li r31,0
	r31.s64 = 0;
loc_823F2948:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8235f2b8
	sub_8235F2B8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F2960"))) PPC_WEAK_FUNC(sub_823F2960);
PPC_FUNC_IMPL(__imp__sub_823F2960) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823f28a8
	sub_823F28A8(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x823f2984
	if (!cr0.getEQ()) goto loc_823F2984;
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x823ef600
	sub_823EF600(ctx, base);
loc_823F2984:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F29A0"))) PPC_WEAK_FUNC(sub_823F29A0);
PPC_FUNC_IMPL(__imp__sub_823F29A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x823f2a3c
	if (cr6.getEQ()) goto loc_823F2A3C;
	// lwz r3,36(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 36);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f29cc
	if (cr0.getEQ()) goto loc_823F29CC;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823F29CC:
	// lwz r3,44(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f29dc
	if (cr0.getEQ()) goto loc_823F29DC;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823F29DC:
	// lwz r3,52(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f29ec
	if (cr0.getEQ()) goto loc_823F29EC;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823F29EC:
	// lwz r3,60(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f29fc
	if (cr0.getEQ()) goto loc_823F29FC;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823F29FC:
	// lwz r3,68(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f2a0c
	if (cr0.getEQ()) goto loc_823F2A0C;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823F2A0C:
	// lwz r3,72(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 72);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f2a1c
	if (cr0.getEQ()) goto loc_823F2A1C;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823F2A1C:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lwz r3,92(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 92);
	// addi r11,r11,-19112
	r11.s64 = r11.s64 + -19112;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x823f2a34
	if (cr6.getEQ()) goto loc_823F2A34;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823F2A34:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823F2A3C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F2A50"))) PPC_WEAK_FUNC(sub_823F2A50);
PPC_FUNC_IMPL(__imp__sub_823F2A50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32015
	r31.s64 = -2098135040;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lis r29,-32015
	r29.s64 = -2098135040;
	// lwz r11,-20940(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -20940);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beq cr6,0x823f2acc
	if (cr6.getEQ()) goto loc_823F2ACC;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x823f2aac
	if (!cr6.getEQ()) goto loc_823F2AAC;
	// lwz r3,-20936(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + -20936);
	// bl 0x8240fbfc
	__imp__KeTlsGetValue(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f2aac
	if (cr0.getEQ()) goto loc_823F2AAC;
	// lwz r3,-20936(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + -20936);
	// lwz r30,-20940(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + -20940);
	// bl 0x8240fbfc
	__imp__KeTlsGetValue(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
loc_823F2AAC:
	// lis r11,-31987
	r11.s64 = -2096300032;
	// lwz r3,-20940(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -20940);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,-20092(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20092);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823f29a0
	sub_823F29A0(ctx, base);
loc_823F2ACC:
	// lwz r3,-20936(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + -20936);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x823f2ae0
	if (cr6.getEQ()) goto loc_823F2AE0;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8240fc0c
	__imp__KeTlsSetValue(ctx, base);
loc_823F2AE0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F2AE8"))) PPC_WEAK_FUNC(sub_823F2AE8);
PPC_FUNC_IMPL(__imp__sub_823F2AE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32193
	r11.s64 = -2109800448;
	// lis r30,-31987
	r30.s64 = -2096300032;
	// addi r11,r11,10192
	r11.s64 = r11.s64 + 10192;
	// lis r8,-32191
	ctx.r8.s64 = -2109669376;
	// lis r31,-31987
	r31.s64 = -2096300032;
	// lis r9,-32191
	ctx.r9.s64 = -2109669376;
	// lis r29,-31987
	r29.s64 = -2096300032;
	// stw r11,-20100(r30)
	PPC_STORE_U32(r30.u32 + -20100, r11.u32);
	// addi r11,r8,-1028
	r11.s64 = ctx.r8.s64 + -1028;
	// lis r10,-32191
	ctx.r10.s64 = -2109669376;
	// stw r11,-20096(r31)
	PPC_STORE_U32(r31.u32 + -20096, r11.u32);
	// addi r11,r9,-1012
	r11.s64 = ctx.r9.s64 + -1012;
	// lis r9,-31987
	ctx.r9.s64 = -2096300032;
	// stw r11,-20092(r29)
	PPC_STORE_U32(r29.u32 + -20092, r11.u32);
	// addi r11,r10,-980
	r11.s64 = ctx.r10.s64 + -980;
	// stw r11,-20088(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20088, r11.u32);
	// bl 0x8240fc1c
	__imp__KeTlsAlloc(ctx, base);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// stw r3,-20936(r11)
	PPC_STORE_U32(r11.u32 + -20936, ctx.r3.u32);
	// beq cr6,0x823f2c0c
	if (cr6.getEQ()) goto loc_823F2C0C;
	// lwz r4,-20096(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -20096);
	// bl 0x8240fc0c
	__imp__KeTlsSetValue(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f2c0c
	if (cr0.getEQ()) goto loc_823F2C0C;
	// bl 0x823ef840
	sub_823EF840(ctx, base);
	// bl 0x823f7de8
	sub_823F7DE8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f2c08
	if (cr0.getEQ()) goto loc_823F2C08;
	// lis r11,-32193
	r11.s64 = -2109800448;
	// addi r3,r11,10656
	ctx.r3.s64 = r11.s64 + 10656;
	// lwz r11,-20100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -20100);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lis r30,-32015
	r30.s64 = -2098135040;
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// stw r3,-20940(r30)
	PPC_STORE_U32(r30.u32 + -20940, ctx.r3.u32);
	// beq cr6,0x823f2c08
	if (cr6.getEQ()) goto loc_823F2C08;
	// li r4,196
	ctx.r4.s64 = 196;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823f1f38
	sub_823F1F38(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x823f2c08
	if (cr0.getEQ()) goto loc_823F2C08;
	// lwz r3,-20940(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + -20940);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r11,-20092(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -20092);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f2c08
	if (cr0.getEQ()) goto loc_823F2C08;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r11,r11,-19112
	r11.s64 = r11.s64 + -19112;
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// stw r11,92(r31)
	PPC_STORE_U32(r31.u32 + 92, r11.u32);
	// bl 0x8235eaa8
	sub_8235EAA8(ctx, base);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// addi r3,r11,-20112
	ctx.r3.s64 = r11.s64 + -20112;
	// lis r11,-32192
	r11.s64 = -2109734912;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r11,r11,-26520
	r11.s64 = r11.s64 + -26520;
	// li r4,1
	ctx.r4.s64 = 1;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bl 0x8235f790
	sub_8235F790(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x823f2c10
	goto loc_823F2C10;
loc_823F2C08:
	// bl 0x823f2830
	sub_823F2830(ctx, base);
loc_823F2C0C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F2C10:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F2C18"))) PPC_WEAK_FUNC(sub_823F2C18);
PPC_FUNC_IMPL(__imp__sub_823F2C18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
loc_823F2C24:
	// lhz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// addi r4,r4,2
	ctx.r4.s64 = ctx.r4.s64 + 2;
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// beq 0x823f2c44
	if (cr0.getEQ()) goto loc_823F2C44;
	// addic. r5,r5,-1
	xer.ca = ctx.r5.u32 > 0;
	ctx.r5.s64 = ctx.r5.s64 + -1;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// bne 0x823f2c24
	if (!cr0.getEQ()) goto loc_823F2C24;
loc_823F2C44:
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// addic. r10,r5,-1
	xer.ca = ctx.r5.u32 > 0;
	ctx.r10.s64 = ctx.r5.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beqlr 
	if (cr0.getEQ()) return;
	// li r9,0
	ctx.r9.s64 = 0;
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beqlr 
	if (cr0.getEQ()) return;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_823F2C64:
	// sth r9,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r9.u16);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// bdnz 0x823f2c64
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_823F2C64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F2C78"))) PPC_WEAK_FUNC(sub_823F2C78);
PPC_FUNC_IMPL(__imp__sub_823F2C78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	// addi r11,r1,-32
	r11.s64 = ctx.r1.s64 + -32;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,32
	ctx.r10.s64 = 32;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_823F2C88:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x823f2c88
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_823F2C88;
	// li r8,1
	ctx.r8.s64 = 1;
	// b 0x823f2cb8
	goto loc_823F2CB8;
loc_823F2C9C:
	// rlwinm r10,r11,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// clrlwi r11,r11,29
	r11.u64 = r11.u32 & 0x7;
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// lbzx r6,r10,r9
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// slw r7,r8,r11
	ctx.r7.u64 = r11.u8 & 0x20 ? 0 : (ctx.r8.u32 << (r11.u8 & 0x3F));
	// or r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 | ctx.r6.u64;
	// stbx r7,r10,r9
	PPC_STORE_U8(ctx.r10.u32 + ctx.r9.u32, ctx.r7.u8);
loc_823F2CB8:
	// lbz r11,0(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// addi r9,r1,-32
	ctx.r9.s64 = ctx.r1.s64 + -32;
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x823f2c9c
	if (!cr0.getEQ()) goto loc_823F2C9C;
	// lbz r7,-32(r1)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r1.u32 + -32);
	// li r11,0
	r11.s64 = 0;
	// lbz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// ori r7,r7,1
	ctx.r7.u64 = ctx.r7.u64 | 1;
	// stb r7,-32(r1)
	PPC_STORE_U8(ctx.r1.u32 + -32, ctx.r7.u8);
	// b 0x823f2cec
	goto loc_823F2CEC;
loc_823F2CE0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r9,r1,-32
	ctx.r9.s64 = ctx.r1.s64 + -32;
	// lbzx r10,r11,r3
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + ctx.r3.u32);
loc_823F2CEC:
	// clrlwi r7,r10,29
	ctx.r7.u64 = ctx.r10.u32 & 0x7;
	// rlwinm r10,r10,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 29) & 0x1FFFFFFF;
	// lbzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// slw r9,r8,r7
	ctx.r9.u64 = ctx.r7.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r7.u8 & 0x3F));
	// and. r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 & ctx.r10.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f2ce0
	if (cr0.getEQ()) goto loc_823F2CE0;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F2D10"))) PPC_WEAK_FUNC(sub_823F2D10);
PPC_FUNC_IMPL(__imp__sub_823F2D10) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// bl 0x823edbb8
	sub_823EDBB8(ctx, base);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f2d70
	if (!cr6.getEQ()) goto loc_823F2D70;
loc_823F2D40:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x823f2dc4
	goto loc_823F2DC4;
loc_823F2D70:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x823f2d40
	if (cr6.getEQ()) goto loc_823F2D40;
	// lis r11,16383
	r11.s64 = 1073676288;
	// stw r31,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r31.u32);
	// li r10,73
	ctx.r10.s64 = 73;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// ori r11,r11,65535
	r11.u64 = r11.u64 | 65535;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// ble cr6,0x823f2da4
	if (!cr6.getGT()) goto loc_823F2DA4;
	// lis r11,32767
	r11.s64 = 2147418112;
	// ori r11,r11,65535
	r11.u64 = r11.u64 | 65535;
	// b 0x823f2da8
	goto loc_823F2DA8;
loc_823F2DA4:
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
loc_823F2DA8:
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mtctr r29
	ctr.u64 = r29.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_823F2DC4:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_823F2DD0"))) PPC_WEAK_FUNC(sub_823F2DD0);
PPC_FUNC_IMPL(__imp__sub_823F2DD0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r9,r1,128
	ctx.r9.s64 = ctx.r1.s64 + 128;
	// lis r11,-32192
	r11.s64 = -2109734912;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r3,r11,-26248
	ctx.r3.s64 = r11.s64 + -26248;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823f2d10
	sub_823F2D10(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F2E30"))) PPC_WEAK_FUNC(sub_823F2E30);
PPC_FUNC_IMPL(__imp__sub_823F2E30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f2e84
	if (!cr6.getEQ()) goto loc_823F2E84;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f1,2752(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// b 0x823f2ed4
	goto loc_823F2ED4;
loc_823F2E84:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r30,r11,-19456
	r30.s64 = r11.s64 + -19456;
	// b 0x823f2e94
	goto loc_823F2E94;
loc_823F2E90:
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
loc_823F2E94:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lhz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x823faa60
	sub_823FAA60(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f2e90
	if (!cr0.getEQ()) goto loc_823F2E90;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823edbb8
	sub_823EDBB8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// bl 0x823fa9a8
	sub_823FA9A8(ctx, base);
	// lfd f1,16(r3)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r3.u32 + 16);
loc_823F2ED4:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F2EF0"))) PPC_WEAK_FUNC(sub_823F2EF0);
PPC_FUNC_IMPL(__imp__sub_823F2EF0) {
	PPC_FUNC_PROLOGUE();
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x823f2e30
	sub_823F2E30(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F2EF8"))) PPC_WEAK_FUNC(sub_823F2EF8);
PPC_FUNC_IMPL(__imp__sub_823F2EF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lhz r11,0(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f2f20
	if (cr0.getEQ()) goto loc_823F2F20;
	// clrlwi r10,r4,16
	ctx.r10.u64 = ctx.r4.u32 & 0xFFFF;
loc_823F2F08:
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x823f2f20
	if (cr6.getEQ()) goto loc_823F2F20;
	// addi r3,r3,2
	ctx.r3.s64 = ctx.r3.s64 + 2;
	// lhz r11,0(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x823f2f08
	if (!cr0.getEQ()) goto loc_823F2F08;
loc_823F2F20:
	// lhz r11,0(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// clrlwi r10,r4,16
	ctx.r10.u64 = ctx.r4.u32 & 0xFFFF;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F2F38"))) PPC_WEAK_FUNC(sub_823F2F38);
PPC_FUNC_IMPL(__imp__sub_823F2F38) {
	PPC_FUNC_PROLOGUE();
	// li r5,10
	ctx.r5.s64 = 10;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x823fb710
	sub_823FB710(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F2F48"))) PPC_WEAK_FUNC(sub_823F2F48);
PPC_FUNC_IMPL(__imp__sub_823F2F48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x823f2f90
	if (!cr6.getEQ()) goto loc_823F2F90;
loc_823F2F5C:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// lis r3,32767
	ctx.r3.s64 = 2147418112;
	// ori r3,r3,65535
	ctx.r3.u64 = ctx.r3.u64 | 65535;
	// b 0x823f3000
	goto loc_823F3000;
loc_823F2F90:
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x823f2f5c
	if (cr6.getEQ()) goto loc_823F2F5C;
loc_823F2F98:
	// lhz r11,0(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// cmplwi cr6,r11,65
	cr6.compare<uint32_t>(r11.u32, 65, xer);
	// blt cr6,0x823f2fb0
	if (cr6.getLT()) goto loc_823F2FB0;
	// cmplwi cr6,r11,90
	cr6.compare<uint32_t>(r11.u32, 90, xer);
	// addi r10,r11,32
	ctx.r10.s64 = r11.s64 + 32;
	// ble cr6,0x823f2fb4
	if (!cr6.getGT()) goto loc_823F2FB4;
loc_823F2FB0:
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F2FB4:
	// lhz r11,0(r4)
	r11.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// clrlwi r9,r10,16
	ctx.r9.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,65
	cr6.compare<uint32_t>(r11.u32, 65, xer);
	// blt cr6,0x823f2fd0
	if (cr6.getLT()) goto loc_823F2FD0;
	// cmplwi cr6,r11,90
	cr6.compare<uint32_t>(r11.u32, 90, xer);
	// addi r10,r11,32
	ctx.r10.s64 = r11.s64 + 32;
	// ble cr6,0x823f2fd4
	if (!cr6.getGT()) goto loc_823F2FD4;
loc_823F2FD0:
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F2FD4:
	// clrlwi. r11,r9,16
	r11.u64 = ctx.r9.u32 & 0xFFFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// addi r3,r3,2
	ctx.r3.s64 = ctx.r3.s64 + 2;
	// addi r4,r4,2
	ctx.r4.s64 = ctx.r4.s64 + 2;
	// beq 0x823f2ff4
	if (cr0.getEQ()) goto loc_823F2FF4;
	// clrlwi r8,r10,16
	ctx.r8.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// beq cr6,0x823f2f98
	if (cr6.getEQ()) goto loc_823F2F98;
loc_823F2FF4:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// clrlwi r10,r9,16
	ctx.r10.u64 = ctx.r9.u32 & 0xFFFF;
	// subf r3,r11,r10
	ctx.r3.s64 = ctx.r10.s64 - r11.s64;
loc_823F3000:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3010"))) PPC_WEAK_FUNC(sub_823F3010);
PPC_FUNC_IMPL(__imp__sub_823F3010) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r6
	r31.u64 = ctx.r6.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f3038
	if (!cr6.getEQ()) goto loc_823F3038;
loc_823F3030:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x823f306c
	goto loc_823F306C;
loc_823F3038:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x823f3074
	if (!cr6.getEQ()) goto loc_823F3074;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
loc_823F3068:
	// li r3,22
	ctx.r3.s64 = 22;
loc_823F306C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_823F3074:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x823f3094
	if (cr6.getEQ()) goto loc_823F3094;
	// cmplw cr6,r30,r31
	cr6.compare<uint32_t>(r30.u32, r31.u32, xer);
	// blt cr6,0x823f3094
	if (cr6.getLT()) goto loc_823F3094;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// b 0x823f3030
	goto loc_823F3030;
loc_823F3094:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x823f30d4
	if (!cr6.getEQ()) goto loc_823F30D4;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r31,22
	r31.s64 = 22;
loc_823F30B0:
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r31.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x823f306c
	goto loc_823F306C;
loc_823F30D4:
	// cmplw cr6,r30,r31
	cr6.compare<uint32_t>(r30.u32, r31.u32, xer);
	// bge cr6,0x823f3068
	if (!cr6.getLT()) goto loc_823F3068;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r31,34
	r31.s64 = 34;
	// b 0x823f30b0
	goto loc_823F30B0;
}

__attribute__((alias("__imp__sub_823F30E8"))) PPC_WEAK_FUNC(sub_823F30E8);
PPC_FUNC_IMPL(__imp__sub_823F30E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x823f3190
	if (cr6.getEQ()) goto loc_823F3190;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x823f313c
	if (!cr6.getEQ()) goto loc_823F313C;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x823f3194
	goto loc_823F3194;
loc_823F313C:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f3170
	if (!cr6.getEQ()) goto loc_823F3170;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r31,22
	r31.s64 = 22;
loc_823F314C:
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r31.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x823f3194
	goto loc_823F3194;
loc_823F3170:
	// cmplw cr6,r4,r6
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r6.u32, xer);
	// bge cr6,0x823f3184
	if (!cr6.getLT()) goto loc_823F3184;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r31,34
	r31.s64 = 34;
	// b 0x823f314c
	goto loc_823F314C;
loc_823F3184:
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// bl 0x823ef8a0
	sub_823EF8A0(ctx, base);
loc_823F3190:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F3194:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F31A8"))) PPC_WEAK_FUNC(sub_823F31A8);
PPC_FUNC_IMPL(__imp__sub_823F31A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// stw r31,144(r3)
	PPC_STORE_U32(ctx.r3.u32 + 144, r31.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F31D8"))) PPC_WEAK_FUNC(sub_823F31D8);
PPC_FUNC_IMPL(__imp__sub_823F31D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r3,144(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 144);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3200"))) PPC_WEAK_FUNC(sub_823F3200);
PPC_FUNC_IMPL(__imp__sub_823F3200) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,12(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr 
	if (cr0.getEQ()) return;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3220"))) PPC_WEAK_FUNC(sub_823F3220);
PPC_FUNC_IMPL(__imp__sub_823F3220) {
	PPC_FUNC_PROLOGUE();
	// li r5,2624
	ctx.r5.s64 = 2624;
	// b 0x823ef8a0
	sub_823EF8A0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F3228"))) PPC_WEAK_FUNC(sub_823F3228);
PPC_FUNC_IMPL(__imp__sub_823F3228) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x823fb730
	sub_823FB730(ctx, base);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x823f3290
	if (cr0.getEQ()) goto loc_823F3290;
	// lwz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mulli r11,r10,20
	r11.s64 = ctx.r10.s64 * 20;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// addi r11,r11,-12
	r11.s64 = r11.s64 + -12;
loc_823F3268:
	// lwz r8,-4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// addi r9,r11,-8
	ctx.r9.s64 = r11.s64 + -8;
	// cmpw cr6,r3,r8
	cr6.compare<int32_t>(ctx.r3.s32, ctx.r8.s32, xer);
	// ble cr6,0x823f3284
	if (!cr6.getGT()) goto loc_823F3284;
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r3,r8
	cr6.compare<int32_t>(ctx.r3.s32, ctx.r8.s32, xer);
	// ble cr6,0x823f32b4
	if (!cr6.getGT()) goto loc_823F32B4;
loc_823F3284:
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// addi r11,r11,-20
	r11.s64 = r11.s64 + -20;
	// bne 0x823f3268
	if (!cr0.getEQ()) goto loc_823F3268;
loc_823F3290:
	// li r11,0
	r11.s64 = 0;
loc_823F3294:
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_823F32B4:
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// b 0x823f3294
	goto loc_823F3294;
}

__attribute__((alias("__imp__sub_823F32C0"))) PPC_WEAK_FUNC(sub_823F32C0);
PPC_FUNC_IMPL(__imp__sub_823F32C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823f32f4
	if (cr6.getEQ()) goto loc_823F32F4;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f32f4
	if (cr0.getEQ()) goto loc_823F32F4;
	// lwz r29,4(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// b 0x823f32f8
	goto loc_823F32F8;
loc_823F32F4:
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
loc_823F32F8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x823fb730
	sub_823FB730(ctx, base);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x823f3348
	if (cr0.getEQ()) goto loc_823F3348;
	// lwz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mulli r11,r10,20
	r11.s64 = ctx.r10.s64 * 20;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// addi r11,r11,-12
	r11.s64 = r11.s64 + -12;
loc_823F3320:
	// lwz r8,-4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// addi r9,r11,-8
	ctx.r9.s64 = r11.s64 + -8;
	// cmpw cr6,r3,r8
	cr6.compare<int32_t>(ctx.r3.s32, ctx.r8.s32, xer);
	// ble cr6,0x823f333c
	if (!cr6.getGT()) goto loc_823F333C;
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r3,r8
	cr6.compare<int32_t>(ctx.r3.s32, ctx.r8.s32, xer);
	// ble cr6,0x823f335c
	if (!cr6.getGT()) goto loc_823F335C;
loc_823F333C:
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// addi r11,r11,-20
	r11.s64 = r11.s64 + -20;
	// bne 0x823f3320
	if (!cr0.getEQ()) goto loc_823F3320;
loc_823F3348:
	// li r11,0
	r11.s64 = 0;
loc_823F334C:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f3364
	if (!cr6.getEQ()) goto loc_823F3364;
	// li r6,-1
	ctx.r6.s64 = -1;
	// b 0x823f336c
	goto loc_823F336C;
loc_823F335C:
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// b 0x823f334c
	goto loc_823F334C;
loc_823F3364:
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// addi r6,r11,1
	ctx.r6.s64 = r11.s64 + 1;
loc_823F336C:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823fb978
	sub_823FB978(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F3388"))) PPC_WEAK_FUNC(sub_823F3388);
PPC_FUNC_IMPL(__imp__sub_823F3388) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,4(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r7,-4(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// lwz r11,12(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823f33b0
	if (cr6.getEQ()) goto loc_823F33B0;
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f33b0
	if (cr0.getEQ()) goto loc_823F33B0;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 4);
loc_823F33B0:
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// b 0x823fc650
	sub_823FC650(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F33C0"))) PPC_WEAK_FUNC(sub_823F33C0);
PPC_FUNC_IMPL(__imp__sub_823F33C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// mr r25,r9
	r25.u64 = ctx.r9.u64;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r30,176(r3)
	PPC_STORE_U32(ctx.r3.u32 + 176, r30.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x823fc650
	sub_823FC650(ctx, base);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,1
	ctx.r9.s64 = 1;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r10,176(r11)
	PPC_STORE_U32(r11.u32 + 176, ctx.r10.u32);
	// stw r9,0(r25)
	PPC_STORE_U32(r25.u32 + 0, ctx.r9.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_823F3438"))) PPC_WEAK_FUNC(sub_823F3438);
PPC_FUNC_IMPL(__imp__sub_823F3438) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29440(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29440);
	// mflr r12
	// bl 0x823ed13c
	// addi r31,r1,-128
	r31.s64 = ctx.r1.s64 + -128;
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r30,148(r31)
	PPC_STORE_U32(r31.u32 + 148, r30.u32);
	// stw r4,156(r31)
	PPC_STORE_U32(r31.u32 + 156, ctx.r4.u32);
	// stw r5,164(r31)
	PPC_STORE_U32(r31.u32 + 164, ctx.r5.u32);
	// stw r6,172(r31)
	PPC_STORE_U32(r31.u32 + 172, ctx.r6.u32);
	// stw r7,180(r31)
	PPC_STORE_U32(r31.u32 + 180, ctx.r7.u32);
	// li r29,0
	r29.s64 = 0;
	// stw r29,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r29.u32);
	// stw r30,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r30.u32);
	// stw r5,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r5.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r31,88
	ctx.r4.s64 = r31.s64 + 88;
	// lwz r11,116(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 116);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r29,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r29.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// addi r1,r31,128
	ctx.r1.s64 = r31.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F3440"))) PPC_WEAK_FUNC(sub_823F3440);
PPC_FUNC_IMPL(__imp__sub_823F3440) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// addi r31,r1,-128
	r31.s64 = ctx.r1.s64 + -128;
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r30,148(r31)
	PPC_STORE_U32(r31.u32 + 148, r30.u32);
	// stw r4,156(r31)
	PPC_STORE_U32(r31.u32 + 156, ctx.r4.u32);
	// stw r5,164(r31)
	PPC_STORE_U32(r31.u32 + 164, ctx.r5.u32);
	// stw r6,172(r31)
	PPC_STORE_U32(r31.u32 + 172, ctx.r6.u32);
	// stw r7,180(r31)
	PPC_STORE_U32(r31.u32 + 180, ctx.r7.u32);
	// li r29,0
	r29.s64 = 0;
	// stw r29,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r29.u32);
	// stw r30,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r30.u32);
	// stw r5,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r5.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r31,88
	ctx.r4.s64 = r31.s64 + 88;
	// lwz r11,116(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 116);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r29,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r29.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// addi r1,r31,128
	ctx.r1.s64 = r31.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F34B8"))) PPC_WEAK_FUNC(sub_823F34B8);
PPC_FUNC_IMPL(__imp__sub_823F34B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-128
	r31.s64 = r12.s64 + -128;
	// mflr r12
	// stw r12,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r9,r31,80
	ctx.r9.s64 = r31.s64 + 80;
	// lwz r8,180(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// lwz r7,172(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 172);
	// lwz r6,164(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// lwz r5,156(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 156);
	// lwz r4,148(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 148);
	// bl 0x823f33c0
	sub_823F33C0(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// lwz r12,-16(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -16);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3500"))) PPC_WEAK_FUNC(sub_823F3500);
PPC_FUNC_IMPL(__imp__sub_823F3500) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r4,0(r8)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// li r24,0
	r24.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// lwz r30,12(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// mr r28,r24
	r28.u64 = r24.u64;
	// bl 0x823fb730
	sub_823FB730(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x823f3544
	if (!cr6.getEQ()) goto loc_823F3544;
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823F3544:
	// li r11,-1
	r11.s64 = -1;
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// stw r11,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r11.u32);
	// stw r11,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r11.u32);
	// beq cr6,0x823f3590
	if (cr6.getEQ()) goto loc_823F3590;
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mulli r11,r30,20
	r11.s64 = r30.s64 * 20;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,-12
	r11.s64 = r11.s64 + -12;
loc_823F356C:
	// lwz r10,-4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// cmpw cr6,r29,r10
	cr6.compare<int32_t>(r29.s32, ctx.r10.s32, xer);
	// ble cr6,0x823f3584
	if (!cr6.getGT()) goto loc_823F3584;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r29,r10
	cr6.compare<int32_t>(r29.s32, ctx.r10.s32, xer);
	// ble cr6,0x823f3590
	if (!cr6.getGT()) goto loc_823F3590;
loc_823F3584:
	// addic. r9,r9,-1
	xer.ca = ctx.r9.u32 > 0;
	ctx.r9.s64 = ctx.r9.s64 + -1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// addi r11,r11,-20
	r11.s64 = r11.s64 + -20;
	// bne 0x823f356c
	if (!cr0.getEQ()) goto loc_823F356C;
loc_823F3590:
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x823f35a8
	if (cr6.getEQ()) goto loc_823F35A8;
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mulli r11,r9,20
	r11.s64 = ctx.r9.s64 * 20;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r28,r11,-20
	r28.s64 = r11.s64 + -20;
loc_823F35A8:
	// mr r10,r24
	ctx.r10.u64 = r24.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x823f3634
	if (cr6.getEQ()) goto loc_823F3634;
	// mr r9,r24
	ctx.r9.u64 = r24.u64;
loc_823F35B8:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// beq cr6,0x823f35e8
	if (cr6.getEQ()) goto loc_823F35E8;
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r7,4(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// cmpw cr6,r8,r7
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r7.s32, xer);
	// ble cr6,0x823f3618
	if (!cr6.getGT()) goto loc_823F3618;
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r7,8(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// cmpw cr6,r8,r7
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r7.s32, xer);
	// bgt cr6,0x823f3618
	if (cr6.getGT()) goto loc_823F3618;
loc_823F35E8:
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r25,r8
	cr6.compare<int32_t>(r25.s32, ctx.r8.s32, xer);
	// blt cr6,0x823f3618
	if (cr6.getLT()) goto loc_823F3618;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmpw cr6,r25,r11
	cr6.compare<int32_t>(r25.s32, r11.s32, xer);
	// bgt cr6,0x823f3618
	if (cr6.getGT()) goto loc_823F3618;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x823f3610
	if (!cr6.getEQ()) goto loc_823F3610;
	// stw r10,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r10.u32);
loc_823F3610:
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// stw r11,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r11.u32);
loc_823F3618:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r9,r9,20
	ctx.r9.s64 = ctx.r9.s64 + 20;
	// cmplw cr6,r10,r30
	cr6.compare<uint32_t>(ctx.r10.u32, r30.u32, xer);
	// blt cr6,0x823f35b8
	if (cr6.getLT()) goto loc_823F35B8;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x823f3644
	if (!cr6.getEQ()) goto loc_823F3644;
loc_823F3634:
	// stw r24,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r24.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r24,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r24.u32);
	// b 0x823f3650
	goto loc_823F3650;
loc_823F3644:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mulli r11,r11,20
	r11.s64 = r11.s64 * 20;
	// add r3,r11,r10
	ctx.r3.u64 = r11.u64 + ctx.r10.u64;
loc_823F3650:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_823F3658"))) PPC_WEAK_FUNC(sub_823F3658);
PPC_FUNC_IMPL(__imp__sub_823F3658) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-8083
	ctx.r10.s64 = -529727488;
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// ori r10,r10,29539
	ctx.r10.u64 = ctx.r10.u64 | 29539;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x823f36d4
	if (!cr6.getEQ()) goto loc_823F36D4;
	// lwz r11,16(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 16);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x823f36d4
	if (!cr6.getEQ()) goto loc_823F36D4;
	// lis r10,6547
	ctx.r10.s64 = 429064192;
	// lwz r11,20(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 20);
	// ori r10,r10,1312
	ctx.r10.u64 = ctx.r10.u64 | 1312;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x823f36c0
	if (cr6.getEQ()) goto loc_823F36C0;
	// lis r10,6547
	ctx.r10.s64 = 429064192;
	// ori r10,r10,1313
	ctx.r10.u64 = ctx.r10.u64 | 1313;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x823f36c0
	if (cr6.getEQ()) goto loc_823F36C0;
	// lis r10,6547
	ctx.r10.s64 = 429064192;
	// ori r10,r10,1314
	ctx.r10.u64 = ctx.r10.u64 | 1314;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x823f36d4
	if (!cr6.getEQ()) goto loc_823F36D4;
loc_823F36C0:
	// lwz r11,24(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 24);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lwz r11,28(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 28);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// b 0x823f36dc
	goto loc_823F36DC;
loc_823F36D4:
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823F36DC:
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,148(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 148);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r31,148(r11)
	PPC_STORE_U32(r11.u32 + 148, r31.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3710"))) PPC_WEAK_FUNC(sub_823F3710);
PPC_FUNC_IMPL(__imp__sub_823F3710) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,148(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 148);
	// b 0x823f3740
	goto loc_823F3740;
loc_823F3730:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r10,r31
	cr6.compare<uint32_t>(ctx.r10.u32, r31.u32, xer);
	// beq cr6,0x823f3760
	if (cr6.getEQ()) goto loc_823F3760;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
loc_823F3740:
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x823f3730
	if (!cr0.getEQ()) goto loc_823F3730;
	// li r3,1
	ctx.r3.s64 = 1;
loc_823F374C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_823F3760:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x823f374c
	goto loc_823F374C;
}

__attribute__((alias("__imp__sub_823F3768"))) PPC_WEAK_FUNC(sub_823F3768);
PPC_FUNC_IMPL(__imp__sub_823F3768) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,148(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 148);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823f3794
	if (cr6.getEQ()) goto loc_823F3794;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f3798
	if (!cr6.getEQ()) goto loc_823F3798;
loc_823F3794:
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823F3798:
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,148(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 148);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bne cr6,0x823f37b8
	if (!cr6.getEQ()) goto loc_823F37B8;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// stw r11,148(r3)
	PPC_STORE_U32(ctx.r3.u32 + 148, r11.u32);
	// b 0x823f37e4
	goto loc_823F37E4;
loc_823F37B8:
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,148(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 148);
	// b 0x823f37d4
	goto loc_823F37D4;
loc_823F37C4:
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r31,r10
	cr6.compare<uint32_t>(r31.u32, ctx.r10.u32, xer);
	// beq cr6,0x823f37f8
	if (cr6.getEQ()) goto loc_823F37F8;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_823F37D4:
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x823f37c4
	if (!cr6.getEQ()) goto loc_823F37C4;
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823F37E4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_823F37F8:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// b 0x823f37e4
	goto loc_823F37E4;
}

__attribute__((alias("__imp__sub_823F3808"))) PPC_WEAK_FUNC(sub_823F3808);
PPC_FUNC_IMPL(__imp__sub_823F3808) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
loc_823F382C:
	// lbz r6,0(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x823f382c
	if (!cr6.getEQ()) goto loc_823F382C;
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// rotlwi r10,r10,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bne cr6,0x823f3880
	if (!cr6.getEQ()) goto loc_823F3880;
loc_823F3850:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x823f38c0
	goto loc_823F38C0;
loc_823F3880:
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x823f3850
	if (cr6.getEQ()) goto loc_823F3850;
	// lis r9,32767
	ctx.r9.s64 = 2147418112;
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// li r6,73
	ctx.r6.s64 = 73;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// ori r9,r9,65535
	ctx.r9.u64 = ctx.r9.u64 | 65535;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// bgt cr6,0x823f38b0
	if (cr6.getGT()) goto loc_823F38B0;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
loc_823F38B0:
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mtctr r8
	ctr.u64 = ctx.r8.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_823F38C0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F38D0"))) PPC_WEAK_FUNC(sub_823F38D0);
PPC_FUNC_IMPL(__imp__sub_823F38D0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r9,r1,128
	ctx.r9.s64 = ctx.r1.s64 + 128;
	// lis r11,-32192
	r11.s64 = -2109734912;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r3,r11,-14072
	ctx.r3.s64 = r11.s64 + -14072;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823f3808
	sub_823F3808(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3930"))) PPC_WEAK_FUNC(sub_823F3930);
PPC_FUNC_IMPL(__imp__sub_823F3930) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// addi r11,r5,-1
	r11.s64 = ctx.r5.s64 + -1;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// mullw r11,r11,r30
	r11.s64 = int64_t(r11.s32) * int64_t(r30.s32);
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// add r24,r11,r4
	r24.u64 = r11.u64 + ctx.r4.u64;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x823f399c
	if (!cr6.getEQ()) goto loc_823F399C;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x823f399c
	if (cr6.getEQ()) goto loc_823F399C;
loc_823F3968:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
loc_823F3990:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F3994:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_823F399C:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x823f3968
	if (cr6.getEQ()) goto loc_823F3968;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x823f3968
	if (cr6.getEQ()) goto loc_823F3968;
	// cmplw cr6,r4,r24
	cr6.compare<uint32_t>(ctx.r4.u32, r24.u32, xer);
	// bgt cr6,0x823f3990
	if (cr6.getGT()) goto loc_823F3990;
loc_823F39B4:
	// rlwinm. r28,r5,31,1,31
	r28.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 31) & 0x7FFFFFFF;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// beq 0x823f3a24
	if (cr0.getEQ()) goto loc_823F3A24;
	// clrlwi. r27,r5,31
	r27.u64 = ctx.r5.u32 & 0x1;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// mr r11,r28
	r11.u64 = r28.u64;
	// bne 0x823f39cc
	if (!cr0.getEQ()) goto loc_823F39CC;
	// addi r11,r28,-1
	r11.s64 = r28.s64 + -1;
loc_823F39CC:
	// mullw r11,r11,r30
	r11.s64 = int64_t(r11.s32) * int64_t(r30.s32);
	// add r31,r11,r29
	r31.u64 = r11.u64 + r29.u64;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mtctr r26
	ctr.u64 = r26.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f3a1c
	if (cr0.getEQ()) goto loc_823F3A1C;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x823f3a08
	if (!cr6.getLT()) goto loc_823F3A08;
	// subf r24,r30,r31
	r24.s64 = r31.s64 - r30.s64;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x823f3a0c
	if (!cr6.getEQ()) goto loc_823F3A0C;
	// addi r5,r28,-1
	ctx.r5.s64 = r28.s64 + -1;
	// b 0x823f3a10
	goto loc_823F3A10;
loc_823F3A08:
	// add r29,r31,r30
	r29.u64 = r31.u64 + r30.u64;
loc_823F3A0C:
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
loc_823F3A10:
	// cmplw cr6,r29,r24
	cr6.compare<uint32_t>(r29.u32, r24.u32, xer);
	// ble cr6,0x823f39b4
	if (!cr6.getGT()) goto loc_823F39B4;
	// b 0x823f3990
	goto loc_823F3990;
loc_823F3A1C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x823f3994
	goto loc_823F3994;
loc_823F3A24:
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x823f3990
	if (cr6.getEQ()) goto loc_823F3990;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// mtctr r26
	ctr.u64 = r26.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r3,0
	ctx.r3.s64 = 0;
	// bne 0x823f3994
	if (!cr0.getEQ()) goto loc_823F3994;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// b 0x823f3994
	goto loc_823F3994;
}

__attribute__((alias("__imp__sub_823F3A50"))) PPC_WEAK_FUNC(sub_823F3A50);
PPC_FUNC_IMPL(__imp__sub_823F3A50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr7{};
	uint32_t ea{};
	// lbz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// lbz r6,0(r4)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
loc_823F3A5C:
	// cmpwi cr7,r6,0
	cr7.compare<int32_t>(ctx.r6.s32, 0, xer);
	// subf. r3,r6,r5
	ctx.r3.s64 = ctx.r5.s64 - ctx.r6.s64;
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr7,0x823f3a78
	if (cr7.getEQ()) goto loc_823F3A78;
	// bne 0x823f3a78
	if (!cr0.getEQ()) goto loc_823F3A78;
	// lbzu r5,1(r9)
	ea = 1 + ctx.r9.u32;
	ctx.r5.u64 = PPC_LOAD_U8(ea);
	ctx.r9.u32 = ea;
	// lbzu r6,1(r4)
	ea = 1 + ctx.r4.u32;
	ctx.r6.u64 = PPC_LOAD_U8(ea);
	ctx.r4.u32 = ea;
	// b 0x823f3a5c
	goto loc_823F3A5C;
loc_823F3A78:
	// beqlr 
	if (cr0.getEQ()) return;
	// li r3,-1
	ctx.r3.s64 = -1;
	// bltlr 
	if (cr0.getLT()) return;
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3A90"))) PPC_WEAK_FUNC(sub_823F3A90);
PPC_FUNC_IMPL(__imp__sub_823F3A90) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lwz r11,-20928(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20928);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// b 0x823fdbc0
	sub_823FDBC0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F3AA4"))) PPC_WEAK_FUNC(sub_823F3AA4);
PPC_FUNC_IMPL(__imp__sub_823F3AA4) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3AA8"))) PPC_WEAK_FUNC(sub_823F3AA8);
PPC_FUNC_IMPL(__imp__sub_823F3AA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29464(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29464);
	// mflr r12
	// bl 0x823ed134
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_823F3AD8:
	// addic. r27,r27,-1
	xer.ca = r27.u32 > 0;
	r27.s64 = r27.s64 + -1;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// stw r27,180(r31)
	PPC_STORE_U32(r31.u32 + 180, r27.u32);
	// blt 0x823f3b00
	if (cr0.getLT()) goto loc_823F3B00;
	// subf r30,r29,r30
	r30.s64 = r30.s64 - r29.s64;
	// stw r30,164(r31)
	PPC_STORE_U32(r31.u32 + 164, r30.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mtctr r28
	ctr.u64 = r28.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823f3ad8
	goto loc_823F3AD8;
loc_823F3B00:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_823F3AB0"))) PPC_WEAK_FUNC(sub_823F3AB0);
PPC_FUNC_IMPL(__imp__sub_823F3AB0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_823F3AD8:
	// addic. r27,r27,-1
	xer.ca = r27.u32 > 0;
	r27.s64 = r27.s64 + -1;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// stw r27,180(r31)
	PPC_STORE_U32(r31.u32 + 180, r27.u32);
	// blt 0x823f3b00
	if (cr0.getLT()) goto loc_823F3B00;
	// subf r30,r29,r30
	r30.s64 = r30.s64 - r29.s64;
	// stw r30,164(r31)
	PPC_STORE_U32(r31.u32 + 164, r30.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mtctr r28
	ctr.u64 = r28.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823f3ad8
	goto loc_823F3AD8;
loc_823F3B00:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_823F3B14"))) PPC_WEAK_FUNC(sub_823F3B14);
PPC_FUNC_IMPL(__imp__sub_823F3B14) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-144
	r31.s64 = r12.s64 + -144;
	// mflr r12
	// stw r12,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-8083
	r11.s64 = -529727488;
	// ori r11,r11,29539
	r11.u64 = r11.u64 | 29539;
	// stw r3,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r3.u32);
	// lwz r10,80(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r10,84(r31)
	PPC_STORE_U32(r31.u32 + 84, ctx.r10.u32);
	// lwz r10,84(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x823f3b64
	if (cr6.getEQ()) goto loc_823F3B64;
	// li r11,0
	r11.s64 = 0;
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
	// lwz r3,88(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823f3b6c
	goto loc_823F3B6C;
loc_823F3B64:
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_823F3B6C:
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// lwz r12,-16(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -16);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3B80"))) PPC_WEAK_FUNC(sub_823F3B80);
PPC_FUNC_IMPL(__imp__sub_823F3B80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29488(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29488);
	// mflr r12
	// bl 0x823ed130
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r30,164(r31)
	PPC_STORE_U32(r31.u32 + 164, r30.u32);
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// stw r29,172(r31)
	PPC_STORE_U32(r31.u32 + 172, r29.u32);
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// stw r7,196(r31)
	PPC_STORE_U32(r31.u32 + 196, ctx.r7.u32);
	// li r28,0
	r28.s64 = 0;
	// stw r28,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r28.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_823F3BC0:
	// stw r28,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r28.u32);
	// cmpw cr6,r28,r26
	cr6.compare<int32_t>(r28.s32, r26.s32, xer);
	// bge cr6,0x823f3bec
	if (!cr6.getLT()) goto loc_823F3BEC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mtctr r27
	ctr.u64 = r27.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// add r30,r30,r29
	r30.u64 = r30.u64 + r29.u64;
	// stw r30,164(r31)
	PPC_STORE_U32(r31.u32 + 164, r30.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// b 0x823f3bc0
	goto loc_823F3BC0;
loc_823F3BEC:
	// li r11,1
	r11.s64 = 1;
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,144
	r12.s64 = r31.s64 + 144;
	// bl 0x823f3c38
	sub_823F3C38(ctx, base);
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_823F3B88"))) PPC_WEAK_FUNC(sub_823F3B88);
PPC_FUNC_IMPL(__imp__sub_823F3B88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r30,164(r31)
	PPC_STORE_U32(r31.u32 + 164, r30.u32);
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// stw r29,172(r31)
	PPC_STORE_U32(r31.u32 + 172, r29.u32);
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// stw r7,196(r31)
	PPC_STORE_U32(r31.u32 + 196, ctx.r7.u32);
	// li r28,0
	r28.s64 = 0;
	// stw r28,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r28.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_823F3BC0:
	// stw r28,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r28.u32);
	// cmpw cr6,r28,r26
	cr6.compare<int32_t>(r28.s32, r26.s32, xer);
	// bge cr6,0x823f3bec
	if (!cr6.getLT()) goto loc_823F3BEC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mtctr r27
	ctr.u64 = r27.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// add r30,r30,r29
	r30.u64 = r30.u64 + r29.u64;
	// stw r30,164(r31)
	PPC_STORE_U32(r31.u32 + 164, r30.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// b 0x823f3bc0
	goto loc_823F3BC0;
loc_823F3BEC:
	// li r11,1
	r11.s64 = 1;
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,144
	r12.s64 = r31.s64 + 144;
	// bl 0x823f3c38
	sub_823F3C38(ctx, base);
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_823F3C08"))) PPC_WEAK_FUNC(sub_823F3C08);
PPC_FUNC_IMPL(__imp__sub_823F3C08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-144
	r31.s64 = r12.s64 + -144;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r29,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r29.u64);
	// std r28,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, r28.u64);
	// mflr r12
	// stw r12,-40(r1)
	PPC_STORE_U32(ctx.r1.u32 + -40, r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r29,172(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 172);
	// lwz r30,164(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// lwz r28,80(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// b 0x823f3c58
	goto loc_823F3C58;
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-144
	r31.s64 = r12.s64 + -144;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r29,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r29.u64);
	// std r28,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, r28.u64);
	// mflr r12
	// stw r12,-40(r1)
	PPC_STORE_U32(ctx.r1.u32 + -40, r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
loc_823F3C58:
	// lwz r11,84(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823f3c78
	if (!cr6.getEQ()) goto loc_823F3C78;
	// lwz r6,196(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823f3ab0
	sub_823F3AB0(ctx, base);
loc_823F3C78:
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r29,-24(r1)
	r29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r28,-32(r1)
	r28.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// lwz r12,-40(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -40);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3C38"))) PPC_WEAK_FUNC(sub_823F3C38);
PPC_FUNC_IMPL(__imp__sub_823F3C38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-144
	r31.s64 = r12.s64 + -144;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r29,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r29.u64);
	// std r28,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, r28.u64);
	// mflr r12
	// stw r12,-40(r1)
	PPC_STORE_U32(ctx.r1.u32 + -40, r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,84(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823f3c78
	if (!cr6.getEQ()) goto loc_823F3C78;
	// lwz r6,196(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823f3ab0
	sub_823F3AB0(ctx, base);
loc_823F3C78:
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r29,-24(r1)
	r29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r28,-32(r1)
	r28.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// lwz r12,-40(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -40);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3C98"))) PPC_WEAK_FUNC(sub_823F3C98);
PPC_FUNC_IMPL(__imp__sub_823F3C98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31987
	r11.s64 = -2096300032;
	// stw r3,-15572(r11)
	PPC_STORE_U32(r11.u32 + -15572, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3CA8"))) PPC_WEAK_FUNC(sub_823F3CA8);
PPC_FUNC_IMPL(__imp__sub_823F3CA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// lwz r11,-15572(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -15572);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f3cd0
	if (cr0.getEQ()) goto loc_823F3CD0;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x823f3cdc
	goto loc_823F3CDC;
loc_823F3CD0:
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x823fdc90
	sub_823FDC90(ctx, base);
	// twi 31,r0,22
loc_823F3CDC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3CF0"))) PPC_WEAK_FUNC(sub_823F3CF0);
PPC_FUNC_IMPL(__imp__sub_823F3CF0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-2816(r1)
	ea = -2816 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r5,2624
	ctx.r5.s64 = 2624;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,10
	ctx.r10.s64 = 10;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_823F3D1C:
	// std r9,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r9.u64);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// bdnz 0x823f3d1c
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_823F3D1C;
	// lis r11,-16384
	r11.s64 = -1073741824;
	// li r3,0
	ctx.r3.s64 = 0;
	// ori r11,r11,13
	r11.u64 = r11.u64 | 13;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// lwz r11,2808(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2808);
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x8235dd28
	sub_8235DD28(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8235ddf0
	sub_8235DDF0(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x823f3d6c
	if (!cr0.getEQ()) goto loc_823F3D6C;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x823fdc90
	sub_823FDC90(ctx, base);
loc_823F3D6C:
	// li r3,30
	ctx.r3.s64 = 30;
	// bl 0x8240f9ec
	__imp__KeBugCheck(ctx, base);
}

__attribute__((alias("__imp__sub_823F3D78"))) PPC_WEAK_FUNC(sub_823F3D78);
PPC_FUNC_IMPL(__imp__sub_823F3D78) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r9,r11,-20920
	ctx.r9.s64 = r11.s64 + -20920;
	// li r11,0
	r11.s64 = 0;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
loc_823F3D88:
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplw cr6,r3,r8
	cr6.compare<uint32_t>(ctx.r3.u32, ctx.r8.u32, xer);
	// beq cr6,0x823f3db8
	if (cr6.getEQ()) goto loc_823F3DB8;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// blt cr6,0x823f3d88
	if (cr6.getLT()) goto loc_823F3D88;
	// addi r11,r3,-19
	r11.s64 = ctx.r3.s64 + -19;
	// cmplwi cr6,r11,17
	cr6.compare<uint32_t>(r11.u32, 17, xer);
	// bgt cr6,0x823f3dc8
	if (cr6.getGT()) goto loc_823F3DC8;
	// li r3,13
	ctx.r3.s64 = 13;
	// blr 
	return;
loc_823F3DB8:
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r9,4
	ctx.r10.s64 = ctx.r9.s64 + 4;
	// lwzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// blr 
	return;
loc_823F3DC8:
	// addi r11,r3,-188
	r11.s64 = ctx.r3.s64 + -188;
	// subfic r11,r11,14
	xer.ca = r11.u32 <= 14;
	r11.s64 = 14 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,28,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xE;
	// addi r3,r11,8
	ctx.r3.s64 = r11.s64 + 8;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3DE0"))) PPC_WEAK_FUNC(sub_823F3DE0);
PPC_FUNC_IMPL(__imp__sub_823F3DE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823f28a8
	sub_823F28A8(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x823f3e04
	if (!cr0.getEQ()) goto loc_823F3E04;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r3,r11,-20560
	ctx.r3.s64 = r11.s64 + -20560;
	// b 0x823f3e08
	goto loc_823F3E08;
loc_823F3E04:
	// addi r3,r3,8
	ctx.r3.s64 = ctx.r3.s64 + 8;
loc_823F3E08:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3E18"))) PPC_WEAK_FUNC(sub_823F3E18);
PPC_FUNC_IMPL(__imp__sub_823F3E18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823f28a8
	sub_823F28A8(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x823f3e3c
	if (!cr0.getEQ()) goto loc_823F3E3C;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r3,r11,-20556
	ctx.r3.s64 = r11.s64 + -20556;
	// b 0x823f3e40
	goto loc_823F3E40;
loc_823F3E3C:
	// addi r3,r3,12
	ctx.r3.s64 = ctx.r3.s64 + 12;
loc_823F3E40:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3E50"))) PPC_WEAK_FUNC(sub_823F3E50);
PPC_FUNC_IMPL(__imp__sub_823F3E50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x823f28a8
	sub_823F28A8(ctx, base);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// addi r31,r11,-20560
	r31.s64 = r11.s64 + -20560;
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// beq 0x823f3e84
	if (cr0.getEQ()) goto loc_823F3E84;
	// addi r11,r3,12
	r11.s64 = ctx.r3.s64 + 12;
loc_823F3E84:
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// bl 0x823f28a8
	sub_823F28A8(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// beq 0x823f3e9c
	if (cr0.getEQ()) goto loc_823F3E9C;
	// addi r7,r3,8
	ctx.r7.s64 = ctx.r3.s64 + 8;
loc_823F3E9C:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823f3d78
	sub_823F3D78(ctx, base);
	// stw r3,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r3.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3EC0"))) PPC_WEAK_FUNC(sub_823F3EC0);
PPC_FUNC_IMPL(__imp__sub_823F3EC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x823eee38
	sub_823EEE38(ctx, base);
	// cmpwi cr6,r3,101
	cr6.compare<int32_t>(ctx.r3.s32, 101, xer);
	// beq cr6,0x823f3efc
	if (cr6.getEQ()) goto loc_823F3EFC;
loc_823F3EE8:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// lbz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f3ee8
	if (!cr0.getEQ()) goto loc_823F3EE8;
loc_823F3EFC:
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x823eee38
	sub_823EEE38(ctx, base);
	// cmpwi cr6,r3,120
	cr6.compare<int32_t>(ctx.r3.s32, 120, xer);
	// bne cr6,0x823f3f14
	if (!cr6.getEQ()) goto loc_823F3F14;
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
loc_823F3F14:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lbz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// lwz r11,-18664(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -18664);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
loc_823F3F30:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// bne cr6,0x823f3f30
	if (!cr6.getEQ()) goto loc_823F3F30;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F3F60"))) PPC_WEAK_FUNC(sub_823F3F60);
PPC_FUNC_IMPL(__imp__sub_823F3F60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lbz r11,0(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// lwz r8,-18664(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18664);
	// extsb. r11,r11
	r11.s64 = r11.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f3f98
	if (cr0.getEQ()) goto loc_823F3F98;
	// lwz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
loc_823F3F80:
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x823f3f98
	if (cr6.getEQ()) goto loc_823F3F98;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// lbz r11,0(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// extsb. r11,r11
	r11.s64 = r11.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f3f80
	if (!cr0.getEQ()) goto loc_823F3F80;
loc_823F3F98:
	// lbz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// addi r11,r3,1
	r11.s64 = ctx.r3.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// b 0x823f3fc0
	goto loc_823F3FC0;
loc_823F3FAC:
	// cmpwi cr6,r10,101
	cr6.compare<int32_t>(ctx.r10.s32, 101, xer);
	// beq cr6,0x823f3fcc
	if (cr6.getEQ()) goto loc_823F3FCC;
	// cmpwi cr6,r10,69
	cr6.compare<int32_t>(ctx.r10.s32, 69, xer);
	// beq cr6,0x823f3fcc
	if (cr6.getEQ()) goto loc_823F3FCC;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_823F3FC0:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// extsb. r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823f3fac
	if (!cr0.getEQ()) goto loc_823F3FAC;
loc_823F3FCC:
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
loc_823F3FD0:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,48
	cr6.compare<uint32_t>(ctx.r10.u32, 48, xer);
	// beq cr6,0x823f3fd0
	if (cr6.getEQ()) goto loc_823F3FD0;
	// lwz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmplw cr6,r8,r10
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r10.u32, xer);
	// bne cr6,0x823f3ff8
	if (!cr6.getEQ()) goto loc_823F3FF8;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
loc_823F3FF8:
	// lbz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// bne 0x823f3ff8
	if (!cr0.getEQ()) goto loc_823F3FF8;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F4018"))) PPC_WEAK_FUNC(sub_823F4018);
PPC_FUNC_IMPL(__imp__sub_823F4018) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f13,0(r3)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// li r3,1
	ctx.r3.s64 = 1;
	// lfd f0,2752(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bgelr cr6
	if (!cr6.getLT()) return;
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F4038"))) PPC_WEAK_FUNC(sub_823F4038);
PPC_FUNC_IMPL(__imp__sub_823F4038) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x823f4070
	if (cr6.getEQ()) goto loc_823F4070;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x823fdca0
	sub_823FDCA0(ctx, base);
	// ld r11,88(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// b 0x823f4080
	goto loc_823F4080;
loc_823F4070:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823fdd48
	sub_823FDD48(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823F4080:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F4098"))) PPC_WEAK_FUNC(sub_823F4098);
PPC_FUNC_IMPL(__imp__sub_823F4098) {
	PPC_FUNC_PROLOGUE();
	// li r6,0
	ctx.r6.s64 = 0;
	// b 0x823f4038
	sub_823F4038(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F40A0"))) PPC_WEAK_FUNC(sub_823F40A0);
PPC_FUNC_IMPL(__imp__sub_823F40A0) {
	PPC_FUNC_PROLOGUE();
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x823f3ec0
	sub_823F3EC0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F40A8"))) PPC_WEAK_FUNC(sub_823F40A8);
PPC_FUNC_IMPL(__imp__sub_823F40A8) {
	PPC_FUNC_PROLOGUE();
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x823f3f60
	sub_823F3F60(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F40B0"))) PPC_WEAK_FUNC(sub_823F40B0);
PPC_FUNC_IMPL(__imp__sub_823F40B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x823f4108
	if (!cr6.getEQ()) goto loc_823F4108;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x823f4324
	goto loc_823F4324;
loc_823F4108:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x823f413c
	if (!cr6.getEQ()) goto loc_823F413C;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r31,22
	r31.s64 = 22;
loc_823F4118:
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r31.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x823f4324
	goto loc_823F4324;
loc_823F413C:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// mr r11,r31
	r11.u64 = r31.u64;
	// bgt cr6,0x823f414c
	if (cr6.getGT()) goto loc_823F414C;
	// li r11,0
	r11.s64 = 0;
loc_823F414C:
	// addi r11,r11,9
	r11.s64 = r11.s64 + 9;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bgt cr6,0x823f4164
	if (cr6.getGT()) goto loc_823F4164;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r31,34
	r31.s64 = 34;
	// b 0x823f4118
	goto loc_823F4118;
loc_823F4164:
	// extsb. r28,r8
	r28.s64 = ctx.r8.s8;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// beq 0x823f41b8
	if (cr0.getEQ()) goto loc_823F41B8;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// addi r11,r11,-45
	r11.s64 = r11.s64 + -45;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// add r4,r11,r30
	ctx.r4.u64 = r11.u64 + r30.u64;
	// ble cr6,0x823f41b8
	if (!cr6.getGT()) goto loc_823F41B8;
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F4190:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f4190
	if (!cr6.getEQ()) goto loc_823F4190;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r3,r4,1
	ctx.r3.s64 = ctx.r4.s64 + 1;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// bl 0x823ef8a0
	sub_823EF8A0(ctx, base);
loc_823F41B8:
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// mr r11,r30
	r11.u64 = r30.u64;
	// li r26,45
	r26.s64 = 45;
	// cmpwi cr6,r10,45
	cr6.compare<int32_t>(ctx.r10.s32, 45, xer);
	// bne cr6,0x823f41d4
	if (!cr6.getEQ()) goto loc_823F41D4;
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// stb r26,0(r30)
	PPC_STORE_U8(r30.u32 + 0, r26.u8);
loc_823F41D4:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// ble cr6,0x823f4200
	if (!cr6.getGT()) goto loc_823F4200;
	// lbz r9,1(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lwz r11,-18664(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -18664);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
loc_823F4200:
	// cntlzw r10,r28
	ctx.r10.u64 = r28.u32 == 0 ? 32 : __builtin_clz(r28.u32);
	// cmpwi cr6,r29,-1
	cr6.compare<int32_t>(r29.s32, -1, xer);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r31,r11,r31
	r31.u64 = r11.u64 + r31.u64;
	// bne cr6,0x823f4220
	if (!cr6.getEQ()) goto loc_823F4220;
	// li r4,-1
	ctx.r4.s64 = -1;
	// b 0x823f4228
	goto loc_823F4228;
loc_823F4220:
	// subf r11,r31,r30
	r11.s64 = r30.s64 - r31.s64;
	// add r4,r11,r29
	ctx.r4.u64 = r11.u64 + r29.u64;
loc_823F4228:
	// lis r11,-32249
	r11.s64 = -2113470464;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r11,9640
	ctx.r5.s64 = r11.s64 + 9640;
	// bl 0x823ee540
	sub_823EE540(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f4258
	if (cr0.getEQ()) goto loc_823F4258;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f3cf0
	sub_823F3CF0(ctx, base);
loc_823F4258:
	// addi r3,r31,2
	ctx.r3.s64 = r31.s64 + 2;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x823f426c
	if (cr6.getEQ()) goto loc_823F426C;
	// li r11,69
	r11.s64 = 69;
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
loc_823F426C:
	// lwz r11,12(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 12);
	// addi r10,r31,1
	ctx.r10.s64 = r31.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// beq cr6,0x823f42f8
	if (cr6.getEQ()) goto loc_823F42F8;
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bge 0x823f4294
	if (!cr0.getLT()) goto loc_823F4294;
	// neg r11,r11
	r11.s64 = -r11.s64;
	// stb r26,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r26.u8);
loc_823F4294:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r11,100
	cr6.compare<int32_t>(r11.s32, 100, xer);
	// blt cr6,0x823f42c0
	if (cr6.getLT()) goto loc_823F42C0;
	// li r7,100
	ctx.r7.s64 = 100;
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// divw r9,r11,r7
	ctx.r9.s32 = r11.s32 / ctx.r7.s32;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// divw r8,r11,r7
	ctx.r8.s32 = r11.s32 / ctx.r7.s32;
	// mulli r8,r8,100
	ctx.r8.s64 = ctx.r8.s64 * 100;
	// stb r9,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r9.u8);
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
loc_823F42C0:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// blt cr6,0x823f42ec
	if (cr6.getLT()) goto loc_823F42EC;
	// li r7,10
	ctx.r7.s64 = 10;
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// divw r9,r11,r7
	ctx.r9.s32 = r11.s32 / ctx.r7.s32;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// divw r8,r11,r7
	ctx.r8.s32 = r11.s32 / ctx.r7.s32;
	// mulli r8,r8,10
	ctx.r8.s64 = ctx.r8.s64 * 10;
	// stb r9,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r9.u8);
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
loc_823F42EC:
	// lbz r9,1(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 1);
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// stb r11,1(r10)
	PPC_STORE_U8(ctx.r10.u32 + 1, r11.u8);
loc_823F42F8:
	// lis r11,-31987
	r11.s64 = -2096300032;
	// lwz r11,-16908(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -16908);
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f4320
	if (cr0.getEQ()) goto loc_823F4320;
	// lbz r11,0(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bne cr6,0x823f4320
	if (!cr6.getEQ()) goto loc_823F4320;
	// li r5,3
	ctx.r5.s64 = 3;
	// addi r4,r3,1
	ctx.r4.s64 = ctx.r3.s64 + 1;
	// bl 0x823ef8a0
	sub_823EF8A0(ctx, base);
loc_823F4320:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F4324:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_823F4330"))) PPC_WEAK_FUNC(sub_823F4330);
PPC_FUNC_IMPL(__imp__sub_823F4330) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// ld r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// li r6,22
	ctx.r6.s64 = 22;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// mr r27,r8
	r27.u64 = ctx.r8.u64;
	// bl 0x823fe060
	sub_823FE060(ctx, base);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f439c
	if (!cr6.getEQ()) goto loc_823F439C;
loc_823F436C:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x823f4440
	goto loc_823F4440;
loc_823F439C:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x823f436c
	if (cr6.getEQ()) goto loc_823F436C;
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r29,-1
	cr6.compare<int32_t>(r29.s32, -1, xer);
	// bne cr6,0x823f43b8
	if (!cr6.getEQ()) goto loc_823F43B8;
	// li r4,-1
	ctx.r4.s64 = -1;
	// b 0x823f43dc
	goto loc_823F43DC;
loc_823F43B8:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bgt cr6,0x823f43c8
	if (cr6.getGT()) goto loc_823F43C8;
	// li r11,0
	r11.s64 = 0;
loc_823F43C8:
	// addi r10,r9,-45
	ctx.r10.s64 = ctx.r9.s64 + -45;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// subf r10,r10,r29
	ctx.r10.s64 = r29.s64 - ctx.r10.s64;
	// subf r4,r11,r10
	ctx.r4.s64 = ctx.r10.s64 - r11.s64;
loc_823F43DC:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// li r10,1
	ctx.r10.s64 = 1;
	// bgt cr6,0x823f43ec
	if (cr6.getGT()) goto loc_823F43EC;
	// li r10,0
	ctx.r10.s64 = 0;
loc_823F43EC:
	// addi r11,r9,-45
	r11.s64 = ctx.r9.s64 + -45;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// addi r5,r30,1
	ctx.r5.s64 = r30.s64 + 1;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// add r3,r11,r31
	ctx.r3.u64 = r11.u64 + r31.u64;
	// bl 0x823fddf0
	sub_823FDDF0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f4420
	if (cr0.getEQ()) goto loc_823F4420;
	// li r11,0
	r11.s64 = 0;
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// b 0x823f4440
	goto loc_823F4440;
loc_823F4420:
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f40b0
	sub_823F40B0(ctx, base);
loc_823F4440:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_823F4448"))) PPC_WEAK_FUNC(sub_823F4448);
PPC_FUNC_IMPL(__imp__sub_823F4448) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r28,48
	r28.s64 = 48;
	// mr r29,r7
	r29.u64 = ctx.r7.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// li r30,1023
	r30.s64 = 1023;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// li r26,0
	r26.s64 = 0;
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bge cr6,0x823f4478
	if (!cr6.getLT()) goto loc_823F4478;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
loc_823F4478:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f44b0
	if (!cr6.getEQ()) goto loc_823F44B0;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x823f4888
	goto loc_823F4888;
loc_823F44B0:
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x823f44e4
	if (!cr6.getEQ()) goto loc_823F44E4;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r31,22
	r31.s64 = 22;
loc_823F44C0:
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r31.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x823f4888
	goto loc_823F4888;
loc_823F44E4:
	// addi r11,r6,11
	r11.s64 = ctx.r6.s64 + 11;
	// stb r26,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r26.u8);
	// cmplw cr6,r5,r11
	cr6.compare<uint32_t>(ctx.r5.u32, r11.u32, xer);
	// bgt cr6,0x823f4500
	if (cr6.getGT()) goto loc_823F4500;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r31,34
	r31.s64 = 34;
	// b 0x823f44c0
	goto loc_823F44C0;
loc_823F4500:
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// rlwinm r10,r11,0,20,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFE;
	// cmpldi cr6,r10,4094
	cr6.compare<uint64_t>(ctx.r10.u64, 4094, xer);
	// bne cr6,0x823f45a8
	if (!cr6.getEQ()) goto loc_823F45A8;
	// cmpwi cr6,r5,-1
	cr6.compare<int32_t>(ctx.r5.s32, -1, xer);
	// bne cr6,0x823f4520
	if (!cr6.getEQ()) goto loc_823F4520;
	// li r5,-1
	ctx.r5.s64 = -1;
	// b 0x823f4524
	goto loc_823F4524;
loc_823F4520:
	// addi r5,r5,-2
	ctx.r5.s64 = ctx.r5.s64 + -2;
loc_823F4524:
	// addi r30,r31,2
	r30.s64 = r31.s64 + 2;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x823f4330
	sub_823F4330(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f4548
	if (cr0.getEQ()) goto loc_823F4548;
	// stb r26,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r26.u8);
	// b 0x823f4888
	goto loc_823F4888;
loc_823F4548:
	// lbz r11,0(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x823f455c
	if (!cr6.getEQ()) goto loc_823F455C;
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_823F455C:
	// subfic r11,r29,0
	xer.ca = r29.u32 <= 0;
	r11.s64 = 0 - r29.s64;
	// stb r28,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r28.u8);
	// li r4,101
	ctx.r4.s64 = 101;
	// subfe r10,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// rlwinm r10,r10,0,0,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFE0;
	// addi r3,r11,1
	ctx.r3.s64 = r11.s64 + 1;
	// addi r10,r10,120
	ctx.r10.s64 = ctx.r10.s64 + 120;
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// bl 0x823f0670
	sub_823F0670(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f4884
	if (cr0.getEQ()) goto loc_823F4884;
	// subfic r11,r29,0
	xer.ca = r29.u32 <= 0;
	r11.s64 = 0 - r29.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,0,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFE0;
	// addi r11,r11,112
	r11.s64 = r11.s64 + 112;
	// stb r11,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, r11.u8);
	// stb r26,3(r3)
	PPC_STORE_U8(ctx.r3.u32 + 3, r26.u8);
	// b 0x823f4884
	goto loc_823F4884;
loc_823F45A8:
	// clrldi r11,r11,63
	r11.u64 = r11.u64 & 0x1;
	// li r27,45
	r27.s64 = 45;
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// beq cr6,0x823f45c0
	if (cr6.getEQ()) goto loc_823F45C0;
	// stb r27,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r27.u8);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_823F45C0:
	// subfic r11,r29,0
	xer.ca = r29.u32 <= 0;
	r11.s64 = 0 - r29.s64;
	// stb r28,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r28.u8);
	// subfe r10,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// subfic r9,r29,0
	xer.ca = r29.u32 <= 0;
	ctx.r9.s64 = 0 - r29.s64;
	// rlwinm r10,r10,0,0,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFE0;
	// subfe r9,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// addi r8,r10,120
	ctx.r8.s64 = ctx.r10.s64 + 120;
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// rlwinm r10,r9,0,0,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFE0;
	// addi r10,r10,97
	ctx.r10.s64 = ctx.r10.s64 + 97;
	// addi r5,r10,-58
	ctx.r5.s64 = ctx.r10.s64 + -58;
	// stb r8,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r8.u8);
	// ld r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r10,r10,0,20,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFE;
	// cmpldi cr6,r10,0
	cr6.compare<uint64_t>(ctx.r10.u64, 0, xer);
	// bne cr6,0x823f462c
	if (!cr6.getEQ()) goto loc_823F462C;
	// stb r28,0(r11)
	PPC_STORE_U8(r11.u32 + 0, r28.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// ld r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// rldicr r10,r10,0,51
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u64, 0) & 0xFFFFFFFFFFFFF000;
	// cmpldi cr6,r10,0
	cr6.compare<uint64_t>(ctx.r10.u64, 0, xer);
	// bne cr6,0x823f4624
	if (!cr6.getEQ()) goto loc_823F4624;
	// mr r30,r26
	r30.u64 = r26.u64;
	// b 0x823f4638
	goto loc_823F4638;
loc_823F4624:
	// li r30,1022
	r30.s64 = 1022;
	// b 0x823f4638
	goto loc_823F4638;
loc_823F462C:
	// li r10,49
	ctx.r10.s64 = 49;
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_823F4638:
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x823f4650
	if (!cr6.getEQ()) goto loc_823F4650;
	// stb r26,0(r4)
	PPC_STORE_U8(ctx.r4.u32 + 0, r26.u8);
	// b 0x823f4664
	goto loc_823F4664;
loc_823F4650:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lwz r11,-18664(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -18664);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stb r11,0(r4)
	PPC_STORE_U8(ctx.r4.u32 + 0, r11.u8);
loc_823F4664:
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// rldicr r11,r11,0,51
	r11.u64 = __builtin_rotateleft64(r11.u64, 0) & 0xFFFFFFFFFFFFF000;
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// ble cr6,0x823f475c
	if (!cr6.getGT()) goto loc_823F475C;
	// li r10,15
	ctx.r10.s64 = 15;
	// rldicr r10,r10,48,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u64, 48) & 0xFFFF000000000000;
loc_823F467C:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// ble cr6,0x823f46d4
	if (!cr6.getGT()) goto loc_823F46D4;
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// extsh r9,r7
	ctx.r9.s64 = ctx.r7.s16;
	// rldicl r11,r11,52,12
	r11.u64 = __builtin_rotateleft64(r11.u64, 52) & 0xFFFFFFFFFFFFF;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// srd r11,r11,r9
	r11.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// addi r11,r11,48
	r11.s64 = r11.s64 + 48;
	// clrlwi r9,r11,16
	ctx.r9.u64 = r11.u32 & 0xFFFF;
	// cmplwi cr6,r9,57
	cr6.compare<uint32_t>(ctx.r9.u32, 57, xer);
	// ble cr6,0x823f46b8
	if (!cr6.getGT()) goto loc_823F46B8;
	// clrlwi r11,r5,16
	r11.u64 = ctx.r5.u32 & 0xFFFF;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
loc_823F46B8:
	// addi r9,r7,-4
	ctx.r9.s64 = ctx.r7.s64 + -4;
	// stb r11,0(r8)
	PPC_STORE_U8(ctx.r8.u32 + 0, r11.u8);
	// rldicl r10,r10,60,4
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u64, 60) & 0xFFFFFFFFFFFFFFF;
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// extsh. r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// bge 0x823f467c
	if (!cr0.getLT()) goto loc_823F467C;
loc_823F46D4:
	// extsh. r11,r7
	r11.s64 = ctx.r7.s16;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// blt 0x823f475c
	if (cr0.getLT()) goto loc_823F475C;
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// extsh r9,r7
	ctx.r9.s64 = ctx.r7.s16;
	// rldicl r11,r11,52,12
	r11.u64 = __builtin_rotateleft64(r11.u64, 52) & 0xFFFFFFFFFFFFF;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// srd r11,r11,r9
	r11.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// ble cr6,0x823f475c
	if (!cr6.getGT()) goto loc_823F475C;
	// addi r11,r8,-1
	r11.s64 = ctx.r8.s64 + -1;
loc_823F4700:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpwi cr6,r10,102
	cr6.compare<int32_t>(ctx.r10.s32, 102, xer);
	// beq cr6,0x823f4718
	if (cr6.getEQ()) goto loc_823F4718;
	// cmpwi cr6,r10,70
	cr6.compare<int32_t>(ctx.r10.s32, 70, xer);
	// bne cr6,0x823f4724
	if (!cr6.getEQ()) goto loc_823F4724;
loc_823F4718:
	// stb r28,0(r11)
	PPC_STORE_U8(r11.u32 + 0, r28.u8);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x823f4700
	goto loc_823F4700;
loc_823F4724:
	// cmplw cr6,r11,r4
	cr6.compare<uint32_t>(r11.u32, ctx.r4.u32, xer);
	// beq cr6,0x823f4750
	if (cr6.getEQ()) goto loc_823F4750;
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpwi cr6,r10,57
	cr6.compare<int32_t>(ctx.r10.s32, 57, xer);
	// bne cr6,0x823f4744
	if (!cr6.getEQ()) goto loc_823F4744;
	// addi r10,r5,58
	ctx.r10.s64 = ctx.r5.s64 + 58;
	// b 0x823f4748
	goto loc_823F4748;
loc_823F4744:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_823F4748:
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// b 0x823f475c
	goto loc_823F475C;
loc_823F4750:
	// lbz r10,-1(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + -1);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stb r10,-1(r11)
	PPC_STORE_U8(r11.u32 + -1, ctx.r10.u8);
loc_823F475C:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// ble cr6,0x823f4788
	if (!cr6.getGT()) goto loc_823F4788;
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// cmplwi r6,0
	cr0.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq 0x823f4784
	if (cr0.getEQ()) goto loc_823F4784;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_823F4778:
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x823f4778
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_823F4778;
loc_823F4784:
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
loc_823F4788:
	// lbz r11,0(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f4798
	if (!cr6.getEQ()) goto loc_823F4798;
	// mr r8,r4
	ctx.r8.u64 = ctx.r4.u64;
loc_823F4798:
	// subfic r11,r29,0
	xer.ca = r29.u32 <= 0;
	r11.s64 = 0 - r29.s64;
	// addi r10,r8,1
	ctx.r10.s64 = ctx.r8.s64 + 1;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,0,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFE0;
	// addi r11,r11,112
	r11.s64 = r11.s64 + 112;
	// stb r11,0(r8)
	PPC_STORE_U8(ctx.r8.u32 + 0, r11.u8);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// rldicl r11,r11,63,53
	r11.u64 = __builtin_rotateleft64(r11.u64, 63) & 0x7FF;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// cmpdi cr6,r11,0
	cr6.compare<int64_t>(r11.s64, 0, xer);
	// blt cr6,0x823f47d0
	if (cr6.getLT()) goto loc_823F47D0;
	// li r9,43
	ctx.r9.s64 = 43;
	// stb r9,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r9.u8);
	// b 0x823f47d8
	goto loc_823F47D8;
loc_823F47D0:
	// neg r11,r11
	r11.s64 = -r11.s64;
	// stb r27,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r27.u8);
loc_823F47D8:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpdi cr6,r11,1000
	cr6.compare<int64_t>(r11.s64, 1000, xer);
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// stb r28,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r28.u8);
	// blt cr6,0x823f4818
	if (cr6.getLT()) goto loc_823F4818;
	// li r9,1000
	ctx.r9.s64 = 1000;
	// divd r7,r11,r9
	ctx.r7.s64 = r11.s64 / ctx.r9.s64;
	// divd r6,r11,r9
	ctx.r6.s64 = r11.s64 / ctx.r9.s64;
	// mr r9,r7
	ctx.r9.u64 = ctx.r7.u64;
	// mulli r7,r6,1000
	ctx.r7.s64 = ctx.r6.s64 * 1000;
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// subf r11,r7,r11
	r11.s64 = r11.s64 - ctx.r7.s64;
	// stb r9,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r9.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmplw cr6,r10,r8
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r8.u32, xer);
	// bne cr6,0x823f4820
	if (!cr6.getEQ()) goto loc_823F4820;
loc_823F4818:
	// cmpdi cr6,r11,100
	cr6.compare<int64_t>(r11.s64, 100, xer);
	// blt cr6,0x823f4844
	if (cr6.getLT()) goto loc_823F4844;
loc_823F4820:
	// li r9,100
	ctx.r9.s64 = 100;
	// divd r7,r11,r9
	ctx.r7.s64 = r11.s64 / ctx.r9.s64;
	// divd r6,r11,r9
	ctx.r6.s64 = r11.s64 / ctx.r9.s64;
	// mr r9,r7
	ctx.r9.u64 = ctx.r7.u64;
	// mulli r7,r6,100
	ctx.r7.s64 = ctx.r6.s64 * 100;
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// subf r11,r7,r11
	r11.s64 = r11.s64 - ctx.r7.s64;
	// stb r9,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r9.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_823F4844:
	// cmplw cr6,r10,r8
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r8.u32, xer);
	// bne cr6,0x823f4854
	if (!cr6.getEQ()) goto loc_823F4854;
	// cmpdi cr6,r11,10
	cr6.compare<int64_t>(r11.s64, 10, xer);
	// blt cr6,0x823f4878
	if (cr6.getLT()) goto loc_823F4878;
loc_823F4854:
	// li r9,10
	ctx.r9.s64 = 10;
	// divd r8,r11,r9
	ctx.r8.s64 = r11.s64 / ctx.r9.s64;
	// divd r7,r11,r9
	ctx.r7.s64 = r11.s64 / ctx.r9.s64;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// mulli r8,r7,10
	ctx.r8.s64 = ctx.r7.s64 * 10;
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// stb r9,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r9.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_823F4878:
	// addi r11,r11,48
	r11.s64 = r11.s64 + 48;
	// stb r11,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r11.u8);
	// stb r26,1(r10)
	PPC_STORE_U8(ctx.r10.u32 + 1, r26.u8);
loc_823F4884:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F4888:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_823F4890"))) PPC_WEAK_FUNC(sub_823F4890);
PPC_FUNC_IMPL(__imp__sub_823F4890) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// addi r10,r11,-1
	ctx.r10.s64 = r11.s64 + -1;
	// bne cr6,0x823f48e4
	if (!cr6.getEQ()) goto loc_823F48E4;
loc_823F48B4:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x823f4a5c
	goto loc_823F4A5C;
loc_823F48E4:
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x823f48b4
	if (cr6.getEQ()) goto loc_823F48B4;
	// extsb. r26,r7
	r26.s64 = ctx.r7.s8;
	cr0.compare<int32_t>(r26.s32, 0, xer);
	// li r28,48
	r28.s64 = 48;
	// beq 0x823f4924
	if (cr0.getEQ()) goto loc_823F4924;
	// cmpw cr6,r10,r27
	cr6.compare<int32_t>(ctx.r10.s32, r27.s32, xer);
	// bne cr6,0x823f4924
	if (!cr6.getEQ()) goto loc_823F4924;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r11,r11,-45
	r11.s64 = r11.s64 + -45;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// stb r28,0(r11)
	PPC_STORE_U8(r11.u32 + 0, r28.u8);
	// stb r9,1(r11)
	PPC_STORE_U8(r11.u32 + 1, ctx.r9.u8);
loc_823F4924:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// bne cr6,0x823f493c
	if (!cr6.getEQ()) goto loc_823F493C;
	// addi r30,r3,1
	r30.s64 = ctx.r3.s64 + 1;
	// stb r11,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, r11.u8);
loc_823F493C:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bgt 0x823f4988
	if (cr0.getGT()) goto loc_823F4988;
	// mr r11,r30
	r11.u64 = r30.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F4950:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f4950
	if (!cr6.getEQ()) goto loc_823F4950;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r31,r30,1
	r31.s64 = r30.s64 + 1;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// bl 0x823ef8a0
	sub_823EF8A0(ctx, base);
	// stb r28,0(r30)
	PPC_STORE_U8(r30.u32 + 0, r28.u8);
	// b 0x823f498c
	goto loc_823F498C;
loc_823F4988:
	// add r31,r11,r30
	r31.u64 = r11.u64 + r30.u64;
loc_823F498C:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// ble cr6,0x823f4a58
	if (!cr6.getGT()) goto loc_823F4A58;
	// mr r11,r31
	r11.u64 = r31.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F499C:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f499c
	if (!cr6.getEQ()) goto loc_823F499C;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r30,r31,1
	r30.s64 = r31.s64 + 1;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// bl 0x823ef8a0
	sub_823EF8A0(ctx, base);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lwz r11,-18664(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -18664);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bge 0x823f4a58
	if (!cr0.getLT()) goto loc_823F4A58;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x823f49fc
	if (cr6.getEQ()) goto loc_823F49FC;
	// neg r27,r11
	r27.s64 = -r11.s64;
	// b 0x823f4a0c
	goto loc_823F4A0C;
loc_823F49FC:
	// neg r11,r11
	r11.s64 = -r11.s64;
	// cmpw cr6,r27,r11
	cr6.compare<int32_t>(r27.s32, r11.s32, xer);
	// blt cr6,0x823f4a0c
	if (cr6.getLT()) goto loc_823F4A0C;
	// mr r27,r11
	r27.u64 = r11.u64;
loc_823F4A0C:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x823f4a48
	if (cr6.getEQ()) goto loc_823F4A48;
	// mr r11,r30
	r11.u64 = r30.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F4A1C:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f4a1c
	if (!cr6.getEQ()) goto loc_823F4A1C;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// add r3,r30,r27
	ctx.r3.u64 = r30.u64 + r27.u64;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// bl 0x823ef8a0
	sub_823EF8A0(ctx, base);
loc_823F4A48:
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// li r4,48
	ctx.r4.s64 = 48;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
loc_823F4A58:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F4A5C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_823F4A68"))) PPC_WEAK_FUNC(sub_823F4A68);
PPC_FUNC_IMPL(__imp__sub_823F4A68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// ld r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// li r6,22
	ctx.r6.s64 = 22;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// bl 0x823fe060
	sub_823FE060(ctx, base);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f4ad0
	if (!cr6.getEQ()) goto loc_823F4AD0;
loc_823F4AA0:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x823f4b4c
	goto loc_823F4B4C;
loc_823F4AD0:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x823f4aa0
	if (cr6.getEQ()) goto loc_823F4AA0;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r29,-1
	cr6.compare<int32_t>(r29.s32, -1, xer);
	// bne cr6,0x823f4aec
	if (!cr6.getEQ()) goto loc_823F4AEC;
	// li r4,-1
	ctx.r4.s64 = -1;
	// b 0x823f4afc
	goto loc_823F4AFC;
loc_823F4AEC:
	// addi r10,r11,-45
	ctx.r10.s64 = r11.s64 + -45;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// subf r4,r10,r29
	ctx.r4.s64 = r29.s64 - ctx.r10.s64;
loc_823F4AFC:
	// addi r11,r11,-45
	r11.s64 = r11.s64 + -45;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// cntlzw r10,r11
	ctx.r10.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// add r5,r11,r30
	ctx.r5.u64 = r11.u64 + r30.u64;
	// rlwinm r11,r10,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// add r3,r11,r31
	ctx.r3.u64 = r11.u64 + r31.u64;
	// bl 0x823fddf0
	sub_823FDDF0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f4b30
	if (cr0.getEQ()) goto loc_823F4B30;
	// li r11,0
	r11.s64 = 0;
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// b 0x823f4b4c
	goto loc_823F4B4C;
loc_823F4B30:
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f4890
	sub_823F4890(ctx, base);
loc_823F4B4C:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823F4B58"))) PPC_WEAK_FUNC(sub_823F4B58);
PPC_FUNC_IMPL(__imp__sub_823F4B58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// ld r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// li r6,22
	ctx.r6.s64 = 22;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// mr r25,r8
	r25.u64 = ctx.r8.u64;
	// bl 0x823fe060
	sub_823FE060(ctx, base);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f4bc4
	if (!cr6.getEQ()) goto loc_823F4BC4;
loc_823F4B94:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x823f4ca0
	goto loc_823F4CA0;
loc_823F4BC4:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x823f4b94
	if (cr6.getEQ()) goto loc_823F4B94;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r30,-1
	cr6.compare<int32_t>(r30.s32, -1, xer);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r4,-1
	ctx.r4.s64 = -1;
	// addi r11,r11,-45
	r11.s64 = r11.s64 + -45;
	// addi r29,r10,-1
	r29.s64 = ctx.r10.s64 + -1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// add r28,r11,r31
	r28.u64 = r11.u64 + r31.u64;
	// beq cr6,0x823f4bf8
	if (cr6.getEQ()) goto loc_823F4BF8;
	// subf r4,r11,r30
	ctx.r4.s64 = r30.s64 - r11.s64;
loc_823F4BF8:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823fddf0
	sub_823FDDF0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f4c1c
	if (cr0.getEQ()) goto loc_823F4C1C;
	// li r11,0
	r11.s64 = 0;
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// b 0x823f4ca0
	goto loc_823F4CA0;
loc_823F4C1C:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// blt cr6,0x823f4c34
	if (cr6.getLT()) goto loc_823F4C34;
	// li r10,0
	ctx.r10.s64 = 0;
loc_823F4C34:
	// cmpwi cr6,r11,-4
	cr6.compare<int32_t>(r11.s32, -4, xer);
	// blt cr6,0x823f4c80
	if (cr6.getLT()) goto loc_823F4C80;
	// cmpw cr6,r11,r27
	cr6.compare<int32_t>(r11.s32, r27.s32, xer);
	// bge cr6,0x823f4c80
	if (!cr6.getLT()) goto loc_823F4C80;
	// extsb. r11,r10
	r11.s64 = ctx.r10.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f4c60
	if (cr0.getEQ()) goto loc_823F4C60;
loc_823F4C4C:
	// lbz r11,0(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 0);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f4c4c
	if (!cr6.getEQ()) goto loc_823F4C4C;
	// stb r11,-2(r28)
	PPC_STORE_U8(r28.u32 + -2, r11.u8);
loc_823F4C60:
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f4890
	sub_823F4890(ctx, base);
	// b 0x823f4ca0
	goto loc_823F4CA0;
loc_823F4C80:
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// li r8,1
	ctx.r8.s64 = 1;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f40b0
	sub_823F40B0(ctx, base);
loc_823F4CA0:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_823F4CA8"))) PPC_WEAK_FUNC(sub_823F4CA8);
PPC_FUNC_IMPL(__imp__sub_823F4CA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// mr r8,r9
	ctx.r8.u64 = ctx.r9.u64;
	// cmpwi cr6,r11,101
	cr6.compare<int32_t>(r11.s32, 101, xer);
	// beq cr6,0x823f4cf0
	if (cr6.getEQ()) goto loc_823F4CF0;
	// cmpwi cr6,r11,69
	cr6.compare<int32_t>(r11.s32, 69, xer);
	// beq cr6,0x823f4cf0
	if (cr6.getEQ()) goto loc_823F4CF0;
	// cmpwi cr6,r11,102
	cr6.compare<int32_t>(r11.s32, 102, xer);
	// bne cr6,0x823f4cd8
	if (!cr6.getEQ()) goto loc_823F4CD8;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// b 0x823f4a68
	sub_823F4A68(ctx, base);
	return;
loc_823F4CD8:
	// cmpwi cr6,r11,97
	cr6.compare<int32_t>(r11.s32, 97, xer);
	// beq cr6,0x823f4cec
	if (cr6.getEQ()) goto loc_823F4CEC;
	// cmpwi cr6,r11,65
	cr6.compare<int32_t>(r11.s32, 65, xer);
	// beq cr6,0x823f4cec
	if (cr6.getEQ()) goto loc_823F4CEC;
	// b 0x823f4b58
	sub_823F4B58(ctx, base);
	return;
loc_823F4CEC:
	// b 0x823f4448
	sub_823F4448(ctx, base);
	return;
loc_823F4CF0:
	// b 0x823f4330
	sub_823F4330(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F4CF8"))) PPC_WEAK_FUNC(sub_823F4CF8);
PPC_FUNC_IMPL(__imp__sub_823F4CF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// cmpwi cr6,r11,101
	cr6.compare<int32_t>(r11.s32, 101, xer);
	// beq cr6,0x823f4d44
	if (cr6.getEQ()) goto loc_823F4D44;
	// cmpwi cr6,r11,69
	cr6.compare<int32_t>(r11.s32, 69, xer);
	// beq cr6,0x823f4d44
	if (cr6.getEQ()) goto loc_823F4D44;
	// cmpwi cr6,r11,102
	cr6.compare<int32_t>(r11.s32, 102, xer);
	// bne cr6,0x823f4d24
	if (!cr6.getEQ()) goto loc_823F4D24;
	// li r7,0
	ctx.r7.s64 = 0;
	// b 0x823f4a68
	sub_823F4A68(ctx, base);
	return;
loc_823F4D24:
	// cmpwi cr6,r11,97
	cr6.compare<int32_t>(r11.s32, 97, xer);
	// beq cr6,0x823f4d3c
	if (cr6.getEQ()) goto loc_823F4D3C;
	// cmpwi cr6,r11,65
	cr6.compare<int32_t>(r11.s32, 65, xer);
	// beq cr6,0x823f4d3c
	if (cr6.getEQ()) goto loc_823F4D3C;
	// li r8,0
	ctx.r8.s64 = 0;
	// b 0x823f4b58
	sub_823F4B58(ctx, base);
	return;
loc_823F4D3C:
	// li r8,0
	ctx.r8.s64 = 0;
	// b 0x823f4448
	sub_823F4448(ctx, base);
	return;
loc_823F4D44:
	// li r8,0
	ctx.r8.s64 = 0;
	// b 0x823f4330
	sub_823F4330(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F4D50"))) PPC_WEAK_FUNC(sub_823F4D50);
PPC_FUNC_IMPL(__imp__sub_823F4D50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r9,r11,-20512
	ctx.r9.s64 = r11.s64 + -20512;
	// li r11,0
	r11.s64 = 0;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
loc_823F4D60:
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r3,r8
	cr6.compare<int32_t>(ctx.r3.s32, ctx.r8.s32, xer);
	// beq cr6,0x823f4d7c
	if (cr6.getEQ()) goto loc_823F4D7C;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// cmplwi cr6,r11,23
	cr6.compare<uint32_t>(r11.u32, 23, xer);
	// blt cr6,0x823f4d60
	if (cr6.getLT()) goto loc_823F4D60;
loc_823F4D7C:
	// cmplwi cr6,r11,23
	cr6.compare<uint32_t>(r11.u32, 23, xer);
	// bgelr cr6
	if (!cr6.getLT()) return;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r9,4
	ctx.r10.s64 = ctx.r9.s64 + 4;
	// lwzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// b 0x8235e140
	sub_8235E140(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F4D94"))) PPC_WEAK_FUNC(sub_823F4D94);
PPC_FUNC_IMPL(__imp__sub_823F4D94) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F4D98"))) PPC_WEAK_FUNC(sub_823F4D98);
PPC_FUNC_IMPL(__imp__sub_823F4D98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,252
	ctx.r3.s64 = 252;
	// bl 0x823f4d50
	sub_823F4D50(ctx, base);
	// li r3,255
	ctx.r3.s64 = 255;
	// bl 0x823f4d50
	sub_823F4D50(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F4DC8"))) PPC_WEAK_FUNC(sub_823F4DC8);
PPC_FUNC_IMPL(__imp__sub_823F4DC8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31987
	r11.s64 = -2096300032;
	// stw r3,-20084(r11)
	PPC_STORE_U32(r11.u32 + -20084, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F4DD8"))) PPC_WEAK_FUNC(sub_823F4DD8);
PPC_FUNC_IMPL(__imp__sub_823F4DD8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// lwz r11,-20084(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20084);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f4e08
	if (cr0.getEQ()) goto loc_823F4E08;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// bne 0x823f4e0c
	if (!cr0.getEQ()) goto loc_823F4E0C;
loc_823F4E08:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F4E0C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F4E20"))) PPC_WEAK_FUNC(sub_823F4E20);
PPC_FUNC_IMPL(__imp__sub_823F4E20) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r3,r11,-20328
	ctx.r3.s64 = r11.s64 + -20328;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F4E30"))) PPC_WEAK_FUNC(sub_823F4E30);
PPC_FUNC_IMPL(__imp__sub_823F4E30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31987
	r31.s64 = -2096300032;
	// lwz r3,-15576(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -15576);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x823f4e5c
	if (!cr6.getEQ()) goto loc_823F4E5C;
	// li r3,512
	ctx.r3.s64 = 512;
	// b 0x823f4e68
	goto loc_823F4E68;
loc_823F4E5C:
	// cmpwi cr6,r3,20
	cr6.compare<int32_t>(ctx.r3.s32, 20, xer);
	// bge cr6,0x823f4e6c
	if (!cr6.getLT()) goto loc_823F4E6C;
	// li r3,20
	ctx.r3.s64 = 20;
loc_823F4E68:
	// stw r3,-15576(r31)
	PPC_STORE_U32(r31.u32 + -15576, ctx.r3.u32);
loc_823F4E6C:
	// li r4,4
	ctx.r4.s64 = 4;
	// bl 0x823f1f38
	sub_823F1F38(ctx, base);
	// lis r30,-31987
	r30.s64 = -2096300032;
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,-15580(r30)
	PPC_STORE_U32(r30.u32 + -15580, ctx.r3.u32);
	// bne 0x823f4eac
	if (!cr0.getEQ()) goto loc_823F4EAC;
	// li r11,20
	r11.s64 = 20;
	// li r4,4
	ctx.r4.s64 = 4;
	// li r3,20
	ctx.r3.s64 = 20;
	// stw r11,-15576(r31)
	PPC_STORE_U32(r31.u32 + -15576, r11.u32);
	// bl 0x823f1f38
	sub_823F1F38(ctx, base);
	// stw r3,-15580(r30)
	PPC_STORE_U32(r30.u32 + -15580, ctx.r3.u32);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x823f4eac
	if (!cr0.getEQ()) goto loc_823F4EAC;
	// li r3,26
	ctx.r3.s64 = 26;
	// b 0x823f4f3c
	goto loc_823F4F3C;
loc_823F4EAC:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r9,r11,-20328
	ctx.r9.s64 = r11.s64 + -20328;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// b 0x823f4ec4
	goto loc_823F4EC4;
loc_823F4EC0:
	// lwz r3,-15580(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + -15580);
loc_823F4EC4:
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// stwx r8,r10,r3
	PPC_STORE_U32(ctx.r10.u32 + ctx.r3.u32, ctx.r8.u32);
	// addi r8,r9,640
	ctx.r8.s64 = ctx.r9.s64 + 640;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// blt cr6,0x823f4ec0
	if (cr6.getLT()) goto loc_823F4EC0;
	// lis r10,-31987
	ctx.r10.s64 = -2096300032;
	// li r11,0
	r11.s64 = 0;
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// addi r7,r10,-15840
	ctx.r7.s64 = ctx.r10.s64 + -15840;
loc_823F4EF0:
	// srawi r10,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	ctx.r10.s64 = r11.s32 >> 5;
	// rlwinm r6,r11,6,21,25
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0x7C0;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r7
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r7.u32);
	// lwzx r10,r10,r6
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r6.u32);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// beq cr6,0x823f4f1c
	if (cr6.getEQ()) goto loc_823F4F1C;
	// cmpwi cr6,r10,-2
	cr6.compare<int32_t>(ctx.r10.s32, -2, xer);
	// beq cr6,0x823f4f1c
	if (cr6.getEQ()) goto loc_823F4F1C;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x823f4f24
	if (!cr6.getEQ()) goto loc_823F4F24;
loc_823F4F1C:
	// li r10,-2
	ctx.r10.s64 = -2;
	// stw r10,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r10.u32);
loc_823F4F24:
	// addi r8,r8,32
	ctx.r8.s64 = ctx.r8.s64 + 32;
	// addi r10,r9,112
	ctx.r10.s64 = ctx.r9.s64 + 112;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpw cr6,r8,r10
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r10.s32, xer);
	// blt cr6,0x823f4ef0
	if (cr6.getLT()) goto loc_823F4EF0;
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F4F3C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F4F58"))) PPC_WEAK_FUNC(sub_823F4F58);
PPC_FUNC_IMPL(__imp__sub_823F4F58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823fe718
	sub_823FE718(ctx, base);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// lbz r11,-20124(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -20124);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f4f7c
	if (cr0.getEQ()) goto loc_823F4F7C;
	// bl 0x823fe238
	sub_823FE238(ctx, base);
loc_823F4F7C:
	// lis r11,-31987
	r11.s64 = -2096300032;
	// lwz r3,-15580(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -15580);
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F4F98"))) PPC_WEAK_FUNC(sub_823F4F98);
PPC_FUNC_IMPL(__imp__sub_823F4F98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-20328
	r11.s64 = r11.s64 + -20328;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// blt cr6,0x823f4fe8
	if (cr6.getLT()) goto loc_823F4FE8;
	// addi r10,r11,608
	ctx.r10.s64 = r11.s64 + 608;
	// cmplw cr6,r31,r10
	cr6.compare<uint32_t>(r31.u32, ctx.r10.u32, xer);
	// bgt cr6,0x823f4fe8
	if (cr6.getGT()) goto loc_823F4FE8;
	// subf r11,r11,r31
	r11.s64 = r31.s64 - r11.s64;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// bl 0x823f8040
	sub_823F8040(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// ori r11,r11,32768
	r11.u64 = r11.u64 | 32768;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// b 0x823f4ff0
	goto loc_823F4FF0;
loc_823F4FE8:
	// addi r3,r31,32
	ctx.r3.s64 = r31.s64 + 32;
	// bl 0x8240f8bc
	__imp__RtlEnterCriticalSection(ctx, base);
loc_823F4FF0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F5008"))) PPC_WEAK_FUNC(sub_823F5008);
PPC_FUNC_IMPL(__imp__sub_823F5008) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmpwi cr6,r3,20
	cr6.compare<int32_t>(ctx.r3.s32, 20, xer);
	// bge cr6,0x823f503c
	if (!cr6.getLT()) goto loc_823F503C;
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x823f8040
	sub_823F8040(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// ori r11,r11,32768
	r11.u64 = r11.u64 | 32768;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// b 0x823f5044
	goto loc_823F5044;
loc_823F503C:
	// addi r3,r31,32
	ctx.r3.s64 = r31.s64 + 32;
	// bl 0x8240f8bc
	__imp__RtlEnterCriticalSection(ctx, base);
loc_823F5044:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F5058"))) PPC_WEAK_FUNC(sub_823F5058);
PPC_FUNC_IMPL(__imp__sub_823F5058) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r10,-20328
	ctx.r10.s64 = ctx.r10.s64 + -20328;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x823f5094
	if (cr6.getLT()) goto loc_823F5094;
	// addi r9,r10,608
	ctx.r9.s64 = ctx.r10.s64 + 608;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bgt cr6,0x823f5094
	if (cr6.getGT()) goto loc_823F5094;
	// lwz r9,12(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// rlwinm r9,r9,0,17,15
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFFFFFF7FFF;
	// srawi r10,r10,5
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1F) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 5;
	// addi r3,r10,16
	ctx.r3.s64 = ctx.r10.s64 + 16;
	// stw r9,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r9.u32);
	// b 0x823f7ee0
	sub_823F7EE0(ctx, base);
	return;
loc_823F5094:
	// addi r3,r11,32
	ctx.r3.s64 = r11.s64 + 32;
	// b 0x8240f8ac
	__imp__RtlLeaveCriticalSection(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F50A0"))) PPC_WEAK_FUNC(sub_823F50A0);
PPC_FUNC_IMPL(__imp__sub_823F50A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmpwi cr6,r3,20
	cr6.compare<int32_t>(ctx.r3.s32, 20, xer);
	// bge cr6,0x823f50bc
	if (!cr6.getLT()) goto loc_823F50BC;
	// lwz r11,12(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 12);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// rlwinm r11,r11,0,17,15
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFF7FFF;
	// stw r11,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, r11.u32);
	// b 0x823f7ee0
	sub_823F7EE0(ctx, base);
	return;
loc_823F50BC:
	// addi r3,r4,32
	ctx.r3.s64 = ctx.r4.s64 + 32;
	// b 0x8240f8ac
	__imp__RtlLeaveCriticalSection(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F50C8"))) PPC_WEAK_FUNC(sub_823F50C8);
PPC_FUNC_IMPL(__imp__sub_823F50C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// bl 0x82345d68
	sub_82345D68(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f51a4
	if (cr0.getEQ()) goto loc_823F51A4;
	// bl 0x823f4e20
	sub_823F4E20(ctx, base);
	// addi r11,r3,32
	r11.s64 = ctx.r3.s64 + 32;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bne cr6,0x823f5100
	if (!cr6.getEQ()) goto loc_823F5100;
	// li r9,0
	ctx.r9.s64 = 0;
	// b 0x823f5114
	goto loc_823F5114;
loc_823F5100:
	// bl 0x823f4e20
	sub_823F4E20(ctx, base);
	// addi r11,r3,64
	r11.s64 = ctx.r3.s64 + 64;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bne cr6,0x823f51a4
	if (!cr6.getEQ()) goto loc_823F51A4;
	// li r9,1
	ctx.r9.s64 = 1;
loc_823F5114:
	// lis r11,-31987
	r11.s64 = -2096300032;
	// lwz r10,-20076(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -20076);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,-20076(r11)
	PPC_STORE_U32(r11.u32 + -20076, ctx.r10.u32);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// andi. r11,r11,268
	r11.u64 = r11.u64 & 268;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f51a4
	if (!cr0.getEQ()) goto loc_823F51A4;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// rlwinm r29,r9,2,0,29
	r29.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r30,r11,-20072
	r30.s64 = r11.s64 + -20072;
	// lwzx r3,r29,r30
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + r30.u32);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x823f517c
	if (!cr0.getEQ()) goto loc_823F517C;
	// li r3,4096
	ctx.r3.s64 = 4096;
	// bl 0x823ed2b0
	sub_823ED2B0(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stwx r3,r29,r30
	PPC_STORE_U32(r29.u32 + r30.u32, ctx.r3.u32);
	// bne 0x823f517c
	if (!cr0.getEQ()) goto loc_823F517C;
	// addi r11,r31,20
	r11.s64 = r31.s64 + 20;
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r10,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r10.u32);
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// b 0x823f5190
	goto loc_823F5190;
loc_823F517C:
	// li r11,4096
	r11.s64 = 4096;
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
loc_823F5190:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// li r3,1
	ctx.r3.s64 = 1;
	// ori r11,r11,4354
	r11.u64 = r11.u64 | 4354;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// b 0x823f51a8
	goto loc_823F51A8;
loc_823F51A4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F51A8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F51B0"))) PPC_WEAK_FUNC(sub_823F51B0);
PPC_FUNC_IMPL(__imp__sub_823F51B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x823f5200
	if (cr6.getEQ()) goto loc_823F5200;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// rlwinm. r11,r11,0,19,19
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f5200
	if (cr0.getEQ()) goto loc_823F5200;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823fe320
	sub_823FE320(ctx, base);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// li r11,0
	r11.s64 = 0;
	// rlwinm r10,r10,0,24,22
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFEFF;
	// rlwinm r10,r10,0,20,18
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFEFFF;
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r10,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r10.u32);
loc_823F5200:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F5218"))) PPC_WEAK_FUNC(sub_823F5218);
PPC_FUNC_IMPL(__imp__sub_823F5218) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r10,12(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 12);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// rlwinm. r10,r10,0,25,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f5248
	if (cr0.getEQ()) goto loc_823F5248;
	// lwz r10,8(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x823f528c
	if (cr6.getEQ()) goto loc_823F528C;
loc_823F5248:
	// lwz r10,4(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r10.u32);
	// blt 0x823f5274
	if (cr0.getLT()) goto loc_823F5274;
	// lwz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// stb r11,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r11.u8);
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// b 0x823f527c
	goto loc_823F527C;
loc_823F5274:
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x823f5e28
	sub_823F5E28(ctx, base);
loc_823F527C:
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// bne cr6,0x823f528c
	if (!cr6.getEQ()) goto loc_823F528C;
	// li r11,-1
	r11.s64 = -1;
	// b 0x823f5294
	goto loc_823F5294;
loc_823F528C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_823F5294:
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F52B0"))) PPC_WEAK_FUNC(sub_823F52B0);
PPC_FUNC_IMPL(__imp__sub_823F52B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-1328(r1)
	ea = -1328 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r27,0
	r27.s64 = 0;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// mr r19,r4
	r19.u64 = ctx.r4.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r25,r27
	r25.u64 = r27.u64;
	// stw r27,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r27.u32);
	// mr r16,r27
	r16.u64 = r27.u64;
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r27.u32);
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// stw r27,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r27.u32);
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// bne cr6,0x823f531c
	if (!cr6.getEQ()) goto loc_823F531C;
loc_823F52EC:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x823f5e1c
	goto loc_823F5E1C;
loc_823F531C:
	// lwz r11,12(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 12);
	// rlwinm. r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f53e8
	if (!cr0.getEQ()) goto loc_823F53E8;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// addi r30,r11,-15840
	r30.s64 = r11.s64 + -15840;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r29,r11,-18648
	r29.s64 = r11.s64 + -18648;
	// beq cr6,0x823f5380
	if (cr6.getEQ()) goto loc_823F5380;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// beq cr6,0x823f5380
	if (cr6.getEQ()) goto loc_823F5380;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// srawi r11,r3,5
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1F) != 0);
	r11.s64 = ctx.r3.s32 >> 5;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// rlwinm r31,r11,2,0,29
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// lwzx r10,r31,r30
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// rlwinm r11,r3,6,21,25
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0x7C0;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x823f5384
	goto loc_823F5384;
loc_823F5380:
	// mr r11,r29
	r11.u64 = r29.u64;
loc_823F5384:
	// lbz r11,40(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 40);
	// rlwinm. r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f52ec
	if (!cr0.getEQ()) goto loc_823F52EC;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x823f53d8
	if (cr6.getEQ()) goto loc_823F53D8;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// beq cr6,0x823f53d8
	if (cr6.getEQ()) goto loc_823F53D8;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// srawi r11,r3,5
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1F) != 0);
	r11.s64 = ctx.r3.s32 >> 5;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// rlwinm r31,r11,2,0,29
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// lwzx r10,r31,r30
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// rlwinm r11,r3,6,21,25
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0x7C0;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x823f53dc
	goto loc_823F53DC;
loc_823F53D8:
	// mr r11,r29
	r11.u64 = r29.u64;
loc_823F53DC:
	// lbz r11,40(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 40);
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f52ec
	if (!cr0.getEQ()) goto loc_823F52EC;
loc_823F53E8:
	// cmplwi cr6,r19,0
	cr6.compare<uint32_t>(r19.u32, 0, xer);
	// beq cr6,0x823f52ec
	if (cr6.getEQ()) goto loc_823F52EC;
	// bl 0x823f4e20
	sub_823F4E20(ctx, base);
	// addi r11,r3,32
	r11.s64 = ctx.r3.s64 + 32;
	// cmplw cr6,r23,r11
	cr6.compare<uint32_t>(r23.u32, r11.u32, xer);
	// beq cr6,0x823f5de8
	if (cr6.getEQ()) goto loc_823F5DE8;
	// bl 0x823f4e20
	sub_823F4E20(ctx, base);
	// addi r11,r3,64
	r11.s64 = ctx.r3.s64 + 64;
	// cmplw cr6,r23,r11
	cr6.compare<uint32_t>(r23.u32, r11.u32, xer);
	// beq cr6,0x823f5de8
	if (cr6.getEQ()) goto loc_823F5DE8;
	// lbz r29,0(r19)
	r29.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// mr r24,r27
	r24.u64 = r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r27,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r27.u32);
	// mr r15,r27
	r15.u64 = r27.u64;
	// stw r24,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r24.u32);
	// stw r8,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r8.u32);
	// extsb. r10,r29
	ctx.r10.s64 = r29.s8;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f5de0
	if (cr0.getEQ()) goto loc_823F5DE0;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lwz r20,112(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r28,112(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lis r14,-32249
	r14.s64 = -2113470464;
	// addi r22,r11,-19456
	r22.s64 = r11.s64 + -19456;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lis r17,-32249
	r17.s64 = -2113470464;
	// addi r21,r11,-20552
	r21.s64 = r11.s64 + -20552;
	// lis r11,-32249
	r11.s64 = -2113470464;
	// addi r18,r11,11008
	r18.s64 = r11.s64 + 11008;
loc_823F545C:
	// addi r19,r19,1
	r19.s64 = r19.s64 + 1;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// blt cr6,0x823f5de0
	if (cr6.getLT()) goto loc_823F5DE0;
	// cmpwi cr6,r10,32
	cr6.compare<int32_t>(ctx.r10.s32, 32, xer);
	// blt cr6,0x823f5488
	if (cr6.getLT()) goto loc_823F5488;
	// cmpwi cr6,r10,120
	cr6.compare<int32_t>(ctx.r10.s32, 120, xer);
	// bgt cr6,0x823f5488
	if (cr6.getGT()) goto loc_823F5488;
	// add r11,r10,r18
	r11.u64 = ctx.r10.u64 + r18.u64;
	// lbz r11,-32(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -32);
	// clrlwi r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	// b 0x823f548c
	goto loc_823F548C;
loc_823F5488:
	// li r11,0
	r11.s64 = 0;
loc_823F548C:
	// lwz r9,104(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lbzx r11,r11,r18
	r11.u64 = PPC_LOAD_U8(r11.u32 + r18.u32);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// srawi r11,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	r11.s64 = r11.s32 >> 4;
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// bgt cr6,0x823f5dcc
	if (cr6.getGT()) goto loc_823F5DCC;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lis r12,-32249
	r12.s64 = -2113470464;
	// addi r12,r12,11216
	r12.s64 = r12.s64 + 11216;
	// rlwinm r0,r11,1,0,30
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r0,r12,r0
	r0.u64 = PPC_LOAD_U16(r12.u32 + r0.u32);
	// lis r12,-32193
	r12.s64 = -2109800448;
	// addi r12,r12,21724
	r12.s64 = r12.s64 + 21724;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_823F56A8;
	case 1:
		goto loc_823F54DC;
	case 2:
		goto loc_823F54FC;
	case 3:
		goto loc_823F554C;
	case 4:
		goto loc_823F5598;
	case 5:
		goto loc_823F55A0;
	case 6:
		goto loc_823F55D8;
	case 7:
		goto loc_823F56F8;
	default:
		__builtin_unreachable();
	}
loc_823F54DC:
	// li r27,0
	r27.s64 = 0;
	// li r25,-1
	r25.s64 = -1;
	// mr r20,r27
	r20.u64 = r27.u64;
	// mr r16,r27
	r16.u64 = r27.u64;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r27.u32);
	// stw r27,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r27.u32);
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F54FC:
	// cmpwi cr6,r10,32
	cr6.compare<int32_t>(ctx.r10.s32, 32, xer);
	// beq cr6,0x823f5544
	if (cr6.getEQ()) goto loc_823F5544;
	// cmpwi cr6,r10,35
	cr6.compare<int32_t>(ctx.r10.s32, 35, xer);
	// beq cr6,0x823f553c
	if (cr6.getEQ()) goto loc_823F553C;
	// cmpwi cr6,r10,43
	cr6.compare<int32_t>(ctx.r10.s32, 43, xer);
	// beq cr6,0x823f5534
	if (cr6.getEQ()) goto loc_823F5534;
	// cmpwi cr6,r10,45
	cr6.compare<int32_t>(ctx.r10.s32, 45, xer);
	// beq cr6,0x823f552c
	if (cr6.getEQ()) goto loc_823F552C;
	// cmpwi cr6,r10,48
	cr6.compare<int32_t>(ctx.r10.s32, 48, xer);
	// bne cr6,0x823f5dcc
	if (!cr6.getEQ()) goto loc_823F5DCC;
	// ori r27,r27,8
	r27.u64 = r27.u64 | 8;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F552C:
	// ori r27,r27,4
	r27.u64 = r27.u64 | 4;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F5534:
	// ori r27,r27,1
	r27.u64 = r27.u64 | 1;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F553C:
	// ori r27,r27,128
	r27.u64 = r27.u64 | 128;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F5544:
	// ori r27,r27,2
	r27.u64 = r27.u64 | 2;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F554C:
	// cmpwi cr6,r10,42
	cr6.compare<int32_t>(ctx.r10.s32, 42, xer);
	// bne cr6,0x823f5580
	if (!cr6.getEQ()) goto loc_823F5580;
	// addi r11,r26,7
	r11.s64 = r26.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r26,r11,8
	r26.s64 = r11.s64 + 8;
	// lwz r11,-4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -4);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bge 0x823f5dcc
	if (!cr0.getLT()) goto loc_823F5DCC;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// ori r27,r27,4
	r27.u64 = r27.u64 | 4;
	// neg r11,r11
	r11.s64 = -r11.s64;
	// b 0x823f5590
	goto loc_823F5590;
loc_823F5580:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mulli r11,r11,10
	r11.s64 = r11.s64 * 10;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
loc_823F5590:
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F5598:
	// li r25,0
	r25.s64 = 0;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F55A0:
	// cmpwi cr6,r10,42
	cr6.compare<int32_t>(ctx.r10.s32, 42, xer);
	// bne cr6,0x823f55c8
	if (!cr6.getEQ()) goto loc_823F55C8;
	// addi r11,r26,7
	r11.s64 = r26.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r26,r11,8
	r26.s64 = r11.s64 + 8;
	// lwz r25,-4(r26)
	r25.u64 = PPC_LOAD_U32(r26.u32 + -4);
	// cmpwi r25,0
	cr0.compare<int32_t>(r25.s32, 0, xer);
	// bge 0x823f5dcc
	if (!cr0.getLT()) goto loc_823F5DCC;
	// li r25,-1
	r25.s64 = -1;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F55C8:
	// mulli r11,r25,10
	r11.s64 = r25.s64 * 10;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r25,r11,-48
	r25.s64 = r11.s64 + -48;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F55D8:
	// cmpwi cr6,r10,73
	cr6.compare<int32_t>(ctx.r10.s32, 73, xer);
	// beq cr6,0x823f5628
	if (cr6.getEQ()) goto loc_823F5628;
	// cmpwi cr6,r10,104
	cr6.compare<int32_t>(ctx.r10.s32, 104, xer);
	// beq cr6,0x823f5620
	if (cr6.getEQ()) goto loc_823F5620;
	// cmpwi cr6,r10,108
	cr6.compare<int32_t>(ctx.r10.s32, 108, xer);
	// beq cr6,0x823f5600
	if (cr6.getEQ()) goto loc_823F5600;
	// cmpwi cr6,r10,119
	cr6.compare<int32_t>(ctx.r10.s32, 119, xer);
	// bne cr6,0x823f5dcc
	if (!cr6.getEQ()) goto loc_823F5DCC;
	// ori r27,r27,2048
	r27.u64 = r27.u64 | 2048;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F5600:
	// lbz r11,0(r19)
	r11.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// cmplwi cr6,r11,108
	cr6.compare<uint32_t>(r11.u32, 108, xer);
	// bne cr6,0x823f5618
	if (!cr6.getEQ()) goto loc_823F5618;
	// addi r19,r19,1
	r19.s64 = r19.s64 + 1;
	// ori r27,r27,4096
	r27.u64 = r27.u64 | 4096;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F5618:
	// ori r27,r27,16
	r27.u64 = r27.u64 | 16;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F5620:
	// ori r27,r27,32
	r27.u64 = r27.u64 | 32;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F5628:
	// lbz r11,0(r19)
	r11.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,54
	cr6.compare<int32_t>(r11.s32, 54, xer);
	// bne cr6,0x823f5650
	if (!cr6.getEQ()) goto loc_823F5650;
	// lbz r10,1(r19)
	ctx.r10.u64 = PPC_LOAD_U8(r19.u32 + 1);
	// cmplwi cr6,r10,52
	cr6.compare<uint32_t>(ctx.r10.u32, 52, xer);
	// bne cr6,0x823f5650
	if (!cr6.getEQ()) goto loc_823F5650;
	// addi r19,r19,2
	r19.s64 = r19.s64 + 2;
	// ori r27,r27,32768
	r27.u64 = r27.u64 | 32768;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F5650:
	// cmpwi cr6,r11,51
	cr6.compare<int32_t>(r11.s32, 51, xer);
	// bne cr6,0x823f5670
	if (!cr6.getEQ()) goto loc_823F5670;
	// lbz r10,1(r19)
	ctx.r10.u64 = PPC_LOAD_U8(r19.u32 + 1);
	// cmplwi cr6,r10,50
	cr6.compare<uint32_t>(ctx.r10.u32, 50, xer);
	// bne cr6,0x823f5670
	if (!cr6.getEQ()) goto loc_823F5670;
	// addi r19,r19,2
	r19.s64 = r19.s64 + 2;
	// rlwinm r27,r27,0,17,15
	r27.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0xFFFFFFFFFFFF7FFF;
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F5670:
	// cmpwi cr6,r11,100
	cr6.compare<int32_t>(r11.s32, 100, xer);
	// beq cr6,0x823f5dcc
	if (cr6.getEQ()) goto loc_823F5DCC;
	// cmpwi cr6,r11,105
	cr6.compare<int32_t>(r11.s32, 105, xer);
	// beq cr6,0x823f5dcc
	if (cr6.getEQ()) goto loc_823F5DCC;
	// cmpwi cr6,r11,111
	cr6.compare<int32_t>(r11.s32, 111, xer);
	// beq cr6,0x823f5dcc
	if (cr6.getEQ()) goto loc_823F5DCC;
	// cmpwi cr6,r11,117
	cr6.compare<int32_t>(r11.s32, 117, xer);
	// beq cr6,0x823f5dcc
	if (cr6.getEQ()) goto loc_823F5DCC;
	// cmpwi cr6,r11,120
	cr6.compare<int32_t>(r11.s32, 120, xer);
	// beq cr6,0x823f5dcc
	if (cr6.getEQ()) goto loc_823F5DCC;
	// cmpwi cr6,r11,88
	cr6.compare<int32_t>(r11.s32, 88, xer);
	// beq cr6,0x823f5dcc
	if (cr6.getEQ()) goto loc_823F5DCC;
	// li r11,0
	r11.s64 = 0;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
loc_823F56A8:
	// clrlwi r3,r29,24
	ctx.r3.u64 = r29.u32 & 0xFF;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// li r16,0
	r16.s64 = 0;
	// bl 0x823fe8a8
	sub_823FE8A8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f56e0
	if (cr0.getEQ()) goto loc_823F56E0;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823f5218
	sub_823F5218(ctx, base);
	// lbz r29,0(r19)
	r29.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// addi r19,r19,1
	r19.s64 = r19.s64 + 1;
	// cmplwi r29,0
	cr0.compare<uint32_t>(r29.u32, 0, xer);
	// beq 0x823f52ec
	if (cr0.getEQ()) goto loc_823F52EC;
loc_823F56E0:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823f5218
	sub_823F5218(ctx, base);
	// lwz r24,80(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// b 0x823f5dcc
	goto loc_823F5DCC;
loc_823F56F8:
	// addi r11,r10,-65
	r11.s64 = ctx.r10.s64 + -65;
	// cmplwi cr6,r11,55
	cr6.compare<uint32_t>(r11.u32, 55, xer);
	// bgt cr6,0x823f5bf8
	if (cr6.getGT()) goto loc_823F5BF8;
	// lis r12,-32249
	r12.s64 = -2113470464;
	// addi r12,r12,11104
	r12.s64 = r12.s64 + 11104;
	// rlwinm r0,r11,1,0,30
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r0,r12,r0
	r0.u64 = PPC_LOAD_U16(r12.u32 + r0.u32);
	// lis r12,-32193
	r12.s64 = -2109800448;
	// addi r12,r12,22316
	r12.s64 = r12.s64 + 22316;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_823F5908;
	case 1:
		goto loc_823F5BF8;
	case 2:
		goto loc_823F572C;
	case 3:
		goto loc_823F5BF8;
	case 4:
		goto loc_823F5908;
	case 5:
		goto loc_823F5BF8;
	case 6:
		goto loc_823F5908;
	case 7:
		goto loc_823F5BF8;
	case 8:
		goto loc_823F5BF8;
	case 9:
		goto loc_823F5BF8;
	case 10:
		goto loc_823F5BF8;
	case 11:
		goto loc_823F5BF8;
	case 12:
		goto loc_823F5BF8;
	case 13:
		goto loc_823F5BF8;
	case 14:
		goto loc_823F5BF8;
	case 15:
		goto loc_823F5BF8;
	case 16:
		goto loc_823F5BF8;
	case 17:
		goto loc_823F5BF8;
	case 18:
		goto loc_823F5814;
	case 19:
		goto loc_823F5BF8;
	case 20:
		goto loc_823F5BF8;
	case 21:
		goto loc_823F5BF8;
	case 22:
		goto loc_823F5BF8;
	case 23:
		goto loc_823F5A48;
	case 24:
		goto loc_823F5BF8;
	case 25:
		goto loc_823F5798;
	case 26:
		goto loc_823F5BF8;
	case 27:
		goto loc_823F5BF8;
	case 28:
		goto loc_823F5BF8;
	case 29:
		goto loc_823F5BF8;
	case 30:
		goto loc_823F5BF8;
	case 31:
		goto loc_823F5BF8;
	case 32:
		goto loc_823F5914;
	case 33:
		goto loc_823F5BF8;
	case 34:
		goto loc_823F573C;
	case 35:
		goto loc_823F5A38;
	case 36:
		goto loc_823F5914;
	case 37:
		goto loc_823F5914;
	case 38:
		goto loc_823F5914;
	case 39:
		goto loc_823F5BF8;
	case 40:
		goto loc_823F5A38;
	case 41:
		goto loc_823F5BF8;
	case 42:
		goto loc_823F5BF8;
	case 43:
		goto loc_823F5BF8;
	case 44:
		goto loc_823F5BF8;
	case 45:
		goto loc_823F58CC;
	case 46:
		goto loc_823F5A80;
	case 47:
		goto loc_823F5A44;
	case 48:
		goto loc_823F5BF8;
	case 49:
		goto loc_823F5BF8;
	case 50:
		goto loc_823F5824;
	case 51:
		goto loc_823F5BF8;
	case 52:
		goto loc_823F5A3C;
	case 53:
		goto loc_823F5BF8;
	case 54:
		goto loc_823F5BF8;
	case 55:
		goto loc_823F5A50;
	default:
		__builtin_unreachable();
	}
loc_823F572C:
	// andi. r11,r27,2096
	r11.u64 = r27.u64 & 2096;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f573c
	if (!cr0.getEQ()) goto loc_823F573C;
	// ori r27,r27,2048
	r27.u64 = r27.u64 | 2048;
loc_823F573C:
	// andi. r11,r27,2064
	r11.u64 = r27.u64 & 2064;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r26,7
	r11.s64 = r26.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r26,r11,8
	r26.s64 = r11.s64 + 8;
	// beq 0x823f577c
	if (cr0.getEQ()) goto loc_823F577C;
	// li r5,512
	ctx.r5.s64 = 512;
	// lhz r6,-2(r26)
	ctx.r6.u64 = PPC_LOAD_U16(r26.u32 + -2);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x823fe8a0
	sub_823FE8A0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f578c
	if (cr0.getEQ()) goto loc_823F578C;
	// li r11,1
	r11.s64 = 1;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// b 0x823f578c
	goto loc_823F578C;
loc_823F577C:
	// lwz r11,-4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -4);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// stb r11,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, r11.u8);
loc_823F578C:
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r28,r1,144
	r28.s64 = ctx.r1.s64 + 144;
	// b 0x823f5bf8
	goto loc_823F5BF8;
loc_823F5798:
	// addi r11,r26,7
	r11.s64 = r26.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r26,r11,8
	r26.s64 = r11.s64 + 8;
	// lwz r11,-4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f57e8
	if (cr0.getEQ()) goto loc_823F57E8;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x823f57e8
	if (cr0.getEQ()) goto loc_823F57E8;
	// rlwinm. r9,r27,0,20,20
	ctx.r9.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x800;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r28,r10
	r28.u64 = ctx.r10.u64;
	// beq 0x823f57dc
	if (cr0.getEQ()) goto loc_823F57DC;
	// lha r11,0(r11)
	r11.s64 = int16_t(PPC_LOAD_U16(r11.u32 + 0));
	// li r16,1
	r16.s64 = 1;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r8,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r8.s64 = temp.s64;
	// b 0x823f5bf4
	goto loc_823F5BF4;
loc_823F57DC:
	// lha r8,0(r11)
	ctx.r8.s64 = int16_t(PPC_LOAD_U16(r11.u32 + 0));
	// li r16,0
	r16.s64 = 0;
	// b 0x823f5bf4
	goto loc_823F5BF4;
loc_823F57E8:
	// lwz r28,10996(r17)
	r28.u64 = PPC_LOAD_U32(r17.u32 + 10996);
	// mr r11,r28
	r11.u64 = r28.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F57F4:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f57f4
	if (!cr6.getEQ()) goto loc_823F57F4;
loc_823F5804:
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r8,r11,0
	ctx.r8.u64 = __builtin_rotateleft32(r11.u32, 0);
	// b 0x823f5bf4
	goto loc_823F5BF4;
loc_823F5814:
	// andi. r11,r27,2096
	r11.u64 = r27.u64 & 2096;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f5824
	if (!cr0.getEQ()) goto loc_823F5824;
	// ori r27,r27,2048
	r27.u64 = r27.u64 | 2048;
loc_823F5824:
	// cmpwi cr6,r25,-1
	cr6.compare<int32_t>(r25.s32, -1, xer);
	// bne cr6,0x823f5838
	if (!cr6.getEQ()) goto loc_823F5838;
	// lis r10,32767
	ctx.r10.s64 = 2147418112;
	// ori r10,r10,65535
	ctx.r10.u64 = ctx.r10.u64 | 65535;
	// b 0x823f583c
	goto loc_823F583C;
loc_823F5838:
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
loc_823F583C:
	// addi r11,r26,7
	r11.s64 = r26.s64 + 7;
	// andi. r9,r27,2064
	ctx.r9.u64 = r27.u64 & 2064;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// cmpwi r9,0
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// addi r26,r11,8
	r26.s64 = r11.s64 + 8;
	// lwz r28,-4(r26)
	r28.u64 = PPC_LOAD_U32(r26.u32 + -4);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq 0x823f5898
	if (cr0.getEQ()) goto loc_823F5898;
	// bne cr6,0x823f5864
	if (!cr6.getEQ()) goto loc_823F5864;
	// lwz r28,11000(r14)
	r28.u64 = PPC_LOAD_U32(r14.u32 + 11000);
loc_823F5864:
	// li r16,1
	r16.s64 = 1;
	// mr r11,r28
	r11.u64 = r28.u64;
	// b 0x823f5884
	goto loc_823F5884;
loc_823F5870:
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmplwi r9,0
	cr0.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq 0x823f588c
	if (cr0.getEQ()) goto loc_823F588C;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
loc_823F5884:
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x823f5870
	if (!cr6.getEQ()) goto loc_823F5870;
loc_823F588C:
	// subf r11,r28,r11
	r11.s64 = r11.s64 - r28.s64;
	// srawi r8,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r8.s64 = r11.s32 >> 1;
	// b 0x823f5bf4
	goto loc_823F5BF4;
loc_823F5898:
	// bne cr6,0x823f58a0
	if (!cr6.getEQ()) goto loc_823F58A0;
	// lwz r28,10996(r17)
	r28.u64 = PPC_LOAD_U32(r17.u32 + 10996);
loc_823F58A0:
	// mr r11,r28
	r11.u64 = r28.u64;
	// b 0x823f58bc
	goto loc_823F58BC;
loc_823F58A8:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x823f58c4
	if (cr6.getEQ()) goto loc_823F58C4;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_823F58BC:
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x823f58a8
	if (!cr6.getEQ()) goto loc_823F58A8;
loc_823F58C4:
	// subf r8,r28,r11
	ctx.r8.s64 = r11.s64 - r28.s64;
	// b 0x823f5bf4
	goto loc_823F5BF4;
loc_823F58CC:
	// addi r11,r26,7
	r11.s64 = r26.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r26,r11,8
	r26.s64 = r11.s64 + 8;
	// lwz r31,-4(r26)
	r31.u64 = PPC_LOAD_U32(r26.u32 + -4);
	// bl 0x823ed4a0
	sub_823ED4A0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f52ec
	if (cr0.getEQ()) goto loc_823F52EC;
	// rlwinm. r11,r27,0,26,26
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f58f8
	if (cr0.getEQ()) goto loc_823F58F8;
	// sth r24,0(r31)
	PPC_STORE_U16(r31.u32 + 0, r24.u16);
	// b 0x823f58fc
	goto loc_823F58FC;
loc_823F58F8:
	// stw r24,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r24.u32);
loc_823F58FC:
	// li r11,1
	r11.s64 = 1;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// b 0x823f5db8
	goto loc_823F5DB8;
loc_823F5908:
	// addi r11,r10,32
	r11.s64 = ctx.r10.s64 + 32;
	// li r20,1
	r20.s64 = 1;
	// extsb r29,r11
	r29.s64 = r11.s8;
loc_823F5914:
	// ori r27,r27,64
	r27.u64 = r27.u64 | 64;
	// addi r28,r1,144
	r28.s64 = ctx.r1.s64 + 144;
	// li r30,512
	r30.s64 = 512;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bge cr6,0x823f5930
	if (!cr6.getLT()) goto loc_823F5930;
	// li r25,6
	r25.s64 = 6;
	// b 0x823f5980
	goto loc_823F5980;
loc_823F5930:
	// bne cr6,0x823f5948
	if (!cr6.getEQ()) goto loc_823F5948;
	// extsb r11,r29
	r11.s64 = r29.s8;
	// cmpwi cr6,r11,103
	cr6.compare<int32_t>(r11.s32, 103, xer);
	// bne cr6,0x823f5980
	if (!cr6.getEQ()) goto loc_823F5980;
	// li r25,1
	r25.s64 = 1;
	// b 0x823f5980
	goto loc_823F5980;
loc_823F5948:
	// cmpwi cr6,r25,512
	cr6.compare<int32_t>(r25.s32, 512, xer);
	// ble cr6,0x823f5954
	if (!cr6.getGT()) goto loc_823F5954;
	// li r25,512
	r25.s64 = 512;
loc_823F5954:
	// cmpwi cr6,r25,163
	cr6.compare<int32_t>(r25.s32, 163, xer);
	// ble cr6,0x823f5980
	if (!cr6.getGT()) goto loc_823F5980;
	// addi r31,r25,349
	r31.s64 = r25.s64 + 349;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ed2b0
	sub_823ED2B0(ctx, base);
	// mr. r15,r3
	r15.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r15.s32, 0, xer);
	// beq 0x823f597c
	if (cr0.getEQ()) goto loc_823F597C;
	// mr r28,r15
	r28.u64 = r15.u64;
	// mr r30,r31
	r30.u64 = r31.u64;
	// b 0x823f5980
	goto loc_823F5980;
loc_823F597C:
	// li r25,163
	r25.s64 = 163;
loc_823F5980:
	// addi r11,r26,7
	r11.s64 = r26.s64 + 7;
	// extsb r31,r29
	r31.s64 = r29.s8;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// mr r8,r20
	ctx.r8.u64 = r20.u64;
	// addi r26,r11,8
	r26.s64 = r11.s64 + 8;
	// lwz r11,24(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 24);
	// mr r9,r22
	ctx.r9.u64 = r22.u64;
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// ld r10,-8(r26)
	ctx.r10.u64 = PPC_LOAD_U64(r26.u32 + -8);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// std r10,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r10.u64);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm. r30,r27,0,24,24
	r30.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// beq 0x823f59e4
	if (cr0.getEQ()) goto loc_823F59E4;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x823f59e4
	if (!cr6.getEQ()) goto loc_823F59E4;
	// lwz r11,36(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 36);
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_823F59E4:
	// cmpwi cr6,r31,103
	cr6.compare<int32_t>(r31.s32, 103, xer);
	// bne cr6,0x823f5a08
	if (!cr6.getEQ()) goto loc_823F5A08;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x823f5a08
	if (!cr6.getEQ()) goto loc_823F5A08;
	// lwz r11,32(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 32);
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_823F5A08:
	// lbz r11,0(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 0);
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x823f5a1c
	if (!cr6.getEQ()) goto loc_823F5A1C;
	// ori r27,r27,256
	r27.u64 = r27.u64 | 256;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_823F5A1C:
	// mr r11,r28
	r11.u64 = r28.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F5A24:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f5a24
	if (!cr6.getEQ()) goto loc_823F5A24;
	// b 0x823f5804
	goto loc_823F5804;
loc_823F5A38:
	// ori r27,r27,64
	r27.u64 = r27.u64 | 64;
loc_823F5A3C:
	// li r8,10
	ctx.r8.s64 = 10;
	// b 0x823f5a90
	goto loc_823F5A90;
loc_823F5A44:
	// li r25,8
	r25.s64 = 8;
loc_823F5A48:
	// li r11,7
	r11.s64 = 7;
	// b 0x823f5a54
	goto loc_823F5A54;
loc_823F5A50:
	// li r11,39
	r11.s64 = 39;
loc_823F5A54:
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// rlwinm. r10,r27,0,24,24
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// li r8,16
	ctx.r8.s64 = 16;
	// beq 0x823f5a90
	if (cr0.getEQ()) goto loc_823F5A90;
	// addi r11,r11,81
	r11.s64 = r11.s64 + 81;
	// li r10,48
	ctx.r10.s64 = 48;
	// stb r11,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, r11.u8);
	// li r11,2
	r11.s64 = 2;
	// stb r10,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r10.u8);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// b 0x823f5a90
	goto loc_823F5A90;
loc_823F5A80:
	// rlwinm. r11,r27,0,24,24
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r8,8
	ctx.r8.s64 = 8;
	// beq 0x823f5a90
	if (cr0.getEQ()) goto loc_823F5A90;
	// ori r27,r27,512
	r27.u64 = r27.u64 | 512;
loc_823F5A90:
	// rlwinm. r11,r27,0,16,16
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f5aa0
	if (!cr0.getEQ()) goto loc_823F5AA0;
	// rlwinm. r11,r27,0,19,19
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x1000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f5ab4
	if (cr0.getEQ()) goto loc_823F5AB4;
loc_823F5AA0:
	// addi r11,r26,7
	r11.s64 = r26.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r26,r11,8
	r26.s64 = r11.s64 + 8;
	// ld r11,-8(r26)
	r11.u64 = PPC_LOAD_U64(r26.u32 + -8);
	// b 0x823f5b04
	goto loc_823F5B04;
loc_823F5AB4:
	// rlwinm. r11,r27,0,26,26
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f5ae4
	if (cr0.getEQ()) goto loc_823F5AE4;
	// rlwinm. r11,r27,0,25,25
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r26,7
	r11.s64 = r26.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r26,r11,8
	r26.s64 = r11.s64 + 8;
	// lwz r11,-4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -4);
	// beq 0x823f5adc
	if (cr0.getEQ()) goto loc_823F5ADC;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// b 0x823f5b04
	goto loc_823F5B04;
loc_823F5ADC:
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// b 0x823f5b04
	goto loc_823F5B04;
loc_823F5AE4:
	// rlwinm. r11,r27,0,25,25
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r26,7
	r11.s64 = r26.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r26,r11,8
	r26.s64 = r11.s64 + 8;
	// beq 0x823f5b00
	if (cr0.getEQ()) goto loc_823F5B00;
	// lwa r11,-4(r26)
	r11.s64 = int32_t(PPC_LOAD_U32(r26.u32 + -4));
	// b 0x823f5b04
	goto loc_823F5B04;
loc_823F5B00:
	// lwz r11,-4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -4);
loc_823F5B04:
	// rlwinm. r10,r27,0,25,25
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f5b1c
	if (cr0.getEQ()) goto loc_823F5B1C;
	// cmpdi cr6,r11,0
	cr6.compare<int64_t>(r11.s64, 0, xer);
	// bge cr6,0x823f5b1c
	if (!cr6.getLT()) goto loc_823F5B1C;
	// neg r11,r11
	r11.s64 = -r11.s64;
	// ori r27,r27,256
	r27.u64 = r27.u64 | 256;
loc_823F5B1C:
	// rlwinm. r10,r27,0,16,16
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823f5b30
	if (!cr0.getEQ()) goto loc_823F5B30;
	// rlwinm. r10,r27,0,19,19
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x1000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823f5b30
	if (!cr0.getEQ()) goto loc_823F5B30;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
loc_823F5B30:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bge cr6,0x823f5b40
	if (!cr6.getLT()) goto loc_823F5B40;
	// li r25,1
	r25.s64 = 1;
	// b 0x823f5b50
	goto loc_823F5B50;
loc_823F5B40:
	// rlwinm r27,r27,0,29,27
	r27.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// cmpwi cr6,r25,512
	cr6.compare<int32_t>(r25.s32, 512, xer);
	// ble cr6,0x823f5b50
	if (!cr6.getGT()) goto loc_823F5B50;
	// li r25,512
	r25.s64 = 512;
loc_823F5B50:
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// bne cr6,0x823f5b60
	if (!cr6.getEQ()) goto loc_823F5B60;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
loc_823F5B60:
	// addi r9,r1,655
	ctx.r9.s64 = ctx.r1.s64 + 655;
loc_823F5B64:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// addi r25,r25,-1
	r25.s64 = r25.s64 + -1;
	// bgt cr6,0x823f5b78
	if (cr6.getGT()) goto loc_823F5B78;
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// beq cr6,0x823f5bb8
	if (cr6.getEQ()) goto loc_823F5BB8;
loc_823F5B78:
	// extsw r10,r8
	ctx.r10.s64 = ctx.r8.s32;
	// divdu r7,r11,r10
	ctx.r7.u64 = r11.u64 / ctx.r10.u64;
	// tdllei r10,0
	// mulld r7,r7,r10
	ctx.r7.s64 = ctx.r7.s64 * ctx.r10.s64;
	// subf r7,r7,r11
	ctx.r7.s64 = r11.s64 - ctx.r7.s64;
	// divdu r11,r11,r10
	r11.u64 = r11.u64 / ctx.r10.u64;
	// tdllei r10,0
	// rotlwi r10,r7,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r7.u32, 0);
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmpwi cr6,r10,57
	cr6.compare<int32_t>(ctx.r10.s32, 57, xer);
	// ble cr6,0x823f5bac
	if (!cr6.getGT()) goto loc_823F5BAC;
	// lwz r7,108(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// add r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 + ctx.r7.u64;
loc_823F5BAC:
	// stb r10,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, ctx.r10.u8);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// b 0x823f5b64
	goto loc_823F5B64;
loc_823F5BB8:
	// addi r11,r1,655
	r11.s64 = ctx.r1.s64 + 655;
	// rlwinm. r10,r27,0,22,22
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x200;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// subf r8,r9,r11
	ctx.r8.s64 = r11.s64 - ctx.r9.s64;
	// addi r28,r9,1
	r28.s64 = ctx.r9.s64 + 1;
	// stw r8,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r8.u32);
	// beq 0x823f5bf8
	if (cr0.getEQ()) goto loc_823F5BF8;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x823f5be4
	if (cr6.getEQ()) goto loc_823F5BE4;
	// lbz r11,0(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 0);
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// beq cr6,0x823f5bf8
	if (cr6.getEQ()) goto loc_823F5BF8;
loc_823F5BE4:
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// li r11,48
	r11.s64 = 48;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// stb r11,0(r28)
	PPC_STORE_U8(r28.u32 + 0, r11.u8);
loc_823F5BF4:
	// stw r8,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r8.u32);
loc_823F5BF8:
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823f5db8
	if (!cr6.getEQ()) goto loc_823F5DB8;
	// rlwinm. r11,r27,0,25,25
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f5c48
	if (cr0.getEQ()) goto loc_823F5C48;
	// rlwinm. r11,r27,0,23,23
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x100;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f5c1c
	if (cr0.getEQ()) goto loc_823F5C1C;
	// li r11,45
	r11.s64 = 45;
	// b 0x823f5c28
	goto loc_823F5C28;
loc_823F5C1C:
	// clrlwi. r11,r27,31
	r11.u64 = r27.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f5c38
	if (cr0.getEQ()) goto loc_823F5C38;
	// li r11,43
	r11.s64 = 43;
loc_823F5C28:
	// li r30,1
	r30.s64 = 1;
	// stb r11,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, r11.u8);
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r30.u32);
	// b 0x823f5c4c
	goto loc_823F5C4C;
loc_823F5C38:
	// rlwinm. r11,r27,0,30,30
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f5c48
	if (cr0.getEQ()) goto loc_823F5C48;
	// li r11,32
	r11.s64 = 32;
	// b 0x823f5c28
	goto loc_823F5C28;
loc_823F5C48:
	// lwz r30,92(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
loc_823F5C4C:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// rlwinm. r10,r27,0,28,29
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0xC;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// subf r29,r30,r11
	r29.s64 = r11.s64 - r30.s64;
	// bne 0x823f5c94
	if (!cr0.getEQ()) goto loc_823F5C94;
	// mr r31,r29
	r31.u64 = r29.u64;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// ble cr6,0x823f5c94
	if (!cr6.getGT()) goto loc_823F5C94;
loc_823F5C6C:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// bl 0x823f5218
	sub_823F5218(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beq cr6,0x823f5c94
	if (cr6.getEQ()) goto loc_823F5C94;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bgt cr6,0x823f5c6c
	if (cr6.getGT()) goto loc_823F5C6C;
loc_823F5C94:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x823fe8c8
	sub_823FE8C8(ctx, base);
	// rlwinm. r11,r27,0,28,28
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f5cec
	if (cr0.getEQ()) goto loc_823F5CEC;
	// rlwinm. r11,r27,0,29,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f5cec
	if (!cr0.getEQ()) goto loc_823F5CEC;
	// mr r31,r29
	r31.u64 = r29.u64;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// ble cr6,0x823f5cec
	if (!cr6.getGT()) goto loc_823F5CEC;
loc_823F5CC4:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// li r3,48
	ctx.r3.s64 = 48;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// bl 0x823f5218
	sub_823F5218(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beq cr6,0x823f5cec
	if (cr6.getEQ()) goto loc_823F5CEC;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bgt cr6,0x823f5cc4
	if (cr6.getGT()) goto loc_823F5CC4;
loc_823F5CEC:
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// beq cr6,0x823f5d60
	if (cr6.getEQ()) goto loc_823F5D60;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x823f5d60
	if (!cr6.getGT()) goto loc_823F5D60;
	// mr r30,r28
	r30.u64 = r28.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
loc_823F5D08:
	// li r5,6
	ctx.r5.s64 = 6;
	// lhz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U16(r30.u32 + 0);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// bl 0x823fe8a0
	sub_823FE8A0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f5d54
	if (!cr0.getEQ()) goto loc_823F5D54;
	// lwz r4,112(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// beq cr6,0x823f5d54
	if (cr6.getEQ()) goto loc_823F5D54;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x823fe8c8
	sub_823FE8C8(ctx, base);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bne cr6,0x823f5d08
	if (!cr6.getEQ()) goto loc_823F5D08;
	// b 0x823f5d70
	goto loc_823F5D70;
loc_823F5D54:
	// li r24,-1
	r24.s64 = -1;
	// stw r24,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r24.u32);
	// b 0x823f5d74
	goto loc_823F5D74;
loc_823F5D60:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823fe8c8
	sub_823FE8C8(ctx, base);
loc_823F5D70:
	// lwz r24,80(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_823F5D74:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// blt cr6,0x823f5db8
	if (cr6.getLT()) goto loc_823F5DB8;
	// rlwinm. r11,r27,0,29,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f5db8
	if (cr0.getEQ()) goto loc_823F5DB8;
	// mr r31,r29
	r31.u64 = r29.u64;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// ble cr6,0x823f5db8
	if (!cr6.getGT()) goto loc_823F5DB8;
loc_823F5D90:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// bl 0x823f5218
	sub_823F5218(ctx, base);
	// lwz r24,80(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r24,-1
	cr6.compare<int32_t>(r24.s32, -1, xer);
	// beq cr6,0x823f5db8
	if (cr6.getEQ()) goto loc_823F5DB8;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bgt cr6,0x823f5d90
	if (cr6.getGT()) goto loc_823F5D90;
loc_823F5DB8:
	// cmplwi cr6,r15,0
	cr6.compare<uint32_t>(r15.u32, 0, xer);
	// beq cr6,0x823f5dcc
	if (cr6.getEQ()) goto loc_823F5DCC;
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// li r15,0
	r15.s64 = 0;
loc_823F5DCC:
	// lbz r29,0(r19)
	r29.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// extsb. r10,r29
	ctx.r10.s64 = r29.s8;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f5de0
	if (cr0.getEQ()) goto loc_823F5DE0;
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// b 0x823f545c
	goto loc_823F545C;
loc_823F5DE0:
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// b 0x823f5e1c
	goto loc_823F5E1C;
loc_823F5DE8:
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r19
	ctx.r5.u64 = r19.u64;
	// li r4,512
	ctx.r4.s64 = 512;
	// addi r3,r1,656
	ctx.r3.s64 = ctx.r1.s64 + 656;
	// bl 0x823eef48
	sub_823EEF48(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,-1
	cr6.compare<int32_t>(r31.s32, -1, xer);
	// bne cr6,0x823f5e10
	if (!cr6.getEQ()) goto loc_823F5E10;
	// li r31,511
	r31.s64 = 511;
	// stb r27,1167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1167, r27.u8);
loc_823F5E10:
	// addi r3,r1,656
	ctx.r3.s64 = ctx.r1.s64 + 656;
	// bl 0x8235e140
	sub_8235E140(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_823F5E1C:
	// addi r1,r1,1328
	ctx.r1.s64 = ctx.r1.s64 + 1328;
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_823F5E28"))) PPC_WEAK_FUNC(sub_823F5E28);
PPC_FUNC_IMPL(__imp__sub_823F5E28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// stw r3,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r3.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// andi. r10,r11,130
	ctx.r10.u64 = r11.u64 & 130;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmpwi r10,0
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823f5e7c
	if (!cr0.getEQ()) goto loc_823F5E7C;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r10,9
	ctx.r10.s64 = 9;
loc_823F5E60:
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_823F5E68:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
loc_823F5E6C:
	// ori r11,r11,32
	r11.u64 = r11.u64 | 32;
	// li r3,-1
	ctx.r3.s64 = -1;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// b 0x823f5ff0
	goto loc_823F5FF0;
loc_823F5E7C:
	// rlwinm. r10,r11,0,25,25
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f5e90
	if (cr0.getEQ()) goto loc_823F5E90;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r10,34
	ctx.r10.s64 = 34;
	// b 0x823f5e60
	goto loc_823F5E60;
loc_823F5E90:
	// clrlwi. r9,r11,31
	ctx.r9.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// li r10,0
	ctx.r10.s64 = 0;
	// beq 0x823f5eb8
	if (cr0.getEQ()) goto loc_823F5EB8;
	// rlwinm. r9,r11,0,27,27
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// beq 0x823f5e6c
	if (cr0.getEQ()) goto loc_823F5E6C;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_823F5EB8:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// mr r28,r10
	r28.u64 = ctx.r10.u64;
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// rlwinm r11,r11,0,28,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
	// ori r11,r11,2
	r11.u64 = r11.u64 | 2;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// andi. r10,r11,268
	ctx.r10.u64 = r11.u64 & 268;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmpwi r10,0
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823f5f14
	if (!cr0.getEQ()) goto loc_823F5F14;
	// bl 0x823f4e20
	sub_823F4E20(ctx, base);
	// addi r11,r3,32
	r11.s64 = ctx.r3.s64 + 32;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x823f5efc
	if (cr6.getEQ()) goto loc_823F5EFC;
	// bl 0x823f4e20
	sub_823F4E20(ctx, base);
	// addi r11,r3,64
	r11.s64 = ctx.r3.s64 + 64;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bne cr6,0x823f5f0c
	if (!cr6.getEQ()) goto loc_823F5F0C;
loc_823F5EFC:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82345d68
	sub_82345D68(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f5f14
	if (!cr0.getEQ()) goto loc_823F5F14;
loc_823F5F0C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ffb38
	sub_823FFB38(ctx, base);
loc_823F5F14:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// andi. r11,r11,264
	r11.u64 = r11.u64 & 264;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f5fc8
	if (cr0.getEQ()) goto loc_823F5FC8;
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// subf. r30,r4,r10
	r30.s64 = ctx.r10.s64 - ctx.r4.s64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// addi r11,r4,1
	r11.s64 = ctx.r4.s64 + 1;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// ble 0x823f5f5c
	if (!cr0.getGT()) goto loc_823F5F5C;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823ff9a8
	sub_823FF9A8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// b 0x823f5fb8
	goto loc_823F5FB8;
loc_823F5F5C:
	// cmpwi cr6,r29,-1
	cr6.compare<int32_t>(r29.s32, -1, xer);
	// beq cr6,0x823f5f8c
	if (cr6.getEQ()) goto loc_823F5F8C;
	// cmpwi cr6,r29,-2
	cr6.compare<int32_t>(r29.s32, -2, xer);
	// beq cr6,0x823f5f8c
	if (cr6.getEQ()) goto loc_823F5F8C;
	// srawi r10,r29,5
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x1F) != 0);
	ctx.r10.s64 = r29.s32 >> 5;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-15840
	r11.s64 = r11.s64 + -15840;
	// rlwinm r10,r29,6,21,25
	ctx.r10.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 6) & 0x7C0;
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x823f5f94
	goto loc_823F5F94;
loc_823F5F8C:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r11,r11,-18648
	r11.s64 = r11.s64 + -18648;
loc_823F5F94:
	// lbz r11,4(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rlwinm. r11,r11,0,26,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f5fb8
	if (cr0.getEQ()) goto loc_823F5FB8;
	// li r5,2
	ctx.r5.s64 = 2;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823ff5b8
	sub_823FF5B8(ctx, base);
	// cmpdi cr6,r3,-1
	cr6.compare<int64_t>(ctx.r3.s64, -1, xer);
	// beq cr6,0x823f5e68
	if (cr6.getEQ()) goto loc_823F5E68;
loc_823F5FB8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// b 0x823f5fe0
	goto loc_823F5FE0;
loc_823F5FC8:
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,148
	ctx.r4.s64 = ctx.r1.s64 + 148;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// li r30,1
	r30.s64 = 1;
	// bl 0x823ff9a8
	sub_823FF9A8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
loc_823F5FE0:
	// cmpw cr6,r28,r30
	cr6.compare<int32_t>(r28.s32, r30.s32, xer);
	// bne cr6,0x823f5e68
	if (!cr6.getEQ()) goto loc_823F5E68;
	// lwz r11,148(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
loc_823F5FF0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823F5FF8"))) PPC_WEAK_FUNC(sub_823F5FF8);
PPC_FUNC_IMPL(__imp__sub_823F5FF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,12(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 12);
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// rlwinm. r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f6024
	if (cr0.getEQ()) goto loc_823F6024;
	// lwz r11,8(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823f603c
	if (cr6.getEQ()) goto loc_823F603C;
loc_823F6024:
	// bl 0x823ffbc0
	sub_823FFBC0(ctx, base);
	// clrlwi r11,r3,16
	r11.u64 = ctx.r3.u32 & 0xFFFF;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// bne cr6,0x823f603c
	if (!cr6.getEQ()) goto loc_823F603C;
	// li r11,-1
	r11.s64 = -1;
	// b 0x823f6044
	goto loc_823F6044;
loc_823F603C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_823F6044:
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F6060"))) PPC_WEAK_FUNC(sub_823F6060);
PPC_FUNC_IMPL(__imp__sub_823F6060) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-2336(r1)
	ea = -2336 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r28,0
	r28.s64 = 0;
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// mr r31,r28
	r31.u64 = r28.u64;
	// mr r15,r4
	r15.u64 = ctx.r4.u64;
	// mr r24,r6
	r24.u64 = ctx.r6.u64;
	// mr r25,r28
	r25.u64 = r28.u64;
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r28.u32);
	// mr r14,r28
	r14.u64 = r28.u64;
	// stw r31,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r31.u32);
	// mr r23,r28
	r23.u64 = r28.u64;
	// mr r17,r28
	r17.u64 = r28.u64;
	// mr r19,r28
	r19.u64 = r28.u64;
	// cmplwi cr6,r21,0
	cr6.compare<uint32_t>(r21.u32, 0, xer);
	// bne cr6,0x823f60d4
	if (!cr6.getEQ()) goto loc_823F60D4;
loc_823F60A4:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x823f6ba0
	goto loc_823F6BA0;
loc_823F60D4:
	// cmplwi cr6,r15,0
	cr6.compare<uint32_t>(r15.u32, 0, xer);
	// beq cr6,0x823f60a4
	if (cr6.getEQ()) goto loc_823F60A4;
	// bl 0x823f4e20
	sub_823F4E20(ctx, base);
	// addi r11,r3,32
	r11.s64 = ctx.r3.s64 + 32;
	// cmplw cr6,r21,r11
	cr6.compare<uint32_t>(r21.u32, r11.u32, xer);
	// beq cr6,0x823f6b6c
	if (cr6.getEQ()) goto loc_823F6B6C;
	// bl 0x823f4e20
	sub_823F4E20(ctx, base);
	// addi r11,r3,64
	r11.s64 = ctx.r3.s64 + 64;
	// cmplw cr6,r21,r11
	cr6.compare<uint32_t>(r21.u32, r11.u32, xer);
	// beq cr6,0x823f6b6c
	if (cr6.getEQ()) goto loc_823F6B6C;
	// lhz r29,0(r15)
	r29.u64 = PPC_LOAD_U16(r15.u32 + 0);
	// mr r22,r28
	r22.u64 = r28.u64;
	// mr r26,r28
	r26.u64 = r28.u64;
	// stw r28,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r28.u32);
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// stw r22,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r22.u32);
	// mr. r10,r29
	ctx.r10.u64 = r29.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f6b64
	if (cr0.getEQ()) goto loc_823F6B64;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r20,r11,-19456
	r20.s64 = r11.s64 + -19456;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r18,r11,-20552
	r18.s64 = r11.s64 + -20552;
	// lis r11,-32249
	r11.s64 = -2113470464;
	// addi r9,r11,11008
	ctx.r9.s64 = r11.s64 + 11008;
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// lwz r16,100(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r27,100(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_823F6140:
	// addi r15,r15,2
	r15.s64 = r15.s64 + 2;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// blt cr6,0x823f6b64
	if (cr6.getLT()) goto loc_823F6B64;
	// cmplwi cr6,r10,32
	cr6.compare<uint32_t>(ctx.r10.u32, 32, xer);
	// blt cr6,0x823f616c
	if (cr6.getLT()) goto loc_823F616C;
	// cmplwi cr6,r10,120
	cr6.compare<uint32_t>(ctx.r10.u32, 120, xer);
	// bgt cr6,0x823f616c
	if (cr6.getGT()) goto loc_823F616C;
	// add r11,r10,r9
	r11.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lbz r11,-32(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -32);
	// clrlwi r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	// b 0x823f6170
	goto loc_823F6170;
loc_823F616C:
	// mr r11,r28
	r11.u64 = r28.u64;
loc_823F6170:
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// lbzx r11,r11,r9
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r9.u32);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// srawi r11,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	r11.s64 = r11.s32 >> 4;
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// bgt cr6,0x823f6b44
	if (cr6.getGT()) goto loc_823F6B44;
	// lis r12,-32249
	r12.s64 = -2113470464;
	// addi r12,r12,11344
	r12.s64 = r12.s64 + 11344;
	// rlwinm r0,r11,1,0,30
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r0,r12,r0
	r0.u64 = PPC_LOAD_U16(r12.u32 + r0.u32);
	// lis r12,-32193
	r12.s64 = -2109800448;
	// addi r12,r12,25016
	r12.s64 = r12.s64 + 25016;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_823F636C;
	case 1:
		goto loc_823F61B8;
	case 2:
		goto loc_823F61D8;
	case 3:
		goto loc_823F6228;
	case 4:
		goto loc_823F6264;
	case 5:
		goto loc_823F626C;
	case 6:
		goto loc_823F62A4;
	case 7:
		goto loc_823F6388;
	default:
		__builtin_unreachable();
	}
loc_823F61B8:
	// mr r16,r28
	r16.u64 = r28.u64;
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r28.u32);
	// mr r14,r28
	r14.u64 = r28.u64;
	// mr r17,r28
	r17.u64 = r28.u64;
	// mr r25,r28
	r25.u64 = r28.u64;
	// li r23,-1
	r23.s64 = -1;
	// mr r19,r28
	r19.u64 = r28.u64;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F61D8:
	// cmpwi cr6,r10,32
	cr6.compare<int32_t>(ctx.r10.s32, 32, xer);
	// beq cr6,0x823f6220
	if (cr6.getEQ()) goto loc_823F6220;
	// cmpwi cr6,r10,35
	cr6.compare<int32_t>(ctx.r10.s32, 35, xer);
	// beq cr6,0x823f6218
	if (cr6.getEQ()) goto loc_823F6218;
	// cmpwi cr6,r10,43
	cr6.compare<int32_t>(ctx.r10.s32, 43, xer);
	// beq cr6,0x823f6210
	if (cr6.getEQ()) goto loc_823F6210;
	// cmpwi cr6,r10,45
	cr6.compare<int32_t>(ctx.r10.s32, 45, xer);
	// beq cr6,0x823f6208
	if (cr6.getEQ()) goto loc_823F6208;
	// cmpwi cr6,r10,48
	cr6.compare<int32_t>(ctx.r10.s32, 48, xer);
	// bne cr6,0x823f6b44
	if (!cr6.getEQ()) goto loc_823F6B44;
	// ori r25,r25,8
	r25.u64 = r25.u64 | 8;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F6208:
	// ori r25,r25,4
	r25.u64 = r25.u64 | 4;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F6210:
	// ori r25,r25,1
	r25.u64 = r25.u64 | 1;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F6218:
	// ori r25,r25,128
	r25.u64 = r25.u64 | 128;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F6220:
	// ori r25,r25,2
	r25.u64 = r25.u64 | 2;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F6228:
	// cmplwi cr6,r10,42
	cr6.compare<uint32_t>(ctx.r10.u32, 42, xer);
	// bne cr6,0x823f6254
	if (!cr6.getEQ()) goto loc_823F6254;
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// lwz r14,-4(r24)
	r14.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// cmpwi r14,0
	cr0.compare<int32_t>(r14.s32, 0, xer);
	// bge 0x823f6b44
	if (!cr0.getLT()) goto loc_823F6B44;
	// ori r25,r25,4
	r25.u64 = r25.u64 | 4;
	// neg r14,r14
	r14.s64 = -r14.s64;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F6254:
	// mulli r11,r14,10
	r11.s64 = r14.s64 * 10;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r14,r11,-48
	r14.s64 = r11.s64 + -48;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F6264:
	// mr r23,r28
	r23.u64 = r28.u64;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F626C:
	// cmplwi cr6,r10,42
	cr6.compare<uint32_t>(ctx.r10.u32, 42, xer);
	// bne cr6,0x823f6294
	if (!cr6.getEQ()) goto loc_823F6294;
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// lwz r23,-4(r24)
	r23.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// cmpwi r23,0
	cr0.compare<int32_t>(r23.s32, 0, xer);
	// bge 0x823f6b44
	if (!cr0.getLT()) goto loc_823F6B44;
	// li r23,-1
	r23.s64 = -1;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F6294:
	// mulli r11,r23,10
	r11.s64 = r23.s64 * 10;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r23,r11,-48
	r23.s64 = r11.s64 + -48;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F62A4:
	// cmpwi cr6,r10,73
	cr6.compare<int32_t>(ctx.r10.s32, 73, xer);
	// beq cr6,0x823f62f4
	if (cr6.getEQ()) goto loc_823F62F4;
	// cmpwi cr6,r10,104
	cr6.compare<int32_t>(ctx.r10.s32, 104, xer);
	// beq cr6,0x823f62ec
	if (cr6.getEQ()) goto loc_823F62EC;
	// cmpwi cr6,r10,108
	cr6.compare<int32_t>(ctx.r10.s32, 108, xer);
	// beq cr6,0x823f62cc
	if (cr6.getEQ()) goto loc_823F62CC;
	// cmpwi cr6,r10,119
	cr6.compare<int32_t>(ctx.r10.s32, 119, xer);
	// bne cr6,0x823f6b44
	if (!cr6.getEQ()) goto loc_823F6B44;
	// ori r25,r25,2048
	r25.u64 = r25.u64 | 2048;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F62CC:
	// lhz r11,0(r15)
	r11.u64 = PPC_LOAD_U16(r15.u32 + 0);
	// cmplwi cr6,r11,108
	cr6.compare<uint32_t>(r11.u32, 108, xer);
	// bne cr6,0x823f62e4
	if (!cr6.getEQ()) goto loc_823F62E4;
	// addi r15,r15,2
	r15.s64 = r15.s64 + 2;
	// ori r25,r25,4096
	r25.u64 = r25.u64 | 4096;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F62E4:
	// ori r25,r25,16
	r25.u64 = r25.u64 | 16;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F62EC:
	// ori r25,r25,32
	r25.u64 = r25.u64 | 32;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F62F4:
	// lhz r11,0(r15)
	r11.u64 = PPC_LOAD_U16(r15.u32 + 0);
	// cmplwi cr6,r11,54
	cr6.compare<uint32_t>(r11.u32, 54, xer);
	// bne cr6,0x823f6318
	if (!cr6.getEQ()) goto loc_823F6318;
	// lhz r10,2(r15)
	ctx.r10.u64 = PPC_LOAD_U16(r15.u32 + 2);
	// cmplwi cr6,r10,52
	cr6.compare<uint32_t>(ctx.r10.u32, 52, xer);
	// bne cr6,0x823f6318
	if (!cr6.getEQ()) goto loc_823F6318;
	// addi r15,r15,4
	r15.s64 = r15.s64 + 4;
	// ori r25,r25,32768
	r25.u64 = r25.u64 | 32768;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F6318:
	// cmplwi cr6,r11,51
	cr6.compare<uint32_t>(r11.u32, 51, xer);
	// bne cr6,0x823f6338
	if (!cr6.getEQ()) goto loc_823F6338;
	// lhz r10,2(r15)
	ctx.r10.u64 = PPC_LOAD_U16(r15.u32 + 2);
	// cmplwi cr6,r10,50
	cr6.compare<uint32_t>(ctx.r10.u32, 50, xer);
	// bne cr6,0x823f6338
	if (!cr6.getEQ()) goto loc_823F6338;
	// addi r15,r15,4
	r15.s64 = r15.s64 + 4;
	// rlwinm r25,r25,0,17,15
	r25.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0xFFFFFFFFFFFF7FFF;
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F6338:
	// cmplwi cr6,r11,100
	cr6.compare<uint32_t>(r11.u32, 100, xer);
	// beq cr6,0x823f6b44
	if (cr6.getEQ()) goto loc_823F6B44;
	// cmplwi cr6,r11,105
	cr6.compare<uint32_t>(r11.u32, 105, xer);
	// beq cr6,0x823f6b44
	if (cr6.getEQ()) goto loc_823F6B44;
	// cmplwi cr6,r11,111
	cr6.compare<uint32_t>(r11.u32, 111, xer);
	// beq cr6,0x823f6b44
	if (cr6.getEQ()) goto loc_823F6B44;
	// cmplwi cr6,r11,117
	cr6.compare<uint32_t>(r11.u32, 117, xer);
	// beq cr6,0x823f6b44
	if (cr6.getEQ()) goto loc_823F6B44;
	// cmplwi cr6,r11,120
	cr6.compare<uint32_t>(r11.u32, 120, xer);
	// beq cr6,0x823f6b44
	if (cr6.getEQ()) goto loc_823F6B44;
	// cmplwi cr6,r11,88
	cr6.compare<uint32_t>(r11.u32, 88, xer);
	// beq cr6,0x823f6b44
	if (cr6.getEQ()) goto loc_823F6B44;
	// stw r28,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r28.u32);
loc_823F636C:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// li r19,1
	r19.s64 = 1;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// b 0x823f6b44
	goto loc_823F6B44;
loc_823F6388:
	// addi r11,r10,-65
	r11.s64 = ctx.r10.s64 + -65;
	// cmplwi cr6,r11,55
	cr6.compare<uint32_t>(r11.u32, 55, xer);
	// bgt cr6,0x823f68a4
	if (cr6.getGT()) goto loc_823F68A4;
	// lis r12,-32249
	r12.s64 = -2113470464;
	// addi r12,r12,11232
	r12.s64 = r12.s64 + 11232;
	// rlwinm r0,r11,1,0,30
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r0,r12,r0
	r0.u64 = PPC_LOAD_U16(r12.u32 + r0.u32);
	// lis r12,-32193
	r12.s64 = -2109800448;
	// addi r12,r12,25532
	r12.s64 = r12.s64 + 25532;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_823F65C4;
	case 1:
		goto loc_823F68A4;
	case 2:
		goto loc_823F63BC;
	case 3:
		goto loc_823F68A4;
	case 4:
		goto loc_823F65C4;
	case 5:
		goto loc_823F68A4;
	case 6:
		goto loc_823F65C4;
	case 7:
		goto loc_823F68A4;
	case 8:
		goto loc_823F68A4;
	case 9:
		goto loc_823F68A4;
	case 10:
		goto loc_823F68A4;
	case 11:
		goto loc_823F68A4;
	case 12:
		goto loc_823F68A4;
	case 13:
		goto loc_823F68A4;
	case 14:
		goto loc_823F68A4;
	case 15:
		goto loc_823F68A4;
	case 16:
		goto loc_823F68A4;
	case 17:
		goto loc_823F68A4;
	case 18:
		goto loc_823F64B0;
	case 19:
		goto loc_823F68A4;
	case 20:
		goto loc_823F68A4;
	case 21:
		goto loc_823F68A4;
	case 22:
		goto loc_823F68A4;
	case 23:
		goto loc_823F6708;
	case 24:
		goto loc_823F68A4;
	case 25:
		goto loc_823F6430;
	case 26:
		goto loc_823F68A4;
	case 27:
		goto loc_823F68A4;
	case 28:
		goto loc_823F68A4;
	case 29:
		goto loc_823F68A4;
	case 30:
		goto loc_823F68A4;
	case 31:
		goto loc_823F68A4;
	case 32:
		goto loc_823F65D0;
	case 33:
		goto loc_823F68A4;
	case 34:
		goto loc_823F63CC;
	case 35:
		goto loc_823F66F8;
	case 36:
		goto loc_823F65D0;
	case 37:
		goto loc_823F65D0;
	case 38:
		goto loc_823F65D0;
	case 39:
		goto loc_823F68A4;
	case 40:
		goto loc_823F66F8;
	case 41:
		goto loc_823F68A4;
	case 42:
		goto loc_823F68A4;
	case 43:
		goto loc_823F68A4;
	case 44:
		goto loc_823F68A4;
	case 45:
		goto loc_823F6588;
	case 46:
		goto loc_823F673C;
	case 47:
		goto loc_823F6704;
	case 48:
		goto loc_823F68A4;
	case 49:
		goto loc_823F68A4;
	case 50:
		goto loc_823F64C0;
	case 51:
		goto loc_823F68A4;
	case 52:
		goto loc_823F66FC;
	case 53:
		goto loc_823F68A4;
	case 54:
		goto loc_823F68A4;
	case 55:
		goto loc_823F6710;
	default:
		__builtin_unreachable();
	}
loc_823F63BC:
	// andi. r11,r25,2096
	r11.u64 = r25.u64 & 2096;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f63cc
	if (!cr0.getEQ()) goto loc_823F63CC;
	// ori r25,r25,32
	r25.u64 = r25.u64 | 32;
loc_823F63CC:
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// li r26,1
	r26.s64 = 1;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// rlwinm. r10,r25,0,26,26
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// mr r19,r26
	r19.u64 = r26.u64;
	// lwz r11,-4(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// sth r11,84(r1)
	PPC_STORE_U16(ctx.r1.u32 + 84, r11.u16);
	// beq 0x823f6424
	if (cr0.getEQ()) goto loc_823F6424;
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, r11.u8);
	// addi r4,r1,86
	ctx.r4.s64 = ctx.r1.s64 + 86;
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stb r28,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, r28.u8);
	// lwz r5,172(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 172);
	// bl 0x823ffea8
	sub_823FFEA8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x823f6428
	if (!cr0.getLT()) goto loc_823F6428;
	// stw r26,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r26.u32);
	// b 0x823f6428
	goto loc_823F6428;
loc_823F6424:
	// sth r11,128(r1)
	PPC_STORE_U16(ctx.r1.u32 + 128, r11.u16);
loc_823F6428:
	// addi r27,r1,128
	r27.s64 = ctx.r1.s64 + 128;
	// b 0x823f68a4
	goto loc_823F68A4;
loc_823F6430:
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// lwz r11,-4(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f6480
	if (cr0.getEQ()) goto loc_823F6480;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x823f6480
	if (cr0.getEQ()) goto loc_823F6480;
	// rlwinm. r9,r25,0,20,20
	ctx.r9.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x800;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r27,r10
	r27.u64 = ctx.r10.u64;
	// beq 0x823f6474
	if (cr0.getEQ()) goto loc_823F6474;
	// lha r11,0(r11)
	r11.s64 = int16_t(PPC_LOAD_U16(r11.u32 + 0));
	// li r19,1
	r19.s64 = 1;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r26,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r26.s64 = temp.s64;
	// b 0x823f68a4
	goto loc_823F68A4;
loc_823F6474:
	// lha r26,0(r11)
	r26.s64 = int16_t(PPC_LOAD_U16(r11.u32 + 0));
	// mr r19,r28
	r19.u64 = r28.u64;
	// b 0x823f68a4
	goto loc_823F68A4;
loc_823F6480:
	// lis r11,-32249
	r11.s64 = -2113470464;
	// lwz r27,10996(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 10996);
	// mr r11,r27
	r11.u64 = r27.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F6490:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f6490
	if (!cr6.getEQ()) goto loc_823F6490;
loc_823F64A0:
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r26,r11,0
	r26.u64 = __builtin_rotateleft32(r11.u32, 0);
	// b 0x823f68a4
	goto loc_823F68A4;
loc_823F64B0:
	// andi. r11,r25,2096
	r11.u64 = r25.u64 & 2096;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f64c0
	if (!cr0.getEQ()) goto loc_823F64C0;
	// ori r25,r25,32
	r25.u64 = r25.u64 | 32;
loc_823F64C0:
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// bne cr6,0x823f64d4
	if (!cr6.getEQ()) goto loc_823F64D4;
	// lis r30,32767
	r30.s64 = 2147418112;
	// ori r30,r30,65535
	r30.u64 = r30.u64 | 65535;
	// b 0x823f64d8
	goto loc_823F64D8;
loc_823F64D4:
	// mr r30,r23
	r30.u64 = r23.u64;
loc_823F64D8:
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm. r10,r25,0,26,26
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// lwz r27,-4(r24)
	r27.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq 0x823f6548
	if (cr0.getEQ()) goto loc_823F6548;
	// bne cr6,0x823f6500
	if (!cr6.getEQ()) goto loc_823F6500;
	// lis r11,-32249
	r11.s64 = -2113470464;
	// lwz r27,10996(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 10996);
loc_823F6500:
	// mr r31,r27
	r31.u64 = r27.u64;
	// mr r26,r28
	r26.u64 = r28.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x823f68a4
	if (!cr6.getGT()) goto loc_823F68A4;
loc_823F6510:
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f68a4
	if (cr0.getEQ()) goto loc_823F68A4;
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x823fe8a8
	sub_823FE8A8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f6534
	if (cr0.getEQ()) goto loc_823F6534;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_823F6534:
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r26,r30
	cr6.compare<int32_t>(r26.s32, r30.s32, xer);
	// blt cr6,0x823f6510
	if (cr6.getLT()) goto loc_823F6510;
	// b 0x823f68a4
	goto loc_823F68A4;
loc_823F6548:
	// bne cr6,0x823f6554
	if (!cr6.getEQ()) goto loc_823F6554;
	// lis r11,-32249
	r11.s64 = -2113470464;
	// lwz r27,11000(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 11000);
loc_823F6554:
	// li r19,1
	r19.s64 = 1;
	// mr r11,r27
	r11.u64 = r27.u64;
	// b 0x823f6574
	goto loc_823F6574;
loc_823F6560:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x823f657c
	if (cr0.getEQ()) goto loc_823F657C;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
loc_823F6574:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x823f6560
	if (!cr6.getEQ()) goto loc_823F6560;
loc_823F657C:
	// subf r11,r27,r11
	r11.s64 = r11.s64 - r27.s64;
	// srawi r26,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r26.s64 = r11.s32 >> 1;
	// b 0x823f68a4
	goto loc_823F68A4;
loc_823F6588:
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// lwz r31,-4(r24)
	r31.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// bl 0x823ed4a0
	sub_823ED4A0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f60a4
	if (cr0.getEQ()) goto loc_823F60A4;
	// rlwinm. r11,r25,0,26,26
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f65b4
	if (cr0.getEQ()) goto loc_823F65B4;
	// sth r22,0(r31)
	PPC_STORE_U16(r31.u32 + 0, r22.u16);
	// b 0x823f65b8
	goto loc_823F65B8;
loc_823F65B4:
	// stw r22,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r22.u32);
loc_823F65B8:
	// li r11,1
	r11.s64 = 1;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// b 0x823f6b28
	goto loc_823F6B28;
loc_823F65C4:
	// addi r11,r10,32
	r11.s64 = ctx.r10.s64 + 32;
	// li r16,1
	r16.s64 = 1;
	// clrlwi r29,r11,16
	r29.u64 = r11.u32 & 0xFFFF;
loc_823F65D0:
	// ori r25,r25,64
	r25.u64 = r25.u64 | 64;
	// addi r27,r1,128
	r27.s64 = ctx.r1.s64 + 128;
	// li r30,512
	r30.s64 = 512;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// bge cr6,0x823f65ec
	if (!cr6.getLT()) goto loc_823F65EC;
	// li r23,6
	r23.s64 = 6;
	// b 0x823f6640
	goto loc_823F6640;
loc_823F65EC:
	// bne cr6,0x823f6604
	if (!cr6.getEQ()) goto loc_823F6604;
	// clrlwi r11,r29,16
	r11.u64 = r29.u32 & 0xFFFF;
	// cmplwi cr6,r11,103
	cr6.compare<uint32_t>(r11.u32, 103, xer);
	// bne cr6,0x823f6640
	if (!cr6.getEQ()) goto loc_823F6640;
	// li r23,1
	r23.s64 = 1;
	// b 0x823f6640
	goto loc_823F6640;
loc_823F6604:
	// cmpwi cr6,r23,512
	cr6.compare<int32_t>(r23.s32, 512, xer);
	// ble cr6,0x823f6610
	if (!cr6.getGT()) goto loc_823F6610;
	// li r23,512
	r23.s64 = 512;
loc_823F6610:
	// cmpwi cr6,r23,163
	cr6.compare<int32_t>(r23.s32, 163, xer);
	// ble cr6,0x823f6640
	if (!cr6.getGT()) goto loc_823F6640;
	// addi r31,r23,349
	r31.s64 = r23.s64 + 349;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ed2b0
	sub_823ED2B0(ctx, base);
	// stw r3,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r3.u32);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f663c
	if (cr0.getEQ()) goto loc_823F663C;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r30,r31
	r30.u64 = r31.u64;
	// b 0x823f6640
	goto loc_823F6640;
loc_823F663C:
	// li r23,163
	r23.s64 = 163;
loc_823F6640:
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// lwz r10,24(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 24);
	// mr r9,r20
	ctx.r9.u64 = r20.u64;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// mr r8,r16
	ctx.r8.u64 = r16.u64;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// mr r7,r23
	ctx.r7.u64 = r23.u64;
	// extsb r6,r29
	ctx.r6.s64 = r29.s8;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// ld r11,-8(r24)
	r11.u64 = PPC_LOAD_U64(r24.u32 + -8);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm. r31,r25,0,24,24
	r31.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x823f66a0
	if (cr0.getEQ()) goto loc_823F66A0;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// bne cr6,0x823f66a0
	if (!cr6.getEQ()) goto loc_823F66A0;
	// lwz r11,36(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 36);
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_823F66A0:
	// clrlwi r11,r29,16
	r11.u64 = r29.u32 & 0xFFFF;
	// cmplwi cr6,r11,103
	cr6.compare<uint32_t>(r11.u32, 103, xer);
	// bne cr6,0x823f66c8
	if (!cr6.getEQ()) goto loc_823F66C8;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bne cr6,0x823f66c8
	if (!cr6.getEQ()) goto loc_823F66C8;
	// lwz r11,32(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 32);
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_823F66C8:
	// lbz r11,0(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 0);
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x823f66dc
	if (!cr6.getEQ()) goto loc_823F66DC;
	// ori r25,r25,256
	r25.u64 = r25.u64 | 256;
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
loc_823F66DC:
	// mr r11,r27
	r11.u64 = r27.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F66E4:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f66e4
	if (!cr6.getEQ()) goto loc_823F66E4;
	// b 0x823f64a0
	goto loc_823F64A0;
loc_823F66F8:
	// ori r25,r25,64
	r25.u64 = r25.u64 | 64;
loc_823F66FC:
	// li r8,10
	ctx.r8.s64 = 10;
	// b 0x823f674c
	goto loc_823F674C;
loc_823F6704:
	// li r23,8
	r23.s64 = 8;
loc_823F6708:
	// li r31,7
	r31.s64 = 7;
	// b 0x823f6714
	goto loc_823F6714;
loc_823F6710:
	// li r31,39
	r31.s64 = 39;
loc_823F6714:
	// stw r31,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r31.u32);
	// rlwinm. r11,r25,0,24,24
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r8,16
	ctx.r8.s64 = 16;
	// beq 0x823f674c
	if (cr0.getEQ()) goto loc_823F674C;
	// addi r11,r31,81
	r11.s64 = r31.s64 + 81;
	// li r10,48
	ctx.r10.s64 = 48;
	// li r17,2
	r17.s64 = 2;
	// sth r11,90(r1)
	PPC_STORE_U16(ctx.r1.u32 + 90, r11.u16);
	// sth r10,88(r1)
	PPC_STORE_U16(ctx.r1.u32 + 88, ctx.r10.u16);
	// b 0x823f674c
	goto loc_823F674C;
loc_823F673C:
	// rlwinm. r11,r25,0,24,24
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r8,8
	ctx.r8.s64 = 8;
	// beq 0x823f674c
	if (cr0.getEQ()) goto loc_823F674C;
	// ori r25,r25,512
	r25.u64 = r25.u64 | 512;
loc_823F674C:
	// rlwinm. r11,r25,0,16,16
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f675c
	if (!cr0.getEQ()) goto loc_823F675C;
	// rlwinm. r11,r25,0,19,19
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x1000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f6770
	if (cr0.getEQ()) goto loc_823F6770;
loc_823F675C:
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// ld r11,-8(r24)
	r11.u64 = PPC_LOAD_U64(r24.u32 + -8);
	// b 0x823f67c0
	goto loc_823F67C0;
loc_823F6770:
	// rlwinm. r11,r25,0,26,26
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f67a0
	if (cr0.getEQ()) goto loc_823F67A0;
	// rlwinm. r11,r25,0,25,25
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// lwz r11,-4(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// beq 0x823f6798
	if (cr0.getEQ()) goto loc_823F6798;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// b 0x823f67c0
	goto loc_823F67C0;
loc_823F6798:
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// b 0x823f67c0
	goto loc_823F67C0;
loc_823F67A0:
	// rlwinm. r11,r25,0,25,25
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// beq 0x823f67bc
	if (cr0.getEQ()) goto loc_823F67BC;
	// lwa r11,-4(r24)
	r11.s64 = int32_t(PPC_LOAD_U32(r24.u32 + -4));
	// b 0x823f67c0
	goto loc_823F67C0;
loc_823F67BC:
	// lwz r11,-4(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -4);
loc_823F67C0:
	// rlwinm. r10,r25,0,25,25
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f67d8
	if (cr0.getEQ()) goto loc_823F67D8;
	// cmpdi cr6,r11,0
	cr6.compare<int64_t>(r11.s64, 0, xer);
	// bge cr6,0x823f67d8
	if (!cr6.getLT()) goto loc_823F67D8;
	// neg r11,r11
	r11.s64 = -r11.s64;
	// ori r25,r25,256
	r25.u64 = r25.u64 | 256;
loc_823F67D8:
	// rlwinm. r10,r25,0,16,16
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823f67ec
	if (!cr0.getEQ()) goto loc_823F67EC;
	// rlwinm. r10,r25,0,19,19
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x1000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823f67ec
	if (!cr0.getEQ()) goto loc_823F67EC;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
loc_823F67EC:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// bge cr6,0x823f67fc
	if (!cr6.getLT()) goto loc_823F67FC;
	// li r23,1
	r23.s64 = 1;
	// b 0x823f680c
	goto loc_823F680C;
loc_823F67FC:
	// rlwinm r25,r25,0,29,27
	r25.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// cmpwi cr6,r23,512
	cr6.compare<int32_t>(r23.s32, 512, xer);
	// ble cr6,0x823f680c
	if (!cr6.getGT()) goto loc_823F680C;
	// li r23,512
	r23.s64 = 512;
loc_823F680C:
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// bne cr6,0x823f6818
	if (!cr6.getEQ()) goto loc_823F6818;
	// mr r17,r28
	r17.u64 = r28.u64;
loc_823F6818:
	// addi r9,r1,639
	ctx.r9.s64 = ctx.r1.s64 + 639;
loc_823F681C:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// addi r23,r23,-1
	r23.s64 = r23.s64 + -1;
	// bgt cr6,0x823f6830
	if (cr6.getGT()) goto loc_823F6830;
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// beq cr6,0x823f686c
	if (cr6.getEQ()) goto loc_823F686C;
loc_823F6830:
	// extsw r10,r8
	ctx.r10.s64 = ctx.r8.s32;
	// divdu r7,r11,r10
	ctx.r7.u64 = r11.u64 / ctx.r10.u64;
	// tdllei r10,0
	// mulld r7,r7,r10
	ctx.r7.s64 = ctx.r7.s64 * ctx.r10.s64;
	// subf r7,r7,r11
	ctx.r7.s64 = r11.s64 - ctx.r7.s64;
	// divdu r11,r11,r10
	r11.u64 = r11.u64 / ctx.r10.u64;
	// tdllei r10,0
	// rotlwi r10,r7,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r7.u32, 0);
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmpwi cr6,r10,57
	cr6.compare<int32_t>(ctx.r10.s32, 57, xer);
	// ble cr6,0x823f6860
	if (!cr6.getGT()) goto loc_823F6860;
	// add r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 + r31.u64;
loc_823F6860:
	// stb r10,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, ctx.r10.u8);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// b 0x823f681c
	goto loc_823F681C;
loc_823F686C:
	// addi r11,r1,639
	r11.s64 = ctx.r1.s64 + 639;
	// rlwinm. r10,r25,0,22,22
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x200;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// subf r26,r9,r11
	r26.s64 = r11.s64 - ctx.r9.s64;
	// addi r27,r9,1
	r27.s64 = ctx.r9.s64 + 1;
	// beq 0x823f68a4
	if (cr0.getEQ()) goto loc_823F68A4;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x823f6894
	if (cr6.getEQ()) goto loc_823F6894;
	// lbz r11,0(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 0);
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// beq cr6,0x823f68a4
	if (cr6.getEQ()) goto loc_823F68A4;
loc_823F6894:
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// li r11,48
	r11.s64 = 48;
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// stb r11,0(r27)
	PPC_STORE_U8(r27.u32 + 0, r11.u8);
loc_823F68A4:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823f6b28
	if (!cr6.getEQ()) goto loc_823F6B28;
	// rlwinm. r11,r25,0,25,25
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f68ec
	if (cr0.getEQ()) goto loc_823F68EC;
	// rlwinm. r11,r25,0,23,23
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x100;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f68c8
	if (cr0.getEQ()) goto loc_823F68C8;
	// li r11,45
	r11.s64 = 45;
	// b 0x823f68e4
	goto loc_823F68E4;
loc_823F68C8:
	// clrlwi. r11,r25,31
	r11.u64 = r25.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f68d8
	if (cr0.getEQ()) goto loc_823F68D8;
	// li r11,43
	r11.s64 = 43;
	// b 0x823f68e4
	goto loc_823F68E4;
loc_823F68D8:
	// rlwinm. r11,r25,0,30,30
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f68ec
	if (cr0.getEQ()) goto loc_823F68EC;
	// li r11,32
	r11.s64 = 32;
loc_823F68E4:
	// sth r11,88(r1)
	PPC_STORE_U16(ctx.r1.u32 + 88, r11.u16);
	// li r17,1
	r17.s64 = 1;
loc_823F68EC:
	// subf r11,r26,r14
	r11.s64 = r14.s64 - r26.s64;
	// rlwinm. r10,r25,0,28,29
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0xC;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// subf r28,r17,r11
	r28.s64 = r11.s64 - r17.s64;
	// bne 0x823f6930
	if (!cr0.getEQ()) goto loc_823F6930;
	// mr r31,r28
	r31.u64 = r28.u64;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x823f6930
	if (!cr6.getGT()) goto loc_823F6930;
loc_823F6908:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r22,-1
	cr6.compare<int32_t>(r22.s32, -1, xer);
	// beq cr6,0x823f6930
	if (cr6.getEQ()) goto loc_823F6930;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bgt cr6,0x823f6908
	if (cr6.getGT()) goto loc_823F6908;
loc_823F6930:
	// lwz r11,12(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 12);
	// mr r30,r17
	r30.u64 = r17.u64;
	// addi r31,r1,88
	r31.s64 = ctx.r1.s64 + 88;
	// rlwinm. r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f695c
	if (cr0.getEQ()) goto loc_823F695C;
	// lwz r11,8(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f695c
	if (!cr6.getEQ()) goto loc_823F695C;
	// add r22,r22,r17
	r22.u64 = r22.u64 + r17.u64;
	// stw r22,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r22.u32);
	// b 0x823f69b4
	goto loc_823F69B4;
loc_823F695C:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// ble cr6,0x823f69b4
	if (!cr6.getGT()) goto loc_823F69B4;
loc_823F6964:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lhz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
	// cmpwi cr6,r22,-1
	cr6.compare<int32_t>(r22.s32, -1, xer);
	// bne cr6,0x823f69ac
	if (!cr6.getEQ()) goto loc_823F69AC;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,42
	cr6.compare<int32_t>(r11.s32, 42, xer);
	// bne cr6,0x823f69b4
	if (!cr6.getEQ()) goto loc_823F69B4;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// li r3,63
	ctx.r3.s64 = 63;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_823F69AC:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bgt cr6,0x823f6964
	if (cr6.getGT()) goto loc_823F6964;
loc_823F69B4:
	// rlwinm. r11,r25,0,28,28
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f69f8
	if (cr0.getEQ()) goto loc_823F69F8;
	// rlwinm. r11,r25,0,29,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f69f8
	if (!cr0.getEQ()) goto loc_823F69F8;
	// mr r31,r28
	r31.u64 = r28.u64;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x823f69f8
	if (!cr6.getGT()) goto loc_823F69F8;
loc_823F69D0:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// li r3,48
	ctx.r3.s64 = 48;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r22,-1
	cr6.compare<int32_t>(r22.s32, -1, xer);
	// beq cr6,0x823f69f8
	if (cr6.getEQ()) goto loc_823F69F8;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bgt cr6,0x823f69d0
	if (cr6.getGT()) goto loc_823F69D0;
loc_823F69F8:
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// bne cr6,0x823f6a60
	if (!cr6.getEQ()) goto loc_823F6A60;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// ble cr6,0x823f6a60
	if (!cr6.getGT()) goto loc_823F6A60;
	// mr r30,r27
	r30.u64 = r27.u64;
	// mr r31,r26
	r31.u64 = r26.u64;
loc_823F6A10:
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// lwz r5,172(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 172);
	// bl 0x823ffea8
	sub_823FFEA8(ctx, base);
	// mr. r29,r3
	r29.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// ble 0x823f6a58
	if (!cr0.getGT()) goto loc_823F6A58;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lhz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 84);
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// add r30,r29,r30
	r30.u64 = r29.u64 + r30.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bgt cr6,0x823f6a10
	if (cr6.getGT()) goto loc_823F6A10;
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// b 0x823f6ae4
	goto loc_823F6AE4;
loc_823F6A58:
	// li r22,-1
	r22.s64 = -1;
	// b 0x823f6a84
	goto loc_823F6A84;
loc_823F6A60:
	// lwz r11,12(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 12);
	// mr r30,r26
	r30.u64 = r26.u64;
	// mr r31,r27
	r31.u64 = r27.u64;
	// rlwinm. r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f6a8c
	if (cr0.getEQ()) goto loc_823F6A8C;
	// lwz r11,8(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f6a8c
	if (!cr6.getEQ()) goto loc_823F6A8C;
	// add r22,r26,r22
	r22.u64 = r26.u64 + r22.u64;
loc_823F6A84:
	// stw r22,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r22.u32);
	// b 0x823f6ae4
	goto loc_823F6AE4;
loc_823F6A8C:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// ble cr6,0x823f6ae4
	if (!cr6.getGT()) goto loc_823F6AE4;
loc_823F6A94:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lhz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
	// cmpwi cr6,r22,-1
	cr6.compare<int32_t>(r22.s32, -1, xer);
	// bne cr6,0x823f6adc
	if (!cr6.getEQ()) goto loc_823F6ADC;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,42
	cr6.compare<int32_t>(r11.s32, 42, xer);
	// bne cr6,0x823f6b28
	if (!cr6.getEQ()) goto loc_823F6B28;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// li r3,63
	ctx.r3.s64 = 63;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_823F6ADC:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bgt cr6,0x823f6a94
	if (cr6.getGT()) goto loc_823F6A94;
loc_823F6AE4:
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// blt cr6,0x823f6b28
	if (cr6.getLT()) goto loc_823F6B28;
	// rlwinm. r11,r25,0,29,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f6b28
	if (cr0.getEQ()) goto loc_823F6B28;
	// mr r31,r28
	r31.u64 = r28.u64;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x823f6b28
	if (!cr6.getGT()) goto loc_823F6B28;
loc_823F6B00:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r22,-1
	cr6.compare<int32_t>(r22.s32, -1, xer);
	// beq cr6,0x823f6b28
	if (cr6.getEQ()) goto loc_823F6B28;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bgt cr6,0x823f6b00
	if (cr6.getGT()) goto loc_823F6B00;
loc_823F6B28:
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823f6b44
	if (cr6.getEQ()) goto loc_823F6B44;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
loc_823F6B44:
	// lhz r29,0(r15)
	r29.u64 = PPC_LOAD_U16(r15.u32 + 0);
	// mr. r10,r29
	ctx.r10.u64 = r29.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f6b64
	if (cr0.getEQ()) goto loc_823F6B64;
	// lwz r31,104(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// li r28,0
	r28.s64 = 0;
	// lwz r8,108(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// b 0x823f6140
	goto loc_823F6140;
loc_823F6B64:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// b 0x823f6ba0
	goto loc_823F6BA0;
loc_823F6B6C:
	// mr r6,r24
	ctx.r6.u64 = r24.u64;
	// mr r5,r15
	ctx.r5.u64 = r15.u64;
	// li r4,512
	ctx.r4.s64 = 512;
	// addi r3,r1,1152
	ctx.r3.s64 = ctx.r1.s64 + 1152;
	// bl 0x823ef090
	sub_823EF090(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,-1
	cr6.compare<int32_t>(r31.s32, -1, xer);
	// bne cr6,0x823f6b94
	if (!cr6.getEQ()) goto loc_823F6B94;
	// li r31,511
	r31.s64 = 511;
	// sth r28,2174(r1)
	PPC_STORE_U16(ctx.r1.u32 + 2174, r28.u16);
loc_823F6B94:
	// addi r3,r1,1152
	ctx.r3.s64 = ctx.r1.s64 + 1152;
	// bl 0x82408648
	sub_82408648(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_823F6BA0:
	// addi r1,r1,2336
	ctx.r1.s64 = ctx.r1.s64 + 2336;
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_823F6BA8"))) PPC_WEAK_FUNC(sub_823F6BA8);
PPC_FUNC_IMPL(__imp__sub_823F6BA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-2336(r1)
	ea = -2336 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r28,0
	r28.s64 = 0;
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// mr r31,r28
	r31.u64 = r28.u64;
	// mr r15,r4
	r15.u64 = ctx.r4.u64;
	// mr r24,r6
	r24.u64 = ctx.r6.u64;
	// mr r25,r28
	r25.u64 = r28.u64;
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r28.u32);
	// mr r14,r28
	r14.u64 = r28.u64;
	// stw r31,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r31.u32);
	// mr r23,r28
	r23.u64 = r28.u64;
	// mr r17,r28
	r17.u64 = r28.u64;
	// mr r19,r28
	r19.u64 = r28.u64;
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// bne cr6,0x823f6c1c
	if (!cr6.getEQ()) goto loc_823F6C1C;
loc_823F6BEC:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x823f76fc
	goto loc_823F76FC;
loc_823F6C1C:
	// cmplwi cr6,r15,0
	cr6.compare<uint32_t>(r15.u32, 0, xer);
	// beq cr6,0x823f6bec
	if (cr6.getEQ()) goto loc_823F6BEC;
	// bl 0x823f4e20
	sub_823F4E20(ctx, base);
	// addi r11,r3,32
	r11.s64 = ctx.r3.s64 + 32;
	// cmplw cr6,r22,r11
	cr6.compare<uint32_t>(r22.u32, r11.u32, xer);
	// beq cr6,0x823f76c8
	if (cr6.getEQ()) goto loc_823F76C8;
	// bl 0x823f4e20
	sub_823F4E20(ctx, base);
	// addi r11,r3,64
	r11.s64 = ctx.r3.s64 + 64;
	// cmplw cr6,r22,r11
	cr6.compare<uint32_t>(r22.u32, r11.u32, xer);
	// beq cr6,0x823f76c8
	if (cr6.getEQ()) goto loc_823F76C8;
	// lhz r29,0(r15)
	r29.u64 = PPC_LOAD_U16(r15.u32 + 0);
	// mr r21,r28
	r21.u64 = r28.u64;
	// mr r26,r28
	r26.u64 = r28.u64;
	// stw r28,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r28.u32);
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// stw r21,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r21.u32);
	// mr. r10,r29
	ctx.r10.u64 = r29.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f76c0
	if (cr0.getEQ()) goto loc_823F76C0;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r20,r11,-19456
	r20.s64 = r11.s64 + -19456;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r18,r11,-20552
	r18.s64 = r11.s64 + -20552;
	// lis r11,-32249
	r11.s64 = -2113470464;
	// addi r9,r11,12088
	ctx.r9.s64 = r11.s64 + 12088;
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// lwz r16,100(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r27,100(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_823F6C88:
	// addi r15,r15,2
	r15.s64 = r15.s64 + 2;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// blt cr6,0x823f76b0
	if (cr6.getLT()) goto loc_823F76B0;
	// cmplwi cr6,r10,32
	cr6.compare<uint32_t>(ctx.r10.u32, 32, xer);
	// blt cr6,0x823f6cb4
	if (cr6.getLT()) goto loc_823F6CB4;
	// cmplwi cr6,r10,120
	cr6.compare<uint32_t>(ctx.r10.u32, 120, xer);
	// bgt cr6,0x823f6cb4
	if (cr6.getGT()) goto loc_823F6CB4;
	// add r11,r10,r9
	r11.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lbz r11,-32(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -32);
	// clrlwi r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	// b 0x823f6cb8
	goto loc_823F6CB8;
loc_823F6CB4:
	// mr r11,r28
	r11.u64 = r28.u64;
loc_823F6CB8:
	// mulli r11,r11,9
	r11.s64 = r11.s64 * 9;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// lbzx r11,r11,r9
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r9.u32);
	// rlwinm r11,r11,28,4,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0xFFFFFFF;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// beq cr6,0x823f6bec
	if (cr6.getEQ()) goto loc_823F6BEC;
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// bgt cr6,0x823f7690
	if (cr6.getGT()) goto loc_823F7690;
	// lis r12,-32249
	r12.s64 = -2113470464;
	// addi r12,r12,11472
	r12.s64 = r12.s64 + 11472;
	// rlwinm r0,r11,1,0,30
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r0,r12,r0
	r0.u64 = PPC_LOAD_U16(r12.u32 + r0.u32);
	// lis r12,-32193
	r12.s64 = -2109800448;
	// addi r12,r12,27908
	r12.s64 = r12.s64 + 27908;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_823F6EB8;
	case 1:
		goto loc_823F6D04;
	case 2:
		goto loc_823F6D24;
	case 3:
		goto loc_823F6D74;
	case 4:
		goto loc_823F6DB0;
	case 5:
		goto loc_823F6DB8;
	case 6:
		goto loc_823F6DF0;
	case 7:
		goto loc_823F6ED4;
	default:
		__builtin_unreachable();
	}
loc_823F6D04:
	// mr r16,r28
	r16.u64 = r28.u64;
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r28.u32);
	// mr r14,r28
	r14.u64 = r28.u64;
	// mr r17,r28
	r17.u64 = r28.u64;
	// mr r25,r28
	r25.u64 = r28.u64;
	// li r23,-1
	r23.s64 = -1;
	// mr r19,r28
	r19.u64 = r28.u64;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6D24:
	// cmpwi cr6,r10,32
	cr6.compare<int32_t>(ctx.r10.s32, 32, xer);
	// beq cr6,0x823f6d6c
	if (cr6.getEQ()) goto loc_823F6D6C;
	// cmpwi cr6,r10,35
	cr6.compare<int32_t>(ctx.r10.s32, 35, xer);
	// beq cr6,0x823f6d64
	if (cr6.getEQ()) goto loc_823F6D64;
	// cmpwi cr6,r10,43
	cr6.compare<int32_t>(ctx.r10.s32, 43, xer);
	// beq cr6,0x823f6d5c
	if (cr6.getEQ()) goto loc_823F6D5C;
	// cmpwi cr6,r10,45
	cr6.compare<int32_t>(ctx.r10.s32, 45, xer);
	// beq cr6,0x823f6d54
	if (cr6.getEQ()) goto loc_823F6D54;
	// cmpwi cr6,r10,48
	cr6.compare<int32_t>(ctx.r10.s32, 48, xer);
	// bne cr6,0x823f7690
	if (!cr6.getEQ()) goto loc_823F7690;
	// ori r25,r25,8
	r25.u64 = r25.u64 | 8;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6D54:
	// ori r25,r25,4
	r25.u64 = r25.u64 | 4;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6D5C:
	// ori r25,r25,1
	r25.u64 = r25.u64 | 1;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6D64:
	// ori r25,r25,128
	r25.u64 = r25.u64 | 128;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6D6C:
	// ori r25,r25,2
	r25.u64 = r25.u64 | 2;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6D74:
	// cmplwi cr6,r10,42
	cr6.compare<uint32_t>(ctx.r10.u32, 42, xer);
	// bne cr6,0x823f6da0
	if (!cr6.getEQ()) goto loc_823F6DA0;
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// lwz r14,-4(r24)
	r14.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// cmpwi r14,0
	cr0.compare<int32_t>(r14.s32, 0, xer);
	// bge 0x823f7690
	if (!cr0.getLT()) goto loc_823F7690;
	// ori r25,r25,4
	r25.u64 = r25.u64 | 4;
	// neg r14,r14
	r14.s64 = -r14.s64;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6DA0:
	// mulli r11,r14,10
	r11.s64 = r14.s64 * 10;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r14,r11,-48
	r14.s64 = r11.s64 + -48;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6DB0:
	// mr r23,r28
	r23.u64 = r28.u64;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6DB8:
	// cmplwi cr6,r10,42
	cr6.compare<uint32_t>(ctx.r10.u32, 42, xer);
	// bne cr6,0x823f6de0
	if (!cr6.getEQ()) goto loc_823F6DE0;
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// lwz r23,-4(r24)
	r23.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// cmpwi r23,0
	cr0.compare<int32_t>(r23.s32, 0, xer);
	// bge 0x823f7690
	if (!cr0.getLT()) goto loc_823F7690;
	// li r23,-1
	r23.s64 = -1;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6DE0:
	// mulli r11,r23,10
	r11.s64 = r23.s64 * 10;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r23,r11,-48
	r23.s64 = r11.s64 + -48;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6DF0:
	// cmpwi cr6,r10,73
	cr6.compare<int32_t>(ctx.r10.s32, 73, xer);
	// beq cr6,0x823f6e40
	if (cr6.getEQ()) goto loc_823F6E40;
	// cmpwi cr6,r10,104
	cr6.compare<int32_t>(ctx.r10.s32, 104, xer);
	// beq cr6,0x823f6e38
	if (cr6.getEQ()) goto loc_823F6E38;
	// cmpwi cr6,r10,108
	cr6.compare<int32_t>(ctx.r10.s32, 108, xer);
	// beq cr6,0x823f6e18
	if (cr6.getEQ()) goto loc_823F6E18;
	// cmpwi cr6,r10,119
	cr6.compare<int32_t>(ctx.r10.s32, 119, xer);
	// bne cr6,0x823f7690
	if (!cr6.getEQ()) goto loc_823F7690;
	// ori r25,r25,2048
	r25.u64 = r25.u64 | 2048;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6E18:
	// lhz r11,0(r15)
	r11.u64 = PPC_LOAD_U16(r15.u32 + 0);
	// cmplwi cr6,r11,108
	cr6.compare<uint32_t>(r11.u32, 108, xer);
	// bne cr6,0x823f6e30
	if (!cr6.getEQ()) goto loc_823F6E30;
	// addi r15,r15,2
	r15.s64 = r15.s64 + 2;
	// ori r25,r25,4096
	r25.u64 = r25.u64 | 4096;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6E30:
	// ori r25,r25,16
	r25.u64 = r25.u64 | 16;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6E38:
	// ori r25,r25,32
	r25.u64 = r25.u64 | 32;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6E40:
	// lhz r11,0(r15)
	r11.u64 = PPC_LOAD_U16(r15.u32 + 0);
	// cmplwi cr6,r11,54
	cr6.compare<uint32_t>(r11.u32, 54, xer);
	// bne cr6,0x823f6e64
	if (!cr6.getEQ()) goto loc_823F6E64;
	// lhz r10,2(r15)
	ctx.r10.u64 = PPC_LOAD_U16(r15.u32 + 2);
	// cmplwi cr6,r10,52
	cr6.compare<uint32_t>(ctx.r10.u32, 52, xer);
	// bne cr6,0x823f6e64
	if (!cr6.getEQ()) goto loc_823F6E64;
	// addi r15,r15,4
	r15.s64 = r15.s64 + 4;
	// ori r25,r25,32768
	r25.u64 = r25.u64 | 32768;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6E64:
	// cmplwi cr6,r11,51
	cr6.compare<uint32_t>(r11.u32, 51, xer);
	// bne cr6,0x823f6e84
	if (!cr6.getEQ()) goto loc_823F6E84;
	// lhz r10,2(r15)
	ctx.r10.u64 = PPC_LOAD_U16(r15.u32 + 2);
	// cmplwi cr6,r10,50
	cr6.compare<uint32_t>(ctx.r10.u32, 50, xer);
	// bne cr6,0x823f6e84
	if (!cr6.getEQ()) goto loc_823F6E84;
	// addi r15,r15,4
	r15.s64 = r15.s64 + 4;
	// rlwinm r25,r25,0,17,15
	r25.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0xFFFFFFFFFFFF7FFF;
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6E84:
	// cmplwi cr6,r11,100
	cr6.compare<uint32_t>(r11.u32, 100, xer);
	// beq cr6,0x823f7690
	if (cr6.getEQ()) goto loc_823F7690;
	// cmplwi cr6,r11,105
	cr6.compare<uint32_t>(r11.u32, 105, xer);
	// beq cr6,0x823f7690
	if (cr6.getEQ()) goto loc_823F7690;
	// cmplwi cr6,r11,111
	cr6.compare<uint32_t>(r11.u32, 111, xer);
	// beq cr6,0x823f7690
	if (cr6.getEQ()) goto loc_823F7690;
	// cmplwi cr6,r11,117
	cr6.compare<uint32_t>(r11.u32, 117, xer);
	// beq cr6,0x823f7690
	if (cr6.getEQ()) goto loc_823F7690;
	// cmplwi cr6,r11,120
	cr6.compare<uint32_t>(r11.u32, 120, xer);
	// beq cr6,0x823f7690
	if (cr6.getEQ()) goto loc_823F7690;
	// cmplwi cr6,r11,88
	cr6.compare<uint32_t>(r11.u32, 88, xer);
	// beq cr6,0x823f7690
	if (cr6.getEQ()) goto loc_823F7690;
	// stw r28,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r28.u32);
loc_823F6EB8:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// li r19,1
	r19.s64 = 1;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r21,80(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// b 0x823f7690
	goto loc_823F7690;
loc_823F6ED4:
	// addi r11,r10,-65
	r11.s64 = ctx.r10.s64 + -65;
	// cmplwi cr6,r11,55
	cr6.compare<uint32_t>(r11.u32, 55, xer);
	// bgt cr6,0x823f73f0
	if (cr6.getGT()) goto loc_823F73F0;
	// lis r12,-32249
	r12.s64 = -2113470464;
	// addi r12,r12,11360
	r12.s64 = r12.s64 + 11360;
	// rlwinm r0,r11,1,0,30
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r0,r12,r0
	r0.u64 = PPC_LOAD_U16(r12.u32 + r0.u32);
	// lis r12,-32193
	r12.s64 = -2109800448;
	// addi r12,r12,28424
	r12.s64 = r12.s64 + 28424;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_823F7110;
	case 1:
		goto loc_823F73F0;
	case 2:
		goto loc_823F6F08;
	case 3:
		goto loc_823F73F0;
	case 4:
		goto loc_823F7110;
	case 5:
		goto loc_823F73F0;
	case 6:
		goto loc_823F7110;
	case 7:
		goto loc_823F73F0;
	case 8:
		goto loc_823F73F0;
	case 9:
		goto loc_823F73F0;
	case 10:
		goto loc_823F73F0;
	case 11:
		goto loc_823F73F0;
	case 12:
		goto loc_823F73F0;
	case 13:
		goto loc_823F73F0;
	case 14:
		goto loc_823F73F0;
	case 15:
		goto loc_823F73F0;
	case 16:
		goto loc_823F73F0;
	case 17:
		goto loc_823F73F0;
	case 18:
		goto loc_823F6FFC;
	case 19:
		goto loc_823F73F0;
	case 20:
		goto loc_823F73F0;
	case 21:
		goto loc_823F73F0;
	case 22:
		goto loc_823F73F0;
	case 23:
		goto loc_823F7254;
	case 24:
		goto loc_823F73F0;
	case 25:
		goto loc_823F6F7C;
	case 26:
		goto loc_823F73F0;
	case 27:
		goto loc_823F73F0;
	case 28:
		goto loc_823F73F0;
	case 29:
		goto loc_823F73F0;
	case 30:
		goto loc_823F73F0;
	case 31:
		goto loc_823F73F0;
	case 32:
		goto loc_823F711C;
	case 33:
		goto loc_823F73F0;
	case 34:
		goto loc_823F6F18;
	case 35:
		goto loc_823F7244;
	case 36:
		goto loc_823F711C;
	case 37:
		goto loc_823F711C;
	case 38:
		goto loc_823F711C;
	case 39:
		goto loc_823F73F0;
	case 40:
		goto loc_823F7244;
	case 41:
		goto loc_823F73F0;
	case 42:
		goto loc_823F73F0;
	case 43:
		goto loc_823F73F0;
	case 44:
		goto loc_823F73F0;
	case 45:
		goto loc_823F70D4;
	case 46:
		goto loc_823F7288;
	case 47:
		goto loc_823F7250;
	case 48:
		goto loc_823F73F0;
	case 49:
		goto loc_823F73F0;
	case 50:
		goto loc_823F700C;
	case 51:
		goto loc_823F73F0;
	case 52:
		goto loc_823F7248;
	case 53:
		goto loc_823F73F0;
	case 54:
		goto loc_823F73F0;
	case 55:
		goto loc_823F725C;
	default:
		__builtin_unreachable();
	}
loc_823F6F08:
	// andi. r11,r25,2096
	r11.u64 = r25.u64 & 2096;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f6f18
	if (!cr0.getEQ()) goto loc_823F6F18;
	// ori r25,r25,32
	r25.u64 = r25.u64 | 32;
loc_823F6F18:
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// li r26,1
	r26.s64 = 1;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// rlwinm. r10,r25,0,26,26
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// mr r19,r26
	r19.u64 = r26.u64;
	// lwz r11,-4(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// sth r11,84(r1)
	PPC_STORE_U16(ctx.r1.u32 + 84, r11.u16);
	// beq 0x823f6f70
	if (cr0.getEQ()) goto loc_823F6F70;
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, r11.u8);
	// addi r4,r1,86
	ctx.r4.s64 = ctx.r1.s64 + 86;
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stb r28,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, r28.u8);
	// lwz r5,172(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 172);
	// bl 0x823ffea8
	sub_823FFEA8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x823f6f74
	if (!cr0.getLT()) goto loc_823F6F74;
	// stw r26,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r26.u32);
	// b 0x823f6f74
	goto loc_823F6F74;
loc_823F6F70:
	// sth r11,128(r1)
	PPC_STORE_U16(ctx.r1.u32 + 128, r11.u16);
loc_823F6F74:
	// addi r27,r1,128
	r27.s64 = ctx.r1.s64 + 128;
	// b 0x823f73f0
	goto loc_823F73F0;
loc_823F6F7C:
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// lwz r11,-4(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f6fcc
	if (cr0.getEQ()) goto loc_823F6FCC;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x823f6fcc
	if (cr0.getEQ()) goto loc_823F6FCC;
	// rlwinm. r9,r25,0,20,20
	ctx.r9.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x800;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r27,r10
	r27.u64 = ctx.r10.u64;
	// beq 0x823f6fc0
	if (cr0.getEQ()) goto loc_823F6FC0;
	// lha r11,0(r11)
	r11.s64 = int16_t(PPC_LOAD_U16(r11.u32 + 0));
	// li r19,1
	r19.s64 = 1;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r26,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r26.s64 = temp.s64;
	// b 0x823f73f0
	goto loc_823F73F0;
loc_823F6FC0:
	// lha r26,0(r11)
	r26.s64 = int16_t(PPC_LOAD_U16(r11.u32 + 0));
	// mr r19,r28
	r19.u64 = r28.u64;
	// b 0x823f73f0
	goto loc_823F73F0;
loc_823F6FCC:
	// lis r11,-32249
	r11.s64 = -2113470464;
	// lwz r27,10996(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 10996);
	// mr r11,r27
	r11.u64 = r27.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F6FDC:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f6fdc
	if (!cr6.getEQ()) goto loc_823F6FDC;
loc_823F6FEC:
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r26,r11,0
	r26.u64 = __builtin_rotateleft32(r11.u32, 0);
	// b 0x823f73f0
	goto loc_823F73F0;
loc_823F6FFC:
	// andi. r11,r25,2096
	r11.u64 = r25.u64 & 2096;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f700c
	if (!cr0.getEQ()) goto loc_823F700C;
	// ori r25,r25,32
	r25.u64 = r25.u64 | 32;
loc_823F700C:
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// bne cr6,0x823f7020
	if (!cr6.getEQ()) goto loc_823F7020;
	// lis r30,32767
	r30.s64 = 2147418112;
	// ori r30,r30,65535
	r30.u64 = r30.u64 | 65535;
	// b 0x823f7024
	goto loc_823F7024;
loc_823F7020:
	// mr r30,r23
	r30.u64 = r23.u64;
loc_823F7024:
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm. r10,r25,0,26,26
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// lwz r27,-4(r24)
	r27.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq 0x823f7094
	if (cr0.getEQ()) goto loc_823F7094;
	// bne cr6,0x823f704c
	if (!cr6.getEQ()) goto loc_823F704C;
	// lis r11,-32249
	r11.s64 = -2113470464;
	// lwz r27,10996(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 10996);
loc_823F704C:
	// mr r31,r27
	r31.u64 = r27.u64;
	// mr r26,r28
	r26.u64 = r28.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x823f73f0
	if (!cr6.getGT()) goto loc_823F73F0;
loc_823F705C:
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f73f0
	if (cr0.getEQ()) goto loc_823F73F0;
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x823fe8a8
	sub_823FE8A8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f7080
	if (cr0.getEQ()) goto loc_823F7080;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_823F7080:
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r26,r30
	cr6.compare<int32_t>(r26.s32, r30.s32, xer);
	// blt cr6,0x823f705c
	if (cr6.getLT()) goto loc_823F705C;
	// b 0x823f73f0
	goto loc_823F73F0;
loc_823F7094:
	// bne cr6,0x823f70a0
	if (!cr6.getEQ()) goto loc_823F70A0;
	// lis r11,-32249
	r11.s64 = -2113470464;
	// lwz r27,11000(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 11000);
loc_823F70A0:
	// li r19,1
	r19.s64 = 1;
	// mr r11,r27
	r11.u64 = r27.u64;
	// b 0x823f70c0
	goto loc_823F70C0;
loc_823F70AC:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x823f70c8
	if (cr0.getEQ()) goto loc_823F70C8;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
loc_823F70C0:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x823f70ac
	if (!cr6.getEQ()) goto loc_823F70AC;
loc_823F70C8:
	// subf r11,r27,r11
	r11.s64 = r11.s64 - r27.s64;
	// srawi r26,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r26.s64 = r11.s32 >> 1;
	// b 0x823f73f0
	goto loc_823F73F0;
loc_823F70D4:
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// lwz r31,-4(r24)
	r31.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// bl 0x823ed4a0
	sub_823ED4A0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f6bec
	if (cr0.getEQ()) goto loc_823F6BEC;
	// rlwinm. r11,r25,0,26,26
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f7100
	if (cr0.getEQ()) goto loc_823F7100;
	// sth r21,0(r31)
	PPC_STORE_U16(r31.u32 + 0, r21.u16);
	// b 0x823f7104
	goto loc_823F7104;
loc_823F7100:
	// stw r21,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r21.u32);
loc_823F7104:
	// li r11,1
	r11.s64 = 1;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// b 0x823f7674
	goto loc_823F7674;
loc_823F7110:
	// addi r11,r10,32
	r11.s64 = ctx.r10.s64 + 32;
	// li r16,1
	r16.s64 = 1;
	// clrlwi r29,r11,16
	r29.u64 = r11.u32 & 0xFFFF;
loc_823F711C:
	// ori r25,r25,64
	r25.u64 = r25.u64 | 64;
	// addi r27,r1,128
	r27.s64 = ctx.r1.s64 + 128;
	// li r30,512
	r30.s64 = 512;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// bge cr6,0x823f7138
	if (!cr6.getLT()) goto loc_823F7138;
	// li r23,6
	r23.s64 = 6;
	// b 0x823f718c
	goto loc_823F718C;
loc_823F7138:
	// bne cr6,0x823f7150
	if (!cr6.getEQ()) goto loc_823F7150;
	// clrlwi r11,r29,16
	r11.u64 = r29.u32 & 0xFFFF;
	// cmplwi cr6,r11,103
	cr6.compare<uint32_t>(r11.u32, 103, xer);
	// bne cr6,0x823f718c
	if (!cr6.getEQ()) goto loc_823F718C;
	// li r23,1
	r23.s64 = 1;
	// b 0x823f718c
	goto loc_823F718C;
loc_823F7150:
	// cmpwi cr6,r23,512
	cr6.compare<int32_t>(r23.s32, 512, xer);
	// ble cr6,0x823f715c
	if (!cr6.getGT()) goto loc_823F715C;
	// li r23,512
	r23.s64 = 512;
loc_823F715C:
	// cmpwi cr6,r23,163
	cr6.compare<int32_t>(r23.s32, 163, xer);
	// ble cr6,0x823f718c
	if (!cr6.getGT()) goto loc_823F718C;
	// addi r31,r23,349
	r31.s64 = r23.s64 + 349;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ed2b0
	sub_823ED2B0(ctx, base);
	// stw r3,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r3.u32);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f7188
	if (cr0.getEQ()) goto loc_823F7188;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r30,r31
	r30.u64 = r31.u64;
	// b 0x823f718c
	goto loc_823F718C;
loc_823F7188:
	// li r23,163
	r23.s64 = 163;
loc_823F718C:
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// lwz r10,24(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 24);
	// mr r9,r20
	ctx.r9.u64 = r20.u64;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// mr r8,r16
	ctx.r8.u64 = r16.u64;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// mr r7,r23
	ctx.r7.u64 = r23.u64;
	// extsb r6,r29
	ctx.r6.s64 = r29.s8;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// ld r11,-8(r24)
	r11.u64 = PPC_LOAD_U64(r24.u32 + -8);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm. r31,r25,0,24,24
	r31.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x823f71ec
	if (cr0.getEQ()) goto loc_823F71EC;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// bne cr6,0x823f71ec
	if (!cr6.getEQ()) goto loc_823F71EC;
	// lwz r11,36(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 36);
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_823F71EC:
	// clrlwi r11,r29,16
	r11.u64 = r29.u32 & 0xFFFF;
	// cmplwi cr6,r11,103
	cr6.compare<uint32_t>(r11.u32, 103, xer);
	// bne cr6,0x823f7214
	if (!cr6.getEQ()) goto loc_823F7214;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bne cr6,0x823f7214
	if (!cr6.getEQ()) goto loc_823F7214;
	// lwz r11,32(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 32);
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_823F7214:
	// lbz r11,0(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 0);
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x823f7228
	if (!cr6.getEQ()) goto loc_823F7228;
	// ori r25,r25,256
	r25.u64 = r25.u64 | 256;
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
loc_823F7228:
	// mr r11,r27
	r11.u64 = r27.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F7230:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f7230
	if (!cr6.getEQ()) goto loc_823F7230;
	// b 0x823f6fec
	goto loc_823F6FEC;
loc_823F7244:
	// ori r25,r25,64
	r25.u64 = r25.u64 | 64;
loc_823F7248:
	// li r8,10
	ctx.r8.s64 = 10;
	// b 0x823f7298
	goto loc_823F7298;
loc_823F7250:
	// li r23,8
	r23.s64 = 8;
loc_823F7254:
	// li r31,7
	r31.s64 = 7;
	// b 0x823f7260
	goto loc_823F7260;
loc_823F725C:
	// li r31,39
	r31.s64 = 39;
loc_823F7260:
	// stw r31,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r31.u32);
	// rlwinm. r11,r25,0,24,24
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r8,16
	ctx.r8.s64 = 16;
	// beq 0x823f7298
	if (cr0.getEQ()) goto loc_823F7298;
	// addi r11,r31,81
	r11.s64 = r31.s64 + 81;
	// li r10,48
	ctx.r10.s64 = 48;
	// li r17,2
	r17.s64 = 2;
	// sth r11,90(r1)
	PPC_STORE_U16(ctx.r1.u32 + 90, r11.u16);
	// sth r10,88(r1)
	PPC_STORE_U16(ctx.r1.u32 + 88, ctx.r10.u16);
	// b 0x823f7298
	goto loc_823F7298;
loc_823F7288:
	// rlwinm. r11,r25,0,24,24
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r8,8
	ctx.r8.s64 = 8;
	// beq 0x823f7298
	if (cr0.getEQ()) goto loc_823F7298;
	// ori r25,r25,512
	r25.u64 = r25.u64 | 512;
loc_823F7298:
	// rlwinm. r11,r25,0,16,16
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f72a8
	if (!cr0.getEQ()) goto loc_823F72A8;
	// rlwinm. r11,r25,0,19,19
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x1000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f72bc
	if (cr0.getEQ()) goto loc_823F72BC;
loc_823F72A8:
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// ld r11,-8(r24)
	r11.u64 = PPC_LOAD_U64(r24.u32 + -8);
	// b 0x823f730c
	goto loc_823F730C;
loc_823F72BC:
	// rlwinm. r11,r25,0,26,26
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f72ec
	if (cr0.getEQ()) goto loc_823F72EC;
	// rlwinm. r11,r25,0,25,25
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// lwz r11,-4(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// beq 0x823f72e4
	if (cr0.getEQ()) goto loc_823F72E4;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// b 0x823f730c
	goto loc_823F730C;
loc_823F72E4:
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// b 0x823f730c
	goto loc_823F730C;
loc_823F72EC:
	// rlwinm. r11,r25,0,25,25
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r24,7
	r11.s64 = r24.s64 + 7;
	// rlwinm r11,r11,0,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r24,r11,8
	r24.s64 = r11.s64 + 8;
	// beq 0x823f7308
	if (cr0.getEQ()) goto loc_823F7308;
	// lwa r11,-4(r24)
	r11.s64 = int32_t(PPC_LOAD_U32(r24.u32 + -4));
	// b 0x823f730c
	goto loc_823F730C;
loc_823F7308:
	// lwz r11,-4(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -4);
loc_823F730C:
	// rlwinm. r10,r25,0,25,25
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f7324
	if (cr0.getEQ()) goto loc_823F7324;
	// cmpdi cr6,r11,0
	cr6.compare<int64_t>(r11.s64, 0, xer);
	// bge cr6,0x823f7324
	if (!cr6.getLT()) goto loc_823F7324;
	// neg r11,r11
	r11.s64 = -r11.s64;
	// ori r25,r25,256
	r25.u64 = r25.u64 | 256;
loc_823F7324:
	// rlwinm. r10,r25,0,16,16
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823f7338
	if (!cr0.getEQ()) goto loc_823F7338;
	// rlwinm. r10,r25,0,19,19
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x1000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823f7338
	if (!cr0.getEQ()) goto loc_823F7338;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
loc_823F7338:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// bge cr6,0x823f7348
	if (!cr6.getLT()) goto loc_823F7348;
	// li r23,1
	r23.s64 = 1;
	// b 0x823f7358
	goto loc_823F7358;
loc_823F7348:
	// rlwinm r25,r25,0,29,27
	r25.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// cmpwi cr6,r23,512
	cr6.compare<int32_t>(r23.s32, 512, xer);
	// ble cr6,0x823f7358
	if (!cr6.getGT()) goto loc_823F7358;
	// li r23,512
	r23.s64 = 512;
loc_823F7358:
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// bne cr6,0x823f7364
	if (!cr6.getEQ()) goto loc_823F7364;
	// mr r17,r28
	r17.u64 = r28.u64;
loc_823F7364:
	// addi r9,r1,639
	ctx.r9.s64 = ctx.r1.s64 + 639;
loc_823F7368:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// addi r23,r23,-1
	r23.s64 = r23.s64 + -1;
	// bgt cr6,0x823f737c
	if (cr6.getGT()) goto loc_823F737C;
	// cmpldi cr6,r11,0
	cr6.compare<uint64_t>(r11.u64, 0, xer);
	// beq cr6,0x823f73b8
	if (cr6.getEQ()) goto loc_823F73B8;
loc_823F737C:
	// extsw r10,r8
	ctx.r10.s64 = ctx.r8.s32;
	// divdu r7,r11,r10
	ctx.r7.u64 = r11.u64 / ctx.r10.u64;
	// tdllei r10,0
	// mulld r7,r7,r10
	ctx.r7.s64 = ctx.r7.s64 * ctx.r10.s64;
	// subf r7,r7,r11
	ctx.r7.s64 = r11.s64 - ctx.r7.s64;
	// divdu r11,r11,r10
	r11.u64 = r11.u64 / ctx.r10.u64;
	// tdllei r10,0
	// rotlwi r10,r7,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r7.u32, 0);
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmpwi cr6,r10,57
	cr6.compare<int32_t>(ctx.r10.s32, 57, xer);
	// ble cr6,0x823f73ac
	if (!cr6.getGT()) goto loc_823F73AC;
	// add r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 + r31.u64;
loc_823F73AC:
	// stb r10,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, ctx.r10.u8);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// b 0x823f7368
	goto loc_823F7368;
loc_823F73B8:
	// addi r11,r1,639
	r11.s64 = ctx.r1.s64 + 639;
	// rlwinm. r10,r25,0,22,22
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x200;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// subf r26,r9,r11
	r26.s64 = r11.s64 - ctx.r9.s64;
	// addi r27,r9,1
	r27.s64 = ctx.r9.s64 + 1;
	// beq 0x823f73f0
	if (cr0.getEQ()) goto loc_823F73F0;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x823f73e0
	if (cr6.getEQ()) goto loc_823F73E0;
	// lbz r11,0(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 0);
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// beq cr6,0x823f73f0
	if (cr6.getEQ()) goto loc_823F73F0;
loc_823F73E0:
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// li r11,48
	r11.s64 = 48;
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// stb r11,0(r27)
	PPC_STORE_U8(r27.u32 + 0, r11.u8);
loc_823F73F0:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823f7674
	if (!cr6.getEQ()) goto loc_823F7674;
	// rlwinm. r11,r25,0,25,25
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f7438
	if (cr0.getEQ()) goto loc_823F7438;
	// rlwinm. r11,r25,0,23,23
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x100;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f7414
	if (cr0.getEQ()) goto loc_823F7414;
	// li r11,45
	r11.s64 = 45;
	// b 0x823f7430
	goto loc_823F7430;
loc_823F7414:
	// clrlwi. r11,r25,31
	r11.u64 = r25.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f7424
	if (cr0.getEQ()) goto loc_823F7424;
	// li r11,43
	r11.s64 = 43;
	// b 0x823f7430
	goto loc_823F7430;
loc_823F7424:
	// rlwinm. r11,r25,0,30,30
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f7438
	if (cr0.getEQ()) goto loc_823F7438;
	// li r11,32
	r11.s64 = 32;
loc_823F7430:
	// sth r11,88(r1)
	PPC_STORE_U16(ctx.r1.u32 + 88, r11.u16);
	// li r17,1
	r17.s64 = 1;
loc_823F7438:
	// subf r11,r26,r14
	r11.s64 = r14.s64 - r26.s64;
	// rlwinm. r10,r25,0,28,29
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0xC;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// subf r28,r17,r11
	r28.s64 = r11.s64 - r17.s64;
	// bne 0x823f747c
	if (!cr0.getEQ()) goto loc_823F747C;
	// mr r31,r28
	r31.u64 = r28.u64;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x823f747c
	if (!cr6.getGT()) goto loc_823F747C;
loc_823F7454:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r21,80(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r21,-1
	cr6.compare<int32_t>(r21.s32, -1, xer);
	// beq cr6,0x823f747c
	if (cr6.getEQ()) goto loc_823F747C;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bgt cr6,0x823f7454
	if (cr6.getGT()) goto loc_823F7454;
loc_823F747C:
	// lwz r11,12(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 12);
	// mr r30,r17
	r30.u64 = r17.u64;
	// addi r31,r1,88
	r31.s64 = ctx.r1.s64 + 88;
	// rlwinm. r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f74a8
	if (cr0.getEQ()) goto loc_823F74A8;
	// lwz r11,8(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f74a8
	if (!cr6.getEQ()) goto loc_823F74A8;
	// add r21,r21,r17
	r21.u64 = r21.u64 + r17.u64;
	// stw r21,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r21.u32);
	// b 0x823f7500
	goto loc_823F7500;
loc_823F74A8:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// ble cr6,0x823f7500
	if (!cr6.getGT()) goto loc_823F7500;
loc_823F74B0:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lhz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r21,80(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
	// cmpwi cr6,r21,-1
	cr6.compare<int32_t>(r21.s32, -1, xer);
	// bne cr6,0x823f74f8
	if (!cr6.getEQ()) goto loc_823F74F8;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,42
	cr6.compare<int32_t>(r11.s32, 42, xer);
	// bne cr6,0x823f7500
	if (!cr6.getEQ()) goto loc_823F7500;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// li r3,63
	ctx.r3.s64 = 63;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r21,80(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_823F74F8:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bgt cr6,0x823f74b0
	if (cr6.getGT()) goto loc_823F74B0;
loc_823F7500:
	// rlwinm. r11,r25,0,28,28
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f7544
	if (cr0.getEQ()) goto loc_823F7544;
	// rlwinm. r11,r25,0,29,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f7544
	if (!cr0.getEQ()) goto loc_823F7544;
	// mr r31,r28
	r31.u64 = r28.u64;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x823f7544
	if (!cr6.getGT()) goto loc_823F7544;
loc_823F751C:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// li r3,48
	ctx.r3.s64 = 48;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r21,80(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r21,-1
	cr6.compare<int32_t>(r21.s32, -1, xer);
	// beq cr6,0x823f7544
	if (cr6.getEQ()) goto loc_823F7544;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bgt cr6,0x823f751c
	if (cr6.getGT()) goto loc_823F751C;
loc_823F7544:
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// bne cr6,0x823f75ac
	if (!cr6.getEQ()) goto loc_823F75AC;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// ble cr6,0x823f75ac
	if (!cr6.getGT()) goto loc_823F75AC;
	// mr r30,r27
	r30.u64 = r27.u64;
	// mr r31,r26
	r31.u64 = r26.u64;
loc_823F755C:
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// lwz r5,172(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 172);
	// bl 0x823ffea8
	sub_823FFEA8(ctx, base);
	// mr. r29,r3
	r29.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// ble 0x823f75a4
	if (!cr0.getGT()) goto loc_823F75A4;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lhz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 84);
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// add r30,r29,r30
	r30.u64 = r29.u64 + r30.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bgt cr6,0x823f755c
	if (cr6.getGT()) goto loc_823F755C;
	// lwz r21,80(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// b 0x823f7630
	goto loc_823F7630;
loc_823F75A4:
	// li r21,-1
	r21.s64 = -1;
	// b 0x823f75d0
	goto loc_823F75D0;
loc_823F75AC:
	// lwz r11,12(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 12);
	// mr r30,r26
	r30.u64 = r26.u64;
	// mr r31,r27
	r31.u64 = r27.u64;
	// rlwinm. r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f75d8
	if (cr0.getEQ()) goto loc_823F75D8;
	// lwz r11,8(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f75d8
	if (!cr6.getEQ()) goto loc_823F75D8;
	// add r21,r26,r21
	r21.u64 = r26.u64 + r21.u64;
loc_823F75D0:
	// stw r21,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r21.u32);
	// b 0x823f7630
	goto loc_823F7630;
loc_823F75D8:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// ble cr6,0x823f7630
	if (!cr6.getGT()) goto loc_823F7630;
loc_823F75E0:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lhz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r21,80(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
	// cmpwi cr6,r21,-1
	cr6.compare<int32_t>(r21.s32, -1, xer);
	// bne cr6,0x823f7628
	if (!cr6.getEQ()) goto loc_823F7628;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,42
	cr6.compare<int32_t>(r11.s32, 42, xer);
	// bne cr6,0x823f7674
	if (!cr6.getEQ()) goto loc_823F7674;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// li r3,63
	ctx.r3.s64 = 63;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r21,80(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_823F7628:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bgt cr6,0x823f75e0
	if (cr6.getGT()) goto loc_823F75E0;
loc_823F7630:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// blt cr6,0x823f7674
	if (cr6.getLT()) goto loc_823F7674;
	// rlwinm. r11,r25,0,29,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f7674
	if (cr0.getEQ()) goto loc_823F7674;
	// mr r31,r28
	r31.u64 = r28.u64;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x823f7674
	if (!cr6.getGT()) goto loc_823F7674;
loc_823F764C:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// bl 0x823f5ff8
	sub_823F5FF8(ctx, base);
	// lwz r21,80(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r21,-1
	cr6.compare<int32_t>(r21.s32, -1, xer);
	// beq cr6,0x823f7674
	if (cr6.getEQ()) goto loc_823F7674;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bgt cr6,0x823f764c
	if (cr6.getGT()) goto loc_823F764C;
loc_823F7674:
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823f7690
	if (cr6.getEQ()) goto loc_823F7690;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
loc_823F7690:
	// lhz r29,0(r15)
	r29.u64 = PPC_LOAD_U16(r15.u32 + 0);
	// lwz r8,104(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// mr. r10,r29
	ctx.r10.u64 = r29.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823f76b0
	if (cr0.getEQ()) goto loc_823F76B0;
	// lwz r31,108(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// li r28,0
	r28.s64 = 0;
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// b 0x823f6c88
	goto loc_823F6C88;
loc_823F76B0:
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x823f76c0
	if (cr6.getEQ()) goto loc_823F76C0;
	// cmpwi cr6,r8,7
	cr6.compare<int32_t>(ctx.r8.s32, 7, xer);
	// bne cr6,0x823f6bec
	if (!cr6.getEQ()) goto loc_823F6BEC;
loc_823F76C0:
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// b 0x823f76fc
	goto loc_823F76FC;
loc_823F76C8:
	// mr r6,r24
	ctx.r6.u64 = r24.u64;
	// mr r5,r15
	ctx.r5.u64 = r15.u64;
	// li r4,512
	ctx.r4.s64 = 512;
	// addi r3,r1,1152
	ctx.r3.s64 = ctx.r1.s64 + 1152;
	// bl 0x823ef090
	sub_823EF090(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,-1
	cr6.compare<int32_t>(r31.s32, -1, xer);
	// bne cr6,0x823f76f0
	if (!cr6.getEQ()) goto loc_823F76F0;
	// li r31,511
	r31.s64 = 511;
	// sth r28,2174(r1)
	PPC_STORE_U16(ctx.r1.u32 + 2174, r28.u16);
loc_823F76F0:
	// addi r3,r1,1152
	ctx.r3.s64 = ctx.r1.s64 + 1152;
	// bl 0x82408648
	sub_82408648(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_823F76FC:
	// addi r1,r1,2336
	ctx.r1.s64 = ctx.r1.s64 + 2336;
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_823F7708"))) PPC_WEAK_FUNC(sub_823F7708);
PPC_FUNC_IMPL(__imp__sub_823F7708) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	// stfd f1,16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// addi r11,r4,1022
	r11.s64 = ctx.r4.s64 + 1022;
	// stfd f1,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.f1.u64);
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lhz r10,16(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 16);
	// andi. r10,r10,32783
	ctx.r10.u64 = ctx.r10.u64 & 32783;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// sth r11,-16(r1)
	PPC_STORE_U16(ctx.r1.u32 + -16, r11.u16);
	// lfd f1,-16(r1)
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F7730"))) PPC_WEAK_FUNC(sub_823F7730);
PPC_FUNC_IMPL(__imp__sub_823F7730) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// stfd f1,16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// lhz r11,16(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 16);
	// rlwinm r11,r11,28,21,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0x7FF;
	// addi r11,r11,-1022
	r11.s64 = r11.s64 + -1022;
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F7748"))) PPC_WEAK_FUNC(sub_823F7748);
PPC_FUNC_IMPL(__imp__sub_823F7748) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	// stfd f1,-8(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -8, ctx.f1.u64);
	// stfd f1,16(r1)
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// lhz r10,-8(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + -8);
	// lhz r11,16(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 16);
	// stfd f1,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.f1.u64);
	// rlwinm r11,r11,28,21,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0x7FF;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// andi. r10,r10,32783
	ctx.r10.u64 = ctx.r10.u64 & 32783;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// sth r11,-16(r1)
	PPC_STORE_U16(ctx.r1.u32 + -16, r11.u16);
	// lfd f1,-16(r1)
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F7780"))) PPC_WEAK_FUNC(sub_823F7780);
PPC_FUNC_IMPL(__imp__sub_823F7780) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// stfd f1,16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// lis r11,32752
	r11.s64 = 2146435072;
	// lwz r10,16(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 16);
	// lwz r9,20(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x823f77a8
	if (!cr6.getEQ()) goto loc_823F77A8;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f77c4
	if (!cr6.getEQ()) goto loc_823F77C4;
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
loc_823F77A8:
	// lis r11,-16
	r11.s64 = -1048576;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x823f77c4
	if (!cr6.getEQ()) goto loc_823F77C4;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823f77c4
	if (!cr6.getEQ()) goto loc_823F77C4;
	// li r3,2
	ctx.r3.s64 = 2;
	// blr 
	return;
loc_823F77C4:
	// lhz r11,16(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 16);
	// rlwinm r11,r11,0,17,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x7FF8;
	// cmplwi cr6,r11,32760
	cr6.compare<uint32_t>(r11.u32, 32760, xer);
	// bne cr6,0x823f77dc
	if (!cr6.getEQ()) goto loc_823F77DC;
	// li r3,3
	ctx.r3.s64 = 3;
	// blr 
	return;
loc_823F77DC:
	// cmplwi cr6,r11,32752
	cr6.compare<uint32_t>(r11.u32, 32752, xer);
	// bne cr6,0x823f77fc
	if (!cr6.getEQ()) goto loc_823F77FC;
	// clrlwi. r11,r10,13
	r11.u64 = ctx.r10.u32 & 0x7FFFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f77f4
	if (!cr0.getEQ()) goto loc_823F77F4;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x823f77fc
	if (cr6.getEQ()) goto loc_823F77FC;
loc_823F77F4:
	// li r3,4
	ctx.r3.s64 = 4;
	// blr 
	return;
loc_823F77FC:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F7808"))) PPC_WEAK_FUNC(sub_823F7808);
PPC_FUNC_IMPL(__imp__sub_823F7808) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfd f1,16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 16, ctx.f1.u64);
	// lfd f0,2752(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bne cr6,0x823f7824
	if (!cr6.getEQ()) goto loc_823F7824;
	// li r9,0
	ctx.r9.s64 = 0;
	// b 0x823f78e4
	goto loc_823F78E4;
loc_823F7824:
	// lhz r8,16(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 16);
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// rlwinm. r11,r7,0,17,27
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x7FF0;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f78c0
	if (!cr0.getEQ()) goto loc_823F78C0;
	// lwz r6,16(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 16);
	// clrlwi. r10,r6,12
	ctx.r10.u64 = ctx.r6.u32 & 0xFFFFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lwz r10,20(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// bne 0x823f784c
	if (!cr0.getEQ()) goto loc_823F784C;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x823f78c0
	if (cr6.getEQ()) goto loc_823F78C0;
loc_823F784C:
	// li r9,-1021
	ctx.r9.s64 = -1021;
	// fcmpu cr6,f1,f0
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f0.f64);
	// li r5,1
	ctx.r5.s64 = 1;
	// blt cr6,0x823f7860
	if (cr6.getLT()) goto loc_823F7860;
	// li r5,0
	ctx.r5.s64 = 0;
loc_823F7860:
	// rlwinm. r11,r7,0,27,27
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f7898
	if (!cr0.getEQ()) goto loc_823F7898;
loc_823F7868:
	// rlwinm r6,r6,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm. r11,r10,0,0,0
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r6,16(r1)
	PPC_STORE_U32(ctx.r1.u32 + 16, ctx.r6.u32);
	// beq 0x823f7880
	if (cr0.getEQ()) goto loc_823F7880;
	// ori r6,r6,1
	ctx.r6.u64 = ctx.r6.u64 | 1;
	// stw r6,16(r1)
	PPC_STORE_U32(ctx.r1.u32 + 16, ctx.r6.u32);
loc_823F7880:
	// lhz r8,16(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 16);
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// rlwinm. r11,r8,0,27,27
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f7868
	if (cr0.getEQ()) goto loc_823F7868;
	// stw r10,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, ctx.r10.u32);
loc_823F7898:
	// andi. r11,r8,65519
	r11.u64 = ctx.r8.u64 & 65519;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// sth r11,16(r1)
	PPC_STORE_U16(ctx.r1.u32 + 16, r11.u16);
	// beq cr6,0x823f78b0
	if (cr6.getEQ()) goto loc_823F78B0;
	// ori r11,r11,32768
	r11.u64 = r11.u64 | 32768;
	// sth r11,16(r1)
	PPC_STORE_U16(ctx.r1.u32 + 16, r11.u16);
loc_823F78B0:
	// lfd f0,16(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 16);
	// stfd f0,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, f0.u64);
	// stfd f0,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, f0.u64);
	// b 0x823f78d0
	goto loc_823F78D0;
loc_823F78C0:
	// rlwinm r11,r11,28,20,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0xFFF;
	// stfd f1,-8(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -8, ctx.f1.u64);
	// stfd f1,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.f1.u64);
	// addi r9,r11,-1022
	ctx.r9.s64 = r11.s64 + -1022;
loc_823F78D0:
	// lhz r11,-8(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + -8);
	// andi. r11,r11,32783
	r11.u64 = r11.u64 & 32783;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// ori r11,r11,16352
	r11.u64 = r11.u64 | 16352;
	// sth r11,-16(r1)
	PPC_STORE_U16(ctx.r1.u32 + -16, r11.u16);
	// lfd f1,-16(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
loc_823F78E4:
	// stw r9,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r9.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F78F0"))) PPC_WEAK_FUNC(sub_823F78F0);
PPC_FUNC_IMPL(__imp__sub_823F78F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x823f7918
	if (!cr6.getEQ()) goto loc_823F7918;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ed2b0
	sub_823ED2B0(ctx, base);
	// b 0x823f79a4
	goto loc_823F79A4;
loc_823F7918:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f792c
	if (!cr6.getEQ()) goto loc_823F792C;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// b 0x823f79a0
	goto loc_823F79A0;
loc_823F792C:
	// li r29,-4096
	r29.s64 = -4096;
	// cmplw cr6,r31,r29
	cr6.compare<uint32_t>(r31.u32, r29.u32, xer);
	// bgt cr6,0x823f7988
	if (cr6.getGT()) goto loc_823F7988;
	// lis r27,-31987
	r27.s64 = -2096300032;
loc_823F793C:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f7948
	if (!cr6.getEQ()) goto loc_823F7948;
	// li r31,1
	r31.s64 = 1;
loc_823F7948:
	// bl 0x82364478
	sub_82364478(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// bl 0x82363bc0
	sub_82363BC0(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x823f79dc
	if (!cr0.getEQ()) goto loc_823F79DC;
	// lwz r11,-20080(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -20080);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x823f79c8
	if (cr6.getEQ()) goto loc_823F79C8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f4dd8
	sub_823F4DD8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f79ac
	if (cr0.getEQ()) goto loc_823F79AC;
	// cmplw cr6,r31,r29
	cr6.compare<uint32_t>(r31.u32, r29.u32, xer);
	// ble cr6,0x823f793c
	if (!cr6.getGT()) goto loc_823F793C;
loc_823F7988:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f4dd8
	sub_823F4DD8(ctx, base);
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,12
	ctx.r10.s64 = 12;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_823F79A0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823F79A4:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_823F79AC:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8235df68
	sub_8235DF68(ctx, base);
	// bl 0x823f3d78
	sub_823F3D78(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// b 0x823f79a0
	goto loc_823F79A0;
loc_823F79C8:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8235df68
	sub_8235DF68(ctx, base);
	// bl 0x823f3d78
	sub_823F3D78(ctx, base);
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
loc_823F79DC:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// b 0x823f79a4
	goto loc_823F79A4;
}

__attribute__((alias("__imp__sub_823F79E8"))) PPC_WEAK_FUNC(sub_823F79E8);
PPC_FUNC_IMPL(__imp__sub_823F79E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x823f7a48
	if (cr6.getEQ()) goto loc_823F7A48;
	// li r11,-4096
	r11.s64 = -4096;
	// twllei r4,0
	// divwu r11,r11,r4
	r11.u32 = r11.u32 / ctx.r4.u32;
	// cmplw cr6,r11,r5
	cr6.compare<uint32_t>(r11.u32, ctx.r5.u32, xer);
	// bge cr6,0x823f7a48
	if (!cr6.getLT()) goto loc_823F7A48;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,12
	ctx.r10.s64 = 12;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x823f7a90
	goto loc_823F7A90;
loc_823F7A48:
	// mullw r30,r4,r5
	r30.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r5.s32);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x823f7a60
	if (cr6.getEQ()) goto loc_823F7A60;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f7a98
	sub_823F7A98(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
loc_823F7A60:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f78f0
	sub_823F78F0(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x823f7a8c
	if (cr0.getEQ()) goto loc_823F7A8C;
	// cmplw cr6,r29,r30
	cr6.compare<uint32_t>(r29.u32, r30.u32, xer);
	// bge cr6,0x823f7a8c
	if (!cr6.getLT()) goto loc_823F7A8C;
	// subf r5,r29,r30
	ctx.r5.s64 = r30.s64 - r29.s64;
	// li r4,0
	ctx.r4.s64 = 0;
	// add r3,r29,r31
	ctx.r3.u64 = r29.u64 + r31.u64;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
loc_823F7A8C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_823F7A90:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F7A98"))) PPC_WEAK_FUNC(sub_823F7A98);
PPC_FUNC_IMPL(__imp__sub_823F7A98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f7ae4
	if (!cr6.getEQ()) goto loc_823F7AE4;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x823f7af4
	goto loc_823F7AF4;
loc_823F7AE4:
	// bl 0x82364478
	sub_82364478(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// bl 0x82362288
	sub_82362288(ctx, base);
loc_823F7AF4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F7B08"))) PPC_WEAK_FUNC(sub_823F7B08);
PPC_FUNC_IMPL(__imp__sub_823F7B08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-2816(r1)
	ea = -2816 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32015
	r31.s64 = -2098135040;
	// lwz r11,-19408(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19408);
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f7b30
	if (cr0.getEQ()) goto loc_823F7B30;
	// li r3,10
	ctx.r3.s64 = 10;
	// bl 0x823f4d50
	sub_823F4D50(ctx, base);
loc_823F7B30:
	// bl 0x823fffe0
	sub_823FFFE0(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f7b44
	if (cr0.getEQ()) goto loc_823F7B44;
	// li r3,22
	ctx.r3.s64 = 22;
	// bl 0x823ffff8
	sub_823FFFF8(ctx, base);
loc_823F7B44:
	// lwz r11,-19408(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -19408);
	// rlwinm. r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f7bb0
	if (cr0.getEQ()) goto loc_823F7BB0;
	// li r5,2624
	ctx.r5.s64 = 2624;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,10
	ctx.r10.s64 = 10;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_823F7B70:
	// std r9,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r9.u64);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// bdnz 0x823f7b70
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_823F7B70;
	// lis r11,16384
	r11.s64 = 1073741824;
	// li r3,0
	ctx.r3.s64 = 0;
	// ori r11,r11,21
	r11.u64 = r11.u64 | 21;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// lwz r11,2808(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2808);
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x8235dd28
	sub_8235DD28(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8235ddf0
	sub_8235DDF0(ctx, base);
loc_823F7BB0:
	// li r3,3
	ctx.r3.s64 = 3;
	// bl 0x823ef820
	sub_823EF820(ctx, base);
}

__attribute__((alias("__imp__sub_823F7BB8"))) PPC_WEAK_FUNC(sub_823F7BB8);
PPC_FUNC_IMPL(__imp__sub_823F7BB8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// and r9,r3,r4
	ctx.r9.u64 = ctx.r3.u64 & ctx.r4.u64;
	// lwz r11,-19408(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -19408);
	// andc r8,r11,r4
	ctx.r8.u64 = r11.u64 & ~ctx.r4.u64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// or r11,r8,r9
	r11.u64 = ctx.r8.u64 | ctx.r9.u64;
	// stw r11,-19408(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19408, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F7BD8"))) PPC_WEAK_FUNC(sub_823F7BD8);
PPC_FUNC_IMPL(__imp__sub_823F7BD8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31987
	r11.s64 = -2096300032;
	// stw r3,-20032(r11)
	PPC_STORE_U32(r11.u32 + -20032, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F7BE8"))) PPC_WEAK_FUNC(sub_823F7BE8);
PPC_FUNC_IMPL(__imp__sub_823F7BE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x823f7c3c
	if (!cr6.getEQ()) goto loc_823F7C3C;
loc_823F7C0C:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x823f7cfc
	goto loc_823F7CFC;
loc_823F7C3C:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x823f7c4c
	if (cr6.getEQ()) goto loc_823F7C4C;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x823f7c0c
	if (cr6.getEQ()) goto loc_823F7C0C;
loc_823F7C4C:
	// lis r10,32767
	ctx.r10.s64 = 2147418112;
	// ori r10,r10,65535
	ctx.r10.u64 = ctx.r10.u64 | 65535;
	// cmplw cr6,r29,r10
	cr6.compare<uint32_t>(r29.u32, ctx.r10.u32, xer);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// bgt cr6,0x823f7c64
	if (cr6.getGT()) goto loc_823F7C64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
loc_823F7C64:
	// li r10,66
	ctx.r10.s64 = 66;
	// stw r31,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r31.u32);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// mr r6,r8
	ctx.r6.u64 = ctx.r8.u64;
	// mr r5,r7
	ctx.r5.u64 = ctx.r7.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823f7c9c
	if (!cr6.getEQ()) goto loc_823F7C9C;
loc_823F7C94:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// b 0x823f7cfc
	goto loc_823F7CFC;
loc_823F7C9C:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x823f7cd8
	if (cr6.getLT()) goto loc_823F7CD8;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// blt 0x823f7cc4
	if (cr0.getLT()) goto loc_823F7CC4;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r11,0
	r11.s64 = 0;
	// stb r11,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r11.u8);
	// b 0x823f7c94
	goto loc_823F7C94;
loc_823F7CC4:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f5e28
	sub_823F5E28(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// bne cr6,0x823f7c94
	if (!cr6.getEQ()) goto loc_823F7C94;
loc_823F7CD8:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// add r10,r31,r29
	ctx.r10.u64 = r31.u64 + r29.u64;
	// li r9,0
	ctx.r9.s64 = 0;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stb r9,-1(r10)
	PPC_STORE_U8(ctx.r10.u32 + -1, ctx.r9.u8);
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// addi r3,r11,-2
	ctx.r3.s64 = r11.s64 + -2;
loc_823F7CFC:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F7D08"))) PPC_WEAK_FUNC(sub_823F7D08);
PPC_FUNC_IMPL(__imp__sub_823F7D08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x823f7d34
	if (!cr6.getEQ()) goto loc_823F7D34;
loc_823F7D28:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r10,22
	ctx.r10.s64 = 22;
	// b 0x823f7d80
	goto loc_823F7D80;
loc_823F7D34:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x823f7d28
	if (cr6.getEQ()) goto loc_823F7D28;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x823f7d28
	if (cr6.getEQ()) goto loc_823F7D28;
	// lis r11,-32192
	r11.s64 = -2109734912;
	// mr r7,r6
	ctx.r7.u64 = ctx.r6.u64;
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,-5792
	ctx.r3.s64 = r11.s64 + -5792;
	// bl 0x823f7be8
	sub_823F7BE8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x823f7d70
	if (!cr0.getLT()) goto loc_823F7D70;
	// li r11,0
	r11.s64 = 0;
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
loc_823F7D70:
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// bne cr6,0x823f7da4
	if (!cr6.getEQ()) goto loc_823F7DA4;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r10,34
	ctx.r10.s64 = 34;
loc_823F7D80:
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
loc_823F7DA4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F7DB8"))) PPC_WEAK_FUNC(sub_823F7DB8);
PPC_FUNC_IMPL(__imp__sub_823F7DB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// addi r11,r3,1
	r11.s64 = ctx.r3.s64 + 1;
	// cmplwi cr6,r11,256
	cr6.compare<uint32_t>(r11.u32, 256, xer);
	// bgt cr6,0x823f7de0
	if (cr6.getGT()) goto loc_823F7DE0;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r11,-19456(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19456);
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// lhzx r11,r11,r10
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
	// and r3,r11,r4
	ctx.r3.u64 = r11.u64 & ctx.r4.u64;
	// blr 
	return;
loc_823F7DE0:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F7DE8"))) PPC_WEAK_FUNC(sub_823F7DE8);
PPC_FUNC_IMPL(__imp__sub_823F7DE8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// li r29,0
	r29.s64 = 0;
	// addi r30,r11,-19400
	r30.s64 = r11.s64 + -19400;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// mr r31,r30
	r31.u64 = r30.u64;
	// addi r28,r11,-20024
	r28.s64 = r11.s64 + -20024;
loc_823F7E0C:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x823f7e38
	if (!cr6.getEQ()) goto loc_823F7E38;
	// mr r11,r28
	r11.u64 = r28.u64;
	// li r4,4000
	ctx.r4.s64 = 4000;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// addi r28,r28,28
	r28.s64 = r28.s64 + 28;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x823f81b0
	sub_823F81B0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f7e58
	if (cr0.getEQ()) goto loc_823F7E58;
loc_823F7E38:
	// addi r31,r31,8
	r31.s64 = r31.s64 + 8;
	// addi r11,r30,288
	r11.s64 = r30.s64 + 288;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x823f7e0c
	if (cr6.getLT()) goto loc_823F7E0C;
	// li r3,1
	ctx.r3.s64 = 1;
loc_823F7E50:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_823F7E58:
	// rlwinm r11,r29,3,0,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stwx r10,r11,r30
	PPC_STORE_U32(r11.u32 + r30.u32, ctx.r10.u32);
	// b 0x823f7e50
	goto loc_823F7E50;
}

__attribute__((alias("__imp__sub_823F7E70"))) PPC_WEAK_FUNC(sub_823F7E70);
PPC_FUNC_IMPL(__imp__sub_823F7E70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r30,r11,-19400
	r30.s64 = r11.s64 + -19400;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_823F7E90:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f7eb4
	if (cr0.getEQ()) goto loc_823F7EB4;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x823f7eb4
	if (cr6.getEQ()) goto loc_823F7EB4;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823F7EB4:
	// addi r31,r31,8
	r31.s64 = r31.s64 + 8;
	// addi r11,r30,288
	r11.s64 = r30.s64 + 288;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x823f7e90
	if (cr6.getLT()) goto loc_823F7E90;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F7EE0"))) PPC_WEAK_FUNC(sub_823F7EE0);
PPC_FUNC_IMPL(__imp__sub_823F7EE0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// rlwinm r10,r3,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r11,-19400
	r11.s64 = r11.s64 + -19400;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// b 0x8240f8ac
	__imp__RtlLeaveCriticalSection(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823F7EF8"))) PPC_WEAK_FUNC(sub_823F7EF8);
PPC_FUNC_IMPL(__imp__sub_823F7EF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29512(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29512);
	// mflr r12
	// bl 0x823ed138
	// addi r31,r1,-128
	r31.s64 = ctx.r1.s64 + -128;
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r11,1
	r11.s64 = 1;
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// bl 0x82364478
	sub_82364478(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x823f7f3c
	if (!cr0.getEQ()) goto loc_823F7F3C;
	// bl 0x823f4d98
	sub_823F4D98(ctx, base);
	// li r3,30
	ctx.r3.s64 = 30;
	// bl 0x823f4d50
	sub_823F4D50(ctx, base);
	// li r3,255
	ctx.r3.s64 = 255;
	// bl 0x823ef648
	sub_823EF648(ctx, base);
loc_823F7F3C:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r30,r11,-19400
	r30.s64 = r11.s64 + -19400;
	// rlwinm r29,r29,3,0,28
	r29.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r11,r29,r30
	r11.u64 = PPC_LOAD_U32(r29.u32 + r30.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823f7f5c
	if (cr6.getEQ()) goto loc_823F7F5C;
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x823f7fec
	goto loc_823F7FEC;
loc_823F7F5C:
	// li r3,28
	ctx.r3.s64 = 28;
	// bl 0x823ed2b0
	sub_823ED2B0(ctx, base);
	// mr. r28,r3
	r28.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// bne 0x823f7f84
	if (!cr0.getEQ()) goto loc_823F7F84;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,12
	ctx.r10.s64 = 12;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x823f7fec
	goto loc_823F7FEC;
loc_823F7F84:
	// li r3,10
	ctx.r3.s64 = 10;
	// bl 0x823f8040
	sub_823F8040(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwzx r11,r29,r30
	r11.u64 = PPC_LOAD_U32(r29.u32 + r30.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bne cr6,0x823f7fd8
	if (!cr6.getEQ()) goto loc_823F7FD8;
	// li r4,4000
	ctx.r4.s64 = 4000;
	// bl 0x823f81b0
	sub_823F81B0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f7fd0
	if (!cr0.getEQ()) goto loc_823F7FD0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r11,12
	r11.s64 = 12;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// b 0x823f7fdc
	goto loc_823F7FDC;
loc_823F7FD0:
	// stwx r28,r29,r30
	PPC_STORE_U32(r29.u32 + r30.u32, r28.u32);
	// b 0x823f7fdc
	goto loc_823F7FDC;
loc_823F7FD8:
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823F7FDC:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,128
	r12.s64 = r31.s64 + 128;
	// bl 0x823f8010
	sub_823F8010(ctx, base);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
loc_823F7FEC:
	// addi r1,r31,128
	ctx.r1.s64 = r31.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823F7F00"))) PPC_WEAK_FUNC(sub_823F7F00);
PPC_FUNC_IMPL(__imp__sub_823F7F00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// addi r31,r1,-128
	r31.s64 = ctx.r1.s64 + -128;
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r11,1
	r11.s64 = 1;
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// bl 0x82364478
	sub_82364478(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x823f7f3c
	if (!cr0.getEQ()) goto loc_823F7F3C;
	// bl 0x823f4d98
	sub_823F4D98(ctx, base);
	// li r3,30
	ctx.r3.s64 = 30;
	// bl 0x823f4d50
	sub_823F4D50(ctx, base);
	// li r3,255
	ctx.r3.s64 = 255;
	// bl 0x823ef648
	sub_823EF648(ctx, base);
loc_823F7F3C:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r30,r11,-19400
	r30.s64 = r11.s64 + -19400;
	// rlwinm r29,r29,3,0,28
	r29.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r11,r29,r30
	r11.u64 = PPC_LOAD_U32(r29.u32 + r30.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823f7f5c
	if (cr6.getEQ()) goto loc_823F7F5C;
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x823f7fec
	goto loc_823F7FEC;
loc_823F7F5C:
	// li r3,28
	ctx.r3.s64 = 28;
	// bl 0x823ed2b0
	sub_823ED2B0(ctx, base);
	// mr. r28,r3
	r28.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// bne 0x823f7f84
	if (!cr0.getEQ()) goto loc_823F7F84;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,12
	ctx.r10.s64 = 12;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x823f7fec
	goto loc_823F7FEC;
loc_823F7F84:
	// li r3,10
	ctx.r3.s64 = 10;
	// bl 0x823f8040
	sub_823F8040(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwzx r11,r29,r30
	r11.u64 = PPC_LOAD_U32(r29.u32 + r30.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bne cr6,0x823f7fd8
	if (!cr6.getEQ()) goto loc_823F7FD8;
	// li r4,4000
	ctx.r4.s64 = 4000;
	// bl 0x823f81b0
	sub_823F81B0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f7fd0
	if (!cr0.getEQ()) goto loc_823F7FD0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r11,12
	r11.s64 = 12;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// b 0x823f7fdc
	goto loc_823F7FDC;
loc_823F7FD0:
	// stwx r28,r29,r30
	PPC_STORE_U32(r29.u32 + r30.u32, r28.u32);
	// b 0x823f7fdc
	goto loc_823F7FDC;
loc_823F7FD8:
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823F7FDC:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,128
	r12.s64 = r31.s64 + 128;
	// bl 0x823f8010
	sub_823F8010(ctx, base);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
loc_823F7FEC:
	// addi r1,r31,128
	ctx.r1.s64 = r31.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823F7FF4"))) PPC_WEAK_FUNC(sub_823F7FF4);
PPC_FUNC_IMPL(__imp__sub_823F7FF4) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	uint32_t ea{};
	// std r30,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r30.u64);
	// mflr r12
	// stw r12,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r30,r11,-19400
	r30.s64 = r11.s64 + -19400;
	// b 0x823f8020
	goto loc_823F8020;
	// std r30,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r30.u64);
	// mflr r12
	// stw r12,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
loc_823F8020:
	// lwz r3,80(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 80);
	// bl 0x8240f8ac
	__imp__RtlLeaveCriticalSection(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r30,-8(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// lwz r12,-16(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -16);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8010"))) PPC_WEAK_FUNC(sub_823F8010);
PPC_FUNC_IMPL(__imp__sub_823F8010) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r30{};
	uint32_t ea{};
	// std r30,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r30.u64);
	// mflr r12
	// stw r12,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r3,80(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 80);
	// bl 0x8240f8ac
	__imp__RtlLeaveCriticalSection(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r30,-8(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// lwz r12,-16(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -16);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8040"))) PPC_WEAK_FUNC(sub_823F8040);
PPC_FUNC_IMPL(__imp__sub_823F8040) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// rlwinm r30,r3,3,0,28
	r30.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r31,r11,-19400
	r31.s64 = r11.s64 + -19400;
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f8080
	if (!cr6.getEQ()) goto loc_823F8080;
	// bl 0x823f7f00
	sub_823F7F00(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f8080
	if (!cr0.getEQ()) goto loc_823F8080;
	// li r3,17
	ctx.r3.s64 = 17;
	// bl 0x823ef600
	sub_823EF600(ctx, base);
loc_823F8080:
	// lwzx r3,r30,r31
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// bl 0x8240f8bc
	__imp__RtlEnterCriticalSection(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F80A0"))) PPC_WEAK_FUNC(sub_823F80A0);
PPC_FUNC_IMPL(__imp__sub_823F80A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29536(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29536);
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-96
	r31.s64 = ctx.r1.s64 + -96;
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,108(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 108);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f80e8
	if (cr0.getEQ()) goto loc_823F80E8;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_823F80E8:
	// lis r3,-16384
	ctx.r3.s64 = -1073741824;
	// ori r3,r3,324
	ctx.r3.u64 = ctx.r3.u64 | 324;
	// bl 0x8240f9ec
	__imp__KeBugCheck(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F80A8"))) PPC_WEAK_FUNC(sub_823F80A8);
PPC_FUNC_IMPL(__imp__sub_823F80A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-96
	r31.s64 = ctx.r1.s64 + -96;
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,108(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 108);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f80e8
	if (cr0.getEQ()) goto loc_823F80E8;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_823F80E8:
	// lis r3,-16384
	ctx.r3.s64 = -1073741824;
	// ori r3,r3,324
	ctx.r3.u64 = ctx.r3.u64 | 324;
	// bl 0x8240f9ec
	__imp__KeBugCheck(ctx, base);
}

__attribute__((alias("__imp__sub_823F80F4"))) PPC_WEAK_FUNC(sub_823F80F4);
PPC_FUNC_IMPL(__imp__sub_823F80F4) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8100"))) PPC_WEAK_FUNC(sub_823F8100);
PPC_FUNC_IMPL(__imp__sub_823F8100) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29560(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29560);
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-96
	r31.s64 = ctx.r1.s64 + -96;
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// lwz r11,-19632(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19632);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f8148
	if (cr0.getEQ()) goto loc_823F8148;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_823F8148:
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8108"))) PPC_WEAK_FUNC(sub_823F8108);
PPC_FUNC_IMPL(__imp__sub_823F8108) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-96
	r31.s64 = ctx.r1.s64 + -96;
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// lwz r11,-19632(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -19632);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823f8148
	if (cr0.getEQ()) goto loc_823F8148;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_823F8148:
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
}

__attribute__((alias("__imp__sub_823F814C"))) PPC_WEAK_FUNC(sub_823F814C);
PPC_FUNC_IMPL(__imp__sub_823F814C) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8158"))) PPC_WEAK_FUNC(sub_823F8158);
PPC_FUNC_IMPL(__imp__sub_823F8158) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32192
	r11.s64 = -2109734912;
	// lis r10,-31987
	ctx.r10.s64 = -2096300032;
	// addi r11,r11,-32600
	r11.s64 = r11.s64 + -32600;
	// stw r11,-19632(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19632, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8170"))) PPC_WEAK_FUNC(sub_823F8170);
PPC_FUNC_IMPL(__imp__sub_823F8170) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31987
	r11.s64 = -2096300032;
	// stw r3,-19628(r11)
	PPC_STORE_U32(r11.u32 + -19628, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8180"))) PPC_WEAK_FUNC(sub_823F8180);
PPC_FUNC_IMPL(__imp__sub_823F8180) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8240f94c
	__imp__RtlInitializeCriticalSection(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F81A8"))) PPC_WEAK_FUNC(sub_823F81A8);
PPC_FUNC_IMPL(__imp__sub_823F81A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29584(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29584);
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-112
	r31.s64 = ctx.r1.s64 + -112;
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-31987
	ctx.r10.s64 = -2096300032;
	// lwz r11,-19628(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -19628);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f81e0
	if (!cr6.getEQ()) goto loc_823F81E0;
	// lis r11,-32192
	r11.s64 = -2109734912;
	// addi r11,r11,-32384
	r11.s64 = r11.s64 + -32384;
	// stw r11,-19628(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19628, r11.u32);
loc_823F81E0:
	// nop 
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r3,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r3.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823f8228
	// ERROR 823F8228
	return;
}

__attribute__((alias("__imp__sub_823F81B0"))) PPC_WEAK_FUNC(sub_823F81B0);
PPC_FUNC_IMPL(__imp__sub_823F81B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-112
	r31.s64 = ctx.r1.s64 + -112;
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-31987
	ctx.r10.s64 = -2096300032;
	// lwz r11,-19628(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -19628);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f81e0
	if (!cr6.getEQ()) goto loc_823F81E0;
	// lis r11,-32192
	r11.s64 = -2109734912;
	// addi r11,r11,-32384
	r11.s64 = r11.s64 + -32384;
	// stw r11,-19628(r10)
	PPC_STORE_U32(ctx.r10.u32 + -19628, r11.u32);
loc_823F81E0:
	// nop 
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r3,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r3.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823f8228
	goto loc_823F8228;
	// lis r11,-16384
	r11.s64 = -1073741824;
	// ori r11,r11,23
	r11.u64 = r11.u64 | 23;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// bne cr6,0x823f8220
	if (!cr6.getEQ()) goto loc_823F8220;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x8235f2b8
	sub_8235F2B8(ctx, base);
loc_823F8220:
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r3,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r3.u32);
loc_823F8228:
	// addi r1,r31,112
	ctx.r1.s64 = r31.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8208"))) PPC_WEAK_FUNC(sub_823F8208);
PPC_FUNC_IMPL(__imp__sub_823F8208) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	// lis r11,-16384
	r11.s64 = -1073741824;
	// ori r11,r11,23
	r11.u64 = r11.u64 | 23;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// bne cr6,0x823f8220
	if (!cr6.getEQ()) goto loc_823F8220;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x8235f2b8
	sub_8235F2B8(ctx, base);
loc_823F8220:
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r3,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r3.u32);
	// addi r1,r31,112
	ctx.r1.s64 = r31.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F823C"))) PPC_WEAK_FUNC(sub_823F823C);
PPC_FUNC_IMPL(__imp__sub_823F823C) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lis r10,-16384
	ctx.r10.s64 = -1073741824;
	// ori r10,r10,23
	ctx.r10.u64 = ctx.r10.u64 | 23;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8260"))) PPC_WEAK_FUNC(sub_823F8260);
PPC_FUNC_IMPL(__imp__sub_823F8260) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// stw r3,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r3.u32);
	// rlwinm. r10,r5,0,27,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r29,r7
	r29.u64 = ctx.r7.u64;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// lwz r10,180(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// mr r25,r9
	r25.u64 = ctx.r9.u64;
	// stw r11,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r11.u32);
	// lwz r10,180(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// stw r11,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, r11.u32);
	// beq 0x823f82c0
	if (cr0.getEQ()) goto loc_823F82C0;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lis r27,-16384
	r27.s64 = -1073741824;
	// ori r27,r27,143
	r27.u64 = r27.u64 | 143;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// oris r10,r10,32768
	ctx.r10.u64 = ctx.r10.u64 | 2147483648;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// b 0x823f82c4
	goto loc_823F82C4;
loc_823F82C0:
	// lwz r27,80(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_823F82C4:
	// rlwinm. r11,r5,0,30,30
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f82e4
	if (cr0.getEQ()) goto loc_823F82E4;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lis r27,-16384
	r27.s64 = -1073741824;
	// ori r27,r27,147
	r27.u64 = r27.u64 | 147;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// oris r10,r10,16384
	ctx.r10.u64 = ctx.r10.u64 | 1073741824;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
loc_823F82E4:
	// clrlwi. r11,r5,31
	r11.u64 = ctx.r5.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8304
	if (cr0.getEQ()) goto loc_823F8304;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lis r27,-16384
	r27.s64 = -1073741824;
	// ori r27,r27,145
	r27.u64 = r27.u64 | 145;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// oris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 | 536870912;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
loc_823F8304:
	// rlwinm. r11,r5,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8324
	if (cr0.getEQ()) goto loc_823F8324;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lis r27,-16384
	r27.s64 = -1073741824;
	// ori r27,r27,142
	r27.u64 = r27.u64 | 142;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// oris r10,r10,4096
	ctx.r10.u64 = ctx.r10.u64 | 268435456;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
loc_823F8324:
	// rlwinm. r11,r5,0,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8344
	if (cr0.getEQ()) goto loc_823F8344;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lis r27,-16384
	r27.s64 = -1073741824;
	// ori r27,r27,144
	r27.u64 = r27.u64 | 144;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// oris r10,r10,2048
	ctx.r10.u64 = ctx.r10.u64 | 134217728;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
loc_823F8344:
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// not r10,r10
	ctx.r10.u64 = ~ctx.r10.u64;
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwimi r9,r10,20,4,4
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 20) & 0x8000000) | (ctx.r9.u64 & 0xFFFFFFFFF7FFFFFF);
	// stw r9,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r9.u32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// not r10,r10
	ctx.r10.u64 = ~ctx.r10.u64;
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwimi r9,r10,24,3,3
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 24) & 0x10000000) | (ctx.r9.u64 & 0xFFFFFFFFEFFFFFFF);
	// stw r9,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r9.u32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// not r10,r10
	ctx.r10.u64 = ~ctx.r10.u64;
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwimi r9,r10,23,2,2
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 23) & 0x20000000) | (ctx.r9.u64 & 0xFFFFFFFFDFFFFFFF);
	// stw r9,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r9.u32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// not r10,r10
	ctx.r10.u64 = ~ctx.r10.u64;
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwimi r9,r10,25,1,1
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 25) & 0x40000000) | (ctx.r9.u64 & 0xFFFFFFFFBFFFFFFF);
	// stw r9,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r9.u32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// not r10,r10
	ctx.r10.u64 = ~ctx.r10.u64;
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwimi r9,r10,28,0,0
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 28) & 0x80000000) | (ctx.r9.u64 & 0xFFFFFFFF7FFFFFFF);
	// stw r9,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r9.u32);
	// bl 0x823f8d50
	sub_823F8D50(ctx, base);
	// rlwinm. r11,r3,0,2,2
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f83d8
	if (cr0.getEQ()) goto loc_823F83D8;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// oris r10,r10,2048
	ctx.r10.u64 = ctx.r10.u64 | 134217728;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
loc_823F83D8:
	// rlwinm. r11,r3,0,5,5
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x4000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f83f0
	if (cr0.getEQ()) goto loc_823F83F0;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// oris r10,r10,4096
	ctx.r10.u64 = ctx.r10.u64 | 268435456;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
loc_823F83F0:
	// rlwinm. r11,r3,0,3,3
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x10000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8408
	if (cr0.getEQ()) goto loc_823F8408;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// oris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 | 536870912;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
loc_823F8408:
	// rlwinm. r11,r3,0,4,4
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x8000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8420
	if (cr0.getEQ()) goto loc_823F8420;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// oris r10,r10,16384
	ctx.r10.u64 = ctx.r10.u64 | 1073741824;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
loc_823F8420:
	// rlwinm. r11,r3,0,6,6
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x2000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8438
	if (cr0.getEQ()) goto loc_823F8438;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// oris r10,r10,32768
	ctx.r10.u64 = ctx.r10.u64 | 2147483648;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
loc_823F8438:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// li r30,1
	r30.s64 = 1;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x823f848c
	if (cr6.getLT()) goto loc_823F848C;
	// beq cr6,0x823f847c
	if (cr6.getEQ()) goto loc_823F847C;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// blt cr6,0x823f846c
	if (cr6.getLT()) goto loc_823F846C;
	// bne cr6,0x823f849c
	if (!cr6.getEQ()) goto loc_823F849C;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwimi r10,r30,30,0,1
	ctx.r10.u64 = (__builtin_rotateleft32(r30.u32, 30) & 0xC0000000) | (ctx.r10.u64 & 0xFFFFFFFF3FFFFFFF);
	// b 0x823f8498
	goto loc_823F8498;
loc_823F846C:
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwimi r10,r30,31,0,1
	ctx.r10.u64 = (__builtin_rotateleft32(r30.u32, 31) & 0xC0000000) | (ctx.r10.u64 & 0xFFFFFFFF3FFFFFFF);
	// b 0x823f8498
	goto loc_823F8498;
loc_823F847C:
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// oris r10,r10,49152
	ctx.r10.u64 = ctx.r10.u64 | 3221225472;
	// b 0x823f8498
	goto loc_823F8498;
loc_823F848C:
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r10,r10,2
	ctx.r10.u64 = ctx.r10.u32 & 0x3FFFFFFF;
loc_823F8498:
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_823F849C:
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwimi r10,r30,27,2,4
	ctx.r10.u64 = (__builtin_rotateleft32(r30.u32, 27) & 0x38000000) | (ctx.r10.u64 & 0xFFFFFFFFC7FFFFFF);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwimi r10,r28,15,5,16
	ctx.r10.u64 = (__builtin_rotateleft32(r28.u32, 15) & 0x7FF8000) | (ctx.r10.u64 & 0xFFFFFFFFF8007FFF);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,32(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// oris r10,r10,32768
	ctx.r10.u64 = ctx.r10.u64 | 2147483648;
	// stw r10,32(r11)
	PPC_STORE_U32(r11.u32 + 32, ctx.r10.u32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,32(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// beq cr6,0x823f8520
	if (cr6.getEQ()) goto loc_823F8520;
	// rlwinm r10,r10,0,5,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF87FFFFFF;
	// stw r10,32(r11)
	PPC_STORE_U32(r11.u32 + 32, ctx.r10.u32);
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// stfs f0,16(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,96(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 96);
	// oris r10,r10,32768
	ctx.r10.u64 = ctx.r10.u64 | 2147483648;
	// stw r10,96(r11)
	PPC_STORE_U32(r11.u32 + 96, ctx.r10.u32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,96(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 96);
	// rlwinm r10,r10,0,5,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF87FFFFFF;
	// stw r10,96(r11)
	PPC_STORE_U32(r11.u32 + 96, ctx.r10.u32);
	// lfs f0,0(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 0);
	f0.f64 = double(temp.f32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// stfs f0,80(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 80, temp.u32);
	// b 0x823f8560
	goto loc_823F8560;
loc_823F8520:
	// rlwimi r10,r30,27,1,4
	ctx.r10.u64 = (__builtin_rotateleft32(r30.u32, 27) & 0x78000000) | (ctx.r10.u64 & 0xFFFFFFFF87FFFFFF);
	// stw r10,32(r11)
	PPC_STORE_U32(r11.u32 + 32, ctx.r10.u32);
	// lfd f0,0(r29)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r29.u32 + 0);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// stfd f0,16(r11)
	PPC_STORE_U64(r11.u32 + 16, f0.u64);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,96(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 96);
	// oris r10,r10,32768
	ctx.r10.u64 = ctx.r10.u64 | 2147483648;
	// stw r10,96(r11)
	PPC_STORE_U32(r11.u32 + 96, ctx.r10.u32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,96(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 96);
	// rlwimi r10,r30,27,1,4
	ctx.r10.u64 = (__builtin_rotateleft32(r30.u32, 27) & 0x78000000) | (ctx.r10.u64 & 0xFFFFFFFF87FFFFFF);
	// stw r10,96(r11)
	PPC_STORE_U32(r11.u32 + 96, ctx.r10.u32);
	// lfd f0,0(r26)
	f0.u64 = PPC_LOAD_U64(r26.u32 + 0);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// stfd f0,80(r11)
	PPC_STORE_U64(r11.u32 + 80, f0.u64);
loc_823F8560:
	// bl 0x823f1318
	sub_823F1318(ctx, base);
	// addi r6,r1,180
	ctx.r6.s64 = ctx.r1.s64 + 180;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x824086b8
	sub_824086B8(ctx, base);
	// lwz r10,180(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// rlwinm. r11,r11,0,4,4
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8594
	if (cr0.getEQ()) goto loc_823F8594;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,0,25,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFF7F;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823F8594:
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// rlwinm. r11,r11,0,3,3
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f85ac
	if (cr0.getEQ()) goto loc_823F85AC;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,0,28,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823F85AC:
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// rlwinm. r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f85c4
	if (cr0.getEQ()) goto loc_823F85C4;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,0,26,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFBF;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823F85C4:
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// rlwinm. r11,r11,0,1,1
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f85dc
	if (cr0.getEQ()) goto loc_823F85DC;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,0,27,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFDF;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823F85DC:
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f85f4
	if (cr0.getEQ()) goto loc_823F85F4;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,0,29,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823F85F4:
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// rlwinm r11,r11,2,30,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0x3;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x823f8638
	if (cr6.getLT()) goto loc_823F8638;
	// beq cr6,0x823f862c
	if (cr6.getEQ()) goto loc_823F862C;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// blt cr6,0x823f8620
	if (cr6.getLT()) goto loc_823F8620;
	// bne cr6,0x823f8644
	if (!cr6.getEQ()) goto loc_823F8644;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwimi r11,r30,0,30,31
	r11.u64 = (__builtin_rotateleft32(r30.u32, 0) & 0x3) | (r11.u64 & 0xFFFFFFFFFFFFFFFC);
	// b 0x823f8640
	goto loc_823F8640;
loc_823F8620:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwimi r11,r30,1,30,31
	r11.u64 = (__builtin_rotateleft32(r30.u32, 1) & 0x3) | (r11.u64 & 0xFFFFFFFFFFFFFFFC);
	// b 0x823f8640
	goto loc_823F8640;
loc_823F862C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// ori r11,r11,3
	r11.u64 = r11.u64 | 3;
	// b 0x823f8640
	goto loc_823F8640;
loc_823F8638:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,0,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFC;
loc_823F8640:
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823F8644:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x823f8658
	if (cr6.getEQ()) goto loc_823F8658;
	// lfs f0,80(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 80);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 0, temp.u32);
	// b 0x823f8660
	goto loc_823F8660;
loc_823F8658:
	// lfd f0,80(r10)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r10.u32 + 80);
	// stfd f0,0(r26)
	PPC_STORE_U64(r26.u32 + 0, f0.u64);
loc_823F8660:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_823F8668"))) PPC_WEAK_FUNC(sub_823F8668);
PPC_FUNC_IMPL(__imp__sub_823F8668) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// clrlwi r28,r29,27
	r28.u64 = r29.u32 & 0x1F;
	// rlwinm. r11,r29,0,28,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f86a8
	if (cr0.getEQ()) goto loc_823F86A8;
	// rlwinm. r11,r27,0,24,24
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f86a8
	if (cr0.getEQ()) goto loc_823F86A8;
	// lis r3,8192
	ctx.r3.s64 = 536870912;
	// bl 0x823f8d84
	sub_823F8D84(ctx, base);
	// rlwinm r28,r28,0,29,27
	r28.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// b 0x823f888c
	goto loc_823F888C;
loc_823F86A8:
	// rlwinm. r11,r29,0,29,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f86c8
	if (cr0.getEQ()) goto loc_823F86C8;
	// rlwinm. r11,r27,0,27,27
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f86c8
	if (cr0.getEQ()) goto loc_823F86C8;
	// lis r3,1024
	ctx.r3.s64 = 67108864;
	// bl 0x823f8d84
	sub_823F8D84(ctx, base);
	// rlwinm r28,r28,0,30,28
	r28.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// b 0x823f888c
	goto loc_823F888C;
loc_823F86C8:
	// clrlwi. r11,r29,31
	r11.u64 = r29.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8794
	if (cr0.getEQ()) goto loc_823F8794;
	// rlwinm. r11,r27,0,25,25
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8794
	if (cr0.getEQ()) goto loc_823F8794;
	// lis r3,4096
	ctx.r3.s64 = 268435456;
	// bl 0x823f8d84
	sub_823F8D84(ctx, base);
	// clrlwi r11,r27,30
	r11.u64 = r27.u32 & 0x3;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x823f875c
	if (cr6.getLT()) goto loc_823F875C;
	// beq cr6,0x823f873c
	if (cr6.getEQ()) goto loc_823F873C;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// blt cr6,0x823f871c
	if (cr6.getLT()) goto loc_823F871C;
	// bne cr6,0x823f878c
	if (!cr6.getEQ()) goto loc_823F878C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f13,0(r30)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// lfd f0,2752(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x823f877c
	if (!cr6.getGT()) goto loc_823F877C;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lfd f0,-19432(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + -19432);
	// b 0x823f8788
	goto loc_823F8788;
loc_823F871C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f13,0(r30)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// lfd f0,2752(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bgt cr6,0x823f8770
	if (cr6.getGT()) goto loc_823F8770;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lfd f0,-19432(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + -19432);
	// b 0x823f8784
	goto loc_823F8784;
loc_823F873C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f13,0(r30)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// lfd f0,2752(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// lfd f0,-19432(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + -19432);
	// bgt cr6,0x823f8788
	if (cr6.getGT()) goto loc_823F8788;
	// b 0x823f8784
	goto loc_823F8784;
loc_823F875C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f13,0(r30)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// lfd f0,2752(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x823f877c
	if (!cr6.getGT()) goto loc_823F877C;
loc_823F8770:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lfd f0,-19448(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + -19448);
	// b 0x823f8788
	goto loc_823F8788;
loc_823F877C:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lfd f0,-19448(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + -19448);
loc_823F8784:
	// fneg f0,f0
	ctx.fpscr.disableFlushMode();
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_823F8788:
	// stfd f0,0(r30)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(r30.u32 + 0, f0.u64);
loc_823F878C:
	// rlwinm r28,r28,0,0,30
	r28.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0xFFFFFFFE;
	// b 0x823f888c
	goto loc_823F888C;
loc_823F8794:
	// rlwinm. r11,r29,0,30,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f888c
	if (cr0.getEQ()) goto loc_823F888C;
	// rlwinm. r11,r27,0,26,26
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f888c
	if (cr0.getEQ()) goto loc_823F888C;
	// rlwinm. r11,r29,0,27,27
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r31,0
	r31.s64 = 0;
	// beq 0x823f87b4
	if (cr0.getEQ()) goto loc_823F87B4;
	// li r31,1
	r31.s64 = 1;
loc_823F87B4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f1,0(r30)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// lfd f31,2752(r11)
	f31.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// beq cr6,0x823f8874
	if (cr6.getEQ()) goto loc_823F8874;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x823f7808
	sub_823F7808(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stfd f1,80(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f1.u64);
	// addi r11,r11,-1536
	r11.s64 = r11.s64 + -1536;
	// cmpwi cr6,r11,-1074
	cr6.compare<int32_t>(r11.s32, -1074, xer);
	// bge cr6,0x823f87f0
	if (!cr6.getLT()) goto loc_823F87F0;
	// fmul f0,f1,f31
	f0.f64 = ctx.f1.f64 * f31.f64;
	// li r31,1
	r31.s64 = 1;
	// b 0x823f886c
	goto loc_823F886C;
loc_823F87F0:
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// li r8,1
	ctx.r8.s64 = 1;
	// blt cr6,0x823f8800
	if (cr6.getLT()) goto loc_823F8800;
	// li r8,0
	ctx.r8.s64 = 0;
loc_823F8800:
	// lhz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,-1021
	cr6.compare<int32_t>(r11.s32, -1021, xer);
	// clrlwi r10,r10,28
	ctx.r10.u64 = ctx.r10.u32 & 0xF;
	// ori r10,r10,16
	ctx.r10.u64 = ctx.r10.u64 | 16;
	// sth r10,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, ctx.r10.u16);
	// bge cr6,0x823f885c
	if (!cr6.getLT()) goto loc_823F885C;
	// subfic r9,r11,-1021
	xer.ca = r11.u32 <= 4294966275;
	ctx.r9.s64 = -1021 - r11.s64;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
loc_823F8824:
	// clrlwi. r7,r11,31
	ctx.r7.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq 0x823f8838
	if (cr0.getEQ()) goto loc_823F8838;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bne cr6,0x823f8838
	if (!cr6.getEQ()) goto loc_823F8838;
	// li r31,1
	r31.s64 = 1;
loc_823F8838:
	// clrlwi. r7,r10,31
	ctx.r7.u64 = ctx.r10.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// rlwinm r11,r11,31,1,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// beq 0x823f8848
	if (cr0.getEQ()) goto loc_823F8848;
	// oris r11,r11,32768
	r11.u64 = r11.u64 | 2147483648;
loc_823F8848:
	// addic. r9,r9,-1
	xer.ca = ctx.r9.u32 > 0;
	ctx.r9.s64 = ctx.r9.s64 + -1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// bne 0x823f8824
	if (!cr0.getEQ()) goto loc_823F8824;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
loc_823F885C:
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x823f886c
	if (cr6.getEQ()) goto loc_823F886C;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_823F886C:
	// stfd f0,0(r30)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(r30.u32 + 0, f0.u64);
	// b 0x823f8878
	goto loc_823F8878;
loc_823F8874:
	// li r31,1
	r31.s64 = 1;
loc_823F8878:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x823f8888
	if (cr6.getEQ()) goto loc_823F8888;
	// lis r3,2048
	ctx.r3.s64 = 134217728;
	// bl 0x823f8d84
	sub_823F8D84(ctx, base);
loc_823F8888:
	// rlwinm r28,r28,0,31,29
	r28.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
loc_823F888C:
	// rlwinm. r11,r29,0,27,27
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f88a8
	if (cr0.getEQ()) goto loc_823F88A8;
	// rlwinm. r11,r27,0,28,28
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f88a8
	if (cr0.getEQ()) goto loc_823F88A8;
	// lis r3,512
	ctx.r3.s64 = 33554432;
	// bl 0x823f8d84
	sub_823F8D84(ctx, base);
	// rlwinm r28,r28,0,28,26
	r28.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
loc_823F88A8:
	// cntlzw r11,r28
	r11.u64 = r28.u32 == 0 ? 32 : __builtin_clz(r28.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_823F88C0"))) PPC_WEAK_FUNC(sub_823F88C0);
PPC_FUNC_IMPL(__imp__sub_823F88C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x823f88ec
	if (cr6.getEQ()) goto loc_823F88EC;
	// ble cr6,0x823f88f8
	if (!cr6.getGT()) goto loc_823F88F8;
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bgt cr6,0x823f88f8
	if (cr6.getGT()) goto loc_823F88F8;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r11,34
	r11.s64 = 34;
	// b 0x823f88f4
	goto loc_823F88F4;
loc_823F88EC:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r11,33
	r11.s64 = 33;
loc_823F88F4:
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_823F88F8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8908"))) PPC_WEAK_FUNC(sub_823F8908);
PPC_FUNC_IMPL(__imp__sub_823F8908) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	// rlwinm. r11,r3,0,26,26
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8918
	if (cr0.getEQ()) goto loc_823F8918;
	// li r3,5
	ctx.r3.s64 = 5;
	// blr 
	return;
loc_823F8918:
	// rlwinm. r11,r3,0,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8928
	if (cr0.getEQ()) goto loc_823F8928;
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
loc_823F8928:
	// rlwinm. r11,r3,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8938
	if (cr0.getEQ()) goto loc_823F8938;
	// li r3,2
	ctx.r3.s64 = 2;
	// blr 
	return;
loc_823F8938:
	// clrlwi. r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8948
	if (cr0.getEQ()) goto loc_823F8948;
	// li r3,3
	ctx.r3.s64 = 3;
	// blr 
	return;
loc_823F8948:
	// rlwinm r3,r3,1,29,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0x4;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8950"))) PPC_WEAK_FUNC(sub_823F8950);
PPC_FUNC_IMPL(__imp__sub_823F8950) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// fmr f31,f3
	f31.f64 = ctx.f3.f64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stfd f1,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.f1.u64);
	// addi r11,r11,-18976
	r11.s64 = r11.s64 + -18976;
	// stfd f2,184(r1)
	PPC_STORE_U64(ctx.r1.u32 + 184, ctx.f2.u64);
	// stfd f31,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, f31.u64);
	// mr r3,r8
	ctx.r3.u64 = ctx.r8.u64;
	// li r9,0
	ctx.r9.s64 = 0;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823F898C:
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplw cr6,r8,r4
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r4.u32, xer);
	// beq cr6,0x823f8a1c
	if (cr6.getEQ()) goto loc_823F8A1C;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// addi r8,r11,232
	ctx.r8.s64 = r11.s64 + 232;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmpw cr6,r10,r8
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r8.s32, xer);
	// blt cr6,0x823f898c
	if (cr6.getLT()) goto loc_823F898C;
	// li r11,0
	r11.s64 = 0;
loc_823F89B0:
	// lis r4,-16377
	ctx.r4.s64 = -1073283072;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// ori r4,r4,65279
	ctx.r4.u64 = ctx.r4.u64 | 65279;
	// beq cr6,0x823f8a2c
	if (cr6.getEQ()) goto loc_823F8A2C;
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// lwz r11,184(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// lwz r11,188(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// lwz r11,192(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// lwz r11,196(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82345d68
	sub_82345D68(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f8a14
	if (!cr0.getEQ()) goto loc_823F8A14;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f88c0
	sub_823F88C0(ctx, base);
loc_823F8A14:
	// lfd f1,104(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// b 0x823f8a3c
	goto loc_823F8A3C;
loc_823F8A1C:
	// rlwinm r10,r9,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// b 0x823f89b0
	goto loc_823F89B0;
loc_823F8A2C:
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f88c0
	sub_823F88C0(ctx, base);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
loc_823F8A3C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8A58"))) PPC_WEAK_FUNC(sub_823F8A58);
PPC_FUNC_IMPL(__imp__sub_823F8A58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// lwz r11,-17316(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -17316);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823f8aa4
	if (!cr6.getEQ()) goto loc_823F8AA4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// mr r8,r31
	ctx.r8.u64 = r31.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// lfd f2,2752(r11)
	ctx.f2.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// bl 0x823f8950
	sub_823F8950(ctx, base);
	// b 0x823f8ac8
	goto loc_823F8AC8;
loc_823F8AA4:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,33
	ctx.r10.s64 = 33;
	// lis r4,-16377
	ctx.r4.s64 = -1073283072;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// ori r4,r4,65279
	ctx.r4.u64 = ctx.r4.u64 | 65279;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
loc_823F8AC8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8AE0"))) PPC_WEAK_FUNC(sub_823F8AE0);
PPC_FUNC_IMPL(__imp__sub_823F8AE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// fadd f31,f1,f2
	f31.f64 = ctx.f1.f64 + ctx.f2.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r31,r6
	r31.u64 = ctx.r6.u64;
	// lwz r11,-17316(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -17316);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823f8b24
	if (!cr6.getEQ()) goto loc_823F8B24;
	// mr r8,r31
	ctx.r8.u64 = r31.u64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823f8950
	sub_823F8950(ctx, base);
	// b 0x823f8b48
	goto loc_823F8B48;
loc_823F8B24:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,33
	ctx.r10.s64 = 33;
	// lis r4,-16377
	ctx.r4.s64 = -1073283072;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// ori r4,r4,65279
	ctx.r4.u64 = ctx.r4.u64 | 65279;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
loc_823F8B48:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8B60"))) PPC_WEAK_FUNC(sub_823F8B60);
PPC_FUNC_IMPL(__imp__sub_823F8B60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// stfd f31,272(r1)
	PPC_STORE_U64(ctx.r1.u32 + 272, f31.u64);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// stfd f2,280(r1)
	PPC_STORE_U64(ctx.r1.u32 + 280, ctx.f2.u64);
	// addi r4,r1,280
	ctx.r4.s64 = ctx.r1.s64 + 280;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r30,292(r1)
	PPC_STORE_U32(ctx.r1.u32 + 292, r30.u32);
	// bl 0x823f8668
	sub_823F8668(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f8bd0
	if (!cr0.getEQ()) goto loc_823F8BD0;
	// lwz r11,144(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r8,r1,280
	ctx.r8.s64 = ctx.r1.s64 + 280;
	// clrlwi r11,r11,1
	r11.u64 = r11.u32 & 0x7FFFFFFF;
	// addi r7,r1,272
	ctx.r7.s64 = ctx.r1.s64 + 272;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,292
	ctx.r4.s64 = ctx.r1.s64 + 292;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// bl 0x823f8260
	sub_823F8260(ctx, base);
	// lwz r30,292(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 292);
loc_823F8BD0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f8908
	sub_823F8908(ctx, base);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lwz r11,-17316(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -17316);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823f8c10
	if (!cr6.getEQ()) goto loc_823F8C10;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x823f8c10
	if (cr6.getEQ()) goto loc_823F8C10;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f3,280(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f3.u64 = PPC_LOAD_U64(ctx.r1.u32 + 280);
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lfd f2,2752(r11)
	ctx.f2.u64 = PPC_LOAD_U64(r11.u32 + 2752);
	// bl 0x823f8950
	sub_823F8950(ctx, base);
	// b 0x823f8c28
	goto loc_823F8C28;
loc_823F8C10:
	// bl 0x823f88c0
	sub_823F88C0(ctx, base);
	// lis r4,-16377
	ctx.r4.s64 = -1073283072;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// ori r4,r4,65279
	ctx.r4.u64 = ctx.r4.u64 | 65279;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// lfd f1,280(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r1.u32 + 280);
loc_823F8C28:
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F8C38"))) PPC_WEAK_FUNC(sub_823F8C38);
PPC_FUNC_IMPL(__imp__sub_823F8C38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f30{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f30,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f30.u64);
	// stfd f31,-40(r1)
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r8
	r30.u64 = ctx.r8.u64;
	// fmr f30,f1
	f30.f64 = ctx.f1.f64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// stfd f30,272(r1)
	PPC_STORE_U64(ctx.r1.u32 + 272, f30.u64);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// stfd f3,288(r1)
	PPC_STORE_U64(ctx.r1.u32 + 288, ctx.f3.u64);
	// addi r4,r1,288
	ctx.r4.s64 = ctx.r1.s64 + 288;
	// fmr f31,f2
	f31.f64 = ctx.f2.f64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r30,300(r1)
	PPC_STORE_U32(ctx.r1.u32 + 300, r30.u32);
	// bl 0x823f8668
	sub_823F8668(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f8cb8
	if (!cr0.getEQ()) goto loc_823F8CB8;
	// lwz r11,144(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r8,r1,288
	ctx.r8.s64 = ctx.r1.s64 + 288;
	// stfd f31,128(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 128, f31.u64);
	// clrlwi r11,r11,5
	r11.u64 = r11.u32 & 0x7FFFFFF;
	// addi r7,r1,272
	ctx.r7.s64 = ctx.r1.s64 + 272;
	// oris r11,r11,34816
	r11.u64 = r11.u64 | 2281701376;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,300
	ctx.r4.s64 = ctx.r1.s64 + 300;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// bl 0x823f8260
	sub_823F8260(ctx, base);
	// lwz r30,300(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 300);
loc_823F8CB8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f8908
	sub_823F8908(ctx, base);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lwz r11,-17316(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -17316);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823f8cf4
	if (!cr6.getEQ()) goto loc_823F8CF4;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x823f8cf4
	if (cr6.getEQ()) goto loc_823F8CF4;
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// lfd f3,288(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f3.u64 = PPC_LOAD_U64(ctx.r1.u32 + 288);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x823f8950
	sub_823F8950(ctx, base);
	// b 0x823f8d0c
	goto loc_823F8D0C;
loc_823F8CF4:
	// bl 0x823f88c0
	sub_823F88C0(ctx, base);
	// lis r4,-16377
	ctx.r4.s64 = -1073283072;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// ori r4,r4,65279
	ctx.r4.u64 = ctx.r4.u64 | 65279;
	// bl 0x823f8d20
	sub_823F8D20(ctx, base);
	// lfd f1,288(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r1.u32 + 288);
loc_823F8D0C:
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// lfd f30,-48(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823F8D20"))) PPC_WEAK_FUNC(sub_823F8D20);
PPC_FUNC_IMPL(__imp__sub_823F8D20) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r0{};
	PPCRegister f0{};
	// mffs f0
	r0.u64 = ctx.fpscr.loadFromHost();
	// stfd f0,-8(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -8, f0.u64);
	// xori r5,r3,248
	ctx.r5.u64 = ctx.r3.u64 ^ 248;
	// lwz r3,-4(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + -4);
	// and r5,r5,r4
	ctx.r5.u64 = ctx.r5.u64 & ctx.r4.u64;
	// andc r6,r3,r4
	ctx.r6.u64 = ctx.r3.u64 & ~ctx.r4.u64;
	// or r6,r5,r6
	ctx.r6.u64 = ctx.r5.u64 | ctx.r6.u64;
	// stw r6,-4(r1)
	PPC_STORE_U32(ctx.r1.u32 + -4, ctx.r6.u32);
	// lfd f0,-8(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// xori r3,r3,248
	ctx.r3.u64 = ctx.r3.u64 ^ 248;
	// mtfsf 255,f0
	ctx.fpscr.storeFromGuest(f0.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8D50"))) PPC_WEAK_FUNC(sub_823F8D50);
PPC_FUNC_IMPL(__imp__sub_823F8D50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r0{};
	PPCRegister f0{};
	// mffs f0
	r0.u64 = ctx.fpscr.loadFromHost();
	// stfd f0,-8(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -8, f0.u64);
	// lwz r3,-4(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + -4);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8D60"))) PPC_WEAK_FUNC(sub_823F8D60);
PPC_FUNC_IMPL(__imp__sub_823F8D60) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r0{};
	PPCRegister f0{};
	// mffs f0
	r0.u64 = ctx.fpscr.loadFromHost();
	// li r3,4
	ctx.r3.s64 = 4;
	// stfd f0,-8(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -8, f0.u64);
	// lwz r5,-4(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + -4);
	// and r5,r3,r5
	ctx.r5.u64 = ctx.r3.u64 & ctx.r5.u64;
	// stw r5,-4(r1)
	PPC_STORE_U32(ctx.r1.u32 + -4, ctx.r5.u32);
	// lfd f1,-8(r1)
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// mtfsf 255,f1
	ctx.fpscr.storeFromGuest(ctx.f1.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8D84"))) PPC_WEAK_FUNC(sub_823F8D84);
PPC_FUNC_IMPL(__imp__sub_823F8D84) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r0{};
	PPCRegister f0{};
	// mffs f0
	r0.u64 = ctx.fpscr.loadFromHost();
	// stfd f0,-8(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -8, f0.u64);
	// lwz r5,-4(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + -4);
	// or r5,r3,r5
	ctx.r5.u64 = ctx.r3.u64 | ctx.r5.u64;
	// stw r5,-4(r1)
	PPC_STORE_U32(ctx.r1.u32 + -4, ctx.r5.u32);
	// lfd f1,-8(r1)
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// mtfsf 255,f1
	ctx.fpscr.storeFromGuest(ctx.f1.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8DA4"))) PPC_WEAK_FUNC(sub_823F8DA4);
PPC_FUNC_IMPL(__imp__sub_823F8DA4) {
	PPC_FUNC_PROLOGUE();
	// stw r3,-4(r1)
	PPC_STORE_U32(ctx.r1.u32 + -4, ctx.r3.u32);
	// lfd f1,-8(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// mtfsf 255,f1
	ctx.fpscr.storeFromGuest(ctx.f1.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8DB4"))) PPC_WEAK_FUNC(sub_823F8DB4);
PPC_FUNC_IMPL(__imp__sub_823F8DB4) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r0{};
	PPCRegister f0{};
	// mffs f0
	r0.u64 = ctx.fpscr.loadFromHost();
	// stfd f0,-8(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -8, f0.u64);
	// lwz r3,-4(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + -4);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F8DC8"))) PPC_WEAK_FUNC(sub_823F8DC8);
PPC_FUNC_IMPL(__imp__sub_823F8DC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
	// li r27,0
	r27.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// mr r30,r27
	r30.u64 = r27.u64;
	// bl 0x823f8e80
	sub_823F8E80(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// rlwinm. r11,r31,0,29,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f8e24
	if (cr0.getEQ()) goto loc_823F8E24;
	// li r30,512
	r30.s64 = 512;
	// stw r27,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r27.u32);
	// stw r27,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r27.u32);
	// b 0x823f8e58
	goto loc_823F8E58;
loc_823F8E24:
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82400300
	sub_82400300(ctx, base);
	// rlwinm. r11,r31,0,30,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f8e40
	if (!cr0.getEQ()) goto loc_823F8E40;
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x823f8e44
	if (!cr6.getEQ()) goto loc_823F8E44;
loc_823F8E40:
	// li r30,128
	r30.s64 = 128;
loc_823F8E44:
	// clrlwi. r11,r31,31
	r11.u64 = r31.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f8e54
	if (!cr0.getEQ()) goto loc_823F8E54;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x823f8e58
	if (!cr6.getEQ()) goto loc_823F8E58;
loc_823F8E54:
	// ori r30,r30,256
	r30.u64 = r30.u64 | 256;
loc_823F8E58:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// ld r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// subf r11,r28,r11
	r11.s64 = r11.s64 - r28.s64;
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// std r10,16(r29)
	PPC_STORE_U64(r29.u32 + 16, ctx.r10.u64);
	// stw r11,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_823F8E80"))) PPC_WEAK_FUNC(sub_823F8E80);
PPC_FUNC_IMPL(__imp__sub_823F8E80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed10c
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r21,0
	r21.s64 = 0;
	// mr r19,r3
	r19.u64 = ctx.r3.u64;
	// mr r23,r6
	r23.u64 = ctx.r6.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r18,r21
	r18.u64 = r21.u64;
	// li r27,1
	r27.s64 = 1;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// mr r30,r21
	r30.u64 = r21.u64;
	// mr r26,r21
	r26.u64 = r21.u64;
	// mr r28,r21
	r28.u64 = r21.u64;
	// mr r29,r21
	r29.u64 = r21.u64;
	// mr r31,r21
	r31.u64 = r21.u64;
	// mr r11,r21
	r11.u64 = r21.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x823f8f00
	if (!cr6.getEQ()) goto loc_823F8F00;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x823f97f8
	goto loc_823F97F8;
loc_823F8F00:
	// mr r8,r5
	ctx.r8.u64 = ctx.r5.u64;
loc_823F8F04:
	// lbz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpwi cr6,r10,32
	cr6.compare<int32_t>(ctx.r10.s32, 32, xer);
	// beq cr6,0x823f8f2c
	if (cr6.getEQ()) goto loc_823F8F2C;
	// cmpwi cr6,r10,9
	cr6.compare<int32_t>(ctx.r10.s32, 9, xer);
	// beq cr6,0x823f8f2c
	if (cr6.getEQ()) goto loc_823F8F2C;
	// cmpwi cr6,r10,10
	cr6.compare<int32_t>(ctx.r10.s32, 10, xer);
	// beq cr6,0x823f8f2c
	if (cr6.getEQ()) goto loc_823F8F2C;
	// cmpwi cr6,r10,13
	cr6.compare<int32_t>(ctx.r10.s32, 13, xer);
	// bne cr6,0x823f8f34
	if (!cr6.getEQ()) goto loc_823F8F34;
loc_823F8F2C:
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// b 0x823f8f04
	goto loc_823F8F04;
loc_823F8F34:
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// lis r7,0
	ctx.r7.s64 = 0;
	// ori r20,r7,32768
	r20.u64 = ctx.r7.u64 | 32768;
	// lwz r7,-18664(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18664);
loc_823F8F44:
	// lbz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// cmplwi cr6,r11,11
	cr6.compare<uint32_t>(r11.u32, 11, xer);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// bgt cr6,0x823f92bc
	if (cr6.getGT()) goto loc_823F92BC;
	// lis r12,-32249
	r12.s64 = -2113470464;
	// addi r12,r12,11672
	r12.s64 = r12.s64 + 11672;
	// lbzx r0,r12,r11
	r0.u64 = PPC_LOAD_U8(r12.u32 + r11.u32);
	// rlwinm r0,r0,2,0,29
	r0.u64 = __builtin_rotateleft64(r0.u32 | (r0.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r12,-32192
	r12.s64 = -2109734912;
	// addi r12,r12,-28804
	r12.s64 = r12.s64 + -28804;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_823F8F7C;
	case 1:
		goto loc_823F8FF0;
	case 2:
		goto loc_823F906C;
	case 3:
		goto loc_823F90E8;
	case 4:
		goto loc_823F9158;
	case 5:
		goto loc_823F91CC;
	case 6:
		goto loc_823F91EC;
	case 7:
		goto loc_823F9270;
	case 8:
		goto loc_823F9234;
	case 9:
		goto loc_823F92C8;
	case 10:
		goto loc_823F92BC;
	case 11:
		goto loc_823F9288;
	default:
		__builtin_unreachable();
	}
loc_823F8F7C:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// cmpwi cr6,r11,49
	cr6.compare<int32_t>(r11.s32, 49, xer);
	// blt cr6,0x823f8f9c
	if (cr6.getLT()) goto loc_823F8F9C;
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// bgt cr6,0x823f8f9c
	if (cr6.getGT()) goto loc_823F8F9C;
loc_823F8F90:
	// li r11,3
	r11.s64 = 3;
loc_823F8F94:
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// b 0x823f8f44
	goto loc_823F8F44;
loc_823F8F9C:
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bne cr6,0x823f8fb8
	if (!cr6.getEQ()) goto loc_823F8FB8;
loc_823F8FB0:
	// li r11,5
	r11.s64 = 5;
	// b 0x823f8f44
	goto loc_823F8F44;
loc_823F8FB8:
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x823f8fe4
	if (cr6.getEQ()) goto loc_823F8FE4;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x823f8fd8
	if (cr6.getEQ()) goto loc_823F8FD8;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// bne cr6,0x823f9268
	if (!cr6.getEQ()) goto loc_823F9268;
loc_823F8FD0:
	// li r11,1
	r11.s64 = 1;
	// b 0x823f8f44
	goto loc_823F8F44;
loc_823F8FD8:
	// li r11,2
	r11.s64 = 2;
	// mr r18,r20
	r18.u64 = r20.u64;
	// b 0x823f8f44
	goto loc_823F8F44;
loc_823F8FE4:
	// li r11,2
	r11.s64 = 2;
	// mr r18,r21
	r18.u64 = r21.u64;
	// b 0x823f8f44
	goto loc_823F8F44;
loc_823F8FF0:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// li r30,1
	r30.s64 = 1;
	// cmpwi cr6,r11,49
	cr6.compare<int32_t>(r11.s32, 49, xer);
	// blt cr6,0x823f9008
	if (cr6.getLT()) goto loc_823F9008;
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// ble cr6,0x823f8f90
	if (!cr6.getGT()) goto loc_823F8F90;
loc_823F9008:
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bne cr6,0x823f9024
	if (!cr6.getEQ()) goto loc_823F9024;
loc_823F901C:
	// li r11,4
	r11.s64 = 4;
	// b 0x823f8f44
	goto loc_823F8F44;
loc_823F9024:
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x823f9060
	if (cr6.getEQ()) goto loc_823F9060;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x823f9060
	if (cr6.getEQ()) goto loc_823F9060;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// beq cr6,0x823f8fd0
	if (cr6.getEQ()) goto loc_823F8FD0;
loc_823F903C:
	// cmpwi cr6,r11,67
	cr6.compare<int32_t>(r11.s32, 67, xer);
	// ble cr6,0x823f9268
	if (!cr6.getGT()) goto loc_823F9268;
	// cmpwi cr6,r11,69
	cr6.compare<int32_t>(r11.s32, 69, xer);
	// ble cr6,0x823f9058
	if (!cr6.getGT()) goto loc_823F9058;
	// addi r11,r11,-100
	r11.s64 = r11.s64 + -100;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bgt cr6,0x823f9268
	if (cr6.getGT()) goto loc_823F9268;
loc_823F9058:
	// li r11,6
	r11.s64 = 6;
	// b 0x823f8f44
	goto loc_823F8F44;
loc_823F9060:
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// li r11,11
	r11.s64 = 11;
	// b 0x823f8f44
	goto loc_823F8F44;
loc_823F906C:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// cmpwi cr6,r11,49
	cr6.compare<int32_t>(r11.s32, 49, xer);
	// blt cr6,0x823f9080
	if (cr6.getLT()) goto loc_823F9080;
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// ble cr6,0x823f8f90
	if (!cr6.getGT()) goto loc_823F8F90;
loc_823F9080:
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x823f8fb0
	if (cr6.getEQ()) goto loc_823F8FB0;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// beq cr6,0x823f8fd0
	if (cr6.getEQ()) goto loc_823F8FD0;
loc_823F909C:
	// mr r8,r5
	ctx.r8.u64 = ctx.r5.u64;
loc_823F90A0:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// stw r8,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r8.u32);
	// beq cr6,0x823f9794
	if (cr6.getEQ()) goto loc_823F9794;
	// cmplwi cr6,r6,24
	cr6.compare<uint32_t>(ctx.r6.u32, 24, xer);
	// ble cr6,0x823f90d8
	if (!cr6.getGT()) goto loc_823F90D8;
	// lbz r11,151(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 151);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// blt cr6,0x823f90cc
	if (cr6.getLT()) goto loc_823F90CC;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stb r11,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, r11.u8);
loc_823F90CC:
	// li r6,24
	ctx.r6.s64 = 24;
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_823F90D8:
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x823f9780
	if (cr6.getEQ()) goto loc_823F9780;
	// addi r11,r3,-1
	r11.s64 = ctx.r3.s64 + -1;
	// b 0x823f9344
	goto loc_823F9344;
loc_823F90E8:
	// li r30,1
	r30.s64 = 1;
	// b 0x823f9120
	goto loc_823F9120;
loc_823F90F0:
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// bgt cr6,0x823f912c
	if (cr6.getGT()) goto loc_823F912C;
	// cmplwi cr6,r6,25
	cr6.compare<uint32_t>(ctx.r6.u32, 25, xer);
	// bge cr6,0x823f9114
	if (!cr6.getLT()) goto loc_823F9114;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// stb r11,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, r11.u8);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// b 0x823f9118
	goto loc_823F9118;
loc_823F9114:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_823F9118:
	// lbz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_823F9120:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// bge cr6,0x823f90f0
	if (!cr6.getLT()) goto loc_823F90F0;
loc_823F912C:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x823f901c
	if (cr6.getEQ()) goto loc_823F901C;
loc_823F9144:
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x823f9060
	if (cr6.getEQ()) goto loc_823F9060;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x823f9060
	if (cr6.getEQ()) goto loc_823F9060;
	// b 0x823f903c
	goto loc_823F903C;
loc_823F9158:
	// li r30,1
	r30.s64 = 1;
	// li r26,1
	r26.s64 = 1;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x823f91b8
	if (!cr6.getEQ()) goto loc_823F91B8;
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// bne cr6,0x823f91b8
	if (!cr6.getEQ()) goto loc_823F91B8;
loc_823F9174:
	// lbz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmplwi cr6,r10,48
	cr6.compare<uint32_t>(ctx.r10.u32, 48, xer);
	// beq cr6,0x823f9174
	if (cr6.getEQ()) goto loc_823F9174;
	// b 0x823f91b8
	goto loc_823F91B8;
loc_823F918C:
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// bgt cr6,0x823f91c4
	if (cr6.getGT()) goto loc_823F91C4;
	// cmplwi cr6,r6,25
	cr6.compare<uint32_t>(ctx.r6.u32, 25, xer);
	// bge cr6,0x823f91b0
	if (!cr6.getLT()) goto loc_823F91B0;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// stb r11,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, r11.u8);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_823F91B0:
	// lbz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_823F91B8:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// bge cr6,0x823f918c
	if (!cr6.getLT()) goto loc_823F918C;
loc_823F91C4:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// b 0x823f9144
	goto loc_823F9144;
loc_823F91CC:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// li r26,1
	r26.s64 = 1;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// blt cr6,0x823f909c
	if (cr6.getLT()) goto loc_823F909C;
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// bgt cr6,0x823f909c
	if (cr6.getGT()) goto loc_823F909C;
	// li r11,4
	r11.s64 = 4;
	// b 0x823f8f94
	goto loc_823F8F94;
loc_823F91EC:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// addi r5,r8,-2
	ctx.r5.s64 = ctx.r8.s64 + -2;
	// cmpwi cr6,r11,49
	cr6.compare<int32_t>(r11.s32, 49, xer);
	// blt cr6,0x823f920c
	if (cr6.getLT()) goto loc_823F920C;
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// bgt cr6,0x823f920c
	if (cr6.getGT()) goto loc_823F920C;
loc_823F9204:
	// li r11,9
	r11.s64 = 9;
	// b 0x823f8f94
	goto loc_823F8F94;
loc_823F920C:
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x823f922c
	if (cr6.getEQ()) goto loc_823F922C;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x823f92a8
	if (cr6.getEQ()) goto loc_823F92A8;
loc_823F921C:
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// bne cr6,0x823f909c
	if (!cr6.getEQ()) goto loc_823F909C;
	// li r11,8
	r11.s64 = 8;
	// b 0x823f8f44
	goto loc_823F8F44;
loc_823F922C:
	// li r11,7
	r11.s64 = 7;
	// b 0x823f8f44
	goto loc_823F8F44;
loc_823F9234:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// li r28,1
	r28.s64 = 1;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// bne cr6,0x823f9254
	if (!cr6.getEQ()) goto loc_823F9254;
loc_823F9244:
	// lbz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmplwi cr6,r10,48
	cr6.compare<uint32_t>(ctx.r10.u32, 48, xer);
	// beq cr6,0x823f9244
	if (cr6.getEQ()) goto loc_823F9244;
loc_823F9254:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// cmpwi cr6,r11,49
	cr6.compare<int32_t>(r11.s32, 49, xer);
	// blt cr6,0x823f9268
	if (cr6.getLT()) goto loc_823F9268;
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// ble cr6,0x823f9204
	if (!cr6.getGT()) goto loc_823F9204;
loc_823F9268:
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// b 0x823f90a0
	goto loc_823F90A0;
loc_823F9270:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// cmpwi cr6,r11,49
	cr6.compare<int32_t>(r11.s32, 49, xer);
	// blt cr6,0x823f921c
	if (cr6.getLT()) goto loc_823F921C;
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// ble cr6,0x823f9204
	if (!cr6.getGT()) goto loc_823F9204;
	// b 0x823f921c
	goto loc_823F921C;
loc_823F9288:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x823f92b4
	if (cr6.getEQ()) goto loc_823F92B4;
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// addi r5,r8,-1
	ctx.r5.s64 = ctx.r8.s64 + -1;
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x823f922c
	if (cr6.getEQ()) goto loc_823F922C;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// bne cr6,0x823f909c
	if (!cr6.getEQ()) goto loc_823F909C;
loc_823F92A8:
	// li r11,7
	r11.s64 = 7;
	// li r27,-1
	r27.s64 = -1;
	// b 0x823f8f44
	goto loc_823F8F44;
loc_823F92B4:
	// li r11,10
	r11.s64 = 10;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
loc_823F92BC:
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bne cr6,0x823f8f44
	if (!cr6.getEQ()) goto loc_823F8F44;
	// b 0x823f90a0
	goto loc_823F90A0;
loc_823F92C8:
	// li r28,1
	r28.s64 = 1;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// b 0x823f92f8
	goto loc_823F92F8;
loc_823F92D4:
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// bgt cr6,0x823f930c
	if (cr6.getGT()) goto loc_823F930C;
	// mulli r9,r9,10
	ctx.r9.s64 = ctx.r9.s64 * 10;
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// addi r9,r11,-48
	ctx.r9.s64 = r11.s64 + -48;
	// cmpwi cr6,r9,5200
	cr6.compare<int32_t>(ctx.r9.s32, 5200, xer);
	// bgt cr6,0x823f9308
	if (cr6.getGT()) goto loc_823F9308;
	// lbz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_823F92F8:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// bge cr6,0x823f92d4
	if (!cr6.getLT()) goto loc_823F92D4;
	// b 0x823f930c
	goto loc_823F930C;
loc_823F9308:
	// li r9,5201
	ctx.r9.s64 = 5201;
loc_823F930C:
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// mr r29,r9
	r29.u64 = ctx.r9.u64;
	// b 0x823f932c
	goto loc_823F932C;
loc_823F9318:
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// bgt cr6,0x823f9268
	if (cr6.getGT()) goto loc_823F9268;
	// lbz r11,0(r8)
	r11.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// extsb r11,r11
	r11.s64 = r11.s8;
loc_823F932C:
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// bge cr6,0x823f9318
	if (!cr6.getLT()) goto loc_823F9318;
	// b 0x823f9268
	goto loc_823F9268;
loc_823F9338:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_823F9344:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x823f9338
	if (cr6.getEQ()) goto loc_823F9338;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82401130
	sub_82401130(ctx, base);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bge cr6,0x823f936c
	if (!cr6.getLT()) goto loc_823F936C;
	// neg r29,r29
	r29.s64 = -r29.s64;
loc_823F936C:
	// add r11,r31,r29
	r11.u64 = r31.u64 + r29.u64;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bne cr6,0x823f937c
	if (!cr6.getEQ()) goto loc_823F937C;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
loc_823F937C:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bne cr6,0x823f9388
	if (!cr6.getEQ()) goto loc_823F9388;
	// subf r11,r24,r11
	r11.s64 = r11.s64 - r24.s64;
loc_823F9388:
	// cmpwi cr6,r11,5200
	cr6.compare<int32_t>(r11.s32, 5200, xer);
	// bgt cr6,0x823f97ac
	if (cr6.getGT()) goto loc_823F97AC;
	// cmpwi cr6,r11,-5200
	cr6.compare<int32_t>(r11.s32, -5200, xer);
	// blt cr6,0x823f97c4
	if (cr6.getLT()) goto loc_823F97C4;
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// mr r24,r11
	r24.u64 = r11.u64;
	// addi r10,r10,-17264
	ctx.r10.s64 = ctx.r10.s64 + -17264;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// addi r25,r10,-96
	r25.s64 = ctx.r10.s64 + -96;
	// beq cr6,0x823f976c
	if (cr6.getEQ()) goto loc_823F976C;
	// bge cr6,0x823f93c4
	if (!cr6.getLT()) goto loc_823F93C4;
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// neg r24,r11
	r24.s64 = -r11.s64;
	// addi r10,r10,-16912
	ctx.r10.s64 = ctx.r10.s64 + -16912;
	// addi r25,r10,-96
	r25.s64 = ctx.r10.s64 + -96;
loc_823F93C4:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// bne cr6,0x823f93d0
	if (!cr6.getEQ()) goto loc_823F93D0;
	// sth r21,106(r1)
	PPC_STORE_U16(ctx.r1.u32 + 106, r21.u16);
loc_823F93D0:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x823f976c
	if (cr6.getEQ()) goto loc_823F976C;
	// lis r11,0
	r11.s64 = 0;
	// lis r22,-32768
	r22.s64 = -2147483648;
	// ori r26,r11,65535
	r26.u64 = r11.u64 | 65535;
	// lis r11,32767
	r11.s64 = 2147418112;
	// li r23,-32768
	r23.s64 = -32768;
	// ori r17,r11,32768
	r17.u64 = r11.u64 | 32768;
loc_823F93F0:
	// clrlwi. r11,r24,29
	r11.u64 = r24.u32 & 0x7;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r25,r25,84
	r25.s64 = r25.s64 + 84;
	// srawi r24,r24,3
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x7) != 0);
	r24.s64 = r24.s32 >> 3;
	// beq 0x823f9764
	if (cr0.getEQ()) goto loc_823F9764;
	// mulli r11,r11,12
	r11.s64 = r11.s64 * 12;
	// add r4,r11,r25
	ctx.r4.u64 = r11.u64 + r25.u64;
	// lhz r11,10(r4)
	r11.u64 = PPC_LOAD_U16(ctx.r4.u32 + 10);
	// cmplwi cr6,r11,32768
	cr6.compare<uint32_t>(r11.u32, 32768, xer);
	// blt cr6,0x823f9430
	if (cr6.getLT()) goto loc_823F9430;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// li r5,12
	ctx.r5.s64 = 12;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lwz r11,118(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 118);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,118(r1)
	PPC_STORE_U32(ctx.r1.u32 + 118, r11.u32);
loc_823F9430:
	// stw r21,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r21.u32);
	// mr r28,r21
	r28.u64 = r21.u64;
	// stw r21,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r21.u32);
	// stw r21,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r21.u32);
	// lhz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// lhz r11,96(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 96);
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// xor r10,r11,r10
	ctx.r10.u64 = r11.u64 ^ ctx.r10.u64;
	// clrlwi r11,r11,17
	r11.u64 = r11.u32 & 0x7FFF;
	// rlwinm r27,r10,0,16,16
	r27.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x8000;
	// clrlwi r10,r8,17
	ctx.r10.u64 = ctx.r8.u32 & 0x7FFF;
	// cmplwi cr6,r11,32767
	cr6.compare<uint32_t>(r11.u32, 32767, xer);
	// add r9,r11,r10
	ctx.r9.u64 = r11.u64 + ctx.r10.u64;
	// clrlwi r29,r9,16
	r29.u64 = ctx.r9.u32 & 0xFFFF;
	// bge cr6,0x823f974c
	if (!cr6.getLT()) goto loc_823F974C;
	// cmplwi cr6,r10,32767
	cr6.compare<uint32_t>(ctx.r10.u32, 32767, xer);
	// bge cr6,0x823f974c
	if (!cr6.getLT()) goto loc_823F974C;
	// clrlwi r9,r29,16
	ctx.r9.u64 = r29.u32 & 0xFFFF;
	// cmplwi cr6,r9,49149
	cr6.compare<uint32_t>(ctx.r9.u32, 49149, xer);
	// bgt cr6,0x823f974c
	if (cr6.getGT()) goto loc_823F974C;
	// cmplwi cr6,r9,16319
	cr6.compare<uint32_t>(ctx.r9.u32, 16319, xer);
	// bgt cr6,0x823f9490
	if (cr6.getGT()) goto loc_823F9490;
loc_823F9488:
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r21.u32);
	// b 0x823f975c
	goto loc_823F975C;
loc_823F9490:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f94cc
	if (!cr6.getEQ()) goto loc_823F94CC;
	// addi r11,r9,1
	r11.s64 = ctx.r9.s64 + 1;
	// lwz r9,96(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// clrlwi r29,r11,16
	r29.u64 = r11.u32 & 0xFFFF;
	// clrlwi. r9,r9,1
	ctx.r9.u64 = ctx.r9.u32 & 0x7FFFFFFF;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x823f94cc
	if (!cr0.getEQ()) goto loc_823F94CC;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f94cc
	if (!cr6.getEQ()) goto loc_823F94CC;
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f94cc
	if (!cr6.getEQ()) goto loc_823F94CC;
	// sth r21,96(r1)
	PPC_STORE_U16(ctx.r1.u32 + 96, r21.u16);
	// b 0x823f9764
	goto loc_823F9764;
loc_823F94CC:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x823f9504
	if (!cr6.getEQ()) goto loc_823F9504;
	// lwz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// clrlwi r11,r29,16
	r11.u64 = r29.u32 & 0xFFFF;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r29,r11,16
	r29.u64 = r11.u32 & 0xFFFF;
	// clrlwi. r10,r10,1
	ctx.r10.u64 = ctx.r10.u32 & 0x7FFFFFFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823f9504
	if (!cr0.getEQ()) goto loc_823F9504;
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823f9504
	if (!cr6.getEQ()) goto loc_823F9504;
	// lwz r11,8(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823f9488
	if (cr6.getEQ()) goto loc_823F9488;
loc_823F9504:
	// mr r30,r21
	r30.u64 = r21.u64;
	// addi r8,r1,86
	ctx.r8.s64 = ctx.r1.s64 + 86;
	// li r3,5
	ctx.r3.s64 = 5;
loc_823F9510:
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x823f9580
	if (!cr6.getGT()) goto loc_823F9580;
	// addi r10,r1,106
	ctx.r10.s64 = ctx.r1.s64 + 106;
	// addi r5,r4,2
	ctx.r5.s64 = ctx.r4.s64 + 2;
	// subf r6,r11,r10
	ctx.r6.s64 = ctx.r10.s64 - r11.s64;
loc_823F952C:
	// lhz r10,0(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + 0);
	// mr r7,r21
	ctx.r7.u64 = r21.u64;
	// lhz r9,0(r6)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r6.u32 + 0);
	// lwz r11,2(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 2);
	// mullw r9,r10,r9
	ctx.r9.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r9.s32);
	// add r10,r11,r9
	ctx.r10.u64 = r11.u64 + ctx.r9.u64;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x823f9554
	if (cr6.getLT()) goto loc_823F9554;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bge cr6,0x823f9558
	if (!cr6.getLT()) goto loc_823F9558;
loc_823F9554:
	// li r7,1
	ctx.r7.s64 = 1;
loc_823F9558:
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// stw r10,2(r8)
	PPC_STORE_U32(ctx.r8.u32 + 2, ctx.r10.u32);
	// beq cr6,0x823f9570
	if (cr6.getEQ()) goto loc_823F9570;
	// lhz r11,0(r8)
	r11.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// sth r11,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, r11.u16);
loc_823F9570:
	// addic. r31,r31,-1
	xer.ca = r31.u32 > 0;
	r31.s64 = r31.s64 + -1;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// addi r6,r6,-2
	ctx.r6.s64 = ctx.r6.s64 + -2;
	// addi r5,r5,2
	ctx.r5.s64 = ctx.r5.s64 + 2;
	// bgt 0x823f952c
	if (cr0.getGT()) goto loc_823F952C;
loc_823F9580:
	// addic. r3,r3,-1
	xer.ca = ctx.r3.u32 > 0;
	ctx.r3.s64 = ctx.r3.s64 + -1;
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// addi r8,r8,-2
	ctx.r8.s64 = ctx.r8.s64 + -2;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// bgt 0x823f9510
	if (cr0.getGT()) goto loc_823F9510;
	// clrlwi r11,r29,16
	r11.u64 = r29.u32 & 0xFFFF;
	// addis r11,r11,1
	r11.s64 = r11.s64 + 65536;
	// addi r11,r11,-16382
	r11.s64 = r11.s64 + -16382;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// extsh. r10,r11
	ctx.r10.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// ble 0x823f95f8
	if (!cr0.getGT()) goto loc_823F95F8;
loc_823F95AC:
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm. r9,r6,0,0,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x823f95f8
	if (!cr0.getEQ()) goto loc_823F95F8;
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// rlwinm r8,r7,1,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0x1;
	// rlwinm r7,r7,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// or r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 | ctx.r9.u64;
	// rlwinm r6,r6,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// or r9,r6,r8
	ctx.r9.u64 = ctx.r6.u64 | ctx.r8.u64;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// extsh. r9,r11
	ctx.r9.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bgt 0x823f95ac
	if (cr0.getGT()) goto loc_823F95AC;
loc_823F95F8:
	// extsh. r9,r11
	ctx.r9.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bgt 0x823f9698
	if (cr0.getGT()) goto loc_823F9698;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// extsh. r9,r11
	ctx.r9.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bge 0x823f9698
	if (!cr0.getLT()) goto loc_823F9698;
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_823F961C:
	// lhz r9,90(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 90);
	// clrlwi. r9,r9,31
	ctx.r9.u64 = ctx.r9.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x823f962c
	if (cr0.getEQ()) goto loc_823F962C;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_823F962C:
	// clrlwi. r9,r6,31
	ctx.r9.u64 = ctx.r6.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r8,r22
	ctx.r8.u64 = r22.u64;
	// bne 0x823f963c
	if (!cr0.getEQ()) goto loc_823F963C;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
loc_823F963C:
	// clrlwi. r9,r7,31
	ctx.r9.u64 = ctx.r7.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r9,r22
	ctx.r9.u64 = r22.u64;
	// bne 0x823f964c
	if (!cr0.getEQ()) goto loc_823F964C;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
loc_823F964C:
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// rlwinm r7,r7,31,1,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r6,r6,31,1,31
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 31) & 0x7FFFFFFF;
	// or r7,r7,r8
	ctx.r7.u64 = ctx.r7.u64 | ctx.r8.u64;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// extsh. r9,r11
	ctx.r9.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt 0x823f961c
	if (cr0.getLT()) goto loc_823F961C;
	// stw r7,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r7.u32);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// stw r6,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r6.u32);
	// beq cr6,0x823f9698
	if (cr6.getEQ()) goto loc_823F9698;
	// lhz r10,90(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 90);
	// ori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 | 1;
	// sth r10,90(r1)
	PPC_STORE_U16(ctx.r1.u32 + 90, ctx.r10.u16);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_823F9698:
	// lhz r9,90(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 90);
	// cmplwi cr6,r9,32768
	cr6.compare<uint32_t>(ctx.r9.u32, 32768, xer);
	// bgt cr6,0x823f96b8
	if (cr6.getGT()) goto loc_823F96B8;
	// lis r9,1
	ctx.r9.s64 = 65536;
	// clrlwi r10,r10,15
	ctx.r10.u64 = ctx.r10.u32 & 0x1FFFF;
	// ori r9,r9,32768
	ctx.r9.u64 = ctx.r9.u64 | 32768;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bne cr6,0x823f9718
	if (!cr6.getEQ()) goto loc_823F9718;
loc_823F96B8:
	// lwz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 86);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// bne cr6,0x823f9710
	if (!cr6.getEQ()) goto loc_823F9710;
	// lwz r10,82(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 82);
	// stw r21,86(r1)
	PPC_STORE_U32(ctx.r1.u32 + 86, r21.u32);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// bne cr6,0x823f9704
	if (!cr6.getEQ()) goto loc_823F9704;
	// lhz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// stw r21,82(r1)
	PPC_STORE_U32(ctx.r1.u32 + 82, r21.u32);
	// cmplwi cr6,r10,65535
	cr6.compare<uint32_t>(ctx.r10.u32, 65535, xer);
	// bne cr6,0x823f96f8
	if (!cr6.getEQ()) goto loc_823F96F8;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// sth r20,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, r20.u16);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// b 0x823f9718
	goto loc_823F9718;
loc_823F96F8:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// sth r10,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, ctx.r10.u16);
	// b 0x823f9718
	goto loc_823F9718;
loc_823F9704:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,82(r1)
	PPC_STORE_U32(ctx.r1.u32 + 82, ctx.r10.u32);
	// b 0x823f9718
	goto loc_823F9718;
loc_823F9710:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,86(r1)
	PPC_STORE_U32(ctx.r1.u32 + 86, ctx.r10.u32);
loc_823F9718:
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// cmplwi cr6,r11,32767
	cr6.compare<uint32_t>(r11.u32, 32767, xer);
	// bge cr6,0x823f974c
	if (!cr6.getLT()) goto loc_823F974C;
	// clrlwi r10,r27,16
	ctx.r10.u64 = r27.u32 & 0xFFFF;
	// lhz r9,88(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 88);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// sth r9,106(r1)
	PPC_STORE_U16(ctx.r1.u32 + 106, ctx.r9.u16);
	// stw r10,102(r1)
	PPC_STORE_U32(ctx.r1.u32 + 102, ctx.r10.u32);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// sth r11,96(r1)
	PPC_STORE_U16(ctx.r1.u32 + 96, r11.u16);
	// stw r10,98(r1)
	PPC_STORE_U32(ctx.r1.u32 + 98, ctx.r10.u32);
	// b 0x823f9764
	goto loc_823F9764;
loc_823F974C:
	// stw r23,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r23.u32);
	// clrlwi. r11,r27,16
	r11.u64 = r27.u32 & 0xFFFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f975c
	if (!cr0.getEQ()) goto loc_823F975C;
	// stw r17,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r17.u32);
loc_823F975C:
	// stw r21,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r21.u32);
	// stw r21,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r21.u32);
loc_823F9764:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// bne cr6,0x823f93f0
	if (!cr6.getEQ()) goto loc_823F93F0;
loc_823F976C:
	// lhz r11,106(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 106);
	// lwz r8,102(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 102);
	// lwz r9,98(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 98);
	// lhz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 96);
	// b 0x823f97d8
	goto loc_823F97D8;
loc_823F9780:
	// mr r11,r21
	r11.u64 = r21.u64;
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// b 0x823f97d8
	goto loc_823F97D8;
loc_823F9794:
	// mr r11,r21
	r11.u64 = r21.u64;
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// li r21,4
	r21.s64 = 4;
	// b 0x823f97d8
	goto loc_823F97D8;
loc_823F97AC:
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// mr r11,r21
	r11.u64 = r21.u64;
	// li r10,32767
	ctx.r10.s64 = 32767;
	// lis r9,-32768
	ctx.r9.s64 = -2147483648;
	// li r21,2
	r21.s64 = 2;
	// b 0x823f97d8
	goto loc_823F97D8;
loc_823F97C4:
	// mr r11,r21
	r11.u64 = r21.u64;
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// li r21,1
	r21.s64 = 1;
loc_823F97D8:
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// sth r11,10(r19)
	PPC_STORE_U16(r19.u32 + 10, r11.u16);
	// clrlwi r7,r18,16
	ctx.r7.u64 = r18.u32 & 0xFFFF;
	// stw r8,6(r19)
	PPC_STORE_U32(r19.u32 + 6, ctx.r8.u32);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// stw r9,2(r19)
	PPC_STORE_U32(r19.u32 + 2, ctx.r9.u32);
	// or r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 | ctx.r7.u64;
	// sth r10,0(r19)
	PPC_STORE_U16(r19.u32 + 0, ctx.r10.u16);
loc_823F97F8:
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x823ed15c
	return;
}

__attribute__((alias("__imp__sub_823F9800"))) PPC_WEAK_FUNC(sub_823F9800);
PPC_FUNC_IMPL(__imp__sub_823F9800) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr0{};
	PPCRegister r12{};
	// lis r12,-32249
	r12.s64 = -2113470464;
	// lfd f4,11696(r12)
	ctx.fpscr.disableFlushMode();
	ctx.f4.u64 = PPC_LOAD_U64(r12.u32 + 11696);
	// lis r12,-32249
	r12.s64 = -2113470464;
	// lfd f5,11704(r12)
	ctx.f5.u64 = PPC_LOAD_U64(r12.u32 + 11704);
	// fcmpu cr0,f1,f4
	cr0.compare(ctx.f1.f64, ctx.f4.f64);
	// beq- 0x823f9840
	if (cr0.getEQ()) goto loc_823F9840;
	// fabs f6,f1
	ctx.f6.u64 = ctx.f1.u64 & ~0x8000000000000000;
	// fcmpu cr0,f6,f5
	cr0.compare(ctx.f6.f64, ctx.f5.f64);
	// bge- 0x823f9840
	if (!cr0.getLT()) goto loc_823F9840;
	// fcmpu cr0,f1,f4
	cr0.compare(ctx.f1.f64, ctx.f4.f64);
	// blt 0x823f9838
	if (cr0.getLT()) goto loc_823F9838;
	// fadd f4,f1,f5
	ctx.f4.f64 = ctx.f1.f64 + ctx.f5.f64;
	// fsub f1,f4,f5
	ctx.f1.f64 = ctx.f4.f64 - ctx.f5.f64;
	// b 0x823f9840
	goto loc_823F9840;
loc_823F9838:
	// fsub f4,f1,f5
	ctx.fpscr.disableFlushMode();
	ctx.f4.f64 = ctx.f1.f64 - ctx.f5.f64;
	// fadd f1,f4,f5
	ctx.f1.f64 = ctx.f4.f64 + ctx.f5.f64;
loc_823F9840:
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F9850"))) PPC_WEAK_FUNC(sub_823F9850);
PPC_FUNC_IMPL(__imp__sub_823F9850) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r11,r11,-18736
	r11.s64 = r11.s64 + -18736;
	// stw r3,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r3.u32);
	// stw r4,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r4.u32);
	// stw r5,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r5.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F9868"))) PPC_WEAK_FUNC(sub_823F9868);
PPC_FUNC_IMPL(__imp__sub_823F9868) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x823f989c
	if (cr6.getEQ()) goto loc_823F989C;
	// lis r11,-32249
	r11.s64 = -2113470464;
	// lwz r10,8800(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8800);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x823f98c0
	if (cr6.getEQ()) goto loc_823F98C0;
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x823f98c0
	goto loc_823F98C0;
loc_823F989C:
	// lis r11,-32249
	r11.s64 = -2113470464;
	// lwz r10,8804(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8804);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x823f98b8
	if (cr6.getEQ()) goto loc_823F98B8;
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_823F98B8:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f2a50
	sub_823F2A50(ctx, base);
loc_823F98C0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823F98D0"))) PPC_WEAK_FUNC(sub_823F98D0);
PPC_FUNC_IMPL(__imp__sub_823F98D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// bne cr6,0x823f9968
	if (!cr6.getEQ()) goto loc_823F9968;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplw cr6,r3,r29
	cr6.compare<uint32_t>(ctx.r3.u32, r29.u32, xer);
	// bne cr6,0x823f9944
	if (!cr6.getEQ()) goto loc_823F9944;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x823f1f38
	sub_823F1F38(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// bne 0x823f9924
	if (!cr0.getEQ()) goto loc_823F9924;
loc_823F991C:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x823f996c
	goto loc_823F996C;
loc_823F9924:
	// li r11,1
	r11.s64 = 1;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r5,r11,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// b 0x823f995c
	goto loc_823F995C;
loc_823F9944:
	// li r5,4
	ctx.r5.s64 = 4;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// bl 0x823f79e8
	sub_823F79E8(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823f991c
	if (cr0.getEQ()) goto loc_823F991C;
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
loc_823F995C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823F9968:
	// li r3,1
	ctx.r3.s64 = 1;
loc_823F996C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823F9978"))) PPC_WEAK_FUNC(sub_823F9978);
PPC_FUNC_IMPL(__imp__sub_823F9978) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-1008(r1)
	ea = -1008 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// stw r3,1028(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1028, ctx.r3.u32);
	// li r23,0
	r23.s64 = 0;
	// stw r4,1036(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1036, ctx.r4.u32);
	// stw r6,1052(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1052, ctx.r6.u32);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r11,350
	r11.s64 = 350;
	// stw r23,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r23.u32);
	// stw r23,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r23.u32);
	// stw r23,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r23.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bne cr6,0x823f99e4
	if (!cr6.getEQ()) goto loc_823F99E4;
loc_823F99B8:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// b 0x823fa99c
	goto loc_823FA99C;
loc_823F99E4:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x823f99b8
	if (cr6.getEQ()) goto loc_823F99B8;
	// lhz r3,0(r4)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// mr r16,r23
	r16.u64 = r23.u64;
	// stb r23,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r23.u8);
	// stw r23,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r23.u32);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823fa978
	if (cr0.getEQ()) goto loc_823FA978;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r11,r11,-19456
	r11.s64 = r11.s64 + -19456;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r11,r11,-20552
	r11.s64 = r11.s64 + -20552;
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
loc_823F9A1C:
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x823faaa8
	sub_823FAAA8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f9a9c
	if (cr0.getEQ()) goto loc_823F9A9C;
	// lwz r30,1028(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// addi r16,r16,-1
	r16.s64 = r16.s64 + -1;
loc_823F9A34:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// clrlwi r11,r31,16
	r11.u64 = r31.u32 & 0xFFFF;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823f9a60
	if (cr6.getEQ()) goto loc_823F9A60;
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x823faaa8
	sub_823FAAA8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f9a34
	if (!cr0.getEQ()) goto loc_823F9A34;
loc_823F9A60:
	// clrlwi r11,r31,16
	r11.u64 = r31.u32 & 0xFFFF;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823f9a78
	if (cr6.getEQ()) goto loc_823F9A78;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82401630
	sub_82401630(ctx, base);
loc_823F9A78:
	// lwz r31,1036(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1036);
loc_823F9A7C:
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
	// li r4,8
	ctx.r4.s64 = 8;
	// lhz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// bl 0x823faaa8
	sub_823FAAA8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f9a7c
	if (!cr0.getEQ()) goto loc_823F9A7C;
	// stw r31,1036(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1036, r31.u32);
	// b 0x823fa924
	goto loc_823FA924;
loc_823F9A9C:
	// lwz r19,1036(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1036);
	// lhz r11,0(r19)
	r11.u64 = PPC_LOAD_U16(r19.u32 + 0);
	// cmplwi cr6,r11,37
	cr6.compare<uint32_t>(r11.u32, 37, xer);
	// bne cr6,0x823fa8d0
	if (!cr6.getEQ()) goto loc_823FA8D0;
	// li r27,0
	r27.s64 = 0;
	// li r14,1
	r14.s64 = 1;
	// mr r22,r27
	r22.u64 = r27.u64;
	// mr r18,r27
	r18.u64 = r27.u64;
	// mr r17,r27
	r17.u64 = r27.u64;
	// mr r15,r27
	r15.u64 = r27.u64;
	// mr r25,r27
	r25.u64 = r27.u64;
	// mr r20,r27
	r20.u64 = r27.u64;
	// mr r29,r27
	r29.u64 = r27.u64;
	// mr r30,r27
	r30.u64 = r27.u64;
	// mr r24,r27
	r24.u64 = r27.u64;
	// mr r28,r27
	r28.u64 = r27.u64;
	// mr r21,r27
	r21.u64 = r27.u64;
loc_823F9AE0:
	// addi r19,r19,2
	r19.s64 = r19.s64 + 2;
	// lhz r31,0(r19)
	r31.u64 = PPC_LOAD_U16(r19.u32 + 0);
	// rlwinm. r11,r31,0,0,23
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xFFFFFF00;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823f9b14
	if (!cr0.getEQ()) goto loc_823F9B14;
	// clrlwi r3,r31,24
	ctx.r3.u64 = r31.u32 & 0xFF;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f9b14
	if (cr0.getEQ()) goto loc_823F9B14;
	// mulli r11,r15,10
	r11.s64 = r15.s64 * 10;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r17,r17,1
	r17.s64 = r17.s64 + 1;
	// addi r15,r11,-48
	r15.s64 = r11.s64 + -48;
	// b 0x823f9c24
	goto loc_823F9C24;
loc_823F9B14:
	// cmpwi cr6,r31,78
	cr6.compare<int32_t>(r31.s32, 78, xer);
	// bgt cr6,0x823f9bd0
	if (cr6.getGT()) goto loc_823F9BD0;
	// beq cr6,0x823f9c24
	if (cr6.getEQ()) goto loc_823F9C24;
	// cmpwi cr6,r31,42
	cr6.compare<int32_t>(r31.s32, 42, xer);
	// beq cr6,0x823f9bc4
	if (cr6.getEQ()) goto loc_823F9BC4;
	// cmpwi cr6,r31,70
	cr6.compare<int32_t>(r31.s32, 70, xer);
	// beq cr6,0x823f9c24
	if (cr6.getEQ()) goto loc_823F9C24;
	// cmpwi cr6,r31,73
	cr6.compare<int32_t>(r31.s32, 73, xer);
	// beq cr6,0x823f9b4c
	if (cr6.getEQ()) goto loc_823F9B4C;
	// cmpwi cr6,r31,76
	cr6.compare<int32_t>(r31.s32, 76, xer);
	// bne cr6,0x823f9be8
	if (!cr6.getEQ()) goto loc_823F9BE8;
	// addi r11,r14,1
	r11.s64 = r14.s64 + 1;
	// extsb r14,r11
	r14.s64 = r11.s8;
	// b 0x823f9c24
	goto loc_823F9C24;
loc_823F9B4C:
	// lhz r10,2(r19)
	ctx.r10.u64 = PPC_LOAD_U16(r19.u32 + 2);
	// cmplwi cr6,r10,54
	cr6.compare<uint32_t>(ctx.r10.u32, 54, xer);
	// bne cr6,0x823f9b78
	if (!cr6.getEQ()) goto loc_823F9B78;
	// lhz r9,4(r19)
	ctx.r9.u64 = PPC_LOAD_U16(r19.u32 + 4);
	// addi r11,r19,4
	r11.s64 = r19.s64 + 4;
	// cmplwi cr6,r9,52
	cr6.compare<uint32_t>(ctx.r9.u32, 52, xer);
	// bne cr6,0x823f9b78
	if (!cr6.getEQ()) goto loc_823F9B78;
loc_823F9B68:
	// mr r19,r11
	r19.u64 = r11.u64;
	// std r27,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r27.u64);
	// addi r21,r21,1
	r21.s64 = r21.s64 + 1;
	// b 0x823f9c24
	goto loc_823F9C24;
loc_823F9B78:
	// cmplwi cr6,r10,51
	cr6.compare<uint32_t>(ctx.r10.u32, 51, xer);
	// bne cr6,0x823f9b98
	if (!cr6.getEQ()) goto loc_823F9B98;
	// lhz r9,4(r19)
	ctx.r9.u64 = PPC_LOAD_U16(r19.u32 + 4);
	// addi r11,r19,4
	r11.s64 = r19.s64 + 4;
	// cmplwi cr6,r9,50
	cr6.compare<uint32_t>(ctx.r9.u32, 50, xer);
	// bne cr6,0x823f9b98
	if (!cr6.getEQ()) goto loc_823F9B98;
	// mr r19,r11
	r19.u64 = r11.u64;
	// b 0x823f9c24
	goto loc_823F9C24;
loc_823F9B98:
	// cmplwi cr6,r10,100
	cr6.compare<uint32_t>(ctx.r10.u32, 100, xer);
	// beq cr6,0x823f9c24
	if (cr6.getEQ()) goto loc_823F9C24;
	// cmplwi cr6,r10,105
	cr6.compare<uint32_t>(ctx.r10.u32, 105, xer);
	// beq cr6,0x823f9c24
	if (cr6.getEQ()) goto loc_823F9C24;
	// cmplwi cr6,r10,111
	cr6.compare<uint32_t>(ctx.r10.u32, 111, xer);
	// beq cr6,0x823f9c24
	if (cr6.getEQ()) goto loc_823F9C24;
	// cmplwi cr6,r10,120
	cr6.compare<uint32_t>(ctx.r10.u32, 120, xer);
	// beq cr6,0x823f9c24
	if (cr6.getEQ()) goto loc_823F9C24;
	// cmplwi cr6,r10,88
	cr6.compare<uint32_t>(ctx.r10.u32, 88, xer);
	// bne cr6,0x823f9be8
	if (!cr6.getEQ()) goto loc_823F9BE8;
	// b 0x823f9c24
	goto loc_823F9C24;
loc_823F9BC4:
	// addi r11,r29,1
	r11.s64 = r29.s64 + 1;
	// extsb r29,r11
	r29.s64 = r11.s8;
	// b 0x823f9c24
	goto loc_823F9C24;
loc_823F9BD0:
	// cmpwi cr6,r31,104
	cr6.compare<int32_t>(r31.s32, 104, xer);
	// beq cr6,0x823f9c14
	if (cr6.getEQ()) goto loc_823F9C14;
	// cmpwi cr6,r31,108
	cr6.compare<int32_t>(r31.s32, 108, xer);
	// beq cr6,0x823f9bf4
	if (cr6.getEQ()) goto loc_823F9BF4;
	// cmpwi cr6,r31,119
	cr6.compare<int32_t>(r31.s32, 119, xer);
	// beq cr6,0x823f9c0c
	if (cr6.getEQ()) goto loc_823F9C0C;
loc_823F9BE8:
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// extsb r30,r11
	r30.s64 = r11.s8;
	// b 0x823f9c24
	goto loc_823F9C24;
loc_823F9BF4:
	// lhz r10,2(r19)
	ctx.r10.u64 = PPC_LOAD_U16(r19.u32 + 2);
	// addi r11,r19,2
	r11.s64 = r19.s64 + 2;
	// cmplwi cr6,r10,108
	cr6.compare<uint32_t>(ctx.r10.u32, 108, xer);
	// beq cr6,0x823f9b68
	if (cr6.getEQ()) goto loc_823F9B68;
	// addi r11,r14,1
	r11.s64 = r14.s64 + 1;
	// extsb r14,r11
	r14.s64 = r11.s8;
loc_823F9C0C:
	// addi r11,r28,1
	r11.s64 = r28.s64 + 1;
	// b 0x823f9c20
	goto loc_823F9C20;
loc_823F9C14:
	// addi r10,r14,-1
	ctx.r10.s64 = r14.s64 + -1;
	// addi r11,r28,-1
	r11.s64 = r28.s64 + -1;
	// extsb r14,r10
	r14.s64 = ctx.r10.s8;
loc_823F9C20:
	// extsb r28,r11
	r28.s64 = r11.s8;
loc_823F9C24:
	// extsb. r11,r30
	r11.s64 = r30.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f9ae0
	if (cr0.getEQ()) goto loc_823F9AE0;
	// extsb. r11,r29
	r11.s64 = r29.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r19,1036(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1036, r19.u32);
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// bne 0x823f9c60
	if (!cr0.getEQ()) goto loc_823F9C60;
	// lwz r11,1052(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1052);
	// addi r10,r11,7
	ctx.r10.s64 = r11.s64 + 7;
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// rlwinm r11,r10,0,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,1052(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1052, r11.u32);
	// lwz r11,-4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// b 0x823f9c64
	goto loc_823F9C64;
loc_823F9C60:
	// stw r27,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r27.u32);
loc_823F9C64:
	// extsb. r11,r28
	r11.s64 = r28.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r26,r27
	r26.u64 = r27.u64;
	// bne 0x823f9c8c
	if (!cr0.getEQ()) goto loc_823F9C8C;
	// lhz r11,0(r19)
	r11.u64 = PPC_LOAD_U16(r19.u32 + 0);
	// cmplwi cr6,r11,83
	cr6.compare<uint32_t>(r11.u32, 83, xer);
	// beq cr6,0x823f9c88
	if (cr6.getEQ()) goto loc_823F9C88;
	// cmplwi cr6,r11,67
	cr6.compare<uint32_t>(r11.u32, 67, xer);
	// li r28,1
	r28.s64 = 1;
	// bne cr6,0x823f9c8c
	if (!cr6.getEQ()) goto loc_823F9C8C;
loc_823F9C88:
	// li r28,-1
	r28.s64 = -1;
loc_823F9C8C:
	// lwz r10,1036(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1036);
	// lhz r11,0(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// ori r19,r11,32
	r19.u64 = r11.u64 | 32;
	// cmpwi cr6,r19,110
	cr6.compare<int32_t>(r19.s32, 110, xer);
	// beq cr6,0x823f9d04
	if (cr6.getEQ()) goto loc_823F9D04;
	// cmpwi cr6,r19,99
	cr6.compare<int32_t>(r19.s32, 99, xer);
	// beq cr6,0x823f9ce4
	if (cr6.getEQ()) goto loc_823F9CE4;
	// cmpwi cr6,r19,123
	cr6.compare<int32_t>(r19.s32, 123, xer);
	// beq cr6,0x823f9ce4
	if (cr6.getEQ()) goto loc_823F9CE4;
loc_823F9CB0:
	// lwz r3,1028(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// clrlwi r11,r31,16
	r11.u64 = r31.u32 & 0xFFFF;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823f9cdc
	if (cr6.getEQ()) goto loc_823F9CDC;
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x823faaa8
	sub_823FAAA8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823f9cb0
	if (!cr0.getEQ()) goto loc_823F9CB0;
loc_823F9CDC:
	// mr r23,r31
	r23.u64 = r31.u64;
	// b 0x823f9cf4
	goto loc_823F9CF4;
loc_823F9CE4:
	// lwz r3,1028(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823F9CF4:
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823fa950
	if (cr6.getEQ()) goto loc_823FA950;
	// lwz r10,1036(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1036);
loc_823F9D04:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823f9d14
	if (cr6.getEQ()) goto loc_823F9D14;
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// beq cr6,0x823fa938
	if (cr6.getEQ()) goto loc_823FA938;
loc_823F9D14:
	// addi r11,r19,-99
	r11.s64 = r19.s64 + -99;
	// cmplwi cr6,r11,24
	cr6.compare<uint32_t>(r11.u32, 24, xer);
	// bgt cr6,0x823fa884
	if (cr6.getGT()) goto loc_823FA884;
	// lis r12,-32249
	r12.s64 = -2113470464;
	// addi r12,r12,11840
	r12.s64 = r12.s64 + 11840;
	// rlwinm r0,r11,1,0,30
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r0,r12,r0
	r0.u64 = PPC_LOAD_U16(r12.u32 + r0.u32);
	// lis r12,-32192
	r12.s64 = -2109734912;
	// addi r12,r12,-25272
	r12.s64 = r12.s64 + -25272;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_823F9D48;
	case 1:
		goto loc_823FA168;
	case 2:
		goto loc_823FA480;
	case 3:
		goto loc_823FA480;
	case 4:
		goto loc_823FA480;
	case 5:
		goto loc_823FA884;
	case 6:
		goto loc_823FA064;
	case 7:
		goto loc_823FA884;
	case 8:
		goto loc_823FA884;
	case 9:
		goto loc_823FA884;
	case 10:
		goto loc_823FA884;
	case 11:
		goto loc_823FA42C;
	case 12:
		goto loc_823FA168;
	case 13:
		goto loc_823FA164;
	case 14:
		goto loc_823FA884;
	case 15:
		goto loc_823FA884;
	case 16:
		goto loc_823F9D58;
	case 17:
		goto loc_823FA884;
	case 18:
		goto loc_823FA168;
	case 19:
		goto loc_823FA884;
	case 20:
		goto loc_823FA884;
	case 21:
		goto loc_823FA068;
	case 22:
		goto loc_823FA884;
	case 23:
		goto loc_823FA884;
	case 24:
		goto loc_823F9D68;
	default:
		__builtin_unreachable();
	}
loc_823F9D48:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// bne cr6,0x823f9d58
	if (!cr6.getEQ()) goto loc_823F9D58;
	// li r17,1
	r17.s64 = 1;
	// addi r15,r15,1
	r15.s64 = r15.s64 + 1;
loc_823F9D58:
	// extsb. r11,r28
	r11.s64 = r28.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// ble 0x823f9ec0
	if (!cr0.getGT()) goto loc_823F9EC0;
	// li r24,1
	r24.s64 = 1;
	// b 0x823f9ec0
	goto loc_823F9EC0;
loc_823F9D68:
	// extsb. r11,r28
	r11.s64 = r28.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// ble 0x823f9d74
	if (!cr0.getGT()) goto loc_823F9D74;
	// li r24,1
	r24.s64 = 1;
loc_823F9D74:
	// addi r31,r10,2
	r31.s64 = ctx.r10.s64 + 2;
	// lhz r11,0(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// stw r31,1036(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1036, r31.u32);
	// cmplwi cr6,r11,94
	cr6.compare<uint32_t>(r11.u32, 94, xer);
	// bne cr6,0x823f9d90
	if (!cr6.getEQ()) goto loc_823F9D90;
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
	// li r25,-1
	r25.s64 = -1;
loc_823F9D90:
	// lwz r30,120(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x823f9dc0
	if (!cr6.getEQ()) goto loc_823F9DC0;
	// li r3,8192
	ctx.r3.s64 = 8192;
	// bl 0x823ed2b0
	sub_823ED2B0(ctx, base);
	// stw r3,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r3.u32);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823fa950
	if (cr0.getEQ()) goto loc_823FA950;
	// li r29,1
	r29.s64 = 1;
	// rotlwi r30,r3,0
	r30.u64 = __builtin_rotateleft32(ctx.r3.u32, 0);
	// stw r29,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r29.u32);
	// b 0x823f9dc4
	goto loc_823F9DC4;
loc_823F9DC0:
	// li r29,1
	r29.s64 = 1;
loc_823F9DC4:
	// li r5,8192
	ctx.r5.s64 = 8192;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// cmpwi cr6,r19,123
	cr6.compare<int32_t>(r19.s32, 123, xer);
	// bne cr6,0x823f9e9c
	if (!cr6.getEQ()) goto loc_823F9E9C;
	// lhz r11,0(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// cmplwi cr6,r11,93
	cr6.compare<uint32_t>(r11.u32, 93, xer);
	// bne cr6,0x823f9e9c
	if (!cr6.getEQ()) goto loc_823F9E9C;
	// li r11,32
	r11.s64 = 32;
	// li r27,93
	r27.s64 = 93;
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
	// stb r11,11(r30)
	PPC_STORE_U8(r30.u32 + 11, r11.u8);
	// b 0x823f9e9c
	goto loc_823F9E9C;
loc_823F9DFC:
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
	// clrlwi r10,r9,16
	ctx.r10.u64 = ctx.r9.u32 & 0xFFFF;
	// cmplwi cr6,r10,45
	cr6.compare<uint32_t>(ctx.r10.u32, 45, xer);
	// bne cr6,0x823f9e80
	if (!cr6.getEQ()) goto loc_823F9E80;
	// clrlwi. r8,r27,16
	ctx.r8.u64 = r27.u32 & 0xFFFF;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq 0x823f9e80
	if (cr0.getEQ()) goto loc_823F9E80;
	// lhz r11,0(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// cmplwi cr6,r11,93
	cr6.compare<uint32_t>(r11.u32, 93, xer);
	// beq cr6,0x823f9e80
	if (cr6.getEQ()) goto loc_823F9E80;
	// clrlwi r10,r11,16
	ctx.r10.u64 = r11.u32 & 0xFFFF;
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
	// cmplw cr6,r8,r10
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r10.u32, xer);
	// bge cr6,0x823f9e3c
	if (!cr6.getLT()) goto loc_823F9E3C;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// b 0x823f9e44
	goto loc_823F9E44;
loc_823F9E3C:
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// mr r27,r11
	r27.u64 = r11.u64;
loc_823F9E44:
	// clrlwi r8,r10,16
	ctx.r8.u64 = ctx.r10.u32 & 0xFFFF;
	// clrlwi r11,r27,16
	r11.u64 = r27.u32 & 0xFFFF;
	// b 0x823f9e70
	goto loc_823F9E70;
loc_823F9E50:
	// rlwinm r10,r11,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// addi r9,r11,1
	ctx.r9.s64 = r11.s64 + 1;
	// clrlwi r11,r11,29
	r11.u64 = r11.u32 & 0x7;
	// slw r7,r29,r11
	ctx.r7.u64 = r11.u8 & 0x20 ? 0 : (r29.u32 << (r11.u8 & 0x3F));
	// clrlwi r11,r9,16
	r11.u64 = ctx.r9.u32 & 0xFFFF;
	// lbzx r9,r10,r30
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + r30.u32);
	// or r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 | ctx.r9.u64;
	// stbx r9,r10,r30
	PPC_STORE_U8(ctx.r10.u32 + r30.u32, ctx.r9.u8);
loc_823F9E70:
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// ble cr6,0x823f9e50
	if (!cr6.getGT()) goto loc_823F9E50;
	// li r27,0
	r27.s64 = 0;
	// b 0x823f9e9c
	goto loc_823F9E9C;
loc_823F9E80:
	// rlwinm r11,r10,29,3,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 29) & 0x1FFFFFFF;
	// clrlwi r10,r10,29
	ctx.r10.u64 = ctx.r10.u32 & 0x7;
	// mr r27,r9
	r27.u64 = ctx.r9.u64;
	// lbzx r9,r11,r30
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + r30.u32);
	// slw r10,r29,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x20 ? 0 : (r29.u32 << (ctx.r10.u8 & 0x3F));
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// stbx r10,r11,r30
	PPC_STORE_U8(r11.u32 + r30.u32, ctx.r10.u8);
loc_823F9E9C:
	// lhz r11,0(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// cmplwi cr6,r11,93
	cr6.compare<uint32_t>(r11.u32, 93, xer);
	// bne cr6,0x823f9dfc
	if (!cr6.getEQ()) goto loc_823F9DFC;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823fa950
	if (cr0.getEQ()) goto loc_823FA950;
	// cmpwi cr6,r19,123
	cr6.compare<int32_t>(r19.s32, 123, xer);
	// bne cr6,0x823f9ec0
	if (!cr6.getEQ()) goto loc_823F9EC0;
	// stw r31,1036(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1036, r31.u32);
loc_823F9EC0:
	// lwz r30,88(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// lwz r29,1028(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// addi r16,r16,-1
	r16.s64 = r16.s64 + -1;
	// mr r31,r30
	r31.u64 = r30.u64;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823f9ee8
	if (cr6.getEQ()) goto loc_823F9EE8;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82401630
	sub_82401630(ctx, base);
loc_823F9EE8:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823f9efc
	if (cr6.getEQ()) goto loc_823F9EFC;
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// addi r15,r15,-1
	r15.s64 = r15.s64 + -1;
	// beq cr6,0x823fa018
	if (cr6.getEQ()) goto loc_823FA018;
loc_823F9EFC:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823f9ffc
	if (cr6.getEQ()) goto loc_823F9FFC;
	// cmpwi cr6,r19,99
	cr6.compare<int32_t>(r19.s32, 99, xer);
	// beq cr6,0x823f9f74
	if (cr6.getEQ()) goto loc_823F9F74;
	// cmpwi cr6,r19,115
	cr6.compare<int32_t>(r19.s32, 115, xer);
	// bne cr6,0x823f9f40
	if (!cr6.getEQ()) goto loc_823F9F40;
	// cmplwi cr6,r11,9
	cr6.compare<uint32_t>(r11.u32, 9, xer);
	// blt cr6,0x823f9f38
	if (cr6.getLT()) goto loc_823F9F38;
	// cmplwi cr6,r11,13
	cr6.compare<uint32_t>(r11.u32, 13, xer);
	// ble cr6,0x823f9ffc
	if (!cr6.getGT()) goto loc_823F9FFC;
loc_823F9F38:
	// cmplwi cr6,r11,32
	cr6.compare<uint32_t>(r11.u32, 32, xer);
	// bne cr6,0x823f9f74
	if (!cr6.getEQ()) goto loc_823F9F74;
loc_823F9F40:
	// cmpwi cr6,r19,123
	cr6.compare<int32_t>(r19.s32, 123, xer);
	// bne cr6,0x823f9ffc
	if (!cr6.getEQ()) goto loc_823F9FFC;
	// clrlwi r10,r11,29
	ctx.r10.u64 = r11.u32 & 0x7;
	// lwz r8,120(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// rlwinm r11,r11,29,3,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// extsb r9,r25
	ctx.r9.s64 = r25.s8;
	// lbzx r11,r11,r8
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r8.u32);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// xor r11,r11,r9
	r11.u64 = r11.u64 ^ ctx.r9.u64;
	// li r9,1
	ctx.r9.s64 = 1;
	// slw r10,r9,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r9.u32 << (ctx.r10.u8 & 0x3F));
	// and. r11,r10,r11
	r11.u64 = ctx.r10.u64 & r11.u64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f9ffc
	if (cr0.getEQ()) goto loc_823F9FFC;
loc_823F9F74:
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823f9ff4
	if (!cr6.getEQ()) goto loc_823F9FF4;
	// extsb. r11,r24
	r11.s64 = r24.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823f9f94
	if (cr0.getEQ()) goto loc_823F9F94;
	// sth r23,0(r30)
	PPC_STORE_U16(r30.u32 + 0, r23.u16);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x823f9fec
	goto loc_823F9FEC;
loc_823F9F94:
	// li r11,0
	r11.s64 = 0;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// li r5,5
	ctx.r5.s64 = 5;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// bl 0x823fe8a0
	sub_823FE8A0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823f9fe4
	if (cr0.getEQ()) goto loc_823F9FE4;
	// cmpwi cr6,r3,22
	cr6.compare<int32_t>(ctx.r3.s32, 22, xer);
	// beq cr6,0x823f9fc8
	if (cr6.getEQ()) goto loc_823F9FC8;
	// cmpwi cr6,r3,34
	cr6.compare<int32_t>(ctx.r3.s32, 34, xer);
	// bne cr6,0x823f9ee8
	if (!cr6.getEQ()) goto loc_823F9EE8;
loc_823F9FC8:
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f3cf0
	sub_823F3CF0(ctx, base);
	// b 0x823f9ee8
	goto loc_823F9EE8;
loc_823F9FE4:
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
loc_823F9FEC:
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r30.u32);
	// b 0x823f9ee8
	goto loc_823F9EE8;
loc_823F9FF4:
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
	// b 0x823f9ee8
	goto loc_823F9EE8;
loc_823F9FFC:
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// addi r16,r16,-1
	r16.s64 = r16.s64 + -1;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823fa018
	if (cr6.getEQ()) goto loc_823FA018;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82401630
	sub_82401630(ctx, base);
loc_823FA018:
	// cmplw cr6,r31,r30
	cr6.compare<uint32_t>(r31.u32, r30.u32, xer);
	// beq cr6,0x823fa950
	if (cr6.getEQ()) goto loc_823FA950;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823fa8b4
	if (!cr6.getEQ()) goto loc_823FA8B4;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmpwi cr6,r19,99
	cr6.compare<int32_t>(r19.s32, 99, xer);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// beq cr6,0x823fa8b4
	if (cr6.getEQ()) goto loc_823FA8B4;
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// extsb. r11,r24
	r11.s64 = r24.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fa058
	if (cr0.getEQ()) goto loc_823FA058;
	// li r11,0
	r11.s64 = 0;
	// sth r11,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r11.u16);
	// b 0x823fa8b4
	goto loc_823FA8B4;
loc_823FA058:
	// li r11,0
	r11.s64 = 0;
	// stb r11,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r11.u8);
	// b 0x823fa8b4
	goto loc_823FA8B4;
loc_823FA064:
	// li r19,100
	r19.s64 = 100;
loc_823FA068:
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x823fa07c
	if (!cr6.getEQ()) goto loc_823FA07C;
	// li r20,1
	r20.s64 = 1;
	// b 0x823fa084
	goto loc_823FA084;
loc_823FA07C:
	// cmplwi cr6,r11,43
	cr6.compare<uint32_t>(r11.u32, 43, xer);
	// bne cr6,0x823fa098
	if (!cr6.getEQ()) goto loc_823FA098;
loc_823FA084:
	// addic. r15,r15,-1
	xer.ca = r15.u32 > 0;
	r15.s64 = r15.s64 + -1;
	cr0.compare<int32_t>(r15.s32, 0, xer);
	// bne 0x823fa0f8
	if (!cr0.getEQ()) goto loc_823FA0F8;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823fa0f8
	if (cr6.getEQ()) goto loc_823FA0F8;
	// li r26,1
	r26.s64 = 1;
loc_823FA098:
	// lwz r31,1028(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
loc_823FA09C:
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bne cr6,0x823fa1ac
	if (!cr6.getEQ()) goto loc_823FA1AC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// cmplwi cr6,r11,120
	cr6.compare<uint32_t>(r11.u32, 120, xer);
	// beq cr6,0x823fa130
	if (cr6.getEQ()) goto loc_823FA130;
	// cmplwi cr6,r11,88
	cr6.compare<uint32_t>(r11.u32, 88, xer);
	// beq cr6,0x823fa130
	if (cr6.getEQ()) goto loc_823FA130;
	// li r18,1
	r18.s64 = 1;
	// cmpwi cr6,r19,120
	cr6.compare<int32_t>(r19.s32, 120, xer);
	// beq cr6,0x823fa110
	if (cr6.getEQ()) goto loc_823FA110;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823fa0f0
	if (cr6.getEQ()) goto loc_823FA0F0;
	// addic. r15,r15,-1
	xer.ca = r15.u32 > 0;
	r15.s64 = r15.s64 + -1;
	cr0.compare<int32_t>(r15.s32, 0, xer);
	// bne 0x823fa0f0
	if (!cr0.getEQ()) goto loc_823FA0F0;
	// addi r11,r26,1
	r11.s64 = r26.s64 + 1;
	// extsb r26,r11
	r26.s64 = r11.s8;
loc_823FA0F0:
	// li r19,111
	r19.s64 = 111;
	// b 0x823fa1ac
	goto loc_823FA1AC;
loc_823FA0F8:
	// lwz r31,1028(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// b 0x823fa09c
	goto loc_823FA09C;
loc_823FA110:
	// addi r16,r16,-1
	r16.s64 = r16.s64 + -1;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823fa128
	if (cr6.getEQ()) goto loc_823FA128;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82401630
	sub_82401630(ctx, base);
loc_823FA128:
	// li r23,48
	r23.s64 = 48;
	// b 0x823fa1ac
	goto loc_823FA1AC;
loc_823FA130:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823fa15c
	if (cr6.getEQ()) goto loc_823FA15C;
	// addi r15,r15,-2
	r15.s64 = r15.s64 + -2;
	// cmpwi cr6,r15,1
	cr6.compare<int32_t>(r15.s32, 1, xer);
	// bge cr6,0x823fa15c
	if (!cr6.getLT()) goto loc_823FA15C;
	// addi r11,r26,1
	r11.s64 = r26.s64 + 1;
	// extsb r26,r11
	r26.s64 = r11.s8;
loc_823FA15C:
	// li r19,120
	r19.s64 = 120;
	// b 0x823fa1ac
	goto loc_823FA1AC;
loc_823FA164:
	// li r14,1
	r14.s64 = 1;
loc_823FA168:
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x823fa17c
	if (!cr6.getEQ()) goto loc_823FA17C;
	// li r20,1
	r20.s64 = 1;
	// b 0x823fa184
	goto loc_823FA184;
loc_823FA17C:
	// cmplwi cr6,r11,43
	cr6.compare<uint32_t>(r11.u32, 43, xer);
	// bne cr6,0x823fa1ac
	if (!cr6.getEQ()) goto loc_823FA1AC;
loc_823FA184:
	// addic. r15,r15,-1
	xer.ca = r15.u32 > 0;
	r15.s64 = r15.s64 + -1;
	cr0.compare<int32_t>(r15.s32, 0, xer);
	// bne 0x823fa19c
	if (!cr0.getEQ()) goto loc_823FA19C;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823fa19c
	if (cr6.getEQ()) goto loc_823FA19C;
	// li r26,1
	r26.s64 = 1;
	// b 0x823fa1ac
	goto loc_823FA1AC;
loc_823FA19C:
	// lwz r3,1028(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FA1AC:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// extsb. r29,r26
	r29.s64 = r26.s8;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x823fa2f0
	if (cr6.getEQ()) goto loc_823FA2F0;
	// bne 0x823fa2d8
	if (!cr0.getEQ()) goto loc_823FA2D8;
loc_823FA1BC:
	// cmpwi cr6,r19,120
	cr6.compare<int32_t>(r19.s32, 120, xer);
	// beq cr6,0x823fa214
	if (cr6.getEQ()) goto loc_823FA214;
	// cmpwi cr6,r19,112
	cr6.compare<int32_t>(r19.s32, 112, xer);
	// beq cr6,0x823fa214
	if (cr6.getEQ()) goto loc_823FA214;
	// clrlwi r31,r23,16
	r31.u64 = r23.u32 & 0xFFFF;
	// rlwinm. r11,r31,0,16,23
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xFF00;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fa260
	if (!cr0.getEQ()) goto loc_823FA260;
	// clrlwi r3,r31,24
	ctx.r3.u64 = r31.u32 & 0xFF;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa260
	if (cr0.getEQ()) goto loc_823FA260;
	// cmpwi cr6,r19,111
	cr6.compare<int32_t>(r19.s32, 111, xer);
	// bne cr6,0x823fa208
	if (!cr6.getEQ()) goto loc_823FA208;
	// cmplwi cr6,r31,56
	cr6.compare<uint32_t>(r31.u32, 56, xer);
	// bge cr6,0x823fa260
	if (!cr6.getLT()) goto loc_823FA260;
	// ld r11,112(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// rldicr r11,r11,3,60
	r11.u64 = __builtin_rotateleft64(r11.u64, 3) & 0xFFFFFFFFFFFFFFF8;
loc_823FA200:
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// b 0x823fa268
	goto loc_823FA268;
loc_823FA208:
	// ld r11,112(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// mulli r11,r11,10
	r11.s64 = r11.s64 * 10;
	// b 0x823fa200
	goto loc_823FA200;
loc_823FA214:
	// clrlwi r31,r23,16
	r31.u64 = r23.u32 & 0xFFFF;
	// rlwinm. r11,r31,0,16,23
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xFF00;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fa260
	if (!cr0.getEQ()) goto loc_823FA260;
	// clrlwi r30,r31,24
	r30.u64 = r31.u32 & 0xFF;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823f0838
	sub_823F0838(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa260
	if (cr0.getEQ()) goto loc_823FA260;
	// ld r11,112(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rldicr r11,r11,4,59
	r11.u64 = __builtin_rotateleft64(r11.u64, 4) & 0xFFFFFFFFFFFFFFF0;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fa258
	if (!cr0.getEQ()) goto loc_823FA258;
	// rlwinm r11,r31,0,27,25
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xFFFFFFFFFFFFFFDF;
	// addi r31,r11,-7
	r31.s64 = r11.s64 + -7;
loc_823FA258:
	// clrlwi r23,r31,16
	r23.u64 = r31.u32 & 0xFFFF;
	// b 0x823fa268
	goto loc_823FA268;
loc_823FA260:
	// addi r11,r29,1
	r11.s64 = r29.s64 + 1;
	// extsb r26,r11
	r26.s64 = r11.s8;
loc_823FA268:
	// extsb. r11,r26
	r11.s64 = r26.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// bne 0x823fa2b8
	if (!cr0.getEQ()) goto loc_823FA2B8;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// ld r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// beq cr6,0x823fa2a4
	if (cr6.getEQ()) goto loc_823FA2A4;
	// addic. r15,r15,-1
	xer.ca = r15.u32 > 0;
	r15.s64 = r15.s64 + -1;
	cr0.compare<int32_t>(r15.s32, 0, xer);
	// bne 0x823fa2a4
	if (!cr0.getEQ()) goto loc_823FA2A4;
	// li r26,1
	r26.s64 = 1;
	// b 0x823fa2d0
	goto loc_823FA2D0;
loc_823FA2A4:
	// lwz r3,1028(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// b 0x823fa2d0
	goto loc_823FA2D0;
loc_823FA2B8:
	// addi r16,r16,-1
	r16.s64 = r16.s64 + -1;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823fa2d0
	if (cr6.getEQ()) goto loc_823FA2D0;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// lwz r4,1028(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// bl 0x82401630
	sub_82401630(ctx, base);
loc_823FA2D0:
	// extsb. r29,r26
	r29.s64 = r26.s8;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// beq 0x823fa1bc
	if (cr0.getEQ()) goto loc_823FA1BC;
loc_823FA2D8:
	// extsb. r11,r20
	r11.s64 = r20.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fa3fc
	if (cr0.getEQ()) goto loc_823FA3FC;
	// ld r11,112(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// neg r11,r11
	r11.s64 = -r11.s64;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// b 0x823fa3fc
	goto loc_823FA3FC;
loc_823FA2F0:
	// bne 0x823fa3f0
	if (!cr0.getEQ()) goto loc_823FA3F0;
loc_823FA2F4:
	// cmpwi cr6,r19,120
	cr6.compare<int32_t>(r19.s32, 120, xer);
	// beq cr6,0x823fa340
	if (cr6.getEQ()) goto loc_823FA340;
	// cmpwi cr6,r19,112
	cr6.compare<int32_t>(r19.s32, 112, xer);
	// beq cr6,0x823fa340
	if (cr6.getEQ()) goto loc_823FA340;
	// clrlwi r31,r23,16
	r31.u64 = r23.u32 & 0xFFFF;
	// rlwinm. r11,r31,0,16,23
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xFF00;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fa384
	if (!cr0.getEQ()) goto loc_823FA384;
	// clrlwi r3,r31,24
	ctx.r3.u64 = r31.u32 & 0xFF;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa384
	if (cr0.getEQ()) goto loc_823FA384;
	// cmpwi cr6,r19,111
	cr6.compare<int32_t>(r19.s32, 111, xer);
	// bne cr6,0x823fa338
	if (!cr6.getEQ()) goto loc_823FA338;
	// cmplwi cr6,r31,56
	cr6.compare<uint32_t>(r31.u32, 56, xer);
	// bge cr6,0x823fa384
	if (!cr6.getLT()) goto loc_823FA384;
	// rlwinm r22,r22,3,0,28
	r22.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 3) & 0xFFFFFFF8;
	// b 0x823fa38c
	goto loc_823FA38C;
loc_823FA338:
	// mulli r22,r22,10
	r22.s64 = r22.s64 * 10;
	// b 0x823fa38c
	goto loc_823FA38C;
loc_823FA340:
	// clrlwi r31,r23,16
	r31.u64 = r23.u32 & 0xFFFF;
	// rlwinm. r11,r31,0,16,23
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xFF00;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fa384
	if (!cr0.getEQ()) goto loc_823FA384;
	// clrlwi r30,r31,24
	r30.u64 = r31.u32 & 0xFF;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823f0838
	sub_823F0838(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa384
	if (cr0.getEQ()) goto loc_823FA384;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r22,r22,4,0,27
	r22.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 4) & 0xFFFFFFF0;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fa37c
	if (!cr0.getEQ()) goto loc_823FA37C;
	// rlwinm r11,r31,0,27,25
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xFFFFFFFFFFFFFFDF;
	// addi r31,r11,-7
	r31.s64 = r11.s64 + -7;
loc_823FA37C:
	// clrlwi r23,r31,16
	r23.u64 = r31.u32 & 0xFFFF;
	// b 0x823fa38c
	goto loc_823FA38C;
loc_823FA384:
	// addi r11,r29,1
	r11.s64 = r29.s64 + 1;
	// extsb r26,r11
	r26.s64 = r11.s8;
loc_823FA38C:
	// extsb. r11,r26
	r11.s64 = r26.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// bne 0x823fa3d0
	if (!cr0.getEQ()) goto loc_823FA3D0;
	// add r11,r11,r22
	r11.u64 = r11.u64 + r22.u64;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// addi r22,r11,-48
	r22.s64 = r11.s64 + -48;
	// beq cr6,0x823fa3bc
	if (cr6.getEQ()) goto loc_823FA3BC;
	// addic. r15,r15,-1
	xer.ca = r15.u32 > 0;
	r15.s64 = r15.s64 + -1;
	cr0.compare<int32_t>(r15.s32, 0, xer);
	// bne 0x823fa3bc
	if (!cr0.getEQ()) goto loc_823FA3BC;
	// li r26,1
	r26.s64 = 1;
	// b 0x823fa3e8
	goto loc_823FA3E8;
loc_823FA3BC:
	// lwz r3,1028(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// b 0x823fa3e8
	goto loc_823FA3E8;
loc_823FA3D0:
	// addi r16,r16,-1
	r16.s64 = r16.s64 + -1;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823fa3e8
	if (cr6.getEQ()) goto loc_823FA3E8;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// lwz r4,1028(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// bl 0x82401630
	sub_82401630(ctx, base);
loc_823FA3E8:
	// extsb. r29,r26
	r29.s64 = r26.s8;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// beq 0x823fa2f4
	if (cr0.getEQ()) goto loc_823FA2F4;
loc_823FA3F0:
	// extsb. r11,r20
	r11.s64 = r20.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fa3fc
	if (cr0.getEQ()) goto loc_823FA3FC;
	// neg r22,r22
	r22.s64 = -r22.s64;
loc_823FA3FC:
	// cmpwi cr6,r19,70
	cr6.compare<int32_t>(r19.s32, 70, xer);
	// bne cr6,0x823fa408
	if (!cr6.getEQ()) goto loc_823FA408;
	// li r18,0
	r18.s64 = 0;
loc_823FA408:
	// cmpwi cr6,r18,0
	cr6.compare<int32_t>(r18.s32, 0, xer);
	// beq cr6,0x823fa950
	if (cr6.getEQ()) goto loc_823FA950;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823fa8b4
	if (!cr6.getEQ()) goto loc_823FA8B4;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// b 0x823fa448
	goto loc_823FA448;
loc_823FA42C:
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// mr r22,r16
	r22.u64 = r16.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823fa8b4
	if (!cr6.getEQ()) goto loc_823FA8B4;
	// bl 0x823ed4a0
	sub_823ED4A0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa8b4
	if (cr0.getEQ()) goto loc_823FA8B4;
loc_823FA448:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x823fa460
	if (cr6.getEQ()) goto loc_823FA460;
	// ld r11,112(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// std r11,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, r11.u64);
	// b 0x823fa8b4
	goto loc_823FA8B4;
loc_823FA460:
	// extsb. r11,r14
	r11.s64 = r14.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fa474
	if (cr0.getEQ()) goto loc_823FA474;
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r22,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r22.u32);
	// b 0x823fa8b4
	goto loc_823FA8B4;
loc_823FA474:
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// sth r22,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r22.u16);
	// b 0x823fa8b4
	goto loc_823FA8B4;
loc_823FA480:
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// li r31,0
	r31.s64 = 0;
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x823fa4a0
	if (!cr6.getEQ()) goto loc_823FA4A0;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r31,1
	r31.s64 = 1;
	// sth r11,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r11.u16);
	// b 0x823fa4a8
	goto loc_823FA4A8;
loc_823FA4A0:
	// cmplwi cr6,r11,43
	cr6.compare<uint32_t>(r11.u32, 43, xer);
	// bne cr6,0x823fa4bc
	if (!cr6.getEQ()) goto loc_823FA4BC;
loc_823FA4A8:
	// lwz r3,1028(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// addi r15,r15,-1
	r15.s64 = r15.s64 + -1;
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FA4BC:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// bne cr6,0x823fa4c8
	if (!cr6.getEQ()) goto loc_823FA4C8;
	// li r15,-1
	r15.s64 = -1;
loc_823FA4C8:
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// lwz r28,1028(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// rlwinm. r10,r11,0,16,23
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFF00;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823fa54c
	if (!cr0.getEQ()) goto loc_823FA54C;
	// rlwinm r30,r31,1,0,30
	r30.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
loc_823FA4DC:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa54c
	if (cr0.getEQ()) goto loc_823FA54C;
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// addi r15,r15,-1
	r15.s64 = r15.s64 + -1;
	// beq cr6,0x823fa54c
	if (cr6.getEQ()) goto loc_823FA54C;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// extsb r11,r23
	r11.s64 = r23.s8;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r7,r1,104
	ctx.r7.s64 = ctx.r1.s64 + 104;
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// sthx r11,r30,r10
	PPC_STORE_U16(r30.u32 + ctx.r10.u32, r11.u16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// bl 0x823f98d0
	sub_823F98D0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa950
	if (cr0.getEQ()) goto loc_823FA950;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// rlwinm. r10,r11,0,16,23
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFF00;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823fa4dc
	if (cr0.getEQ()) goto loc_823FA4DC;
loc_823FA54C:
	// li r11,46
	r11.s64 = 46;
	// lwz r6,128(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// sth r11,100(r1)
	PPC_STORE_U16(ctx.r1.u32 + 100, r11.u16);
	// lwz r11,0(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	// lwz r10,188(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 188);
	// lwz r5,172(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 172);
	// lwz r4,0(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// bl 0x823ffea8
	sub_823FFEA8(ctx, base);
	// lhz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 100);
	// extsb r11,r23
	r11.s64 = r23.s8;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bne cr6,0x823fa64c
	if (!cr6.getEQ()) goto loc_823FA64C;
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// addi r15,r15,-1
	r15.s64 = r15.s64 + -1;
	// beq cr6,0x823fa64c
	if (cr6.getEQ()) goto loc_823FA64C;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// lhz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 100);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// addi r7,r1,104
	ctx.r7.s64 = ctx.r1.s64 + 104;
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// sthx r10,r11,r9
	PPC_STORE_U16(r11.u32 + ctx.r9.u32, ctx.r10.u16);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f98d0
	sub_823F98D0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa950
	if (cr0.getEQ()) goto loc_823FA950;
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// rlwinm. r10,r11,0,16,23
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFF00;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823fa64c
	if (!cr0.getEQ()) goto loc_823FA64C;
	// rlwinm r30,r31,1,0,30
	r30.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
loc_823FA5E0:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa64c
	if (cr0.getEQ()) goto loc_823FA64C;
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// addi r15,r15,-1
	r15.s64 = r15.s64 + -1;
	// beq cr6,0x823fa64c
	if (cr6.getEQ()) goto loc_823FA64C;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r7,r1,104
	ctx.r7.s64 = ctx.r1.s64 + 104;
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// sthx r23,r30,r11
	PPC_STORE_U16(r30.u32 + r11.u32, r23.u16);
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// bl 0x823f98d0
	sub_823F98D0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa950
	if (cr0.getEQ()) goto loc_823FA950;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// rlwinm. r10,r11,0,16,23
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFF00;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823fa5e0
	if (cr0.getEQ()) goto loc_823FA5E0;
loc_823FA64C:
	// cmpwi cr6,r18,0
	cr6.compare<int32_t>(r18.s32, 0, xer);
	// beq cr6,0x823fa7a4
	if (cr6.getEQ()) goto loc_823FA7A4;
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// cmplwi cr6,r11,101
	cr6.compare<uint32_t>(r11.u32, 101, xer);
	// beq cr6,0x823fa668
	if (cr6.getEQ()) goto loc_823FA668;
	// cmplwi cr6,r11,69
	cr6.compare<uint32_t>(r11.u32, 69, xer);
	// bne cr6,0x823fa7a4
	if (!cr6.getEQ()) goto loc_823FA7A4;
loc_823FA668:
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// addi r29,r15,-1
	r29.s64 = r15.s64 + -1;
	// beq cr6,0x823fa7a4
	if (cr6.getEQ()) goto loc_823FA7A4;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// li r10,101
	ctx.r10.s64 = 101;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r7,r1,104
	ctx.r7.s64 = ctx.r1.s64 + 104;
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// sthx r10,r11,r9
	PPC_STORE_U16(r11.u32 + ctx.r9.u32, ctx.r10.u16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f98d0
	sub_823F98D0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa950
	if (cr0.getEQ()) goto loc_823FA950;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x823fa6fc
	if (!cr6.getEQ()) goto loc_823FA6FC;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// li r9,45
	ctx.r9.s64 = 45;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r7,r1,104
	ctx.r7.s64 = ctx.r1.s64 + 104;
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// sthx r9,r11,r10
	PPC_STORE_U16(r11.u32 + ctx.r10.u32, ctx.r9.u16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f98d0
	sub_823F98D0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa950
	if (cr0.getEQ()) goto loc_823FA950;
	// b 0x823fa704
	goto loc_823FA704;
loc_823FA6FC:
	// cmplwi cr6,r11,43
	cr6.compare<uint32_t>(r11.u32, 43, xer);
	// bne cr6,0x823fa728
	if (!cr6.getEQ()) goto loc_823FA728;
loc_823FA704:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// bne cr6,0x823fa718
	if (!cr6.getEQ()) goto loc_823FA718;
	// li r29,0
	r29.s64 = 0;
	// b 0x823fa728
	goto loc_823FA728;
loc_823FA718:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FA728:
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// rlwinm. r10,r11,0,16,23
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFF00;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823fa7a4
	if (!cr0.getEQ()) goto loc_823FA7A4;
	// rlwinm r30,r31,1,0,30
	r30.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
loc_823FA738:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa7a4
	if (cr0.getEQ()) goto loc_823FA7A4;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// beq cr6,0x823fa7a4
	if (cr6.getEQ()) goto loc_823FA7A4;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r7,r1,104
	ctx.r7.s64 = ctx.r1.s64 + 104;
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// sthx r23,r30,r11
	PPC_STORE_U16(r30.u32 + r11.u32, r23.u16);
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// bl 0x823f98d0
	sub_823F98D0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa950
	if (cr0.getEQ()) goto loc_823FA950;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// rlwinm. r10,r11,0,16,23
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFF00;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823fa738
	if (cr0.getEQ()) goto loc_823FA738;
loc_823FA7A4:
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// addi r16,r16,-1
	r16.s64 = r16.s64 + -1;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823fa7c0
	if (cr6.getEQ()) goto loc_823FA7C0;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82401630
	sub_82401630(ctx, base);
loc_823FA7C0:
	// cmpwi cr6,r18,0
	cr6.compare<int32_t>(r18.s32, 0, xer);
	// beq cr6,0x823fa950
	if (cr6.getEQ()) goto loc_823FA950;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823fa8b4
	if (!cr6.getEQ()) goto loc_823FA8B4;
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// rlwinm r10,r31,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r29,84(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r30,r11,1,0,30
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// sthx r11,r10,r29
	PPC_STORE_U16(ctx.r10.u32 + r29.u32, r11.u16);
	// bl 0x823ed2b0
	sub_823ED2B0(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x823fa950
	if (cr0.getEQ()) goto loc_823FA950;
	// addi r7,r30,-1
	ctx.r7.s64 = r30.s64 + -1;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82401cc8
	sub_82401CC8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fa854
	if (cr0.getEQ()) goto loc_823FA854;
	// cmpwi cr6,r3,22
	cr6.compare<int32_t>(ctx.r3.s32, 22, xer);
	// beq cr6,0x823fa83c
	if (cr6.getEQ()) goto loc_823FA83C;
	// cmpwi cr6,r3,34
	cr6.compare<int32_t>(ctx.r3.s32, 34, xer);
	// bne cr6,0x823fa854
	if (!cr6.getEQ()) goto loc_823FA854;
loc_823FA83C:
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f3cf0
	sub_823F3CF0(ctx, base);
loc_823FA854:
	// lwz r10,140(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// extsb r11,r14
	r11.s64 = r14.s8;
	// lwz r6,128(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// lwz r10,28(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// b 0x823fa8b4
	goto loc_823FA8B4;
loc_823FA884:
	// lhz r11,0(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// clrlwi r10,r23,16
	ctx.r10.u64 = r23.u32 & 0xFFFF;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x823fa938
	if (!cr6.getEQ()) goto loc_823FA938;
	// lbz r11,80(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// bne cr6,0x823fa8b4
	if (!cr6.getEQ()) goto loc_823FA8B4;
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// stw r11,1052(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1052, r11.u32);
loc_823FA8B4:
	// lbz r11,80(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// lwz r10,1036(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1036);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// stw r10,1036(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1036, ctx.r10.u32);
	// b 0x823fa8f8
	goto loc_823FA8F8;
loc_823FA8D0:
	// lwz r3,1028(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// bl 0x824013c0
	sub_824013C0(ctx, base);
	// addi r10,r19,2
	ctx.r10.s64 = r19.s64 + 2;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// lhz r11,0(r19)
	r11.u64 = PPC_LOAD_U16(r19.u32 + 0);
	// stw r10,1036(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1036, ctx.r10.u32);
	// clrlwi r10,r23,16
	ctx.r10.u64 = r23.u32 & 0xFFFF;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x823fa938
	if (!cr6.getEQ()) goto loc_823FA938;
loc_823FA8F8:
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// bne cr6,0x823fa924
	if (!cr6.getEQ()) goto loc_823FA924;
	// lwz r11,1036(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1036);
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// cmplwi cr6,r11,37
	cr6.compare<uint32_t>(r11.u32, 37, xer);
	// bne cr6,0x823fa950
	if (!cr6.getEQ()) goto loc_823FA950;
	// lwz r11,1036(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1036);
	// lhz r11,2(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// cmplwi cr6,r11,110
	cr6.compare<uint32_t>(r11.u32, 110, xer);
	// bne cr6,0x823fa950
	if (!cr6.getEQ()) goto loc_823FA950;
loc_823FA924:
	// lwz r11,1036(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1036);
	// lhz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x823f9a1c
	if (!cr0.getEQ()) goto loc_823F9A1C;
	// b 0x823fa950
	goto loc_823FA950;
loc_823FA938:
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823fa950
	if (cr6.getEQ()) goto loc_823FA950;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// lwz r4,1028(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// bl 0x82401630
	sub_82401630(ctx, base);
loc_823FA950:
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x823fa964
	if (!cr6.getEQ()) goto loc_823FA964;
	// lwz r3,120(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823FA964:
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x823fa978
	if (!cr6.getEQ()) goto loc_823FA978;
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823FA978:
	// clrlwi r11,r23,16
	r11.u64 = r23.u32 & 0xFFFF;
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// bne cr6,0x823fa9a0
	if (!cr6.getEQ()) goto loc_823FA9A0;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x823fa9a0
	if (!cr6.getEQ()) goto loc_823FA9A0;
	// lbz r11,80(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x823fa9a0
	if (!cr0.getEQ()) goto loc_823FA9A0;
loc_823FA99C:
	// li r3,-1
	ctx.r3.s64 = -1;
loc_823FA9A0:
	// addi r1,r1,1008
	ctx.r1.s64 = ctx.r1.s64 + 1008;
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_823FA9A8"))) PPC_WEAK_FUNC(sub_823FA9A8);
PPC_FUNC_IMPL(__imp__sub_823FA9A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
	// li r27,0
	r27.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// mr r30,r27
	r30.u64 = r27.u64;
	// bl 0x823faae0
	sub_823FAAE0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// rlwinm. r11,r31,0,29,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823faa04
	if (cr0.getEQ()) goto loc_823FAA04;
	// li r30,512
	r30.s64 = 512;
	// stw r27,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r27.u32);
	// stw r27,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r27.u32);
	// b 0x823faa38
	goto loc_823FAA38;
loc_823FAA04:
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82400300
	sub_82400300(ctx, base);
	// rlwinm. r11,r31,0,30,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823faa20
	if (!cr0.getEQ()) goto loc_823FAA20;
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x823faa24
	if (!cr6.getEQ()) goto loc_823FAA24;
loc_823FAA20:
	// li r30,128
	r30.s64 = 128;
loc_823FAA24:
	// clrlwi. r11,r31,31
	r11.u64 = r31.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823faa34
	if (!cr0.getEQ()) goto loc_823FAA34;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x823faa38
	if (!cr6.getEQ()) goto loc_823FAA38;
loc_823FAA34:
	// ori r30,r30,256
	r30.u64 = r30.u64 | 256;
loc_823FAA38:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// ld r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// subf r11,r28,r11
	r11.s64 = r11.s64 - r28.s64;
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// std r10,16(r29)
	PPC_STORE_U64(r29.u32 + 16, ctx.r10.u64);
	// stw r11,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_823FAA60"))) PPC_WEAK_FUNC(sub_823FAA60);
PPC_FUNC_IMPL(__imp__sub_823FAA60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// clrlwi r11,r3,16
	r11.u64 = ctx.r3.u32 & 0xFFFF;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823faa90
	if (cr6.getEQ()) goto loc_823FAA90;
	// cmplwi cr6,r11,256
	cr6.compare<uint32_t>(r11.u32, 256, xer);
	// bge cr6,0x823faa90
	if (!cr6.getLT()) goto loc_823FAA90;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// clrlwi r9,r4,16
	ctx.r9.u64 = ctx.r4.u32 & 0xFFFF;
	// lwz r11,-17320(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -17320);
	// lhzx r11,r10,r11
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// and r11,r11,r9
	r11.u64 = r11.u64 & ctx.r9.u64;
	// b 0x823faa94
	goto loc_823FAA94;
loc_823FAA90:
	// li r11,0
	r11.s64 = 0;
loc_823FAA94:
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// clrlwi r10,r4,16
	ctx.r10.u64 = ctx.r4.u32 & 0xFFFF;
	// and r3,r11,r10
	ctx.r3.u64 = r11.u64 & ctx.r10.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FAAA8"))) PPC_WEAK_FUNC(sub_823FAAA8);
PPC_FUNC_IMPL(__imp__sub_823FAAA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// clrlwi r11,r3,16
	r11.u64 = ctx.r3.u32 & 0xFFFF;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beq cr6,0x823faad8
	if (cr6.getEQ()) goto loc_823FAAD8;
	// cmplwi cr6,r11,256
	cr6.compare<uint32_t>(r11.u32, 256, xer);
	// bge cr6,0x823faad8
	if (!cr6.getLT()) goto loc_823FAAD8;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// clrlwi r9,r4,16
	ctx.r9.u64 = ctx.r4.u32 & 0xFFFF;
	// lwz r11,-17320(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -17320);
	// lhzx r11,r10,r11
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// and r3,r11,r9
	ctx.r3.u64 = r11.u64 & ctx.r9.u64;
	// blr 
	return;
loc_823FAAD8:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FAAE0"))) PPC_WEAK_FUNC(sub_823FAAE0);
PPC_FUNC_IMPL(__imp__sub_823FAAE0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed10c
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r21,0
	r21.s64 = 0;
	// mr r19,r3
	r19.u64 = ctx.r3.u64;
	// mr r23,r6
	r23.u64 = ctx.r6.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r18,r21
	r18.u64 = r21.u64;
	// li r27,1
	r27.s64 = 1;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// mr r30,r21
	r30.u64 = r21.u64;
	// mr r26,r21
	r26.u64 = r21.u64;
	// mr r28,r21
	r28.u64 = r21.u64;
	// mr r29,r21
	r29.u64 = r21.u64;
	// mr r31,r21
	r31.u64 = r21.u64;
	// mr r11,r21
	r11.u64 = r21.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x823fab60
	if (!cr6.getEQ()) goto loc_823FAB60;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x823fb45c
	goto loc_823FB45C;
loc_823FAB60:
	// mr r8,r5
	ctx.r8.u64 = ctx.r5.u64;
loc_823FAB64:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// cmplwi cr6,r10,32
	cr6.compare<uint32_t>(ctx.r10.u32, 32, xer);
	// beq cr6,0x823fab88
	if (cr6.getEQ()) goto loc_823FAB88;
	// cmplwi cr6,r10,9
	cr6.compare<uint32_t>(ctx.r10.u32, 9, xer);
	// beq cr6,0x823fab88
	if (cr6.getEQ()) goto loc_823FAB88;
	// cmplwi cr6,r10,10
	cr6.compare<uint32_t>(ctx.r10.u32, 10, xer);
	// beq cr6,0x823fab88
	if (cr6.getEQ()) goto loc_823FAB88;
	// cmplwi cr6,r10,13
	cr6.compare<uint32_t>(ctx.r10.u32, 13, xer);
	// bne cr6,0x823fab90
	if (!cr6.getEQ()) goto loc_823FAB90;
loc_823FAB88:
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// b 0x823fab64
	goto loc_823FAB64;
loc_823FAB90:
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// lis r7,0
	ctx.r7.s64 = 0;
	// ori r20,r7,32768
	r20.u64 = ctx.r7.u64 | 32768;
	// lwz r7,-18664(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18664);
loc_823FABA0:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// cmplwi cr6,r11,11
	cr6.compare<uint32_t>(r11.u32, 11, xer);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// bgt cr6,0x823faf20
	if (cr6.getGT()) goto loc_823FAF20;
	// lis r12,-32249
	r12.s64 = -2113470464;
	// addi r12,r12,11952
	r12.s64 = r12.s64 + 11952;
	// lbzx r0,r12,r11
	r0.u64 = PPC_LOAD_U8(r12.u32 + r11.u32);
	// rlwinm r0,r0,2,0,29
	r0.u64 = __builtin_rotateleft64(r0.u32 | (r0.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r12,-32192
	r12.s64 = -2109734912;
	// addi r12,r12,-21544
	r12.s64 = r12.s64 + -21544;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_823FABD8;
	case 1:
		goto loc_823FAC4C;
	case 2:
		goto loc_823FACC8;
	case 3:
		goto loc_823FAD44;
	case 4:
		goto loc_823FADB8;
	case 5:
		goto loc_823FAE30;
	case 6:
		goto loc_823FAE50;
	case 7:
		goto loc_823FAED4;
	case 8:
		goto loc_823FAE98;
	case 9:
		goto loc_823FAF2C;
	case 10:
		goto loc_823FAF20;
	case 11:
		goto loc_823FAEEC;
	default:
		__builtin_unreachable();
	}
loc_823FABD8:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// blt cr6,0x823fabf8
	if (cr6.getLT()) goto loc_823FABF8;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x823fabf8
	if (cr6.getGT()) goto loc_823FABF8;
loc_823FABEC:
	// li r11,3
	r11.s64 = 3;
loc_823FABF0:
	// addi r8,r8,-2
	ctx.r8.s64 = ctx.r8.s64 + -2;
	// b 0x823faba0
	goto loc_823FABA0;
loc_823FABF8:
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bne cr6,0x823fac14
	if (!cr6.getEQ()) goto loc_823FAC14;
loc_823FAC0C:
	// li r11,5
	r11.s64 = 5;
	// b 0x823faba0
	goto loc_823FABA0;
loc_823FAC14:
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x823fac40
	if (cr6.getEQ()) goto loc_823FAC40;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x823fac34
	if (cr6.getEQ()) goto loc_823FAC34;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// bne cr6,0x823faecc
	if (!cr6.getEQ()) goto loc_823FAECC;
loc_823FAC2C:
	// li r11,1
	r11.s64 = 1;
	// b 0x823faba0
	goto loc_823FABA0;
loc_823FAC34:
	// li r11,2
	r11.s64 = 2;
	// mr r18,r20
	r18.u64 = r20.u64;
	// b 0x823faba0
	goto loc_823FABA0;
loc_823FAC40:
	// li r11,2
	r11.s64 = 2;
	// mr r18,r21
	r18.u64 = r21.u64;
	// b 0x823faba0
	goto loc_823FABA0;
loc_823FAC4C:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// li r30,1
	r30.s64 = 1;
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// blt cr6,0x823fac64
	if (cr6.getLT()) goto loc_823FAC64;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// ble cr6,0x823fabec
	if (!cr6.getGT()) goto loc_823FABEC;
loc_823FAC64:
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bne cr6,0x823fac80
	if (!cr6.getEQ()) goto loc_823FAC80;
loc_823FAC78:
	// li r11,4
	r11.s64 = 4;
	// b 0x823faba0
	goto loc_823FABA0;
loc_823FAC80:
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x823facbc
	if (cr6.getEQ()) goto loc_823FACBC;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x823facbc
	if (cr6.getEQ()) goto loc_823FACBC;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// beq cr6,0x823fac2c
	if (cr6.getEQ()) goto loc_823FAC2C;
loc_823FAC98:
	// cmpwi cr6,r11,67
	cr6.compare<int32_t>(r11.s32, 67, xer);
	// ble cr6,0x823faecc
	if (!cr6.getGT()) goto loc_823FAECC;
	// cmpwi cr6,r11,69
	cr6.compare<int32_t>(r11.s32, 69, xer);
	// ble cr6,0x823facb4
	if (!cr6.getGT()) goto loc_823FACB4;
	// addi r11,r11,-100
	r11.s64 = r11.s64 + -100;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bgt cr6,0x823faecc
	if (cr6.getGT()) goto loc_823FAECC;
loc_823FACB4:
	// li r11,6
	r11.s64 = 6;
	// b 0x823faba0
	goto loc_823FABA0;
loc_823FACBC:
	// addi r8,r8,-2
	ctx.r8.s64 = ctx.r8.s64 + -2;
	// li r11,11
	r11.s64 = 11;
	// b 0x823faba0
	goto loc_823FABA0;
loc_823FACC8:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// blt cr6,0x823facdc
	if (cr6.getLT()) goto loc_823FACDC;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// ble cr6,0x823fabec
	if (!cr6.getGT()) goto loc_823FABEC;
loc_823FACDC:
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x823fac0c
	if (cr6.getEQ()) goto loc_823FAC0C;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// beq cr6,0x823fac2c
	if (cr6.getEQ()) goto loc_823FAC2C;
loc_823FACF8:
	// mr r8,r5
	ctx.r8.u64 = ctx.r5.u64;
loc_823FACFC:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// stw r8,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r8.u32);
	// beq cr6,0x823fb3f8
	if (cr6.getEQ()) goto loc_823FB3F8;
	// cmplwi cr6,r6,24
	cr6.compare<uint32_t>(ctx.r6.u32, 24, xer);
	// ble cr6,0x823fad34
	if (!cr6.getGT()) goto loc_823FAD34;
	// lbz r11,151(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 151);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// blt cr6,0x823fad28
	if (cr6.getLT()) goto loc_823FAD28;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stb r11,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, r11.u8);
loc_823FAD28:
	// li r6,24
	ctx.r6.s64 = 24;
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_823FAD34:
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x823fb3e4
	if (cr6.getEQ()) goto loc_823FB3E4;
	// addi r11,r3,-1
	r11.s64 = ctx.r3.s64 + -1;
	// b 0x823fafa8
	goto loc_823FAFA8;
loc_823FAD44:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// li r30,1
	r30.s64 = 1;
	// b 0x823fad84
	goto loc_823FAD84;
loc_823FAD50:
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x823fad8c
	if (cr6.getGT()) goto loc_823FAD8C;
	// cmplwi cr6,r6,25
	cr6.compare<uint32_t>(ctx.r6.u32, 25, xer);
	// bge cr6,0x823fad74
	if (!cr6.getLT()) goto loc_823FAD74;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// stb r11,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, r11.u8);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// b 0x823fad78
	goto loc_823FAD78;
loc_823FAD74:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_823FAD78:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_823FAD84:
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bge cr6,0x823fad50
	if (!cr6.getLT()) goto loc_823FAD50;
loc_823FAD8C:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x823fac78
	if (cr6.getEQ()) goto loc_823FAC78;
loc_823FADA4:
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x823facbc
	if (cr6.getEQ()) goto loc_823FACBC;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x823facbc
	if (cr6.getEQ()) goto loc_823FACBC;
	// b 0x823fac98
	goto loc_823FAC98;
loc_823FADB8:
	// li r30,1
	r30.s64 = 1;
	// li r26,1
	r26.s64 = 1;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x823fade8
	if (!cr6.getEQ()) goto loc_823FADE8;
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bne cr6,0x823fade8
	if (!cr6.getEQ()) goto loc_823FADE8;
loc_823FADD4:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// cmplwi cr6,r10,48
	cr6.compare<uint32_t>(ctx.r10.u32, 48, xer);
	// beq cr6,0x823fadd4
	if (cr6.getEQ()) goto loc_823FADD4;
loc_823FADE8:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// b 0x823fae20
	goto loc_823FAE20;
loc_823FADF0:
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x823fae28
	if (cr6.getGT()) goto loc_823FAE28;
	// cmplwi cr6,r6,25
	cr6.compare<uint32_t>(ctx.r6.u32, 25, xer);
	// bge cr6,0x823fae14
	if (!cr6.getLT()) goto loc_823FAE14;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// stb r11,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, r11.u8);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_823FAE14:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_823FAE20:
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bge cr6,0x823fadf0
	if (!cr6.getLT()) goto loc_823FADF0;
loc_823FAE28:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// b 0x823fada4
	goto loc_823FADA4;
loc_823FAE30:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// li r26,1
	r26.s64 = 1;
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// blt cr6,0x823facf8
	if (cr6.getLT()) goto loc_823FACF8;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x823facf8
	if (cr6.getGT()) goto loc_823FACF8;
	// li r11,4
	r11.s64 = 4;
	// b 0x823fabf0
	goto loc_823FABF0;
loc_823FAE50:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// addi r5,r8,-4
	ctx.r5.s64 = ctx.r8.s64 + -4;
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// blt cr6,0x823fae70
	if (cr6.getLT()) goto loc_823FAE70;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x823fae70
	if (cr6.getGT()) goto loc_823FAE70;
loc_823FAE68:
	// li r11,9
	r11.s64 = 9;
	// b 0x823fabf0
	goto loc_823FABF0;
loc_823FAE70:
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x823fae90
	if (cr6.getEQ()) goto loc_823FAE90;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x823faf0c
	if (cr6.getEQ()) goto loc_823FAF0C;
loc_823FAE80:
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// bne cr6,0x823facf8
	if (!cr6.getEQ()) goto loc_823FACF8;
	// li r11,8
	r11.s64 = 8;
	// b 0x823faba0
	goto loc_823FABA0;
loc_823FAE90:
	// li r11,7
	r11.s64 = 7;
	// b 0x823faba0
	goto loc_823FABA0;
loc_823FAE98:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// li r28,1
	r28.s64 = 1;
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bne cr6,0x823faeb8
	if (!cr6.getEQ()) goto loc_823FAEB8;
loc_823FAEA8:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// cmplwi cr6,r10,48
	cr6.compare<uint32_t>(ctx.r10.u32, 48, xer);
	// beq cr6,0x823faea8
	if (cr6.getEQ()) goto loc_823FAEA8;
loc_823FAEB8:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// blt cr6,0x823faecc
	if (cr6.getLT()) goto loc_823FAECC;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// ble cr6,0x823fae68
	if (!cr6.getGT()) goto loc_823FAE68;
loc_823FAECC:
	// addi r8,r8,-2
	ctx.r8.s64 = ctx.r8.s64 + -2;
	// b 0x823facfc
	goto loc_823FACFC;
loc_823FAED4:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// blt cr6,0x823fae80
	if (cr6.getLT()) goto loc_823FAE80;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// ble cr6,0x823fae68
	if (!cr6.getGT()) goto loc_823FAE68;
	// b 0x823fae80
	goto loc_823FAE80;
loc_823FAEEC:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x823faf18
	if (cr6.getEQ()) goto loc_823FAF18;
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// addi r5,r8,-2
	ctx.r5.s64 = ctx.r8.s64 + -2;
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x823fae90
	if (cr6.getEQ()) goto loc_823FAE90;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// bne cr6,0x823facf8
	if (!cr6.getEQ()) goto loc_823FACF8;
loc_823FAF0C:
	// li r11,7
	r11.s64 = 7;
	// li r27,-1
	r27.s64 = -1;
	// b 0x823faba0
	goto loc_823FABA0;
loc_823FAF18:
	// li r11,10
	r11.s64 = 10;
	// addi r8,r8,-2
	ctx.r8.s64 = ctx.r8.s64 + -2;
loc_823FAF20:
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bne cr6,0x823faba0
	if (!cr6.getEQ()) goto loc_823FABA0;
	// b 0x823facfc
	goto loc_823FACFC;
loc_823FAF2C:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// li r28,1
	r28.s64 = 1;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// b 0x823faf64
	goto loc_823FAF64;
loc_823FAF3C:
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x823faf74
	if (cr6.getGT()) goto loc_823FAF74;
	// mulli r9,r9,10
	ctx.r9.s64 = ctx.r9.s64 * 10;
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// addi r9,r11,-48
	ctx.r9.s64 = r11.s64 + -48;
	// cmpwi cr6,r9,5200
	cr6.compare<int32_t>(ctx.r9.s32, 5200, xer);
	// bgt cr6,0x823faf70
	if (cr6.getGT()) goto loc_823FAF70;
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_823FAF64:
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bge cr6,0x823faf3c
	if (!cr6.getLT()) goto loc_823FAF3C;
	// b 0x823faf74
	goto loc_823FAF74;
loc_823FAF70:
	// li r9,5201
	ctx.r9.s64 = 5201;
loc_823FAF74:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// mr r29,r9
	r29.u64 = ctx.r9.u64;
	// b 0x823faf90
	goto loc_823FAF90;
loc_823FAF80:
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x823faecc
	if (cr6.getGT()) goto loc_823FAECC;
	// lhz r11,0(r8)
	r11.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
loc_823FAF90:
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bge cr6,0x823faf80
	if (!cr6.getLT()) goto loc_823FAF80;
	// b 0x823faecc
	goto loc_823FAECC;
loc_823FAF9C:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_823FAFA8:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x823faf9c
	if (cr6.getEQ()) goto loc_823FAF9C;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82401130
	sub_82401130(ctx, base);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bge cr6,0x823fafd0
	if (!cr6.getLT()) goto loc_823FAFD0;
	// neg r29,r29
	r29.s64 = -r29.s64;
loc_823FAFD0:
	// add r11,r31,r29
	r11.u64 = r31.u64 + r29.u64;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bne cr6,0x823fafe0
	if (!cr6.getEQ()) goto loc_823FAFE0;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
loc_823FAFE0:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bne cr6,0x823fafec
	if (!cr6.getEQ()) goto loc_823FAFEC;
	// subf r11,r24,r11
	r11.s64 = r11.s64 - r24.s64;
loc_823FAFEC:
	// cmpwi cr6,r11,5200
	cr6.compare<int32_t>(r11.s32, 5200, xer);
	// bgt cr6,0x823fb410
	if (cr6.getGT()) goto loc_823FB410;
	// cmpwi cr6,r11,-5200
	cr6.compare<int32_t>(r11.s32, -5200, xer);
	// blt cr6,0x823fb428
	if (cr6.getLT()) goto loc_823FB428;
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// mr r24,r11
	r24.u64 = r11.u64;
	// addi r10,r10,-17264
	ctx.r10.s64 = ctx.r10.s64 + -17264;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// addi r25,r10,-96
	r25.s64 = ctx.r10.s64 + -96;
	// beq cr6,0x823fb3d0
	if (cr6.getEQ()) goto loc_823FB3D0;
	// bge cr6,0x823fb028
	if (!cr6.getLT()) goto loc_823FB028;
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// neg r24,r11
	r24.s64 = -r11.s64;
	// addi r10,r10,-16912
	ctx.r10.s64 = ctx.r10.s64 + -16912;
	// addi r25,r10,-96
	r25.s64 = ctx.r10.s64 + -96;
loc_823FB028:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// bne cr6,0x823fb034
	if (!cr6.getEQ()) goto loc_823FB034;
	// sth r21,106(r1)
	PPC_STORE_U16(ctx.r1.u32 + 106, r21.u16);
loc_823FB034:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x823fb3d0
	if (cr6.getEQ()) goto loc_823FB3D0;
	// lis r11,0
	r11.s64 = 0;
	// lis r22,-32768
	r22.s64 = -2147483648;
	// ori r26,r11,65535
	r26.u64 = r11.u64 | 65535;
	// lis r11,32767
	r11.s64 = 2147418112;
	// li r23,-32768
	r23.s64 = -32768;
	// ori r17,r11,32768
	r17.u64 = r11.u64 | 32768;
loc_823FB054:
	// clrlwi. r11,r24,29
	r11.u64 = r24.u32 & 0x7;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r25,r25,84
	r25.s64 = r25.s64 + 84;
	// srawi r24,r24,3
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x7) != 0);
	r24.s64 = r24.s32 >> 3;
	// beq 0x823fb3c8
	if (cr0.getEQ()) goto loc_823FB3C8;
	// mulli r11,r11,12
	r11.s64 = r11.s64 * 12;
	// add r4,r11,r25
	ctx.r4.u64 = r11.u64 + r25.u64;
	// lhz r11,10(r4)
	r11.u64 = PPC_LOAD_U16(ctx.r4.u32 + 10);
	// cmplwi cr6,r11,32768
	cr6.compare<uint32_t>(r11.u32, 32768, xer);
	// blt cr6,0x823fb094
	if (cr6.getLT()) goto loc_823FB094;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// li r5,12
	ctx.r5.s64 = 12;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lwz r11,118(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 118);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,118(r1)
	PPC_STORE_U32(ctx.r1.u32 + 118, r11.u32);
loc_823FB094:
	// stw r21,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r21.u32);
	// mr r28,r21
	r28.u64 = r21.u64;
	// stw r21,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r21.u32);
	// stw r21,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r21.u32);
	// lhz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// lhz r11,96(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 96);
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// xor r10,r11,r10
	ctx.r10.u64 = r11.u64 ^ ctx.r10.u64;
	// clrlwi r11,r11,17
	r11.u64 = r11.u32 & 0x7FFF;
	// rlwinm r27,r10,0,16,16
	r27.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x8000;
	// clrlwi r10,r8,17
	ctx.r10.u64 = ctx.r8.u32 & 0x7FFF;
	// cmplwi cr6,r11,32767
	cr6.compare<uint32_t>(r11.u32, 32767, xer);
	// add r9,r11,r10
	ctx.r9.u64 = r11.u64 + ctx.r10.u64;
	// clrlwi r29,r9,16
	r29.u64 = ctx.r9.u32 & 0xFFFF;
	// bge cr6,0x823fb3b0
	if (!cr6.getLT()) goto loc_823FB3B0;
	// cmplwi cr6,r10,32767
	cr6.compare<uint32_t>(ctx.r10.u32, 32767, xer);
	// bge cr6,0x823fb3b0
	if (!cr6.getLT()) goto loc_823FB3B0;
	// clrlwi r9,r29,16
	ctx.r9.u64 = r29.u32 & 0xFFFF;
	// cmplwi cr6,r9,49149
	cr6.compare<uint32_t>(ctx.r9.u32, 49149, xer);
	// bgt cr6,0x823fb3b0
	if (cr6.getGT()) goto loc_823FB3B0;
	// cmplwi cr6,r9,16319
	cr6.compare<uint32_t>(ctx.r9.u32, 16319, xer);
	// bgt cr6,0x823fb0f4
	if (cr6.getGT()) goto loc_823FB0F4;
loc_823FB0EC:
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r21.u32);
	// b 0x823fb3c0
	goto loc_823FB3C0;
loc_823FB0F4:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fb130
	if (!cr6.getEQ()) goto loc_823FB130;
	// addi r11,r9,1
	r11.s64 = ctx.r9.s64 + 1;
	// lwz r9,96(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// clrlwi r29,r11,16
	r29.u64 = r11.u32 & 0xFFFF;
	// clrlwi. r9,r9,1
	ctx.r9.u64 = ctx.r9.u32 & 0x7FFFFFFF;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x823fb130
	if (!cr0.getEQ()) goto loc_823FB130;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fb130
	if (!cr6.getEQ()) goto loc_823FB130;
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fb130
	if (!cr6.getEQ()) goto loc_823FB130;
	// sth r21,96(r1)
	PPC_STORE_U16(ctx.r1.u32 + 96, r21.u16);
	// b 0x823fb3c8
	goto loc_823FB3C8;
loc_823FB130:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x823fb168
	if (!cr6.getEQ()) goto loc_823FB168;
	// lwz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// clrlwi r11,r29,16
	r11.u64 = r29.u32 & 0xFFFF;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r29,r11,16
	r29.u64 = r11.u32 & 0xFFFF;
	// clrlwi. r10,r10,1
	ctx.r10.u64 = ctx.r10.u32 & 0x7FFFFFFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823fb168
	if (!cr0.getEQ()) goto loc_823FB168;
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fb168
	if (!cr6.getEQ()) goto loc_823FB168;
	// lwz r11,8(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823fb0ec
	if (cr6.getEQ()) goto loc_823FB0EC;
loc_823FB168:
	// mr r30,r21
	r30.u64 = r21.u64;
	// addi r8,r1,86
	ctx.r8.s64 = ctx.r1.s64 + 86;
	// li r3,5
	ctx.r3.s64 = 5;
loc_823FB174:
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x823fb1e4
	if (!cr6.getGT()) goto loc_823FB1E4;
	// addi r10,r1,106
	ctx.r10.s64 = ctx.r1.s64 + 106;
	// addi r5,r4,2
	ctx.r5.s64 = ctx.r4.s64 + 2;
	// subf r6,r11,r10
	ctx.r6.s64 = ctx.r10.s64 - r11.s64;
loc_823FB190:
	// lhz r10,0(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + 0);
	// mr r7,r21
	ctx.r7.u64 = r21.u64;
	// lhz r9,0(r6)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r6.u32 + 0);
	// lwz r11,2(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 2);
	// mullw r9,r10,r9
	ctx.r9.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r9.s32);
	// add r10,r11,r9
	ctx.r10.u64 = r11.u64 + ctx.r9.u64;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x823fb1b8
	if (cr6.getLT()) goto loc_823FB1B8;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bge cr6,0x823fb1bc
	if (!cr6.getLT()) goto loc_823FB1BC;
loc_823FB1B8:
	// li r7,1
	ctx.r7.s64 = 1;
loc_823FB1BC:
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// stw r10,2(r8)
	PPC_STORE_U32(ctx.r8.u32 + 2, ctx.r10.u32);
	// beq cr6,0x823fb1d4
	if (cr6.getEQ()) goto loc_823FB1D4;
	// lhz r11,0(r8)
	r11.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// sth r11,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, r11.u16);
loc_823FB1D4:
	// addic. r31,r31,-1
	xer.ca = r31.u32 > 0;
	r31.s64 = r31.s64 + -1;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// addi r6,r6,-2
	ctx.r6.s64 = ctx.r6.s64 + -2;
	// addi r5,r5,2
	ctx.r5.s64 = ctx.r5.s64 + 2;
	// bgt 0x823fb190
	if (cr0.getGT()) goto loc_823FB190;
loc_823FB1E4:
	// addic. r3,r3,-1
	xer.ca = ctx.r3.u32 > 0;
	ctx.r3.s64 = ctx.r3.s64 + -1;
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// addi r8,r8,-2
	ctx.r8.s64 = ctx.r8.s64 + -2;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// bgt 0x823fb174
	if (cr0.getGT()) goto loc_823FB174;
	// clrlwi r11,r29,16
	r11.u64 = r29.u32 & 0xFFFF;
	// addis r11,r11,1
	r11.s64 = r11.s64 + 65536;
	// addi r11,r11,-16382
	r11.s64 = r11.s64 + -16382;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// extsh. r10,r11
	ctx.r10.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// ble 0x823fb25c
	if (!cr0.getGT()) goto loc_823FB25C;
loc_823FB210:
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm. r9,r6,0,0,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x823fb25c
	if (!cr0.getEQ()) goto loc_823FB25C;
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// rlwinm r8,r7,1,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0x1;
	// rlwinm r7,r7,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// or r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 | ctx.r9.u64;
	// rlwinm r6,r6,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// or r9,r6,r8
	ctx.r9.u64 = ctx.r6.u64 | ctx.r8.u64;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// extsh. r9,r11
	ctx.r9.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bgt 0x823fb210
	if (cr0.getGT()) goto loc_823FB210;
loc_823FB25C:
	// extsh. r9,r11
	ctx.r9.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bgt 0x823fb2fc
	if (cr0.getGT()) goto loc_823FB2FC;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// extsh. r9,r11
	ctx.r9.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bge 0x823fb2fc
	if (!cr0.getLT()) goto loc_823FB2FC;
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_823FB280:
	// lhz r9,90(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 90);
	// clrlwi. r9,r9,31
	ctx.r9.u64 = ctx.r9.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x823fb290
	if (cr0.getEQ()) goto loc_823FB290;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_823FB290:
	// clrlwi. r9,r6,31
	ctx.r9.u64 = ctx.r6.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r8,r22
	ctx.r8.u64 = r22.u64;
	// bne 0x823fb2a0
	if (!cr0.getEQ()) goto loc_823FB2A0;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
loc_823FB2A0:
	// clrlwi. r9,r7,31
	ctx.r9.u64 = ctx.r7.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r9,r22
	ctx.r9.u64 = r22.u64;
	// bne 0x823fb2b0
	if (!cr0.getEQ()) goto loc_823FB2B0;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
loc_823FB2B0:
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// rlwinm r7,r7,31,1,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r6,r6,31,1,31
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 31) & 0x7FFFFFFF;
	// or r7,r7,r8
	ctx.r7.u64 = ctx.r7.u64 | ctx.r8.u64;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// extsh. r9,r11
	ctx.r9.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt 0x823fb280
	if (cr0.getLT()) goto loc_823FB280;
	// stw r7,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r7.u32);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// stw r6,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r6.u32);
	// beq cr6,0x823fb2fc
	if (cr6.getEQ()) goto loc_823FB2FC;
	// lhz r10,90(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 90);
	// ori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 | 1;
	// sth r10,90(r1)
	PPC_STORE_U16(ctx.r1.u32 + 90, ctx.r10.u16);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_823FB2FC:
	// lhz r9,90(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 90);
	// cmplwi cr6,r9,32768
	cr6.compare<uint32_t>(ctx.r9.u32, 32768, xer);
	// bgt cr6,0x823fb31c
	if (cr6.getGT()) goto loc_823FB31C;
	// lis r9,1
	ctx.r9.s64 = 65536;
	// clrlwi r10,r10,15
	ctx.r10.u64 = ctx.r10.u32 & 0x1FFFF;
	// ori r9,r9,32768
	ctx.r9.u64 = ctx.r9.u64 | 32768;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bne cr6,0x823fb37c
	if (!cr6.getEQ()) goto loc_823FB37C;
loc_823FB31C:
	// lwz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 86);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// bne cr6,0x823fb374
	if (!cr6.getEQ()) goto loc_823FB374;
	// lwz r10,82(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 82);
	// stw r21,86(r1)
	PPC_STORE_U32(ctx.r1.u32 + 86, r21.u32);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// bne cr6,0x823fb368
	if (!cr6.getEQ()) goto loc_823FB368;
	// lhz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// stw r21,82(r1)
	PPC_STORE_U32(ctx.r1.u32 + 82, r21.u32);
	// cmplwi cr6,r10,65535
	cr6.compare<uint32_t>(ctx.r10.u32, 65535, xer);
	// bne cr6,0x823fb35c
	if (!cr6.getEQ()) goto loc_823FB35C;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// sth r20,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, r20.u16);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// b 0x823fb37c
	goto loc_823FB37C;
loc_823FB35C:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// sth r10,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, ctx.r10.u16);
	// b 0x823fb37c
	goto loc_823FB37C;
loc_823FB368:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,82(r1)
	PPC_STORE_U32(ctx.r1.u32 + 82, ctx.r10.u32);
	// b 0x823fb37c
	goto loc_823FB37C;
loc_823FB374:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,86(r1)
	PPC_STORE_U32(ctx.r1.u32 + 86, ctx.r10.u32);
loc_823FB37C:
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// cmplwi cr6,r11,32767
	cr6.compare<uint32_t>(r11.u32, 32767, xer);
	// bge cr6,0x823fb3b0
	if (!cr6.getLT()) goto loc_823FB3B0;
	// clrlwi r10,r27,16
	ctx.r10.u64 = r27.u32 & 0xFFFF;
	// lhz r9,88(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 88);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// sth r9,106(r1)
	PPC_STORE_U16(ctx.r1.u32 + 106, ctx.r9.u16);
	// stw r10,102(r1)
	PPC_STORE_U32(ctx.r1.u32 + 102, ctx.r10.u32);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// sth r11,96(r1)
	PPC_STORE_U16(ctx.r1.u32 + 96, r11.u16);
	// stw r10,98(r1)
	PPC_STORE_U32(ctx.r1.u32 + 98, ctx.r10.u32);
	// b 0x823fb3c8
	goto loc_823FB3C8;
loc_823FB3B0:
	// stw r23,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r23.u32);
	// clrlwi. r11,r27,16
	r11.u64 = r27.u32 & 0xFFFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fb3c0
	if (!cr0.getEQ()) goto loc_823FB3C0;
	// stw r17,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r17.u32);
loc_823FB3C0:
	// stw r21,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r21.u32);
	// stw r21,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r21.u32);
loc_823FB3C8:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// bne cr6,0x823fb054
	if (!cr6.getEQ()) goto loc_823FB054;
loc_823FB3D0:
	// lhz r11,106(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 106);
	// lwz r8,102(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 102);
	// lwz r9,98(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 98);
	// lhz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 96);
	// b 0x823fb43c
	goto loc_823FB43C;
loc_823FB3E4:
	// mr r11,r21
	r11.u64 = r21.u64;
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// b 0x823fb43c
	goto loc_823FB43C;
loc_823FB3F8:
	// mr r11,r21
	r11.u64 = r21.u64;
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// li r21,4
	r21.s64 = 4;
	// b 0x823fb43c
	goto loc_823FB43C;
loc_823FB410:
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// mr r11,r21
	r11.u64 = r21.u64;
	// li r10,32767
	ctx.r10.s64 = 32767;
	// lis r9,-32768
	ctx.r9.s64 = -2147483648;
	// li r21,2
	r21.s64 = 2;
	// b 0x823fb43c
	goto loc_823FB43C;
loc_823FB428:
	// mr r11,r21
	r11.u64 = r21.u64;
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// li r21,1
	r21.s64 = 1;
loc_823FB43C:
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// sth r11,10(r19)
	PPC_STORE_U16(r19.u32 + 10, r11.u16);
	// clrlwi r7,r18,16
	ctx.r7.u64 = r18.u32 & 0xFFFF;
	// stw r8,6(r19)
	PPC_STORE_U32(r19.u32 + 6, ctx.r8.u32);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// stw r9,2(r19)
	PPC_STORE_U32(r19.u32 + 2, ctx.r9.u32);
	// or r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 | ctx.r7.u64;
	// sth r10,0(r19)
	PPC_STORE_U16(r19.u32 + 0, ctx.r10.u16);
loc_823FB45C:
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x823ed15c
	return;
}

__attribute__((alias("__imp__sub_823FB468"))) PPC_WEAK_FUNC(sub_823FB468);
PPC_FUNC_IMPL(__imp__sub_823FB468) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r5
	r23.u64 = ctx.r5.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r24,r7
	r24.u64 = ctx.r7.u64;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x823fb490
	if (cr6.getEQ()) goto loc_823FB490;
	// stw r25,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r25.u32);
loc_823FB490:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// bne cr6,0x823fb4c8
	if (!cr6.getEQ()) goto loc_823FB4C8;
loc_823FB498:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x823fb704
	goto loc_823FB704;
loc_823FB4C8:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x823fb4e0
	if (cr6.getEQ()) goto loc_823FB4E0;
	// cmpwi cr6,r28,2
	cr6.compare<int32_t>(r28.s32, 2, xer);
	// blt cr6,0x823fb498
	if (cr6.getLT()) goto loc_823FB498;
	// cmpwi cr6,r28,36
	cr6.compare<int32_t>(r28.s32, 36, xer);
	// bgt cr6,0x823fb498
	if (cr6.getGT()) goto loc_823FB498;
loc_823FB4E0:
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lhz r31,0(r25)
	r31.u64 = PPC_LOAD_U16(r25.u32 + 0);
	// li r27,0
	r27.s64 = 0;
	// addi r30,r11,-19456
	r30.s64 = r11.s64 + -19456;
	// addi r29,r25,2
	r29.s64 = r25.s64 + 2;
	// b 0x823fb500
	goto loc_823FB500;
loc_823FB4F8:
	// lhz r31,0(r29)
	r31.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// addi r29,r29,2
	r29.s64 = r29.s64 + 2;
loc_823FB500:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823faa60
	sub_823FAA60(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fb4f8
	if (!cr0.getEQ()) goto loc_823FB4F8;
	// clrlwi r11,r31,16
	r11.u64 = r31.u32 & 0xFFFF;
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x823fb52c
	if (!cr6.getEQ()) goto loc_823FB52C;
	// ori r24,r24,2
	r24.u64 = r24.u64 | 2;
	// b 0x823fb534
	goto loc_823FB534;
loc_823FB52C:
	// cmplwi cr6,r11,43
	cr6.compare<uint32_t>(r11.u32, 43, xer);
	// bne cr6,0x823fb53c
	if (!cr6.getEQ()) goto loc_823FB53C;
loc_823FB534:
	// lhz r31,0(r29)
	r31.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// addi r29,r29,2
	r29.s64 = r29.s64 + 2;
loc_823FB53C:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bne cr6,0x823fb57c
	if (!cr6.getEQ()) goto loc_823FB57C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82401cd0
	sub_82401CD0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fb55c
	if (cr0.getEQ()) goto loc_823FB55C;
	// li r28,10
	r28.s64 = 10;
	// b 0x823fb5b4
	goto loc_823FB5B4;
loc_823FB55C:
	// lhz r11,0(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// cmplwi cr6,r11,120
	cr6.compare<uint32_t>(r11.u32, 120, xer);
	// beq cr6,0x823fb578
	if (cr6.getEQ()) goto loc_823FB578;
	// cmplwi cr6,r11,88
	cr6.compare<uint32_t>(r11.u32, 88, xer);
	// beq cr6,0x823fb578
	if (cr6.getEQ()) goto loc_823FB578;
	// li r28,8
	r28.s64 = 8;
	// b 0x823fb5b4
	goto loc_823FB5B4;
loc_823FB578:
	// li r28,16
	r28.s64 = 16;
loc_823FB57C:
	// cmpwi cr6,r28,16
	cr6.compare<int32_t>(r28.s32, 16, xer);
	// bne cr6,0x823fb5b4
	if (!cr6.getEQ()) goto loc_823FB5B4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82401cd0
	sub_82401CD0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fb5b4
	if (!cr0.getEQ()) goto loc_823FB5B4;
	// lhz r11,0(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// cmplwi cr6,r11,120
	cr6.compare<uint32_t>(r11.u32, 120, xer);
	// beq cr6,0x823fb5a8
	if (cr6.getEQ()) goto loc_823FB5A8;
	// cmplwi cr6,r11,88
	cr6.compare<uint32_t>(r11.u32, 88, xer);
	// bne cr6,0x823fb5b4
	if (!cr6.getEQ()) goto loc_823FB5B4;
loc_823FB5A8:
	// addi r11,r29,2
	r11.s64 = r29.s64 + 2;
	// addi r29,r11,2
	r29.s64 = r11.s64 + 2;
	// lhz r31,0(r11)
	r31.u64 = PPC_LOAD_U16(r11.u32 + 0);
loc_823FB5B4:
	// li r26,-1
	r26.s64 = -1;
	// twllei r28,0
	// divwu r30,r26,r28
	r30.u32 = r26.u32 / r28.u32;
loc_823FB5C0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82401cd0
	sub_82401CD0(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// bne cr6,0x823fb60c
	if (!cr6.getEQ()) goto loc_823FB60C;
	// clrlwi r11,r31,16
	r11.u64 = r31.u32 & 0xFFFF;
	// cmplwi cr6,r11,65
	cr6.compare<uint32_t>(r11.u32, 65, xer);
	// blt cr6,0x823fb5e4
	if (cr6.getLT()) goto loc_823FB5E4;
	// cmplwi cr6,r11,90
	cr6.compare<uint32_t>(r11.u32, 90, xer);
	// ble cr6,0x823fb5f4
	if (!cr6.getGT()) goto loc_823FB5F4;
loc_823FB5E4:
	// cmplwi cr6,r11,97
	cr6.compare<uint32_t>(r11.u32, 97, xer);
	// blt cr6,0x823fb64c
	if (cr6.getLT()) goto loc_823FB64C;
	// cmplwi cr6,r11,122
	cr6.compare<uint32_t>(r11.u32, 122, xer);
	// bgt cr6,0x823fb64c
	if (cr6.getGT()) goto loc_823FB64C;
loc_823FB5F4:
	// cmplwi cr6,r11,97
	cr6.compare<uint32_t>(r11.u32, 97, xer);
	// blt cr6,0x823fb608
	if (cr6.getLT()) goto loc_823FB608;
	// cmplwi cr6,r11,122
	cr6.compare<uint32_t>(r11.u32, 122, xer);
	// bgt cr6,0x823fb608
	if (cr6.getGT()) goto loc_823FB608;
	// addi r11,r11,-32
	r11.s64 = r11.s64 + -32;
loc_823FB608:
	// addi r3,r11,-55
	ctx.r3.s64 = r11.s64 + -55;
loc_823FB60C:
	// cmplw cr6,r3,r28
	cr6.compare<uint32_t>(ctx.r3.u32, r28.u32, xer);
	// bge cr6,0x823fb64c
	if (!cr6.getLT()) goto loc_823FB64C;
	// ori r24,r24,8
	r24.u64 = r24.u64 | 8;
	// cmplw cr6,r27,r30
	cr6.compare<uint32_t>(r27.u32, r30.u32, xer);
	// blt cr6,0x823fb66c
	if (cr6.getLT()) goto loc_823FB66C;
	// bne cr6,0x823fb640
	if (!cr6.getEQ()) goto loc_823FB640;
	// mr r11,r26
	r11.u64 = r26.u64;
	// twllei r28,0
	// divwu r10,r11,r28
	ctx.r10.u32 = r11.u32 / r28.u32;
	// mullw r10,r10,r28
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r28.s32);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// ble cr6,0x823fb66c
	if (!cr6.getGT()) goto loc_823FB66C;
loc_823FB640:
	// ori r24,r24,4
	r24.u64 = r24.u64 | 4;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// bne cr6,0x823fb674
	if (!cr6.getEQ()) goto loc_823FB674;
loc_823FB64C:
	// rlwinm. r11,r24,0,28,28
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r29,r29,-2
	r29.s64 = r29.s64 + -2;
	// bne 0x823fb680
	if (!cr0.getEQ()) goto loc_823FB680;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x823fb664
	if (cr6.getEQ()) goto loc_823FB664;
	// mr r29,r25
	r29.u64 = r25.u64;
loc_823FB664:
	// li r27,0
	r27.s64 = 0;
	// b 0x823fb6e8
	goto loc_823FB6E8;
loc_823FB66C:
	// mullw r11,r27,r28
	r11.s64 = int64_t(r27.s32) * int64_t(r28.s32);
	// add r27,r11,r3
	r27.u64 = r11.u64 + ctx.r3.u64;
loc_823FB674:
	// lhz r31,0(r29)
	r31.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// addi r29,r29,2
	r29.s64 = r29.s64 + 2;
	// b 0x823fb5c0
	goto loc_823FB5C0;
loc_823FB680:
	// lis r10,32767
	ctx.r10.s64 = 2147418112;
	// rlwinm. r11,r24,0,29,29
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// ori r31,r10,65535
	r31.u64 = ctx.r10.u64 | 65535;
	// lis r30,-32768
	r30.s64 = -2147483648;
	// bne 0x823fb6bc
	if (!cr0.getEQ()) goto loc_823FB6BC;
	// clrlwi. r11,r24,31
	r11.u64 = r24.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fb6e8
	if (!cr0.getEQ()) goto loc_823FB6E8;
	// rlwinm. r11,r24,0,30,30
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fb6ac
	if (cr0.getEQ()) goto loc_823FB6AC;
	// cmplw cr6,r27,r30
	cr6.compare<uint32_t>(r27.u32, r30.u32, xer);
	// bgt cr6,0x823fb6bc
	if (cr6.getGT()) goto loc_823FB6BC;
loc_823FB6AC:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823fb6e8
	if (!cr6.getEQ()) goto loc_823FB6E8;
	// cmplw cr6,r27,r31
	cr6.compare<uint32_t>(r27.u32, r31.u32, xer);
	// ble cr6,0x823fb6e8
	if (!cr6.getGT()) goto loc_823FB6E8;
loc_823FB6BC:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r11,34
	r11.s64 = 34;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// clrlwi. r10,r24,31
	ctx.r10.u64 = r24.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823fb6d8
	if (cr0.getEQ()) goto loc_823FB6D8;
	// mr r27,r26
	r27.u64 = r26.u64;
	// b 0x823fb6e8
	goto loc_823FB6E8;
loc_823FB6D8:
	// rlwinm. r11,r24,0,30,30
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r27,r30
	r27.u64 = r30.u64;
	// bne 0x823fb6e8
	if (!cr0.getEQ()) goto loc_823FB6E8;
	// mr r27,r31
	r27.u64 = r31.u64;
loc_823FB6E8:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x823fb6f4
	if (cr6.getEQ()) goto loc_823FB6F4;
	// stw r29,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r29.u32);
loc_823FB6F4:
	// rlwinm. r11,r24,0,30,30
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fb700
	if (cr0.getEQ()) goto loc_823FB700;
	// neg r27,r27
	r27.s64 = -r27.s64;
loc_823FB700:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
loc_823FB704:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_823FB710"))) PPC_WEAK_FUNC(sub_823FB710);
PPC_FUNC_IMPL(__imp__sub_823FB710) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// addi r3,r10,-19456
	ctx.r3.s64 = ctx.r10.s64 + -19456;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// b 0x823fb468
	sub_823FB468(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823FB730"))) PPC_WEAK_FUNC(sub_823FB730);
PPC_FUNC_IMPL(__imp__sub_823FB730) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x823fb750
	if (!cr6.getEQ()) goto loc_823FB750;
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FB750:
	// lwz r31,20(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// cmplwi r31,0
	cr0.compare<uint32_t>(r31.u32, 0, xer);
	// bne 0x823fb760
	if (!cr0.getEQ()) goto loc_823FB760;
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FB760:
	// lwz r11,24(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fb770
	if (!cr6.getEQ()) goto loc_823FB770;
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FB770:
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x823fb7a4
	if (cr6.getEQ()) goto loc_823FB7A4;
	// lwz r8,24(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
loc_823FB784:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplw cr6,r29,r9
	cr6.compare<uint32_t>(r29.u32, ctx.r9.u32, xer);
	// beq cr6,0x823fb7bc
	if (cr6.getEQ()) goto loc_823FB7BC;
	// blt cr6,0x823fb7cc
	if (cr6.getLT()) goto loc_823FB7CC;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// blt cr6,0x823fb784
	if (cr6.getLT()) goto loc_823FB784;
loc_823FB7A4:
	// lwz r10,24(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// rlwinm r11,r31,3,0,28
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
loc_823FB7B0:
	// lwz r3,-4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -4);
loc_823FB7B4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_823FB7BC:
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// b 0x823fb7b4
	goto loc_823FB7B4;
loc_823FB7CC:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fb7dc
	if (!cr6.getEQ()) goto loc_823FB7DC;
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x823fb7b4
	goto loc_823FB7B4;
loc_823FB7DC:
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// b 0x823fb7b0
	goto loc_823FB7B0;
}

__attribute__((alias("__imp__sub_823FB7E8"))) PPC_WEAK_FUNC(sub_823FB7E8);
PPC_FUNC_IMPL(__imp__sub_823FB7E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,12(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823fb818
	if (cr6.getEQ()) goto loc_823FB818;
	// lwz r11,8(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823fb818
	if (cr0.getEQ()) goto loc_823FB818;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r11,-2
	cr6.compare<int32_t>(r11.s32, -2, xer);
	// beq cr6,0x823fb818
	if (cr6.getEQ()) goto loc_823FB818;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_823FB818:
	// lwz r4,0(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// mr r3,r5
	ctx.r3.u64 = ctx.r5.u64;
	// b 0x823fb730
	sub_823FB730(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823FB828"))) PPC_WEAK_FUNC(sub_823FB828);
PPC_FUNC_IMPL(__imp__sub_823FB828) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,12(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr 
	if (cr0.getEQ()) return;
	// stw r6,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r6.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FB848"))) PPC_WEAK_FUNC(sub_823FB848);
PPC_FUNC_IMPL(__imp__sub_823FB848) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823fb8f0
	if (cr0.getEQ()) goto loc_823FB8F0;
	// lbz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 8);
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x823fb8f0
	if (cr6.getEQ()) goto loc_823FB8F0;
	// lwz r10,4(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x823fb8ac
	if (cr6.getEQ()) goto loc_823FB8AC;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
loc_823FB878:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi r9,0
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// subf r8,r8,r9
	ctx.r8.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq 0x823fb89c
	if (cr0.getEQ()) goto loc_823FB89C;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x823fb878
	if (cr6.getEQ()) goto loc_823FB878;
loc_823FB89C:
	// cmpwi r8,0
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq 0x823fb8ac
	if (cr0.getEQ()) goto loc_823FB8AC;
loc_823FB8A4:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_823FB8AC:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// rlwinm. r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fb8c4
	if (cr0.getEQ()) goto loc_823FB8C4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// rlwinm. r11,r11,0,28,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fb8a4
	if (cr0.getEQ()) goto loc_823FB8A4;
loc_823FB8C4:
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// clrlwi. r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823fb8dc
	if (cr0.getEQ()) goto loc_823FB8DC;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// clrlwi. r10,r10,31
	ctx.r10.u64 = ctx.r10.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823fb8a4
	if (cr0.getEQ()) goto loc_823FB8A4;
loc_823FB8DC:
	// rlwinm. r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fb8f0
	if (cr0.getEQ()) goto loc_823FB8F0;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// rlwinm. r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fb8a4
	if (cr0.getEQ()) goto loc_823FB8A4;
loc_823FB8F0:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FB8F8"))) PPC_WEAK_FUNC(sub_823FB8F8);
PPC_FUNC_IMPL(__imp__sub_823FB8F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lis r10,-8125
	ctx.r10.s64 = -532480000;
	// ori r10,r10,20301
	ctx.r10.u64 = ctx.r10.u64 | 20301;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x823fb93c
	if (cr6.getEQ()) goto loc_823FB93C;
	// lis r10,-8083
	ctx.r10.s64 = -529727488;
	// ori r10,r10,29539
	ctx.r10.u64 = ctx.r10.u64 | 29539;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x823fb95c
	if (!cr6.getEQ()) goto loc_823FB95C;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,132(r3)
	PPC_STORE_U32(ctx.r3.u32 + 132, r11.u32);
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
loc_823FB93C:
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,132(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 132);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x823fb95c
	if (!cr6.getGT()) goto loc_823FB95C;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,132(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 132);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,132(r3)
	PPC_STORE_U32(ctx.r3.u32 + 132, r11.u32);
loc_823FB95C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FB970"))) PPC_WEAK_FUNC(sub_823FB970);
PPC_FUNC_IMPL(__imp__sub_823FB970) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29608(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29608);
	// mflr r12
	// bl 0x823ed12c
	// addi r31,r1,-160
	r31.s64 = ctx.r1.s64 + -160;
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// stw r26,180(r31)
	PPC_STORE_U32(r31.u32 + 180, r26.u32);
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// stw r25,188(r31)
	PPC_STORE_U32(r31.u32 + 188, r25.u32);
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// stw r29,196(r31)
	PPC_STORE_U32(r31.u32 + 196, r29.u32);
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// stw r27,204(r31)
	PPC_STORE_U32(r31.u32 + 204, r27.u32);
	// bl 0x823fb7e8
	sub_823FB7E8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// stw r28,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r28.u32);
	// stw r27,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r27.u32);
	// cmpwi cr6,r27,-1
	cr6.compare<int32_t>(r27.s32, -1, xer);
	// beq cr6,0x823fb9e8
	if (cr6.getEQ()) goto loc_823FB9E8;
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 8);
loc_823FB9C4:
	// rlwinm r11,r27,3,0,28
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823fb9e8
	if (!cr6.getEQ()) goto loc_823FB9E8;
	// lwz r27,0(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r27,204(r31)
	PPC_STORE_U32(r31.u32 + 204, r27.u32);
	// cmpwi cr6,r27,-1
	cr6.compare<int32_t>(r27.s32, -1, xer);
	// bne cr6,0x823fb9c4
	if (!cr6.getEQ()) goto loc_823FB9C4;
loc_823FB9E8:
	// cmpwi cr6,r28,-1
	cr6.compare<int32_t>(r28.s32, -1, xer);
	// bne cr6,0x823fb9f8
	if (!cr6.getEQ()) goto loc_823FB9F8;
	// cmpwi cr6,r27,-1
	cr6.compare<int32_t>(r27.s32, -1, xer);
	// beq cr6,0x823fbae4
	if (cr6.getEQ()) {
		// ERROR 823FBAE4
		return;
	}
loc_823FB9F8:
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,132(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 132);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,132(r3)
	PPC_STORE_U32(ctx.r3.u32 + 132, r11.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// cmpw cr6,r28,r27
	cr6.compare<int32_t>(r28.s32, r27.s32, xer);
	// beq cr6,0x823fbab0
	if (cr6.getEQ()) {
		sub_823FBAB0(ctx, base);
		return;
	}
	// cmpwi cr6,r28,-1
	cr6.compare<int32_t>(r28.s32, -1, xer);
	// ble cr6,0x823fba28
	if (!cr6.getGT()) goto loc_823FBA28;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// cmpw cr6,r28,r11
	cr6.compare<int32_t>(r28.s32, r11.s32, xer);
	// blt cr6,0x823fba2c
	if (cr6.getLT()) goto loc_823FBA2C;
loc_823FBA28:
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FBA2C:
	// rlwinm r30,r28,3,0,28
	r30.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// lwz r28,0(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r28,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r28.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823fba84
	if (cr6.getEQ()) goto loc_823FBA84;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x823fb828
	sub_823FB828(ctx, base);
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// li r6,0
	ctx.r6.s64 = 0;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// li r5,259
	ctx.r5.s64 = 259;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x82401e90
	sub_82401E90(ctx, base);
loc_823FBA84:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823fbaa8
	// ERROR 823FBAA8
	return;
}

__attribute__((alias("__imp__sub_823FB978"))) PPC_WEAK_FUNC(sub_823FB978);
PPC_FUNC_IMPL(__imp__sub_823FB978) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// addi r31,r1,-160
	r31.s64 = ctx.r1.s64 + -160;
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// stw r26,180(r31)
	PPC_STORE_U32(r31.u32 + 180, r26.u32);
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// stw r25,188(r31)
	PPC_STORE_U32(r31.u32 + 188, r25.u32);
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// stw r29,196(r31)
	PPC_STORE_U32(r31.u32 + 196, r29.u32);
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// stw r27,204(r31)
	PPC_STORE_U32(r31.u32 + 204, r27.u32);
	// bl 0x823fb7e8
	sub_823FB7E8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// stw r28,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r28.u32);
	// stw r27,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r27.u32);
	// cmpwi cr6,r27,-1
	cr6.compare<int32_t>(r27.s32, -1, xer);
	// beq cr6,0x823fb9e8
	if (cr6.getEQ()) goto loc_823FB9E8;
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 8);
loc_823FB9C4:
	// rlwinm r11,r27,3,0,28
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823fb9e8
	if (!cr6.getEQ()) goto loc_823FB9E8;
	// lwz r27,0(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r27,204(r31)
	PPC_STORE_U32(r31.u32 + 204, r27.u32);
	// cmpwi cr6,r27,-1
	cr6.compare<int32_t>(r27.s32, -1, xer);
	// bne cr6,0x823fb9c4
	if (!cr6.getEQ()) goto loc_823FB9C4;
loc_823FB9E8:
	// cmpwi cr6,r28,-1
	cr6.compare<int32_t>(r28.s32, -1, xer);
	// bne cr6,0x823fb9f8
	if (!cr6.getEQ()) goto loc_823FB9F8;
	// cmpwi cr6,r27,-1
	cr6.compare<int32_t>(r27.s32, -1, xer);
	// beq cr6,0x823fbae4
	if (cr6.getEQ()) goto loc_823FBAE4;
loc_823FB9F8:
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,132(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 132);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,132(r3)
	PPC_STORE_U32(ctx.r3.u32 + 132, r11.u32);
loc_823FBA08:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// cmpw cr6,r28,r27
	cr6.compare<int32_t>(r28.s32, r27.s32, xer);
	// beq cr6,0x823fbab0
	if (cr6.getEQ()) goto loc_823FBAB0;
	// cmpwi cr6,r28,-1
	cr6.compare<int32_t>(r28.s32, -1, xer);
	// ble cr6,0x823fba28
	if (!cr6.getGT()) goto loc_823FBA28;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// cmpw cr6,r28,r11
	cr6.compare<int32_t>(r28.s32, r11.s32, xer);
	// blt cr6,0x823fba2c
	if (cr6.getLT()) goto loc_823FBA2C;
loc_823FBA28:
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FBA2C:
	// rlwinm r30,r28,3,0,28
	r30.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// lwz r28,0(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r28,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r28.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823fba84
	if (cr6.getEQ()) goto loc_823FBA84;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x823fb828
	sub_823FB828(ctx, base);
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// li r6,0
	ctx.r6.s64 = 0;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// li r5,259
	ctx.r5.s64 = 259;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x82401e90
	sub_82401E90(ctx, base);
loc_823FBA84:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823fbaa8
	goto loc_823FBAA8;
	// lwz r27,204(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// lwz r29,196(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// lwz r25,188(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// lwz r26,180(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// lwz r28,84(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 84);
loc_823FBAA8:
	// stw r28,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r28.u32);
	// b 0x823fba08
	goto loc_823FBA08;
loc_823FBAB0:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,160
	r12.s64 = r31.s64 + 160;
	// bl 0x823fbaec
	sub_823FBAEC(ctx, base);
	// lwz r11,204(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// lwz r10,80(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// beq cr6,0x823fbad0
	if (cr6.getEQ()) goto loc_823FBAD0;
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FBAD0:
	// lwz r6,88(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// lwz r5,196(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// lwz r4,188(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// lwz r3,180(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// bl 0x823fb828
	sub_823FB828(ctx, base);
loc_823FBAE4:
	// addi r1,r31,160
	ctx.r1.s64 = r31.s64 + 160;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_823FBA94"))) PPC_WEAK_FUNC(sub_823FBA94);
PPC_FUNC_IMPL(__imp__sub_823FBA94) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r31{};
	// lwz r27,204(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// lwz r29,196(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// lwz r25,188(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// lwz r26,180(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// lwz r28,84(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// stw r28,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r28.u32);
	// b 0x823fba08
	// ERROR 823FBA08
	return;
}

__attribute__((alias("__imp__sub_823FBAB0"))) PPC_WEAK_FUNC(sub_823FBAB0);
PPC_FUNC_IMPL(__imp__sub_823FBAB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,160
	r12.s64 = r31.s64 + 160;
	// bl 0x823fbaec
	sub_823FBAEC(ctx, base);
	// lwz r11,204(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// lwz r10,80(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// beq cr6,0x823fbad0
	if (cr6.getEQ()) goto loc_823FBAD0;
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FBAD0:
	// lwz r6,88(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// lwz r5,196(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// lwz r4,188(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// lwz r3,180(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// bl 0x823fb828
	sub_823FB828(ctx, base);
	// addi r1,r31,160
	ctx.r1.s64 = r31.s64 + 160;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_823FBAEC"))) PPC_WEAK_FUNC(sub_823FBAEC);
PPC_FUNC_IMPL(__imp__sub_823FBAEC) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,132(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 132);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x823fbb18
	if (!cr6.getGT()) goto loc_823FBB18;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,132(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 132);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,132(r3)
	PPC_STORE_U32(ctx.r3.u32 + 132, r11.u32);
loc_823FBB18:
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FBB28"))) PPC_WEAK_FUNC(sub_823FBB28);
PPC_FUNC_IMPL(__imp__sub_823FBB28) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823fb8f8
	sub_823FB8F8(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FBB50"))) PPC_WEAK_FUNC(sub_823FBB50);
PPC_FUNC_IMPL(__imp__sub_823FBB50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// andi. r11,r11,102
	r11.u64 = r11.u64 & 102;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x823fbb68
	if (!cr0.getEQ()) goto loc_823FBB68;
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
loc_823FBB68:
	// stw r5,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, ctx.r5.u32);
	// li r3,3
	ctx.r3.s64 = 3;
	// ld r11,48(r5)
	r11.u64 = PPC_LOAD_U64(ctx.r5.u32 + 48);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// ld r11,56(r5)
	r11.u64 = PPC_LOAD_U64(ctx.r5.u32 + 56);
	// stw r11,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, r11.u32);
	// ld r11,64(r5)
	r11.u64 = PPC_LOAD_U64(ctx.r5.u32 + 64);
	// stw r11,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FBB90"))) PPC_WEAK_FUNC(sub_823FBB90);
PPC_FUNC_IMPL(__imp__sub_823FBB90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29648(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29648);
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-96
	r31.s64 = ctx.r1.s64 + -96;
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stb r4,127(r31)
	PPC_STORE_U8(r31.u32 + 127, ctx.r4.u8);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x823fbc0c
	if (cr6.getEQ()) {
		// ERROR 823FBC0C
		return;
	}
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lis r10,-8083
	ctx.r10.s64 = -529727488;
	// ori r10,r10,29539
	ctx.r10.u64 = ctx.r10.u64 | 29539;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x823fbc0c
	if (!cr6.getEQ()) {
		// ERROR 823FBC0C
		return;
	}
	// lwz r11,28(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823fbc0c
	if (cr0.getEQ()) {
		// ERROR 823FBC0C
		return;
	}
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823fbc0c
	if (cr0.getEQ()) {
		// ERROR 823FBC0C
		return;
	}
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r3,24(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823fbc0c
	// ERROR 823FBC0C
	return;
}

__attribute__((alias("__imp__sub_823FBB98"))) PPC_WEAK_FUNC(sub_823FBB98);
PPC_FUNC_IMPL(__imp__sub_823FBB98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-96
	r31.s64 = ctx.r1.s64 + -96;
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stb r4,127(r31)
	PPC_STORE_U8(r31.u32 + 127, ctx.r4.u8);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x823fbc0c
	if (cr6.getEQ()) goto loc_823FBC0C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lis r10,-8083
	ctx.r10.s64 = -529727488;
	// ori r10,r10,29539
	ctx.r10.u64 = ctx.r10.u64 | 29539;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x823fbc0c
	if (!cr6.getEQ()) goto loc_823FBC0C;
	// lwz r11,28(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823fbc0c
	if (cr0.getEQ()) goto loc_823FBC0C;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823fbc0c
	if (cr0.getEQ()) goto loc_823FBC0C;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r3,24(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823fbc0c
	goto loc_823FBC0C;
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
loc_823FBC0C:
	// addi r1,r31,96
	ctx.r1.s64 = r31.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FBC08"))) PPC_WEAK_FUNC(sub_823FBC08);
PPC_FUNC_IMPL(__imp__sub_823FBC08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
	// addi r1,r31,96
	ctx.r1.s64 = r31.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FBC20"))) PPC_WEAK_FUNC(sub_823FBC20);
PPC_FUNC_IMPL(__imp__sub_823FBC20) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-96
	r31.s64 = r12.s64 + -96;
	// lbz r11,127(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 127);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FBC48"))) PPC_WEAK_FUNC(sub_823FBC48);
PPC_FUNC_IMPL(__imp__sub_823FBC48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// mr r31,r9
	r31.u64 = ctx.r9.u64;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r25,124(r3)
	r25.u64 = PPC_LOAD_U32(ctx.r3.u32 + 124);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r24,128(r3)
	r24.u64 = PPC_LOAD_U32(ctx.r3.u32 + 128);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// stw r29,124(r3)
	PPC_STORE_U32(ctx.r3.u32 + 124, r29.u32);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// li r5,256
	ctx.r5.s64 = 256;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r28,128(r11)
	PPC_STORE_U32(r11.u32 + 128, r28.u32);
	// li r11,-2
	r11.s64 = -2;
	// stw r30,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r30.u32);
	// stw r31,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r31.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// bl 0x82401e90
	sub_82401E90(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f3768
	sub_823F3768(ctx, base);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// stw r25,124(r3)
	PPC_STORE_U32(ctx.r3.u32 + 124, r25.u32);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// stw r24,128(r3)
	PPC_STORE_U32(ctx.r3.u32 + 128, r24.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823fbd04
	if (cr0.getEQ()) goto loc_823FBD04;
	// bl 0x823f3710
	sub_823F3710(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbd04
	if (cr0.getEQ()) goto loc_823FBD04;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823fbb98
	sub_823FBB98(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823FBD04:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_823FBD10"))) PPC_WEAK_FUNC(sub_823FBD10);
PPC_FUNC_IMPL(__imp__sub_823FBD10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29672(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29672);
	// mflr r12
	// bl 0x823ed138
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// lwz r11,4(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 4);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r10.u32);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823fbf88
	if (cr0.getEQ()) {
		sub_823FBF88(ctx, base);
		return;
	}
	// lbz r11,8(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823fbf88
	if (cr6.getEQ()) {
		sub_823FBF88(ctx, base);
		return;
	}
	// lwz r11,8(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fbd68
	if (!cr0.getEQ()) goto loc_823FBD68;
	// lwz r10,0(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm. r10,r10,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823fbf88
	if (cr0.getEQ()) {
		sub_823FBF88(ctx, base);
		return;
	}
loc_823FBD68:
	// lwz r10,0(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm. r9,r10,0,0,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// bne 0x823fbd7c
	if (!cr0.getEQ()) goto loc_823FBD7C;
	// add r28,r11,r4
	r28.u64 = r11.u64 + ctx.r4.u64;
loc_823FBD7C:
	// nop 
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// rlwinm. r11,r10,0,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,24(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// beq 0x823fbe04
	if (cr0.getEQ()) goto loc_823FBE04;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// lwz r10,24(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// addi r11,r30,8
	r11.s64 = r30.s64 + 8;
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stw r9,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r9.u32);
	// blt cr6,0x823fbdfc
	if (cr6.getLT()) goto loc_823FBDFC;
	// rotlwi r8,r8,0
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r10,r8,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// add r9,r8,r11
	ctx.r9.u64 = ctx.r8.u64 + r11.u64;
	// stw r9,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r9.u32);
loc_823FBDFC:
	// stw r9,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r9.u32);
	// b 0x823fbf6c
	goto loc_823FBF6C;
loc_823FBE04:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fbe9c
	if (cr0.getEQ()) goto loc_823FBE9C;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r5,20(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// lwz r4,24(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// bl 0x823ef8a0
	sub_823EF8A0(ctx, base);
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bne cr6,0x823fbf6c
	if (!cr6.getEQ()) goto loc_823FBF6C;
	// lwz r8,0(r28)
	ctx.r8.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// cmplwi r8,0
	cr0.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq 0x823fbf6c
	if (cr0.getEQ()) goto loc_823FBF6C;
	// addi r11,r30,8
	r11.s64 = r30.s64 + 8;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// stw r10,84(r31)
	PPC_STORE_U32(r31.u32 + 84, ctx.r10.u32);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x823fbe94
	if (cr6.getLT()) goto loc_823FBE94;
	// rotlwi r9,r9,0
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r8,r9,r8
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// lwzx r11,r8,r11
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// add r10,r9,r11
	ctx.r10.u64 = ctx.r9.u64 + r11.u64;
	// stw r10,84(r31)
	PPC_STORE_U32(r31.u32 + 84, ctx.r10.u32);
loc_823FBE94:
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// b 0x823fbf6c
	goto loc_823FBF6C;
loc_823FBE9C:
	// lwz r11,24(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fbf18
	if (!cr6.getEQ()) goto loc_823FBF18;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// addi r11,r30,8
	r11.s64 = r30.s64 + 8;
	// lwz r9,24(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// add r4,r10,r9
	ctx.r4.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r4,88(r31)
	PPC_STORE_U32(r31.u32 + 88, ctx.r4.u32);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x823fbf08
	if (cr6.getLT()) goto loc_823FBF08;
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
	// add r4,r10,r11
	ctx.r4.u64 = ctx.r10.u64 + r11.u64;
	// stw r4,88(r31)
	PPC_STORE_U32(r31.u32 + 88, ctx.r4.u32);
loc_823FBF08:
	// lwz r5,20(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823ef8a0
	sub_823EF8A0(ctx, base);
	// b 0x823fbf6c
	goto loc_823FBF6C;
loc_823FBF18:
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// lwz r3,24(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,92(r31)
	PPC_STORE_U32(r31.u32 + 92, r11.u32);
	// b 0x823fbf6c
	goto loc_823FBF6C;
loc_823FBF68:
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FBF6C:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823fbf80
	// ERROR 823FBF80
	return;
}

__attribute__((alias("__imp__sub_823FBD18"))) PPC_WEAK_FUNC(sub_823FBD18);
PPC_FUNC_IMPL(__imp__sub_823FBD18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// lwz r11,4(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 4);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r10.u32);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823fbf88
	if (cr0.getEQ()) goto loc_823FBF88;
	// lbz r11,8(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823fbf88
	if (cr6.getEQ()) goto loc_823FBF88;
	// lwz r11,8(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fbd68
	if (!cr0.getEQ()) goto loc_823FBD68;
	// lwz r10,0(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm. r10,r10,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823fbf88
	if (cr0.getEQ()) goto loc_823FBF88;
loc_823FBD68:
	// lwz r10,0(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm. r9,r10,0,0,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// bne 0x823fbd7c
	if (!cr0.getEQ()) goto loc_823FBD7C;
	// add r28,r11,r4
	r28.u64 = r11.u64 + ctx.r4.u64;
loc_823FBD7C:
	// nop 
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// rlwinm. r11,r10,0,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,24(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// beq 0x823fbe04
	if (cr0.getEQ()) goto loc_823FBE04;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// lwz r10,24(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// addi r11,r30,8
	r11.s64 = r30.s64 + 8;
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stw r9,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r9.u32);
	// blt cr6,0x823fbdfc
	if (cr6.getLT()) goto loc_823FBDFC;
	// rotlwi r8,r8,0
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r10,r8,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// add r9,r8,r11
	ctx.r9.u64 = ctx.r8.u64 + r11.u64;
	// stw r9,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r9.u32);
loc_823FBDFC:
	// stw r9,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r9.u32);
	// b 0x823fbf6c
	goto loc_823FBF6C;
loc_823FBE04:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fbe9c
	if (cr0.getEQ()) goto loc_823FBE9C;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r5,20(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// lwz r4,24(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// bl 0x823ef8a0
	sub_823EF8A0(ctx, base);
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bne cr6,0x823fbf6c
	if (!cr6.getEQ()) goto loc_823FBF6C;
	// lwz r8,0(r28)
	ctx.r8.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// cmplwi r8,0
	cr0.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq 0x823fbf6c
	if (cr0.getEQ()) goto loc_823FBF6C;
	// addi r11,r30,8
	r11.s64 = r30.s64 + 8;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// stw r10,84(r31)
	PPC_STORE_U32(r31.u32 + 84, ctx.r10.u32);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x823fbe94
	if (cr6.getLT()) goto loc_823FBE94;
	// rotlwi r9,r9,0
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r8,r9,r8
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// lwzx r11,r8,r11
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// add r10,r9,r11
	ctx.r10.u64 = ctx.r9.u64 + r11.u64;
	// stw r10,84(r31)
	PPC_STORE_U32(r31.u32 + 84, ctx.r10.u32);
loc_823FBE94:
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// b 0x823fbf6c
	goto loc_823FBF6C;
loc_823FBE9C:
	// lwz r11,24(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fbf18
	if (!cr6.getEQ()) goto loc_823FBF18;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// addi r11,r30,8
	r11.s64 = r30.s64 + 8;
	// lwz r9,24(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// add r4,r10,r9
	ctx.r4.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r4,88(r31)
	PPC_STORE_U32(r31.u32 + 88, ctx.r4.u32);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x823fbf08
	if (cr6.getLT()) goto loc_823FBF08;
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
	// add r4,r10,r11
	ctx.r4.u64 = ctx.r10.u64 + r11.u64;
	// stw r4,88(r31)
	PPC_STORE_U32(r31.u32 + 88, ctx.r4.u32);
loc_823FBF08:
	// lwz r5,20(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823ef8a0
	sub_823EF8A0(ctx, base);
	// b 0x823fbf6c
	goto loc_823FBF6C;
loc_823FBF18:
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// lwz r3,24(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fbf68
	if (cr0.getEQ()) goto loc_823FBF68;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,92(r31)
	PPC_STORE_U32(r31.u32 + 92, r11.u32);
	// b 0x823fbf6c
	goto loc_823FBF6C;
loc_823FBF68:
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FBF6C:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823fbf80
	goto loc_823FBF80;
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
loc_823FBF80:
	// lwz r3,92(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 92);
	// b 0x823fbf8c
	goto loc_823FBF8C;
loc_823FBF88:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823FBF8C:
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823FBF7C"))) PPC_WEAK_FUNC(sub_823FBF7C);
PPC_FUNC_IMPL(__imp__sub_823FBF7C) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r31{};
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
	// lwz r3,92(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 92);
	// b 0x823fbf8c
	// ERROR 823FBF8C
	return;
}

__attribute__((alias("__imp__sub_823FBF88"))) PPC_WEAK_FUNC(sub_823FBF88);
PPC_FUNC_IMPL(__imp__sub_823FBF88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r31{};
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823FBF94"))) PPC_WEAK_FUNC(sub_823FBF94);
PPC_FUNC_IMPL(__imp__sub_823FBF94) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FBFA0"))) PPC_WEAK_FUNC(sub_823FBFA0);
PPC_FUNC_IMPL(__imp__sub_823FBFA0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29696(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29696);
	// mflr r12
	// bl 0x823ed138
	// addi r31,r1,-128
	r31.s64 = ctx.r1.s64 + -128;
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fbfd4
	if (cr0.getEQ()) goto loc_823FBFD4;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// b 0x823fbfdc
	goto loc_823FBFDC;
loc_823FBFD4:
	// lwz r11,8(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	// add r28,r11,r4
	r28.u64 = r11.u64 + ctx.r4.u64;
loc_823FBFDC:
	// nop 
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823fbd18
	sub_823FBD18(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x823fc05c
	if (cr6.getEQ()) goto loc_823FC05C;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x823fc0ac
	if (!cr6.getEQ()) goto loc_823FC0AC;
	// addi r11,r29,8
	r11.s64 = r29.s64 + 8;
	// lwz r9,24(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// add r4,r10,r9
	ctx.r4.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r4,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r4.u32);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x823fc044
	if (cr6.getLT()) goto loc_823FC044;
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// add r4,r10,r11
	ctx.r4.u64 = ctx.r10.u64 + r11.u64;
	// stw r4,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r4.u32);
loc_823FC044:
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x823fc0ac
	goto loc_823FC0AC;
loc_823FC05C:
	// addi r11,r29,8
	r11.s64 = r29.s64 + 8;
	// lwz r9,24(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// add r4,r10,r9
	ctx.r4.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r4,84(r31)
	PPC_STORE_U32(r31.u32 + 84, ctx.r4.u32);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x823fc09c
	if (cr6.getLT()) goto loc_823FC09C;
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// add r4,r10,r11
	ctx.r4.u64 = ctx.r10.u64 + r11.u64;
	// stw r4,84(r31)
	PPC_STORE_U32(r31.u32 + 84, ctx.r4.u32);
loc_823FC09C:
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_823FC0AC:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823fc0c0
	// ERROR 823FC0C0
	return;
}

__attribute__((alias("__imp__sub_823FBFA8"))) PPC_WEAK_FUNC(sub_823FBFA8);
PPC_FUNC_IMPL(__imp__sub_823FBFA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// addi r31,r1,-128
	r31.s64 = ctx.r1.s64 + -128;
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fbfd4
	if (cr0.getEQ()) goto loc_823FBFD4;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// b 0x823fbfdc
	goto loc_823FBFDC;
loc_823FBFD4:
	// lwz r11,8(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	// add r28,r11,r4
	r28.u64 = r11.u64 + ctx.r4.u64;
loc_823FBFDC:
	// nop 
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823fbd18
	sub_823FBD18(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x823fc05c
	if (cr6.getEQ()) goto loc_823FC05C;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x823fc0ac
	if (!cr6.getEQ()) goto loc_823FC0AC;
	// addi r11,r29,8
	r11.s64 = r29.s64 + 8;
	// lwz r9,24(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// add r4,r10,r9
	ctx.r4.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r4,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r4.u32);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x823fc044
	if (cr6.getLT()) goto loc_823FC044;
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// add r4,r10,r11
	ctx.r4.u64 = ctx.r10.u64 + r11.u64;
	// stw r4,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r4.u32);
loc_823FC044:
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x823fc0ac
	goto loc_823FC0AC;
loc_823FC05C:
	// addi r11,r29,8
	r11.s64 = r29.s64 + 8;
	// lwz r9,24(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// add r4,r10,r9
	ctx.r4.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r4,84(r31)
	PPC_STORE_U32(r31.u32 + 84, ctx.r4.u32);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x823fc09c
	if (cr6.getLT()) goto loc_823FC09C;
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// add r4,r10,r11
	ctx.r4.u64 = ctx.r10.u64 + r11.u64;
	// stw r4,84(r31)
	PPC_STORE_U32(r31.u32 + 84, ctx.r4.u32);
loc_823FC09C:
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_823FC0AC:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823fc0c0
	goto loc_823FC0C0;
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
loc_823FC0C0:
	// addi r1,r31,128
	ctx.r1.s64 = r31.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823FC0BC"))) PPC_WEAK_FUNC(sub_823FC0BC);
PPC_FUNC_IMPL(__imp__sub_823FC0BC) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r31{};
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
	// addi r1,r31,128
	ctx.r1.s64 = r31.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823FC0C8"))) PPC_WEAK_FUNC(sub_823FC0C8);
PPC_FUNC_IMPL(__imp__sub_823FC0C8) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FC0D8"))) PPC_WEAK_FUNC(sub_823FC0D8);
PPC_FUNC_IMPL(__imp__sub_823FC0D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stwu r1,-2832(r1)
	ea = -2832 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r7
	r31.u64 = ctx.r7.u64;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// mr r23,r9
	r23.u64 = ctx.r9.u64;
	// mr r25,r10
	r25.u64 = ctx.r10.u64;
	// bl 0x823f3200
	sub_823F3200(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823f3228
	sub_823F3228(ctx, base);
	// li r21,0
	r21.s64 = 0;
	// mr. r22,r3
	r22.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r22.s32, 0, xer);
	// bne 0x823fc148
	if (!cr0.getEQ()) goto loc_823FC148;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// stw r30,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r30.u32);
	// li r10,-2
	ctx.r10.s64 = -2;
	// stw r21,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r21.u32);
	// stw r21,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r21.u32);
	// stw r11,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r11.u32);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
loc_823FC148:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x823fc164
	if (cr6.getEQ()) goto loc_823FC164;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823fbfa8
	sub_823FBFA8(ctx, base);
loc_823FC164:
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r10,140(r11)
	PPC_STORE_U32(r11.u32 + 140, ctx.r10.u32);
	// bl 0x823f3658
	sub_823F3658(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// lwz r3,2924(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2924);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x823fc194
	if (!cr6.getEQ()) goto loc_823FC194;
	// lwz r3,8(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 8);
loc_823FC194:
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x82401fd0
	sub_82401FD0(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r6,0(r25)
	ctx.r6.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x823fb978
	sub_823FB978(ctx, base);
	// lwz r11,4(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 4);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r6,r11,1
	ctx.r6.s64 = r11.s64 + 1;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823fb828
	sub_823FB828(ctx, base);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r10,140(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 140);
	// mr r9,r23
	ctx.r9.u64 = r23.u64;
	// lwz r7,12(r24)
	ctx.r7.u64 = PPC_LOAD_U32(r24.u32 + 12);
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8240207c
	sub_8240207C(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823fc214
	if (cr0.getEQ()) goto loc_823FC214;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// bne cr6,0x823fc20c
	if (!cr6.getEQ()) goto loc_823FC20C;
	// stw r21,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r21.u32);
loc_823FC20C:
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// bl 0x82401eec
	sub_82401EEC(ctx, base);
loc_823FC214:
	// addi r1,r1,2832
	ctx.r1.s64 = ctx.r1.s64 + 2832;
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_823FC220"))) PPC_WEAK_FUNC(sub_823FC220);
PPC_FUNC_IMPL(__imp__sub_823FC220) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r24,r10
	r24.u64 = ctx.r10.u64;
	// lis r10,-32768
	ctx.r10.s64 = -2147483648;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// ori r10,r10,3
	ctx.r10.u64 = ctx.r10.u64 | 3;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// mr r23,r8
	r23.u64 = ctx.r8.u64;
	// mr r25,r9
	r25.u64 = ctx.r9.u64;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x823fc384
	if (cr6.getEQ()) goto loc_823FC384;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,116(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823fc2bc
	if (cr6.getEQ()) goto loc_823FC2BC;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,116(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823fc2bc
	if (cr6.getEQ()) goto loc_823FC2BC;
	// lis r10,-8125
	ctx.r10.s64 = -532480000;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// ori r10,r10,20301
	ctx.r10.u64 = ctx.r10.u64 | 20301;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x823fc2bc
	if (cr6.getEQ()) goto loc_823FC2BC;
	// mr r9,r24
	ctx.r9.u64 = r24.u64;
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x823f3440
	sub_823F3440(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fc384
	if (!cr0.getEQ()) goto loc_823FC384;
loc_823FC2BC:
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fc2cc
	if (!cr6.getEQ()) goto loc_823FC2CC;
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FC2CC:
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// addi r7,r1,116
	ctx.r7.s64 = ctx.r1.s64 + 116;
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823f3500
	sub_823F3500(ctx, base);
	// lwz r9,112(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x823fc378
	goto loc_823FC378;
loc_823FC2F4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpw cr6,r23,r11
	cr6.compare<int32_t>(r23.s32, r11.s32, xer);
	// blt cr6,0x823fc36c
	if (cr6.getLT()) goto loc_823FC36C;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmpw cr6,r23,r11
	cr6.compare<int32_t>(r23.s32, r11.s32, xer);
	// bgt cr6,0x823fc36c
	if (cr6.getGT()) goto loc_823FC36C;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,-12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -12);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x823fc334
	if (cr0.getEQ()) goto loc_823FC334;
	// lbz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x823fc36c
	if (!cr6.getEQ()) goto loc_823FC36C;
loc_823FC334:
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r24,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r24.u32);
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r25.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r8,r11,-16
	ctx.r8.s64 = r11.s64 + -16;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// stb r5,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r5.u8);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x823fc0d8
	sub_823FC0D8(ctx, base);
	// lwz r9,112(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
loc_823FC36C:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r31,r31,20
	r31.s64 = r31.s64 + 20;
	// stw r9,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r9.u32);
loc_823FC378:
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmplw cr6,r9,r11
	cr6.compare<uint32_t>(ctx.r9.u32, r11.u32, xer);
	// blt cr6,0x823fc2f4
	if (cr6.getLT()) goto loc_823FC2F4;
loc_823FC384:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_823FC390"))) PPC_WEAK_FUNC(sub_823FC390);
PPC_FUNC_IMPL(__imp__sub_823FC390) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed10c
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r4
	r23.u64 = ctx.r4.u64;
	// mr r22,r6
	r22.u64 = ctx.r6.u64;
	// mr r24,r7
	r24.u64 = ctx.r7.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r20,r5
	r20.u64 = ctx.r5.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// mr r18,r9
	r18.u64 = ctx.r9.u64;
	// mr r17,r10
	r17.u64 = ctx.r10.u64;
	// li r19,0
	r19.s64 = 0;
	// bl 0x823fb7e8
	sub_823FB7E8(ctx, base);
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// cmpwi cr6,r21,-1
	cr6.compare<int32_t>(r21.s32, -1, xer);
	// blt cr6,0x823fc3e8
	if (cr6.getLT()) goto loc_823FC3E8;
	// lwz r11,4(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 4);
	// cmpw cr6,r21,r11
	cr6.compare<int32_t>(r21.s32, r11.s32, xer);
	// blt cr6,0x823fc3ec
	if (cr6.getLT()) goto loc_823FC3EC;
loc_823FC3E8:
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FC3EC:
	// lis r10,-8083
	ctx.r10.s64 = -529727488;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// ori r28,r10,29539
	r28.u64 = ctx.r10.u64 | 29539;
	// cmplw cr6,r11,r28
	cr6.compare<uint32_t>(r11.u32, r28.u32, xer);
	// bne cr6,0x823fc604
	if (!cr6.getEQ()) goto loc_823FC604;
	// lis r10,6547
	ctx.r10.s64 = 429064192;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// ori r30,r10,1312
	r30.u64 = ctx.r10.u64 | 1312;
	// lis r10,6547
	ctx.r10.s64 = 429064192;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// ori r29,r10,1313
	r29.u64 = ctx.r10.u64 | 1313;
	// lis r10,6547
	ctx.r10.s64 = 429064192;
	// ori r27,r10,1314
	r27.u64 = ctx.r10.u64 | 1314;
	// bne cr6,0x823fc4d0
	if (!cr6.getEQ()) goto loc_823FC4D0;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x823fc440
	if (cr6.getEQ()) goto loc_823FC440;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x823fc440
	if (cr6.getEQ()) goto loc_823FC440;
	// cmplw cr6,r11,r27
	cr6.compare<uint32_t>(r11.u32, r27.u32, xer);
	// bne cr6,0x823fc4d0
	if (!cr6.getEQ()) goto loc_823FC4D0;
loc_823FC440:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fc4d0
	if (!cr6.getEQ()) goto loc_823FC4D0;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,124(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 124);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823fc5fc
	if (cr6.getEQ()) goto loc_823FC5FC;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r31,124(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 124);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r19,1
	r19.s64 = 1;
	// lwz r20,128(r11)
	r20.u64 = PPC_LOAD_U32(r11.u32 + 128);
	// bl 0x82401fb0
	sub_82401FB0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fc48c
	if (!cr0.getEQ()) goto loc_823FC48C;
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FC48C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplw cr6,r11,r28
	cr6.compare<uint32_t>(r11.u32, r28.u32, xer);
	// bne cr6,0x823fc604
	if (!cr6.getEQ()) goto loc_823FC604;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x823fc4d0
	if (!cr6.getEQ()) goto loc_823FC4D0;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x823fc4c0
	if (cr6.getEQ()) goto loc_823FC4C0;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x823fc4c0
	if (cr6.getEQ()) goto loc_823FC4C0;
	// cmplw cr6,r11,r27
	cr6.compare<uint32_t>(r11.u32, r27.u32, xer);
	// bne cr6,0x823fc4d0
	if (!cr6.getEQ()) goto loc_823FC4D0;
loc_823FC4C0:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fc4d0
	if (!cr6.getEQ()) goto loc_823FC4D0;
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FC4D0:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplw cr6,r11,r28
	cr6.compare<uint32_t>(r11.u32, r28.u32, xer);
	// bne cr6,0x823fc604
	if (!cr6.getEQ()) goto loc_823FC604;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x823fc604
	if (!cr6.getEQ()) goto loc_823FC604;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x823fc504
	if (cr6.getEQ()) goto loc_823FC504;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x823fc504
	if (cr6.getEQ()) goto loc_823FC504;
	// cmplw cr6,r11,r27
	cr6.compare<uint32_t>(r11.u32, r27.u32, xer);
	// bne cr6,0x823fc604
	if (!cr6.getEQ()) goto loc_823FC604;
loc_823FC504:
	// lwz r11,12(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// ble cr6,0x823fc5fc
	if (!cr6.getGT()) goto loc_823FC5FC;
	// mr r8,r22
	ctx.r8.u64 = r22.u64;
	// addi r7,r1,116
	ctx.r7.s64 = ctx.r1.s64 + 116;
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x823f3500
	sub_823F3500(ctx, base);
	// lwz r25,112(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x823fc5f0
	goto loc_823FC5F0;
loc_823FC538:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmpw cr6,r11,r21
	cr6.compare<int32_t>(r11.s32, r21.s32, xer);
	// bgt cr6,0x823fc5e4
	if (cr6.getGT()) goto loc_823FC5E4;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// cmpw cr6,r21,r11
	cr6.compare<int32_t>(r21.s32, r11.s32, xer);
	// bgt cr6,0x823fc5e4
	if (cr6.getGT()) goto loc_823FC5E4;
	// lwz r26,12(r30)
	r26.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// lwz r7,16(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// cmpwi r26,0
	cr0.compare<int32_t>(r26.s32, 0, xer);
	// ble 0x823fc5e4
	if (!cr0.getGT()) goto loc_823FC5E4;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// addi r27,r11,4
	r27.s64 = r11.s64 + 4;
	// lwz r28,0(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 0);
loc_823FC570:
	// mr. r29,r28
	r29.u64 = r28.u64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// ble 0x823fc5a0
	if (!cr0.getGT()) goto loc_823FC5A0;
	// lwz r5,28(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 28);
loc_823FC580:
	// mr r3,r7
	ctx.r3.u64 = ctx.r7.u64;
	// lwz r4,0(r6)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	// bl 0x823fb848
	sub_823FB848(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fc5b0
	if (!cr0.getEQ()) goto loc_823FC5B0;
	// addic. r29,r29,-1
	xer.ca = r29.u32 > 0;
	r29.s64 = r29.s64 + -1;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// addi r6,r6,4
	ctx.r6.s64 = ctx.r6.s64 + 4;
	// bgt 0x823fc580
	if (cr0.getGT()) goto loc_823FC580;
loc_823FC5A0:
	// addic. r26,r26,-1
	xer.ca = r26.u32 > 0;
	r26.s64 = r26.s64 + -1;
	cr0.compare<int32_t>(r26.s32, 0, xer);
	// addi r7,r7,16
	ctx.r7.s64 = ctx.r7.s64 + 16;
	// bgt 0x823fc570
	if (cr0.getGT()) goto loc_823FC570;
	// b 0x823fc5e4
	goto loc_823FC5E4;
loc_823FC5B0:
	// mr r9,r4
	ctx.r9.u64 = ctx.r4.u64;
	// stb r19,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, r19.u8);
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// stw r17,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r17.u32);
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// stw r18,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r18.u32);
	// mr r7,r24
	ctx.r7.u64 = r24.u64;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823fc0d8
	sub_823FC0D8(ctx, base);
	// lwz r25,112(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
loc_823FC5E4:
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r30,r30,20
	r30.s64 = r30.s64 + 20;
	// stw r25,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r25.u32);
loc_823FC5F0:
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmplw cr6,r25,r11
	cr6.compare<uint32_t>(r25.u32, r11.u32, xer);
	// blt cr6,0x823fc538
	if (cr6.getLT()) goto loc_823FC538;
loc_823FC5FC:
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x823ed15c
	return;
loc_823FC604:
	// lwz r11,12(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// ble cr6,0x823fc5fc
	if (!cr6.getGT()) goto loc_823FC5FC;
	// clrlwi. r11,r26,24
	r11.u64 = r26.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fc640
	if (!cr0.getEQ()) goto loc_823FC640;
	// mr r10,r17
	ctx.r10.u64 = r17.u64;
	// mr r9,r18
	ctx.r9.u64 = r18.u64;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// mr r7,r24
	ctx.r7.u64 = r24.u64;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823fc220
	sub_823FC220(ctx, base);
	// b 0x823fc5fc
	goto loc_823FC5FC;
loc_823FC640:
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
}

__attribute__((alias("__imp__sub_823FC648"))) PPC_WEAK_FUNC(sub_823FC648);
PPC_FUNC_IMPL(__imp__sub_823FC648) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29720(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29720);
	// mflr r12
	// bl 0x823ed130
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// andi. r7,r10,102
	ctx.r7.u64 = ctx.r10.u64 & 102;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// cmplwi r7,0
	cr0.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq 0x823fc7bc
	if (cr0.getEQ()) {
		sub_823FC7BC(ctx, base);
		return;
	}
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x823fc84c
	if (cr6.getEQ()) {
		// ERROR 823FC84C
		return;
	}
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne cr6,0x823fc84c
	if (!cr6.getEQ()) {
		// ERROR 823FC84C
		return;
	}
	// rlwinm. r11,r10,0,26,26
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fc714
	if (cr0.getEQ()) goto loc_823FC714;
	// bl 0x823f31d8
	sub_823F31D8(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823fc714
	if (cr0.getEQ()) goto loc_823FC714;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,140(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 140);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fc6c0
	if (!cr6.getEQ()) goto loc_823FC6C0;
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FC6C0:
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r3,140(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 140);
	// bl 0x823f3220
	sub_823F3220(ctx, base);
	// lwz r28,0(r30)
	r28.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,140(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 140);
	// std r28,48(r11)
	PPC_STORE_U64(r11.u32 + 48, r28.u64);
	// lwz r28,4(r30)
	r28.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,140(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 140);
	// std r28,56(r11)
	PPC_STORE_U64(r11.u32 + 56, r28.u64);
	// lwz r30,8(r30)
	r30.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,140(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 140);
	// std r30,64(r11)
	PPC_STORE_U64(r11.u32 + 64, r30.u64);
	// bl 0x823f31d8
	sub_823F31D8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823f3220
	sub_823F3220(ctx, base);
	// b 0x823fc84c
	// ERROR 823FC84C
	return;
loc_823FC714:
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x823f32c0
	sub_823F32C0(ctx, base);
	// lwz r11,12(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823fc84c
	if (cr6.getEQ()) {
		// ERROR 823FC84C
		return;
	}
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// lwz r29,4(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r29,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r29.u32);
	// cmplwi r29,0
	cr0.compare<uint32_t>(r29.u32, 0, xer);
	// beq 0x823fc84c
	if (cr0.getEQ()) {
		// ERROR 823FC84C
		return;
	}
	// lwz r30,8(r29)
	r30.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// beq 0x823fc84c
	if (cr0.getEQ()) {
		// ERROR 823FC84C
		return;
	}
	// stw r30,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r30.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823f3768
	sub_823F3768(ctx, base);
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x823f3710
	sub_823F3710(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fc7b0
	if (cr0.getEQ()) {
		// ERROR 823FC7B0
		return;
	}
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823fc7b0
	if (cr0.getEQ()) {
		// ERROR 823FC7B0
		return;
	}
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823fc7a8
	// ERROR 823FC7A8
	return;
}

__attribute__((alias("__imp__sub_823FC650"))) PPC_WEAK_FUNC(sub_823FC650);
PPC_FUNC_IMPL(__imp__sub_823FC650) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// andi. r7,r10,102
	ctx.r7.u64 = ctx.r10.u64 & 102;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// cmplwi r7,0
	cr0.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq 0x823fc7bc
	if (cr0.getEQ()) goto loc_823FC7BC;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x823fc84c
	if (cr6.getEQ()) goto loc_823FC84C;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne cr6,0x823fc84c
	if (!cr6.getEQ()) goto loc_823FC84C;
	// rlwinm. r11,r10,0,26,26
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fc714
	if (cr0.getEQ()) goto loc_823FC714;
	// bl 0x823f31d8
	sub_823F31D8(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823fc714
	if (cr0.getEQ()) goto loc_823FC714;
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,140(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 140);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x823fc6c0
	if (!cr6.getEQ()) goto loc_823FC6C0;
	// bl 0x823f8108
	sub_823F8108(ctx, base);
loc_823FC6C0:
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r3,140(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 140);
	// bl 0x823f3220
	sub_823F3220(ctx, base);
	// lwz r28,0(r30)
	r28.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,140(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 140);
	// std r28,48(r11)
	PPC_STORE_U64(r11.u32 + 48, r28.u64);
	// lwz r28,4(r30)
	r28.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,140(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 140);
	// std r28,56(r11)
	PPC_STORE_U64(r11.u32 + 56, r28.u64);
	// lwz r30,8(r30)
	r30.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// bl 0x823f2960
	sub_823F2960(ctx, base);
	// lwz r11,140(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 140);
	// std r30,64(r11)
	PPC_STORE_U64(r11.u32 + 64, r30.u64);
	// bl 0x823f31d8
	sub_823F31D8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823f3220
	sub_823F3220(ctx, base);
	// b 0x823fc84c
	goto loc_823FC84C;
loc_823FC714:
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x823f32c0
	sub_823F32C0(ctx, base);
	// lwz r11,12(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x823fc84c
	if (cr6.getEQ()) goto loc_823FC84C;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// lwz r29,4(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r29,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r29.u32);
	// cmplwi r29,0
	cr0.compare<uint32_t>(r29.u32, 0, xer);
	// beq 0x823fc84c
	if (cr0.getEQ()) goto loc_823FC84C;
	// lwz r30,8(r29)
	r30.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// beq 0x823fc84c
	if (cr0.getEQ()) goto loc_823FC84C;
	// stw r30,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r30.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823f3768
	sub_823F3768(ctx, base);
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x823f3710
	sub_823F3710(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fc7b0
	if (cr0.getEQ()) goto loc_823FC7B0;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823fc7b0
	if (cr0.getEQ()) goto loc_823FC7B0;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x823fc7a8
	goto loc_823FC7A8;
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
	// lwz r29,80(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// lwz r30,84(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 84);
loc_823FC7A8:
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
loc_823FC7B0:
	// li r11,0
	r11.s64 = 0;
	// stw r11,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r11.u32);
	// b 0x823fc84c
	goto loc_823FC84C;
loc_823FC7BC:
	// lwz r10,12(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x823fc84c
	if (cr6.getEQ()) goto loc_823FC84C;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lis r7,-8083
	ctx.r7.s64 = -529727488;
	// ori r7,r7,29539
	ctx.r7.u64 = ctx.r7.u64 | 29539;
	// cmplw cr6,r10,r7
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r7.u32, xer);
	// bne cr6,0x823fc82c
	if (!cr6.getEQ()) goto loc_823FC82C;
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r10,3
	cr6.compare<uint32_t>(ctx.r10.u32, 3, xer);
	// blt cr6,0x823fc82c
	if (cr6.getLT()) goto loc_823FC82C;
	// lwz r10,20(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// lis r7,6547
	ctx.r7.s64 = 429064192;
	// ori r7,r7,1314
	ctx.r7.u64 = ctx.r7.u64 | 1314;
	// cmplw cr6,r10,r7
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r7.u32, xer);
	// ble cr6,0x823fc82c
	if (!cr6.getGT()) goto loc_823FC82C;
	// lwz r10,28(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// lwz r26,8(r10)
	r26.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// cmplwi r26,0
	cr0.compare<uint32_t>(r26.u32, 0, xer);
	// beq 0x823fc82c
	if (cr0.getEQ()) goto loc_823FC82C;
	// clrlwi r10,r11,24
	ctx.r10.u64 = r11.u32 & 0xFF;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mtctr r26
	ctr.u64 = r26.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x823fc850
	goto loc_823FC850;
loc_823FC82C:
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x823fc390
	sub_823FC390(ctx, base);
loc_823FC84C:
	// li r3,1
	ctx.r3.s64 = 1;
loc_823FC850:
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_823FC79C"))) PPC_WEAK_FUNC(sub_823FC79C);
PPC_FUNC_IMPL(__imp__sub_823FC79C) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	// bl 0x823f80a8
	sub_823F80A8(ctx, base);
	// lwz r29,80(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// lwz r30,84(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r11.u32);
	// b 0x823fc84c
	// ERROR 823FC84C
	return;
}

__attribute__((alias("__imp__sub_823FC7BC"))) PPC_WEAK_FUNC(sub_823FC7BC);
PPC_FUNC_IMPL(__imp__sub_823FC7BC) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	// lwz r10,12(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x823fc84c
	if (cr6.getEQ()) goto loc_823FC84C;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lis r7,-8083
	ctx.r7.s64 = -529727488;
	// ori r7,r7,29539
	ctx.r7.u64 = ctx.r7.u64 | 29539;
	// cmplw cr6,r10,r7
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r7.u32, xer);
	// bne cr6,0x823fc82c
	if (!cr6.getEQ()) goto loc_823FC82C;
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r10,3
	cr6.compare<uint32_t>(ctx.r10.u32, 3, xer);
	// blt cr6,0x823fc82c
	if (cr6.getLT()) goto loc_823FC82C;
	// lwz r10,20(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// lis r7,6547
	ctx.r7.s64 = 429064192;
	// ori r7,r7,1314
	ctx.r7.u64 = ctx.r7.u64 | 1314;
	// cmplw cr6,r10,r7
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r7.u32, xer);
	// ble cr6,0x823fc82c
	if (!cr6.getGT()) goto loc_823FC82C;
	// lwz r10,28(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// lwz r26,8(r10)
	r26.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// cmplwi r26,0
	cr0.compare<uint32_t>(r26.u32, 0, xer);
	// beq 0x823fc82c
	if (cr0.getEQ()) goto loc_823FC82C;
	// clrlwi r10,r11,24
	ctx.r10.u64 = r11.u32 & 0xFF;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mtctr r26
	ctr.u64 = r26.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x823fc850
	goto loc_823FC850;
loc_823FC82C:
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x823fc390
	sub_823FC390(ctx, base);
loc_823FC84C:
	// li r3,1
	ctx.r3.s64 = 1;
loc_823FC850:
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_823FC858"))) PPC_WEAK_FUNC(sub_823FC858);
PPC_FUNC_IMPL(__imp__sub_823FC858) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FC868"))) PPC_WEAK_FUNC(sub_823FC868);
PPC_FUNC_IMPL(__imp__sub_823FC868) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// bne cr6,0x823fc8fc
	if (!cr6.getEQ()) goto loc_823FC8FC;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplw cr6,r3,r29
	cr6.compare<uint32_t>(ctx.r3.u32, r29.u32, xer);
	// bne cr6,0x823fc8d8
	if (!cr6.getEQ()) goto loc_823FC8D8;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x823f1f38
	sub_823F1F38(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// bne 0x823fc8bc
	if (!cr0.getEQ()) goto loc_823FC8BC;
loc_823FC8B4:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x823fc900
	goto loc_823FC900;
loc_823FC8BC:
	// li r11,1
	r11.s64 = 1;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
	// lwz r5,0(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// b 0x823fc8f0
	goto loc_823FC8F0;
loc_823FC8D8:
	// li r5,2
	ctx.r5.s64 = 2;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// bl 0x823f79e8
	sub_823F79E8(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823fc8b4
	if (cr0.getEQ()) goto loc_823FC8B4;
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
loc_823FC8F0:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823FC8FC:
	// li r3,1
	ctx.r3.s64 = 1;
loc_823FC900:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823FC908"))) PPC_WEAK_FUNC(sub_823FC908);
PPC_FUNC_IMPL(__imp__sub_823FC908) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-688(r1)
	ea = -688 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stw r6,732(r1)
	PPC_STORE_U32(ctx.r1.u32 + 732, ctx.r6.u32);
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// li r23,0
	r23.s64 = 0;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r11,350
	r11.s64 = 350;
	// stw r28,716(r1)
	PPC_STORE_U32(ctx.r1.u32 + 716, r28.u32);
	// stw r23,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r23.u32);
	// sth r23,96(r1)
	PPC_STORE_U16(ctx.r1.u32 + 96, r23.u16);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// bne cr6,0x823fc978
	if (!cr6.getEQ()) goto loc_823FC978;
loc_823FC948:
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
loc_823FC970:
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x823fdb1c
	goto loc_823FDB1C;
loc_823FC978:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x823fc948
	if (cr6.getEQ()) goto loc_823FC948;
	// lwz r11,12(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 12);
	// rlwinm. r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fca4c
	if (!cr0.getEQ()) goto loc_823FCA4C;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// addi r30,r11,-15840
	r30.s64 = r11.s64 + -15840;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r29,r11,-18648
	r29.s64 = r11.s64 + -18648;
	// beq cr6,0x823fc9e4
	if (cr6.getEQ()) goto loc_823FC9E4;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// beq cr6,0x823fc9e4
	if (cr6.getEQ()) goto loc_823FC9E4;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// srawi r11,r3,5
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1F) != 0);
	r11.s64 = ctx.r3.s32 >> 5;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// rlwinm r31,r11,2,0,29
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// lwzx r10,r31,r30
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// rlwinm r11,r3,6,21,25
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0x7C0;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x823fc9e8
	goto loc_823FC9E8;
loc_823FC9E4:
	// mr r11,r29
	r11.u64 = r29.u64;
loc_823FC9E8:
	// lbz r11,40(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 40);
	// rlwinm. r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fc948
	if (!cr0.getEQ()) goto loc_823FC948;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x823fca3c
	if (cr6.getEQ()) goto loc_823FCA3C;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// beq cr6,0x823fca3c
	if (cr6.getEQ()) goto loc_823FCA3C;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// srawi r11,r3,5
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1F) != 0);
	r11.s64 = ctx.r3.s32 >> 5;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// rlwinm r31,r11,2,0,29
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// lwzx r10,r31,r30
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + r30.u32);
	// rlwinm r11,r3,6,21,25
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0x7C0;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x823fca40
	goto loc_823FCA40;
loc_823FCA3C:
	// mr r11,r29
	r11.u64 = r29.u64;
loc_823FCA40:
	// lbz r11,40(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 40);
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fc948
	if (!cr0.getEQ()) goto loc_823FC948;
loc_823FCA4C:
	// lbz r3,0(r28)
	ctx.r3.u64 = PPC_LOAD_U8(r28.u32 + 0);
	// mr r14,r23
	r14.u64 = r23.u64;
	// stb r23,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r23.u8);
	// stw r23,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r23.u32);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823fdb18
	if (cr0.getEQ()) goto loc_823FDB18;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lwz r19,716(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 716);
	// addi r11,r11,-19456
	r11.s64 = r11.s64 + -19456;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r11,r11,-20552
	r11.s64 = r11.s64 + -20552;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
loc_823FCA80:
	// bl 0x823f0858
	sub_823F0858(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fcb00
	if (cr0.getEQ()) goto loc_823FCB00;
	// addi r14,r14,-1
	r14.s64 = r14.s64 + -1;
loc_823FCA90:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fcab8
	if (cr0.getLT()) goto loc_823FCAB8;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r31,0(r11)
	r31.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fcac4
	goto loc_823FCAC4;
loc_823FCAB8:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
loc_823FCAC4:
	// cmpwi cr6,r31,-1
	cr6.compare<int32_t>(r31.s32, -1, xer);
	// beq cr6,0x823fcae8
	if (cr6.getEQ()) goto loc_823FCAE8;
	// clrlwi r3,r31,24
	ctx.r3.u64 = r31.u32 & 0xFF;
	// bl 0x823f0858
	sub_823F0858(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fca90
	if (!cr0.getEQ()) goto loc_823FCA90;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82402288
	sub_82402288(ctx, base);
loc_823FCAE8:
	// addi r19,r19,1
	r19.s64 = r19.s64 + 1;
	// lbz r3,0(r19)
	ctx.r3.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// bl 0x823f0858
	sub_823F0858(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fcae8
	if (!cr0.getEQ()) goto loc_823FCAE8;
	// b 0x823fdaac
	goto loc_823FDAAC;
loc_823FCB00:
	// lbz r11,0(r19)
	r11.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// cmplwi cr6,r11,37
	cr6.compare<uint32_t>(r11.u32, 37, xer);
	// bne cr6,0x823fd9e4
	if (!cr6.getEQ()) goto loc_823FD9E4;
	// li r22,0
	r22.s64 = 0;
	// li r27,0
	r27.s64 = 0;
	// li r18,0
	r18.s64 = 0;
	// li r17,0
	r17.s64 = 0;
	// li r15,0
	r15.s64 = 0;
	// li r25,0
	r25.s64 = 0;
	// li r20,0
	r20.s64 = 0;
	// li r29,0
	r29.s64 = 0;
	// li r30,0
	r30.s64 = 0;
	// li r24,0
	r24.s64 = 0;
	// li r28,0
	r28.s64 = 0;
	// li r16,1
	r16.s64 = 1;
	// li r21,0
	r21.s64 = 0;
loc_823FCB40:
	// addi r19,r19,1
	r19.s64 = r19.s64 + 1;
	// lbz r31,0(r19)
	r31.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fcb6c
	if (cr0.getEQ()) goto loc_823FCB6C;
	// mulli r11,r15,10
	r11.s64 = r15.s64 * 10;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r17,r17,1
	r17.s64 = r17.s64 + 1;
	// addi r15,r11,-48
	r15.s64 = r11.s64 + -48;
	// b 0x823fcc80
	goto loc_823FCC80;
loc_823FCB6C:
	// cmpwi cr6,r31,78
	cr6.compare<int32_t>(r31.s32, 78, xer);
	// bgt cr6,0x823fcc2c
	if (cr6.getGT()) goto loc_823FCC2C;
	// beq cr6,0x823fcc80
	if (cr6.getEQ()) goto loc_823FCC80;
	// cmpwi cr6,r31,42
	cr6.compare<int32_t>(r31.s32, 42, xer);
	// beq cr6,0x823fcc20
	if (cr6.getEQ()) goto loc_823FCC20;
	// cmpwi cr6,r31,70
	cr6.compare<int32_t>(r31.s32, 70, xer);
	// beq cr6,0x823fcc80
	if (cr6.getEQ()) goto loc_823FCC80;
	// cmpwi cr6,r31,73
	cr6.compare<int32_t>(r31.s32, 73, xer);
	// beq cr6,0x823fcba4
	if (cr6.getEQ()) goto loc_823FCBA4;
	// cmpwi cr6,r31,76
	cr6.compare<int32_t>(r31.s32, 76, xer);
	// bne cr6,0x823fcc44
	if (!cr6.getEQ()) goto loc_823FCC44;
	// addi r11,r16,1
	r11.s64 = r16.s64 + 1;
	// extsb r16,r11
	r16.s64 = r11.s8;
	// b 0x823fcc80
	goto loc_823FCC80;
loc_823FCBA4:
	// lbz r10,1(r19)
	ctx.r10.u64 = PPC_LOAD_U8(r19.u32 + 1);
	// cmplwi cr6,r10,54
	cr6.compare<uint32_t>(ctx.r10.u32, 54, xer);
	// bne cr6,0x823fcbd4
	if (!cr6.getEQ()) goto loc_823FCBD4;
	// lbz r9,2(r19)
	ctx.r9.u64 = PPC_LOAD_U8(r19.u32 + 2);
	// addi r11,r19,2
	r11.s64 = r19.s64 + 2;
	// cmplwi cr6,r9,52
	cr6.compare<uint32_t>(ctx.r9.u32, 52, xer);
	// bne cr6,0x823fcbd4
	if (!cr6.getEQ()) goto loc_823FCBD4;
loc_823FCBC0:
	// mr r19,r11
	r19.u64 = r11.u64;
	// li r11,0
	r11.s64 = 0;
	// addi r21,r21,1
	r21.s64 = r21.s64 + 1;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// b 0x823fcc80
	goto loc_823FCC80;
loc_823FCBD4:
	// cmplwi cr6,r10,51
	cr6.compare<uint32_t>(ctx.r10.u32, 51, xer);
	// bne cr6,0x823fcbf4
	if (!cr6.getEQ()) goto loc_823FCBF4;
	// lbz r9,2(r19)
	ctx.r9.u64 = PPC_LOAD_U8(r19.u32 + 2);
	// addi r11,r19,2
	r11.s64 = r19.s64 + 2;
	// cmplwi cr6,r9,50
	cr6.compare<uint32_t>(ctx.r9.u32, 50, xer);
	// bne cr6,0x823fcbf4
	if (!cr6.getEQ()) goto loc_823FCBF4;
	// mr r19,r11
	r19.u64 = r11.u64;
	// b 0x823fcc80
	goto loc_823FCC80;
loc_823FCBF4:
	// cmplwi cr6,r10,100
	cr6.compare<uint32_t>(ctx.r10.u32, 100, xer);
	// beq cr6,0x823fcc80
	if (cr6.getEQ()) goto loc_823FCC80;
	// cmplwi cr6,r10,105
	cr6.compare<uint32_t>(ctx.r10.u32, 105, xer);
	// beq cr6,0x823fcc80
	if (cr6.getEQ()) goto loc_823FCC80;
	// cmplwi cr6,r10,111
	cr6.compare<uint32_t>(ctx.r10.u32, 111, xer);
	// beq cr6,0x823fcc80
	if (cr6.getEQ()) goto loc_823FCC80;
	// cmplwi cr6,r10,120
	cr6.compare<uint32_t>(ctx.r10.u32, 120, xer);
	// beq cr6,0x823fcc80
	if (cr6.getEQ()) goto loc_823FCC80;
	// cmplwi cr6,r10,88
	cr6.compare<uint32_t>(ctx.r10.u32, 88, xer);
	// bne cr6,0x823fcc44
	if (!cr6.getEQ()) goto loc_823FCC44;
	// b 0x823fcc80
	goto loc_823FCC80;
loc_823FCC20:
	// addi r11,r29,1
	r11.s64 = r29.s64 + 1;
	// extsb r29,r11
	r29.s64 = r11.s8;
	// b 0x823fcc80
	goto loc_823FCC80;
loc_823FCC2C:
	// cmpwi cr6,r31,104
	cr6.compare<int32_t>(r31.s32, 104, xer);
	// beq cr6,0x823fcc70
	if (cr6.getEQ()) goto loc_823FCC70;
	// cmpwi cr6,r31,108
	cr6.compare<int32_t>(r31.s32, 108, xer);
	// beq cr6,0x823fcc50
	if (cr6.getEQ()) goto loc_823FCC50;
	// cmpwi cr6,r31,119
	cr6.compare<int32_t>(r31.s32, 119, xer);
	// beq cr6,0x823fcc68
	if (cr6.getEQ()) goto loc_823FCC68;
loc_823FCC44:
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// extsb r30,r11
	r30.s64 = r11.s8;
	// b 0x823fcc80
	goto loc_823FCC80;
loc_823FCC50:
	// lbz r10,1(r19)
	ctx.r10.u64 = PPC_LOAD_U8(r19.u32 + 1);
	// addi r11,r19,1
	r11.s64 = r19.s64 + 1;
	// cmplwi cr6,r10,108
	cr6.compare<uint32_t>(ctx.r10.u32, 108, xer);
	// beq cr6,0x823fcbc0
	if (cr6.getEQ()) goto loc_823FCBC0;
	// addi r11,r16,1
	r11.s64 = r16.s64 + 1;
	// extsb r16,r11
	r16.s64 = r11.s8;
loc_823FCC68:
	// addi r11,r28,1
	r11.s64 = r28.s64 + 1;
	// b 0x823fcc7c
	goto loc_823FCC7C;
loc_823FCC70:
	// addi r10,r16,-1
	ctx.r10.s64 = r16.s64 + -1;
	// addi r11,r28,-1
	r11.s64 = r28.s64 + -1;
	// extsb r16,r10
	r16.s64 = ctx.r10.s8;
loc_823FCC7C:
	// extsb r28,r11
	r28.s64 = r11.s8;
loc_823FCC80:
	// extsb. r11,r30
	r11.s64 = r30.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fcb40
	if (cr0.getEQ()) goto loc_823FCB40;
	// extsb. r11,r29
	r11.s64 = r29.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r19,716(r1)
	PPC_STORE_U32(ctx.r1.u32 + 716, r19.u32);
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// bne 0x823fccb8
	if (!cr0.getEQ()) goto loc_823FCCB8;
	// lwz r11,732(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 732);
	// addi r10,r11,7
	ctx.r10.s64 = r11.s64 + 7;
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// rlwinm r11,r10,0,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFF8;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,732(r1)
	PPC_STORE_U32(ctx.r1.u32 + 732, r11.u32);
	// lwz r11,-4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// b 0x823fccbc
	goto loc_823FCCBC;
loc_823FCCB8:
	// li r11,0
	r11.s64 = 0;
loc_823FCCBC:
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// li r29,0
	r29.s64 = 0;
	// extsb. r11,r28
	r11.s64 = r28.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fcce8
	if (!cr0.getEQ()) goto loc_823FCCE8;
	// lbz r11,0(r19)
	r11.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// cmplwi cr6,r11,83
	cr6.compare<uint32_t>(r11.u32, 83, xer);
	// beq cr6,0x823fcce4
	if (cr6.getEQ()) goto loc_823FCCE4;
	// cmplwi cr6,r11,67
	cr6.compare<uint32_t>(r11.u32, 67, xer);
	// li r28,-1
	r28.s64 = -1;
	// bne cr6,0x823fcce8
	if (!cr6.getEQ()) goto loc_823FCCE8;
loc_823FCCE4:
	// li r28,1
	r28.s64 = 1;
loc_823FCCE8:
	// lwz r10,716(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 716);
	// lbz r11,0(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// ori r19,r11,32
	r19.u64 = r11.u64 | 32;
	// cmpwi cr6,r19,110
	cr6.compare<int32_t>(r19.s32, 110, xer);
	// beq cr6,0x823fcda0
	if (cr6.getEQ()) goto loc_823FCDA0;
	// cmpwi cr6,r19,99
	cr6.compare<int32_t>(r19.s32, 99, xer);
	// beq cr6,0x823fcd60
	if (cr6.getEQ()) goto loc_823FCD60;
	// cmpwi cr6,r19,123
	cr6.compare<int32_t>(r19.s32, 123, xer);
	// beq cr6,0x823fcd60
	if (cr6.getEQ()) goto loc_823FCD60;
loc_823FCD0C:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fcd34
	if (cr0.getLT()) goto loc_823FCD34;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r31,0(r11)
	r31.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fcd40
	goto loc_823FCD40;
loc_823FCD34:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
loc_823FCD40:
	// cmpwi cr6,r31,-1
	cr6.compare<int32_t>(r31.s32, -1, xer);
	// beq cr6,0x823fcd58
	if (cr6.getEQ()) goto loc_823FCD58;
	// clrlwi r3,r31,24
	ctx.r3.u64 = r31.u32 & 0xFF;
	// bl 0x823f0858
	sub_823F0858(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fcd0c
	if (!cr0.getEQ()) goto loc_823FCD0C;
loc_823FCD58:
	// mr r23,r31
	r23.u64 = r31.u64;
	// b 0x823fcd94
	goto loc_823FCD94;
loc_823FCD60:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fcd88
	if (cr0.getLT()) goto loc_823FCD88;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fcd94
	goto loc_823FCD94;
loc_823FCD88:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FCD94:
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// beq cr6,0x823fdae0
	if (cr6.getEQ()) goto loc_823FDAE0;
	// lwz r10,716(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 716);
loc_823FCDA0:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823fcdb0
	if (cr6.getEQ()) goto loc_823FCDB0;
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// beq cr6,0x823fdacc
	if (cr6.getEQ()) goto loc_823FDACC;
loc_823FCDB0:
	// addi r11,r19,-99
	r11.s64 = r19.s64 + -99;
	// cmplwi cr6,r11,24
	cr6.compare<uint32_t>(r11.u32, 24, xer);
	// bgt cr6,0x823fd998
	if (cr6.getGT()) goto loc_823FD998;
	// lis r12,-32249
	r12.s64 = -2113470464;
	// addi r12,r12,11968
	r12.s64 = r12.s64 + 11968;
	// rlwinm r0,r11,1,0,30
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r0,r12,r0
	r0.u64 = PPC_LOAD_U16(r12.u32 + r0.u32);
	// lis r12,-32192
	r12.s64 = -2109734912;
	// addi r12,r12,-12828
	r12.s64 = r12.s64 + -12828;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_823FCDE4;
	case 1:
		goto loc_823FD280;
	case 2:
		goto loc_823FD5C0;
	case 3:
		goto loc_823FD5C0;
	case 4:
		goto loc_823FD5C0;
	case 5:
		goto loc_823FD998;
	case 6:
		goto loc_823FD120;
	case 7:
		goto loc_823FD998;
	case 8:
		goto loc_823FD998;
	case 9:
		goto loc_823FD998;
	case 10:
		goto loc_823FD998;
	case 11:
		goto loc_823FD56C;
	case 12:
		goto loc_823FD280;
	case 13:
		goto loc_823FD27C;
	case 14:
		goto loc_823FD998;
	case 15:
		goto loc_823FD998;
	case 16:
		goto loc_823FCDF4;
	case 17:
		goto loc_823FD998;
	case 18:
		goto loc_823FD280;
	case 19:
		goto loc_823FD998;
	case 20:
		goto loc_823FD998;
	case 21:
		goto loc_823FD124;
	case 22:
		goto loc_823FD998;
	case 23:
		goto loc_823FD998;
	case 24:
		goto loc_823FCE04;
	default:
		__builtin_unreachable();
	}
loc_823FCDE4:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// bne cr6,0x823fcdf4
	if (!cr6.getEQ()) goto loc_823FCDF4;
	// li r17,1
	r17.s64 = 1;
	// addi r15,r15,1
	r15.s64 = r15.s64 + 1;
loc_823FCDF4:
	// extsb. r11,r28
	r11.s64 = r28.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// ble 0x823fcf44
	if (!cr0.getGT()) goto loc_823FCF44;
	// li r24,1
	r24.s64 = 1;
	// b 0x823fcf44
	goto loc_823FCF44;
loc_823FCE04:
	// extsb. r11,r28
	r11.s64 = r28.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// ble 0x823fce10
	if (!cr0.getGT()) goto loc_823FCE10;
	// li r24,1
	r24.s64 = 1;
loc_823FCE10:
	// addi r6,r10,1
	ctx.r6.s64 = ctx.r10.s64 + 1;
	// lbz r11,0(r6)
	r11.u64 = PPC_LOAD_U8(ctx.r6.u32 + 0);
	// stw r6,716(r1)
	PPC_STORE_U32(ctx.r1.u32 + 716, ctx.r6.u32);
	// cmplwi cr6,r11,94
	cr6.compare<uint32_t>(r11.u32, 94, xer);
	// bne cr6,0x823fce2c
	if (!cr6.getEQ()) goto loc_823FCE2C;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// li r25,-1
	r25.s64 = -1;
loc_823FCE2C:
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// li r5,0
	ctx.r5.s64 = 0;
	// cmpwi cr6,r19,123
	cr6.compare<int32_t>(r19.s32, 123, xer);
	// std r5,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r5.u64);
	// std r5,8(r11)
	PPC_STORE_U64(r11.u32 + 8, ctx.r5.u64);
	// std r5,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r5.u64);
	// std r5,24(r11)
	PPC_STORE_U64(r11.u32 + 24, ctx.r5.u64);
	// bne cr6,0x823fce68
	if (!cr6.getEQ()) goto loc_823FCE68;
	// lbz r11,0(r6)
	r11.u64 = PPC_LOAD_U8(ctx.r6.u32 + 0);
	// cmplwi cr6,r11,93
	cr6.compare<uint32_t>(r11.u32, 93, xer);
	// bne cr6,0x823fce68
	if (!cr6.getEQ()) goto loc_823FCE68;
	// li r11,32
	r11.s64 = 32;
	// li r27,93
	r27.s64 = 93;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// stb r11,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, r11.u8);
loc_823FCE68:
	// lbz r11,0(r6)
	r11.u64 = PPC_LOAD_U8(ctx.r6.u32 + 0);
	// cmplwi cr6,r11,93
	cr6.compare<uint32_t>(r11.u32, 93, xer);
	// beq cr6,0x823fcf2c
	if (cr6.getEQ()) goto loc_823FCF2C;
	// li r4,1
	ctx.r4.s64 = 1;
loc_823FCE78:
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// clrlwi r9,r8,24
	ctx.r9.u64 = ctx.r8.u32 & 0xFF;
	// cmplwi cr6,r9,45
	cr6.compare<uint32_t>(ctx.r9.u32, 45, xer);
	// bne cr6,0x823fcf00
	if (!cr6.getEQ()) goto loc_823FCF00;
	// clrlwi. r10,r27,24
	ctx.r10.u64 = r27.u32 & 0xFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823fcf00
	if (cr0.getEQ()) goto loc_823FCF00;
	// lbz r11,0(r6)
	r11.u64 = PPC_LOAD_U8(ctx.r6.u32 + 0);
	// cmplwi cr6,r11,93
	cr6.compare<uint32_t>(r11.u32, 93, xer);
	// beq cr6,0x823fcf00
	if (cr6.getEQ()) goto loc_823FCF00;
	// clrlwi r9,r11,24
	ctx.r9.u64 = r11.u32 & 0xFF;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bge cr6,0x823fceb8
	if (!cr6.getLT()) goto loc_823FCEB8;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// b 0x823fcec0
	goto loc_823FCEC0;
loc_823FCEB8:
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// mr r27,r11
	r27.u64 = r11.u64;
loc_823FCEC0:
	// clrlwi r7,r10,24
	ctx.r7.u64 = ctx.r10.u32 & 0xFF;
	// clrlwi r11,r27,24
	r11.u64 = r27.u32 & 0xFF;
	// b 0x823fcef0
	goto loc_823FCEF0;
loc_823FCECC:
	// rlwinm r10,r11,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// clrlwi r11,r11,29
	r11.u64 = r11.u32 & 0x7;
	// addi r9,r1,144
	ctx.r9.s64 = ctx.r1.s64 + 144;
	// slw r3,r4,r11
	ctx.r3.u64 = r11.u8 & 0x20 ? 0 : (ctx.r4.u32 << (r11.u8 & 0x3F));
	// clrlwi r11,r8,24
	r11.u64 = ctx.r8.u32 & 0xFF;
	// lbzx r8,r10,r9
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// or r8,r3,r8
	ctx.r8.u64 = ctx.r3.u64 | ctx.r8.u64;
	// stbx r8,r10,r9
	PPC_STORE_U8(ctx.r10.u32 + ctx.r9.u32, ctx.r8.u8);
loc_823FCEF0:
	// cmplw cr6,r11,r7
	cr6.compare<uint32_t>(r11.u32, ctx.r7.u32, xer);
	// ble cr6,0x823fcecc
	if (!cr6.getGT()) goto loc_823FCECC;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// b 0x823fcf20
	goto loc_823FCF20;
loc_823FCF00:
	// rlwinm r11,r9,29,3,31
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 29) & 0x1FFFFFFF;
	// clrlwi r9,r9,29
	ctx.r9.u64 = ctx.r9.u32 & 0x7;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// mr r27,r8
	r27.u64 = ctx.r8.u64;
	// lbzx r8,r11,r10
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// slw r9,r4,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r4.u32 << (ctx.r9.u8 & 0x3F));
	// or r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 | ctx.r8.u64;
	// stbx r9,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, ctx.r9.u8);
loc_823FCF20:
	// lbz r11,0(r6)
	r11.u64 = PPC_LOAD_U8(ctx.r6.u32 + 0);
	// cmplwi cr6,r11,93
	cr6.compare<uint32_t>(r11.u32, 93, xer);
	// bne cr6,0x823fce78
	if (!cr6.getEQ()) goto loc_823FCE78;
loc_823FCF2C:
	// lbz r11,0(r6)
	r11.u64 = PPC_LOAD_U8(ctx.r6.u32 + 0);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x823fdae0
	if (cr0.getEQ()) goto loc_823FDAE0;
	// cmpwi cr6,r19,123
	cr6.compare<int32_t>(r19.s32, 123, xer);
	// bne cr6,0x823fcf44
	if (!cr6.getEQ()) goto loc_823FCF44;
	// stw r6,716(r1)
	PPC_STORE_U32(ctx.r1.u32 + 716, ctx.r6.u32);
loc_823FCF44:
	// lwz r30,88(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r14,r14,-1
	r14.s64 = r14.s64 + -1;
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// mr r31,r30
	r31.u64 = r30.u64;
	// beq cr6,0x823fcf64
	if (cr6.getEQ()) goto loc_823FCF64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82402288
	sub_82402288(ctx, base);
loc_823FCF64:
	// lwz r29,124(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
loc_823FCF68:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823fcf7c
	if (cr6.getEQ()) goto loc_823FCF7C;
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// addi r15,r15,-1
	r15.s64 = r15.s64 + -1;
	// beq cr6,0x823fd0d4
	if (cr6.getEQ()) goto loc_823FD0D4;
loc_823FCF7C:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fcfa4
	if (cr0.getLT()) goto loc_823FCFA4;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fcfb0
	goto loc_823FCFB0;
loc_823FCFA4:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FCFB0:
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// beq cr6,0x823fd0bc
	if (cr6.getEQ()) goto loc_823FD0BC;
	// cmpwi cr6,r19,99
	cr6.compare<int32_t>(r19.s32, 99, xer);
	// beq cr6,0x823fd014
	if (cr6.getEQ()) goto loc_823FD014;
	// cmpwi cr6,r19,115
	cr6.compare<int32_t>(r19.s32, 115, xer);
	// bne cr6,0x823fcfe0
	if (!cr6.getEQ()) goto loc_823FCFE0;
	// cmpwi cr6,r23,9
	cr6.compare<int32_t>(r23.s32, 9, xer);
	// blt cr6,0x823fcfd8
	if (cr6.getLT()) goto loc_823FCFD8;
	// cmpwi cr6,r23,13
	cr6.compare<int32_t>(r23.s32, 13, xer);
	// ble cr6,0x823fd0bc
	if (!cr6.getGT()) goto loc_823FD0BC;
loc_823FCFD8:
	// cmpwi cr6,r23,32
	cr6.compare<int32_t>(r23.s32, 32, xer);
	// bne cr6,0x823fd014
	if (!cr6.getEQ()) goto loc_823FD014;
loc_823FCFE0:
	// cmpwi cr6,r19,123
	cr6.compare<int32_t>(r19.s32, 123, xer);
	// bne cr6,0x823fd0bc
	if (!cr6.getEQ()) goto loc_823FD0BC;
	// srawi r9,r23,3
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7) != 0);
	ctx.r9.s64 = r23.s32 >> 3;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// clrlwi r11,r23,29
	r11.u64 = r23.u32 & 0x7;
	// extsb r8,r25
	ctx.r8.s64 = r25.s8;
	// lbzx r10,r9,r10
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r10.u32);
	// li r9,1
	ctx.r9.s64 = 1;
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// xor r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 ^ ctx.r8.u64;
	// slw r11,r9,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r11.u8 & 0x3F));
	// and. r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fd0bc
	if (cr0.getEQ()) goto loc_823FD0BC;
loc_823FD014:
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823fd0b4
	if (!cr6.getEQ()) goto loc_823FD0B4;
	// extsb. r11,r24
	r11.s64 = r24.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fd0a4
	if (cr0.getEQ()) goto loc_823FD0A4;
	// extsb r11,r23
	r11.s64 = r23.s8;
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// stb r11,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, r11.u8);
	// bl 0x823fe8a8
	sub_823FE8A8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fd074
	if (cr0.getEQ()) goto loc_823FD074;
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd068
	if (cr0.getLT()) goto loc_823FD068;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd070
	goto loc_823FD070;
loc_823FD068:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
loc_823FD070:
	// stb r3,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r3.u8);
loc_823FD074:
	// li r11,63
	r11.s64 = 63;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// sth r11,96(r1)
	PPC_STORE_U16(ctx.r1.u32 + 96, r11.u16);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwz r5,172(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 172);
	// bl 0x823ffea8
	sub_823FFEA8(ctx, base);
	// lhz r11,96(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 96);
	// sth r11,0(r30)
	PPC_STORE_U16(r30.u32 + 0, r11.u16);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x823fd0ac
	goto loc_823FD0AC;
loc_823FD0A4:
	// stb r23,0(r30)
	PPC_STORE_U8(r30.u32 + 0, r23.u8);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
loc_823FD0AC:
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r30.u32);
	// b 0x823fcf68
	goto loc_823FCF68;
loc_823FD0B4:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// b 0x823fcf68
	goto loc_823FCF68;
loc_823FD0BC:
	// addi r14,r14,-1
	r14.s64 = r14.s64 + -1;
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// beq cr6,0x823fd0d4
	if (cr6.getEQ()) goto loc_823FD0D4;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82402288
	sub_82402288(ctx, base);
loc_823FD0D4:
	// cmplw cr6,r31,r30
	cr6.compare<uint32_t>(r31.u32, r30.u32, xer);
	// beq cr6,0x823fdae0
	if (cr6.getEQ()) goto loc_823FDAE0;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823fd9c4
	if (!cr6.getEQ()) goto loc_823FD9C4;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmpwi cr6,r19,99
	cr6.compare<int32_t>(r19.s32, 99, xer);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// beq cr6,0x823fd9c4
	if (cr6.getEQ()) goto loc_823FD9C4;
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// extsb. r11,r24
	r11.s64 = r24.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fd114
	if (cr0.getEQ()) goto loc_823FD114;
	// li r11,0
	r11.s64 = 0;
	// sth r11,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r11.u16);
	// b 0x823fd9c4
	goto loc_823FD9C4;
loc_823FD114:
	// li r11,0
	r11.s64 = 0;
	// stb r11,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r11.u8);
	// b 0x823fd9c4
	goto loc_823FD9C4;
loc_823FD120:
	// li r19,100
	r19.s64 = 100;
loc_823FD124:
	// cmpwi cr6,r23,45
	cr6.compare<int32_t>(r23.s32, 45, xer);
	// bne cr6,0x823fd134
	if (!cr6.getEQ()) goto loc_823FD134;
	// li r20,1
	r20.s64 = 1;
	// b 0x823fd13c
	goto loc_823FD13C;
loc_823FD134:
	// cmpwi cr6,r23,43
	cr6.compare<int32_t>(r23.s32, 43, xer);
	// bne cr6,0x823fd188
	if (!cr6.getEQ()) goto loc_823FD188;
loc_823FD13C:
	// addic. r15,r15,-1
	xer.ca = r15.u32 > 0;
	r15.s64 = r15.s64 + -1;
	cr0.compare<int32_t>(r15.s32, 0, xer);
	// bne 0x823fd154
	if (!cr0.getEQ()) goto loc_823FD154;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823fd154
	if (cr6.getEQ()) goto loc_823FD154;
	// li r29,1
	r29.s64 = 1;
	// b 0x823fd188
	goto loc_823FD188;
loc_823FD154:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd17c
	if (cr0.getLT()) goto loc_823FD17C;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd188
	goto loc_823FD188;
loc_823FD17C:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FD188:
	// cmpwi cr6,r23,48
	cr6.compare<int32_t>(r23.s32, 48, xer);
	// bne cr6,0x823fd2e4
	if (!cr6.getEQ()) goto loc_823FD2E4;
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd1b8
	if (cr0.getLT()) goto loc_823FD1B8;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd1c4
	goto loc_823FD1C4;
loc_823FD1B8:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FD1C4:
	// extsb r11,r23
	r11.s64 = r23.s8;
	// cmpwi cr6,r11,120
	cr6.compare<int32_t>(r11.s32, 120, xer);
	// beq cr6,0x823fd224
	if (cr6.getEQ()) goto loc_823FD224;
	// cmpwi cr6,r11,88
	cr6.compare<int32_t>(r11.s32, 88, xer);
	// beq cr6,0x823fd224
	if (cr6.getEQ()) goto loc_823FD224;
	// li r18,1
	r18.s64 = 1;
	// cmpwi cr6,r19,120
	cr6.compare<int32_t>(r19.s32, 120, xer);
	// beq cr6,0x823fd204
	if (cr6.getEQ()) goto loc_823FD204;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823fd1fc
	if (cr6.getEQ()) goto loc_823FD1FC;
	// addic. r15,r15,-1
	xer.ca = r15.u32 > 0;
	r15.s64 = r15.s64 + -1;
	cr0.compare<int32_t>(r15.s32, 0, xer);
	// bne 0x823fd1fc
	if (!cr0.getEQ()) goto loc_823FD1FC;
	// addi r11,r29,1
	r11.s64 = r29.s64 + 1;
	// extsb r29,r11
	r29.s64 = r11.s8;
loc_823FD1FC:
	// li r19,111
	r19.s64 = 111;
	// b 0x823fd2e4
	goto loc_823FD2E4;
loc_823FD204:
	// addi r14,r14,-1
	r14.s64 = r14.s64 + -1;
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// beq cr6,0x823fd21c
	if (cr6.getEQ()) goto loc_823FD21C;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82402288
	sub_82402288(ctx, base);
loc_823FD21C:
	// li r23,48
	r23.s64 = 48;
	// b 0x823fd2e4
	goto loc_823FD2E4;
loc_823FD224:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd24c
	if (cr0.getLT()) goto loc_823FD24C;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd258
	goto loc_823FD258;
loc_823FD24C:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FD258:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823fd274
	if (cr6.getEQ()) goto loc_823FD274;
	// addi r15,r15,-2
	r15.s64 = r15.s64 + -2;
	// cmpwi cr6,r15,1
	cr6.compare<int32_t>(r15.s32, 1, xer);
	// bge cr6,0x823fd274
	if (!cr6.getLT()) goto loc_823FD274;
	// addi r11,r29,1
	r11.s64 = r29.s64 + 1;
	// extsb r29,r11
	r29.s64 = r11.s8;
loc_823FD274:
	// li r19,120
	r19.s64 = 120;
	// b 0x823fd2e4
	goto loc_823FD2E4;
loc_823FD27C:
	// li r16,1
	r16.s64 = 1;
loc_823FD280:
	// cmpwi cr6,r23,45
	cr6.compare<int32_t>(r23.s32, 45, xer);
	// bne cr6,0x823fd290
	if (!cr6.getEQ()) goto loc_823FD290;
	// li r20,1
	r20.s64 = 1;
	// b 0x823fd298
	goto loc_823FD298;
loc_823FD290:
	// cmpwi cr6,r23,43
	cr6.compare<int32_t>(r23.s32, 43, xer);
	// bne cr6,0x823fd2e4
	if (!cr6.getEQ()) goto loc_823FD2E4;
loc_823FD298:
	// addic. r15,r15,-1
	xer.ca = r15.u32 > 0;
	r15.s64 = r15.s64 + -1;
	cr0.compare<int32_t>(r15.s32, 0, xer);
	// bne 0x823fd2b0
	if (!cr0.getEQ()) goto loc_823FD2B0;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823fd2b0
	if (cr6.getEQ()) goto loc_823FD2B0;
	// li r29,1
	r29.s64 = 1;
	// b 0x823fd2e4
	goto loc_823FD2E4;
loc_823FD2B0:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd2d8
	if (cr0.getLT()) goto loc_823FD2D8;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd2e4
	goto loc_823FD2E4;
loc_823FD2D8:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FD2E4:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// extsb. r31,r29
	r31.s64 = r29.s8;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x823fd42c
	if (cr6.getEQ()) goto loc_823FD42C;
	// bne 0x823fd414
	if (!cr0.getEQ()) goto loc_823FD414;
loc_823FD2F4:
	// cmpwi cr6,r19,120
	cr6.compare<int32_t>(r19.s32, 120, xer);
	// beq cr6,0x823fd340
	if (cr6.getEQ()) goto loc_823FD340;
	// cmpwi cr6,r19,112
	cr6.compare<int32_t>(r19.s32, 112, xer);
	// beq cr6,0x823fd340
	if (cr6.getEQ()) goto loc_823FD340;
	// clrlwi r3,r23,24
	ctx.r3.u64 = r23.u32 & 0xFF;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fd37c
	if (cr0.getEQ()) goto loc_823FD37C;
	// cmpwi cr6,r19,111
	cr6.compare<int32_t>(r19.s32, 111, xer);
	// bne cr6,0x823fd334
	if (!cr6.getEQ()) goto loc_823FD334;
	// cmpwi cr6,r23,56
	cr6.compare<int32_t>(r23.s32, 56, xer);
	// bge cr6,0x823fd37c
	if (!cr6.getLT()) goto loc_823FD37C;
	// ld r11,112(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// rldicr r11,r11,3,60
	r11.u64 = __builtin_rotateleft64(r11.u64, 3) & 0xFFFFFFFFFFFFFFF8;
loc_823FD32C:
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// b 0x823fd384
	goto loc_823FD384;
loc_823FD334:
	// ld r11,112(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// mulli r11,r11,10
	r11.s64 = r11.s64 * 10;
	// b 0x823fd32c
	goto loc_823FD32C;
loc_823FD340:
	// clrlwi r30,r23,24
	r30.u64 = r23.u32 & 0xFF;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823f0838
	sub_823F0838(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fd37c
	if (cr0.getEQ()) goto loc_823FD37C;
	// ld r11,112(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rldicr r11,r11,4,59
	r11.u64 = __builtin_rotateleft64(r11.u64, 4) & 0xFFFFFFFFFFFFFFF0;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fd384
	if (!cr0.getEQ()) goto loc_823FD384;
	// rlwinm r11,r23,0,27,25
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 0) & 0xFFFFFFFFFFFFFFDF;
	// addi r23,r11,-7
	r23.s64 = r11.s64 + -7;
	// b 0x823fd384
	goto loc_823FD384;
loc_823FD37C:
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// extsb r29,r11
	r29.s64 = r11.s8;
loc_823FD384:
	// extsb. r11,r29
	r11.s64 = r29.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fd3f4
	if (!cr0.getEQ()) goto loc_823FD3F4;
	// addi r11,r23,-48
	r11.s64 = r23.s64 + -48;
	// ld r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// beq cr6,0x823fd3bc
	if (cr6.getEQ()) goto loc_823FD3BC;
	// addic. r15,r15,-1
	xer.ca = r15.u32 > 0;
	r15.s64 = r15.s64 + -1;
	cr0.compare<int32_t>(r15.s32, 0, xer);
	// bne 0x823fd3bc
	if (!cr0.getEQ()) goto loc_823FD3BC;
	// li r29,1
	r29.s64 = 1;
	// b 0x823fd40c
	goto loc_823FD40C;
loc_823FD3BC:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd3e4
	if (cr0.getLT()) goto loc_823FD3E4;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd40c
	goto loc_823FD40C;
loc_823FD3E4:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// b 0x823fd40c
	goto loc_823FD40C;
loc_823FD3F4:
	// addi r14,r14,-1
	r14.s64 = r14.s64 + -1;
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// beq cr6,0x823fd40c
	if (cr6.getEQ()) goto loc_823FD40C;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82402288
	sub_82402288(ctx, base);
loc_823FD40C:
	// extsb. r31,r29
	r31.s64 = r29.s8;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x823fd2f4
	if (cr0.getEQ()) goto loc_823FD2F4;
loc_823FD414:
	// extsb. r11,r20
	r11.s64 = r20.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fd53c
	if (cr0.getEQ()) goto loc_823FD53C;
	// ld r11,112(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// neg r11,r11
	r11.s64 = -r11.s64;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// b 0x823fd53c
	goto loc_823FD53C;
loc_823FD42C:
	// bne 0x823fd530
	if (!cr0.getEQ()) goto loc_823FD530;
loc_823FD430:
	// cmpwi cr6,r19,120
	cr6.compare<int32_t>(r19.s32, 120, xer);
	// beq cr6,0x823fd470
	if (cr6.getEQ()) goto loc_823FD470;
	// cmpwi cr6,r19,112
	cr6.compare<int32_t>(r19.s32, 112, xer);
	// beq cr6,0x823fd470
	if (cr6.getEQ()) goto loc_823FD470;
	// clrlwi r3,r23,24
	ctx.r3.u64 = r23.u32 & 0xFF;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fd4a4
	if (cr0.getEQ()) goto loc_823FD4A4;
	// cmpwi cr6,r19,111
	cr6.compare<int32_t>(r19.s32, 111, xer);
	// bne cr6,0x823fd468
	if (!cr6.getEQ()) goto loc_823FD468;
	// cmpwi cr6,r23,56
	cr6.compare<int32_t>(r23.s32, 56, xer);
	// bge cr6,0x823fd4a4
	if (!cr6.getLT()) goto loc_823FD4A4;
	// rlwinm r22,r22,3,0,28
	r22.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 3) & 0xFFFFFFF8;
	// b 0x823fd4ac
	goto loc_823FD4AC;
loc_823FD468:
	// mulli r22,r22,10
	r22.s64 = r22.s64 * 10;
	// b 0x823fd4ac
	goto loc_823FD4AC;
loc_823FD470:
	// clrlwi r30,r23,24
	r30.u64 = r23.u32 & 0xFF;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823f0838
	sub_823F0838(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fd4a4
	if (cr0.getEQ()) goto loc_823FD4A4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r22,r22,4,0,27
	r22.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 4) & 0xFFFFFFF0;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fd4ac
	if (!cr0.getEQ()) goto loc_823FD4AC;
	// rlwinm r11,r23,0,27,25
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 0) & 0xFFFFFFFFFFFFFFDF;
	// addi r23,r11,-7
	r23.s64 = r11.s64 + -7;
	// b 0x823fd4ac
	goto loc_823FD4AC;
loc_823FD4A4:
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// extsb r29,r11
	r29.s64 = r11.s8;
loc_823FD4AC:
	// extsb. r11,r29
	r11.s64 = r29.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fd510
	if (!cr0.getEQ()) goto loc_823FD510;
	// add r11,r22,r23
	r11.u64 = r22.u64 + r23.u64;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
	// addi r22,r11,-48
	r22.s64 = r11.s64 + -48;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x823fd4d8
	if (cr6.getEQ()) goto loc_823FD4D8;
	// addic. r15,r15,-1
	xer.ca = r15.u32 > 0;
	r15.s64 = r15.s64 + -1;
	cr0.compare<int32_t>(r15.s32, 0, xer);
	// bne 0x823fd4d8
	if (!cr0.getEQ()) goto loc_823FD4D8;
	// li r29,1
	r29.s64 = 1;
	// b 0x823fd528
	goto loc_823FD528;
loc_823FD4D8:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd500
	if (cr0.getLT()) goto loc_823FD500;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd528
	goto loc_823FD528;
loc_823FD500:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// b 0x823fd528
	goto loc_823FD528;
loc_823FD510:
	// addi r14,r14,-1
	r14.s64 = r14.s64 + -1;
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// beq cr6,0x823fd528
	if (cr6.getEQ()) goto loc_823FD528;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82402288
	sub_82402288(ctx, base);
loc_823FD528:
	// extsb. r31,r29
	r31.s64 = r29.s8;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x823fd430
	if (cr0.getEQ()) goto loc_823FD430;
loc_823FD530:
	// extsb. r11,r20
	r11.s64 = r20.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fd53c
	if (cr0.getEQ()) goto loc_823FD53C;
	// neg r22,r22
	r22.s64 = -r22.s64;
loc_823FD53C:
	// cmpwi cr6,r19,70
	cr6.compare<int32_t>(r19.s32, 70, xer);
	// bne cr6,0x823fd548
	if (!cr6.getEQ()) goto loc_823FD548;
	// li r18,0
	r18.s64 = 0;
loc_823FD548:
	// cmpwi cr6,r18,0
	cr6.compare<int32_t>(r18.s32, 0, xer);
	// beq cr6,0x823fdae0
	if (cr6.getEQ()) goto loc_823FDAE0;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823fd9c4
	if (!cr6.getEQ()) goto loc_823FD9C4;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// b 0x823fd588
	goto loc_823FD588;
loc_823FD56C:
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// mr r22,r14
	r22.u64 = r14.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823fd9c4
	if (!cr6.getEQ()) goto loc_823FD9C4;
	// bl 0x823ed4a0
	sub_823ED4A0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fd9c4
	if (cr0.getEQ()) goto loc_823FD9C4;
loc_823FD588:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x823fd5a0
	if (cr6.getEQ()) goto loc_823FD5A0;
	// ld r11,112(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// std r11,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, r11.u64);
	// b 0x823fd9c4
	goto loc_823FD9C4;
loc_823FD5A0:
	// extsb. r11,r16
	r11.s64 = r16.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fd5b4
	if (cr0.getEQ()) goto loc_823FD5B4;
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r22,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r22.u32);
	// b 0x823fd9c4
	goto loc_823FD9C4;
loc_823FD5B4:
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// sth r22,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r22.u16);
	// b 0x823fd9c4
	goto loc_823FD9C4;
loc_823FD5C0:
	// li r30,0
	r30.s64 = 0;
	// cmpwi cr6,r23,45
	cr6.compare<int32_t>(r23.s32, 45, xer);
	// bne cr6,0x823fd5e0
	if (!cr6.getEQ()) goto loc_823FD5E0;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r11,45
	r11.s64 = 45;
	// li r30,1
	r30.s64 = 1;
	// stb r11,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r11.u8);
	// b 0x823fd5e8
	goto loc_823FD5E8;
loc_823FD5E0:
	// cmpwi cr6,r23,43
	cr6.compare<int32_t>(r23.s32, 43, xer);
	// bne cr6,0x823fd620
	if (!cr6.getEQ()) goto loc_823FD620;
loc_823FD5E8:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r15,r15,-1
	r15.s64 = r15.s64 + -1;
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd614
	if (cr0.getLT()) goto loc_823FD614;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd620
	goto loc_823FD620;
loc_823FD614:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FD620:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// bne cr6,0x823fd6a0
	if (!cr6.getEQ()) goto loc_823FD6A0;
	// li r15,-1
	r15.s64 = -1;
	// b 0x823fd6a0
	goto loc_823FD6A0;
loc_823FD630:
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// addi r15,r15,-1
	r15.s64 = r15.s64 + -1;
	// beq cr6,0x823fd6b4
	if (cr6.getEQ()) goto loc_823FD6B4;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r7,r1,100
	ctx.r7.s64 = ctx.r1.s64 + 100;
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
	// stbx r31,r30,r11
	PPC_STORE_U8(r30.u32 + r11.u32, r31.u8);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823fc868
	sub_823FC868(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fdae0
	if (cr0.getEQ()) goto loc_823FDAE0;
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd694
	if (cr0.getLT()) goto loc_823FD694;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd6a0
	goto loc_823FD6A0;
loc_823FD694:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FD6A0:
	// clrlwi r31,r23,24
	r31.u64 = r23.u32 & 0xFF;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fd630
	if (!cr0.getEQ()) goto loc_823FD630;
loc_823FD6B4:
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// extsb r10,r23
	ctx.r10.s64 = r23.s8;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,188(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 188);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lbz r31,0(r11)
	r31.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// extsb r11,r31
	r11.s64 = r31.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bne cr6,0x823fd7cc
	if (!cr6.getEQ()) goto loc_823FD7CC;
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// addi r15,r15,-1
	r15.s64 = r15.s64 + -1;
	// beq cr6,0x823fd7cc
	if (cr6.getEQ()) goto loc_823FD7CC;
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd70c
	if (cr0.getLT()) goto loc_823FD70C;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd718
	goto loc_823FD718;
loc_823FD70C:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FD718:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r7,r1,100
	ctx.r7.s64 = ctx.r1.s64 + 100;
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// stbx r31,r30,r11
	PPC_STORE_U8(r30.u32 + r11.u32, r31.u8);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823fc868
	sub_823FC868(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fdae0
	if (cr0.getEQ()) goto loc_823FDAE0;
	// b 0x823fd7b8
	goto loc_823FD7B8;
loc_823FD748:
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// addi r15,r15,-1
	r15.s64 = r15.s64 + -1;
	// beq cr6,0x823fd7cc
	if (cr6.getEQ()) goto loc_823FD7CC;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r7,r1,100
	ctx.r7.s64 = ctx.r1.s64 + 100;
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
	// stbx r31,r30,r11
	PPC_STORE_U8(r30.u32 + r11.u32, r31.u8);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823fc868
	sub_823FC868(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fdae0
	if (cr0.getEQ()) goto loc_823FDAE0;
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd7ac
	if (cr0.getLT()) goto loc_823FD7AC;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd7b8
	goto loc_823FD7B8;
loc_823FD7AC:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FD7B8:
	// clrlwi r31,r23,24
	r31.u64 = r23.u32 & 0xFF;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fd748
	if (!cr0.getEQ()) goto loc_823FD748;
loc_823FD7CC:
	// cmpwi cr6,r18,0
	cr6.compare<int32_t>(r18.s32, 0, xer);
	// beq cr6,0x823fd930
	if (cr6.getEQ()) goto loc_823FD930;
	// cmpwi cr6,r23,101
	cr6.compare<int32_t>(r23.s32, 101, xer);
	// beq cr6,0x823fd7e4
	if (cr6.getEQ()) goto loc_823FD7E4;
	// cmpwi cr6,r23,69
	cr6.compare<int32_t>(r23.s32, 69, xer);
	// bne cr6,0x823fd930
	if (!cr6.getEQ()) goto loc_823FD930;
loc_823FD7E4:
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// addi r29,r15,-1
	r29.s64 = r15.s64 + -1;
	// beq cr6,0x823fd930
	if (cr6.getEQ()) goto loc_823FD930;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r11,101
	r11.s64 = 101;
	// addi r7,r1,100
	ctx.r7.s64 = ctx.r1.s64 + 100;
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// stbx r11,r30,r10
	PPC_STORE_U8(r30.u32 + ctx.r10.u32, r11.u8);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823fc868
	sub_823FC868(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fdae0
	if (cr0.getEQ()) goto loc_823FDAE0;
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd848
	if (cr0.getLT()) goto loc_823FD848;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd854
	goto loc_823FD854;
loc_823FD848:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FD854:
	// cmpwi cr6,r23,45
	cr6.compare<int32_t>(r23.s32, 45, xer);
	// bne cr6,0x823fd890
	if (!cr6.getEQ()) goto loc_823FD890;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r10,45
	ctx.r10.s64 = 45;
	// addi r7,r1,100
	ctx.r7.s64 = ctx.r1.s64 + 100;
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// stbx r10,r30,r11
	PPC_STORE_U8(r30.u32 + r11.u32, ctx.r10.u8);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823fc868
	sub_823FC868(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fdae0
	if (cr0.getEQ()) goto loc_823FDAE0;
	// b 0x823fd898
	goto loc_823FD898;
loc_823FD890:
	// cmpwi cr6,r23,43
	cr6.compare<int32_t>(r23.s32, 43, xer);
	// bne cr6,0x823fd91c
	if (!cr6.getEQ()) goto loc_823FD91C;
loc_823FD898:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// bne cr6,0x823fd8e8
	if (!cr6.getEQ()) goto loc_823FD8E8;
	// li r29,0
	r29.s64 = 0;
	// b 0x823fd91c
	goto loc_823FD91C;
loc_823FD8AC:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// beq cr6,0x823fd930
	if (cr6.getEQ()) goto loc_823FD930;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r7,r1,100
	ctx.r7.s64 = ctx.r1.s64 + 100;
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
	// stbx r31,r30,r11
	PPC_STORE_U8(r30.u32 + r11.u32, r31.u8);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823fc868
	sub_823FC868(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fdae0
	if (cr0.getEQ()) goto loc_823FDAE0;
loc_823FD8E8:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fd910
	if (cr0.getLT()) goto loc_823FD910;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fd91c
	goto loc_823FD91C;
loc_823FD910:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FD91C:
	// clrlwi r31,r23,24
	r31.u64 = r23.u32 & 0xFF;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823f0818
	sub_823F0818(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x823fd8ac
	if (!cr0.getEQ()) goto loc_823FD8AC;
loc_823FD930:
	// addi r14,r14,-1
	r14.s64 = r14.s64 + -1;
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// beq cr6,0x823fd948
	if (cr6.getEQ()) goto loc_823FD948;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82402288
	sub_82402288(ctx, base);
loc_823FD948:
	// cmpwi cr6,r18,0
	cr6.compare<int32_t>(r18.s32, 0, xer);
	// beq cr6,0x823fdae0
	if (cr6.getEQ()) goto loc_823FDAE0;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823fd9c4
	if (!cr6.getEQ()) goto loc_823FD9C4;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// extsb r11,r16
	r11.s64 = r16.s8;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lwz r6,124(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// stbx r10,r30,r5
	PPC_STORE_U8(r30.u32 + ctx.r5.u32, ctx.r10.u8);
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r10,28(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x823fd9c4
	goto loc_823FD9C4;
loc_823FD998:
	// lbz r11,0(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpw cr6,r11,r23
	cr6.compare<int32_t>(r11.s32, r23.s32, xer);
	// bne cr6,0x823fdacc
	if (!cr6.getEQ()) goto loc_823FDACC;
	// lbz r11,80(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// bne cr6,0x823fd9c4
	if (!cr6.getEQ()) goto loc_823FD9C4;
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// stw r11,732(r1)
	PPC_STORE_U32(ctx.r1.u32 + 732, r11.u32);
loc_823FD9C4:
	// lbz r11,80(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// lwz r10,716(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 716);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rotlwi r19,r10,0
	r19.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// stw r10,716(r1)
	PPC_STORE_U32(ctx.r1.u32 + 716, ctx.r10.u32);
	// b 0x823fda84
	goto loc_823FDA84;
loc_823FD9E4:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fda0c
	if (cr0.getLT()) goto loc_823FDA0C;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r23,0(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fda18
	goto loc_823FDA18;
loc_823FDA0C:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_823FDA18:
	// lbz r11,0(r19)
	r11.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// addi r19,r19,1
	r19.s64 = r19.s64 + 1;
	// cmpw cr6,r11,r23
	cr6.compare<int32_t>(r11.s32, r23.s32, xer);
	// stw r19,716(r1)
	PPC_STORE_U32(ctx.r1.u32 + 716, r19.u32);
	// bne cr6,0x823fdacc
	if (!cr6.getEQ()) goto loc_823FDACC;
	// clrlwi r3,r23,24
	ctx.r3.u64 = r23.u32 & 0xFF;
	// bl 0x823fe8a8
	sub_823FE8A8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fda84
	if (cr0.getEQ()) goto loc_823FDA84;
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r31,r14,1
	r31.s64 = r14.s64 + 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r11.u32);
	// blt 0x823fda64
	if (cr0.getLT()) goto loc_823FDA64;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// b 0x823fda6c
	goto loc_823FDA6C;
loc_823FDA64:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x824020c8
	sub_824020C8(ctx, base);
loc_823FDA6C:
	// lbz r11,0(r19)
	r11.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// addi r19,r19,1
	r19.s64 = r19.s64 + 1;
	// cmpw cr6,r11,r3
	cr6.compare<int32_t>(r11.s32, ctx.r3.s32, xer);
	// stw r19,716(r1)
	PPC_STORE_U32(ctx.r1.u32 + 716, r19.u32);
	// bne cr6,0x823fdabc
	if (!cr6.getEQ()) goto loc_823FDABC;
	// addi r14,r31,-1
	r14.s64 = r31.s64 + -1;
loc_823FDA84:
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// bne cr6,0x823fdaac
	if (!cr6.getEQ()) goto loc_823FDAAC;
	// lbz r11,0(r19)
	r11.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// cmplwi cr6,r11,37
	cr6.compare<uint32_t>(r11.u32, 37, xer);
	// bne cr6,0x823fdae0
	if (!cr6.getEQ()) goto loc_823FDAE0;
	// lwz r11,716(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 716);
	// lbz r11,1(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// cmplwi cr6,r11,110
	cr6.compare<uint32_t>(r11.u32, 110, xer);
	// bne cr6,0x823fdae0
	if (!cr6.getEQ()) goto loc_823FDAE0;
	// lwz r19,716(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 716);
loc_823FDAAC:
	// lbz r3,0(r19)
	ctx.r3.u64 = PPC_LOAD_U8(r19.u32 + 0);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x823fca80
	if (!cr0.getEQ()) goto loc_823FCA80;
	// b 0x823fdae0
	goto loc_823FDAE0;
loc_823FDABC:
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x823fdacc
	if (cr6.getEQ()) goto loc_823FDACC;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// bl 0x82402288
	sub_82402288(ctx, base);
loc_823FDACC:
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// beq cr6,0x823fdae0
	if (cr6.getEQ()) goto loc_823FDAE0;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82402288
	sub_82402288(ctx, base);
loc_823FDAE0:
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x823fdaf4
	if (!cr6.getEQ()) goto loc_823FDAF4;
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x823ed250
	sub_823ED250(ctx, base);
loc_823FDAF4:
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// bne cr6,0x823fdb18
	if (!cr6.getEQ()) goto loc_823FDB18;
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x823fdb1c
	if (!cr6.getEQ()) goto loc_823FDB1C;
	// lbz r11,80(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x823fdb1c
	if (!cr0.getEQ()) goto loc_823FDB1C;
	// b 0x823fc970
	goto loc_823FC970;
loc_823FDB18:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
loc_823FDB1C:
	// addi r1,r1,688
	ctx.r1.s64 = ctx.r1.s64 + 688;
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_823FDB28"))) PPC_WEAK_FUNC(sub_823FDB28);
PPC_FUNC_IMPL(__imp__sub_823FDB28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-17600
	r11.s64 = -1153433600;
	// lis r29,-32015
	r29.s64 = -2098135040;
	// ori r31,r11,58958
	r31.u64 = r11.u64 | 58958;
	// li r11,0
	r11.s64 = 0;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lwz r11,-20928(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -20928);
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// bne cr6,0x823fdba8
	if (!cr6.getEQ()) goto loc_823FDBA8;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82408738
	sub_82408738(ctx, base);
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// xor r30,r10,r11
	r30.u64 = ctx.r10.u64 ^ r11.u64;
	// bl 0x8235eaa8
	sub_8235EAA8(ctx, base);
	// xor r30,r3,r30
	r30.u64 = ctx.r3.u64 ^ r30.u64;
	// bl 0x8235d778
	sub_8235D778(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// xor r30,r11,r30
	r30.u64 = r11.u64 ^ r30.u64;
	// bl 0x82408118
	sub_82408118(ctx, base);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// xor r11,r10,r11
	r11.u64 = ctx.r10.u64 ^ r11.u64;
	// xor r11,r11,r30
	r11.u64 = r11.u64 ^ r30.u64;
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// bne cr6,0x823fdba4
	if (!cr6.getEQ()) goto loc_823FDBA4;
	// lis r11,-17600
	r11.s64 = -1153433600;
	// ori r11,r11,58959
	r11.u64 = r11.u64 | 58959;
loc_823FDBA4:
	// stw r11,-20928(r29)
	PPC_STORE_U32(r29.u32 + -20928, r11.u32);
loc_823FDBA8:
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// not r11,r11
	r11.u64 = ~r11.u64;
	// stw r11,-20924(r10)
	PPC_STORE_U32(ctx.r10.u32 + -20924, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823FDBC0"))) PPC_WEAK_FUNC(sub_823FDBC0);
PPC_FUNC_IMPL(__imp__sub_823FDBC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// std r3,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r3.u64);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r3,r11,-19536
	ctx.r3.s64 = r11.s64 + -19536;
	// bl 0x8241020c
	__imp__RtlCaptureContext(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-31987
	ctx.r10.s64 = -2096300032;
	// addi r10,r10,-19624
	ctx.r10.s64 = ctx.r10.s64 + -19624;
	// stw r11,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, r11.u32);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r11,r11,-19624
	r11.s64 = r11.s64 + -19624;
	// lis r10,-16384
	ctx.r10.s64 = -1073741824;
	// ori r10,r10,1033
	ctx.r10.u64 = ctx.r10.u64 | 1033;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r11,r11,-19624
	r11.s64 = r11.s64 + -19624;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r11,r11,-20928
	r11.s64 = r11.s64 + -20928;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// addi r11,r11,-20924
	r11.s64 = r11.s64 + -20924;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r11,r11,-19544
	r11.s64 = r11.s64 + -19544;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823fdc90
	sub_823FDC90(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8235dd28
	sub_8235DD28(ctx, base);
	// lis r11,-32249
	r11.s64 = -2113470464;
	// addi r3,r11,12076
	ctx.r3.s64 = r11.s64 + 12076;
	// bl 0x8235ddf0
	sub_8235DDF0(ctx, base);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r11,r11,-19544
	r11.s64 = r11.s64 + -19544;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x823fdc78
	if (!cr6.getEQ()) goto loc_823FDC78;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823fdc90
	sub_823FDC90(ctx, base);
loc_823FDC78:
	// li r3,242
	ctx.r3.s64 = 242;
	// bl 0x8240f9ec
	__imp__KeBugCheck(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FDC90"))) PPC_WEAK_FUNC(sub_823FDC90);
PPC_FUNC_IMPL(__imp__sub_823FDC90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r10,-31987
	ctx.r10.s64 = -2096300032;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-15584(r10)
	PPC_STORE_U32(ctx.r10.u32 + -15584, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FDCA0"))) PPC_WEAK_FUNC(sub_823FDCA0);
PPC_FUNC_IMPL(__imp__sub_823FDCA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// addi r10,r11,-19456
	ctx.r10.s64 = r11.s64 + -19456;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x823f8e80
	sub_823F8E80(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82400300
	sub_82400300(ctx, base);
	// clrlwi. r11,r31,30
	r11.u64 = r31.u32 & 0x3;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fdd18
	if (!cr0.getEQ()) goto loc_823FDD18;
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x823fdd08
	if (!cr6.getEQ()) goto loc_823FDD08;
	// li r3,3
	ctx.r3.s64 = 3;
	// b 0x823fdd30
	goto loc_823FDD30;
loc_823FDD08:
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x823fdd2c
	if (!cr6.getEQ()) goto loc_823FDD2C;
loc_823FDD10:
	// li r3,4
	ctx.r3.s64 = 4;
	// b 0x823fdd30
	goto loc_823FDD30;
loc_823FDD18:
	// clrlwi. r11,r31,31
	r11.u64 = r31.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fdd10
	if (!cr0.getEQ()) goto loc_823FDD10;
	// rlwinm. r11,r31,0,30,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r3,3
	ctx.r3.s64 = 3;
	// bne 0x823fdd30
	if (!cr0.getEQ()) goto loc_823FDD30;
loc_823FDD2C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823FDD30:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FDD48"))) PPC_WEAK_FUNC(sub_823FDD48);
PPC_FUNC_IMPL(__imp__sub_823FDD48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32015
	r11.s64 = -2098135040;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// addi r10,r11,-19456
	ctx.r10.s64 = r11.s64 + -19456;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x823f8e80
	sub_823F8E80(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82400a18
	sub_82400A18(ctx, base);
	// clrlwi. r11,r31,30
	r11.u64 = r31.u32 & 0x3;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fddc0
	if (!cr0.getEQ()) goto loc_823FDDC0;
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x823fddb0
	if (!cr6.getEQ()) goto loc_823FDDB0;
	// li r3,3
	ctx.r3.s64 = 3;
	// b 0x823fddd8
	goto loc_823FDDD8;
loc_823FDDB0:
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x823fddd4
	if (!cr6.getEQ()) goto loc_823FDDD4;
loc_823FDDB8:
	// li r3,4
	ctx.r3.s64 = 4;
	// b 0x823fddd8
	goto loc_823FDDD8;
loc_823FDDC0:
	// clrlwi. r11,r31,31
	r11.u64 = r31.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x823fddb8
	if (!cr0.getEQ()) goto loc_823FDDB8;
	// rlwinm. r11,r31,0,30,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r3,3
	ctx.r3.s64 = 3;
	// bne 0x823fddd8
	if (!cr0.getEQ()) goto loc_823FDDD8;
loc_823FDDD4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823FDDD8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FDDF0"))) PPC_WEAK_FUNC(sub_823FDDF0);
PPC_FUNC_IMPL(__imp__sub_823FDDF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r8,12(r6)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r6.u32 + 12);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x823fde3c
	if (!cr6.getEQ()) goto loc_823FDE3C;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x823fdf6c
	goto loc_823FDF6C;
loc_823FDE3C:
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x823fde70
	if (!cr6.getEQ()) goto loc_823FDE70;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r31,22
	r31.s64 = 22;
loc_823FDE4C:
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r31.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f3ca8
	sub_823F3CA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x823fdf6c
	goto loc_823FDF6C;
loc_823FDE70:
	// li r7,0
	ctx.r7.s64 = 0;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// stb r7,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, ctx.r7.u8);
	// bgt cr6,0x823fde88
	if (cr6.getGT()) goto loc_823FDE88;
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
loc_823FDE88:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// bgt cr6,0x823fdea0
	if (cr6.getGT()) goto loc_823FDEA0;
	// bl 0x823f3de0
	sub_823F3DE0(ctx, base);
	// li r31,34
	r31.s64 = 34;
	// b 0x823fde4c
	goto loc_823FDE4C;
loc_823FDEA0:
	// li r9,48
	ctx.r9.s64 = 48;
	// addi r4,r3,1
	ctx.r4.s64 = ctx.r3.s64 + 1;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// stb r9,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, ctx.r9.u8);
	// ble cr6,0x823fdee0
	if (!cr6.getGT()) goto loc_823FDEE0;
loc_823FDEB8:
	// lbz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x823fdecc
	if (cr0.getEQ()) goto loc_823FDECC;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// b 0x823fded0
	goto loc_823FDED0;
loc_823FDECC:
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
loc_823FDED0:
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addic. r5,r5,-1
	xer.ca = ctx.r5.u32 > 0;
	ctx.r5.s64 = ctx.r5.s64 + -1;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bgt 0x823fdeb8
	if (cr0.getGT()) goto loc_823FDEB8;
loc_823FDEE0:
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// stb r7,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r7.u8);
	// blt cr6,0x823fdf20
	if (cr6.getLT()) goto loc_823FDF20;
	// lbz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpwi cr6,r10,53
	cr6.compare<int32_t>(ctx.r10.s32, 53, xer);
	// blt cr6,0x823fdf20
	if (cr6.getLT()) goto loc_823FDF20;
	// b 0x823fdf04
	goto loc_823FDF04;
loc_823FDF00:
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
loc_823FDF04:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,57
	cr6.compare<uint32_t>(ctx.r10.u32, 57, xer);
	// beq cr6,0x823fdf00
	if (cr6.getEQ()) goto loc_823FDF00;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
loc_823FDF20:
	// lbz r11,0(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// bne cr6,0x823fdf3c
	if (!cr6.getEQ()) goto loc_823FDF3C;
	// lwz r11,4(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, r11.u32);
	// b 0x823fdf68
	goto loc_823FDF68;
loc_823FDF3C:
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_823FDF44:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823fdf44
	if (!cr6.getEQ()) goto loc_823FDF44;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// bl 0x823ef8a0
	sub_823EF8A0(ctx, base);
loc_823FDF68:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823FDF6C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FDF80"))) PPC_WEAK_FUNC(sub_823FDF80);
PPC_FUNC_IMPL(__imp__sub_823FDF80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lhz r11,0(r4)
	r11.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// lis r10,-32768
	ctx.r10.s64 = -2147483648;
	// lwz r8,0(r4)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// rlwinm r6,r11,0,0,16
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// lwz r9,4(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// rlwinm r11,r11,28,21,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0x7FF;
	// clrlwi r7,r8,12
	ctx.r7.u64 = ctx.r8.u32 & 0xFFFFF;
	// clrlwi. r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fdfbc
	if (cr0.getEQ()) goto loc_823FDFBC;
	// cmpwi cr6,r11,2047
	cr6.compare<int32_t>(r11.s32, 2047, xer);
	// beq cr6,0x823fdfb4
	if (cr6.getEQ()) goto loc_823FDFB4;
	// addi r11,r11,15360
	r11.s64 = r11.s64 + 15360;
	// b 0x823fdfe8
	goto loc_823FDFE8;
loc_823FDFB4:
	// li r8,32767
	ctx.r8.s64 = 32767;
	// b 0x823fdfec
	goto loc_823FDFEC;
loc_823FDFBC:
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x823fdfe0
	if (!cr6.getEQ()) goto loc_823FDFE0;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x823fdfe0
	if (!cr6.getEQ()) goto loc_823FDFE0;
	// li r11,0
	r11.s64 = 0;
	// sth r6,0(r3)
	PPC_STORE_U16(ctx.r3.u32 + 0, ctx.r6.u16);
	// stw r11,2(r3)
	PPC_STORE_U32(ctx.r3.u32 + 2, r11.u32);
	// stw r11,6(r3)
	PPC_STORE_U32(ctx.r3.u32 + 6, r11.u32);
	// blr 
	return;
loc_823FDFE0:
	// addi r11,r11,15361
	r11.s64 = r11.s64 + 15361;
	// li r10,0
	ctx.r10.s64 = 0;
loc_823FDFE8:
	// clrlwi r8,r11,16
	ctx.r8.u64 = r11.u32 & 0xFFFF;
loc_823FDFEC:
	// rlwinm r11,r9,11,21,31
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 11) & 0x7FF;
	// rlwinm r7,r7,11,0,20
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 11) & 0xFFFFF800;
	// rlwinm r9,r9,11,0,20
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 11) & 0xFFFFF800;
	// or r11,r11,r7
	r11.u64 = r11.u64 | ctx.r7.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// stw r9,6(r3)
	PPC_STORE_U32(ctx.r3.u32 + 6, ctx.r9.u32);
	// stw r11,2(r3)
	PPC_STORE_U32(ctx.r3.u32 + 2, r11.u32);
	// rlwinm. r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x823fe04c
	if (!cr0.getEQ()) goto loc_823FE04C;
loc_823FE010:
	// clrlwi r10,r8,16
	ctx.r10.u64 = ctx.r8.u32 & 0xFFFF;
	// lwz r11,6(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 6);
	// lwz r9,2(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2);
	// addis r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 65536;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// clrlwi r8,r10,16
	ctx.r8.u64 = ctx.r10.u32 & 0xFFFF;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// stw r11,6(r3)
	PPC_STORE_U32(ctx.r3.u32 + 6, r11.u32);
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// stw r10,2(r3)
	PPC_STORE_U32(ctx.r3.u32 + 2, ctx.r10.u32);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fe010
	if (cr0.getEQ()) goto loc_823FE010;
loc_823FE04C:
	// clrlwi r11,r6,16
	r11.u64 = ctx.r6.u32 & 0xFFFF;
	// clrlwi r10,r8,16
	ctx.r10.u64 = ctx.r8.u32 & 0xFFFF;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// sth r11,0(r3)
	PPC_STORE_U16(ctx.r3.u32 + 0, r11.u16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FE060"))) PPC_WEAK_FUNC(sub_823FE060);
PPC_FUNC_IMPL(__imp__sub_823FE060) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// std r3,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.r3.u64);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// bl 0x823fdf80
	sub_823FDF80(ctx, base);
	// lhz r11,88(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 88);
	// addi r7,r1,96
	ctx.r7.s64 = ctx.r1.s64 + 96;
	// li r6,0
	ctx.r6.s64 = 0;
	// ld r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// li r5,17
	ctx.r5.s64 = 17;
	// rldicr r4,r11,48,63
	ctx.r4.u64 = __builtin_rotateleft64(r11.u64, 48) & 0xFFFFFFFFFFFFFFFF;
	// bl 0x82402558
	sub_82402558(ctx, base);
	// lbz r10,98(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 98);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// addi r5,r1,100
	ctx.r5.s64 = ctx.r1.s64 + 100;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// lha r9,96(r1)
	ctx.r9.s64 = int16_t(PPC_LOAD_U16(ctx.r1.u32 + 96));
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// bl 0x823ee540
	sub_823EE540(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fe0f0
	if (cr0.getEQ()) goto loc_823FE0F0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823f3cf0
	sub_823F3CF0(ctx, base);
loc_823FE0F0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r30,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r30.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_823FE100"))) PPC_WEAK_FUNC(sub_823FE100);
PPC_FUNC_IMPL(__imp__sub_823FE100) {
	PPC_FUNC_PROLOGUE();
	// li r3,2
	ctx.r3.s64 = 2;
	// b 0x823ef600
	sub_823EF600(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823FE108"))) PPC_WEAK_FUNC(sub_823FE108);
PPC_FUNC_IMPL(__imp__sub_823FE108) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,64
	ctx.r4.s64 = 64;
	// li r3,32
	ctx.r3.s64 = 32;
	// bl 0x823f1f38
	sub_823F1F38(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x823fe130
	if (!cr0.getEQ()) goto loc_823FE130;
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x823fe1bc
	goto loc_823FE1BC;
loc_823FE130:
	// lis r9,-31987
	ctx.r9.s64 = -2096300032;
	// li r10,32
	ctx.r10.s64 = 32;
	// lis r8,-31987
	ctx.r8.s64 = -2096300032;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r7,r3,2048
	ctx.r7.s64 = ctx.r3.s64 + 2048;
	// stw r10,-15860(r9)
	PPC_STORE_U32(ctx.r9.u32 + -15860, ctx.r10.u32);
	// cmplw cr6,r3,r7
	cr6.compare<uint32_t>(ctx.r3.u32, ctx.r7.u32, xer);
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r11,-15840(r8)
	PPC_STORE_U32(ctx.r8.u32 + -15840, r11.u32);
	// bge cr6,0x823fe198
	if (!cr6.getLT()) goto loc_823FE198;
	// li r10,10
	ctx.r10.s64 = 10;
loc_823FE15C:
	// li r11,-1
	r11.s64 = -1;
	// stb r9,4(r3)
	PPC_STORE_U8(ctx.r3.u32 + 4, ctx.r9.u8);
	// stb r10,5(r3)
	PPC_STORE_U8(ctx.r3.u32 + 5, ctx.r10.u8);
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stb r9,40(r3)
	PPC_STORE_U8(ctx.r3.u32 + 40, ctx.r9.u8);
	// stb r10,41(r3)
	PPC_STORE_U8(ctx.r3.u32 + 41, ctx.r10.u8);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// stb r10,42(r3)
	PPC_STORE_U8(ctx.r3.u32 + 42, ctx.r10.u8);
	// addi r3,r3,64
	ctx.r3.s64 = ctx.r3.s64 + 64;
	// lwz r11,-15840(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + -15840);
	// addi r7,r11,2048
	ctx.r7.s64 = r11.s64 + 2048;
	// cmplw cr6,r3,r7
	cr6.compare<uint32_t>(ctx.r3.u32, ctx.r7.u32, xer);
	// blt cr6,0x823fe15c
	if (cr6.getLT()) goto loc_823FE15C;
	// b 0x823fe198
	goto loc_823FE198;
loc_823FE194:
	// lwz r11,-15840(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + -15840);
loc_823FE198:
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// li r10,-63
	ctx.r10.s64 = -63;
	// li r7,-2
	ctx.r7.s64 = -2;
	// addi r9,r9,64
	ctx.r9.s64 = ctx.r9.s64 + 64;
	// cmpwi cr6,r9,192
	cr6.compare<int32_t>(ctx.r9.s32, 192, xer);
	// stb r10,4(r11)
	PPC_STORE_U8(r11.u32 + 4, ctx.r10.u8);
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// blt cr6,0x823fe194
	if (cr6.getLT()) goto loc_823FE194;
	// li r3,0
	ctx.r3.s64 = 0;
loc_823FE1BC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FE1D0"))) PPC_WEAK_FUNC(sub_823FE1D0);
PPC_FUNC_IMPL(__imp__sub_823FE1D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r30,r11,-15840
	r30.s64 = r11.s64 + -15840;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_823FE1F0:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x823fe208
	if (cr0.getEQ()) goto loc_823FE208;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_823FE208:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r11,r30,256
	r11.s64 = r30.s64 + 256;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x823fe1f0
	if (cr6.getLT()) goto loc_823FE1F0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FE230"))) PPC_WEAK_FUNC(sub_823FE230);
PPC_FUNC_IMPL(__imp__sub_823FE230) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29744(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29744);
	// mflr r12
	// bl 0x823ed130
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,1
	ctx.r3.s64 = 1;
	// li r26,0
	r26.s64 = 0;
	// stw r26,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r26.u32);
	// bl 0x823f8040
	sub_823F8040(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// li r28,3
	r28.s64 = 3;
	// lis r29,-31987
	r29.s64 = -2096300032;
	// lis r27,-31987
	r27.s64 = -2096300032;
loc_823FE268:
	// stw r28,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r28.u32);
	// lwz r11,-15576(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -15576);
	// cmpw cr6,r28,r11
	cr6.compare<int32_t>(r28.s32, r11.s32, xer);
	// bge cr6,0x823fe2e0
	if (!cr6.getLT()) goto loc_823FE2E0;
	// rlwinm r30,r28,2,0,29
	r30.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,-15580(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -15580);
	// lwzx r10,r30,r11
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x823fe2d4
	if (cr6.getEQ()) goto loc_823FE2D4;
	// lwzx r3,r30,r11
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// andi. r11,r11,131
	r11.u64 = r11.u64 & 131;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fe2b4
	if (cr0.getEQ()) goto loc_823FE2B4;
	// bl 0x82403278
	sub_82403278(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x823fe2b4
	if (cr6.getEQ()) goto loc_823FE2B4;
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// stw r26,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r26.u32);
loc_823FE2B4:
	// cmpwi cr6,r28,20
	cr6.compare<int32_t>(r28.s32, 20, xer);
	// blt cr6,0x823fe2d4
	if (cr6.getLT()) goto loc_823FE2D4;
	// lwz r11,-15580(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -15580);
	// lwzx r3,r30,r11
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// lwz r11,-15580(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -15580);
	// li r10,0
	ctx.r10.s64 = 0;
	// stwx r10,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r10.u32);
loc_823FE2D4:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// b 0x823fe268
	goto loc_823FE268;
loc_823FE2E0:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,144
	r12.s64 = r31.s64 + 144;
	// bl 0x823fe2f8
	sub_823FE2F8(ctx, base);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_823FE238"))) PPC_WEAK_FUNC(sub_823FE238);
PPC_FUNC_IMPL(__imp__sub_823FE238) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,1
	ctx.r3.s64 = 1;
	// li r26,0
	r26.s64 = 0;
	// stw r26,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r26.u32);
	// bl 0x823f8040
	sub_823F8040(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// li r28,3
	r28.s64 = 3;
	// lis r29,-31987
	r29.s64 = -2096300032;
	// lis r27,-31987
	r27.s64 = -2096300032;
loc_823FE268:
	// stw r28,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r28.u32);
	// lwz r11,-15576(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -15576);
	// cmpw cr6,r28,r11
	cr6.compare<int32_t>(r28.s32, r11.s32, xer);
	// bge cr6,0x823fe2e0
	if (!cr6.getLT()) goto loc_823FE2E0;
	// rlwinm r30,r28,2,0,29
	r30.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,-15580(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -15580);
	// lwzx r10,r30,r11
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x823fe2d4
	if (cr6.getEQ()) goto loc_823FE2D4;
	// lwzx r3,r30,r11
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// andi. r11,r11,131
	r11.u64 = r11.u64 & 131;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fe2b4
	if (cr0.getEQ()) goto loc_823FE2B4;
	// bl 0x82403278
	sub_82403278(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x823fe2b4
	if (cr6.getEQ()) goto loc_823FE2B4;
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// stw r26,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r26.u32);
loc_823FE2B4:
	// cmpwi cr6,r28,20
	cr6.compare<int32_t>(r28.s32, 20, xer);
	// blt cr6,0x823fe2d4
	if (cr6.getLT()) goto loc_823FE2D4;
	// lwz r11,-15580(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -15580);
	// lwzx r3,r30,r11
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// lwz r11,-15580(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -15580);
	// li r10,0
	ctx.r10.s64 = 0;
	// stwx r10,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r10.u32);
loc_823FE2D4:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// b 0x823fe268
	goto loc_823FE268;
loc_823FE2E0:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,144
	r12.s64 = r31.s64 + 144;
	// bl 0x823fe2f8
	sub_823FE2F8(ctx, base);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_823FE2F8"))) PPC_WEAK_FUNC(sub_823FE2F8);
PPC_FUNC_IMPL(__imp__sub_823FE2F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823f7ee0
	sub_823F7EE0(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FE320"))) PPC_WEAK_FUNC(sub_823FE320);
PPC_FUNC_IMPL(__imp__sub_823FE320) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r28,0
	r28.s64 = 0;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// clrlwi r10,r11,30
	ctx.r10.u64 = r11.u32 & 0x3;
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x823fe398
	if (!cr6.getEQ()) goto loc_823FE398;
	// andi. r11,r11,264
	r11.u64 = r11.u64 & 264;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fe398
	if (cr0.getEQ()) goto loc_823FE398;
	// lwz r29,8(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// subf. r30,r29,r11
	r30.s64 = r11.s64 - r29.s64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// ble 0x823fe398
	if (!cr0.getGT()) goto loc_823FE398;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x823ff9a8
	sub_823FF9A8(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmpw cr6,r3,r30
	cr6.compare<int32_t>(ctx.r3.s32, r30.s32, xer);
	// bne cr6,0x823fe38c
	if (!cr6.getEQ()) goto loc_823FE38C;
	// rlwinm. r10,r11,0,24,24
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823fe398
	if (cr0.getEQ()) goto loc_823FE398;
	// rlwinm r11,r11,0,31,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// b 0x823fe394
	goto loc_823FE394;
loc_823FE38C:
	// li r28,-1
	r28.s64 = -1;
	// ori r11,r11,32
	r11.u64 = r11.u64 | 32;
loc_823FE394:
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_823FE398:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_823FE3B8"))) PPC_WEAK_FUNC(sub_823FE3B8);
PPC_FUNC_IMPL(__imp__sub_823FE3B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x823fe3dc
	if (!cr6.getEQ()) goto loc_823FE3DC;
	// bl 0x823fe438
	sub_823FE438(ctx, base);
	// b 0x823fe41c
	goto loc_823FE41C;
loc_823FE3DC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823fe320
	sub_823FE320(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x823fe3f4
	if (cr0.getEQ()) goto loc_823FE3F4;
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x823fe41c
	goto loc_823FE41C;
loc_823FE3F4:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// rlwinm. r11,r11,0,17,17
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fe418
	if (cr0.getEQ()) goto loc_823FE418;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823fe720
	sub_823FE720(ctx, base);
	// bl 0x824033a0
	sub_824033A0(ctx, base);
	// subfic r11,r3,0
	xer.ca = ctx.r3.u32 <= 0;
	r11.s64 = 0 - ctx.r3.s64;
	// subfe r3,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	ctx.r3.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// b 0x823fe41c
	goto loc_823FE41C;
loc_823FE418:
	// li r3,0
	ctx.r3.s64 = 0;
loc_823FE41C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FE430"))) PPC_WEAK_FUNC(sub_823FE430);
PPC_FUNC_IMPL(__imp__sub_823FE430) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29768(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29768);
	// mflr r12
	// bl 0x823ed134
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// stw r27,164(r31)
	PPC_STORE_U32(r31.u32 + 164, r27.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// li r28,0
	r28.s64 = 0;
	// stw r28,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r28.u32);
	// stw r28,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r28.u32);
	// bl 0x823f8040
	sub_823F8040(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// stw r28,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r28.u32);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r30,r11,-15580
	r30.s64 = r11.s64 + -15580;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r10,r11,-15576
	ctx.r10.s64 = r11.s64 + -15576;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
loc_823FE480:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r28,r9
	cr6.compare<int32_t>(r28.s32, ctx.r9.s32, xer);
	// bge cr6,0x823fe538
	if (!cr6.getLT()) goto loc_823FE538;
	// rlwinm r29,r28,2,0,29
	r29.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r29,r11
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + r11.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x823fe528
	if (cr6.getEQ()) goto loc_823FE528;
	// rotlwi r4,r9,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// lwz r9,12(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + 12);
	// andi. r9,r9,131
	ctx.r9.u64 = ctx.r9.u64 & 131;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// cmpwi r9,0
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x823fe528
	if (cr0.getEQ()) goto loc_823FE528;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823f5008
	sub_823F5008(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwzx r3,r29,r11
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + r11.u32);
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// andi. r10,r11,131
	ctx.r10.u64 = r11.u64 & 131;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmpwi r10,0
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823fe51c
	if (cr0.getEQ()) goto loc_823FE51C;
	// cmpwi cr6,r27,1
	cr6.compare<int32_t>(r27.s32, 1, xer);
	// bne cr6,0x823fe4f8
	if (!cr6.getEQ()) goto loc_823FE4F8;
	// bl 0x823fe3b8
	sub_823FE3B8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x823fe51c
	if (cr6.getEQ()) goto loc_823FE51C;
	// lwz r11,84(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// b 0x823fe51c
	goto loc_823FE51C;
loc_823FE4F8:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bne cr6,0x823fe51c
	if (!cr6.getEQ()) goto loc_823FE51C;
	// rlwinm. r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fe51c
	if (cr0.getEQ()) goto loc_823FE51C;
	// bl 0x823fe3b8
	sub_823FE3B8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// bne cr6,0x823fe51c
	if (!cr6.getEQ()) goto loc_823FE51C;
	// li r11,-1
	r11.s64 = -1;
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
loc_823FE51C:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,144
	r12.s64 = r31.s64 + 144;
	// bl 0x823fe5b0
	sub_823FE5B0(ctx, base);
loc_823FE528:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// stw r28,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r28.u32);
	// b 0x823fe480
	goto loc_823FE480;
loc_823FE538:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,144
	r12.s64 = r31.s64 + 144;
	// bl 0x823fe560
	sub_823FE560(ctx, base);
	// lwz r11,164(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// lwz r3,84(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// beq cr6,0x823fe558
	if (cr6.getEQ()) goto loc_823FE558;
	// lwz r3,88(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 88);
loc_823FE558:
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_823FE438"))) PPC_WEAK_FUNC(sub_823FE438);
PPC_FUNC_IMPL(__imp__sub_823FE438) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// stw r27,164(r31)
	PPC_STORE_U32(r31.u32 + 164, r27.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// li r28,0
	r28.s64 = 0;
	// stw r28,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r28.u32);
	// stw r28,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r28.u32);
	// bl 0x823f8040
	sub_823F8040(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// stw r28,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r28.u32);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r30,r11,-15580
	r30.s64 = r11.s64 + -15580;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r10,r11,-15576
	ctx.r10.s64 = r11.s64 + -15576;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
loc_823FE480:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r28,r9
	cr6.compare<int32_t>(r28.s32, ctx.r9.s32, xer);
	// bge cr6,0x823fe538
	if (!cr6.getLT()) goto loc_823FE538;
	// rlwinm r29,r28,2,0,29
	r29.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r29,r11
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + r11.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x823fe528
	if (cr6.getEQ()) goto loc_823FE528;
	// rotlwi r4,r9,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// lwz r9,12(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + 12);
	// andi. r9,r9,131
	ctx.r9.u64 = ctx.r9.u64 & 131;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// cmpwi r9,0
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x823fe528
	if (cr0.getEQ()) goto loc_823FE528;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823f5008
	sub_823F5008(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwzx r3,r29,r11
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + r11.u32);
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// andi. r10,r11,131
	ctx.r10.u64 = r11.u64 & 131;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmpwi r10,0
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x823fe51c
	if (cr0.getEQ()) goto loc_823FE51C;
	// cmpwi cr6,r27,1
	cr6.compare<int32_t>(r27.s32, 1, xer);
	// bne cr6,0x823fe4f8
	if (!cr6.getEQ()) goto loc_823FE4F8;
	// bl 0x823fe3b8
	sub_823FE3B8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x823fe51c
	if (cr6.getEQ()) goto loc_823FE51C;
	// lwz r11,84(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// b 0x823fe51c
	goto loc_823FE51C;
loc_823FE4F8:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bne cr6,0x823fe51c
	if (!cr6.getEQ()) goto loc_823FE51C;
	// rlwinm. r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x823fe51c
	if (cr0.getEQ()) goto loc_823FE51C;
	// bl 0x823fe3b8
	sub_823FE3B8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// bne cr6,0x823fe51c
	if (!cr6.getEQ()) goto loc_823FE51C;
	// li r11,-1
	r11.s64 = -1;
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
loc_823FE51C:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,144
	r12.s64 = r31.s64 + 144;
	// bl 0x823fe5b0
	sub_823FE5B0(ctx, base);
loc_823FE528:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// stw r28,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r28.u32);
	// b 0x823fe480
	goto loc_823FE480;
loc_823FE538:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,144
	r12.s64 = r31.s64 + 144;
	// bl 0x823fe560
	sub_823FE560(ctx, base);
	// lwz r11,164(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// lwz r3,84(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// beq cr6,0x823fe558
	if (cr6.getEQ()) goto loc_823FE558;
	// lwz r3,88(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 88);
loc_823FE558:
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_823FE560"))) PPC_WEAK_FUNC(sub_823FE560);
PPC_FUNC_IMPL(__imp__sub_823FE560) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x823f7ee0
	sub_823F7EE0(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FE584"))) PPC_WEAK_FUNC(sub_823FE584);
PPC_FUNC_IMPL(__imp__sub_823FE584) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-144
	r31.s64 = r12.s64 + -144;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r28,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r28.u64);
	// mflr r12
	// stw r12,-32(r1)
	PPC_STORE_U32(ctx.r1.u32 + -32, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r30,r11,-15580
	r30.s64 = r11.s64 + -15580;
	// lwz r28,80(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// b 0x823fe5cc
	goto loc_823FE5CC;
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-144
	r31.s64 = r12.s64 + -144;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r28,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r28.u64);
	// mflr r12
	// stw r12,-32(r1)
	PPC_STORE_U32(ctx.r1.u32 + -32, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
loc_823FE5CC:
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwzx r4,r11,r10
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x823f50a0
	sub_823F50A0(ctx, base);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r30,r11,-15580
	r30.s64 = r11.s64 + -15580;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r10,r11,-15576
	ctx.r10.s64 = r11.s64 + -15576;
	// lwz r27,164(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// lwz r28,80(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r28,-24(r1)
	r28.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// lwz r12,-32(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -32);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823FE5B0"))) PPC_WEAK_FUNC(sub_823FE5B0);
PPC_FUNC_IMPL(__imp__sub_823FE5B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-144
	r31.s64 = r12.s64 + -144;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r28,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r28.u64);
	// mflr r12
	// stw r12,-32(r1)
	PPC_STORE_U32(ctx.r1.u32 + -32, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwzx r4,r11,r10
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x823f50a0
	sub_823F50A0(ctx, base);
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r30,r11,-15580
	r30.s64 = r11.s64 + -15580;
	// lis r11,-31987
	r11.s64 = -2096300032;
	// addi r10,r11,-15576
	ctx.r10.s64 = r11.s64 + -15576;
	// lwz r27,164(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// lwz r28,80(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r28,-24(r1)
	r28.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// lwz r12,-32(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -32);
	// mtlr r12
	// blr 
	return;
}

