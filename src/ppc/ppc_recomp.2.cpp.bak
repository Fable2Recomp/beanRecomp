#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_820B2D60"))) PPC_WEAK_FUNC(sub_820B2D60);
PPC_FUNC_IMPL(__imp__sub_820B2D60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b2db8
	if (cr6.getEQ()) goto loc_820B2DB8;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// beq cr6,0x820b2db8
	if (cr6.getEQ()) goto loc_820B2DB8;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820b2dd4
	if (!cr6.getEQ()) goto loc_820B2DD4;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,8528(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8528);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820b2dd4
	if (!cr6.getEQ()) goto loc_820B2DD4;
loc_820B2DA4:
	// li r3,161
	ctx.r3.s64 = 161;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820B2DB8:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,8528(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8528);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x820b2da4
	if (cr6.getEQ()) goto loc_820B2DA4;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x820b2da4
	if (cr6.getEQ()) goto loc_820B2DA4;
loc_820B2DD4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B2DE8"))) PPC_WEAK_FUNC(sub_820B2DE8);
PPC_FUNC_IMPL(__imp__sub_820B2DE8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b2ed4
	if (cr6.getEQ()) goto loc_820B2ED4;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// beq cr6,0x820b2ed4
	if (cr6.getEQ()) goto loc_820B2ED4;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x820b2ed4
	if (cr6.getEQ()) goto loc_820B2ED4;
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,54
	cr6.compare<int32_t>(ctx.r3.s32, 54, xer);
	// bne cr6,0x820b2e38
	if (!cr6.getEQ()) goto loc_820B2E38;
	// li r3,330
	ctx.r3.s64 = 330;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820B2E38:
	// bl 0x820c30e8
	sub_820C30E8(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b2e7c
	if (!cr6.getEQ()) goto loc_820B2E7C;
	// bl 0x820b1940
	sub_820B1940(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f0,14100(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14100);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// subfic r11,r11,180
	xer.ca = r11.u32 <= 180;
	r11.s64 = 180 - r11.s64;
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820B2E7C:
	// bl 0x820c30e8
	sub_820C30E8(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820b2ec0
	if (!cr6.getEQ()) goto loc_820B2EC0;
	// bl 0x820b1940
	sub_820B1940(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f0,15144(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15144);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// subfic r11,r11,136
	xer.ca = r11.u32 <= 136;
	r11.s64 = 136 - r11.s64;
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820B2EC0:
	// li r3,240
	ctx.r3.s64 = 240;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820B2ED4:
	// li r3,119
	ctx.r3.s64 = 119;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B2EE8"))) PPC_WEAK_FUNC(sub_820B2EE8);
PPC_FUNC_IMPL(__imp__sub_820B2EE8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,8528(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8528);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x820b2f24
	if (!cr6.getEQ()) goto loc_820B2F24;
loc_820B2F0C:
	// li r3,1000
	ctx.r3.s64 = 1000;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820B2F24:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b2f78
	if (cr6.getEQ()) goto loc_820B2F78;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b2f78
	if (cr6.getEQ()) goto loc_820B2F78;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b2f78
	if (cr6.getEQ()) goto loc_820B2F78;
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b2f78
	if (cr6.getEQ()) goto loc_820B2F78;
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b2f78
	if (cr6.getEQ()) goto loc_820B2F78;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// rlwinm r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b2f0c
	if (!cr6.getEQ()) goto loc_820B2F0C;
loc_820B2F78:
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b2fac
	if (!cr6.getEQ()) goto loc_820B2FAC;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,8528(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8528);
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// andi. r3,r11,121
	ctx.r3.u64 = r11.u64 & 121;
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820B2FAC:
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b3078
	if (cr6.getEQ()) goto loc_820B3078;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// beq cr6,0x820b3078
	if (cr6.getEQ()) goto loc_820B3078;
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,54
	cr6.compare<int32_t>(ctx.r3.s32, 54, xer);
	// bne cr6,0x820b2fe8
	if (!cr6.getEQ()) goto loc_820B2FE8;
loc_820B2FD0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820B2FE8:
	// bl 0x820c30e8
	sub_820C30E8(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b3030
	if (!cr6.getEQ()) goto loc_820B3030;
	// bl 0x820b1940
	sub_820B1940(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f0,3112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// subfic r11,r11,30
	xer.ca = r11.u32 <= 30;
	r11.s64 = 30 - r11.s64;
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820B3030:
	// bl 0x820c30e8
	sub_820C30E8(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820b2fd0
	if (!cr6.getEQ()) goto loc_820B2FD0;
	// bl 0x820b1940
	sub_820B1940(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f0,15148(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15148);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// subfic r11,r11,52
	xer.ca = r11.u32 <= 52;
	r11.s64 = 52 - r11.s64;
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820B3078:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r11,8528(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8528);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// ble cr6,0x820b3090
	if (!cr6.getGT()) goto loc_820B3090;
	// li r3,121
	ctx.r3.s64 = 121;
loc_820B3090:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B30A8"))) PPC_WEAK_FUNC(sub_820B30A8);
PPC_FUNC_IMPL(__imp__sub_820B30A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x820b30d0
	if (cr6.getEQ()) goto loc_820B30D0;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x820b30d4
	if (!cr6.getEQ()) goto loc_820B30D4;
loc_820B30D0:
	// li r11,1
	r11.s64 = 1;
loc_820B30D4:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B30E8"))) PPC_WEAK_FUNC(sub_820B30E8);
PPC_FUNC_IMPL(__imp__sub_820B30E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r4,r11,184
	ctx.r4.s64 = r11.s64 + 184;
	// bl 0x821184c0
	sub_821184C0(ctx, base);
	// lwz r10,-1364(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lis r11,-32123
	r11.s64 = -2105212928;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lfs f13,184(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 184);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,32576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32576);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,208(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 208, temp.u32);
	// lfs f13,188(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 188);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,32576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32576);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,212(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 212, temp.u32);
	// lfs f13,192(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 192);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,32576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32576);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,216(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 216, temp.u32);
	// bl 0x82118490
	sub_82118490(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3168"))) PPC_WEAK_FUNC(sub_820B3168);
PPC_FUNC_IMPL(__imp__sub_820B3168) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// bl 0x82345d68
	sub_82345D68(ctx, base);
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820b31c4
	if (cr6.getEQ()) goto loc_820B31C4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r9,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,1348(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1348);
	// addi r11,r11,-3
	r11.s64 = r11.s64 + -3;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_820B31C4:
	// addi r11,r28,1
	r11.s64 = r28.s64 + 1;
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820b3228
	if (cr6.getEQ()) goto loc_820B3228;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r9,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,1348(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1348);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x820b3220
	if (cr6.getEQ()) goto loc_820B3220;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x820b3220
	if (cr6.getEQ()) goto loc_820B3220;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x820b3220
	if (cr6.getEQ()) goto loc_820B3220;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// bne cr6,0x820b3218
	if (!cr6.getEQ()) goto loc_820B3218;
	// cmpwi cr6,r27,1
	cr6.compare<int32_t>(r27.s32, 1, xer);
	// bne cr6,0x820b3220
	if (!cr6.getEQ()) goto loc_820B3220;
loc_820B3218:
	// li r11,0
	r11.s64 = 0;
	// b 0x820b3224
	goto loc_820B3224;
loc_820B3220:
	// li r11,1
	r11.s64 = 1;
loc_820B3224:
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_820B3228:
	// addi r11,r28,2
	r11.s64 = r28.s64 + 2;
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820b327c
	if (cr6.getEQ()) goto loc_820B327C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r9,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,1348(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1348);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x820b3274
	if (cr6.getEQ()) goto loc_820B3274;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// bne cr6,0x820b326c
	if (!cr6.getEQ()) goto loc_820B326C;
	// cmpwi cr6,r27,1
	cr6.compare<int32_t>(r27.s32, 1, xer);
	// beq cr6,0x820b3274
	if (cr6.getEQ()) goto loc_820B3274;
loc_820B326C:
	// li r11,0
	r11.s64 = 0;
	// b 0x820b3278
	goto loc_820B3278;
loc_820B3274:
	// li r11,1
	r11.s64 = 1;
loc_820B3278:
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_820B327C:
	// addi r11,r28,3
	r11.s64 = r28.s64 + 3;
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820b32b4
	if (cr6.getEQ()) goto loc_820B32B4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r9,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,1348(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1348);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_820B32B4:
	// addi r11,r28,4
	r11.s64 = r28.s64 + 4;
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820b32f0
	if (cr6.getEQ()) goto loc_820B32F0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r9,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,1348(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1348);
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_820B32F0:
	// addi r11,r28,5
	r11.s64 = r28.s64 + 5;
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820b332c
	if (cr6.getEQ()) goto loc_820B332C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r4,r9,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,1348(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1348);
	// addi r11,r11,-4
	r11.s64 = r11.s64 + -4;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_820B332C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820B3338"))) PPC_WEAK_FUNC(sub_820B3338);
PPC_FUNC_IMPL(__imp__sub_820B3338) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,46
	ctx.r4.s64 = 46;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r3,r11,5000
	ctx.r3.s64 = r11.s64 + 5000;
	// lfs f1,504(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 504);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820c90d0
	sub_820C90D0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,46
	ctx.r4.s64 = 46;
	// addi r3,r11,6288
	ctx.r3.s64 = r11.s64 + 6288;
	// lfs f1,500(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 500);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820c90d0
	sub_820C90D0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// lfs f6,14108(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14108);
	ctx.f6.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f5,15168(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15168);
	ctx.f5.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f4,15164(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15164);
	ctx.f4.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,15160(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15160);
	ctx.f3.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,15156(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15156);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15152(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15152);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8238b608
	sub_8238B608(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f9,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	ctx.f9.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f8,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f8.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f7,f8
	ctx.f7.f64 = ctx.f8.f64;
	// fmr f6,f8
	ctx.f6.f64 = ctx.f8.f64;
	// fmr f5,f8
	ctx.f5.f64 = ctx.f8.f64;
	// fmr f4,f8
	ctx.f4.f64 = ctx.f8.f64;
	// lfs f2,14052(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14052);
	ctx.f2.f64 = double(temp.f32);
	// fmr f3,f8
	ctx.f3.f64 = ctx.f8.f64;
	// fmr f1,f8
	ctx.f1.f64 = ctx.f8.f64;
	// bl 0x8210bf20
	sub_8210BF20(ctx, base);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r6,46
	ctx.r6.s64 = 46;
	// addi r5,r11,6288
	ctx.r5.s64 = r11.s64 + 6288;
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82098a20
	sub_82098A20(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r6,46
	ctx.r6.s64 = 46;
	// addi r5,r11,5000
	ctx.r5.s64 = r11.s64 + 5000;
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82098a20
	sub_82098A20(ctx, base);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3440"))) PPC_WEAK_FUNC(sub_820B3440);
PPC_FUNC_IMPL(__imp__sub_820B3440) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed108
	// stfd f31,-144(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -144, f31.u64);
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,54
	cr6.compare<int32_t>(ctx.r3.s32, 54, xer);
	// bne cr6,0x820b3864
	if (!cr6.getEQ()) goto loc_820B3864;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lwz r11,-1848(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1848);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820b3864
	if (!cr6.getEQ()) goto loc_820B3864;
	// lis r23,-32014
	r23.s64 = -2098069504;
	// lwz r11,-1844(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -1844);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b3864
	if (cr6.getEQ()) goto loc_820B3864;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// li r21,-1
	r21.s64 = -1;
	// lwz r11,4204(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4204);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b34ac
	if (cr6.getEQ()) goto loc_820B34AC;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820b34ac
	if (cr6.getEQ()) goto loc_820B34AC;
	// li r11,2
	r11.s64 = 2;
	// stw r11,-1848(r30)
	PPC_STORE_U32(r30.u32 + -1848, r11.u32);
loc_820B34AC:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r29,0
	r29.s64 = 0;
	// li r17,220
	r17.s64 = 220;
	// li r18,220
	r18.s64 = 220;
	// mr r19,r29
	r19.u64 = r29.u64;
	// lwz r10,-1852(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1852);
	// mr r20,r29
	r20.u64 = r29.u64;
	// addi r31,r10,1
	r31.s64 = ctx.r10.s64 + 1;
	// stw r31,-1852(r11)
	PPC_STORE_U32(r11.u32 + -1852, r31.u32);
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// subf r11,r11,r31
	r11.s64 = r31.s64 - r11.s64;
	// srawi r11,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	r11.s64 = r11.s32 >> 4;
	// addze r10,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r10.s64 = temp.s64;
	// srawi r11,r31,4
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0xF) != 0);
	r11.s64 = r31.s32 >> 4;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// addi r16,r11,1
	r16.s64 = r11.s64 + 1;
	// bge cr6,0x820b34fc
	if (!cr6.getLT()) goto loc_820B34FC;
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
loc_820B34FC:
	// lwz r8,-1844(r23)
	ctx.r8.u64 = PPC_LOAD_U32(r23.u32 + -1844);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820b35b0
	if (!cr6.getGT()) goto loc_820B35B0;
	// addi r11,r8,6
	r11.s64 = ctx.r8.s64 + 6;
loc_820B3510:
	// lhz r9,-6(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + -6);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820b3528
	if (!cr6.getEQ()) goto loc_820B3528;
	// lhz r6,-4(r11)
	ctx.r6.u64 = PPC_LOAD_U16(r11.u32 + -4);
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x820b35a0
	if (cr6.getEQ()) goto loc_820B35A0;
loc_820B3528:
	// cmplwi cr6,r9,20497
	cr6.compare<uint32_t>(ctx.r9.u32, 20497, xer);
	// beq cr6,0x820b3558
	if (cr6.getEQ()) goto loc_820B3558;
	// lhz r9,-2(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + -2);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x820b3544
	if (cr6.getLT()) goto loc_820B3544;
	// mr r17,r9
	r17.u64 = ctx.r9.u64;
loc_820B3544:
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x820b3558
	if (cr6.getLT()) goto loc_820B3558;
	// mr r19,r9
	r19.u64 = ctx.r9.u64;
loc_820B3558:
	// lhz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + -4);
	// cmplwi cr6,r9,20497
	cr6.compare<uint32_t>(ctx.r9.u32, 20497, xer);
	// beq cr6,0x820b358c
	if (cr6.getEQ()) goto loc_820B358C;
	// lhz r9,2(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x820b3578
	if (cr6.getLT()) goto loc_820B3578;
	// mr r18,r9
	r18.u64 = ctx.r9.u64;
loc_820B3578:
	// lhz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 4);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x820b358c
	if (cr6.getLT()) goto loc_820B358C;
	// mr r20,r9
	r20.u64 = ctx.r9.u64;
loc_820B358C:
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// cmpw cr6,r7,r10
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r10.s32, xer);
	// blt cr6,0x820b3510
	if (cr6.getLT()) goto loc_820B3510;
	// b 0x820b35b0
	goto loc_820B35B0;
loc_820B35A0:
	// li r11,2
	r11.s64 = 2;
	// mr r16,r7
	r16.u64 = ctx.r7.u64;
	// mr r10,r7
	ctx.r10.u64 = ctx.r7.u64;
	// stw r11,-1848(r30)
	PPC_STORE_U32(r30.u32 + -1848, r11.u32);
loc_820B35B0:
	// mr r22,r10
	r22.u64 = ctx.r10.u64;
	// cmpw cr6,r10,r16
	cr6.compare<int32_t>(ctx.r10.s32, r16.s32, xer);
	// bge cr6,0x820b3864
	if (!cr6.getLT()) goto loc_820B3864;
	// rlwinm r11,r10,4,0,27
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// lis r27,-31991
	r27.s64 = -2096562176;
	// subf r26,r31,r11
	r26.s64 = r11.s64 - r31.s64;
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r28,-31994
	r28.s64 = -2096758784;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// li r24,-1
	r24.s64 = -1;
	// rlwinm r25,r11,2,0,29
	r25.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
loc_820B35E4:
	// lhzx r3,r25,r8
	ctx.r3.u64 = PPC_LOAD_U16(r25.u32 + ctx.r8.u32);
	// add r11,r25,r8
	r11.u64 = r25.u64 + ctx.r8.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820b3600
	if (!cr6.getEQ()) goto loc_820B3600;
	// lhz r11,2(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b3864
	if (cr6.getEQ()) goto loc_820B3864;
loc_820B3600:
	// cmplwi cr6,r3,20497
	cr6.compare<uint32_t>(ctx.r3.u32, 20497, xer);
	// beq cr6,0x820b3724
	if (cr6.getEQ()) goto loc_820B3724;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,-1844(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -1844);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// add r10,r25,r11
	ctx.r10.u64 = r25.u64 + r11.u64;
	// lhz r11,4(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 4);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820b362c
	if (cr6.getLT()) goto loc_820B362C;
	// mr r17,r11
	r17.u64 = r11.u64;
loc_820B362C:
	// lhz r11,6(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 6);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820b3640
	if (cr6.getLT()) goto loc_820B3640;
	// mr r19,r11
	r19.u64 = r11.u64;
loc_820B3640:
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r31,r3
	r31.s64 = ctx.r3.s16;
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// lwz r6,-31556(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + -31556);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r29.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r29,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r29.u32);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmpwi cr6,r19,1
	cr6.compare<int32_t>(r19.s32, 1, xer);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// add r9,r11,r10
	ctx.r9.u64 = r11.u64 + ctx.r10.u64;
	// bne cr6,0x820b36a8
	if (!cr6.getEQ()) goto loc_820B36A8;
	// lwz r8,112(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// mr r11,r17
	r11.u64 = r17.u64;
	// subf r3,r8,r17
	ctx.r3.s64 = r17.s64 - ctx.r8.s64;
	// b 0x820b36cc
	goto loc_820B36CC;
loc_820B36A8:
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r19,2
	cr6.compare<int32_t>(r19.s32, 2, xer);
	// bne cr6,0x820b36c4
	if (!cr6.getEQ()) goto loc_820B36C4;
	// srawi r8,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r8.s64 = r11.s32 >> 1;
	// subf r3,r8,r17
	ctx.r3.s64 = r17.s64 - ctx.r8.s64;
	// add r11,r3,r11
	r11.u64 = ctx.r3.u64 + r11.u64;
	// b 0x820b36cc
	goto loc_820B36CC;
loc_820B36C4:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// add r11,r11,r17
	r11.u64 = r11.u64 + r17.u64;
loc_820B36CC:
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r3,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r3.u32);
	// addi r6,r9,1
	ctx.r6.s64 = ctx.r9.s64 + 1;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// addi r4,r10,-1
	ctx.r4.s64 = ctx.r10.s64 + -1;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r31,r3
	r31.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r6,-31556(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + -31556);
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// stw r24,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r24.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lwz r8,-1844(r23)
	ctx.r8.u64 = PPC_LOAD_U32(r23.u32 + -1844);
loc_820B3724:
	// add r11,r25,r8
	r11.u64 = r25.u64 + ctx.r8.u64;
	// lhz r3,2(r11)
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// cmplwi cr6,r3,20497
	cr6.compare<uint32_t>(ctx.r3.u32, 20497, xer);
	// beq cr6,0x820b3850
	if (cr6.getEQ()) goto loc_820B3850;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,-1844(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -1844);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// add r10,r25,r11
	ctx.r10.u64 = r25.u64 + r11.u64;
	// lhz r11,8(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 8);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820b3758
	if (cr6.getLT()) goto loc_820B3758;
	// mr r18,r11
	r18.u64 = r11.u64;
loc_820B3758:
	// lhz r11,10(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 10);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820b376c
	if (cr6.getLT()) goto loc_820B376C;
	// mr r20,r11
	r20.u64 = r11.u64;
loc_820B376C:
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r31,r3
	r31.s64 = ctx.r3.s16;
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// lwz r6,-31556(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + -31556);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r29.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r29,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r29.u32);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmpwi cr6,r20,1
	cr6.compare<int32_t>(r20.s32, 1, xer);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// add r9,r11,r10
	ctx.r9.u64 = r11.u64 + ctx.r10.u64;
	// bne cr6,0x820b37d4
	if (!cr6.getEQ()) goto loc_820B37D4;
	// lwz r8,112(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// mr r11,r18
	r11.u64 = r18.u64;
	// subf r3,r8,r18
	ctx.r3.s64 = r18.s64 - ctx.r8.s64;
	// b 0x820b37f8
	goto loc_820B37F8;
loc_820B37D4:
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r20,2
	cr6.compare<int32_t>(r20.s32, 2, xer);
	// bne cr6,0x820b37f0
	if (!cr6.getEQ()) goto loc_820B37F0;
	// srawi r8,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r8.s64 = r11.s32 >> 1;
	// subf r3,r8,r18
	ctx.r3.s64 = r18.s64 - ctx.r8.s64;
	// add r11,r3,r11
	r11.u64 = ctx.r3.u64 + r11.u64;
	// b 0x820b37f8
	goto loc_820B37F8;
loc_820B37F0:
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// add r11,r11,r18
	r11.u64 = r11.u64 + r18.u64;
loc_820B37F8:
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r3,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r3.u32);
	// addi r6,r9,1
	ctx.r6.s64 = ctx.r9.s64 + 1;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// addi r4,r10,-1
	ctx.r4.s64 = ctx.r10.s64 + -1;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r31,r3
	r31.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r6,-31556(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + -31556);
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// stw r24,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r24.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lwz r8,-1844(r23)
	ctx.r8.u64 = PPC_LOAD_U32(r23.u32 + -1844);
loc_820B3850:
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// addi r25,r25,12
	r25.s64 = r25.s64 + 12;
	// addi r26,r26,16
	r26.s64 = r26.s64 + 16;
	// cmpw cr6,r22,r16
	cr6.compare<int32_t>(r22.s32, r16.s32, xer);
	// blt cr6,0x820b35e4
	if (cr6.getLT()) goto loc_820B35E4;
loc_820B3864:
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f31,-144(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// b 0x823ed158
	return;
}

__attribute__((alias("__imp__sub_820B3870"))) PPC_WEAK_FUNC(sub_820B3870);
PPC_FUNC_IMPL(__imp__sub_820B3870) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed528
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2fb8
	sub_820C2FB8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b3c10
	if (cr6.getEQ()) goto loc_820B3C10;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// addi r10,r10,16796
	ctx.r10.s64 = ctx.r10.s64 + 16796;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,4(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	f0.f64 = double(temp.f32);
	// lfs f13,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lhz r9,2304(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 2304);
	// fdivs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 / f0.f64));
	// lhz r7,2310(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 2310);
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// lhz r9,2308(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 2308);
	// lhz r8,2306(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 2306);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// lfs f12,15184(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15184);
	ctx.f12.f64 = double(temp.f32);
	// extsh r11,r8
	r11.s64 = ctx.r8.s16;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// extsh r10,r7
	ctx.r10.s64 = ctx.r7.s16;
	// std r9,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r9.u64);
	// fmuls f0,f0,f12
	f0.f64 = double(float(f0.f64 * ctx.f12.f64));
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// std r10,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r10.u64);
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// lfd f10,96(r1)
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f10,f10
	ctx.f10.f64 = double(ctx.f10.s64);
	// lfd f11,88(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// lfd f9,104(r1)
	ctx.f9.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f9,f9
	ctx.f9.f64 = double(ctx.f9.s64);
	// frsp f8,f12
	ctx.f8.f64 = double(float(ctx.f12.f64));
	// lfs f12,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f12.f64 = double(temp.f32);
	// frsp f10,f10
	ctx.f10.f64 = double(float(ctx.f10.f64));
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// frsp f9,f9
	ctx.f9.f64 = double(float(ctx.f9.f64));
	// fmuls f27,f8,f12
	f27.f64 = double(float(ctx.f8.f64 * ctx.f12.f64));
	// fmuls f31,f11,f12
	f31.f64 = double(float(ctx.f11.f64 * ctx.f12.f64));
	// fmuls f12,f13,f27
	ctx.f12.f64 = double(float(ctx.f13.f64 * f27.f64));
	// fadds f30,f10,f27
	f30.f64 = double(float(ctx.f10.f64 + f27.f64));
	// fmuls f13,f13,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64));
	// fadds f29,f9,f31
	f29.f64 = double(float(ctx.f9.f64 + f31.f64));
	// fmuls f28,f12,f0
	f28.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f26,f13,f0
	f26.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x820c32b8
	sub_820C32B8(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fmuls f13,f1,f27
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64 * f27.f64));
	// lwz r10,556(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 556);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,12888(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12888);
	f0.f64 = double(temp.f32);
	// fmuls f23,f13,f0
	f23.f64 = double(float(ctx.f13.f64 * f0.f64));
	// beq cr6,0x820b398c
	if (cr6.getEQ()) goto loc_820B398C;
	// lwz r10,4572(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4572);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820b398c
	if (!cr6.getEQ()) goto loc_820B398C;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// lwz r9,560(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 560);
	// lwz r10,17328(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17328);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// b 0x820b399c
	goto loc_820B399C;
loc_820B398C:
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// lwz r9,560(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 560);
	// lwz r10,17328(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17328);
	// subf r10,r10,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
loc_820B399C:
	// stw r10,560(r11)
	PPC_STORE_U32(r11.u32 + 560, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,560(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 560);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x820b39bc
	if (!cr6.getLT()) goto loc_820B39BC;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,560(r11)
	PPC_STORE_U32(r11.u32 + 560, ctx.r10.u32);
	// b 0x820b39d0
	goto loc_820B39D0;
loc_820B39BC:
	// lis r9,-32190
	ctx.r9.s64 = -2109603840;
	// lwz r9,17324(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 17324);
	// cmpw cr6,r10,r9
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, xer);
	// ble cr6,0x820b39d4
	if (!cr6.getGT()) goto loc_820B39D4;
	// stw r9,560(r11)
	PPC_STORE_U32(r11.u32 + 560, ctx.r9.u32);
loc_820B39D0:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B39D4:
	// lwz r10,560(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 560);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// fadds f27,f29,f31
	ctx.fpscr.disableFlushMode();
	f27.f64 = double(float(f29.f64 + f31.f64));
	// li r9,0
	ctx.r9.s64 = 0;
	// fsubs f25,f30,f28
	f25.f64 = double(float(f30.f64 - f28.f64));
	// li r8,0
	ctx.r8.s64 = 0;
	// fsubs f31,f29,f31
	f31.f64 = double(float(f29.f64 - f31.f64));
	// fsubs f1,f30,f23
	ctx.f1.f64 = double(float(f30.f64 - f23.f64));
	// lwz r11,17320(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 17320);
	// add r31,r10,r11
	r31.u64 = ctx.r10.u64 + r11.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f4,f27
	ctx.f4.f64 = f27.f64;
	// fmr f3,f25
	ctx.f3.f64 = f25.f64;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// bl 0x820972f8
	sub_820972F8(ctx, base);
	// fadds f24,f30,f28
	ctx.fpscr.disableFlushMode();
	f24.f64 = double(float(f30.f64 + f28.f64));
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// fmr f4,f27
	ctx.f4.f64 = f27.f64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fadds f3,f23,f30
	ctx.f3.f64 = double(float(f23.f64 + f30.f64));
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f1,f24
	ctx.f1.f64 = f24.f64;
	// bl 0x820972f8
	sub_820972F8(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// fsubs f4,f29,f26
	ctx.fpscr.disableFlushMode();
	ctx.f4.f64 = double(float(f29.f64 - f26.f64));
	// li r8,0
	ctx.r8.s64 = 0;
	// fmr f3,f24
	ctx.f3.f64 = f24.f64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f1,f25
	ctx.f1.f64 = f25.f64;
	// bl 0x820972f8
	sub_820972F8(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// fmr f4,f27
	ctx.fpscr.disableFlushMode();
	ctx.f4.f64 = f27.f64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f3,f24
	ctx.f3.f64 = f24.f64;
	// fadds f2,f29,f26
	ctx.f2.f64 = double(float(f29.f64 + f26.f64));
	// fmr f1,f25
	ctx.f1.f64 = f25.f64;
	// bl 0x820972f8
	sub_820972F8(ctx, base);
	// rlwinm r9,r31,16,24,31
	ctx.r9.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 16) & 0xFF;
	// clrldi r11,r31,56
	r11.u64 = r31.u64 & 0xFF;
	// rlwinm r10,r31,24,24,31
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 24) & 0xFF;
	// rlwinm r8,r31,8,24,31
	ctx.r8.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 8) & 0xFF;
	// clrldi r7,r9,32
	ctx.r7.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// clrldi r10,r10,32
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFFFFFF;
	// clrldi r6,r8,32
	ctx.r6.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r9,0
	ctx.r9.s64 = 0;
	// std r7,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r7.u64);
	// li r8,0
	ctx.r8.s64 = 0;
	// std r10,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r10.u64);
	// li r3,80
	ctx.r3.s64 = 80;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// lfd f0,104(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f12,f0
	ctx.f12.f64 = double(f0.s64);
	// lfd f0,88(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// lfd f13,96(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f10,f0
	ctx.f10.f64 = double(f0.s64);
	// lfd f11,80(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// lfd f0,15176(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 15176);
	// fmul f12,f12,f0
	ctx.f12.f64 = ctx.f12.f64 * f0.f64;
	// fmul f10,f10,f0
	ctx.f10.f64 = ctx.f10.f64 * f0.f64;
	// fmul f13,f13,f0
	ctx.f13.f64 = ctx.f13.f64 * f0.f64;
	// fmul f0,f11,f0
	f0.f64 = ctx.f11.f64 * f0.f64;
	// frsp f4,f12
	ctx.f4.f64 = double(float(ctx.f12.f64));
	// frsp f2,f10
	ctx.f2.f64 = double(float(ctx.f10.f64));
	// frsp f3,f13
	ctx.f3.f64 = double(float(ctx.f13.f64));
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x82096dd8
	sub_82096DD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r29,-1
	r29.s64 = -1;
	// lfs f22,15172(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15172);
	f22.f64 = double(temp.f32);
loc_820B3B04:
	// extsw r11,r29
	r11.s64 = r29.s32;
	// li r30,-1
	r30.s64 = -1;
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, r11.u64);
	// lfd f0,104(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f23,f0
	f23.f64 = double(float(f0.f64));
	// fmadds f20,f23,f26,f29
	f20.f64 = double(float(f23.f64 * f26.f64 + f29.f64));
loc_820B3B20:
	// extsw r10,r30
	ctx.r10.s64 = r30.s32;
	// li r11,0
	r11.s64 = 0;
	// std r10,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r10.u64);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f27,f0
	f27.f64 = double(float(f0.f64));
	// fmadds f21,f27,f28,f30
	f21.f64 = double(float(f27.f64 * f28.f64 + f30.f64));
loc_820B3B3C:
	// extsw r10,r11
	ctx.r10.s64 = r11.s32;
	// addi r31,r11,1
	r31.s64 = r11.s64 + 1;
	// extsw r11,r31
	r11.s64 = r31.s32;
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f22
	f31.f64 = double(float(f0.f64 * f22.f64));
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f25,f0,f22
	f25.f64 = double(float(f0.f64 * f22.f64));
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f27
	f0.f64 = double(float(f0.f64 * f27.f64));
	// fmadds f24,f0,f28,f30
	f24.f64 = double(float(f0.f64 * f28.f64 + f30.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// fmr f31,f25
	f31.f64 = f25.f64;
	// fmuls f0,f0,f23
	f0.f64 = double(float(f0.f64 * f23.f64));
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// fmadds f25,f0,f26,f29
	f25.f64 = double(float(f0.f64 * f26.f64 + f29.f64));
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f27
	f0.f64 = double(float(f0.f64 * f27.f64));
	// fmadds f31,f0,f28,f30
	f31.f64 = double(float(f0.f64 * f28.f64 + f30.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f5,f31
	ctx.f5.f64 = f31.f64;
	// fmr f4,f25
	ctx.f4.f64 = f25.f64;
	// fmr f3,f24
	ctx.f3.f64 = f24.f64;
	// fmr f2,f20
	ctx.f2.f64 = f20.f64;
	// fmr f1,f21
	ctx.f1.f64 = f21.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f23
	f0.f64 = double(float(f0.f64 * f23.f64));
	// fmadds f6,f0,f26,f29
	ctx.f6.f64 = double(float(f0.f64 * f26.f64 + f29.f64));
	// bl 0x82096f28
	sub_82096F28(ctx, base);
	// mr r11,r31
	r11.u64 = r31.u64;
	// cmpwi cr6,r11,20
	cr6.compare<int32_t>(r11.s32, 20, xer);
	// blt cr6,0x820b3b3c
	if (cr6.getLT()) goto loc_820B3B3C;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// ble cr6,0x820b3b20
	if (!cr6.getGT()) goto loc_820B3B20;
	// addi r29,r29,2
	r29.s64 = r29.s64 + 2;
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// ble cr6,0x820b3b04
	if (!cr6.getGT()) goto loc_820B3B04;
	// bl 0x82096fa0
	sub_82096FA0(ctx, base);
loc_820B3C10:
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed574
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820B3C20"))) PPC_WEAK_FUNC(sub_820B3C20);
PPC_FUNC_IMPL(__imp__sub_820B3C20) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// lfs f0,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// fdivs f0,f0,f1
	f0.f64 = double(float(f0.f64 / ctx.f1.f64));
	// lfs f13,16588(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16588);
	ctx.f13.f64 = double(temp.f32);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lfs f12,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 * ctx.f13.f64));
	// lfs f11,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f11.f64 = double(temp.f32);
	// fmuls f12,f12,f13
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// stfs f12,1460(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 1460, temp.u32);
	// fmuls f13,f11,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f13.f64));
	// stfs f13,1468(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 1468, temp.u32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// stfs f1,16588(r10)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(ctx.r10.u32 + 16588, temp.u32);
	// stfs f0,16592(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 16592, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3C68"))) PPC_WEAK_FUNC(sub_820B3C68);
PPC_FUNC_IMPL(__imp__sub_820B3C68) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32190
	r11.s64 = -2109603840;
	// stfs f1,16584(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r11.u32 + 16584, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3C78"))) PPC_WEAK_FUNC(sub_820B3C78);
PPC_FUNC_IMPL(__imp__sub_820B3C78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	// lfs f1,376(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 376);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3C80"))) PPC_WEAK_FUNC(sub_820B3C80);
PPC_FUNC_IMPL(__imp__sub_820B3C80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister f0{};
	PPCRegister temp{};
	// lfs f13,420(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 420);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,8252(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 8252);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f13,396(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 396);
	ctx.f13.f64 = double(temp.f32);
	// fadds f1,f0,f13
	ctx.f1.f64 = double(float(f0.f64 + ctx.f13.f64));
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3C98"))) PPC_WEAK_FUNC(sub_820B3C98);
PPC_FUNC_IMPL(__imp__sub_820B3C98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3CA8"))) PPC_WEAK_FUNC(sub_820B3CA8);
PPC_FUNC_IMPL(__imp__sub_820B3CA8) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lfs f13,508(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 508);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bgelr cr6
	if (!cr6.getLT()) return;
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3CD0"))) PPC_WEAK_FUNC(sub_820B3CD0);
PPC_FUNC_IMPL(__imp__sub_820B3CD0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lfs f1,700(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 700);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3CE0"))) PPC_WEAK_FUNC(sub_820B3CE0);
PPC_FUNC_IMPL(__imp__sub_820B3CE0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lfs f13,596(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 596);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14020(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14020);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,13980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3D08"))) PPC_WEAK_FUNC(sub_820B3D08);
PPC_FUNC_IMPL(__imp__sub_820B3D08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lfs f13,612(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 612);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,13980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3D28"))) PPC_WEAK_FUNC(sub_820B3D28);
PPC_FUNC_IMPL(__imp__sub_820B3D28) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r3,468(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 468);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3D38"))) PPC_WEAK_FUNC(sub_820B3D38);
PPC_FUNC_IMPL(__imp__sub_820B3D38) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r3,472(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 472);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3D48"))) PPC_WEAK_FUNC(sub_820B3D48);
PPC_FUNC_IMPL(__imp__sub_820B3D48) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stb r3,4998(r11)
	PPC_STORE_U8(r11.u32 + 4998, ctx.r3.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3D58"))) PPC_WEAK_FUNC(sub_820B3D58);
PPC_FUNC_IMPL(__imp__sub_820B3D58) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lbz r3,4998(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 4998);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3D68"))) PPC_WEAK_FUNC(sub_820B3D68);
PPC_FUNC_IMPL(__imp__sub_820B3D68) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32190
	r11.s64 = -2109603840;
	// stw r3,16576(r11)
	PPC_STORE_U32(r11.u32 + 16576, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3D78"))) PPC_WEAK_FUNC(sub_820B3D78);
PPC_FUNC_IMPL(__imp__sub_820B3D78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lwz r3,16576(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 16576);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3D88"))) PPC_WEAK_FUNC(sub_820B3D88);
PPC_FUNC_IMPL(__imp__sub_820B3D88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r10,128(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 128);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820b3db4
	if (!cr6.getEQ()) goto loc_820B3DB4;
	// lwz r10,180(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 180);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b3db4
	if (cr6.getEQ()) goto loc_820B3DB4;
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// lbz r3,3(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// blr 
	return;
loc_820B3DB4:
	// lwz r11,1536(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1536);
	// lbz r3,3(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3DC0"))) PPC_WEAK_FUNC(sub_820B3DC0);
PPC_FUNC_IMPL(__imp__sub_820B3DC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// addi r3,r11,132
	ctx.r3.s64 = r11.s64 + 132;
	// lwz r10,128(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 128);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// addi r3,r11,1500
	ctx.r3.s64 = r11.s64 + 1500;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3DE0"))) PPC_WEAK_FUNC(sub_820B3DE0);
PPC_FUNC_IMPL(__imp__sub_820B3DE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// addi r3,r11,168
	ctx.r3.s64 = r11.s64 + 168;
	// lwz r10,128(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 128);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// addi r3,r11,1484
	ctx.r3.s64 = r11.s64 + 1484;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3E00"))) PPC_WEAK_FUNC(sub_820B3E00);
PPC_FUNC_IMPL(__imp__sub_820B3E00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// addi r3,r11,1328
	ctx.r3.s64 = r11.s64 + 1328;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3E10"))) PPC_WEAK_FUNC(sub_820B3E10);
PPC_FUNC_IMPL(__imp__sub_820B3E10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x820c9b90
	sub_820C9B90(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b3e4c
	if (cr6.getEQ()) goto loc_820B3E4C;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x8211dd98
	sub_8211DD98(ctx, base);
loc_820B3E4C:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r3,-1828(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -1828);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820b3e64
	if (cr6.getEQ()) goto loc_820B3E64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x820db5a0
	sub_820DB5A0(ctx, base);
loc_820B3E64:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-1384
	r11.s64 = r11.s64 + -1384;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// stw r30,432(r11)
	PPC_STORE_U32(r11.u32 + 432, r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B3E90"))) PPC_WEAK_FUNC(sub_820B3E90);
PPC_FUNC_IMPL(__imp__sub_820B3E90) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r29,r7
	r29.u64 = ctx.r7.u64;
	// bl 0x820c9b90
	sub_820C9B90(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r25,8(r30)
	r25.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm r30,r3,2,0,29
	r30.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r31,r11,-1384
	r31.s64 = r11.s64 + -1384;
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r11,432(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 432);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b3f6c
	if (cr6.getEQ()) goto loc_820B3F6C;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x820b3ef0
	if (cr6.getEQ()) goto loc_820B3EF0;
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r11,480(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820b3f6c
	if (!cr6.getEQ()) goto loc_820B3F6C;
loc_820B3EF0:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r11,128(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 128);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x820b3f6c
	if (cr6.getEQ()) goto loc_820B3F6C;
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x820b3f18
	if (cr6.getEQ()) goto loc_820B3F18;
	// lwz r11,20(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 20);
	// rlwinm r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b3f6c
	if (!cr6.getEQ()) goto loc_820B3F6C;
loc_820B3F18:
	// li r11,4
	r11.s64 = 4;
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// addi r11,r11,436
	r11.s64 = r11.s64 + 436;
	// stw r11,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r11.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lfs f0,372(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 372);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r29)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + 0, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lfs f12,420(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 420);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,8252(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8252);
	ctx.f13.f64 = double(temp.f32);
	// fadds f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 + ctx.f12.f64));
	// lfs f12,396(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 396);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fadds f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 + ctx.f12.f64));
	// fadds f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 + f0.f64));
	// lfs f0,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f0.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,0(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 0, temp.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
loc_820B3F6C:
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_820B3F80"))) PPC_WEAK_FUNC(sub_820B3F80);
PPC_FUNC_IMPL(__imp__sub_820B3F80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1836(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1836);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// bne cr6,0x820b3fac
	if (!cr6.getEQ()) goto loc_820B3FAC;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// addi r4,r11,1460
	ctx.r4.s64 = r11.s64 + 1460;
	// addi r3,r11,436
	ctx.r3.s64 = r11.s64 + 436;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f1,-1808(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -1808);
	ctx.f1.f64 = double(temp.f32);
	// b 0x820b0ae0
	sub_820B0AE0(ctx, base);
	return;
loc_820B3FAC:
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// addi r8,r10,1460
	ctx.r8.s64 = ctx.r10.s64 + 1460;
	// addi r9,r10,1496
	ctx.r9.s64 = ctx.r10.s64 + 1496;
	// addi r7,r10,1468
	ctx.r7.s64 = ctx.r10.s64 + 1468;
	// lfs f13,1460(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1460);
	ctx.f13.f64 = double(temp.f32);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// lfs f0,1496(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1496);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,436(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 436, temp.u32);
	// lfs f0,1468(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1468);
	f0.f64 = double(temp.f32);
	// stfs f0,440(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 440, temp.u32);
	// lfs f0,0(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,444(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 444, temp.u32);
	// lfs f13,0(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,0(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,448(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 448, temp.u32);
	// lfs f13,0(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,0(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,452(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 452, temp.u32);
	// lfs f0,0(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,456(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 456, temp.u32);
	// lfs f0,0(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,460(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 460, temp.u32);
	// lfs f0,0(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f13,0(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,464(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 464, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B4028"))) PPC_WEAK_FUNC(sub_820B4028);
PPC_FUNC_IMPL(__imp__sub_820B4028) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// bl 0x820c9b90
	sub_820C9B90(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r11,r11,-1384
	r11.s64 = r11.s64 + -1384;
	// lfs f0,3112(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3112);
	f0.f64 = double(temp.f32);
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r10,r11
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lfs f13,1496(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 1496);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,0(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lfs f12,420(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 420);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,8252(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8252);
	ctx.f13.f64 = double(temp.f32);
	// fadds f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 + ctx.f12.f64));
	// lfs f12,396(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 396);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fadds f12,f13,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 + ctx.f12.f64));
	// lfs f13,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	ctx.f13.f64 = double(temp.f32);
	// fadds f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// fsubs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f13,0(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + 0, temp.u32);
	// stfs f0,0(r29)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + 0, temp.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820B40A0"))) PPC_WEAK_FUNC(sub_820B40A0);
PPC_FUNC_IMPL(__imp__sub_820B40A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lfs f1,484(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B40B0"))) PPC_WEAK_FUNC(sub_820B40B0);
PPC_FUNC_IMPL(__imp__sub_820B40B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lfs f1,488(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 488);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B40C0"))) PPC_WEAK_FUNC(sub_820B40C0);
PPC_FUNC_IMPL(__imp__sub_820B40C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-908(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -908);
	// lfs f0,64(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 64);
	f0.f64 = double(temp.f32);
	// fadds f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 + f0.f64));
	// stfs f0,64(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 64, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stfs f1,488(r11)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r11.u32 + 488, temp.u32);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// b 0x830e0750
	// ERROR 830E0750
	return;
}

__attribute__((alias("__imp__sub_820B40E8"))) PPC_WEAK_FUNC(sub_820B40E8);
PPC_FUNC_IMPL(__imp__sub_820B40E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r9,-1
	ctx.r9.s64 = -1;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r8,4736(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4736, ctx.r8.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r9,4740(r11)
	PPC_STORE_U32(r11.u32 + 4740, ctx.r9.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1700(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1700, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1704(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1704, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B4120"))) PPC_WEAK_FUNC(sub_820B4120);
PPC_FUNC_IMPL(__imp__sub_820B4120) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r10,4736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4736);
	// andc r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 & ~ctx.r3.u64;
	// stw r10,4736(r11)
	PPC_STORE_U32(r11.u32 + 4736, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B4138"))) PPC_WEAK_FUNC(sub_820B4138);
PPC_FUNC_IMPL(__imp__sub_820B4138) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r10,4736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4736);
	// or r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 | ctx.r10.u64;
	// stw r10,4736(r11)
	PPC_STORE_U32(r11.u32 + 4736, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B4150"))) PPC_WEAK_FUNC(sub_820B4150);
PPC_FUNC_IMPL(__imp__sub_820B4150) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b4200
	if (!cr6.getEQ()) goto loc_820B4200;
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lwz r10,-1700(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -1700);
	// cmpwi cr6,r10,5
	cr6.compare<int32_t>(ctx.r10.s32, 5, xer);
	// bge cr6,0x820b4254
	if (!cr6.getLT()) goto loc_820B4254;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r6,100
	ctx.r6.s64 = 100;
	// li r4,101
	ctx.r4.s64 = 101;
	// lwz r11,-1704(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1704);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lis r10,26214
	ctx.r10.s64 = 1717960704;
	// ori r9,r10,26215
	ctx.r9.u64 = ctx.r10.u64 | 26215;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// addi r31,r10,-2944
	r31.s64 = ctx.r10.s64 + -2944;
	// mulhw r10,r11,r9
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(ctx.r9.s32)) >> 32;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r30,r10,r11
	r30.s64 = r11.s64 - ctx.r10.s64;
	// mulli r29,r30,202
	r29.s64 = r30.s64 * 202;
	// add r3,r29,r31
	ctx.r3.u64 = r29.u64 + r31.u64;
	// bl 0x823ee6c8
	sub_823EE6C8(ctx, base);
	// lwz r10,-1700(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -1700);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r11,r11,-3000
	r11.s64 = r11.s64 + -3000;
	// addi r8,r31,200
	ctx.r8.s64 = r31.s64 + 200;
	// rlwinm r7,r30,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// sthx r9,r29,r8
	PPC_STORE_U16(r29.u32 + ctx.r8.u32, ctx.r9.u16);
	// stwx r27,r7,r11
	PPC_STORE_U32(ctx.r7.u32 + r11.u32, r27.u32);
	// stw r10,-1700(r28)
	PPC_STORE_U32(r28.u32 + -1700, ctx.r10.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_820B4200:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r30,r11,-2944
	r30.s64 = r11.s64 + -2944;
	// mulli r29,r31,202
	r29.s64 = r31.s64 * 202;
	// li r6,100
	ctx.r6.s64 = 100;
	// li r4,101
	ctx.r4.s64 = 101;
	// add r3,r29,r30
	ctx.r3.u64 = r29.u64 + r30.u64;
	// bl 0x823ee6c8
	sub_823EE6C8(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// rlwinm r8,r31,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-3000
	r11.s64 = r11.s64 + -3000;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r9,r30,200
	ctx.r9.s64 = r30.s64 + 200;
	// li r7,120
	ctx.r7.s64 = 120;
	// stwx r27,r8,r11
	PPC_STORE_U32(ctx.r8.u32 + r11.u32, r27.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// sthx r10,r29,r9
	PPC_STORE_U16(r29.u32 + ctx.r9.u32, ctx.r10.u16);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r7,4740(r11)
	PPC_STORE_U32(r11.u32 + 4740, ctx.r7.u32);
loc_820B4254:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820B4260"))) PPC_WEAK_FUNC(sub_820B4260);
PPC_FUNC_IMPL(__imp__sub_820B4260) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31991
	r11.s64 = -2096562176;
	// lwz r4,-31544(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + -31544);
	// b 0x820b4150
	sub_820B4150(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820B4270"))) PPC_WEAK_FUNC(sub_820B4270);
PPC_FUNC_IMPL(__imp__sub_820B4270) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r10,4736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4736);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820b4380
	if (!cr6.getEQ()) goto loc_820B4380;
	// lwz r10,8260(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8260);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820b4380
	if (!cr6.getEQ()) goto loc_820B4380;
	// lwz r10,4740(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4740);
	// li r29,30
	r29.s64 = 30;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x820b433c
	if (cr6.getLT()) goto loc_820B433C;
	// rotlwi r9,r10,0
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r10,-6384(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6384);
	// subf r10,r10,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
	// stw r10,4740(r11)
	PPC_STORE_U32(r11.u32 + 4740, ctx.r10.u32);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b433c
	if (!cr6.getEQ()) goto loc_820B433C;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r10,4740(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4740);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x820b4324
	if (!cr6.getLT()) goto loc_820B4324;
	// lis r10,26214
	ctx.r10.s64 = 1717960704;
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// ori r8,r10,26215
	ctx.r8.u64 = ctx.r10.u64 | 26215;
	// lwz r10,-1700(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1700);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lwz r11,-1704(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -1704);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r10,-1700(r31)
	PPC_STORE_U32(r31.u32 + -1700, ctx.r10.u32);
	// mulhw r10,r11,r8
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(ctx.r8.s32)) >> 32;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// rlwinm r8,r10,1,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r8,r10,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,-1704(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1704, r11.u32);
	// b 0x820b433c
	goto loc_820B433C;
loc_820B4324:
	// lwz r9,-1700(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + -1700);
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// ble cr6,0x820b433c
	if (!cr6.getGT()) goto loc_820B433C;
	// cmpwi cr6,r10,30
	cr6.compare<int32_t>(ctx.r10.s32, 30, xer);
	// ble cr6,0x820b433c
	if (!cr6.getGT()) goto loc_820B433C;
	// stw r29,4740(r11)
	PPC_STORE_U32(r11.u32 + 4740, r29.u32);
loc_820B433C:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b4380
	if (!cr6.getEQ()) goto loc_820B4380;
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,4740(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4740);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x820b4380
	if (!cr6.getLT()) goto loc_820B4380;
	// lwz r11,-1700(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1700);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820b4380
	if (!cr6.getGT()) goto loc_820B4380;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// ble cr6,0x820b4378
	if (!cr6.getGT()) goto loc_820B4378;
	// stw r29,4740(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4740, r29.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820B4378:
	// li r11,120
	r11.s64 = 120;
	// stw r11,4740(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4740, r11.u32);
loc_820B4380:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820B4388"))) PPC_WEAK_FUNC(sub_820B4388);
PPC_FUNC_IMPL(__imp__sub_820B4388) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,4736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4736);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820b45c8
	if (!cr6.getEQ()) goto loc_820B45C8;
	// lwz r10,4740(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4740);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x820b45c8
	if (cr6.getLT()) goto loc_820B45C8;
	// lwz r11,8260(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8260);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820b45c8
	if (!cr6.getEQ()) goto loc_820B45C8;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// addi r28,r11,-2944
	r28.s64 = r11.s64 + -2944;
	// bne cr6,0x820b43f4
	if (!cr6.getEQ()) goto loc_820B43F4;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r27,r11,-1704
	r27.s64 = r11.s64 + -1704;
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// mulli r11,r3,202
	r11.s64 = ctx.r3.s64 * 202;
	// lhzx r11,r11,r28
	r11.u64 = PPC_LOAD_U16(r11.u32 + r28.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b45c8
	if (cr6.getEQ()) goto loc_820B45C8;
	// b 0x820b4414
	goto loc_820B4414;
loc_820B43F4:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,4740(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4740);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820b45c8
	if (cr6.getLT()) goto loc_820B45C8;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r27,r11,-1704
	r27.s64 = r11.s64 + -1704;
	// stw r3,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r3.u32);
loc_820B4414:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r29,r11,-3000
	r29.s64 = r11.s64 + -3000;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r30,0
	r30.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwzx r6,r10,r29
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + r29.u32);
	// lfs f1,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	ctx.f1.f64 = double(temp.f32);
	// mulli r11,r3,202
	r11.s64 = ctx.r3.s64 * 202;
	// stw r30,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r30.u32);
	// stw r30,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r30.u32);
	// add r5,r11,r28
	ctx.r5.u64 = r11.u64 + r28.u64;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x820b4470
	if (cr6.getEQ()) goto loc_820B4470;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// mr r11,r30
	r11.u64 = r30.u64;
	// bne cr6,0x820b4474
	if (!cr6.getEQ()) goto loc_820B4474;
loc_820B4470:
	// li r11,1
	r11.s64 = 1;
loc_820B4474:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b44a0
	if (!cr6.getEQ()) goto loc_820B44A0;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b44a0
	if (cr6.getEQ()) goto loc_820B44A0;
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,10
	r11.s64 = r11.s64 + 10;
	// b 0x820b44ac
	goto loc_820B44AC;
loc_820B44A0:
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,30
	r11.s64 = r11.s64 + 30;
loc_820B44AC:
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x820b44cc
	if (cr6.getEQ()) goto loc_820B44CC;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// mr r11,r30
	r11.u64 = r30.u64;
	// bne cr6,0x820b44d0
	if (!cr6.getEQ()) goto loc_820B44D0;
loc_820B44CC:
	// li r11,1
	r11.s64 = 1;
loc_820B44D0:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b4534
	if (cr6.getEQ()) goto loc_820B4534;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// bl 0x820a55e0
	sub_820A55E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b4518
	if (!cr6.getEQ()) goto loc_820B4518;
	// bl 0x820df8d8
	sub_820DF8D8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b4518
	if (!cr6.getEQ()) goto loc_820B4518;
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r31,r3
	r31.s64 = ctx.r3.s16;
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r11,r11,-18
	r11.s64 = r11.s64 + -18;
	// b 0x820b4568
	goto loc_820B4568;
loc_820B4518:
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r31,r3
	r31.s64 = ctx.r3.s16;
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r11,r11,-40
	r11.s64 = r11.s64 + -40;
	// b 0x820b4568
	goto loc_820B4568;
loc_820B4534:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b4554
	if (cr6.getEQ()) goto loc_820B4554;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// li r31,8
	r31.s64 = 8;
	// blt cr6,0x820b4558
	if (cr6.getLT()) goto loc_820B4558;
loc_820B4554:
	// mr r31,r30
	r31.u64 = r30.u64;
loc_820B4558:
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
loc_820B4568:
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r31,r3
	r31.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// li r9,-1
	ctx.r9.s64 = -1;
	// li r8,-1
	ctx.r8.s64 = -1;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r30.u32);
	// mulli r11,r11,202
	r11.s64 = r11.s64 * 202;
	// stw r30,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r30.u32);
	// stw r9,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r9.u32);
	// lwzx r6,r10,r29
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + r29.u32);
	// lis r9,25700
	ctx.r9.s64 = 1684275200;
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// li r7,0
	ctx.r7.s64 = 0;
	// ori r9,r9,25855
	ctx.r9.u64 = ctx.r9.u64 | 25855;
	// add r5,r11,r28
	ctx.r5.u64 = r11.u64 + r28.u64;
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8213e398
	sub_8213E398(ctx, base);
loc_820B45C8:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820B45D0"))) PPC_WEAK_FUNC(sub_820B45D0);
PPC_FUNC_IMPL(__imp__sub_820B45D0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// li r11,-1
	r11.s64 = -1;
	// stw r11,16808(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16808, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1692(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1692, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1696(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1696, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1688(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1688, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B4600"))) PPC_WEAK_FUNC(sub_820B4600);
PPC_FUNC_IMPL(__imp__sub_820B4600) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1688(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1688);
	// andc r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 & ~ctx.r3.u64;
	// stw r10,-1688(r11)
	PPC_STORE_U32(r11.u32 + -1688, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B4618"))) PPC_WEAK_FUNC(sub_820B4618);
PPC_FUNC_IMPL(__imp__sub_820B4618) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1688(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1688);
	// or r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 | ctx.r3.u64;
	// stw r10,-1688(r11)
	PPC_STORE_U32(r11.u32 + -1688, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B4630"))) PPC_WEAK_FUNC(sub_820B4630);
PPC_FUNC_IMPL(__imp__sub_820B4630) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lwz r10,-1692(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + -1692);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bge cr6,0x820b46a0
	if (!cr6.getLT()) goto loc_820B46A0;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r6,150
	ctx.r6.s64 = 150;
	// li r4,151
	ctx.r4.s64 = 151;
	// lwz r11,-1696(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1696);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// addi r31,r10,-3648
	r31.s64 = ctx.r10.s64 + -3648;
	// srawi r10,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r10.s64 = r11.s32 >> 1;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// mulli r30,r11,302
	r30.s64 = r11.s64 * 302;
	// add r3,r30,r31
	ctx.r3.u64 = r30.u64 + r31.u64;
	// bl 0x823ee6c8
	sub_823EE6C8(ctx, base);
	// lwz r11,-1692(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1692);
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,-1692(r29)
	PPC_STORE_U32(r29.u32 + -1692, r11.u32);
	// addi r11,r31,300
	r11.s64 = r31.s64 + 300;
	// sthx r10,r30,r11
	PPC_STORE_U16(r30.u32 + r11.u32, ctx.r10.u16);
loc_820B46A0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820B46A8"))) PPC_WEAK_FUNC(sub_820B46A8);
PPC_FUNC_IMPL(__imp__sub_820B46A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1688(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1688);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b4748
	if (!cr6.getEQ()) goto loc_820B4748;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,8260(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8260);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820b4748
	if (!cr6.getEQ()) goto loc_820B4748;
	// lis r6,-32190
	ctx.r6.s64 = -2109603840;
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// lwz r11,16808(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16808);
	// lwz r9,-1692(r8)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + -1692);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820b472c
	if (cr6.getLT()) goto loc_820B472C;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r10,-6384(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6384);
	// subf r7,r10,r11
	ctx.r7.s64 = r11.s64 - ctx.r10.s64;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// stw r7,16808(r6)
	PPC_STORE_U32(ctx.r6.u32 + 16808, ctx.r7.u32);
	// bge cr6,0x820b474c
	if (!cr6.getLT()) goto loc_820B474C;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// lwz r11,-1696(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1696);
	// stw r9,-1692(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1692, ctx.r9.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// srawi r8,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r8.s64 = r11.s32 >> 1;
	// addze r8,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r8.s64 = temp.s64;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// stw r11,-1696(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1696, r11.u32);
loc_820B4724:
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// bge cr6,0x820b4748
	if (!cr6.getLT()) goto loc_820B4748;
loc_820B472C:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x820b4748
	if (!cr6.getGT()) goto loc_820B4748;
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// li r11,60
	r11.s64 = 60;
	// bgt cr6,0x820b4744
	if (cr6.getGT()) goto loc_820B4744;
	// li r11,240
	r11.s64 = 240;
loc_820B4744:
	// stw r11,16808(r6)
	PPC_STORE_U32(ctx.r6.u32 + 16808, r11.u32);
loc_820B4748:
	// blr 
	return;
loc_820B474C:
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// ble cr6,0x820b4724
	if (!cr6.getGT()) goto loc_820B4724;
	// cmpwi cr6,r7,60
	cr6.compare<int32_t>(ctx.r7.s32, 60, xer);
	// ble cr6,0x820b4724
	if (!cr6.getGT()) goto loc_820B4724;
	// li r11,60
	r11.s64 = 60;
	// stw r11,16808(r6)
	PPC_STORE_U32(ctx.r6.u32 + 16808, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B4768"))) PPC_WEAK_FUNC(sub_820B4768);
PPC_FUNC_IMPL(__imp__sub_820B4768) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-400(r1)
	ea = -400 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lwz r11,-1688(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1688);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// bne cr6,0x820b4904
	if (!cr6.getEQ()) goto loc_820B4904;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// lwz r10,16808(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16808);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x820b4904
	if (cr6.getLT()) goto loc_820B4904;
	// lis r26,-32014
	r26.s64 = -2098069504;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// addi r27,r10,-3648
	r27.s64 = ctx.r10.s64 + -3648;
	// lwz r10,-1696(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + -1696);
	// mulli r10,r10,302
	ctx.r10.s64 = ctx.r10.s64 * 302;
	// add r5,r10,r27
	ctx.r5.u64 = ctx.r10.u64 + r27.u64;
	// lhz r10,0(r5)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b4904
	if (cr6.getEQ()) goto loc_820B4904;
	// lwz r10,8260(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8260);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820b4904
	if (!cr6.getEQ()) goto loc_820B4904;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r31,0
	r31.s64 = 0;
	// lis r28,-31994
	r28.s64 = -2096758784;
	// lis r29,-31991
	r29.s64 = -2096562176;
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lfs f1,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	ctx.f1.f64 = double(temp.f32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r31.u32);
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// lwz r6,-31556(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31556);
	// stw r31,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r31.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1864(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1864);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b4850
	if (cr6.getEQ()) goto loc_820B4850;
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,70
	r11.s64 = r11.s64 + 70;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lis r11,11915
	r11.s64 = 780861440;
	// ori r10,r11,41705
	ctx.r10.u64 = r11.u64 | 41705;
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// mulhw r11,r11,r10
	r11.s64 = (int64_t(r11.s32) * int64_t(ctx.r10.s32)) >> 32;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mulli r11,r11,11
	r11.s64 = r11.s64 * 11;
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// b 0x820b487c
	goto loc_820B487C;
loc_820B4850:
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// addi r30,r11,16816
	r30.s64 = r11.s64 + 16816;
	// lwz r11,-4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -4);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
loc_820B487C:
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// add r30,r11,r10
	r30.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x8210e290
	sub_8210E290(ctx, base);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// extsh r24,r3
	r24.s64 = ctx.r3.s16;
	// addi r25,r11,-2
	r25.s64 = r11.s64 + -2;
	// bl 0x8210e400
	sub_8210E400(ctx, base);
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// li r7,100
	ctx.r7.s64 = 100;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r30,r3
	r30.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r10,-1
	ctx.r10.s64 = -1;
	// lwz r11,-1696(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1696);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// li r8,-1
	ctx.r8.s64 = -1;
	// lwz r7,15124(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15124);
	// mulli r11,r11,302
	r11.s64 = r11.s64 * 302;
	// lwz r6,-31556(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31556);
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// add r5,r11,r27
	ctx.r5.u64 = r11.u64 + r27.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// addi r1,r1,400
	ctx.r1.s64 = ctx.r1.s64 + 400;
	// b 0x823ed174
	return;
loc_820B4904:
	// lis r10,-32015
	ctx.r10.s64 = -2098135040;
	// lbz r10,-13405(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + -13405);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b4d40
	if (cr6.getEQ()) goto loc_820B4D40;
	// lfs f0,1472(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1472);
	f0.f64 = double(temp.f32);
	// lfs f2,1480(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1480);
	ctx.f2.f64 = double(temp.f32);
	// fneg f1,f0
	ctx.f1.u64 = f0.u64 ^ 0x8000000000000000;
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r7,r8,15292
	ctx.r7.s64 = ctx.r8.s64 + 15292;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r3,-32256
	ctx.r3.s64 = -2113929216;
	// addi r24,r1,120
	r24.s64 = ctx.r1.s64 + 120;
	// addi r11,r11,15288
	r11.s64 = r11.s64 + 15288;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,14308(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 14308);
	f0.f64 = double(temp.f32);
	// li r31,0
	r31.s64 = 0;
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// lhz r3,15284(r3)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r3.u32 + 15284);
	// addi r30,r1,130
	r30.s64 = ctx.r1.s64 + 130;
	// addi r9,r10,15280
	ctx.r9.s64 = ctx.r10.s64 + 15280;
	// lbz r23,1(r11)
	r23.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// addi r10,r1,131
	ctx.r10.s64 = ctx.r1.s64 + 131;
	// addi r28,r1,136
	r28.s64 = ctx.r1.s64 + 136;
	// sth r3,128(r1)
	PPC_STORE_U16(ctx.r1.u32 + 128, ctx.r3.u16);
	// addi r8,r1,137
	ctx.r8.s64 = ctx.r1.s64 + 137;
	// stb r31,0(r30)
	PPC_STORE_U8(r30.u32 + 0, r31.u8);
	// lbz r30,0(r9)
	r30.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// addi r27,r1,142
	r27.s64 = ctx.r1.s64 + 142;
	// addi r5,r6,15276
	ctx.r5.s64 = ctx.r6.s64 + 15276;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r24
	PPC_STORE_U32(r24.u32, f0.u32);
	// lbz r24,0(r11)
	r24.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r6,r1,143
	ctx.r6.s64 = ctx.r1.s64 + 143;
	// lbz r11,2(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// addi r26,r1,148
	r26.s64 = ctx.r1.s64 + 148;
	// addi r4,r1,149
	ctx.r4.s64 = ctx.r1.s64 + 149;
	// addi r25,r1,154
	r25.s64 = ctx.r1.s64 + 154;
	// stb r24,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r24.u8);
	// stb r23,1(r10)
	PPC_STORE_U8(ctx.r10.u32 + 1, r23.u8);
	// stb r11,2(r10)
	PPC_STORE_U8(ctx.r10.u32 + 2, r11.u8);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lbz r24,1(r9)
	r24.u64 = PPC_LOAD_U8(ctx.r9.u32 + 1);
	// lbz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r7.u32 + 0);
	// lhz r11,15272(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 15272);
	// sth r11,134(r1)
	PPC_STORE_U16(ctx.r1.u32 + 134, r11.u16);
	// lbz r11,2(r9)
	r11.u64 = PPC_LOAD_U8(ctx.r9.u32 + 2);
	// stb r31,0(r28)
	PPC_STORE_U8(r28.u32 + 0, r31.u8);
	// stb r30,0(r8)
	PPC_STORE_U8(ctx.r8.u32 + 0, r30.u8);
	// stb r24,1(r8)
	PPC_STORE_U8(ctx.r8.u32 + 1, r24.u8);
	// lbz r9,1(r7)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r7.u32 + 1);
	// stb r11,2(r8)
	PPC_STORE_U8(ctx.r8.u32 + 2, r11.u8);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lhz r11,15268(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 15268);
	// sth r11,140(r1)
	PPC_STORE_U16(ctx.r1.u32 + 140, r11.u16);
	// lbz r11,2(r7)
	r11.u64 = PPC_LOAD_U8(ctx.r7.u32 + 2);
	// stb r31,0(r27)
	PPC_STORE_U8(r27.u32 + 0, r31.u8);
	// stb r10,0(r6)
	PPC_STORE_U8(ctx.r6.u32 + 0, ctx.r10.u8);
	// stb r9,1(r6)
	PPC_STORE_U8(ctx.r6.u32 + 1, ctx.r9.u8);
	// lbz r10,0(r5)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r5.u32 + 0);
	// stb r11,2(r6)
	PPC_STORE_U8(ctx.r6.u32 + 2, r11.u8);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lbz r9,1(r5)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r5.u32 + 1);
	// lhz r11,15264(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 15264);
	// sth r11,146(r1)
	PPC_STORE_U16(ctx.r1.u32 + 146, r11.u16);
	// lbz r11,2(r5)
	r11.u64 = PPC_LOAD_U8(ctx.r5.u32 + 2);
	// stb r31,0(r26)
	PPC_STORE_U8(r26.u32 + 0, r31.u8);
	// stb r10,0(r4)
	PPC_STORE_U8(ctx.r4.u32 + 0, ctx.r10.u8);
	// stb r9,1(r4)
	PPC_STORE_U8(ctx.r4.u32 + 1, ctx.r9.u8);
	// stb r11,2(r4)
	PPC_STORE_U8(ctx.r4.u32 + 2, r11.u8);
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// sth r3,152(r1)
	PPC_STORE_U16(ctx.r1.u32 + 152, ctx.r3.u16);
	// stb r31,0(r25)
	PPC_STORE_U8(r25.u32 + 0, r31.u8);
	// lwz r11,1456(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// lbz r3,3(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// bl 0x821134b0
	sub_821134B0(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r11,15252
	ctx.r5.s64 = r11.s64 + 15252;
	// li r4,16
	ctx.r4.s64 = 16;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r30,-32123
	r30.s64 = -2105212928;
	// addi r5,r11,15236
	ctx.r5.s64 = r11.s64 + 15236;
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// li r4,16
	ctx.r4.s64 = 16;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// lfs f0,32576(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 32576);
	f0.f64 = double(temp.f32);
	// lfs f13,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfd f1,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f1.u64);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,32576(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 32576);
	f0.f64 = double(temp.f32);
	// li r4,16
	ctx.r4.s64 = 16;
	// addi r5,r11,15220
	ctx.r5.s64 = r11.s64 + 15220;
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// lfs f13,1464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1464);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfd f1,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f1.u64);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,32576(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 32576);
	f0.f64 = double(temp.f32);
	// li r4,16
	ctx.r4.s64 = 16;
	// addi r5,r11,15204
	ctx.r5.s64 = r11.s64 + 15204;
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// lfs f13,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfd f1,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f1.u64);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lwz r7,120(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lis r10,-18933
	ctx.r10.s64 = -1240793088;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r11,r7,22
	r11.s64 = ctx.r7.s64 + 22;
	// ori r8,r10,24759
	ctx.r8.u64 = ctx.r10.u64 | 24759;
	// addi r5,r9,15188
	ctx.r5.s64 = ctx.r9.s64 + 15188;
	// mulhw r9,r11,r8
	ctx.r9.s64 = (int64_t(r11.s32) * int64_t(ctx.r8.s32)) >> 32;
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// li r4,16
	ctx.r4.s64 = 16;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// rlwinm r9,r11,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// addi r11,r11,10
	r11.s64 = r11.s64 + 10;
	// addi r30,r11,1
	r30.s64 = r11.s64 + 1;
	// bl 0x8210e290
	sub_8210E290(ctx, base);
	// lwz r29,112(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e400
	sub_8210E400(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// li r7,100
	ctx.r7.s64 = 100;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,18
	r11.s64 = r11.s64 + 18;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r27,-1
	r27.s64 = -1;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// lis r29,-31994
	r29.s64 = -2096758784;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// lis r30,-31991
	r30.s64 = -2096562176;
	// li r28,-1
	r28.s64 = -1;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// addi r5,r1,192
	ctx.r5.s64 = ctx.r1.s64 + 192;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,87
	r11.s64 = r11.s64 + 87;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,18
	r11.s64 = r11.s64 + 18;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r5,r1,256
	ctx.r5.s64 = ctx.r1.s64 + 256;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,141
	r11.s64 = r11.s64 + 141;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,18
	r11.s64 = r11.s64 + 18;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,195
	r11.s64 = r11.s64 + 195;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,18
	r11.s64 = r11.s64 + 18;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r5,r1,224
	ctx.r5.s64 = ctx.r1.s64 + 224;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,249
	r11.s64 = r11.s64 + 249;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r11,r11,18
	r11.s64 = r11.s64 + 18;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r26,r3
	r26.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r5,r1,288
	ctx.r5.s64 = ctx.r1.s64 + 288;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820B4D40:
	// addi r1,r1,400
	ctx.r1.s64 = ctx.r1.s64 + 400;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_820B4D48"))) PPC_WEAK_FUNC(sub_820B4D48);
PPC_FUNC_IMPL(__imp__sub_820B4D48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed53c
	// stwu r1,-320(r1)
	ea = -320 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// bl 0x820c9b90
	sub_820C9B90(ctx, base);
	// lwz r23,8(r21)
	r23.u64 = PPC_LOAD_U32(r21.u32 + 8);
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x820b5730
	if (cr6.getEQ()) goto loc_820B5730;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820ca060
	sub_820CA060(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b4d90
	if (!cr6.getEQ()) goto loc_820B4D90;
	// lhz r11,18(r23)
	r11.u64 = PPC_LOAD_U16(r23.u32 + 18);
	// andi. r11,r11,63487
	r11.u64 = r11.u64 & 63487;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// sth r11,18(r23)
	PPC_STORE_U16(r23.u32 + 18, r11.u16);
loc_820B4D90:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// rlwinm r30,r24,2,0,29
	r30.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r31,r11,-1384
	r31.s64 = r11.s64 + -1384;
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r10,476(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b4ebc
	if (cr6.getEQ()) goto loc_820B4EBC;
	// bl 0x82139320
	sub_82139320(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b4dc8
	if (cr6.getEQ()) goto loc_820B4DC8;
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r10,128(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 128);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820b4ebc
	if (!cr6.getEQ()) goto loc_820B4EBC;
loc_820B4DC8:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// stw r10,432(r11)
	PPC_STORE_U32(r11.u32 + 432, ctx.r10.u32);
	// bl 0x8211e840
	sub_8211E840(ctx, base);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// stw r10,432(r11)
	PPC_STORE_U32(r11.u32 + 432, ctx.r10.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lfs f0,12(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,1460(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1460, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lfs f0,16(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,1464(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1464, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lfs f0,20(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,1468(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1468, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r10,24(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// stw r10,1456(r11)
	PPC_STORE_U32(r11.u32 + 1456, ctx.r10.u32);
	// lwzx r3,r30,r31
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// bl 0x820b1130
	sub_820B1130(ctx, base);
	// lbz r11,1(r21)
	r11.u64 = PPC_LOAD_U8(r21.u32 + 1);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b4ea8
	if (cr6.getEQ()) goto loc_820B4EA8;
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// addi r27,r1,96
	r27.s64 = ctx.r1.s64 + 96;
	// lwz r11,476(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// lwz r29,12(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// bl 0x8210d870
	sub_8210D870(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// bl 0x8210b450
	sub_8210B450(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,144(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,13968(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13968);
	f0.f64 = double(temp.f32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// fmadds f13,f13,f0,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// stfs f13,1500(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 1500, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lfs f12,148(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f13,f13,f0,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// stfs f13,1504(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 1504, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lfs f13,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,152(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f13,f0,f12
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// stfs f0,1508(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1508, temp.u32);
loc_820B4EA8:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,320
	ctx.r1.s64 = ctx.r1.s64 + 320;
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed588
	// b 0x823ed168
	return;
loc_820B4EBC:
	// lwz r11,476(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b5730
	if (cr6.getEQ()) goto loc_820B5730;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x820b5730
	if (!cr6.getGT()) goto loc_820B5730;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// cmpw cr6,r24,r3
	cr6.compare<int32_t>(r24.s32, ctx.r3.s32, xer);
	// beq cr6,0x820b5730
	if (cr6.getEQ()) goto loc_820B5730;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// li r22,0
	r22.s64 = 0;
	// li r28,0
	r28.s64 = 0;
	// lfs f29,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f29.f64 = double(temp.f32);
	// fmr f28,f29
	f28.f64 = f29.f64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r26,0
	r26.s64 = 0;
	// li r25,0
	r25.s64 = 0;
	// li r20,0
	r20.s64 = 0;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x820b4f2c
	if (cr6.getEQ()) goto loc_820B4F2C;
	// lwz r26,8(r29)
	r26.u64 = PPC_LOAD_U32(r29.u32 + 8);
loc_820B4F2C:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x820b4f38
	if (cr6.getEQ()) goto loc_820B4F38;
	// lwz r25,8(r27)
	r25.u64 = PPC_LOAD_U32(r27.u32 + 8);
loc_820B4F38:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820ca060
	sub_820CA060(ctx, base);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lwz r11,-1684(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1684);
	// bne cr6,0x820b4f58
	if (!cr6.getEQ()) goto loc_820B4F58;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,-1684(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1684, r11.u32);
loc_820B4F58:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// blt cr6,0x820b5558
	if (cr6.getLT()) goto loc_820B5558;
	// lwzx r10,r30,r31
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r11,480(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 480);
	// lfs f26,8328(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 8328);
	f26.f64 = double(temp.f32);
	// lfs f25,8332(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 8332);
	f25.f64 = double(temp.f32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f30.f64 = double(temp.f32);
	// beq cr6,0x820b5030
	if (cr6.getEQ()) goto loc_820B5030;
	// lis r27,-32014
	r27.s64 = -2098069504;
	// lis r9,-32190
	ctx.r9.s64 = -2109603840;
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r28,r9,16596
	r28.s64 = ctx.r9.s64 + 16596;
	// lwz r11,-1720(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -1720);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820b4fdc
	if (!cr6.getGT()) goto loc_820B4FDC;
	// lwz r9,4908(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4908);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
loc_820B4FA4:
	// lwz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplw cr6,r9,r7
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r7.u32, xer);
	// bne cr6,0x820b4fb4
	if (!cr6.getEQ()) goto loc_820B4FB4;
	// li r8,1
	ctx.r8.s64 = 1;
loc_820B4FB4:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b4fa4
	if (!cr6.getEQ()) goto loc_820B4FA4;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x820b4fdc
	if (cr6.getEQ()) goto loc_820B4FDC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r22,r9
	r22.u64 = ctx.r9.u64;
	// lfs f31,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f31.f64 = double(temp.f32);
	// b 0x820b5014
	goto loc_820B5014;
loc_820B4FDC:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lfs f31,2692(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2692);
	f31.f64 = double(temp.f32);
	// lwz r10,-1720(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + -1720);
	// divwu r9,r11,r10
	ctx.r9.u32 = r11.u32 / ctx.r10.u32;
	// twllei r10,0
	// mullw r10,r9,r10
	ctx.r10.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r22,r11,r28
	r22.u64 = PPC_LOAD_U32(r11.u32 + r28.u32);
loc_820B5014:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r28,0
	r28.s64 = 0;
	// addi r10,r11,2688
	ctx.r10.s64 = r11.s64 + 2688;
	// lfs f27,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f27.f64 = double(temp.f32);
	// fmr f26,f27
	f26.f64 = f27.f64;
	// fmr f25,f27
	f25.f64 = f27.f64;
	// b 0x820b53fc
	goto loc_820B53FC;
loc_820B5030:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x820b5048
	if (cr6.getEQ()) goto loc_820B5048;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x820b5058
	if (cr6.getEQ()) goto loc_820B5058;
	// li r28,3
	r28.s64 = 3;
	// b 0x820b50f8
	goto loc_820B50F8;
loc_820B5048:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x820b5058
	if (!cr6.getEQ()) goto loc_820B5058;
	// li r28,2
	r28.s64 = 2;
	// b 0x820b50f8
	goto loc_820B50F8;
loc_820B5058:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x820b5080
	if (cr6.getEQ()) goto loc_820B5080;
	// lbz r11,128(r26)
	r11.u64 = PPC_LOAD_U8(r26.u32 + 128);
	// li r4,512
	ctx.r4.s64 = 512;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b5080
	if (!cr6.getEQ()) goto loc_820B5080;
	// li r28,2
	r28.s64 = 2;
	// b 0x820b50f8
	goto loc_820B50F8;
loc_820B5080:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x820b50a8
	if (cr6.getEQ()) goto loc_820B50A8;
	// lbz r11,128(r25)
	r11.u64 = PPC_LOAD_U8(r25.u32 + 128);
	// li r4,512
	ctx.r4.s64 = 512;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b50a8
	if (!cr6.getEQ()) goto loc_820B50A8;
	// li r28,2
	r28.s64 = 2;
	// b 0x820b50f8
	goto loc_820B50F8;
loc_820B50A8:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x820b50d0
	if (cr6.getEQ()) goto loc_820B50D0;
	// lbz r11,128(r26)
	r11.u64 = PPC_LOAD_U8(r26.u32 + 128);
	// li r4,256
	ctx.r4.s64 = 256;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b50d0
	if (cr6.getEQ()) goto loc_820B50D0;
	// li r28,0
	r28.s64 = 0;
	// b 0x820b50f8
	goto loc_820B50F8;
loc_820B50D0:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x820b50f4
	if (cr6.getEQ()) goto loc_820B50F4;
	// lbz r11,128(r25)
	r11.u64 = PPC_LOAD_U8(r25.u32 + 128);
	// li r4,256
	ctx.r4.s64 = 256;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r28,0
	r28.s64 = 0;
	// bne cr6,0x820b50f8
	if (!cr6.getEQ()) goto loc_820B50F8;
loc_820B50F4:
	// li r28,1
	r28.s64 = 1;
loc_820B50F8:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r8,416(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 416);
	// lwz r9,8316(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8316);
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// blt cr6,0x820b5114
	if (cr6.getLT()) goto loc_820B5114;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
loc_820B5114:
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// addi r29,r10,16824
	r29.s64 = ctx.r10.s64 + 16824;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r10,r10,2688
	ctx.r10.s64 = ctx.r10.s64 + 2688;
	// lfs f27,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f27.f64 = double(temp.f32);
	// beq cr6,0x820b5390
	if (cr6.getEQ()) goto loc_820B5390;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// bge cr6,0x820b513c
	if (!cr6.getLT()) goto loc_820B513C;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
loc_820B513C:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x820b5390
	if (cr6.getEQ()) goto loc_820B5390;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,632(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 632);
	f0.f64 = double(temp.f32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f13,15300(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15300);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f11,14044(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14044);
	ctx.f11.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// lfs f12,13964(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13964);
	ctx.f12.f64 = double(temp.f32);
	// blt cr6,0x820b5184
	if (cr6.getLT()) goto loc_820B5184;
	// fcmpu cr6,f0,f11
	cr6.compare(f0.f64, ctx.f11.f64);
	// bge cr6,0x820b51c8
	if (!cr6.getLT()) goto loc_820B51C8;
	// lfs f13,640(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// bge cr6,0x820b51c8
	if (!cr6.getLT()) goto loc_820B51C8;
	// fcmpu cr6,f13,f11
	cr6.compare(ctx.f13.f64, ctx.f11.f64);
	// ble cr6,0x820b51c8
	if (!cr6.getGT()) goto loc_820B51C8;
loc_820B5184:
	// mulli r10,r28,120
	ctx.r10.s64 = r28.s64 * 120;
	// addi r9,r29,80
	ctx.r9.s64 = r29.s64 + 80;
	// lwzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b51c8
	if (cr6.getEQ()) goto loc_820B51C8;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f12,4904(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4904);
	ctx.f12.f64 = double(temp.f32);
	// li r10,4
	ctx.r10.s64 = 4;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// lfs f13,12448(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 12448);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f12,f13
	cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// bge cr6,0x820b5398
	if (!cr6.getLT()) goto loc_820B5398;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f13,14436(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14436);
	ctx.f13.f64 = double(temp.f32);
	// fadds f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// stfs f13,4904(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 4904, temp.u32);
	// b 0x820b5398
	goto loc_820B5398;
loc_820B51C8:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,12892(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12892);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820b51f4
	if (cr6.getGT()) goto loc_820B51F4;
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x820b5234
	if (!cr6.getGT()) goto loc_820B5234;
	// lfs f13,640(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// bge cr6,0x820b5234
	if (!cr6.getLT()) goto loc_820B5234;
	// fcmpu cr6,f13,f11
	cr6.compare(ctx.f13.f64, ctx.f11.f64);
	// ble cr6,0x820b5234
	if (!cr6.getGT()) goto loc_820B5234;
loc_820B51F4:
	// mulli r10,r28,120
	ctx.r10.s64 = r28.s64 * 120;
	// addi r9,r29,60
	ctx.r9.s64 = r29.s64 + 60;
	// lwzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b5234
	if (cr6.getEQ()) goto loc_820B5234;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f12,4904(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4904);
	ctx.f12.f64 = double(temp.f32);
	// li r10,3
	ctx.r10.s64 = 3;
	// lfs f13,15136(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 15136);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f12,f13
	cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// ble cr6,0x820b5398
	if (!cr6.getGT()) goto loc_820B5398;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f13,14436(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14436);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// stfs f13,4904(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 4904, temp.u32);
	// b 0x820b5398
	goto loc_820B5398;
loc_820B5234:
	// lfs f31,600(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 600);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f31,f27
	cr6.compare(f31.f64, f27.f64);
	// bge cr6,0x820b5244
	if (!cr6.getLT()) goto loc_820B5244;
	// fneg f31,f31
	f31.u64 = f31.u64 ^ 0x8000000000000000;
loc_820B5244:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,640(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	f0.f64 = double(temp.f32);
	// lfs f13,3616(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3616);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b52c0
	if (!cr6.getLT()) goto loc_820B52C0;
	// fneg f31,f31
	f31.u64 = f31.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x820b5268
	if (!cr6.getLT()) goto loc_820B5268;
	// fmr f31,f0
	f31.f64 = f0.f64;
loc_820B5268:
	// lwz r11,1552(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1552);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820b5288
	if (!cr6.getEQ()) goto loc_820B5288;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x820ca560
	sub_820CA560(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b52a0
	if (!cr6.getEQ()) goto loc_820B52A0;
loc_820B5288:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lfs f13,640(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15296(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15296);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x820b5348
	if (!cr6.getGT()) goto loc_820B5348;
loc_820B52A0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,1
	ctx.r10.s64 = 1;
	// lfs f0,3060(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f0.f64 = double(temp.f32);
	// fmuls f0,f31,f0
	f0.f64 = double(float(f31.f64 * f0.f64));
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// bge cr6,0x820b5350
	if (!cr6.getLT()) goto loc_820B5350;
	// fmr f0,f29
	f0.f64 = f29.f64;
	// b 0x820b5350
	goto loc_820B5350;
loc_820B52C0:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,14116(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14116);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820b52e4
	if (cr6.getGT()) goto loc_820B52E4;
	// fcmpu cr6,f31,f13
	cr6.compare(f31.f64, ctx.f13.f64);
	// bgt cr6,0x820b52e4
	if (cr6.getGT()) goto loc_820B52E4;
	// li r10,0
	ctx.r10.s64 = 0;
	// fmr f0,f30
	f0.f64 = f30.f64;
	// b 0x820b5350
	goto loc_820B5350;
loc_820B52E4:
	// fcmpu cr6,f0,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x820b52f0
	if (!cr6.getGT()) goto loc_820B52F0;
	// fmr f31,f0
	f31.f64 = f0.f64;
loc_820B52F0:
	// lwz r11,1552(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1552);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820b5310
	if (!cr6.getEQ()) goto loc_820B5310;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x820ca560
	sub_820CA560(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b5328
	if (!cr6.getEQ()) goto loc_820B5328;
loc_820B5310:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lfs f13,640(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14484(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14484);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x820b5348
	if (!cr6.getLT()) goto loc_820B5348;
loc_820B5328:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,1
	ctx.r10.s64 = 1;
	// lfs f0,3060(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f0.f64 = double(temp.f32);
	// fmuls f0,f31,f0
	f0.f64 = double(float(f31.f64 * f0.f64));
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// ble cr6,0x820b5350
	if (!cr6.getGT()) goto loc_820B5350;
	// fmr f0,f30
	f0.f64 = f30.f64;
	// b 0x820b5350
	goto loc_820B5350;
loc_820B5348:
	// fmr f0,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = f31.f64;
	// li r10,2
	ctx.r10.s64 = 2;
loc_820B5350:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f13,4904(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4904);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f27
	cr6.compare(ctx.f13.f64, f27.f64);
	// lfs f13,14436(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14436);
	ctx.f13.f64 = double(temp.f32);
	// ble cr6,0x820b5374
	if (!cr6.getGT()) goto loc_820B5374;
	// lfs f12,4904(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4904);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f13
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// stfs f12,4904(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 4904, temp.u32);
loc_820B5374:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lfs f12,4904(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4904);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f12,f27
	cr6.compare(ctx.f12.f64, f27.f64);
	// bge cr6,0x820b5398
	if (!cr6.getLT()) goto loc_820B5398;
	// fadds f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// stfs f13,4904(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 4904, temp.u32);
	// b 0x820b5398
	goto loc_820B5398;
loc_820B5390:
	// li r10,5
	ctx.r10.s64 = 5;
	// fmr f0,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = f30.f64;
loc_820B5398:
	// rlwinm r11,r28,1,0,30
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r29,4
	ctx.r9.s64 = r29.s64 + 4;
	// add r11,r28,r11
	r11.u64 = r28.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r11,r9
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// lwzx r28,r11,r29
	r28.u64 = PPC_LOAD_U32(r11.u32 + r29.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b53cc
	if (cr6.getEQ()) goto loc_820B53CC;
	// mr r22,r10
	r22.u64 = ctx.r10.u64;
loc_820B53CC:
	// addi r10,r29,8
	ctx.r10.s64 = r29.s64 + 8;
	// addi r9,r29,12
	ctx.r9.s64 = r29.s64 + 12;
	// addi r8,r29,16
	ctx.r8.s64 = r29.s64 + 16;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// lfsx f13,r11,r10
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	ctx.f13.f64 = double(temp.f32);
	// lfsx f29,r11,r9
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	f29.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfsx f28,r11,r8
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	f28.f64 = double(temp.f32);
	// beq cr6,0x820b53fc
	if (cr6.getEQ()) goto loc_820B53FC;
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// bne cr6,0x820b53fc
	if (!cr6.getEQ()) goto loc_820B53FC;
	// lwz r22,0(r28)
	r22.u64 = PPC_LOAD_U32(r28.u32 + 0);
loc_820B53FC:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r10,4908(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4908);
	// cmplw cr6,r22,r10
	cr6.compare<uint32_t>(r22.u32, ctx.r10.u32, xer);
	// beq cr6,0x820b5410
	if (cr6.getEQ()) goto loc_820B5410;
	// li r20,1
	r20.s64 = 1;
loc_820B5410:
	// fcmpu cr6,f29,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f29.f64, f27.f64);
	// blt cr6,0x820b5438
	if (cr6.getLT()) goto loc_820B5438;
	// lwz r10,476(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// lbz r9,38(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 38);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820b5434
	if (cr6.getEQ()) goto loc_820B5434;
	// lfs f0,144(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 144);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// beq cr6,0x820b5438
	if (cr6.getEQ()) goto loc_820B5438;
loc_820B5434:
	// li r20,1
	r20.s64 = 1;
loc_820B5438:
	// fcmpu cr6,f29,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f29.f64, f27.f64);
	// bge cr6,0x820b5450
	if (!cr6.getLT()) goto loc_820B5450;
	// lwz r10,476(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// lbz r10,38(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 38);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820b5458
	if (!cr6.getEQ()) goto loc_820B5458;
loc_820B5450:
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// beq cr6,0x820b54d0
	if (cr6.getEQ()) goto loc_820B54D0;
loc_820B5458:
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// lwz r11,84(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 84);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b54f4
	if (!cr6.getEQ()) goto loc_820B54F4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// li r5,0
	ctx.r5.s64 = 0;
	// fsel f1,f29,f29,f27
	ctx.f1.f64 = f29.f64 >= 0.0 ? f29.f64 : f27.f64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// lfs f30,14220(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f30.f64 = double(temp.f32);
	// fmr f3,f30
	ctx.f3.f64 = f30.f64;
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// fcmpu cr6,f29,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f29.f64, f27.f64);
	// stw r22,4908(r11)
	PPC_STORE_U32(r11.u32 + 4908, r22.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// stfs f31,4912(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 4912, temp.u32);
	// blt cr6,0x820b54b4
	if (cr6.getLT()) goto loc_820B54B4;
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// bl 0x8211b220
	sub_8211B220(ctx, base);
loc_820B54B4:
	// fcmpu cr6,f28,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f28.f64, f27.f64);
	// blt cr6,0x820b54f4
	if (cr6.getLT()) goto loc_820B54F4;
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// fmr f1,f28
	ctx.f1.f64 = f28.f64;
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// b 0x820b54f4
	goto loc_820B54F4;
loc_820B54D0:
	// lfs f0,4912(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4912);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// beq cr6,0x820b54f4
	if (cr6.getEQ()) goto loc_820B54F4;
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8211b240
	sub_8211B240(ctx, base);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// stfs f31,4912(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 4912, temp.u32);
loc_820B54F4:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r11,4908(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4908);
	// cmplw cr6,r22,r11
	cr6.compare<uint32_t>(r22.u32, r11.u32, xer);
	// bne cr6,0x820b554c
	if (!cr6.getEQ()) goto loc_820B554C;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x820b5534
	if (cr6.getEQ()) goto loc_820B5534;
	// lhz r11,18(r23)
	r11.u64 = PPC_LOAD_U16(r23.u32 + 18);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// fmr f1,f26
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f26.f64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// andi. r11,r11,64511
	r11.u64 = r11.u64 & 64511;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// sth r11,18(r23)
	PPC_STORE_U16(r23.u32 + 18, r11.u16);
	// bl 0x82123ff0
	sub_82123FF0(ctx, base);
	// b 0x820b554c
	goto loc_820B554C;
loc_820B5534:
	// lhz r11,18(r23)
	r11.u64 = PPC_LOAD_U16(r23.u32 + 18);
	// stfs f27,340(r23)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r23.u32 + 340, temp.u32);
	// stfs f27,336(r23)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r23.u32 + 336, temp.u32);
	// ori r11,r11,1024
	r11.u64 = r11.u64 | 1024;
	// stfs f26,344(r23)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(r23.u32 + 344, temp.u32);
	// sth r11,18(r23)
	PPC_STORE_U16(r23.u32 + 18, r11.u16);
loc_820B554C:
	// li r11,10
	r11.s64 = 10;
	// stfs f25,348(r23)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f25.f64);
	PPC_STORE_U32(r23.u32 + 348, temp.u32);
	// stb r11,14(r23)
	PPC_STORE_U8(r23.u32 + 14, r11.u8);
loc_820B5558:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lfs f0,1460(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// stfs f0,12(r21)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r21.u32 + 12, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lfs f0,1464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1464);
	f0.f64 = double(temp.f32);
	// stfs f0,16(r21)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r21.u32 + 16, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lfs f0,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r21)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r21.u32 + 20, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r11,1456(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// stw r11,24(r21)
	PPC_STORE_U32(r21.u32 + 24, r11.u32);
	// lwz r3,28(r23)
	ctx.r3.u64 = PPC_LOAD_U32(r23.u32 + 28);
	// bl 0x82119108
	sub_82119108(ctx, base);
	// lfs f0,12(r21)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r21.u32 + 12);
	f0.f64 = double(temp.f32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// lwz r3,28(r23)
	ctx.r3.u64 = PPC_LOAD_U32(r23.u32 + 28);
	// lfs f0,20(r21)
	temp.u32 = PPC_LOAD_U32(r21.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x82119118
	sub_82119118(ctx, base);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r3,28(r23)
	ctx.r3.u64 = PPC_LOAD_U32(r23.u32 + 28);
	// lfs f13,596(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 596);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,14020(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14020);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f13,4904(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4904);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fadds f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f0,13980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x82119178
	sub_82119178(ctx, base);
	// lwz r11,20(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 20);
	// li r10,25
	ctx.r10.s64 = 25;
	// stw r28,44(r23)
	PPC_STORE_U32(r23.u32 + 44, r28.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// stb r10,7(r23)
	PPC_STORE_U8(r23.u32 + 7, ctx.r10.u8);
	// stw r11,20(r23)
	PPC_STORE_U32(r23.u32 + 20, r11.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lbz r11,2357(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 2357);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82124078
	sub_82124078(ctx, base);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// lbz r11,3293(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 3293);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82124078
	sub_82124078(ctx, base);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x8211e840
	sub_8211E840(ctx, base);
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// li r26,0
	r26.s64 = 0;
	// li r28,0
	r28.s64 = 0;
	// li r29,0
	r29.s64 = 0;
	// li r27,8368
	r27.s64 = 8368;
	// lis r25,-32014
	r25.s64 = -2098069504;
loc_820B5648:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r5,r11,8344
	ctx.r5.s64 = r11.s64 + 8344;
	// bl 0x82124468
	sub_82124468(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b5678
	if (cr6.getEQ()) goto loc_820B5678;
	// lwzx r10,r30,r31
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r11,-6372(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -6372);
	// stwx r11,r27,r10
	PPC_STORE_U32(r27.u32 + ctx.r10.u32, r11.u32);
	// b 0x820b56c8
	goto loc_820B56C8;
loc_820B5678:
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r10,-6372(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + -6372);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lwzx r9,r27,r11
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + r11.u32);
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// bge cr6,0x820b56c8
	if (!cr6.getLT()) goto loc_820B56C8;
	// add r10,r28,r11
	ctx.r10.u64 = r28.u64 + r11.u64;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lfs f0,3088(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3088);
	f0.f64 = double(temp.f32);
	// stfs f0,8344(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8344, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// add r10,r28,r11
	ctx.r10.u64 = r28.u64 + r11.u64;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lfs f0,3092(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3092);
	f0.f64 = double(temp.f32);
	// stfs f0,8348(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8348, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// add r10,r28,r11
	ctx.r10.u64 = r28.u64 + r11.u64;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lfs f0,3096(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3096);
	f0.f64 = double(temp.f32);
	// stfs f0,8352(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8352, temp.u32);
loc_820B56C8:
	// addi r27,r27,4
	r27.s64 = r27.s64 + 4;
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r29,r29,12
	r29.s64 = r29.s64 + 12;
	// addi r28,r28,936
	r28.s64 = r28.s64 + 936;
	// cmpwi cr6,r27,8372
	cr6.compare<int32_t>(r27.s32, 8372, xer);
	// ble cr6,0x820b5648
	if (!cr6.getGT()) goto loc_820B5648;
	// lhz r11,18(r23)
	r11.u64 = PPC_LOAD_U16(r23.u32 + 18);
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// ori r11,r11,2048
	r11.u64 = r11.u64 | 2048;
	// sth r11,18(r23)
	PPC_STORE_U16(r23.u32 + 18, r11.u16);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lfs f0,1460(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// stfs f0,12(r21)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r21.u32 + 12, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lfs f0,1464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1464);
	f0.f64 = double(temp.f32);
	// stfs f0,16(r21)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r21.u32 + 16, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lfs f0,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r21)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r21.u32 + 20, temp.u32);
	// lwzx r11,r30,r31
	r11.u64 = PPC_LOAD_U32(r30.u32 + r31.u32);
	// lwz r11,1456(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// stw r11,24(r21)
	PPC_STORE_U32(r21.u32 + 24, r11.u32);
	// addi r1,r1,320
	ctx.r1.s64 = ctx.r1.s64 + 320;
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed588
	// b 0x823ed168
	return;
loc_820B5730:
	// lbz r11,1(r21)
	r11.u64 = PPC_LOAD_U8(r21.u32 + 1);
	// li r3,0
	ctx.r3.s64 = 0;
	// andi. r11,r11,253
	r11.u64 = r11.u64 & 253;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stb r11,1(r21)
	PPC_STORE_U8(r21.u32 + 1, r11.u8);
	// addi r1,r1,320
	ctx.r1.s64 = ctx.r1.s64 + 320;
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed588
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_820B5750"))) PPC_WEAK_FUNC(sub_820B5750);
PPC_FUNC_IMPL(__imp__sub_820B5750) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// b 0x8211f230
	sub_8211F230(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820B5760"))) PPC_WEAK_FUNC(sub_820B5760);
PPC_FUNC_IMPL(__imp__sub_820B5760) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B5768"))) PPC_WEAK_FUNC(sub_820B5768);
PPC_FUNC_IMPL(__imp__sub_820B5768) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x820b57ec
	if (!cr6.getGT()) goto loc_820B57EC;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lis r29,-32014
	r29.s64 = -2098069504;
loc_820B5788:
	// addi r28,r1,80
	r28.s64 = ctx.r1.s64 + 80;
	// bl 0x8210d870
	sub_8210D870(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// bl 0x8210b450
	sub_8210B450(ctx, base);
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// lfs f13,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	ctx.f13.f64 = double(temp.f32);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f0,184(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 184);
	f0.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f0,128(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// lfs f0,188(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 188);
	f0.f64 = double(temp.f32);
	// lfs f13,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f0,132(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// lfs f0,192(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 192);
	f0.f64 = double(temp.f32);
	// lfs f13,136(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r31,r31,64
	r31.s64 = r31.s64 + 64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x820b5788
	if (!cr6.getEQ()) goto loc_820B5788;
loc_820B57EC:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820B57F8"))) PPC_WEAK_FUNC(sub_820B57F8);
PPC_FUNC_IMPL(__imp__sub_820B57F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r3,-3044(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -3044);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B5808"))) PPC_WEAK_FUNC(sub_820B5808);
PPC_FUNC_IMPL(__imp__sub_820B5808) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1840(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1840, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r11,-6376(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6376);
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// stw r11,-2980(r10)
	PPC_STORE_U32(ctx.r10.u32 + -2980, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-3696(r10)
	PPC_STORE_U32(ctx.r10.u32 + -3696, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B5838"))) PPC_WEAK_FUNC(sub_820B5838);
PPC_FUNC_IMPL(__imp__sub_820B5838) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f30.u64);
	// stfd f31,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b5a18
	if (cr6.getEQ()) goto loc_820B5A18;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b5a18
	if (cr6.getEQ()) goto loc_820B5A18;
	// bl 0x820ca520
	sub_820CA520(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b5a18
	if (cr6.getEQ()) goto loc_820B5A18;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// addi r6,r1,84
	ctx.r6.s64 = ctx.r1.s64 + 84;
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// stfs f31,80(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// stfs f31,88(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stfs f31,84(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// bl 0x820b4028
	sub_820B4028(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15304(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15304);
	f0.f64 = double(temp.f32);
	// fmuls f30,f13,f0
	f30.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x8210f8f0
	sub_8210F8F0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r7,2
	ctx.r7.s64 = 2;
	// lfs f5,84(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	ctx.f5.f64 = double(temp.f32);
	// fmr f3,f30
	ctx.f3.f64 = f30.f64;
	// addi r3,r11,1456
	ctx.r3.s64 = r11.s64 + 1456;
	// lfs f4,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f4.f64 = double(temp.f32);
	// lfs f2,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82112a50
	sub_82112A50(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820b5a08
	if (cr6.getLT()) goto loc_820B5A08;
	// li r30,0
	r30.s64 = 0;
	// stfs f31,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// addi r11,r1,100
	r11.s64 = ctx.r1.s64 + 100;
	// stfs f31,128(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// addi r10,r1,132
	ctx.r10.s64 = ctx.r1.s64 + 132;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// stw r30,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r30.u32);
	// stw r30,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r30.u32);
	// stw r30,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r30.u32);
	// bl 0x82110500
	sub_82110500(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b5a18
	if (cr6.getEQ()) goto loc_820B5A18;
	// lfs f0,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f0.f64 = double(temp.f32);
	// lfs f13,128(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// lfs f11,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f11.f64 = double(temp.f32);
	// lfs f10,136(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	ctx.f10.f64 = double(temp.f32);
	// lfs f9,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f9.f64 = double(temp.f32);
	// bne cr6,0x820b5958
	if (!cr6.getEQ()) goto loc_820B5958;
	// fcmpu cr6,f11,f9
	cr6.compare(ctx.f11.f64, ctx.f9.f64);
	// bne cr6,0x820b5958
	if (!cr6.getEQ()) goto loc_820B5958;
	// fcmpu cr6,f12,f10
	cr6.compare(ctx.f12.f64, ctx.f10.f64);
	// beq cr6,0x820b5a18
	if (cr6.getEQ()) goto loc_820B5A18;
loc_820B5958:
	// fsubs f0,f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lis r11,-32250
	r11.s64 = -2113536000;
	// stfs f0,144(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// fsubs f0,f11,f9
	f0.f64 = double(float(ctx.f11.f64 - ctx.f9.f64));
	// stfs f0,148(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// addi r4,r11,11832
	ctx.r4.s64 = r11.s64 + 11832;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// fsubs f0,f12,f10
	f0.f64 = double(float(ctx.f12.f64 - ctx.f10.f64));
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stfs f0,152(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// bl 0x8238c518
	sub_8238C518(ctx, base);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8238c750
	sub_8238C750(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f0.f64 = double(temp.f32);
	// lfs f9,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f9.f64 = double(temp.f32);
	// fmuls f9,f0,f9
	ctx.f9.f64 = double(float(f0.f64 * ctx.f9.f64));
	// lfs f13,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f13.f64 = double(temp.f32);
	// lfs f10,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f10.f64 = double(temp.f32);
	// lfs f12,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * f0.f64));
	// lfs f11,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f11.f64 = double(temp.f32);
	// fmadds f12,f11,f13,f12
	ctx.f12.f64 = double(float(ctx.f11.f64 * ctx.f13.f64 + ctx.f12.f64));
	// fmadds f11,f13,f10,f9
	ctx.f11.f64 = double(float(ctx.f13.f64 * ctx.f10.f64 + ctx.f9.f64));
	// fsubs f12,f12,f11
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fcmpu cr6,f12,f31
	cr6.compare(ctx.f12.f64, f31.f64);
	// bgt cr6,0x820b59cc
	if (cr6.getGT()) goto loc_820B59CC;
	// li r30,1
	r30.s64 = 1;
loc_820B59CC:
	// clrlwi r10,r30,24
	ctx.r10.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b59e4
	if (cr6.getEQ()) goto loc_820B59E4;
	// fneg f13,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = ctx.f13.u64 ^ 0x8000000000000000;
	// stfs f13,120(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_820B59E4:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,3060(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3060);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f0,664(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 664, temp.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f0,672(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 672, temp.u32);
	// b 0x820b5a18
	goto loc_820B5A18;
loc_820B5A08:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f31,664(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 664, temp.u32);
	// stfs f31,668(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 668, temp.u32);
	// stfs f31,672(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 672, temp.u32);
loc_820B5A18:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B5A38"))) PPC_WEAK_FUNC(sub_820B5A38);
PPC_FUNC_IMPL(__imp__sub_820B5A38) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stfd f31,-96(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -96, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lfs f13,596(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 596);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,8(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lfs f0,14020(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14020);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lfs f0,13980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	f0.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bne cr6,0x820b5e94
	if (!cr6.getEQ()) goto loc_820B5E94;
	// bl 0x820a0a50
	sub_820A0A50(ctx, base);
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// li r23,0
	r23.s64 = 0;
	// bl 0x820a0a68
	sub_820A0A68(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// lwz r28,-1364(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// li r29,23
	r29.s64 = 23;
	// li r30,75
	r30.s64 = 75;
	// li r24,0
	r24.s64 = 0;
	// lhz r4,8324(r28)
	ctx.r4.u64 = PPC_LOAD_U16(r28.u32 + 8324);
	// lwz r3,428(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 428);
	// bl 0x820cebd0
	sub_820CEBD0(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// sth r11,8324(r28)
	PPC_STORE_U16(r28.u32 + 8324, r11.u16);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b5c0c
	if (!cr6.getEQ()) goto loc_820B5C0C;
	// bl 0x82345d68
	sub_82345D68(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,1348(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1348);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bgt cr6,0x820b5b20
	if (cr6.getGT()) goto loc_820B5B20;
	// lis r12,-32245
	r12.s64 = -2113208320;
	// addi r12,r12,23288
	r12.s64 = r12.s64 + 23288;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820B5B50;
	case 1:
		goto loc_820B5B68;
	case 2:
		goto loc_820B5B58;
	case 3:
		goto loc_820B5B1C;
	case 4:
		goto loc_820B5B60;
	case 5:
		goto loc_820B5B68;
	case 6:
		goto loc_820B5B68;
	case 7:
		goto loc_820B5B68;
	case 8:
		goto loc_820B5B70;
	default:
		__builtin_unreachable();
	}
	// lwz r16,23376(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23376);
	// lwz r16,23400(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23400);
	// lwz r16,23384(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23384);
	// lwz r16,23324(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23324);
	// lwz r16,23392(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23392);
	// lwz r16,23400(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23400);
	// lwz r16,23400(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23400);
	// lwz r16,23400(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23400);
	// lwz r16,23408(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23408);
loc_820B5B1C:
	// li r29,22
	r29.s64 = 22;
loc_820B5B20:
	// cmplwi cr6,r3,3
	cr6.compare<uint32_t>(ctx.r3.u32, 3, xer);
	// bgt cr6,0x820b5c24
	if (cr6.getGT()) goto loc_820B5C24;
loc_820B5B28:
	// lis r12,-32245
	r12.s64 = -2113208320;
	// addi r12,r12,23360
	r12.s64 = r12.s64 + 23360;
	// rlwinm r0,r3,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_820B5BA8;
	case 1:
		goto loc_820B5C04;
	case 2:
		goto loc_820B5C04;
	case 3:
		goto loc_820B5C04;
	default:
		__builtin_unreachable();
	}
	// lwz r16,23464(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23464);
	// lwz r16,23556(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23556);
	// lwz r16,23556(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23556);
	// lwz r16,23556(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23556);
loc_820B5B50:
	// li r29,23
	r29.s64 = 23;
	// b 0x820b5b20
	goto loc_820B5B20;
loc_820B5B58:
	// li r29,24
	r29.s64 = 24;
	// b 0x820b5b20
	goto loc_820B5B20;
loc_820B5B60:
	// li r29,25
	r29.s64 = 25;
	// b 0x820b5b20
	goto loc_820B5B20;
loc_820B5B68:
	// li r29,5
	r29.s64 = 5;
	// b 0x820b5b20
	goto loc_820B5B20;
loc_820B5B70:
	// cmplwi cr6,r3,3
	cr6.compare<uint32_t>(ctx.r3.u32, 3, xer);
	// bgt cr6,0x820b5c24
	if (cr6.getGT()) goto loc_820B5C24;
	// lis r12,-32245
	r12.s64 = -2113208320;
	// addi r12,r12,23440
	r12.s64 = r12.s64 + 23440;
	// rlwinm r0,r3,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_820B5BA0;
	case 1:
		goto loc_820B5BA0;
	case 2:
		goto loc_820B5BA0;
	case 3:
		goto loc_820B5BA0;
	default:
		__builtin_unreachable();
	}
	// lwz r16,23456(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23456);
	// lwz r16,23456(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23456);
	// lwz r16,23456(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23456);
	// lwz r16,23456(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23456);
loc_820B5BA0:
	// li r29,5
	r29.s64 = 5;
	// b 0x820b5b28
	goto loc_820B5B28;
loc_820B5BA8:
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bgt cr6,0x820b5c24
	if (cr6.getGT()) goto loc_820B5C24;
	// lis r12,-32245
	r12.s64 = -2113208320;
	// addi r12,r12,23496
	r12.s64 = r12.s64 + 23496;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820B5BF4;
	case 1:
		goto loc_820B5C04;
	case 2:
		goto loc_820B5BFC;
	case 3:
		goto loc_820B5BEC;
	case 4:
		goto loc_820B5BF4;
	case 5:
		goto loc_820B5C04;
	case 6:
		goto loc_820B5C04;
	case 7:
		goto loc_820B5C04;
	case 8:
		goto loc_820B5C04;
	default:
		__builtin_unreachable();
	}
	// lwz r16,23540(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23540);
	// lwz r16,23556(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23556);
	// lwz r16,23548(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23548);
	// lwz r16,23532(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23532);
	// lwz r16,23540(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23540);
	// lwz r16,23556(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23556);
	// lwz r16,23556(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23556);
	// lwz r16,23556(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23556);
	// lwz r16,23556(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 23556);
loc_820B5BEC:
	// li r30,74
	r30.s64 = 74;
	// b 0x820b5c24
	goto loc_820B5C24;
loc_820B5BF4:
	// li r30,75
	r30.s64 = 75;
	// b 0x820b5c24
	goto loc_820B5C24;
loc_820B5BFC:
	// li r30,76
	r30.s64 = 76;
	// b 0x820b5c24
	goto loc_820B5C24;
loc_820B5C04:
	// li r30,78
	r30.s64 = 78;
	// b 0x820b5c24
	goto loc_820B5C24;
loc_820B5C0C:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820eb968
	sub_820EB968(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820eba28
	sub_820EBA28(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
loc_820B5C24:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1760(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1760);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x820b5c3c
	if (!cr6.getEQ()) goto loc_820B5C3C;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r22,-3028(r11)
	r22.u64 = PPC_LOAD_U32(r11.u32 + -3028);
loc_820B5C3C:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b5d04
	if (!cr6.getEQ()) goto loc_820B5D04;
	// bl 0x820a0a80
	sub_820A0A80(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0a80
	sub_820A0A80(ctx, base);
	// lis r11,-32141
	r11.s64 = -2106392576;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r27,r11,-28640
	r27.s64 = r11.s64 + -28640;
	// rlwinm r11,r29,3,0,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r11,r27
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + r27.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,2336(r11)
	PPC_STORE_U32(r11.u32 + 2336, ctx.r10.u32);
	// bl 0x820a0a38
	sub_820A0A38(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// addi r4,r11,13952
	ctx.r4.s64 = r11.s64 + 13952;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r4,r11,15312
	ctx.r4.s64 = r11.s64 + 15312;
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r27,r11,r27
	r27.u64 = PPC_LOAD_U32(r11.u32 + r27.u32);
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r24,r25
	r24.u64 = r25.u64;
	// bl 0x8211c6c8
	sub_8211C6C8(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8211c6c8
	sub_8211C6C8(ctx, base);
	// lhz r11,20(r27)
	r11.u64 = PPC_LOAD_U16(r27.u32 + 20);
	// lhz r10,20(r28)
	ctx.r10.u64 = PPC_LOAD_U16(r28.u32 + 20);
	// addi r5,r25,192
	ctx.r5.s64 = r25.s64 + 192;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r26,r11,10
	r26.s64 = r11.s64 + 10;
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,255
	r11.s64 = r11.s64 + 255;
	// ori r11,r11,63
	r11.u64 = r11.u64 | 63;
	// xori r23,r11,63
	r23.u64 = r11.u64 ^ 63;
	// bl 0x8211c960
	sub_8211C960(ctx, base);
	// sth r26,2(r25)
	PPC_STORE_U16(r25.u32 + 2, r26.u16);
	// b 0x820b5d48
	goto loc_820B5D48;
loc_820B5D04:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// rlwinm r10,r29,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r11,-28640
	r11.s64 = r11.s64 + -28640;
	// add r10,r29,r10
	ctx.r10.u64 = r29.u64 + ctx.r10.u64;
	// addi r9,r11,25
	ctx.r9.s64 = r11.s64 + 25;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// lwzx r28,r10,r11
	r28.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820b5d38
	if (cr6.getEQ()) goto loc_820B5D38;
	// li r30,-1
	r30.s64 = -1;
	// li r27,0
	r27.s64 = 0;
	// b 0x820b5d48
	goto loc_820B5D48;
loc_820B5D38:
	// rlwinm r10,r30,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r27,r10,r11
	r27.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
loc_820B5D48:
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82135f20
	sub_82135F20(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r3,476(r11)
	PPC_STORE_U32(r11.u32 + 476, ctx.r3.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,20(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15308(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15308);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r8,0
	ctx.r8.s64 = 0;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r4,476(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// addi r5,r3,12
	ctx.r5.s64 = ctx.r3.s64 + 12;
	// lwz r7,24(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// bl 0x82120b38
	sub_82120B38(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,6
	ctx.r10.s64 = 6;
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r28,8(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,20(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// stw r11,20(r28)
	PPC_STORE_U32(r28.u32 + 20, r11.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// addi r4,r10,12
	ctx.r4.s64 = ctx.r10.s64 + 12;
	// bl 0x82119118
	sub_82119118(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// bl 0x82119178
	sub_82119178(ctx, base);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// stb r30,6(r28)
	PPC_STORE_U8(r28.u32 + 6, r30.u8);
	// stb r29,15(r28)
	PPC_STORE_U8(r28.u32 + 15, r29.u8);
	// bl 0x820c9c50
	sub_820C9C50(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x820b5e78
	if (cr6.getLT()) goto loc_820B5E78;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b5e54
	if (!cr6.getEQ()) goto loc_820B5E54;
	// lis r11,-32164
	r11.s64 = -2107899904;
	// rlwinm r10,r30,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,-3616
	r11.s64 = r11.s64 + -3616;
	// add r29,r23,r25
	r29.u64 = r23.u64 + r25.u64;
	// lwzx r10,r10,r11
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,2340(r11)
	PPC_STORE_U32(r11.u32 + 2340, ctx.r10.u32);
	// bl 0x820a0a38
	sub_820A0A38(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211c6c8
	sub_8211C6C8(ctx, base);
	// b 0x820b5e5c
	goto loc_820B5E5C;
loc_820B5E54:
	// li r29,0
	r29.s64 = 0;
	// li r31,0
	r31.s64 = 0;
loc_820B5E5C:
	// mr r8,r31
	ctx.r8.u64 = r31.u64;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820e2de0
	sub_820E2DE0(ctx, base);
loc_820B5E78:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lfs f1,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82127718
	sub_82127718(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-96(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -96);
	// b 0x823ed170
	return;
loc_820B5E94:
	// lwz r11,28(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b5ee0
	if (!cr6.getEQ()) goto loc_820B5EE0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r10,20(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// lfs f1,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// ori r11,r10,1
	r11.u64 = ctx.r10.u64 | 1;
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// bl 0x82127718
	sub_82127718(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// addi r4,r10,12
	ctx.r4.s64 = ctx.r10.s64 + 12;
	// bl 0x82119118
	sub_82119118(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// bl 0x82119178
	sub_82119178(ctx, base);
loc_820B5EE0:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-96(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -96);
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_820B5EF0"))) PPC_WEAK_FUNC(sub_820B5EF0);
PPC_FUNC_IMPL(__imp__sub_820B5EF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b5f5c
	if (cr6.getEQ()) goto loc_820B5F5C;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b5f5c
	if (!cr6.getEQ()) goto loc_820B5F5C;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// bl 0x8211de90
	sub_8211DE90(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,476(r11)
	PPC_STORE_U32(r11.u32 + 476, ctx.r10.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,1
	r11.s64 = 1;
	// lwz r3,-1364(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r11,-1868(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1868, r11.u32);
	// bl 0x820b1130
	sub_820B1130(ctx, base);
loc_820B5F5C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B5F70"))) PPC_WEAK_FUNC(sub_820B5F70);
PPC_FUNC_IMPL(__imp__sub_820B5F70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -88, f29.u64);
	// stfd f30,-80(r1)
	PPC_STORE_U64(ctx.r1.u32 + -80, f30.u64);
	// stfd f31,-72(r1)
	PPC_STORE_U64(ctx.r1.u32 + -72, f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lfs f29,13960(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 13960);
	f29.f64 = double(temp.f32);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lfs f31,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f31.f64 = double(temp.f32);
	// lis r25,-32014
	r25.s64 = -2098069504;
	// lfs f30,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f30.f64 = double(temp.f32);
	// lis r27,-32014
	r27.s64 = -2098069504;
	// lis r26,-32014
	r26.s64 = -2098069504;
	// li r30,0
	r30.s64 = 0;
loc_820B5FBC:
	// mr r11,r30
	r11.u64 = r30.u64;
	// stw r3,-1760(r26)
	PPC_STORE_U32(r26.u32 + -1760, ctx.r3.u32);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// stw r11,-1756(r27)
	PPC_STORE_U32(r27.u32 + -1756, r11.u32);
	// bne cr6,0x820b5ffc
	if (!cr6.getEQ()) goto loc_820B5FFC;
	// lwz r11,-1724(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -1724);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b5ff4
	if (cr6.getEQ()) goto loc_820B5FF4;
	// bl 0x8213d720
	sub_8213D720(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b5ff4
	if (!cr6.getEQ()) goto loc_820B5FF4;
	// bl 0x8213d710
	sub_8213D710(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b60bc
	if (cr6.getEQ()) goto loc_820B60BC;
loc_820B5FF4:
	// li r3,3
	ctx.r3.s64 = 3;
	// b 0x820b5fbc
	goto loc_820B5FBC;
loc_820B5FFC:
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// beq cr6,0x820b673c
	if (cr6.getEQ()) goto loc_820B673C;
	// cmpwi cr6,r3,9
	cr6.compare<int32_t>(ctx.r3.s32, 9, xer);
	// beq cr6,0x820b616c
	if (cr6.getEQ()) goto loc_820B616C;
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x820b6270
	if (!cr6.getEQ()) goto loc_820B6270;
	// mr r11,r30
	r11.u64 = r30.u64;
	// stw r11,-1752(r29)
	PPC_STORE_U32(r29.u32 + -1752, r11.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1272(r11)
	PPC_STORE_U32(r11.u32 + 1272, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1276(r11)
	PPC_STORE_U32(r11.u32 + 1276, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1280(r11)
	PPC_STORE_U32(r11.u32 + 1280, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r10,r11,1272
	ctx.r10.s64 = r11.s64 + 1272;
	// stfs f30,1284(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1284, temp.u32);
	// lwz r9,1272(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lwz r8,1276(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// lwz r7,1280(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stfs f31,1288(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1288, temp.u32);
	// stfs f29,1292(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 1292, temp.u32);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r10,1296(r11)
	PPC_STORE_U32(r11.u32 + 1296, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,1300(r11)
	PPC_STORE_U32(r11.u32 + 1300, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// stw r10,1304(r11)
	PPC_STORE_U32(r11.u32 + 1304, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,1308(r11)
	PPC_STORE_U32(r11.u32 + 1308, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1280(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stw r10,1312(r11)
	PPC_STORE_U32(r11.u32 + 1312, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r7,1316(r11)
	PPC_STORE_U32(r11.u32 + 1316, ctx.r7.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1284(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// stfs f0,1320(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1320, temp.u32);
	// stfs f31,1324(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1324, temp.u32);
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82117c90
	sub_82117C90(ctx, base);
	// lwz r11,-1740(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1740);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b61bc
	if (!cr6.getEQ()) goto loc_820B61BC;
	// li r3,4
	ctx.r3.s64 = 4;
	// b 0x820b5fbc
	goto loc_820B5FBC;
loc_820B60BC:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f31,-1744(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + -1744, temp.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1272(r11)
	PPC_STORE_U32(r11.u32 + 1272, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1276(r11)
	PPC_STORE_U32(r11.u32 + 1276, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1280(r11)
	PPC_STORE_U32(r11.u32 + 1280, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r10,r11,1272
	ctx.r10.s64 = r11.s64 + 1272;
	// stfs f30,1284(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1284, temp.u32);
	// lwz r9,1272(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lwz r8,1276(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// lwz r7,1280(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stfs f31,1288(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1288, temp.u32);
	// stfs f29,1292(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 1292, temp.u32);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r10,1296(r11)
	PPC_STORE_U32(r11.u32 + 1296, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,1300(r11)
	PPC_STORE_U32(r11.u32 + 1300, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// stw r10,1304(r11)
	PPC_STORE_U32(r11.u32 + 1304, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,1308(r11)
	PPC_STORE_U32(r11.u32 + 1308, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1280(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stw r10,1312(r11)
	PPC_STORE_U32(r11.u32 + 1312, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r7,1316(r11)
	PPC_STORE_U32(r11.u32 + 1316, ctx.r7.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1284(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// stfs f0,1320(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1320, temp.u32);
	// stfs f31,1324(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1324, temp.u32);
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x82117c90
	sub_82117C90(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,180(r11)
	PPC_STORE_U32(r11.u32 + 180, r30.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_820B616C:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f31,-1928(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + -1928, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15136(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15136);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f0,-3816(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -3816, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f31,-2948(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + -2948, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,12924(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12924);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f0,-1932(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1932, temp.u32);
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82117c90
	sub_82117C90(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_820B61BC:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// stfs f31,-1744(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + -1744, temp.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r11,16568(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16568, r11.u32);
	// bl 0x820b2290
	sub_820B2290(ctx, base);
	// bl 0x820b5a38
	sub_820B5A38(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r9,-1364(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// li r5,0
	ctx.r5.s64 = 0;
	// fmr f3,f31
	ctx.fpscr.disableFlushMode();
	ctx.f3.f64 = f31.f64;
	// addi r10,r10,16648
	ctx.r10.s64 = ctx.r10.s64 + 16648;
	// lwz r11,-1712(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1712);
	// addi r8,r10,12
	ctx.r8.s64 = ctx.r10.s64 + 12;
	// lwz r3,476(r9)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + 476);
	// addi r7,r10,4
	ctx.r7.s64 = ctx.r10.s64 + 4;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r9,r10,8
	ctx.r9.s64 = ctx.r10.s64 + 8;
	// lwzx r4,r11,r10
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// lfsx f2,r11,r8
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	ctx.f2.f64 = double(temp.f32);
	// lfsx f30,r11,r9
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	f30.f64 = double(temp.f32);
	// lfsx f1,r11,r7
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// fcmpu cr6,f30,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f30.f64, f31.f64);
	// ble cr6,0x820b623c
	if (!cr6.getGT()) goto loc_820B623C;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
loc_820B623C:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,23
	ctx.r10.s64 = 23;
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// stb r10,7(r11)
	PPC_STORE_U8(r11.u32 + 7, ctx.r10.u8);
	// stb r30,8(r11)
	PPC_STORE_U8(r11.u32 + 8, r30.u8);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,180(r11)
	PPC_STORE_U32(r11.u32 + 180, r30.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_820B6270:
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x820b63f8
	if (!cr6.getEQ()) goto loc_820B63F8;
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,54
	cr6.compare<int32_t>(ctx.r3.s32, 54, xer);
	// bne cr6,0x820b6308
	if (!cr6.getEQ()) goto loc_820B6308;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1272(r11)
	PPC_STORE_U32(r11.u32 + 1272, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1276(r11)
	PPC_STORE_U32(r11.u32 + 1276, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1280(r11)
	PPC_STORE_U32(r11.u32 + 1280, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r10,r11,1272
	ctx.r10.s64 = r11.s64 + 1272;
	// stfs f30,1284(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1284, temp.u32);
	// lwz r9,1272(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lwz r8,1276(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// lwz r7,1280(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stfs f31,1288(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1288, temp.u32);
	// stfs f31,1292(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1292, temp.u32);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r10,1296(r11)
	PPC_STORE_U32(r11.u32 + 1296, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,1300(r11)
	PPC_STORE_U32(r11.u32 + 1300, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// stw r10,1304(r11)
	PPC_STORE_U32(r11.u32 + 1304, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,1308(r11)
	PPC_STORE_U32(r11.u32 + 1308, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1280(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stw r10,1312(r11)
	PPC_STORE_U32(r11.u32 + 1312, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r7,1316(r11)
	PPC_STORE_U32(r11.u32 + 1316, ctx.r7.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1284(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// stfs f0,1320(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1320, temp.u32);
	// stfs f30,1324(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1324, temp.u32);
	// b 0x820b6394
	goto loc_820B6394;
loc_820B6308:
	// lwz r11,-1752(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1752);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b6394
	if (cr6.getEQ()) goto loc_820B6394;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1272(r11)
	PPC_STORE_U32(r11.u32 + 1272, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1276(r11)
	PPC_STORE_U32(r11.u32 + 1276, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1280(r11)
	PPC_STORE_U32(r11.u32 + 1280, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r10,r11,1272
	ctx.r10.s64 = r11.s64 + 1272;
	// stfs f30,1284(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1284, temp.u32);
	// lwz r9,1272(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lwz r8,1276(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// lwz r7,1280(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stfs f31,1288(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1288, temp.u32);
	// stfs f29,1292(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 1292, temp.u32);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r10,1296(r11)
	PPC_STORE_U32(r11.u32 + 1296, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,1300(r11)
	PPC_STORE_U32(r11.u32 + 1300, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// stw r10,1304(r11)
	PPC_STORE_U32(r11.u32 + 1304, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,1308(r11)
	PPC_STORE_U32(r11.u32 + 1308, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1280(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stw r10,1312(r11)
	PPC_STORE_U32(r11.u32 + 1312, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r7,1316(r11)
	PPC_STORE_U32(r11.u32 + 1316, ctx.r7.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1284(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// stfs f0,1320(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1320, temp.u32);
	// stfs f31,1324(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1324, temp.u32);
loc_820B6394:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x820b63ac
	if (!cr6.getGT()) goto loc_820B63AC;
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82117c90
	sub_82117C90(ctx, base);
loc_820B63AC:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,744(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820b63dc
	if (!cr6.getEQ()) goto loc_820B63DC;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r31,r11,-3028
	r31.s64 = r11.s64 + -3028;
	// lwz r4,4(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
loc_820B63DC:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stw r30,-1748(r11)
	PPC_STORE_U32(r11.u32 + -1748, r30.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_820B63F8:
	// cmpwi cr6,r3,5
	cr6.compare<int32_t>(ctx.r3.s32, 5, xer);
	// bne cr6,0x820b6734
	if (!cr6.getEQ()) goto loc_820B6734;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lis r28,-32014
	r28.s64 = -2098069504;
	// stfs f31,-1744(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + -1744, temp.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r11,16568(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16568, r11.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1272(r11)
	PPC_STORE_U32(r11.u32 + 1272, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1276(r11)
	PPC_STORE_U32(r11.u32 + 1276, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1280(r11)
	PPC_STORE_U32(r11.u32 + 1280, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r10,r11,1272
	ctx.r10.s64 = r11.s64 + 1272;
	// stfs f30,1284(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1284, temp.u32);
	// lwz r9,1272(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lwz r8,1276(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// lwz r7,1280(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stfs f31,1288(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1288, temp.u32);
	// stfs f29,1292(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 1292, temp.u32);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r10,1296(r11)
	PPC_STORE_U32(r11.u32 + 1296, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,1300(r11)
	PPC_STORE_U32(r11.u32 + 1300, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// stw r10,1304(r11)
	PPC_STORE_U32(r11.u32 + 1304, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,1308(r11)
	PPC_STORE_U32(r11.u32 + 1308, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1280(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stw r10,1312(r11)
	PPC_STORE_U32(r11.u32 + 1312, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r7,1316(r11)
	PPC_STORE_U32(r11.u32 + 1316, ctx.r7.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1284(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// stfs f0,1320(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1320, temp.u32);
	// stfs f31,1324(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1324, temp.u32);
	// lwz r11,-1768(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1768);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b64b4
	if (cr6.getEQ()) goto loc_820B64B4;
	// lwz r10,-1828(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -1828);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820b65ec
	if (!cr6.getEQ()) goto loc_820B65EC;
loc_820B64B4:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r5,84
	ctx.r5.s64 = 84;
	// addi r4,r11,1372
	ctx.r4.s64 = r11.s64 + 1372;
	// addi r3,r11,1456
	ctx.r3.s64 = r11.s64 + 1456;
	// mr r11,r30
	r11.u64 = r30.u64;
	// stw r11,-1836(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1836, r11.u32);
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// lfs f0,1340(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1340);
	f0.f64 = double(temp.f32);
	// stfs f0,596(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 596, temp.u32);
	// lfs f0,1344(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1344);
	f0.f64 = double(temp.f32);
	// stfs f0,612(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 612, temp.u32);
	// lwz r11,428(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 428);
	// lfs f0,1460(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1460);
	f0.f64 = double(temp.f32);
	// rotlwi r10,r10,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// stfs f0,12(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// lfs f0,1464(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1464);
	f0.f64 = double(temp.f32);
	// lwz r10,-1364(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f0,16(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// lfs f0,1468(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1468);
	f0.f64 = double(temp.f32);
	// lwz r10,1456(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1456);
	// stfs f0,20(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 20, temp.u32);
	// stw r10,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r10.u32);
	// bl 0x820b2878
	sub_820B2878(ctx, base);
	// fmr f3,f31
	ctx.fpscr.disableFlushMode();
	ctx.f3.f64 = f31.f64;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x820b23b0
	sub_820B23B0(ctx, base);
	// bl 0x820b2608
	sub_820B2608(ctx, base);
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x820b2290
	sub_820B2290(ctx, base);
	// bl 0x820b5a38
	sub_820B5A38(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r3,r11,1728
	ctx.r3.s64 = r11.s64 + 1728;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f30.f64 = double(temp.f32);
	// bl 0x8211af88
	sub_8211AF88(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// addi r3,r11,1728
	ctx.r3.s64 = r11.s64 + 1728;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,24
	ctx.r10.s64 = 24;
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r9,20(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// stb r10,7(r11)
	PPC_STORE_U8(r11.u32 + 7, ctx.r10.u8);
	// ori r10,r9,1
	ctx.r10.u64 = ctx.r9.u64 | 1;
	// stb r30,8(r11)
	PPC_STORE_U8(r11.u32 + 8, r30.u8);
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// addi r4,r10,12
	ctx.r4.s64 = ctx.r10.s64 + 12;
	// bl 0x82119118
	sub_82119118(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,596(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 596);
	ctx.f13.f64 = double(temp.f32);
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// lfs f0,14020(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14020);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,13980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x82119178
	sub_82119178(ctx, base);
	// lwz r11,-1768(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1768);
	// lwz r10,-1828(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -1828);
loc_820B65EC:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b6638
	if (cr6.getEQ()) goto loc_820B6638;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b6638
	if (cr6.getEQ()) goto loc_820B6638;
	// lfs f13,16(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f13,116(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// lfs f13,20(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,12(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stfs f13,120(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// lfs f13,16(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,100(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// lfs f13,20(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,104(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// lwz r7,24(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// lfs f1,14052(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14052);
	ctx.f1.f64 = double(temp.f32);
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// b 0x820b667c
	goto loc_820B667C;
loc_820B6638:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f0,1260(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1260);
	f0.f64 = double(temp.f32);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// lfs f0,1264(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1264);
	f0.f64 = double(temp.f32);
	// stfs f0,116(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// lfs f0,1268(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1268);
	f0.f64 = double(temp.f32);
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// lfs f0,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lfs f0,1464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1464);
	f0.f64 = double(temp.f32);
	// stfs f0,100(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// lfs f0,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	f0.f64 = double(temp.f32);
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// lwz r7,1456(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// lfs f1,2940(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2940);
	ctx.f1.f64 = double(temp.f32);
loc_820B667C:
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// bl 0x820b0278
	sub_820B0278(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b671c
	if (cr6.getEQ()) goto loc_820B671C;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1716(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1716);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820b66b4
	if (!cr6.getEQ()) goto loc_820B66B4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,15320
	ctx.r3.s64 = r11.s64 + 15320;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_820B66B4:
	// lwz r11,-1768(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1768);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b68d8
	if (cr6.getEQ()) goto loc_820B68D8;
	// lwz r11,-1828(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1828);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b68d8
	if (cr6.getEQ()) goto loc_820B68D8;
	// addi r31,r11,48
	r31.s64 = r11.s64 + 48;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// li r10,-1
	ctx.r10.s64 = -1;
	// lwz r11,-1828(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1828);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// stb r30,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r30.u8);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,13
	ctx.r6.s64 = 13;
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// lwz r5,24(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// li r10,0
	ctx.r10.s64 = 0;
	// bl 0x821427b8
	sub_821427B8(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_820B671C:
	// bl 0x820ae4c0
	sub_820AE4C0(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_820B6734:
	// cmpwi cr6,r3,6
	cr6.compare<int32_t>(ctx.r3.s32, 6, xer);
	// bne cr6,0x820b67d0
	if (!cr6.getEQ()) goto loc_820B67D0;
loc_820B673C:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1272(r11)
	PPC_STORE_U32(r11.u32 + 1272, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1276(r11)
	PPC_STORE_U32(r11.u32 + 1276, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1280(r11)
	PPC_STORE_U32(r11.u32 + 1280, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r10,r11,1272
	ctx.r10.s64 = r11.s64 + 1272;
	// stfs f31,1284(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1284, temp.u32);
	// lwz r9,1272(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lwz r8,1276(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// lwz r7,1280(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stfs f31,1288(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1288, temp.u32);
	// stfs f29,1292(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 1292, temp.u32);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r10,1296(r11)
	PPC_STORE_U32(r11.u32 + 1296, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,1300(r11)
	PPC_STORE_U32(r11.u32 + 1300, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// stw r10,1304(r11)
	PPC_STORE_U32(r11.u32 + 1304, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,1308(r11)
	PPC_STORE_U32(r11.u32 + 1308, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1280(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stw r10,1312(r11)
	PPC_STORE_U32(r11.u32 + 1312, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r7,1316(r11)
	PPC_STORE_U32(r11.u32 + 1316, ctx.r7.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1284(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// stfs f0,1320(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1320, temp.u32);
	// stfs f30,1324(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1324, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-88(r1)
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_820B67D0:
	// cmpwi cr6,r3,7
	cr6.compare<int32_t>(ctx.r3.s32, 7, xer);
	// bne cr6,0x820b67f8
	if (!cr6.getEQ()) goto loc_820B67F8;
	// bl 0x820b5a38
	sub_820B5A38(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,180(r11)
	PPC_STORE_U32(r11.u32 + 180, r30.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_820B67F8:
	// cmpwi cr6,r3,8
	cr6.compare<int32_t>(ctx.r3.s32, 8, xer);
	// bne cr6,0x820b6820
	if (!cr6.getEQ()) goto loc_820B6820;
	// bl 0x820b5ef0
	sub_820B5EF0(ctx, base);
	// li r11,4
	r11.s64 = 4;
	// stw r11,-1760(r26)
	PPC_STORE_U32(r26.u32 + -1760, r11.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_820B6820:
	// cmpwi cr6,r3,10
	cr6.compare<int32_t>(ctx.r3.s32, 10, xer);
	// bne cr6,0x820b68d8
	if (!cr6.getEQ()) goto loc_820B68D8;
	// mr r29,r30
	r29.u64 = r30.u64;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x820b68d0
	if (!cr6.getGT()) goto loc_820B68D0;
loc_820B6838:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// stw r30,1272(r11)
	PPC_STORE_U32(r11.u32 + 1272, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1276(r11)
	PPC_STORE_U32(r11.u32 + 1276, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1280(r11)
	PPC_STORE_U32(r11.u32 + 1280, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r10,r11,1272
	ctx.r10.s64 = r11.s64 + 1272;
	// stfs f31,1284(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1284, temp.u32);
	// lwz r9,1272(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lwz r8,1276(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// lwz r7,1280(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stfs f31,1288(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1288, temp.u32);
	// stfs f29,1292(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 1292, temp.u32);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r10,1296(r11)
	PPC_STORE_U32(r11.u32 + 1296, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,1300(r11)
	PPC_STORE_U32(r11.u32 + 1300, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// stw r10,1304(r11)
	PPC_STORE_U32(r11.u32 + 1304, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,1308(r11)
	PPC_STORE_U32(r11.u32 + 1308, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1280(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stw r10,1312(r11)
	PPC_STORE_U32(r11.u32 + 1312, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r7,1316(r11)
	PPC_STORE_U32(r11.u32 + 1316, ctx.r7.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1284(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// stfs f0,1320(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1320, temp.u32);
	// stfs f30,1324(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1324, temp.u32);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpw cr6,r29,r3
	cr6.compare<int32_t>(r29.s32, ctx.r3.s32, xer);
	// blt cr6,0x820b6838
	if (cr6.getLT()) goto loc_820B6838;
loc_820B68D0:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
loc_820B68D8:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_820B68F0"))) PPC_WEAK_FUNC(sub_820B68F0);
PPC_FUNC_IMPL(__imp__sub_820B68F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r10,-1760(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1760);
	// stw r9,-1760(r11)
	PPC_STORE_U32(r11.u32 + -1760, ctx.r9.u32);
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// stw r11,-1756(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1756, r11.u32);
	// bne cr6,0x820b6938
	if (!cr6.getEQ()) goto loc_820B6938;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820b5f70
	sub_820B5F70(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820B6938:
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x820b6988
	if (!cr6.getEQ()) goto loc_820B6988;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r9,-1
	ctx.r9.s64 = -1;
	// li r3,3
	ctx.r3.s64 = 3;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r8,4736(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4736, ctx.r8.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r9,4740(r11)
	PPC_STORE_U32(r11.u32 + 4740, ctx.r9.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1700(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1700, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1704(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1704, r11.u32);
	// bl 0x820b5f70
	sub_820B5F70(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820B6988:
	// cmpwi cr6,r10,9
	cr6.compare<int32_t>(ctx.r10.s32, 9, xer);
	// beq cr6,0x820b6a18
	if (cr6.getEQ()) goto loc_820B6A18;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x820b69c8
	if (!cr6.getEQ()) goto loc_820B69C8;
	// bl 0x820b5ef0
	sub_820B5EF0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b2290
	sub_820B2290(ctx, base);
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x820b5f70
	sub_820B5F70(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820B69C8:
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// beq cr6,0x820b6a18
	if (cr6.getEQ()) goto loc_820B6A18;
	// cmpwi cr6,r10,5
	cr6.compare<int32_t>(ctx.r10.s32, 5, xer);
	// bne cr6,0x820b69f0
	if (!cr6.getEQ()) goto loc_820B69F0;
	// li r3,6
	ctx.r3.s64 = 6;
	// bl 0x820b5f70
	sub_820B5F70(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820B69F0:
	// cmpwi cr6,r10,6
	cr6.compare<int32_t>(ctx.r10.s32, 6, xer);
	// bne cr6,0x820b6a18
	if (!cr6.getEQ()) goto loc_820B6A18;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r11,-1716(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1716);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// stw r11,-1716(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1716, r11.u32);
	// bge cr6,0x820b6a18
	if (!cr6.getLT()) goto loc_820B6A18;
	// li r3,5
	ctx.r3.s64 = 5;
	// bl 0x820b5f70
	sub_820B5F70(ctx, base);
loc_820B6A18:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B6A28"))) PPC_WEAK_FUNC(sub_820B6A28);
PPC_FUNC_IMPL(__imp__sub_820B6A28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -112, f30.u64);
	// stfd f31,-104(r1)
	PPC_STORE_U64(ctx.r1.u32 + -104, f31.u64);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// mr r24,r4
	r24.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// mr r22,r6
	r22.u64 = ctx.r6.u64;
	// lwz r11,-1760(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1760);
	// mr r21,r8
	r21.u64 = ctx.r8.u64;
	// mr r23,r9
	r23.u64 = ctx.r9.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// beq cr6,0x820b7904
	if (cr6.getEQ()) goto loc_820B7904;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x820b79e8
	if (cr6.getEQ()) goto loc_820B79E8;
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// bne cr6,0x820b70a4
	if (!cr6.getEQ()) goto loc_820B70A4;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820ca060
	sub_820CA060(ctx, base);
	// lis r28,-32014
	r28.s64 = -2098069504;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lfs f0,-3816(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + -3816);
	f0.f64 = double(temp.f32);
	// bne cr6,0x820b6f90
	if (!cr6.getEQ()) goto loc_820B6F90;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f13,-1932(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1932);
	ctx.f13.f64 = double(temp.f32);
	// lis r3,-32256
	ctx.r3.s64 = -2113929216;
	// lis r4,-32256
	ctx.r4.s64 = -2113929216;
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lwz r27,-6384(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lfs f9,2776(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 2776);
	ctx.f9.f64 = double(temp.f32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f2,15340(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 15340);
	ctx.f2.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f3,13960(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 13960);
	ctx.f3.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f4,12924(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 12924);
	ctx.f4.f64 = double(temp.f32);
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lfs f5,14216(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 14216);
	ctx.f5.f64 = double(temp.f32);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lfs f6,15336(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 15336);
	ctx.f6.f64 = double(temp.f32);
	// lfs f10,13964(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 13964);
	ctx.f10.f64 = double(temp.f32);
	// li r25,0
	r25.s64 = 0;
	// lfs f7,3028(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3028);
	ctx.f7.f64 = double(temp.f32);
	// cmpwi cr6,r27,8
	cr6.compare<int32_t>(r27.s32, 8, xer);
	// lfs f8,15332(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15332);
	ctx.f8.f64 = double(temp.f32);
	// lfs f12,-2948(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -2948);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,-1928(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -1928);
	ctx.f11.f64 = double(temp.f32);
	// blt cr6,0x820b6ef8
	if (cr6.getLT()) goto loc_820B6EF8;
	// addi r11,r27,-7
	r11.s64 = r27.s64 + -7;
loc_820B6B08:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x820b6b30
	if (!cr6.getLT()) goto loc_820B6B30;
	// fcmpu cr6,f0,f7
	cr6.compare(f0.f64, ctx.f7.f64);
	// bge cr6,0x820b6b1c
	if (!cr6.getLT()) goto loc_820B6B1C;
	// fadds f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 + ctx.f10.f64));
loc_820B6B1C:
	// fcmpu cr6,f0,f6
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f6.f64);
	// ble cr6,0x820b6b2c
	if (!cr6.getGT()) goto loc_820B6B2C;
	// fsubs f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 - ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6B2C:
	// fadds f0,f11,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 + f0.f64));
loc_820B6B30:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// blt cr6,0x820b6b44
	if (cr6.getLT()) goto loc_820B6B44;
	// fmr f0,f5
	f0.f64 = ctx.f5.f64;
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
	// b 0x820b6b4c
	goto loc_820B6B4C;
loc_820B6B44:
	// fcmpu cr6,f0,f4
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f4.f64);
	// ble cr6,0x820b6b78
	if (!cr6.getGT()) goto loc_820B6B78;
loc_820B6B4C:
	// fcmpu cr6,f13,f3
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, ctx.f3.f64);
	// ble cr6,0x820b6b5c
	if (!cr6.getGT()) goto loc_820B6B5C;
	// fsubs f12,f12,f10
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f10.f64));
	// b 0x820b6b64
	goto loc_820B6B64;
loc_820B6B5C:
	// fadds f12,f12,f2
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 + ctx.f2.f64));
	// stfs f12,-2948(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r29.u32 + -2948, temp.u32);
loc_820B6B64:
	// fadds f13,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// fcmpu cr6,f13,f9
	cr6.compare(ctx.f13.f64, ctx.f9.f64);
	// bge cr6,0x820b6b78
	if (!cr6.getLT()) goto loc_820B6B78;
	// fmr f13,f9
	ctx.f13.f64 = ctx.f9.f64;
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
loc_820B6B78:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x820b6ba8
	if (!cr6.getLT()) goto loc_820B6BA8;
	// fcmpu cr6,f0,f7
	cr6.compare(f0.f64, ctx.f7.f64);
	// bge cr6,0x820b6b90
	if (!cr6.getLT()) goto loc_820B6B90;
	// fadds f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 + ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6B90:
	// fcmpu cr6,f0,f6
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f6.f64);
	// ble cr6,0x820b6ba0
	if (!cr6.getGT()) goto loc_820B6BA0;
	// fsubs f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 - ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6BA0:
	// fadds f0,f11,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 + f0.f64));
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
loc_820B6BA8:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// blt cr6,0x820b6bbc
	if (cr6.getLT()) goto loc_820B6BBC;
	// fmr f0,f5
	f0.f64 = ctx.f5.f64;
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
	// b 0x820b6bc4
	goto loc_820B6BC4;
loc_820B6BBC:
	// fcmpu cr6,f0,f4
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f4.f64);
	// ble cr6,0x820b6bf4
	if (!cr6.getGT()) goto loc_820B6BF4;
loc_820B6BC4:
	// fcmpu cr6,f13,f3
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, ctx.f3.f64);
	// ble cr6,0x820b6bd4
	if (!cr6.getGT()) goto loc_820B6BD4;
	// fsubs f12,f12,f10
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f10.f64));
	// b 0x820b6bd8
	goto loc_820B6BD8;
loc_820B6BD4:
	// fadds f12,f12,f2
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 + ctx.f2.f64));
loc_820B6BD8:
	// fadds f13,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// stfs f12,-2948(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r29.u32 + -2948, temp.u32);
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
	// fcmpu cr6,f13,f9
	cr6.compare(ctx.f13.f64, ctx.f9.f64);
	// bge cr6,0x820b6bf4
	if (!cr6.getLT()) goto loc_820B6BF4;
	// fmr f13,f9
	ctx.f13.f64 = ctx.f9.f64;
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
loc_820B6BF4:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x820b6c24
	if (!cr6.getLT()) goto loc_820B6C24;
	// fcmpu cr6,f0,f7
	cr6.compare(f0.f64, ctx.f7.f64);
	// bge cr6,0x820b6c0c
	if (!cr6.getLT()) goto loc_820B6C0C;
	// fadds f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 + ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6C0C:
	// fcmpu cr6,f0,f6
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f6.f64);
	// ble cr6,0x820b6c1c
	if (!cr6.getGT()) goto loc_820B6C1C;
	// fsubs f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 - ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6C1C:
	// fadds f0,f11,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 + f0.f64));
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
loc_820B6C24:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// blt cr6,0x820b6c38
	if (cr6.getLT()) goto loc_820B6C38;
	// fmr f0,f5
	f0.f64 = ctx.f5.f64;
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
	// b 0x820b6c40
	goto loc_820B6C40;
loc_820B6C38:
	// fcmpu cr6,f0,f4
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f4.f64);
	// ble cr6,0x820b6c70
	if (!cr6.getGT()) goto loc_820B6C70;
loc_820B6C40:
	// fcmpu cr6,f13,f3
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, ctx.f3.f64);
	// ble cr6,0x820b6c50
	if (!cr6.getGT()) goto loc_820B6C50;
	// fsubs f12,f12,f10
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f10.f64));
	// b 0x820b6c54
	goto loc_820B6C54;
loc_820B6C50:
	// fadds f12,f12,f2
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 + ctx.f2.f64));
loc_820B6C54:
	// fadds f13,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// stfs f12,-2948(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r29.u32 + -2948, temp.u32);
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
	// fcmpu cr6,f13,f9
	cr6.compare(ctx.f13.f64, ctx.f9.f64);
	// bge cr6,0x820b6c70
	if (!cr6.getLT()) goto loc_820B6C70;
	// fmr f13,f9
	ctx.f13.f64 = ctx.f9.f64;
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
loc_820B6C70:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x820b6ca0
	if (!cr6.getLT()) goto loc_820B6CA0;
	// fcmpu cr6,f0,f7
	cr6.compare(f0.f64, ctx.f7.f64);
	// bge cr6,0x820b6c88
	if (!cr6.getLT()) goto loc_820B6C88;
	// fadds f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 + ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6C88:
	// fcmpu cr6,f0,f6
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f6.f64);
	// ble cr6,0x820b6c98
	if (!cr6.getGT()) goto loc_820B6C98;
	// fsubs f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 - ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6C98:
	// fadds f0,f11,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 + f0.f64));
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
loc_820B6CA0:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// blt cr6,0x820b6cb4
	if (cr6.getLT()) goto loc_820B6CB4;
	// fmr f0,f5
	f0.f64 = ctx.f5.f64;
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
	// b 0x820b6cbc
	goto loc_820B6CBC;
loc_820B6CB4:
	// fcmpu cr6,f0,f4
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f4.f64);
	// ble cr6,0x820b6cec
	if (!cr6.getGT()) goto loc_820B6CEC;
loc_820B6CBC:
	// fcmpu cr6,f13,f3
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, ctx.f3.f64);
	// ble cr6,0x820b6ccc
	if (!cr6.getGT()) goto loc_820B6CCC;
	// fsubs f12,f12,f10
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f10.f64));
	// b 0x820b6cd0
	goto loc_820B6CD0;
loc_820B6CCC:
	// fadds f12,f12,f2
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 + ctx.f2.f64));
loc_820B6CD0:
	// fadds f13,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// stfs f12,-2948(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r29.u32 + -2948, temp.u32);
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
	// fcmpu cr6,f13,f9
	cr6.compare(ctx.f13.f64, ctx.f9.f64);
	// bge cr6,0x820b6cec
	if (!cr6.getLT()) goto loc_820B6CEC;
	// fmr f13,f9
	ctx.f13.f64 = ctx.f9.f64;
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
loc_820B6CEC:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x820b6d1c
	if (!cr6.getLT()) goto loc_820B6D1C;
	// fcmpu cr6,f0,f7
	cr6.compare(f0.f64, ctx.f7.f64);
	// bge cr6,0x820b6d04
	if (!cr6.getLT()) goto loc_820B6D04;
	// fadds f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 + ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6D04:
	// fcmpu cr6,f0,f6
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f6.f64);
	// ble cr6,0x820b6d14
	if (!cr6.getGT()) goto loc_820B6D14;
	// fsubs f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 - ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6D14:
	// fadds f0,f11,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 + f0.f64));
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
loc_820B6D1C:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// blt cr6,0x820b6d30
	if (cr6.getLT()) goto loc_820B6D30;
	// fmr f0,f5
	f0.f64 = ctx.f5.f64;
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
	// b 0x820b6d38
	goto loc_820B6D38;
loc_820B6D30:
	// fcmpu cr6,f0,f4
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f4.f64);
	// ble cr6,0x820b6d68
	if (!cr6.getGT()) goto loc_820B6D68;
loc_820B6D38:
	// fcmpu cr6,f13,f3
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, ctx.f3.f64);
	// ble cr6,0x820b6d48
	if (!cr6.getGT()) goto loc_820B6D48;
	// fsubs f12,f12,f10
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f10.f64));
	// b 0x820b6d4c
	goto loc_820B6D4C;
loc_820B6D48:
	// fadds f12,f12,f2
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 + ctx.f2.f64));
loc_820B6D4C:
	// fadds f13,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// stfs f12,-2948(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r29.u32 + -2948, temp.u32);
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
	// fcmpu cr6,f13,f9
	cr6.compare(ctx.f13.f64, ctx.f9.f64);
	// bge cr6,0x820b6d68
	if (!cr6.getLT()) goto loc_820B6D68;
	// fmr f13,f9
	ctx.f13.f64 = ctx.f9.f64;
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
loc_820B6D68:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x820b6d98
	if (!cr6.getLT()) goto loc_820B6D98;
	// fcmpu cr6,f0,f7
	cr6.compare(f0.f64, ctx.f7.f64);
	// bge cr6,0x820b6d80
	if (!cr6.getLT()) goto loc_820B6D80;
	// fadds f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 + ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6D80:
	// fcmpu cr6,f0,f6
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f6.f64);
	// ble cr6,0x820b6d90
	if (!cr6.getGT()) goto loc_820B6D90;
	// fsubs f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 - ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6D90:
	// fadds f0,f11,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 + f0.f64));
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
loc_820B6D98:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// blt cr6,0x820b6dac
	if (cr6.getLT()) goto loc_820B6DAC;
	// fmr f0,f5
	f0.f64 = ctx.f5.f64;
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
	// b 0x820b6db4
	goto loc_820B6DB4;
loc_820B6DAC:
	// fcmpu cr6,f0,f4
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f4.f64);
	// ble cr6,0x820b6de4
	if (!cr6.getGT()) goto loc_820B6DE4;
loc_820B6DB4:
	// fcmpu cr6,f13,f3
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, ctx.f3.f64);
	// ble cr6,0x820b6dc4
	if (!cr6.getGT()) goto loc_820B6DC4;
	// fsubs f12,f12,f10
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f10.f64));
	// b 0x820b6dc8
	goto loc_820B6DC8;
loc_820B6DC4:
	// fadds f12,f12,f2
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 + ctx.f2.f64));
loc_820B6DC8:
	// fadds f13,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// stfs f12,-2948(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r29.u32 + -2948, temp.u32);
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
	// fcmpu cr6,f13,f9
	cr6.compare(ctx.f13.f64, ctx.f9.f64);
	// bge cr6,0x820b6de4
	if (!cr6.getLT()) goto loc_820B6DE4;
	// fmr f13,f9
	ctx.f13.f64 = ctx.f9.f64;
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
loc_820B6DE4:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x820b6e14
	if (!cr6.getLT()) goto loc_820B6E14;
	// fcmpu cr6,f0,f7
	cr6.compare(f0.f64, ctx.f7.f64);
	// bge cr6,0x820b6dfc
	if (!cr6.getLT()) goto loc_820B6DFC;
	// fadds f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 + ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6DFC:
	// fcmpu cr6,f0,f6
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f6.f64);
	// ble cr6,0x820b6e0c
	if (!cr6.getGT()) goto loc_820B6E0C;
	// fsubs f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 - ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6E0C:
	// fadds f0,f11,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 + f0.f64));
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
loc_820B6E14:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// blt cr6,0x820b6e28
	if (cr6.getLT()) goto loc_820B6E28;
	// fmr f0,f5
	f0.f64 = ctx.f5.f64;
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
	// b 0x820b6e30
	goto loc_820B6E30;
loc_820B6E28:
	// fcmpu cr6,f0,f4
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f4.f64);
	// ble cr6,0x820b6e60
	if (!cr6.getGT()) goto loc_820B6E60;
loc_820B6E30:
	// fcmpu cr6,f13,f3
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, ctx.f3.f64);
	// ble cr6,0x820b6e40
	if (!cr6.getGT()) goto loc_820B6E40;
	// fsubs f12,f12,f10
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f10.f64));
	// b 0x820b6e44
	goto loc_820B6E44;
loc_820B6E40:
	// fadds f12,f12,f2
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 + ctx.f2.f64));
loc_820B6E44:
	// fadds f13,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// stfs f12,-2948(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r29.u32 + -2948, temp.u32);
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
	// fcmpu cr6,f13,f9
	cr6.compare(ctx.f13.f64, ctx.f9.f64);
	// bge cr6,0x820b6e60
	if (!cr6.getLT()) goto loc_820B6E60;
	// fmr f13,f9
	ctx.f13.f64 = ctx.f9.f64;
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
loc_820B6E60:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x820b6e90
	if (!cr6.getLT()) goto loc_820B6E90;
	// fcmpu cr6,f0,f7
	cr6.compare(f0.f64, ctx.f7.f64);
	// bge cr6,0x820b6e78
	if (!cr6.getLT()) goto loc_820B6E78;
	// fadds f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 + ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6E78:
	// fcmpu cr6,f0,f6
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f6.f64);
	// ble cr6,0x820b6e88
	if (!cr6.getGT()) goto loc_820B6E88;
	// fsubs f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 - ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6E88:
	// fadds f0,f11,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 + f0.f64));
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
loc_820B6E90:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// blt cr6,0x820b6ea4
	if (cr6.getLT()) goto loc_820B6EA4;
	// fmr f0,f5
	f0.f64 = ctx.f5.f64;
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
	// b 0x820b6eac
	goto loc_820B6EAC;
loc_820B6EA4:
	// fcmpu cr6,f0,f4
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f4.f64);
	// ble cr6,0x820b6edc
	if (!cr6.getGT()) goto loc_820B6EDC;
loc_820B6EAC:
	// fcmpu cr6,f13,f3
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, ctx.f3.f64);
	// ble cr6,0x820b6ebc
	if (!cr6.getGT()) goto loc_820B6EBC;
	// fsubs f12,f12,f10
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f10.f64));
	// b 0x820b6ec0
	goto loc_820B6EC0;
loc_820B6EBC:
	// fadds f12,f12,f2
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 + ctx.f2.f64));
loc_820B6EC0:
	// fadds f13,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// stfs f12,-2948(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r29.u32 + -2948, temp.u32);
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
	// fcmpu cr6,f13,f9
	cr6.compare(ctx.f13.f64, ctx.f9.f64);
	// bge cr6,0x820b6edc
	if (!cr6.getLT()) goto loc_820B6EDC;
	// fmr f13,f9
	ctx.f13.f64 = ctx.f9.f64;
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
loc_820B6EDC:
	// addi r25,r25,8
	r25.s64 = r25.s64 + 8;
	// cmpw cr6,r25,r11
	cr6.compare<int32_t>(r25.s32, r11.s32, xer);
	// blt cr6,0x820b6b08
	if (cr6.getLT()) goto loc_820B6B08;
	// stfs f13,-1932(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
	// stfs f12,-2948(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r29.u32 + -2948, temp.u32);
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6EF8:
	// cmpw cr6,r25,r27
	cr6.compare<int32_t>(r25.s32, r27.s32, xer);
	// bge cr6,0x820b6f90
	if (!cr6.getLT()) goto loc_820B6F90;
	// subf r11,r25,r27
	r11.s64 = r27.s64 - r25.s64;
loc_820B6F04:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// bge cr6,0x820b6f2c
	if (!cr6.getLT()) goto loc_820B6F2C;
	// fcmpu cr6,f0,f7
	cr6.compare(f0.f64, ctx.f7.f64);
	// bge cr6,0x820b6f18
	if (!cr6.getLT()) goto loc_820B6F18;
	// fadds f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 + ctx.f10.f64));
loc_820B6F18:
	// fcmpu cr6,f0,f6
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f6.f64);
	// ble cr6,0x820b6f28
	if (!cr6.getGT()) goto loc_820B6F28;
	// fsubs f11,f11,f10
	ctx.f11.f64 = double(float(ctx.f11.f64 - ctx.f10.f64));
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6F28:
	// fadds f0,f11,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 + f0.f64));
loc_820B6F2C:
	// fcmpu cr6,f0,f8
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f8.f64);
	// blt cr6,0x820b6f40
	if (cr6.getLT()) goto loc_820B6F40;
	// fmr f0,f5
	f0.f64 = ctx.f5.f64;
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
	// b 0x820b6f48
	goto loc_820B6F48;
loc_820B6F40:
	// fcmpu cr6,f0,f4
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f4.f64);
	// ble cr6,0x820b6f74
	if (!cr6.getGT()) goto loc_820B6F74;
loc_820B6F48:
	// fcmpu cr6,f13,f3
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, ctx.f3.f64);
	// ble cr6,0x820b6f58
	if (!cr6.getGT()) goto loc_820B6F58;
	// fsubs f12,f12,f10
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f10.f64));
	// b 0x820b6f60
	goto loc_820B6F60;
loc_820B6F58:
	// fadds f12,f12,f2
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 + ctx.f2.f64));
	// stfs f12,-2948(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r29.u32 + -2948, temp.u32);
loc_820B6F60:
	// fadds f13,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// fcmpu cr6,f13,f9
	cr6.compare(ctx.f13.f64, ctx.f9.f64);
	// bge cr6,0x820b6f74
	if (!cr6.getLT()) goto loc_820B6F74;
	// fmr f13,f9
	ctx.f13.f64 = ctx.f9.f64;
	// stfs f13,-1932(r30)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
loc_820B6F74:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b6f04
	if (!cr6.getEQ()) goto loc_820B6F04;
	// stfs f13,-1932(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r30.u32 + -1932, temp.u32);
	// stfs f12,-2948(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r29.u32 + -2948, temp.u32);
	// stfs f0,-3816(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -3816, temp.u32);
	// stfs f11,-1928(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + -1928, temp.u32);
loc_820B6F90:
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f13,596(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 596);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,13980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	f0.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = ctx.f1.f64;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,-1932(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1932);
	f0.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// lfs f12,1500(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1500);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// lfs f30,14260(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14260);
	f30.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fmadds f0,f0,f13,f12
	f0.f64 = double(float(f0.f64 * ctx.f13.f64 + ctx.f12.f64));
	// stfs f0,0(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 0, temp.u32);
	// lfs f0,-1932(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1932);
	f0.f64 = double(temp.f32);
	// lfs f13,1504(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1504);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f30,f13
	f0.f64 = double(float(f0.f64 * f30.f64 + ctx.f13.f64));
	// stfs f0,4(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 4, temp.u32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,-1932(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1932);
	f0.f64 = double(temp.f32);
	// addi r10,r11,1508
	ctx.r10.s64 = r11.s64 + 1508;
	// lfs f12,1508(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1508);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f0,f13,f12
	f0.f64 = double(float(f0.f64 * ctx.f13.f64 + ctx.f12.f64));
	// stfs f0,8(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 8, temp.u32);
	// lfs f0,1500(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1500);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 0, temp.u32);
	// lfs f0,1504(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1504);
	f0.f64 = double(temp.f32);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// stfs f0,4(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 4, temp.u32);
	// lfs f0,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 8, temp.u32);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,0(r21)
	PPC_STORE_U32(r21.u32 + 0, r11.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1500(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1500);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 0, temp.u32);
	// lfs f0,-1932(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1932);
	f0.f64 = double(temp.f32);
	// lfs f13,1504(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1504);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f30,f13
	f0.f64 = double(float(f0.f64 * f30.f64 + ctx.f13.f64));
	// stfs f0,4(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 4, temp.u32);
	// lfs f0,1508(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1508);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 8, temp.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820ca060
	sub_820CA060(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// addi r11,r3,-1
	r11.s64 = ctx.r3.s64 + -1;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// bne cr6,0x820b7ae0
	if (!cr6.getEQ()) goto loc_820B7AE0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-1932(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1932);
	f0.f64 = double(temp.f32);
	// lfs f13,2780(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2780);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b7ae0
	if (!cr6.getLT()) goto loc_820B7AE0;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1756(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1756, r11.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_820B70A4:
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x820b7394
	if (!cr6.getEQ()) goto loc_820B7394;
	// lis r29,-32190
	r29.s64 = -2109603840;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lis r27,-32014
	r27.s64 = -2098069504;
	// lis r7,-32014
	ctx.r7.s64 = -2098069504;
	// lwz r3,16568(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 16568);
	// lfs f11,-6368(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,-1744(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1744);
	f0.f64 = double(temp.f32);
	// rlwinm r10,r3,5,0,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 5) & 0xFFFFFFE0;
	// lwz r11,-1740(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -1740);
	// fadds f0,f11,f0
	f0.f64 = double(float(ctx.f11.f64 + f0.f64));
	// stfs f0,-1744(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + -1744, temp.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lfs f13,24(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820b713c
	if (cr6.getLT()) goto loc_820B713C;
loc_820B70EC:
	// lwz r10,100(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 100);
	// clrlwi r10,r10,31
	ctx.r10.u64 = ctx.r10.u32 & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820b7124
	if (!cr6.getEQ()) goto loc_820B7124;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// fsubs f0,f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,-1744(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + -1744, temp.u32);
	// rlwinm r10,r3,5,0,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 5) & 0xFFFFFFE0;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r3,16568(r29)
	PPC_STORE_U32(r29.u32 + 16568, ctx.r3.u32);
	// lfs f13,24(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b70ec
	if (!cr6.getLT()) goto loc_820B70EC;
	// b 0x820b713c
	goto loc_820B713C;
loc_820B7124:
	// rlwinm r10,r3,5,0,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 5) & 0xFFFFFFE0;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lfs f0,24(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	f0.f64 = double(temp.f32);
	// li r10,1
	ctx.r10.s64 = 1;
	// stfs f0,-1744(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + -1744, temp.u32);
	// stw r10,-1756(r7)
	PPC_STORE_U32(ctx.r7.u32 + -1756, ctx.r10.u32);
loc_820B713C:
	// rlwinm r9,r3,5,0,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 5) & 0xFFFFFFE0;
	// addi r10,r3,1
	ctx.r10.s64 = ctx.r3.s64 + 1;
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// lfs f13,24(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 24);
	ctx.f13.f64 = double(temp.f32);
	// rlwinm r9,r10,5,0,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0xFFFFFFE0;
	// fsubs f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f13.f64 - f0.f64));
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// lwz r8,68(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 68);
	// clrlwi r8,r8,31
	ctx.r8.u64 = ctx.r8.u32 & 0x1;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x820b718c
	if (!cr6.getEQ()) goto loc_820B718C;
loc_820B7168:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lfs f13,24(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 24);
	ctx.f13.f64 = double(temp.f32);
	// fadds f12,f13,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 + ctx.f12.f64));
	// rlwinm r9,r10,5,0,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0xFFFFFFE0;
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// lwz r8,68(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 68);
	// clrlwi r8,r8,31
	ctx.r8.u64 = ctx.r8.u32 & 0x1;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x820b7168
	if (cr6.getEQ()) goto loc_820B7168;
loc_820B718C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,3112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	ctx.f1.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f12,f1
	cr6.compare(ctx.f12.f64, ctx.f1.f64);
	// lfs f31,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// bge cr6,0x820b71c0
	if (!cr6.getLT()) goto loc_820B71C0;
	// fadds f13,f11,f12
	ctx.f13.f64 = double(float(ctx.f11.f64 + ctx.f12.f64));
	// fcmpu cr6,f13,f1
	cr6.compare(ctx.f13.f64, ctx.f1.f64);
	// blt cr6,0x820b71c0
	if (cr6.getLT()) goto loc_820B71C0;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// bl 0x820b2290
	sub_820B2290(ctx, base);
	// lfs f0,-1744(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1744);
	f0.f64 = double(temp.f32);
	// lwz r3,16568(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 16568);
loc_820B71C0:
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r10,-1752(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -1752);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b71ec
	if (cr6.getEQ()) goto loc_820B71EC;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f13,1292(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1292);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f31
	cr6.compare(ctx.f13.f64, f31.f64);
	// bge cr6,0x820b71ec
	if (!cr6.getLT()) goto loc_820B71EC;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1756(r7)
	PPC_STORE_U32(ctx.r7.u32 + -1756, r11.u32);
loc_820B71EC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,13960(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	f30.f64 = double(temp.f32);
	// fcmpu cr6,f12,f30
	cr6.compare(ctx.f12.f64, f30.f64);
	// ble cr6,0x820b7330
	if (!cr6.getGT()) goto loc_820B7330;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820b7330
	if (!cr6.getEQ()) goto loc_820B7330;
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b7328
	if (!cr6.getEQ()) goto loc_820B7328;
	// andi. r11,r25,61488
	r11.u64 = r25.u64 & 61488;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// clrlwi r10,r24,16
	ctx.r10.u64 = r24.u32 & 0xFFFF;
	// andc r11,r11,r10
	r11.u64 = r11.u64 & ~ctx.r10.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b7328
	if (cr6.getEQ()) goto loc_820B7328;
	// li r11,1
	r11.s64 = 1;
	// li r10,0
	ctx.r10.s64 = 0;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// stw r11,-1752(r28)
	PPC_STORE_U32(r28.u32 + -1752, r11.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1284(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// stw r10,1272(r11)
	PPC_STORE_U32(r11.u32 + 1272, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,1276(r11)
	PPC_STORE_U32(r11.u32 + 1276, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,1280(r11)
	PPC_STORE_U32(r11.u32 + 1280, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f0,1284(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1284, temp.u32);
	// lwz r10,1272(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lfs f0,1292(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1292);
	f0.f64 = double(temp.f32);
	// lwz r9,1276(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// lwz r8,1280(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x820b72cc
	if (!cr6.getLT()) goto loc_820B72CC;
	// stfs f31,1288(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1288, temp.u32);
	// stfs f30,1292(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1292, temp.u32);
	// lfs f0,2776(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 2776);
	f0.f64 = double(temp.f32);
	// lwz r7,1272(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// stw r7,1296(r11)
	PPC_STORE_U32(r11.u32 + 1296, ctx.r7.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,1300(r11)
	PPC_STORE_U32(r11.u32 + 1300, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// stw r10,1304(r11)
	PPC_STORE_U32(r11.u32 + 1304, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,1308(r11)
	PPC_STORE_U32(r11.u32 + 1308, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1280(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stw r10,1312(r11)
	PPC_STORE_U32(r11.u32 + 1312, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,1316(r11)
	PPC_STORE_U32(r11.u32 + 1316, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f13,1284(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,1320(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 1320, temp.u32);
	// stfs f0,1324(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1324, temp.u32);
	// b 0x820b7328
	goto loc_820B7328;
loc_820B72CC:
	// lfs f0,1288(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1288);
	f0.f64 = double(temp.f32);
	// stfs f31,1288(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1288, temp.u32);
	// stfs f0,1292(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1292, temp.u32);
	// lfs f13,2776(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// lwz r7,1272(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r7,1296(r11)
	PPC_STORE_U32(r11.u32 + 1296, ctx.r7.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,1300(r11)
	PPC_STORE_U32(r11.u32 + 1300, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// stw r10,1304(r11)
	PPC_STORE_U32(r11.u32 + 1304, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,1308(r11)
	PPC_STORE_U32(r11.u32 + 1308, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1280(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stw r10,1312(r11)
	PPC_STORE_U32(r11.u32 + 1312, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,1316(r11)
	PPC_STORE_U32(r11.u32 + 1316, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1284(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// stfs f0,1320(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1320, temp.u32);
	// stfs f13,1324(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 1324, temp.u32);
loc_820B7328:
	// lfs f0,-1744(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1744);
	f0.f64 = double(temp.f32);
	// lwz r3,16568(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 16568);
loc_820B7330:
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// fmr f1,f0
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f0.f64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// bl 0x820b05e0
	sub_820B05E0(ctx, base);
	// lwz r11,16568(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16568);
	// rlwinm r10,r11,5,0,26
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 5) & 0xFFFFFFE0;
	// lwz r11,-1740(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -1740);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x820b7aac
	if (!cr6.getLT()) goto loc_820B7AAC;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,1456(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// stw r11,0(r21)
	PPC_STORE_U32(r21.u32 + 0, r11.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1460(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 0, temp.u32);
	// lfs f0,1464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1464);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 4, temp.u32);
	// lfs f0,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 8, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_820B7394:
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x820b770c
	if (cr6.getEQ()) goto loc_820B770C;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x820b77cc
	if (cr6.getEQ()) goto loc_820B77CC;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// bne cr6,0x820b7ae0
	if (!cr6.getEQ()) goto loc_820B7AE0;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1876(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1876);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b7424
	if (cr6.getEQ()) goto loc_820B7424;
	// lfs f0,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// rotlwi r10,r10,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// stfs f0,0(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 0, temp.u32);
	// lfs f0,4(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	f0.f64 = double(temp.f32);
	// lwz r10,-1876(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1876);
	// stfs f0,4(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 4, temp.u32);
	// lfs f0,8(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	f0.f64 = double(temp.f32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stfs f0,8(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 8, temp.u32);
	// lwz r9,-1364(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// lfs f0,1260(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 1260);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 0, temp.u32);
	// lfs f0,1264(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 1264);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 4, temp.u32);
	// lfs f0,1268(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1268);
	f0.f64 = double(temp.f32);
	// lwz r10,-1876(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1876);
	// stfs f0,8(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 8, temp.u32);
	// lwz r10,40(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 40);
	// stw r10,0(r21)
	PPC_STORE_U32(r21.u32 + 0, ctx.r10.u32);
	// lwz r10,-1876(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1876);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// lfs f0,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 0, temp.u32);
	// lfs f0,4(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	f0.f64 = double(temp.f32);
	// b 0x820b7ad4
	goto loc_820B7AD4;
loc_820B7424:
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r9,-1880(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + -1880);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820b7578
	if (cr6.getEQ()) goto loc_820B7578;
	// lwz r11,24(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 24);
	// cmpwi cr6,r11,10000
	cr6.compare<int32_t>(r11.s32, 10000, xer);
	// bge cr6,0x820b7454
	if (!cr6.getLT()) goto loc_820B7454;
	// mulli r10,r11,44
	ctx.r10.s64 = r11.s64 * 44;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// b 0x820b7468
	goto loc_820B7468;
loc_820B7454:
	// addi r11,r11,-10000
	r11.s64 = r11.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
loc_820B7468:
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r10,-1880(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1880);
	// lfs f0,4(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 0, temp.u32);
	// lfs f0,8(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 4, temp.u32);
	// lfs f0,12(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 8, temp.u32);
	// lwz r10,40(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// stw r10,0(r21)
	PPC_STORE_U32(r21.u32 + 0, ctx.r10.u32);
	// lfs f0,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 0, temp.u32);
	// lfs f0,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 4, temp.u32);
	// lfs f0,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f0,8(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 8, temp.u32);
	// lwz r11,-1924(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1924);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820b74ec
	if (!cr6.getEQ()) goto loc_820B74EC;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// lfs f0,1260(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1260);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 0, temp.u32);
	// lfs f0,1264(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1264);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 4, temp.u32);
	// lfs f0,1268(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1268);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 8, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_820B74EC:
	// lwz r11,-1880(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1880);
	// lfs f1,20(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lwz r11,-1880(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1880);
	// frsp f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(ctx.f1.f64));
	// lfs f0,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	f0.f64 = double(temp.f32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lwz r11,-1880(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1880);
	// lfs f13,0(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f31,f13
	f0.f64 = double(float(f0.f64 * f31.f64 + ctx.f13.f64));
	// stfs f0,0(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 0, temp.u32);
	// lfs f1,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lwz r11,-1880(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1880);
	// lfs f13,4(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,4(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 4, temp.u32);
	// lfs f1,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lwz r11,-1880(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1880);
	// frsp f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(ctx.f1.f64));
	// lfs f0,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	f0.f64 = double(temp.f32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lfs f13,8(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f0,f0,f31,f13
	f0.f64 = double(float(-(f0.f64 * f31.f64 - ctx.f13.f64)));
	// stfs f0,8(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 8, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_820B7578:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-2964(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -2964);
	// cmpwi cr6,r11,10000
	cr6.compare<int32_t>(r11.s32, 10000, xer);
	// bge cr6,0x820b759c
	if (!cr6.getLT()) goto loc_820B759C;
	// mulli r10,r11,44
	ctx.r10.s64 = r11.s64 * 44;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// b 0x820b75b0
	goto loc_820B75B0;
loc_820B759C:
	// addi r11,r11,-10000
	r11.s64 = r11.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
loc_820B75B0:
	// add r31,r10,r11
	r31.u64 = ctx.r10.u64 + r11.u64;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// stw r11,0(r21)
	PPC_STORE_U32(r21.u32 + 0, r11.u32);
	// lfs f0,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 0, temp.u32);
	// lfs f0,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 4, temp.u32);
	// lfs f0,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 8, temp.u32);
	// lfs f1,-1904(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1904);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lfs f13,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f31,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// fmadds f0,f0,f31,f13
	f0.f64 = double(float(f0.f64 * f31.f64 + ctx.f13.f64));
	// stfs f0,0(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 0, temp.u32);
	// lfs f13,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,-3008(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -3008);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,4(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 4, temp.u32);
	// lfs f1,-1904(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1904);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lfs f13,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f0,f0,f31,f13
	f0.f64 = double(float(-(f0.f64 * f31.f64 - ctx.f13.f64)));
	// stfs f0,8(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 8, temp.u32);
	// lfs f1,-1904(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1904);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lfs f1,-1904(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1904);
	ctx.f1.f64 = double(temp.f32);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f12,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,-1908(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1908);
	f0.f64 = double(temp.f32);
	// fmuls f13,f13,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64));
	// fmadds f0,f30,f0,f13
	f0.f64 = double(float(f30.f64 * f0.f64 + ctx.f13.f64));
	// fadds f0,f0,f12
	f0.f64 = double(float(f0.f64 + ctx.f12.f64));
	// stfs f0,0(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 0, temp.u32);
	// lfs f13,-3008(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -3008);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,-3692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -3692);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f13,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,4(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 4, temp.u32);
	// lfs f1,-1904(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1904);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lfs f1,-1904(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1904);
	ctx.f1.f64 = double(temp.f32);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// lfs f12,8(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// frsp f13,f1
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// lfs f0,-1908(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1908);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// fmadds f0,f30,f0,f12
	f0.f64 = double(float(f30.f64 * f0.f64 + ctx.f12.f64));
	// fnmsubs f0,f13,f31,f0
	f0.f64 = double(float(-(ctx.f13.f64 * f31.f64 - f0.f64)));
	// stfs f0,8(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 8, temp.u32);
	// lfs f0,-3688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -3688);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f12,-1904(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1904);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmadds f0,f0,f13,f12
	f0.f64 = double(float(f0.f64 * ctx.f13.f64 + ctx.f12.f64));
	// stfs f0,-1904(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + -1904, temp.u32);
	// lfs f13,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820b76e4
	if (cr6.getLT()) goto loc_820B76E4;
loc_820B76D4:
	// fsubs f0,f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b76d4
	if (!cr6.getLT()) goto loc_820B76D4;
	// stfs f0,-1904(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + -1904, temp.u32);
loc_820B76E4:
	// fcmpu cr6,f0,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x820b7ae0
	if (!cr6.getLT()) goto loc_820B7AE0;
loc_820B76EC:
	// fadds f0,f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// blt cr6,0x820b76ec
	if (cr6.getLT()) goto loc_820B76EC;
	// stfs f0,-1904(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + -1904, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_820B770C:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lfs f0,-6368(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f13,-1744(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -1744);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,-1744(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1744, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r31,r11,-1364
	r31.s64 = r11.s64 + -1364;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r10,476(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b77b0
	if (cr6.getEQ()) goto loc_820B77B0;
	// rotlwi r3,r10,0
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// lwz r3,476(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x820b7768
	if (cr6.getLT()) goto loc_820B7768;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1756(r30)
	PPC_STORE_U32(r30.u32 + -1756, r11.u32);
loc_820B7768:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
loc_820B776C:
	// rlwinm r10,r25,0,16,19
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0xF000;
	// clrlwi r9,r24,16
	ctx.r9.u64 = r24.u32 & 0xFFFF;
	// andc r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ~ctx.r9.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b7854
	if (cr6.getEQ()) goto loc_820B7854;
	// lwz r10,480(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b7854
	if (cr6.getEQ()) goto loc_820B7854;
	// lwz r10,1356(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1356);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b7854
	if (cr6.getEQ()) goto loc_820B7854;
	// lwz r11,1360(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1360);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b7854
	if (cr6.getEQ()) goto loc_820B7854;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1756(r30)
	PPC_STORE_U32(r30.u32 + -1756, r11.u32);
	// b 0x820b7848
	goto loc_820B7848;
loc_820B77B0:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,14216(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14216);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820b776c
	if (cr6.getLT()) goto loc_820B776C;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,-1756(r30)
	PPC_STORE_U32(r30.u32 + -1756, ctx.r10.u32);
	// b 0x820b776c
	goto loc_820B776C;
loc_820B77CC:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f0,-6368(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f13,-1744(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -1744);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,-1744(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1744, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r31,r11,-1364
	r31.s64 = r11.s64 + -1364;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lfs f13,1292(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1292);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x820b7810
	if (!cr6.getLT()) goto loc_820B7810;
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1756(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1756, r11.u32);
loc_820B7810:
	// rlwinm r11,r25,0,16,19
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0xF000;
	// clrlwi r9,r24,16
	ctx.r9.u64 = r24.u32 & 0xFFFF;
	// andc r11,r11,r9
	r11.u64 = r11.u64 & ~ctx.r9.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b7854
	if (cr6.getEQ()) goto loc_820B7854;
	// lwz r11,480(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 480);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b7854
	if (cr6.getEQ()) goto loc_820B7854;
	// lwz r11,1356(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1356);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b7854
	if (cr6.getEQ()) goto loc_820B7854;
	// lwz r11,1360(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1360);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b7854
	if (cr6.getEQ()) goto loc_820B7854;
loc_820B7848:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,2
	r11.s64 = 2;
	// stw r11,-1716(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1716, r11.u32);
loc_820B7854:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r11,-2976
	r11.s64 = r11.s64 + -2976;
	// lfs f0,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 0, temp.u32);
	// lfs f0,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 4, temp.u32);
	// lfs f0,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f0,8(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 8, temp.u32);
	// lwz r8,428(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 428);
	// lwz r9,-3668(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + -3668);
	// cmplw cr6,r9,r8
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r8.u32, xer);
	// bne cr6,0x820b78ac
	if (!cr6.getEQ()) goto loc_820B78AC;
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// lfs f0,1260(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1260);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 0, temp.u32);
	// lfs f0,1264(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1264);
	f0.f64 = double(temp.f32);
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// stfs f0,4(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 4, temp.u32);
	// lfs f0,1268(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1268);
	f0.f64 = double(temp.f32);
	// b 0x820b78c8
	goto loc_820B78C8;
loc_820B78AC:
	// lwz r10,-3668(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -3668);
	// lfs f0,12(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 0, temp.u32);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// lfs f0,16(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 4, temp.u32);
	// lfs f0,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	f0.f64 = double(temp.f32);
loc_820B78C8:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stfs f0,8(r22)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 8, temp.u32);
	// lwz r11,1456(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// stw r11,0(r21)
	PPC_STORE_U32(r21.u32 + 0, r11.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfs f0,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 0, temp.u32);
	// lfs f0,1464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1464);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 4, temp.u32);
	// lfs f0,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 8, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_820B7904:
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r30,-31991
	r30.s64 = -2096562176;
	// lis r27,-32014
	r27.s64 = -2098069504;
	// lfs f0,-1744(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1744);
	f0.f64 = double(temp.f32);
	// lfs f13,12464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12464);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b7948
	if (!cr6.getLT()) goto loc_820B7948;
	// lfs f12,-6368(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// fadds f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 + f0.f64));
	// fcmpu cr6,f12,f13
	cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// blt cr6,0x820b7948
	if (cr6.getLT()) goto loc_820B7948;
	// lwz r11,-1724(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1724);
	// lwz r4,-31556(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// lwz r3,28(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// bl 0x820b4150
	sub_820B4150(ctx, base);
	// lfs f0,-1744(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1744);
	f0.f64 = double(temp.f32);
loc_820B7948:
	// lwz r11,-1724(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1724);
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lwz r10,32(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b7998
	if (cr6.getEQ()) goto loc_820B7998;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,12020(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12020);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b798c
	if (!cr6.getLT()) goto loc_820B798C;
	// lfs f12,-6368(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// fadds f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 + f0.f64));
	// fcmpu cr6,f12,f13
	cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// blt cr6,0x820b798c
	if (cr6.getLT()) goto loc_820B798C;
	// lwz r4,-31556(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31556);
	// lwz r3,32(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// bl 0x820b4150
	sub_820B4150(ctx, base);
	// lfs f0,-1744(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1744);
	f0.f64 = double(temp.f32);
loc_820B798C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,15328(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15328);
	ctx.f13.f64 = double(temp.f32);
	// b 0x820b79a0
	goto loc_820B79A0;
loc_820B7998:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,12020(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12020);
	ctx.f13.f64 = double(temp.f32);
loc_820B79A0:
	// fcmpu cr6,f0,f13
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820b79b0
	if (!cr6.getGT()) goto loc_820B79B0;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1756(r28)
	PPC_STORE_U32(r28.u32 + -1756, r11.u32);
loc_820B79B0:
	// lfs f13,-6368(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,-1744(r29)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + -1744, temp.u32);
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b7a10
	if (!cr6.getEQ()) goto loc_820B7A10;
	// andi. r11,r25,61488
	r11.u64 = r25.u64 & 61488;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// clrlwi r10,r24,16
	ctx.r10.u64 = r24.u32 & 0xFFFF;
	// andc r11,r11,r10
	r11.u64 = r11.u64 & ~ctx.r10.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b7a10
	if (cr6.getEQ()) goto loc_820B7A10;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1756(r28)
	PPC_STORE_U32(r28.u32 + -1756, r11.u32);
	// b 0x820b7a10
	goto loc_820B7A10;
loc_820B79E8:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lfs f13,1292(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1292);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x820b7a10
	if (!cr6.getLT()) goto loc_820B7A10;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1756(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1756, r11.u32);
loc_820B7A10:
	// lwz r11,-1724(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1724);
	// lfs f0,4(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 0, temp.u32);
	// lfs f0,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 4, temp.u32);
	// lfs f0,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 8, temp.u32);
	// lfs f1,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lwz r11,-1724(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1724);
	// frsp f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(ctx.f1.f64));
	// lfs f0,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	f0.f64 = double(temp.f32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lwz r11,-1724(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1724);
	// lfs f13,0(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f31,f13
	f0.f64 = double(float(f0.f64 * f31.f64 + ctx.f13.f64));
	// stfs f0,0(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 0, temp.u32);
	// lfs f1,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lwz r11,-1724(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1724);
	// lfs f13,4(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,4(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 4, temp.u32);
	// lfs f1,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lwz r11,-1724(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1724);
	// frsp f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(ctx.f1.f64));
	// lfs f0,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	f0.f64 = double(temp.f32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lwz r11,-1724(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1724);
	// lfs f13,8(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f0,f0,f31,f13
	f0.f64 = double(float(-(f0.f64 * f31.f64 - ctx.f13.f64)));
	// stfs f0,8(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 8, temp.u32);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
loc_820B7AAC:
	// mulli r10,r11,44
	ctx.r10.s64 = r11.s64 * 44;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r10,40(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// stw r10,0(r21)
	PPC_STORE_U32(r21.u32 + 0, ctx.r10.u32);
	// lfs f0,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 0, temp.u32);
	// lfs f0,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
loc_820B7AD4:
	// stfs f0,4(r23)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 4, temp.u32);
	// lfs f0,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 8, temp.u32);
loc_820B7AE0:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_820B7AF0"))) PPC_WEAK_FUNC(sub_820B7AF0);
PPC_FUNC_IMPL(__imp__sub_820B7AF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -88, f29.u64);
	// stfd f30,-80(r1)
	PPC_STORE_U64(ctx.r1.u32 + -80, f30.u64);
	// stfd f31,-72(r1)
	PPC_STORE_U64(ctx.r1.u32 + -72, f31.u64);
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// li r25,0
	r25.s64 = 0;
	// lwz r11,-1836(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1836);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820b7b58
	if (!cr6.getEQ()) goto loc_820B7B58;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1888(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1888);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b7b58
	if (cr6.getEQ()) goto loc_820B7B58;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// lfs f1,-1808(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -1808);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b0f50
	sub_820B0F50(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_820B7B58:
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1456(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r10,16580(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16580);
	// subfic r10,r10,0
	xer.ca = ctx.r10.u32 <= 0;
	ctx.r10.s64 = 0 - ctx.r10.s64;
	// subfe r11,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	r11.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r29,r11,27
	r29.u64 = r11.u32 & 0x1F;
	// bl 0x820c9b90
	sub_820C9B90(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// rlwinm r9,r3,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-1384
	r11.s64 = r11.s64 + -1384;
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// lwz r10,-1832(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -1832);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lfs f13,420(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 420);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,8252(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8252);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f13,396(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 396);
	ctx.f13.f64 = double(temp.f32);
	// lfs f29,1496(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1496);
	f29.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fadds f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f0,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,3112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	f31.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// fsubs f30,f0,f31
	f30.f64 = double(float(f0.f64 - f31.f64));
	// beq cr6,0x820b7be0
	if (cr6.getEQ()) goto loc_820B7BE0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// bl 0x820ce1f0
	sub_820CE1F0(ctx, base);
loc_820B7BE0:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// bl 0x820ce1f0
	sub_820CE1F0(ctx, base);
	// addi r7,r1,112
	ctx.r7.s64 = ctx.r1.s64 + 112;
	// lfs f2,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f1,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// fmr f3,f29
	ctx.f3.f64 = f29.f64;
	// bl 0x8210fec0
	sub_8210FEC0(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x823ae348
	sub_823AE348(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b7c24
	if (cr6.getEQ()) goto loc_820B7C24;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r25,8316(r11)
	PPC_STORE_U32(r11.u32 + 8316, r25.u32);
loc_820B7C24:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lfs f4,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f4.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f3,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f3.f64 = double(temp.f32);
	// fmr f6,f31
	ctx.f6.f64 = f31.f64;
	// fmr f5,f30
	ctx.f5.f64 = f30.f64;
	// lfs f2,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f8,2776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	ctx.f8.f64 = double(temp.f32);
	// lfs f7,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f7.f64 = double(temp.f32);
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b7cfc
	if (cr6.getEQ()) goto loc_820B7CFC;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// lfs f2,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f1,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// fmr f5,f31
	ctx.f5.f64 = f31.f64;
	// fmr f4,f30
	ctx.f4.f64 = f30.f64;
	// fmr f3,f29
	ctx.f3.f64 = f29.f64;
	// bl 0x821126c0
	sub_821126C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x820b7cfc
	if (!cr6.getLT()) goto loc_820B7CFC;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f13,420(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 420);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15168(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15168);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// beq cr6,0x820b7cac
	if (cr6.getEQ()) goto loc_820B7CAC;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bge cr6,0x820b7cfc
	if (!cr6.getLT()) goto loc_820B7CFC;
loc_820B7CAC:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x823ae350
	sub_823AE350(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b7cec
	if (!cr6.getEQ()) goto loc_820B7CEC;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f2,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// fmr f3,f29
	ctx.f3.f64 = f29.f64;
	// lfs f1,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// lfs f13,1464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1464);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15344(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15344);
	f0.f64 = double(temp.f32);
	// fadds f4,f13,f0
	ctx.f4.f64 = double(float(ctx.f13.f64 + f0.f64));
	// bl 0x82110378
	sub_82110378(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x820b7cfc
	if (!cr6.getLT()) goto loc_820B7CFC;
loc_820B7CEC:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// li r25,1
	r25.s64 = 1;
	// stw r11,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r11.u32);
	// b 0x820b7d3c
	goto loc_820B7D3C;
loc_820B7CFC:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1828(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1828);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b7d3c
	if (!cr6.getEQ()) goto loc_820B7D3C;
	// lis r11,-32010
	r11.s64 = -2097807360;
	// lwz r11,21268(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 21268);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b7d3c
	if (cr6.getEQ()) goto loc_820B7D3C;
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// bne cr6,0x820b7d3c
	if (!cr6.getEQ()) goto loc_820B7D3C;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lbz r10,3(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 3);
	// cmplwi cr6,r10,45
	cr6.compare<uint32_t>(ctx.r10.u32, 45, xer);
	// bne cr6,0x820b7d3c
	if (!cr6.getEQ()) goto loc_820B7D3C;
	// stw r11,-1832(r28)
	PPC_STORE_U32(r28.u32 + -1832, r11.u32);
loc_820B7D3C:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// bl 0x820ce1f0
	sub_820CE1F0(ctx, base);
	// lwz r3,-1832(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + -1832);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820b7d60
	if (cr6.getEQ()) goto loc_820B7D60;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820ce1f0
	sub_820CE1F0(ctx, base);
loc_820B7D60:
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_820B7D78"))) PPC_WEAK_FUNC(sub_820B7D78);
PPC_FUNC_IMPL(__imp__sub_820B7D78) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// bl 0x8210f8f0
	sub_8210F8F0(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820b7af0
	sub_820B7AF0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b7ddc
	if (cr6.getEQ()) goto loc_820B7DDC;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r9,1456(r10)
	PPC_STORE_U32(ctx.r10.u32 + 1456, ctx.r9.u32);
	// lfs f0,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// stfs f0,1460(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 1460, temp.u32);
	// lfs f0,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,1468(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1468, temp.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
loc_820B7DDC:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82110500
	sub_82110500(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820B7DF8"))) PPC_WEAK_FUNC(sub_820B7DF8);
PPC_FUNC_IMPL(__imp__sub_820B7DF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -72, f30.u64);
	// stfd f31,-64(r1)
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// bl 0x820c9b90
	sub_820C9B90(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// lfs f12,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lfs f11,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f11.f64 = double(temp.f32);
	// addi r9,r9,-1384
	ctx.r9.s64 = ctx.r9.s64 + -1384;
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// lfs f0,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// fsubs f31,f12,f0
	f31.f64 = double(float(ctx.f12.f64 - f0.f64));
	// lfs f13,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f13.f64 = double(temp.f32);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// fsubs f30,f11,f13
	f30.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// lwzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lfs f0,1496(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 1496);
	f0.f64 = double(temp.f32);
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// lfs f0,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// stfs f0,116(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// lfs f0,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	f0.f64 = double(temp.f32);
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// lfs f0,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lfs f0,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,100(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// lfs f0,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// lfs f0,8(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f31,88(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stfs f30,92(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stfs f0,108(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// bl 0x8210aa98
	sub_8210AA98(ctx, base);
	// fmuls f11,f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = double(float(ctx.f1.f64 * f31.f64));
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fmuls f10,f1,f30
	ctx.f10.f64 = double(float(ctx.f1.f64 * f30.f64));
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// lfs f13,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,12900(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12900);
	f0.f64 = double(temp.f32);
	// lfs f12,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f31,f11,f0,f13
	f31.f64 = double(float(ctx.f11.f64 * f0.f64 + ctx.f13.f64));
	// stfs f31,128(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// fmadds f30,f10,f0,f12
	f30.f64 = double(float(ctx.f10.f64 * f0.f64 + ctx.f12.f64));
	// stfs f30,136(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// bl 0x820b7af0
	sub_820B7AF0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b7f20
	if (cr6.getEQ()) goto loc_820B7F20;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,1456(r11)
	PPC_STORE_U32(r11.u32 + 1456, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f31,1460(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1460, temp.u32);
	// stfs f30,1468(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1468, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f30,-72(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
loc_820B7F20:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82110500
	sub_82110500(ctx, base);
	// lfs f0,0(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f13,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bne cr6,0x820b7f90
	if (!cr6.getEQ()) goto loc_820B7F90;
	// lfs f0,4(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 4);
	f0.f64 = double(temp.f32);
	// lfs f13,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bne cr6,0x820b7f90
	if (!cr6.getEQ()) goto loc_820B7F90;
	// lfs f0,8(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 8);
	f0.f64 = double(temp.f32);
	// lfs f13,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bne cr6,0x820b7f90
	if (!cr6.getEQ()) goto loc_820B7F90;
	// lfs f0,0(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f13,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bne cr6,0x820b7f90
	if (!cr6.getEQ()) goto loc_820B7F90;
	// lfs f0,4(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 4);
	f0.f64 = double(temp.f32);
	// lfs f13,4(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bne cr6,0x820b7f90
	if (!cr6.getEQ()) goto loc_820B7F90;
	// lfs f0,8(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 8);
	f0.f64 = double(temp.f32);
	// li r3,-1
	ctx.r3.s64 = -1;
	// lfs f13,8(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// beq cr6,0x820b7f94
	if (cr6.getEQ()) goto loc_820B7F94;
loc_820B7F90:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820B7F94:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820B7FA8"))) PPC_WEAK_FUNC(sub_820B7FA8);
PPC_FUNC_IMPL(__imp__sub_820B7FA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f30,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f30.u64);
	// stfd f31,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lfs f0,0(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f13,0(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,0(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// lfs f8,8(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	ctx.f8.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f11,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f11.f64 = double(temp.f32);
	// lfs f10,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f9,f12,f11
	ctx.f9.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fsubs f8,f8,f10
	ctx.f8.f64 = double(float(ctx.f8.f64 - ctx.f10.f64));
	// bne cr6,0x820b8008
	if (!cr6.getEQ()) goto loc_820B8008;
	// lfs f12,8(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// lfs f7,8(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	ctx.f7.f64 = double(temp.f32);
	// fcmpu cr6,f12,f7
	cr6.compare(ctx.f12.f64, ctx.f7.f64);
	// bne cr6,0x820b8008
	if (!cr6.getEQ()) goto loc_820B8008;
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x820b8088
	goto loc_820B8088;
loc_820B8008:
	// fsubs f0,f13,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// lfs f12,8(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,8(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// fmuls f12,f0,f0
	ctx.f12.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f12,f13,f13,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + ctx.f12.f64));
	// fsqrts f7,f12
	ctx.f7.f64 = double(float(sqrt(ctx.f12.f64)));
	// lfs f12,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f12.f64 = double(temp.f32);
	// fdivs f12,f12,f7
	ctx.f12.f64 = double(float(ctx.f12.f64 / ctx.f7.f64));
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f12,f0,f9
	ctx.f12.f64 = double(float(f0.f64 * ctx.f9.f64));
	// fmadds f12,f13,f8,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f8.f64 + ctx.f12.f64));
	// fmadds f31,f12,f0,f11
	f31.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f11.f64));
	// stfs f31,88(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// fmadds f30,f12,f13,f10
	f30.f64 = double(float(ctx.f12.f64 * ctx.f13.f64 + ctx.f10.f64));
	// stfs f30,96(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x820b7af0
	sub_820B7AF0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b8084
	if (cr6.getEQ()) goto loc_820B8084;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,1456(r11)
	PPC_STORE_U32(r11.u32 + 1456, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f31,1460(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1460, temp.u32);
	// stfs f30,1468(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1468, temp.u32);
	// b 0x820b8088
	goto loc_820B8088;
loc_820B8084:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820B8088:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f30,-32(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// lfd f31,-24(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820B80A8"))) PPC_WEAK_FUNC(sub_820B80A8);
PPC_FUNC_IMPL(__imp__sub_820B80A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f30.u64);
	// stfd f31,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// bl 0x820c9b90
	sub_820C9B90(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f12,0(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// addi r10,r11,-1384
	ctx.r10.s64 = r11.s64 + -1384;
	// fsubs f8,f11,f12
	ctx.f8.f64 = double(float(ctx.f11.f64 - ctx.f12.f64));
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f9,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f9.f64 = double(temp.f32);
	// lfs f10,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f7,f10,f9
	ctx.f7.f64 = double(float(ctx.f10.f64 - ctx.f9.f64));
	// lfs f0,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// lfs f13,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f13.f64 = double(temp.f32);
	// rlwinm r11,r3,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// fsubs f5,f9,f13
	ctx.f5.f64 = double(float(ctx.f9.f64 - ctx.f13.f64));
	// fsubs f6,f12,f0
	ctx.f6.f64 = double(float(ctx.f12.f64 - f0.f64));
	// fmuls f8,f8,f8
	ctx.f8.f64 = double(float(ctx.f8.f64 * ctx.f8.f64));
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// lfs f9,1496(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1496);
	ctx.f9.f64 = double(temp.f32);
	// fmuls f9,f9,f9
	ctx.f9.f64 = double(float(ctx.f9.f64 * ctx.f9.f64));
	// fmadds f8,f7,f7,f8
	ctx.f8.f64 = double(float(ctx.f7.f64 * ctx.f7.f64 + ctx.f8.f64));
	// fcmpu cr6,f8,f9
	cr6.compare(ctx.f8.f64, ctx.f9.f64);
	// bgt cr6,0x820b81c8
	if (cr6.getGT()) goto loc_820B81C8;
	// fcmpu cr6,f11,f0
	cr6.compare(ctx.f11.f64, f0.f64);
	// bne cr6,0x820b813c
	if (!cr6.getEQ()) goto loc_820B813C;
	// fcmpu cr6,f10,f13
	cr6.compare(ctx.f10.f64, ctx.f13.f64);
	// beq cr6,0x820b8288
	if (cr6.getEQ()) goto loc_820B8288;
loc_820B813C:
	// fsubs f10,f10,f13
	ctx.fpscr.disableFlushMode();
	ctx.f10.f64 = double(float(ctx.f10.f64 - ctx.f13.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f12,f11,f0
	ctx.f12.f64 = double(float(ctx.f11.f64 - f0.f64));
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// fneg f11,f10
	ctx.f11.u64 = ctx.f10.u64 ^ 0x8000000000000000;
	// fmuls f10,f11,f11
	ctx.f10.f64 = double(float(ctx.f11.f64 * ctx.f11.f64));
	// fmadds f10,f12,f12,f10
	ctx.f10.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + ctx.f10.f64));
	// fsqrts f9,f10
	ctx.f9.f64 = double(float(sqrt(ctx.f10.f64)));
	// lfs f10,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f10.f64 = double(temp.f32);
	// fdivs f10,f10,f9
	ctx.f10.f64 = double(float(ctx.f10.f64 / ctx.f9.f64));
	// fmuls f11,f10,f11
	ctx.f11.f64 = double(float(ctx.f10.f64 * ctx.f11.f64));
	// fmuls f12,f10,f12
	ctx.f12.f64 = double(float(ctx.f10.f64 * ctx.f12.f64));
	// fmuls f10,f11,f6
	ctx.f10.f64 = double(float(ctx.f11.f64 * ctx.f6.f64));
	// fmadds f10,f12,f5,f10
	ctx.f10.f64 = double(float(ctx.f12.f64 * ctx.f5.f64 + ctx.f10.f64));
	// fmuls f11,f10,f11
	ctx.f11.f64 = double(float(ctx.f10.f64 * ctx.f11.f64));
	// fmuls f12,f10,f12
	ctx.f12.f64 = double(float(ctx.f10.f64 * ctx.f12.f64));
	// fadds f31,f0,f11
	f31.f64 = double(float(f0.f64 + ctx.f11.f64));
	// stfs f31,88(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// fadds f30,f13,f12
	f30.f64 = double(float(ctx.f13.f64 + ctx.f12.f64));
	// stfs f30,96(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x820b7af0
	sub_820B7AF0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b8288
	if (cr6.getEQ()) goto loc_820B8288;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,1456(r11)
	PPC_STORE_U32(r11.u32 + 1456, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f31,1460(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1460, temp.u32);
	// stfs f30,1468(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1468, temp.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f30,-56(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820B81C8:
	// lfs f11,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f12,f11,f12
	ctx.f12.f64 = double(float(ctx.f11.f64 - ctx.f12.f64));
	// lfs f10,8(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	ctx.f10.f64 = double(temp.f32);
	// lfs f8,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f8.f64 = double(temp.f32);
	// fsubs f8,f10,f8
	ctx.f8.f64 = double(float(ctx.f10.f64 - ctx.f8.f64));
	// fmuls f12,f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f12.f64));
	// fmadds f12,f8,f8,f12
	ctx.f12.f64 = double(float(ctx.f8.f64 * ctx.f8.f64 + ctx.f12.f64));
	// fcmpu cr6,f12,f9
	cr6.compare(ctx.f12.f64, ctx.f9.f64);
	// bgt cr6,0x820b8288
	if (cr6.getGT()) goto loc_820B8288;
	// fcmpu cr6,f11,f0
	cr6.compare(ctx.f11.f64, f0.f64);
	// bne cr6,0x820b81fc
	if (!cr6.getEQ()) goto loc_820B81FC;
	// fcmpu cr6,f10,f13
	cr6.compare(ctx.f10.f64, ctx.f13.f64);
	// beq cr6,0x820b8288
	if (cr6.getEQ()) goto loc_820B8288;
loc_820B81FC:
	// fsubs f10,f10,f13
	ctx.fpscr.disableFlushMode();
	ctx.f10.f64 = double(float(ctx.f10.f64 - ctx.f13.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f12,f11,f0
	ctx.f12.f64 = double(float(ctx.f11.f64 - f0.f64));
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// fneg f11,f10
	ctx.f11.u64 = ctx.f10.u64 ^ 0x8000000000000000;
	// fmuls f10,f11,f11
	ctx.f10.f64 = double(float(ctx.f11.f64 * ctx.f11.f64));
	// fmadds f10,f12,f12,f10
	ctx.f10.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + ctx.f10.f64));
	// fsqrts f9,f10
	ctx.f9.f64 = double(float(sqrt(ctx.f10.f64)));
	// lfs f10,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f10.f64 = double(temp.f32);
	// fdivs f10,f10,f9
	ctx.f10.f64 = double(float(ctx.f10.f64 / ctx.f9.f64));
	// fmuls f11,f10,f11
	ctx.f11.f64 = double(float(ctx.f10.f64 * ctx.f11.f64));
	// fmuls f12,f10,f12
	ctx.f12.f64 = double(float(ctx.f10.f64 * ctx.f12.f64));
	// fmuls f10,f11,f6
	ctx.f10.f64 = double(float(ctx.f11.f64 * ctx.f6.f64));
	// fmadds f10,f12,f5,f10
	ctx.f10.f64 = double(float(ctx.f12.f64 * ctx.f5.f64 + ctx.f10.f64));
	// fmuls f11,f10,f11
	ctx.f11.f64 = double(float(ctx.f10.f64 * ctx.f11.f64));
	// fmuls f12,f10,f12
	ctx.f12.f64 = double(float(ctx.f10.f64 * ctx.f12.f64));
	// fadds f31,f0,f11
	f31.f64 = double(float(f0.f64 + ctx.f11.f64));
	// stfs f31,88(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// fadds f30,f13,f12
	f30.f64 = double(float(ctx.f13.f64 + ctx.f12.f64));
	// stfs f30,96(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x820b7af0
	sub_820B7AF0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b8288
	if (cr6.getEQ()) goto loc_820B8288;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,1456(r11)
	PPC_STORE_U32(r11.u32 + 1456, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f31,1460(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1460, temp.u32);
	// stfs f30,1468(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1468, temp.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f30,-56(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820B8288:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820B82A0"))) PPC_WEAK_FUNC(sub_820B82A0);
PPC_FUNC_IMPL(__imp__sub_820B82A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r26,-32014
	r26.s64 = -2098069504;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// li r9,2
	ctx.r9.s64 = 2;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// addi r10,r11,1460
	ctx.r10.s64 = r11.s64 + 1460;
	// lfs f0,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// stfs f0,1328(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1328, temp.u32);
	// lfs f0,1464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1464);
	f0.f64 = double(temp.f32);
	// stfs f0,1332(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1332, temp.u32);
	// lfs f0,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	f0.f64 = double(temp.f32);
	// stfs f0,1336(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1336, temp.u32);
	// lfs f0,0(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f12,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fadds f0,f0,f12
	f0.f64 = double(float(f0.f64 + ctx.f12.f64));
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// lfs f0,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	f0.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// lfs f13,8(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stw r11,-1780(r29)
	PPC_STORE_U32(r29.u32 + -1780, r11.u32);
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// stw r9,8316(r11)
	PPC_STORE_U32(r11.u32 + 8316, ctx.r9.u32);
	// lwz r3,-1832(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -1832);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820b84c4
	if (cr6.getEQ()) goto loc_820B84C4;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// bl 0x820cdfc8
	sub_820CDFC8(ctx, base);
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lwz r9,-1836(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + -1836);
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// beq cr6,0x820b83a8
	if (cr6.getEQ()) goto loc_820B83A8;
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r3,r11,1460
	ctx.r3.s64 = r11.s64 + 1460;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x820ce060
	sub_820CE060(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b83a4
	if (!cr6.getEQ()) goto loc_820B83A4;
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r3,r11,1460
	ctx.r3.s64 = r11.s64 + 1460;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lfs f1,1496(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1496);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820d7d78
	sub_820D7D78(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b83a4
	if (!cr6.getEQ()) goto loc_820B83A4;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r11,-1828(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1828);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b84c4
	if (cr6.getEQ()) goto loc_820B84C4;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1832(r31)
	PPC_STORE_U32(r31.u32 + -1832, r11.u32);
	// stw r11,-1828(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1828, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// b 0x820b84c0
	goto loc_820B84C0;
loc_820B83A4:
	// lwz r9,-1836(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + -1836);
loc_820B83A8:
	// lwz r11,-1832(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1832);
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// lwz r31,8(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r8,20(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r7,24(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// lwz r10,4(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// lwz r30,4(r7)
	r30.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// lfs f13,16(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// stw r11,-1828(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1828, r11.u32);
	// lfs f12,12(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// fsubs f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lfs f0,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	f0.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// beq cr6,0x820b8414
	if (cr6.getEQ()) goto loc_820B8414;
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// addi r4,r31,132
	ctx.r4.s64 = r31.s64 + 132;
	// lwz r5,128(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// addi r3,r11,1460
	ctx.r3.s64 = r11.s64 + 1460;
	// bl 0x820ce060
	sub_820CE060(ctx, base);
	// lwz r9,-1836(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + -1836);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b8434
	if (cr6.getEQ()) goto loc_820B8434;
loc_820B8414:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lfs f13,12(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,16(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f13,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1780(r29)
	PPC_STORE_U32(r29.u32 + -1780, r11.u32);
	// fmadds f31,f0,f13,f31
	f31.f64 = double(float(f0.f64 * ctx.f13.f64 + f31.f64));
loc_820B8434:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// bne cr6,0x820b8474
	if (!cr6.getEQ()) goto loc_820B8474;
	// lfs f12,-1824(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -1824);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f12,f31
	cr6.compare(ctx.f12.f64, f31.f64);
	// bge cr6,0x820b8474
	if (!cr6.getLT()) goto loc_820B8474;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f0,-6368(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,2948(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2948);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f13,f12
	f0.f64 = double(float(f0.f64 * ctx.f13.f64 + ctx.f12.f64));
	// stfs f0,-1824(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1824, temp.u32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x820b872c
	if (!cr6.getGT()) goto loc_820B872C;
	// stfs f31,-1824(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + -1824, temp.u32);
	// b 0x820b84c4
	goto loc_820B84C4;
loc_820B8474:
	// stfs f31,-1824(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + -1824, temp.u32);
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// bne cr6,0x820b84c4
	if (!cr6.getEQ()) goto loc_820B84C4;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r10,-1888(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1888);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820b84b4
	if (!cr6.getEQ()) goto loc_820B84B4;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,2776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	f0.f64 = double(temp.f32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f13,-3004(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -3004);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,15348(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15348);
	f0.f64 = double(temp.f32);
	// fnmsubs f0,f13,f0,f31
	f0.f64 = double(float(-(ctx.f13.f64 * f0.f64 - f31.f64)));
	// b 0x820b84c0
	goto loc_820B84C0;
loc_820B84B4:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,15348(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15348);
	f0.f64 = double(temp.f32);
	// fsubs f0,f31,f0
	f0.f64 = double(float(f31.f64 - f0.f64));
loc_820B84C0:
	// stfs f0,-1824(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1824, temp.u32);
loc_820B84C4:
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x820b7d78
	sub_820B7D78(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b85a0
	if (!cr6.getEQ()) goto loc_820B85A0;
	// addi r7,r1,136
	ctx.r7.s64 = ctx.r1.s64 + 136;
	// addi r6,r1,152
	ctx.r6.s64 = ctx.r1.s64 + 152;
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x820b7df8
	sub_820B7DF8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820b8570
	if (!cr6.getEQ()) goto loc_820B8570;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b85a0
	if (!cr6.getEQ()) goto loc_820B85A0;
	// addi r7,r1,168
	ctx.r7.s64 = ctx.r1.s64 + 168;
	// addi r6,r1,184
	ctx.r6.s64 = ctx.r1.s64 + 184;
	// addi r5,r1,136
	ctx.r5.s64 = ctx.r1.s64 + 136;
	// addi r4,r1,152
	ctx.r4.s64 = ctx.r1.s64 + 152;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x820b7df8
	sub_820B7DF8(ctx, base);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x820b85a0
	if (cr6.getEQ()) goto loc_820B85A0;
	// addi r5,r1,136
	ctx.r5.s64 = ctx.r1.s64 + 136;
	// addi r4,r1,152
	ctx.r4.s64 = ctx.r1.s64 + 152;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x820b7fa8
	sub_820B7FA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bgt cr6,0x820b85a0
	if (cr6.getGT()) goto loc_820B85A0;
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x820b7fa8
	sub_820B7FA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bgt cr6,0x820b85a0
	if (cr6.getGT()) goto loc_820B85A0;
	// addi r5,r1,136
	ctx.r5.s64 = ctx.r1.s64 + 136;
	// addi r4,r1,152
	ctx.r4.s64 = ctx.r1.s64 + 152;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x820b80a8
	sub_820B80A8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b85a0
	if (!cr6.getEQ()) goto loc_820B85A0;
	// b 0x820b8590
	goto loc_820B8590;
loc_820B8570:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x820b85a0
	if (cr6.getEQ()) goto loc_820B85A0;
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x820b7fa8
	sub_820B7FA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bgt cr6,0x820b85a0
	if (cr6.getGT()) goto loc_820B85A0;
loc_820B8590:
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x820b80a8
	sub_820B80A8(ctx, base);
loc_820B85A0:
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// lfs f2,1468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// lwz r3,1456(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210ee60
	sub_8210EE60(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b86c4
	if (!cr6.getEQ()) goto loc_820B86C4;
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// li r27,0
	r27.s64 = 0;
	// lis r28,-32010
	r28.s64 = -2097807360;
	// lwz r29,1456(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 1456);
loc_820B85CC:
	// lhz r11,6(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 6);
	// li r30,0
	r30.s64 = 0;
	// rlwinm r11,r11,20,12,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0xFFFFF;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820b8608
	if (!cr6.getGT()) goto loc_820B8608;
	// addi r10,r29,14
	ctx.r10.s64 = r29.s64 + 14;
loc_820B85E4:
	// lhz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// rlwinm r9,r9,0,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFF0;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820b85f8
	if (cr6.getEQ()) goto loc_820B85F8;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
loc_820B85F8:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b85e4
	if (!cr6.getEQ()) goto loc_820B85E4;
loc_820B8608:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lhz r10,6(r29)
	ctx.r10.u64 = PPC_LOAD_U16(r29.u32 + 6);
	// twllei r30,0
	// add r9,r11,r31
	ctx.r9.u64 = r11.u64 + r31.u64;
	// rlwinm r10,r10,20,12,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 20) & 0xFFFFF;
	// divwu r8,r9,r30
	ctx.r8.u32 = ctx.r9.u32 / r30.u32;
	// li r11,0
	r11.s64 = 0;
	// mullw r8,r8,r30
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(r30.s32);
	// subf r7,r8,r9
	ctx.r7.s64 = ctx.r9.s64 - ctx.r8.s64;
	// li r8,0
	ctx.r8.s64 = 0;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820b8690
	if (!cr6.getGT()) goto loc_820B8690;
	// addi r9,r29,14
	ctx.r9.s64 = r29.s64 + 14;
loc_820B8648:
	// lhz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// rlwinm r6,r6,0,0,27
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0xFFFFFFF0;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x820b8664
	if (cr6.getEQ()) goto loc_820B8664;
	// cmpw cr6,r8,r7
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r7.s32, xer);
	// beq cr6,0x820b8678
	if (cr6.getEQ()) goto loc_820B8678;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_820B8664:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r9,r9,8
	ctx.r9.s64 = ctx.r9.s64 + 8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x820b8648
	if (cr6.getLT()) goto loc_820B8648;
	// b 0x820b8690
	goto loc_820B8690;
loc_820B8678:
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lhz r11,14(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// rotlwi r10,r11,3
	ctx.r10.u64 = __builtin_rotateleft32(r11.u32, 3);
	// lwz r11,21276(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 21276);
	// add r29,r10,r11
	r29.u64 = ctx.r10.u64 + r11.u64;
loc_820B8690:
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lfs f2,1468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210ee60
	sub_8210EE60(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b86bc
	if (!cr6.getEQ()) goto loc_820B86BC;
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// cmpwi cr6,r27,5
	cr6.compare<int32_t>(r27.s32, 5, xer);
	// blt cr6,0x820b85cc
	if (cr6.getLT()) goto loc_820B85CC;
	// b 0x820b86c4
	goto loc_820B86C4;
loc_820B86BC:
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// stw r29,1456(r11)
	PPC_STORE_U32(r11.u32 + 1456, r29.u32);
loc_820B86C4:
	// lwz r31,-1364(r26)
	r31.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// lhz r4,8324(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 8324);
	// lwz r3,428(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 428);
	// bl 0x820cebd0
	sub_820CEBD0(ctx, base);
	// li r10,-1
	ctx.r10.s64 = -1;
	// lwz r11,428(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 428);
	// sth r10,8324(r31)
	PPC_STORE_U16(r31.u32 + 8324, ctx.r10.u16);
	// lwz r3,8(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820b86f4
	if (cr6.getEQ()) goto loc_820B86F4;
	// bl 0x8211e6f8
	sub_8211E6F8(ctx, base);
	// b 0x820b8710
	goto loc_820B8710;
loc_820B86F4:
	// lwz r10,1456(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1456);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b8710
	if (cr6.getEQ()) goto loc_820B8710;
	// lbz r4,3(r10)
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r10.u32 + 3);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// sth r4,8324(r31)
	PPC_STORE_U16(r31.u32 + 8324, ctx.r4.u16);
	// bl 0x820cead0
	sub_820CEAD0(ctx, base);
loc_820B8710:
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// lwz r10,1456(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820b872c
	if (cr6.getEQ()) goto loc_820B872C;
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// lbz r3,3(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// bl 0x820cc590
	sub_820CC590(ctx, base);
loc_820B872C:
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820B8738"))) PPC_WEAK_FUNC(sub_820B8738);
PPC_FUNC_IMPL(__imp__sub_820B8738) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed548
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b90d8
	if (cr6.getEQ()) goto loc_820B90D8;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// li r26,1
	r26.s64 = 1;
	// cmpwi cr6,r3,30
	cr6.compare<int32_t>(ctx.r3.s32, 30, xer);
	// beq cr6,0x820b87f8
	if (cr6.getEQ()) goto loc_820B87F8;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpwi cr6,r3,23
	cr6.compare<int32_t>(ctx.r3.s32, 23, xer);
	// beq cr6,0x820b87f8
	if (cr6.getEQ()) goto loc_820B87F8;
	// mr r23,r30
	r23.u64 = r30.u64;
	// li r29,17
	r29.s64 = 17;
loc_820B8790:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r24,2
	r24.s64 = 2;
	// lwz r9,740(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 740);
	// lwz r10,-6384(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6384);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stw r10,740(r11)
	PPC_STORE_U32(r11.u32 + 740, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 736);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,736(r11)
	PPC_STORE_U32(r11.u32 + 736, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820b8890
	if (!cr6.getEQ()) goto loc_820B8890;
	// stw r30,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 736);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820b8804
	if (!cr6.getEQ()) goto loc_820B8804;
	// li r4,84
	ctx.r4.s64 = 84;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d48
	sub_820A0D48(ctx, base);
	// b 0x820b888c
	goto loc_820B888C;
loc_820B87F8:
	// mr r23,r26
	r23.u64 = r26.u64;
	// li r29,35
	r29.s64 = 35;
	// b 0x820b8790
	goto loc_820B8790;
loc_820B8804:
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x820b8824
	if (!cr6.getEQ()) goto loc_820B8824;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x820b8890
	if (cr6.getEQ()) goto loc_820B8890;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d48
	sub_820A0D48(ctx, base);
	// b 0x820b888c
	goto loc_820B888C;
loc_820B8824:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// cmpwi cr6,r3,84
	cr6.compare<int32_t>(ctx.r3.s32, 84, xer);
	// bne cr6,0x820b888c
	if (!cr6.getEQ()) goto loc_820B888C;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b888c
	if (cr6.getEQ()) goto loc_820B888C;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x820b8868
	if (cr6.getEQ()) goto loc_820B8868;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b888c
	if (!cr6.getEQ()) goto loc_820B888C;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b888c
	if (cr6.getEQ()) goto loc_820B888C;
loc_820B8868:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,740(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 740);
	// cmpw cr6,r10,r29
	cr6.compare<int32_t>(ctx.r10.s32, r29.s32, xer);
	// blt cr6,0x820b8890
	if (cr6.getLT()) goto loc_820B8890;
	// stw r24,744(r11)
	PPC_STORE_U32(r11.u32 + 744, r24.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r26,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
loc_820B888C:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B8890:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// lis r25,-32014
	r25.s64 = -2098069504;
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f28,2688(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f28.f64 = double(temp.f32);
	// bne cr6,0x820b8980
	if (!cr6.getEQ()) goto loc_820B8980;
	// stw r30,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 736);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f31,3112(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3112);
	f31.f64 = double(temp.f32);
	// bne cr6,0x820b894c
	if (!cr6.getEQ()) goto loc_820B894C;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x820a64c0
	sub_820A64C0(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x820a5560
	sub_820A5560(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,4
	ctx.r3.s64 = 4;
	// lwz r10,4736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4736);
	// ori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 | 1;
	// stw r10,4736(r11)
	PPC_STORE_U32(r11.u32 + 4736, ctx.r10.u32);
	// lwz r11,-1688(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -1688);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// stw r11,-1688(r25)
	PPC_STORE_U32(r25.u32 + -1688, r11.u32);
	// bl 0x820df8b0
	sub_820DF8B0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,828(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 828);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b8924
	if (cr6.getEQ()) goto loc_820B8924;
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x820b8924
	if (cr6.getEQ()) goto loc_820B8924;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x820b894c
	if (!cr6.getEQ()) goto loc_820B894C;
loc_820B8924:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820b11b0
	sub_820B11B0(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x820b8938
	if (!cr6.getLT()) goto loc_820B8938;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
loc_820B8938:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f28,820(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 820, temp.u32);
	// stfs f1,824(r11)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r11.u32 + 824, temp.u32);
	// stw r26,828(r11)
	PPC_STORE_U32(r11.u32 + 828, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B894C:
	// lfs f0,824(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 824);
	f0.f64 = double(temp.f32);
	// lfs f13,820(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 820);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x820b8980
	if (!cr6.getLT()) goto loc_820B8980;
	// li r10,3
	ctx.r10.s64 = 3;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r26,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// bl 0x820b17c0
	sub_820B17C0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B8980:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f29,3060(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 3060);
	f29.f64 = double(temp.f32);
	// lfs f31,2948(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2948);
	f31.f64 = double(temp.f32);
	// lfs f30,2956(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2956);
	f30.f64 = double(temp.f32);
	// bne cr6,0x820b8ab0
	if (!cr6.getEQ()) goto loc_820B8AB0;
	// lwz r10,736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 736);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820b8a64
	if (!cr6.getEQ()) goto loc_820B8A64;
	// lwz r10,836(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 836);
	// fmr f11,f30
	ctx.f11.f64 = f30.f64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b89d4
	if (cr6.getEQ()) goto loc_820B89D4;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// beq cr6,0x820b89d4
	if (cr6.getEQ()) goto loc_820B89D4;
	// lfs f0,892(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 892);
	f0.f64 = double(temp.f32);
	// fsubs f0,f31,f0
	f0.f64 = double(float(f31.f64 - f0.f64));
	// fmuls f11,f0,f29
	ctx.f11.f64 = double(float(f0.f64 * f29.f64));
loc_820B89D4:
	// lwz r10,828(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 828);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b89f0
	if (cr6.getEQ()) goto loc_820B89F0;
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x820b89f0
	if (cr6.getEQ()) goto loc_820B89F0;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x820b8a34
	if (!cr6.getEQ()) goto loc_820B8A34;
loc_820B89F0:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820b11b0
	sub_820B11B0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2952(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f0.f64 = double(temp.f32);
	// fsubs f13,f11,f0
	ctx.f13.f64 = double(float(ctx.f11.f64 - f0.f64));
	// fcmpu cr6,f1,f13
	cr6.compare(ctx.f1.f64, ctx.f13.f64);
	// bge cr6,0x820b8a10
	if (!cr6.getLT()) goto loc_820B8A10;
	// fmr f1,f13
	ctx.f1.f64 = ctx.f13.f64;
loc_820B8A10:
	// fadds f0,f1,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64 + f0.f64));
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f28,820(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 820, temp.u32);
	// stfs f1,824(r11)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r11.u32 + 824, temp.u32);
	// stw r26,828(r11)
	PPC_STORE_U32(r11.u32 + 828, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fcmpu cr6,f11,f0
	cr6.compare(ctx.f11.f64, f0.f64);
	// bge cr6,0x820b8a34
	if (!cr6.getLT()) goto loc_820B8A34;
	// fmr f11,f0
	ctx.f11.f64 = f0.f64;
loc_820B8A34:
	// lwz r10,836(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 836);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820b8a48
	if (!cr6.getEQ()) goto loc_820B8A48;
	// fdivs f0,f31,f11
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 / ctx.f11.f64));
	// b 0x820b8a54
	goto loc_820B8A54;
loc_820B8A48:
	// lfs f0,892(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 892);
	f0.f64 = double(temp.f32);
	// fsubs f0,f31,f0
	f0.f64 = double(float(f31.f64 - f0.f64));
	// fdivs f0,f0,f11
	f0.f64 = double(float(f0.f64 / ctx.f11.f64));
loc_820B8A54:
	// stfs f0,848(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 848, temp.u32);
	// stw r26,836(r11)
	PPC_STORE_U32(r11.u32 + 836, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f11,844(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r11.u32 + 844, temp.u32);
loc_820B8A64:
	// lwz r10,836(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 836);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b8a78
	if (cr6.getEQ()) goto loc_820B8A78;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x820b8a8c
	if (!cr6.getEQ()) goto loc_820B8A8C;
loc_820B8A78:
	// lwz r10,828(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 828);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b8a94
	if (cr6.getEQ()) goto loc_820B8A94;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// beq cr6,0x820b8a94
	if (cr6.getEQ()) goto loc_820B8A94;
loc_820B8A8C:
	// stw r26,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r26.u32);
	// b 0x820b8aac
	goto loc_820B8AAC;
loc_820B8A94:
	// li r10,4
	ctx.r10.s64 = 4;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r26,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
loc_820B8AAC:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B8AB0:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// lis r27,-31994
	r27.s64 = -2096758784;
	// lis r28,-31994
	r28.s64 = -2096758784;
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r29,r10,15352
	r29.s64 = ctx.r10.s64 + 15352;
	// bne cr6,0x820b8b4c
	if (!cr6.getEQ()) goto loc_820B8B4C;
	// lwz r10,736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 736);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820b8b08
	if (!cr6.getEQ()) goto loc_820B8B08;
	// lwz r11,832(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 832);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820b8b08
	if (cr6.getEQ()) goto loc_820B8B08;
	// li r8,3381
	ctx.r8.s64 = 3381;
	// lwz r6,19944(r28)
	ctx.r6.u64 = PPC_LOAD_U32(r28.u32 + 19944);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// lwz r3,19936(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 19936);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,237
	ctx.r4.s64 = 237;
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,832(r11)
	PPC_STORE_U32(r11.u32 + 832, r30.u32);
loc_820B8B08:
	// bl 0x820b1548
	sub_820B1548(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,4708(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4708);
	f0.f64 = double(temp.f32);
	// lfs f13,4712(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4712);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b8b28
	if (!cr6.getLT()) goto loc_820B8B28;
	// stw r26,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r26.u32);
	// b 0x820b8b48
	goto loc_820B8B48;
loc_820B8B28:
	// li r10,5
	ctx.r10.s64 = 5;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r26,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r26,832(r11)
	PPC_STORE_U32(r11.u32 + 832, r26.u32);
loc_820B8B48:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B8B4C:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,5
	cr6.compare<int32_t>(ctx.r10.s32, 5, xer);
	// bne cr6,0x820b8b60
	if (!cr6.getEQ()) goto loc_820B8B60;
	// stw r26,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B8B60:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,12
	cr6.compare<int32_t>(ctx.r10.s32, 12, xer);
	// bne cr6,0x820b8bb8
	if (!cr6.getEQ()) goto loc_820B8BB8;
	// stw r26,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 736);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// ble cr6,0x820b8bb8
	if (!cr6.getGT()) goto loc_820B8BB8;
	// li r10,6
	ctx.r10.s64 = 6;
	// li r8,3421
	ctx.r8.s64 = 3421;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,238
	ctx.r4.s64 = 238;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r26,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// lwz r6,19944(r28)
	ctx.r6.u64 = PPC_LOAD_U32(r28.u32 + 19944);
	// lwz r3,19936(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B8BB8:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,6
	cr6.compare<int32_t>(ctx.r10.s32, 6, xer);
	// bne cr6,0x820b8c30
	if (!cr6.getEQ()) goto loc_820B8C30;
	// lwz r10,736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 736);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820b8bf4
	if (!cr6.getEQ()) goto loc_820B8BF4;
	// bl 0x820b15c8
	sub_820B15C8(ctx, base);
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// li r3,0
	ctx.r3.s64 = 0;
	// beq cr6,0x820b8bec
	if (cr6.getEQ()) goto loc_820B8BEC;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820a0d48
	sub_820A0D48(ctx, base);
	// b 0x820b8bf0
	goto loc_820B8BF0;
loc_820B8BEC:
	// bl 0x820a0d98
	sub_820A0D98(ctx, base);
loc_820B8BF0:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B8BF4:
	// lfs f0,4708(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4708);
	f0.f64 = double(temp.f32);
	// lfs f13,4712(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4712);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b8c0c
	if (!cr6.getLT()) goto loc_820B8C0C;
	// stw r26,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r26.u32);
	// b 0x820b8c2c
	goto loc_820B8C2C;
loc_820B8C0C:
	// li r10,7
	ctx.r10.s64 = 7;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r26,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r26,832(r11)
	PPC_STORE_U32(r11.u32 + 832, r26.u32);
loc_820B8C2C:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B8C30:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// li r29,8
	r29.s64 = 8;
	// cmpwi cr6,r10,7
	cr6.compare<int32_t>(ctx.r10.s32, 7, xer);
	// bne cr6,0x820b8cfc
	if (!cr6.getEQ()) goto loc_820B8CFC;
	// lwz r10,736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 736);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820b8cc8
	if (!cr6.getEQ()) goto loc_820B8CC8;
	// li r3,0
	ctx.r3.s64 = 0;
	// fmr f11,f30
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = f30.f64;
	// bl 0x820b11b0
	sub_820B11B0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,836(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 836);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b8c78
	if (cr6.getEQ()) goto loc_820B8C78;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// beq cr6,0x820b8c78
	if (cr6.getEQ()) goto loc_820B8C78;
	// lfs f0,892(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 892);
	f0.f64 = double(temp.f32);
	// fmuls f11,f0,f29
	ctx.f11.f64 = double(float(f0.f64 * f29.f64));
loc_820B8C78:
	// fadds f0,f11,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 + f31.f64));
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x820b8c88
	if (!cr6.getLT()) goto loc_820B8C88;
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
loc_820B8C88:
	// stfs f28,820(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 820, temp.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f1,824(r11)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r11.u32 + 824, temp.u32);
	// stw r24,828(r11)
	PPC_STORE_U32(r11.u32 + 828, r24.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,836(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 836);
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x820b8cb0
	if (!cr6.getEQ()) goto loc_820B8CB0;
	// fdivs f0,f31,f11
	f0.f64 = double(float(f31.f64 / ctx.f11.f64));
	// b 0x820b8cb8
	goto loc_820B8CB8;
loc_820B8CB0:
	// lfs f0,892(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 892);
	f0.f64 = double(temp.f32);
	// fdivs f0,f0,f11
	f0.f64 = double(float(f0.f64 / ctx.f11.f64));
loc_820B8CB8:
	// stfs f0,848(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 848, temp.u32);
	// stw r24,836(r11)
	PPC_STORE_U32(r11.u32 + 836, r24.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f11,844(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r11.u32 + 844, temp.u32);
loc_820B8CC8:
	// lwz r10,836(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 836);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b8ce4
	if (cr6.getEQ()) goto loc_820B8CE4;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// beq cr6,0x820b8ce4
	if (cr6.getEQ()) goto loc_820B8CE4;
	// stw r26,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r26.u32);
	// b 0x820b8cf8
	goto loc_820B8CF8;
loc_820B8CE4:
	// stw r29,744(r11)
	PPC_STORE_U32(r11.u32 + 744, r29.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r26,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
loc_820B8CF8:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B8CFC:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,8
	cr6.compare<int32_t>(ctx.r10.s32, 8, xer);
	// bne cr6,0x820b8e90
	if (!cr6.getEQ()) goto loc_820B8E90;
	// stw r30,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 736);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820b8da8
	if (!cr6.getEQ()) goto loc_820B8DA8;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpw cr6,r28,r3
	cr6.compare<int32_t>(r28.s32, ctx.r3.s32, xer);
	// beq cr6,0x820b8d5c
	if (cr6.getEQ()) goto loc_820B8D5C;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b8d5c
	if (cr6.getEQ()) goto loc_820B8D5C;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d48
	sub_820A0D48(ctx, base);
loc_820B8D5C:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x820b8e8c
	if (cr6.getEQ()) goto loc_820B8E8C;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpw cr6,r28,r3
	cr6.compare<int32_t>(r28.s32, ctx.r3.s32, xer);
	// beq cr6,0x820b8e8c
	if (cr6.getEQ()) goto loc_820B8E8C;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b8e8c
	if (cr6.getEQ()) goto loc_820B8E8C;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d48
	sub_820A0D48(ctx, base);
	// b 0x820b8e8c
	goto loc_820B8E8C;
loc_820B8DA8:
	// lwz r10,828(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 828);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b8dbc
	if (cr6.getEQ()) goto loc_820B8DBC;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x820b8e90
	if (!cr6.getEQ()) goto loc_820B8E90;
loc_820B8DBC:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpw cr6,r28,r3
	cr6.compare<int32_t>(r28.s32, ctx.r3.s32, xer);
	// bne cr6,0x820b8e8c
	if (!cr6.getEQ()) goto loc_820B8E8C;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b8e8c
	if (cr6.getEQ()) goto loc_820B8E8C;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x820b8e1c
	if (cr6.getEQ()) goto loc_820B8E1C;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpw cr6,r28,r3
	cr6.compare<int32_t>(r28.s32, ctx.r3.s32, xer);
	// bne cr6,0x820b8e8c
	if (!cr6.getEQ()) goto loc_820B8E8C;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b8e8c
	if (cr6.getEQ()) goto loc_820B8E8C;
loc_820B8E1C:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d98
	sub_820A0D98(ctx, base);
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x820b8e34
	if (cr6.getEQ()) goto loc_820B8E34;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d98
	sub_820A0D98(ctx, base);
loc_820B8E34:
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x820a64c0
	sub_820A64C0(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x820a5560
	sub_820A5560(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,4
	ctx.r3.s64 = 4;
	// lwz r10,4736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4736);
	// rlwinm r10,r10,0,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFE;
	// stw r10,4736(r11)
	PPC_STORE_U32(r11.u32 + 4736, ctx.r10.u32);
	// lwz r11,-1688(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -1688);
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// stw r11,-1688(r25)
	PPC_STORE_U32(r25.u32 + -1688, r11.u32);
	// bl 0x820df8b0
	sub_820DF8B0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,744(r11)
	PPC_STORE_U32(r11.u32 + 744, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
loc_820B8E8C:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B8E90:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,9
	cr6.compare<int32_t>(ctx.r10.s32, 9, xer);
	// bne cr6,0x820b8f1c
	if (!cr6.getEQ()) goto loc_820B8F1C;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r30,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r30.u32);
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// cmpw cr6,r28,r3
	cr6.compare<int32_t>(r28.s32, ctx.r3.s32, xer);
	// beq cr6,0x820b8f18
	if (cr6.getEQ()) goto loc_820B8F18;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b8f18
	if (cr6.getEQ()) goto loc_820B8F18;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x820b8f00
	if (cr6.getEQ()) goto loc_820B8F00;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// cmpw cr6,r28,r3
	cr6.compare<int32_t>(r28.s32, ctx.r3.s32, xer);
	// beq cr6,0x820b8f18
	if (cr6.getEQ()) goto loc_820B8F18;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b8f18
	if (cr6.getEQ()) goto loc_820B8F18;
loc_820B8F00:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r29,744(r11)
	PPC_STORE_U32(r11.u32 + 744, r29.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
loc_820B8F18:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B8F1C:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,10
	cr6.compare<int32_t>(ctx.r10.s32, 10, xer);
	// bne cr6,0x820b8fd0
	if (!cr6.getEQ()) goto loc_820B8FD0;
	// stw r30,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,736(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 736);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820b8f54
	if (!cr6.getEQ()) goto loc_820B8F54;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820b11b0
	sub_820B11B0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f28,820(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 820, temp.u32);
	// stfs f1,824(r11)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r11.u32 + 824, temp.u32);
	// stw r24,828(r11)
	PPC_STORE_U32(r11.u32 + 828, r24.u32);
loc_820B8F54:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// cmpw cr6,r28,r3
	cr6.compare<int32_t>(r28.s32, ctx.r3.s32, xer);
	// beq cr6,0x820b8fcc
	if (cr6.getEQ()) goto loc_820B8FCC;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b8fcc
	if (cr6.getEQ()) goto loc_820B8FCC;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x820b8fb4
	if (cr6.getEQ()) goto loc_820B8FB4;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// cmpw cr6,r28,r3
	cr6.compare<int32_t>(r28.s32, ctx.r3.s32, xer);
	// beq cr6,0x820b8fcc
	if (cr6.getEQ()) goto loc_820B8FCC;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b8fcc
	if (cr6.getEQ()) goto loc_820B8FCC;
loc_820B8FB4:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r29,744(r11)
	PPC_STORE_U32(r11.u32 + 744, r29.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
loc_820B8FCC:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B8FD0:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,11
	cr6.compare<int32_t>(ctx.r10.s32, 11, xer);
	// bne cr6,0x820b905c
	if (!cr6.getEQ()) goto loc_820B905C;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r30,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r30.u32);
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// cmpw cr6,r29,r3
	cr6.compare<int32_t>(r29.s32, ctx.r3.s32, xer);
	// bne cr6,0x820b9058
	if (!cr6.getEQ()) goto loc_820B9058;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b9058
	if (cr6.getEQ()) goto loc_820B9058;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x820b9040
	if (cr6.getEQ()) goto loc_820B9040;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d70
	sub_820A0D70(ctx, base);
	// cmpw cr6,r29,r3
	cr6.compare<int32_t>(r29.s32, ctx.r3.s32, xer);
	// bne cr6,0x820b9058
	if (!cr6.getEQ()) goto loc_820B9058;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b9058
	if (cr6.getEQ()) goto loc_820B9058;
loc_820B9040:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r26,744(r11)
	PPC_STORE_U32(r11.u32 + 744, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
loc_820B9058:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B905C:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,13
	cr6.compare<int32_t>(ctx.r10.s32, 13, xer);
	// bne cr6,0x820b90c8
	if (!cr6.getEQ()) goto loc_820B90C8;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r30,800(r11)
	PPC_STORE_U32(r11.u32 + 800, r30.u32);
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b90c8
	if (cr6.getEQ()) goto loc_820B90C8;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b90c8
	if (cr6.getEQ()) goto loc_820B90C8;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,3316(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 3316);
	// cmpwi cr6,r10,5
	cr6.compare<int32_t>(ctx.r10.s32, 5, xer);
	// beq cr6,0x820b90c8
	if (cr6.getEQ()) goto loc_820B90C8;
	// cmpwi cr6,r10,6
	cr6.compare<int32_t>(ctx.r10.s32, 6, xer);
	// beq cr6,0x820b90c8
	if (cr6.getEQ()) goto loc_820B90C8;
	// cmpwi cr6,r10,7
	cr6.compare<int32_t>(ctx.r10.s32, 7, xer);
	// beq cr6,0x820b90c8
	if (cr6.getEQ()) goto loc_820B90C8;
	// cmpwi cr6,r10,8
	cr6.compare<int32_t>(ctx.r10.s32, 8, xer);
	// beq cr6,0x820b90c8
	if (cr6.getEQ()) goto loc_820B90C8;
	// stw r26,744(r11)
	PPC_STORE_U32(r11.u32 + 744, r26.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
loc_820B90C8:
	// bl 0x820b1248
	sub_820B1248(ctx, base);
	// bl 0x820b1880
	sub_820B1880(ctx, base);
	// bl 0x820b1650
	sub_820B1650(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B90D8:
	// lwz r11,744(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// li r3,1
	ctx.r3.s64 = 1;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x820b9100
	if (!cr6.getEQ()) goto loc_820B9100;
	// bl 0x8209f578
	sub_8209F578(ctx, base);
	// bl 0x820c7c20
	sub_820C7C20(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed594
	// b 0x823ed174
	return;
loc_820B9100:
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// beq cr6,0x820b910c
	if (cr6.getEQ()) goto loc_820B910C;
	// li r3,0
	ctx.r3.s64 = 0;
loc_820B910C:
	// bl 0x8209f578
	sub_8209F578(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed594
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_820B9120"))) PPC_WEAK_FUNC(sub_820B9120);
PPC_FUNC_IMPL(__imp__sub_820B9120) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820b92a4
	if (!cr6.getEQ()) goto loc_820B92A4;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b94bc
	if (!cr6.getEQ()) goto loc_820B94BC;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,16792(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16792);
	f0.f64 = double(temp.f32);
	// lfs f13,12884(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12884);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f0,16792(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 16792, temp.u32);
	// lfs f13,15376(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15376);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820b9178
	if (!cr6.getGT()) goto loc_820B9178;
	// stfs f13,16792(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 16792, temp.u32);
loc_820B9178:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b91c8
	if (cr6.getEQ()) goto loc_820B91C8;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a09e0
	sub_820A09E0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b91c8
	if (cr6.getEQ()) goto loc_820B91C8;
	// lwz r10,-1364(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,3316(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3316);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x820b91cc
	if (cr6.getEQ()) goto loc_820B91CC;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x820b91cc
	if (cr6.getEQ()) goto loc_820B91CC;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x820b91cc
	if (cr6.getEQ()) goto loc_820B91CC;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// beq cr6,0x820b91cc
	if (cr6.getEQ()) goto loc_820B91CC;
	// li r11,1
	r11.s64 = 1;
	// b 0x820b91d0
	goto loc_820B91D0;
loc_820B91C8:
	// lwz r10,-1364(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820B91CC:
	// li r11,13
	r11.s64 = 13;
loc_820B91D0:
	// stw r11,744(r10)
	PPC_STORE_U32(ctx.r10.u32 + 744, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r30,0
	r30.s64 = 0;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,13960(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	ctx.f1.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f13,612(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 612);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,808(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 808, temp.u32);
	// stfs f0,820(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 820, temp.u32);
	// stw r30,828(r11)
	PPC_STORE_U32(r11.u32 + 828, r30.u32);
	// bl 0x820b14d0
	sub_820B14D0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,46
	ctx.r4.s64 = 46;
	// addi r3,r11,5000
	ctx.r3.s64 = r11.s64 + 5000;
	// lfs f1,488(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 488);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820c90d0
	sub_820C90D0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,46
	ctx.r4.s64 = 46;
	// addi r3,r11,6288
	ctx.r3.s64 = r11.s64 + 6288;
	// lfs f1,484(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820c90d0
	sub_820C90D0(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c4280
	sub_820C4280(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r3,r11,7576
	ctx.r3.s64 = r11.s64 + 7576;
loc_820B9250:
	// li r9,310
	ctx.r9.s64 = 310;
	// li r8,-299
	ctx.r8.s64 = -299;
	// li r7,20
	ctx.r7.s64 = 20;
	// li r6,100
	ctx.r6.s64 = 100;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x820c9880
	sub_820C9880(ctx, base);
	// addi r30,r30,125
	r30.s64 = r30.s64 + 125;
	// cmpwi cr6,r30,500
	cr6.compare<int32_t>(r30.s32, 500, xer);
	// ble cr6,0x820b9250
	if (!cr6.getGT()) goto loc_820B9250;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,-460
	ctx.r8.s64 = -460;
	// li r7,20
	ctx.r7.s64 = 20;
	// li r6,920
	ctx.r6.s64 = 920;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,8136
	ctx.r3.s64 = r11.s64 + 8136;
	// bl 0x820c9880
	sub_820C9880(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820B92A4:
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820b92d0
	if (!cr6.getEQ()) goto loc_820B92D0;
	// li r10,9
	ctx.r10.s64 = 9;
	// li r30,0
	r30.s64 = 0;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820B92D0:
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x820b92fc
	if (!cr6.getEQ()) goto loc_820B92FC;
	// li r10,10
	ctx.r10.s64 = 10;
	// li r30,0
	r30.s64 = 0;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820B92FC:
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x820b9328
	if (!cr6.getEQ()) goto loc_820B9328;
	// li r10,7
	ctx.r10.s64 = 7;
	// li r30,0
	r30.s64 = 0;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820B9328:
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// bne cr6,0x820b9354
	if (!cr6.getEQ()) goto loc_820B9354;
	// li r10,6
	ctx.r10.s64 = 6;
	// li r30,0
	r30.s64 = 0;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820B9354:
	// cmpwi cr6,r10,5
	cr6.compare<int32_t>(ctx.r10.s32, 5, xer);
	// bne cr6,0x820b9388
	if (!cr6.getEQ()) goto loc_820B9388;
	// li r10,12
	ctx.r10.s64 = 12;
	// li r30,0
	r30.s64 = 0;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,752(r11)
	PPC_STORE_U32(r11.u32 + 752, r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820B9388:
	// cmpwi cr6,r10,12
	cr6.compare<int32_t>(ctx.r10.s32, 12, xer);
	// beq cr6,0x820b94bc
	if (cr6.getEQ()) goto loc_820B94BC;
	// cmpwi cr6,r10,6
	cr6.compare<int32_t>(ctx.r10.s32, 6, xer);
	// bne cr6,0x820b93cc
	if (!cr6.getEQ()) goto loc_820B93CC;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b94bc
	if (!cr6.getEQ()) goto loc_820B94BC;
	// li r10,4
	ctx.r10.s64 = 4;
	// li r30,0
	r30.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// bl 0x820c4280
	sub_820C4280(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820B93CC:
	// cmpwi cr6,r10,7
	cr6.compare<int32_t>(ctx.r10.s32, 7, xer);
	// bne cr6,0x820b9408
	if (!cr6.getEQ()) goto loc_820B9408;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b94bc
	if (!cr6.getEQ()) goto loc_820B94BC;
	// li r10,3
	ctx.r10.s64 = 3;
	// li r30,0
	r30.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// bl 0x820c4280
	sub_820C4280(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820B9408:
	// cmpwi cr6,r10,8
	cr6.compare<int32_t>(ctx.r10.s32, 8, xer);
	// bne cr6,0x820b9444
	if (!cr6.getEQ()) goto loc_820B9444;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b94bc
	if (!cr6.getEQ()) goto loc_820B94BC;
	// li r10,11
	ctx.r10.s64 = 11;
	// li r30,0
	r30.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// bl 0x820c4280
	sub_820C4280(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820B9444:
	// cmpwi cr6,r10,9
	cr6.compare<int32_t>(ctx.r10.s32, 9, xer);
	// beq cr6,0x820b9454
	if (cr6.getEQ()) goto loc_820B9454;
	// cmpwi cr6,r10,10
	cr6.compare<int32_t>(ctx.r10.s32, 10, xer);
	// bne cr6,0x820b9480
	if (!cr6.getEQ()) goto loc_820B9480;
loc_820B9454:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b94bc
	if (!cr6.getEQ()) goto loc_820B94BC;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r30,0
	r30.s64 = 0;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820B9480:
	// cmpwi cr6,r10,11
	cr6.compare<int32_t>(ctx.r10.s32, 11, xer);
	// bne cr6,0x820b94ac
	if (!cr6.getEQ()) goto loc_820B94AC;
	// li r10,8
	ctx.r10.s64 = 8;
	// li r30,0
	r30.s64 = 0;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,736(r11)
	PPC_STORE_U32(r11.u32 + 736, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,740(r11)
	PPC_STORE_U32(r11.u32 + 740, r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820B94AC:
	// cmpwi cr6,r10,13
	cr6.compare<int32_t>(ctx.r10.s32, 13, xer);
	// bne cr6,0x820b94bc
	if (!cr6.getEQ()) goto loc_820B94BC;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
loc_820B94BC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820B94C8"))) PPC_WEAK_FUNC(sub_820B94C8);
PPC_FUNC_IMPL(__imp__sub_820B94C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f29,-64(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -64, f29.u64);
	// stfd f30,-56(r1)
	PPC_STORE_U64(ctx.r1.u32 + -56, f30.u64);
	// stfd f31,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1836(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1836);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f29.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r31,r11,-1364
	r31.s64 = r11.s64 + -1364;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bne cr6,0x820b9590
	if (!cr6.getEQ()) goto loc_820B9590;
	// lfs f2,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// lwz r3,1456(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// addi r30,r11,376
	r30.s64 = r11.s64 + 376;
	// bl 0x820b2588
	sub_820B2588(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stfs f1,0(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r30.u32 + 0, temp.u32);
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// li r28,0
	r28.s64 = 0;
	// addi r29,r9,-6384
	r29.s64 = ctx.r9.s64 + -6384;
	// lfs f13,372(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 372);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15416(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15416);
	f0.f64 = double(temp.f32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,368(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 368, temp.u32);
	// lwz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x820b9578
	if (!cr6.getGT()) goto loc_820B9578;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f0,15412(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 15412);
	f0.f64 = double(temp.f32);
loc_820B9558:
	// lfs f13,368(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 368);
	ctx.f13.f64 = double(temp.f32);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lfs f12,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f13,f13,f0,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// stfs f13,368(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 368, temp.u32);
	// lwz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpw cr6,r10,r9
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, xer);
	// blt cr6,0x820b9558
	if (cr6.getLT()) goto loc_820B9558;
loc_820B9578:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,368(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 368);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15408(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15408);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,372(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 372, temp.u32);
	// b 0x820b991c
	goto loc_820B991C;
loc_820B9590:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b95d4
	if (cr6.getEQ()) goto loc_820B95D4;
	// lfs f0,376(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 376);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f1
	f0.f64 = double(float(f0.f64 + ctx.f1.f64));
	// stfs f0,376(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 376, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r3,1456(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// lfs f2,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b2588
	sub_820B2588(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r11,376
	ctx.r10.s64 = r11.s64 + 376;
	// lfs f0,376(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 376);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f1
	cr6.compare(f0.f64, ctx.f1.f64);
	// bge cr6,0x820b9660
	if (!cr6.getLT()) goto loc_820B9660;
	// stfs f1,0(r10)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// b 0x820b965c
	goto loc_820B965C;
loc_820B95D4:
	// lwz r10,1456(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// addi r5,r1,92
	ctx.r5.s64 = ctx.r1.s64 + 92;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// bl 0x820b4028
	sub_820B4028(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfs f2,1468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// lwz r3,1456(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b2588
	sub_820B2588(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f3,84(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	ctx.f3.f64 = double(temp.f32);
	// lfs f13,420(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 420);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,8252(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8252);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f13,396(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 396);
	ctx.f13.f64 = double(temp.f32);
	// lfs f2,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// fadds f4,f0,f31
	ctx.f4.f64 = double(float(f0.f64 + f31.f64));
	// bl 0x82110378
	sub_82110378(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820b9654
	if (cr6.getLT()) goto loc_820B9654;
	// lfs f0,376(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 376);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x820b9654
	if (!cr6.getGT()) goto loc_820B9654;
	// fmr f31,f0
	f31.f64 = f0.f64;
loc_820B9654:
	// stfs f31,376(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 376, temp.u32);
	// addi r10,r11,376
	ctx.r10.s64 = r11.s64 + 376;
loc_820B965C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
loc_820B9660:
	// lwz r9,8428(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8428);
	// li r28,0
	r28.s64 = 0;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x820b969c
	if (cr6.getEQ()) goto loc_820B969C;
	// lfs f0,372(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 372);
	f0.f64 = double(temp.f32);
	// lfs f13,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b969c
	if (!cr6.getLT()) goto loc_820B969C;
	// stw r28,8428(r11)
	PPC_STORE_U32(r11.u32 + 8428, r28.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r10,8432(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8432);
	// stw r10,1456(r11)
	PPC_STORE_U32(r11.u32 + 1456, ctx.r10.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r28,8432(r11)
	PPC_STORE_U32(r11.u32 + 8432, r28.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
loc_820B969C:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f0,384(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 384);
	f0.f64 = double(temp.f32);
	// addi r6,r11,384
	ctx.r6.s64 = r11.s64 + 384;
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// addi r29,r10,-6384
	r29.s64 = ctx.r10.s64 + -6384;
	// bge cr6,0x820b96cc
	if (!cr6.getLT()) goto loc_820B96CC;
	// lfs f0,372(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 372);
	f0.f64 = double(temp.f32);
	// addi r9,r11,372
	ctx.r9.s64 = r11.s64 + 372;
	// lfs f13,376(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 376);
	ctx.f13.f64 = double(temp.f32);
	// addi r8,r11,376
	ctx.r8.s64 = r11.s64 + 376;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b9754
	if (!cr6.getLT()) goto loc_820B9754;
loc_820B96CC:
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lfs f13,372(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 372);
	ctx.f13.f64 = double(temp.f32);
	// addi r9,r11,372
	ctx.r9.s64 = r11.s64 + 372;
	// addi r10,r11,368
	ctx.r10.s64 = r11.s64 + 368;
	// lfs f0,15416(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 15416);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,368(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 368, temp.u32);
	// lwz r8,0(r29)
	ctx.r8.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r11,r28
	r11.u64 = r28.u64;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x820b9724
	if (!cr6.getGT()) goto loc_820B9724;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lwz r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfs f0,15412(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 15412);
	f0.f64 = double(temp.f32);
loc_820B9704:
	// lfs f13,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lfs f12,376(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 376);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f13,f13,f0,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// stfs f13,0(r10)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// lwz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpw cr6,r11,r7
	cr6.compare<int32_t>(r11.s32, ctx.r7.s32, xer);
	// blt cr6,0x820b9704
	if (cr6.getLT()) goto loc_820B9704;
loc_820B9724:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfs f0,0(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	f0.f64 = double(temp.f32);
	// addi r8,r11,376
	ctx.r8.s64 = r11.s64 + 376;
	// lfs f13,376(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 376);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b9754
	if (!cr6.getLT()) goto loc_820B9754;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15408(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15408);
	f0.f64 = double(temp.f32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,0(r9)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 0, temp.u32);
loc_820B9754:
	// lfs f30,0(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	f30.f64 = double(temp.f32);
	// lfs f0,0(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// bge cr6,0x820b983c
	if (!cr6.getLT()) goto loc_820B983C;
	// lfs f31,0(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	f31.f64 = double(temp.f32);
	// bl 0x821393a0
	sub_821393A0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b97a0
	if (cr6.getEQ()) goto loc_820B97A0;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r11,r11,-3020
	r11.s64 = r11.s64 + -3020;
	// lfs f0,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// bne cr6,0x820b97a0
	if (!cr6.getEQ()) goto loc_820B97A0;
	// lfs f0,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// bne cr6,0x820b97a0
	if (!cr6.getEQ()) goto loc_820B97A0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,15404(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15404);
	ctx.f13.f64 = double(temp.f32);
	// b 0x820b97a8
	goto loc_820B97A8;
loc_820B97A0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,14148(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14148);
	ctx.f13.f64 = double(temp.f32);
loc_820B97A8:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,-6368(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// fnmsubs f13,f0,f13,f31
	ctx.f13.f64 = double(float(-(f0.f64 * ctx.f13.f64 - f31.f64)));
	// lfs f12,2692(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2692);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,376(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 376);
	ctx.f11.f64 = double(temp.f32);
	// fadds f10,f13,f31
	ctx.f10.f64 = double(float(ctx.f13.f64 + f31.f64));
	// fmuls f0,f10,f0
	f0.f64 = double(float(ctx.f10.f64 * f0.f64));
	// fmadds f0,f0,f12,f30
	f0.f64 = double(float(f0.f64 * ctx.f12.f64 + f30.f64));
	// fcmpu cr6,f0,f11
	cr6.compare(f0.f64, ctx.f11.f64);
	// bge cr6,0x820b9828
	if (!cr6.getLT()) goto loc_820B9828;
	// fmr f0,f11
	f0.f64 = ctx.f11.f64;
	// lfs f13,384(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 384);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,372(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 372);
	ctx.f11.f64 = double(temp.f32);
	// fmuls f13,f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f12,15400(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15400);
	ctx.f12.f64 = double(temp.f32);
	// lwz r10,8428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8428);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// fsubs f11,f11,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 - f0.f64));
	// fmadds f13,f11,f12,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f12.f64 + ctx.f13.f64));
	// fsqrts f13,f13
	ctx.f13.f64 = double(float(sqrt(ctx.f13.f64)));
	// fneg f13,f13
	ctx.f13.u64 = ctx.f13.u64 ^ 0x8000000000000000;
	// beq cr6,0x820b9828
	if (cr6.getEQ()) goto loc_820B9828;
	// stw r28,8428(r11)
	PPC_STORE_U32(r11.u32 + 8428, r28.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r10,8432(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8432);
	// stw r10,1456(r11)
	PPC_STORE_U32(r11.u32 + 1456, ctx.r10.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r28,8432(r11)
	PPC_STORE_U32(r11.u32 + 8432, r28.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
loc_820B9828:
	// stfs f0,372(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 372, temp.u32);
	// addi r9,r11,372
	ctx.r9.s64 = r11.s64 + 372;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r6,r11,384
	ctx.r6.s64 = r11.s64 + 384;
	// stfs f13,384(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 384, temp.u32);
loc_820B983C:
	// lfs f0,0(r6)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// bge cr6,0x820b98c0
	if (!cr6.getLT()) goto loc_820B98C0;
	// lfs f13,0(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,376(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 376);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// bgt cr6,0x820b98c0
	if (cr6.getGT()) goto loc_820B98C0;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,15396(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15396);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b9880
	if (!cr6.getLT()) goto loc_820B9880;
	// li r9,15
	ctx.r9.s64 = 15;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stw r9,400(r11)
	PPC_STORE_U32(r11.u32 + 400, ctx.r9.u32);
	// lfs f0,15136(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15136);
	f0.f64 = double(temp.f32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x820b98b0
	goto loc_820B98B0;
loc_820B9880:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,15392(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15392);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b98b8
	if (!cr6.getLT()) goto loc_820B98B8;
	// li r10,15
	ctx.r10.s64 = 15;
	// stw r10,400(r11)
	PPC_STORE_U32(r11.u32 + 400, ctx.r10.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfs f0,384(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 384);
	f0.f64 = double(temp.f32);
	// fsubs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 - f0.f64));
	// lfs f0,15388(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15388);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
loc_820B98B0:
	// stfs f0,404(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 404, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
loc_820B98B8:
	// stfs f29,384(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 384, temp.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
loc_820B98C0:
	// lwz r10,8428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8428);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b9920
	if (cr6.getEQ()) goto loc_820B9920;
	// lfs f13,420(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 420);
	ctx.f13.f64 = double(temp.f32);
	// lwz r3,1456(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// lfs f0,8252(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8252);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f13,396(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 396);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,372(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 372);
	ctx.f12.f64 = double(temp.f32);
	// lfs f2,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// fadds f31,f12,f0
	f31.f64 = double(float(ctx.f12.f64 + f0.f64));
	// bl 0x821108b0
	sub_821108B0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// bge cr6,0x820b991c
	if (!cr6.getLT()) goto loc_820B991C;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r28,8428(r11)
	PPC_STORE_U32(r11.u32 + 8428, r28.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r10,8432(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8432);
	// stw r10,1456(r11)
	PPC_STORE_U32(r11.u32 + 1456, ctx.r10.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r28,8432(r11)
	PPC_STORE_U32(r11.u32 + 8432, r28.u32);
loc_820B991C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
loc_820B9920:
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820b99bc
	if (!cr6.getGT()) goto loc_820B99BC;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,15384(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 15384);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,14112(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14112);
	ctx.f12.f64 = double(temp.f32);
loc_820B9940:
	// lwz r10,400(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 400);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820b996c
	if (!cr6.getGT()) goto loc_820B996C;
	// lfs f0,392(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 392);
	f0.f64 = double(temp.f32);
	// lfs f11,404(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 404);
	ctx.f11.f64 = double(temp.f32);
	// fmadds f0,f0,f12,f11
	f0.f64 = double(float(f0.f64 * ctx.f12.f64 + ctx.f11.f64));
	// stfs f0,392(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 392, temp.u32);
	// lwz r10,400(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 400);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stw r10,400(r11)
	PPC_STORE_U32(r11.u32 + 400, ctx.r10.u32);
	// b 0x820b99a8
	goto loc_820B99A8;
loc_820B996C:
	// lfs f0,404(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 404);
	f0.f64 = double(temp.f32);
	// addi r10,r11,404
	ctx.r10.s64 = r11.s64 + 404;
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// bge cr6,0x820b9998
	if (!cr6.getLT()) goto loc_820B9998;
	// lfs f0,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,0(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// blt cr6,0x820b9998
	if (cr6.getLT()) goto loc_820B9998;
	// stfs f29,0(r10)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
loc_820B9998:
	// lfs f0,392(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 392);
	f0.f64 = double(temp.f32);
	// lfs f11,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// fmadds f0,f0,f12,f11
	f0.f64 = double(float(f0.f64 * ctx.f12.f64 + ctx.f11.f64));
	// stfs f0,392(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 392, temp.u32);
loc_820B99A8:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmpw cr6,r8,r11
	cr6.compare<int32_t>(ctx.r8.s32, r11.s32, xer);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// blt cr6,0x820b9940
	if (cr6.getLT()) goto loc_820B9940;
loc_820B99BC:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,392(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 392);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15380(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15380);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,396(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 396, temp.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f29,-64(r1)
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// lfd f30,-56(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820B99E8"))) PPC_WEAK_FUNC(sub_820B99E8);
PPC_FUNC_IMPL(__imp__sub_820B99E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f14{};
	PPCRegister f15{};
	PPCRegister f16{};
	PPCRegister f17{};
	PPCRegister f18{};
	PPCRegister f19{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed510
	// stwu r1,-528(r1)
	ea = -528 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f1,548(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(ctx.r1.u32 + 548, temp.u32);
	// li r16,0
	r16.s64 = 0;
	// stfs f2,556(r1)
	temp.f32 = float(ctx.f2.f64);
	PPC_STORE_U32(ctx.r1.u32 + 556, temp.u32);
	// stfs f3,580(r1)
	temp.f32 = float(ctx.f3.f64);
	PPC_STORE_U32(ctx.r1.u32 + 580, temp.u32);
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// stfs f4,588(r1)
	temp.f32 = float(ctx.f4.f64);
	PPC_STORE_U32(ctx.r1.u32 + 588, temp.u32);
	// mr r24,r6
	r24.u64 = ctx.r6.u64;
	// mr r27,r16
	r27.u64 = r16.u64;
	// lfs f28,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f28.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f28,120(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// stw r16,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, r16.u32);
	// stfs f28,124(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// fmr f20,f28
	f20.f64 = f28.f64;
	// stfs f28,128(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stw r16,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, r16.u32);
	// stfs f28,112(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// fmr f21,f28
	f21.f64 = f28.f64;
	// lfs f18,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f18.f64 = double(temp.f32);
	// mr r23,r16
	r23.u64 = r16.u64;
	// stfs f18,152(r1)
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// mr r19,r16
	r19.u64 = r16.u64;
	// mr r17,r16
	r17.u64 = r16.u64;
	// stw r16,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r16.u32);
	// mr r22,r16
	r22.u64 = r16.u64;
	// fmr f23,f28
	f23.f64 = f28.f64;
	// stw r16,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r16.u32);
	// fmr f22,f28
	f22.f64 = f28.f64;
	// stw r16,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r16.u32);
	// fmr f25,f28
	f25.f64 = f28.f64;
	// stw r16,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r16.u32);
	// fmr f24,f28
	f24.f64 = f28.f64;
	// stw r16,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r16.u32);
	// mr r26,r16
	r26.u64 = r16.u64;
	// stw r16,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r16.u32);
	// mr r25,r16
	r25.u64 = r16.u64;
	// stw r16,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r16.u32);
	// mr r21,r16
	r21.u64 = r16.u64;
	// stw r16,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r16.u32);
	// mr r15,r16
	r15.u64 = r16.u64;
	// stw r16,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r16.u32);
	// mr r20,r16
	r20.u64 = r16.u64;
	// stw r16,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, r16.u32);
	// stw r16,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, r16.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2c28
	sub_820C2C28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r18,r11,27,31,31
	r18.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r30,-32014
	r30.s64 = -2098069504;
	// bne cr6,0x820b9b38
	if (!cr6.getEQ()) goto loc_820B9B38;
	// bl 0x82139a38
	sub_82139A38(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820b9b38
	if (cr6.getEQ()) goto loc_820B9B38;
	// bl 0x8209c700
	sub_8209C700(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820b9b38
	if (!cr6.getEQ()) goto loc_820B9B38;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2df0
	sub_820C2DF0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b9b14
	if (!cr6.getEQ()) goto loc_820B9B14;
	// rlwinm r11,r28,0,26,27
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x30;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r10,r11,1
	ctx.r10.u64 = r11.u64 ^ 1;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// b 0x820b9b34
	goto loc_820B9B34;
loc_820B9B14:
	// andc r11,r28,r24
	r11.u64 = r28.u64 & ~r24.u64;
	// rlwinm r11,r11,0,26,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x30;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820b9b38
	if (cr6.getEQ()) goto loc_820B9B38;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r10,556(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 556);
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
loc_820B9B34:
	// stw r10,556(r11)
	PPC_STORE_U32(r11.u32 + 556, ctx.r10.u32);
loc_820B9B38:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lwz r11,556(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 556);
	// stw r29,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r29.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820b9bb8
	if (!cr6.getEQ()) goto loc_820B9BB8;
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820b9b78
	if (!cr6.getEQ()) goto loc_820B9B78;
	// lwz r11,-1836(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1836);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x820b9b78
	if (cr6.getEQ()) goto loc_820B9B78;
	// addi r4,r1,588
	ctx.r4.s64 = ctx.r1.s64 + 588;
	// addi r3,r1,580
	ctx.r3.s64 = ctx.r1.s64 + 580;
	// bl 0x82091118
	sub_82091118(ctx, base);
	// b 0x820b9bb8
	goto loc_820B9BB8;
loc_820B9B78:
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820b9ba0
	if (!cr6.getEQ()) goto loc_820B9BA0;
	// lwz r11,-1836(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1836);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x820b9ba0
	if (cr6.getEQ()) goto loc_820B9BA0;
	// addi r4,r1,556
	ctx.r4.s64 = ctx.r1.s64 + 556;
	// addi r3,r1,548
	ctx.r3.s64 = ctx.r1.s64 + 548;
	// bl 0x82091118
	sub_82091118(ctx, base);
	// b 0x820b9bb8
	goto loc_820B9BB8;
loc_820B9BA0:
	// addi r4,r1,556
	ctx.r4.s64 = ctx.r1.s64 + 556;
	// addi r3,r1,548
	ctx.r3.s64 = ctx.r1.s64 + 548;
	// bl 0x82090ff0
	sub_82090FF0(ctx, base);
	// addi r4,r1,588
	ctx.r4.s64 = ctx.r1.s64 + 588;
	// addi r3,r1,580
	ctx.r3.s64 = ctx.r1.s64 + 580;
	// bl 0x82090ff0
	sub_82090FF0(ctx, base);
loc_820B9BB8:
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// beq cr6,0x820b9bd0
	if (cr6.getEQ()) goto loc_820B9BD0;
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b9bf4
	if (!cr6.getEQ()) goto loc_820B9BF4;
loc_820B9BD0:
	// lfs f13,548(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 548);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,556(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 556);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,580(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 580);
	f0.f64 = double(temp.f32);
	// lfs f11,588(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 588);
	ctx.f11.f64 = double(temp.f32);
	// stfs f0,548(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 548, temp.u32);
	// stfs f11,556(r1)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r1.u32 + 556, temp.u32);
	// stfs f13,580(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 580, temp.u32);
	// stfs f12,588(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 588, temp.u32);
	// b 0x820b9bfc
	goto loc_820B9BFC;
loc_820B9BF4:
	// lfs f11,556(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 556);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,548(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 548);
	f0.f64 = double(temp.f32);
loc_820B9BFC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,15464(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15464);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// addi r11,r11,14436
	r11.s64 = r11.s64 + 14436;
	// lfs f19,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f19.f64 = double(temp.f32);
	// bge cr6,0x820b9c20
	if (!cr6.getLT()) goto loc_820B9C20;
	// fadds f29,f0,f19
	f29.f64 = double(float(f0.f64 + f19.f64));
	// b 0x820b9c34
	goto loc_820B9C34;
loc_820B9C20:
	// fcmpu cr6,f0,f19
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f19.f64);
	// ble cr6,0x820b9c30
	if (!cr6.getGT()) goto loc_820B9C30;
	// fsubs f29,f0,f19
	f29.f64 = double(float(f0.f64 - f19.f64));
	// b 0x820b9c34
	goto loc_820B9C34;
loc_820B9C30:
	// fmr f29,f28
	ctx.fpscr.disableFlushMode();
	f29.f64 = f28.f64;
loc_820B9C34:
	// fcmpu cr6,f11,f13
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f11.f64, ctx.f13.f64);
	// bge cr6,0x820b9c44
	if (!cr6.getLT()) goto loc_820B9C44;
	// fadds f31,f11,f19
	f31.f64 = double(float(ctx.f11.f64 + f19.f64));
	// b 0x820b9c58
	goto loc_820B9C58;
loc_820B9C44:
	// fcmpu cr6,f11,f19
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f11.f64, f19.f64);
	// ble cr6,0x820b9c54
	if (!cr6.getGT()) goto loc_820B9C54;
	// fsubs f31,f11,f19
	f31.f64 = double(float(ctx.f11.f64 - f19.f64));
	// b 0x820b9c58
	goto loc_820B9C58;
loc_820B9C54:
	// fmr f31,f28
	ctx.fpscr.disableFlushMode();
	f31.f64 = f28.f64;
loc_820B9C58:
	// li r14,15
	r14.s64 = 15;
	// mr r31,r14
	r31.u64 = r14.u64;
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x820b9c78
	if (cr6.getEQ()) goto loc_820B9C78;
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b9c80
	if (!cr6.getEQ()) goto loc_820B9C80;
loc_820B9C78:
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lwz r31,17340(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 17340);
loc_820B9C80:
	// neg r11,r31
	r11.s64 = -r31.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// extsw r11,r31
	r11.s64 = r31.s32;
	// lfd f0,192(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,580(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 580);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b9cc0
	if (!cr6.getLT()) goto loc_820B9CC0;
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// lfd f12,192(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f26,f12
	f26.f64 = double(float(ctx.f12.f64));
	// fadds f30,f26,f0
	f30.f64 = double(float(f26.f64 + f0.f64));
	// b 0x820b9ce4
	goto loc_820B9CE4;
loc_820B9CC0:
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// lfd f12,192(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f26,f12
	f26.f64 = double(float(ctx.f12.f64));
	// fcmpu cr6,f0,f26
	cr6.compare(f0.f64, f26.f64);
	// ble cr6,0x820b9ce0
	if (!cr6.getGT()) goto loc_820B9CE0;
	// fsubs f30,f0,f26
	f30.f64 = double(float(f0.f64 - f26.f64));
	// b 0x820b9ce4
	goto loc_820B9CE4;
loc_820B9CE0:
	// fmr f30,f28
	ctx.fpscr.disableFlushMode();
	f30.f64 = f28.f64;
loc_820B9CE4:
	// lfs f0,588(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 588);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820b9cf8
	if (!cr6.getLT()) goto loc_820B9CF8;
	// fadds f27,f26,f0
	f27.f64 = double(float(f26.f64 + f0.f64));
	// b 0x820b9d0c
	goto loc_820B9D0C;
loc_820B9CF8:
	// fcmpu cr6,f0,f26
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f26.f64);
	// ble cr6,0x820b9d08
	if (!cr6.getGT()) goto loc_820B9D08;
	// fsubs f27,f0,f26
	f27.f64 = double(float(f0.f64 - f26.f64));
	// b 0x820b9d0c
	goto loc_820B9D0C;
loc_820B9D08:
	// fmr f27,f28
	ctx.fpscr.disableFlushMode();
	f27.f64 = f28.f64;
loc_820B9D0C:
	// lfs f13,556(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 556);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f12,f13,f13
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// lfs f0,548(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 548);
	f0.f64 = double(temp.f32);
	// fmr f15,f0
	f15.f64 = f0.f64;
	// stfs f15,160(r1)
	temp.f32 = float(f15.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// fmr f16,f13
	f16.f64 = ctx.f13.f64;
	// stfs f16,140(r1)
	temp.f32 = float(f16.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// fmadds f1,f0,f0,f12
	ctx.f1.f64 = double(float(f0.f64 * f0.f64 + ctx.f12.f64));
	// bl 0x8238ca50
	sub_8238CA50(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f17,2952(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f17.f64 = double(temp.f32);
	// fcmpu cr6,f1,f17
	cr6.compare(ctx.f1.f64, f17.f64);
	// bge cr6,0x820b9d4c
	if (!cr6.getLT()) goto loc_820B9D4C;
	// stfs f28,160(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// stfs f28,140(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// b 0x820b9dac
	goto loc_820B9DAC;
loc_820B9D4C:
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lwz r11,17336(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 17336);
	// extsw r10,r11
	ctx.r10.s64 = r11.s32;
	// std r10,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, ctx.r10.u64);
	// lfd f0,192(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x820b9dac
	if (!cr6.getLT()) goto loc_820B9DAC;
	// addi r11,r11,-10
	r11.s64 = r11.s64 + -10;
	// fsubs f0,f0,f1
	f0.f64 = double(float(f0.f64 - ctx.f1.f64));
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// fmuls f0,f0,f17
	f0.f64 = double(float(f0.f64 * f17.f64));
	// lfd f13,192(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// fsubs f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 - f0.f64));
	// fdivs f0,f0,f1
	f0.f64 = double(float(f0.f64 / ctx.f1.f64));
	// fmuls f13,f0,f15
	ctx.f13.f64 = double(float(f0.f64 * f15.f64));
	// stfs f13,160(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// fmuls f0,f0,f16
	f0.f64 = double(float(f0.f64 * f16.f64));
	// stfs f0,140(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
loc_820B9DAC:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stfs f29,192(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// stw r14,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, r14.u32);
	// fmr f14,f31
	f14.f64 = f31.f64;
	// stw r14,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r14.u32);
	// fmr f16,f31
	f16.f64 = f31.f64;
	// stw r14,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r14.u32);
	// stw r14,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r14.u32);
	// lwz r10,480(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820b9e48
	if (!cr6.getEQ()) goto loc_820B9E48;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r10,-1868(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1868);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bgt cr6,0x820b9e48
	if (cr6.getGT()) goto loc_820B9E48;
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,5
	cr6.compare<int32_t>(ctx.r10.s32, 5, xer);
	// beq cr6,0x820b9e10
	if (cr6.getEQ()) goto loc_820B9E10;
	// andc r9,r28,r24
	ctx.r9.u64 = r28.u64 & ~r24.u64;
	// rlwinm r9,r9,0,11,19
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x1FF000;
	// rlwinm r9,r9,0,19,11
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFFFFF01FFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820b9e1c
	if (!cr6.getEQ()) goto loc_820B9E1C;
	// cmpwi cr6,r10,5
	cr6.compare<int32_t>(ctx.r10.s32, 5, xer);
	// bne cr6,0x820b9e48
	if (!cr6.getEQ()) goto loc_820B9E48;
loc_820B9E10:
	// lwz r10,752(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 752);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820b9e48
	if (cr6.getEQ()) goto loc_820B9E48;
loc_820B9E1C:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820b9e44
	if (!cr6.getEQ()) goto loc_820B9E44;
	// andc r11,r28,r24
	r11.u64 = r28.u64 & ~r24.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// rlwinm r11,r11,0,11,11
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x100000;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x820b9120
	sub_820B9120(ctx, base);
loc_820B9E44:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
loc_820B9E48:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// li r14,1
	r14.s64 = 1;
	// lfs f0,6580(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 6580);
	f0.f64 = double(temp.f32);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lfs f0,12924(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 12924);
	f0.f64 = double(temp.f32);
	// lfs f15,3060(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3060);
	f15.f64 = double(temp.f32);
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// bne cr6,0x820ba6c8
	if (!cr6.getEQ()) goto loc_820BA6C8;
	// bl 0x8209c700
	sub_8209C700(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ba6c4
	if (!cr6.getEQ()) goto loc_820BA6C4;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r10,480(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820ba6c8
	if (!cr6.getEQ()) goto loc_820BA6C8;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x820b9ec4
	if (cr6.getEQ()) goto loc_820B9EC4;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13296(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13296);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba6c4
	if (!cr6.getEQ()) goto loc_820BA6C4;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13304(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba6c4
	if (!cr6.getEQ()) goto loc_820BA6C4;
loc_820B9EC4:
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x820b9f20
	if (cr6.getEQ()) goto loc_820B9F20;
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x820b9f20
	if (cr6.getEQ()) goto loc_820B9F20;
	// lwz r11,-1836(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1836);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820b9f0c
	if (!cr6.getEQ()) goto loc_820B9F0C;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,556(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 556);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820b9f0c
	if (!cr6.getEQ()) goto loc_820B9F0C;
	// stfs f30,192(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// stw r31,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, r31.u32);
	// fmr f16,f27
	f16.f64 = f27.f64;
	// stw r31,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r31.u32);
	// b 0x820b9f30
	goto loc_820B9F30;
loc_820B9F0C:
	// fmr f29,f30
	ctx.fpscr.disableFlushMode();
	f29.f64 = f30.f64;
	// stw r31,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r31.u32);
	// fmr f16,f27
	f16.f64 = f27.f64;
	// stw r31,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r31.u32);
	// b 0x820b9f30
	goto loc_820B9F30;
loc_820B9F20:
	// fmr f29,f30
	ctx.fpscr.disableFlushMode();
	f29.f64 = f30.f64;
	// stw r31,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r31.u32);
	// fmr f14,f27
	f14.f64 = f27.f64;
	// stw r31,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r31.u32);
loc_820B9F30:
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ba630
	if (!cr6.getEQ()) goto loc_820BA630;
	// bl 0x82139a38
	sub_82139A38(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ba630
	if (cr6.getEQ()) goto loc_820BA630;
	// bl 0x8209c700
	sub_8209C700(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ba630
	if (!cr6.getEQ()) goto loc_820BA630;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// not r29,r24
	r29.u64 = ~r24.u64;
	// and r9,r29,r28
	ctx.r9.u64 = r29.u64 & r28.u64;
	// lwz r10,556(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 556);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// stw r10,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, ctx.r10.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stw r11,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, r11.u32);
	// and r11,r29,r28
	r11.u64 = r29.u64 & r28.u64;
	// rlwinm r27,r11,0,15,15
	r27.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000;
	// rlwinm r11,r9,0,16,16
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x8000;
	// cntlzw r9,r10
	ctx.r9.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r10,r9,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r23,r11,1
	r23.u64 = r11.u64 ^ 1;
	// cntlzw r11,r27
	r11.u64 = r27.u32 == 0 ? 32 : __builtin_clz(r27.u32);
	// stw r10,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, ctx.r10.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r19,r11,1
	r19.u64 = r11.u64 ^ 1;
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ba048
	if (!cr6.getEQ()) goto loc_820BA048;
	// andi. r11,r28,514
	r11.u64 = r28.u64 & 514;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lwz r11,-1836(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1836);
	// beq cr6,0x820b9ff8
	if (cr6.getEQ()) goto loc_820B9FF8;
	// lwz r9,556(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 556);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x820b9ff4
	if (!cr6.getEQ()) goto loc_820B9FF4;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820b9fec
	if (!cr6.getEQ()) goto loc_820B9FEC;
	// stfs f18,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// b 0x820b9ff8
	goto loc_820B9FF8;
loc_820B9FEC:
	// stw r14,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r14.u32);
	// b 0x820b9ff8
	goto loc_820B9FF8;
loc_820B9FF4:
	// fmr f20,f18
	ctx.fpscr.disableFlushMode();
	f20.f64 = f18.f64;
loc_820B9FF8:
	// andi. r9,r28,257
	ctx.r9.u64 = r28.u64 & 257;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820ba03c
	if (cr6.getEQ()) goto loc_820BA03C;
	// lwz r9,556(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 556);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x820ba038
	if (!cr6.getEQ()) goto loc_820BA038;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820ba028
	if (!cr6.getEQ()) goto loc_820BA028;
	// stfs f18,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// addi r7,r10,556
	ctx.r7.s64 = ctx.r10.s64 + 556;
	// b 0x820ba1ec
	goto loc_820BA1EC;
loc_820BA028:
	// lwz r11,556(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 556);
	// addi r7,r10,556
	ctx.r7.s64 = ctx.r10.s64 + 556;
	// stw r14,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r14.u32);
	// b 0x820ba1ec
	goto loc_820BA1EC;
loc_820BA038:
	// fmr f21,f18
	ctx.fpscr.disableFlushMode();
	f21.f64 = f18.f64;
loc_820BA03C:
	// lwz r11,556(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 556);
	// addi r7,r10,556
	ctx.r7.s64 = ctx.r10.s64 + 556;
	// b 0x820ba1ec
	goto loc_820BA1EC;
loc_820BA048:
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820ba100
	if (!cr6.getEQ()) goto loc_820BA100;
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r7,r10,556
	ctx.r7.s64 = ctx.r10.s64 + 556;
	// lwz r11,556(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 556);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba06c
	if (!cr6.getEQ()) goto loc_820BA06C;
	// stfs f15,152(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f15.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
loc_820BA06C:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lfs f0,12896(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12896);
	f0.f64 = double(temp.f32);
	// lwz r10,176(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lwz r10,-1836(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1836);
	// bne cr6,0x820ba224
	if (!cr6.getEQ()) goto loc_820BA224;
	// andi. r9,r28,514
	ctx.r9.u64 = r28.u64 & 514;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820ba0a4
	if (cr6.getEQ()) goto loc_820BA0A4;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820ba0a0
	if (!cr6.getEQ()) goto loc_820BA0A0;
	// fmr f20,f18
	f20.f64 = f18.f64;
	// b 0x820ba0a4
	goto loc_820BA0A4;
loc_820BA0A0:
	// stfs f0,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
loc_820BA0A4:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba224
	if (!cr6.getEQ()) goto loc_820BA224;
	// andi. r9,r28,257
	ctx.r9.u64 = r28.u64 & 257;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820ba0cc
	if (cr6.getEQ()) goto loc_820BA0CC;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820ba0c8
	if (!cr6.getEQ()) goto loc_820BA0C8;
	// fmr f21,f18
	ctx.fpscr.disableFlushMode();
	f21.f64 = f18.f64;
	// b 0x820ba0cc
	goto loc_820BA0CC;
loc_820BA0C8:
	// stfs f0,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
loc_820BA0CC:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba224
	if (!cr6.getEQ()) goto loc_820BA224;
	// andi. r10,r28,2056
	ctx.r10.u64 = r28.u64 & 2056;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ba0e4
	if (cr6.getEQ()) goto loc_820BA0E4;
	// stfs f18,120(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
loc_820BA0E4:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba224
	if (!cr6.getEQ()) goto loc_820BA224;
	// andi. r10,r28,1028
	ctx.r10.u64 = r28.u64 & 1028;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ba224
	if (cr6.getEQ()) goto loc_820BA224;
	// stfs f18,124(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// b 0x820ba224
	goto loc_820BA224;
loc_820BA100:
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x820ba19c
	if (!cr6.getEQ()) goto loc_820BA19C;
	// andi. r9,r28,514
	ctx.r9.u64 = r28.u64 & 514;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820ba11c
	if (cr6.getEQ()) goto loc_820BA11C;
	// fmr f20,f18
	ctx.fpscr.disableFlushMode();
	f20.f64 = f18.f64;
loc_820BA11C:
	// andi. r8,r28,257
	ctx.r8.u64 = r28.u64 & 257;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x820ba12c
	if (cr6.getEQ()) goto loc_820BA12C;
	// fmr f21,f18
	ctx.fpscr.disableFlushMode();
	f21.f64 = f18.f64;
loc_820BA12C:
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r7,r10,556
	ctx.r7.s64 = ctx.r10.s64 + 556;
	// lwz r11,556(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 556);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba14c
	if (!cr6.getEQ()) goto loc_820BA14C;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r14,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r14.u32);
	// bne cr6,0x820ba150
	if (!cr6.getEQ()) goto loc_820BA150;
loc_820BA14C:
	// stw r16,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r16.u32);
loc_820BA150:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba164
	if (!cr6.getEQ()) goto loc_820BA164;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// stw r14,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r14.u32);
	// bne cr6,0x820ba168
	if (!cr6.getEQ()) goto loc_820BA168;
loc_820BA164:
	// stw r16,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r16.u32);
loc_820BA168:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba224
	if (!cr6.getEQ()) goto loc_820BA224;
	// andi. r10,r28,2056
	ctx.r10.u64 = r28.u64 & 2056;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ba180
	if (cr6.getEQ()) goto loc_820BA180;
	// stfs f18,120(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
loc_820BA180:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba224
	if (!cr6.getEQ()) goto loc_820BA224;
	// andi. r10,r28,1028
	ctx.r10.u64 = r28.u64 & 1028;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ba224
	if (cr6.getEQ()) goto loc_820BA224;
	// stfs f18,124(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// b 0x820ba224
	goto loc_820BA224;
loc_820BA19C:
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r7,r10,556
	ctx.r7.s64 = ctx.r10.s64 + 556;
	// lwz r11,556(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 556);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba1b4
	if (!cr6.getEQ()) goto loc_820BA1B4;
	// stfs f15,152(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f15.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
loc_820BA1B4:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lfs f0,12896(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12896);
	f0.f64 = double(temp.f32);
	// bne cr6,0x820ba204
	if (!cr6.getEQ()) goto loc_820BA204;
	// andi. r10,r28,514
	ctx.r10.u64 = r28.u64 & 514;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ba1d4
	if (cr6.getEQ()) goto loc_820BA1D4;
	// stfs f0,128(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
loc_820BA1D4:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba204
	if (!cr6.getEQ()) goto loc_820BA204;
	// andi. r10,r28,257
	ctx.r10.u64 = r28.u64 & 257;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820ba1ec
	if (cr6.getEQ()) goto loc_820BA1EC;
	// stfs f0,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
loc_820BA1EC:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba204
	if (!cr6.getEQ()) goto loc_820BA204;
	// andi. r10,r28,2056
	ctx.r10.u64 = r28.u64 & 2056;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r14,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r14.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820ba208
	if (!cr6.getEQ()) goto loc_820BA208;
loc_820BA204:
	// stw r16,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r16.u32);
loc_820BA208:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820ba220
	if (!cr6.getEQ()) goto loc_820BA220;
	// andi. r10,r28,1028
	ctx.r10.u64 = r28.u64 & 1028;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r14,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r14.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820ba224
	if (!cr6.getEQ()) goto loc_820BA224;
loc_820BA220:
	// stw r16,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r16.u32);
loc_820BA224:
	// cntlzw r10,r11
	ctx.r10.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// rlwinm r17,r10,27,31,31
	r17.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// mr r22,r17
	r22.u64 = r17.u64;
	// stw r17,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r17.u32);
	// stw r17,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r17.u32);
	// beq cr6,0x820ba300
	if (cr6.getEQ()) goto loc_820BA300;
	// lfs f10,160(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	ctx.f10.f64 = double(temp.f32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// fmuls f0,f10,f10
	f0.f64 = double(float(ctx.f10.f64 * ctx.f10.f64));
	// lfs f11,140(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	ctx.f11.f64 = double(temp.f32);
	// addi r11,r11,16800
	r11.s64 = r11.s64 + 16800;
	// fmadds f0,f11,f11,f0
	f0.f64 = double(float(ctx.f11.f64 * ctx.f11.f64 + f0.f64));
	// fsqrts f13,f0
	ctx.f13.f64 = double(float(sqrt(f0.f64)));
	// lfs f0,-4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -4);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x820ba300
	if (!cr6.getGT()) goto loc_820BA300;
	// lfs f12,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f9,f13,f0
	ctx.f9.f64 = double(float(ctx.f13.f64 - f0.f64));
	// fsubs f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 - f0.f64));
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f0,17316(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17316);
	f0.f64 = double(temp.f32);
	// fsubs f8,f18,f0
	ctx.f8.f64 = double(float(f18.f64 - f0.f64));
	// fdivs f12,f9,f12
	ctx.f12.f64 = double(float(ctx.f9.f64 / ctx.f12.f64));
	// fmadds f0,f8,f12,f0
	f0.f64 = double(float(ctx.f8.f64 * ctx.f12.f64 + f0.f64));
	// fmuls f0,f0,f12
	f0.f64 = double(float(f0.f64 * ctx.f12.f64));
	// fcmpu cr6,f0,f18
	cr6.compare(f0.f64, f18.f64);
	// ble cr6,0x820ba298
	if (!cr6.getGT()) goto loc_820BA298;
	// fmr f0,f18
	f0.f64 = f18.f64;
loc_820BA298:
	// fcmpu cr6,f11,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f11.f64, f28.f64);
	// bge cr6,0x820ba2b8
	if (!cr6.getLT()) goto loc_820BA2B8;
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// fdivs f12,f12,f13
	ctx.f12.f64 = double(float(ctx.f12.f64 / ctx.f13.f64));
	// fmuls f12,f12,f11
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f11.f64));
	// fmuls f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * f0.f64));
	// stfs f12,124(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// b 0x820ba2cc
	goto loc_820BA2CC;
loc_820BA2B8:
	// fcmpu cr6,f11,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f11.f64, f28.f64);
	// ble cr6,0x820ba2cc
	if (!cr6.getGT()) goto loc_820BA2CC;
	// fdivs f12,f11,f13
	ctx.f12.f64 = double(float(ctx.f11.f64 / ctx.f13.f64));
	// fmuls f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * f0.f64));
	// stfs f12,120(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
loc_820BA2CC:
	// fcmpu cr6,f10,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f10.f64, f28.f64);
	// bge cr6,0x820ba2ec
	if (!cr6.getLT()) goto loc_820BA2EC;
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// fdivs f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 / ctx.f13.f64));
	// fmuls f13,f13,f10
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f10.f64));
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,128(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// b 0x820ba300
	goto loc_820BA300;
loc_820BA2EC:
	// fcmpu cr6,f10,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f10.f64, f28.f64);
	// ble cr6,0x820ba300
	if (!cr6.getGT()) goto loc_820BA300;
	// fdivs f13,f10,f13
	ctx.f13.f64 = double(float(ctx.f10.f64 / ctx.f13.f64));
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
loc_820BA300:
	// rlwinm r11,r28,0,14,14
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba320
	if (cr6.getEQ()) goto loc_820BA320;
	// and r11,r29,r28
	r11.u64 = r29.u64 & r28.u64;
	// stw r14,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r14.u32);
	// rlwinm r11,r11,0,18,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ba324
	if (!cr6.getEQ()) goto loc_820BA324;
loc_820BA320:
	// stw r16,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r16.u32);
loc_820BA324:
	// and r11,r29,r28
	r11.u64 = r29.u64 & r28.u64;
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba344
	if (cr6.getEQ()) goto loc_820BA344;
	// rlwinm r11,r28,0,18,18
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x2000;
	// stw r14,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r14.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba348
	if (cr6.getEQ()) goto loc_820BA348;
loc_820BA344:
	// stw r16,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r16.u32);
loc_820BA348:
	// and r11,r29,r28
	r11.u64 = r29.u64 & r28.u64;
	// rlwinm r11,r11,0,17,17
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba368
	if (cr6.getEQ()) goto loc_820BA368;
	// rlwinm r11,r28,0,18,18
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x2000;
	// stw r14,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r14.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba36c
	if (cr6.getEQ()) goto loc_820BA36C;
loc_820BA368:
	// stw r16,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r16.u32);
loc_820BA36C:
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lis r10,0
	ctx.r10.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// ori r31,r10,32768
	r31.u64 = ctx.r10.u64 | 32768;
	// mr r26,r11
	r26.u64 = r11.u64;
	// mr r25,r11
	r25.u64 = r11.u64;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ba410
	if (cr6.getEQ()) goto loc_820BA410;
	// lwz r11,556(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 556);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ba410
	if (cr6.getEQ()) goto loc_820BA410;
	// fcmpu cr6,f27,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f27.f64, f28.f64);
	// bge cr6,0x820ba3d0
	if (!cr6.getLT()) goto loc_820BA3D0;
	// lfs f0,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f26
	f0.f64 = double(float(f0.f64 - f26.f64));
	// lfs f13,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f13.f64 = double(temp.f32);
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fmuls f23,f0,f27
	f23.f64 = double(float(f0.f64 * f27.f64));
	// fcmpu cr6,f23,f18
	cr6.compare(f23.f64, f18.f64);
	// ble cr6,0x820ba3d0
	if (!cr6.getGT()) goto loc_820BA3D0;
	// fmr f23,f18
	f23.f64 = f18.f64;
loc_820BA3D0:
	// fcmpu cr6,f27,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f27.f64, f28.f64);
	// ble cr6,0x820ba3f0
	if (!cr6.getGT()) goto loc_820BA3F0;
	// lfs f0,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f26
	f0.f64 = double(float(f0.f64 - f26.f64));
	// fdivs f22,f27,f0
	f22.f64 = double(float(f27.f64 / f0.f64));
	// fcmpu cr6,f22,f18
	cr6.compare(f22.f64, f18.f64);
	// ble cr6,0x820ba3f0
	if (!cr6.getGT()) goto loc_820BA3F0;
	// fmr f22,f18
	f22.f64 = f18.f64;
loc_820BA3F0:
	// andi. r11,r28,1028
	r11.u64 = r28.u64 & 1028;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba400
	if (cr6.getEQ()) goto loc_820BA400;
	// fmr f23,f18
	ctx.fpscr.disableFlushMode();
	f23.f64 = f18.f64;
loc_820BA400:
	// andi. r11,r28,2056
	r11.u64 = r28.u64 & 2056;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba410
	if (cr6.getEQ()) goto loc_820BA410;
	// fmr f22,f18
	ctx.fpscr.disableFlushMode();
	f22.f64 = f18.f64;
loc_820BA410:
	// and r11,r29,r28
	r11.u64 = r29.u64 & r28.u64;
	// mr r21,r16
	r21.u64 = r16.u64;
	// rlwinm r11,r11,0,12,13
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xC0000;
	// mr r20,r16
	r20.u64 = r16.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba454
	if (cr6.getEQ()) goto loc_820BA454;
	// lwz r11,8316(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8316);
	// mr r15,r14
	r15.u64 = r14.u64;
	// lwz r10,416(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 416);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bge cr6,0x820ba440
	if (!cr6.getLT()) goto loc_820BA440;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_820BA440:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bge cr6,0x820ba450
	if (!cr6.getLT()) goto loc_820BA450;
	// mr r20,r14
	r20.u64 = r14.u64;
	// b 0x820ba454
	goto loc_820BA454;
loc_820BA450:
	// mr r21,r14
	r21.u64 = r14.u64;
loc_820BA454:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ba48c
	if (!cr6.getEQ()) goto loc_820BA48C;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,556(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 556);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ba48c
	if (cr6.getEQ()) goto loc_820BA48C;
	// andi. r11,r28,1028
	r11.u64 = r28.u64 & 1028;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba48c
	if (cr6.getEQ()) goto loc_820BA48C;
	// mr r21,r14
	r21.u64 = r14.u64;
loc_820BA48C:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ba4c8
	if (!cr6.getEQ()) goto loc_820BA4C8;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,556(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 556);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ba4c8
	if (cr6.getEQ()) goto loc_820BA4C8;
	// not r11,r28
	r11.u64 = ~r28.u64;
	// andi. r11,r11,2056
	r11.u64 = r11.u64 & 2056;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba4c8
	if (cr6.getEQ()) goto loc_820BA4C8;
	// mr r20,r14
	r20.u64 = r14.u64;
loc_820BA4C8:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fmr f25,f28
	ctx.fpscr.disableFlushMode();
	f25.f64 = f28.f64;
	// fmr f24,f28
	f24.f64 = f28.f64;
	// lwz r11,556(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 556);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ba590
	if (cr6.getEQ()) goto loc_820BA590;
	// andi. r11,r28,514
	r11.u64 = r28.u64 & 514;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba4f0
	if (cr6.getEQ()) goto loc_820BA4F0;
	// fmr f25,f18
	f25.f64 = f18.f64;
loc_820BA4F0:
	// andi. r11,r28,257
	r11.u64 = r28.u64 & 257;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba500
	if (cr6.getEQ()) goto loc_820BA500;
	// fmr f24,f18
	ctx.fpscr.disableFlushMode();
	f24.f64 = f18.f64;
loc_820BA500:
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lfs f13,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// fdivs f31,f29,f0
	f31.f64 = double(float(f29.f64 / f0.f64));
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// fmr f1,f25
	ctx.f1.f64 = f25.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fcmpu cr6,f30,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f30.f64, ctx.f1.f64);
	// ble cr6,0x820ba590
	if (!cr6.getGT()) goto loc_820BA590;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// fmr f1,f24
	ctx.f1.f64 = f24.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fcmpu cr6,f30,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f30.f64, ctx.f1.f64);
	// ble cr6,0x820ba590
	if (!cr6.getGT()) goto loc_820BA590;
	// fcmpu cr6,f31,f28
	cr6.compare(f31.f64, f28.f64);
	// bge cr6,0x820ba578
	if (!cr6.getLT()) goto loc_820BA578;
	// fneg f25,f31
	f25.u64 = f31.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f25,f18
	cr6.compare(f25.f64, f18.f64);
	// ble cr6,0x820ba590
	if (!cr6.getGT()) goto loc_820BA590;
	// fmr f25,f18
	f25.f64 = f18.f64;
	// b 0x820ba590
	goto loc_820BA590;
loc_820BA578:
	// fcmpu cr6,f31,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f28.f64);
	// ble cr6,0x820ba590
	if (!cr6.getGT()) goto loc_820BA590;
	// fmr f24,f31
	f24.f64 = f31.f64;
	// fcmpu cr6,f31,f18
	cr6.compare(f31.f64, f18.f64);
	// ble cr6,0x820ba590
	if (!cr6.getGT()) goto loc_820BA590;
	// fmr f24,f18
	f24.f64 = f18.f64;
loc_820BA590:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x820ba5bc
	if (cr6.getEQ()) goto loc_820BA5BC;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpwi cr6,r3,29
	cr6.compare<int32_t>(ctx.r3.s32, 29, xer);
	// bne cr6,0x820ba5bc
	if (!cr6.getEQ()) goto loc_820BA5BC;
	// stw r14,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, r14.u32);
	// mr r23,r16
	r23.u64 = r16.u64;
	// stw r16,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r16.u32);
	// stw r16,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r16.u32);
	// stw r16,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r16.u32);
loc_820BA5BC:
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lwz r11,-1836(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1836);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820ba630
	if (!cr6.getEQ()) goto loc_820BA630;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,556(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 556);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ba630
	if (cr6.getEQ()) goto loc_820BA630;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpwi cr6,r3,32
	cr6.compare<int32_t>(ctx.r3.s32, 32, xer);
	// bne cr6,0x820ba5f8
	if (!cr6.getEQ()) goto loc_820BA5F8;
	// stfs f28,160(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// mr r22,r14
	r22.u64 = r14.u64;
	// b 0x820ba628
	goto loc_820BA628;
loc_820BA5F8:
	// fcmpu cr6,f20,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f20.f64, f28.f64);
	// bne cr6,0x820ba628
	if (!cr6.getEQ()) goto loc_820BA628;
	// fcmpu cr6,f21,f28
	cr6.compare(f21.f64, f28.f64);
	// bne cr6,0x820ba628
	if (!cr6.getEQ()) goto loc_820BA628;
	// lfs f0,128(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// ble cr6,0x820ba618
	if (!cr6.getGT()) goto loc_820BA618;
	// fmr f20,f0
	f20.f64 = f0.f64;
loc_820BA618:
	// lfs f0,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// ble cr6,0x820ba628
	if (!cr6.getGT()) goto loc_820BA628;
	// fmr f21,f0
	f21.f64 = f0.f64;
loc_820BA628:
	// stfs f28,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stfs f28,112(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
loc_820BA630:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpwi cr6,r3,30
	cr6.compare<int32_t>(ctx.r3.s32, 30, xer);
	// beq cr6,0x820ba688
	if (cr6.getEQ()) goto loc_820BA688;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpwi cr6,r3,31
	cr6.compare<int32_t>(ctx.r3.s32, 31, xer);
	// beq cr6,0x820ba688
	if (cr6.getEQ()) goto loc_820BA688;
	// rlwinm r11,r28,0,18,18
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// beq cr6,0x820ba680
	if (cr6.getEQ()) goto loc_820BA680;
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820ba680
	if (!cr6.getEQ()) goto loc_820BA680;
	// rlwinm r10,r28,0,14,14
	ctx.r10.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820ba680
	if (!cr6.getEQ()) goto loc_820BA680;
	// mr r27,r14
	r27.u64 = r14.u64;
	// b 0x820ba6c8
	goto loc_820BA6C8;
loc_820BA680:
	// mr r27,r16
	r27.u64 = r16.u64;
	// b 0x820ba6c8
	goto loc_820BA6C8;
loc_820BA688:
	// rlwinm r11,r28,0,18,18
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// beq cr6,0x820ba680
	if (cr6.getEQ()) goto loc_820BA680;
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820ba680
	if (!cr6.getEQ()) goto loc_820BA680;
	// rlwinm r10,r28,0,14,14
	ctx.r10.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820ba680
	if (!cr6.getEQ()) goto loc_820BA680;
	// rlwinm r10,r24,0,18,18
	ctx.r10.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820ba680
	if (!cr6.getEQ()) goto loc_820BA680;
	// mr r27,r14
	r27.u64 = r14.u64;
	// b 0x820ba6c8
	goto loc_820BA6C8;
loc_820BA6C4:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
loc_820BA6C8:
	// li r10,0
	ctx.r10.s64 = 0;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lis r24,-32014
	r24.s64 = -2098069504;
	// lis r23,-32014
	r23.s64 = -2098069504;
	// stw r10,468(r11)
	PPC_STORE_U32(r11.u32 + 468, ctx.r10.u32);
	// li r16,2
	r16.s64 = 2;
	// beq cr6,0x820ba8f0
	if (cr6.getEQ()) goto loc_820BA8F0;
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lwz r11,-1836(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1836);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1828(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1828);
	// bne cr6,0x820ba7b0
	if (!cr6.getEQ()) goto loc_820BA7B0;
	// li r3,32
	ctx.r3.s64 = 32;
	// lwz r31,8(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// bl 0x820a5620
	sub_820A5620(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,32
	ctx.r3.s64 = 32;
	// stw r11,216(r31)
	PPC_STORE_U32(r31.u32 + 216, r11.u32);
	// bl 0x820aabb0
	sub_820AABB0(ctx, base);
	// li r3,32
	ctx.r3.s64 = 32;
	// bl 0x820c0fb8
	sub_820C0FB8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpwi cr6,r3,32
	cr6.compare<int32_t>(ctx.r3.s32, 32, xer);
	// bne cr6,0x820ba750
	if (!cr6.getEQ()) goto loc_820BA750;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a55c8
	sub_820A55C8(ctx, base);
	// lwz r11,216(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 216);
	// add r11,r3,r11
	r11.u64 = ctx.r3.u64 + r11.u64;
	// stw r11,216(r31)
	PPC_STORE_U32(r31.u32 + 216, r11.u32);
	// bl 0x820a7340
	sub_820A7340(ctx, base);
loc_820BA750:
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,3
	ctx.r10.s64 = 3;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// stw r9,196(r31)
	PPC_STORE_U32(r31.u32 + 196, ctx.r9.u32);
	// stw r11,-1836(r28)
	PPC_STORE_U32(r28.u32 + -1836, r11.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stfs f28,632(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 632, temp.u32);
	// stfs f28,640(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
	// stfs f28,600(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 600, temp.u32);
	// stfs f28,8516(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 8516, temp.u32);
	// addi r11,r11,664
	r11.s64 = r11.s64 + 664;
loc_820BA77C:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stfs f28,-12(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + -12, temp.u32);
	// stfs f28,0(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820ba77c
	if (!cr6.getEQ()) goto loc_820BA77C;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stfs f28,676(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 676, temp.u32);
	// stfs f28,680(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 680, temp.u32);
	// stw r16,416(r11)
	PPC_STORE_U32(r11.u32 + 416, r16.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stb r9,8520(r11)
	PPC_STORE_U8(r11.u32 + 8520, ctx.r9.u8);
	// b 0x820ba8f0
	goto loc_820BA8F0;
loc_820BA7B0:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ba8e8
	if (cr6.getEQ()) goto loc_820BA8E8;
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// bne cr6,0x820ba8e8
	if (!cr6.getEQ()) goto loc_820BA8E8;
	// lwz r31,8(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x820ba8e8
	if (!cr6.getEQ()) goto loc_820BA8E8;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1780(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1780);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820ba8e8
	if (cr6.getEQ()) goto loc_820BA8E8;
	// li r3,32
	ctx.r3.s64 = 32;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r3,32
	ctx.r3.s64 = 32;
	// lwz r4,216(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 216);
	// bl 0x820aabb0
	sub_820AABB0(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lfs f0,200(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 200);
	f0.f64 = double(temp.f32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,216(r31)
	PPC_STORE_U32(r31.u32 + 216, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f0,-1800(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1800, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,14288(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14288);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f0,-1796(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1796, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f0,204(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 204);
	f0.f64 = double(temp.f32);
	// stfs f0,-1776(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1776, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f0,204(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 204);
	f0.f64 = double(temp.f32);
	// stfs f0,-1792(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1792, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,15460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15460);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f0,-1788(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1788, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f28,-1784(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + -1784, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f0,220(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 220);
	f0.f64 = double(temp.f32);
	// stfs f28,-1812(r23)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r23.u32 + -1812, temp.u32);
	// stfs f0,-1808(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1808, temp.u32);
	// mr r11,r14
	r11.u64 = r14.u64;
	// stw r11,-1836(r28)
	PPC_STORE_U32(r28.u32 + -1836, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1888(r24)
	PPC_STORE_U32(r24.u32 + -1888, r11.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stfs f28,632(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 632, temp.u32);
	// stfs f28,640(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
	// stfs f28,600(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 600, temp.u32);
	// stfs f28,8516(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 8516, temp.u32);
	// stw r14,416(r11)
	PPC_STORE_U32(r11.u32 + 416, r14.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f28,-3672(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + -3672, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f18,-3004(r11)
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(r11.u32 + -3004, temp.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lfs f0,596(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 596);
	f0.f64 = double(temp.f32);
	// stfs f0,-1896(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + -1896, temp.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f0,612(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 612);
	f0.f64 = double(temp.f32);
	// stfs f0,-1872(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + -1872, temp.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f0,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// addi r10,r10,-2960
	ctx.r10.s64 = ctx.r10.s64 + -2960;
	// stfs f0,0(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// lfs f0,1464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1464);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// lfs f0,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	f0.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// stfs f0,8(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 8, temp.u32);
	// stw r11,-1764(r29)
	PPC_STORE_U32(r29.u32 + -1764, r11.u32);
	// bl 0x820b0a20
	sub_820B0A20(ctx, base);
	// b 0x820ba8f0
	goto loc_820BA8F0;
loc_820BA8E8:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r14,468(r11)
	PPC_STORE_U32(r11.u32 + 468, r14.u32);
loc_820BA8F0:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// li r10,0
	ctx.r10.s64 = 0;
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// stw r10,472(r11)
	PPC_STORE_U32(r11.u32 + 472, ctx.r10.u32);
	// beq cr6,0x820ba90c
	if (cr6.getEQ()) goto loc_820BA90C;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r14,472(r11)
	PPC_STORE_U32(r11.u32 + 472, r14.u32);
loc_820BA90C:
	// cmpwi cr6,r18,0
	cr6.compare<int32_t>(r18.s32, 0, xer);
	// bne cr6,0x820ba944
	if (!cr6.getEQ()) goto loc_820BA944;
	// lfs f0,140(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// beq cr6,0x820ba928
	if (cr6.getEQ()) goto loc_820BA928;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,140(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
loc_820BA928:
	// fcmpu cr6,f14,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f14.f64, f28.f64);
	// beq cr6,0x820ba934
	if (cr6.getEQ()) goto loc_820BA934;
	// fneg f14,f14
	f14.u64 = f14.u64 ^ 0x8000000000000000;
loc_820BA934:
	// lfs f0,120(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// lfs f13,124(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,120(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// stfs f0,124(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
loc_820BA944:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lfs f0,508(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 508);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// blt cr6,0x820ba964
	if (cr6.getLT()) goto loc_820BA964;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820ba964
	if (!cr6.getEQ()) goto loc_820BA964;
	// li r27,0
	r27.s64 = 0;
loc_820BA964:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820ad538
	sub_820AD538(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lwz r11,16576(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16576);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820baa00
	if (cr6.getEQ()) goto loc_820BAA00;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0de8
	sub_820A0DE8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ba99c
	if (!cr6.getEQ()) goto loc_820BA99C;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0de8
	sub_820A0DE8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820baa00
	if (cr6.getEQ()) goto loc_820BAA00;
loc_820BA99C:
	// li r3,0
	ctx.r3.s64 = 0;
	// fmr f31,f28
	ctx.fpscr.disableFlushMode();
	f31.f64 = f28.f64;
	// bl 0x820a0de8
	sub_820A0DE8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ba9cc
	if (cr6.getEQ()) goto loc_820BA9CC;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a4378
	sub_820A4378(ctx, base);
	// fcmpu cr6,f1,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f28.f64);
	// ble cr6,0x820ba9cc
	if (!cr6.getGT()) goto loc_820BA9CC;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a4378
	sub_820A4378(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
loc_820BA9CC:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0de8
	sub_820A0DE8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ba9f8
	if (cr6.getEQ()) goto loc_820BA9F8;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a4378
	sub_820A4378(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x820ba9f8
	if (!cr6.getGT()) goto loc_820BA9F8;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a4378
	sub_820A4378(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
loc_820BA9F8:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x82120190
	sub_82120190(ctx, base);
loc_820BAA00:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820a64c0
	sub_820A64C0(ctx, base);
	// fcmpu cr6,f23,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f23.f64, f28.f64);
	// ble cr6,0x820baa1c
	if (!cr6.getGT()) goto loc_820BAA1C;
	// fmr f1,f23
	ctx.f1.f64 = f23.f64;
	// bl 0x820a0f50
	sub_820A0F50(ctx, base);
loc_820BAA1C:
	// fcmpu cr6,f22,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f22.f64, f28.f64);
	// ble cr6,0x820baa2c
	if (!cr6.getGT()) goto loc_820BAA2C;
	// fmr f1,f22
	ctx.f1.f64 = f22.f64;
	// bl 0x820a0ff8
	sub_820A0FF8(ctx, base);
loc_820BAA2C:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820baa6c
	if (!cr6.getEQ()) goto loc_820BAA6C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// lfs f31,13960(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// beq cr6,0x820baa60
	if (cr6.getEQ()) goto loc_820BAA60;
	// bl 0x820a0eb8
	sub_820A0EB8(ctx, base);
	// fcmpu cr6,f1,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f28.f64);
	// bgt cr6,0x820baa60
	if (cr6.getGT()) goto loc_820BAA60;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
loc_820BAA60:
	// bl 0x820b14d0
	sub_820B14D0(ctx, base);
	// bl 0x820b1650
	sub_820B1650(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
loc_820BAA6C:
	// lis r19,-32014
	r19.s64 = -2098069504;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lis r27,-32014
	r27.s64 = -2098069504;
	// lwz r10,-1836(r19)
	ctx.r10.u64 = PPC_LOAD_U32(r19.u32 + -1836);
	// lfs f26,6576(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 6576);
	f26.f64 = double(temp.f32);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f27,12468(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12468);
	f27.f64 = double(temp.f32);
	// bne cr6,0x820bace4
	if (!cr6.getEQ()) goto loc_820BACE4;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r10,-1888(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + -1888);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// stfs f28,-1772(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + -1772, temp.u32);
	// bne cr6,0x820bb01c
	if (!cr6.getEQ()) goto loc_820BB01C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// fmr f30,f28
	f30.f64 = f28.f64;
	// fmr f31,f28
	f31.f64 = f28.f64;
	// fcmpu cr6,f21,f28
	cr6.compare(f21.f64, f28.f64);
	// lfs f12,13980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	ctx.f12.f64 = double(temp.f32);
	// ble cr6,0x820baad0
	if (!cr6.getGT()) goto loc_820BAAD0;
	// fmuls f0,f13,f21
	f0.f64 = double(float(ctx.f13.f64 * f21.f64));
	// fmuls f30,f0,f12
	f30.f64 = double(float(f0.f64 * ctx.f12.f64));
	// b 0x820baae8
	goto loc_820BAAE8;
loc_820BAAD0:
	// fcmpu cr6,f20,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f20.f64, f28.f64);
	// ble cr6,0x820baae8
	if (!cr6.getGT()) goto loc_820BAAE8;
	// fmuls f11,f13,f20
	ctx.f11.f64 = double(float(ctx.f13.f64 * f20.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15456(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15456);
	f0.f64 = double(temp.f32);
	// fmuls f30,f11,f0
	f30.f64 = double(float(ctx.f11.f64 * f0.f64));
loc_820BAAE8:
	// lfs f24,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f24.f64 = double(temp.f32);
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x820bab3c
	if (cr6.getEQ()) goto loc_820BAB3C;
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lfs f11,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f11.f64 = double(temp.f32);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fsubs f0,f11,f0
	f0.f64 = double(float(ctx.f11.f64 - f0.f64));
	// fdivs f0,f29,f0
	f0.f64 = double(float(f29.f64 / f0.f64));
	// fcmpu cr6,f0,f18
	cr6.compare(f0.f64, f18.f64);
	// ble cr6,0x820bab28
	if (!cr6.getGT()) goto loc_820BAB28;
	// fmr f0,f18
	f0.f64 = f18.f64;
	// b 0x820bab34
	goto loc_820BAB34;
loc_820BAB28:
	// fcmpu cr6,f0,f24
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f24.f64);
	// bge cr6,0x820bab34
	if (!cr6.getLT()) goto loc_820BAB34;
	// fmr f0,f24
	f0.f64 = f24.f64;
loc_820BAB34:
	// fmuls f0,f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fmuls f31,f0,f12
	f31.f64 = double(float(f0.f64 * ctx.f12.f64));
loc_820BAB3C:
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fmr f25,f1
	ctx.fpscr.disableFlushMode();
	f25.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// lfs f0,-1772(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + -1772);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f25,f1
	cr6.compare(f25.f64, ctx.f1.f64);
	// ble cr6,0x820bab64
	if (!cr6.getGT()) goto loc_820BAB64;
	// fadds f0,f30,f0
	f0.f64 = double(float(f30.f64 + f0.f64));
	// b 0x820bab68
	goto loc_820BAB68;
loc_820BAB64:
	// fadds f0,f31,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 + f0.f64));
loc_820BAB68:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stfs f0,-1772(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -1772, temp.u32);
	// lwz r31,116(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r10,556(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 556);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bb00c
	if (!cr6.getEQ()) goto loc_820BB00C;
	// fmr f31,f28
	f31.f64 = f28.f64;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// fmr f30,f18
	f30.f64 = f18.f64;
	// beq cr6,0x820babb0
	if (cr6.getEQ()) goto loc_820BABB0;
	// extsw r10,r31
	ctx.r10.s64 = r31.s32;
	// lfs f13,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// std r10,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r10.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// fdivs f31,f16,f0
	f31.f64 = double(float(f16.f64 / f0.f64));
loc_820BABB0:
	// lwz r25,108(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x820babdc
	if (cr6.getEQ()) goto loc_820BABDC;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// lwz r26,100(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// fcmpu cr6,f1,f18
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f18.f64);
	// bge cr6,0x820bac00
	if (!cr6.getLT()) goto loc_820BAC00;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fmr f31,f18
	f31.f64 = f18.f64;
	// b 0x820bac20
	goto loc_820BAC20;
loc_820BABDC:
	// lwz r26,100(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820bac04
	if (cr6.getEQ()) goto loc_820BAC04;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fcmpu cr6,f1,f18
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f18.f64);
	// bge cr6,0x820bac00
	if (!cr6.getLT()) goto loc_820BAC00;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// b 0x820bac1c
	goto loc_820BAC1C;
loc_820BAC00:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
loc_820BAC04:
	// fcmpu cr6,f31,f18
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f18.f64);
	// ble cr6,0x820bac14
	if (!cr6.getGT()) goto loc_820BAC14;
	// fmr f31,f18
	f31.f64 = f18.f64;
	// b 0x820bac20
	goto loc_820BAC20;
loc_820BAC14:
	// fcmpu cr6,f31,f24
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f24.f64);
	// bge cr6,0x820bac20
	if (!cr6.getLT()) goto loc_820BAC20;
loc_820BAC1C:
	// fmr f31,f24
	ctx.fpscr.disableFlushMode();
	f31.f64 = f24.f64;
loc_820BAC20:
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lwz r10,-1764(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + -1764);
	// fmuls f0,f31,f19
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 * f19.f64));
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lfs f12,2692(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2692);
	ctx.f12.f64 = double(temp.f32);
	// ble cr6,0x820bac4c
	if (!cr6.getGT()) goto loc_820BAC4C;
	// lwz r9,-6384(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + -6384);
	// fmuls f0,f0,f12
	f0.f64 = double(float(f0.f64 * ctx.f12.f64));
	// fmr f30,f27
	f30.f64 = f27.f64;
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// stw r10,-1764(r29)
	PPC_STORE_U32(r29.u32 + -1764, ctx.r10.u32);
loc_820BAC4C:
	// lfs f13,640(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// beq cr6,0x820bb014
	if (cr6.getEQ()) goto loc_820BB014;
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x820bac9c
	if (!cr6.getLT()) goto loc_820BAC9C;
	// fsubs f10,f0,f13
	ctx.f10.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f11,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	ctx.f11.f64 = double(temp.f32);
	// li r29,0
	r29.s64 = 0;
	// fmadds f12,f10,f26,f12
	ctx.f12.f64 = double(float(ctx.f10.f64 * f26.f64 + ctx.f12.f64));
	// fmuls f10,f12,f30
	ctx.f10.f64 = double(float(ctx.f12.f64 * f30.f64));
	// lfs f12,13988(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13988);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f12,f10,f12
	ctx.f12.f64 = double(float(ctx.f10.f64 * ctx.f12.f64));
	// fmadds f13,f12,f11,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f11.f64 + ctx.f13.f64));
	// stfs f13,640(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x820bacdc
	if (!cr6.getGT()) goto loc_820BACDC;
	// stfs f0,640(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// b 0x820bb030
	goto loc_820BB030;
loc_820BAC9C:
	// fcmpu cr6,f13,f0
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x820bb014
	if (!cr6.getGT()) goto loc_820BB014;
	// lfs f13,640(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fsubs f10,f13,f0
	ctx.f10.f64 = double(float(ctx.f13.f64 - f0.f64));
	// lfs f11,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	ctx.f11.f64 = double(temp.f32);
	// li r29,0
	r29.s64 = 0;
	// fmadds f12,f10,f26,f12
	ctx.f12.f64 = double(float(ctx.f10.f64 * f26.f64 + ctx.f12.f64));
	// fmuls f10,f12,f30
	ctx.f10.f64 = double(float(ctx.f12.f64 * f30.f64));
	// lfs f12,15452(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15452);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f12,f10,f12
	ctx.f12.f64 = double(float(ctx.f10.f64 * ctx.f12.f64));
	// fmadds f13,f12,f11,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f11.f64 + ctx.f13.f64));
	// stfs f13,640(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x820bafe8
	if (!cr6.getLT()) goto loc_820BAFE8;
	// stfs f0,640(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
loc_820BACDC:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// b 0x820bb030
	goto loc_820BB030;
loc_820BACE4:
	// lwz r10,144(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lfs f13,636(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 636);
	ctx.f13.f64 = double(temp.f32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bad14
	if (cr6.getEQ()) goto loc_820BAD14;
	// lfs f0,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// lfs f13,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f13.f64 = double(temp.f32);
	// stfs f0,636(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 636, temp.u32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820bad74
	if (!cr6.getLT()) goto loc_820BAD74;
	// stfs f13,636(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 636, temp.u32);
	// b 0x820bad74
	goto loc_820BAD74;
loc_820BAD14:
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bad3c
	if (cr6.getEQ()) goto loc_820BAD3C;
	// lfs f0,-6368(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,636(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 636, temp.u32);
	// fcmpu cr6,f0,f18
	cr6.compare(f0.f64, f18.f64);
	// ble cr6,0x820bad74
	if (!cr6.getGT()) goto loc_820BAD74;
	// stfs f18,636(r11)
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(r11.u32 + 636, temp.u32);
	// b 0x820bad74
	goto loc_820BAD74;
loc_820BAD3C:
	// lfs f0,636(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 636);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// lfs f0,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	f0.f64 = double(temp.f32);
	// ble cr6,0x820bad60
	if (!cr6.getGT()) goto loc_820BAD60;
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f0,636(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 636, temp.u32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// bge cr6,0x820bad74
	if (!cr6.getLT()) goto loc_820BAD74;
	// b 0x820bad70
	goto loc_820BAD70;
loc_820BAD60:
	// fadds f0,f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,636(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 636, temp.u32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// ble cr6,0x820bad74
	if (!cr6.getGT()) goto loc_820BAD74;
loc_820BAD70:
	// stfs f28,636(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 636, temp.u32);
loc_820BAD74:
	// lfs f30,636(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 636);
	f30.f64 = double(temp.f32);
	// fmr f31,f28
	f31.f64 = f28.f64;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x820bada8
	if (cr6.getEQ()) goto loc_820BADA8;
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lfs f13,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// fdivs f31,f29,f0
	f31.f64 = double(float(f29.f64 / f0.f64));
loc_820BADA8:
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fmr f23,f1
	ctx.fpscr.disableFlushMode();
	f23.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fcmpu cr6,f23,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f23.f64, ctx.f1.f64);
	// ble cr6,0x820badd0
	if (!cr6.getGT()) goto loc_820BADD0;
	// stfs f30,632(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 632, temp.u32);
	// b 0x820badd4
	goto loc_820BADD4;
loc_820BADD0:
	// stfs f31,632(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 632, temp.u32);
loc_820BADD4:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r25,108(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// lfs f13,8396(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8396);
	ctx.f13.f64 = double(temp.f32);
	// beq cr6,0x820bae1c
	if (cr6.getEQ()) goto loc_820BAE1C;
	// lfs f0,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,8396(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8396, temp.u32);
	// fcmpu cr6,f0,f18
	cr6.compare(f0.f64, f18.f64);
	// ble cr6,0x820bae00
	if (!cr6.getGT()) goto loc_820BAE00;
	// stfs f18,8396(r11)
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(r11.u32 + 8396, temp.u32);
loc_820BAE00:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r10,-6384(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + -6384);
	// lwz r26,100(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r9,648(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 648);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r10,648(r11)
	PPC_STORE_U32(r11.u32 + 648, ctx.r10.u32);
	// b 0x820bae80
	goto loc_820BAE80;
loc_820BAE1C:
	// lwz r26,100(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820bae48
	if (cr6.getEQ()) goto loc_820BAE48;
	// lfs f0,-6368(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// lfs f23,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f23.f64 = double(temp.f32);
	// stfs f0,8396(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8396, temp.u32);
	// fcmpu cr6,f0,f23
	cr6.compare(f0.f64, f23.f64);
	// bge cr6,0x820bae84
	if (!cr6.getLT()) goto loc_820BAE84;
	// stfs f23,8396(r11)
	temp.f32 = float(f23.f64);
	PPC_STORE_U32(r11.u32 + 8396, temp.u32);
	// b 0x820bae84
	goto loc_820BAE84;
loc_820BAE48:
	// lfs f0,8396(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8396);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// lfs f0,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	f0.f64 = double(temp.f32);
	// ble cr6,0x820bae6c
	if (!cr6.getGT()) goto loc_820BAE6C;
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f0,8396(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8396, temp.u32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// bge cr6,0x820bae80
	if (!cr6.getLT()) goto loc_820BAE80;
	// b 0x820bae7c
	goto loc_820BAE7C;
loc_820BAE6C:
	// fadds f0,f13,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,8396(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8396, temp.u32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// ble cr6,0x820bae80
	if (!cr6.getGT()) goto loc_820BAE80;
loc_820BAE7C:
	// stfs f28,8396(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 8396, temp.u32);
loc_820BAE80:
	// lfs f23,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f23.f64 = double(temp.f32);
loc_820BAE84:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fmr f31,f28
	ctx.fpscr.disableFlushMode();
	f31.f64 = f28.f64;
	// lwz r31,116(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// li r29,0
	r29.s64 = 0;
	// lfs f30,8396(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8396);
	f30.f64 = double(temp.f32);
	// beq cr6,0x820baef8
	if (cr6.getEQ()) goto loc_820BAEF8;
	// extsw r10,r31
	ctx.r10.s64 = r31.s32;
	// lfs f12,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f12.f64 = double(temp.f32);
	// subfic r9,r31,70
	xer.ca = r31.u32 <= 70;
	ctx.r9.s64 = 70 - r31.s64;
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// std r10,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r10.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// std r9,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.r9.u64);
	// lfd f13,176(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fsubs f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 - f0.f64));
	// fcmpu cr6,f16,f13
	cr6.compare(f16.f64, ctx.f13.f64);
	// fdivs f31,f16,f0
	f31.f64 = double(float(f16.f64 / f0.f64));
	// ble cr6,0x820baef4
	if (!cr6.getGT()) goto loc_820BAEF4;
	// lwz r9,648(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 648);
	// lwz r10,-6384(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + -6384);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r10,648(r11)
	PPC_STORE_U32(r11.u32 + 648, ctx.r10.u32);
	// b 0x820baef8
	goto loc_820BAEF8;
loc_820BAEF4:
	// stw r29,648(r11)
	PPC_STORE_U32(r11.u32 + 648, r29.u32);
loc_820BAEF8:
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fmr f22,f1
	ctx.fpscr.disableFlushMode();
	f22.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fcmpu cr6,f22,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f22.f64, ctx.f1.f64);
	// addi r11,r10,640
	r11.s64 = ctx.r10.s64 + 640;
	// ble cr6,0x820baf24
	if (!cr6.getGT()) goto loc_820BAF24;
	// stfs f30,640(r10)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r10.u32 + 640, temp.u32);
	// b 0x820baf28
	goto loc_820BAF28;
loc_820BAF24:
	// stfs f31,640(r10)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r10.u32 + 640, temp.u32);
loc_820BAF28:
	// lfs f0,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f18
	cr6.compare(f0.f64, f18.f64);
	// ble cr6,0x820baf38
	if (!cr6.getGT()) goto loc_820BAF38;
	// stfs f18,0(r11)
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
loc_820BAF38:
	// lfs f0,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f23
	cr6.compare(f0.f64, f23.f64);
	// bge cr6,0x820baf48
	if (!cr6.getLT()) goto loc_820BAF48;
	// stfs f23,0(r11)
	temp.f32 = float(f23.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
loc_820BAF48:
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lfs f0,632(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 632);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f18
	cr6.compare(f0.f64, f18.f64);
	// ble cr6,0x820baf5c
	if (!cr6.getGT()) goto loc_820BAF5C;
	// stfs f18,632(r10)
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(ctx.r10.u32 + 632, temp.u32);
loc_820BAF5C:
	// lfs f0,632(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 632);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f23
	cr6.compare(f0.f64, f23.f64);
	// bge cr6,0x820baf6c
	if (!cr6.getLT()) goto loc_820BAF6C;
	// stfs f23,632(r10)
	temp.f32 = float(f23.f64);
	PPC_STORE_U32(ctx.r10.u32 + 632, temp.u32);
loc_820BAF6C:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// lfs f0,15448(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15448);
	f0.f64 = double(temp.f32);
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,0(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lfs f13,644(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 644);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,0(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// bne cr6,0x820bafa8
	if (!cr6.getEQ()) goto loc_820BAFA8;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x820bafa8
	if (!cr6.getEQ()) goto loc_820BAFA8;
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// stw r29,648(r11)
	PPC_STORE_U32(r11.u32 + 648, r29.u32);
loc_820BAFA8:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fcmpu cr6,f25,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f25.f64, f28.f64);
	// beq cr6,0x820bafc0
	if (cr6.getEQ()) goto loc_820BAFC0;
	// fneg f0,f25
	f0.u64 = f25.u64 ^ 0x8000000000000000;
	// stfs f0,4892(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 4892, temp.u32);
	// b 0x820bafd4
	goto loc_820BAFD4;
loc_820BAFC0:
	// fcmpu cr6,f24,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f24.f64, f28.f64);
	// beq cr6,0x820bafd0
	if (cr6.getEQ()) goto loc_820BAFD0;
	// stfs f24,4892(r11)
	temp.f32 = float(f24.f64);
	PPC_STORE_U32(r11.u32 + 4892, temp.u32);
	// b 0x820bafd4
	goto loc_820BAFD4;
loc_820BAFD0:
	// stfs f28,4892(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 4892, temp.u32);
loc_820BAFD4:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x820baff0
	if (cr6.getEQ()) goto loc_820BAFF0;
	// mr r4,r15
	ctx.r4.u64 = r15.u64;
	// li r3,-2
	ctx.r3.s64 = -2;
	// bl 0x820b0000
	sub_820B0000(ctx, base);
loc_820BAFE8:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// b 0x820bb02c
	goto loc_820BB02C;
loc_820BAFF0:
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// beq cr6,0x820bafe8
	if (cr6.getEQ()) goto loc_820BAFE8;
	// mr r4,r15
	ctx.r4.u64 = r15.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820b0000
	sub_820B0000(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// b 0x820bb02c
	goto loc_820BB02C;
loc_820BB00C:
	// lwz r26,100(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r25,108(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
loc_820BB014:
	// li r29,0
	r29.s64 = 0;
	// b 0x820bb030
	goto loc_820BB030;
loc_820BB01C:
	// lwz r26,100(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r29,0
	r29.s64 = 0;
	// lwz r25,108(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r31,116(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_820BB02C:
	// lfs f24,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f24.f64 = double(temp.f32);
loc_820BB030:
	// lwz r10,648(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 648);
	// lfs f0,644(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 644);
	f0.f64 = double(temp.f32);
	// cmpwi cr6,r10,180
	cr6.compare<int32_t>(ctx.r10.s32, 180, xer);
	// addi r10,r11,644
	ctx.r10.s64 = r11.s64 + 644;
	// blt cr6,0x820bb084
	if (cr6.getLT()) goto loc_820BB084;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f12,12024(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 12024);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// bge cr6,0x820bb070
	if (!cr6.getLT()) goto loc_820BB070;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lfs f11,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// lfs f13,3904(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3904);
	ctx.f13.f64 = double(temp.f32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fmadds f0,f0,f13,f11
	f0.f64 = double(float(f0.f64 * ctx.f13.f64 + ctx.f11.f64));
	// stfs f0,0(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
loc_820BB070:
	// lfs f0,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x820bb0bc
	if (!cr6.getGT()) goto loc_820BB0BC;
	// stfs f12,0(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// b 0x820bb0b8
	goto loc_820BB0B8;
loc_820BB084:
	// fcmpu cr6,f0,f18
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f18.f64);
	// ble cr6,0x820bb0a8
	if (!cr6.getGT()) goto loc_820BB0A8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lfs f12,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,3904(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3904);
	ctx.f13.f64 = double(temp.f32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fnmsubs f0,f0,f13,f12
	f0.f64 = double(float(-(f0.f64 * ctx.f13.f64 - ctx.f12.f64)));
	// stfs f0,0(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
loc_820BB0A8:
	// lfs f0,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f18
	cr6.compare(f0.f64, f18.f64);
	// bge cr6,0x820bb0bc
	if (!cr6.getLT()) goto loc_820BB0BC;
	// stfs f18,0(r10)
	temp.f32 = float(f18.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
loc_820BB0B8:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
loc_820BB0BC:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bb7d0
	if (!cr6.getEQ()) goto loc_820BB7D0;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r9,540(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 540);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// lfs f30,15088(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15088);
	f30.f64 = double(temp.f32);
	// beq cr6,0x820bb24c
	if (cr6.getEQ()) goto loc_820BB24C;
	// lwz r10,1456(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r10,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r10.u32);
	// beq cr6,0x820bb24c
	if (cr6.getEQ()) goto loc_820BB24C;
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r6,r1,116
	ctx.r6.s64 = ctx.r1.s64 + 116;
	// addi r5,r1,108
	ctx.r5.s64 = ctx.r1.s64 + 108;
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// lfs f31,12020(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12020);
	f31.f64 = double(temp.f32);
	// bl 0x820b4028
	sub_820B4028(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lfs f13,1460(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,1472(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1472);
	f0.f64 = double(temp.f32);
	// fmadds f0,f0,f31,f13
	f0.f64 = double(float(f0.f64 * f31.f64 + ctx.f13.f64));
	// stfs f0,216(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 216, temp.u32);
	// lfs f0,1464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1464);
	f0.f64 = double(temp.f32);
	// stfs f0,220(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 220, temp.u32);
	// lfs f0,1480(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1480);
	f0.f64 = double(temp.f32);
	// lfs f13,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f31,f13
	f0.f64 = double(float(f0.f64 * f31.f64 + ctx.f13.f64));
	// stfs f0,224(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 224, temp.u32);
	// bl 0x8210f8f0
	sub_8210F8F0(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// li r8,4096
	ctx.r8.s64 = 4096;
	// lfs f6,116(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f6.f64 = double(temp.f32);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// lfs f5,108(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	ctx.f5.f64 = double(temp.f32);
	// lfs f4,224(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	ctx.f4.f64 = double(temp.f32);
	// fmr f8,f18
	ctx.f8.f64 = f18.f64;
	// lfs f3,216(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	ctx.f3.f64 = double(temp.f32);
	// fmr f7,f28
	ctx.f7.f64 = f28.f64;
	// lfs f2,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bb188
	if (cr6.getEQ()) goto loc_820BB188;
	// lwz r3,176(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lfs f2,224(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,216(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b2588
	sub_820B2588(ctx, base);
	// stfs f1,220(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(ctx.r1.u32 + 220, temp.u32);
	// b 0x820bb1d8
	goto loc_820BB1D8;
loc_820BB188:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r5,r1,216
	ctx.r5.s64 = ctx.r1.s64 + 216;
	// addi r4,r11,1472
	ctx.r4.s64 = r11.s64 + 1472;
	// addi r3,r11,1460
	ctx.r3.s64 = r11.s64 + 1460;
	// bl 0x82121c68
	sub_82121C68(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lfs f1,216(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	ctx.f1.f64 = double(temp.f32);
	// lwz r3,176(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lfs f2,224(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	ctx.f2.f64 = double(temp.f32);
	// lfs f0,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// fsubs f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 - f0.f64));
	// lfs f13,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f2,f13
	ctx.f13.f64 = double(float(ctx.f2.f64 - ctx.f13.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fsqrts f31,f0
	f31.f64 = double(float(sqrt(f0.f64)));
	// bl 0x820b2588
	sub_820B2588(ctx, base);
	// stfs f1,220(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(ctx.r1.u32 + 220, temp.u32);
	// fcmpu cr6,f31,f28
	cr6.compare(f31.f64, f28.f64);
	// ble cr6,0x820bb248
	if (!cr6.getGT()) goto loc_820BB248;
loc_820BB1D8:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,376(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 376);
	f0.f64 = double(temp.f32);
	// fsubs f1,f1,f0
	ctx.f1.f64 = double(float(ctx.f1.f64 - f0.f64));
	// lfs f0,15444(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15444);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// ble cr6,0x820bb24c
	if (!cr6.getGT()) goto loc_820BB24C;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,14052(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14052);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x820bb24c
	if (!cr6.getLT()) goto loc_820BB24C;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14308(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14308);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmsubs f30,f1,f0,f27
	f30.f64 = double(float(ctx.f1.f64 * f0.f64 - f27.f64));
	// lfs f0,14216(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14216);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f30,f0
	cr6.compare(f30.f64, f0.f64);
	// blt cr6,0x820bb234
	if (cr6.getLT()) goto loc_820BB234;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14020(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14020);
	f0.f64 = double(temp.f32);
	// fsubs f30,f30,f0
	f30.f64 = double(float(f30.f64 - f0.f64));
loc_820BB234:
	// fcmpu cr6,f30,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f30.f64, f28.f64);
	// ble cr6,0x820bb248
	if (!cr6.getGT()) goto loc_820BB248;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15440(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15440);
	f0.f64 = double(temp.f32);
	// fmuls f30,f30,f0
	f30.f64 = double(float(f30.f64 * f0.f64));
loc_820BB248:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
loc_820BB24C:
	// lwz r10,536(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 536);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bb31c
	if (cr6.getEQ()) goto loc_820BB31C;
	// srawi r10,r31,1
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0x1) != 0);
	ctx.r10.s64 = r31.s32 >> 1;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// subfic r9,r10,40
	xer.ca = ctx.r10.u32 <= 40;
	ctx.r9.s64 = 40 - ctx.r10.s64;
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// std r9,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r9.u64);
	// lfd f0,216(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// bge cr6,0x820bb31c
	if (!cr6.getLT()) goto loc_820BB31C;
	// addi r10,r10,-40
	ctx.r10.s64 = ctx.r10.s64 + -40;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r10.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// ble cr6,0x820bb31c
	if (!cr6.getGT()) goto loc_820BB31C;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x820bb31c
	if (!cr6.getEQ()) goto loc_820BB31C;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bne cr6,0x820bb31c
	if (!cr6.getEQ()) goto loc_820BB31C;
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// subfic r9,r10,40
	xer.ca = ctx.r10.u32 <= 40;
	ctx.r9.s64 = 40 - ctx.r10.s64;
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// std r9,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r9.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f29,f0
	cr6.compare(f29.f64, f0.f64);
	// bge cr6,0x820bb31c
	if (!cr6.getLT()) goto loc_820BB31C;
	// addi r10,r10,-40
	ctx.r10.s64 = ctx.r10.s64 + -40;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r10.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f29,f0
	cr6.compare(f29.f64, f0.f64);
	// ble cr6,0x820bb31c
	if (!cr6.getGT()) goto loc_820BB31C;
	// lwz r10,144(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bb31c
	if (!cr6.getEQ()) goto loc_820BB31C;
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bb31c
	if (!cr6.getEQ()) goto loc_820BB31C;
	// stw r29,536(r11)
	PPC_STORE_U32(r11.u32 + 536, r29.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
loc_820BB31C:
	// lwz r10,-1836(r19)
	ctx.r10.u64 = PPC_LOAD_U32(r19.u32 + -1836);
	// lfs f1,120(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f1.f64 = double(temp.f32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bb488
	if (!cr6.getEQ()) goto loc_820BB488;
	// fcmpu cr6,f1,f28
	cr6.compare(ctx.f1.f64, f28.f64);
	// bgt cr6,0x820bb470
	if (cr6.getGT()) goto loc_820BB470;
	// lfs f0,124(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// bgt cr6,0x820bb470
	if (cr6.getGT()) goto loc_820BB470;
	// lwz r10,136(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bb354
	if (cr6.getEQ()) goto loc_820BB354;
	// fcmpu cr6,f14,f28
	cr6.compare(f14.f64, f28.f64);
	// bne cr6,0x820bb470
	if (!cr6.getEQ()) goto loc_820BB470;
loc_820BB354:
	// lwz r10,544(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 544);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bb3cc
	if (cr6.getEQ()) goto loc_820BB3CC;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x820bb3a8
	if (cr6.getEQ()) goto loc_820BB3A8;
	// subfic r10,r31,70
	xer.ca = r31.u32 <= 70;
	ctx.r10.s64 = 70 - r31.s64;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r10.u64);
	// lfd f0,216(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// bgt cr6,0x820bb3b8
	if (cr6.getGT()) goto loc_820BB3B8;
	// addi r10,r31,-70
	ctx.r10.s64 = r31.s64 + -70;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r10.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// blt cr6,0x820bb3b8
	if (cr6.getLT()) goto loc_820BB3B8;
loc_820BB3A8:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x820bb3b8
	if (!cr6.getEQ()) goto loc_820BB3B8;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820bb3c0
	if (cr6.getEQ()) goto loc_820BB3C0;
loc_820BB3B8:
	// stw r14,552(r11)
	PPC_STORE_U32(r11.u32 + 552, r14.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
loc_820BB3C0:
	// lwz r10,552(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 552);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// b 0x820bb42c
	goto loc_820BB42C;
loc_820BB3CC:
	// lwz r10,548(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 548);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bb468
	if (cr6.getEQ()) goto loc_820BB468;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x820bb420
	if (cr6.getEQ()) goto loc_820BB420;
	// subfic r10,r31,70
	xer.ca = r31.u32 <= 70;
	ctx.r10.s64 = 70 - r31.s64;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r10.u64);
	// lfd f0,216(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// bgt cr6,0x820bb430
	if (cr6.getGT()) goto loc_820BB430;
	// addi r10,r31,-70
	ctx.r10.s64 = r31.s64 + -70;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r10.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// blt cr6,0x820bb430
	if (cr6.getLT()) goto loc_820BB430;
loc_820BB420:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x820bb430
	if (!cr6.getEQ()) goto loc_820BB430;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
loc_820BB42C:
	// beq cr6,0x820bb468
	if (cr6.getEQ()) goto loc_820BB468;
loc_820BB430:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,612(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 612);
	f0.f64 = double(temp.f32);
	// lfs f13,2780(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2780);
	ctx.f13.f64 = double(temp.f32);
	// fadds f13,f30,f13
	ctx.f13.f64 = double(float(f30.f64 + ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820bb454
	if (cr6.getGT()) goto loc_820BB454;
	// fsubs f13,f30,f17
	ctx.f13.f64 = double(float(f30.f64 - f17.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820bb468
	if (!cr6.getLT()) goto loc_820BB468;
loc_820BB454:
	// lwz r10,536(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 536);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bb468
	if (!cr6.getEQ()) goto loc_820BB468;
	// stw r14,524(r11)
	PPC_STORE_U32(r11.u32 + 524, r14.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
loc_820BB468:
	// stw r29,532(r11)
	PPC_STORE_U32(r11.u32 + 532, r29.u32);
	// b 0x820bb484
	goto loc_820BB484;
loc_820BB470:
	// stw r29,524(r11)
	PPC_STORE_U32(r11.u32 + 524, r29.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r14,532(r11)
	PPC_STORE_U32(r11.u32 + 532, r14.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r29,552(r11)
	PPC_STORE_U32(r11.u32 + 552, r29.u32);
loc_820BB484:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
loc_820BB488:
	// lwz r10,524(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 524);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bb54c
	if (cr6.getEQ()) goto loc_820BB54C;
	// lwz r10,-1836(r19)
	ctx.r10.u64 = PPC_LOAD_U32(r19.u32 + -1836);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bb7d0
	if (!cr6.getEQ()) goto loc_820BB7D0;
	// lfs f0,620(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 620);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// lfs f13,612(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 612);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f17
	f0.f64 = double(float(f0.f64 * f17.f64));
	// fadds f12,f0,f30
	ctx.f12.f64 = double(float(f0.f64 + f30.f64));
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// ble cr6,0x820bb4c4
	if (!cr6.getGT()) goto loc_820BB4C4;
	// fmr f1,f18
	ctx.f1.f64 = f18.f64;
	// b 0x820bb4dc
	goto loc_820BB4DC;
loc_820BB4C4:
	// fsubs f0,f30,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f30.f64 - f0.f64));
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x820bb4d8
	if (!cr6.getLT()) goto loc_820BB4D8;
	// fmr f1,f24
	ctx.f1.f64 = f24.f64;
	// b 0x820bb4dc
	goto loc_820BB4DC;
loc_820BB4D8:
	// fmr f1,f28
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f28.f64;
loc_820BB4DC:
	// bl 0x820b1ad8
	sub_820B1AD8(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lfs f13,-6368(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,620(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 620);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// lfs f0,612(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 612);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// fmadds f13,f13,f15,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f15.f64 + f0.f64));
	// ble cr6,0x820bb510
	if (!cr6.getGT()) goto loc_820BB510;
	// fcmpu cr6,f13,f30
	cr6.compare(ctx.f13.f64, f30.f64);
	// ble cr6,0x820bb510
	if (!cr6.getGT()) goto loc_820BB510;
	// stfs f13,612(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 612, temp.u32);
	// b 0x820bb7d0
	goto loc_820BB7D0;
loc_820BB510:
	// lfs f0,612(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 612);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// bge cr6,0x820bb52c
	if (!cr6.getLT()) goto loc_820BB52C;
	// fcmpu cr6,f13,f30
	cr6.compare(ctx.f13.f64, f30.f64);
	// bge cr6,0x820bb52c
	if (!cr6.getLT()) goto loc_820BB52C;
	// stfs f13,612(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 612, temp.u32);
	// b 0x820bb7d0
	goto loc_820BB7D0;
loc_820BB52C:
	// stfs f30,612(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 612, temp.u32);
	// stfs f28,620(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 620, temp.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r10,532(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 532);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bb7d0
	if (!cr6.getEQ()) goto loc_820BB7D0;
	// stw r29,524(r11)
	PPC_STORE_U32(r11.u32 + 524, r29.u32);
	// b 0x820bb7d0
	goto loc_820BB7D0;
loc_820BB54C:
	// fcmpu cr6,f1,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f28.f64);
	// ble cr6,0x820bb5bc
	if (!cr6.getGT()) goto loc_820BB5BC;
	// bl 0x820b1c48
	sub_820B1C48(ctx, base);
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x820bb5a0
	if (cr6.getEQ()) goto loc_820BB5A0;
	// subfic r11,r31,70
	xer.ca = r31.u32 <= 70;
	r11.s64 = 70 - r31.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// bgt cr6,0x820bb628
	if (cr6.getGT()) goto loc_820BB628;
	// addi r11,r31,-70
	r11.s64 = r31.s64 + -70;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// blt cr6,0x820bb628
	if (cr6.getLT()) goto loc_820BB628;
loc_820BB5A0:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x820bb628
	if (!cr6.getEQ()) goto loc_820BB628;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820bb63c
	if (cr6.getEQ()) goto loc_820BB63C;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r14,536(r11)
	PPC_STORE_U32(r11.u32 + 536, r14.u32);
	// b 0x820bb63c
	goto loc_820BB63C;
loc_820BB5BC:
	// lfs f0,124(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// ble cr6,0x820bb634
	if (!cr6.getGT()) goto loc_820BB634;
	// fneg f1,f0
	ctx.f1.u64 = f0.u64 ^ 0x8000000000000000;
	// bl 0x820b1c48
	sub_820B1C48(ctx, base);
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x820bb618
	if (cr6.getEQ()) goto loc_820BB618;
	// subfic r11,r31,70
	xer.ca = r31.u32 <= 70;
	r11.s64 = 70 - r31.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// bgt cr6,0x820bb628
	if (cr6.getGT()) goto loc_820BB628;
	// addi r11,r31,-70
	r11.s64 = r31.s64 + -70;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// blt cr6,0x820bb628
	if (cr6.getLT()) goto loc_820BB628;
loc_820BB618:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x820bb628
	if (!cr6.getEQ()) goto loc_820BB628;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820bb63c
	if (cr6.getEQ()) goto loc_820BB63C;
loc_820BB628:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r14,536(r11)
	PPC_STORE_U32(r11.u32 + 536, r14.u32);
	// b 0x820bb63c
	goto loc_820BB63C;
loc_820BB634:
	// fmr f1,f28
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f28.f64;
	// bl 0x820b1c48
	sub_820B1C48(ctx, base);
loc_820BB63C:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fmr f31,f28
	ctx.fpscr.disableFlushMode();
	f31.f64 = f28.f64;
	// lfs f30,8512(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8512);
	f30.f64 = double(temp.f32);
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820bb73c
	if (cr6.getEQ()) goto loc_820BB73C;
	// bl 0x8210e390
	sub_8210E390(ctx, base);
	// lwz r11,184(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// lfs f12,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f13,f1,f26
	ctx.f13.f64 = double(float(ctx.f1.f64 * f26.f64));
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fsubs f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 - f0.f64));
	// fdivs f0,f14,f0
	f0.f64 = double(float(f14.f64 / f0.f64));
	// fcmpu cr6,f0,f18
	cr6.compare(f0.f64, f18.f64);
	// ble cr6,0x820bb694
	if (!cr6.getGT()) goto loc_820BB694;
	// fmr f0,f18
	f0.f64 = f18.f64;
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// b 0x820bb6a8
	goto loc_820BB6A8;
loc_820BB694:
	// fcmpu cr6,f0,f24
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f24.f64);
	// bge cr6,0x820bb768
	if (!cr6.getLT()) goto loc_820BB768;
	// fmr f0,f24
	f0.f64 = f24.f64;
loc_820BB6A0:
	// fmuls f0,f0,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_820BB6A8:
	// fmuls f0,f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fneg f31,f0
	f31.u64 = f0.u64 ^ 0x8000000000000000;
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x820bb6c8
	if (cr6.getEQ()) goto loc_820BB6C8;
	// bl 0x820c2b08
	sub_820C2B08(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820bb6d4
	if (!cr6.getEQ()) goto loc_820BB6D4;
loc_820BB6C8:
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f0,17332(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17332);
	f0.f64 = double(temp.f32);
	// fmuls f31,f31,f0
	f31.f64 = double(float(f31.f64 * f0.f64));
loc_820BB6D4:
	// fcmpu cr6,f14,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f14.f64, f28.f64);
	// beq cr6,0x820bb73c
	if (cr6.getEQ()) goto loc_820BB73C;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x820bb724
	if (cr6.getEQ()) goto loc_820BB724;
	// subfic r11,r31,70
	xer.ca = r31.u32 <= 70;
	r11.s64 = 70 - r31.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// bgt cr6,0x820bb734
	if (cr6.getGT()) goto loc_820BB734;
	// addi r11,r31,-70
	r11.s64 = r31.s64 + -70;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcmpu cr6,f16,f0
	cr6.compare(f16.f64, f0.f64);
	// blt cr6,0x820bb734
	if (cr6.getLT()) goto loc_820BB734;
loc_820BB724:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x820bb734
	if (!cr6.getEQ()) goto loc_820BB734;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820bb73c
	if (cr6.getEQ()) goto loc_820BB73C;
loc_820BB734:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r14,536(r11)
	PPC_STORE_U32(r11.u32 + 536, r14.u32);
loc_820BB73C:
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	f29.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fcmpu cr6,f29,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f29.f64, ctx.f1.f64);
	// addi r11,r10,620
	r11.s64 = ctx.r10.s64 + 620;
	// ble cr6,0x820bb778
	if (!cr6.getGT()) goto loc_820BB778;
	// stfs f30,620(r10)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r10.u32 + 620, temp.u32);
	// b 0x820bb77c
	goto loc_820BB77C;
loc_820BB768:
	// fcmpu cr6,f0,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f28.f64);
	// blt cr6,0x820bb6a0
	if (cr6.getLT()) goto loc_820BB6A0;
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// b 0x820bb6a8
	goto loc_820BB6A8;
loc_820BB778:
	// stfs f31,620(r10)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r10.u32 + 620, temp.u32);
loc_820BB77C:
	// lfs f12,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// lfs f0,15436(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15436);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lfs f12,612(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 612);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f13,f0,f12
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// stfs f0,612(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 612, temp.u32);
	// lwz r10,-1836(r19)
	ctx.r10.u64 = PPC_LOAD_U32(r19.u32 + -1836);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820bb7d0
	if (!cr6.getEQ()) goto loc_820BB7D0;
	// lwz r10,-1888(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + -1888);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x820bb7d0
	if (!cr6.getEQ()) goto loc_820BB7D0;
	// fmr f13,f0
	ctx.f13.f64 = f0.f64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,3028(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3028);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x820bb7d0
	if (!cr6.getLT()) goto loc_820BB7D0;
	// stfs f0,612(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 612, temp.u32);
loc_820BB7D0:
	// lfs f27,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	f27.f64 = double(temp.f32);
	// lfs f2,152(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	ctx.f2.f64 = double(temp.f32);
	// fcmpu cr6,f27,f28
	cr6.compare(f27.f64, f28.f64);
	// ble cr6,0x820bb7f0
	if (!cr6.getGT()) goto loc_820BB7F0;
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// bl 0x820b1e28
	sub_820B1E28(ctx, base);
	// lfs f25,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f25.f64 = double(temp.f32);
	// b 0x820bb80c
	goto loc_820BB80C;
loc_820BB7F0:
	// lfs f25,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f25.f64 = double(temp.f32);
	// fcmpu cr6,f25,f28
	cr6.compare(f25.f64, f28.f64);
	// ble cr6,0x820bb804
	if (!cr6.getGT()) goto loc_820BB804;
	// fneg f1,f25
	ctx.f1.u64 = f25.u64 ^ 0x8000000000000000;
	// b 0x820bb808
	goto loc_820BB808;
loc_820BB804:
	// fmr f1,f28
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f28.f64;
loc_820BB808:
	// bl 0x820b1e28
	sub_820B1E28(ctx, base);
loc_820BB80C:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fmr f31,f28
	ctx.fpscr.disableFlushMode();
	f31.f64 = f28.f64;
	// lwz r31,156(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// lfs f30,8516(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8516);
	f30.f64 = double(temp.f32);
	// beq cr6,0x820bb880
	if (cr6.getEQ()) goto loc_820BB880;
	// bl 0x8210e390
	sub_8210E390(ctx, base);
	// lwz r11,188(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// lfs f12,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f13,f1,f26
	ctx.f13.f64 = double(float(ctx.f1.f64 * f26.f64));
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fsubs f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 - f0.f64));
	// lfs f12,192(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	ctx.f12.f64 = double(temp.f32);
	// fdivs f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 / f0.f64));
	// fcmpu cr6,f0,f18
	cr6.compare(f0.f64, f18.f64);
	// ble cr6,0x820bb868
	if (!cr6.getGT()) goto loc_820BB868;
	// fmr f0,f18
	f0.f64 = f18.f64;
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// b 0x820bb87c
	goto loc_820BB87C;
loc_820BB868:
	// fcmpu cr6,f0,f24
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f24.f64);
	// bge cr6,0x820bb8ac
	if (!cr6.getLT()) goto loc_820BB8AC;
	// fmr f0,f24
	f0.f64 = f24.f64;
loc_820BB874:
	// fmuls f0,f0,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_820BB87C:
	// fmuls f31,f0,f13
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(f0.f64 * ctx.f13.f64));
loc_820BB880:
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	f29.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fcmpu cr6,f29,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f29.f64, ctx.f1.f64);
	// addi r10,r11,600
	ctx.r10.s64 = r11.s64 + 600;
	// ble cr6,0x820bb8bc
	if (!cr6.getGT()) goto loc_820BB8BC;
	// stfs f30,600(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 600, temp.u32);
	// b 0x820bb8c0
	goto loc_820BB8C0;
loc_820BB8AC:
	// fcmpu cr6,f0,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f28.f64);
	// blt cr6,0x820bb874
	if (cr6.getLT()) goto loc_820BB874;
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// b 0x820bb87c
	goto loc_820BB87C;
loc_820BB8BC:
	// stfs f31,600(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 600, temp.u32);
loc_820BB8C0:
	// lwz r11,-1836(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + -1836);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,14016(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14016);
	f29.f64 = double(temp.f32);
	// bne cr6,0x820bb9d4
	if (!cr6.getEQ()) goto loc_820BB9D4;
	// lwz r11,-1888(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -1888);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820bb9d0
	if (!cr6.getEQ()) goto loc_820BB9D0;
	// fmr f31,f28
	f31.f64 = f28.f64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x820bb8f4
	if (cr6.getEQ()) goto loc_820BB8F4;
	// lfs f0,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// fmuls f31,f0,f29
	f31.f64 = double(float(f0.f64 * f29.f64));
loc_820BB8F4:
	// fcmpu cr6,f27,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f27.f64, f28.f64);
	// ble cr6,0x820bb904
	if (!cr6.getGT()) goto loc_820BB904;
	// fmr f1,f18
	ctx.f1.f64 = f18.f64;
	// b 0x820bb910
	goto loc_820BB910;
loc_820BB904:
	// fcmpu cr6,f25,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f25.f64, f28.f64);
	// ble cr6,0x820bb93c
	if (!cr6.getGT()) goto loc_820BB93C;
	// fmr f1,f24
	ctx.f1.f64 = f24.f64;
loc_820BB910:
	// bl 0x820b1db8
	sub_820B1DB8(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// fmuls f30,f0,f29
	f30.f64 = double(float(f0.f64 * f29.f64));
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x8238cc58
	sub_8238CC58(ctx, base);
	// fcmpu cr6,f28,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f28.f64, ctx.f1.f64);
	// bge cr6,0x820bb93c
	if (!cr6.getLT()) goto loc_820BB93C;
	// fmr f31,f30
	f31.f64 = f30.f64;
loc_820BB93C:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,-6384(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -6384);
	// lfs f13,-1812(r23)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r23.u32 + -1812);
	ctx.f13.f64 = double(temp.f32);
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// lfs f0,15432(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15432);
	f0.f64 = double(temp.f32);
	// blt cr6,0x820bb998
	if (cr6.getLT()) goto loc_820BB998;
	// addi r10,r11,-8
	ctx.r10.s64 = r11.s64 + -8;
	// rlwinm r10,r10,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 29) & 0x1FFFFFFF;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r9,r10,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
loc_820BB968:
	// fmadds f13,f13,f0,f31
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + f31.f64));
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// fmadds f13,f13,f0,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + f31.f64));
	// fmadds f13,f13,f0,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + f31.f64));
	// fmadds f13,f13,f0,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + f31.f64));
	// fmadds f13,f13,f0,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + f31.f64));
	// fmadds f13,f13,f0,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + f31.f64));
	// fmadds f13,f13,f0,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + f31.f64));
	// fmadds f13,f13,f0,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + f31.f64));
	// bne cr6,0x820bb968
	if (!cr6.getEQ()) goto loc_820BB968;
	// stfs f13,-1812(r23)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r23.u32 + -1812, temp.u32);
loc_820BB998:
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// bge cr6,0x820bb9b8
	if (!cr6.getLT()) goto loc_820BB9B8;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
loc_820BB9A4:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// fmadds f13,f13,f0,f31
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + f31.f64));
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bb9a4
	if (!cr6.getEQ()) goto loc_820BB9A4;
	// stfs f13,-1812(r23)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r23.u32 + -1812, temp.u32);
loc_820BB9B8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15428(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15428);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,600(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 600, temp.u32);
	// b 0x820bb9d4
	goto loc_820BB9D4;
loc_820BB9D0:
	// stfs f28,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
loc_820BB9D4:
	// lwz r11,200(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820bb9f4
	if (cr6.getEQ()) goto loc_820BB9F4;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r29,2380(r11)
	PPC_STORE_U32(r11.u32 + 2380, r29.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r29,2384(r11)
	PPC_STORE_U32(r11.u32 + 2384, r29.u32);
	// bl 0x820dc7f8
	sub_820DC7F8(ctx, base);
loc_820BB9F4:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x820bba18
	if (!cr6.getGT()) goto loc_820BBA18;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820bba18
	if (!cr6.getEQ()) goto loc_820BBA18;
	// bl 0x820c15a8
	sub_820C15A8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bba48
	if (!cr6.getEQ()) goto loc_820BBA48;
loc_820BBA18:
	// lwz r11,164(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820bba28
	if (cr6.getEQ()) goto loc_820BBA28;
	// bl 0x820a7150
	sub_820A7150(ctx, base);
loc_820BBA28:
	// lwz r11,168(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820bba38
	if (cr6.getEQ()) goto loc_820BBA38;
	// bl 0x820a7058
	sub_820A7058(ctx, base);
loc_820BBA38:
	// lwz r11,172(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820bba48
	if (cr6.getEQ()) goto loc_820BBA48;
	// bl 0x820a7230
	sub_820A7230(ctx, base);
loc_820BBA48:
	// lwz r11,204(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820bba60
	if (cr6.getEQ()) goto loc_820BBA60;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r29,1368(r11)
	PPC_STORE_U32(r11.u32 + 1368, r29.u32);
	// b 0x820bba74
	goto loc_820BBA74;
loc_820BBA60:
	// lwz r11,208(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820bba74
	if (cr6.getEQ()) goto loc_820BBA74;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r16,1368(r11)
	PPC_STORE_U32(r11.u32 + 1368, r16.u32);
loc_820BBA74:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,1368(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1368);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820bbbac
	if (!cr6.getEQ()) goto loc_820BBBAC;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a4530
	sub_820A4530(ctx, base);
	// lwz r29,212(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x820bbaf4
	if (cr6.getEQ()) goto loc_820BBAF4;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820bbab4
	if (!cr6.getEQ()) goto loc_820BBAB4;
	// lwz r10,580(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 580);
	// b 0x820bbabc
	goto loc_820BBABC;
loc_820BBAB4:
	// lwz r10,-908(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -908);
	// lbz r10,106(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 106);
loc_820BBABC:
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bbaf8
	if (cr6.getEQ()) goto loc_820BBAF8;
	// lwz r10,588(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 588);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820bbaf8
	if (cr6.getEQ()) goto loc_820BBAF8;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bbaf4
	if (cr6.getEQ()) goto loc_820BBAF4;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lfs f31,584(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 584);
	f31.f64 = double(temp.f32);
	// b 0x820bbb00
	goto loc_820BBB00;
loc_820BBAF4:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
loc_820BBAF8:
	// lfs f0,600(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 600);
	f0.f64 = double(temp.f32);
	// fmuls f31,f0,f29
	f31.f64 = double(float(f0.f64 * f29.f64));
loc_820BBB00:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x820bbb7c
	if (cr6.getEQ()) goto loc_820BBB7C;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820bbb20
	if (!cr6.getEQ()) goto loc_820BBB20;
	// lwz r10,564(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 564);
	// b 0x820bbb28
	goto loc_820BBB28;
loc_820BBB20:
	// lwz r10,-908(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -908);
	// lbz r10,106(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 106);
loc_820BBB28:
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bbb7c
	if (cr6.getEQ()) goto loc_820BBB7C;
	// lwz r10,572(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 572);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820bbb7c
	if (cr6.getEQ()) goto loc_820BBB7C;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bbb7c
	if (cr6.getEQ()) goto loc_820BBB7C;
	// lfs f2,568(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 568);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// lfs f3,15424(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15424);
	ctx.f3.f64 = double(temp.f32);
	// bl 0x820a47d8
	sub_820A47D8(ctx, base);
	// addi r1,r1,528
	ctx.r1.s64 = ctx.r1.s64 + 528;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed55c
	// b 0x823ed150
	return;
loc_820BBB7C:
	// lfs f13,620(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 620);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// lfs f0,14044(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14044);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f2,f13,f0
	ctx.f2.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f3,15424(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15424);
	ctx.f3.f64 = double(temp.f32);
	// bl 0x820a47d8
	sub_820A47D8(ctx, base);
	// addi r1,r1,528
	ctx.r1.s64 = ctx.r1.s64 + 528;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed55c
	// b 0x823ed150
	return;
loc_820BBBAC:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820bbc10
	if (!cr6.getEQ()) goto loc_820BBC10;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a4530
	sub_820A4530(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,160(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15184(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15184);
	f0.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f13,140(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f30,f13,f0
	f30.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x820c31d0
	sub_820C31D0(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820bbbec
	if (!cr6.getEQ()) goto loc_820BBBEC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,12888(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12888);
	f0.f64 = double(temp.f32);
	// b 0x820bbc00
	goto loc_820BBC00;
loc_820BBBEC:
	// bl 0x820c31d0
	sub_820C31D0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820bbc04
	if (!cr6.getEQ()) goto loc_820BBC04;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15420(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15420);
	f0.f64 = double(temp.f32);
loc_820BBC00:
	// fmuls f31,f31,f0
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(f31.f64 * f0.f64));
loc_820BBC04:
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x820a4828
	sub_820A4828(ctx, base);
loc_820BBC10:
	// addi r1,r1,528
	ctx.r1.s64 = ctx.r1.s64 + 528;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed55c
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_820BBC20"))) PPC_WEAK_FUNC(sub_820BBC20);
PPC_FUNC_IMPL(__imp__sub_820BBC20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f29,-72(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -72, f29.u64);
	// stfd f30,-64(r1)
	PPC_STORE_U64(ctx.r1.u32 + -64, f30.u64);
	// stfd f31,-56(r1)
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// li r29,7
	r29.s64 = 7;
	// li r27,0
	r27.s64 = 0;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lfs f31,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f31.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f30,12272(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 12272);
	f30.f64 = double(temp.f32);
	// lfs f0,508(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 508);
	f0.f64 = double(temp.f32);
	// lfs f29,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	f29.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// blt cr6,0x820bbea0
	if (cr6.getLT()) goto loc_820BBEA0;
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// lis r30,-32014
	r30.s64 = -2098069504;
	// bne cr6,0x820bbd00
	if (!cr6.getEQ()) goto loc_820BBD00;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x820a5560
	sub_820A5560(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x820a64c0
	sub_820A64C0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,8
	ctx.r3.s64 = 8;
	// lwz r10,4736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4736);
	// ori r10,r10,4
	ctx.r10.u64 = ctx.r10.u64 | 4;
	// stw r10,4736(r11)
	PPC_STORE_U32(r11.u32 + 4736, ctx.r10.u32);
	// lwz r11,-1688(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1688);
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// stw r11,-1688(r30)
	PPC_STORE_U32(r30.u32 + -1688, r11.u32);
	// bl 0x820df8b0
	sub_820DF8B0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,484(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	f0.f64 = double(temp.f32);
	// addi r11,r11,8276
	r11.s64 = r11.s64 + 8276;
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,8276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8276);
	// cmpwi cr6,r10,8
	cr6.compare<int32_t>(ctx.r10.s32, 8, xer);
	// blt cr6,0x820bbcec
	if (cr6.getLT()) goto loc_820BBCEC;
	// stw r29,8276(r11)
	PPC_STORE_U32(r11.u32 + 8276, r29.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BBCEC:
	// lwz r10,8276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8276);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x820bbd00
	if (!cr6.getLT()) goto loc_820BBD00;
	// stw r27,8276(r11)
	PPC_STORE_U32(r11.u32 + 8276, r27.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BBD00:
	// lwz r10,480(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bbe28
	if (!cr6.getEQ()) goto loc_820BBE28;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// lwz r9,8276(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8276);
	// lfs f13,508(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 508);
	ctx.f13.f64 = double(temp.f32);
	// addi r10,r10,17440
	ctx.r10.s64 = ctx.r10.s64 + 17440;
	// mulli r9,r9,44
	ctx.r9.s64 = ctx.r9.s64 * 44;
	// addi r8,r10,8
	ctx.r8.s64 = ctx.r10.s64 + 8;
	// lfsx f0,r9,r8
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x820bbd40
	if (!cr6.getGT()) goto loc_820BBD40;
	// addi r8,r10,24
	ctx.r8.s64 = ctx.r10.s64 + 24;
	// lfsx f0,r9,r8
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bgt cr6,0x820bbe28
	if (cr6.getGT()) goto loc_820BBE28;
loc_820BBD40:
	// addi r8,r10,16
	ctx.r8.s64 = ctx.r10.s64 + 16;
	// lfsx f0,r9,r8
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// blt cr6,0x820bbdf4
	if (cr6.getLT()) goto loc_820BBDF4;
	// addi r8,r10,24
	ctx.r8.s64 = ctx.r10.s64 + 24;
	// lfsx f0,r9,r8
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bgt cr6,0x820bbdf4
	if (cr6.getGT()) goto loc_820BBDF4;
	// lwz r8,8276(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 8276);
	// addi r7,r10,16
	ctx.r7.s64 = ctx.r10.s64 + 16;
	// addi r6,r10,20
	ctx.r6.s64 = ctx.r10.s64 + 20;
	// mulli r8,r8,44
	ctx.r8.s64 = ctx.r8.s64 * 44;
	// lfsx f12,r8,r7
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r7.u32);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lfsx f0,r8,r6
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r6.u32);
	f0.f64 = double(temp.f32);
	// addi r5,r10,24
	ctx.r5.s64 = ctx.r10.s64 + 24;
	// lfsx f11,r8,r5
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r5.u32);
	ctx.f11.f64 = double(temp.f32);
	// addi r8,r10,28
	ctx.r8.s64 = ctx.r10.s64 + 28;
	// fsubs f12,f11,f12
	ctx.f12.f64 = double(float(ctx.f11.f64 - ctx.f12.f64));
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x820bbda4
	if (!cr6.getLT()) goto loc_820BBDA4;
	// lfsx f12,r9,r8
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	ctx.f12.f64 = double(temp.f32);
	// fdivs f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 / f0.f64));
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// b 0x820bbdb8
	goto loc_820BBDB8;
loc_820BBDA4:
	// fsubs f13,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// fsubs f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 - f0.f64));
	// lfsx f12,r9,r8
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
loc_820BBDB8:
	// lwz r9,8276(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8276);
	// addi r8,r10,36
	ctx.r8.s64 = ctx.r10.s64 + 36;
	// addi r7,r10,40
	ctx.r7.s64 = ctx.r10.s64 + 40;
	// mulli r9,r9,44
	ctx.r9.s64 = ctx.r9.s64 * 44;
	// addi r6,r10,32
	ctx.r6.s64 = ctx.r10.s64 + 32;
	// lwzx r10,r9,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// lwzx r8,r9,r7
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	// lwzx r9,r9,r6
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r6.u32);
	// stw r9,1272(r11)
	PPC_STORE_U32(r11.u32 + 1272, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,1276(r11)
	PPC_STORE_U32(r11.u32 + 1276, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,1280(r11)
	PPC_STORE_U32(r11.u32 + 1280, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f0,1284(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1284, temp.u32);
loc_820BBDF4:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// lfs f13,508(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 508);
	ctx.f13.f64 = double(temp.f32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bbe14
	if (!cr6.getEQ()) goto loc_820BBE14;
	// lfs f0,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,508(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 508, temp.u32);
	// b 0x820bbe9c
	goto loc_820BBE9C;
loc_820BBE14:
	// lis r10,-32055
	ctx.r10.s64 = -2100756480;
	// lfs f0,-21840(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -21840);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,508(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 508, temp.u32);
	// b 0x820bbe9c
	goto loc_820BBE9C;
loc_820BBE28:
	// stfs f29,508(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 508, temp.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,255
	ctx.r10.s64 = 255;
	// stw r10,1272(r11)
	PPC_STORE_U32(r11.u32 + 1272, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,1276(r11)
	PPC_STORE_U32(r11.u32 + 1276, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,1280(r11)
	PPC_STORE_U32(r11.u32 + 1280, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f31,1284(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1284, temp.u32);
	// lwz r10,480(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bbea0
	if (!cr6.getEQ()) goto loc_820BBEA0;
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x820a5560
	sub_820A5560(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x820a64c0
	sub_820A64C0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,8
	ctx.r3.s64 = 8;
	// lwz r10,4736(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4736);
	// rlwinm r10,r10,0,30,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// stw r10,4736(r11)
	PPC_STORE_U32(r11.u32 + 4736, ctx.r10.u32);
	// lwz r11,-1688(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1688);
	// rlwinm r11,r11,0,30,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// stw r11,-1688(r30)
	PPC_STORE_U32(r30.u32 + -1688, r11.u32);
	// bl 0x820df8b0
	sub_820DF8B0(ctx, base);
loc_820BBE9C:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BBEA0:
	// lfs f0,512(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 512);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// blt cr6,0x820bc01c
	if (cr6.getLT()) goto loc_820BC01C;
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bne cr6,0x820bbef4
	if (!cr6.getEQ()) goto loc_820BBEF4;
	// lfs f0,484(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	f0.f64 = double(temp.f32);
	// addi r11,r11,8248
	r11.s64 = r11.s64 + 8248;
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,8248(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8248);
	// cmpwi cr6,r10,8
	cr6.compare<int32_t>(ctx.r10.s32, 8, xer);
	// blt cr6,0x820bbee0
	if (cr6.getLT()) goto loc_820BBEE0;
	// stw r29,8248(r11)
	PPC_STORE_U32(r11.u32 + 8248, r29.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BBEE0:
	// lwz r10,8248(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8248);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x820bbef4
	if (!cr6.getLT()) goto loc_820BBEF4;
	// stw r27,8248(r11)
	PPC_STORE_U32(r11.u32 + 8248, r27.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BBEF4:
	// lwz r10,480(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bc018
	if (!cr6.getEQ()) goto loc_820BC018;
	// lwz r9,8248(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8248);
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// lfs f0,512(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 512);
	f0.f64 = double(temp.f32);
	// rlwinm r7,r9,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r8,r10,17344
	ctx.r8.s64 = ctx.r10.s64 + 17344;
	// add r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 + ctx.r7.u64;
	// addi r10,r11,512
	ctx.r10.s64 = r11.s64 + 512;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r7,r9,r8
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// extsw r7,r7
	ctx.r7.s64 = ctx.r7.s32;
	// std r7,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r7.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820bbf9c
	if (cr6.getLT()) goto loc_820BBF9C;
	// addi r7,r8,4
	ctx.r7.s64 = ctx.r8.s64 + 4;
	// lwzx r7,r9,r7
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	// extsw r7,r7
	ctx.r7.s64 = ctx.r7.s32;
	// std r7,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r7.u64);
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// bgt cr6,0x820bbf9c
	if (cr6.getGT()) goto loc_820BBF9C;
	// lfs f0,492(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 492);
	f0.f64 = double(temp.f32);
	// stfs f0,500(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 500, temp.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,496(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 496);
	f0.f64 = double(temp.f32);
	// stfs f0,504(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 504, temp.u32);
	// lfs f13,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,0(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f29,-72(r1)
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f30,-64(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// lfd f31,-56(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_820BBF9C:
	// fcmpu cr6,f0,f13
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820bc000
	if (cr6.getLT()) goto loc_820BC000;
	// addi r8,r8,8
	ctx.r8.s64 = ctx.r8.s64 + 8;
	// lwzx r9,r9,r8
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820bc000
	if (cr6.getGT()) goto loc_820BC000;
	// lfs f0,484(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	f0.f64 = double(temp.f32);
	// stfs f0,500(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 500, temp.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,488(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 488);
	f0.f64 = double(temp.f32);
	// stfs f0,504(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 504, temp.u32);
	// lfs f13,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,-6368(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,0(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f29,-72(r1)
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f30,-64(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// lfd f31,-56(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_820BC000:
	// stfs f29,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f29,-72(r1)
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f30,-64(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// lfd f31,-56(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_820BC018:
	// stfs f29,512(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 512, temp.u32);
loc_820BC01C:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f29,-72(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f30,-64(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// lfd f31,-56(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820BC030"))) PPC_WEAK_FUNC(sub_820BC030);
PPC_FUNC_IMPL(__imp__sub_820BC030) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f14{};
	PPCRegister f15{};
	PPCRegister f16{};
	PPCRegister f17{};
	PPCRegister f18{};
	PPCRegister f19{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed104
	// addi r12,r1,-144
	r12.s64 = ctx.r1.s64 + -144;
	// bl 0x823ed510
	// stwu r1,-656(r1)
	ea = -656 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// li r16,0
	r16.s64 = 0;
	// fmr f30,f2
	f30.f64 = ctx.f2.f64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// fmr f29,f3
	f29.f64 = ctx.f3.f64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// fmr f28,f4
	f28.f64 = ctx.f4.f64;
	// mr r15,r16
	r15.u64 = r16.u64;
	// lfs f27,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f27.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f27,92(r1)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// fmr f18,f27
	f18.f64 = f27.f64;
	// stfs f27,116(r1)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// fmr f17,f27
	f17.f64 = f27.f64;
	// fmr f14,f27
	f14.f64 = f27.f64;
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lwz r10,-1868(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1868);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820bc0e4
	if (!cr6.getGT()) goto loc_820BC0E4;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// stw r10,-1868(r11)
	PPC_STORE_U32(r11.u32 + -1868, ctx.r10.u32);
	// blt cr6,0x820bc0e4
	if (cr6.getLT()) goto loc_820BC0E4;
	// mr r10,r16
	ctx.r10.u64 = r16.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r10,-1868(r11)
	PPC_STORE_U32(r11.u32 + -1868, ctx.r10.u32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// stw r16,8404(r11)
	PPC_STORE_U32(r11.u32 + 8404, r16.u32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// stw r16,8400(r11)
	PPC_STORE_U32(r11.u32 + 8400, r16.u32);
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a7508
	sub_820A7508(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a7508
	sub_820A7508(ctx, base);
loc_820BC0E4:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// stw r16,128(r11)
	PPC_STORE_U32(r11.u32 + 128, r16.u32);
	// bl 0x820bbc20
	sub_820BBC20(ctx, base);
	// bl 0x820b29e0
	sub_820B29E0(ctx, base);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// fmr f4,f28
	ctx.fpscr.disableFlushMode();
	ctx.f4.f64 = f28.f64;
	// fmr f3,f29
	ctx.f3.f64 = f29.f64;
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x820b99e8
	sub_820B99E8(ctx, base);
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bc120
	if (cr6.getEQ()) goto loc_820BC120;
	// bl 0x820b19a0
	sub_820B19A0(ctx, base);
loc_820BC120:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lwz r11,744(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820bc138
	if (cr6.getEQ()) goto loc_820BC138;
	// bl 0x820b8738
	sub_820B8738(ctx, base);
	// b 0x820bc168
	goto loc_820BC168;
loc_820BC138:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bc168
	if (!cr6.getEQ()) goto loc_820BC168;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x8209feb0
	sub_8209FEB0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bc168
	if (!cr6.getEQ()) goto loc_820BC168;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820b9120
	sub_820B9120(ctx, base);
loc_820BC168:
	// lis r17,-32014
	r17.s64 = -2098069504;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r26,-32014
	r26.s64 = -2098069504;
	// lwz r11,-1836(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + -1836);
	// lfs f20,2692(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2692);
	f20.f64 = double(temp.f32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f22,15544(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15544);
	f22.f64 = double(temp.f32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// bne cr6,0x820bc344
	if (!cr6.getEQ()) goto loc_820BC344;
	// lwz r10,8316(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8316);
	// lwz r9,416(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 416);
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// bge cr6,0x820bc1a4
	if (!cr6.getLT()) goto loc_820BC1A4;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
loc_820BC1A4:
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bc1c8
	if (!cr6.getEQ()) goto loc_820BC1C8;
	// lfs f0,640(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f20
	f0.f64 = double(float(f0.f64 * f20.f64));
	// stfs f0,640(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f0,632(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 632);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f20
	f0.f64 = double(float(f0.f64 * f20.f64));
	// stfs f0,632(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 632, temp.u32);
loc_820BC1C8:
	// lfs f0,664(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 664);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// bne cr6,0x820bc1e0
	if (!cr6.getEQ()) goto loc_820BC1E0;
	// lfs f0,672(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 672);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// beq cr6,0x820bc264
	if (cr6.getEQ()) goto loc_820BC264;
loc_820BC1E0:
	// lfs f13,604(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 604);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,664(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 664);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,608(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 608);
	ctx.f11.f64 = double(temp.f32);
	// fmuls f10,f12,f13
	ctx.f10.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f12,f11,f12
	ctx.f12.f64 = double(float(ctx.f11.f64 * ctx.f12.f64));
	// lfs f0,672(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 672);
	f0.f64 = double(temp.f32);
	// fneg f10,f10
	ctx.f10.u64 = ctx.f10.u64 ^ 0x8000000000000000;
	// fmsubs f13,f13,f0,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 - ctx.f12.f64));
	// fnmsubs f0,f11,f0,f10
	f0.f64 = double(float(-(ctx.f11.f64 * f0.f64 - ctx.f10.f64)));
	// fcmpu cr6,f13,f27
	cr6.compare(ctx.f13.f64, f27.f64);
	// ble cr6,0x820bc218
	if (!cr6.getGT()) goto loc_820BC218;
	// lfs f12,640(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f12,f13
	cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// blt cr6,0x820bc22c
	if (cr6.getLT()) goto loc_820BC22C;
loc_820BC218:
	// fcmpu cr6,f13,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, f27.f64);
	// bge cr6,0x820bc234
	if (!cr6.getLT()) goto loc_820BC234;
	// lfs f12,640(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f12,f13
	cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// ble cr6,0x820bc234
	if (!cr6.getGT()) goto loc_820BC234;
loc_820BC22C:
	// stfs f13,640(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
loc_820BC234:
	// fcmpu cr6,f0,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f27.f64);
	// ble cr6,0x820bc248
	if (!cr6.getGT()) goto loc_820BC248;
	// lfs f13,632(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 632);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// blt cr6,0x820bc25c
	if (cr6.getLT()) goto loc_820BC25C;
loc_820BC248:
	// fcmpu cr6,f0,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bc264
	if (!cr6.getLT()) goto loc_820BC264;
	// lfs f13,632(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 632);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x820bc264
	if (!cr6.getGT()) goto loc_820BC264;
loc_820BC25C:
	// stfs f0,632(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 632, temp.u32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
loc_820BC264:
	// lfs f0,652(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 652);
	f0.f64 = double(temp.f32);
	// addi r10,r11,652
	ctx.r10.s64 = r11.s64 + 652;
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// bne cr6,0x820bc280
	if (!cr6.getEQ()) goto loc_820BC280;
	// lfs f0,660(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 660);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// beq cr6,0x820bc344
	if (cr6.getEQ()) goto loc_820BC344;
loc_820BC280:
	// lfs f0,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// li r9,3
	ctx.r9.s64 = 3;
	// lfs f12,604(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 604);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f9,f0,f0
	ctx.f9.f64 = double(float(f0.f64 * f0.f64));
	// lfs f11,608(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 608);
	ctx.f11.f64 = double(temp.f32);
	// fmuls f8,f12,f0
	ctx.f8.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f0,f11,f0
	f0.f64 = double(float(ctx.f11.f64 * f0.f64));
	// lfs f13,660(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 660);
	ctx.f13.f64 = double(temp.f32);
	// lfs f10,640(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f10.f64 = double(temp.f32);
	// fmadds f9,f13,f13,f9
	ctx.f9.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + ctx.f9.f64));
	// fneg f8,f8
	ctx.f8.u64 = ctx.f8.u64 ^ 0x8000000000000000;
	// fmsubs f12,f13,f12,f0
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 - f0.f64));
	// fnmsubs f0,f11,f13,f8
	f0.f64 = double(float(-(ctx.f11.f64 * ctx.f13.f64 - ctx.f8.f64)));
	// fadds f13,f12,f10
	ctx.f13.f64 = double(float(ctx.f12.f64 + ctx.f10.f64));
	// stfs f13,640(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// fsqrts f12,f9
	ctx.f12.f64 = double(float(sqrt(ctx.f9.f64)));
	// lfs f13,632(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 632);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,632(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 632, temp.u32);
loc_820BC2D0:
	// lfs f0,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// beq cr6,0x820bc330
	if (cr6.getEQ()) goto loc_820BC330;
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// ble cr6,0x820bc304
	if (!cr6.getGT()) goto loc_820BC304;
	// fdivs f11,f0,f12
	ctx.f11.f64 = double(float(f0.f64 / ctx.f12.f64));
	// lfs f13,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f13,f11,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f13.f64));
	// fnmsubs f0,f13,f22,f0
	f0.f64 = double(float(-(ctx.f13.f64 * f22.f64 - f0.f64)));
	// stfs f0,0(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bc330
	if (!cr6.getLT()) goto loc_820BC330;
	// b 0x820bc32c
	goto loc_820BC32C;
loc_820BC304:
	// fcmpu cr6,f0,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bc330
	if (!cr6.getLT()) goto loc_820BC330;
	// lfs f0,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// fdivs f11,f0,f12
	ctx.f11.f64 = double(float(f0.f64 / ctx.f12.f64));
	// lfs f13,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f13,f11,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f13.f64));
	// fnmsubs f0,f13,f22,f0
	f0.f64 = double(float(-(ctx.f13.f64 * f22.f64 - f0.f64)));
	// stfs f0,0(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// ble cr6,0x820bc330
	if (!cr6.getGT()) goto loc_820BC330;
loc_820BC32C:
	// stfs f27,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
loc_820BC330:
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820bc2d0
	if (!cr6.getEQ()) goto loc_820BC2D0;
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
loc_820BC344:
	// lwz r10,-1836(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + -1836);
	// lis r4,-32256
	ctx.r4.s64 = -2113929216;
	// lis r3,-32256
	ctx.r3.s64 = -2113929216;
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lfs f0,12468(r4)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 12468);
	f0.f64 = double(temp.f32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f24,14308(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 14308);
	f24.f64 = double(temp.f32);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// lfs f23,14032(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 14032);
	f23.f64 = double(temp.f32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f21,15540(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 15540);
	f21.f64 = double(temp.f32);
	// lfs f19,2776(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 2776);
	f19.f64 = double(temp.f32);
	// lis r18,-32014
	r18.s64 = -2098069504;
	// lfs f15,6580(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 6580);
	f15.f64 = double(temp.f32);
	// addi r24,r10,-3684
	r24.s64 = ctx.r10.s64 + -3684;
	// lfs f16,6588(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 6588);
	f16.f64 = double(temp.f32);
	// lis r19,-32014
	r19.s64 = -2098069504;
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// lis r23,-32014
	r23.s64 = -2098069504;
	// lis r25,-32014
	r25.s64 = -2098069504;
	// bne cr6,0x820bc8e4
	if (!cr6.getEQ()) goto loc_820BC8E4;
	// lfs f0,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,600(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 600);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f0,15536(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15536);
	f0.f64 = double(temp.f32);
	// fmuls f25,f13,f0
	f25.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f0,-1808(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + -1808);
	f0.f64 = double(temp.f32);
	// fadds f29,f0,f25
	f29.f64 = double(float(f0.f64 + f25.f64));
	// fcmpu cr6,f29,f16
	cr6.compare(f29.f64, f16.f64);
	// blt cr6,0x820bc3d0
	if (cr6.getLT()) goto loc_820BC3D0;
	// fsubs f29,f29,f16
	f29.f64 = double(float(f29.f64 - f16.f64));
loc_820BC3D0:
	// fcmpu cr6,f29,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f29.f64, f27.f64);
	// bge cr6,0x820bc3dc
	if (!cr6.getLT()) goto loc_820BC3DC;
	// fadds f29,f29,f16
	f29.f64 = double(float(f29.f64 + f16.f64));
loc_820BC3DC:
	// addi r7,r1,104
	ctx.r7.s64 = ctx.r1.s64 + 104;
	// lwz r4,1456(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// addi r6,r1,128
	ctx.r6.s64 = ctx.r1.s64 + 128;
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f29.f64;
	// addi r3,r11,1460
	ctx.r3.s64 = r11.s64 + 1460;
	// bl 0x820b0cc8
	sub_820B0CC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bc408
	if (cr6.getEQ()) goto loc_820BC408;
	// lwz r8,-1364(r28)
	ctx.r8.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// stfs f29,-1808(r25)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r25.u32 + -1808, temp.u32);
	// b 0x820bc5b4
	goto loc_820BC5B4;
loc_820BC408:
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// fmr f31,f15
	ctx.fpscr.disableFlushMode();
	f31.f64 = f15.f64;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x82110500
	sub_82110500(ctx, base);
	// lfs f30,224(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	f30.f64 = double(temp.f32);
	// lfs f2,208(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	ctx.f2.f64 = double(temp.f32);
	// lwz r8,-1364(r28)
	ctx.r8.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// fsubs f13,f30,f2
	ctx.f13.f64 = double(float(f30.f64 - ctx.f2.f64));
	// lfs f1,232(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	ctx.f1.f64 = double(temp.f32);
	// lfs f3,216(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	ctx.f3.f64 = double(temp.f32);
	// fsubs f0,f1,f3
	f0.f64 = double(float(ctx.f1.f64 - ctx.f3.f64));
	// lfs f5,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f5.f64 = double(temp.f32);
	// lfs f4,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f4.f64 = double(temp.f32);
	// lfs f11,1468(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 1468);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f9,f11,f5
	ctx.f9.f64 = double(float(ctx.f11.f64 - ctx.f5.f64));
	// lfs f10,1460(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 1460);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f8,f10,f4
	ctx.f8.f64 = double(float(ctx.f10.f64 - ctx.f4.f64));
	// fmuls f12,f13,f13
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// fmadds f12,f0,f0,f12
	ctx.f12.f64 = double(float(f0.f64 * f0.f64 + ctx.f12.f64));
	// fsqrts f12,f12
	ctx.f12.f64 = double(float(sqrt(ctx.f12.f64)));
	// fdivs f12,f19,f12
	ctx.f12.f64 = double(float(f19.f64 / ctx.f12.f64));
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f7,f12,f0
	ctx.f7.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fneg f6,f13
	ctx.f6.u64 = ctx.f13.u64 ^ 0x8000000000000000;
	// fmuls f0,f6,f9
	f0.f64 = double(float(ctx.f6.f64 * ctx.f9.f64));
	// fmadds f0,f7,f8,f0
	f0.f64 = double(float(ctx.f7.f64 * ctx.f8.f64 + f0.f64));
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bc484
	if (!cr6.getLT()) goto loc_820BC484;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fneg f7,f7
	ctx.f7.u64 = ctx.f7.u64 ^ 0x8000000000000000;
	// fneg f6,f6
	ctx.f6.u64 = ctx.f6.u64 ^ 0x8000000000000000;
loc_820BC484:
	// fsubs f13,f11,f3
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f11.f64 - ctx.f3.f64));
	// fsubs f12,f10,f2
	ctx.f12.f64 = double(float(ctx.f10.f64 - ctx.f2.f64));
	// fmuls f13,f13,f6
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f6.f64));
	// fmadds f13,f12,f7,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f7.f64 + ctx.f13.f64));
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x820bc4a0
	if (!cr6.getLT()) goto loc_820BC4A0;
	// fsubs f31,f0,f13
	f31.f64 = double(float(f0.f64 - ctx.f13.f64));
loc_820BC4A0:
	// lfs f13,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f4,f13
	ctx.f13.f64 = double(float(ctx.f4.f64 - ctx.f13.f64));
	// lfs f0,136(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	f0.f64 = double(temp.f32);
	// fsubs f0,f5,f0
	f0.f64 = double(float(ctx.f5.f64 - f0.f64));
	// fmuls f12,f13,f13
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// fmadds f12,f0,f0,f12
	ctx.f12.f64 = double(float(f0.f64 * f0.f64 + ctx.f12.f64));
	// fsqrts f12,f12
	ctx.f12.f64 = double(float(sqrt(ctx.f12.f64)));
	// fdivs f12,f19,f12
	ctx.f12.f64 = double(float(f19.f64 / ctx.f12.f64));
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fneg f13,f13
	ctx.f13.u64 = ctx.f13.u64 ^ 0x8000000000000000;
	// fmuls f12,f13,f9
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f9.f64));
	// fmadds f10,f0,f8,f12
	ctx.f10.f64 = double(float(f0.f64 * ctx.f8.f64 + ctx.f12.f64));
	// fcmpu cr6,f10,f27
	cr6.compare(ctx.f10.f64, f27.f64);
	// bge cr6,0x820bc4e8
	if (!cr6.getLT()) goto loc_820BC4E8;
	// fneg f10,f10
	ctx.f10.u64 = ctx.f10.u64 ^ 0x8000000000000000;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fneg f13,f13
	ctx.f13.u64 = ctx.f13.u64 ^ 0x8000000000000000;
loc_820BC4E8:
	// lfs f12,1468(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 1468);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f9,f12,f3
	ctx.f9.f64 = double(float(ctx.f12.f64 - ctx.f3.f64));
	// lfs f11,1460(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 1460);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f12,f12,f1
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f1.f64));
	// fsubs f8,f11,f2
	ctx.f8.f64 = double(float(ctx.f11.f64 - ctx.f2.f64));
	// fsubs f11,f11,f30
	ctx.f11.f64 = double(float(ctx.f11.f64 - f30.f64));
	// fmuls f9,f9,f13
	ctx.f9.f64 = double(float(ctx.f9.f64 * ctx.f13.f64));
	// fmuls f5,f12,f13
	ctx.f5.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmadds f12,f8,f0,f9
	ctx.f12.f64 = double(float(ctx.f8.f64 * f0.f64 + ctx.f9.f64));
	// fmadds f11,f11,f0,f5
	ctx.f11.f64 = double(float(ctx.f11.f64 * f0.f64 + ctx.f5.f64));
	// fcmpu cr6,f11,f12
	cr6.compare(ctx.f11.f64, ctx.f12.f64);
	// bge cr6,0x820bc51c
	if (!cr6.getLT()) goto loc_820BC51C;
	// fmr f12,f11
	ctx.f12.f64 = ctx.f11.f64;
loc_820BC51C:
	// fcmpu cr6,f12,f10
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f12.f64, ctx.f10.f64);
	// bge cr6,0x820bc54c
	if (!cr6.getLT()) goto loc_820BC54C;
	// fsubs f12,f10,f12
	ctx.f12.f64 = double(float(ctx.f10.f64 - ctx.f12.f64));
	// fcmpu cr6,f12,f27
	cr6.compare(ctx.f12.f64, f27.f64);
	// blt cr6,0x820bc54c
	if (cr6.getLT()) goto loc_820BC54C;
	// fcmpu cr6,f12,f31
	cr6.compare(ctx.f12.f64, f31.f64);
	// blt cr6,0x820bc540
	if (cr6.getLT()) goto loc_820BC540;
	// fcmpu cr6,f31,f27
	cr6.compare(f31.f64, f27.f64);
	// bge cr6,0x820bc54c
	if (!cr6.getLT()) goto loc_820BC54C;
loc_820BC540:
	// fmr f31,f12
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f12.f64;
	// fmr f7,f0
	ctx.f7.f64 = f0.f64;
	// fmr f6,f13
	ctx.f6.f64 = ctx.f13.f64;
loc_820BC54C:
	// fcmpu cr6,f31,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f27.f64);
	// blt cr6,0x820bc5b0
	if (cr6.getLT()) goto loc_820BC5B0;
	// fmuls f0,f7,f31
	f0.f64 = double(float(ctx.f7.f64 * f31.f64));
	// li r4,1
	ctx.r4.s64 = 1;
	// fmuls f13,f6,f31
	ctx.f13.f64 = double(float(ctx.f6.f64 * f31.f64));
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// fmuls f0,f0,f21
	f0.f64 = double(float(f0.f64 * f21.f64));
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// fmuls f0,f13,f21
	f0.f64 = double(float(ctx.f13.f64 * f21.f64));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x820b82a0
	sub_820B82A0(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// addi r7,r1,104
	ctx.r7.s64 = ctx.r1.s64 + 104;
	// fmr f18,f27
	ctx.fpscr.disableFlushMode();
	f18.f64 = f27.f64;
	// addi r6,r1,128
	ctx.r6.s64 = ctx.r1.s64 + 128;
	// fmr f17,f27
	f17.f64 = f27.f64;
	// addi r3,r11,1460
	ctx.r3.s64 = r11.s64 + 1460;
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// lwz r4,1456(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// bl 0x820b0cc8
	sub_820B0CC8(ctx, base);
	// lwz r8,-1364(r28)
	ctx.r8.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bc5b0
	if (cr6.getEQ()) goto loc_820BC5B0;
	// stfs f29,-1808(r25)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r25.u32 + -1808, temp.u32);
	// b 0x820bc5b4
	goto loc_820BC5B4;
loc_820BC5B0:
	// fmr f25,f27
	ctx.fpscr.disableFlushMode();
	f25.f64 = f27.f64;
loc_820BC5B4:
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lfs f13,-1776(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + -1776);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,-1772(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1772);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f13,-1792(r23)
	temp.u32 = PPC_LOAD_U32(r23.u32 + -1792);
	ctx.f13.f64 = double(temp.f32);
	// stfs f0,-1776(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + -1776, temp.u32);
	// fmr f28,f13
	f28.f64 = ctx.f13.f64;
	// fcmpu cr6,f0,f16
	cr6.compare(f0.f64, f16.f64);
	// blt cr6,0x820bc5e4
	if (cr6.getLT()) goto loc_820BC5E4;
	// fsubs f0,f0,f16
	f0.f64 = double(float(f0.f64 - f16.f64));
	// stfs f0,-1776(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + -1776, temp.u32);
loc_820BC5E4:
	// fcmpu cr6,f0,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bc5f4
	if (!cr6.getLT()) goto loc_820BC5F4;
	// fadds f0,f0,f16
	f0.f64 = double(float(f0.f64 + f16.f64));
	// stfs f0,-1776(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + -1776, temp.u32);
loc_820BC5F4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,600(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 600);
	ctx.f12.f64 = double(temp.f32);
	// lfs f26,15532(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15532);
	f26.f64 = double(temp.f32);
	// fmadds f0,f12,f26,f0
	f0.f64 = double(float(ctx.f12.f64 * f26.f64 + f0.f64));
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bc610
	if (!cr6.getLT()) goto loc_820BC610;
	// fadds f0,f0,f16
	f0.f64 = double(float(f0.f64 + f16.f64));
loc_820BC610:
	// fcmpu cr6,f0,f16
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f16.f64);
	// blt cr6,0x820bc61c
	if (cr6.getLT()) goto loc_820BC61C;
	// fsubs f0,f0,f16
	f0.f64 = double(float(f0.f64 - f16.f64));
loc_820BC61C:
	// fsubs f13,f0,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fcmpu cr6,f13,f23
	cr6.compare(ctx.f13.f64, f23.f64);
	// blt cr6,0x820bc630
	if (cr6.getLT()) goto loc_820BC630;
	// fsubs f0,f0,f16
	f0.f64 = double(float(f0.f64 - f16.f64));
	// b 0x820bc644
	goto loc_820BC644;
loc_820BC630:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,14444(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14444);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// bge cr6,0x820bc644
	if (!cr6.getLT()) goto loc_820BC644;
	// fadds f0,f0,f16
	f0.f64 = double(float(f0.f64 + f16.f64));
loc_820BC644:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,-6384(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + -6384);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// mr r9,r16
	ctx.r9.u64 = r16.u64;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// lfs f31,15432(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15432);
	f31.f64 = double(temp.f32);
	// lfs f13,-1788(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -1788);
	ctx.f13.f64 = double(temp.f32);
	// blt cr6,0x820bc6a4
	if (cr6.getLT()) goto loc_820BC6A4;
	// addi r10,r11,-8
	ctx.r10.s64 = r11.s64 + -8;
	// rlwinm r10,r10,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 29) & 0x1FFFFFFF;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r9,r10,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
loc_820BC674:
	// fmadds f13,f13,f31,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// bne cr6,0x820bc674
	if (!cr6.getEQ()) goto loc_820BC674;
	// stfs f13,-1788(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + -1788, temp.u32);
loc_820BC6A4:
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// bge cr6,0x820bc6c4
	if (!cr6.getLT()) goto loc_820BC6C4;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
loc_820BC6B0:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// fmadds f13,f13,f31,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bc6b0
	if (!cr6.getEQ()) goto loc_820BC6B0;
	// stfs f13,-1788(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + -1788, temp.u32);
loc_820BC6C4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,15428(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15428);
	f29.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f0,f13,f29
	f0.f64 = double(float(ctx.f13.f64 * f29.f64));
	// stfs f0,-1792(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + -1792, temp.u32);
	// lfs f30,15460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15460);
	f30.f64 = double(temp.f32);
	// fcmpu cr6,f0,f16
	cr6.compare(f0.f64, f16.f64);
	// blt cr6,0x820bc6f4
	if (cr6.getLT()) goto loc_820BC6F4;
	// fsubs f0,f0,f16
	f0.f64 = double(float(f0.f64 - f16.f64));
	// stfs f0,-1792(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + -1792, temp.u32);
	// fmuls f13,f0,f30
	ctx.f13.f64 = double(float(f0.f64 * f30.f64));
	// stfs f13,-1788(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + -1788, temp.u32);
loc_820BC6F4:
	// fcmpu cr6,f0,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bc70c
	if (!cr6.getLT()) goto loc_820BC70C;
	// fadds f0,f0,f16
	f0.f64 = double(float(f0.f64 + f16.f64));
	// stfs f0,-1792(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + -1792, temp.u32);
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// stfs f0,-1788(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -1788, temp.u32);
loc_820BC70C:
	// addi r3,r8,1460
	ctx.r3.s64 = ctx.r8.s64 + 1460;
	// lwz r4,1456(r8)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + 1456);
	// li r7,0
	ctx.r7.s64 = 0;
	// lfs f1,-1808(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -1808);
	ctx.f1.f64 = double(temp.f32);
	// li r6,0
	ctx.r6.s64 = 0;
	// bl 0x820b0cc8
	sub_820B0CC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bc73c
	if (!cr6.getEQ()) goto loc_820BC73C;
	// fmuls f0,f28,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f28.f64 * f30.f64));
	// stfs f28,-1792(r23)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r23.u32 + -1792, temp.u32);
	// stfs f0,-1788(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + -1788, temp.u32);
	// stfs f28,-1776(r30)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r30.u32 + -1776, temp.u32);
loc_820BC73C:
	// lwz r11,-1828(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -1828);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bc7d8
	if (cr6.getEQ()) goto loc_820BC7D8;
	// lwz r31,8(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lfs f0,0(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// lfs f0,8(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 8);
	f0.f64 = double(temp.f32);
	// fmr f1,f25
	ctx.f1.f64 = f25.f64;
	// stfs f27,108(r1)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8210b5c8
	sub_8210B5C8(ctx, base);
	// bl 0x820b0a20
	sub_820B0A20(ctx, base);
	// lfs f13,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,0(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 0);
	f0.f64 = double(temp.f32);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// lfs f13,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,8(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 8);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// lfs f0,-1808(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + -1808);
	f0.f64 = double(temp.f32);
	// stfs f27,108(r1)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// fsubs f1,f16,f0
	ctx.f1.f64 = double(float(f16.f64 - f0.f64));
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// lfs f1,20(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bcc8
	sub_8210BCC8(ctx, base);
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8210b5c8
	sub_8210B5C8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x820b82a0
	sub_820B82A0(ctx, base);
loc_820BC7D8:
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// lwz r11,-6384(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + -6384);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lfs f13,-1784(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -1784);
	ctx.f13.f64 = double(temp.f32);
	// ble cr6,0x820bc868
	if (!cr6.getGT()) goto loc_820BC868;
	// lfs f12,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f12.f64 = double(temp.f32);
	// mr r9,r16
	ctx.r9.u64 = r16.u64;
	// lfs f11,-1772(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1772);
	ctx.f11.f64 = double(temp.f32);
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// blt cr6,0x820bc844
	if (cr6.getLT()) goto loc_820BC844;
	// addi r10,r11,-8
	ctx.r10.s64 = r11.s64 + -8;
	// fdivs f0,f11,f12
	f0.f64 = double(float(ctx.f11.f64 / ctx.f12.f64));
	// rlwinm r10,r10,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 29) & 0x1FFFFFFF;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r9,r10,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
loc_820BC814:
	// fmadds f13,f13,f31,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// fmadds f13,f13,f31,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// bne cr6,0x820bc814
	if (!cr6.getEQ()) goto loc_820BC814;
	// stfs f13,-1784(r8)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r8.u32 + -1784, temp.u32);
loc_820BC844:
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// bge cr6,0x820bc868
	if (!cr6.getLT()) goto loc_820BC868;
	// fdivs f0,f11,f12
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 / ctx.f12.f64));
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
loc_820BC854:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// fmadds f13,f13,f31,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 + f0.f64));
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bc854
	if (!cr6.getEQ()) goto loc_820BC854;
	// stfs f13,-1784(r8)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r8.u32 + -1784, temp.u32);
loc_820BC868:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// fmuls f13,f13,f29
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 * f29.f64));
	// lfs f12,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f12.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r10,r10,14020
	ctx.r10.s64 = ctx.r10.s64 + 14020;
	// lfs f0,600(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 600);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f26
	f0.f64 = double(float(f0.f64 * f26.f64));
	// lfs f29,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f29.f64 = double(temp.f32);
	// fmadds f0,f13,f12,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 + f0.f64));
	// lfs f13,-1792(r23)
	temp.u32 = PPC_LOAD_U32(r23.u32 + -1792);
	ctx.f13.f64 = double(temp.f32);
	// fadds f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f0,-1808(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + -1808);
	f0.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// fmuls f0,f0,f24
	f0.f64 = double(float(f0.f64 * f24.f64));
	// stfs f0,596(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 596, temp.u32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bc8c0
	if (!cr6.getLT()) goto loc_820BC8C0;
loc_820BC8AC:
	// lfs f0,596(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 596);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f29
	f0.f64 = double(float(f0.f64 + f29.f64));
	// stfs f0,596(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 596, temp.u32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// blt cr6,0x820bc8ac
	if (cr6.getLT()) goto loc_820BC8AC;
loc_820BC8C0:
	// lfs f0,596(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 596);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// blt cr6,0x820bc938
	if (cr6.getLT()) goto loc_820BC938;
loc_820BC8CC:
	// lfs f0,596(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 596);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f29
	f0.f64 = double(float(f0.f64 - f29.f64));
	// stfs f0,596(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 596, temp.u32);
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// bge cr6,0x820bc8cc
	if (!cr6.getLT()) goto loc_820BC8CC;
	// b 0x820bc938
	goto loc_820BC938;
loc_820BC8E4:
	// lfs f12,600(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 600);
	ctx.f12.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// lfs f12,596(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 596);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,15436(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15436);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r10,r10,14020
	ctx.r10.s64 = ctx.r10.s64 + 14020;
	// fmadds f0,f13,f0,f12
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// lfs f29,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f29.f64 = double(temp.f32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bc920
	if (!cr6.getLT()) goto loc_820BC920;
loc_820BC914:
	// fadds f0,f0,f29
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 + f29.f64));
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// blt cr6,0x820bc914
	if (cr6.getLT()) goto loc_820BC914;
loc_820BC920:
	// fcmpu cr6,f0,f29
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f29.f64);
	// blt cr6,0x820bc934
	if (cr6.getLT()) goto loc_820BC934;
loc_820BC928:
	// fsubs f0,f0,f29
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 - f29.f64));
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// bge cr6,0x820bc928
	if (!cr6.getLT()) goto loc_820BC928;
loc_820BC934:
	// stfs f0,596(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 596, temp.u32);
loc_820BC938:
	// bl 0x820b2878
	sub_820B2878(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// fmr f31,f27
	ctx.fpscr.disableFlushMode();
	f31.f64 = f27.f64;
	// lwz r9,416(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 416);
	// lwz r10,8316(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8316);
	// mr r8,r9
	ctx.r8.u64 = ctx.r9.u64;
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// blt cr6,0x820bc95c
	if (cr6.getLT()) goto loc_820BC95C;
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
loc_820BC95C:
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne cr6,0x820bc970
	if (!cr6.getEQ()) goto loc_820BC970;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f31,15168(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15168);
	f31.f64 = double(temp.f32);
	// b 0x820bc9ac
	goto loc_820BC9AC;
loc_820BC970:
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// mr r8,r9
	ctx.r8.u64 = ctx.r9.u64;
	// blt cr6,0x820bc980
	if (cr6.getLT()) goto loc_820BC980;
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
loc_820BC980:
	// cmpwi cr6,r8,1
	cr6.compare<int32_t>(ctx.r8.s32, 1, xer);
	// bne cr6,0x820bc994
	if (!cr6.getEQ()) goto loc_820BC994;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f31,14100(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14100);
	f31.f64 = double(temp.f32);
	// b 0x820bc9ac
	goto loc_820BC9AC;
loc_820BC994:
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// bge cr6,0x820bc9a0
	if (!cr6.getLT()) goto loc_820BC9A0;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
loc_820BC9A0:
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x820bc9ac
	if (!cr6.getEQ()) goto loc_820BC9AC;
	// fmr f31,f27
	ctx.fpscr.disableFlushMode();
	f31.f64 = f27.f64;
loc_820BC9AC:
	// lfs f0,420(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 420);
	f0.f64 = double(temp.f32);
	// addi r3,r11,420
	ctx.r3.s64 = r11.s64 + 420;
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// beq cr6,0x820bc9dc
	if (cr6.getEQ()) goto loc_820BC9DC;
	// addi r5,r11,424
	ctx.r5.s64 = r11.s64 + 424;
	// fmr f3,f20
	ctx.f3.f64 = f20.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f2,f20
	ctx.f2.f64 = f20.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// lfs f4,2780(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2780);
	ctx.f4.f64 = double(temp.f32);
	// bl 0x820d6f30
	sub_820D6F30(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
loc_820BC9DC:
	// lfs f0,420(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 420);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bne cr6,0x820bc9f0
	if (!cr6.getEQ()) goto loc_820BC9F0;
	// stfs f27,424(r11)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 424, temp.u32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
loc_820BC9F0:
	// lwz r10,-1836(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + -1836);
	// lis r27,-32014
	r27.s64 = -2098069504;
	// lis r20,-31994
	r20.s64 = -2096758784;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r21,-31994
	r21.s64 = -2096758784;
	// addi r22,r10,15352
	r22.s64 = ctx.r10.s64 + 15352;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// bne cr6,0x820bd014
	if (!cr6.getEQ()) goto loc_820BD014;
	// lwz r10,-1888(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + -1888);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bcc04
	if (!cr6.getEQ()) goto loc_820BCC04;
	// lwz r10,-1828(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + -1828);
	// lis r30,-32014
	r30.s64 = -2098069504;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820bcbec
	if (cr6.getEQ()) goto loc_820BCBEC;
	// lfs f0,-1808(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -1808);
	f0.f64 = double(temp.f32);
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// lwz r31,8(r10)
	r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// fsubs f1,f16,f0
	ctx.f1.f64 = double(float(f16.f64 - f0.f64));
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// lfs f1,20(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bcc8
	sub_8210BCC8(ctx, base);
	// lfs f0,0(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + 0);
	f0.f64 = double(temp.f32);
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// lfs f0,4(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,108(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// lfs f0,8(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// bl 0x8210b5c8
	sub_8210B5C8(ctx, base);
	// lfs f0,88(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 88);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f13,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// lfs f0,92(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 92);
	f0.f64 = double(temp.f32);
	// lfs f13,108(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,108(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// lfs f13,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,96(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 96);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// lfs f0,-1792(r23)
	temp.u32 = PPC_LOAD_U32(r23.u32 + -1792);
	f0.f64 = double(temp.f32);
	// lfs f13,-1808(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + -1808);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// lfs f31,612(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 612);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f30,f0,f24
	f30.f64 = double(float(f0.f64 * f24.f64));
	// lfs f0,3028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3028);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// bge cr6,0x820bcad4
	if (!cr6.getLT()) goto loc_820BCAD4;
	// fmr f31,f0
	f31.f64 = f0.f64;
loc_820BCAD4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,-3672(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + -3672);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lfs f13,15120(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15120);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f13,f12
	f0.f64 = double(float(f0.f64 * ctx.f13.f64 + ctx.f12.f64));
	// stfs f0,-3672(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + -3672, temp.u32);
	// fcmpu cr6,f0,f19
	cr6.compare(f0.f64, f19.f64);
	// blt cr6,0x820bcafc
	if (cr6.getLT()) goto loc_820BCAFC;
	// fmr f0,f19
	f0.f64 = f19.f64;
	// stfs f0,-3672(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + -3672, temp.u32);
loc_820BCAFC:
	// fmuls f1,f0,f23
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = double(float(f0.f64 * f23.f64));
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f13,-1872(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -1872);
	ctx.f13.f64 = double(temp.f32);
	// lwz r10,-1364(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// fadds f0,f0,f19
	f0.f64 = double(float(f0.f64 + f19.f64));
	// fmuls f0,f0,f20
	f0.f64 = double(float(f0.f64 * f20.f64));
	// stfs f0,-3004(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -3004, temp.u32);
	// fsubs f12,f19,f0
	ctx.f12.f64 = double(float(f19.f64 - f0.f64));
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fmadds f0,f12,f31,f0
	f0.f64 = double(float(ctx.f12.f64 * f31.f64 + f0.f64));
	// stfs f0,612(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 612, temp.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f0,-1896(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -1896);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fsubs f13,f30,f0
	ctx.f13.f64 = double(float(f30.f64 - f0.f64));
	// lfs f12,14216(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14216);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// ble cr6,0x820bcb54
	if (!cr6.getGT()) goto loc_820BCB54;
	// fsubs f30,f30,f29
	f30.f64 = double(float(f30.f64 - f29.f64));
loc_820BCB54:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f12,15112(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15112);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// bge cr6,0x820bcb68
	if (!cr6.getLT()) goto loc_820BCB68;
	// fadds f30,f30,f29
	f30.f64 = double(float(f30.f64 + f29.f64));
loc_820BCB68:
	// lfs f13,-3004(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -3004);
	ctx.f13.f64 = double(temp.f32);
	// lwz r10,-1364(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// fsubs f12,f19,f13
	ctx.f12.f64 = double(float(f19.f64 - ctx.f13.f64));
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fmadds f0,f12,f30,f0
	f0.f64 = double(float(ctx.f12.f64 * f30.f64 + f0.f64));
	// stfs f0,596(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 596, temp.u32);
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// blt cr6,0x820bcb90
	if (cr6.getLT()) goto loc_820BCB90;
	// fsubs f0,f0,f29
	f0.f64 = double(float(f0.f64 - f29.f64));
	// stfs f0,596(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 596, temp.u32);
loc_820BCB90:
	// lfs f0,596(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 596);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bcba4
	if (!cr6.getLT()) goto loc_820BCBA4;
	// fadds f0,f0,f29
	f0.f64 = double(float(f0.f64 + f29.f64));
	// stfs f0,596(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 596, temp.u32);
loc_820BCBA4:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f0,-3004(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -3004);
	f0.f64 = double(temp.f32);
	// fsubs f13,f19,f0
	ctx.f13.f64 = double(float(f19.f64 - f0.f64));
	// lfs f10,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f10.f64 = double(temp.f32);
	// addi r10,r10,-2960
	ctx.r10.s64 = ctx.r10.s64 + -2960;
	// lfs f7,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f7.f64 = double(temp.f32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// stfs f27,92(r1)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// lfs f12,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f8,f12,f0
	ctx.f8.f64 = double(float(ctx.f12.f64 * f0.f64));
	// lfs f12,8(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// lfs f11,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f11.f64 = double(temp.f32);
	// lfs f9,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f9.f64 = double(temp.f32);
	// fmadds f12,f13,f10,f8
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f10.f64 + ctx.f8.f64));
	// fmadds f0,f13,f7,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f7.f64 + f0.f64));
	// fsubs f18,f12,f11
	f18.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fsubs f17,f0,f9
	f17.f64 = double(float(f0.f64 - ctx.f9.f64));
loc_820BCBEC:
	// lfs f0,-3672(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + -3672);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f19
	cr6.compare(f0.f64, f19.f64);
	// blt cr6,0x820bcf18
	if (cr6.getLT()) goto loc_820BCF18;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,-1888(r29)
	PPC_STORE_U32(r29.u32 + -1888, ctx.r10.u32);
	// b 0x820bcf18
	goto loc_820BCF18;
loc_820BCC04:
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820bcc74
	if (!cr6.getEQ()) goto loc_820BCC74;
	// li r11,2
	r11.s64 = 2;
	// stw r11,-1888(r29)
	PPC_STORE_U32(r29.u32 + -1888, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r31,r11,-1820
	r31.s64 = r11.s64 + -1820;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bcc50
	if (!cr6.getEQ()) goto loc_820BCC50;
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bcc50
	if (!cr6.getEQ()) goto loc_820BCC50;
	// li r8,6832
	ctx.r8.s64 = 6832;
	// lwz r6,19944(r21)
	ctx.r6.u64 = PPC_LOAD_U32(r21.u32 + 19944);
	// mr r7,r22
	ctx.r7.u64 = r22.u64;
	// lwz r3,19936(r20)
	ctx.r3.u64 = PPC_LOAD_U32(r20.u32 + 19936);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,66
	ctx.r4.s64 = 66;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820BCC50:
	// li r5,25000
	ctx.r5.s64 = 25000;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r11,25000
	r11.s64 = 25000;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1900(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1900, r11.u32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// b 0x820bcf18
	goto loc_820BCF18;
loc_820BCC74:
	// lfs f0,640(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	f0.f64 = double(temp.f32);
	// fmuls f31,f0,f22
	f31.f64 = double(float(f0.f64 * f22.f64));
	// lfs f13,600(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 600);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15528(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15528);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fcmpu cr6,f31,f27
	cr6.compare(f31.f64, f27.f64);
	// bge cr6,0x820bcc98
	if (!cr6.getLT()) goto loc_820BCC98;
	// fneg f31,f31
	f31.u64 = f31.u64 ^ 0x8000000000000000;
loc_820BCC98:
	// fcmpu cr6,f0,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bcca4
	if (!cr6.getLT()) goto loc_820BCCA4;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_820BCCA4:
	// fcmpu cr6,f0,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x820bccb0
	if (!cr6.getGT()) goto loc_820BCCB0;
	// fmr f31,f0
	f31.f64 = f0.f64;
loc_820BCCB0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f31,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f27.f64);
	// lfs f30,14064(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14064);
	f30.f64 = double(temp.f32);
	// ble cr6,0x820bcd90
	if (!cr6.getGT()) goto loc_820BCD90;
	// fcmpu cr6,f31,f19
	cr6.compare(f31.f64, f19.f64);
	// ble cr6,0x820bcccc
	if (!cr6.getGT()) goto loc_820BCCCC;
	// fmr f31,f19
	f31.f64 = f19.f64;
loc_820BCCCC:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r31,r11,-1820
	r31.s64 = r11.s64 + -1820;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820bcd14
	if (!cr6.getEQ()) goto loc_820BCD14;
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bcd08
	if (!cr6.getEQ()) goto loc_820BCD08;
	// li r8,6859
	ctx.r8.s64 = 6859;
	// lwz r6,19944(r21)
	ctx.r6.u64 = PPC_LOAD_U32(r21.u32 + 19944);
	// mr r7,r22
	ctx.r7.u64 = r22.u64;
	// lwz r3,19936(r20)
	ctx.r3.u64 = PPC_LOAD_U32(r20.u32 + 19936);
	// addi r5,r31,4
	ctx.r5.s64 = r31.s64 + 4;
	// li r4,62
	ctx.r4.s64 = 62;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820BCD08:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820bcdb8
	if (cr6.getEQ()) goto loc_820BCDB8;
loc_820BCD14:
	// li r11,32767
	r11.s64 = 32767;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14396(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14396);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// bge cr6,0x820bcd54
	if (!cr6.getLT()) goto loc_820BCD54;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r4,8
	ctx.r4.s64 = 8;
	// lfs f0,15524(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15524);
	f0.f64 = double(temp.f32);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fmuls f0,f31,f0
	f0.f64 = double(float(f31.f64 * f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x820bcdb8
	goto loc_820BCDB8;
loc_820BCD54:
	// fcmpu cr6,f31,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f30.f64);
	// bge cr6,0x820bcd80
	if (!cr6.getLT()) goto loc_820BCD80;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f12,f31,f0
	ctx.f12.f64 = double(float(f31.f64 - f0.f64));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f0,15520(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15520);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,15516(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15516);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
loc_820BCD80:
	// li r4,8
	ctx.r4.s64 = 8;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x820bcdb8
	goto loc_820BCDB8;
loc_820BCD90:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r31,r11,-1820
	r31.s64 = r11.s64 + -1820;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820bcdb8
	if (cr6.getEQ()) goto loc_820BCDB8;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bcdb8
	if (cr6.getEQ()) goto loc_820BCDB8;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820BCDB8:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820bcdf8
	if (!cr6.getEQ()) goto loc_820BCDF8;
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bcdec
	if (!cr6.getEQ()) goto loc_820BCDEC;
	// li r8,6877
	ctx.r8.s64 = 6877;
	// lwz r6,19944(r21)
	ctx.r6.u64 = PPC_LOAD_U32(r21.u32 + 19944);
	// mr r7,r22
	ctx.r7.u64 = r22.u64;
	// lwz r3,19936(r20)
	ctx.r3.u64 = PPC_LOAD_U32(r20.u32 + 19936);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,65
	ctx.r4.s64 = 65;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820BCDEC:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820bce38
	if (cr6.getEQ()) goto loc_820BCE38;
loc_820BCDF8:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// fcmpu cr6,f31,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f30.f64);
	// li r5,32767
	ctx.r5.s64 = 32767;
	// addi r11,r11,-1900
	r11.s64 = r11.s64 + -1900;
	// stw r5,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r5.u32);
	// bge cr6,0x820bce30
	if (!cr6.getLT()) goto loc_820BCE30;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,15512(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15512);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,15508(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15508);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f31,f0,f13
	f0.f64 = double(float(f31.f64 * f0.f64 + ctx.f13.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 0);
loc_820BCE30:
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
loc_820BCE38:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// cmpwi cr6,r3,32
	cr6.compare<int32_t>(ctx.r3.s32, 32, xer);
	// bne cr6,0x820bce60
	if (!cr6.getEQ()) goto loc_820BCE60;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,8328(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8328);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,13976(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13976);
	f0.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// b 0x820bce64
	goto loc_820BCE64;
loc_820BCE60:
	// lfs f0,-1800(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + -1800);
	f0.f64 = double(temp.f32);
loc_820BCE64:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,15504(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15504);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820bce84
	if (cr6.getGT()) goto loc_820BCE84;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,15500(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15500);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820bce88
	if (!cr6.getLT()) goto loc_820BCE88;
loc_820BCE84:
	// fmr f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f13.f64;
loc_820BCE88:
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lwz r10,-6384(r19)
	ctx.r10.u64 = PPC_LOAD_U32(r19.u32 + -6384);
	// lis r7,-32014
	ctx.r7.s64 = -2098069504;
	// mr r8,r16
	ctx.r8.u64 = r16.u64;
	// cmpwi cr6,r10,8
	cr6.compare<int32_t>(ctx.r10.s32, 8, xer);
	// lfs f13,15496(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 15496);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,-1796(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + -1796);
	ctx.f12.f64 = double(temp.f32);
	// blt cr6,0x820bcee8
	if (cr6.getLT()) goto loc_820BCEE8;
	// addi r9,r10,-8
	ctx.r9.s64 = ctx.r10.s64 + -8;
	// rlwinm r9,r9,29,3,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 29) & 0x1FFFFFFF;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// rlwinm r8,r9,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
loc_820BCEB8:
	// fmadds f12,f12,f13,f0
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64 + f0.f64));
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// fmadds f12,f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f12,f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f12,f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f12,f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f12,f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f12,f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f12,f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64 + f0.f64));
	// bne cr6,0x820bceb8
	if (!cr6.getEQ()) goto loc_820BCEB8;
	// stfs f12,-1796(r7)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r7.u32 + -1796, temp.u32);
loc_820BCEE8:
	// cmpw cr6,r8,r10
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r10.s32, xer);
	// bge cr6,0x820bcf08
	if (!cr6.getLT()) goto loc_820BCF08;
	// subf r10,r8,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r8.s64;
loc_820BCEF4:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// fmadds f12,f12,f13,f0
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64 + f0.f64));
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820bcef4
	if (!cr6.getEQ()) goto loc_820BCEF4;
	// stfs f12,-1796(r7)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r7.u32 + -1796, temp.u32);
loc_820BCF08:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,15492(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15492);
	f0.f64 = double(temp.f32);
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// stfs f0,-1800(r27)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r27.u32 + -1800, temp.u32);
loc_820BCF18:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,-6368(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lfs f12,700(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 700);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,14212(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14212);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f0,f0,f13,f12
	f0.f64 = double(float(-(f0.f64 * ctx.f13.f64 - ctx.f12.f64)));
	// stfs f0,700(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 700, temp.u32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bcf3c
	if (!cr6.getLT()) goto loc_820BCF3C;
	// stfs f27,700(r11)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 700, temp.u32);
loc_820BCF3C:
	// fmr f3,f27
	ctx.fpscr.disableFlushMode();
	ctx.f3.f64 = f27.f64;
	// fmr f2,f27
	ctx.f2.f64 = f27.f64;
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// bl 0x820b23b0
	sub_820B23B0(ctx, base);
	// lfs f0,-1808(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -1808);
	f0.f64 = double(temp.f32);
	// fsubs f1,f16,f0
	ctx.f1.f64 = double(float(f16.f64 - f0.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// lfs f0,-1808(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -1808);
	f0.f64 = double(temp.f32);
	// frsp f12,f1
	ctx.f12.f64 = double(float(ctx.f1.f64));
	// fsubs f0,f16,f0
	f0.f64 = double(float(f16.f64 - f0.f64));
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f13,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,640(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f11.f64 = double(temp.f32);
	// fmr f1,f0
	ctx.f1.f64 = f0.f64;
	// fmuls f0,f11,f12
	f0.f64 = double(float(ctx.f11.f64 * ctx.f12.f64));
	// fmadds f0,f0,f13,f18
	f0.f64 = double(float(f0.f64 * ctx.f13.f64 + f18.f64));
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f0,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// lfs f12,640(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmadds f0,f13,f0,f17
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + f17.f64));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x820b82a0
	sub_820B82A0(ctx, base);
	// lwz r11,-1888(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1888);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820bd5d0
	if (!cr6.getEQ()) goto loc_820BD5D0;
	// lwz r11,-6384(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + -6384);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820bd5d0
	if (!cr6.getGT()) goto loc_820BD5D0;
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f0,-6368(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fdivs f0,f19,f0
	f0.f64 = double(float(f19.f64 / f0.f64));
	// lfs f13,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,1328(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1328);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f13,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lfs f11,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f11.f64 = double(temp.f32);
	// lfs f13,1336(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1336);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f11,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// lfs f11,640(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f11.f64 = double(temp.f32);
	// fcmpu cr6,f11,f27
	cr6.compare(ctx.f11.f64, f27.f64);
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fsqrts f0,f0
	f0.f64 = double(float(sqrt(f0.f64)));
	// bge cr6,0x820bd00c
	if (!cr6.getLT()) goto loc_820BD00C;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_820BD00C:
	// stfs f0,640(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
	// b 0x820bd5d0
	goto loc_820BD5D0;
loc_820BD014:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// addi r31,r10,-1820
	r31.s64 = ctx.r10.s64 + -1820;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820bd084
	if (cr6.getEQ()) goto loc_820BD084;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bd080
	if (cr6.getEQ()) goto loc_820BD080;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-6368(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lfs f13,14108(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14108);
	ctx.f13.f64 = double(temp.f32);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,-1900(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1900);
	// subf r5,r9,r10
	ctx.r5.s64 = ctx.r10.s64 - ctx.r9.s64;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// stw r5,-1900(r11)
	PPC_STORE_U32(r11.u32 + -1900, ctx.r5.u32);
	// ble cr6,0x820bd07c
	if (!cr6.getGT()) goto loc_820BD07C;
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// b 0x820bd080
	goto loc_820BD080;
loc_820BD07C:
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820BD080:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
loc_820BD084:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820bd0a8
	if (cr6.getEQ()) goto loc_820BD0A8;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bd0a4
	if (cr6.getEQ()) goto loc_820BD0A4;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820BD0A4:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
loc_820BD0A8:
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// lfs f10,-6368(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f10.f64 = double(temp.f32);
	// lfs f3,632(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 632);
	ctx.f3.f64 = double(temp.f32);
	// lis r31,-32190
	r31.s64 = -2109603840;
	// addi r10,r10,15884
	ctx.r10.s64 = ctx.r10.s64 + 15884;
	// lfs f0,4892(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4892);
	f0.f64 = double(temp.f32);
	// lfs f7,1480(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1480);
	ctx.f7.f64 = double(temp.f32);
	// lfs f6,1472(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1472);
	ctx.f6.f64 = double(temp.f32);
	// lfs f4,4900(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4900);
	ctx.f4.f64 = double(temp.f32);
	// lfs f13,17792(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 17792);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,36(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	ctx.f12.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fmuls f12,f12,f10
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f10.f64));
	// lfs f5,4896(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4896);
	ctx.f5.f64 = double(temp.f32);
	// lfs f11,632(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 632);
	ctx.f11.f64 = double(temp.f32);
	// lfs f8,600(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 600);
	ctx.f8.f64 = double(temp.f32);
	// lfs f9,640(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f9.f64 = double(temp.f32);
	// lfs f31,14112(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14112);
	f31.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fmuls f11,f11,f31
	ctx.f11.f64 = double(float(ctx.f11.f64 * f31.f64));
	// fmuls f8,f8,f31
	ctx.f8.f64 = double(float(ctx.f8.f64 * f31.f64));
	// fmuls f12,f12,f20
	ctx.f12.f64 = double(float(ctx.f12.f64 * f20.f64));
	// fcmpu cr6,f11,f27
	cr6.compare(ctx.f11.f64, f27.f64);
	// fmuls f30,f12,f3
	f30.f64 = double(float(ctx.f12.f64 * ctx.f3.f64));
	// fmuls f12,f7,f0
	ctx.f12.f64 = double(float(ctx.f7.f64 * f0.f64));
	// fmuls f0,f6,f0
	f0.f64 = double(float(ctx.f6.f64 * f0.f64));
	// fmuls f12,f12,f13
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmsubs f0,f0,f13,f4
	f0.f64 = double(float(f0.f64 * ctx.f13.f64 - ctx.f4.f64));
	// fneg f13,f12
	ctx.f13.u64 = ctx.f12.u64 ^ 0x8000000000000000;
	// lfs f12,14484(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14484);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f26,f0,f12
	f26.f64 = double(float(f0.f64 * ctx.f12.f64));
	// fsubs f13,f13,f5
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f5.f64));
	// fmuls f7,f13,f13
	ctx.f7.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// fmuls f25,f13,f12
	f25.f64 = double(float(ctx.f13.f64 * ctx.f12.f64));
	// fmadds f1,f0,f0,f7
	ctx.f1.f64 = double(float(f0.f64 * f0.f64 + ctx.f7.f64));
	// bge cr6,0x820bd13c
	if (!cr6.getLT()) goto loc_820BD13C;
	// fneg f11,f11
	ctx.f11.u64 = ctx.f11.u64 ^ 0x8000000000000000;
loc_820BD13C:
	// fcmpu cr6,f9,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f9.f64, f27.f64);
	// bge cr6,0x820bd148
	if (!cr6.getLT()) goto loc_820BD148;
	// fneg f9,f9
	ctx.f9.u64 = ctx.f9.u64 ^ 0x8000000000000000;
loc_820BD148:
	// fcmpu cr6,f8,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f8.f64, f27.f64);
	// bge cr6,0x820bd154
	if (!cr6.getLT()) goto loc_820BD154;
	// fneg f8,f8
	ctx.f8.u64 = ctx.f8.u64 ^ 0x8000000000000000;
loc_820BD154:
	// fmr f14,f9
	ctx.fpscr.disableFlushMode();
	f14.f64 = ctx.f9.f64;
	// fcmpu cr6,f11,f9
	cr6.compare(ctx.f11.f64, ctx.f9.f64);
	// ble cr6,0x820bd164
	if (!cr6.getGT()) goto loc_820BD164;
	// fmr f14,f11
	f14.f64 = ctx.f11.f64;
loc_820BD164:
	// fcmpu cr6,f8,f14
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f8.f64, f14.f64);
	// ble cr6,0x820bd170
	if (!cr6.getGT()) goto loc_820BD170;
	// fmr f14,f8
	f14.f64 = ctx.f8.f64;
loc_820BD170:
	// fcmpu cr6,f1,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f27.f64);
	// ble cr6,0x820bd1a4
	if (!cr6.getGT()) goto loc_820BD1A4;
	// bl 0x8238ca50
	sub_8238CA50(ctx, base);
	// lfs f0,17792(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 17792);
	f0.f64 = double(temp.f32);
	// fdivs f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 / f0.f64));
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x820bd190
	if (!cr6.getGT()) goto loc_820BD190;
	// fmr f0,f31
	f0.f64 = f31.f64;
loc_820BD190:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f10,-6368(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	ctx.f10.f64 = double(temp.f32);
	// fcmpu cr6,f14,f0
	cr6.compare(f14.f64, f0.f64);
	// bge cr6,0x820bd1a4
	if (!cr6.getLT()) goto loc_820BD1A4;
	// fmr f14,f0
	f14.f64 = f0.f64;
loc_820BD1A4:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f12,700(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 700);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,12888(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12888);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f14,f0
	cr6.compare(f14.f64, f0.f64);
	// blt cr6,0x820bd1d0
	if (cr6.getLT()) goto loc_820BD1D0;
	// fsubs f13,f14,f0
	ctx.f13.f64 = double(float(f14.f64 - f0.f64));
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,15488(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15488);
	f0.f64 = double(temp.f32);
	// fmuls f13,f13,f10
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f10.f64));
	// fmadds f0,f13,f0,f12
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f12.f64));
	// b 0x820bd1e4
	goto loc_820BD1E4;
loc_820BD1D0:
	// fsubs f13,f0,f14
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f0.f64 - f14.f64));
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,15484(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15484);
	f0.f64 = double(temp.f32);
	// fmuls f13,f13,f10
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f10.f64));
	// fnmsubs f0,f13,f0,f12
	f0.f64 = double(float(-(ctx.f13.f64 * f0.f64 - ctx.f12.f64)));
loc_820BD1E4:
	// stfs f0,700(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 700, temp.u32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bd1f8
	if (!cr6.getLT()) goto loc_820BD1F8;
	// stfs f27,700(r11)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 700, temp.u32);
	// b 0x820bd204
	goto loc_820BD204;
loc_820BD1F8:
	// fcmpu cr6,f0,f19
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f19.f64);
	// ble cr6,0x820bd204
	if (!cr6.getGT()) goto loc_820BD204;
	// stfs f19,700(r11)
	temp.f32 = float(f19.f64);
	PPC_STORE_U32(r11.u32 + 700, temp.u32);
loc_820BD204:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// fmr f3,f30
	ctx.fpscr.disableFlushMode();
	ctx.f3.f64 = f30.f64;
	// fmr f1,f14
	ctx.f1.f64 = f14.f64;
	// lfs f2,640(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f2.f64 = double(temp.f32);
	// bl 0x820b23b0
	sub_820B23B0(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f0,1572(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1572);
	f0.f64 = double(temp.f32);
	// lfs f11,1480(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1480);
	ctx.f11.f64 = double(temp.f32);
	// lfs f12,1472(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1472);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f10,f11,f0
	ctx.f10.f64 = double(float(ctx.f11.f64 * f0.f64));
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// lfs f13,1580(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1580);
	ctx.f13.f64 = double(temp.f32);
	// lfs f29,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f29.f64 = double(temp.f32);
	// lfs f28,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	f28.f64 = double(temp.f32);
	// lwz r11,1456(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// fmsubs f12,f12,f13,f10
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f13.f64 - ctx.f10.f64));
	// fmadds f11,f11,f13,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * ctx.f13.f64 + f0.f64));
	// lfs f0,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmuls f13,f12,f0
	ctx.f13.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f0,f11,f0
	f0.f64 = double(float(ctx.f11.f64 * f0.f64));
	// fadds f31,f25,f13
	f31.f64 = double(float(f25.f64 + ctx.f13.f64));
	// stfs f31,88(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// fadds f30,f26,f0
	f30.f64 = double(float(f26.f64 + f0.f64));
	// stfs f30,96(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x821393a0
	sub_821393A0(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bd2bc
	if (cr6.getEQ()) goto loc_820BD2BC;
	// lfs f11,1480(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1480);
	ctx.f11.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f10,632(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 632);
	ctx.f10.f64 = double(temp.f32);
	// lfs f0,1472(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1472);
	f0.f64 = double(temp.f32);
	// fmuls f9,f10,f11
	ctx.f9.f64 = double(float(ctx.f10.f64 * ctx.f11.f64));
	// fmuls f10,f10,f0
	ctx.f10.f64 = double(float(ctx.f10.f64 * f0.f64));
	// lfs f13,640(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,2952(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2952);
	ctx.f12.f64 = double(temp.f32);
	// fmsubs f9,f13,f0,f9
	ctx.f9.f64 = double(float(ctx.f13.f64 * f0.f64 - ctx.f9.f64));
	// lfs f0,-6368(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmadds f13,f11,f13,f10
	ctx.f13.f64 = double(float(ctx.f11.f64 * ctx.f13.f64 + ctx.f10.f64));
	// fmuls f11,f9,f0
	ctx.f11.f64 = double(float(ctx.f9.f64 * f0.f64));
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fmadds f31,f11,f12,f31
	f31.f64 = double(float(ctx.f11.f64 * ctx.f12.f64 + f31.f64));
	// stfs f31,88(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// fmadds f30,f0,f12,f30
	f30.f64 = double(float(f0.f64 * ctx.f12.f64 + f30.f64));
	// stfs f30,96(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
loc_820BD2BC:
	// lfs f0,4892(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4892);
	f0.f64 = double(temp.f32);
	// li r4,1
	ctx.r4.s64 = 1;
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// beq cr6,0x820bd2d0
	if (cr6.getEQ()) goto loc_820BD2D0;
	// mr r4,r16
	ctx.r4.u64 = r16.u64;
loc_820BD2D0:
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x820b82a0
	sub_820B82A0(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// addi r7,r1,240
	ctx.r7.s64 = ctx.r1.s64 + 240;
	// fmr f2,f28
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f28.f64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// lfs f13,1496(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1496);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15480(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15480);
	f0.f64 = double(temp.f32);
	// fmuls f3,f13,f0
	ctx.f3.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x8210fec0
	sub_8210FEC0(ctx, base);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x823ae350
	sub_823AE350(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bd314
	if (cr6.getEQ()) goto loc_820BD314;
	// li r15,1
	r15.s64 = 1;
loc_820BD314:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// addi r7,r1,240
	ctx.r7.s64 = ctx.r1.s64 + 240;
	// addi r3,r11,1456
	ctx.r3.s64 = r11.s64 + 1456;
	// lfs f0,1496(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1496);
	f0.f64 = double(temp.f32);
	// lfs f2,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// fmuls f3,f0,f21
	ctx.f3.f64 = double(float(f0.f64 * f21.f64));
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210fec0
	sub_8210FEC0(ctx, base);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x823ae350
	sub_823AE350(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bd348
	if (cr6.getEQ()) goto loc_820BD348;
	// li r15,1
	r15.s64 = 1;
loc_820BD348:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// addi r7,r1,240
	ctx.r7.s64 = ctx.r1.s64 + 240;
	// addi r3,r11,1456
	ctx.r3.s64 = r11.s64 + 1456;
	// lfs f3,1496(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1496);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210fec0
	sub_8210FEC0(ctx, base);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x823ae350
	sub_823AE350(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bd39c
	if (!cr6.getEQ()) goto loc_820BD39C;
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// addi r7,r1,240
	ctx.r7.s64 = ctx.r1.s64 + 240;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// fmr f2,f28
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f28.f64;
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// lfs f13,1496(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1496);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15476(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15476);
	f0.f64 = double(temp.f32);
	// fmuls f3,f13,f0
	ctx.f3.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x8210fec0
	sub_8210FEC0(ctx, base);
loc_820BD39C:
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x823ae350
	sub_823AE350(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bd580
	if (cr6.getEQ()) goto loc_820BD580;
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// li r15,1
	r15.s64 = 1;
	// bl 0x8210fef8
	sub_8210FEF8(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f7,172(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	ctx.f7.f64 = double(temp.f32);
	// lfs f8,376(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 376);
	ctx.f8.f64 = double(temp.f32);
	// fcmpu cr6,f8,f7
	cr6.compare(ctx.f8.f64, ctx.f7.f64);
	// bgt cr6,0x820bd584
	if (cr6.getGT()) goto loc_820BD584;
	// lfs f9,144(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	ctx.f9.f64 = double(temp.f32);
	// fadds f12,f29,f31
	ctx.f12.f64 = double(float(f29.f64 + f31.f64));
	// lfs f13,156(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f11,f29,f9
	ctx.f11.f64 = double(float(f29.f64 - ctx.f9.f64));
	// fsubs f13,f9,f13
	ctx.f13.f64 = double(float(ctx.f9.f64 - ctx.f13.f64));
	// lfs f10,152(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	ctx.f10.f64 = double(temp.f32);
	// lfs f0,164(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	f0.f64 = double(temp.f32);
	// fadds f6,f28,f30
	ctx.f6.f64 = double(float(f28.f64 + f30.f64));
	// fsubs f0,f0,f10
	f0.f64 = double(float(f0.f64 - ctx.f10.f64));
	// fsubs f5,f28,f10
	ctx.f5.f64 = double(float(f28.f64 - ctx.f10.f64));
	// fsubs f4,f12,f9
	ctx.f4.f64 = double(float(ctx.f12.f64 - ctx.f9.f64));
	// fmuls f12,f13,f13
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// fsubs f6,f6,f10
	ctx.f6.f64 = double(float(ctx.f6.f64 - ctx.f10.f64));
	// fmadds f12,f0,f0,f12
	ctx.f12.f64 = double(float(f0.f64 * f0.f64 + ctx.f12.f64));
	// fsqrts f12,f12
	ctx.f12.f64 = double(float(sqrt(ctx.f12.f64)));
	// fdivs f12,f19,f12
	ctx.f12.f64 = double(float(f19.f64 / ctx.f12.f64));
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f12,f11,f0
	ctx.f12.f64 = double(float(ctx.f11.f64 * f0.f64));
	// fmuls f0,f4,f0
	f0.f64 = double(float(ctx.f4.f64 * f0.f64));
	// fmadds f12,f5,f13,f12
	ctx.f12.f64 = double(float(ctx.f5.f64 * ctx.f13.f64 + ctx.f12.f64));
	// fmadds f0,f6,f13,f0
	f0.f64 = double(float(ctx.f6.f64 * ctx.f13.f64 + f0.f64));
	// fmuls f13,f0,f12
	ctx.f13.f64 = double(float(f0.f64 * ctx.f12.f64));
	// fcmpu cr6,f13,f27
	cr6.compare(ctx.f13.f64, f27.f64);
	// bgt cr6,0x820bd440
	if (cr6.getGT()) goto loc_820BD440;
	// fmr f0,f27
	f0.f64 = f27.f64;
	// b 0x820bd490
	goto loc_820BD490;
loc_820BD440:
	// fcmpu cr6,f0,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bd450
	if (!cr6.getLT()) goto loc_820BD450;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fneg f12,f12
	ctx.f12.u64 = ctx.f12.u64 ^ 0x8000000000000000;
loc_820BD450:
	// fcmpu cr6,f0,f12
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f12.f64);
	// blt cr6,0x820bd460
	if (cr6.getLT()) goto loc_820BD460;
	// fmr f0,f27
	f0.f64 = f27.f64;
	// b 0x820bd490
	goto loc_820BD490;
loc_820BD460:
	// lfs f13,1496(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1496);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820bd474
	if (!cr6.getGT()) goto loc_820BD474;
	// fmr f0,f27
	f0.f64 = f27.f64;
	// b 0x820bd490
	goto loc_820BD490;
loc_820BD474:
	// fcmpu cr6,f12,f13
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// bge cr6,0x820bd484
	if (!cr6.getLT()) goto loc_820BD484;
	// fmr f0,f27
	f0.f64 = f27.f64;
	// b 0x820bd490
	goto loc_820BD490;
loc_820BD484:
	// fsubs f13,f12,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// fsubs f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 - f0.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
loc_820BD490:
	// fmuls f13,f31,f31
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f31.f64 * f31.f64));
	// fmadds f13,f30,f30,f13
	ctx.f13.f64 = double(float(f30.f64 * f30.f64 + ctx.f13.f64));
	// fsqrts f12,f13
	ctx.f12.f64 = double(float(sqrt(ctx.f13.f64)));
	// fcmpu cr6,f12,f27
	cr6.compare(ctx.f12.f64, f27.f64);
	// ble cr6,0x820bd4e0
	if (!cr6.getGT()) goto loc_820BD4E0;
	// fsubs f13,f19,f0
	ctx.f13.f64 = double(float(f19.f64 - f0.f64));
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f11,12900(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12900);
	ctx.f11.f64 = double(temp.f32);
	// fmuls f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64));
	// fmuls f6,f13,f11
	ctx.f6.f64 = double(float(ctx.f13.f64 * ctx.f11.f64));
	// stfs f6,116(r1)
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// fadds f11,f8,f6
	ctx.f11.f64 = double(float(ctx.f8.f64 + ctx.f6.f64));
	// fcmpu cr6,f11,f7
	cr6.compare(ctx.f11.f64, ctx.f7.f64);
	// blt cr6,0x820bd4e4
	if (cr6.getLT()) goto loc_820BD4E4;
	// fsubs f11,f7,f8
	ctx.f11.f64 = double(float(ctx.f7.f64 - ctx.f8.f64));
	// lfs f8,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f8.f64 = double(temp.f32);
	// stfs f11,116(r1)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// fnmsubs f13,f11,f8,f13
	ctx.f13.f64 = double(float(-(ctx.f11.f64 * ctx.f8.f64 - ctx.f13.f64)));
	// fdivs f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 / ctx.f12.f64));
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
loc_820BD4E0:
	// lfs f6,116(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f6.f64 = double(temp.f32);
loc_820BD4E4:
	// lfs f13,176(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f11,f13,f10
	ctx.f11.f64 = double(float(ctx.f13.f64 - ctx.f10.f64));
	// lfs f13,188(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f13,f10
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f10.f64));
	// lfs f12,168(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	ctx.f12.f64 = double(temp.f32);
	// lfs f10,180(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f12,f12,f9
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f9.f64));
	// fsubs f10,f10,f9
	ctx.f10.f64 = double(float(ctx.f10.f64 - ctx.f9.f64));
	// fmuls f8,f12,f12
	ctx.f8.f64 = double(float(ctx.f12.f64 * ctx.f12.f64));
	// fmuls f9,f10,f10
	ctx.f9.f64 = double(float(ctx.f10.f64 * ctx.f10.f64));
	// fmadds f8,f11,f11,f8
	ctx.f8.f64 = double(float(ctx.f11.f64 * ctx.f11.f64 + ctx.f8.f64));
	// fmadds f9,f13,f13,f9
	ctx.f9.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + ctx.f9.f64));
	// fcmpu cr6,f9,f8
	cr6.compare(ctx.f9.f64, ctx.f8.f64);
	// bge cr6,0x820bd524
	if (!cr6.getLT()) goto loc_820BD524;
	// fmr f12,f10
	ctx.f12.f64 = ctx.f10.f64;
	// fmr f11,f13
	ctx.f11.f64 = ctx.f13.f64;
loc_820BD524:
	// lfs f13,148(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f10,f0,f31
	ctx.f10.f64 = double(float(f0.f64 * f31.f64));
	// fsubs f13,f7,f13
	ctx.f13.f64 = double(float(ctx.f7.f64 - ctx.f13.f64));
	// stfs f29,1460(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 1460, temp.u32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// li r4,1
	ctx.r4.s64 = 1;
	// stfs f28,1468(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 1468, temp.u32);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// fdivs f12,f12,f13
	ctx.f12.f64 = double(float(ctx.f12.f64 / ctx.f13.f64));
	// fdivs f13,f11,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 / ctx.f13.f64));
	// stw r10,1456(r11)
	PPC_STORE_U32(r11.u32 + 1456, ctx.r10.u32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f9,4892(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4892);
	ctx.f9.f64 = double(temp.f32);
	// fcmpu cr6,f9,f27
	cr6.compare(ctx.f9.f64, f27.f64);
	// fmadds f31,f12,f6,f10
	f31.f64 = double(float(ctx.f12.f64 * ctx.f6.f64 + ctx.f10.f64));
	// stfs f31,88(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// fmadds f30,f13,f6,f0
	f30.f64 = double(float(ctx.f13.f64 * ctx.f6.f64 + f0.f64));
	// stfs f30,96(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// beq cr6,0x820bd578
	if (cr6.getEQ()) goto loc_820BD578;
	// mr r4,r16
	ctx.r4.u64 = r16.u64;
loc_820BD578:
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x820b82a0
	sub_820B82A0(ctx, base);
loc_820BD580:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
loc_820BD584:
	// fmuls f11,f31,f31
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = double(float(f31.f64 * f31.f64));
	// lfs f0,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// fsubs f13,f0,f29
	ctx.f13.f64 = double(float(f0.f64 - f29.f64));
	// lfs f12,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f28
	ctx.f12.f64 = double(float(ctx.f12.f64 - f28.f64));
	// fmadds f0,f30,f30,f11
	f0.f64 = double(float(f30.f64 * f30.f64 + ctx.f11.f64));
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// beq cr6,0x820bd5b0
	if (cr6.getEQ()) goto loc_820BD5B0;
	// fmuls f13,f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// fmadds f13,f12,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
loc_820BD5B0:
	// fsqrts f0,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(sqrt(f0.f64)));
	// lfs f13,4896(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4896);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f13,f0,f25,f13
	ctx.f13.f64 = double(float(f0.f64 * f25.f64 + ctx.f13.f64));
	// stfs f13,4896(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 4896, temp.u32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f13,4900(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4900);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f26,f13
	f0.f64 = double(float(f0.f64 * f26.f64 + ctx.f13.f64));
	// stfs f0,4900(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 4900, temp.u32);
loc_820BD5D0:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f0,12892(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12892);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f12,620(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 620);
	ctx.f12.f64 = double(temp.f32);
	// lfs f30,600(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 600);
	f30.f64 = double(temp.f32);
	// lfs f13,15472(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15472);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// lfs f12,424(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 424);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f31,f12,f0,f13
	f31.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// bl 0x820af2e0
	sub_820AF2E0(ctx, base);
	// fcmpu cr6,f31,f19
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f19.f64);
	// ble cr6,0x820bd60c
	if (!cr6.getGT()) goto loc_820BD60C;
	// fmr f31,f19
	f31.f64 = f19.f64;
	// b 0x820bd618
	goto loc_820BD618;
loc_820BD60C:
	// fcmpu cr6,f31,f15
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f15.f64);
	// bge cr6,0x820bd618
	if (!cr6.getLT()) goto loc_820BD618;
	// fmr f31,f15
	f31.f64 = f15.f64;
loc_820BD618:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lwz r11,1552(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1552);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820bd634
	if (!cr6.getEQ()) goto loc_820BD634;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15468);
	f0.f64 = double(temp.f32);
	// fmuls f1,f1,f0
	ctx.f1.f64 = double(float(ctx.f1.f64 * f0.f64));
loc_820BD634:
	// fmr f4,f30
	ctx.fpscr.disableFlushMode();
	ctx.f4.f64 = f30.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// fmr f2,f14
	ctx.f2.f64 = f14.f64;
	// bl 0x820a76e8
	sub_820A76E8(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f13,616(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 616);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,13980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x820a1278
	sub_820A1278(ctx, base);
	// lwz r11,-1828(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -1828);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bda9c
	if (cr6.getEQ()) goto loc_820BDA9C;
	// lwz r10,-1836(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + -1836);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820bda9c
	if (!cr6.getEQ()) goto loc_820BDA9C;
	// lwz r10,-1888(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + -1888);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x820bda9c
	if (!cr6.getEQ()) goto loc_820BDA9C;
	// lwz r31,8(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// lwz r30,4(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpwi cr6,r3,32
	cr6.compare<int32_t>(ctx.r3.s32, 32, xer);
	// bne cr6,0x820bd6bc
	if (!cr6.getEQ()) goto loc_820BD6BC;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0de8
	sub_820A0DE8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x820bd6c0
	if (!cr6.getEQ()) goto loc_820BD6C0;
loc_820BD6BC:
	// mr r11,r16
	r11.u64 = r16.u64;
loc_820BD6C0:
	// stw r11,196(r31)
	PPC_STORE_U32(r31.u32 + 196, r11.u32);
	// lfs f0,-1800(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + -1800);
	f0.f64 = double(temp.f32);
	// stfs f0,200(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 200, temp.u32);
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// lfs f0,-1792(r23)
	temp.u32 = PPC_LOAD_U32(r23.u32 + -1792);
	f0.f64 = double(temp.f32);
	// stfs f0,204(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 204, temp.u32);
	// lfs f0,-1808(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + -1808);
	f0.f64 = double(temp.f32);
	// stfs f0,220(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 220, temp.u32);
	// lfs f0,-1808(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + -1808);
	f0.f64 = double(temp.f32);
	// fsubs f1,f16,f0
	ctx.f1.f64 = double(float(f16.f64 - f0.f64));
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// lfs f1,20(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bcc8
	sub_8210BCC8(ctx, base);
	// lfs f0,0(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + 0);
	f0.f64 = double(temp.f32);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// lfs f0,4(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 4);
	f0.f64 = double(temp.f32);
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,92(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// lfs f0,8(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 8);
	f0.f64 = double(temp.f32);
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x8210b5c8
	sub_8210B5C8(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f13,88(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// lfs f0,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	f0.f64 = double(temp.f32);
	// lfs f13,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,1456(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1456);
	// stw r11,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, r11.u32);
	// lfs f4,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f4.f64 = double(temp.f32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f3,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f3.f64 = double(temp.f32);
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// addi r3,r10,24
	ctx.r3.s64 = ctx.r10.s64 + 24;
	// lfs f2,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210f7c8
	sub_8210F7C8(ctx, base);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lfs f2,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f1.f64 = double(temp.f32);
	// lwz r3,24(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// bl 0x821108b0
	sub_821108B0(ctx, base);
	// stfs f1,212(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r31.u32 + 212, temp.u32);
	// lwz r10,-6384(r19)
	ctx.r10.u64 = PPC_LOAD_U32(r19.u32 + -6384);
	// mr r11,r16
	r11.u64 = r16.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820bd7c8
	if (!cr6.getGT()) goto loc_820BD7C8;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,15412(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15412);
	f0.f64 = double(temp.f32);
loc_820BD7AC:
	// lfs f13,208(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 208);
	ctx.f13.f64 = double(temp.f32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// fmadds f13,f13,f0,f1
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f1.f64));
	// stfs f13,208(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 208, temp.u32);
	// lwz r10,-6384(r19)
	ctx.r10.u64 = PPC_LOAD_U32(r19.u32 + -6384);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x820bd7ac
	if (cr6.getLT()) goto loc_820BD7AC;
loc_820BD7C8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,208(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 208);
	ctx.f13.f64 = double(temp.f32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lfs f0,15408(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15408);
	f0.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x820d3970
	sub_820D3970(ctx, base);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lfs f13,120(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f13.f64 = double(temp.f32);
	// addi r4,r31,24
	ctx.r4.s64 = r31.s64 + 24;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// lfs f0,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	f0.f64 = double(temp.f32);
	// fnmsubs f0,f1,f0,f31
	f0.f64 = double(float(-(ctx.f1.f64 * f0.f64 - f31.f64)));
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,92(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// bl 0x8210b308
	sub_8210B308(ctx, base);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lfs f0,88(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	f0.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stfs f0,12(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lfs f0,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	f0.f64 = double(temp.f32);
	// stfs f0,88(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 88, temp.u32);
	// lfs f0,92(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	f0.f64 = double(temp.f32);
	// stfs f0,16(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lfs f0,92(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	f0.f64 = double(temp.f32);
	// stfs f0,92(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 92, temp.u32);
	// lfs f0,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 20, temp.u32);
	// lfs f0,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f0.f64 = double(temp.f32);
	// stfs f0,96(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 96, temp.u32);
	// bl 0x820d0458
	sub_820D0458(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d4d08
	sub_820D4D08(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// lfs f1,-1808(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + -1808);
	ctx.f1.f64 = double(temp.f32);
	// addi r4,r11,1460
	ctx.r4.s64 = r11.s64 + 1460;
	// bl 0x820b0ae0
	sub_820B0AE0(ctx, base);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820cdf78
	sub_820CDF78(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x820cef38
	sub_820CEF38(ctx, base);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r23,-2304(r11)
	r23.u64 = PPC_LOAD_U32(r11.u32 + -2304);
	// lhz r11,0(r23)
	r11.u64 = PPC_LOAD_U16(r23.u32 + 0);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820bda9c
	if (cr6.getLT()) goto loc_820BDA9C;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r25,r10,-784
	r25.s64 = ctx.r10.s64 + -784;
	// lis r10,21845
	ctx.r10.s64 = 1431633920;
	// lis r24,-32014
	r24.s64 = -2098069504;
	// lfs f30,14056(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 14056);
	f30.f64 = double(temp.f32);
	// lis r26,-32014
	r26.s64 = -2098069504;
	// lfs f31,3908(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 3908);
	f31.f64 = double(temp.f32);
	// ori r27,r10,21846
	r27.u64 = ctx.r10.u64 | 21846;
loc_820BD8B8:
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r28,r11,r25
	r28.u64 = r11.u64 + r25.u64;
	// cmplw cr6,r28,r9
	cr6.compare<uint32_t>(r28.u32, ctx.r9.u32, xer);
	// beq cr6,0x820bda88
	if (cr6.getEQ()) goto loc_820BDA88;
	// lbz r11,0(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 0);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x820bda24
	if (!cr6.getEQ()) goto loc_820BDA24;
	// addi r6,r1,140
	ctx.r6.s64 = ctx.r1.s64 + 140;
	// lwz r30,8(r28)
	r30.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// addi r5,r1,236
	ctx.r5.s64 = ctx.r1.s64 + 236;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820ce148
	sub_820CE148(ctx, base);
	// addi r29,r28,12
	r29.s64 = r28.s64 + 12;
	// li r5,4
	ctx.r5.s64 = 4;
	// addi r4,r1,240
	ctx.r4.s64 = ctx.r1.s64 + 240;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820ce060
	sub_820CE060(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bd9d8
	if (cr6.getEQ()) goto loc_820BD9D8;
	// lbz r11,7(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 7);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bne cr6,0x820bd9f4
	if (!cr6.getEQ()) goto loc_820BD9F4;
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// rlwinm r11,r11,0,7,7
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bd9f4
	if (!cr6.getEQ()) goto loc_820BD9F4;
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bd9f4
	if (!cr6.getEQ()) goto loc_820BD9F4;
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// oris r11,r11,256
	r11.u64 = r11.u64 | 16777216;
	// stw r11,20(r30)
	PPC_STORE_U32(r30.u32 + 20, r11.u32);
	// lwz r11,-6372(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -6372);
	// mulhw r10,r11,r27
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r27.s32)) >> 32;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bge cr6,0x820bd994
	if (!cr6.getLT()) goto loc_820BD994;
	// li r8,7419
	ctx.r8.s64 = 7419;
	// lwz r6,19944(r21)
	ctx.r6.u64 = PPC_LOAD_U32(r21.u32 + 19944);
	// mr r7,r22
	ctx.r7.u64 = r22.u64;
	// lwz r3,19936(r20)
	ctx.r3.u64 = PPC_LOAD_U32(r20.u32 + 19936);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,183
	ctx.r4.s64 = 183;
	// bl 0x82144920
	sub_82144920(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x820dd8d8
	sub_820DD8D8(ctx, base);
	// lwz r11,-6372(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -6372);
loc_820BD994:
	// mulhw r10,r11,r27
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r27.s32)) >> 32;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// ble 0x820bd9f4
	if (!cr0.getGT()) goto loc_820BD9F4;
	// li r8,7424
	ctx.r8.s64 = 7424;
	// lwz r6,19944(r21)
	ctx.r6.u64 = PPC_LOAD_U32(r21.u32 + 19944);
	// mr r7,r22
	ctx.r7.u64 = r22.u64;
	// lwz r3,19936(r20)
	ctx.r3.u64 = PPC_LOAD_U32(r20.u32 + 19936);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,213
	ctx.r4.s64 = 213;
	// bl 0x82144920
	sub_82144920(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x820dd8d8
	sub_820DD8D8(ctx, base);
	// b 0x820bd9f4
	goto loc_820BD9F4;
loc_820BD9D8:
	// li r6,4
	ctx.r6.s64 = 4;
	// lfs f1,120(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f1.f64 = double(temp.f32);
	// addi r5,r1,240
	ctx.r5.s64 = ctx.r1.s64 + 240;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820d7d78
	sub_820D7D78(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bda88
	if (cr6.getEQ()) goto loc_820BDA88;
loc_820BD9F4:
	// lfs f0,88(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 88);
	f0.f64 = double(temp.f32);
	// li r6,1
	ctx.r6.s64 = 1;
	// stfs f0,128(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lfs f0,16(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 16);
	f0.f64 = double(temp.f32);
	// lwz r3,8(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// stfs f0,132(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// lfs f0,96(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 96);
	f0.f64 = double(temp.f32);
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// bl 0x82129610
	sub_82129610(ctx, base);
	// b 0x820bda88
	goto loc_820BDA88;
loc_820BDA24:
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x820bda88
	if (!cr6.getEQ()) goto loc_820BDA88;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820cdfc8
	sub_820CDFC8(ctx, base);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x820bda88
	if (!cr6.getGT()) goto loc_820BDA88;
	// li r6,4
	ctx.r6.s64 = 4;
	// lwz r3,124(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// addi r5,r1,240
	ctx.r5.s64 = ctx.r1.s64 + 240;
	// bl 0x820d7c50
	sub_820D7C50(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bda88
	if (cr6.getEQ()) goto loc_820BDA88;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// li r6,32
	ctx.r6.s64 = 32;
	// addi r5,r11,88
	ctx.r5.s64 = r11.s64 + 88;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820e7eb0
	sub_820E7EB0(ctx, base);
	// li r11,90
	r11.s64 = 90;
	// stw r11,-1764(r24)
	PPC_STORE_U32(r24.u32 + -1764, r11.u32);
loc_820BDA88:
	// addi r23,r23,2
	r23.s64 = r23.s64 + 2;
	// lhz r11,0(r23)
	r11.u64 = PPC_LOAD_U16(r23.u32 + 0);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x820bd8b8
	if (!cr6.getLT()) goto loc_820BD8B8;
loc_820BDA9C:
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// lfs f1,116(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b94c8
	sub_820B94C8(ctx, base);
	// bl 0x820b2608
	sub_820B2608(ctx, base);
	// bl 0x820b3f80
	sub_820B3F80(ctx, base);
	// bl 0x820b5838
	sub_820B5838(ctx, base);
	// addi r1,r1,656
	ctx.r1.s64 = ctx.r1.s64 + 656;
	// addi r12,r1,-144
	r12.s64 = ctx.r1.s64 + -144;
	// bl 0x823ed55c
	// b 0x823ed154
	return;
}

__attribute__((alias("__imp__sub_820BDAC8"))) PPC_WEAK_FUNC(sub_820BDAC8);
PPC_FUNC_IMPL(__imp__sub_820BDAC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f29.u64);
	// stfd f30,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, f30.u64);
	// stfd f31,-40(r1)
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// lfs f31,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f31,120(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// fmr f30,f31
	f30.f64 = f31.f64;
	// stfs f31,124(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// fmr f29,f31
	f29.f64 = f31.f64;
	// stfs f31,128(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stfs f31,104(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// lfs f0,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// stfs f31,108(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// stfs f31,88(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stfs f0,92(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stfs f31,96(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stfs f31,140(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// bl 0x820bbc20
	sub_820BBC20(ctx, base);
	// bl 0x820b29e0
	sub_820B29E0(ctx, base);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// fmr f4,f31
	ctx.fpscr.disableFlushMode();
	ctx.f4.f64 = f31.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x820b99e8
	sub_820B99E8(ctx, base);
	// bl 0x820b2878
	sub_820B2878(ctx, base);
	// fmr f3,f31
	ctx.fpscr.disableFlushMode();
	ctx.f3.f64 = f31.f64;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x820b23b0
	sub_820B23B0(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// addi r11,r11,-3020
	r11.s64 = r11.s64 + -3020;
	// lfs f0,-6368(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -6368);
	f0.f64 = double(temp.f32);
	// lfs f13,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f13,f31
	cr6.compare(ctx.f13.f64, f31.f64);
	// bne cr6,0x820bdb88
	if (!cr6.getEQ()) goto loc_820BDB88;
	// fcmpu cr6,f12,f31
	cr6.compare(ctx.f12.f64, f31.f64);
	// beq cr6,0x820bdb90
	if (cr6.getEQ()) goto loc_820BDB90;
loc_820BDB88:
	// fmuls f30,f0,f13
	ctx.fpscr.disableFlushMode();
	f30.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fmuls f29,f0,f12
	f29.f64 = double(float(f0.f64 * ctx.f12.f64));
loc_820BDB90:
	// lis r31,-32014
	r31.s64 = -2098069504;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f11,1572(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1572);
	ctx.f11.f64 = double(temp.f32);
	// lfs f10,1480(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1480);
	ctx.f10.f64 = double(temp.f32);
	// lfs f13,1580(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1580);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f9,f10,f11
	ctx.f9.f64 = double(float(ctx.f10.f64 * ctx.f11.f64));
	// fmuls f10,f10,f13
	ctx.f10.f64 = double(float(ctx.f10.f64 * ctx.f13.f64));
	// lfs f12,1472(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1472);
	ctx.f12.f64 = double(temp.f32);
	// fmsubs f13,f12,f13,f9
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64 - ctx.f9.f64));
	// fmadds f12,f11,f12,f10
	ctx.f12.f64 = double(float(ctx.f11.f64 * ctx.f12.f64 + ctx.f10.f64));
	// fmadds f13,f13,f0,f30
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 + f30.f64));
	// stfs f13,136(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// fmadds f0,f12,f0,f29
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + f29.f64));
	// stfs f0,144(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// bl 0x820b82a0
	sub_820B82A0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x820b94c8
	sub_820B94C8(ctx, base);
	// bl 0x820b2608
	sub_820B2608(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1760(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1760);
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// beq cr6,0x820bdc5c
	if (cr6.getEQ()) goto loc_820BDC5C;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x820bdc5c
	if (cr6.getEQ()) goto loc_820BDC5C;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// beq cr6,0x820bdc5c
	if (cr6.getEQ()) goto loc_820BDC5C;
	// addi r9,r1,136
	ctx.r9.s64 = ctx.r1.s64 + 136;
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// addi r7,r1,88
	ctx.r7.s64 = ctx.r1.s64 + 88;
	// addi r6,r1,104
	ctx.r6.s64 = ctx.r1.s64 + 104;
	// addi r5,r1,120
	ctx.r5.s64 = ctx.r1.s64 + 120;
	// clrlwi r4,r29,16
	ctx.r4.u64 = r29.u32 & 0xFFFF;
	// clrlwi r3,r30,16
	ctx.r3.u64 = r30.u32 & 0xFFFF;
	// bl 0x820b6a28
	sub_820B6A28(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,1
	ctx.r10.s64 = 1;
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r7,r1,136
	ctx.r7.s64 = ctx.r1.s64 + 136;
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r10,128(r11)
	PPC_STORE_U32(r11.u32 + 128, ctx.r10.u32);
	// bl 0x820b00a8
	sub_820B00A8(ctx, base);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// lfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f30,-48(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_820BDC5C:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,128(r11)
	PPC_STORE_U32(r11.u32 + 128, ctx.r10.u32);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// lfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f30,-48(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820BDC80"))) PPC_WEAK_FUNC(sub_820BDC80);
PPC_FUNC_IMPL(__imp__sub_820BDC80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed53c
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// fmr f27,f2
	f27.f64 = ctx.f2.f64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// fmr f26,f3
	f26.f64 = ctx.f3.f64;
	// fmr f25,f4
	f25.f64 = ctx.f4.f64;
	// lfs f29,13960(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	f29.f64 = double(temp.f32);
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// bl 0x820c9c30
	sub_820C9C30(ctx, base);
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f29.f64;
	// bl 0x8210e310
	sub_8210E310(ctx, base);
	// bl 0x820c32b8
	sub_820C32B8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,12888(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12888);
	f0.f64 = double(temp.f32);
	// fmuls f31,f1,f0
	f31.f64 = double(float(ctx.f1.f64 * f0.f64));
	// bl 0x820b2ce8
	sub_820B2CE8(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// bl 0x820b2de8
	sub_820B2DE8(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fdivs f0,f30,f0
	f0.f64 = double(float(f30.f64 / f0.f64));
	// fmuls f31,f0,f31
	f31.f64 = double(float(f0.f64 * f31.f64));
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x820c9c40
	sub_820C9C40(ctx, base);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8210e350
	sub_8210E350(ctx, base);
	// bl 0x820b2de8
	sub_820B2DE8(ctx, base);
	// extsh r31,r3
	r31.s64 = ctx.r3.s16;
	// bl 0x820b2ce8
	sub_820B2CE8(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// bl 0x820c9c00
	sub_820C9C00(ctx, base);
	// bl 0x820b2ee8
	sub_820B2EE8(ctx, base);
	// extsh r31,r3
	r31.s64 = ctx.r3.s16;
	// bl 0x820b2d60
	sub_820B2D60(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// bl 0x820c9c18
	sub_820C9C18(ctx, base);
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,54
	cr6.compare<int32_t>(ctx.r3.s32, 54, xer);
	// li r31,330
	r31.s64 = 330;
	// beq cr6,0x820bdd5c
	if (cr6.getEQ()) goto loc_820BDD5C;
	// li r31,240
	r31.s64 = 240;
loc_820BDD5C:
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,54
	cr6.compare<int32_t>(ctx.r3.s32, 54, xer);
	// li r3,440
	ctx.r3.s64 = 440;
	// beq cr6,0x820bdd70
	if (cr6.getEQ()) goto loc_820BDD70;
	// li r3,320
	ctx.r3.s64 = 320;
loc_820BDD70:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x8210e170
	sub_8210E170(ctx, base);
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,54
	cr6.compare<int32_t>(ctx.r3.s32, 54, xer);
	// li r31,330
	r31.s64 = 330;
	// beq cr6,0x820bdd8c
	if (cr6.getEQ()) goto loc_820BDD8C;
	// li r31,240
	r31.s64 = 240;
loc_820BDD8C:
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,54
	cr6.compare<int32_t>(ctx.r3.s32, 54, xer);
	// li r3,440
	ctx.r3.s64 = 440;
	// beq cr6,0x820bdda0
	if (cr6.getEQ()) goto loc_820BDDA0;
	// li r3,320
	ctx.r3.s64 = 320;
loc_820BDDA0:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x8210e158
	sub_8210E158(ctx, base);
	// bl 0x820b2de8
	sub_820B2DE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820b2ce8
	sub_820B2CE8(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x8210e1a8
	sub_8210E1A8(ctx, base);
	// bl 0x820b2ee8
	sub_820B2EE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820b2d60
	sub_820B2D60(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x8210e228
	sub_8210E228(ctx, base);
	// bl 0x820b2130
	sub_820B2130(ctx, base);
	// bl 0x820b2308
	sub_820B2308(ctx, base);
	// bl 0x820b4270
	sub_820B4270(ctx, base);
	// bl 0x820b46a8
	sub_820B46A8(ctx, base);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2cc0
	sub_820C2CC0(ctx, base);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r3,564(r11)
	PPC_STORE_U32(r11.u32 + 564, ctx.r3.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2cc0
	sub_820C2CC0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r3,580(r11)
	PPC_STORE_U32(r11.u32 + 580, ctx.r3.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2d58
	sub_820C2D58(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r3,544(r11)
	PPC_STORE_U32(r11.u32 + 544, ctx.r3.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2f20
	sub_820C2F20(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a5560
	sub_820A5560(ctx, base);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820bde48
	if (!cr6.getEQ()) goto loc_820BDE48;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2e88
	sub_820C2E88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bde68
	if (!cr6.getEQ()) goto loc_820BDE68;
loc_820BDE48:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x820bde70
	if (!cr6.getGT()) goto loc_820BDE70;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-908(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -908);
	// lbz r11,107(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 107);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bde70
	if (cr6.getEQ()) goto loc_820BDE70;
loc_820BDE68:
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x820bde74
	goto loc_820BDE74;
loc_820BDE70:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_820BDE74:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a64c0
	sub_820A64C0(ctx, base);
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lwz r11,-1760(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1760);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820bdea4
	if (cr6.getEQ()) goto loc_820BDEA4;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x820bdfd4
	if (!cr6.getEQ()) goto loc_820BDFD4;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lwz r11,16572(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16572);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820bdfdc
	if (cr6.getEQ()) goto loc_820BDFDC;
loc_820BDEA4:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bdec8
	if (!cr6.getEQ()) goto loc_820BDEC8;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-6384(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r9,-3044(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + -3044);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r10,-3044(r11)
	PPC_STORE_U32(r11.u32 + -3044, ctx.r10.u32);
loc_820BDEC8:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// fmr f4,f25
	ctx.fpscr.disableFlushMode();
	ctx.f4.f64 = f25.f64;
	// fmr f3,f26
	ctx.f3.f64 = f26.f64;
	// fmr f2,f27
	ctx.f2.f64 = f27.f64;
	// fmr f1,f28
	ctx.f1.f64 = f28.f64;
	// lwz r6,1240(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 1240);
	// bl 0x820bc030
	sub_820BC030(ctx, base);
loc_820BDEE8:
	// lis r11,-32055
	r11.s64 = -2100756480;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lfs f0,-21840(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -21840);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f13,-1884(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -1884);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// stfs f0,-1884(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1884, temp.u32);
	// lwz r11,-1748(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1748);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// beq cr6,0x820be090
	if (cr6.getEQ()) goto loc_820BE090;
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lfs f13,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// bne cr6,0x820be068
	if (!cr6.getEQ()) goto loc_820BE068;
	// lwz r10,1240(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1240);
	// andc r10,r27,r10
	ctx.r10.u64 = r27.u64 & ~ctx.r10.u64;
	// andi. r10,r10,61488
	ctx.r10.u64 = ctx.r10.u64 & 61488;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820be068
	if (cr6.getEQ()) goto loc_820BE068;
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r10,-1748(r29)
	PPC_STORE_U32(r29.u32 + -1748, ctx.r10.u32);
	// lfs f0,1292(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1292);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x820bdff8
	if (!cr6.getLT()) goto loc_820BDFF8;
	// lfs f0,1284(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bne cr6,0x820be074
	if (!cr6.getEQ()) goto loc_820BE074;
	// stw r30,1272(r11)
	PPC_STORE_U32(r11.u32 + 1272, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1276(r11)
	PPC_STORE_U32(r11.u32 + 1276, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1280(r11)
	PPC_STORE_U32(r11.u32 + 1280, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r10,r11,1272
	ctx.r10.s64 = r11.s64 + 1272;
	// stfs f31,1284(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1284, temp.u32);
	// lwz r9,1272(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lwz r8,1276(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// lwz r7,1280(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stfs f31,1288(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1288, temp.u32);
	// stfs f29,1292(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 1292, temp.u32);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r10,1296(r11)
	PPC_STORE_U32(r11.u32 + 1296, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,1300(r11)
	PPC_STORE_U32(r11.u32 + 1300, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// stw r10,1304(r11)
	PPC_STORE_U32(r11.u32 + 1304, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,1308(r11)
	PPC_STORE_U32(r11.u32 + 1308, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1280(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stw r10,1312(r11)
	PPC_STORE_U32(r11.u32 + 1312, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r7,1316(r11)
	PPC_STORE_U32(r11.u32 + 1316, ctx.r7.u32);
	// b 0x820be058
	goto loc_820BE058;
loc_820BDFD4:
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// beq cr6,0x820bdea4
	if (cr6.getEQ()) goto loc_820BDEA4;
loc_820BDFDC:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// fmr f2,f27
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f27.f64;
	// fmr f1,f28
	ctx.f1.f64 = f28.f64;
	// lwz r6,1240(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 1240);
	// bl 0x820bdac8
	sub_820BDAC8(ctx, base);
	// b 0x820bdee8
	goto loc_820BDEE8;
loc_820BDFF8:
	// lfs f0,1324(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1324);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bne cr6,0x820be074
	if (!cr6.getEQ()) goto loc_820BE074;
	// lwz r10,1272(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lfs f0,1288(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1288);
	f0.f64 = double(temp.f32);
	// lwz r9,1276(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// lwz r8,1280(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stfs f31,1288(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1288, temp.u32);
	// stfs f0,1292(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1292, temp.u32);
	// lwz r7,1272(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r7,1296(r11)
	PPC_STORE_U32(r11.u32 + 1296, ctx.r7.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,1300(r11)
	PPC_STORE_U32(r11.u32 + 1300, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// stw r10,1304(r11)
	PPC_STORE_U32(r11.u32 + 1304, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,1308(r11)
	PPC_STORE_U32(r11.u32 + 1308, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1280(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stw r10,1312(r11)
	PPC_STORE_U32(r11.u32 + 1312, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,1316(r11)
	PPC_STORE_U32(r11.u32 + 1316, ctx.r8.u32);
loc_820BE058:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1284(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// stfs f0,1320(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1320, temp.u32);
	// stfs f13,1324(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 1324, temp.u32);
loc_820BE068:
	// lwz r10,-1748(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + -1748);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x820be094
	if (!cr6.getEQ()) goto loc_820BE094;
loc_820BE074:
	// lfs f0,1292(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1292);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x820be094
	if (!cr6.getLT()) goto loc_820BE094;
	// lfs f0,1284(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bne cr6,0x820be094
	if (!cr6.getEQ()) goto loc_820BE094;
	// bl 0x820ae4d0
	sub_820AE4D0(ctx, base);
loc_820BE090:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BE094:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r10,-1756(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1756);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820be0ac
	if (cr6.getEQ()) goto loc_820BE0AC;
	// bl 0x820b68f0
	sub_820B68F0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BE0AC:
	// lwz r10,480(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820be110
	if (cr6.getEQ()) goto loc_820BE110;
	// lwz r10,1356(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1356);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820be0e0
	if (!cr6.getEQ()) goto loc_820BE0E0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BE0E0:
	// lwz r10,1356(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1356);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820be110
	if (cr6.getEQ()) goto loc_820BE110;
	// lwz r10,1360(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1360);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820be110
	if (cr6.getEQ()) goto loc_820BE110;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r10,-1716(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1716);
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// blt cr6,0x820be110
	if (cr6.getLT()) goto loc_820BE110;
	// bl 0x820ae4c0
	sub_820AE4C0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BE110:
	// lwz r10,-1760(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -1760);
	// cmpwi cr6,r10,10
	cr6.compare<int32_t>(ctx.r10.s32, 10, xer);
	// bne cr6,0x820be130
	if (!cr6.getEQ()) goto loc_820BE130;
	// lfs f0,1292(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1292);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x820be130
	if (!cr6.getLT()) goto loc_820BE130;
	// bl 0x820ae4c0
	sub_820AE4C0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BE130:
	// stw r27,1240(r11)
	PPC_STORE_U32(r11.u32 + 1240, r27.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed588
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820BE148"))) PPC_WEAK_FUNC(sub_820BE148);
PPC_FUNC_IMPL(__imp__sub_820BE148) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,128(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 128);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820be188
	if (!cr6.getEQ()) goto loc_820BE188;
	// lwz r10,180(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 180);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820be188
	if (cr6.getEQ()) goto loc_820BE188;
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// b 0x820be18c
	goto loc_820BE18C;
loc_820BE188:
	// lwz r11,1536(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1536);
loc_820BE18C:
	// lbz r3,3(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// bl 0x820b30e8
	sub_820B30E8(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f13,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// lfs f12,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// lfs f9,8(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	ctx.f9.f64 = double(temp.f32);
	// lfs f8,4(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 4);
	ctx.f8.f64 = double(temp.f32);
	// stw r11,352(r11)
	PPC_STORE_U32(r11.u32 + 352, r11.u32);
	// lfs f7,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f7.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f6,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f6.f64 = double(temp.f32);
	// lfs f5,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f5.f64 = double(temp.f32);
	// addi r10,r11,64
	ctx.r10.s64 = r11.s64 + 64;
	// lfs f4,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f4.f64 = double(temp.f32);
	// stw r10,356(r11)
	PPC_STORE_U32(r11.u32 + 356, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r10,r11,224
	ctx.r10.s64 = r11.s64 + 224;
	// stw r10,360(r11)
	PPC_STORE_U32(r11.u32 + 360, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r10,r11,288
	ctx.r10.s64 = r11.s64 + 288;
	// stw r10,364(r11)
	PPC_STORE_U32(r11.u32 + 364, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f11,184(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 184);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f11,f0,f11
	ctx.f11.f64 = double(float(f0.f64 - ctx.f11.f64));
	// lfs f0,192(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 192);
	f0.f64 = double(temp.f32);
	// lfs f10,188(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 188);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 - f0.f64));
	// fsubs f13,f13,f10
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f10.f64));
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f0,16584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16584);
	f0.f64 = double(temp.f32);
	// fmuls f1,f11,f0
	ctx.f1.f64 = double(float(ctx.f11.f64 * f0.f64));
	// fmuls f3,f12,f0
	ctx.f3.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f2,f13,f0
	ctx.f2.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x8210be10
	sub_8210BE10(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f9,8(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	ctx.f9.f64 = double(temp.f32);
	// lfs f8,4(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 4);
	ctx.f8.f64 = double(temp.f32);
	// lfs f7,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f7.f64 = double(temp.f32);
	// lfs f6,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f6.f64 = double(temp.f32);
	// lfs f5,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f5.f64 = double(temp.f32);
	// lwz r3,360(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 360);
	// lfs f4,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210be10
	sub_8210BE10(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f9,8(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	ctx.f9.f64 = double(temp.f32);
	// lfs f8,4(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 4);
	ctx.f8.f64 = double(temp.f32);
	// lfs f7,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f7.f64 = double(temp.f32);
	// lfs f6,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f6.f64 = double(temp.f32);
	// lfs f5,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f5.f64 = double(temp.f32);
	// lwz r3,364(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 364);
	// lfs f4,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bf50
	sub_8210BF50(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r29,r1,96
	r29.s64 = ctx.r1.s64 + 96;
	// addi r28,r1,160
	r28.s64 = ctx.r1.s64 + 160;
	// addi r30,r11,8448
	r30.s64 = r11.s64 + 8448;
	// bl 0x8210d840
	sub_8210D840(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x8210b350
	sub_8210B350(ctx, base);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// li r9,4
	ctx.r9.s64 = 4;
	// lfs f12,15552(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 15552);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,15548(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15548);
	ctx.f13.f64 = double(temp.f32);
loc_820BE2B4:
	// li r10,4
	ctx.r10.s64 = 4;
loc_820BE2B8:
	// lfs f0,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820be2cc
	if (!cr6.getGT()) goto loc_820BE2CC;
	// stfs f13,0(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// b 0x820be2d8
	goto loc_820BE2D8;
loc_820BE2CC:
	// fcmpu cr6,f0,f12
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f12.f64);
	// bge cr6,0x820be2d8
	if (!cr6.getLT()) goto loc_820BE2D8;
	// stfs f12,0(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
loc_820BE2D8:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820be2b8
	if (!cr6.getEQ()) goto loc_820BE2B8;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820be2b4
	if (!cr6.getEQ()) goto loc_820BE2B4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8210d7e0
	sub_8210D7E0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// lwz r4,352(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 352);
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r4,356(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 356);
	// lwz r3,352(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 352);
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r3,352(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 352);
	// bl 0x8210d7a0
	sub_8210D7A0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r3,356(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 356);
	// bl 0x8210d780
	sub_8210D780(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r3,360(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 360);
	// bl 0x8210d800
	sub_8210D800(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r3,364(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 364);
	// bl 0x8210d850
	sub_8210D850(ctx, base);
	// bl 0x8210d8f0
	sub_8210D8F0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r30,r11,196
	r30.s64 = r11.s64 + 196;
	// lfs f0,184(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 184);
	f0.f64 = double(temp.f32);
	// stfs f0,196(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 196, temp.u32);
	// lfs f0,188(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 188);
	f0.f64 = double(temp.f32);
	// stfs f0,200(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 200, temp.u32);
	// lfs f0,192(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 192);
	f0.f64 = double(temp.f32);
	// stfs f0,204(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 204, temp.u32);
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8210b5c8
	sub_8210B5C8(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820BE390"))) PPC_WEAK_FUNC(sub_820BE390);
PPC_FUNC_IMPL(__imp__sub_820BE390) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f30.u64);
	// stfd f31,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lwz r31,-1364(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// bne cr6,0x820be408
	if (!cr6.getEQ()) goto loc_820BE408;
	// lfs f0,132(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 132);
	f0.f64 = double(temp.f32);
	// lfs f13,136(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 136);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,140(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 140);
	ctx.f12.f64 = double(temp.f32);
	// lfs f8,144(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 144);
	ctx.f8.f64 = double(temp.f32);
	// lfs f7,148(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 148);
	ctx.f7.f64 = double(temp.f32);
	// lfs f6,152(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 152);
	ctx.f6.f64 = double(temp.f32);
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// fsubs f0,f8,f0
	f0.f64 = double(float(ctx.f8.f64 - f0.f64));
	// stfs f13,116(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// fsubs f13,f7,f13
	ctx.f13.f64 = double(float(ctx.f7.f64 - ctx.f13.f64));
	// stfs f12,120(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// fsubs f12,f6,f12
	ctx.f12.f64 = double(float(ctx.f6.f64 - ctx.f12.f64));
	// lfs f11,156(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 156);
	ctx.f11.f64 = double(temp.f32);
	// lfs f10,160(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 160);
	ctx.f10.f64 = double(temp.f32);
	// lfs f9,164(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 164);
	ctx.f9.f64 = double(temp.f32);
	// b 0x820be440
	goto loc_820BE440;
loc_820BE408:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8210df50
	sub_8210DF50(ctx, base);
	// lfs f0,1500(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 1500);
	f0.f64 = double(temp.f32);
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// lfs f0,1504(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 1504);
	f0.f64 = double(temp.f32);
	// stfs f0,116(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// lfs f0,1508(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 1508);
	f0.f64 = double(temp.f32);
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// lfs f0,1512(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 1512);
	f0.f64 = double(temp.f32);
	// lfs f13,1516(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 1516);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,1520(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 1520);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,1524(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 1524);
	ctx.f11.f64 = double(temp.f32);
	// lfs f10,1528(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 1528);
	ctx.f10.f64 = double(temp.f32);
	// lfs f9,1532(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 1532);
	ctx.f9.f64 = double(temp.f32);
loc_820BE440:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f0,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// stfs f9,88(r1)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stfs f10,84(r1)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// stfs f11,80(r1)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// stfs f12,104(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// lfs f0,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// stfs f13,100(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// bne cr6,0x820be47c
	if (!cr6.getEQ()) goto loc_820BE47C;
	// fcmpu cr6,f13,f31
	cr6.compare(ctx.f13.f64, f31.f64);
	// bne cr6,0x820be47c
	if (!cr6.getEQ()) goto loc_820BE47C;
	// fcmpu cr6,f12,f31
	cr6.compare(ctx.f12.f64, f31.f64);
	// bne cr6,0x820be47c
	if (!cr6.getEQ()) goto loc_820BE47C;
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
loc_820BE47C:
	// fcmpu cr6,f11,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f11.f64, f31.f64);
	// bne cr6,0x820be498
	if (!cr6.getEQ()) goto loc_820BE498;
	// fcmpu cr6,f10,f31
	cr6.compare(ctx.f10.f64, f31.f64);
	// bne cr6,0x820be498
	if (!cr6.getEQ()) goto loc_820BE498;
	// fcmpu cr6,f9,f31
	cr6.compare(ctx.f9.f64, f31.f64);
	// bne cr6,0x820be498
	if (!cr6.getEQ()) goto loc_820BE498;
	// stfs f0,84(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
loc_820BE498:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x820be148
	sub_820BE148(ctx, base);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x820a4970
	sub_820A4970(ctx, base);
	// lfs f13,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f11,f13,f13
	ctx.f11.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lfs f0,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// lfs f1,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f1.f64 = double(temp.f32);
	// lfs f12,612(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 612);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmadds f0,f0,f0,f11
	f0.f64 = double(float(f0.f64 * f0.f64 + ctx.f11.f64));
	// lfs f13,13980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f31,f12,f13
	f31.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fsqrts f2,f0
	ctx.f2.f64 = double(float(sqrt(f0.f64)));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fadds f0,f1,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64 + f31.f64));
	// lfs f31,14032(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14032);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f30.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// blt cr6,0x820be504
	if (cr6.getLT()) goto loc_820BE504;
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
loc_820BE504:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stfs f0,8328(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8328, temp.u32);
	// lfs f0,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// fneg f2,f0
	ctx.f2.u64 = f0.u64 ^ 0x8000000000000000;
	// lfs f0,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f0.f64 = double(temp.f32);
	// fneg f1,f0
	ctx.f1.u64 = f0.u64 ^ 0x8000000000000000;
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// blt cr6,0x820be538
	if (cr6.getLT()) goto loc_820BE538;
	// fsubs f0,f1,f30
	f0.f64 = double(float(ctx.f1.f64 - f30.f64));
	// stfs f0,8332(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8332, temp.u32);
	// b 0x820be53c
	goto loc_820BE53C;
loc_820BE538:
	// stfs f1,8332(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r11.u32 + 8332, temp.u32);
loc_820BE53C:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820BE560"))) PPC_WEAK_FUNC(sub_820BE560);
PPC_FUNC_IMPL(__imp__sub_820BE560) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed548
	// stwu r1,-608(r1)
	ea = -608 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bebbc
	if (cr6.getEQ()) goto loc_820BEBBC;
	// li r29,0
	r29.s64 = 0;
	// stw r29,804(r11)
	PPC_STORE_U32(r11.u32 + 804, r29.u32);
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,800(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 800);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820bebbc
	if (cr6.getEQ()) goto loc_820BEBBC;
	// li r25,1
	r25.s64 = 1;
	// li r26,3
	r26.s64 = 3;
	// addi r11,r1,156
	r11.s64 = ctx.r1.s64 + 156;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r25,804(r10)
	PPC_STORE_U32(ctx.r10.u32 + 804, r25.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r29.u32);
	// stw r25,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r25.u32);
	// stw r26,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r26.u32);
	// stw r29,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r29.u32);
	// stw r29,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r29.u32);
	// lfs f30,2688(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f30.f64 = double(temp.f32);
	// stw r29,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r29.u32);
	// stfs f30,88(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stw r29,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r29.u32);
	// stfs f30,92(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stw r29,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r29.u32);
	// stfs f30,96(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stw r29,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r29.u32);
	// stw r29,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r29.u32);
	// stw r29,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r29.u32);
	// stw r29,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r29.u32);
	// bl 0x820a0a38
	sub_820A0A38(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r3,r11,852
	ctx.r3.s64 = r11.s64 + 852;
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// lwz r4,12(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r5,r1,320
	ctx.r5.s64 = ctx.r1.s64 + 320;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// lwz r10,748(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 748);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lfs f0,1480(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1480);
	f0.f64 = double(temp.f32);
	// fneg f13,f0
	ctx.f13.u64 = f0.u64 ^ 0x8000000000000000;
	// lfs f11,1644(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1644);
	ctx.f11.f64 = double(temp.f32);
	// lfs f12,1652(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1652);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,14492(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14492);
	f0.f64 = double(temp.f32);
	// fsubs f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 - f0.f64));
	// lfs f10,1472(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1472);
	ctx.f10.f64 = double(temp.f32);
	// lfs f9,1460(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1460);
	ctx.f9.f64 = double(temp.f32);
	// fmuls f13,f13,f11
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f11.f64));
	// fmadds f13,f12,f10,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f10.f64 + ctx.f13.f64));
	// fadds f13,f13,f9
	ctx.f13.f64 = double(float(ctx.f13.f64 + ctx.f9.f64));
	// stfs f13,88(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// lfs f12,1464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1464);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,1648(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1648);
	ctx.f13.f64 = double(temp.f32);
	// fadds f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 + ctx.f12.f64));
	// stfs f13,92(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// lfs f13,1652(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1652);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// lfs f12,1644(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1644);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,1472(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1472);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// lfs f12,1480(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1480);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,1468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1468);
	ctx.f11.f64 = double(temp.f32);
	// fmadds f0,f0,f12,f13
	f0.f64 = double(float(f0.f64 * ctx.f12.f64 + ctx.f13.f64));
	// fadds f0,f0,f11
	f0.f64 = double(float(f0.f64 + ctx.f11.f64));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lfs f13,596(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 596);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14020(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14020);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,13980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x8210b770
	sub_8210B770(ctx, base);
	// addi r31,r1,320
	r31.s64 = ctx.r1.s64 + 320;
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// lhz r11,14(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + 14);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r3,r11,6,0,25
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// bl 0x8209cd50
	sub_8209CD50(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// li r5,4
	ctx.r5.s64 = 4;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// addi r3,r11,852
	ctx.r3.s64 = r11.s64 + 852;
	// bl 0x820b3168
	sub_820B3168(ctx, base);
	// addi r11,r1,320
	r11.s64 = ctx.r1.s64 + 320;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r31,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r31.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r4,r11,852
	ctx.r4.s64 = r11.s64 + 852;
	// bl 0x8211d328
	sub_8211D328(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// lwz r9,8(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// lfs f0,14116(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14116);
	f0.f64 = double(temp.f32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f13,892(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 892);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f0,-1884(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -1884);
	f0.f64 = double(temp.f32);
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r8
	PPC_STORE_U32(ctx.r8.u32, f0.u32);
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lfs f28,2776(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2776);
	f28.f64 = double(temp.f32);
	// fcmpu cr6,f31,f28
	cr6.compare(f31.f64, f28.f64);
	// ble cr6,0x820be758
	if (!cr6.getGT()) goto loc_820BE758;
	// fmr f31,f28
	f31.f64 = f28.f64;
loc_820BE758:
	// lfs f12,872(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 872);
	ctx.f12.f64 = double(temp.f32);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// lfs f10,756(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 756);
	ctx.f10.f64 = double(temp.f32);
	// lfs f11,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// fnmsubs f11,f12,f11,f10
	ctx.f11.f64 = double(float(-(ctx.f12.f64 * ctx.f11.f64 - ctx.f10.f64)));
	// lfs f0,48(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 48);
	f0.f64 = double(temp.f32);
	// lfs f13,52(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 52);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,56(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 56);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f11,f11,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 - f0.f64));
	// fmadds f0,f11,f31,f0
	f0.f64 = double(float(ctx.f11.f64 * f31.f64 + f0.f64));
	// stfs f0,160(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// lfs f11,872(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 872);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,8(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	f0.f64 = double(temp.f32);
	// lfs f10,760(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 760);
	ctx.f10.f64 = double(temp.f32);
	// fmadds f0,f0,f11,f10
	f0.f64 = double(float(f0.f64 * ctx.f11.f64 + ctx.f10.f64));
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fmadds f0,f0,f31,f13
	f0.f64 = double(float(f0.f64 * f31.f64 + ctx.f13.f64));
	// stfs f0,164(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// lfs f0,4(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	f0.f64 = double(temp.f32);
	// lfs f13,872(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 872);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,764(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 764);
	ctx.f11.f64 = double(temp.f32);
	// fnmsubs f0,f0,f13,f11
	f0.f64 = double(float(-(f0.f64 * ctx.f13.f64 - ctx.f11.f64)));
	// fsubs f0,f0,f12
	f0.f64 = double(float(f0.f64 - ctx.f12.f64));
	// fmadds f0,f0,f31,f12
	f0.f64 = double(float(f0.f64 * f31.f64 + ctx.f12.f64));
	// stfs f0,168(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// bl 0x8238ae68
	sub_8238AE68(ctx, base);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8210bb30
	sub_8210BB30(ctx, base);
	// addi r4,r1,208
	ctx.r4.s64 = ctx.r1.s64 + 208;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x8210bb30
	sub_8210BB30(ctx, base);
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x8210c888
	sub_8210C888(ctx, base);
	// addi r4,r1,192
	ctx.r4.s64 = ctx.r1.s64 + 192;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x8210c888
	sub_8210C888(ctx, base);
	// addi r4,r1,192
	ctx.r4.s64 = ctx.r1.s64 + 192;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x8210cda0
	sub_8210CDA0(ctx, base);
	// addi r6,r1,304
	ctx.r6.s64 = ctx.r1.s64 + 304;
	// addi r4,r1,192
	ctx.r4.s64 = ctx.r1.s64 + 192;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x8210cab0
	sub_8210CAB0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x8210c988
	sub_8210C988(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8210bbf8
	sub_8210BBF8(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lfs f1,872(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 872);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bcc8
	sub_8210BCC8(ctx, base);
	// lis r11,-30584
	r11.s64 = -2004353024;
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// ori r10,r11,34953
	ctx.r10.u64 = r11.u64 | 34953;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,6576(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6576);
	f0.f64 = double(temp.f32);
	// mulhw r11,r9,r10
	r11.s64 = (int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32)) >> 32;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// rlwinm r8,r11,1,31,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// mulli r8,r11,60
	ctx.r8.s64 = r11.s64 * 60;
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// mulhw r9,r11,r10
	ctx.r9.s64 = (int64_t(r11.s32) * int64_t(ctx.r10.s32)) >> 32;
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f11,f13
	ctx.f11.f64 = double(float(ctx.f13.f64));
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// srawi r9,r9,5
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1F) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 5;
	// rlwinm r8,r9,1,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x1;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// mulli r8,r9,60
	ctx.r8.s64 = ctx.r9.s64 * 60;
	// subf r7,r8,r11
	ctx.r7.s64 = r11.s64 - ctx.r8.s64;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// extsw r7,r7
	ctx.r7.s64 = ctx.r7.s32;
	// lfs f13,15572(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 15572);
	ctx.f13.f64 = double(temp.f32);
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// mulhw r8,r9,r8
	ctx.r8.s64 = (int64_t(ctx.r9.s32) * int64_t(ctx.r8.s32)) >> 32;
	// std r7,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r7.u64);
	// lfd f10,80(r1)
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f10,f10
	ctx.f10.f64 = double(ctx.f10.s64);
	// lfs f12,15568(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15568);
	ctx.f12.f64 = double(temp.f32);
	// frsp f10,f10
	ctx.f10.f64 = double(float(ctx.f10.f64));
	// lis r10,-28254
	ctx.r10.s64 = -1851654144;
	// add r8,r8,r9
	ctx.r8.u64 = ctx.r8.u64 + ctx.r9.u64;
	// lis r6,10922
	ctx.r6.s64 = 715784192;
	// ori r10,r10,46021
	ctx.r10.u64 = ctx.r10.u64 | 46021;
	// ori r6,r6,43691
	ctx.r6.u64 = ctx.r6.u64 | 43691;
	// mulhw r10,r11,r10
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(ctx.r10.s32)) >> 32;
	// fmadds f10,f11,f0,f10
	ctx.f10.f64 = double(float(ctx.f11.f64 * f0.f64 + ctx.f10.f64));
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// srawi r11,r8,5
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1F) != 0);
	r11.s64 = ctx.r8.s32 >> 5;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// srawi r10,r10,11
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7FF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 11;
	// rlwinm r7,r11,1,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r7,r11,r7
	ctx.r7.u64 = r11.u64 + ctx.r7.u64;
	// lfs f11,15564(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 15564);
	ctx.f11.f64 = double(temp.f32);
	// rlwinm r8,r10,1,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// fmuls f31,f10,f11
	f31.f64 = double(float(ctx.f10.f64 * ctx.f11.f64));
	// add r11,r10,r8
	r11.u64 = ctx.r10.u64 + ctx.r8.u64;
	// mulli r10,r7,60
	ctx.r10.s64 = ctx.r7.s64 * 60;
	// subf r10,r10,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// fcmpu cr6,f31,f30
	cr6.compare(f31.f64, f30.f64);
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f11,80(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// mulhw r10,r11,r6
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(ctx.r6.s32)) >> 32;
	// frsp f10,f11
	ctx.f10.f64 = double(float(ctx.f11.f64));
	// lfs f11,15560(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 15560);
	ctx.f11.f64 = double(temp.f32);
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// fmuls f11,f10,f11
	ctx.f11.f64 = double(float(ctx.f10.f64 * ctx.f11.f64));
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// fmsubs f29,f31,f0,f11
	f29.f64 = double(float(f31.f64 * f0.f64 - ctx.f11.f64));
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f11,f0
	ctx.f11.f64 = double(float(f0.f64));
	// lfs f0,15556(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15556);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f0,f11,f0
	f0.f64 = double(float(ctx.f11.f64 * f0.f64));
	// fmsubs f0,f29,f13,f0
	f0.f64 = double(float(f29.f64 * ctx.f13.f64 - f0.f64));
	// fmadds f1,f31,f12,f0
	ctx.f1.f64 = double(float(f31.f64 * ctx.f12.f64 + f0.f64));
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// bge cr6,0x820be998
	if (!cr6.getLT()) goto loc_820BE998;
loc_820BE98C:
	// fadds f31,f31,f0
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(f31.f64 + f0.f64));
	// fcmpu cr6,f31,f30
	cr6.compare(f31.f64, f30.f64);
	// blt cr6,0x820be98c
	if (cr6.getLT()) goto loc_820BE98C;
loc_820BE998:
	// fcmpu cr6,f29,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(f29.f64, f30.f64);
	// bge cr6,0x820be9ac
	if (!cr6.getLT()) goto loc_820BE9AC;
loc_820BE9A0:
	// fadds f29,f29,f0
	ctx.fpscr.disableFlushMode();
	f29.f64 = double(float(f29.f64 + f0.f64));
	// fcmpu cr6,f29,f30
	cr6.compare(f29.f64, f30.f64);
	// blt cr6,0x820be9a0
	if (cr6.getLT()) goto loc_820BE9A0;
loc_820BE9AC:
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// bge cr6,0x820be9c0
	if (!cr6.getLT()) goto loc_820BE9C0;
loc_820BE9B4:
	// fadds f1,f1,f0
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = double(float(ctx.f1.f64 + f0.f64));
	// fcmpu cr6,f1,f30
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820be9b4
	if (cr6.getLT()) goto loc_820BE9B4;
loc_820BE9C0:
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// addi r27,r31,64
	r27.s64 = r31.s64 + 64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210b770
	sub_8210B770(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// addi r27,r31,128
	r27.s64 = r31.s64 + 128;
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f29.f64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210b770
	sub_8210B770(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// addi r27,r31,192
	r27.s64 = r31.s64 + 192;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210b770
	sub_8210B770(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// li r11,4
	r11.s64 = 4;
	// stw r26,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r26.u32);
	// stw r29,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r29.u32);
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,5
	cr6.compare<int32_t>(ctx.r10.s32, 5, xer);
	// beq cr6,0x820bea88
	if (cr6.getEQ()) goto loc_820BEA88;
	// cmpwi cr6,r10,12
	cr6.compare<int32_t>(ctx.r10.s32, 12, xer);
	// beq cr6,0x820bea88
	if (cr6.getEQ()) goto loc_820BEA88;
	// lbz r10,4244(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 4244);
	// lbz r9,4245(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 4245);
	// rotlwi r10,r10,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 8);
	// lbz r8,4246(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 4246);
	// lbz r7,4247(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4247);
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// rlwinm r10,r10,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0xFFFFFF00;
	// or r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 | ctx.r8.u64;
	// rlwinm r10,r10,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0xFFFFFF00;
	// or r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 | ctx.r7.u64;
	// b 0x820bea8c
	goto loc_820BEA8C;
loc_820BEA88:
	// li r10,205
	ctx.r10.s64 = 205;
loc_820BEA8C:
	// addi r4,r11,852
	ctx.r4.s64 = r11.s64 + 852;
	// stw r10,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r10.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8211c460
	sub_8211C460(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r10,804(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 804);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820beb18
	if (cr6.getEQ()) goto loc_820BEB18;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,255
	ctx.r5.s64 = 255;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,852
	ctx.r3.s64 = r11.s64 + 852;
	// bl 0x8209ab98
	sub_8209AB98(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,255
	ctx.r5.s64 = 255;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,852
	ctx.r3.s64 = r11.s64 + 852;
	// bl 0x8209ab98
	sub_8209AB98(ctx, base);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// li r10,0
	ctx.r10.s64 = 0;
	// fmr f1,f28
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f28.f64;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,13356(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 13356);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x821974b8
	sub_821974B8(ctx, base);
loc_820BEB18:
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// addi r4,r1,240
	ctx.r4.s64 = ctx.r1.s64 + 240;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210c818
	sub_8210C818(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r4,120
	ctx.r4.s64 = 120;
	// addi r3,r1,384
	ctx.r3.s64 = ctx.r1.s64 + 384;
	// lfs f1,11980(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 11980);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8238c110
	sub_8238C110(ctx, base);
	// addi r5,r1,240
	ctx.r5.s64 = ctx.r1.s64 + 240;
	// addi r4,r1,240
	ctx.r4.s64 = ctx.r1.s64 + 240;
	// addi r3,r1,384
	ctx.r3.s64 = ctx.r1.s64 + 384;
	// bl 0x8238bc28
	sub_8238BC28(ctx, base);
	// addi r4,r1,240
	ctx.r4.s64 = ctx.r1.s64 + 240;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// addi r4,r1,240
	ctx.r4.s64 = ctx.r1.s64 + 240;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// lfs f3,17796(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17796);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// bl 0x8238b6a8
	sub_8238B6A8(ctx, base);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// addi r4,r1,448
	ctx.r4.s64 = ctx.r1.s64 + 448;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,744(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x820beba8
	if (cr6.getEQ()) goto loc_820BEBA8;
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bne cr6,0x820bebac
	if (!cr6.getEQ()) goto loc_820BEBAC;
loc_820BEBA8:
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
loc_820BEBAC:
	// addi r3,r1,448
	ctx.r3.s64 = ctx.r1.s64 + 448;
	// bl 0x820c8fa8
	sub_820C8FA8(ctx, base);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
loc_820BEBBC:
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed594
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_820BEBD0"))) PPC_WEAK_FUNC(sub_820BEBD0);
PPC_FUNC_IMPL(__imp__sub_820BEBD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r9,-1364(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lbz r11,4998(r9)
	r11.u64 = PPC_LOAD_U8(ctx.r9.u32 + 4998);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bed30
	if (!cr6.getEQ()) goto loc_820BED30;
	// lwz r11,480(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 480);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820bed30
	if (!cr6.getEQ()) goto loc_820BED30;
	// lwz r11,744(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 744);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820bec18
	if (cr6.getEQ()) goto loc_820BEC18;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820b9120
	sub_820B9120(ctx, base);
	// lwz r9,-1364(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BEC18:
	// li r29,1
	r29.s64 = 1;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r29
	r11.u64 = r29.u64;
	// li r5,84
	ctx.r5.s64 = 84;
	// stw r11,4052(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4052, r11.u32);
	// stw r29,480(r9)
	PPC_STORE_U32(ctx.r9.u32 + 480, r29.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r4,r11,1456
	ctx.r4.s64 = r11.s64 + 1456;
	// addi r3,r11,1372
	ctx.r3.s64 = r11.s64 + 1372;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,596(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 596);
	f0.f64 = double(temp.f32);
	// stfs f0,1340(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1340, temp.u32);
	// lfs f0,612(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 612);
	f0.f64 = double(temp.f32);
	// stfs f0,1344(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1344, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1828(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1828);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bec70
	if (cr6.getEQ()) goto loc_820BEC70;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// mr r11,r29
	r11.u64 = r29.u64;
	// stw r11,-1768(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1768, r11.u32);
loc_820BEC70:
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lis r7,-32014
	ctx.r7.s64 = -2098069504;
	// lwz r9,-908(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + -908);
	// lwz r8,8308(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 8308);
	// lwz r10,-3044(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + -3044);
	// subf r8,r8,r10
	ctx.r8.s64 = ctx.r10.s64 - ctx.r8.s64;
	// lwz r6,80(r9)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + 80);
	// cmpw cr6,r8,r6
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r6.s32, xer);
	// bge cr6,0x820becbc
	if (!cr6.getLT()) goto loc_820BECBC;
	// stw r8,80(r9)
	PPC_STORE_U32(ctx.r9.u32 + 80, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,-3044(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + -3044);
loc_820BECBC:
	// stw r10,8308(r11)
	PPC_STORE_U32(r11.u32 + 8308, ctx.r10.u32);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bed30
	if (cr6.getEQ()) goto loc_820BED30;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x820bed30
	if (!cr6.getEQ()) goto loc_820BED30;
	// bl 0x820ca338
	sub_820CA338(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820bed30
	if (cr6.getEQ()) goto loc_820BED30;
	// stb r29,140(r31)
	PPC_STORE_U8(r31.u32 + 140, r29.u8);
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bed30
	if (cr6.getEQ()) goto loc_820BED30;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x820bed14
	if (cr6.getEQ()) goto loc_820BED14;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820bed30
	if (!cr6.getEQ()) goto loc_820BED30;
loc_820BED14:
	// lwz r11,-908(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -908);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// stb r10,105(r11)
	PPC_STORE_U8(r11.u32 + 105, ctx.r10.u8);
	// lwz r11,76(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// addi r3,r11,120
	ctx.r3.s64 = r11.s64 + 120;
	// bl 0x82176e40
	sub_82176E40(ctx, base);
loc_820BED30:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820BED38"))) PPC_WEAK_FUNC(sub_820BED38);
PPC_FUNC_IMPL(__imp__sub_820BED38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed540
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// fmr f28,f2
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f2.f64;
	// lis r28,-32014
	r28.s64 = -2098069504;
	// fmr f27,f3
	f27.f64 = ctx.f3.f64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// lwz r10,-908(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -908);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f0,92(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 92);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r9,744(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// fmuls f30,f0,f1
	f30.f64 = double(float(f0.f64 * ctx.f1.f64));
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// lfs f31,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f31.f64 = double(temp.f32);
	// fmr f26,f31
	f26.f64 = f31.f64;
	// beq cr6,0x820bedb8
	if (cr6.getEQ()) goto loc_820BEDB8;
	// li r5,1
	ctx.r5.s64 = 1;
	// lfs f1,488(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 488);
	ctx.f1.f64 = double(temp.f32);
	// li r4,46
	ctx.r4.s64 = 46;
	// addi r3,r11,5000
	ctx.r3.s64 = r11.s64 + 5000;
	// bl 0x820c90d0
	sub_820C90D0(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,46
	ctx.r4.s64 = 46;
	// addi r3,r11,6288
	ctx.r3.s64 = r11.s64 + 6288;
	// lfs f1,484(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820c90d0
	sub_820C90D0(ctx, base);
loc_820BEDB8:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x820bede4
	if (!cr6.getGT()) goto loc_820BEDE4;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13296(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13296);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820bf2cc
	if (!cr6.getEQ()) goto loc_820BF2CC;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13304(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820bf2cc
	if (!cr6.getEQ()) goto loc_820BF2CC;
loc_820BEDE4:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1836(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1836);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,12900(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12900);
	f29.f64 = double(temp.f32);
	// bne cr6,0x820bee00
	if (!cr6.getEQ()) goto loc_820BEE00;
	// fmuls f30,f30,f29
	f30.f64 = double(float(f30.f64 * f29.f64));
loc_820BEE00:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lwz r10,480(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bee2c
	if (!cr6.getEQ()) goto loc_820BEE2C;
	// lbz r11,4998(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 4998);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bee2c
	if (!cr6.getEQ()) goto loc_820BEE2C;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820ca110
	sub_820CA110(ctx, base);
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f29.f64;
	// bl 0x820a0768
	sub_820A0768(ctx, base);
loc_820BEE2C:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x820bee64
	if (!cr6.getGT()) goto loc_820BEE64;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x820bee64
	if (!cr6.getEQ()) goto loc_820BEE64;
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f13,484(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,8380(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8380);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// lfs f12,488(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 488);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,8384(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8384);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f30,f13,f12,f0
	f30.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 + f0.f64));
	// b 0x820bee68
	goto loc_820BEE68;
loc_820BEE64:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
loc_820BEE68:
	// lbz r10,4998(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 4998);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820bf2cc
	if (!cr6.getEQ()) goto loc_820BF2CC;
	// lwz r10,480(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bf2cc
	if (!cr6.getEQ()) goto loc_820BF2CC;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r10,-1736(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1736);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bf2cc
	if (!cr6.getEQ()) goto loc_820BF2CC;
	// lfs f0,508(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 508);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// blt cr6,0x820beeb8
	if (cr6.getLT()) goto loc_820BEEB8;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x820bf2cc
	if (!cr6.getGT()) goto loc_820BF2CC;
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f0,508(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 508);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bne cr6,0x820bf2cc
	if (!cr6.getEQ()) goto loc_820BF2CC;
loc_820BEEB8:
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r10,5
	cr6.compare<int32_t>(ctx.r10.s32, 5, xer);
	// beq cr6,0x820bf2cc
	if (cr6.getEQ()) goto loc_820BF2CC;
	// cmpwi cr6,r10,12
	cr6.compare<int32_t>(ctx.r10.s32, 12, xer);
	// beq cr6,0x820bf2cc
	if (cr6.getEQ()) goto loc_820BF2CC;
	// lfs f0,484(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	f0.f64 = double(temp.f32);
	// stfs f0,492(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 492, temp.u32);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f0,488(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 488);
	f0.f64 = double(temp.f32);
	// stfs f0,496(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 496, temp.u32);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// addi r29,r11,-1360
	r29.s64 = r11.s64 + -1360;
	// ble cr6,0x820bef74
	if (!cr6.getGT()) goto loc_820BEF74;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// fmr f2,f27
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f27.f64;
	// fmr f1,f28
	ctx.f1.f64 = f28.f64;
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r11,r11,-1384
	r11.s64 = r11.s64 + -1384;
	// lfs f0,14308(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14308);
	f0.f64 = double(temp.f32);
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r11
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,14020(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14020);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f0,f1,f0,f13
	f0.f64 = double(float(-(ctx.f1.f64 * f0.f64 - ctx.f13.f64)));
	// lfs f13,596(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 596);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x820bef40
	if (!cr6.getLT()) goto loc_820BEF40;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_820BEF40:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,12448(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12448);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x820bef60
	if (cr6.getLT()) goto loc_820BEF60;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,15576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15576);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820bef74
	if (!cr6.getGT()) goto loc_820BEF74;
loc_820BEF60:
	// mulli r11,r27,112
	r11.s64 = r27.s64 * 112;
	// addi r10,r29,60
	ctx.r10.s64 = r29.s64 + 60;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_820BEF74:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x820befd8
	if (cr6.getEQ()) goto loc_820BEFD8;
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f0,8384(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8384);
	f0.f64 = double(temp.f32);
	// lfs f13,488(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 488);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// blt cr6,0x820befb4
	if (cr6.getLT()) goto loc_820BEFB4;
	// lfs f0,8384(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8384);
	f0.f64 = double(temp.f32);
	// fmr f29,f31
	f29.f64 = f31.f64;
	// fdivs f0,f30,f0
	f0.f64 = double(float(f30.f64 / f0.f64));
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f0,488(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 488, temp.u32);
	// lfs f0,8384(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8384);
	f0.f64 = double(temp.f32);
	// fdivs f26,f30,f0
	f26.f64 = double(float(f30.f64 / f0.f64));
	// b 0x820bf1c8
	goto loc_820BF1C8;
loc_820BEFB4:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,488(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 488);
	f0.f64 = double(temp.f32);
	// lfs f12,8384(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8384);
	ctx.f12.f64 = double(temp.f32);
	// fmr f26,f0
	f26.f64 = f0.f64;
	// stfs f31,488(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 488, temp.u32);
	// lfs f13,2776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,8384(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 8384, temp.u32);
	// fdivs f13,f0,f12
	ctx.f13.f64 = double(float(f0.f64 / ctx.f12.f64));
	// fsubs f30,f30,f13
	f30.f64 = double(float(f30.f64 - ctx.f13.f64));
loc_820BEFD8:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f0,8380(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8380);
	f0.f64 = double(temp.f32);
	// fdivs f0,f30,f0
	f0.f64 = double(float(f30.f64 / f0.f64));
	// lfs f13,484(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f0,484(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 484, temp.u32);
	// lfs f13,8380(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8380);
	ctx.f13.f64 = double(temp.f32);
	// fdivs f29,f30,f13
	f29.f64 = double(float(f30.f64 / ctx.f13.f64));
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bgt cr6,0x820bf1c8
	if (cr6.getGT()) goto loc_820BF1C8;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x820bf1c4
	if (!cr6.getGT()) goto loc_820BF1C4;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r31,0
	r31.s64 = 0;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bf03c
	if (!cr6.getEQ()) goto loc_820BF03C;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x820bf070
	if (!cr6.getEQ()) goto loc_820BF070;
	// bl 0x820c1600
	sub_820C1600(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// b 0x820bf068
	goto loc_820BF068;
loc_820BF03C:
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x820bf070
	if (!cr6.getEQ()) goto loc_820BF070;
	// bl 0x820ca338
	sub_820CA338(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820bf070
	if (cr6.getEQ()) goto loc_820BF070;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r3,1004
	ctx.r3.s64 = ctx.r3.s64 + 1004;
	// bl 0x820af7e8
	sub_820AF7E8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
loc_820BF068:
	// beq cr6,0x820bf070
	if (cr6.getEQ()) goto loc_820BF070;
	// li r31,1
	r31.s64 = 1;
loc_820BF070:
	// bl 0x820e33a0
	sub_820E33A0(ctx, base);
	// cmpw cr6,r30,r27
	cr6.compare<int32_t>(r30.s32, r27.s32, xer);
	// beq cr6,0x820bf080
	if (cr6.getEQ()) goto loc_820BF080;
	// bl 0x820a6940
	sub_820A6940(ctx, base);
loc_820BF080:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// cmpw cr6,r30,r27
	cr6.compare<int32_t>(r30.s32, r27.s32, xer);
	// bne cr6,0x820bf098
	if (!cr6.getEQ()) goto loc_820BF098;
	// bl 0x820a6a38
	sub_820A6A38(ctx, base);
	// b 0x820bf0a8
	goto loc_820BF0A8;
loc_820BF098:
	// bl 0x820a66b0
	sub_820A66B0(ctx, base);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x820bf0a8
	if (cr6.getEQ()) goto loc_820BF0A8;
	// bl 0x820a6898
	sub_820A6898(ctx, base);
loc_820BF0A8:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bf0d0
	if (cr6.getEQ()) goto loc_820BF0D0;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820ca560
	sub_820CA560(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bf0ec
	if (cr6.getEQ()) goto loc_820BF0EC;
loc_820BF0D0:
	// mulli r11,r27,28
	r11.s64 = r27.s64 * 28;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addi r10,r29,36
	ctx.r10.s64 = r29.s64 + 36;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_820BF0EC:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bf1c4
	if (cr6.getEQ()) goto loc_820BF1C4;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x820bf1c4
	if (!cr6.getEQ()) goto loc_820BF1C4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r31,0
	r31.s64 = 0;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_820BF12C:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x820bf148
	if (cr6.getEQ()) goto loc_820BF148;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x820bf14c
	if (!cr6.getEQ()) goto loc_820BF14C;
loc_820BF148:
	// li r11,1
	r11.s64 = 1;
loc_820BF14C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bf178
	if (!cr6.getEQ()) goto loc_820BF178;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// clrlwi r11,r27,24
	r11.u64 = r27.u32 & 0xFF;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bne cr6,0x820bf16c
	if (!cr6.getEQ()) goto loc_820BF16C;
	// lwz r31,92(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
loc_820BF16C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x820bf12c
	goto loc_820BF12C;
loc_820BF178:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820bf1b8
	if (cr6.getEQ()) goto loc_820BF1B8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bf1b8
	if (cr6.getEQ()) goto loc_820BF1B8;
	// mulli r11,r27,28
	r11.s64 = r27.s64 * 28;
	// add r10,r11,r30
	ctx.r10.u64 = r11.u64 + r30.u64;
	// mulli r11,r30,52
	r11.s64 = r30.s64 * 52;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r29,36
	ctx.r9.s64 = r29.s64 + 36;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r3,r11,1648
	ctx.r3.s64 = r11.s64 + 1648;
	// lwzx r4,r10,r9
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// bl 0x82177480
	sub_82177480(ctx, base);
loc_820BF1B8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,14748
	r11.s64 = r11.s64 + 14748;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
loc_820BF1C4:
	// bl 0x820bebd0
	sub_820BEBD0(ctx, base);
loc_820BF1C8:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lfs f0,508(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 508);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x820bf228
	if (!cr6.getLT()) goto loc_820BF228;
	// bl 0x820ca520
	sub_820CA520(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bf204
	if (!cr6.getEQ()) goto loc_820BF204;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bf204
	if (cr6.getEQ()) goto loc_820BF204;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bf228
	if (!cr6.getEQ()) goto loc_820BF228;
loc_820BF204:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,652(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 652);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,3060(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3060);
	f0.f64 = double(temp.f32);
	// fmadds f13,f28,f0,f13
	ctx.f13.f64 = double(float(f28.f64 * f0.f64 + ctx.f13.f64));
	// stfs f13,652(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 652, temp.u32);
	// lfs f13,660(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 660);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f27,f0,f13
	f0.f64 = double(float(f27.f64 * f0.f64 + ctx.f13.f64));
	// stfs f0,660(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 660, temp.u32);
loc_820BF228:
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// stfs f31,508(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 508, temp.u32);
	// stfs f31,512(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 512, temp.u32);
	// bl 0x8209f588
	sub_8209F588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bf268
	if (!cr6.getEQ()) goto loc_820BF268;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,10084
	ctx.r8.s64 = 10084;
	// addi r7,r11,15352
	ctx.r7.s64 = r11.s64 + 15352;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,68
	ctx.r4.s64 = 68;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820BF268:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bf2cc
	if (cr6.getEQ()) goto loc_820BF2CC;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x820bf2cc
	if (!cr6.getEQ()) goto loc_820BF2CC;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820ca3e8
	sub_820CA3E8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ca338
	sub_820CA338(ctx, base);
	// lwz r11,-1364(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -1364);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r7,1
	ctx.r7.s64 = 1;
	// lfs f0,484(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x820bf2b0
	if (!cr6.getGT()) goto loc_820BF2B0;
	// li r7,0
	ctx.r7.s64 = 0;
loc_820BF2B0:
	// li r10,0
	ctx.r10.s64 = 0;
	// fmr f2,f26
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f26.f64;
	// li r9,0
	ctx.r9.s64 = 0;
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8216fa70
	sub_8216FA70(ctx, base);
loc_820BF2CC:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed58c
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820BF2E0"))) PPC_WEAK_FUNC(sub_820BF2E0);
PPC_FUNC_IMPL(__imp__sub_820BF2E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed544
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// mr r31,r7
	r31.u64 = ctx.r7.u64;
	// fmr f30,f2
	f30.f64 = ctx.f2.f64;
	// mr r30,r8
	r30.u64 = ctx.r8.u64;
	// fmr f29,f3
	f29.f64 = ctx.f3.f64;
	// fmr f28,f4
	f28.f64 = ctx.f4.f64;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bf414
	if (cr6.getEQ()) goto loc_820BF414;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x820bf414
	if (!cr6.getEQ()) goto loc_820BF414;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// clrlwi r10,r30,24
	ctx.r10.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// addi r9,r11,488
	ctx.r9.s64 = r11.s64 + 488;
	// lfs f27,2688(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f27.f64 = double(temp.f32);
	// lfs f0,488(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 488);
	f0.f64 = double(temp.f32);
	// stfs f0,496(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 496, temp.u32);
	// lfs f0,484(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	f0.f64 = double(temp.f32);
	// stfs f0,492(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 492, temp.u32);
	// beq cr6,0x820bf37c
	if (cr6.getEQ()) goto loc_820BF37C;
	// stfs f27,484(r11)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 484, temp.u32);
	// stfs f27,0(r9)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(ctx.r9.u32 + 0, temp.u32);
	// bl 0x820bebd0
	sub_820BEBD0(ctx, base);
	// bl 0x820e33a0
	sub_820E33A0(ctx, base);
	// b 0x820bf394
	goto loc_820BF394;
loc_820BF37C:
	// lfs f0,484(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f31
	f0.f64 = double(float(f0.f64 - f31.f64));
	// stfs f0,484(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 484, temp.u32);
	// lfs f0,0(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
	// stfs f0,0(r9)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 0, temp.u32);
loc_820BF394:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,508(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 508);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// bge cr6,0x820bf3d8
	if (!cr6.getLT()) goto loc_820BF3D8;
	// bl 0x820ca520
	sub_820CA520(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bf3d8
	if (cr6.getEQ()) goto loc_820BF3D8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,3060(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f13,652(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 652);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f13,f29,f0,f13
	ctx.f13.f64 = double(float(f29.f64 * f0.f64 + ctx.f13.f64));
	// stfs f13,652(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 652, temp.u32);
	// lfs f13,660(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 660);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f28,f0,f13
	f0.f64 = double(float(f28.f64 * f0.f64 + ctx.f13.f64));
	// stfs f0,660(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 660, temp.u32);
loc_820BF3D8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,10138
	ctx.r8.s64 = 10138;
	// addi r7,r11,15352
	ctx.r7.s64 = r11.s64 + 15352;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,68
	ctx.r4.s64 = 68;
	// stfs f27,508(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 508, temp.u32);
	// stfs f27,512(r11)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 512, temp.u32);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
loc_820BF414:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed590
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820BF428"))) PPC_WEAK_FUNC(sub_820BF428);
PPC_FUNC_IMPL(__imp__sub_820BF428) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f30.u64);
	// stfd f31,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// fmr f31,f2
	f31.f64 = ctx.f2.f64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// fmr f30,f1
	f30.f64 = ctx.f1.f64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// bl 0x820bed38
	sub_820BED38(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820BF4A8"))) PPC_WEAK_FUNC(sub_820BF4A8);
PPC_FUNC_IMPL(__imp__sub_820BF4A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// lfs f0,15096(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15096);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-908(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -908);
	// lfs f12,100(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 100);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	ctx.f13.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fmsubs f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 - ctx.f13.f64));
	// stfs f0,8252(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8252, temp.u32);
	// stw r9,8312(r11)
	PPC_STORE_U32(r11.u32 + 8312, ctx.r9.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,-3044(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -3044);
	// stw r11,8308(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8308, r11.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,8320(r11)
	PPC_STORE_U32(r11.u32 + 8320, ctx.r9.u32);
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x820bf550
	if (!cr6.getGT()) goto loc_820BF550;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r30,r11,-3028
	r30.s64 = r11.s64 + -3028;
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,476(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 476);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bf550
	if (!cr6.getEQ()) goto loc_820BF550;
	// bl 0x820b5a38
	sub_820B5A38(ctx, base);
loc_820BF550:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820BF568"))) PPC_WEAK_FUNC(sub_820BF568);
PPC_FUNC_IMPL(__imp__sub_820BF568) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed540
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r27,8(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// bl 0x820afc48
	sub_820AFC48(ctx, base);
	// bl 0x820bf4a8
	sub_820BF4A8(ctx, base);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// li r29,0
	r29.s64 = 0;
	// li r9,1
	ctx.r9.s64 = 1;
	// li r10,7
	ctx.r10.s64 = 7;
	// li r8,2
	ctx.r8.s64 = 2;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r29,480(r11)
	PPC_STORE_U32(r11.u32 + 480, r29.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r29,1360(r11)
	PPC_STORE_U32(r11.u32 + 1360, r29.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r29,1356(r11)
	PPC_STORE_U32(r11.u32 + 1356, r29.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,1352(r11)
	PPC_STORE_U32(r11.u32 + 1352, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,8248(r11)
	PPC_STORE_U32(r11.u32 + 8248, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,8276(r11)
	PPC_STORE_U32(r11.u32 + 8276, ctx.r10.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r29,4380(r11)
	PPC_STORE_U32(r11.u32 + 4380, r29.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r8,4572(r11)
	PPC_STORE_U32(r11.u32 + 4572, ctx.r8.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r29,4736(r11)
	PPC_STORE_U32(r11.u32 + 4736, r29.u32);
	// mr r11,r29
	r11.u64 = r29.u64;
	// stw r11,-1688(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1688, r11.u32);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2688(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f31.f64 = double(temp.f32);
	// lfs f26,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f26.f64 = double(temp.f32);
	// beq cr6,0x820bf624
	if (cr6.getEQ()) goto loc_820BF624;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820bf7d8
	if (!cr6.getEQ()) goto loc_820BF7D8;
loc_820BF624:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x820bf648
	if (!cr6.getGT()) goto loc_820BF648;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1892(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820bf648
	if (!cr6.getGT()) goto loc_820BF648;
	// bl 0x820af878
	sub_820AF878(ctx, base);
	// b 0x820bf64c
	goto loc_820BF64C;
loc_820BF648:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
loc_820BF64C:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-3760
	r11.s64 = r11.s64 + -3760;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwz r30,40(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// lfs f30,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f30.f64 = double(temp.f32);
	// lfs f29,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	f29.f64 = double(temp.f32);
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// bl 0x820b2588
	sub_820B2588(ctx, base);
	// fmr f27,f1
	ctx.fpscr.disableFlushMode();
	f27.f64 = ctx.f1.f64;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,8252(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8252);
	f0.f64 = double(temp.f32);
	// stfs f27,372(r11)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 372, temp.u32);
	// fadds f28,f0,f27
	f28.f64 = double(float(f0.f64 + f27.f64));
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r28,r3,31
	r28.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,15416(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15416);
	f0.f64 = double(temp.f32);
	// fmuls f11,f27,f0
	ctx.f11.f64 = double(float(f27.f64 * f0.f64));
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,3112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f12,f0
	ctx.f12.f64 = double(float(f0.f64));
	// lfs f0,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * f0.f64));
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// lfs f12,14308(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14308);
	ctx.f12.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fmuls f12,f0,f12
	ctx.f12.f64 = double(float(f0.f64 * ctx.f12.f64));
	// stfs f12,596(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 596, temp.u32);
	// stfs f27,376(r11)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r11.u32 + 376, temp.u32);
	// fmr f27,f0
	f27.f64 = f0.f64;
	// stfs f11,368(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r11.u32 + 368, temp.u32);
	// stw r30,1456(r11)
	PPC_STORE_U32(r11.u32 + 1456, r30.u32);
	// stfs f30,1460(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1460, temp.u32);
	// stw r30,1536(r11)
	PPC_STORE_U32(r11.u32 + 1536, r30.u32);
	// stfs f28,1464(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 1464, temp.u32);
	// stfs f29,1468(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 1468, temp.u32);
	// stfs f30,1500(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1500, temp.u32);
	// stfs f28,1504(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 1504, temp.u32);
	// stfs f29,1508(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 1508, temp.u32);
	// stfs f30,1484(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1484, temp.u32);
	// stfs f28,1488(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 1488, temp.u32);
	// stfs f29,1492(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 1492, temp.u32);
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// stfs f26,1512(r11)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(r11.u32 + 1512, temp.u32);
	// stfs f31,1516(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1516, temp.u32);
	// stfs f31,1520(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1520, temp.u32);
	// stfs f31,1524(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1524, temp.u32);
	// stfs f26,1528(r11)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(r11.u32 + 1528, temp.u32);
	// stfs f31,1532(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1532, temp.u32);
	// stfs f31,1472(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1472, temp.u32);
	// stfs f31,1476(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1476, temp.u32);
	// stfs f26,1480(r11)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(r11.u32 + 1480, temp.u32);
	// stfs f13,1496(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 1496, temp.u32);
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,1472(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1472, temp.u32);
	// stfs f31,1476(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1476, temp.u32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// stfs f0,1480(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1480, temp.u32);
	// stfs f30,1328(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1328, temp.u32);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// stfs f30,12(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// lwz r10,-1364(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f28,1332(r10)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r10.u32 + 1332, temp.u32);
	// stfs f28,16(r11)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// stfs f29,1336(r10)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r10.u32 + 1336, temp.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stfs f29,20(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 20, temp.u32);
	// stw r30,24(r11)
	PPC_STORE_U32(r11.u32 + 24, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,15612(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15612);
	f0.f64 = double(temp.f32);
	// lfs f13,1500(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1500);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f13,1248(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 1248, temp.u32);
	// lfs f13,1504(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1504);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f13,1252(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 1252, temp.u32);
	// lfs f13,1508(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1508);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,1256(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1256, temp.u32);
loc_820BF7D8:
	// bl 0x820c08d8
	sub_820C08D8(ctx, base);
	// li r11,4580
	r11.s64 = 4580;
loc_820BF7E0:
	// lwz r10,-1364(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stwx r29,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, r29.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpwi cr6,r11,4700
	cr6.compare<int32_t>(r11.s32, 4700, xer);
	// blt cr6,0x820bf7e0
	if (cr6.getLT()) goto loc_820BF7E0;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x820bf8e0
	if (cr6.getEQ()) goto loc_820BF8E0;
	// lwz r4,0(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmplwi cr6,r4,9
	cr6.compare<uint32_t>(ctx.r4.u32, 9, xer);
	// beq cr6,0x820bf8e0
	if (cr6.getEQ()) goto loc_820BF8E0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r30,r11,15584
	r30.s64 = r11.s64 + 15584;
loc_820BF810:
	// cmplwi cr6,r4,6
	cr6.compare<uint32_t>(ctx.r4.u32, 6, xer);
	// bgt cr6,0x820bf8c8
	if (cr6.getGT()) goto loc_820BF8C8;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,-2000
	r12.s64 = r12.s64 + -2000;
	// rlwinm r0,r4,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r4.u64) {
	case 0:
		goto loc_820BF84C;
	case 1:
		goto loc_820BF854;
	case 2:
		goto loc_820BF88C;
	case 3:
		goto loc_820BF8B0;
	case 4:
		goto loc_820BF8B8;
	case 5:
		goto loc_820BF8B8;
	case 6:
		goto loc_820BF8C0;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-1972(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -1972);
	// lwz r16,-1964(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -1964);
	// lwz r16,-1908(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -1908);
	// lwz r16,-1872(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -1872);
	// lwz r16,-1864(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -1864);
	// lwz r16,-1864(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -1864);
	// lwz r16,-1856(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -1856);
loc_820BF84C:
	// addi r27,r27,12
	r27.s64 = r27.s64 + 12;
	// b 0x820bf8d4
	goto loc_820BF8D4;
loc_820BF854:
	// bl 0x8213d740
	sub_8213D740(ctx, base);
	// lwz r11,12(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 12);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bne cr6,0x820bf884
	if (!cr6.getEQ()) goto loc_820BF884;
	// lwz r4,8(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// lwz r3,4(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// blt cr6,0x820bf880
	if (cr6.getLT()) goto loc_820BF880;
	// bl 0x820c0ea0
	sub_820C0EA0(ctx, base);
	// addi r27,r27,16
	r27.s64 = r27.s64 + 16;
	// b 0x820bf8d4
	goto loc_820BF8D4;
loc_820BF880:
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
loc_820BF884:
	// addi r27,r27,16
	r27.s64 = r27.s64 + 16;
	// b 0x820bf8d4
	goto loc_820BF8D4;
loc_820BF88C:
	// bl 0x8213d740
	sub_8213D740(ctx, base);
	// lwz r11,12(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 12);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bne cr6,0x820bf8a8
	if (!cr6.getEQ()) goto loc_820BF8A8;
	// lwz r4,8(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// lwz r3,4(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
loc_820BF8A8:
	// addi r27,r27,16
	r27.s64 = r27.s64 + 16;
	// b 0x820bf8d4
	goto loc_820BF8D4;
loc_820BF8B0:
	// addi r27,r27,32
	r27.s64 = r27.s64 + 32;
	// b 0x820bf8d4
	goto loc_820BF8D4;
loc_820BF8B8:
	// addi r27,r27,8
	r27.s64 = r27.s64 + 8;
	// b 0x820bf8d4
	goto loc_820BF8D4;
loc_820BF8C0:
	// addi r27,r27,40
	r27.s64 = r27.s64 + 40;
	// b 0x820bf8d4
	goto loc_820BF8D4;
loc_820BF8C8:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// addi r27,r27,4
	r27.s64 = r27.s64 + 4;
loc_820BF8D4:
	// lwz r4,0(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmplwi cr6,r4,9
	cr6.compare<uint32_t>(ctx.r4.u32, 9, xer);
	// bne cr6,0x820bf810
	if (!cr6.getEQ()) goto loc_820BF810;
loc_820BF8E0:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f31,380(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 380, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15580(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15580);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f0,384(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 384, temp.u32);
	// stfs f31,388(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 388, temp.u32);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820bf958
	if (cr6.getEQ()) goto loc_820BF958;
	// rotlwi r10,r10,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820bf958
	if (cr6.getEQ()) goto loc_820BF958;
	// stfs f31,684(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 684, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,12464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12464);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f0,688(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 688, temp.u32);
	// lbz r11,12(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 12);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,6592(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6592);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,692(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 692, temp.u32);
	// stfs f26,696(r11)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(r11.u32 + 696, temp.u32);
loc_820BF958:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed58c
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820BF968"))) PPC_WEAK_FUNC(sub_820BF968);
PPC_FUNC_IMPL(__imp__sub_820BF968) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f30.u64);
	// stfd f31,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,128(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 128);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820bf9b4
	if (!cr6.getEQ()) goto loc_820BF9B4;
	// bl 0x820b4388
	sub_820B4388(ctx, base);
	// bl 0x820b4768
	sub_820B4768(ctx, base);
	// bl 0x820df930
	sub_820DF930(ctx, base);
	// bl 0x820b1fa0
	sub_820B1FA0(ctx, base);
	// bl 0x820b3440
	sub_820B3440(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820BF9B4:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82096b00
	sub_82096B00(ctx, base);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,13356(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 13356);
	// bl 0x821936a0
	sub_821936A0(ctx, base);
	// bl 0x8209dae0
	sub_8209DAE0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,8260(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8260);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bf9ec
	if (cr6.getEQ()) goto loc_820BF9EC;
	// li r3,160
	ctx.r3.s64 = 160;
	// bl 0x820992c0
	sub_820992C0(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BF9EC:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,512(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 512);
	f0.f64 = double(temp.f32);
	// li r30,0
	r30.s64 = 0;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lfs f31,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x820bfa1c
	if (!cr6.getGT()) goto loc_820BFA1C;
	// lwz r11,744(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820bfa1c
	if (!cr6.getEQ()) goto loc_820BFA1C;
	// bl 0x820b3338
	sub_820B3338(ctx, base);
	// b 0x820bfa60
	goto loc_820BFA60;
loc_820BFA1C:
	// bl 0x8213b1c0
	sub_8213B1C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bfa60
	if (cr6.getEQ()) goto loc_820BFA60;
	// bl 0x820b3338
	sub_820B3338(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,8320(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8320);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820bfa50
	if (!cr6.getGT()) goto loc_820BFA50;
	// rotlwi r9,r10,0
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// lwz r10,-6384(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + -6384);
	// subf r10,r10,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
	// stw r10,8320(r11)
	PPC_STORE_U32(r11.u32 + 8320, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BFA50:
	// lwz r10,8320(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8320);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x820bfa60
	if (!cr6.getLT()) goto loc_820BFA60;
	// stw r30,8320(r11)
	PPC_STORE_U32(r11.u32 + 8320, r30.u32);
loc_820BFA60:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820bfa70
	if (!cr6.getEQ()) goto loc_820BFA70;
	// bl 0x820cc3e0
	sub_820CC3E0(ctx, base);
loc_820BFA70:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,480(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bfd38
	if (cr6.getEQ()) goto loc_820BFD38;
	// lwz r9,1360(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 1360);
	// li r28,1
	r28.s64 = 1;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x820bfb74
	if (!cr6.getEQ()) goto loc_820BFB74;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x820bfb0c
	if (!cr6.getEQ()) goto loc_820BFB0C;
	// li r10,2
	ctx.r10.s64 = 2;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,480(r11)
	PPC_STORE_U32(r11.u32 + 480, ctx.r10.u32);
	// bl 0x8210a860
	sub_8210A860(ctx, base);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820bfb00
	if (!cr6.getEQ()) goto loc_820BFB00;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82144c60
	sub_82144C60(ctx, base);
	// bl 0x82144c48
	sub_82144C48(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// mr r11,r30
	r11.u64 = r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,26372(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26372, r11.u32);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// mr r11,r30
	r11.u64 = r30.u64;
	// li r4,27
	ctx.r4.s64 = 27;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,26376(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26376, r11.u32);
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// b 0x820bfb70
	goto loc_820BFB70;
loc_820BFB00:
	// li r3,6
	ctx.r3.s64 = 6;
	// bl 0x82144c60
	sub_82144C60(ctx, base);
	// b 0x820bfb70
	goto loc_820BFB70;
loc_820BFB0C:
	// lwz r10,1356(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1356);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bfb44
	if (cr6.getEQ()) goto loc_820BFB44;
	// li r9,150
	ctx.r9.s64 = 150;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stw r9,1272(r11)
	PPC_STORE_U32(r11.u32 + 1272, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,15616(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15616);
	f0.f64 = double(temp.f32);
	// stw r30,1276(r11)
	PPC_STORE_U32(r11.u32 + 1276, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1280(r11)
	PPC_STORE_U32(r11.u32 + 1280, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f0,1284(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1284, temp.u32);
	// b 0x820bfb70
	goto loc_820BFB70;
loc_820BFB44:
	// lwz r11,-6384(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -6384);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x820bfb58
	if (cr6.getGT()) goto loc_820BFB58;
	// li r3,2
	ctx.r3.s64 = 2;
loc_820BFB58:
	// bl 0x8210a860
	sub_8210A860(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bfb6c
	if (cr6.getEQ()) goto loc_820BFB6C;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r28,1356(r11)
	PPC_STORE_U32(r11.u32 + 1356, r28.u32);
loc_820BFB6C:
	// bl 0x8210a8d0
	sub_8210A8D0(ctx, base);
loc_820BFB70:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BFB74:
	// addi r3,r11,1728
	ctx.r3.s64 = r11.s64 + 1728;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// addi r3,r11,1728
	ctx.r3.s64 = r11.s64 + 1728;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f30,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f30.f64, ctx.f1.f64);
	// blt cr6,0x820bfd38
	if (cr6.getLT()) goto loc_820BFD38;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1356(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1356);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820bfd38
	if (cr6.getEQ()) goto loc_820BFD38;
	// lwz r10,1360(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1360);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820bfc2c
	if (!cr6.getEQ()) goto loc_820BFC2C;
	// stw r28,1360(r11)
	PPC_STORE_U32(r11.u32 + 1360, r28.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// lfs f0,13960(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13960);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stfs f31,1288(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 1288, temp.u32);
	// stfs f0,1292(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1292, temp.u32);
	// lwz r9,1272(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 1272);
	// lfs f13,2776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stw r9,1296(r11)
	PPC_STORE_U32(r11.u32 + 1296, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f1,12464(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12464);
	ctx.f1.f64 = double(temp.f32);
	// stw r30,1300(r11)
	PPC_STORE_U32(r11.u32 + 1300, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1276(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1276);
	// stw r10,1304(r11)
	PPC_STORE_U32(r11.u32 + 1304, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1308(r11)
	PPC_STORE_U32(r11.u32 + 1308, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,1280(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1280);
	// stw r10,1312(r11)
	PPC_STORE_U32(r11.u32 + 1312, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r30,1316(r11)
	PPC_STORE_U32(r11.u32 + 1316, r30.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,1284(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1284);
	f0.f64 = double(temp.f32);
	// stfs f0,1320(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1320, temp.u32);
	// stfs f13,1324(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 1324, temp.u32);
	// bl 0x820b2290
	sub_820B2290(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
loc_820BFC2C:
	// lfs f0,1292(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1292);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x820bfd38
	if (!cr6.getLT()) goto loc_820BFD38;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820bfc50
	if (!cr6.getEQ()) goto loc_820BFC50;
	// li r3,5
	ctx.r3.s64 = 5;
	// bl 0x820b5f70
	sub_820B5F70(ctx, base);
	// b 0x820bfd38
	goto loc_820BFD38;
loc_820BFC50:
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820bfc9c
	if (!cr6.getGT()) goto loc_820BFC9C;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// rlwinm r9,r31,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r10,-1360
	ctx.r10.s64 = ctx.r10.s64 + -1360;
	// addi r10,r10,36
	ctx.r10.s64 = ctx.r10.s64 + 36;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
loc_820BFC84:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r10,r10,112
	ctx.r10.s64 = ctx.r10.s64 + 112;
	// add r30,r30,r9
	r30.u64 = r30.u64 + ctx.r9.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820bfc84
	if (!cr6.getEQ()) goto loc_820BFC84;
loc_820BFC9C:
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// bne cr6,0x820bfcac
	if (!cr6.getEQ()) goto loc_820BFCAC;
	// cmpwi cr6,r30,2
	cr6.compare<int32_t>(r30.s32, 2, xer);
	// bge cr6,0x820bfd38
	if (!cr6.getLT()) goto loc_820BFD38;
loc_820BFCAC:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bfd14
	if (cr6.getEQ()) goto loc_820BFD14;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bfd14
	if (cr6.getEQ()) goto loc_820BFD14;
	// bl 0x820ca338
	sub_820CA338(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x820bfd38
	if (cr6.getEQ()) goto loc_820BFD38;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bfd38
	if (cr6.getEQ()) goto loc_820BFD38;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820ca110
	sub_820CA110(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x820bfd38
	if (cr6.getEQ()) goto loc_820BFD38;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r4,r4,45056
	ctx.r4.u64 = ctx.r4.u64 | 45056;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820bfd38
	if (cr6.getEQ()) goto loc_820BFD38;
	// stb r28,865(r31)
	PPC_STORE_U8(r31.u32 + 865, r28.u8);
	// b 0x820bfd38
	goto loc_820BFD38;
loc_820BFD14:
	// lis r11,0
	r11.s64 = 0;
	// ori r31,r11,45056
	r31.u64 = r11.u64 | 45056;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820ca110
	sub_820CA110(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820bfd38
	if (cr6.getEQ()) goto loc_820BFD38;
	// bl 0x820bf568
	sub_820BF568(ctx, base);
loc_820BFD38:
	// bl 0x820b4388
	sub_820B4388(ctx, base);
	// bl 0x820b4768
	sub_820B4768(ctx, base);
	// bl 0x820b3870
	sub_820B3870(ctx, base);
	// bl 0x820a64f0
	sub_820A64F0(ctx, base);
	// bl 0x820a5a18
	sub_820A5A18(ctx, base);
	// bl 0x820df930
	sub_820DF930(ctx, base);
	// bl 0x820ca520
	sub_820CA520(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820bfd78
	if (cr6.getEQ()) goto loc_820BFD78;
	// bl 0x820cb9d8
	sub_820CB9D8(ctx, base);
	// bl 0x820b1fa0
	sub_820B1FA0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820BFD78:
	// bl 0x820cbd58
	sub_820CBD58(ctx, base);
	// bl 0x820b1fa0
	sub_820B1FA0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820BFD90"))) PPC_WEAK_FUNC(sub_820BFD90);
PPC_FUNC_IMPL(__imp__sub_820BFD90) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r31,r11,-1820
	r31.s64 = r11.s64 + -1820;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820bfdc8
	if (cr6.getEQ()) goto loc_820BFDC8;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bfdc8
	if (cr6.getEQ()) goto loc_820BFDC8;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820BFDC8:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820bfde8
	if (cr6.getEQ()) goto loc_820BFDE8;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820bfde8
	if (cr6.getEQ()) goto loc_820BFDE8;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_820BFDE8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820BFE00"))) PPC_WEAK_FUNC(sub_820BFE00);
PPC_FUNC_IMPL(__imp__sub_820BFE00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	// addi r11,r3,-3
	r11.s64 = ctx.r3.s64 + -3;
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bgt cr6,0x820bff34
	if (cr6.getGT()) goto loc_820BFF34;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,-476
	r12.s64 = r12.s64 + -476;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820BFEDC;
	case 1:
		goto loc_820BFF34;
	case 2:
		goto loc_820BFF34;
	case 3:
		goto loc_820BFF34;
	case 4:
		goto loc_820BFF34;
	case 5:
		goto loc_820BFF34;
	case 6:
		goto loc_820BFF34;
	case 7:
		goto loc_820BFF34;
	case 8:
		goto loc_820BFF34;
	case 9:
		goto loc_820BFF34;
	case 10:
		goto loc_820BFF34;
	case 11:
		goto loc_820BFF34;
	case 12:
		goto loc_820BFF34;
	case 13:
		goto loc_820BFF34;
	case 14:
		goto loc_820BFF34;
	case 15:
		goto loc_820BFF34;
	case 16:
		goto loc_820BFF34;
	case 17:
		goto loc_820BFF34;
	case 18:
		goto loc_820BFF34;
	case 19:
		goto loc_820BFF34;
	case 20:
		goto loc_820BFF34;
	case 21:
		goto loc_820BFEE4;
	case 22:
		goto loc_820BFEEC;
	case 23:
		goto loc_820BFEF4;
	case 24:
		goto loc_820BFEFC;
	case 25:
		goto loc_820BFF04;
	case 26:
		goto loc_820BFF0C;
	case 27:
		goto loc_820BFF34;
	case 28:
		goto loc_820BFF34;
	case 29:
		goto loc_820BFEEC;
	case 30:
		goto loc_820BFF14;
	case 31:
		goto loc_820BFF1C;
	case 32:
		goto loc_820BFF34;
	case 33:
		goto loc_820BFF34;
	case 34:
		goto loc_820BFF34;
	case 35:
		goto loc_820BFF34;
	case 36:
		goto loc_820BFF34;
	case 37:
		goto loc_820BFF34;
	case 38:
		goto loc_820BFF34;
	case 39:
		goto loc_820BFF34;
	case 40:
		goto loc_820BFF34;
	case 41:
		goto loc_820BFF34;
	case 42:
		goto loc_820BFF34;
	case 43:
		goto loc_820BFF34;
	case 44:
		goto loc_820BFF24;
	case 45:
		goto loc_820BFF2C;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-292(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -292);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-284(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -284);
	// lwz r16,-276(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -276);
	// lwz r16,-268(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -268);
	// lwz r16,-260(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -260);
	// lwz r16,-252(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -252);
	// lwz r16,-244(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -244);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-276(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -276);
	// lwz r16,-236(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -236);
	// lwz r16,-228(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -228);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-204(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -204);
	// lwz r16,-220(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -220);
	// lwz r16,-212(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + -212);
loc_820BFEDC:
	// li r3,186
	ctx.r3.s64 = 186;
	// b 0x820bff30
	goto loc_820BFF30;
loc_820BFEE4:
	// li r3,203
	ctx.r3.s64 = 203;
	// b 0x820bff30
	goto loc_820BFF30;
loc_820BFEEC:
	// li r3,202
	ctx.r3.s64 = 202;
	// b 0x820bff30
	goto loc_820BFF30;
loc_820BFEF4:
	// li r3,196
	ctx.r3.s64 = 196;
	// b 0x820bff30
	goto loc_820BFF30;
loc_820BFEFC:
	// li r3,201
	ctx.r3.s64 = 201;
	// b 0x820bff30
	goto loc_820BFF30;
loc_820BFF04:
	// li r3,200
	ctx.r3.s64 = 200;
	// b 0x820bff30
	goto loc_820BFF30;
loc_820BFF0C:
	// li r3,199
	ctx.r3.s64 = 199;
	// b 0x820bff30
	goto loc_820BFF30;
loc_820BFF14:
	// li r3,226
	ctx.r3.s64 = 226;
	// b 0x820bff30
	goto loc_820BFF30;
loc_820BFF1C:
	// li r3,273
	ctx.r3.s64 = 273;
	// b 0x820bff30
	goto loc_820BFF30;
loc_820BFF24:
	// li r3,245
	ctx.r3.s64 = 245;
	// b 0x820bff30
	goto loc_820BFF30;
loc_820BFF2C:
	// li r3,246
	ctx.r3.s64 = 246;
loc_820BFF30:
	// b 0x820d03e8
	sub_820D03E8(ctx, base);
	return;
loc_820BFF34:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
	// .long 0x0
}

__attribute__((alias("__imp__sub_820BFF40"))) PPC_WEAK_FUNC(sub_820BFF40);
PPC_FUNC_IMPL(__imp__sub_820BFF40) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed548
	// stwu r1,-384(r1)
	ea = -384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r20,0
	r20.s64 = 0;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lfs f30,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f30.f64 = double(temp.f32);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// stfs f30,184(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 184, temp.u32);
	// stw r20,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r20.u32);
	// addi r14,r11,928
	r14.s64 = r11.s64 + 928;
	// stfs f30,188(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 188, temp.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stfs f30,192(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// fmr f28,f30
	f28.f64 = f30.f64;
	// lwz r31,8(r14)
	r31.u64 = PPC_LOAD_U32(r14.u32 + 8);
	// stw r11,4052(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4052, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1860(r30)
	PPC_STORE_U32(r30.u32 + -1860, r11.u32);
	// stw r11,-1868(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1868, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1864(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1864, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1856(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1856, r11.u32);
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// cmpwi cr6,r3,54
	cr6.compare<int32_t>(ctx.r3.s32, 54, xer);
	// bne cr6,0x820bffc0
	if (!cr6.getEQ()) goto loc_820BFFC0;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1860(r30)
	PPC_STORE_U32(r30.u32 + -1860, r11.u32);
loc_820BFFC0:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// mr r11,r20
	r11.u64 = r20.u64;
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// lis r21,-32014
	r21.s64 = -2098069504;
	// lis r25,-32014
	r25.s64 = -2098069504;
	// lis r28,-32014
	r28.s64 = -2098069504;
	// stw r11,-1852(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1852, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
	// addi r11,r11,-3020
	r11.s64 = r11.s64 + -3020;
	// stfs f30,-1884(r28)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r28.u32 + -1884, temp.u32);
	// stw r10,-1848(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1848, ctx.r10.u32);
	// stfs f30,0(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// stw r10,-1844(r21)
	PPC_STORE_U32(r21.u32 + -1844, ctx.r10.u32);
	// stfs f30,4(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stfs f30,8(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,-1840(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1840, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stfs f30,-1824(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + -1824, temp.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,-1892(r25)
	PPC_STORE_U32(r25.u32 + -1892, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f30,-1812(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + -1812, temp.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,-1836(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1836, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stfs f30,-1808(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + -1808, temp.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,-1832(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1832, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stfs f30,-1804(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + -1804, temp.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,-1828(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1828, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
	// stfs f30,-1800(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + -1800, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r11,r11,-1820
	r11.s64 = r11.s64 + -1820;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stfs f30,-1796(r10)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r10.u32 + -1796, temp.u32);
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stfs f30,-1792(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + -1792, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f30,-1788(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + -1788, temp.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,-1780(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1780, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stfs f30,-1784(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + -1784, temp.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,-1768(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1768, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// stfs f30,-1776(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + -1776, temp.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r11,16572(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16572, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stfs f30,-1772(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + -1772, temp.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,-1736(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1736, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1760(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1760, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stfs f30,-1744(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + -1744, temp.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,-1756(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1756, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1752(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1752, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15624(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15624);
	f0.f64 = double(temp.f32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lis r24,-32014
	r24.s64 = -2098069504;
	// lis r26,-32014
	r26.s64 = -2098069504;
	// lis r23,-32014
	r23.s64 = -2098069504;
	// stfs f0,16792(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 16792, temp.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// lis r22,-32014
	r22.s64 = -2098069504;
	// lis r27,-32014
	r27.s64 = -2098069504;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// lis r30,-32014
	r30.s64 = -2098069504;
	// stw r11,-1748(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1748, r11.u32);
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// li r11,1
	r11.s64 = 1;
	// stw r20,-1740(r22)
	PPC_STORE_U32(r22.u32 + -1740, r20.u32);
	// stw r20,-1732(r27)
	PPC_STORE_U32(r27.u32 + -1732, r20.u32);
	// stw r11,16568(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16568, r11.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1724(r24)
	PPC_STORE_U32(r24.u32 + -1724, r11.u32);
	// stw r11,-1728(r26)
	PPC_STORE_U32(r26.u32 + -1728, r11.u32);
	// stw r11,-3044(r10)
	PPC_STORE_U32(ctx.r10.u32 + -3044, r11.u32);
	// stw r11,-1712(r23)
	PPC_STORE_U32(r23.u32 + -1712, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r29,r11,-3028
	r29.s64 = r11.s64 + -3028;
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r11.u32);
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r19,r11,-3760
	r19.s64 = r11.s64 + -3760;
	// beq cr6,0x820c05f0
	if (cr6.getEQ()) goto loc_820C05F0;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,9
	cr6.compare<uint32_t>(r11.u32, 9, xer);
	// beq cr6,0x820c05f0
	if (cr6.getEQ()) goto loc_820C05F0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r15,r11,15584
	r15.s64 = r11.s64 + 15584;
	// lis r11,-30584
	r11.s64 = -2004353024;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// ori r16,r11,34953
	r16.u64 = r11.u64 | 34953;
	// lis r11,10922
	r11.s64 = 715784192;
	// lfs f29,3904(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 3904);
	f29.f64 = double(temp.f32);
	// ori r17,r11,43691
	r17.u64 = r11.u64 | 43691;
	// lis r11,3
	r11.s64 = 196608;
	// lfs f31,15620(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15620);
	f31.f64 = double(temp.f32);
	// ori r18,r11,19392
	r18.u64 = r11.u64 | 19392;
loc_820C01BC:
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r4,8
	cr6.compare<uint32_t>(ctx.r4.u32, 8, xer);
	// bgt cr6,0x820c057c
	if (cr6.getGT()) goto loc_820C057C;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,480
	r12.s64 = r12.s64 + 480;
	// rlwinm r0,r4,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r4.u64) {
	case 0:
		goto loc_820C0204;
	case 1:
		goto loc_820C024C;
	case 2:
		goto loc_820C02C0;
	case 3:
		goto loc_820C02E4;
	case 4:
		goto loc_820C039C;
	case 5:
		goto loc_820C03AC;
	case 6:
		goto loc_820C03C0;
	case 7:
		goto loc_820C04B4;
	case 8:
		goto loc_820C0554;
	default:
		__builtin_unreachable();
	}
	// lwz r16,516(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 516);
	// lwz r16,588(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 588);
	// lwz r16,704(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 704);
	// lwz r16,740(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 740);
	// lwz r16,924(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 924);
	// lwz r16,940(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 940);
	// lwz r16,960(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 960);
	// lwz r16,1204(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 1204);
	// lwz r16,1364(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 1364);
loc_820C0204:
	// lwz r11,24(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c0244
	if (cr6.getEQ()) goto loc_820C0244;
	// bl 0x8213d740
	sub_8213D740(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bne cr6,0x820c0244
	if (!cr6.getEQ()) goto loc_820C0244;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r9,24(r14)
	ctx.r9.u64 = PPC_LOAD_U32(r14.u32 + 24);
	// mulli r10,r11,44
	ctx.r10.s64 = r11.s64 * 44;
	// lwz r11,-1892(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -1892);
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stwx r10,r8,r19
	PPC_STORE_U32(ctx.r8.u32 + r19.u32, ctx.r10.u32);
	// stw r11,-1892(r25)
	PPC_STORE_U32(r25.u32 + -1892, r11.u32);
loc_820C0244:
	// addi r31,r31,12
	r31.s64 = r31.s64 + 12;
	// b 0x820c0588
	goto loc_820C0588;
loc_820C024C:
	// bl 0x8213d740
	sub_8213D740(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bne cr6,0x820c02b8
	if (!cr6.getEQ()) goto loc_820C02B8;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x820bfe00
	sub_820BFE00(ctx, base);
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x820c0284
	if (cr6.getLT()) goto loc_820C0284;
	// bl 0x820bfe00
	sub_820BFE00(ctx, base);
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x820c0ea0
	sub_820C0EA0(ctx, base);
	// b 0x820c028c
	goto loc_820C028C;
loc_820C0284:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
loc_820C028C:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c02b8
	if (!cr6.getEQ()) goto loc_820C02B8;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820c02b0
	if (cr6.getLT()) goto loc_820C02B0;
	// stw r11,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r11.u32);
loc_820C02B0:
	// li r11,1
	r11.s64 = 1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
loc_820C02B8:
	// addi r31,r31,16
	r31.s64 = r31.s64 + 16;
	// b 0x820c0588
	goto loc_820C0588;
loc_820C02C0:
	// bl 0x8213d740
	sub_8213D740(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bne cr6,0x820c02dc
	if (!cr6.getEQ()) goto loc_820C02DC;
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
loc_820C02DC:
	// addi r31,r31,16
	r31.s64 = r31.s64 + 16;
	// b 0x820c0588
	goto loc_820C0588;
loc_820C02E4:
	// lwz r11,-1740(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + -1740);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c02f4
	if (!cr6.getEQ()) goto loc_820C02F4;
	// stw r31,-1740(r22)
	PPC_STORE_U32(r22.u32 + -1740, r31.u32);
loc_820C02F4:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// lwz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// lwz r8,20(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// lwz r7,24(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// extsw r7,r7
	ctx.r7.s64 = ctx.r7.s32;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// std r10,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r10.u64);
	// std r9,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r9.u64);
	// std r8,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r8.u64);
	// std r7,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, ctx.r7.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,96(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// lfd f12,104(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lfd f11,112(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// lfd f10,120(r1)
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// fcfid f10,f10
	ctx.f10.f64 = double(ctx.f10.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// frsp f10,f10
	ctx.f10.f64 = double(float(ctx.f10.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// fmuls f0,f13,f31
	f0.f64 = double(float(ctx.f13.f64 * f31.f64));
	// stfs f0,12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// fmuls f0,f12,f31
	f0.f64 = double(float(ctx.f12.f64 * f31.f64));
	// stfs f0,16(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// fmuls f0,f11,f31
	f0.f64 = double(float(ctx.f11.f64 * f31.f64));
	// stfs f0,20(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// fmuls f0,f10,f31
	f0.f64 = double(float(ctx.f10.f64 * f31.f64));
	// stfs f0,24(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
	// addi r31,r31,32
	r31.s64 = r31.s64 + 32;
	// b 0x820c0588
	goto loc_820C0588;
loc_820C039C:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stw r11,-1712(r23)
	PPC_STORE_U32(r23.u32 + -1712, r11.u32);
loc_820C03A4:
	// addi r31,r31,8
	r31.s64 = r31.s64 + 8;
	// b 0x820c0588
	goto loc_820C0588;
loc_820C03AC:
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r31,r31,8
	r31.s64 = r31.s64 + 8;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r10,1348(r11)
	PPC_STORE_U32(r11.u32 + 1348, ctx.r10.u32);
	// b 0x820c0588
	goto loc_820C0588;
loc_820C03C0:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c04ac
	if (!cr6.getEQ()) goto loc_820C04AC;
	// lwz r11,-1732(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -1732);
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// lwz r11,-1728(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1728);
	// stw r31,-1732(r27)
	PPC_STORE_U32(r27.u32 + -1732, r31.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,-1728(r26)
	PPC_STORE_U32(r26.u32 + -1728, r11.u32);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// lwz r9,12(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// lwz r8,16(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// lwz r7,20(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// lwz r6,28(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// extsw r7,r7
	ctx.r7.s64 = ctx.r7.s32;
	// std r11,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, r11.u64);
	// clrlwi r3,r6,16
	ctx.r3.u64 = ctx.r6.u32 & 0xFFFF;
	// std r10,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, ctx.r10.u64);
	// std r9,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r9.u64);
	// std r8,152(r1)
	PPC_STORE_U64(ctx.r1.u32 + 152, ctx.r8.u64);
	// std r7,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, ctx.r7.u64);
	// lfd f0,128(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,136(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// lfd f12,144(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lfd f11,152(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 152);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// lfd f10,160(r1)
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// fcfid f10,f10
	ctx.f10.f64 = double(ctx.f10.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// frsp f10,f10
	ctx.f10.f64 = double(float(ctx.f10.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// fmuls f0,f13,f29
	f0.f64 = double(float(ctx.f13.f64 * f29.f64));
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// fmuls f0,f12,f29
	f0.f64 = double(float(ctx.f12.f64 * f29.f64));
	// stfs f0,12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// fmuls f0,f11,f31
	f0.f64 = double(float(ctx.f11.f64 * f31.f64));
	// stfs f0,16(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// fmuls f0,f10,f31
	f0.f64 = double(float(ctx.f10.f64 * f31.f64));
	// stfs f0,20(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// stw r3,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r3.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c04ac
	if (cr6.getEQ()) goto loc_820C04AC;
	// clrlwi r3,r11,16
	ctx.r3.u64 = r11.u32 & 0xFFFF;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// stw r3,32(r31)
	PPC_STORE_U32(r31.u32 + 32, ctx.r3.u32);
loc_820C04AC:
	// addi r31,r31,40
	r31.s64 = r31.s64 + 40;
	// b 0x820c0588
	goto loc_820C0588;
loc_820C04B4:
	// fmr f0,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = f30.f64;
	// stfs f0,-1884(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -1884, temp.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820c0500
	if (!cr6.getGT()) goto loc_820C0500;
	// mulhw r10,r11,r16
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r16.s32)) >> 32;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// srawi r10,r10,5
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1F) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 5;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mulli r10,r10,60
	ctx.r10.s64 = ctx.r10.s64 * 60;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// mulli r11,r11,3600
	r11.s64 = r11.s64 * 3600;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,168(r1)
	PPC_STORE_U64(ctx.r1.u32 + 168, r11.u64);
	// lfd f0,168(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 168);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,-1884(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -1884, temp.u32);
loc_820C0500:
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x820c054c
	if (!cr6.getGT()) goto loc_820C054C;
	// mulhw r11,r10,r17
	r11.s64 = (int64_t(ctx.r10.s32) * int64_t(r17.s32)) >> 32;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// rlwinm r9,r11,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// mullw r11,r11,r18
	r11.s64 = int64_t(r11.s32) * int64_t(r18.s32);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lfd f13,176(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,-1884(r28)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r28.u32 + -1884, temp.u32);
loc_820C054C:
	// addi r31,r31,12
	r31.s64 = r31.s64 + 12;
	// b 0x820c0588
	goto loc_820C0588;
loc_820C0554:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stw r11,-1844(r21)
	PPC_STORE_U32(r21.u32 + -1844, r11.u32);
loc_820C055C:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x820c0574
	if (!cr6.getEQ()) goto loc_820C0574;
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820c03a4
	if (cr6.getEQ()) goto loc_820C03A4;
loc_820C0574:
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// b 0x820c055c
	goto loc_820C055C;
loc_820C057C:
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
loc_820C0588:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,9
	cr6.compare<uint32_t>(r11.u32, 9, xer);
	// bne cr6,0x820c01bc
	if (!cr6.getEQ()) goto loc_820C01BC;
	// lwz r11,-1732(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -1732);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c05f0
	if (cr6.getEQ()) goto loc_820C05F0;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// stw r11,-1724(r24)
	PPC_STORE_U32(r24.u32 + -1724, r11.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,-1728(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + -1728);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// twllei r10,0
	// divwu r9,r11,r10
	ctx.r9.u32 = r11.u32 / ctx.r10.u32;
	// mullw r10,r9,r10
	ctx.r10.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820c05f0
	if (!cr6.getGT()) goto loc_820C05F0;
	// lwz r10,-1724(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + -1724);
loc_820C05DC:
	// lwz r10,36(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// stw r10,-1724(r24)
	PPC_STORE_U32(r24.u32 + -1724, ctx.r10.u32);
	// bgt cr6,0x820c05dc
	if (cr6.getGT()) goto loc_820C05DC;
loc_820C05F0:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c060c
	if (!cr6.getEQ()) goto loc_820C060C;
	// li r11,1
	r11.s64 = 1;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
loc_820C060C:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stfs f30,380(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 380, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15580(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15580);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stfs f0,384(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 384, temp.u32);
	// stfs f30,388(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 388, temp.u32);
	// lwz r11,-1892(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -1892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820c06b4
	if (!cr6.getGT()) goto loc_820C06B4;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x820c0654
	if (!cr6.getGT()) goto loc_820C0654;
	// lwz r11,-1892(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -1892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820c0654
	if (!cr6.getGT()) goto loc_820C0654;
	// bl 0x820af878
	sub_820AF878(ctx, base);
	// b 0x820c0658
	goto loc_820C0658;
loc_820C0654:
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
loc_820C0658:
	// rlwinm r29,r3,2,0,29
	r29.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r29,r19
	r11.u64 = PPC_LOAD_U32(r29.u32 + r19.u32);
	// lfs f1,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// stfs f1,184(r1)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(ctx.r1.u32 + 184, temp.u32);
	// lfs f2,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// stfs f2,192(r1)
	temp.f32 = float(ctx.f2.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// lwz r31,40(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820b2588
	sub_820B2588(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lfs f0,8252(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8252);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f31
	f0.f64 = double(float(f0.f64 + f31.f64));
	// stfs f0,188(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 188, temp.u32);
	// stfs f31,372(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 372, temp.u32);
	// lwzx r11,r29,r19
	r11.u64 = PPC_LOAD_U32(r29.u32 + r19.u32);
	// lfs f2,32(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,24(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,6588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fsubs f28,f0,f1
	f28.f64 = double(float(f0.f64 - ctx.f1.f64));
	// b 0x820c06f4
	goto loc_820C06F4;
loc_820C06B4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r1,192
	ctx.r5.s64 = ctx.r1.s64 + 192;
	// addi r4,r1,188
	ctx.r4.s64 = ctx.r1.s64 + 188;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// lfs f1,3112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82111ca0
	sub_82111CA0(ctx, base);
	// lfs f2,192(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	ctx.f2.f64 = double(temp.f32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lfs f1,184(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b2588
	sub_820B2588(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lfs f0,8252(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8252);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f31
	f0.f64 = double(float(f0.f64 + f31.f64));
	// stfs f0,188(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 188, temp.u32);
	// stfs f31,372(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 372, temp.u32);
loc_820C06F4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,184
	ctx.r4.s64 = ctx.r1.s64 + 184;
	// lfs f0,14308(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14308);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fmuls f0,f28,f0
	f0.f64 = double(float(f28.f64 * f0.f64));
	// stfs f0,596(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 596, temp.u32);
	// stfs f31,376(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 376, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15416(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15416);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fmuls f0,f31,f0
	f0.f64 = double(float(f31.f64 * f0.f64));
	// addi r3,r11,1456
	ctx.r3.s64 = r11.s64 + 1456;
	// stfs f0,368(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 368, temp.u32);
	// bl 0x820b0998
	sub_820B0998(ctx, base);
	// fmr f31,f28
	ctx.fpscr.disableFlushMode();
	f31.f64 = f28.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,1472(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1472, temp.u32);
	// stfs f30,1476(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 1476, temp.u32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// stfs f0,1480(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1480, temp.u32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f1,16588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16588);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b3c20
	sub_820B3C20(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r9,r20
	ctx.r9.u64 = r20.u64;
	// addi r11,r11,-3812
	r11.s64 = r11.s64 + -3812;
	// li r10,10
	ctx.r10.s64 = 10;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_820C0788:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x820c0788
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820C0788;
	// bl 0x820b40e8
	sub_820B40E8(ctx, base);
	// bl 0x820b45d0
	sub_820B45D0(ctx, base);
	// bl 0x820cca48
	sub_820CCA48(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// li r10,6
	ctx.r10.s64 = 6;
	// stw r3,428(r11)
	PPC_STORE_U32(r11.u32 + 428, ctx.r3.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// stw r20,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r20.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// lfs f0,184(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r10,-1364(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stfs f0,1328(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1328, temp.u32);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lfs f0,184(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	f0.f64 = double(temp.f32);
	// stfs f0,12(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// lfs f0,188(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	f0.f64 = double(temp.f32);
	// stfs f0,1332(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 1332, temp.u32);
	// lfs f0,188(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	f0.f64 = double(temp.f32);
	// stfs f0,16(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// lfs f0,192(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	f0.f64 = double(temp.f32);
	// stfs f0,1336(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 1336, temp.u32);
	// lfs f0,192(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 20, temp.u32);
	// stw r31,24(r11)
	PPC_STORE_U32(r11.u32 + 24, r31.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// bl 0x820ccb20
	sub_820CCB20(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// bl 0x820cca18
	sub_820CCA18(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,1500(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1500);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15612(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15612);
	f0.f64 = double(temp.f32);
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f13,1248(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 1248, temp.u32);
	// lfs f13,1504(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1504);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f13,1252(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 1252, temp.u32);
	// lfs f13,1508(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1508);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,1256(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1256, temp.u32);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// beq cr6,0x820c0860
	if (cr6.getEQ()) goto loc_820C0860;
	// li r3,9
	ctx.r3.s64 = 9;
loc_820C0860:
	// bl 0x820b5f70
	sub_820B5F70(ctx, base);
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// addi r10,r10,16596
	ctx.r10.s64 = ctx.r10.s64 + 16596;
	// mr r11,r20
	r11.u64 = r20.u64;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r11,-1720(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1720, r11.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820c089c
	if (cr6.getEQ()) goto loc_820C089C;
loc_820C0884:
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820c0884
	if (!cr6.getEQ()) goto loc_820C0884;
	// stw r11,-1720(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1720, r11.u32);
loc_820C089C:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,1352(r11)
	PPC_STORE_U32(r11.u32 + 1352, ctx.r10.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r20,1356(r11)
	PPC_STORE_U32(r11.u32 + 1356, r20.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r20,1360(r11)
	PPC_STORE_U32(r11.u32 + 1360, r20.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r11,-1716(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1716, r11.u32);
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed594
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_820C08D8"))) PPC_WEAK_FUNC(sub_820C08D8);
PPC_FUNC_IMPL(__imp__sub_820C08D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r10,r6
	ctx.r10.u64 = ctx.r6.u64;
	// lwz r11,-1364(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + -1364);
	// lwz r9,4752(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4752);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x820c091c
	if (!cr6.getGT()) goto loc_820C091C;
	// mr r9,r6
	ctx.r9.u64 = ctx.r6.u64;
	// li r7,-1
	ctx.r7.s64 = -1;
loc_820C08FC:
	// lwz r11,4748(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4748);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stwx r7,r11,r9
	PPC_STORE_U32(r11.u32 + ctx.r9.u32, ctx.r7.u32);
	// addi r9,r9,20
	ctx.r9.s64 = ctx.r9.s64 + 20;
	// lwz r11,-1364(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + -1364);
	// lwz r5,4752(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 4752);
	// cmpw cr6,r10,r5
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r5.s32, xer);
	// blt cr6,0x820c08fc
	if (cr6.getLT()) goto loc_820C08FC;
loc_820C091C:
	// stw r6,4744(r11)
	PPC_STORE_U32(r11.u32 + 4744, ctx.r6.u32);
	// lwz r11,-1364(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + -1364);
	// stw r6,4764(r11)
	PPC_STORE_U32(r11.u32 + 4764, ctx.r6.u32);
	// lwz r11,-1364(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + -1364);
	// stw r6,4760(r11)
	PPC_STORE_U32(r11.u32 + 4760, ctx.r6.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0938"))) PPC_WEAK_FUNC(sub_820C0938);
PPC_FUNC_IMPL(__imp__sub_820C0938) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r31{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,-1
	ctx.r4.s64 = -1;
	// li r31,-1
	r31.s64 = -1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c0958
	if (!cr6.getEQ()) goto loc_820C0958;
	// lwz r4,4(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// b 0x820c0978
	goto loc_820C0978;
loc_820C0958:
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x820c096c
	if (!cr6.getEQ()) goto loc_820C096C;
	// lwz r4,4(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r31,8(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// b 0x820c0978
	goto loc_820C0978;
loc_820C096C:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820c0978
	if (!cr6.getEQ()) goto loc_820C0978;
	// li r4,2000
	ctx.r4.s64 = 2000;
loc_820C0978:
	// lis r6,-32014
	ctx.r6.s64 = -2098069504;
	// lwz r10,12(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// lwz r11,-1364(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + -1364);
	// addi r5,r11,4744
	ctx.r5.s64 = r11.s64 + 4744;
	// lwz r9,4744(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4744);
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// beq cr6,0x820c0a4c
	if (cr6.getEQ()) goto loc_820C0A4C;
loc_820C0994:
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// li r9,-1
	ctx.r9.s64 = -1;
	// li r7,-1
	ctx.r7.s64 = -1;
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r8,1
	cr6.compare<int32_t>(ctx.r8.s32, 1, xer);
	// bne cr6,0x820c09b4
	if (!cr6.getEQ()) goto loc_820C09B4;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// b 0x820c09d4
	goto loc_820C09D4;
loc_820C09B4:
	// cmpwi cr6,r8,3
	cr6.compare<int32_t>(ctx.r8.s32, 3, xer);
	// bne cr6,0x820c09c8
	if (!cr6.getEQ()) goto loc_820C09C8;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r7,8(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// b 0x820c09d4
	goto loc_820C09D4;
loc_820C09C8:
	// cmpwi cr6,r8,2
	cr6.compare<int32_t>(ctx.r8.s32, 2, xer);
	// bne cr6,0x820c09d4
	if (!cr6.getEQ()) goto loc_820C09D4;
	// li r9,1000
	ctx.r9.s64 = 1000;
loc_820C09D4:
	// cmpw cr6,r4,r9
	cr6.compare<int32_t>(ctx.r4.s32, ctx.r9.s32, xer);
	// bgt cr6,0x820c09e8
	if (cr6.getGT()) goto loc_820C09E8;
	// bne cr6,0x820c0a4c
	if (!cr6.getEQ()) goto loc_820C0A4C;
	// cmpw cr6,r31,r7
	cr6.compare<int32_t>(r31.s32, ctx.r7.s32, xer);
	// ble cr6,0x820c0a4c
	if (!cr6.getGT()) goto loc_820C0A4C;
loc_820C09E8:
	// lwz r11,12(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// cmplw cr6,r11,r3
	cr6.compare<uint32_t>(r11.u32, ctx.r3.u32, xer);
	// bne cr6,0x820c09fc
	if (!cr6.getEQ()) goto loc_820C09FC;
	// stw r10,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r10.u32);
	// b 0x820c0a34
	goto loc_820C0A34;
loc_820C09FC:
	// lwz r9,16(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stw r9,16(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16, ctx.r9.u32);
	// stw r10,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r10.u32);
	// stw r3,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r3.u32);
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// stw r3,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r3.u32);
	// lwz r11,16(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,-1364(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + -1364);
	// lwz r9,4744(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4744);
	// cmplw cr6,r3,r9
	cr6.compare<uint32_t>(ctx.r3.u32, ctx.r9.u32, xer);
	// bne cr6,0x820c0a38
	if (!cr6.getEQ()) goto loc_820C0A38;
	// stw r10,4744(r11)
	PPC_STORE_U32(r11.u32 + 4744, ctx.r10.u32);
loc_820C0A34:
	// lwz r11,-1364(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + -1364);
loc_820C0A38:
	// addi r5,r11,4744
	ctx.r5.s64 = r11.s64 + 4744;
	// lwz r10,12(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// lwz r11,4744(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4744);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x820c0994
	if (!cr6.getEQ()) goto loc_820C0994;
loc_820C0A4C:
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0A58"))) PPC_WEAK_FUNC(sub_820C0A58);
PPC_FUNC_IMPL(__imp__sub_820C0A58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r9,4744(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4744);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820c0a98
	if (cr6.getEQ()) goto loc_820C0A98;
	// rotlwi r10,r9,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// stw r10,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r10.u32);
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r9,12(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// lwz r10,4744(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4744);
	// lwz r10,16(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// stw r10,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r10.u32);
	// stw r3,16(r9)
	PPC_STORE_U32(ctx.r9.u32 + 16, ctx.r3.u32);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// stw r3,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r3.u32);
	// b 0x820c0aa0
	goto loc_820C0AA0;
loc_820C0A98:
	// stw r3,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r3.u32);
	// stw r3,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r3.u32);
loc_820C0AA0:
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r3,4744(r11)
	PPC_STORE_U32(r11.u32 + 4744, ctx.r3.u32);
	// b 0x820c0938
	sub_820C0938(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820C0AB0"))) PPC_WEAK_FUNC(sub_820C0AB0);
PPC_FUNC_IMPL(__imp__sub_820C0AB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// lwz r9,16(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// lwz r10,-1364(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r8,4744(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4744);
	// cmplw cr6,r8,r3
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r3.u32, xer);
	// bne cr6,0x820c0af4
	if (!cr6.getEQ()) goto loc_820C0AF4;
	// cmplw cr6,r11,r3
	cr6.compare<uint32_t>(r11.u32, ctx.r3.u32, xer);
	// bne cr6,0x820c0af0
	if (!cr6.getEQ()) goto loc_820C0AF0;
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r8,4744(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4744, ctx.r8.u32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r9,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r9.u32);
	// stw r11,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// blr 
	return;
loc_820C0AF0:
	// stw r11,4744(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4744, r11.u32);
loc_820C0AF4:
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r9,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r9.u32);
	// stw r11,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0B08"))) PPC_WEAK_FUNC(sub_820C0B08);
PPC_FUNC_IMPL(__imp__sub_820C0B08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// li r11,0
	r11.s64 = 0;
	// lwz r9,4752(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4752);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x820c0b50
	if (!cr6.getGT()) goto loc_820C0B50;
	// lwz r8,4748(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4748);
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
loc_820C0B34:
	// lwz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r7,-1
	cr6.compare<int32_t>(ctx.r7.s32, -1, xer);
	// beq cr6,0x820c0b70
	if (cr6.getEQ()) goto loc_820C0B70;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x820c0b34
	if (cr6.getLT()) goto loc_820C0B34;
loc_820C0B50:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,15628
	ctx.r3.s64 = r11.s64 + 15628;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C0B70:
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r8
	ctx.r3.u64 = r11.u64 + ctx.r8.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0B90"))) PPC_WEAK_FUNC(sub_820C0B90);
PPC_FUNC_IMPL(__imp__sub_820C0B90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r3,4756(r11)
	PPC_STORE_U32(r11.u32 + 4756, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0BA0"))) PPC_WEAK_FUNC(sub_820C0BA0);
PPC_FUNC_IMPL(__imp__sub_820C0BA0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r3,4756(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4756);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0BB0"))) PPC_WEAK_FUNC(sub_820C0BB0);
PPC_FUNC_IMPL(__imp__sub_820C0BB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4744(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4744);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c0bf4
	if (cr6.getEQ()) goto loc_820C0BF4;
loc_820C0BC4:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// bne cr6,0x820c0bdc
	if (!cr6.getEQ()) goto loc_820C0BDC;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmpw cr6,r9,r3
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r3.s32, xer);
	// beq cr6,0x820c0bfc
	if (cr6.getEQ()) goto loc_820C0BFC;
loc_820C0BDC:
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r9,4744(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4744);
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x820c0bf4
	if (cr6.getEQ()) goto loc_820C0BF4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c0bc4
	if (!cr6.getEQ()) goto loc_820C0BC4;
loc_820C0BF4:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_820C0BFC:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0C08"))) PPC_WEAK_FUNC(sub_820C0C08);
PPC_FUNC_IMPL(__imp__sub_820C0C08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c0bb0
	sub_820C0BB0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0C38"))) PPC_WEAK_FUNC(sub_820C0C38);
PPC_FUNC_IMPL(__imp__sub_820C0C38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4744(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4744);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c0c88
	if (cr6.getEQ()) goto loc_820C0C88;
loc_820C0C4C:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r9,3
	cr6.compare<int32_t>(ctx.r9.s32, 3, xer);
	// bne cr6,0x820c0c70
	if (!cr6.getEQ()) goto loc_820C0C70;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmpw cr6,r9,r3
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r3.s32, xer);
	// bne cr6,0x820c0c70
	if (!cr6.getEQ()) goto loc_820C0C70;
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpw cr6,r9,r4
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r4.s32, xer);
	// beq cr6,0x820c0c90
	if (cr6.getEQ()) goto loc_820C0C90;
loc_820C0C70:
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r9,4744(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4744);
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x820c0c88
	if (cr6.getEQ()) goto loc_820C0C88;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c0c4c
	if (!cr6.getEQ()) goto loc_820C0C4C;
loc_820C0C88:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_820C0C90:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0C98"))) PPC_WEAK_FUNC(sub_820C0C98);
PPC_FUNC_IMPL(__imp__sub_820C0C98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c0c38
	sub_820C0C38(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0CC8"))) PPC_WEAK_FUNC(sub_820C0CC8);
PPC_FUNC_IMPL(__imp__sub_820C0CC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4756(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4756);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c0d24
	if (cr6.getEQ()) goto loc_820C0D24;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c0d24
	if (cr6.getEQ()) goto loc_820C0D24;
	// cmpwi cr6,r3,32
	cr6.compare<int32_t>(ctx.r3.s32, 32, xer);
	// bgt cr6,0x820c0d24
	if (cr6.getGT()) goto loc_820C0D24;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c0d10
	if (cr6.getEQ()) goto loc_820C0D10;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// beq cr6,0x820c0d24
	if (cr6.getEQ()) goto loc_820C0D24;
loc_820C0D10:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C0D24:
	// bl 0x820c0bb0
	sub_820C0BB0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0D48"))) PPC_WEAK_FUNC(sub_820C0D48);
PPC_FUNC_IMPL(__imp__sub_820C0D48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x820c0d74
	if (!cr6.getEQ()) goto loc_820C0D74;
loc_820C0D6C:
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x820c0de8
	goto loc_820C0DE8;
loc_820C0D74:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4756(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4756);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c0dd0
	if (cr6.getEQ()) goto loc_820C0DD0;
	// cmpwi cr6,r31,32
	cr6.compare<int32_t>(r31.s32, 32, xer);
	// bgt cr6,0x820c0dd0
	if (cr6.getGT()) goto loc_820C0DD0;
	// cmpw cr6,r31,r30
	cr6.compare<int32_t>(r31.s32, r30.s32, xer);
	// bne cr6,0x820c0dd0
	if (!cr6.getEQ()) goto loc_820C0DD0;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820c0dd0
	if (!cr6.getEQ()) goto loc_820C0DD0;
	// lis r4,16
	ctx.r4.s64 = 1048576;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c0dd0
	if (cr6.getEQ()) goto loc_820C0DD0;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c0d6c
	if (cr6.getEQ()) goto loc_820C0D6C;
	// cmpwi cr6,r31,2
	cr6.compare<int32_t>(r31.s32, 2, xer);
	// bne cr6,0x820c0d6c
	if (!cr6.getEQ()) goto loc_820C0D6C;
loc_820C0DD0:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c0c38
	sub_820C0C38(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
loc_820C0DE8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0E00"))) PPC_WEAK_FUNC(sub_820C0E00);
PPC_FUNC_IMPL(__imp__sub_820C0E00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820c0bb0
	sub_820C0BB0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c0e88
	if (!cr6.getEQ()) goto loc_820C0E88;
	// bl 0x820c0b08
	sub_820C0B08(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c0e3c
	if (cr6.getEQ()) goto loc_820C0E3C;
	// li r11,1
	r11.s64 = 1;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// bl 0x820c0a58
	sub_820C0A58(ctx, base);
loc_820C0E3C:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4756(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4756);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c0e70
	if (cr6.getEQ()) goto loc_820C0E70;
	// cmpwi cr6,r31,32
	cr6.compare<int32_t>(r31.s32, 32, xer);
	// bgt cr6,0x820c0e70
	if (cr6.getGT()) goto loc_820C0E70;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c0e88
	if (cr6.getEQ()) goto loc_820C0E88;
	// cmpwi cr6,r31,2
	cr6.compare<int32_t>(r31.s32, 2, xer);
	// bne cr6,0x820c0e88
	if (!cr6.getEQ()) goto loc_820C0E88;
loc_820C0E70:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820C0E88:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0EA0"))) PPC_WEAK_FUNC(sub_820C0EA0);
PPC_FUNC_IMPL(__imp__sub_820C0EA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x820c0c38
	sub_820C0C38(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c0ef0
	if (!cr6.getEQ()) goto loc_820C0EF0;
	// bl 0x820c0b08
	sub_820C0B08(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c0ee8
	if (cr6.getEQ()) goto loc_820C0EE8;
	// li r11,3
	r11.s64 = 3;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// stw r30,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r30.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// bl 0x820c0a58
	sub_820C0A58(ctx, base);
loc_820C0EE8:
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x820c0ef4
	goto loc_820C0EF4;
loc_820C0EF0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820C0EF4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0F10"))) PPC_WEAK_FUNC(sub_820C0F10);
PPC_FUNC_IMPL(__imp__sub_820C0F10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r8,4744(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4744);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x820c0fa4
	if (cr6.getEQ()) goto loc_820C0FA4;
	// rotlwi r11,r8,0
	r11.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
loc_820C0F38:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r9,12(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x820c0f78
	if (!cr6.getEQ()) goto loc_820C0F78;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmplwi cr6,r7,4
	cr6.compare<uint32_t>(ctx.r7.u32, 4, xer);
	// bne cr6,0x820c0f78
	if (!cr6.getEQ()) goto loc_820C0F78;
	// lwz r7,8(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lbz r10,3(r7)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r7.u32 + 3);
	// cmplwi cr6,r10,8
	cr6.compare<uint32_t>(ctx.r10.u32, 8, xer);
	// bne cr6,0x820c0f78
	if (!cr6.getEQ()) goto loc_820C0F78;
	// lbz r10,128(r7)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r7.u32 + 128);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r10,r3
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r3.s32, xer);
	// beq cr6,0x820c0f88
	if (cr6.getEQ()) goto loc_820C0F88;
loc_820C0F78:
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// beq cr6,0x820c0fa4
	if (cr6.getEQ()) goto loc_820C0FA4;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// b 0x820c0f38
	goto loc_820C0F38;
loc_820C0F88:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x820c0ab0
	sub_820C0AB0(ctx, base);
	// mr r3,r7
	ctx.r3.u64 = ctx.r7.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C0FA4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C0FB8"))) PPC_WEAK_FUNC(sub_820C0FB8);
PPC_FUNC_IMPL(__imp__sub_820C0FB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r6,-32014
	ctx.r6.s64 = -2098069504;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r9,-1364(r6)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r6.u32 + -1364);
	// lwz r10,4744(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4744);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820c1098
	if (cr6.getEQ()) goto loc_820C1098;
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// li r31,0
	r31.s64 = 0;
	// li r5,-1
	ctx.r5.s64 = -1;
	// lwz r3,12(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 12);
loc_820C0FF0:
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r7,12(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820c1038
	if (!cr6.getEQ()) goto loc_820C1038;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bne cr6,0x820c107c
	if (!cr6.getEQ()) goto loc_820C107C;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lbz r10,3(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// cmplwi cr6,r10,8
	cr6.compare<uint32_t>(ctx.r10.u32, 8, xer);
	// bne cr6,0x820c107c
	if (!cr6.getEQ()) goto loc_820C107C;
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpw cr6,r11,r4
	cr6.compare<int32_t>(r11.s32, ctx.r4.s32, xer);
	// bne cr6,0x820c107c
	if (!cr6.getEQ()) goto loc_820C107C;
	// bl 0x820c0ab0
	sub_820C0AB0(ctx, base);
	// b 0x820c1078
	goto loc_820C1078;
loc_820C1038:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c107c
	if (!cr6.getEQ()) goto loc_820C107C;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpw cr6,r11,r4
	cr6.compare<int32_t>(r11.s32, ctx.r4.s32, xer);
	// bne cr6,0x820c107c
	if (!cr6.getEQ()) goto loc_820C107C;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplw cr6,r10,r3
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r3.u32, xer);
	// bne cr6,0x820c106c
	if (!cr6.getEQ()) goto loc_820C106C;
	// cmplw cr6,r7,r3
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r3.u32, xer);
	// bne cr6,0x820c1068
	if (!cr6.getEQ()) goto loc_820C1068;
	// stw r31,4744(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4744, r31.u32);
	// b 0x820c106c
	goto loc_820C106C;
loc_820C1068:
	// stw r7,4744(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4744, ctx.r7.u32);
loc_820C106C:
	// stw r11,16(r7)
	PPC_STORE_U32(ctx.r7.u32 + 16, r11.u32);
	// stw r7,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r7.u32);
	// stw r5,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r5.u32);
loc_820C1078:
	// lwz r9,-1364(r6)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r6.u32 + -1364);
loc_820C107C:
	// lwz r10,4744(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4744);
	// cmplw cr6,r3,r10
	cr6.compare<uint32_t>(ctx.r3.u32, ctx.r10.u32, xer);
	// beq cr6,0x820c1098
	if (cr6.getEQ()) goto loc_820C1098;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820c1098
	if (cr6.getEQ()) goto loc_820C1098;
	// mr r3,r7
	ctx.r3.u64 = ctx.r7.u64;
	// b 0x820c0ff0
	goto loc_820C0FF0;
loc_820C1098:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C10B0"))) PPC_WEAK_FUNC(sub_820C10B0);
PPC_FUNC_IMPL(__imp__sub_820C10B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820c0b08
	sub_820C0B08(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1130
	if (cr6.getEQ()) goto loc_820C1130;
	// li r11,2
	r11.s64 = 2;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r9,4744(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4744);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820c111c
	if (cr6.getEQ()) goto loc_820C111C;
	// rotlwi r10,r9,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// stw r10,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r10.u32);
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r9,12(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// lwz r10,4744(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4744);
	// lwz r10,16(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// stw r10,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r10.u32);
	// stw r3,16(r9)
	PPC_STORE_U32(ctx.r9.u32 + 16, ctx.r3.u32);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// stw r3,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r3.u32);
	// b 0x820c1124
	goto loc_820C1124;
loc_820C111C:
	// stw r3,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r3.u32);
	// stw r3,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r3.u32);
loc_820C1124:
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r3,4744(r11)
	PPC_STORE_U32(r11.u32 + 4744, ctx.r3.u32);
	// bl 0x820c0938
	sub_820C0938(ctx, base);
loc_820C1130:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1148"))) PPC_WEAK_FUNC(sub_820C1148);
PPC_FUNC_IMPL(__imp__sub_820C1148) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bne cr6,0x820c1224
	if (!cr6.getEQ()) goto loc_820C1224;
	// lwz r30,8(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lbz r11,3(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 3);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x820c1224
	if (!cr6.getEQ()) goto loc_820C1224;
	// lbz r11,128(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 128);
	// extsb r31,r11
	r31.s64 = r11.s8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// lwz r8,132(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 132);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x820c11e4
	if (cr6.getEQ()) goto loc_820C11E4;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm r11,r11,0,3,3
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lbz r11,128(r8)
	r11.u64 = PPC_LOAD_U8(ctx.r8.u32 + 128);
	// beq cr6,0x820c11b8
	if (cr6.getEQ()) goto loc_820C11B8;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// b 0x820c11c0
	goto loc_820C11C0;
loc_820C11B8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
loc_820C11C0:
	// bl 0x820c0c38
	sub_820C0C38(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// stb r31,129(r8)
	PPC_STORE_U8(ctx.r8.u32 + 129, r31.u8);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lwz r11,132(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 132);
	// stw r29,132(r11)
	PPC_STORE_U32(r11.u32 + 132, r29.u32);
	// stw r29,132(r30)
	PPC_STORE_U32(r30.u32 + 132, r29.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820C11E4:
	// lbz r11,129(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 129);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820c1224
	if (cr6.getLT()) goto loc_820C1224;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm r10,r10,0,3,3
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x10000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820c1218
	if (cr6.getEQ()) goto loc_820C1218;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x820c0ea0
	sub_820C0EA0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820C1218:
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c0ea0
	sub_820C0EA0(ctx, base);
loc_820C1224:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820C1230"))) PPC_WEAK_FUNC(sub_820C1230);
PPC_FUNC_IMPL(__imp__sub_820C1230) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// mr r24,r4
	r24.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r29,0(r25)
	r29.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// lwz r27,0(r24)
	r27.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// lwz r10,4744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4744);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820c132c
	if (cr6.getEQ()) goto loc_820C132C;
	// lwz r11,4744(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4744);
	// lwz r31,16(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 16);
loc_820C126C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c12b4
	if (!cr6.getEQ()) goto loc_820C12B4;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmpwi cr6,r3,32
	cr6.compare<int32_t>(ctx.r3.s32, 32, xer);
	// bgt cr6,0x820c12fc
	if (cr6.getGT()) goto loc_820C12FC;
	// cmpw cr6,r3,r29
	cr6.compare<int32_t>(ctx.r3.s32, r29.s32, xer);
	// blt cr6,0x820c1298
	if (cr6.getLT()) goto loc_820C1298;
	// bne cr6,0x820c12fc
	if (!cr6.getEQ()) goto loc_820C12FC;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// ble cr6,0x820c12fc
	if (!cr6.getGT()) goto loc_820C12FC;
loc_820C1298:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820c12ac
	if (cr6.getEQ()) goto loc_820C12AC;
	// bl 0x820a7638
	sub_820A7638(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c12fc
	if (cr6.getEQ()) goto loc_820C12FC;
loc_820C12AC:
	// li r27,0
	r27.s64 = 0;
	// b 0x820c1328
	goto loc_820C1328;
loc_820C12B4:
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x820c12fc
	if (!cr6.getEQ()) goto loc_820C12FC;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmpw cr6,r3,r29
	cr6.compare<int32_t>(ctx.r3.s32, r29.s32, xer);
	// blt cr6,0x820c12d8
	if (cr6.getLT()) goto loc_820C12D8;
	// bne cr6,0x820c12fc
	if (!cr6.getEQ()) goto loc_820C12FC;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r11,r27
	cr6.compare<int32_t>(r11.s32, r27.s32, xer);
	// bge cr6,0x820c12fc
	if (!cr6.getLT()) goto loc_820C12FC;
loc_820C12D8:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820c1324
	if (cr6.getEQ()) goto loc_820C1324;
	// bl 0x820a7638
	sub_820A7638(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c1324
	if (!cr6.getEQ()) goto loc_820C1324;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x820a7638
	sub_820A7638(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c1324
	if (!cr6.getEQ()) goto loc_820C1324;
loc_820C12FC:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,4744(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4744);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bne cr6,0x820c131c
	if (!cr6.getEQ()) goto loc_820C131C;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bne cr6,0x820c132c
	if (!cr6.getEQ()) goto loc_820C132C;
	// li r29,1000
	r29.s64 = 1000;
	// li r27,1000
	r27.s64 = 1000;
loc_820C131C:
	// lwz r31,16(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// b 0x820c126c
	goto loc_820C126C;
loc_820C1324:
	// lwz r27,8(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 8);
loc_820C1328:
	// lwz r29,4(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 4);
loc_820C132C:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// lwz r11,4756(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4756);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c14b0
	if (cr6.getEQ()) goto loc_820C14B0;
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// lis r10,15887
	ctx.r10.s64 = 1041170432;
	// lwz r31,0(r25)
	r31.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// ori r30,r10,33761
	r30.u64 = ctx.r10.u64 | 33761;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c1380
	if (!cr6.getEQ()) goto loc_820C1380;
	// addi r11,r31,32
	r11.s64 = r31.s64 + 32;
	// mulhw r10,r11,r30
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r30.s32)) >> 32;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,5,0,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0xFFFFFFE0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// subf r31,r10,r11
	r31.s64 = r11.s64 - ctx.r10.s64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bne cr6,0x820c1380
	if (!cr6.getEQ()) goto loc_820C1380;
	// li r31,32
	r31.s64 = 32;
loc_820C1380:
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// lis r28,-31994
	r28.s64 = -2096758784;
	// beq cr6,0x820c13ec
	if (cr6.getEQ()) goto loc_820C13EC;
loc_820C138C:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820c13a4
	if (cr6.getEQ()) goto loc_820C13A4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a7638
	sub_820A7638(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c13b8
	if (cr6.getEQ()) goto loc_820C13B8;
loc_820C13A4:
	// lwz r11,11488(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 11488);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c1470
	if (cr6.getEQ()) goto loc_820C1470;
	// cmpwi cr6,r31,2
	cr6.compare<int32_t>(r31.s32, 2, xer);
	// bne cr6,0x820c1470
	if (!cr6.getEQ()) goto loc_820C1470;
loc_820C13B8:
	// addi r11,r31,32
	r11.s64 = r31.s64 + 32;
	// mulhw r10,r11,r30
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r30.s32)) >> 32;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,5,0,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0xFFFFFFE0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// subf r31,r10,r11
	r31.s64 = r11.s64 - ctx.r10.s64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bne cr6,0x820c13e4
	if (!cr6.getEQ()) goto loc_820C13E4;
	// li r31,32
	r31.s64 = 32;
loc_820C13E4:
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// bne cr6,0x820c138c
	if (!cr6.getEQ()) goto loc_820C138C;
loc_820C13EC:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820c14b0
	if (!cr6.getEQ()) goto loc_820C14B0;
	// lis r4,16
	ctx.r4.s64 = 1048576;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c14b0
	if (cr6.getEQ()) goto loc_820C14B0;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x820c1424
	if (cr6.getEQ()) goto loc_820C1424;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a7638
	sub_820A7638(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c14b0
	if (cr6.getEQ()) goto loc_820C14B0;
loc_820C1424:
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// bne cr6,0x820c143c
	if (!cr6.getEQ()) goto loc_820C143C;
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmpw cr6,r11,r31
	cr6.compare<int32_t>(r11.s32, r31.s32, xer);
	// ble cr6,0x820c14b0
	if (!cr6.getGT()) goto loc_820C14B0;
loc_820C143C:
	// cmpw cr6,r31,r27
	cr6.compare<int32_t>(r31.s32, r27.s32, xer);
	// ble cr6,0x820c14b0
	if (!cr6.getGT()) goto loc_820C14B0;
	// lwz r11,11488(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 11488);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c1458
	if (cr6.getEQ()) goto loc_820C1458;
	// cmpwi cr6,r31,2
	cr6.compare<int32_t>(r31.s32, 2, xer);
	// beq cr6,0x820c14b0
	if (cr6.getEQ()) goto loc_820C14B0;
loc_820C1458:
	// mr r29,r31
	r29.u64 = r31.u64;
	// mr r27,r31
	r27.u64 = r31.u64;
	// stw r29,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r29.u32);
	// stw r27,0(r24)
	PPC_STORE_U32(r24.u32 + 0, r27.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
loc_820C1470:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820c14a8
	if (!cr6.getEQ()) goto loc_820C14A8;
	// lis r4,16
	ctx.r4.s64 = 1048576;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c14a8
	if (cr6.getEQ()) goto loc_820C14A8;
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// bne cr6,0x820c1458
	if (!cr6.getEQ()) goto loc_820C1458;
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmpw cr6,r11,r31
	cr6.compare<int32_t>(r11.s32, r31.s32, xer);
	// bgt cr6,0x820c1458
	if (cr6.getGT()) goto loc_820C1458;
loc_820C14A8:
	// li r27,0
	r27.s64 = 0;
	// mr r29,r31
	r29.u64 = r31.u64;
loc_820C14B0:
	// stw r29,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r29.u32);
	// stw r27,0(r24)
	PPC_STORE_U32(r24.u32 + 0, r27.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_820C14C0"))) PPC_WEAK_FUNC(sub_820C14C0);
PPC_FUNC_IMPL(__imp__sub_820C14C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r8,-1364(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4744(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4744);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c1530
	if (cr6.getEQ()) goto loc_820C1530;
loc_820C14D8:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x820c1518
	if (!cr6.getEQ()) goto loc_820C1518;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmplwi cr6,r7,1
	cr6.compare<uint32_t>(ctx.r7.u32, 1, xer);
	// bne cr6,0x820c1518
	if (!cr6.getEQ()) goto loc_820C1518;
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lbz r7,3(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 3);
	// cmplwi cr6,r7,4
	cr6.compare<uint32_t>(ctx.r7.u32, 4, xer);
	// bne cr6,0x820c1518
	if (!cr6.getEQ()) goto loc_820C1518;
	// lwz r10,128(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 128);
	// or r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 | ctx.r9.u64;
	// and r10,r9,r3
	ctx.r10.u64 = ctx.r9.u64 & ctx.r3.u64;
	// cmplw cr6,r10,r3
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r3.u32, xer);
	// beq cr6,0x820c1538
	if (cr6.getEQ()) goto loc_820C1538;
loc_820C1518:
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r10,4744(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4744);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x820c1530
	if (cr6.getEQ()) goto loc_820C1530;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c14d8
	if (!cr6.getEQ()) goto loc_820C14D8;
loc_820C1530:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_820C1538:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1540"))) PPC_WEAK_FUNC(sub_820C1540);
PPC_FUNC_IMPL(__imp__sub_820C1540) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r9,-1364(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4744(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4744);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c1598
	if (cr6.getEQ()) goto loc_820C1598;
loc_820C1554:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x820c1580
	if (!cr6.getEQ()) goto loc_820C1580;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmplwi cr6,r8,4
	cr6.compare<uint32_t>(ctx.r8.u32, 4, xer);
	// bne cr6,0x820c1580
	if (!cr6.getEQ()) goto loc_820C1580;
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lhz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 4);
	// cmplwi cr6,r10,248
	cr6.compare<uint32_t>(ctx.r10.u32, 248, xer);
	// beq cr6,0x820c15a0
	if (cr6.getEQ()) goto loc_820C15A0;
loc_820C1580:
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r10,4744(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4744);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x820c1598
	if (cr6.getEQ()) goto loc_820C1598;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c1554
	if (!cr6.getEQ()) goto loc_820C1554;
loc_820C1598:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_820C15A0:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C15A8"))) PPC_WEAK_FUNC(sub_820C15A8);
PPC_FUNC_IMPL(__imp__sub_820C15A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,480(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c15ec
	if (!cr6.getEQ()) goto loc_820C15EC;
	// li r3,88
	ctx.r3.s64 = 88;
	// bl 0x820c0bb0
	sub_820C0BB0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C15EC:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1600"))) PPC_WEAK_FUNC(sub_820C1600);
PPC_FUNC_IMPL(__imp__sub_820C1600) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,19
	ctx.r3.s64 = 19;
	// bl 0x820c0bb0
	sub_820C0BB0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1630"))) PPC_WEAK_FUNC(sub_820C1630);
PPC_FUNC_IMPL(__imp__sub_820C1630) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4744(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4744);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c1674
	if (cr6.getEQ()) goto loc_820C1674;
loc_820C1644:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r9,2
	cr6.compare<int32_t>(ctx.r9.s32, 2, xer);
	// bne cr6,0x820c165c
	if (!cr6.getEQ()) goto loc_820C165C;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r3,r9
	cr6.compare<uint32_t>(ctx.r3.u32, ctx.r9.u32, xer);
	// beq cr6,0x820c167c
	if (cr6.getEQ()) goto loc_820C167C;
loc_820C165C:
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r9,4744(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4744);
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x820c1674
	if (cr6.getEQ()) goto loc_820C1674;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c1644
	if (!cr6.getEQ()) goto loc_820C1644;
loc_820C1674:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_820C167C:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1688"))) PPC_WEAK_FUNC(sub_820C1688);
PPC_FUNC_IMPL(__imp__sub_820C1688) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r7,4756(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4756);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq cr6,0x820c16b4
	if (cr6.getEQ()) goto loc_820C16B4;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r3,r11,31
	ctx.r3.s64 = r11.s64 + 31;
loc_820C16B4:
	// lwz r9,4744(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4744);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// rotlwi r8,r9,0
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
loc_820C16C4:
	// lwz r11,0(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820c1718
	if (!cr6.getEQ()) goto loc_820C1718;
	// lwz r11,4(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bne cr6,0x820c16f8
	if (!cr6.getEQ()) goto loc_820C16F8;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// rlwinm r11,r11,0,21,21
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c1738
	if (cr6.getEQ()) goto loc_820C1738;
	// b 0x820c1734
	goto loc_820C1734;
loc_820C16F8:
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// bne cr6,0x820c1738
	if (!cr6.getEQ()) goto loc_820C1738;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// rlwinm r11,r11,0,13,13
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c1738
	if (!cr6.getEQ()) goto loc_820C1738;
	// b 0x820c1734
	goto loc_820C1734;
loc_820C1718:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c1738
	if (!cr6.getEQ()) goto loc_820C1738;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq cr6,0x820c1734
	if (cr6.getEQ()) goto loc_820C1734;
	// lwz r11,4(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// cmpwi cr6,r11,32
	cr6.compare<int32_t>(r11.s32, 32, xer);
	// ble cr6,0x820c1738
	if (!cr6.getGT()) goto loc_820C1738;
loc_820C1734:
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820C1738:
	// lwz r9,12(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 12);
	// cmplw cr6,r9,r8
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r8.u32, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820c16c4
	if (!cr6.getEQ()) goto loc_820C16C4;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1750"))) PPC_WEAK_FUNC(sub_820C1750);
PPC_FUNC_IMPL(__imp__sub_820C1750) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// lwz r8,-1364(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r7,4756(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4756);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq cr6,0x820c1788
	if (cr6.getEQ()) goto loc_820C1788;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r11,r11,31
	r11.s64 = r11.s64 + 31;
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// blt cr6,0x820c1828
	if (cr6.getLT()) goto loc_820C1828;
	// subf r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
loc_820C1788:
	// lwz r3,4744(r8)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4744);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1828
	if (cr6.getEQ()) goto loc_820C1828;
loc_820C1794:
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820c17e8
	if (!cr6.getEQ()) goto loc_820C17E8;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bne cr6,0x820c17c8
	if (!cr6.getEQ()) goto loc_820C17C8;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// rlwinm r11,r11,0,21,21
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c1810
	if (cr6.getEQ()) goto loc_820C1810;
	// b 0x820c1804
	goto loc_820C1804;
loc_820C17C8:
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// bne cr6,0x820c1810
	if (!cr6.getEQ()) goto loc_820C1810;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// rlwinm r11,r11,0,13,13
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c1810
	if (!cr6.getEQ()) goto loc_820C1810;
	// b 0x820c1804
	goto loc_820C1804;
loc_820C17E8:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c1810
	if (!cr6.getEQ()) goto loc_820C1810;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq cr6,0x820c1804
	if (cr6.getEQ()) goto loc_820C1804;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,32
	cr6.compare<int32_t>(r11.s32, 32, xer);
	// ble cr6,0x820c1810
	if (!cr6.getGT()) goto loc_820C1810;
loc_820C1804:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
loc_820C1810:
	// lwz r3,12(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// lwz r11,4744(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4744);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x820c1828
	if (cr6.getEQ()) goto loc_820C1828;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c1794
	if (!cr6.getEQ()) goto loc_820C1794;
loc_820C1828:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1830"))) PPC_WEAK_FUNC(sub_820C1830);
PPC_FUNC_IMPL(__imp__sub_820C1830) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4764(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4764);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c185c
	if (cr6.getEQ()) goto loc_820C185C;
loc_820C1844:
	// lwz r10,36(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplw cr6,r10,r3
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r3.u32, xer);
	// beq cr6,0x820c1864
	if (cr6.getEQ()) goto loc_820C1864;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c1844
	if (!cr6.getEQ()) goto loc_820C1844;
loc_820C185C:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_820C1864:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1870"))) PPC_WEAK_FUNC(sub_820C1870);
PPC_FUNC_IMPL(__imp__sub_820C1870) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4764(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4764);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c18a8
	if (cr6.getEQ()) goto loc_820C18A8;
loc_820C1884:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x820c189c
	if (!cr6.getEQ()) goto loc_820C189C;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpw cr6,r10,r3
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r3.s32, xer);
	// beq cr6,0x820c18b0
	if (cr6.getEQ()) goto loc_820C18B0;
loc_820C189C:
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c1884
	if (!cr6.getEQ()) goto loc_820C1884;
loc_820C18A8:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_820C18B0:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C18B8"))) PPC_WEAK_FUNC(sub_820C18B8);
PPC_FUNC_IMPL(__imp__sub_820C18B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r7,-1364(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r6,4756(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4756);
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x820c18e8
	if (cr6.getEQ()) goto loc_820C18E8;
	// cmpwi cr6,r8,32
	cr6.compare<int32_t>(ctx.r8.s32, 32, xer);
	// bgt cr6,0x820c18e4
	if (cr6.getGT()) goto loc_820C18E4;
	// addi r3,r8,-1
	ctx.r3.s64 = ctx.r8.s64 + -1;
	// blr 
	return;
loc_820C18E4:
	// li r3,32
	ctx.r3.s64 = 32;
loc_820C18E8:
	// lwz r9,4744(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4744);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x820c19c0
	if (cr6.getEQ()) goto loc_820C19C0;
loc_820C18F4:
	// lwz r11,0(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820c197c
	if (!cr6.getEQ()) goto loc_820C197C;
	// lwz r11,4(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bne cr6,0x820c1930
	if (!cr6.getEQ()) goto loc_820C1930;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r10,100(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// rlwinm r10,r10,0,21,21
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820c19a8
	if (cr6.getEQ()) goto loc_820C19A8;
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// b 0x820c199c
	goto loc_820C199C;
loc_820C1930:
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// bne cr6,0x820c19a8
	if (!cr6.getEQ()) goto loc_820C19A8;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,12(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// rlwinm r11,r11,0,13,13
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c19a8
	if (!cr6.getEQ()) goto loc_820C19A8;
	// lwz r11,4764(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4764);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c19a4
	if (cr6.getEQ()) goto loc_820C19A4;
loc_820C1958:
	// lwz r5,36(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplw cr6,r5,r10
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r10.u32, xer);
	// beq cr6,0x820c1974
	if (cr6.getEQ()) goto loc_820C1974;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c1958
	if (!cr6.getEQ()) goto loc_820C1958;
	// b 0x820c19a4
	goto loc_820C19A4;
loc_820C1974:
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// b 0x820c199c
	goto loc_820C199C;
loc_820C197C:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c19a8
	if (!cr6.getEQ()) goto loc_820C19A8;
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x820c1998
	if (cr6.getEQ()) goto loc_820C1998;
	// lwz r11,4(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// cmpwi cr6,r11,32
	cr6.compare<int32_t>(r11.s32, 32, xer);
	// ble cr6,0x820c19a8
	if (!cr6.getGT()) goto loc_820C19A8;
loc_820C1998:
	// lwz r11,4(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
loc_820C199C:
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
loc_820C19A4:
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820C19A8:
	// lwz r9,12(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 12);
	// lwz r11,4744(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4744);
	// cmplw cr6,r9,r11
	cr6.compare<uint32_t>(ctx.r9.u32, r11.u32, xer);
	// beq cr6,0x820c19c0
	if (cr6.getEQ()) goto loc_820C19C0;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820c18f4
	if (!cr6.getEQ()) goto loc_820C18F4;
loc_820C19C0:
	// li r3,-1
	ctx.r3.s64 = -1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C19C8"))) PPC_WEAK_FUNC(sub_820C19C8);
PPC_FUNC_IMPL(__imp__sub_820C19C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820c1a18
	if (!cr6.getEQ()) goto loc_820C1A18;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4764(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4764);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c1a08
	if (cr6.getEQ()) goto loc_820C1A08;
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
loc_820C19F0:
	// lwz r9,36(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// beq cr6,0x820c1a10
	if (cr6.getEQ()) goto loc_820C1A10;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c19f0
	if (!cr6.getEQ()) goto loc_820C19F0;
loc_820C1A08:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_820C1A10:
	// lwz r3,8(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// blr 
	return;
loc_820C1A18:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c1a08
	if (!cr6.getEQ()) goto loc_820C1A08;
	// lwz r3,4(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1A28"))) PPC_WEAK_FUNC(sub_820C1A28);
PPC_FUNC_IMPL(__imp__sub_820C1A28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// bl 0x820c1750
	sub_820C1750(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1af0
	if (cr6.getEQ()) goto loc_820C1AF0;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820c1ab4
	if (!cr6.getEQ()) goto loc_820C1AB4;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4764(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4764);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c1a88
	if (cr6.getEQ()) goto loc_820C1A88;
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
loc_820C1A70:
	// lwz r8,36(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplw cr6,r8,r10
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r10.u32, xer);
	// beq cr6,0x820c1aa0
	if (cr6.getEQ()) goto loc_820C1AA0;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c1a70
	if (!cr6.getEQ()) goto loc_820C1A70;
loc_820C1A88:
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// bl 0x820a42f0
	sub_820A42F0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C1AA0:
	// lwz r3,20(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c1adc
	if (!cr6.getEQ()) goto loc_820C1ADC;
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// b 0x820c1a88
	goto loc_820C1A88;
loc_820C1AB4:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c1a88
	if (!cr6.getEQ()) goto loc_820C1A88;
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// bl 0x820c1870
	sub_820C1870(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1a88
	if (cr6.getEQ()) goto loc_820C1A88;
	// lwz r3,20(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1a88
	if (cr6.getEQ()) goto loc_820C1A88;
loc_820C1ADC:
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C1AF0:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4756(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4756);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c1a88
	if (cr6.getEQ()) goto loc_820C1A88;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cntlzw r10,r11
	ctx.r10.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// addi r10,r10,31
	ctx.r10.s64 = ctx.r10.s64 + 31;
	// cmpw cr6,r6,r10
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r10.s32, xer);
	// bge cr6,0x820c1a88
	if (!cr6.getLT()) goto loc_820C1A88;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c1b4c
	if (cr6.getEQ()) goto loc_820C1B4C;
	// addi r11,r6,1
	r11.s64 = ctx.r6.s64 + 1;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// blt cr6,0x820c1b4c
	if (cr6.getLT()) goto loc_820C1B4C;
	// addi r3,r6,2
	ctx.r3.s64 = ctx.r6.s64 + 2;
	// bl 0x820a42f0
	sub_820A42F0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C1B4C:
	// addi r3,r6,1
	ctx.r3.s64 = ctx.r6.s64 + 1;
	// bl 0x820a42f0
	sub_820A42F0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1B68"))) PPC_WEAK_FUNC(sub_820C1B68);
PPC_FUNC_IMPL(__imp__sub_820C1B68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// bl 0x820c1750
	sub_820C1750(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1c30
	if (cr6.getEQ()) goto loc_820C1C30;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820c1bf4
	if (!cr6.getEQ()) goto loc_820C1BF4;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4764(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4764);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c1bc8
	if (cr6.getEQ()) goto loc_820C1BC8;
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
loc_820C1BB0:
	// lwz r8,36(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplw cr6,r8,r10
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r10.u32, xer);
	// beq cr6,0x820c1be0
	if (cr6.getEQ()) goto loc_820C1BE0;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c1bb0
	if (!cr6.getEQ()) goto loc_820C1BB0;
loc_820C1BC8:
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// bl 0x820a42c0
	sub_820A42C0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C1BE0:
	// lwz r3,12(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c1c1c
	if (!cr6.getEQ()) goto loc_820C1C1C;
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// b 0x820c1bc8
	goto loc_820C1BC8;
loc_820C1BF4:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c1bc8
	if (!cr6.getEQ()) goto loc_820C1BC8;
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// bl 0x820c1870
	sub_820C1870(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1bc8
	if (cr6.getEQ()) goto loc_820C1BC8;
	// lwz r3,12(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1bc8
	if (cr6.getEQ()) goto loc_820C1BC8;
loc_820C1C1C:
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C1C30:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4756(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4756);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c1bc8
	if (cr6.getEQ()) goto loc_820C1BC8;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cntlzw r10,r11
	ctx.r10.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// addi r10,r10,31
	ctx.r10.s64 = ctx.r10.s64 + 31;
	// cmpw cr6,r6,r10
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r10.s32, xer);
	// bge cr6,0x820c1bc8
	if (!cr6.getLT()) goto loc_820C1BC8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c1c8c
	if (cr6.getEQ()) goto loc_820C1C8C;
	// addi r11,r6,1
	r11.s64 = ctx.r6.s64 + 1;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// blt cr6,0x820c1c8c
	if (cr6.getLT()) goto loc_820C1C8C;
	// addi r3,r6,2
	ctx.r3.s64 = ctx.r6.s64 + 2;
	// bl 0x820a42c0
	sub_820A42C0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C1C8C:
	// addi r3,r6,1
	ctx.r3.s64 = ctx.r6.s64 + 1;
	// bl 0x820a42c0
	sub_820A42C0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1CA8"))) PPC_WEAK_FUNC(sub_820C1CA8);
PPC_FUNC_IMPL(__imp__sub_820C1CA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// bl 0x820c1750
	sub_820C1750(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1d70
	if (cr6.getEQ()) goto loc_820C1D70;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820c1d34
	if (!cr6.getEQ()) goto loc_820C1D34;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4764(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4764);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c1d08
	if (cr6.getEQ()) goto loc_820C1D08;
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
loc_820C1CF0:
	// lwz r8,36(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplw cr6,r8,r10
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r10.u32, xer);
	// beq cr6,0x820c1d20
	if (cr6.getEQ()) goto loc_820C1D20;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c1cf0
	if (!cr6.getEQ()) goto loc_820C1CF0;
loc_820C1D08:
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// bl 0x820a42d8
	sub_820A42D8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C1D20:
	// lwz r3,16(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c1d5c
	if (!cr6.getEQ()) goto loc_820C1D5C;
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// b 0x820c1d08
	goto loc_820C1D08;
loc_820C1D34:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c1d08
	if (!cr6.getEQ()) goto loc_820C1D08;
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// bl 0x820c1870
	sub_820C1870(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1d08
	if (cr6.getEQ()) goto loc_820C1D08;
	// lwz r3,16(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1d08
	if (cr6.getEQ()) goto loc_820C1D08;
loc_820C1D5C:
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C1D70:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4756(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4756);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c1d08
	if (cr6.getEQ()) goto loc_820C1D08;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cntlzw r10,r11
	ctx.r10.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// addi r10,r10,31
	ctx.r10.s64 = ctx.r10.s64 + 31;
	// cmpw cr6,r6,r10
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r10.s32, xer);
	// bge cr6,0x820c1d08
	if (!cr6.getLT()) goto loc_820C1D08;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c1dcc
	if (cr6.getEQ()) goto loc_820C1DCC;
	// addi r11,r6,1
	r11.s64 = ctx.r6.s64 + 1;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// blt cr6,0x820c1dcc
	if (cr6.getLT()) goto loc_820C1DCC;
	// addi r3,r6,2
	ctx.r3.s64 = ctx.r6.s64 + 2;
	// bl 0x820a42d8
	sub_820A42D8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C1DCC:
	// addi r3,r6,1
	ctx.r3.s64 = ctx.r6.s64 + 1;
	// bl 0x820a42d8
	sub_820A42D8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1DE8"))) PPC_WEAK_FUNC(sub_820C1DE8);
PPC_FUNC_IMPL(__imp__sub_820C1DE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r10,4764(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4764);
	// stw r10,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, ctx.r10.u32);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r3,4764(r11)
	PPC_STORE_U32(r11.u32 + 4764, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1E08"))) PPC_WEAK_FUNC(sub_820C1E08);
PPC_FUNC_IMPL(__imp__sub_820C1E08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r3,4760(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4760);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1E18"))) PPC_WEAK_FUNC(sub_820C1E18);
PPC_FUNC_IMPL(__imp__sub_820C1E18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r3,4760(r11)
	PPC_STORE_U32(r11.u32 + 4760, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1E28"))) PPC_WEAK_FUNC(sub_820C1E28);
PPC_FUNC_IMPL(__imp__sub_820C1E28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4764(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4764);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c1e54
	if (cr6.getEQ()) goto loc_820C1E54;
loc_820C1E3C:
	// lwz r10,36(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplw cr6,r10,r3
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r3.u32, xer);
	// beq cr6,0x820c1e5c
	if (cr6.getEQ()) goto loc_820C1E5C;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c1e3c
	if (!cr6.getEQ()) goto loc_820C1E3C;
loc_820C1E54:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_820C1E5C:
	// lwz r3,28(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1e54
	if (cr6.getEQ()) goto loc_820C1E54;
	// b 0x82136ad8
	sub_82136AD8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820C1E70"))) PPC_WEAK_FUNC(sub_820C1E70);
PPC_FUNC_IMPL(__imp__sub_820C1E70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c1870
	sub_820C1870(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1ea8
	if (cr6.getEQ()) goto loc_820C1EA8;
	// lwz r3,28(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c1ea8
	if (cr6.getEQ()) goto loc_820C1EA8;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C1EA8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C1EC0"))) PPC_WEAK_FUNC(sub_820C1EC0);
PPC_FUNC_IMPL(__imp__sub_820C1EC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lis r4,2
	ctx.r4.s64 = 131072;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c1fa4
	if (cr6.getEQ()) goto loc_820C1FA4;
	// lis r30,32767
	r30.s64 = 2147418112;
	// lis r4,2
	ctx.r4.s64 = 131072;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// ori r30,r30,65535
	r30.u64 = r30.u64 | 65535;
	// li r31,0
	r31.s64 = 0;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c1f08
	if (!cr6.getEQ()) goto loc_820C1F08;
	// li r29,0
	r29.s64 = 0;
loc_820C1F08:
	// lis r6,-32014
	ctx.r6.s64 = -2098069504;
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r7,-1364(r6)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + -1364);
	// addi r9,r7,4776
	ctx.r9.s64 = ctx.r7.s64 + 4776;
loc_820C1F18:
	// lwz r11,0(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// lis r5,-32014
	ctx.r5.s64 = -2098069504;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x820c1fd4
	if (cr6.getLT()) goto loc_820C1FD4;
	// lwz r8,-8(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + -8);
	// cmpw cr6,r8,r28
	cr6.compare<int32_t>(ctx.r8.s32, r28.s32, xer);
	// bne cr6,0x820c1f40
	if (!cr6.getEQ()) goto loc_820C1F40;
	// lwz r8,-4(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + -4);
	// cmpw cr6,r8,r29
	cr6.compare<int32_t>(ctx.r8.s32, r29.s32, xer);
	// beq cr6,0x820c1fac
	if (cr6.getEQ()) goto loc_820C1FAC;
loc_820C1F40:
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// bge cr6,0x820c1f50
	if (!cr6.getLT()) goto loc_820C1F50;
	// mr r30,r11
	r30.u64 = r11.u64;
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
loc_820C1F50:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r9,r9,12
	ctx.r9.s64 = ctx.r9.s64 + 12;
	// cmpwi cr6,r10,10
	cr6.compare<int32_t>(ctx.r10.s32, 10, xer);
	// blt cr6,0x820c1f18
	if (cr6.getLT()) goto loc_820C1F18;
loc_820C1F60:
	// cmpwi cr6,r10,10
	cr6.compare<int32_t>(ctx.r10.s32, 10, xer);
	// bne cr6,0x820c1fa4
	if (!cr6.getEQ()) goto loc_820C1FA4;
loc_820C1F68:
	// addi r11,r31,398
	r11.s64 = r31.s64 + 398;
	// lwz r9,-6384(r5)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r5.u32 + -6384);
	// rlwinm r10,r31,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r11,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r31,r10
	ctx.r10.u64 = r31.u64 + ctx.r10.u64;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r9,r11,r7
	PPC_STORE_U32(r11.u32 + ctx.r7.u32, ctx.r9.u32);
	// lwz r11,-1364(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + -1364);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r28,4768(r11)
	PPC_STORE_U32(r11.u32 + 4768, r28.u32);
	// lwz r11,-1364(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + -1364);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r29,4772(r11)
	PPC_STORE_U32(r11.u32 + 4772, r29.u32);
loc_820C1FA4:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C1FAC:
	// addi r11,r10,398
	r11.s64 = ctx.r10.s64 + 398;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r9,-6384(r5)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r5.u32 + -6384);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r8,r11,r7
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// stwx r9,r11,r7
	PPC_STORE_U32(r11.u32 + ctx.r7.u32, ctx.r9.u32);
	// lwz r7,-1364(r6)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + -1364);
	// b 0x820c1f60
	goto loc_820C1F60;
loc_820C1FD4:
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
	// b 0x820c1f68
	goto loc_820C1F68;
}

__attribute__((alias("__imp__sub_820C1FE0"))) PPC_WEAK_FUNC(sub_820C1FE0);
PPC_FUNC_IMPL(__imp__sub_820C1FE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r9,-1
	ctx.r9.s64 = -1;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r8,4776(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4776);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820c2028
	if (cr6.getLT()) goto loc_820C2028;
	// cmpwi cr6,r8,-1
	cr6.compare<int32_t>(ctx.r8.s32, -1, xer);
	// ble cr6,0x820c2028
	if (!cr6.getGT()) goto loc_820C2028;
	// lwz r11,4768(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4768);
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r11,4772(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4772);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
loc_820C2028:
	// lwz r8,4788(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4788);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820c2058
	if (cr6.getLT()) goto loc_820C2058;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// ble cr6,0x820c2058
	if (!cr6.getGT()) goto loc_820C2058;
	// lwz r11,4780(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4780);
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r11,4784(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4784);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
loc_820C2058:
	// lwz r8,4800(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4800);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820c2088
	if (cr6.getLT()) goto loc_820C2088;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// ble cr6,0x820c2088
	if (!cr6.getGT()) goto loc_820C2088;
	// lwz r11,4792(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4792);
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r11,4796(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4796);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
loc_820C2088:
	// lwz r8,4812(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4812);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820c20b8
	if (cr6.getLT()) goto loc_820C20B8;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// ble cr6,0x820c20b8
	if (!cr6.getGT()) goto loc_820C20B8;
	// lwz r11,4804(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4804);
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r11,4808(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4808);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
loc_820C20B8:
	// lwz r8,4824(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4824);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820c20e8
	if (cr6.getLT()) goto loc_820C20E8;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// ble cr6,0x820c20e8
	if (!cr6.getGT()) goto loc_820C20E8;
	// lwz r11,4816(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4816);
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r11,4820(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4820);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
loc_820C20E8:
	// lwz r8,4836(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4836);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820c2118
	if (cr6.getLT()) goto loc_820C2118;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// ble cr6,0x820c2118
	if (!cr6.getGT()) goto loc_820C2118;
	// lwz r11,4828(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4828);
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r11,4832(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4832);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
loc_820C2118:
	// lwz r8,4848(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4848);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820c2148
	if (cr6.getLT()) goto loc_820C2148;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// ble cr6,0x820c2148
	if (!cr6.getGT()) goto loc_820C2148;
	// lwz r11,4840(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4840);
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r11,4844(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4844);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
loc_820C2148:
	// lwz r8,4860(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4860);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820c2178
	if (cr6.getLT()) goto loc_820C2178;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// ble cr6,0x820c2178
	if (!cr6.getGT()) goto loc_820C2178;
	// lwz r11,4852(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4852);
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r11,4856(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4856);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
loc_820C2178:
	// lwz r8,4872(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4872);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x820c21a8
	if (cr6.getLT()) goto loc_820C21A8;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// ble cr6,0x820c21a8
	if (!cr6.getGT()) goto loc_820C21A8;
	// lwz r11,4864(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4864);
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r11,4868(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4868);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
loc_820C21A8:
	// lwz r8,4884(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4884);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bltlr cr6
	if (cr6.getLT()) return;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// blelr cr6
	if (!cr6.getGT()) return;
	// lwz r11,4876(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4876);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r11,4880(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4880);
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C21D8"))) PPC_WEAK_FUNC(sub_820C21D8);
PPC_FUNC_IMPL(__imp__sub_820C21D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x820c222c
	if (!cr6.getGT()) goto loc_820C222C;
loc_820C2200:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x820c1fe0
	sub_820C1FE0(ctx, base);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x82108ed0
	sub_82108ED0(ctx, base);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r31,r30
	cr6.compare<int32_t>(r31.s32, r30.s32, xer);
	// blt cr6,0x820c2200
	if (cr6.getLT()) goto loc_820C2200;
loc_820C222C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820C2240"))) PPC_WEAK_FUNC(sub_820C2240);
PPC_FUNC_IMPL(__imp__sub_820C2240) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r26,-32014
	r26.s64 = -2098069504;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// mr r20,r4
	r20.u64 = ctx.r4.u64;
	// mr r21,r5
	r21.u64 = ctx.r5.u64;
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// li r27,1
	r27.s64 = 1;
	// li r30,0
	r30.s64 = 0;
	// lwz r29,0(r22)
	r29.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// lwz r24,0(r20)
	r24.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// lwz r31,4744(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 4744);
	// subfic r11,r28,0
	xer.ca = r28.u32 <= 0;
	r11.s64 = 0 - r28.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// subfic r10,r28,0
	xer.ca = r28.u32 <= 0;
	ctx.r10.s64 = 0 - r28.s64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// andi. r23,r11,33
	r23.u64 = r11.u64 & 33;
	cr0.compare<int32_t>(r23.s32, 0, xer);
	// subfe r11,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	r11.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// andi. r11,r11,51
	r11.u64 = r11.u64 & 51;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r25,r11,32
	r25.s64 = r11.s64 + 32;
	// beq cr6,0x820c23e8
	if (cr6.getEQ()) goto loc_820C23E8;
loc_820C229C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c22e4
	if (!cr6.getEQ()) goto loc_820C22E4;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpw cr6,r3,r25
	cr6.compare<int32_t>(ctx.r3.s32, r25.s32, xer);
	// bgt cr6,0x820c238c
	if (cr6.getGT()) goto loc_820C238C;
	// cmpw cr6,r3,r29
	cr6.compare<int32_t>(ctx.r3.s32, r29.s32, xer);
	// ble cr6,0x820c238c
	if (!cr6.getGT()) goto loc_820C238C;
	// cmpw cr6,r3,r23
	cr6.compare<int32_t>(ctx.r3.s32, r23.s32, xer);
	// blt cr6,0x820c238c
	if (cr6.getLT()) goto loc_820C238C;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x820c22dc
	if (cr6.getEQ()) goto loc_820C22DC;
	// bl 0x820a7638
	sub_820A7638(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c238c
	if (cr6.getEQ()) goto loc_820C238C;
loc_820C22DC:
	// lwz r29,4(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// b 0x820c23e4
	goto loc_820C23E4;
loc_820C22E4:
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x820c2340
	if (!cr6.getEQ()) goto loc_820C2340;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bne cr6,0x820c2340
	if (!cr6.getEQ()) goto loc_820C2340;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmpw cr6,r3,r29
	cr6.compare<int32_t>(ctx.r3.s32, r29.s32, xer);
	// bgt cr6,0x820c2310
	if (cr6.getGT()) goto loc_820C2310;
	// bne cr6,0x820c238c
	if (!cr6.getEQ()) goto loc_820C238C;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r11,r24
	cr6.compare<int32_t>(r11.s32, r24.s32, xer);
	// ble cr6,0x820c238c
	if (!cr6.getGT()) goto loc_820C238C;
loc_820C2310:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x820c2334
	if (cr6.getEQ()) goto loc_820C2334;
	// bl 0x820a7638
	sub_820A7638(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c2334
	if (!cr6.getEQ()) goto loc_820C2334;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x820a7638
	sub_820A7638(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c238c
	if (cr6.getEQ()) goto loc_820C238C;
loc_820C2334:
	// lwz r29,4(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r24,8(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// b 0x820c23e8
	goto loc_820C23E8;
loc_820C2340:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820c238c
	if (!cr6.getEQ()) goto loc_820C238C;
	// cmpwi cr6,r28,1
	cr6.compare<int32_t>(r28.s32, 1, xer);
	// bne cr6,0x820c238c
	if (!cr6.getEQ()) goto loc_820C238C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c19c8
	sub_820C19C8(ctx, base);
	// cmpwi cr6,r3,83
	cr6.compare<int32_t>(ctx.r3.s32, 83, xer);
	// beq cr6,0x820c2388
	if (cr6.getEQ()) goto loc_820C2388;
	// cmpwi cr6,r3,82
	cr6.compare<int32_t>(ctx.r3.s32, 82, xer);
	// beq cr6,0x820c2388
	if (cr6.getEQ()) goto loc_820C2388;
	// cmpwi cr6,r3,81
	cr6.compare<int32_t>(ctx.r3.s32, 81, xer);
	// beq cr6,0x820c2388
	if (cr6.getEQ()) goto loc_820C2388;
	// cmpwi cr6,r3,63
	cr6.compare<int32_t>(ctx.r3.s32, 63, xer);
	// beq cr6,0x820c2388
	if (cr6.getEQ()) goto loc_820C2388;
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// lwz r11,4760(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4760);
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// bgt cr6,0x820c23d8
	if (cr6.getGT()) goto loc_820C23D8;
loc_820C2388:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
loc_820C238C:
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// lwz r31,12(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// lwz r11,4744(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4744);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bne cr6,0x820c23cc
	if (!cr6.getEQ()) goto loc_820C23CC;
	// li r30,0
	r30.s64 = 0;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// bne cr6,0x820c23e8
	if (!cr6.getEQ()) goto loc_820C23E8;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bne cr6,0x820c23e0
	if (!cr6.getEQ()) goto loc_820C23E0;
	// clrlwi r11,r27,24
	r11.u64 = r27.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c23e0
	if (cr6.getEQ()) goto loc_820C23E0;
	// li r29,-1
	r29.s64 = -1;
	// li r24,-1
	r24.s64 = -1;
	// li r27,0
	r27.s64 = 0;
loc_820C23CC:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820c229c
	if (!cr6.getEQ()) goto loc_820C229C;
	// b 0x820c23e8
	goto loc_820C23E8;
loc_820C23D8:
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x820c23e4
	goto loc_820C23E4;
loc_820C23E0:
	// li r29,1
	r29.s64 = 1;
loc_820C23E4:
	// li r24,0
	r24.s64 = 0;
loc_820C23E8:
	// lwz r11,-1364(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -1364);
	// lwz r11,4756(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4756);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c2524
	if (cr6.getEQ()) goto loc_820C2524;
	// cmpwi cr6,r29,32
	cr6.compare<int32_t>(r29.s32, 32, xer);
	// bgt cr6,0x820c2524
	if (cr6.getGT()) goto loc_820C2524;
	// lwz r31,0(r22)
	r31.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// lis r28,-31994
	r28.s64 = -2096758784;
	// bne cr6,0x820c248c
	if (!cr6.getEQ()) goto loc_820C248C;
	// lis r4,16
	ctx.r4.s64 = 1048576;
	// lwz r3,0(r22)
	ctx.r3.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c248c
	if (cr6.getEQ()) goto loc_820C248C;
	// lwz r3,0(r22)
	ctx.r3.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// cmpw cr6,r11,r3
	cr6.compare<int32_t>(r11.s32, ctx.r3.s32, xer);
	// bge cr6,0x820c248c
	if (!cr6.getLT()) goto loc_820C248C;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x820c244c
	if (cr6.getEQ()) goto loc_820C244C;
	// bl 0x820a7638
	sub_820A7638(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c248c
	if (cr6.getEQ()) goto loc_820C248C;
loc_820C244C:
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// bne cr6,0x820c2460
	if (!cr6.getEQ()) goto loc_820C2460;
	// cmpw cr6,r24,r11
	cr6.compare<int32_t>(r24.s32, r11.s32, xer);
	// ble cr6,0x820c248c
	if (!cr6.getGT()) goto loc_820C248C;
loc_820C2460:
	// lwz r10,11488(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 11488);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820c2474
	if (cr6.getEQ()) goto loc_820C2474;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x820c248c
	if (cr6.getEQ()) goto loc_820C248C;
loc_820C2474:
	// mr r29,r11
	r29.u64 = r11.u64;
	// mr r24,r11
	r24.u64 = r11.u64;
	// stw r29,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r29.u32);
	// stw r24,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r24.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed168
	return;
loc_820C248C:
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// cmpw cr6,r11,r29
	cr6.compare<int32_t>(r11.s32, r29.s32, xer);
	// bne cr6,0x820c24a4
	if (!cr6.getEQ()) goto loc_820C24A4;
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// cmpw cr6,r11,r24
	cr6.compare<int32_t>(r11.s32, r24.s32, xer);
	// bne cr6,0x820c2524
	if (!cr6.getEQ()) goto loc_820C2524;
loc_820C24A4:
	// lis r11,15887
	r11.s64 = 1041170432;
	// ori r30,r11,33761
	r30.u64 = r11.u64 | 33761;
loc_820C24AC:
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// mulhw r10,r11,r30
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r30.s32)) >> 32;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,5,0,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0xFFFFFFE0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// subf r31,r10,r11
	r31.s64 = r11.s64 - ctx.r10.s64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bne cr6,0x820c24d8
	if (!cr6.getEQ()) goto loc_820C24D8;
	// li r31,1
	r31.s64 = 1;
loc_820C24D8:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x820c24f0
	if (cr6.getEQ()) goto loc_820C24F0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a7638
	sub_820A7638(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c2504
	if (cr6.getEQ()) goto loc_820C2504;
loc_820C24F0:
	// lwz r11,11488(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 11488);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c251c
	if (cr6.getEQ()) goto loc_820C251C;
	// cmpwi cr6,r31,2
	cr6.compare<int32_t>(r31.s32, 2, xer);
	// bne cr6,0x820c251c
	if (!cr6.getEQ()) goto loc_820C251C;
loc_820C2504:
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// bne cr6,0x820c24ac
	if (!cr6.getEQ()) goto loc_820C24AC;
	// stw r29,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r29.u32);
	// stw r24,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r24.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed168
	return;
loc_820C251C:
	// mr r29,r31
	r29.u64 = r31.u64;
	// li r24,0
	r24.s64 = 0;
loc_820C2524:
	// stw r29,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r29.u32);
	// stw r24,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r24.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_820C2538"))) PPC_WEAK_FUNC(sub_820C2538);
PPC_FUNC_IMPL(__imp__sub_820C2538) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// bl 0x820c1750
	sub_820C1750(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c2568
	if (cr6.getEQ()) goto loc_820C2568;
	// bl 0x820c19c8
	sub_820C19C8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C2568:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,4756(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4756);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c25d4
	if (cr6.getEQ()) goto loc_820C25D4;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cntlzw r10,r11
	ctx.r10.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// addi r10,r10,31
	ctx.r10.s64 = ctx.r10.s64 + 31;
	// cmpw cr6,r6,r10
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r10.s32, xer);
	// bge cr6,0x820c25d4
	if (!cr6.getLT()) goto loc_820C25D4;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c25c0
	if (cr6.getEQ()) goto loc_820C25C0;
	// addi r11,r6,1
	r11.s64 = ctx.r6.s64 + 1;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// blt cr6,0x820c25c0
	if (cr6.getLT()) goto loc_820C25C0;
	// addi r3,r6,2
	ctx.r3.s64 = ctx.r6.s64 + 2;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C25C0:
	// addi r3,r6,1
	ctx.r3.s64 = ctx.r6.s64 + 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C25D4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C25E8"))) PPC_WEAK_FUNC(sub_820C25E8);
PPC_FUNC_IMPL(__imp__sub_820C25E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// bl 0x820a4320
	sub_820A4320(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2610"))) PPC_WEAK_FUNC(sub_820C2610);
PPC_FUNC_IMPL(__imp__sub_820C2610) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// bl 0x820a4330
	sub_820A4330(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2638"))) PPC_WEAK_FUNC(sub_820C2638);
PPC_FUNC_IMPL(__imp__sub_820C2638) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// bl 0x820a4348
	sub_820A4348(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2660"))) PPC_WEAK_FUNC(sub_820C2660);
PPC_FUNC_IMPL(__imp__sub_820C2660) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// bl 0x820a4360
	sub_820A4360(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2688"))) PPC_WEAK_FUNC(sub_820C2688);
PPC_FUNC_IMPL(__imp__sub_820C2688) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// bl 0x820a4248
	sub_820A4248(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C26B0"))) PPC_WEAK_FUNC(sub_820C26B0);
PPC_FUNC_IMPL(__imp__sub_820C26B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// bl 0x820a4260
	sub_820A4260(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C26D8"))) PPC_WEAK_FUNC(sub_820C26D8);
PPC_FUNC_IMPL(__imp__sub_820C26D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// bl 0x820a4278
	sub_820A4278(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2700"))) PPC_WEAK_FUNC(sub_820C2700);
PPC_FUNC_IMPL(__imp__sub_820C2700) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// bl 0x820a4290
	sub_820A4290(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2728"))) PPC_WEAK_FUNC(sub_820C2728);
PPC_FUNC_IMPL(__imp__sub_820C2728) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// bl 0x820a42a8
	sub_820A42A8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2750"))) PPC_WEAK_FUNC(sub_820C2750);
PPC_FUNC_IMPL(__imp__sub_820C2750) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r5,4760(r11)
	PPC_STORE_U32(r11.u32 + 4760, ctx.r5.u32);
	// bl 0x820c1688
	sub_820C1688(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x820c27b8
	if (!cr6.getGT()) goto loc_820C27B8;
loc_820C2790:
	// mr r3,r5
	ctx.r3.u64 = ctx.r5.u64;
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// cmpw cr6,r3,r30
	cr6.compare<int32_t>(ctx.r3.s32, r30.s32, xer);
	// beq cr6,0x820c27b0
	if (cr6.getEQ()) goto loc_820C27B0;
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// cmpw cr6,r5,r4
	cr6.compare<int32_t>(ctx.r5.s32, ctx.r4.s32, xer);
	// blt cr6,0x820c2790
	if (cr6.getLT()) goto loc_820C2790;
	// b 0x820c27b8
	goto loc_820C27B8;
loc_820C27B0:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r5,4760(r11)
	PPC_STORE_U32(r11.u32 + 4760, ctx.r5.u32);
loc_820C27B8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C27D0"))) PPC_WEAK_FUNC(sub_820C27D0);
PPC_FUNC_IMPL(__imp__sub_820C27D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r11,4776
	r11.s64 = 4776;
	// lwz r10,-1364(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + -1364);
	// stw r8,4756(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4756, ctx.r8.u32);
	// li r8,-1
	ctx.r8.s64 = -1;
loc_820C27E8:
	// lwz r10,-1364(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + -1364);
	// stwx r8,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r8.u32);
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// cmpwi cr6,r11,4896
	cr6.compare<int32_t>(r11.s32, 4896, xer);
	// blt cr6,0x820c27e8
	if (cr6.getLT()) goto loc_820C27E8;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2800"))) PPC_WEAK_FUNC(sub_820C2800);
PPC_FUNC_IMPL(__imp__sub_820C2800) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// addi r10,r3,30
	ctx.r10.s64 = ctx.r3.s64 + 30;
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,4752(r11)
	PPC_STORE_U32(r11.u32 + 4752, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,4752(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4752);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,15
	r11.s64 = r11.s64 + 15;
	// ori r11,r11,15
	r11.u64 = r11.u64 | 15;
	// xori r3,r11,15
	ctx.r3.u64 = r11.u64 ^ 15;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r3,4748(r11)
	PPC_STORE_U32(r11.u32 + 4748, ctx.r3.u32);
	// bl 0x820c08d8
	sub_820C08D8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2868"))) PPC_WEAK_FUNC(sub_820C2868);
PPC_FUNC_IMPL(__imp__sub_820C2868) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r30,244(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 244);
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r30.u32);
	// mr r8,r9
	ctx.r8.u64 = ctx.r9.u64;
	// lwz r30,236(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// lwz r10,252(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 252);
	// li r11,-1
	r11.s64 = -1;
	// stw r30,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r30.u32);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// lwz r10,228(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// bl 0x8213e398
	sub_8213E398(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C28E0"))) PPC_WEAK_FUNC(sub_820C28E0);
PPC_FUNC_IMPL(__imp__sub_820C28E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// add r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 + ctx.r10.u64;
	// addi r11,r11,17816
	r11.s64 = r11.s64 + 17816;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// b 0x82136ad8
	sub_82136AD8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820C2900"))) PPC_WEAK_FUNC(sub_820C2900);
PPC_FUNC_IMPL(__imp__sub_820C2900) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r31,0
	r31.s64 = 0;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lis r9,-32190
	ctx.r9.s64 = -2109603840;
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f0,-1632(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1632, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f0,-1620(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1620, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f0,-1616(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1616, temp.u32);
	// mr r11,r31
	r11.u64 = r31.u64;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stfs f0,-1612(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1612, temp.u32);
	// mr r11,r31
	r11.u64 = r31.u64;
	// stw r11,-1676(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1676, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1672(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1672, r11.u32);
	// li r10,4
	ctx.r10.s64 = 4;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r11,r11,-1544
	r11.s64 = r11.s64 + -1544;
	// stw r10,17800(r9)
	PPC_STORE_U32(ctx.r9.u32 + 17800, ctx.r10.u32);
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// stfs f0,-52(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -52, temp.u32);
	// stfs f0,-48(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -48, temp.u32);
	// stfs f0,-40(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -40, temp.u32);
	// stw r10,-1668(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1668, ctx.r10.u32);
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stfs f0,-36(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -36, temp.u32);
	// stfs f0,-32(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -32, temp.u32);
	// stfs f0,-28(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -28, temp.u32);
	// stfs f0,-24(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -24, temp.u32);
	// stw r9,-1656(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1656, ctx.r9.u32);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// lfs f13,14104(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14104);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// stfs f0,-16(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -16, temp.u32);
	// addi r10,r10,18048
	ctx.r10.s64 = ctx.r10.s64 + 18048;
	// stfs f0,-12(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -12, temp.u32);
	// stw r9,-1652(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1652, ctx.r9.u32);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// stfs f13,-48(r10)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r10.u32 + -48, temp.u32);
	// stw r9,-1648(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1648, ctx.r9.u32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// lfs f13,14132(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14132);
	ctx.f13.f64 = double(temp.f32);
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// stfs f13,-20(r10)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r10.u32 + -20, temp.u32);
	// stw r9,-1644(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1644, ctx.r9.u32);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// stw r9,-1640(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1640, ctx.r9.u32);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// stw r9,-1636(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1636, ctx.r9.u32);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// stw r9,-1628(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1628, ctx.r9.u32);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// stw r9,-1624(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1624, ctx.r9.u32);
	// lis r8,-32190
	ctx.r8.s64 = -2109603840;
	// li r9,-1
	ctx.r9.s64 = -1;
	// stw r9,17804(r8)
	PPC_STORE_U32(ctx.r8.u32 + 17804, ctx.r9.u32);
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// lwz r8,-1364(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + -1364);
	// stw r31,8420(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8420, r31.u32);
	// lwz r8,-1364(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + -1364);
	// stw r31,8412(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8412, r31.u32);
	// lwz r8,-1364(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + -1364);
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// stfs f0,8416(r8)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r8.u32 + 8416, temp.u32);
	// li r8,1
	ctx.r8.s64 = 1;
	// stw r8,8424(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8424, ctx.r8.u32);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// lwz r9,-68(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -68);
	// stw r9,-1540(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1540, ctx.r9.u32);
	// lis r8,-32190
	ctx.r8.s64 = -2109603840;
	// li r9,4
	ctx.r9.s64 = 4;
	// stw r9,17808(r8)
	PPC_STORE_U32(ctx.r8.u32 + 17808, ctx.r9.u32);
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// stfs f0,-8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -8, temp.u32);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// stw r9,-1608(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1608, ctx.r9.u32);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// stw r9,-1604(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1604, ctx.r9.u32);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// stw r9,-1600(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1600, ctx.r9.u32);
	// li r9,10
	ctx.r9.s64 = 10;
	// stw r9,-44(r10)
	PPC_STORE_U32(ctx.r10.u32 + -44, ctx.r9.u32);
	// li r9,255
	ctx.r9.s64 = 255;
	// stw r9,-40(r10)
	PPC_STORE_U32(ctx.r10.u32 + -40, ctx.r9.u32);
	// li r9,10
	ctx.r9.s64 = 10;
	// stw r9,-36(r10)
	PPC_STORE_U32(ctx.r10.u32 + -36, ctx.r9.u32);
	// li r9,224
	ctx.r9.s64 = 224;
	// stw r9,-32(r10)
	PPC_STORE_U32(ctx.r10.u32 + -32, ctx.r9.u32);
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// stw r9,-44(r11)
	PPC_STORE_U32(r11.u32 + -44, ctx.r9.u32);
	// lis r9,0
	ctx.r9.s64 = 0;
	// ori r9,r9,65280
	ctx.r9.u64 = ctx.r9.u64 | 65280;
	// stw r9,-28(r10)
	PPC_STORE_U32(ctx.r10.u32 + -28, ctx.r9.u32);
	// lis r9,0
	ctx.r9.s64 = 0;
	// ori r9,r9,63488
	ctx.r9.u64 = ctx.r9.u64 | 63488;
	// stw r9,-24(r10)
	PPC_STORE_U32(ctx.r10.u32 + -24, ctx.r9.u32);
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// stw r9,-20(r11)
	PPC_STORE_U32(r11.u32 + -20, ctx.r9.u32);
	// stw r9,-4(r11)
	PPC_STORE_U32(r11.u32 + -4, ctx.r9.u32);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// li r11,1
	r11.s64 = 1;
	// sth r11,-16(r10)
	PPC_STORE_U16(ctx.r10.u32 + -16, r11.u16);
	// li r11,50
	r11.s64 = 50;
	// stw r11,-12(r10)
	PPC_STORE_U32(ctx.r10.u32 + -12, r11.u32);
	// stw r11,-8(r10)
	PPC_STORE_U32(ctx.r10.u32 + -8, r11.u32);
	// stw r11,-4(r10)
	PPC_STORE_U32(ctx.r10.u32 + -4, r11.u32);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// bl 0x82108e80
	sub_82108E80(ctx, base);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// mr r11,r31
	r11.u64 = r31.u64;
	// stw r11,4048(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4048, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2B08"))) PPC_WEAK_FUNC(sub_820C2B08);
PPC_FUNC_IMPL(__imp__sub_820C2B08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820eb880
	sub_820EB880(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2B30"))) PPC_WEAK_FUNC(sub_820C2B30);
PPC_FUNC_IMPL(__imp__sub_820C2B30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820eb840
	sub_820EB840(ctx, base);
	// extsw r11,r31
	r11.s64 = r31.s32;
	// li r9,1
	ctx.r9.s64 = 1;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r31,8412(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8412, r31.u32);
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,8416(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 8416, temp.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lwz r10,11488(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11488);
	// subfic r10,r10,0
	xer.ca = ctx.r10.u32 <= 0;
	ctx.r10.s64 = 0 - ctx.r10.s64;
	// subfe r10,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r10,r10,0,29,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x4;
	// addi r10,r10,10
	ctx.r10.s64 = ctx.r10.s64 + 10;
	// mullw r10,r10,r31
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r31.s32);
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r8,8420(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8420, ctx.r8.u32);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r9,8424(r11)
	PPC_STORE_U32(r11.u32 + 8424, ctx.r9.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2BC0"))) PPC_WEAK_FUNC(sub_820C2BC0);
PPC_FUNC_IMPL(__imp__sub_820C2BC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c2c0c
	if (cr6.getEQ()) goto loc_820C2C0C;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820C2C0C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2C28"))) PPC_WEAK_FUNC(sub_820C2C28);
PPC_FUNC_IMPL(__imp__sub_820C2C28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c2c68
	if (cr6.getEQ()) goto loc_820C2C68;
	// li r4,3
	ctx.r4.s64 = 3;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C2C68:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2C80"))) PPC_WEAK_FUNC(sub_820C2C80);
PPC_FUNC_IMPL(__imp__sub_820C2C80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// addi r11,r31,-1
	r11.s64 = r31.s64 + -1;
	// li r4,3
	ctx.r4.s64 = 3;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r5,r11,27,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2CC0"))) PPC_WEAK_FUNC(sub_820C2CC0);
PPC_FUNC_IMPL(__imp__sub_820C2CC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c2d00
	if (cr6.getEQ()) goto loc_820C2D00;
	// li r4,4
	ctx.r4.s64 = 4;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C2D00:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2D18"))) PPC_WEAK_FUNC(sub_820C2D18);
PPC_FUNC_IMPL(__imp__sub_820C2D18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// addi r11,r31,-1
	r11.s64 = r31.s64 + -1;
	// li r4,4
	ctx.r4.s64 = 4;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r5,r11,27,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2D58"))) PPC_WEAK_FUNC(sub_820C2D58);
PPC_FUNC_IMPL(__imp__sub_820C2D58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c2d98
	if (cr6.getEQ()) goto loc_820C2D98;
	// li r4,7
	ctx.r4.s64 = 7;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C2D98:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2DB0"))) PPC_WEAK_FUNC(sub_820C2DB0);
PPC_FUNC_IMPL(__imp__sub_820C2DB0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// addi r11,r31,-1
	r11.s64 = r31.s64 + -1;
	// li r4,7
	ctx.r4.s64 = 7;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r5,r11,27,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2DF0"))) PPC_WEAK_FUNC(sub_820C2DF0);
PPC_FUNC_IMPL(__imp__sub_820C2DF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c2e30
	if (cr6.getEQ()) goto loc_820C2E30;
	// li r4,5
	ctx.r4.s64 = 5;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C2E30:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2E48"))) PPC_WEAK_FUNC(sub_820C2E48);
PPC_FUNC_IMPL(__imp__sub_820C2E48) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// addi r11,r31,-1
	r11.s64 = r31.s64 + -1;
	// li r4,5
	ctx.r4.s64 = 5;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r5,r11,27,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2E88"))) PPC_WEAK_FUNC(sub_820C2E88);
PPC_FUNC_IMPL(__imp__sub_820C2E88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c2ec8
	if (cr6.getEQ()) goto loc_820C2EC8;
	// li r4,6
	ctx.r4.s64 = 6;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C2EC8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2EE0"))) PPC_WEAK_FUNC(sub_820C2EE0);
PPC_FUNC_IMPL(__imp__sub_820C2EE0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// addi r11,r31,-1
	r11.s64 = r31.s64 + -1;
	// li r4,6
	ctx.r4.s64 = 6;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r5,r11,27,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2F20"))) PPC_WEAK_FUNC(sub_820C2F20);
PPC_FUNC_IMPL(__imp__sub_820C2F20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c2f60
	if (cr6.getEQ()) goto loc_820C2F60;
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C2F60:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2F78"))) PPC_WEAK_FUNC(sub_820C2F78);
PPC_FUNC_IMPL(__imp__sub_820C2F78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// addi r11,r31,-1
	r11.s64 = r31.s64 + -1;
	// li r4,8
	ctx.r4.s64 = 8;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r5,r11,27,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C2FB8"))) PPC_WEAK_FUNC(sub_820C2FB8);
PPC_FUNC_IMPL(__imp__sub_820C2FB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c2ff8
	if (cr6.getEQ()) goto loc_820C2FF8;
	// li r4,9
	ctx.r4.s64 = 9;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C2FF8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3010"))) PPC_WEAK_FUNC(sub_820C3010);
PPC_FUNC_IMPL(__imp__sub_820C3010) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// addi r11,r31,-1
	r11.s64 = r31.s64 + -1;
	// li r4,9
	ctx.r4.s64 = 9;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r5,r11,27,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3050"))) PPC_WEAK_FUNC(sub_820C3050);
PPC_FUNC_IMPL(__imp__sub_820C3050) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c3090
	if (cr6.getEQ()) goto loc_820C3090;
	// li r4,18
	ctx.r4.s64 = 18;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C3090:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C30A8"))) PPC_WEAK_FUNC(sub_820C30A8);
PPC_FUNC_IMPL(__imp__sub_820C30A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// addi r11,r31,-1
	r11.s64 = r31.s64 + -1;
	// li r4,18
	ctx.r4.s64 = 18;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r5,r11,27,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C30E8"))) PPC_WEAK_FUNC(sub_820C30E8);
PPC_FUNC_IMPL(__imp__sub_820C30E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c3134
	if (cr6.getEQ()) goto loc_820C3134;
	// li r4,11
	ctx.r4.s64 = 11;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c3134
	if (cr6.getEQ()) goto loc_820C3134;
	// li r3,2
	ctx.r3.s64 = 2;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C3134:
	// li r3,10
	ctx.r3.s64 = 10;
	// bl 0x820c2bc0
	sub_820C2BC0(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3158"))) PPC_WEAK_FUNC(sub_820C3158);
PPC_FUNC_IMPL(__imp__sub_820C3158) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820c3178
	if (!cr6.getEQ()) goto loc_820C3178;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x820c31a4
	goto loc_820C31A4;
loc_820C3178:
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820c319c
	if (!cr6.getEQ()) goto loc_820C319C;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,11
	ctx.r4.s64 = 11;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x820c31b4
	goto loc_820C31B4;
loc_820C319C:
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
loc_820C31A4:
	// li r4,11
	ctx.r4.s64 = 11;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
loc_820C31B4:
	// li r4,10
	ctx.r4.s64 = 10;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C31D0"))) PPC_WEAK_FUNC(sub_820C31D0);
PPC_FUNC_IMPL(__imp__sub_820C31D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c321c
	if (cr6.getEQ()) goto loc_820C321C;
	// li r4,13
	ctx.r4.s64 = 13;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c321c
	if (cr6.getEQ()) goto loc_820C321C;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C321C:
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x820c2bc0
	sub_820C2BC0(ctx, base);
	// subfic r11,r3,0
	xer.ca = ctx.r3.u32 <= 0;
	r11.s64 = 0 - ctx.r3.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r3,r11,0,30,30
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3240"))) PPC_WEAK_FUNC(sub_820C3240);
PPC_FUNC_IMPL(__imp__sub_820C3240) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820c3260
	if (!cr6.getEQ()) goto loc_820C3260;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x820c328c
	goto loc_820C328C;
loc_820C3260:
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820c3284
	if (!cr6.getEQ()) goto loc_820C3284;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,13
	ctx.r4.s64 = 13;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x820c329c
	goto loc_820C329C;
loc_820C3284:
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
loc_820C328C:
	// li r4,13
	ctx.r4.s64 = 13;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
loc_820C329C:
	// li r4,12
	ctx.r4.s64 = 12;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C32B8"))) PPC_WEAK_FUNC(sub_820C32B8);
PPC_FUNC_IMPL(__imp__sub_820C32B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c31d0
	sub_820C31D0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x820c3308
	if (cr6.getEQ()) goto loc_820C3308;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// beq cr6,0x820c32f0
	if (cr6.getEQ()) goto loc_820C32F0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,14124(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14124);
	ctx.f1.f64 = double(temp.f32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C32F0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15684(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15684);
	ctx.f1.f64 = double(temp.f32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C3308:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15680(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15680);
	ctx.f1.f64 = double(temp.f32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3320"))) PPC_WEAK_FUNC(sub_820C3320);
PPC_FUNC_IMPL(__imp__sub_820C3320) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stfd f31,-16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -16, f31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14100(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14100);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// blt cr6,0x820c3358
	if (cr6.getLT()) goto loc_820C3358;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0348
	sub_820A0348(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x820c336c
	if (!cr6.getLT()) goto loc_820C336C;
loc_820C3358:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r11,-1608(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1608);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c3370
	if (!cr6.getEQ()) goto loc_820C3370;
loc_820C336C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820C3370:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-16(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3388"))) PPC_WEAK_FUNC(sub_820C3388);
PPC_FUNC_IMPL(__imp__sub_820C3388) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stfd f31,-16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -16, f31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,13960(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c33c0
	if (cr6.getGT()) goto loc_820C33C0;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0348
	sub_820A0348(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x820c33d4
	if (!cr6.getGT()) goto loc_820C33D4;
loc_820C33C0:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r11,-1608(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1608);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c33d8
	if (!cr6.getEQ()) goto loc_820C33D8;
loc_820C33D4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820C33D8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-16(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C33F0"))) PPC_WEAK_FUNC(sub_820C33F0);
PPC_FUNC_IMPL(__imp__sub_820C33F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stfd f31,-16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -16, f31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,13960(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c3428
	if (cr6.getGT()) goto loc_820C3428;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0448
	sub_820A0448(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x820c343c
	if (!cr6.getGT()) goto loc_820C343C;
loc_820C3428:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r11,-1604(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1604);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c3440
	if (!cr6.getEQ()) goto loc_820C3440;
loc_820C343C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820C3440:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-16(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3458"))) PPC_WEAK_FUNC(sub_820C3458);
PPC_FUNC_IMPL(__imp__sub_820C3458) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stfd f31,-16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -16, f31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14100(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14100);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// blt cr6,0x820c3490
	if (cr6.getLT()) goto loc_820C3490;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0448
	sub_820A0448(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x820c34a4
	if (!cr6.getLT()) goto loc_820C34A4;
loc_820C3490:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r11,-1604(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1604);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c34a8
	if (!cr6.getEQ()) goto loc_820C34A8;
loc_820C34A4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820C34A8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-16(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C34C0"))) PPC_WEAK_FUNC(sub_820C34C0);
PPC_FUNC_IMPL(__imp__sub_820C34C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-21846
	ctx.r10.s64 = -1431699456;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// ori r10,r10,43691
	ctx.r10.u64 = ctx.r10.u64 | 43691;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,26,6,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 26) & 0x3FFFFFF;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,5,0,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0xFFFFFFE0;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// cmpwi cr6,r11,152
	cr6.compare<int32_t>(r11.s32, 152, xer);
	// stw r11,18016(r10)
	PPC_STORE_U32(ctx.r10.u32 + 18016, r11.u32);
	// bge cr6,0x820c3540
	if (!cr6.getLT()) goto loc_820C3540;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,870
	ctx.r8.s64 = 870;
	// addi r7,r11,15688
	ctx.r7.s64 = r11.s64 + 15688;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,236
	ctx.r4.s64 = 236;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820C3540:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3558"))) PPC_WEAK_FUNC(sub_820C3558);
PPC_FUNC_IMPL(__imp__sub_820C3558) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// addi r7,r11,15688
	ctx.r7.s64 = r11.s64 + 15688;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r8,876
	ctx.r8.s64 = 876;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1608(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1608, r11.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r11,18024(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 18024);
	// rlwinm r9,r11,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// add r11,r10,r31
	r11.u64 = ctx.r10.u64 + r31.u64;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// ble cr6,0x820c35c8
	if (!cr6.getGT()) goto loc_820C35C8;
	// bl 0x820c34c0
	sub_820C34C0(ctx, base);
loc_820C35C8:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,1
	r11.s64 = 1;
	// stb r11,-1660(r10)
	PPC_STORE_U8(ctx.r10.u32 + -1660, r11.u8);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C35E8"))) PPC_WEAK_FUNC(sub_820C35E8);
PPC_FUNC_IMPL(__imp__sub_820C35E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1680(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1680);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bgt cr6,0x820c3640
	if (cr6.getGT()) goto loc_820C3640;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,13844
	r12.s64 = r12.s64 + 13844;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820C3628;
	case 1:
		goto loc_820C3634;
	case 2:
		goto loc_820C3634;
	case 3:
		goto loc_820C3628;
	case 4:
		goto loc_820C3628;
	default:
		__builtin_unreachable();
	}
	// lwz r16,13864(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 13864);
	// lwz r16,13876(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 13876);
	// lwz r16,13876(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 13876);
	// lwz r16,13864(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 13864);
	// lwz r16,13864(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 13864);
loc_820C3628:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15720(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15720);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
loc_820C3634:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15716(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15716);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
loc_820C3640:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15712(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15712);
	ctx.f1.f64 = double(temp.f32);
	// blr 
	return;
	// .long 0x0
}

__attribute__((alias("__imp__sub_820C3650"))) PPC_WEAK_FUNC(sub_820C3650);
PPC_FUNC_IMPL(__imp__sub_820C3650) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// bne cr6,0x820c3684
	if (!cr6.getEQ()) goto loc_820C3684;
	// bl 0x820c33f0
	sub_820C33F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c3690
	if (cr6.getEQ()) goto loc_820C3690;
loc_820C3684:
	// lwz r11,-1652(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c36bc
	if (cr6.getEQ()) goto loc_820C36BC;
loc_820C3690:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c36b0
	if (!cr6.getEQ()) goto loc_820C36B0;
	// bl 0x820c3458
	sub_820C3458(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c36d4
	if (cr6.getEQ()) goto loc_820C36D4;
loc_820C36B0:
	// lwz r11,-1652(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c36d4
	if (!cr6.getEQ()) goto loc_820C36D4;
loc_820C36BC:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,2
	r11.s64 = 2;
	// stw r11,-1676(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1676, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1604(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1604, r11.u32);
loc_820C36D4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C36E8"))) PPC_WEAK_FUNC(sub_820C36E8);
PPC_FUNC_IMPL(__imp__sub_820C36E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// bne cr6,0x820c371c
	if (!cr6.getEQ()) goto loc_820C371C;
	// bl 0x820c33f0
	sub_820C33F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c3728
	if (cr6.getEQ()) goto loc_820C3728;
loc_820C371C:
	// lwz r11,-1652(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c3754
	if (cr6.getEQ()) goto loc_820C3754;
loc_820C3728:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c3748
	if (!cr6.getEQ()) goto loc_820C3748;
	// bl 0x820c3458
	sub_820C3458(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c3768
	if (cr6.getEQ()) goto loc_820C3768;
loc_820C3748:
	// lwz r11,-1652(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c3768
	if (!cr6.getEQ()) goto loc_820C3768;
loc_820C3754:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1676(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1676, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1604(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1604, r11.u32);
loc_820C3768:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3780"))) PPC_WEAK_FUNC(sub_820C3780);
PPC_FUNC_IMPL(__imp__sub_820C3780) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// bne cr6,0x820c3808
	if (!cr6.getEQ()) goto loc_820C3808;
	// bl 0x820c33f0
	sub_820C33F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c3808
	if (!cr6.getEQ()) goto loc_820C3808;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c37d4
	if (!cr6.getEQ()) goto loc_820C37D4;
	// bl 0x820c3458
	sub_820C3458(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c383c
	if (cr6.getEQ()) goto loc_820C383C;
loc_820C37D4:
	// lwz r11,-1672(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1672);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// stw r11,-1672(r31)
	PPC_STORE_U32(r31.u32 + -1672, r11.u32);
	// bne cr6,0x820c37f0
	if (!cr6.getEQ()) goto loc_820C37F0;
	// li r11,3
	r11.s64 = 3;
	// stw r11,-1672(r31)
	PPC_STORE_U32(r31.u32 + -1672, r11.u32);
loc_820C37F0:
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,-1604(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1604, ctx.r10.u32);
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// stw r10,-1652(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1652, ctx.r10.u32);
	// b 0x820c3840
	goto loc_820C3840;
loc_820C3808:
	// lwz r11,-1672(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1672);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// stw r11,-1672(r31)
	PPC_STORE_U32(r31.u32 + -1672, r11.u32);
	// bne cr6,0x820c3824
	if (!cr6.getEQ()) goto loc_820C3824;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1672(r31)
	PPC_STORE_U32(r31.u32 + -1672, r11.u32);
loc_820C3824:
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,-1604(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1604, ctx.r10.u32);
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// stw r10,-1652(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1652, ctx.r10.u32);
	// b 0x820c3840
	goto loc_820C3840;
loc_820C383C:
	// lwz r11,-1672(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1672);
loc_820C3840:
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// ble cr6,0x820c3850
	if (!cr6.getGT()) goto loc_820C3850;
	// li r11,0
	r11.s64 = 0;
	// b 0x820c385c
	goto loc_820C385C;
loc_820C3850:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x820c3860
	if (!cr6.getLT()) goto loc_820C3860;
	// li r11,11
	r11.s64 = 11;
loc_820C385C:
	// stw r11,-1672(r31)
	PPC_STORE_U32(r31.u32 + -1672, r11.u32);
loc_820C3860:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3878"))) PPC_WEAK_FUNC(sub_820C3878);
PPC_FUNC_IMPL(__imp__sub_820C3878) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c38cc
	if (!cr6.getEQ()) goto loc_820C38CC;
	// bl 0x820c33f0
	sub_820C33F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c38cc
	if (!cr6.getEQ()) goto loc_820C38CC;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c38c4
	if (!cr6.getEQ()) goto loc_820C38C4;
	// bl 0x820c3458
	sub_820C3458(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c38ec
	if (cr6.getEQ()) goto loc_820C38EC;
loc_820C38C4:
	// li r11,1
	r11.s64 = 1;
	// b 0x820c38d0
	goto loc_820C38D0;
loc_820C38CC:
	// li r11,11
	r11.s64 = 11;
loc_820C38D0:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1672(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1672, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1604(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1604, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1652(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1652, r11.u32);
loc_820C38EC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3900"))) PPC_WEAK_FUNC(sub_820C3900);
PPC_FUNC_IMPL(__imp__sub_820C3900) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c3954
	if (!cr6.getEQ()) goto loc_820C3954;
	// bl 0x820c33f0
	sub_820C33F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c3954
	if (!cr6.getEQ()) goto loc_820C3954;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c394c
	if (!cr6.getEQ()) goto loc_820C394C;
	// bl 0x820c3458
	sub_820C3458(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c3974
	if (cr6.getEQ()) goto loc_820C3974;
loc_820C394C:
	// li r11,3
	r11.s64 = 3;
	// b 0x820c3958
	goto loc_820C3958;
loc_820C3954:
	// li r11,0
	r11.s64 = 0;
loc_820C3958:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1672(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1672, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1604(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1604, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1652(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1652, r11.u32);
loc_820C3974:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3988"))) PPC_WEAK_FUNC(sub_820C3988);
PPC_FUNC_IMPL(__imp__sub_820C3988) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f29,-80(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -80, f29.u64);
	// stfd f30,-72(r1)
	PPC_STORE_U64(ctx.r1.u32 + -72, f30.u64);
	// stfd f31,-64(r1)
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c1688
	sub_820C1688(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// bl 0x821393c0
	sub_821393C0(ctx, base);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lfs f31,15732(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 15732);
	f31.f64 = double(temp.f32);
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lfs f29,14116(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14116);
	f29.f64 = double(temp.f32);
	// lfs f30,15728(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15728);
	f30.f64 = double(temp.f32);
	// bne cr6,0x820c3b1c
	if (!cr6.getEQ()) goto loc_820C3B1C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c3ae4
	if (!cr6.getEQ()) goto loc_820C3AE4;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c3ae4
	if (cr6.getGT()) goto loc_820C3AE4;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c3aa8
	if (!cr6.getEQ()) goto loc_820C3AA8;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820c3aa8
	if (cr6.getLT()) goto loc_820C3AA8;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c3a60
	if (cr6.getEQ()) goto loc_820C3A60;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,-1632(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1632);
	f0.f64 = double(temp.f32);
	// fctiwz f13,f0
	ctx.f13.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f13,0,r11
	PPC_STORE_U32(r11.u32, ctx.f13.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820c3b1c
	if (!cr6.getGT()) goto loc_820C3B1C;
	// lwz r11,-1652(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c3b1c
	if (!cr6.getEQ()) goto loc_820C3B1C;
	// fsubs f0,f0,f29
	f0.f64 = double(float(f0.f64 - f29.f64));
	// b 0x820c3b18
	goto loc_820C3B18;
loc_820C3A60:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c3b1c
	if (cr6.getEQ()) goto loc_820C3B1C;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,-1632(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1632);
	f0.f64 = double(temp.f32);
	// fctiwz f13,f0
	ctx.f13.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// addi r10,r28,-1
	ctx.r10.s64 = r28.s64 + -1;
	// stfiwx f13,0,r11
	PPC_STORE_U32(r11.u32, ctx.f13.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x820c3b1c
	if (!cr6.getLT()) goto loc_820C3B1C;
	// lwz r11,-1652(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c3b1c
	if (!cr6.getEQ()) goto loc_820C3B1C;
	// fadds f0,f0,f29
	f0.f64 = double(float(f0.f64 + f29.f64));
	// b 0x820c3b18
	goto loc_820C3B18;
loc_820C3AA8:
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f13,-1632(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1632);
	ctx.f13.f64 = double(temp.f32);
	// fctiwz f0,f13
	f0.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// addi r10,r28,-1
	ctx.r10.s64 = r28.s64 + -1;
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x820c3b1c
	if (!cr6.getLT()) goto loc_820C3B1C;
	// lwz r11,-1652(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c3b1c
	if (!cr6.getEQ()) goto loc_820C3B1C;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f0,18052(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18052);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// b 0x820c3b18
	goto loc_820C3B18;
loc_820C3AE4:
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f13,-1632(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1632);
	ctx.f13.f64 = double(temp.f32);
	// fctiwz f0,f13
	f0.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820c3b1c
	if (!cr6.getGT()) goto loc_820C3B1C;
	// lwz r11,-1652(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c3b1c
	if (!cr6.getEQ()) goto loc_820C3B1C;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f0,18052(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18052);
	f0.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
loc_820C3B18:
	// stfs f0,-1632(r29)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + -1632, temp.u32);
loc_820C3B1C:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r26,-32256
	r26.s64 = -2113929216;
	// lfs f0,3112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// addi r27,r11,-1636
	r27.s64 = r11.s64 + -1636;
	// ble cr6,0x820c3b68
	if (!cr6.getGT()) goto loc_820C3B68;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x820c3b68
	if (!cr6.getLT()) goto loc_820C3B68;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820c3b68
	if (!cr6.getGT()) goto loc_820C3B68;
	// lwz r11,-1652(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c3bbc
	if (cr6.getEQ()) goto loc_820C3BBC;
loc_820C3B68:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,3108(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3108);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x820c3be0
	if (!cr6.getLT()) goto loc_820C3BE0;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// ble cr6,0x820c3be0
	if (!cr6.getGT()) goto loc_820C3BE0;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,-1632(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1632);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// addi r10,r28,-1
	ctx.r10.s64 = r28.s64 + -1;
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x820c3be0
	if (!cr6.getLT()) goto loc_820C3BE0;
	// lwz r11,-1652(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c3be0
	if (!cr6.getEQ()) goto loc_820C3BE0;
loc_820C3BBC:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15672(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + 15672);
	f0.f64 = double(temp.f32);
	// lfs f13,14272(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14272);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f12,f1,f13
	ctx.f12.f64 = double(float(ctx.f1.f64 * ctx.f13.f64));
	// lfs f13,-1632(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1632);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f0,f12,f0,f13
	f0.f64 = double(float(-(ctx.f12.f64 * f0.f64 - ctx.f13.f64)));
	// stfs f0,-1632(r29)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + -1632, temp.u32);
loc_820C3BE0:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lfs f31,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// lfs f30,15464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15464);
	f30.f64 = double(temp.f32);
	// bgt cr6,0x820c3c14
	if (cr6.getGT()) goto loc_820C3C14;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0448
	sub_820A0448(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x820c3c4c
	if (!cr6.getGT()) goto loc_820C3C4C;
loc_820C3C14:
	// lwz r11,-1600(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1600);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c3c4c
	if (!cr6.getEQ()) goto loc_820C3C4C;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820c3c4c
	if (!cr6.getGT()) goto loc_820C3C4C;
	// lwz r11,-1652(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c3c4c
	if (!cr6.getEQ()) goto loc_820C3C4C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-1632(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1632);
	f0.f64 = double(temp.f32);
	// lfs f13,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// b 0x820c3ca4
	goto loc_820C3CA4;
loc_820C3C4C:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820c3c6c
	if (cr6.getLT()) goto loc_820C3C6C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0448
	sub_820A0448(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// bge cr6,0x820c3ca8
	if (!cr6.getLT()) goto loc_820C3CA8;
loc_820C3C6C:
	// lwz r11,-1600(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1600);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c3ca8
	if (!cr6.getEQ()) goto loc_820C3CA8;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// addi r10,r28,-1
	ctx.r10.s64 = r28.s64 + -1;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x820c3ca8
	if (!cr6.getLT()) goto loc_820C3CA8;
	// lwz r11,-1652(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c3ca8
	if (!cr6.getEQ()) goto loc_820C3CA8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-1632(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1632);
	f0.f64 = double(temp.f32);
	// lfs f13,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
loc_820C3CA4:
	// stfs f0,-1632(r29)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + -1632, temp.u32);
loc_820C3CA8:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c3cec
	if (cr6.getGT()) goto loc_820C3CEC;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0448
	sub_820A0448(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c3cec
	if (cr6.getGT()) goto loc_820C3CEC;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820c3cec
	if (cr6.getLT()) goto loc_820C3CEC;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0448
	sub_820A0448(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// li r11,0
	r11.s64 = 0;
	// bge cr6,0x820c3cf0
	if (!cr6.getLT()) goto loc_820C3CF0;
loc_820C3CEC:
	// li r11,1
	r11.s64 = 1;
loc_820C3CF0:
	// stw r11,-1600(r31)
	PPC_STORE_U32(r31.u32 + -1600, r11.u32);
	// extsw r11,r28
	r11.s64 = r28.s32;
	// lfs f12,15672(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + 15672);
	ctx.f12.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fsubs f13,f0,f12
	ctx.f13.f64 = double(float(f0.f64 - ctx.f12.f64));
	// lfs f0,-1632(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1632);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820c3d24
	if (!cr6.getGT()) goto loc_820C3D24;
	// fmr f0,f13
	f0.f64 = ctx.f13.f64;
	// stfs f0,-1632(r29)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + -1632, temp.u32);
loc_820C3D24:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,6584(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6584);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820c3d3c
	if (!cr6.getLT()) goto loc_820C3D3C;
	// fmr f0,f13
	f0.f64 = ctx.f13.f64;
	// stfs f0,-1632(r29)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + -1632, temp.u32);
loc_820C3D3C:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// fctiwz f13,f0
	ctx.fpscr.disableFlushMode();
	ctx.f13.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f13,0,r27
	PPC_STORE_U32(r27.u32, ctx.f13.u32);
	// lwz r6,0(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpw cr6,r11,r6
	cr6.compare<int32_t>(r11.s32, ctx.r6.s32, xer);
	// beq cr6,0x820c3d70
	if (cr6.getEQ()) goto loc_820C3D70;
	// extsw r11,r6
	r11.s64 = ctx.r6.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fadds f0,f0,f12
	f0.f64 = double(float(f0.f64 + ctx.f12.f64));
	// stfs f0,-1632(r29)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + -1632, temp.u32);
loc_820C3D70:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// subfic r10,r6,2
	xer.ca = ctx.r6.u32 <= 2;
	ctx.r10.s64 = 2 - ctx.r6.s64;
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// addi r9,r11,12
	ctx.r9.s64 = r11.s64 + 12;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mullw r10,r9,r10
	ctx.r10.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// stw r10,-1640(r11)
	PPC_STORE_U32(r11.u32 + -1640, ctx.r10.u32);
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// lwz r11,-1644(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -1644);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// ble cr6,0x820c3ddc
	if (!cr6.getGT()) goto loc_820C3DDC;
	// lis r8,21845
	ctx.r8.s64 = 1431633920;
	// lis r7,-32014
	ctx.r7.s64 = -2098069504;
	// ori r5,r8,21846
	ctx.r5.u64 = ctx.r8.u64 | 21846;
	// li r8,0
	ctx.r8.s64 = 0;
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// mulhw r10,r10,r5
	ctx.r10.s64 = (int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32)) >> 32;
	// stw r8,-1628(r7)
	PPC_STORE_U32(ctx.r7.u32 + -1628, ctx.r8.u32);
	// rlwinm r8,r10,1,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,-1644(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1644, r11.u32);
	// b 0x820c3e20
	goto loc_820C3E20;
loc_820C3DDC:
	// bge cr6,0x820c3e14
	if (!cr6.getLT()) goto loc_820C3E14;
	// lis r8,21845
	ctx.r8.s64 = 1431633920;
	// lis r7,-32014
	ctx.r7.s64 = -2098069504;
	// ori r5,r8,21846
	ctx.r5.u64 = ctx.r8.u64 | 21846;
	// li r8,0
	ctx.r8.s64 = 0;
	// subf r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	// mulhw r10,r10,r5
	ctx.r10.s64 = (int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32)) >> 32;
	// stw r8,-1628(r7)
	PPC_STORE_U32(ctx.r7.u32 + -1628, ctx.r8.u32);
	// rlwinm r8,r10,1,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,-1644(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1644, r11.u32);
	// b 0x820c3e20
	goto loc_820C3E20;
loc_820C3E14:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1628(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1628, r11.u32);
loc_820C3E20:
	// extsw r11,r6
	r11.s64 = ctx.r6.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f11,f13
	ctx.f11.f64 = double(float(ctx.f13.f64));
	// lfs f13,15724(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15724);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,0
	r11.s64 = 0;
	// ori r31,r11,65535
	r31.u64 = r11.u64 | 65535;
	// fadds f13,f11,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 + ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x820c3e78
	if (!cr6.getGT()) goto loc_820C3E78;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// lfs f0,-1632(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1632);
	f0.f64 = double(temp.f32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c3e70
	if (!cr6.getEQ()) goto loc_820C3E70;
	// fsubs f0,f0,f29
	f0.f64 = double(float(f0.f64 - f29.f64));
	// b 0x820c3ec0
	goto loc_820C3EC0;
loc_820C3E70:
	// lfs f12,15672(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + 15672);
	ctx.f12.f64 = double(temp.f32);
	// lwz r6,0(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + 0);
loc_820C3E78:
	// extsw r11,r6
	r11.s64 = ctx.r6.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fadds f12,f13,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 + ctx.f12.f64));
	// lfs f13,14404(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14404);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x820c3ec4
	if (cr6.getGT()) goto loc_820C3EC4;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c3ec4
	if (!cr6.getEQ()) goto loc_820C3EC4;
	// lfs f0,-1632(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + -1632);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f29
	f0.f64 = double(float(f0.f64 + f29.f64));
loc_820C3EC0:
	// stfs f0,-1632(r29)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + -1632, temp.u32);
loc_820C3EC4:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f29,-80(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f30,-72(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_820C3ED8"))) PPC_WEAK_FUNC(sub_820C3ED8);
PPC_FUNC_IMPL(__imp__sub_820C3ED8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lis r31,-32190
	r31.s64 = -2109603840;
	// bne cr6,0x820c3f10
	if (!cr6.getEQ()) goto loc_820C3F10;
	// bl 0x820c33f0
	sub_820C33F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c3f24
	if (cr6.getEQ()) goto loc_820C3F24;
loc_820C3F10:
	// li r11,4
	r11.s64 = 4;
	// stw r11,17800(r31)
	PPC_STORE_U32(r31.u32 + 17800, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1604(r30)
	PPC_STORE_U32(r30.u32 + -1604, r11.u32);
	// stw r11,-1652(r29)
	PPC_STORE_U32(r29.u32 + -1652, r11.u32);
loc_820C3F24:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c3f44
	if (!cr6.getEQ()) goto loc_820C3F44;
	// bl 0x820c3458
	sub_820C3458(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c3f58
	if (cr6.getEQ()) goto loc_820C3F58;
loc_820C3F44:
	// li r11,1
	r11.s64 = 1;
	// stw r11,17800(r31)
	PPC_STORE_U32(r31.u32 + 17800, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1604(r30)
	PPC_STORE_U32(r30.u32 + -1604, r11.u32);
	// stw r11,-1652(r29)
	PPC_STORE_U32(r29.u32 + -1652, r11.u32);
loc_820C3F58:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820C3F60"))) PPC_WEAK_FUNC(sub_820C3F60);
PPC_FUNC_IMPL(__imp__sub_820C3F60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c3fb4
	if (!cr6.getEQ()) goto loc_820C3FB4;
	// bl 0x820c33f0
	sub_820C33F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c3fb4
	if (!cr6.getEQ()) goto loc_820C3FB4;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c3fac
	if (!cr6.getEQ()) goto loc_820C3FAC;
	// bl 0x820c3458
	sub_820C3458(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c3fd4
	if (cr6.getEQ()) goto loc_820C3FD4;
loc_820C3FAC:
	// li r11,2
	r11.s64 = 2;
	// b 0x820c3fb8
	goto loc_820C3FB8;
loc_820C3FB4:
	// li r11,0
	r11.s64 = 0;
loc_820C3FB8:
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// stw r11,17800(r10)
	PPC_STORE_U32(ctx.r10.u32 + 17800, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1604(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1604, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1652(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1652, r11.u32);
loc_820C3FD4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C3FE8"))) PPC_WEAK_FUNC(sub_820C3FE8);
PPC_FUNC_IMPL(__imp__sub_820C3FE8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c403c
	if (!cr6.getEQ()) goto loc_820C403C;
	// bl 0x820c33f0
	sub_820C33F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c403c
	if (!cr6.getEQ()) goto loc_820C403C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c4034
	if (!cr6.getEQ()) goto loc_820C4034;
	// bl 0x820c3458
	sub_820C3458(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c405c
	if (cr6.getEQ()) goto loc_820C405C;
loc_820C4034:
	// li r11,3
	r11.s64 = 3;
	// b 0x820c4040
	goto loc_820C4040;
loc_820C403C:
	// li r11,1
	r11.s64 = 1;
loc_820C4040:
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// stw r11,17800(r10)
	PPC_STORE_U32(ctx.r10.u32 + 17800, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1604(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1604, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1652(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1652, r11.u32);
loc_820C405C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C4070"))) PPC_WEAK_FUNC(sub_820C4070);
PPC_FUNC_IMPL(__imp__sub_820C4070) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c40c4
	if (!cr6.getEQ()) goto loc_820C40C4;
	// bl 0x820c33f0
	sub_820C33F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c40c4
	if (!cr6.getEQ()) goto loc_820C40C4;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c40bc
	if (!cr6.getEQ()) goto loc_820C40BC;
	// bl 0x820c3458
	sub_820C3458(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c40e4
	if (cr6.getEQ()) goto loc_820C40E4;
loc_820C40BC:
	// li r11,4
	r11.s64 = 4;
	// b 0x820c40c8
	goto loc_820C40C8;
loc_820C40C4:
	// li r11,2
	r11.s64 = 2;
loc_820C40C8:
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// stw r11,17800(r10)
	PPC_STORE_U32(ctx.r10.u32 + 17800, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1604(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1604, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1652(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1652, r11.u32);
loc_820C40E4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C40F8"))) PPC_WEAK_FUNC(sub_820C40F8);
PPC_FUNC_IMPL(__imp__sub_820C40F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c414c
	if (!cr6.getEQ()) goto loc_820C414C;
	// bl 0x820c33f0
	sub_820C33F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c414c
	if (!cr6.getEQ()) goto loc_820C414C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c4144
	if (!cr6.getEQ()) goto loc_820C4144;
	// bl 0x820c3458
	sub_820C3458(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c416c
	if (cr6.getEQ()) goto loc_820C416C;
loc_820C4144:
	// li r11,0
	r11.s64 = 0;
	// b 0x820c4150
	goto loc_820C4150;
loc_820C414C:
	// li r11,3
	r11.s64 = 3;
loc_820C4150:
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// stw r11,17800(r10)
	PPC_STORE_U32(ctx.r10.u32 + 17800, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1604(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1604, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1652(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1652, r11.u32);
loc_820C416C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C4180"))) PPC_WEAK_FUNC(sub_820C4180);
PPC_FUNC_IMPL(__imp__sub_820C4180) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r7,r1,-32
	ctx.r7.s64 = ctx.r1.s64 + -32;
	// addi r10,r11,-1588
	ctx.r10.s64 = r11.s64 + -1588;
	// li r31,2
	r31.s64 = 2;
	// li r6,160
	ctx.r6.s64 = 160;
	// lwz r11,44(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 44);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// mullw r9,r11,r11
	ctx.r9.s64 = int64_t(r11.s32) * int64_t(r11.s32);
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// clrlwi r8,r10,24
	ctx.r8.u64 = ctx.r10.u32 & 0xFF;
	// std r9,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, ctx.r9.u64);
	// lfd f0,-32(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// li r9,0
	ctx.r9.s64 = 0;
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,15736(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15736);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fsqrts f0,f0
	f0.f64 = double(float(sqrt(f0.f64)));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r7
	PPC_STORE_U32(ctx.r7.u32, f0.u32);
	// lwz r11,-32(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -32);
	// neg r4,r11
	ctx.r4.s64 = -r11.s64;
	// rlwinm r7,r11,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
loc_820C41F4:
	// extsw r30,r5
	r30.s64 = ctx.r5.s32;
	// mr r10,r4
	ctx.r10.u64 = ctx.r4.u64;
	// li r11,2
	r11.s64 = 2;
	// std r30,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, r30.u64);
	// lfd f13,-32(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
loc_820C4210:
	// extsw r30,r10
	r30.s64 = ctx.r10.s32;
	// stfs f0,4(r3)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 4, temp.u32);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stfs f13,8(r3)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 8, temp.u32);
	// stfs f0,16(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 16, temp.u32);
	// sth r9,12(r3)
	PPC_STORE_U16(ctx.r3.u32 + 12, ctx.r9.u16);
	// stfs f0,20(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 20, temp.u32);
	// stb r9,24(r3)
	PPC_STORE_U8(ctx.r3.u32 + 24, ctx.r9.u8);
	// stb r6,25(r3)
	PPC_STORE_U8(ctx.r3.u32 + 25, ctx.r6.u8);
	// add r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 + ctx.r10.u64;
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stb r9,26(r3)
	PPC_STORE_U8(ctx.r3.u32 + 26, ctx.r9.u8);
	// stb r8,27(r3)
	PPC_STORE_U8(ctx.r3.u32 + 27, ctx.r8.u8);
	// lfd f12,-24(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// stfs f12,0(r3)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r3.u32 + 0, temp.u32);
	// addi r3,r3,28
	ctx.r3.s64 = ctx.r3.s64 + 28;
	// bne cr6,0x820c4210
	if (!cr6.getEQ()) goto loc_820C4210;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r5,r5,4
	ctx.r5.s64 = ctx.r5.s64 + 4;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820c41f4
	if (!cr6.getEQ()) goto loc_820C41F4;
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C4280"))) PPC_WEAK_FUNC(sub_820C4280);
PPC_FUNC_IMPL(__imp__sub_820C4280) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// subfic r9,r9,0
	xer.ca = ctx.r9.u32 <= 0;
	ctx.r9.s64 = 0 - ctx.r9.s64;
	// lfs f0,15744(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15744);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// subfe r9,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// stfs f0,-1620(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1620, temp.u32);
	// li r11,4
	r11.s64 = 4;
	// stw r11,17808(r10)
	PPC_STORE_U32(ctx.r10.u32 + 17808, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f0,15740(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15740);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfs f0,-1616(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1616, temp.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1652(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1652, r11.u32);
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// li r11,4
	r11.s64 = 4;
	// stw r11,17800(r10)
	PPC_STORE_U32(ctx.r10.u32 + 17800, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// rlwinm r11,r9,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x4;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// b 0x820c2750
	sub_820C2750(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820C42E0"))) PPC_WEAK_FUNC(sub_820C42E0);
PPC_FUNC_IMPL(__imp__sub_820C42E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// addi r11,r4,25
	r11.s64 = ctx.r4.s64 + 25;
	// li r10,20
	ctx.r10.s64 = 20;
	// li r9,32
	ctx.r9.s64 = 32;
	// li r8,112
	ctx.r8.s64 = 112;
loc_820C42F0:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stb r9,-1(r11)
	PPC_STORE_U8(r11.u32 + -1, ctx.r9.u8);
	// stb r8,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r8.u8);
	// stb r9,1(r11)
	PPC_STORE_U8(r11.u32 + 1, ctx.r9.u8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// addi r11,r11,28
	r11.s64 = r11.s64 + 28;
	// bne cr6,0x820c42f0
	if (!cr6.getEQ()) goto loc_820C42F0;
	// rlwinm r11,r3,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r11,3
	ctx.r9.s64 = r11.s64 + 3;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// bgtlr cr6
	if (cr6.getGT()) return;
	// mulli r10,r11,28
	ctx.r10.s64 = r11.s64 * 28;
	// subf r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	// add r10,r10,r4
	ctx.r10.u64 = ctx.r10.u64 + ctx.r4.u64;
	// addi r6,r9,1
	ctx.r6.s64 = ctx.r9.s64 + 1;
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// addi r11,r10,25
	r11.s64 = ctx.r10.s64 + 25;
	// li r9,80
	ctx.r9.s64 = 80;
	// li r7,240
	ctx.r7.s64 = 240;
	// li r5,48
	ctx.r5.s64 = 48;
	// li r4,160
	ctx.r4.s64 = 160;
loc_820C4344:
	// stb r9,-1(r11)
	PPC_STORE_U8(r11.u32 + -1, ctx.r9.u8);
	// stb r7,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r7.u8);
	// stb r9,1(r11)
	PPC_STORE_U8(r11.u32 + 1, ctx.r9.u8);
	// lwz r10,-1652(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + -1652);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x820c4368
	if (cr6.getEQ()) goto loc_820C4368;
	// stb r5,-1(r11)
	PPC_STORE_U8(r11.u32 + -1, ctx.r5.u8);
	// stb r4,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r4.u8);
	// stb r5,1(r11)
	PPC_STORE_U8(r11.u32 + 1, ctx.r5.u8);
loc_820C4368:
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// addi r11,r11,28
	r11.s64 = r11.s64 + 28;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x820c4344
	if (!cr6.getEQ()) goto loc_820C4344;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C4380"))) PPC_WEAK_FUNC(sub_820C4380);
PPC_FUNC_IMPL(__imp__sub_820C4380) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f30.u64);
	// stfd f31,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-1888(r1)
	ea = -1888 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x8238add8
	sub_8238ADD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f30.f64 = double(temp.f32);
	// fmr f31,f30
	f31.f64 = f30.f64;
	// bl 0x820b1628
	sub_820B1628(ctx, base);
	// lis r30,-32014
	r30.s64 = -2098069504;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// beq cr6,0x820c4400
	if (cr6.getEQ()) goto loc_820C4400;
	// lfs f13,4720(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4720);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,4724(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4724);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f13,4712(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4712);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,4708(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4708);
	ctx.f12.f64 = double(temp.f32);
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// lfs f13,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f12
	f0.f64 = double(float(f0.f64 * ctx.f12.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x820c43f0
	if (!cr6.getLT()) goto loc_820C43F0;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_820C43F0:
	// fcmpu cr6,f0,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f30.f64);
	// ble cr6,0x820c43fc
	if (!cr6.getGT()) goto loc_820C43FC;
	// fmr f0,f30
	f0.f64 = f30.f64;
loc_820C43FC:
	// fmuls f31,f0,f0
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(f0.f64 * f0.f64));
loc_820C4400:
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// lis r28,-32190
	r28.s64 = -2109603840;
	// bne cr6,0x820c4438
	if (!cr6.getEQ()) goto loc_820C4438;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,744(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 744);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// lfs f31,14116(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14116);
	f31.f64 = double(temp.f32);
	// li r10,224
	ctx.r10.s64 = 224;
	// stw r10,18016(r28)
	PPC_STORE_U32(r28.u32 + 18016, ctx.r10.u32);
	// beq cr6,0x820c4430
	if (cr6.getEQ()) goto loc_820C4430;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x820c4438
	if (!cr6.getEQ()) goto loc_820C4438;
loc_820C4430:
	// bl 0x820b1738
	sub_820B1738(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
loc_820C4438:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r31,r11,-1472
	r31.s64 = r11.s64 + -1472;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f3,12900(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12900);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// bl 0x8238b078
	sub_8238B078(ctx, base);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8238bc28
	sub_8238BC28(ctx, base);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x820c44b0
	if (!cr6.getEQ()) goto loc_820C44B0;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r31,r11,5000
	r31.s64 = r11.s64 + 5000;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,46
	ctx.r6.s64 = 46;
	// bl 0x82098a20
	sub_82098A20(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r31,r11,6288
	r31.s64 = r11.s64 + 6288;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,46
	ctx.r6.s64 = 46;
	// bl 0x82098a20
	sub_82098A20(ctx, base);
loc_820C44B0:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// fmr f3,f31
	ctx.fpscr.disableFlushMode();
	ctx.f3.f64 = f31.f64;
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// addi r31,r11,-1536
	r31.s64 = r11.s64 + -1536;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8238b078
	sub_8238B078(ctx, base);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8238bc28
	sub_8238BC28(ctx, base);
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// bne cr6,0x820c4524
	if (!cr6.getEQ()) goto loc_820C4524;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r31,r11,5000
	r31.s64 = r11.s64 + 5000;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,46
	ctx.r6.s64 = 46;
	// bl 0x82098a20
	sub_82098A20(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r31,r11,6288
	r31.s64 = r11.s64 + 6288;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,46
	ctx.r6.s64 = 46;
	// bl 0x82098a20
	sub_82098A20(ctx, base);
loc_820C4524:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r4,30
	ctx.r4.s64 = 30;
	// addi r3,r1,992
	ctx.r3.s64 = ctx.r1.s64 + 992;
	// lfs f1,15432(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15432);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820c94a0
	sub_820C94A0(ctx, base);
	// addi r31,r1,992
	r31.s64 = ctx.r1.s64 + 992;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,30
	ctx.r6.s64 = 30;
	// li r7,0
	ctx.r7.s64 = 0;
	// bl 0x820c9760
	sub_820C9760(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r4,30
	ctx.r4.s64 = 30;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// lfs f1,14064(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14064);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820c94a0
	sub_820C94A0(ctx, base);
	// addi r31,r1,144
	r31.s64 = ctx.r1.s64 + 144;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r6,30
	ctx.r6.s64 = 30;
	// li r7,0
	ctx.r7.s64 = 0;
	// bl 0x820c9760
	sub_820C9760(ctx, base);
	// li r31,0
	r31.s64 = 0;
loc_820C4598:
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r29,r11,7576
	r29.s64 = r11.s64 + 7576;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x820c9930
	sub_820C9930(ctx, base);
	// addi r31,r31,112
	r31.s64 = r31.s64 + 112;
	// cmpwi cr6,r31,448
	cr6.compare<int32_t>(r31.s32, 448, xer);
	// ble cr6,0x820c4598
	if (!cr6.getGT()) goto loc_820C4598;
	// lwz r9,18016(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 18016);
	// li r11,0
	r11.s64 = 0;
	// clrlwi r10,r9,24
	ctx.r10.u64 = ctx.r9.u32 & 0xFF;
loc_820C45D0:
	// addi r8,r1,171
	ctx.r8.s64 = ctx.r1.s64 + 171;
	// addi r7,r1,1019
	ctx.r7.s64 = ctx.r1.s64 + 1019;
	// stbx r10,r11,r8
	PPC_STORE_U8(r11.u32 + ctx.r8.u32, ctx.r10.u8);
	// stbx r10,r11,r7
	PPC_STORE_U8(r11.u32 + ctx.r7.u32, ctx.r10.u8);
	// addi r11,r11,28
	r11.s64 = r11.s64 + 28;
	// cmpwi cr6,r11,840
	cr6.compare<int32_t>(r11.s32, 840, xer);
	// blt cr6,0x820c45d0
	if (cr6.getLT()) goto loc_820C45D0;
	// cmpwi cr6,r9,224
	cr6.compare<int32_t>(ctx.r9.s32, 224, xer);
	// bge cr6,0x820c461c
	if (!cr6.getLT()) goto loc_820C461C;
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r3,r11,8136
	ctx.r3.s64 = r11.s64 + 8136;
	// bl 0x820c4180
	sub_820C4180(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r31,r11,8136
	r31.s64 = r11.s64 + 8136;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// bl 0x820c9930
	sub_820C9930(ctx, base);
loc_820C461C:
	// addi r1,r1,1888
	ctx.r1.s64 = ctx.r1.s64 + 1888;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820C4630"))) PPC_WEAK_FUNC(sub_820C4630);
PPC_FUNC_IMPL(__imp__sub_820C4630) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// stfd f29,-128(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -128, f29.u64);
	// stfd f30,-120(r1)
	PPC_STORE_U64(ctx.r1.u32 + -120, f30.u64);
	// stfd f31,-112(r1)
	PPC_STORE_U64(ctx.r1.u32 + -112, f31.u64);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44071
	ctx.r3.u64 = ctx.r3.u64 | 44071;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820cc338
	sub_820CC338(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// addi r22,r11,17984
	r22.s64 = r11.s64 + 17984;
	// lis r3,0
	ctx.r3.s64 = 0;
	// lwz r29,-4(r22)
	r29.u64 = PPC_LOAD_U32(r22.u32 + -4);
	// beq cr6,0x820c467c
	if (cr6.getEQ()) goto loc_820C467C;
	// ori r3,r3,44072
	ctx.r3.u64 = ctx.r3.u64 | 44072;
	// b 0x820c4680
	goto loc_820C4680;
loc_820C467C:
	// ori r3,r3,44073
	ctx.r3.u64 = ctx.r3.u64 | 44073;
loc_820C4680:
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r30,-31991
	r30.s64 = -2096562176;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// lwz r4,-31544(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f31,15752(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15752);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// lfs f1,15748(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15748);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r5,0(r22)
	ctx.r5.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8209ba58
	sub_8209BA58(ctx, base);
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r7,r1,116
	ctx.r7.s64 = ctx.r1.s64 + 116;
	// lwz r4,-31544(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// lfs f1,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// lwz r4,-31544(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// andi. r11,r11,34
	r11.u64 = r11.u64 & 34;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r31,r11,85
	r31.s64 = r11.s64 + 85;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r31
	r11.s64 = r31.s32;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f0,120(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8209ba58
	sub_8209BA58(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lis r21,-32014
	r21.s64 = -2098069504;
	// lwz r11,-1668(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + -1668);
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// blt cr6,0x820c47d4
	if (cr6.getLT()) goto loc_820C47D4;
	// li r31,10
	r31.s64 = 10;
	// li r23,11
	r23.s64 = 11;
	// b 0x820c47f0
	goto loc_820C47F0;
loc_820C47D4:
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// blt cr6,0x820c47e8
	if (cr6.getLT()) goto loc_820C47E8;
	// li r31,6
	r31.s64 = 6;
	// li r23,9
	r23.s64 = 9;
	// b 0x820c47f0
	goto loc_820C47F0;
loc_820C47E8:
	// li r31,0
	r31.s64 = 0;
	// li r23,5
	r23.s64 = 5;
loc_820C47F0:
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// cmpw cr6,r31,r23
	cr6.compare<int32_t>(r31.s32, r23.s32, xer);
	// lwz r28,18120(r10)
	r28.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18120);
	// bgt cr6,0x820c4920
	if (cr6.getGT()) goto loc_820C4920;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// lis r24,-32190
	r24.s64 = -2109603840;
	// lis r25,-32190
	r25.s64 = -2109603840;
	// lis r26,-32190
	r26.s64 = -2109603840;
	// lis r20,-32014
	r20.s64 = -2098069504;
	// lwz r10,18116(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18116);
	// extsw r8,r10
	ctx.r8.s64 = ctx.r10.s32;
	// addi r9,r10,-2
	ctx.r9.s64 = ctx.r10.s64 + -2;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// extsw r7,r9
	ctx.r7.s64 = ctx.r9.s32;
	// addi r10,r10,18056
	ctx.r10.s64 = ctx.r10.s64 + 18056;
	// std r8,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, ctx.r8.u64);
	// rlwinm r9,r31,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// add r29,r9,r10
	r29.u64 = ctx.r9.u64 + ctx.r10.u64;
	// std r7,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r7.u64);
	// lfd f13,104(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f30,f13
	f30.f64 = double(float(ctx.f13.f64));
	// lfd f0,120(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f29,f0
	f29.f64 = double(float(f0.f64));
	// b 0x820c485c
	goto loc_820C485C;
loc_820C4858:
	// lwz r11,-1668(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + -1668);
loc_820C485C:
	// lis r3,54
	ctx.r3.s64 = 3538944;
	// lwz r27,-4(r22)
	r27.u64 = PPC_LOAD_U32(r22.u32 + -4);
	// cmpw cr6,r11,r31
	cr6.compare<int32_t>(r11.s32, r31.s32, xer);
	// ori r3,r3,144
	ctx.r3.u64 = ctx.r3.u64 | 144;
	// bne cr6,0x820c487c
	if (!cr6.getEQ()) goto loc_820C487C;
	// lis r3,106
	ctx.r3.s64 = 6946816;
	// lwz r27,-1540(r20)
	r27.u64 = PPC_LOAD_U32(r20.u32 + -1540);
	// ori r3,r3,144
	ctx.r3.u64 = ctx.r3.u64 | 144;
loc_820C487C:
	// extsw r11,r28
	r11.s64 = r28.s32;
	// lfs f0,18108(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + 18108);
	f0.f64 = double(temp.f32);
	// fadds f3,f30,f0
	ctx.f3.f64 = double(float(f30.f64 + f0.f64));
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f0,120(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// lfs f0,18104(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 18104);
	f0.f64 = double(temp.f32);
	// fadds f4,f31,f0
	ctx.f4.f64 = double(float(f31.f64 + f0.f64));
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// bl 0x820972f8
	sub_820972F8(ctx, base);
	// lwz r3,0(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lwz r4,-31544(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,18112(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 18112);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// b 0x830e0200
	// ERROR 830E0200
	return;
	// cmpw cr6,r31,r23
	cr6.compare<int32_t>(r31.s32, r23.s32, xer);
	// ble cr6,0x820c4858
	if (!cr6.getGT()) goto loc_820C4858;
loc_820C4920:
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lfd f29,-128(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -128);
	// lfd f30,-120(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -120);
	// lfd f31,-112(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_820C4938"))) PPC_WEAK_FUNC(sub_820C4938);
PPC_FUNC_IMPL(__imp__sub_820C4938) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44122
	ctx.r3.u64 = ctx.r3.u64 | 44122;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r3,0
	ctx.r3.s64 = 0;
	// lbz r11,-8431(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -8431);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c4970
	if (cr6.getEQ()) goto loc_820C4970;
	// ori r3,r3,44075
	ctx.r3.u64 = ctx.r3.u64 | 44075;
	// b 0x820c4974
	goto loc_820C4974;
loc_820C4970:
	// ori r3,r3,44099
	ctx.r3.u64 = ctx.r3.u64 | 44099;
loc_820C4974:
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r30,-31991
	r30.s64 = -2096562176;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lwz r4,-31544(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f2,15768(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15768);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15764(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15764);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// lis r31,-32190
	r31.s64 = -2109603840;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// lwz r5,17980(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 17980);
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8209ba58
	sub_8209BA58(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// lwz r4,-31544(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// lfs f2,15760(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15760);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15756(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15756);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// lwz r5,17980(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 17980);
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8209ba58
	sub_8209BA58(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820C4A68"))) PPC_WEAK_FUNC(sub_820C4A68);
PPC_FUNC_IMPL(__imp__sub_820C4A68) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed53c
	// stwu r1,-496(r1)
	ea = -496 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c1e08
	sub_820C1E08(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c2688
	sub_820C2688(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// bl 0x820c26b0
	sub_820C26B0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	f29.f64 = ctx.f1.f64;
	// bl 0x820c26d8
	sub_820C26D8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// bl 0x820c25e8
	sub_820C25E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x820c2700
	sub_820C2700(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f27,f1
	ctx.fpscr.disableFlushMode();
	f27.f64 = ctx.f1.f64;
	// bl 0x820c2728
	sub_820C2728(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f26,f1
	ctx.fpscr.disableFlushMode();
	f26.f64 = ctx.f1.f64;
	// bl 0x820c1b68
	sub_820C1B68(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c1ca8
	sub_820C1CA8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// bl 0x821393c0
	sub_821393C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c4c18
	if (cr6.getEQ()) goto loc_820C4C18;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// mulli r10,r3,56
	ctx.r10.s64 = ctx.r3.s64 * 56;
	// addi r11,r11,6504
	r11.s64 = r11.s64 + 6504;
	// add r31,r10,r11
	r31.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2
	ctx.r4.s64 = 2;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lfs f25,3060(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f25.f64 = double(temp.f32);
	// beq cr6,0x820c4b38
	if (cr6.getEQ()) goto loc_820C4B38;
	// lfs f0,24(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f25
	f0.f64 = double(float(f0.f64 - f25.f64));
	// stfs f0,24(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
loc_820C4B38:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c4b58
	if (cr6.getEQ()) goto loc_820C4B58;
	// lfs f0,24(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f25
	f0.f64 = double(float(f0.f64 + f25.f64));
	// stfs f0,24(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
loc_820C4B58:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,4
	ctx.r4.s64 = 4;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c4b78
	if (cr6.getEQ()) goto loc_820C4B78;
	// lfs f0,20(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f25
	f0.f64 = double(float(f0.f64 + f25.f64));
	// stfs f0,20(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
loc_820C4B78:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c4b98
	if (cr6.getEQ()) goto loc_820C4B98;
	// lfs f0,20(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f25
	f0.f64 = double(float(f0.f64 - f25.f64));
	// stfs f0,20(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
loc_820C4B98:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,32
	ctx.r4.s64 = 32;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c4bc0
	if (cr6.getEQ()) goto loc_820C4BC0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,28(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 28);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15836(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15836);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,28(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 28, temp.u32);
loc_820C4BC0:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,16
	ctx.r4.s64 = 16;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c4be8
	if (cr6.getEQ()) goto loc_820C4BE8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,28(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 28);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15832(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15832);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,28(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 28, temp.u32);
loc_820C4BE8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,28(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 28);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,24(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// addi r3,r11,15780
	ctx.r3.s64 = r11.s64 + 15780;
	// stfd f3,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f3.u64);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// stfd f2,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f2.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// stfd f1,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.f1.u64);
	// ld r4,24(r1)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r1.u32 + 24);
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_820C4C18:
	// bl 0x820c31d0
	sub_820C31D0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x820c4c44
	if (cr6.getEQ()) goto loc_820C4C44;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// beq cr6,0x820c4c38
	if (cr6.getEQ()) goto loc_820C4C38;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14124(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14124);
	ctx.f2.f64 = double(temp.f32);
	// b 0x820c4c4c
	goto loc_820C4C4C;
loc_820C4C38:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,15684(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15684);
	ctx.f2.f64 = double(temp.f32);
	// b 0x820c4c4c
	goto loc_820C4C4C;
loc_820C4C44:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,15680(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15680);
	ctx.f2.f64 = double(temp.f32);
loc_820C4C4C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// lfs f4,14056(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14056);
	ctx.f4.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	ctx.f3.f64 = double(temp.f32);
	// bl 0x8238b530
	sub_8238B530(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lfs f31,13980(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	f31.f64 = double(temp.f32);
	// fmuls f1,f26,f31
	ctx.f1.f64 = double(float(f26.f64 * f31.f64));
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r1,192
	ctx.r4.s64 = ctx.r1.s64 + 192;
	// lfs f0,6588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fnmsubs f1,f27,f31,f0
	ctx.f1.f64 = double(float(-(f27.f64 * f31.f64 - f0.f64)));
	// bl 0x8210b968
	sub_8210B968(ctx, base);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// fmr f6,f29
	ctx.fpscr.disableFlushMode();
	ctx.f6.f64 = f29.f64;
	// fmr f5,f30
	ctx.f5.f64 = f30.f64;
	// fmr f3,f29
	ctx.f3.f64 = f29.f64;
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// lfs f9,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f9.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f7,f9
	ctx.f7.f64 = ctx.f9.f64;
	// fmr f4,f9
	ctx.f4.f64 = ctx.f9.f64;
	// fmr f1,f28
	ctx.f1.f64 = f28.f64;
	// lfs f8,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f8.f64 = double(temp.f32);
	// bl 0x8210bf20
	sub_8210BF20(ctx, base);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r1,320
	ctx.r10.s64 = ctx.r1.s64 + 320;
	// li r9,8
	ctx.r9.s64 = 8;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_820C4CF0:
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// bdnz 0x820c4cf0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820C4CF0;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// bl 0x8210d7c0
	sub_8210D7C0(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lis r6,25820
	ctx.r6.s64 = 1692139520;
	// addi r30,r11,17980
	r30.s64 = r11.s64 + 17980;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// ori r6,r6,25640
	ctx.r6.u64 = ctx.r6.u64 | 25640;
	// lwz r11,36(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 36);
	// cmpwi cr6,r11,224
	cr6.compare<int32_t>(r11.s32, 224, xer);
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// blt cr6,0x820c4d38
	if (cr6.getLT()) goto loc_820C4D38;
	// li r5,255
	ctx.r5.s64 = 255;
loc_820C4D38:
	// bl 0x820a37f8
	sub_820A37F8(ctx, base);
	// addi r3,r1,320
	ctx.r3.s64 = ctx.r1.s64 + 320;
	// bl 0x8210d7c0
	sub_8210D7C0(ctx, base);
	// bl 0x820a6270
	sub_820A6270(ctx, base);
	// lis r31,-31991
	r31.s64 = -2096562176;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// lfs f2,12460(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12460);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,15776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15776);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// lwz r5,0(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8209ba58
	sub_8209BA58(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lfs f2,15772(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15772);
	ctx.f2.f64 = double(temp.f32);
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r5,0(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8209ba58
	sub_8209BA58(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r1,r1,496
	ctx.r1.s64 = ctx.r1.s64 + 496;
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed588
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820C4E38"))) PPC_WEAK_FUNC(sub_820C4E38);
PPC_FUNC_IMPL(__imp__sub_820C4E38) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f29,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f29.u64);
	// stfd f30,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f30.u64);
	// stfd f31,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31991
	r31.s64 = -2096562176;
	// li r4,8
	ctx.r4.s64 = 8;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x82193c38
	sub_82193C38(ctx, base);
	// li r4,2
	ctx.r4.s64 = 2;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x82193860
	sub_82193860(ctx, base);
	// li r4,45
	ctx.r4.s64 = 45;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x82193960
	sub_82193960(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x82193748
	sub_82193748(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r3,r11,27448
	ctx.r3.s64 = r11.s64 + 27448;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// bl 0x82096fb0
	sub_82096FB0(ctx, base);
	// lis r11,-32015
	r11.s64 = -2098135040;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// lwz r4,-8856(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + -8856);
	// bl 0x8218de38
	sub_8218DE38(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// li r12,1
	r12.s64 = 1;
	// rldicr r12,r12,63,63
	r12.u64 = __builtin_rotateleft64(r12.u64, 63) & 0xFFFFFFFFFFFFFFFF;
	// lwz r11,18016(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 18016);
	// lfs f31,2688(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f31.f64 = double(temp.f32);
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// extsw r9,r11
	ctx.r9.s64 = r11.s32;
	// lwz r11,13356(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// stfs f31,132(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// stfs f31,136(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// stfs f31,128(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// std r9,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r9.u64);
	// lfd f0,112(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,18124(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 18124);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fsubs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 - f0.f64));
	// lfs f0,15852(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15852);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,140(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// stfs f31,6016(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 6016, temp.u32);
	// lfs f0,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	f0.f64 = double(temp.f32);
	// stfs f0,6020(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 6020, temp.u32);
	// lfs f0,136(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	f0.f64 = double(temp.f32);
	// stfs f0,6024(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 6024, temp.u32);
	// lfs f0,140(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	f0.f64 = double(temp.f32);
	// stfs f0,6028(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 6028, temp.u32);
	// ld r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// or r10,r10,r12
	ctx.r10.u64 = ctx.r10.u64 | r12.u64;
	// std r10,8(r11)
	PPC_STORE_U64(r11.u32 + 8, ctx.r10.u64);
	// bl 0x823ee680
	sub_823EE680(ctx, base);
	// clrlwi r11,r3,16
	r11.u64 = ctx.r3.u32 & 0xFFFF;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,15620(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15620);
	f30.f64 = double(temp.f32);
	// lfd f0,112(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f29,f0,f30
	f29.f64 = double(float(f0.f64 * f30.f64));
	// bl 0x823ee680
	sub_823EE680(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f9,f29
	ctx.fpscr.disableFlushMode();
	ctx.f9.f64 = f29.f64;
	// clrlwi r10,r3,16
	ctx.r10.u64 = ctx.r3.u32 & 0xFFFF;
	// fmr f6,f31
	ctx.f6.f64 = f31.f64;
	// fmr f5,f31
	ctx.f5.f64 = f31.f64;
	// lfs f0,15848(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15848);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fadds f11,f29,f0
	ctx.f11.f64 = double(float(f29.f64 + f0.f64));
	// std r10,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r10.u64);
	// lfs f8,15844(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15844);
	ctx.f8.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f7,14120(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14120);
	ctx.f7.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f4,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f4.f64 = double(temp.f32);
	// lfd f0,112(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fmr f3,f4
	ctx.f3.f64 = ctx.f4.f64;
	// fmr f2,f4
	ctx.f2.f64 = ctx.f4.f64;
	// fmr f1,f4
	ctx.f1.f64 = ctx.f4.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f10,f0,f30
	ctx.f10.f64 = double(float(f0.f64 * f30.f64));
	// lfs f0,15840(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15840);
	f0.f64 = double(temp.f32);
	// fadds f12,f10,f0
	ctx.f12.f64 = double(float(ctx.f10.f64 + f0.f64));
	// bl 0x82098638
	sub_82098638(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x82192fb0
	sub_82192FB0(ctx, base);
	// li r4,7
	ctx.r4.s64 = 7;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x82193478
	sub_82193478(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x82193410
	sub_82193410(ctx, base);
	// li r4,15
	ctx.r4.s64 = 15;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x82193c38
	sub_82193C38(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x82193860
	sub_82193860(ctx, base);
	// li r4,2
	ctx.r4.s64 = 2;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x821937c0
	sub_821937C0(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f29,-40(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f30,-32(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// lfd f31,-24(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C5030"))) PPC_WEAK_FUNC(sub_820C5030);
PPC_FUNC_IMPL(__imp__sub_820C5030) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820c4380
	sub_820C4380(ctx, base);
	// bl 0x820b1628
	sub_820B1628(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x820c506c
	if (cr6.getEQ()) goto loc_820C506C;
	// bl 0x820c4938
	sub_820C4938(ctx, base);
	// bl 0x820c4a68
	sub_820C4A68(ctx, base);
	// bl 0x820c4630
	sub_820C4630(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C506C:
	// bl 0x820b1628
	sub_820B1628(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C5080"))) PPC_WEAK_FUNC(sub_820C5080);
PPC_FUNC_IMPL(__imp__sub_820C5080) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,0
	r11.s64 = 0;
	// ori r31,r11,40960
	r31.u64 = r11.u64 | 40960;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// bne cr6,0x820c50e4
	if (!cr6.getEQ()) goto loc_820C50E4;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,4096
	ctx.r4.s64 = 4096;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c5140
	if (cr6.getEQ()) goto loc_820C5140;
	// lwz r3,-1636(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -1636);
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// cmpw cr6,r3,r30
	cr6.compare<int32_t>(ctx.r3.s32, r30.s32, xer);
	// beq cr6,0x820c5140
	if (cr6.getEQ()) goto loc_820C5140;
loc_820C50E4:
	// lwz r3,-1636(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -1636);
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a7508
	sub_820A7508(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a7508
	sub_820A7508(ctx, base);
	// lwz r3,-1636(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -1636);
	// bl 0x820c1e18
	sub_820C1E18(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// addi r7,r11,15688
	ctx.r7.s64 = r11.s64 + 15688;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r8,2658
	ctx.r8.s64 = 2658;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// li r11,10
	r11.s64 = 10;
	// stw r11,-1624(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1624, r11.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820C5140:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C5158"))) PPC_WEAK_FUNC(sub_820C5158);
PPC_FUNC_IMPL(__imp__sub_820C5158) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed110
	// addi r12,r1,-120
	r12.s64 = ctx.r1.s64 + -120;
	// bl 0x823ed53c
	// ld r12,-4096(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// stwu r1,-4576(r1)
	ea = -4576 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820c4380
	sub_820C4380(ctx, base);
	// bl 0x820b1628
	sub_820B1628(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x820c56e0
	if (cr6.getEQ()) goto loc_820C56E0;
	// lis r26,-32014
	r26.s64 = -2098069504;
	// lwz r3,-1636(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + -1636);
	// bl 0x820c25e8
	sub_820C25E8(ctx, base);
	// lwz r3,-1636(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + -1636);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x820c2610
	sub_820C2610(ctx, base);
	// lwz r3,-1636(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + -1636);
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// bl 0x820c2638
	sub_820C2638(ctx, base);
	// lwz r3,-1636(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + -1636);
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	f29.f64 = ctx.f1.f64;
	// bl 0x820c2660
	sub_820C2660(ctx, base);
	// lwz r3,-1636(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + -1636);
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// bl 0x820c2538
	sub_820C2538(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,-1636(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + -1636);
	// bl 0x820c2700
	sub_820C2700(ctx, base);
	// lwz r3,-1636(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + -1636);
	// fmr f27,f1
	ctx.fpscr.disableFlushMode();
	f27.f64 = ctx.f1.f64;
	// bl 0x820c2728
	sub_820C2728(ctx, base);
	// fmr f26,f1
	ctx.fpscr.disableFlushMode();
	f26.f64 = ctx.f1.f64;
	// bl 0x821393c0
	sub_821393C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c5308
	if (cr6.getEQ()) goto loc_820C5308;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// mulli r10,r3,56
	ctx.r10.s64 = ctx.r3.s64 * 56;
	// addi r11,r11,6504
	r11.s64 = r11.s64 + 6504;
	// add r31,r10,r11
	r31.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2
	ctx.r4.s64 = 2;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lfs f25,3060(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f25.f64 = double(temp.f32);
	// beq cr6,0x820c5228
	if (cr6.getEQ()) goto loc_820C5228;
	// lfs f0,44(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 44);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f25
	f0.f64 = double(float(f0.f64 - f25.f64));
	// stfs f0,44(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 44, temp.u32);
loc_820C5228:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c5248
	if (cr6.getEQ()) goto loc_820C5248;
	// lfs f0,44(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 44);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f25
	f0.f64 = double(float(f0.f64 + f25.f64));
	// stfs f0,44(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 44, temp.u32);
loc_820C5248:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,4
	ctx.r4.s64 = 4;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c5268
	if (cr6.getEQ()) goto loc_820C5268;
	// lfs f0,48(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 48);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f25
	f0.f64 = double(float(f0.f64 + f25.f64));
	// stfs f0,48(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
loc_820C5268:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c5288
	if (cr6.getEQ()) goto loc_820C5288;
	// lfs f0,48(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 48);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f25
	f0.f64 = double(float(f0.f64 - f25.f64));
	// stfs f0,48(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
loc_820C5288:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,32
	ctx.r4.s64 = 32;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c52b0
	if (cr6.getEQ()) goto loc_820C52B0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,52(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 52);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15836(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15836);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,52(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
loc_820C52B0:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,16
	ctx.r4.s64 = 16;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c52d8
	if (cr6.getEQ()) goto loc_820C52D8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,52(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 52);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,15832(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15832);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,52(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
loc_820C52D8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,52(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 52);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,48(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 48);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,44(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 44);
	ctx.f1.f64 = double(temp.f32);
	// addi r3,r11,15888
	ctx.r3.s64 = r11.s64 + 15888;
	// stfd f3,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f3.u64);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// stfd f2,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f2.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// stfd f1,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.f1.u64);
	// ld r4,24(r1)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r1.u32 + 24);
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_820C5308:
	// bl 0x820c32b8
	sub_820C32B8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// lfs f4,14056(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14056);
	ctx.f4.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	ctx.f3.f64 = double(temp.f32);
	// bl 0x8238b530
	sub_8238B530(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r1,208
	ctx.r4.s64 = ctx.r1.s64 + 208;
	// lfs f31,13980(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	f31.f64 = double(temp.f32);
	// fmuls f1,f26,f31
	ctx.f1.f64 = double(float(f26.f64 * f31.f64));
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// lfs f0,6588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fnmsubs f1,f27,f31,f0
	ctx.f1.f64 = double(float(-(f27.f64 * f31.f64 - f0.f64)));
	// bl 0x8210b968
	sub_8210B968(ctx, base);
	// addi r4,r1,208
	ctx.r4.s64 = ctx.r1.s64 + 208;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lfs f1,-1584(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + -1584);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lfs f1,-1584(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + -1584);
	ctx.f1.f64 = double(temp.f32);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f28
	f31.f64 = double(float(f0.f64 * f28.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// fmr f6,f30
	ctx.f6.f64 = f30.f64;
	// fmr f5,f29
	ctx.f5.f64 = f29.f64;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// lfs f9,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f9.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f7,f9
	ctx.f7.f64 = ctx.f9.f64;
	// fmr f4,f9
	ctx.f4.f64 = ctx.f9.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// lfs f8,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f8.f64 = double(temp.f32);
	// fmadds f3,f0,f28,f30
	ctx.f3.f64 = double(float(f0.f64 * f28.f64 + f30.f64));
	// bl 0x8210bf20
	sub_8210BF20(ctx, base);
	// addi r4,r1,208
	ctx.r4.s64 = ctx.r1.s64 + 208;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8210c730
	sub_8210C730(ctx, base);
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r1,336
	ctx.r10.s64 = ctx.r1.s64 + 336;
	// li r9,8
	ctx.r9.s64 = 8;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_820C53DC:
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// bdnz 0x820c53dc
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_820C53DC;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bl 0x8210d7c0
	sub_8210D7C0(ctx, base);
	// lis r6,-24321
	ctx.r6.s64 = -1593901056;
	// li r5,64
	ctx.r5.s64 = 64;
	// ori r6,r6,41020
	ctx.r6.u64 = ctx.r6.u64 | 41020;
	// addi r4,r1,208
	ctx.r4.s64 = ctx.r1.s64 + 208;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820a37f8
	sub_820A37F8(ctx, base);
	// addi r3,r1,336
	ctx.r3.s64 = ctx.r1.s64 + 336;
	// bl 0x8210d7c0
	sub_8210D7C0(ctx, base);
	// lis r24,-31994
	r24.s64 = -2096758784;
	// lis r18,-32014
	r18.s64 = -2098069504;
	// li r27,0
	r27.s64 = 0;
	// lwz r11,11488(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 11488);
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// stw r27,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r27.u32);
	// stw r27,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r27.u32);
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// sth r27,400(r1)
	PPC_STORE_U16(ctx.r1.u32 + 400, r27.u16);
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// rlwinm r11,r11,0,29,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// addi r21,r11,140
	r21.s64 = r11.s64 + 140;
	// lwz r11,-1624(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -1624);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x820c545c
	if (!cr6.getGT()) goto loc_820C545C;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,-1624(r18)
	PPC_STORE_U32(r18.u32 + -1624, r11.u32);
loc_820C545C:
	// bl 0x820c3988
	sub_820C3988(ctx, base);
	// lwz r11,11488(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 11488);
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r21
	r11.u64 = r11.u64 + r21.u64;
	// addi r25,r11,1
	r25.s64 = r11.s64 + 1;
	// bl 0x820c1688
	sub_820C1688(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// addi r20,r11,17988
	r20.s64 = r11.s64 + 17988;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r28,-31991
	r28.s64 = -2096562176;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lfs f31,15884(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15884);
	f31.f64 = double(temp.f32);
	// ble cr6,0x820c5560
	if (!cr6.getGT()) goto loc_820C5560;
	// mr r23,r27
	r23.u64 = r27.u64;
	// lis r19,-32190
	r19.s64 = -2109603840;
	// lis r22,-32190
	r22.s64 = -2109603840;
loc_820C54B0:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820c1a28
	sub_820C1A28(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,2000
	ctx.r4.s64 = 2000;
	// addi r3,r1,400
	ctx.r3.s64 = ctx.r1.s64 + 400;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// lwz r11,-1644(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1644);
	// add r11,r23,r11
	r11.u64 = r23.u64 + r11.u64;
	// add r31,r11,r21
	r31.u64 = r11.u64 + r21.u64;
	// lwz r11,18128(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 18128);
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// ble cr6,0x820c554c
	if (!cr6.getGT()) goto loc_820C554C;
	// lwz r11,18132(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + 18132);
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// bge cr6,0x820c554c
	if (!cr6.getLT()) goto loc_820C554C;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r4,-31544(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + -31544);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r31
	r11.s64 = r31.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f0,120(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lwz r5,-12(r20)
	ctx.r5.u64 = PPC_LOAD_U32(r20.u32 + -12);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
loc_820C554C:
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// addi r23,r23,12
	r23.s64 = r23.s64 + 12;
	// bl 0x820c1688
	sub_820C1688(ctx, base);
	// cmpw cr6,r27,r3
	cr6.compare<int32_t>(r27.s32, ctx.r3.s32, xer);
	// blt cr6,0x820c54b0
	if (cr6.getLT()) goto loc_820C54B0;
loc_820C5560:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r4,-31544(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + -31544);
	// addi r7,r1,132
	ctx.r7.s64 = ctx.r1.s64 + 132;
	// addi r6,r1,108
	ctx.r6.s64 = ctx.r1.s64 + 108;
	// addi r5,r1,400
	ctx.r5.s64 = ctx.r1.s64 + 400;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f1,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,11488(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 11488);
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lis r7,128
	ctx.r7.s64 = 8388608;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// ori r7,r7,80
	ctx.r7.u64 = ctx.r7.u64 | 80;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// addi r5,r10,82
	ctx.r5.s64 = ctx.r10.s64 + 82;
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// li r3,75
	ctx.r3.s64 = 75;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// addi r6,r11,-2
	ctx.r6.s64 = r11.s64 + -2;
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// lwz r3,-1636(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + -1636);
	// bl 0x820c1a28
	sub_820C1A28(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r8,-1636(r26)
	ctx.r8.u64 = PPC_LOAD_U32(r26.u32 + -1636);
	// addi r5,r11,15856
	ctx.r5.s64 = r11.s64 + 15856;
	// lwz r6,-1644(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -1644);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r4,25
	ctx.r4.s64 = 25;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// lfs f1,-1632(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -1632);
	ctx.f1.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stfd f1,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.f1.u64);
	// ld r9,64(r1)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r1.u32 + 64);
	// lwz r7,-1640(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + -1640);
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1628(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1628);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c56e0
	if (cr6.getEQ()) goto loc_820C56E0;
	// lwz r11,11488(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 11488);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lwz r4,-31544(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + -31544);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// subfic r10,r11,0
	xer.ca = r11.u32 <= 0;
	ctx.r10.s64 = 0 - r11.s64;
	// lwz r11,-1624(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -1624);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// subfe r11,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	r11.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r30,r11,r21
	r30.u64 = r11.u64 + r21.u64;
	// bne cr6,0x820c568c
	if (!cr6.getEQ()) goto loc_820C568C;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r30
	r11.s64 = r30.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f0,120(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r5,-4(r20)
	ctx.r5.u64 = PPC_LOAD_U32(r20.u32 + -4);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// b 0x820c56d0
	goto loc_820C56D0;
loc_820C568C:
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r30
	r11.s64 = r30.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f0,120(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// lwz r5,0(r20)
	ctx.r5.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
loc_820C56D0:
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// bl 0x820c5080
	sub_820C5080(ctx, base);
loc_820C56E0:
	// addi r1,r1,4576
	ctx.r1.s64 = ctx.r1.s64 + 4576;
	// addi r12,r1,-120
	r12.s64 = ctx.r1.s64 + -120;
	// bl 0x823ed588
	// b 0x823ed160
	return;
}

__attribute__((alias("__imp__sub_820C56F0"))) PPC_WEAK_FUNC(sub_820C56F0);
PPC_FUNC_IMPL(__imp__sub_820C56F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fctiwz f0,f1
	ctx.fpscr.disableFlushMode();
	f0.s64 = (ctx.f1.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f1.f64));
	// lhz r31,0(r30)
	r31.u64 = PPC_LOAD_U16(r30.u32 + 0);
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,273
	ctx.r4.s64 = 273;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c573c
	if (cr6.getEQ()) goto loc_820C573C;
	// addi r31,r31,1024
	r31.s64 = r31.s64 + 1024;
	// b 0x820c5754
	goto loc_820C5754;
loc_820C573C:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,546
	ctx.r4.s64 = 546;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c5754
	if (cr6.getEQ()) goto loc_820C5754;
	// addi r31,r31,-1024
	r31.s64 = r31.s64 + -1024;
loc_820C5754:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,80
	cr6.compare<int32_t>(r11.s32, 80, xer);
	// ble cr6,0x820c576c
	if (!cr6.getGT()) goto loc_820C576C;
	// li r11,80
	r11.s64 = 80;
	// addi r11,r11,-20
	r11.s64 = r11.s64 + -20;
	// b 0x820c5798
	goto loc_820C5798;
loc_820C576C:
	// cmpwi cr6,r11,-80
	cr6.compare<int32_t>(r11.s32, -80, xer);
	// bge cr6,0x820c577c
	if (!cr6.getLT()) goto loc_820C577C;
	// li r11,-80
	r11.s64 = -80;
	// b 0x820c5794
	goto loc_820C5794;
loc_820C577C:
	// cmpwi cr6,r11,20
	cr6.compare<int32_t>(r11.s32, 20, xer);
	// ble cr6,0x820c578c
	if (!cr6.getGT()) goto loc_820C578C;
	// addi r11,r11,-20
	r11.s64 = r11.s64 + -20;
	// b 0x820c5798
	goto loc_820C5798;
loc_820C578C:
	// cmpwi cr6,r11,-20
	cr6.compare<int32_t>(r11.s32, -20, xer);
	// bge cr6,0x820c57b8
	if (!cr6.getLT()) goto loc_820C57B8;
loc_820C5794:
	// addi r11,r11,20
	r11.s64 = r11.s64 + 20;
loc_820C5798:
	// lis r10,26214
	ctx.r10.s64 = 1717960704;
	// rlwinm r11,r11,11,0,20
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 11) & 0xFFFFF800;
	// ori r10,r10,26215
	ctx.r10.u64 = ctx.r10.u64 | 26215;
	// mulhw r11,r11,r10
	r11.s64 = (int64_t(r11.s32) * int64_t(ctx.r10.s32)) >> 32;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// add r31,r11,r31
	r31.u64 = r11.u64 + r31.u64;
loc_820C57B8:
	// cmpwi cr6,r31,32767
	cr6.compare<int32_t>(r31.s32, 32767, xer);
	// ble cr6,0x820c57cc
	if (!cr6.getGT()) goto loc_820C57CC;
	// li r11,32767
	r11.s64 = 32767;
	// sth r11,0(r30)
	PPC_STORE_U16(r30.u32 + 0, r11.u16);
	// b 0x820c57e4
	goto loc_820C57E4;
loc_820C57CC:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x820c57e0
	if (!cr6.getLT()) goto loc_820C57E0;
	// li r11,0
	r11.s64 = 0;
	// sth r11,0(r30)
	PPC_STORE_U16(r30.u32 + 0, r11.u16);
	// b 0x820c57e4
	goto loc_820C57E4;
loc_820C57E0:
	// sth r31,0(r30)
	PPC_STORE_U16(r30.u32 + 0, r31.u16);
loc_820C57E4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C5800"))) PPC_WEAK_FUNC(sub_820C5800);
PPC_FUNC_IMPL(__imp__sub_820C5800) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// bl 0x82183d48
	sub_82183D48(ctx, base);
	// rlwinm r11,r3,8,16,23
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 8) & 0xFF00;
	// clrlwi r3,r11,16
	ctx.r3.u64 = r11.u32 & 0xFFFF;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C5830"))) PPC_WEAK_FUNC(sub_820C5830);
PPC_FUNC_IMPL(__imp__sub_820C5830) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// rlwinm r11,r31,24,24,31
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 24) & 0xFF;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82184e48
	sub_82184E48(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C5868"))) PPC_WEAK_FUNC(sub_820C5868);
PPC_FUNC_IMPL(__imp__sub_820C5868) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// bl 0x82183d40
	sub_82183D40(ctx, base);
	// rlwinm r11,r3,8,16,23
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 8) & 0xFF00;
	// clrlwi r3,r11,16
	ctx.r3.u64 = r11.u32 & 0xFFFF;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C5898"))) PPC_WEAK_FUNC(sub_820C5898);
PPC_FUNC_IMPL(__imp__sub_820C5898) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// rlwinm r11,r31,24,24,31
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 24) & 0xFF;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82184e18
	sub_82184E18(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C58D0"))) PPC_WEAK_FUNC(sub_820C58D0);
PPC_FUNC_IMPL(__imp__sub_820C58D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -112, f30.u64);
	// stfd f31,-104(r1)
	PPC_STORE_U64(ctx.r1.u32 + -104, f31.u64);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820eb880
	sub_820EB880(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// lwz r11,-1676(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1676);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c5914
	if (cr6.getEQ()) goto loc_820C5914;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// addi r23,r11,17812
	r23.s64 = r11.s64 + 17812;
	// lwz r21,168(r23)
	r21.u64 = PPC_LOAD_U32(r23.u32 + 168);
	// b 0x820c5a18
	goto loc_820C5A18;
loc_820C5914:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,514
	ctx.r4.s64 = 514;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c59bc
	if (!cr6.getEQ()) goto loc_820C59BC;
	// bl 0x820c3320
	sub_820C3320(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c59bc
	if (!cr6.getEQ()) goto loc_820C59BC;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,257
	ctx.r4.s64 = 257;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c59a4
	if (!cr6.getEQ()) goto loc_820C59A4;
	// bl 0x820c3388
	sub_820C3388(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c59a4
	if (!cr6.getEQ()) goto loc_820C59A4;
	// lis r11,0
	r11.s64 = 0;
	// ori r30,r11,32768
	r30.u64 = r11.u64 | 32768;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c5a00
	if (cr6.getEQ()) goto loc_820C5A00;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r11,r22,1
	r11.s64 = r22.s64 + 1;
	// addi r7,r10,15688
	ctx.r7.s64 = ctx.r10.s64 + 15688;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r8,3404
	ctx.r8.s64 = 3404;
	// lwz r6,19944(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + 19944);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lwz r3,19936(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 19936);
	// srawi r10,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r10.s64 = r11.s32 >> 2;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r22,r10,r11
	r22.s64 = r11.s64 - ctx.r10.s64;
	// b 0x820c59f4
	goto loc_820C59F4;
loc_820C59A4:
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// cmpwi cr6,r22,4
	cr6.compare<int32_t>(r22.s32, 4, xer);
	// blt cr6,0x820c59b4
	if (cr6.getLT()) goto loc_820C59B4;
	// li r22,3
	r22.s64 = 3;
loc_820C59B4:
	// li r8,3399
	ctx.r8.s64 = 3399;
	// b 0x820c59d0
	goto loc_820C59D0;
loc_820C59BC:
	// addi r22,r22,-1
	r22.s64 = r22.s64 + -1;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// bge cr6,0x820c59cc
	if (!cr6.getLT()) goto loc_820C59CC;
	// li r22,0
	r22.s64 = 0;
loc_820C59CC:
	// li r8,3391
	ctx.r8.s64 = 3391;
loc_820C59D0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// addi r7,r11,15688
	ctx.r7.s64 = r11.s64 + 15688;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1608(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1608, r11.u32);
loc_820C59F4:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,43
	ctx.r4.s64 = 43;
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820C5A00:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// bl 0x820eb840
	sub_820EB840(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// addi r23,r11,17812
	r23.s64 = r11.s64 + 17812;
	// lwz r21,172(r23)
	r21.u64 = PPC_LOAD_U32(r23.u32 + 172);
loc_820C5A18:
	// extsw r10,r31
	ctx.r10.s64 = r31.s32;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// li r28,0
	r28.s64 = 0;
	// addi r29,r11,18136
	r29.s64 = r11.s64 + 18136;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// std r10,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r10.u64);
	// lfd f0,104(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// addi r24,r11,17816
	r24.s64 = r11.s64 + 17816;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r24
	r31.u64 = r24.u64;
	// lis r26,-31991
	r26.s64 = -2096562176;
	// lfs f31,6580(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
loc_820C5A50:
	// cmpw cr6,r22,r28
	cr6.compare<int32_t>(r22.s32, r28.s32, xer);
	// mr r25,r21
	r25.u64 = r21.u64;
	// beq cr6,0x820c5a60
	if (cr6.getEQ()) goto loc_820C5A60;
	// lwz r25,0(r23)
	r25.u64 = PPC_LOAD_U32(r23.u32 + 0);
loc_820C5A60:
	// lhz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r27,0(r29)
	r27.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r7,r1,104
	ctx.r7.s64 = ctx.r1.s64 + 104;
	// lwz r4,-31544(r26)
	ctx.r4.u64 = PPC_LOAD_U32(r26.u32 + -31544);
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r4,-31544(r26)
	ctx.r4.u64 = PPC_LOAD_U32(r26.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subf r30,r11,r27
	r30.s64 = r27.s64 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r30
	r11.s64 = r30.s32;
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// lfd f0,112(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r31,r31,20
	r31.s64 = r31.s64 + 20;
	// addi r11,r24,80
	r11.s64 = r24.s64 + 80;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x820c5a50
	if (cr6.getLT()) goto loc_820C5A50;
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// lfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_820C5B28"))) PPC_WEAK_FUNC(sub_820C5B28);
PPC_FUNC_IMPL(__imp__sub_820C5B28) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r12{};
	PPCRegister r16{};
	// cmplwi cr6,r4,9
	cr6.compare<uint32_t>(ctx.r4.u32, 9, xer);
	// bgt cr6,0x820c5b98
	if (cr6.getGT()) goto loc_820C5B98;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,23368
	r12.s64 = r12.s64 + 23368;
	// rlwinm r0,r4,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r4.u64) {
	case 0:
		goto loc_820C5B70;
	case 1:
		goto loc_820C5B74;
	case 2:
		goto loc_820C5B78;
	case 3:
		goto loc_820C5B7C;
	case 4:
		goto loc_820C5B80;
	case 5:
		goto loc_820C5B84;
	case 6:
		goto loc_820C5B88;
	case 7:
		goto loc_820C5B8C;
	case 8:
		goto loc_820C5B90;
	case 9:
		goto loc_820C5B94;
	default:
		__builtin_unreachable();
	}
	// lwz r16,23408(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23408);
	// lwz r16,23412(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23412);
	// lwz r16,23416(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23416);
	// lwz r16,23420(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23420);
	// lwz r16,23424(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23424);
	// lwz r16,23428(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23428);
	// lwz r16,23432(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23432);
	// lwz r16,23436(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23436);
	// lwz r16,23440(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23440);
	// lwz r16,23444(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23444);
loc_820C5B70:
	// b 0x820c2c28
	sub_820C2C28(ctx, base);
	return;
loc_820C5B74:
	// b 0x820c2cc0
	sub_820C2CC0(ctx, base);
	return;
loc_820C5B78:
	// b 0x820c2df0
	sub_820C2DF0(ctx, base);
	return;
loc_820C5B7C:
	// b 0x820c2e88
	sub_820C2E88(ctx, base);
	return;
loc_820C5B80:
	// b 0x820c2d58
	sub_820C2D58(ctx, base);
	return;
loc_820C5B84:
	// b 0x820c2f20
	sub_820C2F20(ctx, base);
	return;
loc_820C5B88:
	// b 0x820c2fb8
	sub_820C2FB8(ctx, base);
	return;
loc_820C5B8C:
	// b 0x820c3050
	sub_820C3050(ctx, base);
	return;
loc_820C5B90:
	// b 0x820c30e8
	sub_820C30E8(ctx, base);
	return;
loc_820C5B94:
	// b 0x820c31d0
	sub_820C31D0(ctx, base);
	return;
loc_820C5B98:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C5BA0"))) PPC_WEAK_FUNC(sub_820C5BA0);
PPC_FUNC_IMPL(__imp__sub_820C5BA0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x820ca110
	sub_820CA110(ctx, base);
	// li r4,514
	ctx.r4.s64 = 514;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c607c
	if (!cr6.getEQ()) goto loc_820C607C;
	// bl 0x820c3320
	sub_820C3320(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c607c
	if (!cr6.getEQ()) goto loc_820C607C;
	// li r4,257
	ctx.r4.s64 = 257;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c5f80
	if (!cr6.getEQ()) goto loc_820C5F80;
	// bl 0x820c3388
	sub_820C3388(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c5f80
	if (!cr6.getEQ()) goto loc_820C5F80;
	// lis r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// ori r4,r4,32768
	ctx.r4.u64 = ctx.r4.u64 | 32768;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c619c
	if (cr6.getEQ()) goto loc_820C619C;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c5b28
	sub_820C5B28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c5d18
	if (!cr6.getEQ()) goto loc_820C5D18;
	// cmplwi cr6,r30,9
	cr6.compare<uint32_t>(r30.u32, 9, xer);
	// bgt cr6,0x820c6168
	if (cr6.getGT()) goto loc_820C6168;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,23620
	r12.s64 = r12.s64 + 23620;
	// rlwinm r0,r30,2,0,29
	r0.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r30.u64) {
	case 0:
		goto loc_820C5C6C;
	case 1:
		goto loc_820C5FDC;
	case 2:
		goto loc_820C5C80;
	case 3:
		goto loc_820C5C94;
	case 4:
		goto loc_820C5CA8;
	case 5:
		goto loc_820C5CBC;
	case 6:
		goto loc_820C5CD0;
	case 7:
		goto loc_820C5CE4;
	case 8:
		goto loc_820C5CF8;
	case 9:
		goto loc_820C6148;
	default:
		__builtin_unreachable();
	}
	// lwz r16,23660(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23660);
	// lwz r16,24540(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24540);
	// lwz r16,23680(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23680);
	// lwz r16,23700(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23700);
	// lwz r16,23720(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23720);
	// lwz r16,23740(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23740);
	// lwz r16,23760(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23760);
	// lwz r16,23780(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23780);
	// lwz r16,23800(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23800);
	// lwz r16,24904(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24904);
loc_820C5C6C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,3
	ctx.r4.s64 = 3;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5C80:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,5
	ctx.r4.s64 = 5;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5C94:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,6
	ctx.r4.s64 = 6;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5CA8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,7
	ctx.r4.s64 = 7;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5CBC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,8
	ctx.r4.s64 = 8;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5CD0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,9
	ctx.r4.s64 = 9;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5CE4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,18
	ctx.r4.s64 = 18;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5CF8:
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,11
	ctx.r4.s64 = 11;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,10
	ctx.r4.s64 = 10;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5D18:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c5b28
	sub_820C5B28(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820c5e6c
	if (!cr6.getEQ()) goto loc_820C5E6C;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// rlwinm r10,r30,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r11,17896
	r11.s64 = r11.s64 + 17896;
	// addi r11,r11,6
	r11.s64 = r11.s64 + 6;
	// lhzx r11,r10,r11
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c5e6c
	if (cr6.getEQ()) goto loc_820C5E6C;
	// cmplwi cr6,r30,9
	cr6.compare<uint32_t>(r30.u32, 9, xer);
	// bgt cr6,0x820c6168
	if (cr6.getGT()) goto loc_820C6168;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,23912
	r12.s64 = r12.s64 + 23912;
	// rlwinm r0,r30,2,0,29
	r0.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r30.u64) {
	case 0:
		goto loc_820C5D90;
	case 1:
		goto loc_820C5DA4;
	case 2:
		goto loc_820C5DB8;
	case 3:
		goto loc_820C5DCC;
	case 4:
		goto loc_820C5DE0;
	case 5:
		goto loc_820C5DF4;
	case 6:
		goto loc_820C5E08;
	case 7:
		goto loc_820C5E1C;
	case 8:
		goto loc_820C5E30;
	case 9:
		goto loc_820C5E50;
	default:
		__builtin_unreachable();
	}
	// lwz r16,23952(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23952);
	// lwz r16,23972(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23972);
	// lwz r16,23992(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23992);
	// lwz r16,24012(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24012);
	// lwz r16,24032(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24032);
	// lwz r16,24052(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24052);
	// lwz r16,24072(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24072);
	// lwz r16,24092(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24092);
	// lwz r16,24112(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24112);
	// lwz r16,24144(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24144);
loc_820C5D90:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,3
	ctx.r4.s64 = 3;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5DA4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,4
	ctx.r4.s64 = 4;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5DB8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,5
	ctx.r4.s64 = 5;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5DCC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,6
	ctx.r4.s64 = 6;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5DE0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,7
	ctx.r4.s64 = 7;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5DF4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,8
	ctx.r4.s64 = 8;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5E08:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,9
	ctx.r4.s64 = 9;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5E1C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,18
	ctx.r4.s64 = 18;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5E30:
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,11
	ctx.r4.s64 = 11;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,10
	ctx.r4.s64 = 10;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5E50:
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,13
	ctx.r4.s64 = 13;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x820c6160
	goto loc_820C6160;
loc_820C5E6C:
	// cmplwi cr6,r30,9
	cr6.compare<uint32_t>(r30.u32, 9, xer);
	// bgt cr6,0x820c6168
	if (cr6.getGT()) goto loc_820C6168;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,24204
	r12.s64 = r12.s64 + 24204;
	// rlwinm r0,r30,2,0,29
	r0.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r30.u64) {
	case 0:
		goto loc_820C5EB4;
	case 1:
		goto loc_820C60D8;
	case 2:
		goto loc_820C5EC8;
	case 3:
		goto loc_820C5EDC;
	case 4:
		goto loc_820C5EF0;
	case 5:
		goto loc_820C5F04;
	case 6:
		goto loc_820C5F18;
	case 7:
		goto loc_820C5F2C;
	case 8:
		goto loc_820C5F40;
	case 9:
		goto loc_820C5F60;
	default:
		__builtin_unreachable();
	}
	// lwz r16,24244(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24244);
	// lwz r16,24792(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24792);
	// lwz r16,24264(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24264);
	// lwz r16,24284(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24284);
	// lwz r16,24304(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24304);
	// lwz r16,24324(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24324);
	// lwz r16,24344(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24344);
	// lwz r16,24364(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24364);
	// lwz r16,24384(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24384);
	// lwz r16,24416(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24416);
loc_820C5EB4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5EC8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r4,5
	ctx.r4.s64 = 5;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5EDC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r4,6
	ctx.r4.s64 = 6;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5EF0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r4,7
	ctx.r4.s64 = 7;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5F04:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r4,8
	ctx.r4.s64 = 8;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5F18:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r4,9
	ctx.r4.s64 = 9;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5F2C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r4,18
	ctx.r4.s64 = 18;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5F40:
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,11
	ctx.r4.s64 = 11;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r4,10
	ctx.r4.s64 = 10;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5F60:
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,13
	ctx.r4.s64 = 13;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r4,12
	ctx.r4.s64 = 12;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5F80:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c5b28
	sub_820C5B28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c5ff0
	if (!cr6.getEQ()) goto loc_820C5FF0;
	// cmplwi cr6,r30,9
	cr6.compare<uint32_t>(r30.u32, 9, xer);
	// bgt cr6,0x820c6168
	if (cr6.getGT()) goto loc_820C6168;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,24500
	r12.s64 = r12.s64 + 24500;
	// rlwinm r0,r30,2,0,29
	r0.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r30.u64) {
	case 0:
		goto loc_820C5C6C;
	case 1:
		goto loc_820C5FDC;
	case 2:
		goto loc_820C5C80;
	case 3:
		goto loc_820C5C94;
	case 4:
		goto loc_820C5CA8;
	case 5:
		goto loc_820C5CBC;
	case 6:
		goto loc_820C5CD0;
	case 7:
		goto loc_820C5CE4;
	case 8:
		goto loc_820C5CF8;
	case 9:
		goto loc_820C6148;
	default:
		__builtin_unreachable();
	}
	// lwz r16,23660(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23660);
	// lwz r16,24540(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24540);
	// lwz r16,23680(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23680);
	// lwz r16,23700(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23700);
	// lwz r16,23720(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23720);
	// lwz r16,23740(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23740);
	// lwz r16,23760(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23760);
	// lwz r16,23780(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23780);
	// lwz r16,23800(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23800);
	// lwz r16,24904(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24904);
loc_820C5FDC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,4
	ctx.r4.s64 = 4;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C5FF0:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c5b28
	sub_820C5B28(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820c619c
	if (!cr6.getEQ()) goto loc_820C619C;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// rlwinm r10,r30,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r11,17896
	r11.s64 = r11.s64 + 17896;
	// addi r11,r11,6
	r11.s64 = r11.s64 + 6;
	// lhzx r11,r10,r11
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c619c
	if (cr6.getEQ()) goto loc_820C619C;
	// cmplwi cr6,r30,9
	cr6.compare<uint32_t>(r30.u32, 9, xer);
	// bgt cr6,0x820c6168
	if (cr6.getGT()) goto loc_820C6168;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,24640
	r12.s64 = r12.s64 + 24640;
	// rlwinm r0,r30,2,0,29
	r0.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r30.u64) {
	case 0:
		goto loc_820C6068;
	case 1:
		goto loc_820C5DA4;
	case 2:
		goto loc_820C5DB8;
	case 3:
		goto loc_820C5DCC;
	case 4:
		goto loc_820C5DE0;
	case 5:
		goto loc_820C5DF4;
	case 6:
		goto loc_820C5E08;
	case 7:
		goto loc_820C5E1C;
	case 8:
		goto loc_820C5E30;
	case 9:
		goto loc_820C5E50;
	default:
		__builtin_unreachable();
	}
	// lwz r16,24680(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24680);
	// lwz r16,23972(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23972);
	// lwz r16,23992(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23992);
	// lwz r16,24012(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24012);
	// lwz r16,24032(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24032);
	// lwz r16,24052(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24052);
	// lwz r16,24072(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24072);
	// lwz r16,24092(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24092);
	// lwz r16,24112(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24112);
	// lwz r16,24144(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24144);
loc_820C6068:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,3
	ctx.r4.s64 = 3;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C607C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c5b28
	sub_820C5B28(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820c60ec
	if (!cr6.getEQ()) goto loc_820C60EC;
	// cmplwi cr6,r30,9
	cr6.compare<uint32_t>(r30.u32, 9, xer);
	// bgt cr6,0x820c6168
	if (cr6.getGT()) goto loc_820C6168;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,24752
	r12.s64 = r12.s64 + 24752;
	// rlwinm r0,r30,2,0,29
	r0.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r30.u64) {
	case 0:
		goto loc_820C5EB4;
	case 1:
		goto loc_820C60D8;
	case 2:
		goto loc_820C5EC8;
	case 3:
		goto loc_820C5EDC;
	case 4:
		goto loc_820C5EF0;
	case 5:
		goto loc_820C5F04;
	case 6:
		goto loc_820C5F18;
	case 7:
		goto loc_820C5F2C;
	case 8:
		goto loc_820C5F40;
	case 9:
		goto loc_820C5F60;
	default:
		__builtin_unreachable();
	}
	// lwz r16,24244(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24244);
	// lwz r16,24792(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24792);
	// lwz r16,24264(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24264);
	// lwz r16,24284(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24284);
	// lwz r16,24304(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24304);
	// lwz r16,24324(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24324);
	// lwz r16,24344(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24344);
	// lwz r16,24364(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24364);
	// lwz r16,24384(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24384);
	// lwz r16,24416(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24416);
loc_820C60D8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183908
	sub_82183908(ctx, base);
	// li r4,4
	ctx.r4.s64 = 4;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x820c6164
	goto loc_820C6164;
loc_820C60EC:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c5b28
	sub_820C5B28(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820c619c
	if (!cr6.getEQ()) goto loc_820C619C;
	// cmplwi cr6,r30,9
	cr6.compare<uint32_t>(r30.u32, 9, xer);
	// bgt cr6,0x820c6168
	if (cr6.getGT()) goto loc_820C6168;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,24864
	r12.s64 = r12.s64 + 24864;
	// rlwinm r0,r30,2,0,29
	r0.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r30.u64) {
	case 0:
		goto loc_820C5C6C;
	case 1:
		goto loc_820C5FDC;
	case 2:
		goto loc_820C5C80;
	case 3:
		goto loc_820C5C94;
	case 4:
		goto loc_820C5CA8;
	case 5:
		goto loc_820C5CBC;
	case 6:
		goto loc_820C5CD0;
	case 7:
		goto loc_820C5CE4;
	case 8:
		goto loc_820C5CF8;
	case 9:
		goto loc_820C6148;
	default:
		__builtin_unreachable();
	}
	// lwz r16,23660(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23660);
	// lwz r16,24540(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24540);
	// lwz r16,23680(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23680);
	// lwz r16,23700(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23700);
	// lwz r16,23720(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23720);
	// lwz r16,23740(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23740);
	// lwz r16,23760(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23760);
	// lwz r16,23780(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23780);
	// lwz r16,23800(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 23800);
	// lwz r16,24904(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 24904);
loc_820C6148:
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,13
	ctx.r4.s64 = 13;
	// bl 0x82184f98
	sub_82184F98(ctx, base);
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
loc_820C6160:
	// li r4,12
	ctx.r4.s64 = 12;
loc_820C6164:
	// bl 0x82184f98
	sub_82184F98(ctx, base);
loc_820C6168:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// addi r7,r11,15688
	ctx.r7.s64 = r11.s64 + 15688;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r8,4219
	ctx.r8.s64 = 4219;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,43
	ctx.r4.s64 = 43;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1608(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1608, r11.u32);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_820C619C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820C61A8"))) PPC_WEAK_FUNC(sub_820C61A8);
PPC_FUNC_IMPL(__imp__sub_820C61A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed108
	// stfd f29,-160(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -160, f29.u64);
	// stfd f30,-152(r1)
	PPC_STORE_U64(ctx.r1.u32 + -152, f30.u64);
	// stfd f31,-144(r1)
	PPC_STORE_U64(ctx.r1.u32 + -144, f31.u64);
	// stwu r1,-560(r1)
	ea = -560 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820ca240
	sub_820CA240(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r19,r11,17984
	r19.s64 = r11.s64 + 17984;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// mr r17,r3
	r17.u64 = ctx.r3.u64;
	// lfs f29,15940(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 15940);
	f29.f64 = double(temp.f32);
	// li r27,1
	r27.s64 = 1;
	// lfs f31,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	f31.f64 = double(temp.f32);
	// lis r18,-31994
	r18.s64 = -2096758784;
	// lis r31,-31991
	r31.s64 = -2096562176;
	// addi r26,r11,17896
	r26.s64 = r11.s64 + 17896;
	// lis r16,-32014
	r16.s64 = -2098069504;
loc_820C61FC:
	// lwz r11,-1672(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + -1672);
	// rlwinm r30,r27,3,0,28
	r30.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cmpw cr6,r27,r11
	cr6.compare<int32_t>(r27.s32, r11.s32, xer);
	// lhzx r3,r30,r26
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + r26.u32);
	// bne cr6,0x820c6620
	if (!cr6.getEQ()) goto loc_820C6620;
	// lwz r28,4(r19)
	r28.u64 = PPC_LOAD_U32(r19.u32 + 4);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r7,r1,232
	ctx.r7.s64 = ctx.r1.s64 + 232;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r6,r1,248
	ctx.r6.s64 = ctx.r1.s64 + 248;
	// addi r3,r1,156
	ctx.r3.s64 = ctx.r1.s64 + 156;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,156
	ctx.r3.s64 = ctx.r1.s64 + 156;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r3,r1,196
	ctx.r3.s64 = ctx.r1.s64 + 196;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// rlwinm r11,r27,4,0,27
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 4) & 0xFFFFFFF0;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f29.f64;
	// subf r11,r27,r11
	r11.s64 = r11.s64 - r27.s64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r25,r11,70
	r25.s64 = r11.s64 + 70;
	// extsw r11,r25
	r11.s64 = r25.s32;
	// std r11,240(r1)
	PPC_STORE_U64(ctx.r1.u32 + 240, r11.u64);
	// lfd f0,240(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 240);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,196
	ctx.r3.s64 = ctx.r1.s64 + 196;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,11488(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 11488);
	// lwz r28,-172(r19)
	r28.u64 = PPC_LOAD_U32(r19.u32 + -172);
	// cmplwi cr6,r27,9
	cr6.compare<uint32_t>(r27.u32, 9, xer);
	// subfic r10,r11,0
	xer.ca = r11.u32 <= 0;
	ctx.r10.s64 = 0 - r11.s64;
	// mr r21,r28
	r21.u64 = r28.u64;
	// subfe r10,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// subfic r9,r11,0
	xer.ca = r11.u32 <= 0;
	ctx.r9.s64 = 0 - r11.s64;
	// rlwinm r11,r10,0,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFE;
	// subfe r10,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,29,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// rlwinm r10,r10,0,30,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// mr r20,r28
	r20.u64 = r28.u64;
	// addi r22,r11,180
	r22.s64 = r11.s64 + 180;
	// addi r23,r10,225
	r23.s64 = ctx.r10.s64 + 225;
	// bgt cr6,0x820c63c0
	if (cr6.getGT()) goto loc_820C63C0;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,25344
	r12.s64 = r12.s64 + 25344;
	// rlwinm r0,r27,2,0,29
	r0.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r27.u64) {
	case 0:
		goto loc_820C6328;
	case 1:
		goto loc_820C6338;
	case 2:
		goto loc_820C6348;
	case 3:
		goto loc_820C6358;
	case 4:
		goto loc_820C6368;
	case 5:
		goto loc_820C6378;
	case 6:
		goto loc_820C6388;
	case 7:
		goto loc_820C6398;
	case 8:
		goto loc_820C63A8;
	case 9:
		goto loc_820C63B4;
	default:
		__builtin_unreachable();
	}
	// lwz r16,25384(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 25384);
	// lwz r16,25400(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 25400);
	// lwz r16,25416(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 25416);
	// lwz r16,25432(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 25432);
	// lwz r16,25448(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 25448);
	// lwz r16,25464(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 25464);
	// lwz r16,25480(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 25480);
	// lwz r16,25496(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 25496);
	// lwz r16,25512(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 25512);
	// lwz r16,25524(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 25524);
loc_820C6328:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2c28
	sub_820C2C28(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x820c63c4
	goto loc_820C63C4;
loc_820C6338:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2cc0
	sub_820C2CC0(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x820c63c4
	goto loc_820C63C4;
loc_820C6348:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2df0
	sub_820C2DF0(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x820c63c4
	goto loc_820C63C4;
loc_820C6358:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2e88
	sub_820C2E88(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x820c63c4
	goto loc_820C63C4;
loc_820C6368:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2d58
	sub_820C2D58(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x820c63c4
	goto loc_820C63C4;
loc_820C6378:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2f20
	sub_820C2F20(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x820c63c4
	goto loc_820C63C4;
loc_820C6388:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2fb8
	sub_820C2FB8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x820c63c4
	goto loc_820C63C4;
loc_820C6398:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c3050
	sub_820C3050(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x820c63c4
	goto loc_820C63C4;
loc_820C63A8:
	// bl 0x820c30e8
	sub_820C30E8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x820c63c4
	goto loc_820C63C4;
loc_820C63B4:
	// bl 0x820c31d0
	sub_820C31D0(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// b 0x820c63c4
	goto loc_820C63C4;
loc_820C63C0:
	// li r29,0
	r29.s64 = 0;
loc_820C63C4:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c5ba0
	sub_820C5BA0(ctx, base);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x820c63e0
	if (!cr6.getEQ()) goto loc_820C63E0;
	// lwz r28,0(r19)
	r28.u64 = PPC_LOAD_U32(r19.u32 + 0);
	// b 0x820c63fc
	goto loc_820C63FC;
loc_820C63E0:
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// bne cr6,0x820c63f0
	if (!cr6.getEQ()) goto loc_820C63F0;
	// lwz r21,0(r19)
	r21.u64 = PPC_LOAD_U32(r19.u32 + 0);
	// b 0x820c63fc
	goto loc_820C63FC;
loc_820C63F0:
	// cmpwi cr6,r29,2
	cr6.compare<int32_t>(r29.s32, 2, xer);
	// bne cr6,0x820c63fc
	if (!cr6.getEQ()) goto loc_820C63FC;
	// lwz r20,0(r19)
	r20.u64 = PPC_LOAD_U32(r19.u32 + 0);
loc_820C63FC:
	// addi r24,r26,6
	r24.s64 = r26.s64 + 6;
	// lhzx r11,r30,r24
	r11.u64 = PPC_LOAD_U16(r30.u32 + r24.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c6428
	if (!cr6.getEQ()) goto loc_820C6428;
	// lwz r11,11488(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 11488);
	// li r23,250
	r23.s64 = 250;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// rlwinm r11,r11,0,29,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// addi r22,r11,200
	r22.s64 = r11.s64 + 200;
loc_820C6428:
	// addi r11,r26,2
	r11.s64 = r26.s64 + 2;
	// lhzx r3,r30,r11
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + r11.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r7,r1,376
	ctx.r7.s64 = ctx.r1.s64 + 376;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r6,r1,204
	ctx.r6.s64 = ctx.r1.s64 + 204;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,204(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,212
	ctx.r3.s64 = ctx.r1.s64 + 212;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subf r29,r11,r22
	r29.s64 = r22.s64 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r25
	r11.s64 = r25.s32;
	// extsw r10,r29
	ctx.r10.s64 = r29.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// std r11,256(r1)
	PPC_STORE_U64(ctx.r1.u32 + 256, r11.u64);
	// std r10,272(r1)
	PPC_STORE_U64(ctx.r1.u32 + 272, ctx.r10.u64);
	// lfd f0,256(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 256);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,272(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 272);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,212
	ctx.r3.s64 = ctx.r1.s64 + 212;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r11,r26,4
	r11.s64 = r26.s64 + 4;
	// lhzx r3,r30,r11
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + r11.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r7,r1,264
	ctx.r7.s64 = ctx.r1.s64 + 264;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r6,r1,220
	ctx.r6.s64 = ctx.r1.s64 + 220;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,220(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 220);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,228
	ctx.r3.s64 = ctx.r1.s64 + 228;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subf r29,r11,r23
	r29.s64 = r23.s64 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r29
	r11.s64 = r29.s32;
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// std r11,288(r1)
	PPC_STORE_U64(ctx.r1.u32 + 288, r11.u64);
	// lfd f0,288(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 288);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,228
	ctx.r3.s64 = ctx.r1.s64 + 228;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lhzx r3,r30,r24
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + r24.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c69f4
	if (cr6.getEQ()) goto loc_820C69F4;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r7,r1,328
	ctx.r7.s64 = ctx.r1.s64 + 328;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r6,r1,224
	ctx.r6.s64 = ctx.r1.s64 + 224;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,224(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subfic r30,r11,270
	xer.ca = r11.u32 <= 270;
	r30.s64 = 270 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r30
	r11.s64 = r30.s32;
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// std r11,304(r1)
	PPC_STORE_U64(ctx.r1.u32 + 304, r11.u64);
	// lfd f0,304(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 304);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// b 0x820c69f0
	goto loc_820C69F0;
loc_820C6620:
	// lwz r28,-4(r19)
	r28.u64 = PPC_LOAD_U32(r19.u32 + -4);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r7,r1,280
	ctx.r7.s64 = ctx.r1.s64 + 280;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r6,r1,360
	ctx.r6.s64 = ctx.r1.s64 + 360;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// rlwinm r11,r27,4,0,27
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 4) & 0xFFFFFFF0;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f29.f64;
	// subf r11,r27,r11
	r11.s64 = r11.s64 - r27.s64;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// addi r25,r11,70
	r25.s64 = r11.s64 + 70;
	// extsw r11,r25
	r11.s64 = r25.s32;
	// std r11,320(r1)
	PPC_STORE_U64(ctx.r1.u32 + 320, r11.u64);
	// lfd f0,320(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 320);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,11488(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 11488);
	// lwz r10,11488(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 11488);
	// cmplwi cr6,r27,9
	cr6.compare<uint32_t>(r27.u32, 9, xer);
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// lwz r28,-172(r19)
	r28.u64 = PPC_LOAD_U32(r19.u32 + -172);
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// subfic r10,r10,0
	xer.ca = ctx.r10.u32 <= 0;
	ctx.r10.s64 = 0 - ctx.r10.s64;
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// subfe r10,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,29,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// rlwinm r10,r10,0,30,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// mr r21,r28
	r21.u64 = r28.u64;
	// mr r20,r28
	r20.u64 = r28.u64;
	// addi r22,r11,180
	r22.s64 = r11.s64 + 180;
	// addi r23,r10,225
	r23.s64 = ctx.r10.s64 + 225;
	// bgt cr6,0x820c67ac
	if (cr6.getGT()) goto loc_820C67AC;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,26384
	r12.s64 = r12.s64 + 26384;
	// rlwinm r0,r27,2,0,29
	r0.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r27.u64) {
	case 0:
		goto loc_820C6738;
	case 1:
		goto loc_820C6744;
	case 2:
		goto loc_820C6750;
	case 3:
		goto loc_820C675C;
	case 4:
		goto loc_820C6768;
	case 5:
		goto loc_820C6774;
	case 6:
		goto loc_820C6780;
	case 7:
		goto loc_820C678C;
	case 8:
		goto loc_820C6798;
	case 9:
		goto loc_820C67A0;
	default:
		__builtin_unreachable();
	}
	// lwz r16,26424(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 26424);
	// lwz r16,26436(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 26436);
	// lwz r16,26448(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 26448);
	// lwz r16,26460(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 26460);
	// lwz r16,26472(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 26472);
	// lwz r16,26484(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 26484);
	// lwz r16,26496(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 26496);
	// lwz r16,26508(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 26508);
	// lwz r16,26520(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 26520);
	// lwz r16,26528(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 26528);
loc_820C6738:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2c28
	sub_820C2C28(ctx, base);
	// b 0x820c67a4
	goto loc_820C67A4;
loc_820C6744:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2cc0
	sub_820C2CC0(ctx, base);
	// b 0x820c67a4
	goto loc_820C67A4;
loc_820C6750:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2df0
	sub_820C2DF0(ctx, base);
	// b 0x820c67a4
	goto loc_820C67A4;
loc_820C675C:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2e88
	sub_820C2E88(ctx, base);
	// b 0x820c67a4
	goto loc_820C67A4;
loc_820C6768:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2d58
	sub_820C2D58(ctx, base);
	// b 0x820c67a4
	goto loc_820C67A4;
loc_820C6774:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2f20
	sub_820C2F20(ctx, base);
	// b 0x820c67a4
	goto loc_820C67A4;
loc_820C6780:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c2fb8
	sub_820C2FB8(ctx, base);
	// b 0x820c67a4
	goto loc_820C67A4;
loc_820C678C:
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x820c3050
	sub_820C3050(ctx, base);
	// b 0x820c67a4
	goto loc_820C67A4;
loc_820C6798:
	// bl 0x820c30e8
	sub_820C30E8(ctx, base);
	// b 0x820c67a4
	goto loc_820C67A4;
loc_820C67A0:
	// bl 0x820c31d0
	sub_820C31D0(ctx, base);
loc_820C67A4:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c67b4
	if (!cr6.getEQ()) goto loc_820C67B4;
loc_820C67AC:
	// lwz r28,-4(r19)
	r28.u64 = PPC_LOAD_U32(r19.u32 + -4);
	// b 0x820c67d0
	goto loc_820C67D0;
loc_820C67B4:
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820c67c4
	if (!cr6.getEQ()) goto loc_820C67C4;
	// lwz r21,-4(r19)
	r21.u64 = PPC_LOAD_U32(r19.u32 + -4);
	// b 0x820c67d0
	goto loc_820C67D0;
loc_820C67C4:
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820c67d0
	if (!cr6.getEQ()) goto loc_820C67D0;
	// lwz r20,-4(r19)
	r20.u64 = PPC_LOAD_U32(r19.u32 + -4);
loc_820C67D0:
	// addi r24,r26,6
	r24.s64 = r26.s64 + 6;
	// lhzx r11,r30,r24
	r11.u64 = PPC_LOAD_U16(r30.u32 + r24.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c67fc
	if (!cr6.getEQ()) goto loc_820C67FC;
	// lwz r11,11488(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 11488);
	// li r23,250
	r23.s64 = 250;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// rlwinm r11,r11,0,29,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// addi r22,r11,200
	r22.s64 = r11.s64 + 200;
loc_820C67FC:
	// addi r11,r26,2
	r11.s64 = r26.s64 + 2;
	// lhzx r3,r30,r11
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + r11.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r7,r1,296
	ctx.r7.s64 = ctx.r1.s64 + 296;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r6,r1,192
	ctx.r6.s64 = ctx.r1.s64 + 192;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,192(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,164
	ctx.r3.s64 = ctx.r1.s64 + 164;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subf r29,r11,r22
	r29.s64 = r22.s64 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r25
	r11.s64 = r25.s32;
	// extsw r10,r29
	ctx.r10.s64 = r29.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// std r11,336(r1)
	PPC_STORE_U64(ctx.r1.u32 + 336, r11.u64);
	// std r10,352(r1)
	PPC_STORE_U64(ctx.r1.u32 + 352, ctx.r10.u64);
	// lfd f0,336(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 336);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,352(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 352);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,92
	ctx.r4.s64 = ctx.r1.s64 + 92;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,164
	ctx.r3.s64 = ctx.r1.s64 + 164;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r11,r26,4
	r11.s64 = r26.s64 + 4;
	// lhzx r3,r30,r11
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + r11.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r7,r1,344
	ctx.r7.s64 = ctx.r1.s64 + 344;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r6,r1,180
	ctx.r6.s64 = ctx.r1.s64 + 180;
	// addi r3,r1,172
	ctx.r3.s64 = ctx.r1.s64 + 172;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,172
	ctx.r3.s64 = ctx.r1.s64 + 172;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subf r29,r11,r23
	r29.s64 = r23.s64 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r29
	r11.s64 = r29.s32;
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// std r11,368(r1)
	PPC_STORE_U64(ctx.r1.u32 + 368, r11.u64);
	// lfd f0,368(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 368);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// addi r3,r1,188
	ctx.r3.s64 = ctx.r1.s64 + 188;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,188
	ctx.r3.s64 = ctx.r1.s64 + 188;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lhzx r3,r30,r24
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + r24.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c69f4
	if (cr6.getEQ()) goto loc_820C69F4;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r7,r1,312
	ctx.r7.s64 = ctx.r1.s64 + 312;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r6,r1,132
	ctx.r6.s64 = ctx.r1.s64 + 132;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,148
	ctx.r3.s64 = ctx.r1.s64 + 148;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subfic r30,r11,270
	xer.ca = r11.u32 <= 270;
	r30.s64 = 270 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r30
	r11.s64 = r30.s32;
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// std r11,384(r1)
	PPC_STORE_U64(ctx.r1.u32 + 384, r11.u64);
	// lfd f0,384(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 384);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,148
	ctx.r3.s64 = ctx.r1.s64 + 148;
loc_820C69F0:
	// bl 0x8209b890
	sub_8209B890(ctx, base);
loc_820C69F4:
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// cmpwi cr6,r27,10
	cr6.compare<int32_t>(r27.s32, 10, xer);
	// blt cr6,0x820c61fc
	if (cr6.getLT()) goto loc_820C61FC;
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// lfd f29,-160(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// lfd f30,-152(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -152);
	// lfd f31,-144(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// b 0x823ed158
	return;
}

__attribute__((alias("__imp__sub_820C6A18"))) PPC_WEAK_FUNC(sub_820C6A18);
PPC_FUNC_IMPL(__imp__sub_820C6A18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -160, f31.u64);
	// ld r12,-4096(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// stwu r1,-6784(r1)
	ea = -6784 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820c4380
	sub_820C4380(ctx, base);
	// bl 0x820b1628
	sub_820B1628(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x820c7104
	if (cr6.getEQ()) goto loc_820C7104;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r27,0
	r27.s64 = 0;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44072
	ctx.r3.u64 = ctx.r3.u64 | 44072;
	// lwz r29,15120(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 15120);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// stw r27,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r27.u32);
	// stw r27,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r27.u32);
	// lwz r28,-31544(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + -31544);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// stw r3,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r3.u32);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44073
	ctx.r3.u64 = ctx.r3.u64 | 44073;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// stw r3,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r3.u32);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44087
	ctx.r3.u64 = ctx.r3.u64 | 44087;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// stw r3,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r3.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820cbfb8
	sub_820CBFB8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r5,r11,15972
	ctx.r5.s64 = r11.s64 + 15972;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,624
	ctx.r3.s64 = ctx.r1.s64 + 624;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r9,112(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lis r8,-32190
	ctx.r8.s64 = -2109603840;
	// lwz r10,120(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// subfic r11,r9,170
	xer.ca = ctx.r9.u32 <= 170;
	r11.s64 = 170 - ctx.r9.s64;
	// stw r27,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r27.u32);
	// addi r26,r8,18008
	r26.s64 = ctx.r8.s64 + 18008;
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r27.u32);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// li r23,-1
	r23.s64 = -1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// addi r11,r11,75
	r11.s64 = r11.s64 + 75;
	// lwz r8,-24(r26)
	ctx.r8.u64 = PPC_LOAD_U32(r26.u32 + -24);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// stw r23,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r23.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// li r11,30
	r11.s64 = 30;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// li r10,65
	ctx.r10.s64 = 65;
	// li r18,60
	r18.s64 = 60;
	// li r22,10
	r22.s64 = 10;
	// lwz r11,17800(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 17800);
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bgt cr6,0x820c700c
	if (cr6.getGT()) goto loc_820C700C;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,27492
	r12.s64 = r12.s64 + 27492;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820C6B78;
	case 1:
		goto loc_820C6BB4;
	case 2:
		goto loc_820C6BF0;
	case 3:
		goto loc_820C6C2C;
	case 4:
		goto loc_820C6C68;
	default:
		__builtin_unreachable();
	}
	// lwz r16,27512(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 27512);
	// lwz r16,27572(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 27572);
	// lwz r16,27632(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 27632);
	// lwz r16,27692(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 27692);
	// lwz r16,27752(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 27752);
loc_820C6B78:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44088
	ctx.r3.u64 = ctx.r3.u64 | 44088;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,30
	ctx.r4.s64 = 30;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820cbfb8
	sub_820CBFB8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,624
	ctx.r3.s64 = ctx.r1.s64 + 624;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// bl 0x820c3ed8
	sub_820C3ED8(ctx, base);
	// b 0x820c700c
	goto loc_820C700C;
loc_820C6BB4:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44089
	ctx.r3.u64 = ctx.r3.u64 | 44089;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,30
	ctx.r4.s64 = 30;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820cbfb8
	sub_820CBFB8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,624
	ctx.r3.s64 = ctx.r1.s64 + 624;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// bl 0x820c3f60
	sub_820C3F60(ctx, base);
	// b 0x820c700c
	goto loc_820C700C;
loc_820C6BF0:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44090
	ctx.r3.u64 = ctx.r3.u64 | 44090;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,30
	ctx.r4.s64 = 30;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// li r3,3
	ctx.r3.s64 = 3;
	// bl 0x820cbfb8
	sub_820CBFB8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,624
	ctx.r3.s64 = ctx.r1.s64 + 624;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// bl 0x820c3fe8
	sub_820C3FE8(ctx, base);
	// b 0x820c700c
	goto loc_820C700C;
loc_820C6C2C:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44091
	ctx.r3.u64 = ctx.r3.u64 | 44091;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,30
	ctx.r4.s64 = 30;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x820cbfb8
	sub_820CBFB8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,3000
	ctx.r4.s64 = 3000;
	// addi r3,r1,624
	ctx.r3.s64 = ctx.r1.s64 + 624;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// bl 0x820c4070
	sub_820C4070(ctx, base);
	// b 0x820c700c
	goto loc_820C700C;
loc_820C6C68:
	// lis r3,0
	ctx.r3.s64 = 0;
	// mr r20,r27
	r20.u64 = r27.u64;
	// ori r3,r3,44092
	ctx.r3.u64 = ctx.r3.u64 | 44092;
	// li r19,1
	r19.s64 = 1;
	// mr r25,r27
	r25.u64 = r27.u64;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,30
	ctx.r4.s64 = 30;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// mr r15,r27
	r15.u64 = r27.u64;
	// bl 0x820cc050
	sub_820CC050(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x820c7008
	if (!cr6.getGT()) goto loc_820C7008;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r24,-31994
	r24.s64 = -2096758784;
	// addi r21,r11,15960
	r21.s64 = r11.s64 + 15960;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r17,r11,15952
	r17.s64 = r11.s64 + 15952;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r16,r11,15944
	r16.s64 = r11.s64 + 15944;
loc_820C6CBC:
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// bl 0x820cc098
	sub_820CC098(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8209f598
	sub_8209F598(ctx, base);
	// cmpw cr6,r31,r3
	cr6.compare<int32_t>(r31.s32, ctx.r3.s32, xer);
	// bgt cr6,0x820c6ff8
	if (cr6.getGT()) goto loc_820C6FF8;
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// bl 0x820cc060
	sub_820CC060(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// sth r27,224(r1)
	PPC_STORE_U16(ctx.r1.u32 + 224, r27.u16);
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// ble cr6,0x820c6d0c
	if (!cr6.getGT()) goto loc_820C6D0C;
	// mr r31,r19
	r31.u64 = r19.u64;
loc_820C6CF0:
	// li r4,200
	ctx.r4.s64 = 200;
	// mr r5,r16
	ctx.r5.u64 = r16.u64;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820c6cf0
	if (!cr6.getEQ()) goto loc_820C6CF0;
loc_820C6D0C:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// ble cr6,0x820c6d34
	if (!cr6.getGT()) goto loc_820C6D34;
	// mr r31,r25
	r31.u64 = r25.u64;
loc_820C6D18:
	// li r4,200
	ctx.r4.s64 = 200;
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820c6d18
	if (!cr6.getEQ()) goto loc_820C6D18;
loc_820C6D34:
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x823edbb8
	sub_823EDBB8(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r1,224
	ctx.r10.s64 = ctx.r1.s64 + 224;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// add r31,r11,r10
	r31.u64 = r11.u64 + ctx.r10.u64;
	// addi r14,r25,97
	r14.s64 = r25.s64 + 97;
	// bl 0x823edbb8
	sub_823EDBB8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// subfic r4,r11,200
	xer.ca = r11.u32 <= 200;
	ctx.r4.s64 = 200 - r11.s64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// lwz r11,11488(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 11488);
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// stw r18,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r18.u32);
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFC;
	// addi r11,r11,5
	r11.s64 = r11.s64 + 5;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r30,r3
	r30.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r8,-28(r26)
	ctx.r8.u64 = PPC_LOAD_U32(r26.u32 + -28);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r27.u32);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// stw r22,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r22.u32);
	// addi r5,r1,224
	ctx.r5.s64 = ctx.r1.s64 + 224;
	// stw r23,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r23.u32);
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lhz r11,0(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c6e10
	if (cr6.getEQ()) goto loc_820C6E10;
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
loc_820C6DF4:
	// cmplwi cr6,r8,10
	cr6.compare<uint32_t>(ctx.r8.u32, 10, xer);
	// bne cr6,0x820c6e00
	if (!cr6.getEQ()) goto loc_820C6E00;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
loc_820C6E00:
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// lhz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x820c6df4
	if (!cr6.getEQ()) goto loc_820C6DF4;
loc_820C6E10:
	// add r19,r9,r19
	r19.u64 = ctx.r9.u64 + r19.u64;
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c6e50
	if (cr6.getEQ()) goto loc_820C6E50;
loc_820C6E24:
	// lhz r11,0(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// cmplwi cr6,r11,10
	cr6.compare<uint32_t>(r11.u32, 10, xer);
	// bne cr6,0x820c6e44
	if (!cr6.getEQ()) goto loc_820C6E44;
	// lhz r11,0(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c6e44
	if (cr6.getEQ()) goto loc_820C6E44;
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
loc_820C6E44:
	// lhz r11,0(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c6e24
	if (!cr6.getEQ()) goto loc_820C6E24;
loc_820C6E50:
	// li r8,10
	ctx.r8.s64 = 10;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// addi r11,r11,60
	r11.s64 = r11.s64 + 60;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x820c6e90
	if (!cr6.getLT()) goto loc_820C6E90;
	// addi r19,r19,-1
	r19.s64 = r19.s64 + -1;
loc_820C6E90:
	// sth r27,224(r1)
	PPC_STORE_U16(ctx.r1.u32 + 224, r27.u16);
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// ble cr6,0x820c6ebc
	if (!cr6.getGT()) goto loc_820C6EBC;
	// mr r31,r19
	r31.u64 = r19.u64;
loc_820C6EA0:
	// li r4,200
	ctx.r4.s64 = 200;
	// mr r5,r16
	ctx.r5.u64 = r16.u64;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820c6ea0
	if (!cr6.getEQ()) goto loc_820C6EA0;
loc_820C6EBC:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// ble cr6,0x820c6ee4
	if (!cr6.getGT()) goto loc_820C6EE4;
	// mr r31,r25
	r31.u64 = r25.u64;
loc_820C6EC8:
	// li r4,200
	ctx.r4.s64 = 200;
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x820c6ec8
	if (!cr6.getEQ()) goto loc_820C6EC8;
loc_820C6EE4:
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// bl 0x820cc0d0
	sub_820CC0D0(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// blt cr6,0x820c6f44
	if (cr6.getLT()) goto loc_820C6F44;
	// beq cr6,0x820c6f2c
	if (cr6.getEQ()) goto loc_820C6F2C;
	// cmplwi cr6,r3,3
	cr6.compare<uint32_t>(ctx.r3.u32, 3, xer);
	// bge cr6,0x820c6f64
	if (!cr6.getLT()) goto loc_820C6F64;
	// li r4,200
	ctx.r4.s64 = 200;
	// lwz r5,144(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// lwz r11,11488(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 11488);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c6f24
	if (cr6.getEQ()) goto loc_820C6F24;
	// lwz r20,-24(r26)
	r20.u64 = PPC_LOAD_U32(r26.u32 + -24);
	// b 0x820c6f64
	goto loc_820C6F64;
loc_820C6F24:
	// lwz r20,-28(r26)
	r20.u64 = PPC_LOAD_U32(r26.u32 + -28);
	// b 0x820c6f64
	goto loc_820C6F64;
loc_820C6F2C:
	// li r4,200
	ctx.r4.s64 = 200;
	// lwz r5,140(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// lwz r20,-24(r26)
	r20.u64 = PPC_LOAD_U32(r26.u32 + -24);
	// b 0x820c6f64
	goto loc_820C6F64;
loc_820C6F44:
	// li r4,200
	ctx.r4.s64 = 200;
	// lwz r5,136(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x823ee840
	sub_823EE840(ctx, base);
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// rlwinm r11,r11,16,0,15
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// oris r20,r11,16384
	r20.u64 = r11.u64 | 1073741824;
	// ori r20,r20,16639
	r20.u64 = r20.u64 | 16639;
loc_820C6F64:
	// li r8,10
	ctx.r8.s64 = 10;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// addi r5,r1,224
	ctx.r5.s64 = ctx.r1.s64 + 224;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,11488(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 11488);
	// subfic r10,r11,0
	xer.ca = r11.u32 <= 0;
	ctx.r10.s64 = 0 - r11.s64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// subfe r11,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	r11.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// rlwinm r11,r11,0,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFC;
	// addi r11,r11,5
	r11.s64 = r11.s64 + 5;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// beq cr6,0x820c6fb8
	if (cr6.getEQ()) goto loc_820C6FB8;
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// subfic r11,r11,245
	xer.ca = r11.u32 <= 245;
	r11.s64 = 245 - r11.s64;
	// b 0x820c6fbc
	goto loc_820C6FBC;
loc_820C6FB8:
	// li r11,175
	r11.s64 = 175;
loc_820C6FBC:
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r27.u32);
	// li r9,210
	ctx.r9.s64 = 210;
	// stw r22,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r22.u32);
	// mr r8,r20
	ctx.r8.u64 = r20.u64;
	// stw r23,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r23.u32);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// addi r5,r1,224
	ctx.r5.s64 = ctx.r1.s64 + 224;
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
loc_820C6FF8:
	// addi r15,r15,1
	r15.s64 = r15.s64 + 1;
	// bl 0x820cc050
	sub_820CC050(ctx, base);
	// cmpw cr6,r15,r3
	cr6.compare<int32_t>(r15.s32, ctx.r3.s32, xer);
	// blt cr6,0x820c6cbc
	if (cr6.getLT()) goto loc_820C6CBC;
loc_820C7008:
	// bl 0x820c40f8
	sub_820C40F8(ctx, base);
loc_820C700C:
	// lhz r11,624(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 624);
	// addi r10,r1,624
	ctx.r10.s64 = ctx.r1.s64 + 624;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c7050
	if (cr6.getEQ()) goto loc_820C7050;
	// lis r11,0
	r11.s64 = 0;
	// ori r9,r11,65504
	ctx.r9.u64 = r11.u64 | 65504;
loc_820C7024:
	// lhz r11,0(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// cmplwi cr6,r11,97
	cr6.compare<uint32_t>(r11.u32, 97, xer);
	// blt cr6,0x820c7040
	if (cr6.getLT()) goto loc_820C7040;
	// cmplwi cr6,r11,122
	cr6.compare<uint32_t>(r11.u32, 122, xer);
	// bgt cr6,0x820c7040
	if (cr6.getGT()) goto loc_820C7040;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// sth r11,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r11.u16);
loc_820C7040:
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// lhz r11,0(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c7024
	if (!cr6.getEQ()) goto loc_820C7024;
loc_820C7050:
	// li r8,10
	ctx.r8.s64 = 10;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// li r10,130
	ctx.r10.s64 = 130;
	// li r9,210
	ctx.r9.s64 = 210;
	// lwz r8,-24(r26)
	ctx.r8.u64 = PPC_LOAD_U32(r26.u32 + -24);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// stw r23,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r23.u32);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// stw r22,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r22.u32);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r27.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r8,10
	ctx.r8.s64 = 10;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r11,r11,5
	r11.s64 = r11.s64 + 5;
	// stw r18,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r18.u32);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// addi r5,r1,624
	ctx.r5.s64 = ctx.r1.s64 + 624;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// li r9,210
	ctx.r9.s64 = 210;
	// lwz r8,-28(r26)
	ctx.r8.u64 = PPC_LOAD_U32(r26.u32 + -28);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r27.u32);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// stw r22,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r22.u32);
	// addi r5,r1,624
	ctx.r5.s64 = ctx.r1.s64 + 624;
	// stw r23,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r23.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820C7104:
	// addi r1,r1,6784
	ctx.r1.s64 = ctx.r1.s64 + 6784;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_820C7110"))) PPC_WEAK_FUNC(sub_820C7110);
PPC_FUNC_IMPL(__imp__sub_820C7110) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -88, f31.u64);
	// stwu r1,-1232(r1)
	ea = -1232 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820c4380
	sub_820C4380(ctx, base);
	// bl 0x820b1628
	sub_820B1628(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x820c7384
	if (cr6.getEQ()) goto loc_820C7384;
	// lis r9,0
	ctx.r9.s64 = 0;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// ori r9,r9,40326
	ctx.r9.u64 = ctx.r9.u64 | 40326;
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// li r28,0
	r28.s64 = 0;
	// lwz r11,-1664(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1664);
	// stw r9,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r9.u32);
	// lis r9,0
	ctx.r9.s64 = 0;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// ori r9,r9,40328
	ctx.r9.u64 = ctx.r9.u64 | 40328;
	// stw r28,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r28.u32);
	// stw r28,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r28.u32);
	// stw r9,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r9.u32);
	// lis r9,0
	ctx.r9.s64 = 0;
	// ori r9,r9,40330
	ctx.r9.u64 = ctx.r9.u64 | 40330;
	// stw r9,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r9.u32);
	// lis r9,0
	ctx.r9.s64 = 0;
	// ori r9,r9,40332
	ctx.r9.u64 = ctx.r9.u64 | 40332;
	// stw r9,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r9.u32);
	// lwzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r30,15120(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 15120);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// lwz r29,-31544(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + -31544);
	// lis r11,0
	r11.s64 = 0;
	// ori r11,r11,40325
	r11.u64 = r11.u64 | 40325;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// lis r11,0
	r11.s64 = 0;
	// ori r11,r11,40327
	r11.u64 = r11.u64 | 40327;
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// lis r11,0
	r11.s64 = 0;
	// ori r11,r11,40329
	r11.u64 = r11.u64 | 40329;
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// lis r11,0
	r11.s64 = 0;
	// ori r11,r11,40331
	r11.u64 = r11.u64 | 40331;
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,-1664(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1664);
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// addi r5,r11,15976
	ctx.r5.s64 = r11.s64 + 15976;
	// lwz r11,-1664(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1664);
	// li r4,500
	ctx.r4.s64 = 500;
	// addi r6,r11,1
	ctx.r6.s64 = r11.s64 + 1;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44121
	ctx.r3.u64 = ctx.r3.u64 | 44121;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r23,60
	r23.s64 = 60;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r8,10
	ctx.r8.s64 = 10;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// li r11,30
	r11.s64 = 30;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// li r24,-1
	r24.s64 = -1;
	// li r25,10
	r25.s64 = 10;
	// addi r26,r11,17980
	r26.s64 = r11.s64 + 17980;
	// li r10,130
	ctx.r10.s64 = 130;
	// li r9,210
	ctx.r9.s64 = 210;
	// stw r24,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r24.u32);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// stw r25,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r25.u32);
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// lwz r8,4(r26)
	ctx.r8.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// li r11,50
	r11.s64 = 50;
	// li r8,10
	ctx.r8.s64 = 10;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// li r9,210
	ctx.r9.s64 = 210;
	// lwz r8,0(r26)
	ctx.r8.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// stw r25,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r25.u32);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// stw r24,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r24.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// bne cr6,0x820c7314
	if (!cr6.getEQ()) goto loc_820C7314;
	// bl 0x820c33f0
	sub_820C33F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c733c
	if (cr6.getEQ()) goto loc_820C733C;
loc_820C7314:
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// lwz r11,-1664(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1664);
	// addi r11,r11,3
	r11.s64 = r11.s64 + 3;
	// stw r10,-1604(r30)
	PPC_STORE_U32(r30.u32 + -1604, ctx.r10.u32);
	// stw r10,-1652(r29)
	PPC_STORE_U32(r29.u32 + -1652, ctx.r10.u32);
	// srawi r10,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r10.s64 = r11.s32 >> 2;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,-1664(r31)
	PPC_STORE_U32(r31.u32 + -1664, r11.u32);
loc_820C733C:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c735c
	if (!cr6.getEQ()) goto loc_820C735C;
	// bl 0x820c3458
	sub_820C3458(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c7384
	if (cr6.getEQ()) goto loc_820C7384;
loc_820C735C:
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// lwz r11,-1664(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1664);
	// stw r28,-1652(r29)
	PPC_STORE_U32(r29.u32 + -1652, r28.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r10,-1604(r30)
	PPC_STORE_U32(r30.u32 + -1604, ctx.r10.u32);
	// srawi r10,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r10.s64 = r11.s32 >> 2;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,-1664(r31)
	PPC_STORE_U32(r31.u32 + -1664, r11.u32);
loc_820C7384:
	// addi r1,r1,1232
	ctx.r1.s64 = ctx.r1.s64 + 1232;
	// lfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_820C7390"))) PPC_WEAK_FUNC(sub_820C7390);
PPC_FUNC_IMPL(__imp__sub_820C7390) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lwz r11,-1668(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1668);
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// blt cr6,0x820c73c0
	if (cr6.getLT()) goto loc_820C73C0;
	// li r30,10
	r30.s64 = 10;
	// li r29,11
	r29.s64 = 11;
	// b 0x820c73dc
	goto loc_820C73DC;
loc_820C73C0:
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// blt cr6,0x820c73d4
	if (cr6.getLT()) goto loc_820C73D4;
	// li r30,6
	r30.s64 = 6;
	// li r29,9
	r29.s64 = 9;
	// b 0x820c73dc
	goto loc_820C73DC;
loc_820C73D4:
	// li r30,0
	r30.s64 = 0;
	// li r29,5
	r29.s64 = 5;
loc_820C73DC:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,2056
	ctx.r4.s64 = 2056;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c7440
	if (!cr6.getEQ()) goto loc_820C7440;
	// bl 0x820c33f0
	sub_820C33F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c7440
	if (!cr6.getEQ()) goto loc_820C7440;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,1028
	ctx.r4.s64 = 1028;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x820c741c
	if (!cr6.getEQ()) goto loc_820C741C;
	// bl 0x820c3458
	sub_820C3458(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c7464
	if (cr6.getEQ()) goto loc_820C7464;
loc_820C741C:
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// lwz r11,-1668(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1668);
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// b 0x830e0560
	// ERROR 830E0560
	return;
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// stw r11,-1668(r31)
	PPC_STORE_U32(r31.u32 + -1668, r11.u32);
	// stw r10,-1652(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1652, ctx.r10.u32);
	// b 0x820c7468
	goto loc_820C7468;
loc_820C7440:
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// lwz r11,-1668(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1668);
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x830e04d0
	// ERROR 830E04D0
	return;
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// stw r11,-1668(r31)
	PPC_STORE_U32(r31.u32 + -1668, r11.u32);
	// stw r10,-1652(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1652, ctx.r10.u32);
	// b 0x820c7468
	goto loc_820C7468;
loc_820C7464:
	// lwz r11,-1668(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1668);
loc_820C7468:
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// bge cr6,0x820c7478
	if (!cr6.getLT()) goto loc_820C7478;
	// stw r29,-1668(r31)
	PPC_STORE_U32(r31.u32 + -1668, r29.u32);
	// b 0x820c7484
	goto loc_820C7484;
loc_820C7478:
	// cmpw cr6,r11,r29
	cr6.compare<int32_t>(r11.s32, r29.s32, xer);
	// ble cr6,0x820c7484
	if (!cr6.getGT()) goto loc_820C7484;
	// stw r30,-1668(r31)
	PPC_STORE_U32(r31.u32 + -1668, r30.u32);
loc_820C7484:
	// lis r11,0
	r11.s64 = 0;
	// ori r30,r11,32768
	r30.u64 = r11.u64 | 32768;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7654
	if (cr6.getEQ()) goto loc_820C7654;
	// lwz r11,-1668(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1668);
	// cmplwi cr6,r11,11
	cr6.compare<uint32_t>(r11.u32, 11, xer);
	// bgt cr6,0x820c76a0
	if (cr6.getGT()) goto loc_820C76A0;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,29892
	r12.s64 = r12.s64 + 29892;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820C769C;
	case 1:
		goto loc_820C7560;
	case 2:
		goto loc_820C7524;
	case 3:
		goto loc_820C74F4;
	case 4:
		goto loc_820C7504;
	case 5:
		goto loc_820C7534;
	case 6:
		goto loc_820C758C;
	case 7:
		goto loc_820C75C4;
	case 8:
		goto loc_820C75F0;
	case 9:
		goto loc_820C761C;
	case 10:
		goto loc_820C7674;
	case 11:
		goto loc_820C7544;
	default:
		__builtin_unreachable();
	}
	// lwz r16,30364(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 30364);
	// lwz r16,30048(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 30048);
	// lwz r16,29988(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 29988);
	// lwz r16,29940(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 29940);
	// lwz r16,29956(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 29956);
	// lwz r16,30004(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 30004);
	// lwz r16,30092(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 30092);
	// lwz r16,30148(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 30148);
	// lwz r16,30192(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 30192);
	// lwz r16,30236(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 30236);
	// lwz r16,30324(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 30324);
	// lwz r16,30020(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + 30020);
loc_820C74F4:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// nop 
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C7504:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8235da08
	sub_8235DA08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820c76a0
	if (cr6.getEQ()) goto loc_820C76A0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8235d798
	sub_8235D798(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C7524:
	// li r11,6
	r11.s64 = 6;
	// stw r11,-1668(r31)
	PPC_STORE_U32(r31.u32 + -1668, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C7534:
	// li r11,10
	r11.s64 = 10;
	// stw r11,-1668(r31)
	PPC_STORE_U32(r31.u32 + -1668, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C7544:
	// bl 0x820ae4c0
	sub_820AE4C0(ctx, base);
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// li r11,1
	r11.s64 = 1;
	// stw r11,4048(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4048, r11.u32);
	// bl 0x82108ea8
	sub_82108EA8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C7560:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15720(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15720);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C758C:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,5
	r11.s64 = 5;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1664(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1664, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15720(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15720);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C75C4:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,4
	r11.s64 = 4;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15720(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15720);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C75F0:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,2
	r11.s64 = 2;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15716(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15716);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C761C:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,3
	r11.s64 = 3;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15716(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15716);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1672(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1672, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C7654:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,16384
	ctx.r4.s64 = 16384;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c76a0
	if (cr6.getEQ()) goto loc_820C76A0;
	// lwz r11,-1668(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1668);
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// blt cr6,0x820c7684
	if (cr6.getLT()) goto loc_820C7684;
loc_820C7674:
	// li r11,5
	r11.s64 = 5;
	// stw r11,-1668(r31)
	PPC_STORE_U32(r31.u32 + -1668, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C7684:
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// blt cr6,0x820c769c
	if (cr6.getLT()) goto loc_820C769C;
	// li r11,2
	r11.s64 = 2;
	// stw r11,-1668(r31)
	PPC_STORE_U32(r31.u32 + -1668, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C769C:
	// bl 0x820b1ac0
	sub_820B1AC0(ctx, base);
loc_820C76A0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820C76A8"))) PPC_WEAK_FUNC(sub_820C76A8);
PPC_FUNC_IMPL(__imp__sub_820C76A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f30.u64);
	// stfd f31,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1652(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c7770
	if (!cr6.getEQ()) goto loc_820C7770;
	// li r31,0
	r31.s64 = 0;
	// li r30,0
	r30.s64 = 0;
	// bl 0x821393c0
	sub_821393C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c776c
	if (!cr6.getEQ()) goto loc_820C776C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,32
	ctx.r4.s64 = 32;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7700
	if (cr6.getEQ()) goto loc_820C7700;
	// li r31,1
	r31.s64 = 1;
loc_820C7700:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,8192
	ctx.r4.s64 = 8192;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7718
	if (cr6.getEQ()) goto loc_820C7718;
	// li r30,1
	r30.s64 = 1;
loc_820C7718:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lfs f30,14436(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14436);
	f30.f64 = double(temp.f32);
	// lfs f31,15720(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15720);
	f31.f64 = double(temp.f32);
	// beq cr6,0x820c774c
	if (cr6.getEQ()) goto loc_820C774C;
	// li r11,4
	r11.s64 = 4;
	// stw r11,-1680(r31)
	PPC_STORE_U32(r31.u32 + -1680, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
loc_820C774C:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x820c776c
	if (cr6.getEQ()) goto loc_820C776C;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1680(r31)
	PPC_STORE_U32(r31.u32 + -1680, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
loc_820C776C:
	// bl 0x820c7390
	sub_820C7390(ctx, base);
loc_820C7770:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C7790"))) PPC_WEAK_FUNC(sub_820C7790);
PPC_FUNC_IMPL(__imp__sub_820C7790) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f30,-64(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -64, f30.u64);
	// stfd f31,-56(r1)
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1652(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c78b4
	if (!cr6.getEQ()) goto loc_820C78B4;
	// li r29,0
	r29.s64 = 0;
	// li r27,0
	r27.s64 = 0;
	// bl 0x821393c0
	sub_821393C0(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lfs f31,14436(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14436);
	f31.f64 = double(temp.f32);
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lfs f30,15712(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15712);
	f30.f64 = double(temp.f32);
	// bne cr6,0x820c787c
	if (!cr6.getEQ()) goto loc_820C787C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,32
	ctx.r4.s64 = 32;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c77fc
	if (cr6.getEQ()) goto loc_820C77FC;
	// li r29,1
	r29.s64 = 1;
loc_820C77FC:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,8192
	ctx.r4.s64 = 8192;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7814
	if (cr6.getEQ()) goto loc_820C7814;
	// li r27,1
	r27.s64 = 1;
loc_820C7814:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x820c784c
	if (cr6.getEQ()) goto loc_820C784C;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1680(r31)
	PPC_STORE_U32(r31.u32 + -1680, r11.u32);
	// stw r11,-1656(r28)
	PPC_STORE_U32(r28.u32 + -1656, r11.u32);
	// lwz r11,-1668(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1668);
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// blt cr6,0x820c783c
	if (cr6.getLT()) goto loc_820C783C;
	// li r11,2
	r11.s64 = 2;
	// stw r11,-1668(r30)
	PPC_STORE_U32(r30.u32 + -1668, r11.u32);
loc_820C783C:
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
loc_820C784C:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x820c787c
	if (cr6.getEQ()) goto loc_820C787C;
	// li r11,2
	r11.s64 = 2;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1680(r31)
	PPC_STORE_U32(r31.u32 + -1680, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1608(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1608, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// lfs f1,15716(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15716);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
loc_820C787C:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,16384
	ctx.r4.s64 = 16384;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c78b4
	if (cr6.getEQ()) goto loc_820C78B4;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1680(r31)
	PPC_STORE_U32(r31.u32 + -1680, r11.u32);
	// stw r11,-1656(r28)
	PPC_STORE_U32(r28.u32 + -1656, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1668(r30)
	PPC_STORE_U32(r30.u32 + -1668, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
loc_820C78B4:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-64(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// lfd f31,-56(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_820C78C8"))) PPC_WEAK_FUNC(sub_820C78C8);
PPC_FUNC_IMPL(__imp__sub_820C78C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,32
	ctx.r4.s64 = 32;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c791c
	if (cr6.getEQ()) goto loc_820C791C;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15720(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15720);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C791C:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,8192
	ctx.r4.s64 = 8192;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7960
	if (cr6.getEQ()) goto loc_820C7960;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,3
	r11.s64 = 3;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1672(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1672, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1608(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1608, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C7960:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,16384
	ctx.r4.s64 = 16384;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c79ac
	if (cr6.getEQ()) goto loc_820C79AC;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1656(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1656, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,8
	r11.s64 = 8;
	// stw r11,-1668(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1668, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15712(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15712);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
loc_820C79AC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C79C0"))) PPC_WEAK_FUNC(sub_820C79C0);
PPC_FUNC_IMPL(__imp__sub_820C79C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,32
	ctx.r4.s64 = 32;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7a10
	if (cr6.getEQ()) goto loc_820C7A10;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,2
	r11.s64 = 2;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1676(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1676, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1608(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1608, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C7A10:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,8192
	ctx.r4.s64 = 8192;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7a58
	if (cr6.getEQ()) goto loc_820C7A58;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,4
	r11.s64 = 4;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15720(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15720);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C7A58:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,16384
	ctx.r4.s64 = 16384;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7aa4
	if (cr6.getEQ()) goto loc_820C7AA4;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1656(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1656, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,9
	r11.s64 = 9;
	// stw r11,-1668(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1668, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15712(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15712);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
loc_820C7AA4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C7AB8"))) PPC_WEAK_FUNC(sub_820C7AB8);
PPC_FUNC_IMPL(__imp__sub_820C7AB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,32
	ctx.r4.s64 = 32;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7b18
	if (cr6.getEQ()) goto loc_820C7B18;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,3
	r11.s64 = 3;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,0
	r11.s64 = 0;
	// stw r11,-1672(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1672, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15716(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15716);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C7B18:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,8192
	ctx.r4.s64 = 8192;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7b5c
	if (cr6.getEQ()) goto loc_820C7B5C;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1656(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1656, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1668(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1668);
	// cmpwi cr6,r10,6
	cr6.compare<int32_t>(ctx.r10.s32, 6, xer);
	// blt cr6,0x820c7b90
	if (cr6.getLT()) goto loc_820C7B90;
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r10,-1668(r11)
	PPC_STORE_U32(r11.u32 + -1668, ctx.r10.u32);
	// b 0x820c7b90
	goto loc_820C7B90;
loc_820C7B5C:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,16384
	ctx.r4.s64 = 16384;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7ba8
	if (cr6.getEQ()) goto loc_820C7BA8;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1656(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1656, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,7
	r11.s64 = 7;
	// stw r11,-1668(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1668, r11.u32);
loc_820C7B90:
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15712(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15712);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
loc_820C7BA8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C7BB8"))) PPC_WEAK_FUNC(sub_820C7BB8);
PPC_FUNC_IMPL(__imp__sub_820C7BB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// li r4,24608
	ctx.r4.s64 = 24608;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7c10
	if (cr6.getEQ()) goto loc_820C7C10;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1680(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1680, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1656(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1656, r11.u32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r11,6
	r11.s64 = 6;
	// stw r11,-1668(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1668, r11.u32);
	// bl 0x820c3558
	sub_820C3558(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14436(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15712(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15712);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b14a0
	sub_820B14A0(ctx, base);
loc_820C7C10:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C7C20"))) PPC_WEAK_FUNC(sub_820C7C20);
PPC_FUNC_IMPL(__imp__sub_820C7C20) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f30.u64);
	// stfd f31,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8209c700
	sub_8209C700(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c812c
	if (!cr6.getEQ()) goto loc_820C812C;
	// lis r11,16
	r11.s64 = 1048576;
	// ori r31,r11,4096
	r31.u64 = r11.u64 | 4096;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c7c64
	if (cr6.getEQ()) goto loc_820C7C64;
	// bl 0x820b1ac0
	sub_820B1AC0(ctx, base);
loc_820C7C64:
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,-1608(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1608);
	// lfs f31,14436(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14436);
	f31.f64 = double(temp.f32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,15464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15464);
	f30.f64 = double(temp.f32);
	// bne cr6,0x820c7d4c
	if (!cr6.getEQ()) goto loc_820C7D4C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820c7cc4
	if (cr6.getLT()) goto loc_820C7CC4;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c7cc4
	if (cr6.getGT()) goto loc_820C7CC4;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0348
	sub_820A0348(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820c7cc4
	if (cr6.getLT()) goto loc_820C7CC4;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0348
	sub_820A0348(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x820c7d44
	if (!cr6.getGT()) goto loc_820C7D44;
loc_820C7CC4:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c7d04
	if (cr6.getGT()) goto loc_820C7D04;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a01c8
	sub_820A01C8(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x820c7d04
	if (!cr6.getGT()) goto loc_820C7D04;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0348
	sub_820A0348(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c7d04
	if (cr6.getGT()) goto loc_820C7D04;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a03c8
	sub_820A03C8(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c7d44
	if (cr6.getGT()) goto loc_820C7D44;
loc_820C7D04:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0148
	sub_820A0148(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820c7d4c
	if (cr6.getLT()) goto loc_820C7D4C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a01c8
	sub_820A01C8(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// bge cr6,0x820c7d4c
	if (!cr6.getLT()) goto loc_820C7D4C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0348
	sub_820A0348(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820c7d4c
	if (cr6.getLT()) goto loc_820C7D4C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a03c8
	sub_820A03C8(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// bge cr6,0x820c7d4c
	if (!cr6.getLT()) goto loc_820C7D4C;
loc_820C7D44:
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1608(r31)
	PPC_STORE_U32(r31.u32 + -1608, r11.u32);
loc_820C7D4C:
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-1604(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1604);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c7e24
	if (!cr6.getEQ()) goto loc_820C7E24;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820c7d9c
	if (cr6.getLT()) goto loc_820C7D9C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c7d9c
	if (cr6.getGT()) goto loc_820C7D9C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0448
	sub_820A0448(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820c7d9c
	if (cr6.getLT()) goto loc_820C7D9C;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0448
	sub_820A0448(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x820c7e1c
	if (!cr6.getGT()) goto loc_820C7E1C;
loc_820C7D9C:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c7ddc
	if (cr6.getGT()) goto loc_820C7DDC;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a02c8
	sub_820A02C8(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x820c7ddc
	if (!cr6.getGT()) goto loc_820C7DDC;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0448
	sub_820A0448(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c7ddc
	if (cr6.getGT()) goto loc_820C7DDC;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a04c8
	sub_820A04C8(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x820c7e1c
	if (cr6.getGT()) goto loc_820C7E1C;
loc_820C7DDC:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0248
	sub_820A0248(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820c7e24
	if (cr6.getLT()) goto loc_820C7E24;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a02c8
	sub_820A02C8(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// bge cr6,0x820c7e24
	if (!cr6.getLT()) goto loc_820C7E24;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a0448
	sub_820A0448(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x820c7e24
	if (cr6.getLT()) goto loc_820C7E24;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820a04c8
	sub_820A04C8(ctx, base);
	// fcmpu cr6,f1,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f30.f64);
	// bge cr6,0x820c7e24
	if (!cr6.getLT()) goto loc_820C7E24;
loc_820C7E1C:
	// li r11,1
	r11.s64 = 1;
	// stw r11,-1604(r31)
	PPC_STORE_U32(r31.u32 + -1604, r11.u32);
loc_820C7E24:
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lis r9,-32014
	ctx.r9.s64 = -2098069504;
	// addi r31,r11,18032
	r31.s64 = r11.s64 + 18032;
	// lwz r10,-1540(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + -1540);
	// lwz r11,-28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -28);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x820c7e4c
	if (!cr6.getLT()) goto loc_820C7E4C;
	// addis r10,r10,-2064
	ctx.r10.s64 = ctx.r10.s64 + -135266304;
	// addi r10,r10,-2048
	ctx.r10.s64 = ctx.r10.s64 + -2048;
	// stw r10,-1540(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1540, ctx.r10.u32);
loc_820C7E4C:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,-28(r31)
	PPC_STORE_U32(r31.u32 + -28, r11.u32);
	// lwz r11,-52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -52);
	// addis r8,r11,-20640
	ctx.r8.s64 = r11.s64 + -1352663040;
	// addi r8,r8,-20480
	ctx.r8.s64 = ctx.r8.s64 + -20480;
	// cmplw cr6,r10,r8
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r8.u32, xer);
	// bgt cr6,0x820c7e74
	if (cr6.getGT()) goto loc_820C7E74;
	// stw r11,-1540(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1540, r11.u32);
	// li r11,15
	r11.s64 = 15;
	// stw r11,-28(r31)
	PPC_STORE_U32(r31.u32 + -28, r11.u32);
loc_820C7E74:
	// lwz r10,-20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -20);
	// lwz r11,-24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -24);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x820c7e8c
	if (!cr6.getLT()) goto loc_820C7E8C;
	// addi r11,r11,-16
	r11.s64 = r11.s64 + -16;
	// stw r11,-24(r31)
	PPC_STORE_U32(r31.u32 + -24, r11.u32);
loc_820C7E8C:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmplwi cr6,r11,95
	cr6.compare<uint32_t>(r11.u32, 95, xer);
	// stw r10,-20(r31)
	PPC_STORE_U32(r31.u32 + -20, ctx.r10.u32);
	// bgt cr6,0x820c7eac
	if (cr6.getGT()) goto loc_820C7EAC;
	// li r11,255
	r11.s64 = 255;
	// stw r11,-24(r31)
	PPC_STORE_U32(r31.u32 + -24, r11.u32);
	// li r11,15
	r11.s64 = 15;
	// stw r11,-20(r31)
	PPC_STORE_U32(r31.u32 + -20, r11.u32);
loc_820C7EAC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,-4(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + -4);
	f0.f64 = double(temp.f32);
	// lfs f13,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f11,f0,f13
	ctx.f11.f64 = double(float(f0.f64 * ctx.f13.f64));
	// lfs f0,15996(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15996);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r30,r11,-1544
	r30.s64 = r11.s64 + -1544;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,-40(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + -40);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f11,f0,f12
	f0.f64 = double(float(ctx.f11.f64 * f0.f64 + ctx.f12.f64));
	// lfs f12,14032(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14032);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x820c7eec
	if (!cr6.getGT()) goto loc_820C7EEC;
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// b 0x820c7f00
	goto loc_820C7F00;
loc_820C7EEC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,14444(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14444);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// bge cr6,0x820c7f00
	if (!cr6.getLT()) goto loc_820C7F00;
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
loc_820C7F00:
	// lwz r11,-12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -12);
	// stfs f0,-40(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + -40, temp.u32);
	// rlwinm r29,r11,16,0,15
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r28,r3,31
	r28.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// ble cr6,0x820c7f2c
	if (!cr6.getGT()) goto loc_820C7F2C;
	// bl 0x820c34c0
	sub_820C34C0(ctx, base);
loc_820C7F2C:
	// lwz r11,-16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -16);
	// cmpwi cr6,r11,224
	cr6.compare<int32_t>(r11.s32, 224, xer);
	// bge cr6,0x820c7f60
	if (!cr6.getLT()) goto loc_820C7F60;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// rlwinm r10,r11,2,30,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0x3;
	// lwz r11,-16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -16);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// cmpwi cr6,r11,224
	cr6.compare<int32_t>(r11.s32, 224, xer);
	// stw r11,-16(r31)
	PPC_STORE_U32(r31.u32 + -16, r11.u32);
loc_820C7F60:
	// ble cr6,0x820c7f6c
	if (!cr6.getGT()) goto loc_820C7F6C;
	// li r11,224
	r11.s64 = 224;
	// stw r11,-16(r31)
	PPC_STORE_U32(r31.u32 + -16, r11.u32);
loc_820C7F6C:
	// subfic r10,r11,224
	xer.ca = r11.u32 <= 224;
	ctx.r10.s64 = 224 - r11.s64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r11,r11,-4
	r11.s64 = r11.s64 + -4;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,342
	cr6.compare<int32_t>(r11.s32, 342, xer);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// stw r10,-44(r30)
	PPC_STORE_U32(r30.u32 + -44, ctx.r10.u32);
	// ble cr6,0x820c7f94
	if (!cr6.getGT()) goto loc_820C7F94;
	// li r11,-342
	r11.s64 = -342;
	// b 0x820c7fa0
	goto loc_820C7FA0;
loc_820C7F94:
	// cmpwi cr6,r11,-342
	cr6.compare<int32_t>(r11.s32, -342, xer);
	// bge cr6,0x820c7fa4
	if (!cr6.getLT()) goto loc_820C7FA4;
	// li r11,342
	r11.s64 = 342;
loc_820C7FA0:
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
loc_820C7FA4:
	// lhz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// extsh r9,r10
	ctx.r9.s64 = ctx.r10.s16;
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,-1680(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1680);
	// stb r10,-1660(r8)
	PPC_STORE_U8(ctx.r8.u32 + -1660, ctx.r10.u8);
	// addi r10,r9,-1
	ctx.r10.s64 = ctx.r9.s64 + -1;
	// cmplwi cr6,r11,5
	cr6.compare<uint32_t>(r11.u32, 5, xer);
	// clrlwi r10,r10,31
	ctx.r10.u64 = ctx.r10.u32 & 0x1;
	// sth r10,0(r31)
	PPC_STORE_U16(r31.u32 + 0, ctx.r10.u16);
	// bgt cr6,0x820c812c
	if (cr6.getGT()) goto loc_820C812C;
	// lis r12,-32244
	r12.s64 = -2113142784;
	// addi r12,r12,32748
	r12.s64 = r12.s64 + 32748;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820C8004;
	case 1:
		goto loc_820C8128;
	case 2:
		goto loc_820C8018;
	case 3:
		goto loc_820C8060;
	case 4:
		goto loc_820C8100;
	case 5:
		goto loc_820C8114;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-32764(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32764);
	// lwz r16,-32472(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32472);
	// lwz r16,-32744(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32744);
	// lwz r16,-32672(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32672);
	// lwz r16,-32512(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32512);
	// lwz r16,-32492(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32492);
loc_820C8004:
	// bl 0x820c76a8
	sub_820C76A8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820C8018:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1676(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1676);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c8048
	if (cr6.getEQ()) goto loc_820C8048;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x820c804c
	if (!cr6.getEQ()) goto loc_820C804C;
	// bl 0x820c36e8
	sub_820C36E8(ctx, base);
	// bl 0x820c78c8
	sub_820C78C8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820C8048:
	// bl 0x820c3650
	sub_820C3650(ctx, base);
loc_820C804C:
	// bl 0x820c78c8
	sub_820C78C8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820C8060:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1672(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1672);
	// cmplwi cr6,r11,11
	cr6.compare<uint32_t>(r11.u32, 11, xer);
	// bgt cr6,0x820c80ec
	if (cr6.getGT()) goto loc_820C80EC;
	// lis r12,-32243
	r12.s64 = -2113077248;
	// addi r12,r12,-32632
	r12.s64 = r12.s64 + -32632;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820C80B8;
	case 1:
		goto loc_820C80D0;
	case 2:
		goto loc_820C80EC;
	case 3:
		goto loc_820C80E8;
	case 4:
		goto loc_820C80E8;
	case 5:
		goto loc_820C80E8;
	case 6:
		goto loc_820C80E8;
	case 7:
		goto loc_820C80E8;
	case 8:
		goto loc_820C80E8;
	case 9:
		goto loc_820C80E8;
	case 10:
		goto loc_820C80E8;
	case 11:
		goto loc_820C80E8;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-32584(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32584);
	// lwz r16,-32560(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32560);
	// lwz r16,-32532(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32532);
	// lwz r16,-32536(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32536);
	// lwz r16,-32536(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32536);
	// lwz r16,-32536(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32536);
	// lwz r16,-32536(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32536);
	// lwz r16,-32536(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32536);
	// lwz r16,-32536(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32536);
	// lwz r16,-32536(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32536);
	// lwz r16,-32536(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32536);
	// lwz r16,-32536(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -32536);
loc_820C80B8:
	// bl 0x820c3878
	sub_820C3878(ctx, base);
	// bl 0x820c79c0
	sub_820C79C0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820C80D0:
	// bl 0x820c3900
	sub_820C3900(ctx, base);
	// bl 0x820c79c0
	sub_820C79C0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820C80E8:
	// bl 0x820c3780
	sub_820C3780(ctx, base);
loc_820C80EC:
	// bl 0x820c79c0
	sub_820C79C0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820C8100:
	// bl 0x820c7ab8
	sub_820C7AB8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820C8114:
	// bl 0x820c7bb8
	sub_820C7BB8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_820C8128:
	// bl 0x820c7790
	sub_820C7790(ctx, base);
loc_820C812C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820C8140"))) PPC_WEAK_FUNC(sub_820C8140);
PPC_FUNC_IMPL(__imp__sub_820C8140) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// bl 0x82183d48
	sub_82183D48(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1672(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1672);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// rlwinm r11,r3,8,16,23
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 8) & 0xFF00;
	// clrlwi r31,r11,16
	r31.u64 = r11.u32 & 0xFFFF;
	// sth r31,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, r31.u16);
	// bne cr6,0x820c8180
	if (!cr6.getEQ()) goto loc_820C8180;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x820c56f0
	sub_820C56F0(ctx, base);
	// lhz r31,80(r1)
	r31.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
loc_820C8180:
	// clrlwi r11,r31,16
	r11.u64 = r31.u32 & 0xFFFF;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,2708(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2708);
	f0.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// rlwinm r11,r31,24,24,31
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 24) & 0xFF;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82184e48
	sub_82184E48(ctx, base);
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// bl 0x82183d48
	sub_82183D48(ctx, base);
	// rlwinm r11,r3,8,16,23
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 8) & 0xFF00;
	// clrlwi r3,r11,16
	ctx.r3.u64 = r11.u32 & 0xFFFF;
	// bl 0x82144a30
	sub_82144A30(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r29,-32190
	r29.s64 = -2109603840;
	// lis r30,-32190
	r30.s64 = -2109603840;
	// li r10,224
	ctx.r10.s64 = 224;
	// lis r28,-32190
	r28.s64 = -2109603840;
	// lfs f0,16004(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16004);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,18164(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 18164);
	ctx.f2.f64 = double(temp.f32);
	// lis r31,-32190
	r31.s64 = -2109603840;
	// lfs f11,18160(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 18160);
	ctx.f11.f64 = double(temp.f32);
	// li r7,64
	ctx.r7.s64 = 64;
	// fadds f4,f2,f11
	ctx.f4.f64 = double(float(ctx.f2.f64 + ctx.f11.f64));
	// stb r10,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r10.u8);
	// stb r10,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r10.u8);
	// lfs f12,18156(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 18156);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,15776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15776);
	ctx.f13.f64 = double(temp.f32);
	// li r11,32
	r11.s64 = 32;
	// lfs f1,18152(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 18152);
	ctx.f1.f64 = double(temp.f32);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// stb r7,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r7.u8);
	// fmadds f3,f12,f31,f1
	ctx.f3.f64 = double(float(ctx.f12.f64 * f31.f64 + ctx.f1.f64));
	// stb r11,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, r11.u8);
	// stb r11,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, r11.u8);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f11,15940(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15940);
	ctx.f11.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmadds f11,f31,f0,f11
	ctx.f11.f64 = double(float(f31.f64 * f0.f64 + ctx.f11.f64));
	// lfs f0,16000(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16000);
	f0.f64 = double(temp.f32);
	// fmadds f0,f31,f13,f0
	f0.f64 = double(float(f31.f64 * ctx.f13.f64 + f0.f64));
	// fctidz f13,f11
	ctx.f13.s64 = (ctx.f11.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f11.f64));
	// stfd f13,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f13.u64);
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, f0.u64);
	// lbz r11,103(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 103);
	// lbz r10,111(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 111);
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, r11.u8);
	// stb r10,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r10.u8);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x820972f8
	sub_820972F8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,18164(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 18164);
	ctx.f2.f64 = double(temp.f32);
	// lfs f0,18156(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 18156);
	f0.f64 = double(temp.f32);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lfs f13,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f12,f13,f31
	ctx.f12.f64 = double(float(ctx.f13.f64 - f31.f64));
	// lfs f13,18160(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 18160);
	ctx.f13.f64 = double(temp.f32);
	// fadds f4,f2,f13
	ctx.f4.f64 = double(float(ctx.f2.f64 + ctx.f13.f64));
	// lfs f13,18152(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 18152);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f1,f0,f31,f13
	ctx.f1.f64 = double(float(f0.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f3,f12,f0,f1
	ctx.f3.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f1.f64));
	// bl 0x820972f8
	sub_820972F8(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820C82B0"))) PPC_WEAK_FUNC(sub_820C82B0);
PPC_FUNC_IMPL(__imp__sub_820C82B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// bl 0x82183d40
	sub_82183D40(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1672(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1672);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// rlwinm r11,r3,8,16,23
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 8) & 0xFF00;
	// clrlwi r31,r11,16
	r31.u64 = r11.u32 & 0xFFFF;
	// sth r31,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, r31.u16);
	// bne cr6,0x820c82f0
	if (!cr6.getEQ()) goto loc_820C82F0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x820c56f0
	sub_820C56F0(ctx, base);
	// lhz r31,80(r1)
	r31.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
loc_820C82F0:
	// clrlwi r11,r31,16
	r11.u64 = r31.u32 & 0xFFFF;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,2708(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2708);
	f0.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// rlwinm r11,r31,24,24,31
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 24) & 0xFF;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82184e18
	sub_82184E18(ctx, base);
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// bl 0x82183d40
	sub_82183D40(ctx, base);
	// rlwinm r11,r3,8,16,23
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 8) & 0xFF00;
	// clrlwi r3,r11,16
	ctx.r3.u64 = r11.u32 & 0xFFFF;
	// bl 0x82144ad0
	sub_82144AD0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r29,-32190
	r29.s64 = -2109603840;
	// lis r30,-32190
	r30.s64 = -2109603840;
	// li r10,224
	ctx.r10.s64 = 224;
	// lis r28,-32190
	r28.s64 = -2109603840;
	// lfs f0,16004(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16004);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,18180(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 18180);
	ctx.f2.f64 = double(temp.f32);
	// lis r31,-32190
	r31.s64 = -2109603840;
	// lfs f11,18176(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 18176);
	ctx.f11.f64 = double(temp.f32);
	// li r7,64
	ctx.r7.s64 = 64;
	// fadds f4,f2,f11
	ctx.f4.f64 = double(float(ctx.f2.f64 + ctx.f11.f64));
	// stb r10,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r10.u8);
	// stb r10,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r10.u8);
	// lfs f12,18172(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 18172);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,15776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15776);
	ctx.f13.f64 = double(temp.f32);
	// li r11,32
	r11.s64 = 32;
	// lfs f1,18168(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 18168);
	ctx.f1.f64 = double(temp.f32);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// stb r7,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r7.u8);
	// fmadds f3,f12,f31,f1
	ctx.f3.f64 = double(float(ctx.f12.f64 * f31.f64 + ctx.f1.f64));
	// stb r11,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, r11.u8);
	// stb r11,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, r11.u8);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f11,15940(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15940);
	ctx.f11.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmadds f11,f31,f0,f11
	ctx.f11.f64 = double(float(f31.f64 * f0.f64 + ctx.f11.f64));
	// lfs f0,16000(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16000);
	f0.f64 = double(temp.f32);
	// fmadds f0,f31,f13,f0
	f0.f64 = double(float(f31.f64 * ctx.f13.f64 + f0.f64));
	// fctidz f13,f11
	ctx.f13.s64 = (ctx.f11.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f11.f64));
	// stfd f13,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f13.u64);
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, f0.u64);
	// lbz r11,103(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 103);
	// lbz r10,111(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 111);
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, r11.u8);
	// stb r10,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r10.u8);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x820972f8
	sub_820972F8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,18180(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 18180);
	ctx.f2.f64 = double(temp.f32);
	// lfs f0,18172(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 18172);
	f0.f64 = double(temp.f32);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lfs f13,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f12,f13,f31
	ctx.f12.f64 = double(float(ctx.f13.f64 - f31.f64));
	// lfs f13,18176(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 18176);
	ctx.f13.f64 = double(temp.f32);
	// fadds f4,f2,f13
	ctx.f4.f64 = double(float(ctx.f2.f64 + ctx.f13.f64));
	// lfs f13,18168(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 18168);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f1,f0,f31,f13
	ctx.f1.f64 = double(float(f0.f64 * f31.f64 + ctx.f13.f64));
	// fmadds f3,f12,f0,f1
	ctx.f3.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f1.f64));
	// bl 0x820972f8
	sub_820972F8(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820C8420"))) PPC_WEAK_FUNC(sub_820C8420);
PPC_FUNC_IMPL(__imp__sub_820C8420) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed548
	// stwu r1,-336(r1)
	ea = -336 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820c4380
	sub_820C4380(ctx, base);
	// bl 0x820b1628
	sub_820B1628(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x820c8d48
	if (cr6.getEQ()) goto loc_820C8D48;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lis r31,-31991
	r31.s64 = -2096562176;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44082
	ctx.r3.u64 = ctx.r3.u64 | 44082;
	// lwz r30,15120(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 15120);
	// lwz r29,-31544(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r24,-32190
	r24.s64 = -2109603840;
	// lis r23,-32190
	r23.s64 = -2109603840;
	// lis r25,-32014
	r25.s64 = -2098069504;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lwz r11,18212(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 18212);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// lwz r11,18208(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 18208);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// addi r26,r11,17812
	r26.s64 = r11.s64 + 17812;
	// lwz r11,-1676(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -1676);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lwz r27,168(r26)
	r27.u64 = PPC_LOAD_U32(r26.u32 + 168);
	// bne cr6,0x820c84a0
	if (!cr6.getEQ()) goto loc_820C84A0;
	// lwz r27,176(r26)
	r27.u64 = PPC_LOAD_U32(r26.u32 + 176);
loc_820C84A0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1652(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c852c
	if (cr6.getEQ()) goto loc_820C852C;
	// lwz r11,-1676(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -1676);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c852c
	if (!cr6.getEQ()) goto loc_820C852C;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r20,0
	r20.s64 = 0;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// stw r20,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r20.u32);
	// addi r5,r1,120
	ctx.r5.s64 = ctx.r1.s64 + 120;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// lwz r10,180(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 180);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// stw r20,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r20.u32);
	// bl 0x820c2868
	sub_820C2868(ctx, base);
	// b 0x820c8564
	goto loc_820C8564;
loc_820C852C:
	// li r11,-1
	r11.s64 = -1;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// li r20,0
	r20.s64 = 0;
	// lwz r9,116(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// stw r20,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r20.u32);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r20.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820C8564:
	// lwz r3,18208(r23)
	ctx.r3.u64 = PPC_LOAD_U32(r23.u32 + 18208);
	// bl 0x820c58d0
	sub_820C58D0(ctx, base);
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// bl 0x820ca240
	sub_820CA240(ctx, base);
	// lwz r11,-1676(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -1676);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// addi r30,r11,17896
	r30.s64 = r11.s64 + 17896;
	// lhz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + 0);
	// bne cr6,0x820c88e8
	if (!cr6.getEQ()) goto loc_820C88E8;
	// lwz r25,176(r26)
	r25.u64 = PPC_LOAD_U32(r26.u32 + 176);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r27,-32190
	r27.s64 = -2109603840;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r11,r1,168
	r11.s64 = ctx.r1.s64 + 168;
	// lwz r24,18212(r24)
	r24.u64 = PPC_LOAD_U32(r24.u32 + 18212);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r7,r1,184
	ctx.r7.s64 = ctx.r1.s64 + 184;
	// addi r6,r1,188
	ctx.r6.s64 = ctx.r1.s64 + 188;
	// lfs f0,18204(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 18204);
	f0.f64 = double(temp.f32);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r10,r24
	ctx.r10.s64 = r24.s32;
	// lwz r11,168(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r10,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, ctx.r10.u64);
	// std r11,168(r1)
	PPC_STORE_U64(ctx.r1.u32 + 168, r11.u64);
	// lfd f0,168(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 168);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// lfd f13,192(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lis r25,-31994
	r25.s64 = -2096758784;
	// addi r9,r1,160
	ctx.r9.s64 = ctx.r1.s64 + 160;
	// lwz r29,0(r26)
	r29.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// lfs f0,18204(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 18204);
	f0.f64 = double(temp.f32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// mr r22,r29
	r22.u64 = r29.u64;
	// mr r21,r29
	r21.u64 = r29.u64;
	// lwz r11,11488(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 11488);
	// stfiwx f0,0,r9
	PPC_STORE_U32(ctx.r9.u32, f0.u32);
	// subfic r10,r11,0
	xer.ca = r11.u32 <= 0;
	ctx.r10.s64 = 0 - r11.s64;
	// subfe r10,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// subfic r8,r11,0
	xer.ca = r11.u32 <= 0;
	ctx.r8.s64 = 0 - r11.s64;
	// rlwinm r11,r10,0,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFE;
	// subfe r10,r8,r8
	temp.u8 = (~ctx.r8.u32 + ctx.r8.u32 < ~ctx.r8.u32) | (~ctx.r8.u32 + ctx.r8.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r8.u64 + ctx.r8.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,29,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// rlwinm r10,r10,0,30,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// addi r23,r11,180
	r23.s64 = r11.s64 + 180;
	// addi r24,r10,225
	r24.s64 = ctx.r10.s64 + 225;
	// bl 0x820c2c28
	sub_820C2C28(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820c5ba0
	sub_820C5BA0(ctx, base);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bne cr6,0x820c86b8
	if (!cr6.getEQ()) goto loc_820C86B8;
	// lwz r29,172(r26)
	r29.u64 = PPC_LOAD_U32(r26.u32 + 172);
	// b 0x820c86d4
	goto loc_820C86D4;
loc_820C86B8:
	// cmpwi cr6,r27,1
	cr6.compare<int32_t>(r27.s32, 1, xer);
	// bne cr6,0x820c86c8
	if (!cr6.getEQ()) goto loc_820C86C8;
	// lwz r22,172(r26)
	r22.u64 = PPC_LOAD_U32(r26.u32 + 172);
	// b 0x820c86d4
	goto loc_820C86D4;
loc_820C86C8:
	// cmpwi cr6,r27,2
	cr6.compare<int32_t>(r27.s32, 2, xer);
	// bne cr6,0x820c86d4
	if (!cr6.getEQ()) goto loc_820C86D4;
	// lwz r21,172(r26)
	r21.u64 = PPC_LOAD_U32(r26.u32 + 172);
loc_820C86D4:
	// lhz r11,6(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 6);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c86fc
	if (!cr6.getEQ()) goto loc_820C86FC;
	// lwz r11,11488(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 11488);
	// li r24,250
	r24.s64 = 250;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// rlwinm r11,r11,0,29,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// addi r23,r11,200
	r23.s64 = r11.s64 + 200;
loc_820C86FC:
	// lhz r3,2(r30)
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + 2);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r7,r1,188
	ctx.r7.s64 = ctx.r1.s64 + 188;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r6,r1,168
	ctx.r6.s64 = ctx.r1.s64 + 168;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,168(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subf r28,r11,r23
	r28.s64 = r23.s64 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// extsw r10,r28
	ctx.r10.s64 = r28.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// std r10,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, ctx.r10.u64);
	// lfd f13,160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// lfd f0,192(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lhz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r7,r1,188
	ctx.r7.s64 = ctx.r1.s64 + 188;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subf r29,r11,r24
	r29.s64 = r24.s64 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r29
	r11.s64 = r29.s32;
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// lfd f0,192(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lhz r3,6(r30)
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + 6);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c8c38
	if (cr6.getEQ()) goto loc_820C8C38;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r7,r1,188
	ctx.r7.s64 = ctx.r1.s64 + 188;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subfic r30,r11,270
	xer.ca = r11.u32 <= 270;
	r30.s64 = 270 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r30
	r11.s64 = r30.s32;
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// lfd f0,192(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// addi r4,r1,140
	ctx.r4.s64 = ctx.r1.s64 + 140;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// b 0x820c8c2c
	goto loc_820C8C2C;
loc_820C88E8:
	// lwz r25,168(r26)
	r25.u64 = PPC_LOAD_U32(r26.u32 + 168);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r27,-32190
	r27.s64 = -2109603840;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// lwz r24,18212(r24)
	r24.u64 = PPC_LOAD_U32(r24.u32 + 18212);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r7,r1,188
	ctx.r7.s64 = ctx.r1.s64 + 188;
	// addi r6,r1,160
	ctx.r6.s64 = ctx.r1.s64 + 160;
	// lfs f0,18204(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 18204);
	f0.f64 = double(temp.f32);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// extsw r10,r24
	ctx.r10.s64 = r24.s32;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// std r10,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.r10.u64);
	// lfd f13,176(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// lfd f0,192(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lis r25,-31994
	r25.s64 = -2096758784;
	// addi r9,r1,168
	ctx.r9.s64 = ctx.r1.s64 + 168;
	// lfs f0,18204(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 18204);
	f0.f64 = double(temp.f32);
	// lwz r29,0(r26)
	r29.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// mr r23,r29
	r23.u64 = r29.u64;
	// lwz r11,11488(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 11488);
	// mr r22,r29
	r22.u64 = r29.u64;
	// stfiwx f0,0,r9
	PPC_STORE_U32(ctx.r9.u32, f0.u32);
	// subfic r10,r11,0
	xer.ca = r11.u32 <= 0;
	ctx.r10.s64 = 0 - r11.s64;
	// subfe r10,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// subfic r8,r11,0
	xer.ca = r11.u32 <= 0;
	ctx.r8.s64 = 0 - r11.s64;
	// rlwinm r11,r10,0,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFE;
	// subfe r10,r8,r8
	temp.u8 = (~ctx.r8.u32 + ctx.r8.u32 < ~ctx.r8.u32) | (~ctx.r8.u32 + ctx.r8.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r8.u64 + ctx.r8.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,29,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// rlwinm r10,r10,0,30,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// addi r24,r11,180
	r24.s64 = r11.s64 + 180;
	// addi r27,r10,225
	r27.s64 = ctx.r10.s64 + 225;
	// bl 0x820c2c28
	sub_820C2C28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820c8a00
	if (!cr6.getEQ()) goto loc_820C8A00;
	// lwz r29,168(r26)
	r29.u64 = PPC_LOAD_U32(r26.u32 + 168);
	// b 0x820c8a1c
	goto loc_820C8A1C;
loc_820C8A00:
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x820c8a10
	if (!cr6.getEQ()) goto loc_820C8A10;
	// lwz r23,168(r26)
	r23.u64 = PPC_LOAD_U32(r26.u32 + 168);
	// b 0x820c8a1c
	goto loc_820C8A1C;
loc_820C8A10:
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x820c8a1c
	if (!cr6.getEQ()) goto loc_820C8A1C;
	// lwz r22,168(r26)
	r22.u64 = PPC_LOAD_U32(r26.u32 + 168);
loc_820C8A1C:
	// lhz r11,6(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 6);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c8a44
	if (!cr6.getEQ()) goto loc_820C8A44;
	// lwz r11,11488(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 11488);
	// li r27,250
	r27.s64 = 250;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// rlwinm r11,r11,0,29,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// addi r24,r11,200
	r24.s64 = r11.s64 + 200;
loc_820C8A44:
	// lhz r3,2(r30)
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + 2);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r7,r1,188
	ctx.r7.s64 = ctx.r1.s64 + 188;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subf r28,r11,r24
	r28.s64 = r24.s64 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// lwz r11,168(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// extsw r10,r28
	ctx.r10.s64 = r28.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// addi r3,r1,148
	ctx.r3.s64 = ctx.r1.s64 + 148;
	// std r10,168(r1)
	PPC_STORE_U64(ctx.r1.u32 + 168, ctx.r10.u64);
	// lfd f13,168(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 168);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// lfd f0,192(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,148
	ctx.r4.s64 = ctx.r1.s64 + 148;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,148
	ctx.r3.s64 = ctx.r1.s64 + 148;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lhz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r7,r1,188
	ctx.r7.s64 = ctx.r1.s64 + 188;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subf r29,r11,r27
	r29.s64 = r27.s64 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r29
	r11.s64 = r29.s32;
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// lfd f0,192(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// addi r4,r1,152
	ctx.r4.s64 = ctx.r1.s64 + 152;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lhz r3,6(r30)
	ctx.r3.u64 = PPC_LOAD_U16(r30.u32 + 6);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c8c38
	if (cr6.getEQ()) goto loc_820C8C38;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r7,r1,188
	ctx.r7.s64 = ctx.r1.s64 + 188;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r4,-31544(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// subfic r30,r11,270
	xer.ca = r11.u32 <= 270;
	r30.s64 = 270 - r11.s64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r30
	r11.s64 = r30.s32;
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,156
	ctx.r3.s64 = ctx.r1.s64 + 156;
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// lfd f0,192(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// addi r4,r1,156
	ctx.r4.s64 = ctx.r1.s64 + 156;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,156
	ctx.r3.s64 = ctx.r1.s64 + 156;
loc_820C8C2C:
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
loc_820C8C38:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r8,168(r26)
	ctx.r8.u64 = PPC_LOAD_U32(r26.u32 + 168);
	// lis r28,-32014
	r28.s64 = -2098069504;
	// lwz r11,-1396(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1396);
	// clrlwi r9,r11,31
	ctx.r9.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820c8c60
	if (!cr6.getEQ()) goto loc_820C8C60;
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// stw r8,-1400(r28)
	PPC_STORE_U32(r28.u32 + -1400, ctx.r8.u32);
	// stw r11,-1396(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1396, r11.u32);
loc_820C8C60:
	// rlwinm r9,r11,0,30,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820c8c80
	if (!cr6.getEQ()) goto loc_820C8C80;
	// lwz r9,172(r26)
	ctx.r9.u64 = PPC_LOAD_U32(r26.u32 + 172);
	// ori r11,r11,2
	r11.u64 = r11.u64 | 2;
	// stw r11,-1396(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1396, r11.u32);
	// stw r9,-1404(r29)
	PPC_STORE_U32(r29.u32 + -1404, ctx.r9.u32);
loc_820C8C80:
	// rlwinm r9,r11,0,29,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x820c8c9c
	if (!cr6.getEQ()) goto loc_820C8C9C;
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// stw r8,-1408(r30)
	PPC_STORE_U32(r30.u32 + -1408, ctx.r8.u32);
	// stw r11,-1396(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1396, r11.u32);
loc_820C8C9C:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x82183908
	sub_82183908(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820c8cc8
	if (cr6.getEQ()) goto loc_820C8CC8;
	// li r4,3
	ctx.r4.s64 = 3;
	// bl 0x82183f28
	sub_82183F28(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r26,r11,1
	r26.u64 = r11.u64 ^ 1;
	// b 0x820c8ccc
	goto loc_820C8CCC;
loc_820C8CC8:
	// mr r26,r20
	r26.u64 = r20.u64;
loc_820C8CCC:
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lwz r30,-1408(r30)
	r30.u64 = PPC_LOAD_U32(r30.u32 + -1408);
	// lwz r31,-31544(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + -31544);
	// lwz r29,-1404(r29)
	r29.u64 = PPC_LOAD_U32(r29.u32 + -1404);
	// lwz r28,-1400(r28)
	r28.u64 = PPC_LOAD_U32(r28.u32 + -1400);
	// lwz r10,18200(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 18200);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// std r10,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, ctx.r10.u64);
	// lfs f31,18196(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18196);
	f31.f64 = double(temp.f32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f30,18192(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18192);
	f30.f64 = double(temp.f32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lfs f29,18188(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 18188);
	f29.f64 = double(temp.f32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lwz r27,18184(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 18184);
	// lfd f0,192(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f28,f0
	f28.f64 = double(float(f0.f64));
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820eb880
	sub_820EB880(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f29.f64;
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// fmr f4,f28
	ctx.f4.f64 = f28.f64;
	// stw r30,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r30.u32);
	// bl 0x820f1928
	sub_820F1928(ctx, base);
loc_820C8D48:
	// addi r1,r1,336
	ctx.r1.s64 = ctx.r1.s64 + 336;
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed594
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_820C8D58"))) PPC_WEAK_FUNC(sub_820C8D58);
PPC_FUNC_IMPL(__imp__sub_820C8D58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stfd f31,-96(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -96, f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820c4380
	sub_820C4380(ctx, base);
	// bl 0x820b1628
	sub_820B1628(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x820c8f9c
	if (cr6.getEQ()) goto loc_820C8F9C;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c82b0
	sub_820C82B0(ctx, base);
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c8140
	sub_820C8140(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44085
	ctx.r3.u64 = ctx.r3.u64 | 44085;
	// lwz r30,15120(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 15120);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// lwz r29,-31544(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + -31544);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r11,37
	r11.s64 = 37;
	// lis r24,-32014
	r24.s64 = -2098069504;
	// li r23,64
	r23.s64 = 64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// addi r28,r11,17992
	r28.s64 = r11.s64 + 17992;
	// lwz r11,-1672(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -1672);
	// stw r23,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r23.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lwz r26,-12(r28)
	r26.u64 = PPC_LOAD_U32(r28.u32 + -12);
	// bne cr6,0x820c8df0
	if (!cr6.getEQ()) goto loc_820C8DF0;
	// lwz r26,-4(r28)
	r26.u64 = PPC_LOAD_U32(r28.u32 + -4);
loc_820C8DF0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lis r22,-32014
	r22.s64 = -2098069504;
	// lwz r11,-1652(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c8e7c
	if (cr6.getEQ()) goto loc_820C8E7C;
	// lwz r11,-1672(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -1672);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x820c8e7c
	if (!cr6.getEQ()) goto loc_820C8E7C;
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// li r31,0
	r31.s64 = 0;
	// li r25,-1
	r25.s64 = -1;
	// lwz r9,0(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// stw r25,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r25.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r31.u32);
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// bl 0x8213e398
	sub_8213E398(ctx, base);
	// b 0x820c8eb4
	goto loc_820C8EB4;
loc_820C8E7C:
	// li r31,0
	r31.s64 = 0;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// li r25,-1
	r25.s64 = -1;
	// lwz r9,116(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_820C8EB4:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44086
	ctx.r3.u64 = ctx.r3.u64 | 44086;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// li r11,59
	r11.s64 = 59;
	// lwz r26,-12(r28)
	r26.u64 = PPC_LOAD_U32(r28.u32 + -12);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// stw r23,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r23.u32);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// lwz r11,-1672(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -1672);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c8ee4
	if (!cr6.getEQ()) goto loc_820C8EE4;
	// lwz r26,-4(r28)
	r26.u64 = PPC_LOAD_U32(r28.u32 + -4);
loc_820C8EE4:
	// li r8,0
	ctx.r8.s64 = 0;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// lwz r11,-1652(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + -1652);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x820c8f68
	if (cr6.getEQ()) goto loc_820C8F68;
	// lwz r11,-1672(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -1672);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x820c8f68
	if (!cr6.getEQ()) goto loc_820C8F68;
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// lwz r9,0(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// stw r25,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r25.u32);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r31.u32);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// bl 0x8213e398
	sub_8213E398(ctx, base);
	// bl 0x820c61a8
	sub_820C61A8(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-96(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -96);
	// b 0x823ed170
	return;
loc_820C8F68:
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// lwz r9,116(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// bl 0x820c61a8
	sub_820C61A8(ctx, base);
loc_820C8F9C:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-96(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -96);
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_820C8FA8"))) PPC_WEAK_FUNC(sub_820C8FA8);
PPC_FUNC_IMPL(__imp__sub_820C8FA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r3,-1680(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -1680);
	// addi r4,r11,7576
	ctx.r4.s64 = r11.s64 + 7576;
	// bl 0x820c42e0
	sub_820C42E0(ctx, base);
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x820c90a0
	if (!cr6.getEQ()) goto loc_820C90A0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820b1990
	sub_820B1990(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8209ec08
	sub_8209EC08(ctx, base);
	// bl 0x820c4e38
	sub_820C4E38(ctx, base);
	// lwz r11,-1680(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1680);
	// cmplwi cr6,r11,5
	cr6.compare<uint32_t>(r11.u32, 5, xer);
	// bgt cr6,0x820c9070
	if (cr6.getGT()) goto loc_820C9070;
	// lis r12,-32243
	r12.s64 = -2113077248;
	// addi r12,r12,-28652
	r12.s64 = r12.s64 + -28652;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_820C902C;
	case 1:
		goto loc_820C9038;
	case 2:
		goto loc_820C9044;
	case 3:
		goto loc_820C9050;
	case 4:
		goto loc_820C905C;
	case 5:
		goto loc_820C9068;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-28628(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -28628);
	// lwz r16,-28616(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -28616);
	// lwz r16,-28604(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -28604);
	// lwz r16,-28592(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -28592);
	// lwz r16,-28580(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -28580);
	// lwz r16,-28568(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -28568);
loc_820C902C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c5030
	sub_820C5030(ctx, base);
	// b 0x820c9070
	goto loc_820C9070;
loc_820C9038:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c5158
	sub_820C5158(ctx, base);
	// b 0x820c9070
	goto loc_820C9070;
loc_820C9044:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c8420
	sub_820C8420(ctx, base);
	// b 0x820c9070
	goto loc_820C9070;
loc_820C9050:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c8d58
	sub_820C8D58(ctx, base);
	// b 0x820c9070
	goto loc_820C9070;
loc_820C905C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c6a18
	sub_820C6A18(ctx, base);
	// b 0x820c9070
	goto loc_820C9070;
loc_820C9068:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c7110
	sub_820C7110(ctx, base);
loc_820C9070:
	// lis r31,-31991
	r31.s64 = -2096562176;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x82193748
	sub_82193748(ctx, base);
	// li r4,7
	ctx.r4.s64 = 7;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x821937c0
	sub_821937C0(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,13356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 13356);
	// bl 0x82193960
	sub_82193960(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_820C90A0:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x820c90c4
	if (!cr6.getEQ()) goto loc_820C90C4;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x8209ec08
	sub_8209EC08(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820b1990
	sub_820B1990(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c4380
	sub_820C4380(ctx, base);
loc_820C90C4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820C90D0"))) PPC_WEAK_FUNC(sub_820C90D0);
PPC_FUNC_IMPL(__imp__sub_820C90D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f15{};
	PPCRegister f16{};
	PPCRegister f17{};
	PPCRegister f18{};
	PPCRegister f19{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// addi r12,r1,-96
	r12.s64 = ctx.r1.s64 + -96;
	// bl 0x823ed514
	// stwu r1,-448(r1)
	ea = -448 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r24,r5
	r24.u64 = ctx.r5.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// extsw r10,r24
	ctx.r10.s64 = r24.s32;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r27,-32256
	r27.s64 = -2113929216;
	// lis r28,-32256
	r28.s64 = -2113929216;
	// lfs f0,12272(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12272);
	f0.f64 = double(temp.f32);
	// lis r29,-32256
	r29.s64 = -2113929216;
	// fmuls f29,f1,f0
	f29.f64 = double(float(ctx.f1.f64 * f0.f64));
	// std r10,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, ctx.r10.u64);
	// lfd f0,136(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// lis r30,-32256
	r30.s64 = -2113929216;
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lis r3,-32256
	ctx.r3.s64 = -2113929216;
	// lis r4,-32256
	ctx.r4.s64 = -2113929216;
	// lfs f23,16032(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 16032);
	f23.f64 = double(temp.f32);
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lfs f26,12468(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12468);
	f26.f64 = double(temp.f32);
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lfs f19,2692(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 2692);
	f19.f64 = double(temp.f32);
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lfs f24,2780(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 2780);
	f24.f64 = double(temp.f32);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lfs f20,16028(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 16028);
	f20.f64 = double(temp.f32);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f15,3060(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 3060);
	f15.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f21,16024(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 16024);
	f21.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f27,16020(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 16020);
	f27.f64 = double(temp.f32);
	// li r22,0
	r22.s64 = 0;
	// lfs f22,15776(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 15776);
	f22.f64 = double(temp.f32);
	// lfs f28,2688(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 2688);
	f28.f64 = double(temp.f32);
	// frsp f18,f0
	f18.f64 = double(float(f0.f64));
	// lfs f25,16016(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 16016);
	f25.f64 = double(temp.f32);
	// mr r25,r22
	r25.u64 = r22.u64;
	// lfs f16,13980(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13980);
	f16.f64 = double(temp.f32);
	// mr r21,r22
	r21.u64 = r22.u64;
	// lfd f17,16008(r11)
	f17.u64 = PPC_LOAD_U64(r11.u32 + 16008);
	// li r26,255
	r26.s64 = 255;
	// li r23,48
	r23.s64 = 48;
loc_820C9188:
	// extsw r11,r21
	r11.s64 = r21.s32;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// li r30,6
	r30.s64 = 6;
	// std r11,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, r11.u64);
	// lfd f0,144(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fsub f0,f17,f0
	f0.f64 = f17.f64 - f0.f64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,152(r1)
	PPC_STORE_U64(ctx.r1.u32 + 152, r11.u64);
	// lfd f0,152(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 152);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f30,f0,f16
	f30.f64 = double(float(f0.f64 * f16.f64));
loc_820C91C8:
	// extsw r11,r30
	r11.s64 = r30.s32;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// std r11,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, r11.u64);
	// lfd f0,160(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f0,f0,f18
	f0.f64 = double(float(f0.f64 * f18.f64));
	// fmuls f0,f0,f25
	f0.f64 = double(float(f0.f64 * f25.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r11,r1,136
	r11.s64 = ctx.r1.s64 + 136;
	// stfs f28,4(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// sth r22,12(r31)
	PPC_STORE_U16(r31.u32 + 12, r22.u16);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stfs f28,16(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// stfs f28,20(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// stb r26,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r26.u8);
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// stb r26,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r26.u8);
	// stb r26,26(r31)
	PPC_STORE_U8(r31.u32 + 26, r26.u8);
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// std r10,168(r1)
	PPC_STORE_U64(ctx.r1.u32 + 168, ctx.r10.u64);
	// fmuls f0,f0,f25
	f0.f64 = double(float(f0.f64 * f25.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// neg r11,r11
	r11.s64 = -r11.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lfd f0,168(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 168);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,0(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// lfd f0,176(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// ble cr6,0x820c92dc
	if (!cr6.getGT()) goto loc_820C92DC;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// addi r11,r1,84
	r11.s64 = ctx.r1.s64 + 84;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fnmsubs f0,f0,f22,f22
	f0.f64 = double(float(-(f0.f64 * f22.f64 - f22.f64)));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stb r11,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r11.u8);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,88
	r11.s64 = ctx.r1.s64 + 88;
	// stb r26,26(r31)
	PPC_STORE_U8(r31.u32 + 26, r26.u8);
	// fnmsubs f0,f0,f27,f27
	f0.f64 = double(float(-(f0.f64 * f27.f64 - f27.f64)));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stb r11,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r11.u8);
	// b 0x820c9330
	goto loc_820C9330;
loc_820C92DC:
	// bge cr6,0x820c9330
	if (!cr6.getLT()) goto loc_820C9330;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// stb r26,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r26.u8);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// addi r11,r1,92
	r11.s64 = ctx.r1.s64 + 92;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fnmsubs f0,f0,f27,f27
	f0.f64 = double(float(-(f0.f64 * f27.f64 - f27.f64)));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stb r11,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r11.u8);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// fnmsubs f0,f0,f21,f21
	f0.f64 = double(float(-(f0.f64 * f21.f64 - f21.f64)));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stb r11,26(r31)
	PPC_STORE_U8(r31.u32 + 26, r11.u8);
loc_820C9330:
	// cmpwi cr6,r21,45
	cr6.compare<int32_t>(r21.s32, 45, xer);
	// bgt cr6,0x820c93b4
	if (cr6.getGT()) goto loc_820C93B4;
	// addi r11,r1,100
	r11.s64 = ctx.r1.s64 + 100;
	// fctiwz f0,f29
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f29.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f29.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmpw cr6,r25,r10
	cr6.compare<int32_t>(r25.s32, ctx.r10.s32, xer);
	// bgt cr6,0x820c9360
	if (cr6.getGT()) goto loc_820C9360;
	// stb r26,27(r31)
	PPC_STORE_U8(r31.u32 + 27, r26.u8);
	// b 0x820c946c
	goto loc_820C946C;
loc_820C9360:
	// fmuls f0,f29,f15
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f29.f64 * f15.f64));
	// addi r10,r1,104
	ctx.r10.s64 = ctx.r1.s64 + 104;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpw cr6,r25,r10
	cr6.compare<int32_t>(r25.s32, ctx.r10.s32, xer);
	// bge cr6,0x820c9468
	if (!cr6.getLT()) goto loc_820C9468;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// addi r10,r1,108
	ctx.r10.s64 = ctx.r1.s64 + 108;
	// std r11,184(r1)
	PPC_STORE_U64(ctx.r1.u32 + 184, r11.u64);
	// lfd f0,184(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 184);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fsubs f0,f29,f0
	f0.f64 = double(float(f29.f64 - f0.f64));
	// fmuls f0,f0,f20
	f0.f64 = double(float(f0.f64 * f20.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// subfic r11,r11,48
	xer.ca = r11.u32 <= 48;
	r11.s64 = 48 - r11.s64;
	// stb r11,27(r31)
	PPC_STORE_U8(r31.u32 + 27, r11.u8);
	// b 0x820c946c
	goto loc_820C946C;
loc_820C93B4:
	// extsw r11,r25
	r11.s64 = r25.s32;
	// fsubs f0,f29,f24
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f29.f64 - f24.f64));
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// fmadds f12,f0,f26,f23
	ctx.f12.f64 = double(float(f0.f64 * f26.f64 + f23.f64));
	// lfd f13,192(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// bgt cr6,0x820c93e0
	if (cr6.getGT()) goto loc_820C93E0;
	// stb r26,27(r31)
	PPC_STORE_U8(r31.u32 + 27, r26.u8);
	// b 0x820c946c
	goto loc_820C946C;
loc_820C93E0:
	// fmadds f13,f0,f26,f19
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f0.f64 * f26.f64 + f19.f64));
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// fctiwz f13,f13
	ctx.f13.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfiwx f13,0,r11
	PPC_STORE_U32(r11.u32, ctx.f13.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r11,r11,9
	r11.s64 = r11.s64 + 9;
	// cmpw cr6,r25,r11
	cr6.compare<int32_t>(r25.s32, r11.s32, xer);
	// bgt cr6,0x820c9468
	if (cr6.getGT()) goto loc_820C9468;
	// addi r11,r1,116
	r11.s64 = ctx.r1.s64 + 116;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpw cr6,r25,r11
	cr6.compare<int32_t>(r25.s32, r11.s32, xer);
	// ble cr6,0x820c9468
	if (!cr6.getGT()) goto loc_820C9468;
	// addi r11,r1,120
	r11.s64 = ctx.r1.s64 + 120;
	// fctiwz f0,f29
	f0.s64 = (f29.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f29.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// addi r10,r1,124
	ctx.r10.s64 = ctx.r1.s64 + 124;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,200(r1)
	PPC_STORE_U64(ctx.r1.u32 + 200, r11.u64);
	// lfd f0,200(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 200);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fsubs f0,f29,f0
	f0.f64 = double(float(f29.f64 - f0.f64));
	// fmuls f0,f0,f20
	f0.f64 = double(float(f0.f64 * f20.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// subfic r11,r11,48
	xer.ca = r11.u32 <= 48;
	r11.s64 = 48 - r11.s64;
	// stb r11,27(r31)
	PPC_STORE_U8(r31.u32 + 27, r11.u8);
	// b 0x820c946c
	goto loc_820C946C;
loc_820C9468:
	// stb r23,27(r31)
	PPC_STORE_U8(r31.u32 + 27, r23.u8);
loc_820C946C:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r31,r31,28
	r31.s64 = r31.s64 + 28;
	// cmpwi cr6,r30,4
	cr6.compare<int32_t>(r30.s32, 4, xer);
	// bgt cr6,0x820c91c8
	if (cr6.getGT()) goto loc_820C91C8;
	// addi r21,r21,5
	r21.s64 = r21.s64 + 5;
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// cmpwi cr6,r21,110
	cr6.compare<int32_t>(r21.s32, 110, xer);
	// ble cr6,0x820c9188
	if (!cr6.getGT()) goto loc_820C9188;
	// addi r1,r1,448
	ctx.r1.s64 = ctx.r1.s64 + 448;
	// addi r12,r1,-96
	r12.s64 = ctx.r1.s64 + -96;
	// bl 0x823ed560
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_820C94A0"))) PPC_WEAK_FUNC(sub_820C94A0);
PPC_FUNC_IMPL(__imp__sub_820C94A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// addi r12,r1,-72
	r12.s64 = ctx.r1.s64 + -72;
	// bl 0x823ed530
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f24,f1
	ctx.fpscr.disableFlushMode();
	f24.f64 = ctx.f1.f64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// li r28,0
	r28.s64 = 0;
	// li r27,176
	r27.s64 = 176;
	// lfs f30,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f30.f64 = double(temp.f32);
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x820c9510
	if (cr6.getEQ()) goto loc_820C9510;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f30,4(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// stfs f30,8(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// sth r28,12(r31)
	PPC_STORE_U16(r31.u32 + 12, r28.u16);
	// stfs f30,16(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// stb r28,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r28.u8);
	// stfs f30,20(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// stb r28,26(r31)
	PPC_STORE_U8(r31.u32 + 26, r28.u8);
	// stb r27,27(r31)
	PPC_STORE_U8(r31.u32 + 27, r27.u8);
	// lfs f0,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// li r11,33
	r11.s64 = 33;
	// stfs f0,0(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// stb r11,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r11.u8);
	// addi r31,r31,28
	r31.s64 = r31.s64 + 28;
loc_820C9510:
	// addi r24,r25,-7
	r24.s64 = r25.s64 + -7;
	// li r29,7
	r29.s64 = 7;
	// cmpwi cr6,r24,7
	cr6.compare<int32_t>(r24.s32, 7, xer);
	// blt cr6,0x820c974c
	if (cr6.getLT()) goto loc_820C974C;
	// extsw r11,r25
	r11.s64 = r25.s32;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f26,16040(r7)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 16040);
	f26.f64 = double(temp.f32);
	// li r26,255
	r26.s64 = 255;
	// lfs f27,14436(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 14436);
	f27.f64 = double(temp.f32);
	// lfs f29,14416(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14416);
	f29.f64 = double(temp.f32);
	// lfs f25,16036(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16036);
	f25.f64 = double(temp.f32);
	// lfs f23,14032(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14032);
	f23.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f22,f0
	f22.f64 = double(float(f0.f64));
loc_820C9560:
	// extsw r11,r29
	r11.s64 = r29.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f23
	f0.f64 = double(float(f0.f64 * f23.f64));
	// fdivs f31,f0,f22
	f31.f64 = double(float(f0.f64 / f22.f64));
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f24
	f0.f64 = double(float(f0.f64 * f24.f64));
	// fmuls f0,f0,f25
	f0.f64 = double(float(f0.f64 * f25.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, f0.u64);
	// lhz r30,94(r1)
	r30.u64 = PPC_LOAD_U16(ctx.r1.u32 + 94);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// extsh r30,r30
	r30.s64 = r30.s16;
	// stfs f30,4(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// stfs f30,16(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// stfs f30,20(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// sth r28,12(r31)
	PPC_STORE_U16(r31.u32 + 12, r28.u16);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f24
	f0.f64 = double(float(f0.f64 * f24.f64));
	// fmuls f0,f0,f25
	f0.f64 = double(float(f0.f64 * f25.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, f0.u64);
	// lfd f0,96(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,0(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// lhz r11,94(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 94);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// neg r11,r11
	r11.s64 = -r11.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, r11.u64);
	// lfd f0,104(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f28,f0
	f28.f64 = double(float(f0.f64));
	// stfs f28,8(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, f0.u64);
	// lbz r11,95(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// stb r11,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r11.u8);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fnmsubs f0,f0,f27,f26
	f0.f64 = double(float(-(f0.f64 * f27.f64 - f26.f64)));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, f0.u64);
	// lbz r11,95(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// stb r11,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r11.u8);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// stb r27,27(r31)
	PPC_STORE_U8(r31.u32 + 27, r27.u8);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, f0.u64);
	// lbz r11,95(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// stb r11,26(r31)
	PPC_STORE_U8(r31.u32 + 26, r11.u8);
	// addi r31,r31,28
	r31.s64 = r31.s64 + 28;
	// beq cr6,0x820c9740
	if (cr6.getEQ()) goto loc_820C9740;
	// cmpw cr6,r29,r25
	cr6.compare<int32_t>(r29.s32, r25.s32, xer);
	// bge cr6,0x820c9740
	if (!cr6.getLT()) goto loc_820C9740;
	// subfic r11,r30,1
	xer.ca = r30.u32 <= 1;
	r11.s64 = 1 - r30.s64;
	// stfs f30,4(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// stfs f28,8(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// sth r28,12(r31)
	PPC_STORE_U16(r31.u32 + 12, r28.u16);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// stfs f30,16(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// stfs f30,20(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// stb r26,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r26.u8);
	// stb r26,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r26.u8);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// stb r26,26(r31)
	PPC_STORE_U8(r31.u32 + 26, r26.u8);
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// lfd f0,112(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,0(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, f0.u64);
	// lbz r11,95(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// stb r11,24(r31)
	PPC_STORE_U8(r31.u32 + 24, r11.u8);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fnmsubs f0,f0,f27,f26
	f0.f64 = double(float(-(f0.f64 * f27.f64 - f26.f64)));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, f0.u64);
	// lbz r11,95(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// stb r11,25(r31)
	PPC_STORE_U8(r31.u32 + 25, r11.u8);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// stb r27,27(r31)
	PPC_STORE_U8(r31.u32 + 27, r27.u8);
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// fctidz f0,f0
	f0.s64 = (f0.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&f0.f64));
	// stfd f0,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, f0.u64);
	// lbz r11,95(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// stb r11,26(r31)
	PPC_STORE_U8(r31.u32 + 26, r11.u8);
	// addi r31,r31,28
	r31.s64 = r31.s64 + 28;
loc_820C9740:
	// addi r29,r29,2
	r29.s64 = r29.s64 + 2;
	// cmpw cr6,r29,r24
	cr6.compare<int32_t>(r29.s32, r24.s32, xer);
	// ble cr6,0x820c9560
	if (!cr6.getGT()) goto loc_820C9560;
loc_820C974C:
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-72
	r12.s64 = ctx.r1.s64 + -72;
	// bl 0x823ed57c
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_820C9760"))) PPC_WEAK_FUNC(sub_820C9760);
PPC_FUNC_IMPL(__imp__sub_820C9760) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// li r6,0
	ctx.r6.s64 = 0;
	// beq cr6,0x820c9814
	if (cr6.getEQ()) goto loc_820C9814;
	// li r5,18
	ctx.r5.s64 = 18;
	// addi r31,r30,28
	r31.s64 = r30.s64 + 28;
	// bl 0x820986f0
	sub_820986F0(ctx, base);
	// addi r30,r31,392
	r30.s64 = r31.s64 + 392;
	// addi r3,r30,56
	ctx.r3.s64 = r30.s64 + 56;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r30,84
	ctx.r3.s64 = r30.s64 + 84;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// li r29,7
	r29.s64 = 7;
loc_820C97A8:
	// mulli r11,r29,56
	r11.s64 = r29.s64 * 56;
	// add r30,r11,r31
	r30.u64 = r11.u64 + r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r30,56
	ctx.r3.s64 = r30.s64 + 56;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r30,28
	ctx.r3.s64 = r30.s64 + 28;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r30,84
	ctx.r3.s64 = r30.s64 + 84;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r11,r29,-1
	r11.s64 = r29.s64 + -1;
	// extsb r29,r11
	r29.s64 = r11.s8;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bge cr6,0x820c97a8
	if (!cr6.getLT()) goto loc_820C97A8;
	// addi r3,r31,28
	ctx.r3.s64 = r31.s64 + 28;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r31,56
	ctx.r3.s64 = r31.s64 + 56;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// bl 0x820987a8
	sub_820987A8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_820C9814:
	// li r5,16
	ctx.r5.s64 = 16;
	// bl 0x820986f0
	sub_820986F0(ctx, base);
	// li r29,0
	r29.s64 = 0;
	// addi r31,r30,56
	r31.s64 = r30.s64 + 56;
loc_820C9824:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r28,r31,-28
	r28.s64 = r31.s64 + -28;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r31,28
	ctx.r3.s64 = r31.s64 + 28;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r11,r29,1
	r11.s64 = r29.s64 + 1;
	// addi r30,r30,56
	r30.s64 = r30.s64 + 56;
	// extsb r29,r11
	r29.s64 = r11.s8;
	// addi r31,r31,56
	r31.s64 = r31.s64 + 56;
	// cmpwi cr6,r29,7
	cr6.compare<int32_t>(r29.s32, 7, xer);
	// ble cr6,0x820c9824
	if (!cr6.getGT()) goto loc_820C9824;
	// bl 0x820987a8
	sub_820987A8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820C9880"))) PPC_WEAK_FUNC(sub_820C9880);
PPC_FUNC_IMPL(__imp__sub_820C9880) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	// mflr r12
	// bl 0x823ed138
	// lis r11,-32256
	r11.s64 = -2113929216;
	// add r29,r5,r9
	r29.u64 = ctx.r5.u64 + ctx.r9.u64;
	// add r31,r4,r8
	r31.u64 = ctx.r4.u64 + ctx.r8.u64;
	// li r30,2
	r30.s64 = 2;
	// li r4,0
	ctx.r4.s64 = 0;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// li r9,32
	ctx.r9.s64 = 32;
	// li r5,112
	ctx.r5.s64 = 112;
	// li r8,240
	ctx.r8.s64 = 240;
loc_820C98AC:
	// extsw r28,r31
	r28.s64 = r31.s32;
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
	// li r11,2
	r11.s64 = 2;
	// std r28,-64(r1)
	PPC_STORE_U64(ctx.r1.u32 + -64, r28.u64);
	// lfd f13,-64(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
loc_820C98C8:
	// extsw r28,r10
	r28.s64 = ctx.r10.s32;
	// stfs f13,0(r3)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 0, temp.u32);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stfs f0,4(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 4, temp.u32);
	// stfs f0,16(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 16, temp.u32);
	// sth r4,12(r3)
	PPC_STORE_U16(ctx.r3.u32 + 12, ctx.r4.u16);
	// stfs f0,20(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 20, temp.u32);
	// stb r9,24(r3)
	PPC_STORE_U8(ctx.r3.u32 + 24, ctx.r9.u8);
	// stb r5,25(r3)
	PPC_STORE_U8(ctx.r3.u32 + 25, ctx.r5.u8);
	// add r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 + ctx.r7.u64;
	// std r28,-56(r1)
	PPC_STORE_U64(ctx.r1.u32 + -56, r28.u64);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stb r9,26(r3)
	PPC_STORE_U8(ctx.r3.u32 + 26, ctx.r9.u8);
	// stb r8,27(r3)
	PPC_STORE_U8(ctx.r3.u32 + 27, ctx.r8.u8);
	// lfd f12,-56(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// stfs f12,8(r3)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r3.u32 + 8, temp.u32);
	// addi r3,r3,28
	ctx.r3.s64 = ctx.r3.s64 + 28;
	// bne cr6,0x820c98c8
	if (!cr6.getEQ()) goto loc_820C98C8;
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// add r31,r31,r6
	r31.u64 = r31.u64 + ctx.r6.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x820c98ac
	if (!cr6.getEQ()) goto loc_820C98AC;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820C9930"))) PPC_WEAK_FUNC(sub_820C9930);
PPC_FUNC_IMPL(__imp__sub_820C9930) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,2
	ctx.r5.s64 = 2;
	// bl 0x820986f0
	sub_820986F0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r30,r31,28
	r30.s64 = r31.s64 + 28;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r29,r31,56
	r29.s64 = r31.s64 + 56;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// addi r3,r31,84
	ctx.r3.s64 = r31.s64 + 84;
	// bl 0x82097860
	sub_82097860(ctx, base);
	// bl 0x820987a8
	sub_820987A8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_820C9990"))) PPC_WEAK_FUNC(sub_820C9990);
PPC_FUNC_IMPL(__imp__sub_820C9990) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// addi r10,r10,19176
	ctx.r10.s64 = ctx.r10.s64 + 19176;
	// lwz r11,-1388(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1388);
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = r11.u64 + ctx.r10.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C99B8"))) PPC_WEAK_FUNC(sub_820C99B8);
PPC_FUNC_IMPL(__imp__sub_820C99B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// add r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 + ctx.r10.u64;
	// addi r11,r11,19176
	r11.s64 = r11.s64 + 19176;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C99D8"))) PPC_WEAK_FUNC(sub_820C99D8);
PPC_FUNC_IMPL(__imp__sub_820C99D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ebbb0
	sub_820EBBB0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32190
	r11.s64 = -2109603840;
	// addi r30,r11,19176
	r30.s64 = r11.s64 + 19176;
	// beq cr6,0x820c9a2c
	if (cr6.getEQ()) goto loc_820C9A2C;
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,8
	ctx.r10.s64 = r30.s64 + 8;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c9a2c
	if (!cr6.getEQ()) goto loc_820C9A2C;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x820c9a60
	goto loc_820C9A60;
loc_820C9A2C:
	// bl 0x8209ea70
	sub_8209EA70(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c9a5c
	if (cr6.getEQ()) goto loc_820C9A5C;
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,9
	ctx.r10.s64 = r30.s64 + 9;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820c9a60
	if (cr6.getEQ()) goto loc_820C9A60;
loc_820C9A5C:
	// li r3,1
	ctx.r3.s64 = 1;
loc_820C9A60:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9A78"))) PPC_WEAK_FUNC(sub_820C9A78);
PPC_FUNC_IMPL(__imp__sub_820C9A78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// addi r10,r10,19176
	ctx.r10.s64 = ctx.r10.s64 + 19176;
	// lwz r11,-1388(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1388);
	// addi r9,r10,4
	ctx.r9.s64 = ctx.r10.s64 + 4;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9AA0"))) PPC_WEAK_FUNC(sub_820C9AA0);
PPC_FUNC_IMPL(__imp__sub_820C9AA0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stw r3,-1388(r11)
	PPC_STORE_U32(r11.u32 + -1388, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9AB0"))) PPC_WEAK_FUNC(sub_820C9AB0);
PPC_FUNC_IMPL(__imp__sub_820C9AB0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r3,-1388(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -1388);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9AC0"))) PPC_WEAK_FUNC(sub_820C9AC0);
PPC_FUNC_IMPL(__imp__sub_820C9AC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r10,r11,-1360
	ctx.r10.s64 = r11.s64 + -1360;
	// addi r11,r10,92
	r11.s64 = ctx.r10.s64 + 92;
	// lfs f0,2776(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2776);
	f0.f64 = double(temp.f32);
loc_820C9AD4:
	// stfs f0,8(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// addi r9,r10,540
	ctx.r9.s64 = ctx.r10.s64 + 540;
	// stfs f0,0(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// addi r11,r11,112
	r11.s64 = r11.s64 + 112;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x820c9ad4
	if (cr6.getLT()) goto loc_820C9AD4;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9AF0"))) PPC_WEAK_FUNC(sub_820C9AF0);
PPC_FUNC_IMPL(__imp__sub_820C9AF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r11,r11,-1384
	r11.s64 = r11.s64 + -1384;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820c9b0c
	if (cr6.getEQ()) goto loc_820C9B0C;
	// li r3,1
	ctx.r3.s64 = 1;
loc_820C9B0C:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820c9b1c
	if (cr6.getEQ()) goto loc_820C9B1C;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820C9B1C:
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x820c9b2c
	if (cr6.getEQ()) goto loc_820C9B2C;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820C9B2C:
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9B40"))) PPC_WEAK_FUNC(sub_820C9B40);
PPC_FUNC_IMPL(__imp__sub_820C9B40) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// rlwinm r7,r3,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-1384
	r11.s64 = r11.s64 + -1384;
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// mulli r9,r3,112
	ctx.r9.s64 = ctx.r3.s64 * 112;
	// lwzx r11,r7,r11
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// stw r11,-1364(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1364, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r10,r10,-1360
	ctx.r10.s64 = ctx.r10.s64 + -1360;
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// stw r3,-912(r11)
	PPC_STORE_U32(r11.u32 + -912, ctx.r3.u32);
	// add r11,r9,r10
	r11.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stw r11,-908(r8)
	PPC_STORE_U32(ctx.r8.u32 + -908, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9B80"))) PPC_WEAK_FUNC(sub_820C9B80);
PPC_FUNC_IMPL(__imp__sub_820C9B80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r3,-912(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -912);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9B90"))) PPC_WEAK_FUNC(sub_820C9B90);
PPC_FUNC_IMPL(__imp__sub_820C9B90) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// li r9,0
	ctx.r9.s64 = 0;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x820c9bd8
	if (!cr6.getGT()) goto loc_820C9BD8;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r11,r11,-1384
	r11.s64 = r11.s64 + -1384;
loc_820C9BB8:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r10,428(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 428);
	// cmplw cr6,r10,r8
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r8.u32, xer);
	// beq cr6,0x820c9bec
	if (cr6.getEQ()) goto loc_820C9BEC;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpw cr6,r9,r3
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r3.s32, xer);
	// blt cr6,0x820c9bb8
	if (cr6.getLT()) goto loc_820C9BB8;
loc_820C9BD8:
	// li r3,-1
	ctx.r3.s64 = -1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820C9BEC:
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9C00"))) PPC_WEAK_FUNC(sub_820C9C00);
PPC_FUNC_IMPL(__imp__sub_820C9C00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// sth r3,2304(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2304, ctx.r3.u16);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// sth r4,2306(r11)
	PPC_STORE_U16(r11.u32 + 2306, ctx.r4.u16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9C18"))) PPC_WEAK_FUNC(sub_820C9C18);
PPC_FUNC_IMPL(__imp__sub_820C9C18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// sth r3,2308(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2308, ctx.r3.u16);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// sth r4,2310(r11)
	PPC_STORE_U16(r11.u32 + 2310, ctx.r4.u16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9C30"))) PPC_WEAK_FUNC(sub_820C9C30);
PPC_FUNC_IMPL(__imp__sub_820C9C30) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stfs f1,4728(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r11.u32 + 4728, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9C40"))) PPC_WEAK_FUNC(sub_820C9C40);
PPC_FUNC_IMPL(__imp__sub_820C9C40) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister temp{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stfs f1,4732(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r11.u32 + 4732, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9C50"))) PPC_WEAK_FUNC(sub_820C9C50);
PPC_FUNC_IMPL(__imp__sub_820C9C50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	// li r11,-1
	r11.s64 = -1;
	// cmplwi cr6,r3,88
	cr6.compare<uint32_t>(ctx.r3.u32, 88, xer);
	// bgt cr6,0x820c9f14
	if (cr6.getGT()) goto loc_820C9F14;
	// lis r12,-32243
	r12.s64 = -2113077248;
	// addi r12,r12,-25484
	r12.s64 = r12.s64 + -25484;
	// rlwinm r0,r3,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_820C9F10;
	case 1:
		goto loc_820C9F10;
	case 2:
		goto loc_820C9DD8;
	case 3:
		goto loc_820C9ED4;
	case 4:
		goto loc_820C9DE4;
	case 5:
		goto loc_820C9EC8;
	case 6:
		goto loc_820C9EBC;
	case 7:
		goto loc_820C9DF0;
	case 8:
		goto loc_820C9DFC;
	case 9:
		goto loc_820C9E08;
	case 10:
		goto loc_820C9E14;
	case 11:
		goto loc_820C9EB0;
	case 12:
		goto loc_820C9E20;
	case 13:
		goto loc_820C9E2C;
	case 14:
		goto loc_820C9E38;
	case 15:
		goto loc_820C9E44;
	case 16:
		goto loc_820C9EE0;
	case 17:
		goto loc_820C9EA4;
	case 18:
		goto loc_820C9E8C;
	case 19:
		goto loc_820C9EF8;
	case 20:
		goto loc_820C9DE4;
	case 21:
		goto loc_820C9DE4;
	case 22:
		goto loc_820C9E98;
	case 23:
		goto loc_820C9F14;
	case 24:
		goto loc_820C9E50;
	case 25:
		goto loc_820C9EEC;
	case 26:
		goto loc_820C9E5C;
	case 27:
		goto loc_820C9E80;
	case 28:
		goto loc_820C9E74;
	case 29:
		goto loc_820C9E68;
	case 30:
		goto loc_820C9F10;
	case 31:
		goto loc_820C9F10;
	case 32:
		goto loc_820C9F14;
	case 33:
		goto loc_820C9F14;
	case 34:
		goto loc_820C9F14;
	case 35:
		goto loc_820C9F14;
	case 36:
		goto loc_820C9F14;
	case 37:
		goto loc_820C9F14;
	case 38:
		goto loc_820C9F14;
	case 39:
		goto loc_820C9F14;
	case 40:
		goto loc_820C9F14;
	case 41:
		goto loc_820C9F14;
	case 42:
		goto loc_820C9F14;
	case 43:
		goto loc_820C9F14;
	case 44:
		goto loc_820C9F14;
	case 45:
		goto loc_820C9F14;
	case 46:
		goto loc_820C9F14;
	case 47:
		goto loc_820C9F14;
	case 48:
		goto loc_820C9F14;
	case 49:
		goto loc_820C9F14;
	case 50:
		goto loc_820C9F14;
	case 51:
		goto loc_820C9F14;
	case 52:
		goto loc_820C9F14;
	case 53:
		goto loc_820C9F14;
	case 54:
		goto loc_820C9F14;
	case 55:
		goto loc_820C9F14;
	case 56:
		goto loc_820C9F14;
	case 57:
		goto loc_820C9F14;
	case 58:
		goto loc_820C9F14;
	case 59:
		goto loc_820C9F14;
	case 60:
		goto loc_820C9F14;
	case 61:
		goto loc_820C9F14;
	case 62:
		goto loc_820C9F14;
	case 63:
		goto loc_820C9F14;
	case 64:
		goto loc_820C9F14;
	case 65:
		goto loc_820C9F14;
	case 66:
		goto loc_820C9F14;
	case 67:
		goto loc_820C9F14;
	case 68:
		goto loc_820C9F14;
	case 69:
		goto loc_820C9F14;
	case 70:
		goto loc_820C9F14;
	case 71:
		goto loc_820C9F14;
	case 72:
		goto loc_820C9F14;
	case 73:
		goto loc_820C9F14;
	case 74:
		goto loc_820C9F14;
	case 75:
		goto loc_820C9F14;
	case 76:
		goto loc_820C9F14;
	case 77:
		goto loc_820C9F14;
	case 78:
		goto loc_820C9F14;
	case 79:
		goto loc_820C9F14;
	case 80:
		goto loc_820C9F14;
	case 81:
		goto loc_820C9F14;
	case 82:
		goto loc_820C9F14;
	case 83:
		goto loc_820C9F14;
	case 84:
		goto loc_820C9F14;
	case 85:
		goto loc_820C9F14;
	case 86:
		goto loc_820C9F14;
	case 87:
		goto loc_820C9F14;
	case 88:
		goto loc_820C9F04;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-24816(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24816);
	// lwz r16,-24816(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24816);
	// lwz r16,-25128(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25128);
	// lwz r16,-24876(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24876);
	// lwz r16,-25116(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25116);
	// lwz r16,-24888(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24888);
	// lwz r16,-24900(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24900);
	// lwz r16,-25104(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25104);
	// lwz r16,-25092(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25092);
	// lwz r16,-25080(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25080);
	// lwz r16,-25068(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25068);
	// lwz r16,-24912(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24912);
	// lwz r16,-25056(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25056);
	// lwz r16,-25044(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25044);
	// lwz r16,-25032(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25032);
	// lwz r16,-25020(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25020);
	// lwz r16,-24864(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24864);
	// lwz r16,-24924(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24924);
	// lwz r16,-24948(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24948);
	// lwz r16,-24840(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24840);
	// lwz r16,-25116(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25116);
	// lwz r16,-25116(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25116);
	// lwz r16,-24936(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24936);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-25008(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -25008);
	// lwz r16,-24852(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24852);
	// lwz r16,-24996(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24996);
	// lwz r16,-24960(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24960);
	// lwz r16,-24972(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24972);
	// lwz r16,-24984(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24984);
	// lwz r16,-24816(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24816);
	// lwz r16,-24816(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24816);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24812(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24812);
	// lwz r16,-24828(r12)
	r16.u64 = PPC_LOAD_U32(r12.u32 + -24828);
loc_820C9DD8:
	// li r11,186
	r11.s64 = 186;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9DE4:
	// li r11,191
	r11.s64 = 191;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9DF0:
	// li r11,193
	r11.s64 = 193;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9DFC:
	// li r11,184
	r11.s64 = 184;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E08:
	// li r11,195
	r11.s64 = 195;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E14:
	// li r11,189
	r11.s64 = 189;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E20:
	// li r11,194
	r11.s64 = 194;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E2C:
	// li r11,188
	r11.s64 = 188;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E38:
	// li r11,197
	r11.s64 = 197;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E44:
	// li r11,192
	r11.s64 = 192;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E50:
	// li r11,185
	r11.s64 = 185;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E5C:
	// li r11,196
	r11.s64 = 196;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E68:
	// li r11,199
	r11.s64 = 199;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E74:
	// li r11,200
	r11.s64 = 200;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E80:
	// li r11,201
	r11.s64 = 201;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E8C:
	// li r11,190
	r11.s64 = 190;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9E98:
	// li r11,187
	r11.s64 = 187;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9EA4:
	// li r11,210
	r11.s64 = 210;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9EB0:
	// li r11,206
	r11.s64 = 206;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9EBC:
	// li r11,205
	r11.s64 = 205;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9EC8:
	// li r11,204
	r11.s64 = 204;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9ED4:
	// li r11,209
	r11.s64 = 209;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9EE0:
	// li r11,207
	r11.s64 = 207;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9EEC:
	// li r11,211
	r11.s64 = 211;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9EF8:
	// li r11,208
	r11.s64 = 208;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9F04:
	// li r11,333
	r11.s64 = 333;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_820C9F10:
	// li r11,-1
	r11.s64 = -1;
loc_820C9F14:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
	// .long 0x0
}

__attribute__((alias("__imp__sub_820C9F20"))) PPC_WEAK_FUNC(sub_820C9F20);
PPC_FUNC_IMPL(__imp__sub_820C9F20) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r3,8(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// b 0x820dcd10
	sub_820DCD10(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_820C9F38"))) PPC_WEAK_FUNC(sub_820C9F38);
PPC_FUNC_IMPL(__imp__sub_820C9F38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r10,r31,88
	ctx.r10.s64 = r31.s64 + 88;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r30,8(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwzx r11,r10,r30
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r30.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820c9fac
	if (!cr6.getEQ()) goto loc_820C9FAC;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// bl 0x820c9c50
	sub_820C9C50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// blt cr6,0x820c9fac
	if (cr6.getLT()) goto loc_820C9FAC;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// li r6,0
	ctx.r6.s64 = 0;
	// beq cr6,0x820c9f9c
	if (cr6.getEQ()) goto loc_820C9F9C;
	// lis r6,4096
	ctx.r6.s64 = 268435456;
loc_820C9F9C:
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820e2de0
	sub_820E2DE0(ctx, base);
loc_820C9FAC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820C9FC8"))) PPC_WEAK_FUNC(sub_820C9FC8);
PPC_FUNC_IMPL(__imp__sub_820C9FC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r29,0
	r29.s64 = 0;
	// addi r31,r11,-904
	r31.s64 = r11.s64 + -904;
	// li r11,0
	r11.s64 = 0;
	// mr r30,r31
	r30.u64 = r31.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// li r11,2
	r11.s64 = 2;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r11,3
	r11.s64 = 3;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_820CA004:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r28,r3,31
	r28.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// subfic r9,r29,4
	xer.ca = r29.u32 <= 4;
	ctx.r9.s64 = 4 - r29.s64;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// twllei r9,0
	// divwu r8,r11,r9
	ctx.r8.u32 = r11.u32 / ctx.r9.u32;
	// mullw r9,r8,r9
	ctx.r9.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r9.s32);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// addi r9,r31,12
	ctx.r9.s64 = r31.s64 + 12;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r8,r11,r31
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// stw r8,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r8.u32);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// stwx r10,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, ctx.r10.u32);
	// cmpw cr6,r30,r9
	cr6.compare<int32_t>(r30.s32, ctx.r9.s32, xer);
	// ble cr6,0x820ca004
	if (!cr6.getGT()) goto loc_820CA004;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_820CA060"))) PPC_WEAK_FUNC(sub_820CA060);
PPC_FUNC_IMPL(__imp__sub_820CA060) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// addi r9,r11,-904
	ctx.r9.s64 = r11.s64 + -904;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r3,0
	ctx.r3.s64 = 0;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// addi r7,r11,-1384
	ctx.r7.s64 = r11.s64 + -1384;
loc_820CA07C:
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r7
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ca09c
	if (cr6.getEQ()) goto loc_820CA09C;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_820CA09C:
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// blt cr6,0x820ca07c
	if (cr6.getLT()) goto loc_820CA07C;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820CA0B0"))) PPC_WEAK_FUNC(sub_820CA0B0);
PPC_FUNC_IMPL(__imp__sub_820CA0B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r8,-32014
	ctx.r8.s64 = -2098069504;
	// addi r9,r11,-904
	ctx.r9.s64 = r11.s64 + -904;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// addi r8,r8,-1384
	ctx.r8.s64 = ctx.r8.s64 + -1384;
loc_820CA0C8:
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r7,r7,r8
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r8.u32);
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x820ca0e8
	if (cr6.getEQ()) goto loc_820CA0E8;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x820ca104
	if (cr6.getEQ()) goto loc_820CA104;
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
loc_820CA0E8:
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r7,r9,16
	ctx.r7.s64 = ctx.r9.s64 + 16;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r7
	cr6.compare<int32_t>(r11.s32, ctx.r7.s32, xer);
	// blt cr6,0x820ca0c8
	if (cr6.getLT()) goto loc_820CA0C8;
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_820CA104:
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820CA110"))) PPC_WEAK_FUNC(sub_820CA110);
PPC_FUNC_IMPL(__imp__sub_820CA110) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ca170
	if (!cr6.getEQ()) goto loc_820CA170;
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x820ca158
	if (!cr6.getLT()) goto loc_820CA158;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820CA158:
	// bl 0x820ea698
	sub_820EA698(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820CA170:
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ca198
	if (!cr6.getEQ()) goto loc_820CA198;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820ea6a8
	sub_820EA6A8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820CA198:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_820CA1B8:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x820ca1d4
	if (cr6.getEQ()) goto loc_820CA1D4;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x820ca1d8
	if (!cr6.getEQ()) goto loc_820CA1D8;
loc_820CA1D4:
	// li r11,1
	r11.s64 = 1;
loc_820CA1D8:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ca224
	if (!cr6.getEQ()) goto loc_820CA224;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// beq cr6,0x820ca200
	if (cr6.getEQ()) goto loc_820CA200;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x820ca1b8
	goto loc_820CA1B8;
loc_820CA200:
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x820ca224
	if (cr6.getEQ()) goto loc_820CA224;
	// lwz r3,820(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 820);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820CA224:
	// li r3,-1
	ctx.r3.s64 = -1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820CA240"))) PPC_WEAK_FUNC(sub_820CA240);
PPC_FUNC_IMPL(__imp__sub_820CA240) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ca27c
	if (!cr6.getEQ()) goto loc_820CA27C;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820CA27C:
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x820ca2a0
	if (!cr6.getEQ()) goto loc_820CA2A0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820CA2A0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_820CA2C0:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x820ca2dc
	if (cr6.getEQ()) goto loc_820CA2DC;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x820ca2e0
	if (!cr6.getEQ()) goto loc_820CA2E0;
loc_820CA2DC:
	// li r11,1
	r11.s64 = 1;
loc_820CA2E0:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ca320
	if (!cr6.getEQ()) goto loc_820CA320;
	// lwz r10,820(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 820);
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// beq cr6,0x820ca308
	if (cr6.getEQ()) goto loc_820CA308;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x820ca2c0
	goto loc_820CA2C0;
loc_820CA308:
	// bl 0x82159128
	sub_82159128(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_820CA320:
	// li r3,-1
	ctx.r3.s64 = -1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820CA338"))) PPC_WEAK_FUNC(sub_820CA338);
PPC_FUNC_IMPL(__imp__sub_820CA338) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r30,-32014
	r30.s64 = -2098069504;
loc_820CA370:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x820ca38c
	if (cr6.getEQ()) goto loc_820CA38C;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x820ca390
	if (!cr6.getEQ()) goto loc_820CA390;
loc_820CA38C:
	// li r11,1
	r11.s64 = 1;
loc_820CA390:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ca3c8
	if (!cr6.getEQ()) goto loc_820CA3C8;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// lwz r11,-912(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -912);
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// beq cr6,0x820ca3c0
	if (cr6.getEQ()) goto loc_820CA3C0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x820ca370
	goto loc_820CA370;
loc_820CA3C0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x820ca3cc
	goto loc_820CA3CC;
loc_820CA3C8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820CA3CC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820CA3E8"))) PPC_WEAK_FUNC(sub_820CA3E8);
PPC_FUNC_IMPL(__imp__sub_820CA3E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_820CA420:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x820ca43c
	if (cr6.getEQ()) goto loc_820CA43C;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x820ca440
	if (!cr6.getEQ()) goto loc_820CA440;
loc_820CA43C:
	// li r11,1
	r11.s64 = 1;
loc_820CA440:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ca474
	if (!cr6.getEQ()) goto loc_820CA474;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// beq cr6,0x820ca46c
	if (cr6.getEQ()) goto loc_820CA46C;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x820ca420
	goto loc_820CA420;
loc_820CA46C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x820ca478
	goto loc_820CA478;
loc_820CA474:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820CA478:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820CA490"))) PPC_WEAK_FUNC(sub_820CA490);
PPC_FUNC_IMPL(__imp__sub_820CA490) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_820CA4C4:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x820ca4e0
	if (cr6.getEQ()) goto loc_820CA4E0;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x820ca4e4
	if (!cr6.getEQ()) goto loc_820CA4E4;
loc_820CA4E0:
	// li r11,1
	r11.s64 = 1;
loc_820CA4E4:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x820ca508
	if (!cr6.getEQ()) goto loc_820CA508;
	// lwz r11,820(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 820);
	// cmpw cr6,r11,r31
	cr6.compare<int32_t>(r11.s32, r31.s32, xer);
	// beq cr6,0x820ca50c
	if (cr6.getEQ()) goto loc_820CA50C;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x820ca4c4
	goto loc_820CA4C4;
loc_820CA508:
	// li r3,0
	ctx.r3.s64 = 0;
loc_820CA50C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820CA520"))) PPC_WEAK_FUNC(sub_820CA520);
PPC_FUNC_IMPL(__imp__sub_820CA520) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ca338
	sub_820CA338(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820ca54c
	if (cr6.getEQ()) goto loc_820CA54C;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820CA54C:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_820CA560"))) PPC_WEAK_FUNC(sub_820CA560);
PPC_FUNC_IMPL(__imp__sub_820CA560) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ca3e8
	sub_820CA3E8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x820ca58c
	if (cr6.getEQ()) goto loc_820CA58C;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_820CA58C:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

