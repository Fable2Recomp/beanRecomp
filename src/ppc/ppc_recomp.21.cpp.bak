#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_82256830"))) PPC_WEAK_FUNC(sub_82256830);
PPC_FUNC_IMPL(__imp__sub_82256830) {
	PPC_FUNC_PROLOGUE();
	// b 0x82255c38
	sub_82255C38(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82256838"))) PPC_WEAK_FUNC(sub_82256838);
PPC_FUNC_IMPL(__imp__sub_82256838) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x82255ec0
	sub_82255EC0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82256860"))) PPC_WEAK_FUNC(sub_82256860);
PPC_FUNC_IMPL(__imp__sub_82256860) {
	PPC_FUNC_PROLOGUE();
	// b 0x82255f68
	sub_82255F68(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82256868"))) PPC_WEAK_FUNC(sub_82256868);
PPC_FUNC_IMPL(__imp__sub_82256868) {
	PPC_FUNC_PROLOGUE();
	// b 0x82255fc8
	sub_82255FC8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82256870"))) PPC_WEAK_FUNC(sub_82256870);
PPC_FUNC_IMPL(__imp__sub_82256870) {
	PPC_FUNC_PROLOGUE();
	// b 0x82256028
	sub_82256028(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82256878"))) PPC_WEAK_FUNC(sub_82256878);
PPC_FUNC_IMPL(__imp__sub_82256878) {
	PPC_FUNC_PROLOGUE();
	// b 0x822560d8
	sub_822560D8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82256880"))) PPC_WEAK_FUNC(sub_82256880);
PPC_FUNC_IMPL(__imp__sub_82256880) {
	PPC_FUNC_PROLOGUE();
	// b 0x82256180
	sub_82256180(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82256888"))) PPC_WEAK_FUNC(sub_82256888);
PPC_FUNC_IMPL(__imp__sub_82256888) {
	PPC_FUNC_PROLOGUE();
	// b 0x822561e0
	sub_822561E0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82256890"))) PPC_WEAK_FUNC(sub_82256890);
PPC_FUNC_IMPL(__imp__sub_82256890) {
	PPC_FUNC_PROLOGUE();
	// b 0x82255d88
	sub_82255D88(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82256898"))) PPC_WEAK_FUNC(sub_82256898);
PPC_FUNC_IMPL(__imp__sub_82256898) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r22,r4
	r22.u64 = ctx.r4.u64;
	// addi r30,r29,16
	r30.s64 = r29.s64 + 16;
	// mr r20,r5
	r20.u64 = ctx.r5.u64;
	// lwz r11,20(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 20);
	// addi r31,r11,1
	r31.s64 = r11.s64 + 1;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// ble cr6,0x822568d8
	if (!cr6.getGT()) goto loc_822568D8;
	// addi r5,r29,128
	ctx.r5.s64 = r29.s64 + 128;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x822534c0
	sub_822534C0(ctx, base);
loc_822568D8:
	// stw r31,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r31.u32);
	// addi r21,r29,128
	r21.s64 = r29.s64 + 128;
	// lwz r11,128(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 128);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x822568f4
	if (!cr6.getLT()) goto loc_822568F4;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x82256b0c
	goto loc_82256B0C;
loc_822568F4:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// li r31,0
	r31.s64 = 0;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// mulli r11,r11,452
	r11.s64 = r11.s64 * 452;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r30,r11,-452
	r30.s64 = r11.s64 + -452;
	// addi r28,r30,276
	r28.s64 = r30.s64 + 276;
	// addi r27,r30,288
	r27.s64 = r30.s64 + 288;
	// addi r26,r30,324
	r26.s64 = r30.s64 + 324;
	// addi r25,r30,352
	r25.s64 = r30.s64 + 352;
	// addi r24,r30,364
	r24.s64 = r30.s64 + 364;
	// stw r31,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r31.u32);
	// addi r23,r30,376
	r23.s64 = r30.s64 + 376;
	// stw r31,4(r28)
	PPC_STORE_U32(r28.u32 + 4, r31.u32);
	// stw r31,8(r28)
	PPC_STORE_U32(r28.u32 + 8, r31.u32);
	// stw r31,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r31.u32);
	// stw r31,4(r27)
	PPC_STORE_U32(r27.u32 + 4, r31.u32);
	// stw r31,8(r27)
	PPC_STORE_U32(r27.u32 + 8, r31.u32);
	// stw r31,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r31.u32);
	// stw r31,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r31.u32);
	// stw r31,8(r26)
	PPC_STORE_U32(r26.u32 + 8, r31.u32);
	// stw r31,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r31.u32);
	// stw r31,4(r25)
	PPC_STORE_U32(r25.u32 + 4, r31.u32);
	// stw r31,8(r25)
	PPC_STORE_U32(r25.u32 + 8, r31.u32);
	// stw r31,0(r24)
	PPC_STORE_U32(r24.u32 + 0, r31.u32);
	// stw r31,4(r24)
	PPC_STORE_U32(r24.u32 + 4, r31.u32);
	// stw r31,8(r24)
	PPC_STORE_U32(r24.u32 + 8, r31.u32);
	// stw r31,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r31.u32);
	// stw r31,4(r23)
	PPC_STORE_U32(r23.u32 + 4, r31.u32);
	// stw r31,8(r23)
	PPC_STORE_U32(r23.u32 + 8, r31.u32);
	// beq cr6,0x82256988
	if (cr6.getEQ()) goto loc_82256988;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// li r4,256
	ctx.r4.s64 = 256;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821db9f8
	sub_821DB9F8(ctx, base);
	// b 0x8225698c
	goto loc_8225698C;
loc_82256988:
	// stb r31,0(r30)
	PPC_STORE_U8(r30.u32 + 0, r31.u8);
loc_8225698C:
	// stw r20,256(r30)
	PPC_STORE_U32(r30.u32 + 256, r20.u32);
	// stw r31,388(r30)
	PPC_STORE_U32(r30.u32 + 388, r31.u32);
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// stw r31,4(r28)
	PPC_STORE_U32(r28.u32 + 4, r31.u32);
	// cmplwi cr6,r11,100
	cr6.compare<uint32_t>(r11.u32, 100, xer);
	// bge cr6,0x822569b4
	if (!cr6.getLT()) goto loc_822569B4;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// li r4,100
	ctx.r4.s64 = 100;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82253160
	sub_82253160(ctx, base);
loc_822569B4:
	// lwz r11,8(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// stw r31,4(r27)
	PPC_STORE_U32(r27.u32 + 4, r31.u32);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x822569d4
	if (!cr6.getLT()) goto loc_822569D4;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x822531f0
	sub_822531F0(ctx, base);
loc_822569D4:
	// lwz r11,8(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 8);
	// stw r31,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r31.u32);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x822569f4
	if (!cr6.getLT()) goto loc_822569F4;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x822531f0
	sub_822531F0(ctx, base);
loc_822569F4:
	// lwz r11,8(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 8);
	// stw r31,4(r25)
	PPC_STORE_U32(r25.u32 + 4, r31.u32);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x82256a14
	if (!cr6.getLT()) goto loc_82256A14;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x82253550
	sub_82253550(ctx, base);
loc_82256A14:
	// lwz r11,8(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// stw r31,4(r24)
	PPC_STORE_U32(r24.u32 + 4, r31.u32);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x82256a34
	if (!cr6.getLT()) goto loc_82256A34;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x82253280
	sub_82253280(ctx, base);
loc_82256A34:
	// lwz r11,8(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// stw r31,4(r23)
	PPC_STORE_U32(r23.u32 + 4, r31.u32);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x82256a54
	if (!cr6.getLT()) goto loc_82256A54;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82253310
	sub_82253310(ctx, base);
loc_82256A54:
	// li r11,-1
	r11.s64 = -1;
	// stw r31,448(r30)
	PPC_STORE_U32(r30.u32 + 448, r31.u32);
	// stw r11,444(r30)
	PPC_STORE_U32(r30.u32 + 444, r11.u32);
	// stw r11,436(r30)
	PPC_STORE_U32(r30.u32 + 436, r11.u32);
	// stw r11,440(r30)
	PPC_STORE_U32(r30.u32 + 440, r11.u32);
	// stw r11,432(r30)
	PPC_STORE_U32(r30.u32 + 432, r11.u32);
	// lwz r10,0(r21)
	ctx.r10.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x82256a90
	if (cr6.getLT()) goto loc_82256A90;
	// stw r31,280(r30)
	PPC_STORE_U32(r30.u32 + 280, r31.u32);
	// stw r31,292(r30)
	PPC_STORE_U32(r30.u32 + 292, r31.u32);
	// stw r31,328(r30)
	PPC_STORE_U32(r30.u32 + 328, r31.u32);
	// stw r31,356(r30)
	PPC_STORE_U32(r30.u32 + 356, r31.u32);
	// stw r31,368(r30)
	PPC_STORE_U32(r30.u32 + 368, r31.u32);
	// stw r31,380(r30)
	PPC_STORE_U32(r30.u32 + 380, r31.u32);
loc_82256A90:
	// addi r4,r30,260
	ctx.r4.s64 = r30.s64 + 260;
	// stw r11,272(r30)
	PPC_STORE_U32(r30.u32 + 272, r11.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82255b60
	sub_82255B60(ctx, base);
	// addi r31,r30,336
	r31.s64 = r30.s64 + 336;
	// lis r4,19523
	ctx.r4.s64 = 1279459328;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// ori r4,r4,17494
	ctx.r4.u64 = ctx.r4.u64 | 17494;
	// bl 0x821da968
	sub_821DA968(ctx, base);
	// lwz r11,0(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82256b08
	if (cr6.getLT()) goto loc_82256B08;
	// addi r11,r30,300
	r11.s64 = r30.s64 + 300;
	// stw r30,112(r29)
	PPC_STORE_U32(r29.u32 + 112, r30.u32);
	// addi r10,r30,312
	ctx.r10.s64 = r30.s64 + 312;
	// stw r28,28(r29)
	PPC_STORE_U32(r29.u32 + 28, r28.u32);
	// addi r9,r30,396
	ctx.r9.s64 = r30.s64 + 396;
	// stw r27,68(r29)
	PPC_STORE_U32(r29.u32 + 68, r27.u32);
	// addi r8,r30,408
	ctx.r8.s64 = r30.s64 + 408;
	// stw r26,72(r29)
	PPC_STORE_U32(r29.u32 + 72, r26.u32);
	// addi r7,r30,420
	ctx.r7.s64 = r30.s64 + 420;
	// stw r31,96(r29)
	PPC_STORE_U32(r29.u32 + 96, r31.u32);
	// stw r25,100(r29)
	PPC_STORE_U32(r29.u32 + 100, r25.u32);
	// stw r24,104(r29)
	PPC_STORE_U32(r29.u32 + 104, r24.u32);
	// stw r23,108(r29)
	PPC_STORE_U32(r29.u32 + 108, r23.u32);
	// stw r11,76(r29)
	PPC_STORE_U32(r29.u32 + 76, r11.u32);
	// stw r10,80(r29)
	PPC_STORE_U32(r29.u32 + 80, ctx.r10.u32);
	// stw r9,84(r29)
	PPC_STORE_U32(r29.u32 + 84, ctx.r9.u32);
	// stw r8,88(r29)
	PPC_STORE_U32(r29.u32 + 88, ctx.r8.u32);
	// stw r7,92(r29)
	PPC_STORE_U32(r29.u32 + 92, ctx.r7.u32);
loc_82256B08:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_82256B0C:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_82256B18"))) PPC_WEAK_FUNC(sub_82256B18);
PPC_FUNC_IMPL(__imp__sub_82256B18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// lhz r11,140(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 140);
	// stw r28,136(r31)
	PPC_STORE_U32(r31.u32 + 136, r28.u32);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x82256b94
	if (cr6.getLT()) goto loc_82256B94;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82256898
	sub_82256898(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r4,256
	ctx.r4.s64 = 256;
	// addi r30,r29,-452
	r30.s64 = r29.s64 + -452;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x821db9f8
	sub_821DB9F8(ctx, base);
	// lwz r11,256(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 256);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,256(r29)
	PPC_STORE_U32(r29.u32 + 256, r11.u32);
	// lwz r11,444(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 444);
	// stw r11,444(r29)
	PPC_STORE_U32(r29.u32 + 444, r11.u32);
	// lwz r11,436(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 436);
	// stw r11,436(r29)
	PPC_STORE_U32(r29.u32 + 436, r11.u32);
	// lwz r11,440(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 440);
	// stw r11,440(r29)
	PPC_STORE_U32(r29.u32 + 440, r11.u32);
	// lwz r11,432(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 432);
	// stw r11,432(r29)
	PPC_STORE_U32(r29.u32 + 432, r11.u32);
	// lwz r5,392(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 392);
	// lwz r4,388(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 388);
	// bl 0x82253860
	sub_82253860(ctx, base);
loc_82256B94:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mulli r11,r11,452
	r11.s64 = r11.s64 * 452;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r28,-4(r11)
	PPC_STORE_U32(r11.u32 + -4, r28.u32);
	// lhz r11,142(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 142);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// sth r11,142(r31)
	PPC_STORE_U16(r31.u32 + 142, r11.u16);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82256BC0"))) PPC_WEAK_FUNC(sub_82256BC0);
PPC_FUNC_IMPL(__imp__sub_82256BC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x82256c28
	if (!cr6.getEQ()) goto loc_82256C28;
	// lwz r7,112(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// mr r11,r30
	r11.u64 = r30.u64;
	// mr r10,r7
	ctx.r10.u64 = ctx.r7.u64;
loc_82256BF0:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi r9,0
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// subf r8,r8,r9
	ctx.r8.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq 0x82256c14
	if (cr0.getEQ()) goto loc_82256C14;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x82256bf0
	if (cr6.getEQ()) goto loc_82256BF0;
loc_82256C14:
	// cmpwi r8,0
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x82256c28
	if (!cr0.getEQ()) goto loc_82256C28;
	// lwz r11,256(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 256);
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x82256ce8
	if (cr6.getEQ()) goto loc_82256CE8;
loc_82256C28:
	// lwz r11,144(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 144);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82256c68
	if (!cr6.getEQ()) goto loc_82256C68;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// lwz r3,116(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// addi r4,r11,-20604
	ctx.r4.s64 = r11.s64 + -20604;
	// bl 0x823f07a0
	sub_823F07A0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq 0x82256c5c
	if (cr0.getEQ()) goto loc_82256C5C;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// b 0x82256c64
	goto loc_82256C64;
loc_82256C5C:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
loc_82256C64:
	// bl 0x822549b0
	sub_822549B0(ctx, base);
loc_82256C68:
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// li r9,0
	ctx.r9.s64 = 0;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x82256cc4
	if (cr6.getEQ()) goto loc_82256CC4;
	// lwz r11,144(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 144);
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// cmplwi cr6,r11,65534
	cr6.compare<uint32_t>(r11.u32, 65534, xer);
	// blt cr6,0x82256c94
	if (cr6.getLT()) goto loc_82256C94;
	// lis r10,-32768
	ctx.r10.s64 = -2147483648;
	// ori r10,r10,16389
	ctx.r10.u64 = ctx.r10.u64 | 16389;
	// stw r10,128(r31)
	PPC_STORE_U32(r31.u32 + 128, ctx.r10.u32);
loc_82256C94:
	// lhz r10,140(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 140);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x82256ca8
	if (cr0.getEQ()) goto loc_82256CA8;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// b 0x82256cac
	goto loc_82256CAC;
loc_82256CA8:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82256CAC:
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// sth r9,146(r31)
	PPC_STORE_U16(r31.u32 + 146, ctx.r9.u16);
	// lwz r10,144(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 144);
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// stw r11,144(r31)
	PPC_STORE_U32(r31.u32 + 144, r11.u32);
loc_82256CC4:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// sth r9,140(r31)
	PPC_STORE_U16(r31.u32 + 140, ctx.r9.u16);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// sth r9,142(r31)
	PPC_STORE_U16(r31.u32 + 142, ctx.r9.u16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r9,136(r31)
	PPC_STORE_U32(r31.u32 + 136, ctx.r9.u32);
	// bl 0x82256898
	sub_82256898(ctx, base);
	// li r11,2
	r11.s64 = 2;
	// stw r11,132(r31)
	PPC_STORE_U32(r31.u32 + 132, r11.u32);
loc_82256CE8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82256CF0"))) PPC_WEAK_FUNC(sub_82256CF0);
PPC_FUNC_IMPL(__imp__sub_82256CF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// mr r25,r9
	r25.u64 = ctx.r9.u64;
	// addi r30,r31,128
	r30.s64 = r31.s64 + 128;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82256d68
	if (cr6.getLT()) goto loc_82256D68;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// bl 0x82256270
	sub_82256270(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// blt 0x82256d68
	if (cr0.getLT()) goto loc_82256D68;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// stw r29,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r29.u32);
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// stw r27,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r27.u32);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// stw r26,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r26.u32);
	// stw r25,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r25.u32);
	// bl 0x82255218
	sub_82255218(ctx, base);
loc_82256D68:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82256D70"))) PPC_WEAK_FUNC(sub_82256D70);
PPC_FUNC_IMPL(__imp__sub_82256D70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// bl 0x82256738
	sub_82256738(ctx, base);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82256da4
	if (cr6.getEQ()) goto loc_82256DA4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// b 0x82256dac
	goto loc_82256DAC;
loc_82256DA4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r11,2334
	ctx.r4.s64 = r11.s64 + 2334;
loc_82256DAC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82256738
	sub_82256738(ctx, base);
	// stw r3,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r3.u32);
	// addi r5,r31,128
	ctx.r5.s64 = r31.s64 + 128;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r31,32
	ctx.r3.s64 = r31.s64 + 32;
	// bl 0x82255518
	sub_82255518(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82256DE0"))) PPC_WEAK_FUNC(sub_82256DE0);
PPC_FUNC_IMPL(__imp__sub_82256DE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// bl 0x82256270
	sub_82256270(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// stw r3,128(r31)
	PPC_STORE_U32(r31.u32 + 128, ctx.r3.u32);
	// blt 0x82256e7c
	if (cr0.getLT()) goto loc_82256E7C;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mulli r28,r11,276
	r28.s64 = r11.s64 * 276;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// lwz r11,272(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 272);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82256e7c
	if (!cr6.getEQ()) goto loc_82256E7C;
	// addi r29,r30,1
	r29.s64 = r30.s64 + 1;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8209d000
	sub_8209D000(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x82256e50
	if (!cr0.getEQ()) goto loc_82256E50;
	// lis r11,-32768
	r11.s64 = -2147483648;
	// ori r11,r11,16389
	r11.u64 = r11.u64 | 16389;
	// stw r11,128(r31)
	PPC_STORE_U32(r31.u32 + 128, r11.u32);
	// b 0x82256e7c
	goto loc_82256E7C;
loc_82256E50:
	// lis r11,32767
	r11.s64 = 2147418112;
	// ori r11,r11,65535
	r11.u64 = r11.u64 | 65535;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bgt cr6,0x82256e70
	if (cr6.getGT()) goto loc_82256E70;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821db9f8
	sub_821DB9F8(ctx, base);
loc_82256E70:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// stw r30,272(r11)
	PPC_STORE_U32(r11.u32 + 272, r30.u32);
loc_82256E7C:
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82256E88"))) PPC_WEAK_FUNC(sub_82256E88);
PPC_FUNC_IMPL(__imp__sub_82256E88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// lwz r11,128(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 128);
	// mr r23,r9
	r23.u64 = ctx.r9.u64;
	// addi r29,r30,128
	r29.s64 = r30.s64 + 128;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82256f54
	if (cr6.getLT()) goto loc_82256F54;
	// lwz r28,72(r30)
	r28.u64 = PPC_LOAD_U32(r30.u32 + 72);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// bgt cr6,0x82256efc
	if (cr6.getGT()) goto loc_82256EFC;
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// addi r27,r31,1
	r27.s64 = r31.s64 + 1;
	// cmplw cr6,r27,r11
	cr6.compare<uint32_t>(r27.u32, r11.u32, xer);
	// ble cr6,0x82256eec
	if (!cr6.getGT()) goto loc_82256EEC;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x822531f0
	sub_822531F0(ctx, base);
loc_82256EEC:
	// stw r27,4(r28)
	PPC_STORE_U32(r28.u32 + 4, r27.u32);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82256f54
	if (cr6.getLT()) goto loc_82256F54;
loc_82256EFC:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82256f54
	if (cr6.getEQ()) goto loc_82256F54;
	// lwz r10,72(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 72);
	// rlwinm r11,r31,4,0,27
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 4) & 0xFFFFFFF0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// add r31,r11,r10
	r31.u64 = r11.u64 + ctx.r10.u64;
	// stw r24,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r24.u32);
	// stw r23,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r23.u32);
	// lwz r11,20(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 20);
	// lwz r4,24(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// bl 0x82256738
	sub_82256738(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r7,r31,4
	ctx.r7.s64 = r31.s64 + 4;
	// li r6,0
	ctx.r6.s64 = 0;
	// rlwimi r3,r11,0,0,0
	ctx.r3.u64 = (__builtin_rotateleft32(r11.u32, 0) & 0x80000000) | (ctx.r3.u64 & 0xFFFFFFFF7FFFFFFF);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// lwz r3,96(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 96);
	// bl 0x821fdb80
	sub_821FDB80(ctx, base);
	// stw r3,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r3.u32);
loc_82256F54:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_82256F60"))) PPC_WEAK_FUNC(sub_82256F60);
PPC_FUNC_IMPL(__imp__sub_82256F60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// addi r26,r31,128
	r26.s64 = r31.s64 + 128;
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x82257040
	if (cr0.getLT()) goto loc_82257040;
	// lwz r30,108(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// cmplw cr6,r11,r27
	cr6.compare<uint32_t>(r11.u32, r27.u32, xer);
	// bgt cr6,0x82256fc8
	if (cr6.getGT()) goto loc_82256FC8;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// addi r29,r27,1
	r29.s64 = r27.s64 + 1;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// ble cr6,0x82256fb8
	if (!cr6.getGT()) goto loc_82256FB8;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82253310
	sub_82253310(ctx, base);
loc_82256FB8:
	// stw r29,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r29.u32);
	// lwz r3,0(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x82257040
	if (cr0.getLT()) goto loc_82257040;
loc_82256FC8:
	// lwz r10,108(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// mulli r11,r27,20
	r11.s64 = r27.s64 * 20;
	// lwz r9,20(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r4,24(r9)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + 24);
	// add r31,r11,r10
	r31.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x82256738
	sub_82256738(ctx, base);
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// lwz r11,40(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 40);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// lwz r11,24(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 24);
	// lwz r30,44(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// beq 0x8225703c
	if (cr0.getEQ()) goto loc_8225703C;
	// addi r31,r31,8
	r31.s64 = r31.s64 + 8;
loc_82257008:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82255a80
	sub_82255A80(ctx, base);
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8225703c
	if (cr6.getLT()) goto loc_8225703C;
	// lwz r30,12(r30)
	r30.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// bne 0x82257008
	if (!cr0.getEQ()) goto loc_82257008;
loc_8225703C:
	// lwz r3,0(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 0);
loc_82257040:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82257048"))) PPC_WEAK_FUNC(sub_82257048);
PPC_FUNC_IMPL(__imp__sub_82257048) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r11,144(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 144);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8225706c
	if (!cr6.getEQ()) goto loc_8225706C;
	// bl 0x82255af0
	sub_82255AF0(ctx, base);
loc_8225706C:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-20428
	ctx.r4.s64 = r11.s64 + -20428;
	// bl 0x82264290
	sub_82264290(ctx, base);
	// lis r11,-32253
	r11.s64 = -2113732608;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-11628
	ctx.r4.s64 = r11.s64 + -11628;
	// bl 0x82264290
	sub_82264290(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bl 0x82252b00
	sub_82252B00(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r29,r11,-20440
	r29.s64 = r11.s64 + -20440;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r11,-21288
	ctx.r4.s64 = r11.s64 + -21288;
	// bl 0x82264290
	sub_82264290(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r7,152(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 152);
	// addi r4,r11,-20492
	ctx.r4.s64 = r11.s64 + -20492;
	// lwz r6,148(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 148);
	// lwz r5,144(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 144);
	// bl 0x82264290
	sub_82264290(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r5,6274
	ctx.r5.s64 = 6274;
	// addi r4,r11,-20456
	ctx.r4.s64 = r11.s64 + -20456;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82264290
	sub_82264290(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82253748
	sub_82253748(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x822538d8
	sub_822538D8(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82254c60
	sub_82254C60(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x822563f8
	sub_822563F8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82252b60
	sub_82252B60(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82257128"))) PPC_WEAK_FUNC(sub_82257128);
PPC_FUNC_IMPL(__imp__sub_82257128) {
	PPC_FUNC_PROLOGUE();
	// b 0x82256bc0
	sub_82256BC0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82257130"))) PPC_WEAK_FUNC(sub_82257130);
PPC_FUNC_IMPL(__imp__sub_82257130) {
	PPC_FUNC_PROLOGUE();
	// b 0x82256cf0
	sub_82256CF0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82257138"))) PPC_WEAK_FUNC(sub_82257138);
PPC_FUNC_IMPL(__imp__sub_82257138) {
	PPC_FUNC_PROLOGUE();
	// b 0x82256de0
	sub_82256DE0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82257140"))) PPC_WEAK_FUNC(sub_82257140);
PPC_FUNC_IMPL(__imp__sub_82257140) {
	PPC_FUNC_PROLOGUE();
	// b 0x82256d70
	sub_82256D70(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82257148"))) PPC_WEAK_FUNC(sub_82257148);
PPC_FUNC_IMPL(__imp__sub_82257148) {
	PPC_FUNC_PROLOGUE();
	// b 0x82256e88
	sub_82256E88(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82257150"))) PPC_WEAK_FUNC(sub_82257150);
PPC_FUNC_IMPL(__imp__sub_82257150) {
	PPC_FUNC_PROLOGUE();
	// b 0x82256f60
	sub_82256F60(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82257158"))) PPC_WEAK_FUNC(sub_82257158);
PPC_FUNC_IMPL(__imp__sub_82257158) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r11,0
	r11.s64 = 0;
	// mr r30,r11
	r30.u64 = r11.u64;
	// lwz r10,128(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x822571d4
	if (cr6.getLT()) goto loc_822571D4;
	// lwz r10,132(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// beq cr6,0x822571dc
	if (cr6.getEQ()) goto loc_822571DC;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x822571dc
	if (!cr6.getEQ()) goto loc_822571DC;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// addi r10,r10,-21312
	ctx.r10.s64 = ctx.r10.s64 + -21312;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stw r9,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r9.u32);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// bl 0x82257048
	sub_82257048(ctx, base);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x822571d0
	if (cr6.getLT()) goto loc_822571D0;
	// lwz r30,96(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_822571D0:
	// stw r11,128(r31)
	PPC_STORE_U32(r31.u32 + 128, r11.u32);
loc_822571D4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// b 0x822571e0
	goto loc_822571E0;
loc_822571DC:
	// li r3,0
	ctx.r3.s64 = 0;
loc_822571E0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822571F8"))) PPC_WEAK_FUNC(sub_822571F8);
PPC_FUNC_IMPL(__imp__sub_822571F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r9,r4
	ctx.r9.u64 = ctx.r4.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// lwz r11,128(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82257294
	if (cr6.getLT()) goto loc_82257294;
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x8225729c
	if (cr6.getEQ()) goto loc_8225729C;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x82257244
	if (cr6.getEQ()) goto loc_82257244;
	// lis r11,-32768
	r11.s64 = -2147483648;
	// ori r11,r11,16389
	r11.u64 = r11.u64 | 16389;
	// b 0x82257290
	goto loc_82257290;
loc_82257244:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// stw r9,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r9.u32);
	// li r8,1
	ctx.r8.s64 = 1;
	// stw r5,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r5.u32);
	// addi r10,r11,-21300
	ctx.r10.s64 = r11.s64 + -21300;
	// li r11,0
	r11.s64 = 0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r8,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r8.u32);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// bl 0x82257048
	sub_82257048(ctx, base);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82257290
	if (cr6.getLT()) goto loc_82257290;
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r10,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r10.u32);
loc_82257290:
	// stw r11,128(r31)
	PPC_STORE_U32(r31.u32 + 128, r11.u32);
loc_82257294:
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 128);
	// b 0x822572a0
	goto loc_822572A0;
loc_8225729C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_822572A0:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822572B8"))) PPC_WEAK_FUNC(sub_822572B8);
PPC_FUNC_IMPL(__imp__sub_822572B8) {
	PPC_FUNC_PROLOGUE();
	// b 0x82257158
	sub_82257158(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822572C0"))) PPC_WEAK_FUNC(sub_822572C0);
PPC_FUNC_IMPL(__imp__sub_822572C0) {
	PPC_FUNC_PROLOGUE();
	// b 0x822571f8
	sub_822571F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822572C8"))) PPC_WEAK_FUNC(sub_822572C8);
PPC_FUNC_IMPL(__imp__sub_822572C8) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x823f1f38
	sub_823F1F38(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822572D0"))) PPC_WEAK_FUNC(sub_822572D0);
PPC_FUNC_IMPL(__imp__sub_822572D0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// bl 0x823ed250
	sub_823ED250(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822572F8"))) PPC_WEAK_FUNC(sub_822572F8);
PPC_FUNC_IMPL(__imp__sub_822572F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// li r11,0
	r11.s64 = 0;
	// li r10,100
	ctx.r10.s64 = 100;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,16(r6)
	PPC_STORE_U32(ctx.r6.u32 + 16, r11.u32);
	// stw r11,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, r11.u32);
	// stw r11,12(r6)
	PPC_STORE_U32(ctx.r6.u32 + 12, r11.u32);
	// stw r11,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, r11.u32);
	// stw r10,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82257320"))) PPC_WEAK_FUNC(sub_82257320);
PPC_FUNC_IMPL(__imp__sub_82257320) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82257370
	if (cr6.getEQ()) goto loc_82257370;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// addi r10,r10,-20216
	ctx.r10.s64 = ctx.r10.s64 + -20216;
loc_82257334:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi r9,0
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// subf r8,r8,r9
	ctx.r8.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq 0x82257358
	if (cr0.getEQ()) goto loc_82257358;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x82257334
	if (cr6.getEQ()) goto loc_82257334;
loc_82257358:
	// cmpwi r8,0
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x82257370
	if (!cr0.getEQ()) goto loc_82257370;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r11.u32);
	// blr 
	return;
loc_82257370:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82257378"))) PPC_WEAK_FUNC(sub_82257378);
PPC_FUNC_IMPL(__imp__sub_82257378) {
	PPC_FUNC_PROLOGUE();
	// twi 31,r0,22
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82257380"))) PPC_WEAK_FUNC(sub_82257380);
PPC_FUNC_IMPL(__imp__sub_82257380) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82257398"))) PPC_WEAK_FUNC(sub_82257398);
PPC_FUNC_IMPL(__imp__sub_82257398) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// bl 0x82263870
	sub_82263870(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x822573cc
	if (!cr0.getEQ()) goto loc_822573CC;
	// bl 0x822624b0
	sub_822624B0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x822573d4
	goto loc_822573D4;
loc_822573CC:
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,14
	ctx.r3.u64 = ctx.r3.u64 | 14;
loc_822573D4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822573E8"))) PPC_WEAK_FUNC(sub_822573E8);
PPC_FUNC_IMPL(__imp__sub_822573E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r8
	r30.u64 = ctx.r8.u64;
	// mr r31,r7
	r31.u64 = ctx.r7.u64;
	// cmplwi cr6,r5,19
	cr6.compare<uint32_t>(ctx.r5.u32, 19, xer);
	// stw r6,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r6.u32);
	// beq cr6,0x8225746c
	if (cr6.getEQ()) goto loc_8225746C;
	// cmplwi cr6,r5,20
	cr6.compare<uint32_t>(ctx.r5.u32, 20, xer);
	// beq cr6,0x82257464
	if (cr6.getEQ()) goto loc_82257464;
	// cmplwi cr6,r5,21
	cr6.compare<uint32_t>(ctx.r5.u32, 21, xer);
	// beq cr6,0x8225745c
	if (cr6.getEQ()) goto loc_8225745C;
	// cmplwi cr6,r5,22
	cr6.compare<uint32_t>(ctx.r5.u32, 22, xer);
	// beq cr6,0x82257450
	if (cr6.getEQ()) goto loc_82257450;
	// cmplwi cr6,r5,23
	cr6.compare<uint32_t>(ctx.r5.u32, 23, xer);
	// beq cr6,0x82257444
	if (cr6.getEQ()) goto loc_82257444;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// li r11,15
	r11.s64 = 15;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// b 0x822574d0
	goto loc_822574D0;
loc_82257444:
	// li r11,11
	r11.s64 = 11;
loc_82257448:
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// b 0x822574e0
	goto loc_822574E0;
loc_82257450:
	// li r11,10
	r11.s64 = 10;
	// li r10,1
	ctx.r10.s64 = 1;
	// b 0x822574c8
	goto loc_822574C8;
loc_8225745C:
	// li r11,10
	r11.s64 = 10;
	// b 0x82257448
	goto loc_82257448;
loc_82257464:
	// li r11,5
	r11.s64 = 5;
	// b 0x82257448
	goto loc_82257448;
loc_8225746C:
	// cmplwi cr6,r6,10
	cr6.compare<uint32_t>(ctx.r6.u32, 10, xer);
	// bge cr6,0x822574bc
	if (!cr6.getLT()) goto loc_822574BC;
	// cmplwi cr6,r3,20
	cr6.compare<uint32_t>(ctx.r3.u32, 20, xer);
	// beq cr6,0x822574ac
	if (cr6.getEQ()) goto loc_822574AC;
	// cmplwi cr6,r3,21
	cr6.compare<uint32_t>(ctx.r3.u32, 21, xer);
	// beq cr6,0x8225745c
	if (cr6.getEQ()) goto loc_8225745C;
	// cmplwi cr6,r3,22
	cr6.compare<uint32_t>(ctx.r3.u32, 22, xer);
	// beq cr6,0x82257450
	if (cr6.getEQ()) goto loc_82257450;
	// cmplwi cr6,r3,23
	cr6.compare<uint32_t>(ctx.r3.u32, 23, xer);
	// beq cr6,0x82257444
	if (cr6.getEQ()) goto loc_82257444;
	// cmplwi cr6,r3,33
	cr6.compare<uint32_t>(ctx.r3.u32, 33, xer);
	// beq cr6,0x82257464
	if (cr6.getEQ()) goto loc_82257464;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// li r11,15
	r11.s64 = 15;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// b 0x822574dc
	goto loc_822574DC;
loc_822574AC:
	// li r11,5
	r11.s64 = 5;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r4,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r4.u32);
	// b 0x822574d0
	goto loc_822574D0;
loc_822574BC:
	// rlwinm r11,r6,28,4,31
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 28) & 0xFFFFFFF;
	// clrlwi r10,r6,28
	ctx.r10.u64 = ctx.r6.u32 & 0xF;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
loc_822574C8:
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r10,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r10.u32);
loc_822574D0:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,13
	cr6.compare<uint32_t>(r11.u32, 13, xer);
	// ble cr6,0x822574e0
	if (!cr6.getGT()) goto loc_822574E0;
loc_822574DC:
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822574E0:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplwi cr6,r11,16
	cr6.compare<uint32_t>(r11.u32, 16, xer);
	// blt cr6,0x822574f0
	if (cr6.getLT()) goto loc_822574F0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822574F0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82257508"))) PPC_WEAK_FUNC(sub_82257508);
PPC_FUNC_IMPL(__imp__sub_82257508) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// rlwinm r29,r30,27,5,31
	r29.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 27) & 0x7FFFFFF;
	// cmplwi cr6,r29,8
	cr6.compare<uint32_t>(r29.u32, 8, xer);
	// blt cr6,0x8225754c
	if (cr6.getLT()) goto loc_8225754C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,808
	ctx.r7.s64 = 808;
	// addi r6,r11,-20104
	ctx.r6.s64 = r11.s64 + -20104;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r5,r11,-20164
	ctx.r5.s64 = r11.s64 + -20164;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-20196
	ctx.r4.s64 = r11.s64 + -20196;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_8225754C:
	// li r9,1
	ctx.r9.s64 = 1;
	// clrlwi r10,r30,27
	ctx.r10.u64 = r30.u32 & 0x1F;
	// rlwinm r11,r29,2,0,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// slw r10,r9,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r9.u32 << (ctx.r10.u8 & 0x3F));
	// lwzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// stwx r10,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82257570"))) PPC_WEAK_FUNC(sub_82257570);
PPC_FUNC_IMPL(__imp__sub_82257570) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// rlwinm r30,r31,27,5,31
	r30.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 27) & 0x7FFFFFF;
	// cmplwi cr6,r30,8
	cr6.compare<uint32_t>(r30.u32, 8, xer);
	// blt cr6,0x822575b4
	if (cr6.getLT()) goto loc_822575B4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,814
	ctx.r7.s64 = 814;
	// addi r6,r11,-20104
	ctx.r6.s64 = r11.s64 + -20104;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r5,r11,-20164
	ctx.r5.s64 = r11.s64 + -20164;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-20196
	ctx.r4.s64 = r11.s64 + -20196;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822575B4:
	// clrlwi r11,r31,27
	r11.u64 = r31.u32 & 0x1F;
	// li r10,1
	ctx.r10.s64 = 1;
	// rlwinm r9,r30,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r9,r29
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r29.u32);
	// slw r11,r10,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r11.u8 & 0x3F));
	// and r11,r11,r9
	r11.u64 = r11.u64 & ctx.r9.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_822575E0"))) PPC_WEAK_FUNC(sub_822575E0);
PPC_FUNC_IMPL(__imp__sub_822575E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister temp{};
	// srawi r11,r4,5
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x1F) != 0);
	r11.s64 = ctx.r4.s32 >> 5;
	// addze. r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// blt 0x82257628
	if (cr0.getLT()) goto loc_82257628;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r10,r3
	ctx.r9.u64 = ctx.r10.u64 + ctx.r3.u64;
loc_822575F4:
	// lwz r8,0(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmpwi cr6,r8,-1
	cr6.compare<int32_t>(ctx.r8.s32, -1, xer);
	// beq cr6,0x8225761c
	if (cr6.getEQ()) goto loc_8225761C;
	// li r10,31
	ctx.r10.s64 = 31;
loc_82257604:
	// li r7,1
	ctx.r7.s64 = 1;
	// slw r7,r7,r10
	ctx.r7.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r7.u32 << (ctx.r10.u8 & 0x3F));
	// and. r7,r7,r8
	ctx.r7.u64 = ctx.r7.u64 & ctx.r8.u64;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq 0x82257630
	if (cr0.getEQ()) goto loc_82257630;
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge 0x82257604
	if (!cr0.getLT()) goto loc_82257604;
loc_8225761C:
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r9,r9,-4
	ctx.r9.s64 = ctx.r9.s64 + -4;
	// bge 0x822575f4
	if (!cr0.getLT()) goto loc_822575F4;
loc_82257628:
	// li r3,-1
	ctx.r3.s64 = -1;
	// blr 
	return;
loc_82257630:
	// rlwinm r11,r11,5,0,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 5) & 0xFFFFFFE0;
	// add r3,r11,r10
	ctx.r3.u64 = r11.u64 + ctx.r10.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82257640"))) PPC_WEAK_FUNC(sub_82257640);
PPC_FUNC_IMPL(__imp__sub_82257640) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r30,12(r4)
	r30.u64 = PPC_LOAD_U32(ctx.r4.u32 + 12);
	// lwz r28,8(r4)
	r28.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// bne 0x82257660
	if (!cr0.getEQ()) goto loc_82257660;
	// li r30,1
	r30.s64 = 1;
loc_82257660:
	// li r31,0
	r31.s64 = 0;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82257688
	if (cr6.getEQ()) goto loc_82257688;
	// addi r29,r3,40
	r29.s64 = ctx.r3.s64 + 40;
loc_82257670:
	// add r4,r31,r28
	ctx.r4.u64 = r31.u64 + r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82257508
	sub_82257508(ctx, base);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmplw cr6,r31,r30
	cr6.compare<uint32_t>(r31.u32, r30.u32, xer);
	// blt cr6,0x82257670
	if (cr6.getLT()) goto loc_82257670;
loc_82257688:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82257690"))) PPC_WEAK_FUNC(sub_82257690);
PPC_FUNC_IMPL(__imp__sub_82257690) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r5,48
	ctx.r5.s64 = 48;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lwz r9,112(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplwi cr6,r9,1
	cr6.compare<uint32_t>(ctx.r9.u32, 1, xer);
	// bne cr6,0x822576ec
	if (!cr6.getEQ()) goto loc_822576EC;
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x822576e4
	if (!cr6.getEQ()) goto loc_822576E4;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82257640
	sub_82257640(ctx, base);
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r9,112(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
loc_822576E4:
	// cmplwi cr6,r9,1
	cr6.compare<uint32_t>(ctx.r9.u32, 1, xer);
	// beq cr6,0x822577b0
	if (cr6.getEQ()) goto loc_822577B0;
loc_822576EC:
	// lhz r11,6(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 6);
	// lhz r8,4(r30)
	ctx.r8.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r31,92(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mullw r11,r11,r8
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r8.s32);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x82257710
	if (cr6.getEQ()) goto loc_82257710;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x82257720
	if (!cr6.getEQ()) goto loc_82257720;
loc_82257710:
	// clrlwi. r10,r11,30
	ctx.r10.u64 = r11.u32 & 0x3;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r11,r11,30,2,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// beq 0x82257720
	if (cr0.getEQ()) goto loc_82257720;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82257720:
	// mr. r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r9,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r9.u32);
	// beq 0x822578b8
	if (cr0.getEQ()) goto loc_822578B8;
	// mr r29,r10
	r29.u64 = ctx.r10.u64;
loc_82257738:
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bge cr6,0x82257748
	if (!cr6.getLT()) goto loc_82257748;
	// mr r11,r31
	r11.u64 = r31.u64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
loc_82257748:
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// subf r31,r11,r31
	r31.s64 = r31.s64 - r11.s64;
	// bl 0x82257690
	sub_82257690(ctx, base);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x822577a4
	if (cr6.getEQ()) goto loc_822577A4;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// subfic r9,r9,0
	xer.ca = ctx.r9.u32 <= 0;
	ctx.r9.s64 = 0 - ctx.r9.s64;
	// subfe r9,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r9,r9,30
	ctx.r9.u64 = ctx.r9.u32 & 0x3;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// mullw r9,r9,r11
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
loc_822577A4:
	// addic. r29,r29,-1
	xer.ca = r29.u32 > 0;
	r29.s64 = r29.s64 + -1;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// bne 0x82257738
	if (!cr0.getEQ()) goto loc_82257738;
	// b 0x822578b8
	goto loc_822578B8;
loc_822577B0:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x822578b8
	if (cr6.getEQ()) goto loc_822578B8;
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// mr r29,r10
	r29.u64 = ctx.r10.u64;
	// lwz r31,92(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r30,r11,4
	r30.s64 = r11.s64 + 4;
loc_822577D0:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmpwi cr6,r9,2
	cr6.compare<int32_t>(ctx.r9.s32, 2, xer);
	// add r7,r11,r28
	ctx.r7.u64 = r11.u64 + r28.u64;
	// lhz r11,6(r7)
	r11.u64 = PPC_LOAD_U16(ctx.r7.u32 + 6);
	// lhz r10,4(r7)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r7.u32 + 4);
	// mullw r11,r11,r10
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// beq cr6,0x822577f4
	if (cr6.getEQ()) goto loc_822577F4;
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// bne cr6,0x82257804
	if (!cr6.getEQ()) goto loc_82257804;
loc_822577F4:
	// clrlwi. r10,r11,30
	ctx.r10.u64 = r11.u32 & 0x3;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r11,r11,30,2,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// beq 0x82257804
	if (cr0.getEQ()) goto loc_82257804;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82257804:
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// lhz r10,8(r7)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r7.u32 + 8);
	// mullw r11,r10,r11
	r11.s64 = int64_t(ctx.r10.s32) * int64_t(r11.s32);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// bge cr6,0x82257824
	if (!cr6.getLT()) goto loc_82257824;
	// mr r11,r31
	r11.u64 = r31.u64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
loc_82257824:
	// lhz r10,6(r7)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r7.u32 + 6);
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// subf r31,r11,r31
	r31.s64 = r31.s64 - r11.s64;
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// lhz r10,4(r7)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r7.u32 + 4);
	// stw r10,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r10.u32);
	// lhz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r7.u32 + 0);
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// lhz r10,2(r7)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r7.u32 + 2);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// lhz r10,8(r7)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r7.u32 + 8);
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// lhz r10,10(r7)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r7.u32 + 10);
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// bl 0x82257690
	sub_82257690(ctx, base);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x822578ac
	if (cr6.getEQ()) goto loc_822578AC;
	// subfic r8,r9,0
	xer.ca = ctx.r9.u32 <= 0;
	ctx.r8.s64 = 0 - ctx.r9.s64;
	// subfe r8,r8,r8
	temp.u8 = (~ctx.r8.u32 + ctx.r8.u32 < ~ctx.r8.u32) | (~ctx.r8.u32 + ctx.r8.u32 + xer.ca < xer.ca);
	ctx.r8.u64 = ~ctx.r8.u64 + ctx.r8.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r8,r8,30
	ctx.r8.u64 = ctx.r8.u32 & 0x3;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// mullw r11,r8,r11
	r11.s64 = int64_t(ctx.r8.s32) * int64_t(r11.s32);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
loc_822578AC:
	// addic. r29,r29,-1
	xer.ca = r29.u32 > 0;
	r29.s64 = r29.s64 + -1;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// addi r30,r30,8
	r30.s64 = r30.s64 + 8;
	// bne 0x822577d0
	if (!cr0.getEQ()) goto loc_822577D0;
loc_822578B8:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_822578C0"))) PPC_WEAK_FUNC(sub_822578C0);
PPC_FUNC_IMPL(__imp__sub_822578C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	// lwz r11,0(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lhz r11,4(r6)
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + 4);
	// stw r11,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, r11.u32);
	// lhz r11,6(r6)
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + 6);
	// stw r11,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, r11.u32);
	// lhz r11,8(r6)
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + 8);
	// stw r11,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, r11.u32);
	// lwz r11,16(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// bne 0x822578f8
	if (!cr0.getEQ()) goto loc_822578F8;
	// li r11,0
	r11.s64 = 0;
loc_822578F8:
	// stw r11,44(r4)
	PPC_STORE_U32(ctx.r4.u32 + 44, r11.u32);
	// lhz r11,6(r7)
	r11.u64 = PPC_LOAD_U16(ctx.r7.u32 + 6);
	// stw r11,28(r4)
	PPC_STORE_U32(ctx.r4.u32 + 28, r11.u32);
	// lhz r11,4(r7)
	r11.u64 = PPC_LOAD_U16(ctx.r7.u32 + 4);
	// stw r11,24(r4)
	PPC_STORE_U32(ctx.r4.u32 + 24, r11.u32);
	// lhz r11,0(r7)
	r11.u64 = PPC_LOAD_U16(ctx.r7.u32 + 0);
	// stw r11,16(r4)
	PPC_STORE_U32(ctx.r4.u32 + 16, r11.u32);
	// lhz r11,2(r7)
	r11.u64 = PPC_LOAD_U16(ctx.r7.u32 + 2);
	// stw r11,20(r4)
	PPC_STORE_U32(ctx.r4.u32 + 20, r11.u32);
	// lhz r11,8(r7)
	r11.u64 = PPC_LOAD_U16(ctx.r7.u32 + 8);
	// stw r11,32(r4)
	PPC_STORE_U32(ctx.r4.u32 + 32, r11.u32);
	// lhz r11,10(r7)
	r11.u64 = PPC_LOAD_U16(ctx.r7.u32 + 10);
	// stw r11,36(r4)
	PPC_STORE_U32(ctx.r4.u32 + 36, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82257930"))) PPC_WEAK_FUNC(sub_82257930);
PPC_FUNC_IMPL(__imp__sub_82257930) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x822579d4
	if (cr6.getEQ()) goto loc_822579D4;
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x822579d4
	if (cr0.getEQ()) goto loc_822579D4;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x822579d4
	if (cr0.getEQ()) goto loc_822579D4;
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// add r30,r10,r31
	r30.u64 = ctx.r10.u64 + r31.u64;
	// beq cr6,0x822579d4
	if (cr6.getEQ()) goto loc_822579D4;
	// mr r28,r11
	r28.u64 = r11.u64;
loc_82257984:
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// add r29,r11,r31
	r29.u64 = r11.u64 + r31.u64;
	// lhz r11,2(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 2);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x822579c8
	if (!cr6.getEQ()) goto loc_822579C8;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x822578c0
	sub_822578C0(ctx, base);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82257690
	sub_82257690(ctx, base);
loc_822579C8:
	// addic. r28,r28,-1
	xer.ca = r28.u32 > 0;
	r28.s64 = r28.s64 + -1;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// addi r30,r30,20
	r30.s64 = r30.s64 + 20;
	// bne 0x82257984
	if (!cr0.getEQ()) goto loc_82257984;
loc_822579D4:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_822579E0"))) PPC_WEAK_FUNC(sub_822579E0);
PPC_FUNC_IMPL(__imp__sub_822579E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// addi r27,r31,8
	r27.s64 = r31.s64 + 8;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82257570
	sub_82257570(ctx, base);
	// clrlwi. r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82257a70
	if (!cr0.getEQ()) goto loc_82257A70;
	// addi r28,r31,40
	r28.s64 = r31.s64 + 40;
	// lwz r4,4680(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 4680);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x822575e0
	sub_822575E0(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bge 0x82257a30
	if (!cr0.getLT()) goto loc_82257A30;
	// li r11,1
	r11.s64 = 1;
	// li r3,0
	ctx.r3.s64 = 0;
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// b 0x82257a78
	goto loc_82257A78;
loc_82257A30:
	// addi r11,r30,-1
	r11.s64 = r30.s64 + -1;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,4680(r31)
	PPC_STORE_U32(r31.u32 + 4680, r11.u32);
	// bl 0x82257508
	sub_82257508(ctx, base);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// stb r29,328(r11)
	PPC_STORE_U8(r11.u32 + 328, r29.u8);
	// bl 0x82257508
	sub_82257508(ctx, base);
	// add r10,r29,r31
	ctx.r10.u64 = r29.u64 + r31.u64;
	// stb r30,72(r10)
	PPC_STORE_U8(ctx.r10.u32 + 72, r30.u8);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
loc_82257A70:
	// add r11,r29,r31
	r11.u64 = r29.u64 + r31.u64;
	// lbz r3,72(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 72);
loc_82257A78:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82257A80"))) PPC_WEAK_FUNC(sub_82257A80);
PPC_FUNC_IMPL(__imp__sub_82257A80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r8
	r28.u64 = ctx.r8.u64;
	// clrlwi. r11,r4,24
	r11.u64 = ctx.r4.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82257ba0
	if (cr0.getEQ()) goto loc_82257BA0;
	// clrlwi. r11,r5,24
	r11.u64 = ctx.r5.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82257ba0
	if (!cr0.getEQ()) goto loc_82257BA0;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm. r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82257ac4
	if (!cr0.getEQ()) goto loc_82257AC4;
	// rlwinm. r10,r11,0,1,1
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82257ac4
	if (!cr0.getEQ()) goto loc_82257AC4;
	// rlwinm. r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne 0x82257ac8
	if (!cr0.getEQ()) goto loc_82257AC8;
loc_82257AC4:
	// li r11,0
	r11.s64 = 0;
loc_82257AC8:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82257ba0
	if (cr0.getEQ()) goto loc_82257BA0;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lis r10,-32018
	ctx.r10.s64 = -2098331648;
	// addi r30,r10,-22904
	r30.s64 = ctx.r10.s64 + -22904;
	// rlwinm r29,r11,10,25,29
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 10) & 0x7C;
	// lwzx r10,r29,r30
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + r30.u32);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// blt cr6,0x82257b04
	if (cr6.getLT()) goto loc_82257B04;
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82257b04
	if (!cr0.getEQ()) goto loc_82257B04;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lbz r4,9(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// bl 0x822579e0
	sub_822579E0(ctx, base);
	// stb r3,9(r31)
	PPC_STORE_U8(r31.u32 + 9, ctx.r3.u8);
loc_82257B04:
	// lwzx r11,r29,r30
	r11.u64 = PPC_LOAD_U32(r29.u32 + r30.u32);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// blt cr6,0x82257b2c
	if (cr6.getLT()) goto loc_82257B2C;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,1,1
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82257b2c
	if (!cr0.getEQ()) goto loc_82257B2C;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lbz r4,10(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// bl 0x822579e0
	sub_822579E0(ctx, base);
	// stb r3,10(r31)
	PPC_STORE_U8(r31.u32 + 10, ctx.r3.u8);
loc_82257B2C:
	// lwzx r11,r29,r30
	r11.u64 = PPC_LOAD_U32(r29.u32 + r30.u32);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r30,r11,-22464
	r30.s64 = r11.s64 + -22464;
	// bge cr6,0x82257b54
	if (!cr6.getLT()) goto loc_82257B54;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,8,24,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFC;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82257b70
	if (!cr6.getEQ()) goto loc_82257B70;
loc_82257B54:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r10,r11,0,2,2
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82257b70
	if (!cr0.getEQ()) goto loc_82257B70;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x822579e0
	sub_822579E0(ctx, base);
	// stb r3,11(r31)
	PPC_STORE_U8(r31.u32 + 11, ctx.r3.u8);
loc_82257B70:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,8,24,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFC;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x82257b94
	if (!cr6.getEQ()) goto loc_82257B94;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lbz r4,11(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 11);
	// bl 0x822579e0
	sub_822579E0(ctx, base);
	// stb r3,11(r31)
	PPC_STORE_U8(r31.u32 + 11, ctx.r3.u8);
loc_82257B94:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm r11,r11,0,3,1
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFDFFFFFFF;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
loc_82257BA0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82257BA8"))) PPC_WEAK_FUNC(sub_82257BA8);
PPC_FUNC_IMPL(__imp__sub_82257BA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r30{};
	PPCRegister r31{};
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// clrlwi. r11,r5,24
	r11.u64 = ctx.r5.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r30,0
	r30.s64 = 0;
	// beq 0x82257bc4
	if (cr0.getEQ()) goto loc_82257BC4;
	// std r30,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r30.u64);
loc_82257BC4:
	// clrlwi. r11,r4,24
	r11.u64 = ctx.r4.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// beq 0x82257c34
	if (cr0.getEQ()) goto loc_82257C34;
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// clrlwi r9,r11,27
	ctx.r9.u64 = r11.u32 & 0x1F;
	// cmplwi cr6,r9,19
	cr6.compare<uint32_t>(ctx.r9.u32, 19, xer);
	// bgt cr6,0x82257bf0
	if (cr6.getGT()) goto loc_82257BF0;
	// rlwinm r10,r11,20,26,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0x3F;
	// slw r10,r4,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r4.u32 << (ctx.r10.u8 & 0x3F));
loc_82257BF0:
	// clrlwi. r9,r6,24
	ctx.r9.u64 = ctx.r6.u32 & 0xFF;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// beq 0x82257c08
	if (cr0.getEQ()) goto loc_82257C08;
	// lwz r9,4(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// rlwinm. r9,r9,0,1,1
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x82257c10
	if (!cr0.getEQ()) goto loc_82257C10;
loc_82257C08:
	// rlwinm r9,r11,27,26,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x3F;
	// slw r8,r4,r9
	ctx.r8.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r4.u32 << (ctx.r9.u8 & 0x3F));
loc_82257C10:
	// rlwinm. r9,r11,0,13,13
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// li r9,-1
	ctx.r9.s64 = -1;
	// bne 0x82257c20
	if (!cr0.getEQ()) goto loc_82257C20;
	// clrldi r9,r10,32
	ctx.r9.u64 = ctx.r10.u64 & 0xFFFFFFFF;
loc_82257C20:
	// rlwinm. r11,r11,0,20,20
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// bne 0x82257c38
	if (!cr0.getEQ()) goto loc_82257C38;
	// clrldi r11,r8,32
	r11.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// b 0x82257c3c
	goto loc_82257C3C;
loc_82257C34:
	// li r10,-1
	ctx.r10.s64 = -1;
loc_82257C38:
	// li r11,-1
	r11.s64 = -1;
loc_82257C3C:
	// ld r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// and r11,r11,r8
	r11.u64 = r11.u64 & ctx.r8.u64;
	// cmpdi cr6,r11,0
	cr6.compare<int64_t>(r11.s64, 0, xer);
	// beq cr6,0x82257c54
	if (cr6.getEQ()) goto loc_82257C54;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
loc_82257C54:
	// clrlwi. r11,r5,24
	r11.u64 = ctx.r5.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82257c60
	if (cr0.getEQ()) goto loc_82257C60;
	// std r30,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r30.u64);
loc_82257C60:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// mr r3,r5
	ctx.r3.u64 = ctx.r5.u64;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82257C80"))) PPC_WEAK_FUNC(sub_82257C80);
PPC_FUNC_IMPL(__imp__sub_82257C80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister reserved{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31991
	r11.s64 = -2096562176;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// addi r31,r11,-7404
	r31.s64 = r11.s64 + -7404;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// addi r8,r31,40
	ctx.r8.s64 = r31.s64 + 40;
	// li r30,0
	r30.s64 = 0;
	// li r29,1
	r29.s64 = 1;
loc_82257CA8:
	// mfmsr r9
	// mtmsrd r13,1
	// lwarx r10,0,r8
	reserved.u32 = *(uint32_t*)(base + ctx.r8.u32);
	ctx.r10.u64 = __builtin_bswap32(reserved.u32);
	// cmpw cr6,r10,r30
	cr6.compare<int32_t>(ctx.r10.s32, r30.s32, xer);
	// bne cr6,0x82257cfc
	if (!cr6.getEQ()) goto loc_82257CFC;
	// stwcx. r29,0,r8
	cr0.getLT() = 0;
	cr0.getGT() = 0;
	cr0.getEQ() = __sync_bool_compare_and_swap(reinterpret_cast<uint32_t*>(base + ctx.r8.u32), reserved.s32, __builtin_bswap32(r29.s32));
	cr0.getSO() = xer.so;
	// mtmsrd r9,1
	// bne 0x82257ca8
	if (!cr0.getEQ()) goto loc_82257CA8;
	// b 0x82257d04
	goto loc_82257D04;
loc_82257CCC:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x8235eb58
	sub_8235EB58(ctx, base);
	// addi r8,r31,40
	ctx.r8.s64 = r31.s64 + 40;
loc_82257CD8:
	// mfmsr r9
	// mtmsrd r13,1
	// lwarx r10,0,r8
	reserved.u32 = *(uint32_t*)(base + ctx.r8.u32);
	ctx.r10.u64 = __builtin_bswap32(reserved.u32);
	// cmpw cr6,r10,r30
	cr6.compare<int32_t>(ctx.r10.s32, r30.s32, xer);
	// bne cr6,0x82257cfc
	if (!cr6.getEQ()) goto loc_82257CFC;
	// stwcx. r29,0,r8
	cr0.getLT() = 0;
	cr0.getGT() = 0;
	cr0.getEQ() = __sync_bool_compare_and_swap(reinterpret_cast<uint32_t*>(base + ctx.r8.u32), reserved.s32, __builtin_bswap32(r29.s32));
	cr0.getSO() = xer.so;
	// mtmsrd r9,1
	// bne 0x82257cd8
	if (!cr0.getEQ()) goto loc_82257CD8;
	// b 0x82257d04
	goto loc_82257D04;
loc_82257CFC:
	// stwcx. r10,0,r8
	cr0.getLT() = 0;
	cr0.getGT() = 0;
	cr0.getEQ() = __sync_bool_compare_and_swap(reinterpret_cast<uint32_t*>(base + ctx.r8.u32), reserved.s32, __builtin_bswap32(ctx.r10.s32));
	cr0.getSO() = xer.so;
	// mtmsrd r9,1
loc_82257D04:
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x82257ccc
	if (cr6.getEQ()) goto loc_82257CCC;
	// addi r11,r31,36
	r11.s64 = r31.s64 + 36;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82257d28
	if (!cr6.getEQ()) goto loc_82257D28;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8240f94c
	__imp__RtlInitializeCriticalSection(ctx, base);
loc_82257D28:
	// addi r11,r31,36
	r11.s64 = r31.s64 + 36;
	// addi r10,r31,36
	ctx.r10.s64 = r31.s64 + 36;
	// addi r7,r31,40
	ctx.r7.s64 = r31.s64 + 40;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
loc_82257D40:
	// mfmsr r8
	// mtmsrd r13,1
	// lwarx r9,0,r7
	reserved.u32 = *(uint32_t*)(base + ctx.r7.u32);
	ctx.r9.u64 = __builtin_bswap32(reserved.u32);
	// stwcx. r30,0,r7
	cr0.getLT() = 0;
	cr0.getGT() = 0;
	cr0.getEQ() = __sync_bool_compare_and_swap(reinterpret_cast<uint32_t*>(base + ctx.r7.u32), reserved.s32, __builtin_bswap32(r30.s32));
	cr0.getSO() = xer.so;
	// mtmsrd r8,1
	// bne 0x82257d40
	if (!cr0.getEQ()) goto loc_82257D40;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8240f8bc
	__imp__RtlEnterCriticalSection(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82266f00
	sub_82266F00(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8240f8ac
	__imp__RtlLeaveCriticalSection(ctx, base);
	// addi r8,r31,40
	ctx.r8.s64 = r31.s64 + 40;
loc_82257D7C:
	// mfmsr r9
	// mtmsrd r13,1
	// lwarx r10,0,r8
	reserved.u32 = *(uint32_t*)(base + ctx.r8.u32);
	ctx.r10.u64 = __builtin_bswap32(reserved.u32);
	// cmpw cr6,r10,r30
	cr6.compare<int32_t>(ctx.r10.s32, r30.s32, xer);
	// bne cr6,0x82257dd0
	if (!cr6.getEQ()) goto loc_82257DD0;
	// stwcx. r29,0,r8
	cr0.getLT() = 0;
	cr0.getGT() = 0;
	cr0.getEQ() = __sync_bool_compare_and_swap(reinterpret_cast<uint32_t*>(base + ctx.r8.u32), reserved.s32, __builtin_bswap32(r29.s32));
	cr0.getSO() = xer.so;
	// mtmsrd r9,1
	// bne 0x82257d7c
	if (!cr0.getEQ()) goto loc_82257D7C;
	// b 0x82257dd8
	goto loc_82257DD8;
loc_82257DA0:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x8235eb58
	sub_8235EB58(ctx, base);
	// addi r8,r31,40
	ctx.r8.s64 = r31.s64 + 40;
loc_82257DAC:
	// mfmsr r9
	// mtmsrd r13,1
	// lwarx r10,0,r8
	reserved.u32 = *(uint32_t*)(base + ctx.r8.u32);
	ctx.r10.u64 = __builtin_bswap32(reserved.u32);
	// cmpw cr6,r10,r30
	cr6.compare<int32_t>(ctx.r10.s32, r30.s32, xer);
	// bne cr6,0x82257dd0
	if (!cr6.getEQ()) goto loc_82257DD0;
	// stwcx. r29,0,r8
	cr0.getLT() = 0;
	cr0.getGT() = 0;
	cr0.getEQ() = __sync_bool_compare_and_swap(reinterpret_cast<uint32_t*>(base + ctx.r8.u32), reserved.s32, __builtin_bswap32(r29.s32));
	cr0.getSO() = xer.so;
	// mtmsrd r9,1
	// bne 0x82257dac
	if (!cr0.getEQ()) goto loc_82257DAC;
	// b 0x82257dd8
	goto loc_82257DD8;
loc_82257DD0:
	// stwcx. r10,0,r8
	cr0.getLT() = 0;
	cr0.getGT() = 0;
	cr0.getEQ() = __sync_bool_compare_and_swap(reinterpret_cast<uint32_t*>(base + ctx.r8.u32), reserved.s32, __builtin_bswap32(ctx.r10.s32));
	cr0.getSO() = xer.so;
	// mtmsrd r9,1
loc_82257DD8:
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x82257da0
	if (cr6.getEQ()) goto loc_82257DA0;
	// addi r11,r31,36
	r11.s64 = r31.s64 + 36;
	// addi r10,r31,36
	ctx.r10.s64 = r31.s64 + 36;
	// addi r7,r31,36
	ctx.r7.s64 = r31.s64 + 36;
	// addi r6,r31,40
	ctx.r6.s64 = r31.s64 + 40;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
loc_82257E04:
	// mfmsr r8
	// mtmsrd r13,1
	// lwarx r9,0,r6
	reserved.u32 = *(uint32_t*)(base + ctx.r6.u32);
	ctx.r9.u64 = __builtin_bswap32(reserved.u32);
	// stwcx. r30,0,r6
	cr0.getLT() = 0;
	cr0.getGT() = 0;
	cr0.getEQ() = __sync_bool_compare_and_swap(reinterpret_cast<uint32_t*>(base + ctx.r6.u32), reserved.s32, __builtin_bswap32(r30.s32));
	cr0.getSO() = xer.so;
	// mtmsrd r8,1
	// bne 0x82257e04
	if (!cr0.getEQ()) goto loc_82257E04;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82257E28"))) PPC_WEAK_FUNC(sub_82257E28);
PPC_FUNC_IMPL(__imp__sub_82257E28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmplwi cr6,r4,3
	cr6.compare<uint32_t>(ctx.r4.u32, 3, xer);
	// bne cr6,0x82257e78
	if (!cr6.getEQ()) goto loc_82257E78;
	// cmplwi cr6,r7,1
	cr6.compare<uint32_t>(ctx.r7.u32, 1, xer);
	// bge cr6,0x82257e44
	if (!cr6.getLT()) goto loc_82257E44;
	// lis r3,-32768
	ctx.r3.s64 = -2147483648;
	// ori r3,r3,16389
	ctx.r3.u64 = ctx.r3.u64 | 16389;
	// blr 
	return;
loc_82257E44:
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmplwi r9,0
	cr0.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq 0x82257e78
	if (cr0.getEQ()) goto loc_82257E78;
loc_82257E58:
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r8,r8,20
	ctx.r8.u64 = ctx.r8.u32 & 0xFFF;
	// cmplw cr6,r8,r5
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r5.u32, xer);
	// beq cr6,0x82257e80
	if (cr6.getEQ()) goto loc_82257E80;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82257e58
	if (cr6.getLT()) goto loc_82257E58;
loc_82257E78:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
loc_82257E80:
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// li r3,0
	ctx.r3.s64 = 0;
	// rlwinm r10,r11,24,24,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0xF0;
	// rlwinm r11,r11,16,28,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xF;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// stb r11,0(r6)
	PPC_STORE_U8(ctx.r6.u32 + 0, r11.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82257EA0"))) PPC_WEAK_FUNC(sub_82257EA0);
PPC_FUNC_IMPL(__imp__sub_82257EA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x82257eb0
	if (cr6.getEQ()) goto loc_82257EB0;
	// li r11,1
	r11.s64 = 1;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_82257EB0:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82257EB8"))) PPC_WEAK_FUNC(sub_82257EB8);
PPC_FUNC_IMPL(__imp__sub_82257EB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lhz r11,4(r5)
	r11.u64 = PPC_LOAD_U16(ctx.r5.u32 + 4);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// lhz r11,6(r5)
	r11.u64 = PPC_LOAD_U16(ctx.r5.u32 + 6);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// lhz r11,8(r5)
	r11.u64 = PPC_LOAD_U16(ctx.r5.u32 + 8);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// lwz r11,16(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 16);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// bne 0x82257ef0
	if (!cr0.getEQ()) goto loc_82257EF0;
	// li r11,0
	r11.s64 = 0;
loc_82257EF0:
	// stw r11,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, r11.u32);
	// lhz r11,6(r6)
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + 6);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// lhz r11,4(r6)
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + 4);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// lhz r11,0(r6)
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + 0);
	// stw r11,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, r11.u32);
	// lhz r11,2(r6)
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + 2);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// lhz r11,8(r6)
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + 8);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// lhz r11,10(r6)
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + 10);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82257F28"))) PPC_WEAK_FUNC(sub_82257F28);
PPC_FUNC_IMPL(__imp__sub_82257F28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82257f4c
	if (!cr6.getEQ()) goto loc_82257F4C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x82257f74
	goto loc_82257F74;
loc_82257F4C:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82257f74
	if (cr6.getEQ()) goto loc_82257F74;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x8209d060
	sub_8209D060(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
loc_82257F74:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82257F88"))) PPC_WEAK_FUNC(sub_82257F88);
PPC_FUNC_IMPL(__imp__sub_82257F88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-20196
	r30.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// addi r29,r11,-19856
	r29.s64 = r11.s64 + -19856;
	// bne cr6,0x82257fd4
	if (!cr6.getEQ()) goto loc_82257FD4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,411
	ctx.r7.s64 = 411;
	// addi r5,r11,-19872
	ctx.r5.s64 = r11.s64 + -19872;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82257FD4:
	// lwz r11,68(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// cmplw cr6,r27,r11
	cr6.compare<uint32_t>(r27.u32, r11.u32, xer);
	// blt cr6,0x82257ffc
	if (cr6.getLT()) goto loc_82257FFC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,411
	ctx.r7.s64 = 411;
	// addi r5,r11,-19928
	ctx.r5.s64 = r11.s64 + -19928;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82257FFC:
	// lwz r11,80(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// rlwinm r28,r27,3,0,28
	r28.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r10,76(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// lwzx r11,r11,r28
	r11.u64 = PPC_LOAD_U32(r11.u32 + r28.u32);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82258030
	if (cr6.getLT()) goto loc_82258030;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,411
	ctx.r7.s64 = 411;
	// addi r5,r11,-20016
	ctx.r5.s64 = r11.s64 + -20016;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82258030:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// rlwinm r10,r27,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// li r8,1
	ctx.r8.s64 = 1;
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// stw r11,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r11.u32);
	// stwx r26,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, r26.u32);
	// lwz r11,80(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// lwzx r11,r11,r28
	r11.u64 = PPC_LOAD_U32(r11.u32 + r28.u32);
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// slw r8,r8,r11
	ctx.r8.u64 = r11.u8 & 0x20 ? 0 : (ctx.r8.u32 << (r11.u8 & 0x3F));
	// rlwinm r11,r9,29,3,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 29) & 0x1FFFFFFC;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// or r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 | ctx.r9.u64;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82258080"))) PPC_WEAK_FUNC(sub_82258080);
PPC_FUNC_IMPL(__imp__sub_82258080) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// lwz r11,72(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 72);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r28,r11,-20196
	r28.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r27,r11,-19856
	r27.s64 = r11.s64 + -19856;
	// blt cr6,0x822580d4
	if (cr6.getLT()) goto loc_822580D4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,557
	ctx.r7.s64 = 557;
	// addi r5,r11,-19704
	ctx.r5.s64 = r11.s64 + -19704;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822580D4:
	// lwz r11,84(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// mulli r30,r30,12
	r30.s64 = r30.s64 * 12;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// blt cr6,0x82258108
	if (cr6.getLT()) goto loc_82258108;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,557
	ctx.r7.s64 = 557;
	// addi r5,r11,-19776
	ctx.r5.s64 = r11.s64 + -19776;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82258108:
	// lwz r11,84(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// ori r9,r10,1
	ctx.r9.u64 = ctx.r10.u64 | 1;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mullw r10,r10,r29
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r29.s32);
	// stw r9,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r9.u32);
	// add r4,r10,r11
	ctx.r4.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x82257f88
	sub_82257F88(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82258140"))) PPC_WEAK_FUNC(sub_82258140);
PPC_FUNC_IMPL(__imp__sub_82258140) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x82258174
	if (cr0.getEQ()) goto loc_82258174;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// bl 0x8209d060
	sub_8209D060(ctx, base);
	// stw r30,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r30.u32);
loc_82258174:
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// stw r30,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82258198"))) PPC_WEAK_FUNC(sub_82258198);
PPC_FUNC_IMPL(__imp__sub_82258198) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed10c
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r19,r5
	r19.u64 = ctx.r5.u64;
	// mr r18,r6
	r18.u64 = ctx.r6.u64;
	// mr r25,r8
	r25.u64 = ctx.r8.u64;
	// clrlwi. r11,r7,24
	r11.u64 = ctx.r7.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r17,1
	r17.s64 = 1;
	// li r27,-1
	r27.s64 = -1;
	// beq 0x822582ac
	if (cr0.getEQ()) goto loc_822582AC;
	// mr r28,r27
	r28.u64 = r27.u64;
	// li r30,0
	r30.s64 = 0;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x822582ac
	if (cr6.getEQ()) goto loc_822582AC;
loc_822581D8:
	// cmplw cr6,r30,r28
	cr6.compare<uint32_t>(r30.u32, r28.u32, xer);
	// bge cr6,0x822582ac
	if (!cr6.getLT()) goto loc_822582AC;
	// li r11,6
	r11.s64 = 6;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// divwu r7,r30,r11
	ctx.r7.u32 = r30.u32 / r11.u32;
	// rlwinm r9,r7,31,1,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r11,r7,3,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0x8;
	// mulli r9,r9,12
	ctx.r9.s64 = ctx.r9.s64 * 12;
	// add r31,r9,r26
	r31.u64 = ctx.r9.u64 + r26.u64;
	// add r3,r11,r10
	ctx.r3.u64 = r11.u64 + ctx.r10.u64;
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r8,r10,16,0,15
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF0000;
	// stw r9,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r9.u32);
	// rlwinm r9,r11,16,16,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// or r11,r8,r9
	r11.u64 = ctx.r8.u64 | ctx.r9.u64;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// rlwinm r11,r10,16,16,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// rlwinm r11,r11,20,28,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0xF;
	// slw r11,r17,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (r17.u32 << (r11.u8 & 0x3F));
	// andi. r11,r11,24702
	r11.u64 = r11.u64 & 24702;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225825c
	if (cr0.getEQ()) goto loc_8225825C;
	// cmpwi cr6,r28,-1
	cr6.compare<int32_t>(r28.s32, -1, xer);
	// bne cr6,0x8225825c
	if (!cr6.getEQ()) goto loc_8225825C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// clrlwi r11,r11,20
	r11.u64 = r11.u32 & 0xFFF;
	// mulli r28,r11,12
	r28.s64 = r11.s64 * 12;
loc_8225825C:
	// mr r8,r18
	ctx.r8.u64 = r18.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mtctr r19
	ctr.u64 = r19.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// rlwimi r10,r11,16,0,15
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0xFFFF0000) | (ctx.r10.u64 & 0xFFFFFFFF0000FFFF);
	// lwz r8,96(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// rlwinm r9,r9,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF0000;
	// rlwinm r11,r11,16,16,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// cmplw cr6,r30,r29
	cr6.compare<uint32_t>(r30.u32, r29.u32, xer);
	// or r11,r9,r11
	r11.u64 = ctx.r9.u64 | r11.u64;
	// stw r8,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r8.u32);
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// blt cr6,0x822581d8
	if (cr6.getLT()) goto loc_822581D8;
loc_822582AC:
	// clrlwi. r11,r25,24
	r11.u64 = r25.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822583ec
	if (cr0.getEQ()) goto loc_822583EC;
	// lwz r24,80(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r23,r27
	r23.u64 = r27.u64;
	// add r21,r26,r29
	r21.u64 = r26.u64 + r29.u64;
loc_822582C0:
	// li r25,-1
	r25.s64 = -1;
	// li r20,0
	r20.s64 = 0;
	// mr r22,r26
	r22.u64 = r26.u64;
	// cmplw cr6,r26,r21
	cr6.compare<uint32_t>(r26.u32, r21.u32, xer);
	// bge cr6,0x822583ec
	if (!cr6.getLT()) goto loc_822583EC;
loc_822582D4:
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// srawi r11,r25,1
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x1) != 0);
	r11.s64 = r25.s32 >> 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// cmplw cr6,r11,r23
	cr6.compare<uint32_t>(r11.u32, r23.u32, xer);
	// beq cr6,0x822583e4
	if (cr6.getEQ()) goto loc_822583E4;
	// mulli r11,r11,12
	r11.s64 = r11.s64 * 12;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// rlwinm r10,r25,3,28,28
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 3) & 0x8;
	// addi r9,r1,112
	ctx.r9.s64 = ctx.r1.s64 + 112;
	// add r31,r10,r9
	r31.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r8,r9,16,0,15
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF0000;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// rlwinm r11,r10,16,16,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// rlwinm r11,r9,16,16,31
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// lwz r30,4(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm. r11,r30,0,20,20
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x800;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225833c
	if (cr0.getEQ()) goto loc_8225833C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225833C:
	// rlwinm r11,r30,20,28,31
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 20) & 0xF;
	// slw r11,r17,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (r17.u32 << (r11.u8 & 0x3F));
	// andi. r11,r11,24702
	r11.u64 = r11.u64 & 24702;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x822583d8
	if (cr0.getEQ()) goto loc_822583D8;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// clrlwi r31,r11,20
	r31.u64 = r11.u32 & 0xFFF;
	// bne cr6,0x82258368
	if (!cr6.getEQ()) goto loc_82258368;
	// mr r23,r31
	r23.u64 = r31.u64;
	// mr r24,r31
	r24.u64 = r31.u64;
loc_82258368:
	// rlwinm r9,r30,4,26,27
	ctx.r9.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 4) & 0x30;
	// rlwinm r8,r11,4,28,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xF;
	// mulli r10,r31,12
	ctx.r10.s64 = r31.s64 * 12;
	// rlwinm. r27,r11,20,29,31
	r27.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0x7;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// rlwinm r29,r11,16,20,31
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFF;
	// or r30,r9,r8
	r30.u64 = ctx.r9.u64 | ctx.r8.u64;
	// add r28,r10,r26
	r28.u64 = ctx.r10.u64 + r26.u64;
	// beq 0x822583d8
	if (cr0.getEQ()) goto loc_822583D8;
loc_82258388:
	// clrlwi r5,r29,31
	ctx.r5.u64 = r29.u32 & 0x1;
	// clrlwi r6,r30,31
	ctx.r6.u64 = r30.u32 & 0x1;
	// rlwinm r30,r30,31,1,31
	r30.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r29,r29,30,2,31
	r29.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 30) & 0x3FFFFFFF;
	// cmplw cr6,r31,r24
	cr6.compare<uint32_t>(r31.u32, r24.u32, xer);
	// bne cr6,0x822583c0
	if (!cr6.getEQ()) goto loc_822583C0;
	// mr r8,r18
	ctx.r8.u64 = r18.u64;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mtctr r19
	ctr.u64 = r19.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r24,r31,1
	r24.s64 = r31.s64 + 1;
	// b 0x822583c8
	goto loc_822583C8;
loc_822583C0:
	// ble cr6,0x822583c8
	if (!cr6.getGT()) goto loc_822583C8;
	// mr r20,r17
	r20.u64 = r17.u64;
loc_822583C8:
	// addic. r27,r27,-1
	xer.ca = r27.u32 > 0;
	r27.s64 = r27.s64 + -1;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// addi r28,r28,12
	r28.s64 = r28.s64 + 12;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// bne 0x82258388
	if (!cr0.getEQ()) goto loc_82258388;
loc_822583D8:
	// addi r22,r22,6
	r22.s64 = r22.s64 + 6;
	// cmplw cr6,r22,r21
	cr6.compare<uint32_t>(r22.u32, r21.u32, xer);
	// blt cr6,0x822582d4
	if (cr6.getLT()) goto loc_822582D4;
loc_822583E4:
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// bne cr6,0x822582c0
	if (!cr6.getEQ()) goto loc_822582C0;
loc_822583EC:
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x823ed15c
	return;
}

__attribute__((alias("__imp__sub_822583F8"))) PPC_WEAK_FUNC(sub_822583F8);
PPC_FUNC_IMPL(__imp__sub_822583F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r24,r4
	r24.u64 = ctx.r4.u64;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// mr r23,r6
	r23.u64 = ctx.r6.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// li r31,0
	r31.s64 = 0;
	// li r27,0
	r27.s64 = 0;
	// bl 0x82269d20
	sub_82269D20(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// bl 0x82268c68
	sub_82268C68(ctx, base);
	// b 0x822584a4
	goto loc_822584A4;
loc_8225842C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82269010
	sub_82269010(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r11,r11,-1978
	r11.s64 = r11.s64 + -1978;
	// cmplwi cr6,r11,13
	cr6.compare<uint32_t>(r11.u32, 13, xer);
	// bgt cr6,0x82258494
	if (cr6.getGT()) goto loc_82258494;
	// lis r12,-32251
	r12.s64 = -2113601536;
	// addi r12,r12,-19640
	r12.s64 = r12.s64 + -19640;
	// lbzx r0,r12,r11
	r0.u64 = PPC_LOAD_U8(r12.u32 + r11.u32);
	// rlwinm r0,r0,2,0,29
	r0.u64 = __builtin_rotateleft64(r0.u32 | (r0.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r12,-32218
	r12.s64 = -2111438848;
	// addi r12,r12,-31632
	r12.s64 = r12.s64 + -31632;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82258470;
	case 1:
		goto loc_82258528;
	case 2:
		goto loc_8225848C;
	case 3:
		goto loc_82258540;
	case 4:
		goto loc_8225854C;
	case 5:
		goto loc_82258564;
	case 6:
		goto loc_822584E0;
	case 7:
		goto loc_822584F8;
	case 8:
		goto loc_8225857C;
	case 9:
		goto loc_82258510;
	case 10:
		goto loc_82258494;
	case 11:
		goto loc_822585B4;
	case 12:
		goto loc_82258494;
	case 13:
		goto loc_82258594;
	default:
		__builtin_unreachable();
	}
loc_82258470:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225847c
	if (cr0.getEQ()) goto loc_8225847C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225847C:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwimi r11,r31,0,0,25
	r11.u64 = (__builtin_rotateleft32(r31.u32, 0) & 0xFFFFFFC0) | (r11.u64 & 0xFFFFFFFF0000003F);
	// mr r31,r11
	r31.u64 = r11.u64;
	// b 0x82258498
	goto loc_82258498;
loc_8225848C:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82258498
	if (cr0.getEQ()) goto loc_82258498;
loc_82258494:
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82258498:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82268f68
	sub_82268F68(ctx, base);
loc_822584A4:
	// mr. r29,r3
	r29.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// bne 0x8225842c
	if (!cr0.getEQ()) goto loc_8225842C;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x8218ce38
	sub_8218CE38(ctx, base);
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x822584c8
	if (cr6.getEQ()) goto loc_822584C8;
	// stw r31,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r31.u32);
loc_822584C8:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x822584d4
	if (cr6.getEQ()) goto loc_822584D4;
	// stw r27,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r27.u32);
loc_822584D4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
loc_822584E0:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822584ec
	if (cr0.getEQ()) goto loc_822584EC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822584EC:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwimi r31,r11,20,8,11
	r31.u64 = (__builtin_rotateleft32(r11.u32, 20) & 0xF00000) | (r31.u64 & 0xFFFFFFFFFF0FFFFF);
	// b 0x82258498
	goto loc_82258498;
loc_822584F8:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82258504
	if (cr0.getEQ()) goto loc_82258504;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82258504:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwimi r31,r11,24,5,7
	r31.u64 = (__builtin_rotateleft32(r11.u32, 24) & 0x7000000) | (r31.u64 & 0xFFFFFFFFF8FFFFFF);
	// b 0x82258498
	goto loc_82258498;
loc_82258510:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225851c
	if (cr0.getEQ()) goto loc_8225851C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225851C:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwimi r31,r11,31,0,0
	r31.u64 = (__builtin_rotateleft32(r11.u32, 31) & 0x80000000) | (r31.u64 & 0xFFFFFFFF7FFFFFFF);
	// b 0x82258498
	goto loc_82258498;
loc_82258528:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82258534
	if (!cr0.getEQ()) goto loc_82258534;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82258534:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwimi r31,r11,8,18,23
	r31.u64 = (__builtin_rotateleft32(r11.u32, 8) & 0x3F00) | (r31.u64 & 0xFFFFFFFFFFFFC0FF);
	// b 0x82258498
	goto loc_82258498;
loc_82258540:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82258498
	if (!cr0.getEQ()) goto loc_82258498;
	// b 0x82258494
	goto loc_82258494;
loc_8225854C:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82258558
	if (!cr0.getEQ()) goto loc_82258558;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82258558:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwimi r31,r11,18,13,13
	r31.u64 = (__builtin_rotateleft32(r11.u32, 18) & 0x40000) | (r31.u64 & 0xFFFFFFFFFFFBFFFF);
	// b 0x82258498
	goto loc_82258498;
loc_82258564:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82258570
	if (!cr0.getEQ()) goto loc_82258570;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82258570:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwimi r31,r11,19,12,12
	r31.u64 = (__builtin_rotateleft32(r11.u32, 19) & 0x80000) | (r31.u64 & 0xFFFFFFFFFFF7FFFF);
	// b 0x82258498
	goto loc_82258498;
loc_8225857C:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82258588
	if (!cr0.getEQ()) goto loc_82258588;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82258588:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwimi r31,r11,27,1,4
	r31.u64 = (__builtin_rotateleft32(r11.u32, 27) & 0x78000000) | (r31.u64 & 0xFFFFFFFF87FFFFFF);
	// b 0x82258498
	goto loc_82258498;
loc_82258594:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822585a0
	if (!cr0.getEQ()) goto loc_822585A0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822585A0:
	// lbz r11,7(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 7);
	// rlwinm r10,r27,0,24,15
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0xFFFFFFFFFFFF00FF;
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r27,r11,r10
	r27.u64 = r11.u64 | ctx.r10.u64;
	// b 0x82258498
	goto loc_82258498;
loc_822585B4:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822585c0
	if (!cr0.getEQ()) goto loc_822585C0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822585C0:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwimi r27,r11,1,30,30
	r27.u64 = (__builtin_rotateleft32(r11.u32, 1) & 0x2) | (r27.u64 & 0xFFFFFFFFFFFFFFFD);
	// b 0x82258498
	goto loc_82258498;
}

__attribute__((alias("__imp__sub_822585D0"))) PPC_WEAK_FUNC(sub_822585D0);
PPC_FUNC_IMPL(__imp__sub_822585D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r20,0
	r20.s64 = 0;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// li r5,32
	ctx.r5.s64 = 32;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,8
	ctx.r3.s64 = r31.s64 + 8;
	// stw r20,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r20.u32);
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// addi r28,r31,40
	r28.s64 = r31.s64 + 40;
	// li r5,32
	ctx.r5.s64 = 32;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// li r5,256
	ctx.r5.s64 = 256;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,72
	ctx.r3.s64 = r31.s64 + 72;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// li r5,256
	ctx.r5.s64 = 256;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,328
	ctx.r3.s64 = r31.s64 + 328;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// li r5,4096
	ctx.r5.s64 = 4096;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,584
	ctx.r3.s64 = r31.s64 + 584;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// li r10,255
	ctx.r10.s64 = 255;
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// stb r20,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r20.u8);
	// add r29,r30,r29
	r29.u64 = r30.u64 + r29.u64;
	// stw r10,4680(r31)
	PPC_STORE_U32(r31.u32 + 4680, ctx.r10.u32);
	// b 0x822586c8
	goto loc_822586C8;
loc_82258664:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,65535
	cr6.compare<uint32_t>(ctx.r10.u32, 65535, xer);
	// beq cr6,0x822586d0
	if (cr6.getEQ()) goto loc_822586D0;
	// addi r30,r11,4
	r30.s64 = r11.s64 + 4;
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,65534
	cr6.compare<uint32_t>(r11.u32, 65534, xer);
	// bne cr6,0x8225868c
	if (!cr6.getEQ()) goto loc_8225868C;
	// rlwinm r11,r10,18,15,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 18) & 0x1FFFC;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// b 0x822586c8
	goto loc_822586C8;
loc_8225868C:
	// cmplwi cr6,r11,81
	cr6.compare<uint32_t>(r11.u32, 81, xer);
	// bne cr6,0x822586a4
	if (!cr6.getEQ()) goto loc_822586A4;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lbz r4,3(r30)
	ctx.r4.u64 = PPC_LOAD_U8(r30.u32 + 3);
	// bl 0x82257508
	sub_82257508(ctx, base);
	// b 0x822586ac
	goto loc_822586AC;
loc_822586A4:
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bne cr6,0x822586b4
	if (!cr6.getEQ()) goto loc_822586B4;
loc_822586AC:
	// addi r11,r30,20
	r11.s64 = r30.s64 + 20;
	// b 0x822586c8
	goto loc_822586C8;
loc_822586B4:
	// cmplwi cr6,r11,47
	cr6.compare<uint32_t>(r11.u32, 47, xer);
	// beq cr6,0x822586c4
	if (cr6.getEQ()) goto loc_822586C4;
	// cmplwi cr6,r11,31
	cr6.compare<uint32_t>(r11.u32, 31, xer);
	// bne cr6,0x822586d0
	if (!cr6.getEQ()) goto loc_822586D0;
loc_822586C4:
	// addi r11,r30,8
	r11.s64 = r30.s64 + 8;
loc_822586C8:
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// blt cr6,0x82258664
	if (cr6.getLT()) goto loc_82258664;
loc_822586D0:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82257930
	sub_82257930(ctx, base);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8226a450
	sub_8226A450(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x8226ada8
	sub_8226ADA8(ctx, base);
	// mr. r21,r3
	r21.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r21.s32, 0, xer);
	// beq 0x822587f0
	if (cr0.getEQ()) goto loc_822587F0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r23,r11,-19560
	r23.s64 = r11.s64 + -19560;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r26,r11,-20196
	r26.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r22,r11,-19604
	r22.s64 = r11.s64 + -19604;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r25,r11,-20104
	r25.s64 = r11.s64 + -20104;
loc_82258718:
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lbz r24,0(r10)
	r24.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// rlwinm r28,r11,12,28,31
	r28.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xF;
	// cmplwi cr6,r28,16
	cr6.compare<uint32_t>(r28.u32, 16, xer);
	// blt cr6,0x82258748
	if (cr6.getLT()) goto loc_82258748;
	// li r7,910
	ctx.r7.s64 = 910;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82258748:
	// mr r29,r20
	r29.u64 = r20.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x822587e0
	if (cr6.getEQ()) goto loc_822587E0;
	// mr r30,r20
	r30.u64 = r20.u64;
	// mr r27,r20
	r27.u64 = r20.u64;
loc_8225875C:
	// clrlwi. r11,r28,31
	r11.u64 = r28.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822587cc
	if (cr0.getEQ()) goto loc_822587CC;
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// rlwinm r11,r11,20,24,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0xFF;
	// srw r11,r11,r27
	r11.u64 = r27.u8 & 0x20 ? 0 : (r11.u32 >> (r27.u8 & 0x3F));
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x822587b0
	if (cr6.getLT()) goto loc_822587B0;
	// beq cr6,0x822587cc
	if (cr6.getEQ()) goto loc_822587CC;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// blt cr6,0x822587a8
	if (cr6.getLT()) goto loc_822587A8;
	// li r7,1006
	ctx.r7.s64 = 1006;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// b 0x822587cc
	goto loc_822587CC;
loc_822587A8:
	// mr r28,r20
	r28.u64 = r20.u64;
	// b 0x822587cc
	goto loc_822587CC;
loc_822587B0:
	// rlwinm r11,r24,2,0,29
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r30,r10
	ctx.r9.u64 = r30.u64 + ctx.r10.u64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// addi r11,r11,146
	r11.s64 = r11.s64 + 146;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lfs f0,4(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfsx f0,r11,r31
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + r31.u32, temp.u32);
loc_822587CC:
	// rlwinm. r28,r28,31,1,31
	r28.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 31) & 0x7FFFFFFF;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r27,r27,2
	r27.s64 = r27.s64 + 2;
	// addi r30,r30,8
	r30.s64 = r30.s64 + 8;
	// bne 0x8225875c
	if (!cr0.getEQ()) goto loc_8225875C;
loc_822587E0:
	// addi r10,r10,36
	ctx.r10.s64 = ctx.r10.s64 + 36;
	// addic. r21,r21,-1
	xer.ca = r21.u32 > 0;
	r21.s64 = r21.s64 + -1;
	cr0.compare<int32_t>(r21.s32, 0, xer);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// bne 0x82258718
	if (!cr0.getEQ()) goto loc_82258718;
loc_822587F0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_82258800"))) PPC_WEAK_FUNC(sub_82258800);
PPC_FUNC_IMPL(__imp__sub_82258800) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82258830
	if (cr0.getEQ()) goto loc_82258830;
	// lis r3,-30602
	ctx.r3.s64 = -2005532672;
	// ori r3,r3,2932
	ctx.r3.u64 = ctx.r3.u64 | 2932;
	// b 0x822588d0
	goto loc_822588D0;
loc_82258830:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// mulli r30,r11,20
	r30.s64 = r11.s64 * 20;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8209d000
	sub_8209D000(ctx, base);
	// mr. r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r4.s32, 0, xer);
	// bne 0x82258858
	if (!cr0.getEQ()) goto loc_82258858;
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,14
	ctx.r3.u64 = ctx.r3.u64 | 14;
	// b 0x822588d0
	goto loc_822588D0;
loc_82258858:
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// ble cr6,0x822588c4
	if (!cr6.getGT()) goto loc_822588C4;
	// addi r6,r31,72
	ctx.r6.s64 = r31.s64 + 72;
	// addi r5,r31,328
	ctx.r5.s64 = r31.s64 + 328;
loc_82258874:
	// lbzx r10,r5,r7
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r5.u32 + ctx.r7.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// li r8,4
	ctx.r8.s64 = 4;
	// lbzx r9,r6,r10
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r6.u32 + ctx.r10.u32);
	// rotlwi r10,r10,4
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 4);
	// sth r3,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r3.u16);
	// add r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 + r31.u64;
	// addi r10,r10,584
	ctx.r10.s64 = ctx.r10.s64 + 584;
	// sth r9,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r9.u16);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
loc_8225889C:
	// lfs f0,0(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	f0.f64 = double(temp.f32);
	// addic. r8,r8,-1
	xer.ca = ctx.r8.u32 > 0;
	ctx.r8.s64 = ctx.r8.s64 + -1;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stfs f0,0(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bne 0x8225889c
	if (!cr0.getEQ()) goto loc_8225889C;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// cmplw cr6,r7,r10
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r10.u32, xer);
	// blt cr6,0x82258874
	if (cr6.getLT()) goto loc_82258874;
loc_822588C4:
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r4,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r4.u32);
loc_822588D0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_822588D8"))) PPC_WEAK_FUNC(sub_822588D8);
PPC_FUNC_IMPL(__imp__sub_822588D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed110
	// stwu r1,-368(r1)
	ea = -368 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r19,r5
	r19.u64 = ctx.r5.u64;
	// mr r18,r3
	r18.u64 = ctx.r3.u64;
	// mr r20,r4
	r20.u64 = ctx.r4.u64;
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// bne cr6,0x8225890c
	if (!cr6.getEQ()) goto loc_8225890C;
	// li r6,144
	ctx.r6.s64 = 144;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
	// bl 0x82192358
	sub_82192358(ctx, base);
loc_8225890C:
	// li r22,0
	r22.s64 = 0;
	// li r23,0
	r23.s64 = 0;
	// li r21,-1
	r21.s64 = -1;
loc_82258918:
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// bl 0x82269b20
	sub_82269B20(ctx, base);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x82258a38
	if (!cr6.getEQ()) goto loc_82258A38;
	// cmplw cr6,r22,r23
	cr6.compare<uint32_t>(r22.u32, r23.u32, xer);
	// beq cr6,0x82258940
	if (cr6.getEQ()) goto loc_82258940;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82258940:
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// mr r27,r21
	r27.u64 = r21.u64;
	// mr r26,r21
	r26.u64 = r21.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r28,0
	r28.s64 = 0;
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// beq cr6,0x8225896c
	if (cr6.getEQ()) goto loc_8225896C;
	// lwz r11,228(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x82258970
	if (cr6.getEQ()) goto loc_82258970;
loc_8225896C:
	// li r11,0
	r11.s64 = 0;
loc_82258970:
	// clrlwi r24,r11,24
	r24.u64 = r11.u32 & 0xFF;
	// li r25,0
	r25.s64 = 0;
	// addi r31,r1,164
	r31.s64 = ctx.r1.s64 + 164;
loc_8225897C:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r30,-16(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + -16);
	// lwz r29,0(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82258a10
	if (cr6.getEQ()) goto loc_82258A10;
	// cmplw cr6,r30,r27
	cr6.compare<uint32_t>(r30.u32, r27.u32, xer);
	// bne cr6,0x822589a0
	if (!cr6.getEQ()) goto loc_822589A0;
	// cmplw cr6,r29,r26
	cr6.compare<uint32_t>(r29.u32, r26.u32, xer);
	// beq cr6,0x82258a04
	if (cr6.getEQ()) goto loc_82258A04;
loc_822589A0:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x822589bc
	if (cr6.getEQ()) goto loc_822589BC;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
	// bl 0x82192340
	sub_82192340(ctx, base);
	// li r28,0
	r28.s64 = 0;
loc_822589BC:
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// lwz r4,-48(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + -48);
	// addi r7,r1,84
	ctx.r7.s64 = ctx.r1.s64 + 84;
	// lwz r3,-32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -32);
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r27,r30
	r27.u64 = r30.u64;
	// mr r26,r29
	r26.u64 = r29.u64;
	// bl 0x822573e8
	sub_822573E8(ctx, base);
	// clrlwi r11,r24,24
	r11.u64 = r24.u32 & 0xFF;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// rlwimi r10,r11,4,27,27
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 4) & 0x10) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFFEF);
	// clrlwi r11,r10,27
	r11.u64 = ctx.r10.u32 & 0x1F;
	// rlwimi r6,r11,4,0,27
	ctx.r6.u64 = (__builtin_rotateleft32(r11.u32, 4) & 0xFFFFFFF0) | (ctx.r6.u64 & 0xFFFFFFFF0000000F);
loc_82258A04:
	// li r11,1
	r11.s64 = 1;
	// slw r11,r11,r25
	r11.u64 = r25.u8 & 0x20 ? 0 : (r11.u32 << (r25.u8 & 0x3F));
	// or r28,r11,r28
	r28.u64 = r11.u64 | r28.u64;
loc_82258A10:
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// cmplwi cr6,r25,4
	cr6.compare<uint32_t>(r25.u32, 4, xer);
	// blt cr6,0x8225897c
	if (cr6.getLT()) goto loc_8225897C;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82258a38
	if (cr6.getEQ()) goto loc_82258A38;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
	// bl 0x82192340
	sub_82192340(ctx, base);
loc_82258A38:
	// addi r23,r23,1
	r23.s64 = r23.s64 + 1;
	// cmplwi cr6,r23,16
	cr6.compare<uint32_t>(r23.u32, 16, xer);
	// blt cr6,0x82258918
	if (cr6.getLT()) goto loc_82258918;
	// addi r1,r1,368
	ctx.r1.s64 = ctx.r1.s64 + 368;
	// b 0x823ed160
	return;
}

__attribute__((alias("__imp__sub_82258A50"))) PPC_WEAK_FUNC(sub_82258A50);
PPC_FUNC_IMPL(__imp__sub_82258A50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r3,20(r8)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + 20);
	// clrlwi. r10,r4,24
	ctx.r10.u64 = ctx.r4.u32 & 0xFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82258b94
	if (cr0.getEQ()) goto loc_82258B94;
	// clrlwi. r10,r5,24
	ctx.r10.u64 = ctx.r5.u32 & 0xFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r7,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r7.u32);
	// beq 0x82258b38
	if (cr0.getEQ()) goto loc_82258B38;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi. r9,r10,27
	ctx.r9.u64 = ctx.r10.u32 & 0x1F;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x82258ab0
	if (cr0.getEQ()) goto loc_82258AB0;
	// cmplwi cr6,r9,1
	cr6.compare<uint32_t>(ctx.r9.u32, 1, xer);
	// bne cr6,0x82258aa4
	if (!cr6.getEQ()) goto loc_82258AA4;
	// lwz r9,24(r8)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + 24);
	// rlwinm r10,r10,12,27,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 12) & 0x1F;
	// lwz r8,8(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lbzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// rlwimi r8,r10,14,16,17
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r10.u32, 14) & 0xC000) | (ctx.r8.u64 & 0xFFFFFFFFFFFF3FFF);
	// stw r8,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r8.u32);
loc_82258AA4:
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// bl 0x821929e0
	sub_821929E0(ctx, base);
	// b 0x82258bd4
	goto loc_82258BD4;
loc_82258AB0:
	// lwz r9,8(r8)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + 8);
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x82258b28
	if (cr0.getEQ()) goto loc_82258B28;
loc_82258AC0:
	// clrlwi r10,r10,20
	ctx.r10.u64 = ctx.r10.u32 & 0xFFF;
	// cmplw cr6,r10,r7
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r7.u32, xer);
	// beq cr6,0x82258adc
	if (cr6.getEQ()) goto loc_82258ADC;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne 0x82258ac0
	if (!cr0.getEQ()) goto loc_82258AC0;
loc_82258ADC:
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82258b28
	if (cr6.getEQ()) goto loc_82258B28;
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// stw r8,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r8.u32);
	// li r8,209
	ctx.r8.s64 = 209;
	// rlwimi r10,r8,3,20,31
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r8.u32, 3) & 0xFFF) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF000);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// lwz r11,0(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// rlwimi r10,r11,24,20,23
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 24) & 0xF00) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF0FF);
	// rlwinm r5,r10,24,24,31
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFF;
	// bl 0x82192a10
	sub_82192A10(ctx, base);
	// b 0x82258bd4
	goto loc_82258BD4;
loc_82258B28:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// bl 0x821929f8
	sub_821929F8(ctx, base);
	// b 0x82258bd4
	goto loc_82258BD4;
loc_82258B38:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm. r10,r9,0,16,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82258b88
	if (cr0.getEQ()) goto loc_82258B88;
	// clrlwi r10,r9,26
	ctx.r10.u64 = ctx.r9.u32 & 0x3F;
	// cmplwi cr6,r10,63
	cr6.compare<uint32_t>(ctx.r10.u32, 63, xer);
	// bne cr6,0x82258b88
	if (!cr6.getEQ()) goto loc_82258B88;
	// lbz r8,12(r8)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r8.u32 + 12);
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// lis r7,-241
	ctx.r7.s64 = -15794176;
	// addi r10,r10,-19532
	ctx.r10.s64 = ctx.r10.s64 + -19532;
	// clrlwi r8,r8,29
	ctx.r8.u64 = ctx.r8.u32 & 0x7;
	// lis r6,-16
	ctx.r6.s64 = -1048576;
	// ori r7,r7,65535
	ctx.r7.u64 = ctx.r7.u64 | 65535;
	// ori r6,r6,65535
	ctx.r6.u64 = ctx.r6.u64 | 65535;
	// lbzx r10,r8,r10
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + ctx.r10.u32);
	// rlwimi r7,r10,20,8,11
	ctx.r7.u64 = (__builtin_rotateleft32(ctx.r10.u32, 20) & 0xF00000) | (ctx.r7.u64 & 0xFFFFFFFFFF0FFFFF);
	// rlwimi r6,r10,16,12,15
	ctx.r6.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xF0000) | (ctx.r6.u64 & 0xFFFFFFFFFFF0FFFF);
	// and r10,r7,r6
	ctx.r10.u64 = ctx.r7.u64 & ctx.r6.u64;
	// and r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ctx.r9.u64;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_82258B88:
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// bl 0x82192a28
	sub_82192A28(ctx, base);
	// b 0x82258bd4
	goto loc_82258BD4;
loc_82258B94:
	// ld r11,0(r11)
	r11.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// li r11,1
	r11.s64 = 1;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwinm r10,r10,20,28,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 20) & 0xF;
	// slw r11,r11,r10
	r11.u64 = ctx.r10.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r10.u8 & 0x3F));
	// andi. r11,r11,24702
	r11.u64 = r11.u64 & 24702;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82258bcc
	if (cr0.getEQ()) goto loc_82258BCC;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// rlwimi r10,r11,0,0,19
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 0) & 0xFFFFF000) | (ctx.r10.u64 & 0xFFFFFFFF00000FFF);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
loc_82258BCC:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x82192c38
	sub_82192C38(ctx, base);
loc_82258BD4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82258BE8"))) PPC_WEAK_FUNC(sub_82258BE8);
PPC_FUNC_IMPL(__imp__sub_82258BE8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// add r28,r31,r29
	r28.u64 = r31.u64 + r29.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// mr r23,r9
	r23.u64 = ctx.r9.u64;
	// mr r30,r31
	r30.u64 = r31.u64;
	// cmplw cr6,r31,r28
	cr6.compare<uint32_t>(r31.u32, r28.u32, xer);
	// bge cr6,0x82258cd8
	if (!cr6.getLT()) goto loc_82258CD8;
loc_82258C20:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r5,4
	ctx.r5.s64 = 4;
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// li r4,45
	ctx.r4.s64 = 45;
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// lwz r9,8(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// mr r22,r10
	r22.u64 = ctx.r10.u64;
	// rlwimi r7,r11,16,0,15
	ctx.r7.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0xFFFF0000) | (ctx.r7.u64 & 0xFFFFFFFF0000FFFF);
	// rlwimi r8,r11,16,16,31
	ctx.r8.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0xFFFF) | (ctx.r8.u64 & 0xFFFFFFFFFFFF0000);
	// rlwimi r6,r10,16,16,31
	ctx.r6.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFFFF) | (ctx.r6.u64 & 0xFFFFFFFFFFFF0000);
	// rlwimi r22,r10,16,0,15
	r22.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFFFF0000) | (r22.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r11,r8,24,16,31
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 24) & 0xFFFF;
	// rlwinm r10,r7,8,0,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 8) & 0xFFFF0000;
	// mr r21,r9
	r21.u64 = ctx.r9.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// mr r20,r9
	r20.u64 = ctx.r9.u64;
	// rlwimi r21,r9,16,16,31
	r21.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0xFFFF) | (r21.u64 & 0xFFFFFFFFFFFF0000);
	// rlwimi r20,r9,16,0,15
	r20.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0xFFFF0000) | (r20.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r9,r6,24,16,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 24) & 0xFFFF;
	// rlwinm r8,r22,8,0,15
	ctx.r8.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 8) & 0xFFFF0000;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// rlwinm r7,r21,24,16,31
	ctx.r7.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 24) & 0xFFFF;
	// or r11,r9,r8
	r11.u64 = ctx.r9.u64 | ctx.r8.u64;
	// rlwinm r6,r20,8,0,15
	ctx.r6.u64 = __builtin_rotateleft64(r20.u32 | (r20.u64 << 32), 8) & 0xFFFF0000;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// or r11,r7,r6
	r11.u64 = ctx.r7.u64 | ctx.r6.u64;
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble 0x82258cac
	if (!cr0.getGT()) goto loc_82258CAC;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// ble cr6,0x82258d28
	if (!cr6.getGT()) goto loc_82258D28;
loc_82258CAC:
	// li r5,4
	ctx.r5.s64 = 4;
	// li r4,45
	ctx.r4.s64 = 45;
	// addi r3,r1,86
	ctx.r3.s64 = ctx.r1.s64 + 86;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble 0x82258ccc
	if (!cr0.getGT()) goto loc_82258CCC;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// ble cr6,0x82258d40
	if (!cr6.getGT()) goto loc_82258D40;
loc_82258CCC:
	// addi r30,r30,12
	r30.s64 = r30.s64 + 12;
	// cmplw cr6,r30,r28
	cr6.compare<uint32_t>(r30.u32, r28.u32, xer);
	// blt cr6,0x82258c20
	if (cr6.getLT()) goto loc_82258C20;
loc_82258CD8:
	// li r11,12
	r11.s64 = 12;
	// divwu r10,r29,r11
	ctx.r10.u32 = r29.u32 / r11.u32;
loc_82258CE0:
	// lis r11,-32218
	r11.s64 = -2111438848;
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// li r8,1
	ctx.r8.s64 = 1;
	// stw r26,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r26.u32);
	// addi r5,r11,-30128
	ctx.r5.s64 = r11.s64 + -30128;
	// stw r25,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r25.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r24,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r24.u32);
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r27,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r27.u32);
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// stw r23,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r23.u32);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// bl 0x82258198
	sub_82258198(ctx, base);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x823ed168
	return;
loc_82258D28:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
loc_82258D2C:
	// li r4,1
	ctx.r4.s64 = 1;
	// li r5,12
	ctx.r5.s64 = 12;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// b 0x82258ce0
	goto loc_82258CE0;
loc_82258D40:
	// addi r3,r1,86
	ctx.r3.s64 = ctx.r1.s64 + 86;
	// b 0x82258d2c
	goto loc_82258D2C;
}

__attribute__((alias("__imp__sub_82258D48"))) PPC_WEAK_FUNC(sub_82258D48);
PPC_FUNC_IMPL(__imp__sub_82258D48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// li r3,4684
	ctx.r3.s64 = 4684;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// mr r23,r8
	r23.u64 = ctx.r8.u64;
	// mr r25,r9
	r25.u64 = ctx.r9.u64;
	// mr r24,r10
	r24.u64 = ctx.r10.u64;
	// bl 0x8209d000
	sub_8209D000(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x82258da0
	if (!cr0.getEQ()) goto loc_82258DA0;
	// lis r28,-32761
	r28.s64 = -2147024896;
	// ori r28,r28,14
	r28.u64 = r28.u64 | 14;
	// b 0x82258e50
	goto loc_82258E50;
loc_82258DA0:
	// cntlzw r11,r24
	r11.u64 = r24.u32 == 0 ? 32 : __builtin_clz(r24.u32);
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// xori r8,r11,1
	ctx.r8.u64 = r11.u64 ^ 1;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822585d0
	sub_822585D0(ctx, base);
	// lis r11,-32219
	r11.s64 = -2111504384;
	// li r8,1
	ctx.r8.s64 = 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// addi r5,r11,31360
	ctx.r5.s64 = r11.s64 + 31360;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82258198
	sub_82258198(ctx, base);
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82258800
	sub_82258800(ctx, base);
	// lwz r27,80(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr. r28,r3
	r28.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// blt 0x82258e30
	if (cr0.getLT()) goto loc_82258E30;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r11,20
	r11.s64 = 20;
	// divwu. r29,r10,r11
	r29.u32 = ctx.r10.u32 / r11.u32;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// beq 0x82258e30
	if (cr0.getEQ()) goto loc_82258E30;
	// addi r30,r27,2
	r30.s64 = r27.s64 + 2;
loc_82258E14:
	// addi r5,r30,2
	ctx.r5.s64 = r30.s64 + 2;
	// lhz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U16(r30.u32 + 0);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x8218f308
	sub_8218F308(ctx, base);
	// addic. r29,r29,-1
	xer.ca = r29.u32 > 0;
	r29.s64 = r29.s64 + -1;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// addi r30,r30,20
	r30.s64 = r30.s64 + 20;
	// bne 0x82258e14
	if (!cr0.getEQ()) goto loc_82258E14;
loc_82258E30:
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8209d060
	sub_8209D060(ctx, base);
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82258e50
	if (cr6.getEQ()) goto loc_82258E50;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8209d060
	sub_8209D060(ctx, base);
loc_82258E50:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_82258E60"))) PPC_WEAK_FUNC(sub_82258E60);
PPC_FUNC_IMPL(__imp__sub_82258E60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r10,r4
	ctx.r10.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// li r5,32
	ctx.r5.s64 = 32;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// add r25,r11,r10
	r25.u64 = r11.u64 + ctx.r10.u64;
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// cmplw cr6,r31,r25
	cr6.compare<uint32_t>(r31.u32, r25.u32, xer);
	// std r30,0(r11)
	PPC_STORE_U64(r11.u32 + 0, r30.u64);
	// std r30,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, r30.u64);
	// std r30,8(r11)
	PPC_STORE_U64(r11.u32 + 8, r30.u64);
	// std r30,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, r30.u64);
	// std r30,16(r11)
	PPC_STORE_U64(r11.u32 + 16, r30.u64);
	// std r30,16(r10)
	PPC_STORE_U64(ctx.r10.u32 + 16, r30.u64);
	// std r30,24(r11)
	PPC_STORE_U64(r11.u32 + 24, r30.u64);
	// stw r30,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r30.u32);
	// std r30,24(r10)
	PPC_STORE_U64(ctx.r10.u32 + 24, r30.u64);
	// bge cr6,0x822590c8
	if (!cr6.getLT()) goto loc_822590C8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r26,1
	r26.s64 = 1;
	// addi r24,r11,-19524
	r24.s64 = r11.s64 + -19524;
loc_82258EE0:
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r9,65535
	cr6.compare<uint32_t>(ctx.r9.u32, 65535, xer);
	// beq cr6,0x822590c8
	if (cr6.getEQ()) goto loc_822590C8;
	// clrlwi r10,r9,16
	ctx.r10.u64 = ctx.r9.u32 & 0xFFFF;
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// cmplwi cr6,r10,31
	cr6.compare<uint32_t>(ctx.r10.u32, 31, xer);
	// beq cr6,0x82259068
	if (cr6.getEQ()) goto loc_82259068;
	// cmplwi cr6,r10,47
	cr6.compare<uint32_t>(ctx.r10.u32, 47, xer);
	// beq cr6,0x82258fec
	if (cr6.getEQ()) goto loc_82258FEC;
	// cmplwi cr6,r10,48
	cr6.compare<uint32_t>(ctx.r10.u32, 48, xer);
	// beq cr6,0x82258f84
	if (cr6.getEQ()) goto loc_82258F84;
	// cmplwi cr6,r10,81
	cr6.compare<uint32_t>(ctx.r10.u32, 81, xer);
	// beq cr6,0x82258f28
	if (cr6.getEQ()) goto loc_82258F28;
	// cmplwi cr6,r10,65534
	cr6.compare<uint32_t>(ctx.r10.u32, 65534, xer);
	// bne cr6,0x822590c8
	if (!cr6.getEQ()) goto loc_822590C8;
	// rlwinm r10,r9,18,15,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 18) & 0x1FFFC;
	// add r31,r10,r11
	r31.u64 = ctx.r10.u64 + r11.u64;
	// b 0x822590c0
	goto loc_822590C0;
loc_82258F28:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// clrlwi r4,r10,21
	ctx.r4.u64 = ctx.r10.u32 & 0x7FF;
	// cmplwi cr6,r4,256
	cr6.compare<uint32_t>(ctx.r4.u32, 256, xer);
	// bge cr6,0x822590d4
	if (!cr6.getLT()) goto loc_822590D4;
	// clrlwi r10,r4,27
	ctx.r10.u64 = ctx.r4.u32 & 0x1F;
	// rlwinm r11,r4,27,5,31
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 27) & 0x7FFFFFF;
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// slw r9,r26,r10
	ctx.r9.u64 = ctx.r10.u8 & 0x20 ? 0 : (r26.u32 << (ctx.r10.u8 & 0x3F));
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// and. r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ctx.r9.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x822590e0
	if (!cr0.getEQ()) goto loc_822590E0;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwzx r8,r11,r10
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// or r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 | ctx.r8.u64;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
	// bl 0x8218f308
	sub_8218F308(ctx, base);
loc_82258F7C:
	// addi r31,r31,16
	r31.s64 = r31.s64 + 16;
	// b 0x822590c0
	goto loc_822590C0;
loc_82258F84:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// clrlwi r11,r10,21
	r11.u64 = ctx.r10.u32 & 0x7FF;
	// cmplwi cr6,r11,16
	cr6.compare<uint32_t>(r11.u32, 16, xer);
	// bge cr6,0x822590ec
	if (!cr6.getLT()) goto loc_822590EC;
	// clrlwi r9,r11,27
	ctx.r9.u64 = r11.u32 & 0x1F;
	// rlwinm r10,r11,27,5,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x7FFFFFF;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// slw r8,r26,r9
	ctx.r8.u64 = ctx.r9.u8 & 0x20 ? 0 : (r26.u32 << (ctx.r9.u8 & 0x3F));
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r9,r7
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	// and. r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 & ctx.r8.u64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x822590f8
	if (!cr0.getEQ()) goto loc_822590F8;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// lwzx r7,r10,r9
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// or r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 | ctx.r7.u64;
	// stwx r8,r10,r9
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, ctx.r8.u32);
	// beq cr6,0x82258fdc
	if (cr6.getEQ()) goto loc_82258FDC;
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
loc_82258FDC:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82190b00
	sub_82190B00(ctx, base);
	// b 0x82258f7c
	goto loc_82258F7C;
loc_82258FEC:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r7,r11,4
	ctx.r7.s64 = r11.s64 + 4;
	// clrlwi r11,r10,21
	r11.u64 = ctx.r10.u32 & 0x7FF;
	// cmplwi cr6,r11,128
	cr6.compare<uint32_t>(r11.u32, 128, xer);
	// bge cr6,0x82259104
	if (!cr6.getLT()) goto loc_82259104;
	// clrlwi r9,r11,27
	ctx.r9.u64 = r11.u32 & 0x1F;
	// rlwinm r10,r11,27,5,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x7FFFFFF;
	// addi r6,r1,128
	ctx.r6.s64 = ctx.r1.s64 + 128;
	// slw r8,r26,r9
	ctx.r8.u64 = ctx.r9.u8 & 0x20 ? 0 : (r26.u32 << (ctx.r9.u8 & 0x3F));
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r9,r6
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r6.u32);
	// and. r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 & ctx.r8.u64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x82259110
	if (!cr0.getEQ()) goto loc_82259110;
	// addi r9,r1,128
	ctx.r9.s64 = ctx.r1.s64 + 128;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// lwzx r6,r10,r9
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// stwx r8,r10,r9
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, ctx.r8.u32);
	// beq cr6,0x82259044
	if (cr6.getEQ()) goto loc_82259044;
	// addi r4,r11,128
	ctx.r4.s64 = r11.s64 + 128;
loc_82259044:
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// addi r31,r7,4
	r31.s64 = ctx.r7.s64 + 4;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8225905c
	if (!cr6.getEQ()) goto loc_8225905C;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
loc_8225905C:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8218f2f0
	sub_8218F2F0(ctx, base);
	// b 0x822590c0
	goto loc_822590C0;
loc_82259068:
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r31,r10,4
	r31.s64 = ctx.r10.s64 + 4;
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// rlwimi r10,r11,12,21,23
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 12) & 0x700) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r10,r10,0,19,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r10,2560
	cr6.compare<uint32_t>(ctx.r10.u32, 2560, xer);
	// bne cr6,0x822590c0
	if (!cr6.getEQ()) goto loc_822590C0;
	// clrlwi r11,r11,21
	r11.u64 = r11.u32 & 0x7FF;
	// cmplwi cr6,r11,32
	cr6.compare<uint32_t>(r11.u32, 32, xer);
	// bge cr6,0x822590c0
	if (!cr6.getLT()) goto loc_822590C0;
	// rlwinm r10,r9,5,29,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 5) & 0x7;
	// addi r9,r10,-2
	ctx.r9.s64 = ctx.r10.s64 + -2;
	// cmplwi cr6,r9,2
	cr6.compare<uint32_t>(ctx.r9.u32, 2, xer);
	// bgt cr6,0x822590c0
	if (cr6.getGT()) goto loc_822590C0;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x822590b4
	if (!cr6.getEQ()) goto loc_822590B4;
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
loc_822590B4:
	// add r10,r10,r24
	ctx.r10.u64 = ctx.r10.u64 + r24.u64;
	// lbz r10,-2(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + -2);
	// stbx r10,r11,r27
	PPC_STORE_U8(r11.u32 + r27.u32, ctx.r10.u8);
loc_822590C0:
	// cmplw cr6,r31,r25
	cr6.compare<uint32_t>(r31.u32, r25.u32, xer);
	// blt cr6,0x82258ee0
	if (cr6.getLT()) goto loc_82258EE0;
loc_822590C8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_822590CC:
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x823ed178
	return;
loc_822590D4:
	// lis r3,-30602
	ctx.r3.s64 = -2005532672;
	// ori r3,r3,2935
	ctx.r3.u64 = ctx.r3.u64 | 2935;
	// b 0x822590cc
	goto loc_822590CC;
loc_822590E0:
	// lis r3,-30602
	ctx.r3.s64 = -2005532672;
	// ori r3,r3,2944
	ctx.r3.u64 = ctx.r3.u64 | 2944;
	// b 0x822590cc
	goto loc_822590CC;
loc_822590EC:
	// lis r3,-30602
	ctx.r3.s64 = -2005532672;
	// ori r3,r3,2934
	ctx.r3.u64 = ctx.r3.u64 | 2934;
	// b 0x822590cc
	goto loc_822590CC;
loc_822590F8:
	// lis r3,-30602
	ctx.r3.s64 = -2005532672;
	// ori r3,r3,2943
	ctx.r3.u64 = ctx.r3.u64 | 2943;
	// b 0x822590cc
	goto loc_822590CC;
loc_82259104:
	// lis r3,-30602
	ctx.r3.s64 = -2005532672;
	// ori r3,r3,2933
	ctx.r3.u64 = ctx.r3.u64 | 2933;
	// b 0x822590cc
	goto loc_822590CC;
loc_82259110:
	// lis r3,-30602
	ctx.r3.s64 = -2005532672;
	// ori r3,r3,2942
	ctx.r3.u64 = ctx.r3.u64 | 2942;
	// b 0x822590cc
	goto loc_822590CC;
}

__attribute__((alias("__imp__sub_82259120"))) PPC_WEAK_FUNC(sub_82259120);
PPC_FUNC_IMPL(__imp__sub_82259120) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed114
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// mr r22,r4
	r22.u64 = ctx.r4.u64;
	// mr r24,r5
	r24.u64 = ctx.r5.u64;
	// mr r21,r7
	r21.u64 = ctx.r7.u64;
	// mr r25,r8
	r25.u64 = ctx.r8.u64;
	// mr r19,r9
	r19.u64 = ctx.r9.u64;
	// mr r20,r10
	r20.u64 = ctx.r10.u64;
	// bl 0x82269a18
	sub_82269A18(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// addi r30,r27,8
	r30.s64 = r27.s64 + 8;
	// mr r28,r30
	r28.u64 = r30.u64;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// rlwinm r29,r11,2,0,29
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r31,r30,r29
	r31.u64 = r30.u64 + r29.u64;
	// cmplw cr6,r30,r31
	cr6.compare<uint32_t>(r30.u32, r31.u32, xer);
	// bge cr6,0x822591a0
	if (!cr6.getLT()) goto loc_822591A0;
loc_82259174:
	// li r5,4
	ctx.r5.s64 = 4;
	// li r4,45
	ctx.r4.s64 = 45;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble 0x82259194
	if (!cr0.getGT()) goto loc_82259194;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// ble cr6,0x822591e8
	if (!cr6.getGT()) goto loc_822591E8;
loc_82259194:
	// addi r28,r28,6
	r28.s64 = r28.s64 + 6;
	// cmplw cr6,r28,r31
	cr6.compare<uint32_t>(r28.u32, r31.u32, xer);
	// blt cr6,0x82259174
	if (cr6.getLT()) goto loc_82259174;
loc_822591A0:
	// li r11,12
	r11.s64 = 12;
	// divwu r3,r29,r11
	ctx.r3.u32 = r29.u32 / r11.u32;
loc_822591A8:
	// mulli r11,r3,12
	r11.s64 = ctx.r3.s64 * 12;
	// rlwinm. r10,r11,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// mr r11,r30
	r11.u64 = r30.u64;
	// beq 0x822591d0
	if (cr0.getEQ()) goto loc_822591D0;
loc_822591B8:
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lwbrx r9,0,r9
	ctx.r9.u64 = __builtin_bswap32(PPC_LOAD_U32(ctx.r9.u32));
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bne 0x822591b8
	if (!cr0.getEQ()) goto loc_822591B8;
loc_822591D0:
	// bl 0x82191708
	sub_82191708(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x822591fc
	if (!cr0.getEQ()) goto loc_822591FC;
	// lis r29,-32761
	r29.s64 = -2147024896;
	// ori r29,r29,14
	r29.u64 = r29.u64 | 14;
	// b 0x8225931c
	goto loc_8225931C;
loc_822591E8:
	// li r5,12
	ctx.r5.s64 = 12;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// b 0x822591a8
	goto loc_822591A8;
loc_822591FC:
	// li r4,50
	ctx.r4.s64 = 50;
	// stw r31,0(r21)
	PPC_STORE_U32(r21.u32 + 0, r31.u32);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x82259210
	if (cr6.getEQ()) goto loc_82259210;
	// li r4,54
	ctx.r4.s64 = 54;
loc_82259210:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821929d0
	sub_821929D0(ctx, base);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x822588d8
	sub_822588D8(ctx, base);
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r9,r26
	ctx.r9.u64 = r26.u64;
	// mr r8,r31
	ctx.r8.u64 = r31.u64;
	// mr r7,r24
	ctx.r7.u64 = r24.u64;
	// rlwinm r6,r11,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82258d48
	sub_82258D48(ctx, base);
	// mr. r29,r3
	r29.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// blt 0x8225931c
	if (cr0.getLT()) goto loc_8225931C;
	// addi r7,r1,96
	ctx.r7.s64 = ctx.r1.s64 + 96;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82258e60
	sub_82258E60(ctx, base);
	// mr. r29,r3
	r29.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// blt 0x8225931c
	if (cr0.getLT()) goto loc_8225931C;
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// beq cr6,0x822592c0
	if (cr6.getEQ()) goto loc_822592C0;
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr. r28,r3
	r28.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// beq 0x822592c0
	if (cr0.getEQ()) goto loc_822592C0;
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821929d8
	sub_821929D8(ctx, base);
loc_822592C0:
	// cntlzw r11,r25
	r11.u64 = r25.u32 == 0 ? 32 : __builtin_clz(r25.u32);
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// xori r7,r11,1
	ctx.r7.u64 = r11.u64 ^ 1;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x822583f8
	sub_822583F8(ctx, base);
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r8,r31
	ctx.r8.u64 = r31.u64;
	// lwz r6,84(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r5,r19
	ctx.r5.u64 = r19.u64;
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82258be8
	sub_82258BE8(ctx, base);
	// cmplwi cr6,r20,0
	cr6.compare<uint32_t>(r20.u32, 0, xer);
	// beq cr6,0x8225931c
	if (cr6.getEQ()) goto loc_8225931C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,4(r20)
	ctx.r5.u64 = PPC_LOAD_U32(r20.u32 + 4);
	// lwz r4,0(r20)
	ctx.r4.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// bl 0x82192a40
	sub_82192A40(ctx, base);
loc_8225931C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x823ed164
	return;
}

__attribute__((alias("__imp__sub_82259328"))) PPC_WEAK_FUNC(sub_82259328);
PPC_FUNC_IMPL(__imp__sub_82259328) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// b 0x822593c0
	goto loc_822593C0;
loc_82259348:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// bl 0x8218f368
	sub_8218F368(ctx, base);
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// rlwinm. r11,r10,20,28,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 20) & 0xF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822593bc
	if (cr0.getEQ()) goto loc_822593BC;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x822593e0
	if (cr6.getEQ()) goto loc_822593E0;
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// ble cr6,0x8225939c
	if (!cr6.getGT()) goto loc_8225939C;
	// cmplwi cr6,r11,12
	cr6.compare<uint32_t>(r11.u32, 12, xer);
	// beq cr6,0x82259390
	if (cr6.getEQ()) goto loc_82259390;
	// ble cr6,0x822593e0
	if (!cr6.getGT()) goto loc_822593E0;
	// cmplwi cr6,r11,14
	cr6.compare<uint32_t>(r11.u32, 14, xer);
	// ble cr6,0x8225939c
	if (!cr6.getGT()) goto loc_8225939C;
	// cmplwi cr6,r11,15
	cr6.compare<uint32_t>(r11.u32, 15, xer);
	// bne cr6,0x822593e0
	if (!cr6.getEQ()) goto loc_822593E0;
	// b 0x822593bc
	goto loc_822593BC;
loc_82259390:
	// rlwinm. r11,r10,0,23,23
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x100;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822593e0
	if (cr0.getEQ()) goto loc_822593E0;
	// b 0x822593bc
	goto loc_822593BC;
loc_8225939C:
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// rlwinm. r10,r10,0,17,19
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x7000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x822593d4
	if (!cr0.getEQ()) goto loc_822593D4;
	// li r10,1
	ctx.r10.s64 = 1;
	// slw r11,r10,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r11.u8 & 0x3F));
	// andi. r11,r11,16468
	r11.u64 = r11.u64 & 16468;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x822593e0
	if (!cr0.getEQ()) goto loc_822593E0;
loc_822593BC:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_822593C0:
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// bl 0x82192c50
	sub_82192C50(ctx, base);
	// cmplw cr6,r3,r31
	cr6.compare<uint32_t>(ctx.r3.u32, r31.u32, xer);
	// bgt cr6,0x82259348
	if (cr6.getGT()) goto loc_82259348;
	// b 0x822593e0
	goto loc_822593E0;
loc_822593D4:
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// oris r11,r11,2
	r11.u64 = r11.u64 | 131072;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_822593E0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822593F8"))) PPC_WEAK_FUNC(sub_822593F8);
PPC_FUNC_IMPL(__imp__sub_822593F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// addi r6,r31,16
	ctx.r6.s64 = r31.s64 + 16;
	// lhz r11,8(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 8);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// stb r30,16(r11)
	PPC_STORE_U8(r11.u32 + 16, r30.u8);
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cntlzw r11,r4
	r11.u64 = ctx.r4.u32 == 0 ? 32 : __builtin_clz(ctx.r4.u32);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r5,r11,7101
	ctx.r5.s64 = r11.s64 + 7101;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// sth r30,8(r31)
	PPC_STORE_U16(r31.u32 + 8, r30.u16);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82259468"))) PPC_WEAK_FUNC(sub_82259468);
PPC_FUNC_IMPL(__imp__sub_82259468) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// li r3,0
	ctx.r3.s64 = 0;
loc_82259484:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x822594d4
	if (cr6.getEQ()) goto loc_822594D4;
	// lbz r11,0(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmplwi cr6,r11,10
	cr6.compare<uint32_t>(r11.u32, 10, xer);
	// beq cr6,0x822594c4
	if (cr6.getEQ()) goto loc_822594C4;
	// lhz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 8);
	// add r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 + r31.u64;
	// stb r11,16(r10)
	PPC_STORE_U8(ctx.r10.u32 + 16, r11.u8);
	// lhz r11,8(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// cmplwi cr6,r11,511
	cr6.compare<uint32_t>(r11.u32, 511, xer);
	// sth r11,8(r31)
	PPC_STORE_U16(r31.u32 + 8, r11.u16);
	// blt cr6,0x822594cc
	if (cr6.getLT()) goto loc_822594CC;
loc_822594C4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822593f8
	sub_822593F8(ctx, base);
loc_822594CC:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x82259484
	if (!cr6.getLT()) goto loc_82259484;
loc_822594D4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_822594E0"))) PPC_WEAK_FUNC(sub_822594E0);
PPC_FUNC_IMPL(__imp__sub_822594E0) {
	PPC_FUNC_PROLOGUE();
	// b 0x82259468
	sub_82259468(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822594E8"))) PPC_WEAK_FUNC(sub_822594E8);
PPC_FUNC_IMPL(__imp__sub_822594E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-2176(r1)
	ea = -2176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// addi r10,r1,2208
	ctx.r10.s64 = ctx.r1.s64 + 2208;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// li r4,2047
	ctx.r4.s64 = 2047;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823eef48
	sub_823EEF48(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// li r3,0
	ctx.r3.s64 = 0;
	// stb r3,2143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2143, ctx.r3.u8);
	// bge 0x82259554
	if (!cr0.getLT()) goto loc_82259554;
	// lis r3,-32768
	ctx.r3.s64 = -2147483648;
	// ori r3,r3,16389
	ctx.r3.u64 = ctx.r3.u64 | 16389;
	// b 0x822595fc
	goto loc_822595FC;
loc_82259554:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x822595fc
	if (!cr6.getGT()) goto loc_822595FC;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x822595cc
	if (cr6.getEQ()) goto loc_822595CC;
	// lbz r11,96(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 96);
	// stw r3,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r3.u32);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,32
	cr6.compare<int32_t>(r11.s32, 32, xer);
	// beq cr6,0x8225959c
	if (cr6.getEQ()) goto loc_8225959C;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x8225959c
	if (cr6.getEQ()) goto loc_8225959C;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// blt cr6,0x82259594
	if (cr6.getLT()) goto loc_82259594;
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// ble cr6,0x8225959c
	if (!cr6.getGT()) goto loc_8225959C;
loc_82259594:
	// li r11,1
	r11.s64 = 1;
	// b 0x822595a0
	goto loc_822595A0;
loc_8225959C:
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
loc_822595A0:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822595cc
	if (!cr0.getEQ()) goto loc_822595CC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r11,-21432
	ctx.r4.s64 = r11.s64 + -21432;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x822595ec
	if (cr0.getLT()) goto loc_822595EC;
loc_822595CC:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x822595fc
	if (!cr0.getLT()) goto loc_822595FC;
loc_822595EC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x822595fc
	if (cr6.getLT()) goto loc_822595FC;
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
loc_822595FC:
	// addi r1,r1,2176
	ctx.r1.s64 = ctx.r1.s64 + 2176;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82259618"))) PPC_WEAK_FUNC(sub_82259618);
PPC_FUNC_IMPL(__imp__sub_82259618) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// clrlwi. r11,r5,24
	r11.u64 = ctx.r5.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822596fc
	if (!cr0.getEQ()) goto loc_822596FC;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// li r11,1
	r11.s64 = 1;
	// rlwinm r9,r10,20,28,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 20) & 0xF;
	// slw r11,r11,r9
	r11.u64 = ctx.r9.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r9.u8 & 0x3F));
	// andi. r11,r11,24702
	r11.u64 = r11.u64 & 24702;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x822596fc
	if (cr0.getEQ()) goto loc_822596FC;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// li r26,0
	r26.s64 = 0;
	// rlwinm r9,r10,4,26,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0x30;
	// rlwinm r8,r11,4,28,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xF;
	// clrlwi r28,r11,20
	r28.u64 = r11.u32 & 0xFFF;
	// rlwinm r31,r11,16,20,31
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFF;
	// std r26,0(r29)
	PPC_STORE_U64(r29.u32 + 0, r26.u64);
	// or r30,r9,r8
	r30.u64 = ctx.r9.u64 | ctx.r8.u64;
	// rlwinm. r10,r11,20,29,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0x7;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x822596fc
	if (cr0.getEQ()) goto loc_822596FC;
	// mr r25,r10
	r25.u64 = ctx.r10.u64;
loc_82259680:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lwz r3,8(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x8218f398
	sub_8218F398(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// clrlwi r4,r31,31
	ctx.r4.u64 = r31.u32 & 0x1;
	// rlwinm r5,r31,31,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 31) & 0x1;
	// clrlwi r6,r30,31
	ctx.r6.u64 = r30.u32 & 0x1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// rlwinm r30,r30,31,1,31
	r30.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r31,r31,30,2,31
	r31.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 30) & 0x3FFFFFFF;
	// bl 0x82257ba8
	sub_82257BA8(ctx, base);
	// clrlwi. r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822596d4
	if (cr0.getEQ()) goto loc_822596D4;
	// li r10,2
	ctx.r10.s64 = 2;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// slw r10,r10,r26
	ctx.r10.u64 = r26.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r26.u8 & 0x3F));
	// rlwinm r10,r10,16,0,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF0000;
	// or r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 | r11.u64;
	// rlwimi r10,r11,0,16,3
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 0) & 0xFFFFFFFFF000FFFF) | (ctx.r10.u64 & 0xFFF0000);
	// stw r10,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r10.u32);
loc_822596D4:
	// addic. r25,r25,-1
	xer.ca = r25.u32 > 0;
	r25.s64 = r25.s64 + -1;
	cr0.compare<int32_t>(r25.s32, 0, xer);
	// addi r26,r26,2
	r26.s64 = r26.s64 + 2;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// bne 0x82259680
	if (!cr0.getEQ()) goto loc_82259680;
	// ld r11,0(r29)
	r11.u64 = PPC_LOAD_U64(r29.u32 + 0);
	// cmpdi cr6,r11,0
	cr6.compare<int64_t>(r11.s64, 0, xer);
	// beq cr6,0x822596fc
	if (cr6.getEQ()) goto loc_822596FC;
	// addi r4,r24,1
	ctx.r4.s64 = r24.s64 + 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82259328
	sub_82259328(ctx, base);
loc_822596FC:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_82259708"))) PPC_WEAK_FUNC(sub_82259708);
PPC_FUNC_IMPL(__imp__sub_82259708) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x82259744
	if (!cr0.getLT()) goto loc_82259744;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82259744
	if (cr6.getLT()) goto loc_82259744;
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
loc_82259744:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82259758"))) PPC_WEAK_FUNC(sub_82259758);
PPC_FUNC_IMPL(__imp__sub_82259758) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stfs f1,124(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// lis r10,-32768
	ctx.r10.s64 = -2147483648;
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x82259784
	if (!cr6.getEQ()) goto loc_82259784;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-19504
	ctx.r4.s64 = r11.s64 + -19504;
	// b 0x822597f4
	goto loc_822597F4;
loc_82259784:
	// rlwinm r9,r11,0,1,8
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x7F800000;
	// lis r10,32640
	ctx.r10.s64 = 2139095040;
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// bne cr6,0x822597fc
	if (!cr6.getEQ()) goto loc_822597FC;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x822597a8
	if (!cr6.getEQ()) goto loc_822597A8;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,9604
	ctx.r4.s64 = r11.s64 + 9604;
	// b 0x822597f4
	goto loc_822597F4;
loc_822597A8:
	// lis r10,-128
	ctx.r10.s64 = -8388608;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x822597c0
	if (!cr6.getEQ()) goto loc_822597C0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-19512
	ctx.r4.s64 = r11.s64 + -19512;
	// b 0x822597f4
	goto loc_822597F4;
loc_822597C0:
	// lis r10,-64
	ctx.r10.s64 = -4194304;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x822597d8
	if (!cr6.getEQ()) goto loc_822597D8;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,9612
	ctx.r4.s64 = r11.s64 + 9612;
	// b 0x822597f4
	goto loc_822597F4;
loc_822597D8:
	// rlwinm. r11,r11,0,9,9
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x400000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822597ec
	if (cr0.getEQ()) goto loc_822597EC;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,9596
	ctx.r4.s64 = r11.s64 + 9596;
	// b 0x822597f4
	goto loc_822597F4;
loc_822597EC:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,9588
	ctx.r4.s64 = r11.s64 + 9588;
loc_822597F4:
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// b 0x82259810
	goto loc_82259810;
loc_822597FC:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// stfd f1,32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f1.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// addi r4,r11,-19520
	ctx.r4.s64 = r11.s64 + -19520;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_82259810:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82259820"))) PPC_WEAK_FUNC(sub_82259820);
PPC_FUNC_IMPL(__imp__sub_82259820) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed114
	// stwu r1,-624(r1)
	ea = -624 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r20,r3
	r20.u64 = ctx.r3.u64;
	// mr r19,r4
	r19.u64 = ctx.r4.u64;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x8225986c
	if (cr6.getLT()) goto loc_8225986C;
	// beq cr6,0x82259864
	if (cr6.getEQ()) goto loc_82259864;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// blt cr6,0x8225985c
	if (cr6.getLT()) goto loc_8225985C;
	// bne cr6,0x82259874
	if (!cr6.getEQ()) goto loc_82259874;
	// li r11,115
	r11.s64 = 115;
	// b 0x82259878
	goto loc_82259878;
loc_8225985C:
	// li r11,99
	r11.s64 = 99;
	// b 0x82259878
	goto loc_82259878;
loc_82259864:
	// li r11,105
	r11.s64 = 105;
	// b 0x82259878
	goto loc_82259878;
loc_8225986C:
	// li r11,98
	r11.s64 = 98;
	// b 0x82259878
	goto loc_82259878;
loc_82259874:
	// lbz r11,96(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 96);
loc_82259878:
	// lwz r9,12(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 12);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// addi r3,r1,384
	ctx.r3.s64 = ctx.r1.s64 + 384;
	// cmplwi r9,0
	cr0.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne 0x8225989c
	if (!cr0.getEQ()) goto loc_8225989C;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// addi r4,r10,-19392
	ctx.r4.s64 = ctx.r10.s64 + -19392;
	// bl 0x823ee998
	sub_823EE998(ctx, base);
	// b 0x822598cc
	goto loc_822598CC;
loc_8225989C:
	// lwz r6,8(r28)
	ctx.r6.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// cmplwi cr6,r9,1
	cr6.compare<uint32_t>(ctx.r9.u32, 1, xer);
	// bne cr6,0x822598b8
	if (!cr6.getEQ()) goto loc_822598B8;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// addi r4,r10,-19400
	ctx.r4.s64 = ctx.r10.s64 + -19400;
	// bl 0x823ee998
	sub_823EE998(ctx, base);
	// b 0x822598cc
	goto loc_822598CC;
loc_822598B8:
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// add r11,r6,r9
	r11.u64 = ctx.r6.u64 + ctx.r9.u64;
	// addi r4,r10,-19408
	ctx.r4.s64 = ctx.r10.s64 + -19408;
	// addi r7,r11,-1
	ctx.r7.s64 = r11.s64 + -1;
	// bl 0x823ee998
	sub_823EE998(ctx, base);
loc_822598CC:
	// li r21,0
	r21.s64 = 0;
	// li r5,127
	ctx.r5.s64 = 127;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,257
	ctx.r3.s64 = ctx.r1.s64 + 257;
	// stb r21,256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 256, r21.u8);
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// lwz r31,44(r28)
	r31.u64 = PPC_LOAD_U32(r28.u32 + 44);
	// cmplwi r31,0
	cr0.compare<uint32_t>(r31.u32, 0, xer);
	// beq 0x82259b0c
	if (cr0.getEQ()) goto loc_82259B0C;
	// lwz r11,12(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82259b0c
	if (cr6.getEQ()) goto loc_82259B0C;
	// lwz r11,32(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 32);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x82259b0c
	if (!cr6.getEQ()) goto loc_82259B0C;
	// lwz r11,36(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82259b0c
	if (!cr6.getEQ()) goto loc_82259B0C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// addi r4,r11,-19416
	ctx.r4.s64 = r11.s64 + -19416;
	// bl 0x823ee998
	sub_823EE998(ctx, base);
	// lwz r11,12(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 12);
	// mr r22,r21
	r22.u64 = r21.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// ble cr6,0x82259ad4
	if (!cr6.getGT()) goto loc_82259AD4;
	// lis r11,-32252
	r11.s64 = -2113667072;
	// addi r23,r11,27144
	r23.s64 = r11.s64 + 27144;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r27,r11,-19440
	r27.s64 = r11.s64 + -19440;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r26,r11,-19456
	r26.s64 = r11.s64 + -19456;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,8704
	r30.s64 = r11.s64 + 8704;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r25,r11,5360
	r25.s64 = r11.s64 + 5360;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r24,r11,5368
	r24.s64 = r11.s64 + 5368;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r11,-16560
	r29.s64 = r11.s64 + -16560;
loc_8225996C:
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// beq cr6,0x822599a8
	if (cr6.getEQ()) goto loc_822599A8;
	// addi r11,r1,256
	r11.s64 = ctx.r1.s64 + 256;
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
loc_8225997C:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8225997c
	if (!cr6.getEQ()) goto loc_8225997C;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
loc_82259990:
	// lbz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bne 0x82259990
	if (!cr0.getEQ()) goto loc_82259990;
loc_822599A8:
	// li r5,127
	ctx.r5.s64 = 127;
	// stb r21,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, r21.u8);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,129
	ctx.r3.s64 = ctx.r1.s64 + 129;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x82259a6c
	if (cr6.getLT()) goto loc_82259A6C;
	// beq cr6,0x82259a48
	if (cr6.getEQ()) goto loc_82259A48;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// blt cr6,0x822599e8
	if (cr6.getLT()) goto loc_822599E8;
	// bne cr6,0x82259a90
	if (!cr6.getEQ()) goto loc_82259A90;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bl 0x823ee998
	sub_823EE998(ctx, base);
	// b 0x82259a90
	goto loc_82259A90;
loc_822599E8:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// lfs f4,108(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	ctx.f4.f64 = double(temp.f32);
	// stfd f4,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.f4.u64);
	// ld r8,56(r1)
	ctx.r8.u64 = PPC_LOAD_U64(ctx.r1.u32 + 56);
	// lfs f3,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f3.f64 = double(temp.f32);
	// stfd f3,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.f3.u64);
	// ld r7,48(r1)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r1.u32 + 48);
	// lfs f2,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f2.f64 = double(temp.f32);
	// stfd f2,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f2.u64);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// lfs f1,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f1.f64 = double(temp.f32);
	// stfd f1,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f1.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// bl 0x823ee998
	sub_823EE998(ctx, base);
	// b 0x82259a64
	goto loc_82259A64;
loc_82259A48:
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// lwz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r7,8(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r6,4(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r5,0(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x823ee998
	sub_823EE998(ctx, base);
loc_82259A64:
	// addi r31,r31,16
	r31.s64 = r31.s64 + 16;
	// b 0x82259a90
	goto loc_82259A90;
loc_82259A6C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82259a80
	if (!cr6.getEQ()) goto loc_82259A80;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
loc_82259A80:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x823ee998
	sub_823EE998(ctx, base);
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
loc_82259A90:
	// addi r9,r1,128
	ctx.r9.s64 = ctx.r1.s64 + 128;
	// addi r11,r1,256
	r11.s64 = ctx.r1.s64 + 256;
loc_82259A98:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82259a98
	if (!cr6.getEQ()) goto loc_82259A98;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
loc_82259AAC:
	// lbz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bne 0x82259aac
	if (!cr0.getEQ()) goto loc_82259AAC;
	// lwz r11,12(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 12);
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// cmplw cr6,r22,r11
	cr6.compare<uint32_t>(r22.u32, r11.u32, xer);
	// blt cr6,0x8225996c
	if (cr6.getLT()) goto loc_8225996C;
loc_82259AD4:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r10,r11,-19460
	ctx.r10.s64 = r11.s64 + -19460;
	// addi r11,r1,256
	r11.s64 = ctx.r1.s64 + 256;
loc_82259AE0:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82259ae0
	if (!cr6.getEQ()) goto loc_82259AE0;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
loc_82259AF4:
	// lbz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmplwi r9,0
	cr0.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bne 0x82259af4
	if (!cr0.getEQ()) goto loc_82259AF4;
loc_82259B0C:
	// lis r11,-32018
	r11.s64 = -2098331648;
	// lwz r9,20(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// addi r11,r11,-24840
	r11.s64 = r11.s64 + -24840;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r7,r10,2334
	ctx.r7.s64 = ctx.r10.s64 + 2334;
	// beq cr6,0x82259b48
	if (cr6.getEQ()) goto loc_82259B48;
loc_82259B2C:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// beq cr6,0x82259b5c
	if (cr6.getEQ()) goto loc_82259B5C;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82259b2c
	if (!cr6.getEQ()) goto loc_82259B2C;
loc_82259B48:
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
loc_82259B4C:
	// lis r11,-32018
	r11.s64 = -2098331648;
	// lwz r9,16(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 16);
	// addi r11,r11,-24896
	r11.s64 = r11.s64 + -24896;
	// b 0x82259b74
	goto loc_82259B74;
loc_82259B5C:
	// lwz r6,4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// b 0x82259b4c
	goto loc_82259B4C;
loc_82259B64:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// beq cr6,0x82259b84
	if (cr6.getEQ()) goto loc_82259B84;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
loc_82259B74:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82259b64
	if (!cr6.getEQ()) goto loc_82259B64;
	// b 0x82259b88
	goto loc_82259B88;
loc_82259B84:
	// lwz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 4);
loc_82259B88:
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// lwz r9,28(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 28);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// lwz r8,24(r28)
	ctx.r8.u64 = PPC_LOAD_U32(r28.u32 + 24);
	// addi r10,r1,384
	ctx.r10.s64 = ctx.r1.s64 + 384;
	// addi r4,r11,-19500
	ctx.r4.s64 = r11.s64 + -19500;
	// mr r5,r19
	ctx.r5.u64 = r19.u64;
	// stw r3,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r3.u32);
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// addi r1,r1,624
	ctx.r1.s64 = ctx.r1.s64 + 624;
	// b 0x823ed164
	return;
}

__attribute__((alias("__imp__sub_82259BB8"))) PPC_WEAK_FUNC(sub_82259BB8);
PPC_FUNC_IMPL(__imp__sub_82259BB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-592(r1)
	ea = -592 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r4,r7
	ctx.r4.u64 = ctx.r7.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r5,48
	ctx.r5.s64 = 48;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r25,r8
	r25.u64 = ctx.r8.u64;
	// mr r23,r9
	r23.u64 = ctx.r9.u64;
	// mr r27,r10
	r27.u64 = ctx.r10.u64;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r28,r11,-20944
	r28.s64 = r11.s64 + -20944;
	// beq cr6,0x82259c10
	if (cr6.getEQ()) goto loc_82259C10;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-19356
	ctx.r4.s64 = r11.s64 + -19356;
	// b 0x82259c2c
	goto loc_82259C2C;
loc_82259C10:
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82259c28
	if (cr6.getEQ()) goto loc_82259C28;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-19368
	ctx.r4.s64 = r11.s64 + -19368;
	// b 0x82259c2c
	goto loc_82259C2C;
loc_82259C28:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
loc_82259C2C:
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x823ee998
	sub_823EE998(ctx, base);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x82259c78
	if (!cr6.getEQ()) goto loc_82259C78;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82259d9c
	if (!cr6.getEQ()) goto loc_82259D9C;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x82259820
	sub_82259820(ctx, base);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// beq cr6,0x82259d90
	if (cr6.getEQ()) goto loc_82259D90;
loc_82259C78:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// addi r4,r11,-19376
	ctx.r4.s64 = r11.s64 + -19376;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// bl 0x823ee998
	sub_823EE998(ctx, base);
	// lhz r11,6(r27)
	r11.u64 = PPC_LOAD_U16(r27.u32 + 6);
	// lhz r9,4(r27)
	ctx.r9.u64 = PPC_LOAD_U16(r27.u32 + 4);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r31,92(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mullw r11,r11,r9
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r9.s32);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x82259cb8
	if (cr6.getEQ()) goto loc_82259CB8;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x82259cc8
	if (!cr6.getEQ()) goto loc_82259CC8;
loc_82259CB8:
	// clrlwi. r10,r11,30
	ctx.r10.u64 = r11.u32 & 0x3;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r11,r11,30,2,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// beq 0x82259cc8
	if (cr0.getEQ()) goto loc_82259CC8;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82259CC8:
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// lwz r26,112(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// li r29,0
	r29.s64 = 0;
	// cmplwi r26,0
	cr0.compare<uint32_t>(r26.u32, 0, xer);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// beq 0x82259ee8
	if (cr0.getEQ()) goto loc_82259EE8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r30,r11,2334
	r30.s64 = r11.s64 + 2334;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r28,r11,-19384
	r28.s64 = r11.s64 + -19384;
loc_82259CF4:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// addi r3,r1,384
	ctx.r3.s64 = ctx.r1.s64 + 384;
	// bl 0x823ee998
	sub_823EE998(ctx, base);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bge cr6,0x82259d18
	if (!cr6.getLT()) goto loc_82259D18;
	// mr r11,r31
	r11.u64 = r31.u64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
loc_82259D18:
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// mr r9,r23
	ctx.r9.u64 = r23.u64;
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// addi r6,r1,384
	ctx.r6.s64 = ctx.r1.s64 + 384;
	// addi r5,r1,256
	ctx.r5.s64 = ctx.r1.s64 + 256;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// subf r31,r11,r31
	r31.s64 = r31.s64 - r11.s64;
	// bl 0x82259bb8
	sub_82259BB8(ctx, base);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82259d80
	if (cr6.getEQ()) goto loc_82259D80;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// subfic r9,r9,0
	xer.ca = ctx.r9.u32 <= 0;
	ctx.r9.s64 = 0 - ctx.r9.s64;
	// subfe r9,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r9,r9,30
	ctx.r9.u64 = ctx.r9.u32 & 0x3;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// mullw r11,r9,r11
	r11.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
loc_82259D80:
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// cmplw cr6,r29,r26
	cr6.compare<uint32_t>(r29.u32, r26.u32, xer);
	// blt cr6,0x82259cf4
	if (cr6.getLT()) goto loc_82259CF4;
	// b 0x82259ee8
	goto loc_82259EE8;
loc_82259D90:
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82259ee8
	if (cr6.getEQ()) goto loc_82259EE8;
loc_82259D9C:
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// bl 0x823ee998
	sub_823EE998(ctx, base);
	// lwz r11,12(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 12);
	// lwz r31,92(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// add r30,r11,r25
	r30.u64 = r11.u64 + r25.u64;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82259ee8
	if (cr6.getEQ()) goto loc_82259EE8;
	// mr r27,r11
	r27.u64 = r11.u64;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r29,r11,-19388
	r29.s64 = r11.s64 + -19388;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r28,r11,2334
	r28.s64 = r11.s64 + 2334;
loc_82259DE8:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmpwi cr6,r9,2
	cr6.compare<int32_t>(ctx.r9.s32, 2, xer);
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// add r10,r10,r25
	ctx.r10.u64 = ctx.r10.u64 + r25.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// lhz r11,6(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 6);
	// lhz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 4);
	// mullw r11,r11,r8
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r8.s32);
	// beq cr6,0x82259e18
	if (cr6.getEQ()) goto loc_82259E18;
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// bne cr6,0x82259e28
	if (!cr6.getEQ()) goto loc_82259E28;
loc_82259E18:
	// clrlwi. r9,r11,30
	ctx.r9.u64 = r11.u32 & 0x3;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r11,r11,30,2,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// beq 0x82259e28
	if (cr0.getEQ()) goto loc_82259E28;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82259E28:
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// lhz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 8);
	// mullw r11,r9,r11
	r11.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// bge cr6,0x82259e48
	if (!cr6.getLT()) goto loc_82259E48;
	// mr r11,r31
	r11.u64 = r31.u64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
loc_82259E48:
	// lhz r9,6(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 6);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// addi r5,r1,256
	ctx.r5.s64 = ctx.r1.s64 + 256;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// subf r31,r11,r31
	r31.s64 = r31.s64 - r11.s64;
	// stw r9,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r9.u32);
	// lhz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 4);
	// stw r9,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r9.u32);
	// lhz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// stw r9,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r9.u32);
	// lhz r9,2(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// mr r9,r23
	ctx.r9.u64 = r23.u64;
	// lhz r7,8(r10)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r10.u32 + 8);
	// stw r7,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r7.u32);
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// lhz r6,10(r10)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r10.u32 + 10);
	// stw r6,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r6.u32);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// bl 0x82259bb8
	sub_82259BB8(ctx, base);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82259edc
	if (cr6.getEQ()) goto loc_82259EDC;
	// subfic r8,r9,0
	xer.ca = ctx.r9.u32 <= 0;
	ctx.r8.s64 = 0 - ctx.r9.s64;
	// subfe r8,r8,r8
	temp.u8 = (~ctx.r8.u32 + ctx.r8.u32 < ~ctx.r8.u32) | (~ctx.r8.u32 + ctx.r8.u32 + xer.ca < xer.ca);
	ctx.r8.u64 = ~ctx.r8.u64 + ctx.r8.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r8,r8,30
	ctx.r8.u64 = ctx.r8.u32 & 0x3;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// mullw r11,r8,r11
	r11.s64 = int64_t(ctx.r8.s32) * int64_t(r11.s32);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
loc_82259EDC:
	// addic. r27,r27,-1
	xer.ca = r27.u32 > 0;
	r27.s64 = r27.s64 + -1;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// addi r30,r30,8
	r30.s64 = r30.s64 + 8;
	// bne 0x82259de8
	if (!cr0.getEQ()) goto loc_82259DE8;
loc_82259EE8:
	// addi r1,r1,592
	ctx.r1.s64 = ctx.r1.s64 + 592;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_82259EF0"))) PPC_WEAK_FUNC(sub_82259EF0);
PPC_FUNC_IMPL(__imp__sub_82259EF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,16(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 16);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82259f98
	if (cr0.getEQ()) goto loc_82259F98;
	// addi r10,r11,28
	ctx.r10.s64 = r11.s64 + 28;
	// cmplw cr6,r10,r6
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r6.u32, xer);
	// ble cr6,0x82259f24
	if (!cr6.getGT()) goto loc_82259F24;
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,87
	ctx.r3.u64 = ctx.r3.u64 | 87;
	// b 0x82259f9c
	goto loc_82259F9C;
loc_82259F24:
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addi r30,r11,4
	r30.s64 = r11.s64 + 4;
	// lwz r28,12(r30)
	r28.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// cmplwi r28,0
	cr0.compare<uint32_t>(r28.u32, 0, xer);
	// beq 0x82259f98
	if (cr0.getEQ()) goto loc_82259F98;
	// lwz r11,16(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// add r31,r11,r30
	r31.u64 = r11.u64 + r30.u64;
	// beq cr6,0x82259f98
	if (cr6.getEQ()) goto loc_82259F98;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r29,r11,2334
	r29.s64 = r11.s64 + 2334;
loc_82259F50:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r10,r11,r30
	ctx.r10.u64 = r11.u64 + r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// bl 0x82257eb8
	sub_82257EB8(ctx, base);
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82259bb8
	sub_82259BB8(ctx, base);
	// addic. r28,r28,-1
	xer.ca = r28.u32 > 0;
	r28.s64 = r28.s64 + -1;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// addi r31,r31,20
	r31.s64 = r31.s64 + 20;
	// bne 0x82259f50
	if (!cr0.getEQ()) goto loc_82259F50;
loc_82259F98:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82259F9C:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82259FA8"))) PPC_WEAK_FUNC(sub_82259FA8);
PPC_FUNC_IMPL(__imp__sub_82259FA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82259fe8
	if (cr6.getEQ()) goto loc_82259FE8;
	// li r10,0
	ctx.r10.s64 = 0;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,8704
	ctx.r4.s64 = r11.s64 + 8704;
	// stw r10,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r10.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r11.u32);
loc_82259FE8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225A000"))) PPC_WEAK_FUNC(sub_8225A000);
PPC_FUNC_IMPL(__imp__sub_8225A000) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// bl 0x82192c50
	sub_82192C50(ctx, base);
	// li r31,0
	r31.s64 = 0;
	// mr. r29,r3
	r29.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// beq 0x8225a058
	if (cr0.getEQ()) goto loc_8225A058;
loc_8225A024:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// bl 0x8218f368
	sub_8218F368(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r8,r31
	ctx.r8.u64 = r31.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82259618
	sub_82259618(ctx, base);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmplw cr6,r31,r29
	cr6.compare<uint32_t>(r31.u32, r29.u32, xer);
	// blt cr6,0x8225a024
	if (cr6.getLT()) goto loc_8225A024;
loc_8225A058:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8225A060"))) PPC_WEAK_FUNC(sub_8225A060);
PPC_FUNC_IMPL(__imp__sub_8225A060) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed114
	// stwu r1,-832(r1)
	ea = -832 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31991
	r11.s64 = -2096562176;
	// mr r30,r9
	r30.u64 = ctx.r9.u64;
	// mr r29,r10
	r29.u64 = ctx.r10.u64;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// mr r22,r4
	r22.u64 = ctx.r4.u64;
	// lwz r11,-7376(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -7376);
	// mr r21,r5
	r21.u64 = ctx.r5.u64;
	// mr r20,r6
	r20.u64 = ctx.r6.u64;
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r30.u32);
	// mr r19,r7
	r19.u64 = ctx.r7.u64;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// li r31,0
	r31.s64 = 0;
	// li r24,1
	r24.s64 = 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225a0b4
	if (cr6.getEQ()) goto loc_8225A0B4;
	// rlwinm. r11,r8,0,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r24,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r24.u32);
	// bne 0x8225a0b8
	if (!cr0.getEQ()) goto loc_8225A0B8;
loc_8225A0B4:
	// stw r31,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r31.u32);
loc_8225A0B8:
	// li r5,448
	ctx.r5.s64 = 448;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// addi r11,r1,240
	r11.s64 = ctx.r1.s64 + 240;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// std r31,0(r11)
	PPC_STORE_U64(r11.u32 + 0, r31.u64);
	// std r31,8(r11)
	PPC_STORE_U64(r11.u32 + 8, r31.u64);
	// stw r31,16(r11)
	PPC_STORE_U32(r11.u32 + 16, r31.u32);
	// bl 0x82257398
	sub_82257398(ctx, base);
	// mr. r28,r3
	r28.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// blt 0x8225a3ac
	if (cr0.getLT()) goto loc_8225A3AC;
	// li r11,8
	r11.s64 = 8;
	// stw r31,296(r1)
	PPC_STORE_U32(ctx.r1.u32 + 296, r31.u32);
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// stw r31,304(r1)
	PPC_STORE_U32(ctx.r1.u32 + 304, r31.u32);
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,272
	ctx.r6.s64 = ctx.r1.s64 + 272;
	// addi r5,r1,240
	ctx.r5.s64 = ctx.r1.s64 + 240;
	// stw r11,300(r1)
	PPC_STORE_U32(ctx.r1.u32 + 300, r11.u32);
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82263ab8
	sub_82263AB8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r3,r1,296
	ctx.r3.s64 = ctx.r1.s64 + 296;
	// bl 0x82257f28
	sub_82257F28(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8225a138
	if (cr6.getEQ()) goto loc_8225A138;
	// lis r28,-30602
	r28.s64 = -2005532672;
	// ori r28,r28,2156
	r28.u64 = r28.u64 | 2156;
	// b 0x8225a3a4
	goto loc_8225A3A4;
loc_8225A138:
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// li r10,9
	ctx.r10.s64 = 9;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8225A148:
	// std r9,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r9.u64);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// bdnz 0x8225a148
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8225A148;
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// stw r24,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r24.u32);
	// lis r7,-32204
	ctx.r7.s64 = -2110521344;
	// lis r8,-32232
	ctx.r8.s64 = -2112356352;
	// lis r9,-32232
	ctx.r9.s64 = -2112356352;
	// lis r6,-32219
	ctx.r6.s64 = -2111504384;
	// std r31,0(r11)
	PPC_STORE_U64(r11.u32 + 0, r31.u64);
	// lis r10,-32195
	ctx.r10.s64 = -2109931520;
	// std r31,8(r11)
	PPC_STORE_U64(r11.u32 + 8, r31.u64);
	// addi r6,r6,29568
	ctx.r6.s64 = ctx.r6.s64 + 29568;
	// std r31,16(r11)
	PPC_STORE_U64(r11.u32 + 16, r31.u64);
	// lis r25,-32219
	r25.s64 = -2111504384;
	// std r31,24(r11)
	PPC_STORE_U64(r11.u32 + 24, r31.u64);
	// addi r11,r1,88
	r11.s64 = ctx.r1.s64 + 88;
	// lis r26,-32219
	r26.s64 = -2111504384;
	// lis r27,-32219
	r27.s64 = -2111504384;
	// lis r28,-32219
	r28.s64 = -2111504384;
	// stw r6,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, ctx.r6.u32);
	// lis r29,-32195
	r29.s64 = -2109931520;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// addi r11,r7,23912
	r11.s64 = ctx.r7.s64 + 23912;
	// lis r30,-32219
	r30.s64 = -2111504384;
	// lis r5,-32204
	ctx.r5.s64 = -2110521344;
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// addi r5,r5,23912
	ctx.r5.s64 = ctx.r5.s64 + 23912;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// addi r11,r8,-21952
	r11.s64 = ctx.r8.s64 + -21952;
	// li r24,50
	r24.s64 = 50;
	// addi r25,r25,29384
	r25.s64 = r25.s64 + 29384;
	// addi r26,r26,29560
	r26.s64 = r26.s64 + 29560;
	// stw r6,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r6.u32);
	// addi r27,r27,29392
	r27.s64 = r27.s64 + 29392;
	// stw r5,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r5.u32);
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// addi r11,r9,-21952
	r11.s64 = ctx.r9.s64 + -21952;
	// addi r28,r28,29472
	r28.s64 = r28.s64 + 29472;
	// stw r24,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r24.u32);
	// addi r29,r29,8928
	r29.s64 = r29.s64 + 8928;
	// stw r25,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r25.u32);
	// addi r30,r30,29432
	r30.s64 = r30.s64 + 29432;
	// stw r26,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, r26.u32);
	// li r4,13
	ctx.r4.s64 = 13;
	// stw r27,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r27.u32);
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// addi r11,r10,8928
	r11.s64 = ctx.r10.s64 + 8928;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stw r28,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r28.u32);
	// stw r29,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r29.u32);
	// stw r30,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r30.u32);
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// bl 0x8226b040
	sub_8226B040(ctx, base);
	// lwz r11,280(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 280);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// lwz r4,272(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 272);
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x82266d58
	sub_82266D58(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// beq 0x8225a37c
	if (cr0.getEQ()) goto loc_8225A37C;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8226b808
	sub_8226B808(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// bl 0x82267128
	sub_82267128(ctx, base);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225a2b0
	if (cr6.getEQ()) goto loc_8225A2B0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8226adf8
	sub_8226ADF8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8226ade0
	sub_8226ADE0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8226bfd8
	sub_8226BFD8(ctx, base);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// li r6,1
	ctx.r6.s64 = 1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8226c9a8
	sub_8226C9A8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// b 0x8225a2e4
	goto loc_8225A2E4;
loc_8225A2B0:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82257c80
	sub_82257C80(ctx, base);
	// mr. r28,r3
	r28.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// bne 0x8225a2ec
	if (!cr0.getEQ()) goto loc_8225A2EC;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// bl 0x8226ade0
	sub_8226ADE0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8226c138
	sub_8226C138(ctx, base);
	// bl 0x82268c68
	sub_82268C68(ctx, base);
	// bl 0x82269010
	sub_82269010(ctx, base);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
loc_8225A2E4:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x8225a2f8
	if (cr6.getEQ()) goto loc_8225A2F8;
loc_8225A2EC:
	// lis r28,-32768
	r28.s64 = -2147483648;
	// ori r28,r28,16389
	r28.u64 = r28.u64 | 16389;
	// b 0x8225a368
	goto loc_8225A368;
loc_8225A2F8:
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r10,924(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 924);
	// li r8,1
	ctx.r8.s64 = 1;
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r7,r1,84
	ctx.r7.s64 = ctx.r1.s64 + 84;
	// lwz r5,916(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 916);
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82259120
	sub_82259120(ctx, base);
	// lwz r31,84(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr. r28,r3
	r28.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// blt 0x8225a358
	if (cr0.getLT()) goto loc_8225A358;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// stw r31,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, r31.u32);
	// bl 0x8225a000
	sub_8225A000(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82192a48
	sub_82192A48(ctx, base);
	// mr r6,r19
	ctx.r6.u64 = r19.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82192a50
	sub_82192A50(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
loc_8225A358:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8225a368
	if (cr6.getEQ()) goto loc_8225A368;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821929c8
	sub_821929C8(ctx, base);
loc_8225A368:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x822671c0
	sub_822671C0(ctx, base);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8226bb50
	sub_8226BB50(ctx, base);
	// b 0x8225a388
	goto loc_8225A388;
loc_8225A37C:
	// lis r28,-30602
	r28.s64 = -2005532672;
	// ori r28,r28,2156
	r28.u64 = r28.u64 | 2156;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225A388:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8225a39c
	if (cr6.getEQ()) goto loc_8225A39C;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82266e40
	sub_82266E40(ctx, base);
loc_8225A39C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8226b628
	sub_8226B628(ctx, base);
loc_8225A3A4:
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bl 0x82258140
	sub_82258140(ctx, base);
loc_8225A3AC:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,832
	ctx.r1.s64 = ctx.r1.s64 + 832;
	// b 0x823ed164
	return;
}

__attribute__((alias("__imp__sub_8225A3B8"))) PPC_WEAK_FUNC(sub_8225A3B8);
PPC_FUNC_IMPL(__imp__sub_8225A3B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed108
	// stwu r1,-2576(r1)
	ea = -2576 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31991
	r11.s64 = -2096562176;
	// stw r9,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r9.u32);
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// mr r20,r4
	r20.u64 = ctx.r4.u64;
	// mr r19,r5
	r19.u64 = ctx.r5.u64;
	// mr r18,r6
	r18.u64 = ctx.r6.u64;
	// lwz r11,-7376(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -7376);
	// mr r17,r7
	r17.u64 = ctx.r7.u64;
	// li r25,0
	r25.s64 = 0;
	// li r24,1
	r24.s64 = 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225a404
	if (cr6.getEQ()) goto loc_8225A404;
	// rlwinm. r11,r8,0,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r24,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r24.u32);
	// bne 0x8225a408
	if (!cr0.getEQ()) goto loc_8225A408;
loc_8225A404:
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r25.u32);
loc_8225A408:
	// li r5,1860
	ctx.r5.s64 = 1860;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// lis r3,0
	ctx.r3.s64 = 0;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// ori r3,r3,33024
	ctx.r3.u64 = ctx.r3.u64 | 33024;
	// bl 0x8209d000
	sub_8209D000(ctx, base);
	// mr r16,r3
	r16.u64 = ctx.r3.u64;
	// addi r11,r1,240
	r11.s64 = ctx.r1.s64 + 240;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// li r10,8
	ctx.r10.s64 = 8;
	// stw r16,332(r1)
	PPC_STORE_U32(ctx.r1.u32 + 332, r16.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8225A440:
	// std r9,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r9.u64);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// bdnz 0x8225a440
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8225A440;
	// li r5,260
	ctx.r5.s64 = 260;
	// stw r21,328(r1)
	PPC_STORE_U32(ctx.r1.u32 + 328, r21.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,2176
	ctx.r3.s64 = ctx.r1.s64 + 2176;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// addi r10,r1,2176
	ctx.r10.s64 = ctx.r1.s64 + 2176;
	// lhz r11,2(r21)
	r11.u64 = PPC_LOAD_U16(r21.u32 + 2);
	// cmplwi cr6,r11,1024
	cr6.compare<uint32_t>(r11.u32, 1024, xer);
	// stw r10,1884(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1884, ctx.r10.u32);
	// lis r10,16392
	ctx.r10.s64 = 1074266112;
	// stw r11,320(r1)
	PPC_STORE_U32(ctx.r1.u32 + 320, r11.u32);
	// stw r10,308(r1)
	PPC_STORE_U32(ctx.r1.u32 + 308, ctx.r10.u32);
	// blt cr6,0x8225a484
	if (cr6.getLT()) goto loc_8225A484;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225A484:
	// mr r30,r25
	r30.u64 = r25.u64;
	// addi r11,r21,4
	r11.s64 = r21.s64 + 4;
	// stw r30,612(r1)
	PPC_STORE_U32(ctx.r1.u32 + 612, r30.u32);
	// b 0x8225a558
	goto loc_8225A558;
loc_8225A494:
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,31
	cr6.compare<uint32_t>(r11.u32, 31, xer);
	// beq cr6,0x8225a4d8
	if (cr6.getEQ()) goto loc_8225A4D8;
	// cmplwi cr6,r11,47
	cr6.compare<uint32_t>(r11.u32, 47, xer);
	// beq cr6,0x8225a554
	if (cr6.getEQ()) goto loc_8225A554;
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// beq cr6,0x8225a4d0
	if (cr6.getEQ()) goto loc_8225A4D0;
	// cmplwi cr6,r11,81
	cr6.compare<uint32_t>(r11.u32, 81, xer);
	// beq cr6,0x8225a4d0
	if (cr6.getEQ()) goto loc_8225A4D0;
	// cmplwi cr6,r11,65534
	cr6.compare<uint32_t>(r11.u32, 65534, xer);
	// bne cr6,0x8225a564
	if (!cr6.getEQ()) goto loc_8225A564;
	// rlwinm r11,r10,18,15,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 18) & 0x1FFFC;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// b 0x8225a558
	goto loc_8225A558;
loc_8225A4D0:
	// addi r11,r31,20
	r11.s64 = r31.s64 + 20;
	// b 0x8225a558
	goto loc_8225A558;
loc_8225A4D8:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// rlwimi r10,r11,12,21,23
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 12) & 0x700) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r10,0,19,23
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,256
	cr6.compare<uint32_t>(r11.u32, 256, xer);
	// bne cr6,0x8225a554
	if (!cr6.getEQ()) goto loc_8225A554;
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// cmplwi cr6,r30,64
	cr6.compare<uint32_t>(r30.u32, 64, xer);
	// stw r11,612(r1)
	PPC_STORE_U32(ctx.r1.u32 + 612, r11.u32);
	// blt cr6,0x8225a504
	if (cr6.getLT()) goto loc_8225A504;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225A504:
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r1,356
	ctx.r10.s64 = ctx.r1.s64 + 356;
	// clrlwi r9,r9,28
	ctx.r9.u64 = ctx.r9.u32 & 0xF;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// lhz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// clrlwi r10,r10,28
	ctx.r10.u64 = ctx.r10.u32 & 0xF;
	// stb r10,1(r11)
	PPC_STORE_U8(r11.u32 + 1, ctx.r10.u8);
	// lbz r10,7(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rotlwi r10,r10,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 8);
	// rlwinm r9,r9,0,24,15
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFFFFFF00FF;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwimi r9,r10,20,24,27
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 20) & 0xF0) | (ctx.r9.u64 & 0xFFFFFFFFFFFFFF0F);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r30,612(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 612);
loc_8225A554:
	// addi r11,r31,8
	r11.s64 = r31.s64 + 8;
loc_8225A558:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,65535
	cr6.compare<uint32_t>(ctx.r10.u32, 65535, xer);
	// bne cr6,0x8225a494
	if (!cr6.getEQ()) goto loc_8225A494;
loc_8225A564:
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x8226d310
	sub_8226D310(ctx, base);
	// stw r3,336(r1)
	PPC_STORE_U32(ctx.r1.u32 + 336, ctx.r3.u32);
	// li r10,8192
	ctx.r10.s64 = 8192;
	// addi r9,r1,1136
	ctx.r9.s64 = ctx.r1.s64 + 1136;
	// addi r8,r1,336
	ctx.r8.s64 = ctx.r1.s64 + 336;
	// addi r7,r1,304
	ctx.r7.s64 = ctx.r1.s64 + 304;
	// li r6,256
	ctx.r6.s64 = 256;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x8226ea40
	sub_8226EA40(ctx, base);
	// mr. r23,r3
	r23.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r23.s32, 0, xer);
	// blt 0x8225a9c4
	if (cr0.getLT()) goto loc_8225A9C4;
	// lwz r11,336(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 336);
	// cmplwi cr6,r11,8192
	cr6.compare<uint32_t>(r11.u32, 8192, xer);
	// ble cr6,0x8225a5b0
	if (!cr6.getGT()) goto loc_8225A5B0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225A5B0:
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// li r10,9
	ctx.r10.s64 = 9;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8225A5C0:
	// std r9,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r9.u64);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// bdnz 0x8225a5c0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8225A5C0;
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// stw r24,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r24.u32);
	// lis r7,-32204
	ctx.r7.s64 = -2110521344;
	// lis r8,-32232
	ctx.r8.s64 = -2112356352;
	// lis r9,-32232
	ctx.r9.s64 = -2112356352;
	// lis r6,-32219
	ctx.r6.s64 = -2111504384;
	// std r25,0(r11)
	PPC_STORE_U64(r11.u32 + 0, r25.u64);
	// lis r10,-32195
	ctx.r10.s64 = -2109931520;
	// std r25,8(r11)
	PPC_STORE_U64(r11.u32 + 8, r25.u64);
	// addi r6,r6,29568
	ctx.r6.s64 = ctx.r6.s64 + 29568;
	// std r25,16(r11)
	PPC_STORE_U64(r11.u32 + 16, r25.u64);
	// lis r26,-32219
	r26.s64 = -2111504384;
	// std r25,24(r11)
	PPC_STORE_U64(r11.u32 + 24, r25.u64);
	// addi r11,r1,88
	r11.s64 = ctx.r1.s64 + 88;
	// lis r27,-32219
	r27.s64 = -2111504384;
	// lis r28,-32219
	r28.s64 = -2111504384;
	// lis r29,-32219
	r29.s64 = -2111504384;
	// stw r6,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, ctx.r6.u32);
	// lis r30,-32195
	r30.s64 = -2109931520;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// addi r11,r7,23912
	r11.s64 = ctx.r7.s64 + 23912;
	// lis r31,-32219
	r31.s64 = -2111504384;
	// lis r5,-32204
	ctx.r5.s64 = -2110521344;
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// addi r5,r5,23912
	ctx.r5.s64 = ctx.r5.s64 + 23912;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// addi r11,r8,-21952
	r11.s64 = ctx.r8.s64 + -21952;
	// li r24,50
	r24.s64 = 50;
	// addi r26,r26,29384
	r26.s64 = r26.s64 + 29384;
	// addi r27,r27,29560
	r27.s64 = r27.s64 + 29560;
	// stw r6,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r6.u32);
	// addi r28,r28,29392
	r28.s64 = r28.s64 + 29392;
	// stw r5,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r5.u32);
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// addi r11,r9,-21952
	r11.s64 = ctx.r9.s64 + -21952;
	// addi r29,r29,29472
	r29.s64 = r29.s64 + 29472;
	// stw r24,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r24.u32);
	// addi r30,r30,8928
	r30.s64 = r30.s64 + 8928;
	// stw r26,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r26.u32);
	// addi r31,r31,29432
	r31.s64 = r31.s64 + 29432;
	// stw r27,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, r27.u32);
	// li r4,13
	ctx.r4.s64 = 13;
	// stw r28,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r28.u32);
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// addi r11,r10,8928
	r11.s64 = ctx.r10.s64 + 8928;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stw r29,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r29.u32);
	// stw r30,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r30.u32);
	// stw r31,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r31.u32);
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// bl 0x8226b040
	sub_8226B040(ctx, base);
	// lwz r11,336(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 336);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// lwz r4,332(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 332);
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// bl 0x82266d58
	sub_82266D58(ctx, base);
	// mr. r28,r3
	r28.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// beq 0x8225a990
	if (cr0.getEQ()) goto loc_8225A990;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8226b808
	sub_8226B808(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// bl 0x82267128
	sub_82267128(ctx, base);
	// lwz r11,612(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 612);
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// mr r31,r25
	r31.u64 = r25.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225a70c
	if (cr6.getEQ()) goto loc_8225A70C;
loc_8225A6E8:
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,40
	ctx.r4.s64 = 40;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x82258080
	sub_82258080(ctx, base);
	// lwz r11,612(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 612);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// blt cr6,0x8225a6e8
	if (cr6.getLT()) goto loc_8225A6E8;
loc_8225A70C:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stw r25,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r25.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225a75c
	if (cr6.getEQ()) goto loc_8225A75C;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8226adf8
	sub_8226ADF8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8226ade0
	sub_8226ADE0(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x8226bfd8
	sub_8226BFD8(ctx, base);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8226c9a8
	sub_8226C9A8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8225a790
	goto loc_8225A790;
loc_8225A75C:
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82257c80
	sub_82257C80(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x8225a798
	if (!cr0.getEQ()) goto loc_8225A798;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// bl 0x8226ade0
	sub_8226ADE0(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x8226c138
	sub_8226C138(ctx, base);
	// bl 0x82268c68
	sub_82268C68(ctx, base);
	// bl 0x82269010
	sub_82269010(ctx, base);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
loc_8225A790:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x8225a7a0
	if (cr6.getEQ()) goto loc_8225A7A0;
loc_8225A798:
	// lis r23,-32768
	r23.s64 = -2147483648;
	// ori r23,r23,16389
	r23.u64 = r23.u64 | 16389;
loc_8225A7A0:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// blt cr6,0x8225a97c
	if (cr6.getLT()) goto loc_8225A97C;
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mr r29,r25
	r29.u64 = r25.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8225a7f8
	if (!cr6.getEQ()) goto loc_8225A7F8;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x82269bd8
	sub_82269BD8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x82268c68
	sub_82268C68(ctx, base);
	// b 0x8225a7f0
	goto loc_8225A7F0;
loc_8225A7CC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82269010
	sub_82269010(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8225a7e4
	if (!cr6.getEQ()) goto loc_8225A7E4;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
loc_8225A7E4:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82268f68
	sub_82268F68(ctx, base);
loc_8225A7F0:
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x8225a7cc
	if (!cr0.getEQ()) goto loc_8225A7CC;
loc_8225A7F8:
	// addi r11,r29,1
	r11.s64 = r29.s64 + 1;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// rlwinm r3,r11,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x8209d000
	sub_8209D000(ctx, base);
	// mr. r26,r3
	r26.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r26.s32, 0, xer);
	// bne 0x8225a818
	if (!cr0.getEQ()) goto loc_8225A818;
	// lis r23,-32761
	r23.s64 = -2147024896;
	// ori r23,r23,14
	r23.u64 = r23.u64 | 14;
loc_8225A818:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// blt cr6,0x8225a8a0
	if (cr6.getLT()) goto loc_8225A8A0;
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mr r31,r26
	r31.u64 = r26.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8225a89c
	if (!cr6.getEQ()) goto loc_8225A89C;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x82269bd8
	sub_82269BD8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x82268c68
	sub_82268C68(ctx, base);
	// b 0x8225a894
	goto loc_8225A894;
loc_8225A844:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82269010
	sub_82269010(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8225a888
	if (!cr6.getEQ()) goto loc_8225A888;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// addi r10,r1,356
	ctx.r10.s64 = ctx.r1.s64 + 356;
	// lwz r9,8(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// li r8,12
	ctx.r8.s64 = 12;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// divwu r9,r9,r8
	ctx.r9.u32 = ctx.r9.u32 / ctx.r8.u32;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// rlwimi r9,r11,20,16,19
	ctx.r9.u64 = (__builtin_rotateleft32(r11.u32, 20) & 0xF000) | (ctx.r9.u64 & 0xFFFFFFFFFFFF0FFF);
	// rlwimi r9,r11,0,12,15
	ctx.r9.u64 = (__builtin_rotateleft32(r11.u32, 0) & 0xF0000) | (ctx.r9.u64 & 0xFFFFFFFFFFF0FFFF);
	// clrlwi r11,r9,12
	r11.u64 = ctx.r9.u32 & 0xFFFFF;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
loc_8225A888:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82268f68
	sub_82268F68(ctx, base);
loc_8225A894:
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x8225a844
	if (!cr0.getEQ()) goto loc_8225A844;
loc_8225A89C:
	// stw r25,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r25.u32);
loc_8225A8A0:
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r25.u32);
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// blt cr6,0x8225a968
	if (cr6.getLT()) goto loc_8225A968;
	// mr r9,r26
	ctx.r9.u64 = r26.u64;
	// lwz r10,2668(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2668);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r7,r1,84
	ctx.r7.s64 = ctx.r1.s64 + 84;
	// lwz r5,2660(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2660);
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x82259120
	sub_82259120(ctx, base);
	// lwz r31,84(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr. r23,r3
	r23.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r23.s32, 0, xer);
	// blt 0x8225a958
	if (cr0.getLT()) goto loc_8225A958;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// stw r31,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, r31.u32);
	// bl 0x8225a000
	sub_8225A000(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8218f338
	sub_8218F338(ctx, base);
	// mr r30,r25
	r30.u64 = r25.u64;
	// mr. r29,r3
	r29.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// beq 0x8225a938
	if (cr0.getEQ()) goto loc_8225A938;
loc_8225A8FC:
	// addi r5,r1,100
	ctx.r5.s64 = ctx.r1.s64 + 100;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8218f398
	sub_8218F398(ctx, base);
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225a92c
	if (cr6.getEQ()) goto loc_8225A92C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// clrlwi. r10,r11,27
	ctx.r10.u64 = r11.u32 & 0x1F;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225a92c
	if (cr0.getEQ()) goto loc_8225A92C;
	// oris r11,r11,8
	r11.u64 = r11.u64 | 524288;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_8225A92C:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmplw cr6,r30,r29
	cr6.compare<uint32_t>(r30.u32, r29.u32, xer);
	// blt cr6,0x8225a8fc
	if (cr6.getLT()) goto loc_8225A8FC;
loc_8225A938:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82192a48
	sub_82192A48(ctx, base);
	// mr r6,r17
	ctx.r6.u64 = r17.u64;
	// mr r5,r18
	ctx.r5.u64 = r18.u64;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82192a50
	sub_82192A50(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
loc_8225A958:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8225a968
	if (cr6.getEQ()) goto loc_8225A968;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821929c8
	sub_821929C8(ctx, base);
loc_8225A968:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x8225a97c
	if (cr6.getEQ()) goto loc_8225A97C;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8209d060
	sub_8209D060(ctx, base);
loc_8225A97C:
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x822671c0
	sub_822671C0(ctx, base);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8226bb50
	sub_8226BB50(ctx, base);
	// b 0x8225a99c
	goto loc_8225A99C;
loc_8225A990:
	// lis r23,-32768
	r23.s64 = -2147483648;
	// stw r25,332(r1)
	PPC_STORE_U32(ctx.r1.u32 + 332, r25.u32);
	// ori r23,r23,16389
	r23.u64 = r23.u64 | 16389;
loc_8225A99C:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x8225a9b0
	if (cr6.getEQ()) goto loc_8225A9B0;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82266e40
	sub_82266E40(ctx, base);
loc_8225A9B0:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8226b628
	sub_8226B628(ctx, base);
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// bl 0x8209d060
	sub_8209D060(ctx, base);
loc_8225A9C4:
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// addi r1,r1,2576
	ctx.r1.s64 = ctx.r1.s64 + 2576;
	// b 0x823ed158
	return;
}

__attribute__((alias("__imp__sub_8225A9D0"))) PPC_WEAK_FUNC(sub_8225A9D0);
PPC_FUNC_IMPL(__imp__sub_8225A9D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8225aa50
	if (cr6.getEQ()) goto loc_8225AA50;
	// cmplwi cr6,r4,4
	cr6.compare<uint32_t>(ctx.r4.u32, 4, xer);
	// blt cr6,0x8225aa50
	if (cr6.getLT()) goto loc_8225AA50;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x8225aa50
	if (cr6.getEQ()) goto loc_8225AA50;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x8225aa50
	if (cr6.getEQ()) goto loc_8225AA50;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lis r31,-2
	r31.s64 = -131072;
	// rlwinm r11,r11,0,0,15
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF0000;
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// bne cr6,0x8225aa2c
	if (!cr6.getEQ()) goto loc_8225AA2C;
	// lwz r11,204(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// lwz r11,196(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x8225a3b8
	sub_8225A3B8(ctx, base);
	// b 0x8225aa58
	goto loc_8225AA58;
loc_8225AA2C:
	// lis r31,-1
	r31.s64 = -65536;
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// bne cr6,0x8225aa50
	if (!cr6.getEQ()) goto loc_8225AA50;
	// lwz r11,204(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// lwz r11,196(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x8225a060
	sub_8225A060(ctx, base);
	// b 0x8225aa58
	goto loc_8225AA58;
loc_8225AA50:
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,87
	ctx.r3.u64 = ctx.r3.u64 | 87;
loc_8225AA58:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225AA70"))) PPC_WEAK_FUNC(sub_8225AA70);
PPC_FUNC_IMPL(__imp__sub_8225AA70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r6
	r31.u64 = ctx.r6.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// mr r23,r10
	r23.u64 = ctx.r10.u64;
	// lwz r26,4(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi r26,0
	cr0.compare<uint32_t>(r26.u32, 0, xer);
	// add r24,r11,r8
	r24.u64 = r11.u64 + ctx.r8.u64;
	// beq 0x8225ab88
	if (cr0.getEQ()) goto loc_8225AB88;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// ori r25,r3,2
	r25.u64 = ctx.r3.u64 | 2;
	// bne cr6,0x8225aab0
	if (!cr6.getEQ()) goto loc_8225AAB0;
	// ori r25,r3,1
	r25.u64 = ctx.r3.u64 | 1;
loc_8225AAB0:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r29,r11,-19344
	r29.s64 = r11.s64 + -19344;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r28,r11,23060
	r28.s64 = r11.s64 + 23060;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// li r11,0
	r11.s64 = 0;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// std r11,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, r11.u64);
	// bne cr6,0x8225ab14
	if (!cr6.getEQ()) goto loc_8225AB14;
	// lwz r10,24(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// addi r9,r31,36
	ctx.r9.s64 = r31.s64 + 36;
	// lwz r8,28(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r10,r10,9
	ctx.r10.s64 = ctx.r10.s64 + 9;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r9,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r9.u32);
	// add r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 + r31.u64;
	// stw r8,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r8.u32);
	// stw r10,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r10.u32);
	// b 0x8225ab1c
	goto loc_8225AB1C;
loc_8225AB14:
	// addi r10,r31,32
	ctx.r10.s64 = r31.s64 + 32;
	// stw r10,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r10.u32);
loc_8225AB1C:
	// lis r10,-32218
	ctx.r10.s64 = -2111438848;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// lis r9,-32219
	ctx.r9.s64 = -2111504384;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r6,r10,-26872
	ctx.r6.s64 = ctx.r10.s64 + -26872;
	// stw r30,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r30.u32);
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r25.u32);
	// addi r9,r9,32296
	ctx.r9.s64 = ctx.r9.s64 + 32296;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// bl 0x82407ce0
	sub_82407CE0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// blt cr6,0x8225ab8c
	if (cr6.getLT()) goto loc_8225AB8C;
loc_8225AB88:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8225AB8C:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_8225AB98"))) PPC_WEAK_FUNC(sub_8225AB98);
PPC_FUNC_IMPL(__imp__sub_8225AB98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r4,r11,-19280
	ctx.r4.s64 = r11.s64 + -19280;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r29,r11,-19344
	r29.s64 = r11.s64 + -19344;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r28,r11,23060
	r28.s64 = r11.s64 + 23060;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,0(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r11,-19300
	ctx.r4.s64 = r11.s64 + -19300;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-19312
	ctx.r4.s64 = r11.s64 + -19312;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lwz r5,4(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r4,r30,8
	ctx.r4.s64 = r30.s64 + 8;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x8225ac50
	if (!cr0.getLT()) goto loc_8225AC50;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8225ac50
	if (cr6.getLT()) goto loc_8225AC50;
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
loc_8225AC50:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-21368
	ctx.r4.s64 = r11.s64 + -21368;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8225AC88"))) PPC_WEAK_FUNC(sub_8225AC88);
PPC_FUNC_IMPL(__imp__sub_8225AC88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed104
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r29,r7
	r29.u64 = ctx.r7.u64;
	// mr r8,r5
	ctx.r8.u64 = ctx.r5.u64;
	// mr r9,r6
	ctx.r9.u64 = ctx.r6.u64;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// li r5,32
	ctx.r5.s64 = 32;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8225aa70
	sub_8225AA70(ctx, base);
	// mr. r15,r3
	r15.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r15.s32, 0, xer);
	// blt 0x8225aefc
	if (cr0.getLT()) goto loc_8225AEFC;
	// rlwinm. r11,r29,0,23,23
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x100;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225aefc
	if (cr0.getEQ()) goto loc_8225AEFC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r29,r11,-19344
	r29.s64 = r11.s64 + -19344;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r28,r11,23060
	r28.s64 = r11.s64 + 23060;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-19320
	ctx.r4.s64 = r11.s64 + -19320;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lhz r6,24(r30)
	ctx.r6.u64 = PPC_LOAD_U16(r30.u32 + 24);
	// addi r4,r11,-19104
	ctx.r4.s64 = r11.s64 + -19104;
	// lhz r5,26(r30)
	ctx.r5.u64 = PPC_LOAD_U16(r30.u32 + 26);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lwz r11,28(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r10,-19152
	ctx.r4.s64 = ctx.r10.s64 + -19152;
	// rlwinm r7,r11,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// rlwinm r6,r11,28,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0x1;
	// clrlwi r5,r11,28
	ctx.r5.u64 = r11.u32 & 0xF;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// rlwinm. r23,r11,27,27,31
	r23.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1F;
	cr0.compare<int32_t>(r23.s32, 0, xer);
	// beq 0x8225aeec
	if (cr0.getEQ()) goto loc_8225AEEC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// lwz r17,96(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-19180
	ctx.r4.s64 = r11.s64 + -19180;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// li r16,0
	r16.s64 = 0;
	// li r27,0
	r27.s64 = 0;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x8225aed4
	if (cr6.getEQ()) goto loc_8225AED4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r22,r11,-19232
	r22.s64 = r11.s64 + -19232;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r26,r11,-19260
	r26.s64 = r11.s64 + -19260;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r25,r11,-25544
	r25.s64 = r11.s64 + -25544;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r21,r11,31520
	r21.s64 = r11.s64 + 31520;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r20,r11,31516
	r20.s64 = r11.s64 + 31516;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r19,r11,31508
	r19.s64 = r11.s64 + 31508;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r24,r11,2334
	r24.s64 = r11.s64 + 2334;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r18,r11,15264
	r18.s64 = r11.s64 + 15264;
loc_8225ADFC:
	// lwz r30,0(r17)
	r30.u64 = PPC_LOAD_U32(r17.u32 + 0);
	// mr r8,r18
	ctx.r8.u64 = r18.u64;
	// rlwinm r9,r30,20,28,31
	ctx.r9.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 20) & 0xF;
	// rlwinm r6,r30,28,28,31
	ctx.r6.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 28) & 0xF;
	// clrlwi r7,r30,28
	ctx.r7.u64 = r30.u32 & 0xF;
	// rlwinm. r11,r9,0,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8225ae1c
	if (!cr0.getEQ()) goto loc_8225AE1C;
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
loc_8225AE1C:
	// rlwinm. r11,r9,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r11,r19
	r11.u64 = r19.u64;
	// bne 0x8225ae2c
	if (!cr0.getEQ()) goto loc_8225AE2C;
	// mr r11,r24
	r11.u64 = r24.u64;
loc_8225AE2C:
	// rlwinm. r10,r9,0,30,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
	// bne 0x8225ae3c
	if (!cr0.getEQ()) goto loc_8225AE3C;
	// mr r10,r24
	ctx.r10.u64 = r24.u64;
loc_8225AE3C:
	// clrlwi. r9,r9,31
	ctx.r9.u64 = ctx.r9.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// bne 0x8225ae4c
	if (!cr0.getEQ()) goto loc_8225AE4C;
	// mr r9,r24
	ctx.r9.u64 = r24.u64;
loc_8225AE4C:
	// rlwinm r6,r6,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r8,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r8.u32);
	// rlwinm r8,r30,24,28,31
	ctx.r8.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 24) & 0xF;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwzx r6,r6,r25
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + r25.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x8225aec0
	if (cr6.getEQ()) goto loc_8225AEC0;
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmplw cr6,r16,r11
	cr6.compare<uint32_t>(r16.u32, r11.u32, xer);
	// blt cr6,0x8225aec0
	if (cr6.getLT()) goto loc_8225AEC0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225AEC0:
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// clrlwi r16,r30,24
	r16.u64 = r30.u32 & 0xFF;
	// addi r17,r17,4
	r17.s64 = r17.s64 + 4;
	// cmplw cr6,r27,r23
	cr6.compare<uint32_t>(r27.u32, r23.u32, xer);
	// blt cr6,0x8225adfc
	if (cr6.getLT()) goto loc_8225ADFC;
loc_8225AED4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225AEEC:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-19328
	ctx.r4.s64 = r11.s64 + -19328;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
loc_8225AEFC:
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x823ed154
	return;
}

__attribute__((alias("__imp__sub_8225AF08"))) PPC_WEAK_FUNC(sub_8225AF08);
PPC_FUNC_IMPL(__imp__sub_8225AF08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// mr r8,r5
	ctx.r8.u64 = ctx.r5.u64;
	// mr r9,r6
	ctx.r9.u64 = ctx.r6.u64;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// li r5,36
	ctx.r5.s64 = 36;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225aa70
	sub_8225AA70(ctx, base);
	// mr. r14,r3
	r14.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r14.s32, 0, xer);
	// stw r14,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r14.u32);
	// blt 0x8225b330
	if (cr0.getLT()) goto loc_8225B330;
	// rlwinm. r11,r30,0,23,23
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x100;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225b330
	if (cr0.getEQ()) goto loc_8225B330;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// lwz r30,28(r23)
	r30.u64 = PPC_LOAD_U32(r23.u32 + 28);
	// lwz r26,24(r23)
	r26.u64 = PPC_LOAD_U32(r23.u32 + 24);
	// addi r15,r11,-19328
	r15.s64 = r11.s64 + -19328;
	// lwz r24,96(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// addi r22,r11,-19320
	r22.s64 = r11.s64 + -19320;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// stw r15,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r15.u32);
	// addi r28,r11,23060
	r28.s64 = r11.s64 + 23060;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r27,r11,-19344
	r27.s64 = r11.s64 + -19344;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r16,r11,-25544
	r16.s64 = r11.s64 + -25544;
	// stw r16,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r16.u32);
	// beq 0x8225b0ac
	if (cr0.getEQ()) goto loc_8225B0AC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-18844
	ctx.r4.s64 = r11.s64 + -18844;
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// add r29,r11,r24
	r29.u64 = r11.u64 + r24.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// li r25,0
	r25.s64 = 0;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8225b0a0
	if (cr6.getEQ()) goto loc_8225B0A0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r21,r29
	r21.u64 = r29.u64;
	// addi r19,r11,-18848
	r19.s64 = r11.s64 + -18848;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r18,r11,-24680
	r18.s64 = r11.s64 + -24680;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r17,r11,-18872
	r17.s64 = r11.s64 + -18872;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r20,r11,-18900
	r20.s64 = r11.s64 + -18900;
loc_8225B020:
	// lwz r29,0(r21)
	r29.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// rlwinm r11,r29,22,26,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 22) & 0x3C;
	// clrlwi r9,r29,20
	ctx.r9.u64 = r29.u32 & 0xFFF;
	// rlwinm r7,r29,16,28,31
	ctx.r7.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 16) & 0xF;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r8,r9
	ctx.r8.u64 = ctx.r9.u64;
	// lwzx r6,r11,r16
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + r16.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// rlwinm. r11,r29,0,9,9
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x400000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225b05c
	if (cr0.getEQ()) goto loc_8225B05C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r17
	ctx.r4.u64 = r17.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225B05C:
	// rlwinm. r11,r29,12,30,31
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 12) & 0x3;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225b078
	if (cr0.getEQ()) goto loc_8225B078;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// lwzx r5,r11,r18
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + r18.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225B078:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r21,r21,4
	r21.s64 = r21.s64 + 4;
	// cmplw cr6,r25,r30
	cr6.compare<uint32_t>(r25.u32, r30.u32, xer);
	// blt cr6,0x8225b020
	if (cr6.getLT()) goto loc_8225B020;
loc_8225B0A0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r15
	ctx.r4.u64 = r15.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
loc_8225B0AC:
	// lwz r11,20(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 20);
	// rlwinm. r21,r11,27,27,31
	r21.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1F;
	cr0.compare<int32_t>(r21.s32, 0, xer);
	// beq 0x8225b330
	if (cr0.getEQ()) goto loc_8225B330;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lwz r9,32(r23)
	ctx.r9.u64 = PPC_LOAD_U32(r23.u32 + 32);
	// add r11,r21,r30
	r11.u64 = r21.u64 + r30.u64;
	// add r10,r30,r26
	ctx.r10.u64 = r30.u64 + r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r9,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r9.u32);
	// add r9,r11,r26
	ctx.r9.u64 = r11.u64 + r26.u64;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// add r22,r10,r24
	r22.u64 = ctx.r10.u64 + r24.u64;
	// addi r4,r11,-18932
	ctx.r4.s64 = r11.s64 + -18932;
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// li r25,0
	r25.s64 = 0;
	// cmplwi cr6,r21,0
	cr6.compare<uint32_t>(r21.u32, 0, xer);
	// beq cr6,0x8225b324
	if (cr6.getEQ()) goto loc_8225B324;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r19,r11,-18992
	r19.s64 = r11.s64 + -18992;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r20,r11,-19008
	r20.s64 = r11.s64 + -19008;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r18,r11,-19232
	r18.s64 = r11.s64 + -19232;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r24,r11,-19036
	r24.s64 = r11.s64 + -19036;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r17,r11,31520
	r17.s64 = r11.s64 + 31520;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r16,r11,31516
	r16.s64 = r11.s64 + 31516;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r15,r11,31508
	r15.s64 = r11.s64 + 31508;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r23,r11,2334
	r23.s64 = r11.s64 + 2334;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r14,r11,15264
	r14.s64 = r11.s64 + 15264;
	// b 0x8225b18c
	goto loc_8225B18C;
loc_8225B188:
	// lwz r30,104(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
loc_8225B18C:
	// lwz r29,0(r22)
	r29.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// rlwinm r9,r29,20,28,31
	ctx.r9.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 20) & 0xF;
	// rlwinm r5,r29,28,28,31
	ctx.r5.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 28) & 0xF;
	// clrlwi r7,r29,28
	ctx.r7.u64 = r29.u32 & 0xF;
	// rlwinm r8,r29,24,28,31
	ctx.r8.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 24) & 0xF;
	// rlwinm. r11,r9,0,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8225b1b0
	if (!cr0.getEQ()) goto loc_8225B1B0;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
loc_8225B1B0:
	// rlwinm. r11,r9,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r11,r15
	r11.u64 = r15.u64;
	// bne 0x8225b1c0
	if (!cr0.getEQ()) goto loc_8225B1C0;
	// mr r11,r23
	r11.u64 = r23.u64;
loc_8225B1C0:
	// rlwinm. r10,r9,0,30,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// mr r10,r16
	ctx.r10.u64 = r16.u64;
	// bne 0x8225b1d0
	if (!cr0.getEQ()) goto loc_8225B1D0;
	// mr r10,r23
	ctx.r10.u64 = r23.u64;
loc_8225B1D0:
	// clrlwi. r9,r9,31
	ctx.r9.u64 = ctx.r9.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r9,r17
	ctx.r9.u64 = r17.u64;
	// bne 0x8225b1e0
	if (!cr0.getEQ()) goto loc_8225B1E0;
	// mr r9,r23
	ctx.r9.u64 = r23.u64;
loc_8225B1E0:
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// rlwinm r6,r5,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwzx r6,r6,r11
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x8225b254
	if (cr6.getEQ()) goto loc_8225B254;
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// blt cr6,0x8225b254
	if (cr6.getLT()) goto loc_8225B254;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r18
	ctx.r4.u64 = r18.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225B254:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// rlwinm r30,r29,16,20,31
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 16) & 0xFFF;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bge cr6,0x8225b2d0
	if (!cr6.getLT()) goto loc_8225B2D0;
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r26,r11,r10
	r26.u64 = r11.u64 + ctx.r10.u64;
loc_8225B278:
	// lwz r29,0(r26)
	r29.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// clrlwi r6,r29,20
	ctx.r6.u64 = r29.u32 & 0xFFF;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// rlwinm. r11,r29,0,19,19
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x1000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8225b2c4
	if (!cr0.getEQ()) goto loc_8225B2C4;
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// blt cr6,0x8225b278
	if (cr6.getLT()) goto loc_8225B278;
loc_8225B2C4:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// blt cr6,0x8225b2f4
	if (cr6.getLT()) goto loc_8225B2F4;
loc_8225B2D0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225B2F4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r22,r22,4
	r22.s64 = r22.s64 + 4;
	// cmplw cr6,r25,r21
	cr6.compare<uint32_t>(r25.u32, r21.u32, xer);
	// blt cr6,0x8225b188
	if (cr6.getLT()) goto loc_8225B188;
	// lwz r14,112(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r15,116(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_8225B324:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r15
	ctx.r4.u64 = r15.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
loc_8225B330:
	// mr r3,r14
	ctx.r3.u64 = r14.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_8225B340"))) PPC_WEAK_FUNC(sub_8225B340);
PPC_FUNC_IMPL(__imp__sub_8225B340) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r5,r7
	ctx.r5.u64 = ctx.r7.u64;
	// mr r6,r8
	ctx.r6.u64 = ctx.r8.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r11,36
	cr6.compare<uint32_t>(r11.u32, 36, xer);
	// bge cr6,0x8225b37c
	if (!cr6.getLT()) goto loc_8225B37C;
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,87
	ctx.r3.u64 = ctx.r3.u64 | 87;
loc_8225B37C:
	// addi r11,r10,3
	r11.s64 = ctx.r10.s64 + 3;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225b3d8
	if (cr0.getEQ()) goto loc_8225B3D8;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8225b3d8
	if (cr6.getLT()) goto loc_8225B3D8;
	// cmplwi cr6,r4,1
	cr6.compare<uint32_t>(ctx.r4.u32, 1, xer);
	// blt cr6,0x8225b3c8
	if (cr6.getLT()) goto loc_8225B3C8;
	// beq cr6,0x8225b3b4
	if (cr6.getEQ()) goto loc_8225B3B4;
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,87
	ctx.r3.u64 = ctx.r3.u64 | 87;
	// b 0x8225b3d8
	goto loc_8225B3D8;
loc_8225B3B4:
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r4,r9
	ctx.r4.u64 = ctx.r9.u64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x8225af08
	sub_8225AF08(ctx, base);
	// b 0x8225b3d8
	goto loc_8225B3D8;
loc_8225B3C8:
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r4,r9
	ctx.r4.u64 = ctx.r9.u64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x8225ac88
	sub_8225AC88(ctx, base);
loc_8225B3D8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225B3F0"))) PPC_WEAK_FUNC(sub_8225B3F0);
PPC_FUNC_IMPL(__imp__sub_8225B3F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29032(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29032);
	// mflr r12
	// bl 0x823ed138
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r9
	r29.u64 = ctx.r9.u64;
	// stw r29,212(r31)
	PPC_STORE_U32(r31.u32 + 212, r29.u32);
	// mr r28,r10
	r28.u64 = ctx.r10.u64;
	// stw r28,220(r31)
	PPC_STORE_U32(r31.u32 + 220, r28.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8225b42c
	if (!cr6.getEQ()) goto loc_8225B42C;
loc_8225B420:
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,87
	ctx.r3.u64 = ctx.r3.u64 | 87;
	// b 0x8225b4e0
	// ERROR 8225B4E0
	return;
loc_8225B42C:
	// cmplwi cr6,r4,4
	cr6.compare<uint32_t>(ctx.r4.u32, 4, xer);
	// blt cr6,0x8225b420
	if (cr6.getLT()) goto loc_8225B420;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x8225b420
	if (cr6.getEQ()) goto loc_8225B420;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x8225b420
	if (cr6.getEQ()) goto loc_8225B420;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// lwz r11,236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 236);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// lwz r11,228(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 228);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x8225a9d0
	sub_8225A9D0(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// stw r30,96(r31)
	PPC_STORE_U32(r31.u32 + 96, r30.u32);
	// bge 0x8225b4a0
	if (!cr0.getLT()) goto loc_8225B4A0;
	// lis r11,-30602
	r11.s64 = -2005532672;
	// ori r11,r11,2921
	r11.u64 = r11.u64 | 2921;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// bne cr6,0x8225b4a0
	if (!cr6.getEQ()) goto loc_8225B4A0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r6,r11,-18672
	ctx.r6.s64 = r11.s64 + -18672;
	// li r5,48
	ctx.r5.s64 = 48;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mtctr r28
	ctr.u64 = r28.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8225B4A0:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x8225b4dc
	// ERROR 8225B4DC
	return;
}

__attribute__((alias("__imp__sub_8225B3F8"))) PPC_WEAK_FUNC(sub_8225B3F8);
PPC_FUNC_IMPL(__imp__sub_8225B3F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r9
	r29.u64 = ctx.r9.u64;
	// stw r29,212(r31)
	PPC_STORE_U32(r31.u32 + 212, r29.u32);
	// mr r28,r10
	r28.u64 = ctx.r10.u64;
	// stw r28,220(r31)
	PPC_STORE_U32(r31.u32 + 220, r28.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8225b42c
	if (!cr6.getEQ()) goto loc_8225B42C;
loc_8225B420:
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,87
	ctx.r3.u64 = ctx.r3.u64 | 87;
	// b 0x8225b4e0
	goto loc_8225B4E0;
loc_8225B42C:
	// cmplwi cr6,r4,4
	cr6.compare<uint32_t>(ctx.r4.u32, 4, xer);
	// blt cr6,0x8225b420
	if (cr6.getLT()) goto loc_8225B420;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x8225b420
	if (cr6.getEQ()) goto loc_8225B420;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x8225b420
	if (cr6.getEQ()) goto loc_8225B420;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// lwz r11,236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 236);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// lwz r11,228(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 228);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x8225a9d0
	sub_8225A9D0(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// stw r30,96(r31)
	PPC_STORE_U32(r31.u32 + 96, r30.u32);
	// bge 0x8225b4a0
	if (!cr0.getLT()) goto loc_8225B4A0;
	// lis r11,-30602
	r11.s64 = -2005532672;
	// ori r11,r11,2921
	r11.u64 = r11.u64 | 2921;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// bne cr6,0x8225b4a0
	if (!cr6.getEQ()) goto loc_8225B4A0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r6,r11,-18672
	ctx.r6.s64 = r11.s64 + -18672;
	// li r5,48
	ctx.r5.s64 = 48;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mtctr r28
	ctr.u64 = r28.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8225B4A0:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x8225b4dc
	goto loc_8225B4DC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r6,r11,-18728
	ctx.r6.s64 = r11.s64 + -18728;
	// lwz r11,220(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// li r5,47
	ctx.r5.s64 = 47;
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,212(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 212);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lis r30,-32768
	r30.s64 = -2147483648;
	// ori r30,r30,16389
	r30.u64 = r30.u64 | 16389;
	// stw r30,96(r31)
	PPC_STORE_U32(r31.u32 + 96, r30.u32);
loc_8225B4DC:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_8225B4E0:
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8225B4B0"))) PPC_WEAK_FUNC(sub_8225B4B0);
PPC_FUNC_IMPL(__imp__sub_8225B4B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r30{};
	PPCRegister r31{};
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r6,r11,-18728
	ctx.r6.s64 = r11.s64 + -18728;
	// lwz r11,220(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// li r5,47
	ctx.r5.s64 = 47;
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,212(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 212);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lis r30,-32768
	r30.s64 = -2147483648;
	// ori r30,r30,16389
	r30.u64 = r30.u64 | 16389;
	// stw r30,96(r31)
	PPC_STORE_U32(r31.u32 + 96, r30.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8225B4E8"))) PPC_WEAK_FUNC(sub_8225B4E8);
PPC_FUNC_IMPL(__imp__sub_8225B4E8) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225B4F8"))) PPC_WEAK_FUNC(sub_8225B4F8);
PPC_FUNC_IMPL(__imp__sub_8225B4F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-720(r1)
	ea = -720 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mr r23,r5
	r23.u64 = ctx.r5.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// mr r29,r9
	r29.u64 = ctx.r9.u64;
	// mr r28,r10
	r28.u64 = ctx.r10.u64;
	// bl 0x8209d000
	sub_8209D000(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x8225b544
	if (!cr0.getEQ()) goto loc_8225B544;
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,14
	ctx.r3.u64 = ctx.r3.u64 | 14;
	// b 0x8225b6b0
	goto loc_8225B6B0;
loc_8225B544:
	// lwz r11,812(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 812);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lwz r11,804(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 804);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x8225b3f8
	sub_8225B3F8(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// blt 0x8225b590
	if (cr0.getLT()) goto loc_8225B590;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r5,0(r25)
	ctx.r5.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x8218e538
	sub_8218E538(ctx, base);
loc_8225B590:
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8209d060
	sub_8209D060(ctx, base);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x8225b6ac
	if (cr6.getLT()) goto loc_8225B6AC;
	// rlwinm. r11,r24,0,27,27
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8225b6ac
	if (!cr0.getEQ()) goto loc_8225B6AC;
	// lwz r11,820(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 820);
	// li r31,0
	r31.s64 = 0;
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// lwz r4,0(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// rlwinm r27,r11,10,15,21
	r27.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 10) & 0x1FC00;
	// lis r11,-32219
	r11.s64 = -2111504384;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r7,r11,32416
	ctx.r7.s64 = r11.s64 + 32416;
	// stw r31,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r31.u32);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// bl 0x82345d68
	sub_82345D68(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// blt 0x8225b5f0
	if (cr0.getLT()) goto loc_8225B5F0;
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225b6ac
	if (cr6.getEQ()) goto loc_8225B6AC;
loc_8225B5F0:
	// cntlzw r11,r30
	r11.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r29.u32);
	// stw r28,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r28.u32);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// sth r31,120(r1)
	PPC_STORE_U16(ctx.r1.u32 + 120, r31.u16);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// cntlzw r10,r4
	ctx.r10.u64 = ctx.r4.u32 == 0 ? 32 : __builtin_clz(ctx.r4.u32);
	// stw r4,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r4.u32);
	// bge cr6,0x8225b628
	if (!cr6.getLT()) goto loc_8225B628;
	// lis r11,-32253
	r11.s64 = -2113732608;
	// addi r6,r11,-14048
	ctx.r6.s64 = r11.s64 + -14048;
	// b 0x8225b630
	goto loc_8225B630;
loc_8225B628:
	// lis r11,-32253
	r11.s64 = -2113732608;
	// addi r6,r11,-14100
	ctx.r6.s64 = r11.s64 + -14100;
loc_8225B630:
	// rlwinm r11,r10,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// addi r5,r11,7101
	ctx.r5.s64 = r11.s64 + 7101;
	// mtctr r28
	ctr.u64 = r28.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lis r11,-32218
	r11.s64 = -2111438848;
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// lwz r4,0(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// addi r7,r11,-27424
	ctx.r7.s64 = r11.s64 + -27424;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82345d68
	sub_82345D68(ctx, base);
	// lhz r11,120(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 120);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225b674
	if (cr0.getEQ()) goto loc_8225B674;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x822593f8
	sub_822593F8(ctx, base);
loc_8225B674:
	// lis r11,-32218
	r11.s64 = -2111438848;
	// lwz r4,0(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r7,r1,112
	ctx.r7.s64 = ctx.r1.s64 + 112;
	// addi r6,r11,-27424
	ctx.r6.s64 = r11.s64 + -27424;
	// li r5,68
	ctx.r5.s64 = 68;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x8225cdf0
	sub_8225CDF0(ctx, base);
	// lhz r11,120(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 120);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225b6ac
	if (cr0.getEQ()) goto loc_8225B6AC;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x822593f8
	sub_822593F8(ctx, base);
loc_8225B6AC:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_8225B6B0:
	// addi r1,r1,720
	ctx.r1.s64 = ctx.r1.s64 + 720;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_8225B6B8"))) PPC_WEAK_FUNC(sub_8225B6B8);
PPC_FUNC_IMPL(__imp__sub_8225B6B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// li r5,64
	ctx.r5.s64 = 64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// mr r31,r6
	r31.u64 = ctx.r6.u64;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8226fe68
	sub_8226FE68(ctx, base);
	// addi r11,r29,-1
	r11.s64 = r29.s64 + -1;
	// lfs f0,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f0.f64 = double(temp.f32);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// fcmpu cr6,f0,f0
	cr6.compare(f0.f64, f0.f64);
	// rlwinm r25,r11,27,31,31
	r25.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bne cr6,0x8225bd60
	if (!cr6.getEQ()) goto loc_8225BD60;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x8225b72c
	if (cr6.getEQ()) goto loc_8225B72C;
	// lis r11,-32253
	r11.s64 = -2113732608;
	// addi r5,r11,-20064
	ctx.r5.s64 = r11.s64 + -20064;
	// b 0x8225b734
	goto loc_8225B734;
loc_8225B72C:
	// lis r11,-32253
	r11.s64 = -2113732608;
	// addi r5,r11,-20072
	ctx.r5.s64 = r11.s64 + -20072;
loc_8225B734:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-17196
	ctx.r4.s64 = r11.s64 + -17196;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r30,r11,-19344
	r30.s64 = r11.s64 + -19344;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r29,r11,23060
	r29.s64 = r11.s64 + 23060;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lfs f2,100(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f1.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fcmpu cr6,f2,f1
	cr6.compare(ctx.f2.f64, ctx.f1.f64);
	// bne cr6,0x8225b7ac
	if (!cr6.getEQ()) goto loc_8225B7AC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// stfd f1,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f1.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// addi r4,r11,-17232
	ctx.r4.s64 = r11.s64 + -17232;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,12888(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12888);
	f0.f64 = double(temp.f32);
	// fmuls f2,f1,f0
	ctx.f2.f64 = double(float(ctx.f1.f64 * f0.f64));
	// stfd f2,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f2.u64);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// b 0x8225b7e8
	goto loc_8225B7E8;
loc_8225B7AC:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// stfd f2,40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f2.u64);
	// stfd f1,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f1.u64);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// addi r4,r11,-17280
	ctx.r4.s64 = r11.s64 + -17280;
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,12888(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12888);
	f0.f64 = double(temp.f32);
	// fmuls f4,f2,f0
	ctx.f4.f64 = double(float(ctx.f2.f64 * f0.f64));
	// stfd f4,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.f4.u64);
	// fmuls f3,f1,f0
	ctx.f3.f64 = double(float(ctx.f1.f64 * f0.f64));
	// stfd f3,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.f3.u64);
	// ld r8,56(r1)
	ctx.r8.u64 = PPC_LOAD_U64(ctx.r1.u32 + 56);
	// ld r7,48(r1)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r1.u32 + 48);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225B7E8:
	// lfs f0,116(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	f0.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f13,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// bne cr6,0x8225b81c
	if (!cr6.getEQ()) goto loc_8225B81C;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-17296
	ctx.r4.s64 = r11.s64 + -17296;
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// b 0x8225b844
	goto loc_8225B844;
loc_8225B81C:
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// fctiwz f13,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-17312
	ctx.r4.s64 = r11.s64 + -17312;
	// stfiwx f13,0,r10
	PPC_STORE_U32(ctx.r10.u32, ctx.f13.u32);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225B844:
	// lfs f0,108(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	f0.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f13,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// bne cr6,0x8225b878
	if (!cr6.getEQ()) goto loc_8225B878;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-17328
	ctx.r4.s64 = r11.s64 + -17328;
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// b 0x8225b8a0
	goto loc_8225B8A0;
loc_8225B878:
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// fctiwz f13,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-17348
	ctx.r4.s64 = r11.s64 + -17348;
	// stfiwx f13,0,r10
	PPC_STORE_U32(ctx.r10.u32, ctx.f13.u32);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225B8A0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-17352
	ctx.r4.s64 = r11.s64 + -17352;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f0,124(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	f0.f64 = double(temp.f32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-17372
	ctx.r4.s64 = r11.s64 + -17372;
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// addi r28,r11,2334
	r28.s64 = r11.s64 + 2334;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r27,r11,15268
	r27.s64 = r11.s64 + 15268;
	// bne cr6,0x8225b950
	if (!cr6.getEQ()) goto loc_8225B950;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	f0.f64 = double(temp.f32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-17396
	ctx.r4.s64 = r11.s64 + -17396;
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lwz r10,160(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// li r11,64
	r11.s64 = 64;
	// addi r5,r10,1
	ctx.r5.s64 = ctx.r10.s64 + 1;
	// divw r11,r11,r5
	r11.s32 = r11.s32 / ctx.r5.s32;
	// twllei r5,0
	// mulli r11,r11,3
	r11.s64 = r11.s64 * 3;
	// cmpwi cr6,r11,63
	cr6.compare<int32_t>(r11.s32, 63, xer);
	// ble cr6,0x8225b984
	if (!cr6.getGT()) goto loc_8225B984;
	// li r26,63
	r26.s64 = 63;
	// b 0x8225b994
	goto loc_8225B994;
loc_8225B950:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-21432
	ctx.r4.s64 = r11.s64 + -21432;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lwz r10,160(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// li r11,64
	r11.s64 = 64;
	// addi r5,r10,1
	ctx.r5.s64 = ctx.r10.s64 + 1;
	// divw r11,r11,r5
	r11.s32 = r11.s32 / ctx.r5.s32;
	// twllei r5,0
	// mulli r11,r11,3
	r11.s64 = r11.s64 * 3;
	// cmpwi cr6,r11,31
	cr6.compare<int32_t>(r11.s32, 31, xer);
	// ble cr6,0x8225b984
	if (!cr6.getGT()) goto loc_8225B984;
	// li r26,31
	r26.s64 = 31;
	// b 0x8225b994
	goto loc_8225B994;
loc_8225B984:
	// mr r26,r11
	r26.u64 = r11.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// cmplwi cr6,r26,1
	cr6.compare<uint32_t>(r26.u32, 1, xer);
	// beq cr6,0x8225b998
	if (cr6.getEQ()) goto loc_8225B998;
loc_8225B994:
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
loc_8225B998:
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// bne cr6,0x8225b9a8
	if (!cr6.getEQ()) goto loc_8225B9A8;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
loc_8225B9A8:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// addi r4,r11,-17420
	ctx.r4.s64 = r11.s64 + -17420;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lfs f0,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	f0.f64 = double(temp.f32);
	// lfs f13,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f13.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// bne cr6,0x8225ba08
	if (!cr6.getEQ()) goto loc_8225BA08;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-17480
	ctx.r4.s64 = r11.s64 + -17480;
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// b 0x8225ba30
	goto loc_8225BA30;
loc_8225BA08:
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// fctiwz f13,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-17544
	ctx.r4.s64 = r11.s64 + -17544;
	// stfiwx f13,0,r10
	PPC_STORE_U32(ctx.r10.u32, ctx.f13.u32);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225BA30:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225baa4
	if (cr6.getEQ()) goto loc_8225BAA4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-17624
	ctx.r4.s64 = r11.s64 + -17624;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-17648
	ctx.r4.s64 = r11.s64 + -17648;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225BAA4:
	// lwz r11,140(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225bb00
	if (cr6.getEQ()) goto loc_8225BB00;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-17728
	ctx.r4.s64 = r11.s64 + -17728;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-17800
	ctx.r4.s64 = r11.s64 + -17800;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225BB00:
	// lwz r11,144(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225bb34
	if (cr6.getEQ()) goto loc_8225BB34;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-17888
	ctx.r4.s64 = r11.s64 + -17888;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225BB34:
	// lwz r11,148(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225bb68
	if (cr6.getEQ()) goto loc_8225BB68;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-17960
	ctx.r4.s64 = r11.s64 + -17960;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225BB68:
	// lwz r11,152(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225bbc4
	if (cr6.getEQ()) goto loc_8225BBC4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-18040
	ctx.r4.s64 = r11.s64 + -18040;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-18080
	ctx.r4.s64 = r11.s64 + -18080;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225BBC4:
	// lwz r11,156(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225bc20
	if (cr6.getEQ()) goto loc_8225BC20;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-18160
	ctx.r4.s64 = r11.s64 + -18160;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-18208
	ctx.r4.s64 = r11.s64 + -18208;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225BC20:
	// cmplwi cr6,r26,9
	cr6.compare<uint32_t>(r26.u32, 9, xer);
	// beq cr6,0x8225bc30
	if (cr6.getEQ()) goto loc_8225BC30;
	// cmplwi cr6,r26,6
	cr6.compare<uint32_t>(r26.u32, 6, xer);
	// bne cr6,0x8225bc58
	if (!cr6.getEQ()) goto loc_8225BC58;
loc_8225BC30:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-18288
	ctx.r4.s64 = r11.s64 + -18288;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225BC58:
	// cmplwi cr6,r26,3
	cr6.compare<uint32_t>(r26.u32, 3, xer);
	// bne cr6,0x8225bd48
	if (!cr6.getEQ()) goto loc_8225BD48;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-18368
	ctx.r4.s64 = r11.s64 + -18368;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,56
	cr6.compare<int32_t>(r11.s32, 56, xer);
	// ble cr6,0x8225bca8
	if (!cr6.getGT()) goto loc_8225BCA8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-18432
	ctx.r4.s64 = r11.s64 + -18432;
	// b 0x8225bcb0
	goto loc_8225BCB0;
loc_8225BCA8:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-18488
	ctx.r4.s64 = r11.s64 + -18488;
loc_8225BCB0:
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x8225bce0
	if (cr6.getEQ()) goto loc_8225BCE0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r5,r11,-18508
	ctx.r5.s64 = r11.s64 + -18508;
	// b 0x8225bce8
	goto loc_8225BCE8;
loc_8225BCE0:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r5,r11,-18528
	ctx.r5.s64 = r11.s64 + -18528;
loc_8225BCE8:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-18576
	ctx.r4.s64 = r11.s64 + -18576;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// subfic r10,r25,0
	xer.ca = r25.u32 <= 0;
	ctx.r10.s64 = 0 - r25.s64;
	// addi r4,r11,-18612
	ctx.r4.s64 = r11.s64 + -18612;
	// subfe r11,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	r11.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r11,r11,0,29,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x6;
	// addi r5,r11,80
	ctx.r5.s64 = r11.s64 + 80;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225BD48:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225BD60:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8225BD70"))) PPC_WEAK_FUNC(sub_8225BD70);
PPC_FUNC_IMPL(__imp__sub_8225BD70) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r4,r11,-19336
	ctx.r4.s64 = r11.s64 + -19336;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r11,8704
	ctx.r4.s64 = r11.s64 + 8704;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-19328
	ctx.r4.s64 = r11.s64 + -19328;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225BDD8"))) PPC_WEAK_FUNC(sub_8225BDD8);
PPC_FUNC_IMPL(__imp__sub_8225BDD8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// stw r5,292(r1)
	PPC_STORE_U32(ctx.r1.u32 + 292, ctx.r5.u32);
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// stw r4,284(r1)
	PPC_STORE_U32(ctx.r1.u32 + 284, ctx.r4.u32);
	// mr r7,r9
	ctx.r7.u64 = ctx.r9.u64;
	// stw r6,300(r1)
	PPC_STORE_U32(ctx.r1.u32 + 300, ctx.r6.u32);
	// addi r11,r11,-24664
	r11.s64 = r11.s64 + -24664;
	// stw r8,316(r1)
	PPC_STORE_U32(ctx.r1.u32 + 316, ctx.r8.u32);
	// rlwinm r9,r4,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lis r10,-32018
	ctx.r10.s64 = -2098331648;
	// li r3,18
	ctx.r3.s64 = 18;
	// lbz r5,0(r7)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r7.u32 + 0);
	// addi r10,r10,-25416
	ctx.r10.s64 = ctx.r10.s64 + -25416;
	// stw r7,324(r1)
	PPC_STORE_U32(ctx.r1.u32 + 324, ctx.r7.u32);
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// addi r14,r10,20
	r14.s64 = ctx.r10.s64 + 20;
	// stw r3,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r3.u32);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r25,r11,-24952
	r25.s64 = r11.s64 + -24952;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r23,r11,23060
	r23.s64 = r11.s64 + 23060;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r22,r11,-19344
	r22.s64 = r11.s64 + -19344;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r18,r11,-19328
	r18.s64 = r11.s64 + -19328;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r21,r11,-19320
	r21.s64 = r11.s64 + -19320;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r20,r11,5300
	r20.s64 = r11.s64 + 5300;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r17,r11,5360
	r17.s64 = r11.s64 + 5360;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r16,r11,5368
	r16.s64 = r11.s64 + 5368;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r27,r11,8704
	r27.s64 = r11.s64 + 8704;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r24,r11,-17144
	r24.s64 = r11.s64 + -17144;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r19,r11,-17352
	r19.s64 = r11.s64 + -17352;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r15,r11,31828
	r15.s64 = r11.s64 + 31828;
loc_8225BE90:
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// beq cr6,0x8225bea4
	if (cr6.getEQ()) goto loc_8225BEA4;
	// lwz r11,-4(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + -4);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225c0fc
	if (cr6.getEQ()) goto loc_8225C0FC;
loc_8225BEA4:
	// lbz r9,0(r14)
	ctx.r9.u64 = PPC_LOAD_U8(r14.u32 + 0);
	// li r31,0
	r31.s64 = 0;
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r9,17
	cr6.compare<uint32_t>(ctx.r9.u32, 17, xer);
	// bgt cr6,0x8225bf70
	if (cr6.getGT()) goto loc_8225BF70;
	// lis r12,-32251
	r12.s64 = -2113601536;
	// addi r12,r12,-19624
	r12.s64 = r12.s64 + -19624;
	// lbzx r0,r12,r9
	r0.u64 = PPC_LOAD_U8(r12.u32 + ctx.r9.u32);
	// lis r12,-32218
	r12.s64 = -2111438848;
	// addi r12,r12,-16672
	r12.s64 = r12.s64 + -16672;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// nop 
	// bctr 
	switch (ctx.r9.u64) {
	case 0:
		goto loc_8225BEE0;
	case 1:
		goto loc_8225BEE8;
	case 2:
		goto loc_8225BEF0;
	case 3:
		goto loc_8225BEF8;
	case 4:
		goto loc_8225BF00;
	case 5:
		goto loc_8225BF08;
	case 6:
		goto loc_8225BF14;
	case 7:
		goto loc_8225BF1C;
	case 8:
		goto loc_8225BF24;
	case 9:
		goto loc_8225BF2C;
	case 10:
		goto loc_8225BF34;
	case 11:
		goto loc_8225BF3C;
	case 12:
		goto loc_8225BF44;
	case 13:
		goto loc_8225BF4C;
	case 14:
		goto loc_8225BF54;
	case 15:
		goto loc_8225BF5C;
	case 16:
		goto loc_8225BF64;
	case 17:
		goto loc_8225BF6C;
	default:
		__builtin_unreachable();
	}
loc_8225BEE0:
	// clrlwi r31,r26,26
	r31.u64 = r26.u32 & 0x3F;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BEE8:
	// rlwinm r31,r26,24,26,31
	r31.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 24) & 0x3F;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BEF0:
	// rlwinm r31,r26,16,31,31
	r31.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 16) & 0x1;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BEF8:
	// rlwinm r31,r26,15,31,31
	r31.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 15) & 0x1;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BF00:
	// rlwinm r31,r26,14,31,31
	r31.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 14) & 0x1;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BF08:
	// rlwinm r31,r26,13,31,31
	r31.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 13) & 0x1;
loc_8225BF0C:
	// li r29,1
	r29.s64 = 1;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BF14:
	// rlwinm r31,r26,12,28,31
	r31.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 12) & 0xF;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BF1C:
	// rlwinm r31,r26,8,29,31
	r31.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 8) & 0x7;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BF24:
	// rlwinm r31,r26,5,31,31
	r31.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 5) & 0x1;
	// b 0x8225bf0c
	goto loc_8225BF0C;
loc_8225BF2C:
	// rlwinm r31,r26,4,29,31
	r31.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 4) & 0x7;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BF34:
	// rlwinm r31,r26,1,31,31
	r31.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0x1;
	// b 0x8225bf0c
	goto loc_8225BF0C;
loc_8225BF3C:
	// clrlwi r31,r8,31
	r31.u64 = ctx.r8.u32 & 0x1;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BF44:
	// rlwinm r31,r8,31,31,31
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 31) & 0x1;
	// b 0x8225bf0c
	goto loc_8225BF0C;
loc_8225BF4C:
	// rlwinm r31,r8,30,30,31
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 30) & 0x3;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BF54:
	// rlwinm r31,r8,24,24,31
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 24) & 0xFF;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BF5C:
	// rlwinm r31,r8,16,31,31
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 16) & 0x1;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BF64:
	// rlwinm r31,r8,15,31,31
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 15) & 0x1;
	// b 0x8225bf70
	goto loc_8225BF70;
loc_8225BF6C:
	// rlwinm r31,r8,14,31,31
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 14) & 0x1;
loc_8225BF70:
	// lwz r11,292(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 292);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8225bf84
	if (!cr6.getEQ()) goto loc_8225BF84;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8225bf88
	if (cr6.getEQ()) goto loc_8225BF88;
loc_8225BF84:
	// li r11,1
	r11.s64 = 1;
loc_8225BF88:
	// clrlwi r10,r11,24
	ctx.r10.u64 = r11.u32 & 0xFF;
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x8225bff0
	if (cr6.getEQ()) goto loc_8225BFF0;
	// lwz r11,-12(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + -12);
loc_8225BF98:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8225bff8
	if (!cr6.getEQ()) goto loc_8225BFF8;
loc_8225BFA0:
	// lwz r3,-8(r14)
	ctx.r3.u64 = PPC_LOAD_U32(r14.u32 + -8);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8225bfb8
	if (cr6.getEQ()) goto loc_8225BFB8;
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne 0x8225bfbc
	if (!cr0.getEQ()) goto loc_8225BFBC;
loc_8225BFB8:
	// li r11,0
	r11.s64 = 0;
loc_8225BFBC:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// beq cr6,0x8225bfcc
	if (cr6.getEQ()) goto loc_8225BFCC;
	// li r11,1
	r11.s64 = 1;
loc_8225BFCC:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x8225c004
	if (cr6.getEQ()) goto loc_8225C004;
	// cmplwi cr6,r9,14
	cr6.compare<uint32_t>(ctx.r9.u32, 14, xer);
	// bne cr6,0x8225c004
	if (!cr6.getEQ()) goto loc_8225C004;
	// rlwinm. r11,r26,0,13,13
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225c000
	if (cr0.getEQ()) goto loc_8225C000;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r11,1
	r11.s64 = 1;
	// b 0x8225c004
	goto loc_8225C004;
loc_8225BFF0:
	// lwz r11,-16(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + -16);
	// b 0x8225bf98
	goto loc_8225BF98;
loc_8225BFF8:
	// li r11,1
	r11.s64 = 1;
	// b 0x8225bfa0
	goto loc_8225BFA0;
loc_8225C000:
	// li r11,0
	r11.s64 = 0;
loc_8225C004:
	// clrlwi. r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225c0fc
	if (cr0.getEQ()) goto loc_8225C0FC;
	// clrlwi. r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// beq 0x8225c02c
	if (cr0.getEQ()) goto loc_8225C02C;
	// mr r4,r15
	ctx.r4.u64 = r15.u64;
	// bl 0x8225bd70
	sub_8225BD70(ctx, base);
	// b 0x8225c040
	goto loc_8225C040;
loc_8225C02C:
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C040:
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// lwz r6,-20(r14)
	ctx.r6.u64 = PPC_LOAD_U32(r14.u32 + -20);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r5,88(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lbz r11,0(r14)
	r11.u64 = PPC_LOAD_U8(r14.u32 + 0);
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// bne cr6,0x8225c074
	if (!cr6.getEQ()) goto loc_8225C074;
	// addi r11,r25,-32
	r11.s64 = r25.s64 + -32;
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwzx r5,r10,r11
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// b 0x8225c0b4
	goto loc_8225C0B4;
loc_8225C074:
	// cmplwi cr6,r11,13
	cr6.compare<uint32_t>(r11.u32, 13, xer);
	// bne cr6,0x8225c08c
	if (!cr6.getEQ()) goto loc_8225C08C;
	// rlwinm r11,r31,2,0,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwzx r5,r11,r25
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + r25.u32);
	// b 0x8225c0b4
	goto loc_8225C0B4;
loc_8225C08C:
	// clrlwi. r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225c0ac
	if (cr0.getEQ()) goto loc_8225C0AC;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// mr r5,r16
	ctx.r5.u64 = r16.u64;
	// bne cr6,0x8225c0a4
	if (!cr6.getEQ()) goto loc_8225C0A4;
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
loc_8225C0A4:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// b 0x8225c0b4
	goto loc_8225C0B4;
loc_8225C0AC:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
loc_8225C0B4:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x8225c0d0
	if (!cr6.getEQ()) goto loc_8225C0D0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r4,r18
	ctx.r4.u64 = r18.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
loc_8225C0D0:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lwz r7,324(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 324);
	// lwz r8,316(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 316);
	// lwz r6,300(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 300);
	// lwz r4,284(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 284);
	// lbz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
loc_8225C0FC:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r14,r14,24
	r14.s64 = r14.s64 + 24;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bne 0x8225be90
	if (!cr0.getEQ()) goto loc_8225BE90;
	// stb r5,0(r7)
	PPC_STORE_U8(ctx.r7.u32 + 0, ctx.r5.u8);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_8225C120"))) PPC_WEAK_FUNC(sub_8225C120);
PPC_FUNC_IMPL(__imp__sub_8225C120) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r31,r7
	r31.u64 = ctx.r7.u64;
	// cmplwi cr6,r6,36
	cr6.compare<uint32_t>(ctx.r6.u32, 36, xer);
	// bge cr6,0x8225c14c
	if (!cr6.getLT()) goto loc_8225C14C;
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,87
	ctx.r3.u64 = ctx.r3.u64 | 87;
	// b 0x8225c1fc
	goto loc_8225C1FC;
loc_8225C14C:
	// lis r11,-32018
	r11.s64 = -2098331648;
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-24656
	r11.s64 = r11.s64 + -24656;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwzx r4,r10,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x8225bd70
	sub_8225BD70(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r30,r11,-19344
	r30.s64 = r11.s64 + -19344;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r29,r11,23060
	r29.s64 = r11.s64 + 23060;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// rlwinm. r10,r28,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 25) & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r28,r11,27,31,31
	r28.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bne 0x8225c1a4
	if (!cr0.getEQ()) goto loc_8225C1A4;
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225c1f8
	if (cr0.getEQ()) goto loc_8225C1F8;
loc_8225C1A4:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,31828
	ctx.r4.s64 = r11.s64 + 31828;
	// bl 0x8225bd70
	sub_8225BD70(ctx, base);
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225c1c8
	if (cr0.getEQ()) goto loc_8225C1C8;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r5,r11,5368
	ctx.r5.s64 = r11.s64 + 5368;
	// b 0x8225c1d0
	goto loc_8225C1D0;
loc_8225C1C8:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r5,r11,5360
	ctx.r5.s64 = r11.s64 + 5360;
loc_8225C1D0:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-17136
	ctx.r4.s64 = r11.s64 + -17136;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C1F8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8225C1FC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8225C208"))) PPC_WEAK_FUNC(sub_8225C208);
PPC_FUNC_IMPL(__imp__sub_8225C208) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r18,r5
	r18.u64 = ctx.r5.u64;
	// mr r31,r7
	r31.u64 = ctx.r7.u64;
	// cmplwi cr6,r6,36
	cr6.compare<uint32_t>(ctx.r6.u32, 36, xer);
	// bge cr6,0x8225c234
	if (!cr6.getLT()) goto loc_8225C234;
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,87
	ctx.r3.u64 = ctx.r3.u64 | 87;
	// b 0x8225c8c8
	goto loc_8225C8C8;
loc_8225C234:
	// addi r11,r8,3
	r11.s64 = ctx.r8.s64 + 3;
	// cntlzw r10,r4
	ctx.r10.u64 = ctx.r4.u32 == 0 ? 32 : __builtin_clz(ctx.r4.u32);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// lwzx r11,r11,r18
	r11.u64 = PPC_LOAD_U32(r11.u32 + r18.u32);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225c8c4
	if (cr0.getEQ()) goto loc_8225C8C4;
	// add r24,r11,r18
	r24.u64 = r11.u64 + r18.u64;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// clrlwi. r19,r10,24
	r19.u64 = ctx.r10.u32 & 0xFF;
	cr0.compare<int32_t>(r19.s32, 0, xer);
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-16728
	r11.s64 = r11.s64 + -16728;
	// lwz r16,20(r24)
	r16.u64 = PPC_LOAD_U32(r24.u32 + 20);
	// lwz r26,8(r24)
	r26.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// lwz r25,12(r24)
	r25.u64 = PPC_LOAD_U32(r24.u32 + 12);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwinm r10,r16,15,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 15) & 0x1;
	// add r15,r11,r24
	r15.u64 = r11.u64 + r24.u64;
	// bne 0x8225c284
	if (!cr0.getEQ()) goto loc_8225C284;
	// rlwinm r10,r16,14,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 14) & 0x1;
loc_8225C284:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r30,r11,31828
	r30.s64 = r11.s64 + 31828;
	// clrlwi r28,r10,24
	r28.u64 = ctx.r10.u32 & 0xFF;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8225bd70
	sub_8225BD70(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-16752
	ctx.r4.s64 = r11.s64 + -16752;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r21,r11,-19344
	r21.s64 = r11.s64 + -19344;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// stw r21,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r21.u32);
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r20,r11,23060
	r20.s64 = r11.s64 + 23060;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// stw r20,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r20.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8225bd70
	sub_8225BD70(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-16772
	ctx.r4.s64 = r11.s64 + -16772;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r17,1
	r17.s64 = 1;
	// addi r23,r11,5360
	r23.s64 = r11.s64 + 5360;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r22,r11,5368
	r22.s64 = r11.s64 + 5368;
	// stb r17,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r17.u8);
	// rlwinm. r29,r27,25,31,31
	r29.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 25) & 0x1;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// bne 0x8225c338
	if (!cr0.getEQ()) goto loc_8225C338;
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225c380
	if (cr0.getEQ()) goto loc_8225C380;
loc_8225C338:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8225bd70
	sub_8225BD70(ctx, base);
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8225c354
	if (!cr0.getEQ()) goto loc_8225C354;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
loc_8225C354:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-16800
	ctx.r4.s64 = r11.s64 + -16800;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// stb r17,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r17.u8);
loc_8225C380:
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r19
	ctx.r6.u64 = r19.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225bdd8
	sub_8225BDD8(ctx, base);
	// lbz r11,80(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225c3c4
	if (cr0.getEQ()) goto loc_8225C3C4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C3C4:
	// rlwinm. r11,r27,0,23,23
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x100;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r26,r11,-19328
	r26.s64 = r11.s64 + -19328;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r27,r11,-19320
	r27.s64 = r11.s64 + -19320;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// beq 0x8225c55c
	if (cr0.getEQ()) goto loc_8225C55C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lwz r11,16(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 16);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8225c400
	if (!cr6.getEQ()) goto loc_8225C400;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225c430
	if (cr6.getEQ()) goto loc_8225C430;
loc_8225C400:
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// rlwinm r6,r11,16,28,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xF;
	// addi r4,r10,-16860
	ctx.r4.s64 = ctx.r10.s64 + -16860;
	// clrlwi r5,r11,16
	ctx.r5.u64 = r11.u32 & 0xFFFF;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C430:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8225c440
	if (!cr6.getEQ()) goto loc_8225C440;
	// clrlwi. r30,r16,27
	r30.u64 = r16.u32 & 0x1F;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// beq 0x8225c478
	if (cr0.getEQ()) goto loc_8225C478;
loc_8225C440:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// clrlwi r30,r16,27
	r30.u64 = r16.u32 & 0x1F;
	// addi r4,r11,-16916
	ctx.r4.s64 = r11.s64 + -16916;
	// rlwinm r7,r16,22,25,31
	ctx.r7.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 22) & 0x7F;
	// rlwinm r6,r16,27,27,31
	ctx.r6.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 27) & 0x1F;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C478:
	// rlwinm r29,r16,27,27,31
	r29.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 27) & 0x1F;
	// cmplw cr6,r30,r29
	cr6.compare<uint32_t>(r30.u32, r29.u32, xer);
	// ble cr6,0x8225c4ac
	if (!cr6.getGT()) goto loc_8225C4AC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-16956
	ctx.r4.s64 = r11.s64 + -16956;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C4AC:
	// rlwinm r28,r16,22,25,31
	r28.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 22) & 0x7F;
	// cmplw cr6,r28,r29
	cr6.compare<uint32_t>(r28.u32, r29.u32, xer);
	// bge cr6,0x8225c4e0
	if (!cr6.getLT()) goto loc_8225C4E0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-16996
	ctx.r4.s64 = r11.s64 + -16996;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C4E0:
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// cmplw cr6,r28,r11
	cr6.compare<uint32_t>(r28.u32, r11.u32, xer);
	// ble cr6,0x8225c514
	if (!cr6.getGT()) goto loc_8225C514;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-17040
	ctx.r4.s64 = r11.s64 + -17040;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C514:
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// rlwinm. r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8225c528
	if (!cr0.getEQ()) goto loc_8225C528;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
loc_8225C528:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-17064
	ctx.r4.s64 = r11.s64 + -17064;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
loc_8225C55C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// li r22,0
	r22.s64 = 0;
	// cmplwi cr6,r19,0
	cr6.compare<uint32_t>(r19.u32, 0, xer);
	// stb r22,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r22.u8);
	// beq cr6,0x8225c6c8
	if (cr6.getEQ()) goto loc_8225C6C8;
	// lhz r11,24(r24)
	r11.u64 = PPC_LOAD_U16(r24.u32 + 24);
	// rlwinm. r14,r16,27,27,31
	r14.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 27) & 0x1F;
	cr0.compare<int32_t>(r14.s32, 0, xer);
	// lhz r10,26(r24)
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + 26);
	// mr r28,r15
	r28.u64 = r15.u64;
	// not r16,r11
	r16.u64 = ~r11.u64;
	// not r15,r10
	r15.u64 = ~ctx.r10.u64;
	// beq 0x8225c894
	if (cr0.getEQ()) goto loc_8225C894;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// stb r17,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r17.u8);
	// addi r24,r11,-19336
	r24.s64 = r11.s64 + -19336;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r20,r11,-17068
	r20.s64 = r11.s64 + -17068;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r21,r11,-17076
	r21.s64 = r11.s64 + -17076;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r18,r11,-17096
	r18.s64 = r11.s64 + -17096;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r17,r11,-17108
	r17.s64 = r11.s64 + -17108;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r19,r11,5300
	r19.s64 = r11.s64 + 5300;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r23,r11,-17116
	r23.s64 = r11.s64 + -17116;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r27,r11,-25544
	r27.s64 = r11.s64 + -25544;
loc_8225C5D8:
	// li r11,1
	r11.s64 = 1;
	// lbz r30,3(r28)
	r30.u64 = PPC_LOAD_U8(r28.u32 + 3);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// clrlwi r29,r30,28
	r29.u64 = r30.u32 & 0xF;
	// slw r11,r11,r22
	r11.u64 = r22.u8 & 0x20 ? 0 : (r11.u32 << (r22.u8 & 0x3F));
	// and r26,r11,r16
	r26.u64 = r11.u64 & r16.u64;
	// and r25,r11,r15
	r25.u64 = r11.u64 & r15.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// rlwinm r11,r30,30,2,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 30) & 0x3FFFFFFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// lwzx r5,r11,r27
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + r27.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8225c628
	if (cr6.getEQ()) goto loc_8225C628;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C628:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x8225c638
	if (cr6.getEQ()) goto loc_8225C638;
	// mr r4,r17
	ctx.r4.u64 = r17.u64;
	// b 0x8225c644
	goto loc_8225C644;
loc_8225C638:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x8225c64c
	if (cr6.getEQ()) goto loc_8225C64C;
	// mr r4,r18
	ctx.r4.u64 = r18.u64;
loc_8225C644:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C64C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// rlwinm r5,r11,24,28,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0xF;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// rlwinm r11,r11,20,28,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0xF;
	// cmplwi cr6,r11,15
	cr6.compare<uint32_t>(r11.u32, 15, xer);
	// beq cr6,0x8225c694
	if (cr6.getEQ()) goto loc_8225C694;
	// addi r10,r27,64
	ctx.r10.s64 = r27.s64 + 64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// lwzx r5,r11,r10
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C694:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,92(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// cmplw cr6,r22,r14
	cr6.compare<uint32_t>(r22.u32, r14.u32, xer);
	// blt cr6,0x8225c5d8
	if (cr6.getLT()) goto loc_8225C5D8;
	// lwz r20,88(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r21,92(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// b 0x8225c894
	goto loc_8225C894;
loc_8225C6C8:
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// lwz r11,24(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 24);
	// mr r30,r15
	r30.u64 = r15.u64;
	// addi r23,r10,-19336
	r23.s64 = ctx.r10.s64 + -19336;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// addi r19,r10,-17068
	r19.s64 = ctx.r10.s64 + -17068;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r18,r10,5300
	r18.s64 = ctx.r10.s64 + 5300;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// addi r22,r10,-17116
	r22.s64 = ctx.r10.s64 + -17116;
	// lis r10,-32018
	ctx.r10.s64 = -2098331648;
	// addi r26,r10,-25544
	r26.s64 = ctx.r10.s64 + -25544;
	// beq 0x8225c7bc
	if (cr0.getEQ()) goto loc_8225C7BC;
	// mr r27,r11
	r27.u64 = r11.u64;
	// stb r17,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r17.u8);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r25,r11,-17076
	r25.s64 = r11.s64 + -17076;
loc_8225C710:
	// lbz r29,3(r30)
	r29.u64 = PPC_LOAD_U8(r30.u32 + 3);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// clrlwi r28,r29,28
	r28.u64 = r29.u32 & 0xF;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// rlwinm r11,r29,30,2,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 30) & 0x3FFFFFFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// lwzx r5,r11,r26
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x8225c750
	if (cr6.getEQ()) goto loc_8225C750;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r18
	ctx.r4.u64 = r18.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C750:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// rlwinm r5,r11,24,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,23,28,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 23) & 0xF;
	// cmplwi cr6,r11,15
	cr6.compare<uint32_t>(r11.u32, 15, xer);
	// beq cr6,0x8225c798
	if (cr6.getEQ()) goto loc_8225C798;
	// addi r10,r26,64
	ctx.r10.s64 = r26.s64 + 64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// lwzx r5,r11,r10
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C798:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// addic. r27,r27,-1
	xer.ca = r27.u32 > 0;
	r27.s64 = r27.s64 + -1;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// bne 0x8225c710
	if (!cr0.getEQ()) goto loc_8225C710;
loc_8225C7BC:
	// lwz r10,28(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 28);
	// rlwinm. r11,r16,27,27,31
	r11.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 27) & 0x1F;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// lwz r9,24(r24)
	ctx.r9.u64 = PPC_LOAD_U32(r24.u32 + 24);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r30,r10,r15
	r30.u64 = ctx.r10.u64 + r15.u64;
	// beq 0x8225c894
	if (cr0.getEQ()) goto loc_8225C894;
	// mr r27,r11
	r27.u64 = r11.u64;
	// stb r17,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r17.u8);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r25,r11,-17124
	r25.s64 = r11.s64 + -17124;
loc_8225C7E8:
	// lbz r29,3(r30)
	r29.u64 = PPC_LOAD_U8(r30.u32 + 3);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// clrlwi r28,r29,28
	r28.u64 = r29.u32 & 0xF;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// rlwinm r11,r29,30,2,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 30) & 0x3FFFFFFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// lwzx r5,r11,r26
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x8225c828
	if (cr6.getEQ()) goto loc_8225C828;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r18
	ctx.r4.u64 = r18.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C828:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// rlwinm r5,r11,24,28,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0xF;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,20,28,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0xF;
	// cmplwi cr6,r11,15
	cr6.compare<uint32_t>(r11.u32, 15, xer);
	// beq cr6,0x8225c870
	if (cr6.getEQ()) goto loc_8225C870;
	// addi r10,r26,64
	ctx.r10.s64 = r26.s64 + 64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// lwzx r5,r11,r10
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C870:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// addic. r27,r27,-1
	xer.ca = r27.u32 > 0;
	r27.s64 = r27.s64 + -1;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// bne 0x8225c7e8
	if (!cr0.getEQ()) goto loc_8225C7E8;
loc_8225C894:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lbz r11,80(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225c8c4
	if (cr0.getEQ()) goto loc_8225C8C4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C8C4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8225C8C8:
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_8225C8D0"))) PPC_WEAK_FUNC(sub_8225C8D0);
PPC_FUNC_IMPL(__imp__sub_8225C8D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// li r27,0
	r27.s64 = 0;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// bne cr6,0x8225c9fc
	if (!cr6.getEQ()) goto loc_8225C9FC;
	// lwz r31,0(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmplwi cr6,r5,1
	cr6.compare<uint32_t>(ctx.r5.u32, 1, xer);
	// blt cr6,0x8225c9a8
	if (cr6.getLT()) goto loc_8225C9A8;
	// beq cr6,0x8225c950
	if (cr6.getEQ()) goto loc_8225C950;
	// cmplwi cr6,r5,3
	cr6.compare<uint32_t>(ctx.r5.u32, 3, xer);
	// blt cr6,0x8225c918
	if (cr6.getLT()) goto loc_8225C918;
	// lis r27,-32768
	r27.s64 = -2147483648;
	// ori r27,r27,16389
	r27.u64 = r27.u64 | 16389;
	// b 0x8225c9ec
	goto loc_8225C9EC;
loc_8225C918:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,10576
	ctx.r4.s64 = r11.s64 + 10576;
	// bl 0x8225bd70
	sub_8225BD70(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lwz r9,12(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// addi r4,r11,-16700
	ctx.r4.s64 = r11.s64 + -16700;
	// lwz r8,8(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r7,4(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// b 0x8225c9ec
	goto loc_8225C9EC;
loc_8225C950:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,8804
	ctx.r4.s64 = r11.s64 + 8804;
	// bl 0x8225bd70
	sub_8225BD70(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r11,-16708
	ctx.r4.s64 = r11.s64 + -16708;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r29,4
	r29.s64 = 4;
	// addi r28,r11,-16560
	r28.s64 = r11.s64 + -16560;
loc_8225C980:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f1,0(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82259758
	sub_82259758(ctx, base);
	// addic. r29,r29,-1
	xer.ca = r29.u32 > 0;
	r29.s64 = r29.s64 + -1;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// bne 0x8225c980
	if (!cr0.getEQ()) goto loc_8225C980;
	// b 0x8225c9ec
	goto loc_8225C9EC;
loc_8225C9A8:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,10568
	ctx.r4.s64 = r11.s64 + 10568;
	// bl 0x8225bd70
	sub_8225BD70(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225c9d0
	if (cr6.getEQ()) goto loc_8225C9D0;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r6,r11,5368
	ctx.r6.s64 = r11.s64 + 5368;
	// b 0x8225c9d8
	goto loc_8225C9D8;
loc_8225C9D0:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r6,r11,5360
	ctx.r6.s64 = r11.s64 + 5360;
loc_8225C9D8:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r11,-16720
	ctx.r4.s64 = r11.s64 + -16720;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C9EC:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,23060
	ctx.r4.s64 = r11.s64 + 23060;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
loc_8225C9FC:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8225CA08"))) PPC_WEAK_FUNC(sub_8225CA08);
PPC_FUNC_IMPL(__imp__sub_8225CA08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// rlwinm r11,r8,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// mr r9,r4
	ctx.r9.u64 = ctx.r4.u64;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8225ca40
	if (!cr6.getEQ()) goto loc_8225CA40;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x8225ca9c
	goto loc_8225CA9C;
loc_8225CA40:
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// li r30,0
	r30.s64 = 0;
	// lis r10,-32218
	ctx.r10.s64 = -2111438848;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r5,r10,-14128
	ctx.r5.s64 = ctx.r10.s64 + -14128;
	// mr r3,r7
	ctx.r3.u64 = ctx.r7.u64;
	// std r30,0(r11)
	PPC_STORE_U64(r11.u32 + 0, r30.u64);
	// stw r30,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r30.u32);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// stw r8,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r8.u32);
	// bl 0x8218f668
	sub_8218F668(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x8225ca9c
	if (cr0.getLT()) goto loc_8225CA9C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-19344
	ctx.r4.s64 = r11.s64 + -19344;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,23060
	ctx.r4.s64 = r11.s64 + 23060;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_8225CA9C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225CAB8"))) PPC_WEAK_FUNC(sub_8225CAB8);
PPC_FUNC_IMPL(__imp__sub_8225CAB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8225cde0
	if (cr6.getEQ()) goto loc_8225CDE0;
	// cmplwi cr6,r4,4
	cr6.compare<uint32_t>(ctx.r4.u32, 4, xer);
	// blt cr6,0x8225cde0
	if (cr6.getLT()) goto loc_8225CDE0;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x8225cde0
	if (cr6.getEQ()) goto loc_8225CDE0;
	// li r11,0
	r11.s64 = 0;
	// stw r6,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r6.u32);
	// clrlwi. r10,r28,30
	ctx.r10.u64 = r28.u32 & 0x3;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r7,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r7.u32);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bne 0x8225cde0
	if (!cr0.getEQ()) goto loc_8225CDE0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-16440
	ctx.r4.s64 = r11.s64 + -16440;
	// rlwinm r11,r28,28,31,31
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 28) & 0x1;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-16568
	ctx.r4.s64 = r11.s64 + -16568;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-16628
	ctx.r4.s64 = r11.s64 + -16628;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r10,-32018
	ctx.r10.s64 = -2098331648;
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// clrlwi r30,r9,31
	r30.u64 = ctx.r9.u32 & 0x1;
	// lwz r4,-24632(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + -24632);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// add r29,r11,r10
	r29.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-16648
	ctx.r4.s64 = r11.s64 + -16648;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bgt cr6,0x8225cb9c
	if (cr6.getGT()) goto loc_8225CB9C;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// rlwinm r9,r30,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-24640
	r11.s64 = r11.s64 + -24640;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// addi r4,r10,-16652
	ctx.r4.s64 = ctx.r10.s64 + -16652;
	// lwzx r5,r9,r11
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// b 0x8225cba8
	goto loc_8225CBA8;
loc_8225CB9C:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r11,-16668
	ctx.r4.s64 = r11.s64 + -16668;
loc_8225CBA8:
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-16672
	ctx.r4.s64 = r11.s64 + -16672;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwz r4,-24644(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + -24644);
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwz r4,-24648(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + -24648);
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8225c120
	sub_8225C120(ctx, base);
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82259ef0
	sub_82259EF0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x8225cde8
	if (cr0.getLT()) goto loc_8225CDE8;
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8225c208
	sub_8225C208(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x8225cc80
	if (cr0.getLT()) goto loc_8225CC80;
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8225ca08
	sub_8225CA08(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x8225cc80
	if (cr0.getLT()) goto loc_8225CC80;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lwz r8,8(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// add r7,r11,r31
	ctx.r7.u64 = r11.u64 + r31.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8225b340
	sub_8225B340(ctx, base);
loc_8225CC80:
	// rlwinm. r27,r28,0,20,20
	r27.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x800;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// beq 0x8225cca8
	if (cr0.getEQ()) goto loc_8225CCA8;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8225b6b8
	sub_8225B6B8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x8225ccb0
	if (!cr0.getLT()) goto loc_8225CCB0;
	// b 0x8225cde8
	goto loc_8225CDE8;
loc_8225CCA8:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8225cde8
	if (cr6.getLT()) goto loc_8225CDE8;
loc_8225CCB0:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm. r11,r11,0,26,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225cd88
	if (cr0.getEQ()) goto loc_8225CD88;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,31820
	ctx.r4.s64 = r11.s64 + 31820;
	// bl 0x8225bd70
	sub_8225BD70(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-19344
	ctx.r4.s64 = r11.s64 + -19344;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,23060
	ctx.r4.s64 = r11.s64 + 23060;
	// bl 0x822594e8
	sub_822594E8(ctx, base);
	// li r8,1
	ctx.r8.s64 = 1;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8225c208
	sub_8225C208(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x8225cde8
	if (cr0.getLT()) goto loc_8225CDE8;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8225ca08
	sub_8225CA08(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x8225cde8
	if (cr0.getLT()) goto loc_8225CDE8;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lwz r8,8(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// add r7,r11,r31
	ctx.r7.u64 = r11.u64 + r31.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8225b340
	sub_8225B340(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x8225cde8
	if (cr0.getLT()) goto loc_8225CDE8;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x8225cd88
	if (cr6.getEQ()) goto loc_8225CD88;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8225b6b8
	sub_8225B6B8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x8225cde8
	if (cr0.getLT()) goto loc_8225CDE8;
loc_8225CD88:
	// lwz r30,12(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// beq 0x8225cdc8
	if (cr0.getEQ()) goto loc_8225CDC8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-19320
	ctx.r4.s64 = r11.s64 + -19320;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// add r3,r30,r31
	ctx.r3.u64 = r30.u64 + r31.u64;
	// bl 0x8225ab98
	sub_8225AB98(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x8225cde8
	if (cr0.getLT()) goto loc_8225CDE8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-19328
	ctx.r4.s64 = r11.s64 + -19328;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
loc_8225CDC8:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-16676
	ctx.r4.s64 = r11.s64 + -16676;
	// bl 0x82259fa8
	sub_82259FA8(ctx, base);
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// b 0x8225cde8
	goto loc_8225CDE8;
loc_8225CDE0:
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,87
	ctx.r3.u64 = ctx.r3.u64 | 87;
loc_8225CDE8:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8225CDF0"))) PPC_WEAK_FUNC(sub_8225CDF0);
PPC_FUNC_IMPL(__imp__sub_8225CDF0) {
	PPC_FUNC_PROLOGUE();
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// b 0x8225cab8
	sub_8225CAB8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8225CDF8"))) PPC_WEAK_FUNC(sub_8225CDF8);
PPC_FUNC_IMPL(__imp__sub_8225CDF8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// stw r3,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, ctx.r3.u32);
	// stw r4,28(r1)
	PPC_STORE_U32(ctx.r1.u32 + 28, ctx.r4.u32);
	// lwz r11,20(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// rlwinm r11,r11,0,26,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFE3F;
	// stw r11,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, r11.u32);
	// lwz r11,20(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// lwz r10,28(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 28);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// lwz r11,28(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 28);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,28(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 28);
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r10,8(r11)
	PPC_STORE_U8(r11.u32 + 8, ctx.r10.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225CE38"))) PPC_WEAK_FUNC(sub_8225CE38);
PPC_FUNC_IMPL(__imp__sub_8225CE38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r3.u32);
	// stw r4,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r4.u32);
	// stw r5,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r5.u32);
	// li r3,2464
	ctx.r3.s64 = 2464;
	// bl 0x821abc28
	sub_821ABC28(ctx, base);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8225ce74
	if (!cr6.getEQ()) goto loc_8225CE74;
	// lis r11,-32761
	r11.s64 = -2147024896;
	// ori r3,r11,14
	ctx.r3.u64 = r11.u64 | 14;
	// b 0x8225ceac
	goto loc_8225CEAC;
loc_8225CE74:
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// li r5,2464
	ctx.r5.s64 = 2464;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// stw r10,2456(r11)
	PPC_STORE_U32(r11.u32 + 2456, ctx.r10.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// stw r10,2460(r11)
	PPC_STORE_U32(r11.u32 + 2460, ctx.r10.u32);
	// li r3,0
	ctx.r3.s64 = 0;
loc_8225CEAC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225CEC0"))) PPC_WEAK_FUNC(sub_8225CEC0);
PPC_FUNC_IMPL(__imp__sub_8225CEC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// stw r3,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, ctx.r3.u32);
	// stw r4,28(r1)
	PPC_STORE_U32(ctx.r1.u32 + 28, ctx.r4.u32);
	// lwz r11,20(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r11,28(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225ceec
	if (cr6.getEQ()) goto loc_8225CEEC;
	// lwz r11,28(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 28);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_8225CEEC:
	// lis r11,-32768
	r11.s64 = -2147483648;
	// ori r3,r11,16387
	ctx.r3.u64 = r11.u64 | 16387;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225CEF8"))) PPC_WEAK_FUNC(sub_8225CEF8);
PPC_FUNC_IMPL(__imp__sub_8225CEF8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r3.u32);
	// stw r4,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r4.u32);
	// stw r5,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r5.u32);
	// stw r6,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r6.u32);
	// stw r7,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r7.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// lwz r6,148(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r5,140(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r4,124(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225CF58"))) PPC_WEAK_FUNC(sub_8225CF58);
PPC_FUNC_IMPL(__imp__sub_8225CF58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r9,r11,-24624
	ctx.r9.s64 = r11.s64 + -24624;
	// li r11,0
	r11.s64 = 0;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
loc_8225CF68:
	// lhz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// cmpw cr6,r8,r3
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r3.s32, xer);
	// beq cr6,0x8225cf8c
	if (cr6.getEQ()) goto loc_8225CF8C;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// cmplwi cr6,r11,158
	cr6.compare<uint32_t>(r11.u32, 158, xer);
	// blt cr6,0x8225cf68
	if (cr6.getLT()) goto loc_8225CF68;
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_8225CF8C:
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r9,4
	ctx.r10.s64 = ctx.r9.s64 + 4;
	// lwzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225CFA0"))) PPC_WEAK_FUNC(sub_8225CFA0);
PPC_FUNC_IMPL(__imp__sub_8225CFA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r3,r6
	ctx.r3.u64 = ctx.r6.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// bl 0x8225cf58
	sub_8225CF58(ctx, base);
	// mr. r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq 0x8225cfd8
	if (cr0.getEQ()) goto loc_8225CFD8;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// bl 0x823eef48
	sub_823EEF48(ctx, base);
	// b 0x8225cfe8
	goto loc_8225CFE8;
loc_8225CFD8:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r5,15
	ctx.r5.s64 = 15;
	// addi r4,r11,-16228
	ctx.r4.s64 = r11.s64 + -16228;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
loc_8225CFE8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D000"))) PPC_WEAK_FUNC(sub_8225D000);
PPC_FUNC_IMPL(__imp__sub_8225D000) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,1104
	ctx.r3.s64 = r11.s64 + 1104;
	// lwz r10,40(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// oris r10,r10,4096
	ctx.r10.u64 = ctx.r10.u64 | 268435456;
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
	// b 0x823f1fa0
	longjmp(*reinterpret_cast<jmp_buf*>(base + ctx.r3.u32), ctx.r4.s32);
	return;
}

__attribute__((alias("__imp__sub_8225D020"))) PPC_WEAK_FUNC(sub_8225D020);
PPC_FUNC_IMPL(__imp__sub_8225D020) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r29,0(r3)
	r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r27,0(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm. r11,r27,0,26,26
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225d160
	if (cr0.getEQ()) goto loc_8225D160;
	// rlwinm. r11,r26,0,13,13
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8225d160
	if (!cr0.getEQ()) goto loc_8225D160;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8225d0a8
	if (cr6.getEQ()) goto loc_8225D0A8;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// lwz r4,-23352(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + -23352);
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_8225D080:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8225d080
	if (!cr6.getEQ()) goto loc_8225D080;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r5,r11,0
	ctx.r5.u64 = __builtin_rotateleft32(r11.u32, 0);
	// mtctr r30
	ctr.u64 = r30.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8225D0A8:
	// li r11,0
	r11.s64 = 0;
	// rlwinm r10,r27,0,27,25
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0xFFFFFFFFFFFFFFDF;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// stw r11,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r11.u32);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// bl 0x82345d68
	sub_82345D68(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8225d168
	if (cr6.getEQ()) goto loc_8225D168;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x8225d124
	if (cr6.getLT()) goto loc_8225D124;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// lwz r4,-23356(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + -23356);
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_8225D110:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8225d110
	if (!cr6.getEQ()) goto loc_8225D110;
	// b 0x8225d144
	goto loc_8225D144;
loc_8225D124:
	// lis r11,-32018
	r11.s64 = -2098331648;
	// lwz r4,-23360(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + -23360);
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_8225D134:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8225d134
	if (!cr6.getEQ()) goto loc_8225D134;
loc_8225D144:
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r5,r11,0
	ctx.r5.u64 = __builtin_rotateleft32(r11.u32, 0);
	// mtctr r30
	ctr.u64 = r30.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8225d168
	goto loc_8225D168;
loc_8225D160:
	// lis r31,-32768
	r31.s64 = -2147483648;
	// ori r31,r31,16389
	r31.u64 = r31.u64 | 16389;
loc_8225D168:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8225D178"))) PPC_WEAK_FUNC(sub_8225D178);
PPC_FUNC_IMPL(__imp__sub_8225D178) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-368(r1)
	ea = -368 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r7,r5
	ctx.r7.u64 = ctx.r5.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// li r5,256
	ctx.r5.s64 = 256;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8225cfa0
	sub_8225CFA0(ctx, base);
	// lwz r11,2460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 2460);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225d1d8
	if (cr0.getEQ()) goto loc_8225D1D8;
	// cmpwi cr6,r30,3537
	cr6.compare<int32_t>(r30.s32, 3537, xer);
	// beq cr6,0x8225d1d8
	if (cr6.getEQ()) goto loc_8225D1D8;
	// lwz r3,2456(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 2456);
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// addi r6,r30,-1100
	ctx.r6.s64 = r30.s64 + -1100;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8225D1D8:
	// cmpwi cr6,r30,3517
	cr6.compare<int32_t>(r30.s32, 3517, xer);
	// beq cr6,0x8225d214
	if (cr6.getEQ()) goto loc_8225D214;
	// cmpwi cr6,r30,3525
	cr6.compare<int32_t>(r30.s32, 3525, xer);
	// beq cr6,0x8225d220
	if (cr6.getEQ()) goto loc_8225D220;
	// cmpwi cr6,r30,3527
	cr6.compare<int32_t>(r30.s32, 3527, xer);
	// lis r11,-32768
	r11.s64 = -2147483648;
	// beq cr6,0x8225d20c
	if (cr6.getEQ()) goto loc_8225D20C;
	// cmpwi cr6,r30,3537
	cr6.compare<int32_t>(r30.s32, 3537, xer);
	// beq cr6,0x8225d204
	if (cr6.getEQ()) goto loc_8225D204;
	// ori r11,r11,16389
	r11.u64 = r11.u64 | 16389;
	// b 0x8225d21c
	goto loc_8225D21C;
loc_8225D204:
	// ori r11,r11,16385
	r11.u64 = r11.u64 | 16385;
	// b 0x8225d21c
	goto loc_8225D21C;
loc_8225D20C:
	// ori r11,r11,16388
	r11.u64 = r11.u64 | 16388;
	// b 0x8225d21c
	goto loc_8225D21C;
loc_8225D214:
	// lis r11,-32761
	r11.s64 = -2147024896;
	// ori r11,r11,14
	r11.u64 = r11.u64 | 14;
loc_8225D21C:
	// stw r11,2448(r31)
	PPC_STORE_U32(r31.u32 + 2448, r11.u32);
loc_8225D220:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,1104
	ctx.r3.s64 = r31.s64 + 1104;
	// bl 0x823f1fa0
	longjmp(*reinterpret_cast<jmp_buf*>(base + ctx.r3.u32), ctx.r4.s32);
}

__attribute__((alias("__imp__sub_8225D230"))) PPC_WEAK_FUNC(sub_8225D230);
PPC_FUNC_IMPL(__imp__sub_8225D230) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-384(r1)
	ea = -384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// addi r10,r1,416
	ctx.r10.s64 = ctx.r1.s64 + 416;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// li r5,256
	ctx.r5.s64 = 256;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x8225cfa0
	sub_8225CFA0(ctx, base);
	// lwz r11,2460(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 2460);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225d2ac
	if (cr0.getEQ()) goto loc_8225D2AC;
	// lwz r3,2456(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 2456);
	// addi r7,r1,96
	ctx.r7.s64 = ctx.r1.s64 + 96;
	// addi r6,r30,-1100
	ctx.r6.s64 = r30.s64 + -1100;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8225D2AC:
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D2C8"))) PPC_WEAK_FUNC(sub_8225D2C8);
PPC_FUNC_IMPL(__imp__sub_8225D2C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// rlwinm r11,r3,0,0,19
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0xFFFFF000;
	// cmplwi cr6,r5,132
	cr6.compare<uint32_t>(ctx.r5.u32, 132, xer);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// ble cr6,0x8225d308
	if (!cr6.getGT()) goto loc_8225D308;
	// addi r3,r4,-12
	ctx.r3.s64 = ctx.r4.s64 + -12;
	// lis r4,24973
	ctx.r4.s64 = 1636630528;
	// rlwinm r11,r3,0,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0xFFFFFFFE;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r10,r10,0,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFE;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// rlwinm r10,r10,0,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFE;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// b 0x8209d060
	sub_8209D060(ctx, base);
	return;
loc_8225D308:
	// rlwinm r11,r5,30,2,31
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 30) & 0x3FFFFFFF;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// stw r9,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r9.u32);
	// stwx r4,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r4.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D328"))) PPC_WEAK_FUNC(sub_8225D328);
PPC_FUNC_IMPL(__imp__sub_8225D328) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x8225d178
	sub_8225D178(ctx, base);
}

__attribute__((alias("__imp__sub_8225D360"))) PPC_WEAK_FUNC(sub_8225D360);
PPC_FUNC_IMPL(__imp__sub_8225D360) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-400(r1)
	ea = -400 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// addi r10,r1,432
	ctx.r10.s64 = ctx.r1.s64 + 432;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// li r4,256
	ctx.r4.s64 = 256;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r6,112(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// bl 0x823eef48
	sub_823EEF48(ctx, base);
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// li r4,3542
	ctx.r4.s64 = 3542;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225d328
	sub_8225D328(ctx, base);
}

__attribute__((alias("__imp__sub_8225D3C0"))) PPC_WEAK_FUNC(sub_8225D3C0);
PPC_FUNC_IMPL(__imp__sub_8225D3C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x821da9a0
	sub_821DA9A0(ctx, base);
	// clrlwi. r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225d3fc
	if (cr0.getEQ()) goto loc_8225D3FC;
	// rlwinm r11,r31,0,0,19
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xFFFFF000;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stw r31,12(r11)
	PPC_STORE_U32(r11.u32 + 12, r31.u32);
loc_8225D3FC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D418"))) PPC_WEAK_FUNC(sub_8225D418);
PPC_FUNC_IMPL(__imp__sub_8225D418) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r31,r3,152
	r31.s64 = ctx.r3.s64 + 152;
loc_8225D42C:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// clrlwi. r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8225d470
	if (!cr0.getEQ()) goto loc_8225D470;
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x8225d470
	if (cr0.getEQ()) goto loc_8225D470;
	// rlwinm r11,r3,0,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0xFFFFFFFE;
	// lis r4,24973
	ctx.r4.s64 = 1636630528;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r10,r10,0,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFE;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// rlwinm r10,r10,0,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFE;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// bl 0x8209d060
	sub_8209D060(ctx, base);
	// b 0x8225d42c
	goto loc_8225D42C;
loc_8225D470:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D488"))) PPC_WEAK_FUNC(sub_8225D488);
PPC_FUNC_IMPL(__imp__sub_8225D488) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,132(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 132);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x8225d4c4
	if (cr0.getEQ()) goto loc_8225D4C4;
loc_8225D4AC:
	// lis r4,-24435
	ctx.r4.s64 = -1601372160;
	// lwz r31,4(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// bl 0x8209d060
	sub_8209D060(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8225d4ac
	if (!cr6.getEQ()) goto loc_8225D4AC;
loc_8225D4C4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225d418
	sub_8225D418(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D4E8"))) PPC_WEAK_FUNC(sub_8225D4E8);
PPC_FUNC_IMPL(__imp__sub_8225D4E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r30,132(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// b 0x8225d518
	goto loc_8225D518;
loc_8225D508:
	// li r5,4088
	ctx.r5.s64 = 4088;
	// addi r3,r30,8
	ctx.r3.s64 = r30.s64 + 8;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// lwz r30,4(r30)
	r30.u64 = PPC_LOAD_U32(r30.u32 + 4);
loc_8225D518:
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// li r4,0
	ctx.r4.s64 = 0;
	// bne 0x8225d508
	if (!cr0.getEQ()) goto loc_8225D508;
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// li r5,132
	ctx.r5.s64 = 132;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r10,r11,8
	ctx.r10.s64 = r11.s64 + 8;
	// stw r11,140(r31)
	PPC_STORE_U32(r31.u32 + 140, r11.u32);
	// stw r10,144(r31)
	PPC_STORE_U32(r31.u32 + 144, ctx.r10.u32);
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225d418
	sub_8225D418(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D560"))) PPC_WEAK_FUNC(sub_8225D560);
PPC_FUNC_IMPL(__imp__sub_8225D560) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r4,-8051
	ctx.r4.s64 = -527630336;
	// li r3,4096
	ctx.r3.s64 = 4096;
	// bl 0x8209d000
	sub_8209D000(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x8225d594
	if (!cr0.getEQ()) goto loc_8225D594;
	// li r4,3517
	ctx.r4.s64 = 3517;
	// lwz r3,148(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 148);
	// bl 0x8225d328
	sub_8225D328(ctx, base);
loc_8225D594:
	// li r11,0
	r11.s64 = 0;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r31.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D5B8"))) PPC_WEAK_FUNC(sub_8225D5B8);
PPC_FUNC_IMPL(__imp__sub_8225D5B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8225d748
	if (cr6.getEQ()) goto loc_8225D748;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r10,r11,25,25,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 25) & 0x7F;
	// cmplwi cr6,r10,114
	cr6.compare<uint32_t>(ctx.r10.u32, 114, xer);
	// beq cr6,0x8225d748
	if (cr6.getEQ()) goto loc_8225D748;
	// cmplwi cr6,r10,124
	cr6.compare<uint32_t>(ctx.r10.u32, 124, xer);
	// beq cr6,0x8225d60c
	if (cr6.getEQ()) goto loc_8225D60C;
	// rlwinm r11,r11,13,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 13) & 0x7;
	// addi r11,r11,10
	r11.s64 = r11.s64 + 10;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r31
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x8225d74c
	if (!cr0.getEQ()) goto loc_8225D74C;
loc_8225D60C:
	// mr r11,r31
	r11.u64 = r31.u64;
loc_8225D610:
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// clrlwi. r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8225d67c
	if (!cr0.getEQ()) goto loc_8225D67C;
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// addic. r11,r11,-36
	xer.ca = r11.u32 > 35;
	r11.s64 = r11.s64 + -36;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225d67c
	if (cr0.getEQ()) goto loc_8225D67C;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwinm r9,r10,0,18,24
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x3F80;
	// cmplwi cr6,r9,15872
	cr6.compare<uint32_t>(ctx.r9.u32, 15872, xer);
	// beq cr6,0x8225d610
	if (cr6.getEQ()) goto loc_8225D610;
	// rlwinm r10,r10,13,29,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 13) & 0x7;
	// addi r10,r10,10
	ctx.r10.s64 = ctx.r10.s64 + 10;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r11
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x8225d610
	if (cr0.getEQ()) goto loc_8225D610;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwinm r9,r10,0,18,24
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x3F80;
	// cmplwi cr6,r9,15872
	cr6.compare<uint32_t>(ctx.r9.u32, 15872, xer);
	// beq cr6,0x8225d67c
	if (cr6.getEQ()) goto loc_8225D67C;
	// rlwinm r10,r10,13,29,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 13) & 0x7;
	// addi r10,r10,10
	ctx.r10.s64 = ctx.r10.s64 + 10;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x8225d74c
	if (!cr0.getEQ()) goto loc_8225D74C;
loc_8225D67C:
	// mr r11,r31
	r11.u64 = r31.u64;
loc_8225D680:
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// clrlwi. r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8225d6e8
	if (!cr0.getEQ()) goto loc_8225D6E8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225d6e8
	if (cr6.getEQ()) goto loc_8225D6E8;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwinm r9,r10,0,18,24
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x3F80;
	// cmplwi cr6,r9,15872
	cr6.compare<uint32_t>(ctx.r9.u32, 15872, xer);
	// beq cr6,0x8225d680
	if (cr6.getEQ()) goto loc_8225D680;
	// rlwinm r10,r10,13,29,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 13) & 0x7;
	// addi r10,r10,10
	ctx.r10.s64 = ctx.r10.s64 + 10;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r11
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x8225d680
	if (cr0.getEQ()) goto loc_8225D680;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwinm r9,r10,0,18,24
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x3F80;
	// cmplwi cr6,r9,15872
	cr6.compare<uint32_t>(ctx.r9.u32, 15872, xer);
	// beq cr6,0x8225d6e8
	if (cr6.getEQ()) goto loc_8225D6E8;
	// rlwinm r10,r10,13,29,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 13) & 0x7;
	// addi r10,r10,10
	ctx.r10.s64 = ctx.r10.s64 + 10;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x8225d74c
	if (!cr0.getEQ()) goto loc_8225D74C;
loc_8225D6E8:
	// clrlwi. r11,r5,24
	r11.u64 = ctx.r5.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225d748
	if (cr0.getEQ()) goto loc_8225D748;
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// clrlwi. r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225d704
	if (cr0.getEQ()) goto loc_8225D704;
	// li r11,0
	r11.s64 = 0;
loc_8225D704:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225d5b8
	sub_8225D5B8(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x8225d74c
	if (!cr0.getEQ()) goto loc_8225D74C;
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// clrlwi. r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225d730
	if (cr0.getEQ()) goto loc_8225D730;
	// li r11,0
	r11.s64 = 0;
loc_8225D730:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225d5b8
	sub_8225D5B8(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x8225d74c
	if (!cr0.getEQ()) goto loc_8225D74C;
loc_8225D748:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8225D74C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D768"))) PPC_WEAK_FUNC(sub_8225D768);
PPC_FUNC_IMPL(__imp__sub_8225D768) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29056(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29056);
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-112
	r31.s64 = ctx.r1.s64 + -112;
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r30,132(r31)
	PPC_STORE_U32(r31.u32 + 132, r30.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r3,744(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 744);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x8225d7b4
	if (cr0.getEQ()) goto loc_8225D7B4;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x8225d3c0
	sub_8225D3C0(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,744(r30)
	PPC_STORE_U32(r30.u32 + 744, r11.u32);
loc_8225D7B4:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x8225d7c8
	// ERROR 8225D7C8
	return;
}

__attribute__((alias("__imp__sub_8225D770"))) PPC_WEAK_FUNC(sub_8225D770);
PPC_FUNC_IMPL(__imp__sub_8225D770) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-112
	r31.s64 = ctx.r1.s64 + -112;
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r30,132(r31)
	PPC_STORE_U32(r31.u32 + 132, r30.u32);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r3,744(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 744);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x8225d7b4
	if (cr0.getEQ()) goto loc_8225D7B4;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x8225d3c0
	sub_8225D3C0(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,744(r30)
	PPC_STORE_U32(r30.u32 + 744, r11.u32);
loc_8225D7B4:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x8225d7c8
	goto loc_8225D7C8;
	// lwz r30,132(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 132);
loc_8225D7C8:
	// nop 
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r3,740(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 740);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x8225d7ec
	if (cr0.getEQ()) goto loc_8225D7EC;
	// bl 0x821929c8
	sub_821929C8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,740(r30)
	PPC_STORE_U32(r30.u32 + 740, r11.u32);
loc_8225D7EC:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x8225d800
	goto loc_8225D800;
	// lwz r30,132(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 132);
loc_8225D800:
	// addi r3,r30,772
	ctx.r3.s64 = r30.s64 + 772;
	// bl 0x8225d488
	sub_8225D488(ctx, base);
	// addi r3,r30,932
	ctx.r3.s64 = r30.s64 + 932;
	// bl 0x8225d488
	sub_8225D488(ctx, base);
	// addi r1,r31,112
	ctx.r1.s64 = r31.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D7C4"))) PPC_WEAK_FUNC(sub_8225D7C4);
PPC_FUNC_IMPL(__imp__sub_8225D7C4) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r30{};
	PPCRegister r31{};
	// lwz r30,132(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// nop 
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r3,740(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 740);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x8225d7ec
	if (cr0.getEQ()) goto loc_8225D7EC;
	// bl 0x821929c8
	sub_821929C8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,740(r30)
	PPC_STORE_U32(r30.u32 + 740, r11.u32);
loc_8225D7EC:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x8225d800
	// ERROR 8225D800
	return;
}

__attribute__((alias("__imp__sub_8225D7FC"))) PPC_WEAK_FUNC(sub_8225D7FC);
PPC_FUNC_IMPL(__imp__sub_8225D7FC) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	// lwz r30,132(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// addi r3,r30,772
	ctx.r3.s64 = r30.s64 + 772;
	// bl 0x8225d488
	sub_8225D488(ctx, base);
	// addi r3,r30,932
	ctx.r3.s64 = r30.s64 + 932;
	// bl 0x8225d488
	sub_8225D488(ctx, base);
	// addi r1,r31,112
	ctx.r1.s64 = r31.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D828"))) PPC_WEAK_FUNC(sub_8225D828);
PPC_FUNC_IMPL(__imp__sub_8225D828) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D834"))) PPC_WEAK_FUNC(sub_8225D834);
PPC_FUNC_IMPL(__imp__sub_8225D834) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225D840"))) PPC_WEAK_FUNC(sub_8225D840);
PPC_FUNC_IMPL(__imp__sub_8225D840) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// andis. r11,r11,5
	r11.u64 = r11.u64 & 327680;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225d874
	if (cr0.getEQ()) goto loc_8225D874;
	// bl 0x822c2dc8
	sub_822C2DC8(ctx, base);
loc_8225D874:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822e13b0
	sub_822E13B0(ctx, base);
	// addi r30,r31,932
	r30.s64 = r31.s64 + 932;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225d4e8
	sub_8225D4E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822bc250
	sub_822BC250(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225d4e8
	sub_8225D4E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822b44e0
	sub_822B44E0(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225d4e8
	sub_8225D4E8(ctx, base);
	// lwz r11,116(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// li r27,0
	r27.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225d8d0
	if (cr6.getEQ()) goto loc_8225D8D0;
	// stw r27,652(r31)
	PPC_STORE_U32(r31.u32 + 652, r27.u32);
	// stw r27,656(r31)
	PPC_STORE_U32(r31.u32 + 656, r27.u32);
	// stw r27,668(r31)
	PPC_STORE_U32(r31.u32 + 668, r27.u32);
	// stw r27,672(r31)
	PPC_STORE_U32(r31.u32 + 672, r27.u32);
	// stw r27,676(r31)
	PPC_STORE_U32(r31.u32 + 676, r27.u32);
	// stw r27,680(r31)
	PPC_STORE_U32(r31.u32 + 680, r27.u32);
loc_8225D8D0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8229f138
	sub_8229F138(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225d4e8
	sub_8225D4E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8229d540
	sub_8229D540(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225d4e8
	sub_8225D4E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82296a08
	sub_82296A08(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225d4e8
	sub_8225D4E8(ctx, base);
	// lwz r11,116(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225d914
	if (cr6.getEQ()) goto loc_8225D914;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82293a00
	sub_82293A00(ctx, base);
loc_8225D914:
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// rlwinm. r11,r11,0,16,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225d928
	if (cr0.getEQ()) goto loc_8225D928;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82285d10
	sub_82285D10(ctx, base);
loc_8225D928:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82280b28
	sub_82280B28(ctx, base);
	// clrlwi. r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225d940
	if (cr0.getEQ()) goto loc_8225D940;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227fb40
	sub_8227FB40(ctx, base);
loc_8225D940:
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// ori r11,r11,128
	r11.u64 = r11.u64 | 128;
	// stw r11,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r11.u32);
	// rlwinm. r10,r11,0,29,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225d974
	if (cr0.getEQ()) goto loc_8225D974;
	// lwz r11,116(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225d96c
	if (cr6.getEQ()) goto loc_8225D96C;
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// ori r11,r11,4096
	r11.u64 = r11.u64 | 4096;
	// stw r11,40(r31)
	PPC_STORE_U32(r31.u32 + 40, r11.u32);
loc_8225D96C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82270e80
	sub_82270E80(ctx, base);
loc_8225D974:
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// rlwinm. r10,r11,0,27,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225d98c
	if (cr0.getEQ()) goto loc_8225D98C;
	// rlwinm. r11,r11,0,26,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq 0x8225d990
	if (cr0.getEQ()) goto loc_8225D990;
loc_8225D98C:
	// mr r11,r27
	r11.u64 = r27.u64;
loc_8225D990:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225d9a0
	if (cr0.getEQ()) goto loc_8225D9A0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227a358
	sub_8227A358(ctx, base);
loc_8225D9A0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822794b8
	sub_822794B8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82277c40
	sub_82277C40(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225d4e8
	sub_8225D4E8(ctx, base);
	// lwz r11,116(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225d9dc
	if (cr6.getEQ()) goto loc_8225D9DC;
	// stw r27,652(r31)
	PPC_STORE_U32(r31.u32 + 652, r27.u32);
	// stw r27,656(r31)
	PPC_STORE_U32(r31.u32 + 656, r27.u32);
	// stw r27,668(r31)
	PPC_STORE_U32(r31.u32 + 668, r27.u32);
	// stw r27,672(r31)
	PPC_STORE_U32(r31.u32 + 672, r27.u32);
	// stw r27,676(r31)
	PPC_STORE_U32(r31.u32 + 676, r27.u32);
	// stw r27,680(r31)
	PPC_STORE_U32(r31.u32 + 680, r27.u32);
loc_8225D9DC:
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822736b0
	sub_822736B0(ctx, base);
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// rlwinm. r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8225daf4
	if (!cr0.getEQ()) goto loc_8225DAF4;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// rlwinm. r11,r11,0,18,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225da4c
	if (cr0.getEQ()) goto loc_8225DA4C;
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// lis r10,-1
	ctx.r10.s64 = -65536;
	// lwz r3,0(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// rlwinm r11,r11,0,0,15
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF0000;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// beq cr6,0x8225da3c
	if (cr6.getEQ()) goto loc_8225DA3C;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// bl 0x822774d8
	sub_822774D8(ctx, base);
	// b 0x8225da44
	goto loc_8225DA44;
loc_8225DA3C:
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// bl 0x822774e0
	sub_822774E0(ctx, base);
loc_8225DA44:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8225daf4
	if (!cr6.getEQ()) goto loc_8225DAF4;
loc_8225DA4C:
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// lwz r10,752(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 752);
	// rlwinm r29,r10,10,15,21
	r29.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 10) & 0x1FC00;
	// rlwinm. r11,r11,0,12,12
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225da64
	if (cr0.getEQ()) goto loc_8225DA64;
	// oris r29,r29,4
	r29.u64 = r29.u64 | 262144;
loc_8225DA64:
	// lwz r30,0(r28)
	r30.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// lis r11,-32217
	r11.s64 = -2111373312;
	// addi r26,r11,632
	r26.s64 = r11.s64 + 632;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r8,r31
	ctx.r8.u64 = r31.u64;
	// bl 0x82345d68
	sub_82345D68(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x8225daf4
	if (!cr0.getLT()) goto loc_8225DAF4;
	// lis r11,-32217
	r11.s64 = -2111373312;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// addi r5,r11,632
	ctx.r5.s64 = r11.s64 + 632;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8225d020
	sub_8225D020(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x8225daf4
	if (!cr0.getLT()) goto loc_8225DAF4;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// rlwinm. r11,r11,0,15,15
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225dafc
	if (cr0.getEQ()) goto loc_8225DAFC;
	// li r4,3551
	ctx.r4.s64 = 3551;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225d230
	sub_8225D230(ctx, base);
loc_8225DAF4:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed178
	return;
loc_8225DAFC:
	// lwz r3,0(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// stw r27,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r27.u32);
	// beq cr6,0x8225db3c
	if (cr6.getEQ()) goto loc_8225DB3C;
	// lwz r3,0(r25)
	ctx.r3.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x8225db3c
	if (cr0.getEQ()) goto loc_8225DB3C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r27,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r27.u32);
loc_8225DB3C:
	// li r4,3551
	ctx.r4.s64 = 3551;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225d328
	sub_8225D328(ctx, base);
}

__attribute__((alias("__imp__sub_8225DB48"))) PPC_WEAK_FUNC(sub_8225DB48);
PPC_FUNC_IMPL(__imp__sub_8225DB48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r3.u32);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// rlwinm. r11,r11,0,3,3
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225dbe8
	if (cr0.getEQ()) goto loc_8225DBE8;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r11,52(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 52);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x8225dba0
	if (!cr6.getEQ()) goto loc_8225DBA0;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r10,-32768
	ctx.r10.s64 = -2147483648;
	// ori r10,r10,65535
	ctx.r10.u64 = ctx.r10.u64 | 65535;
	// stw r10,2448(r11)
	PPC_STORE_U32(r11.u32 + 2448, ctx.r10.u32);
	// b 0x8225dbe8
	goto loc_8225DBE8;
loc_8225DBA0:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r11,52(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 52);
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// lis r11,-32768
	r11.s64 = -2147483648;
	// ori r4,r11,16389
	ctx.r4.u64 = r11.u64 | 16389;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x8225d770
	sub_8225D770(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x821abc30
	sub_821ABC30(ctx, base);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r10,8(r11)
	PPC_STORE_U8(r11.u32 + 8, ctx.r10.u8);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x8225dc10
	goto loc_8225DC10;
loc_8225DBE8:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r11,2448(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 2448);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8225dc0c
	if (cr6.getLT()) goto loc_8225DC0C;
	// lis r11,-32768
	r11.s64 = -2147483648;
	// ori r11,r11,65535
	r11.u64 = r11.u64 | 65535;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
loc_8225DC0C:
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
loc_8225DC10:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225DC20"))) PPC_WEAK_FUNC(sub_8225DC20);
PPC_FUNC_IMPL(__imp__sub_8225DC20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r31{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29096(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29096);
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-112
	r31.s64 = ctx.r1.s64 + -112;
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,132(r31)
	PPC_STORE_U32(r31.u32 + 132, ctx.r3.u32);
	// stw r4,140(r31)
	PPC_STORE_U32(r31.u32 + 140, ctx.r4.u32);
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// lbz r11,8(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 8);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225dc78
	if (cr0.getEQ()) goto loc_8225DC78;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r4,140(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8225d770
	sub_8225D770(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_8225DC78:
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225dc94
	if (cr6.getEQ()) goto loc_8225DC94;
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x821abc30
	sub_821ABC30(ctx, base);
loc_8225DC94:
	// lwz r3,140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// addi r1,r31,112
	ctx.r1.s64 = r31.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225DC28"))) PPC_WEAK_FUNC(sub_8225DC28);
PPC_FUNC_IMPL(__imp__sub_8225DC28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-112
	r31.s64 = ctx.r1.s64 + -112;
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,132(r31)
	PPC_STORE_U32(r31.u32 + 132, ctx.r3.u32);
	// stw r4,140(r31)
	PPC_STORE_U32(r31.u32 + 140, ctx.r4.u32);
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// lbz r11,8(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 8);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225dc78
	if (cr0.getEQ()) goto loc_8225DC78;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r4,140(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8225d770
	sub_8225D770(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_8225DC78:
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225dc94
	if (cr6.getEQ()) goto loc_8225DC94;
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x821abc30
	sub_821ABC30(ctx, base);
loc_8225DC94:
	// lwz r3,140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// addi r1,r31,112
	ctx.r1.s64 = r31.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225DCAC"))) PPC_WEAK_FUNC(sub_8225DCAC);
PPC_FUNC_IMPL(__imp__sub_8225DCAC) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225DCB8"))) PPC_WEAK_FUNC(sub_8225DCB8);
PPC_FUNC_IMPL(__imp__sub_8225DCB8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// ori r10,r31,1
	ctx.r10.u64 = r31.u64 | 1;
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// addi r30,r31,772
	r30.s64 = r31.s64 + 772;
	// li r5,132
	ctx.r5.s64 = 132;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// addi r11,r30,152
	r11.s64 = r30.s64 + 152;
	// addi r29,r31,932
	r29.s64 = r31.s64 + 932;
	// stw r31,148(r30)
	PPC_STORE_U32(r30.u32 + 148, r31.u32);
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
	// ori r9,r11,1
	ctx.r9.u64 = r11.u64 | 1;
	// ori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 | 1;
	// li r5,132
	ctx.r5.s64 = 132;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// addi r11,r29,152
	r11.s64 = r29.s64 + 152;
	// stw r31,148(r29)
	PPC_STORE_U32(r29.u32 + 148, r31.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
	// ori r9,r11,1
	ctx.r9.u64 = r11.u64 | 1;
	// ori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 | 1;
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x8225d560
	sub_8225D560(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r10,r11,8
	ctx.r10.s64 = r11.s64 + 8;
	// stw r11,132(r30)
	PPC_STORE_U32(r30.u32 + 132, r11.u32);
	// stw r11,136(r30)
	PPC_STORE_U32(r30.u32 + 136, r11.u32);
	// stw r11,140(r30)
	PPC_STORE_U32(r30.u32 + 140, r11.u32);
	// stw r10,144(r30)
	PPC_STORE_U32(r30.u32 + 144, ctx.r10.u32);
	// bl 0x8225d560
	sub_8225D560(ctx, base);
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// stw r3,132(r29)
	PPC_STORE_U32(r29.u32 + 132, ctx.r3.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r3,136(r29)
	PPC_STORE_U32(r29.u32 + 136, ctx.r3.u32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r3,140(r29)
	PPC_STORE_U32(r29.u32 + 140, ctx.r3.u32);
	// stw r9,144(r29)
	PPC_STORE_U32(r29.u32 + 144, ctx.r9.u32);
	// stw r11,40(r31)
	PPC_STORE_U32(r31.u32 + 40, r11.u32);
	// stw r10,748(r31)
	PPC_STORE_U32(r31.u32 + 748, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8225DD98"))) PPC_WEAK_FUNC(sub_8225DD98);
PPC_FUNC_IMPL(__imp__sub_8225DD98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r23,r5
	r23.u64 = ctx.r5.u64;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// mr r25,r9
	r25.u64 = ctx.r9.u64;
	// mr r24,r10
	r24.u64 = ctx.r10.u64;
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x8225ddd4
	if (cr6.getEQ()) goto loc_8225DDD4;
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// ori r11,r11,2048
	r11.u64 = r11.u64 | 2048;
	// stw r11,40(r31)
	PPC_STORE_U32(r31.u32 + 40, r11.u32);
loc_8225DDD4:
	// lwz r30,356(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 356);
	// lis r29,-1
	r29.s64 = -65536;
	// stw r28,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r28.u32);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// stw r23,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r23.u32);
	// stw r30,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r30.u32);
	// beq cr6,0x8225de88
	if (cr6.getEQ()) goto loc_8225DE88;
	// lwz r6,16(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// cmplwi cr6,r6,64
	cr6.compare<uint32_t>(ctx.r6.u32, 64, xer);
	// stw r6,752(r31)
	PPC_STORE_U32(r31.u32 + 752, ctx.r6.u32);
	// ble cr6,0x8225de10
	if (!cr6.getGT()) goto loc_8225DE10;
	// li r5,64
	ctx.r5.s64 = 64;
	// li r4,3589
	ctx.r4.s64 = 3589;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225d328
	sub_8225D328(ctx, base);
loc_8225DE10:
	// rlwinm r11,r28,0,0,15
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0xFFFF0000;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// bne cr6,0x8225de34
	if (!cr6.getEQ()) goto loc_8225DE34;
	// lwz r11,32(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 32);
	// stw r11,760(r31)
	PPC_STORE_U32(r31.u32 + 760, r11.u32);
	// lwz r11,36(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 36);
	// stw r11,764(r31)
	PPC_STORE_U32(r31.u32 + 764, r11.u32);
	// lwz r11,48(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 48);
	// b 0x8225de48
	goto loc_8225DE48;
loc_8225DE34:
	// lwz r11,40(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 40);
	// stw r11,760(r31)
	PPC_STORE_U32(r31.u32 + 760, r11.u32);
	// lwz r11,44(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 44);
	// stw r11,764(r31)
	PPC_STORE_U32(r31.u32 + 764, r11.u32);
	// lwz r11,52(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 52);
loc_8225DE48:
	// stw r11,768(r31)
	PPC_STORE_U32(r31.u32 + 768, r11.u32);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm. r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225de64
	if (cr0.getEQ()) goto loc_8225DE64;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// ori r11,r11,4096
	r11.u64 = r11.u64 | 4096;
	// stw r11,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r11.u32);
loc_8225DE64:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8225de88
	if (cr6.getEQ()) goto loc_8225DE88;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm. r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225de88
	if (cr0.getEQ()) goto loc_8225DE88;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// lwz r3,20(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// bl 0x82257128
	sub_82257128(ctx, base);
loc_8225DE88:
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// rlwinm r10,r11,0,0,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF0000;
	// cmplw cr6,r10,r29
	cr6.compare<uint32_t>(ctx.r10.u32, r29.u32, xer);
	// beq cr6,0x8225dec4
	if (cr6.getEQ()) goto loc_8225DEC4;
	// lwz r11,56(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225deb0
	if (cr0.getEQ()) goto loc_8225DEB0;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm. r11,r11,0,26,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225debc
	if (cr0.getEQ()) goto loc_8225DEBC;
loc_8225DEB0:
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// ori r11,r11,16
	r11.u64 = r11.u64 | 16;
	// stw r11,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r11.u32);
loc_8225DEBC:
	// cmplw cr6,r10,r29
	cr6.compare<uint32_t>(ctx.r10.u32, r29.u32, xer);
	// bne cr6,0x8225dee8
	if (!cr6.getEQ()) goto loc_8225DEE8;
loc_8225DEC4:
	// lwz r11,56(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225dee8
	if (cr0.getEQ()) goto loc_8225DEE8;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm. r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225dee8
	if (cr0.getEQ()) goto loc_8225DEE8;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// ori r11,r11,64
	r11.u64 = r11.u64 | 64;
	// stw r11,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r11.u32);
loc_8225DEE8:
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822fe9f8
	sub_822FE9F8(ctx, base);
	// mr. r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r4.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bne 0x8225df10
	if (!cr0.getEQ()) goto loc_8225DF10;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// li r4,3501
	ctx.r4.s64 = 3501;
	// bl 0x8225d328
	sub_8225D328(ctx, base);
loc_8225DF10:
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// bl 0x822fbeb8
	sub_822FBEB8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822e44d0
	sub_822E44D0(ctx, base);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// clrlwi. r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225df30
	if (cr0.getEQ()) goto loc_8225DF30;
	// li r11,0
	r11.s64 = 0;
loc_8225DF30:
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// clrlwi. r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8225df50
	if (!cr0.getEQ()) goto loc_8225DF50;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225df50
	if (cr6.getEQ()) goto loc_8225DF50;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822e2a98
	sub_822E2A98(ctx, base);
loc_8225DF50:
	// addi r3,r31,932
	ctx.r3.s64 = r31.s64 + 932;
	// bl 0x8225d4e8
	sub_8225D4E8(ctx, base);
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// lwz r7,348(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 348);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r6,340(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 340);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225d840
	sub_8225D840(ctx, base);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_8225DF80"))) PPC_WEAK_FUNC(sub_8225DF80);
PPC_FUNC_IMPL(__imp__sub_8225DF80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// mr r29,r8
	r29.u64 = ctx.r8.u64;
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// stw r30,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r30.u32);
	// oris r11,r11,1
	r11.u64 = r11.u64 | 65536;
	// stw r11,40(r31)
	PPC_STORE_U32(r31.u32 + 40, r11.u32);
	// bl 0x822ff470
	sub_822FF470(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822e44d0
	sub_822E44D0(ctx, base);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// clrlwi. r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225dfc8
	if (cr0.getEQ()) goto loc_8225DFC8;
	// li r11,0
	r11.s64 = 0;
loc_8225DFC8:
	// rlwinm r11,r11,0,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// clrlwi. r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8225dfe8
	if (!cr0.getEQ()) goto loc_8225DFE8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225dfe8
	if (cr6.getEQ()) goto loc_8225DFE8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822e2a98
	sub_822E2A98(ctx, base);
loc_8225DFE8:
	// addi r3,r31,932
	ctx.r3.s64 = r31.s64 + 932;
	// bl 0x8225d4e8
	sub_8225D4E8(ctx, base);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,7
	ctx.r10.s64 = 7;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8225E000:
	// std r9,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r9.u64);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// bdnz 0x8225e000
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8225E000;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8225e034
	if (cr6.getEQ()) goto loc_8225E034;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// lwz r11,20(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 20);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
loc_8225E034:
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// lis r4,-1
	ctx.r4.s64 = -65536;
	// rlwinm r11,r11,0,0,15
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF0000;
	// cmplw cr6,r11,r4
	cr6.compare<uint32_t>(r11.u32, ctx.r4.u32, xer);
	// beq cr6,0x8225e04c
	if (cr6.getEQ()) goto loc_8225E04C;
	// lis r4,-2
	ctx.r4.s64 = -131072;
loc_8225E04C:
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225d840
	sub_8225D840(ctx, base);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8225e074
	if (cr6.getEQ()) goto loc_8225E074;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r11.u32);
loc_8225E074:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8225E080"))) PPC_WEAK_FUNC(sub_8225E080);
PPC_FUNC_IMPL(__imp__sub_8225E080) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r31{};
	PPCContext env{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29120(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29120);
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-160
	r31.s64 = ctx.r1.s64 + -160;
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,180(r31)
	PPC_STORE_U32(r31.u32 + 180, ctx.r3.u32);
	// stw r4,188(r31)
	PPC_STORE_U32(r31.u32 + 188, ctx.r4.u32);
	// stw r5,196(r31)
	PPC_STORE_U32(r31.u32 + 196, ctx.r5.u32);
	// stw r6,204(r31)
	PPC_STORE_U32(r31.u32 + 204, ctx.r6.u32);
	// stw r7,212(r31)
	PPC_STORE_U32(r31.u32 + 212, ctx.r7.u32);
	// stw r8,220(r31)
	PPC_STORE_U32(r31.u32 + 220, ctx.r8.u32);
	// stw r9,228(r31)
	PPC_STORE_U32(r31.u32 + 228, ctx.r9.u32);
	// stw r10,236(r31)
	PPC_STORE_U32(r31.u32 + 236, ctx.r10.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,112(r31)
	PPC_STORE_U32(r31.u32 + 112, r11.u32);
	// addi r4,r31,120
	ctx.r4.s64 = r31.s64 + 120;
	// lwz r3,188(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// bl 0x8225cdf8
	sub_8225CDF8(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_8225E0D8:
	// lwz r5,260(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// lwz r4,252(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 252);
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// bl 0x8225ce38
	sub_8225CE38(ctx, base);
	// stw r3,112(r31)
	PPC_STORE_U32(r31.u32 + 112, ctx.r3.u32);
	// lwz r11,112(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8225e184
	if (!cr6.getEQ()) goto loc_8225E184;
	// lwz r11,124(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 124);
	// addi r3,r11,1104
	ctx.r3.s64 = r11.s64 + 1104;
	// bl 0x823f22c0
	env = ctx;
	ctx.r3.s64 = setjmp(*reinterpret_cast<jmp_buf*>(base + ctx.r3.u32));
	if (ctx.r3.s64 != 0) ctx = env;
	// stw r3,136(r31)
	PPC_STORE_U32(r31.u32 + 136, ctx.r3.u32);
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// stw r11,132(r31)
	PPC_STORE_U32(r31.u32 + 132, r11.u32);
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225e12c
	if (cr6.getEQ()) goto loc_8225E12C;
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// bl 0x8225db48
	sub_8225DB48(ctx, base);
	// stw r3,112(r31)
	PPC_STORE_U32(r31.u32 + 112, ctx.r3.u32);
	// b 0x8225e184
	goto loc_8225E184;
loc_8225E12C:
	// li r11,1
	r11.s64 = 1;
	// stb r11,128(r31)
	PPC_STORE_U8(r31.u32 + 128, r11.u8);
	// lwz r5,260(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// lwz r4,252(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 252);
	// lwz r3,124(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 124);
	// bl 0x8225dcb8
	sub_8225DCB8(ctx, base);
	// lwz r11,268(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 268);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// lwz r11,244(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 244);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// lwz r11,236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 236);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lwz r10,228(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 228);
	// lwz r9,220(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// lwz r8,212(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 212);
	// lwz r7,204(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// lwz r6,196(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// lwz r5,120(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 120);
	// lwz r4,180(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// lwz r3,124(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 124);
	// bl 0x8225dd98
	sub_8225DD98(ctx, base);
	// b 0x8225e190
	goto loc_8225E190;
loc_8225E184:
	// lwz r11,112(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225e0d8
	if (cr6.getEQ()) goto loc_8225E0D8;
loc_8225E190:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x8225e1b0
	// ERROR 8225E1B0
	return;
}

__attribute__((alias("__imp__sub_8225E088"))) PPC_WEAK_FUNC(sub_8225E088);
PPC_FUNC_IMPL(__imp__sub_8225E088) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCContext env{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-160
	r31.s64 = ctx.r1.s64 + -160;
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,180(r31)
	PPC_STORE_U32(r31.u32 + 180, ctx.r3.u32);
	// stw r4,188(r31)
	PPC_STORE_U32(r31.u32 + 188, ctx.r4.u32);
	// stw r5,196(r31)
	PPC_STORE_U32(r31.u32 + 196, ctx.r5.u32);
	// stw r6,204(r31)
	PPC_STORE_U32(r31.u32 + 204, ctx.r6.u32);
	// stw r7,212(r31)
	PPC_STORE_U32(r31.u32 + 212, ctx.r7.u32);
	// stw r8,220(r31)
	PPC_STORE_U32(r31.u32 + 220, ctx.r8.u32);
	// stw r9,228(r31)
	PPC_STORE_U32(r31.u32 + 228, ctx.r9.u32);
	// stw r10,236(r31)
	PPC_STORE_U32(r31.u32 + 236, ctx.r10.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,112(r31)
	PPC_STORE_U32(r31.u32 + 112, r11.u32);
	// addi r4,r31,120
	ctx.r4.s64 = r31.s64 + 120;
	// lwz r3,188(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// bl 0x8225cdf8
	sub_8225CDF8(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_8225E0D8:
	// lwz r5,260(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// lwz r4,252(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 252);
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// bl 0x8225ce38
	sub_8225CE38(ctx, base);
	// stw r3,112(r31)
	PPC_STORE_U32(r31.u32 + 112, ctx.r3.u32);
	// lwz r11,112(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8225e184
	if (!cr6.getEQ()) goto loc_8225E184;
	// lwz r11,124(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 124);
	// addi r3,r11,1104
	ctx.r3.s64 = r11.s64 + 1104;
	// bl 0x823f22c0
	env = ctx;
	ctx.r3.s64 = setjmp(*reinterpret_cast<jmp_buf*>(base + ctx.r3.u32));
	if (ctx.r3.s64 != 0) ctx = env;
	// stw r3,136(r31)
	PPC_STORE_U32(r31.u32 + 136, ctx.r3.u32);
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// stw r11,132(r31)
	PPC_STORE_U32(r31.u32 + 132, r11.u32);
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225e12c
	if (cr6.getEQ()) goto loc_8225E12C;
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// bl 0x8225db48
	sub_8225DB48(ctx, base);
	// stw r3,112(r31)
	PPC_STORE_U32(r31.u32 + 112, ctx.r3.u32);
	// b 0x8225e184
	goto loc_8225E184;
loc_8225E12C:
	// li r11,1
	r11.s64 = 1;
	// stb r11,128(r31)
	PPC_STORE_U8(r31.u32 + 128, r11.u8);
	// lwz r5,260(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// lwz r4,252(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 252);
	// lwz r3,124(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 124);
	// bl 0x8225dcb8
	sub_8225DCB8(ctx, base);
	// lwz r11,268(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 268);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// lwz r11,244(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 244);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// lwz r11,236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 236);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lwz r10,228(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 228);
	// lwz r9,220(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// lwz r8,212(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 212);
	// lwz r7,204(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// lwz r6,196(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// lwz r5,120(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 120);
	// lwz r4,180(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// lwz r3,124(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 124);
	// bl 0x8225dd98
	sub_8225DD98(ctx, base);
	// b 0x8225e190
	goto loc_8225E190;
loc_8225E184:
	// lwz r11,112(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225e0d8
	if (cr6.getEQ()) goto loc_8225E0D8;
loc_8225E190:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x8225e1b0
	goto loc_8225E1B0;
	// lwz r4,244(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 244);
	// lwz r3,236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 236);
	// bl 0x8225cec0
	sub_8225CEC0(ctx, base);
	// stw r3,112(r31)
	PPC_STORE_U32(r31.u32 + 112, ctx.r3.u32);
loc_8225E1B0:
	// lwz r4,112(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// bl 0x8225dc28
	sub_8225DC28(ctx, base);
	// addi r1,r31,160
	ctx.r1.s64 = r31.s64 + 160;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225E1A0"))) PPC_WEAK_FUNC(sub_8225E1A0);
PPC_FUNC_IMPL(__imp__sub_8225E1A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	// lwz r4,244(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 244);
	// lwz r3,236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 236);
	// bl 0x8225cec0
	sub_8225CEC0(ctx, base);
	// stw r3,112(r31)
	PPC_STORE_U32(r31.u32 + 112, ctx.r3.u32);
	// lwz r4,112(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// bl 0x8225dc28
	sub_8225DC28(ctx, base);
	// addi r1,r31,160
	ctx.r1.s64 = r31.s64 + 160;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225E1D0"))) PPC_WEAK_FUNC(sub_8225E1D0);
PPC_FUNC_IMPL(__imp__sub_8225E1D0) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225E1E0"))) PPC_WEAK_FUNC(sub_8225E1E0);
PPC_FUNC_IMPL(__imp__sub_8225E1E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r31{};
	PPCContext env{};
	uint32_t ea{};
	// lwz r18,-1044(0)
	r18.u64 = PPC_LOAD_U32(-1044);
	// lwz r16,29144(r7)
	r16.u64 = PPC_LOAD_U32(ctx.r7.u32 + 29144);
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,164(r31)
	PPC_STORE_U32(r31.u32 + 164, ctx.r3.u32);
	// stw r4,172(r31)
	PPC_STORE_U32(r31.u32 + 172, ctx.r4.u32);
	// stw r5,180(r31)
	PPC_STORE_U32(r31.u32 + 180, ctx.r5.u32);
	// stw r6,188(r31)
	PPC_STORE_U32(r31.u32 + 188, ctx.r6.u32);
	// stw r7,196(r31)
	PPC_STORE_U32(r31.u32 + 196, ctx.r7.u32);
	// stw r8,204(r31)
	PPC_STORE_U32(r31.u32 + 204, ctx.r8.u32);
	// stw r9,212(r31)
	PPC_STORE_U32(r31.u32 + 212, ctx.r9.u32);
	// lwz r11,196(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// lwz r11,204(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// lis r11,-32218
	r11.s64 = -2111438848;
	// addi r11,r11,-12552
	r11.s64 = r11.s64 + -12552;
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
	// addi r11,r31,80
	r11.s64 = r31.s64 + 80;
	// stw r11,196(r31)
	PPC_STORE_U32(r31.u32 + 196, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,92(r31)
	PPC_STORE_U32(r31.u32 + 92, r11.u32);
	// addi r4,r31,96
	ctx.r4.s64 = r31.s64 + 96;
	// lwz r3,180(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// bl 0x8225cdf8
	sub_8225CDF8(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_8225E258:
	// lwz r5,88(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// lwz r4,196(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// addi r3,r31,96
	ctx.r3.s64 = r31.s64 + 96;
	// bl 0x8225ce38
	sub_8225CE38(ctx, base);
	// stw r3,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r3.u32);
	// lwz r11,92(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 92);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8225e2e4
	if (!cr6.getEQ()) goto loc_8225E2E4;
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// addi r3,r11,1104
	ctx.r3.s64 = r11.s64 + 1104;
	// bl 0x823f22c0
	env = ctx;
	ctx.r3.s64 = setjmp(*reinterpret_cast<jmp_buf*>(base + ctx.r3.u32));
	if (ctx.r3.s64 != 0) ctx = env;
	// stw r3,112(r31)
	PPC_STORE_U32(r31.u32 + 112, ctx.r3.u32);
	// lwz r11,112(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// stw r11,108(r31)
	PPC_STORE_U32(r31.u32 + 108, r11.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225e2ac
	if (cr6.getEQ()) goto loc_8225E2AC;
	// addi r3,r31,96
	ctx.r3.s64 = r31.s64 + 96;
	// bl 0x8225db48
	sub_8225DB48(ctx, base);
	// stw r3,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r3.u32);
	// b 0x8225e2e4
	goto loc_8225E2E4;
loc_8225E2AC:
	// li r11,1
	r11.s64 = 1;
	// stb r11,104(r31)
	PPC_STORE_U8(r31.u32 + 104, r11.u8);
	// lwz r5,88(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// lwz r4,196(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// lwz r3,100(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// bl 0x8225dcb8
	sub_8225DCB8(ctx, base);
	// lwz r8,212(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 212);
	// lwz r7,188(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// lwz r6,96(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 96);
	// lwz r5,172(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 172);
	// lwz r4,164(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// lwz r3,100(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// bl 0x8225df80
	sub_8225DF80(ctx, base);
	// b 0x8225e2f0
	goto loc_8225E2F0;
loc_8225E2E4:
	// lwz r11,92(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 92);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225e258
	if (cr6.getEQ()) goto loc_8225E258;
loc_8225E2F0:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x8225e310
	// ERROR 8225E310
	return;
}

__attribute__((alias("__imp__sub_8225E1E8"))) PPC_WEAK_FUNC(sub_8225E1E8);
PPC_FUNC_IMPL(__imp__sub_8225E1E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCContext env{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,164(r31)
	PPC_STORE_U32(r31.u32 + 164, ctx.r3.u32);
	// stw r4,172(r31)
	PPC_STORE_U32(r31.u32 + 172, ctx.r4.u32);
	// stw r5,180(r31)
	PPC_STORE_U32(r31.u32 + 180, ctx.r5.u32);
	// stw r6,188(r31)
	PPC_STORE_U32(r31.u32 + 188, ctx.r6.u32);
	// stw r7,196(r31)
	PPC_STORE_U32(r31.u32 + 196, ctx.r7.u32);
	// stw r8,204(r31)
	PPC_STORE_U32(r31.u32 + 204, ctx.r8.u32);
	// stw r9,212(r31)
	PPC_STORE_U32(r31.u32 + 212, ctx.r9.u32);
	// lwz r11,196(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// lwz r11,204(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// lis r11,-32218
	r11.s64 = -2111438848;
	// addi r11,r11,-12552
	r11.s64 = r11.s64 + -12552;
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
	// addi r11,r31,80
	r11.s64 = r31.s64 + 80;
	// stw r11,196(r31)
	PPC_STORE_U32(r31.u32 + 196, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,92(r31)
	PPC_STORE_U32(r31.u32 + 92, r11.u32);
	// addi r4,r31,96
	ctx.r4.s64 = r31.s64 + 96;
	// lwz r3,180(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// bl 0x8225cdf8
	sub_8225CDF8(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
loc_8225E258:
	// lwz r5,88(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// lwz r4,196(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// addi r3,r31,96
	ctx.r3.s64 = r31.s64 + 96;
	// bl 0x8225ce38
	sub_8225CE38(ctx, base);
	// stw r3,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r3.u32);
	// lwz r11,92(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 92);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8225e2e4
	if (!cr6.getEQ()) goto loc_8225E2E4;
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// addi r3,r11,1104
	ctx.r3.s64 = r11.s64 + 1104;
	// bl 0x823f22c0
	env = ctx;
	ctx.r3.s64 = setjmp(*reinterpret_cast<jmp_buf*>(base + ctx.r3.u32));
	if (ctx.r3.s64 != 0) ctx = env;
	// stw r3,112(r31)
	PPC_STORE_U32(r31.u32 + 112, ctx.r3.u32);
	// lwz r11,112(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 112);
	// stw r11,108(r31)
	PPC_STORE_U32(r31.u32 + 108, r11.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225e2ac
	if (cr6.getEQ()) goto loc_8225E2AC;
	// addi r3,r31,96
	ctx.r3.s64 = r31.s64 + 96;
	// bl 0x8225db48
	sub_8225DB48(ctx, base);
	// stw r3,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r3.u32);
	// b 0x8225e2e4
	goto loc_8225E2E4;
loc_8225E2AC:
	// li r11,1
	r11.s64 = 1;
	// stb r11,104(r31)
	PPC_STORE_U8(r31.u32 + 104, r11.u8);
	// lwz r5,88(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// lwz r4,196(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 196);
	// lwz r3,100(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// bl 0x8225dcb8
	sub_8225DCB8(ctx, base);
	// lwz r8,212(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 212);
	// lwz r7,188(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// lwz r6,96(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 96);
	// lwz r5,172(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 172);
	// lwz r4,164(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// lwz r3,100(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// bl 0x8225df80
	sub_8225DF80(ctx, base);
	// b 0x8225e2f0
	goto loc_8225E2F0;
loc_8225E2E4:
	// lwz r11,92(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 92);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225e258
	if (cr6.getEQ()) goto loc_8225E258;
loc_8225E2F0:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x8225e310
	goto loc_8225E310;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,188(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// bl 0x8225cec0
	sub_8225CEC0(ctx, base);
	// stw r3,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r3.u32);
loc_8225E310:
	// lwz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 92);
	// addi r3,r31,96
	ctx.r3.s64 = r31.s64 + 96;
	// bl 0x8225dc28
	sub_8225DC28(ctx, base);
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225E300"))) PPC_WEAK_FUNC(sub_8225E300);
PPC_FUNC_IMPL(__imp__sub_8225E300) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,188(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// bl 0x8225cec0
	sub_8225CEC0(ctx, base);
	// stw r3,92(r31)
	PPC_STORE_U32(r31.u32 + 92, ctx.r3.u32);
	// lwz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 92);
	// addi r3,r31,96
	ctx.r3.s64 = r31.s64 + 96;
	// bl 0x8225dc28
	sub_8225DC28(ctx, base);
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225E330"))) PPC_WEAK_FUNC(sub_8225E330);
PPC_FUNC_IMPL(__imp__sub_8225E330) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225E340"))) PPC_WEAK_FUNC(sub_8225E340);
PPC_FUNC_IMPL(__imp__sub_8225E340) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed114
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r7
	r31.u64 = ctx.r7.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// addi r11,r11,-19608
	r11.s64 = r11.s64 + -19608;
	// mr r21,r4
	r21.u64 = ctx.r4.u64;
	// lwz r10,40(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r9,32(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// mr r20,r5
	r20.u64 = ctx.r5.u64;
	// rlwinm r30,r10,1,31,31
	r30.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// lwz r10,48(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// clrlwi r27,r9,26
	r27.u64 = ctx.r9.u32 & 0x3F;
	// lwz r9,28(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// rlwinm r26,r10,23,30,31
	r26.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 23) & 0x3;
	// rlwinm r10,r27,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r19,r6
	r19.u64 = ctx.r6.u64;
	// addi r6,r1,100
	ctx.r6.s64 = ctx.r1.s64 + 100;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// addi r4,r1,92
	ctx.r4.s64 = ctx.r1.s64 + 92;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r25,r10,r11
	r25.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// mr r28,r8
	r28.u64 = ctx.r8.u64;
	// rlwinm r24,r9,1,31,31
	r24.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x1;
	// rlwinm r29,r30,1,0,30
	r29.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// bl 0x8218a118
	sub_8218A118(ctx, base);
	// lwz r9,92(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// lwz r8,96(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// subf r11,r29,r8
	r11.s64 = ctx.r8.s64 - r29.s64;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// cntlzw r7,r11
	ctx.r7.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// subf r11,r10,r30
	r11.s64 = r30.s64 - ctx.r10.s64;
	// subf r10,r7,r30
	ctx.r10.s64 = r30.s64 - ctx.r7.s64;
	// addi r7,r11,32
	ctx.r7.s64 = r11.s64 + 32;
	// addi r6,r10,32
	ctx.r6.s64 = ctx.r10.s64 + 32;
	// bne cr6,0x8225e460
	if (!cr6.getEQ()) goto loc_8225E460;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// slw r11,r10,r7
	r11.u64 = ctx.r7.u8 & 0x20 ? 0 : (ctx.r10.u32 << (ctx.r7.u8 & 0x3F));
	// slw r7,r10,r6
	ctx.r7.u64 = ctx.r6.u8 & 0x20 ? 0 : (ctx.r10.u32 << (ctx.r6.u8 & 0x3F));
	// cmplwi cr6,r11,16
	cr6.compare<uint32_t>(r11.u32, 16, xer);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// stw r7,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r7.u32);
	// ble cr6,0x8225e410
	if (!cr6.getGT()) goto loc_8225E410;
	// cmplwi cr6,r7,16
	cr6.compare<uint32_t>(ctx.r7.u32, 16, xer);
	// bgt cr6,0x8225e424
	if (cr6.getGT()) goto loc_8225E424;
loc_8225E410:
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// rlwinm. r11,r11,0,20,20
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225e424
	if (cr0.getEQ()) goto loc_8225E424;
	// mr r23,r10
	r23.u64 = ctx.r10.u64;
	// b 0x8225e434
	goto loc_8225E434;
loc_8225E424:
	// li r23,0
	r23.s64 = 0;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// stw r8,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r8.u32);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
loc_8225E434:
	// mr r9,r24
	ctx.r9.u64 = r24.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8218a368
	sub_8218A368(ctx, base);
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// rlwinm r11,r11,15,18,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 15) & 0x3FE0;
	// b 0x8225e558
	goto loc_8225E558;
loc_8225E460:
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// subf r11,r29,r8
	r11.s64 = ctx.r8.s64 - r29.s64;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// cntlzw r9,r11
	ctx.r9.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// subf r11,r10,r30
	r11.s64 = r30.s64 - ctx.r10.s64;
	// subf r10,r9,r30
	ctx.r10.s64 = r30.s64 - ctx.r9.s64;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// addi r10,r10,32
	ctx.r10.s64 = ctx.r10.s64 + 32;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x8225e494
	if (cr6.getLT()) goto loc_8225E494;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_8225E494:
	// addic. r11,r11,-4
	xer.ca = r11.u32 > 3;
	r11.s64 = r11.s64 + -4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bgt 0x8225e4a0
	if (cr0.getGT()) goto loc_8225E4A0;
	// li r11,0
	r11.s64 = 0;
loc_8225E4A0:
	// li r10,1
	ctx.r10.s64 = 1;
	// cmplw cr6,r28,r11
	cr6.compare<uint32_t>(r28.u32, r11.u32, xer);
	// blt cr6,0x8225e4e4
	if (cr6.getLT()) goto loc_8225E4E4;
	// lwz r9,48(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// rlwinm. r9,r9,0,20,20
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x800;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x8225e4e4
	if (cr0.getEQ()) goto loc_8225E4E4;
	// mr r23,r10
	r23.u64 = ctx.r10.u64;
	// mr r28,r11
	r28.u64 = r11.u64;
loc_8225E4C0:
	// cmplwi cr6,r26,2
	cr6.compare<uint32_t>(r26.u32, 2, xer);
	// bne cr6,0x8225e4ec
	if (!cr6.getEQ()) goto loc_8225E4EC;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// subf r11,r11,r30
	r11.s64 = r30.s64 - r11.s64;
	// addi r9,r11,32
	ctx.r9.s64 = r11.s64 + 32;
	// b 0x8225e4f0
	goto loc_8225E4F0;
loc_8225E4E4:
	// li r23,0
	r23.s64 = 0;
	// b 0x8225e4c0
	goto loc_8225E4C0;
loc_8225E4EC:
	// li r9,0
	ctx.r9.s64 = 0;
loc_8225E4F0:
	// subf. r11,r28,r7
	r11.s64 = ctx.r7.s64 - r28.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r30,0
	r30.s64 = 0;
	// blt 0x8225e500
	if (cr0.getLT()) goto loc_8225E500;
	// mr r30,r11
	r30.u64 = r11.u64;
loc_8225E500:
	// subf. r11,r28,r6
	r11.s64 = ctx.r6.s64 - r28.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r31,0
	r31.s64 = 0;
	// blt 0x8225e510
	if (cr0.getLT()) goto loc_8225E510;
	// mr r31,r11
	r31.u64 = r11.u64;
loc_8225E510:
	// subf. r11,r28,r9
	r11.s64 = ctx.r9.s64 - r28.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bge 0x8225e51c
	if (!cr0.getLT()) goto loc_8225E51C;
	// li r11,0
	r11.s64 = 0;
loc_8225E51C:
	// slw r30,r10,r30
	r30.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// slw r31,r10,r31
	r31.u64 = r31.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r31.u8 & 0x3F));
	// slw r11,r10,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r11.u8 & 0x3F));
	// mr r9,r24
	ctx.r9.u64 = r24.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// stw r30,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r30.u32);
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8218a368
	sub_8218A368(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_8225E558:
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// beq cr6,0x8225e564
	if (cr6.getEQ()) goto loc_8225E564;
	// stw r11,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r11.u32);
loc_8225E564:
	// cmplwi cr6,r21,0
	cr6.compare<uint32_t>(r21.u32, 0, xer);
	// beq cr6,0x8225e574
	if (cr6.getEQ()) goto loc_8225E574;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,0(r21)
	PPC_STORE_U32(r21.u32 + 0, r11.u32);
loc_8225E574:
	// cmplwi cr6,r20,0
	cr6.compare<uint32_t>(r20.u32, 0, xer);
	// beq cr6,0x8225e580
	if (cr6.getEQ()) goto loc_8225E580;
	// stw r24,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r24.u32);
loc_8225E580:
	// cmplwi cr6,r19,0
	cr6.compare<uint32_t>(r19.u32, 0, xer);
	// beq cr6,0x8225e58c
	if (cr6.getEQ()) goto loc_8225E58C;
	// stw r23,0(r19)
	PPC_STORE_U32(r19.u32 + 0, r23.u32);
loc_8225E58C:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x823ed164
	return;
}

__attribute__((alias("__imp__sub_8225E598"))) PPC_WEAK_FUNC(sub_8225E598);
PPC_FUNC_IMPL(__imp__sub_8225E598) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-400(r1)
	ea = -400 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r28,0
	r28.s64 = 0;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r27,r30
	r27.u64 = r30.u64;
	// mr r29,r26
	r29.u64 = r26.u64;
	// stw r28,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r28.u32);
	// bl 0x8219b0d0
	sub_8219B0D0(ctx, base);
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x8225e798
	if (cr6.getEQ()) goto loc_8225E798;
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// beq cr6,0x8225e6f8
	if (cr6.getEQ()) goto loc_8225E6F8;
	// cmpwi cr6,r3,16
	cr6.compare<int32_t>(ctx.r3.s32, 16, xer);
	// beq cr6,0x8225e6c4
	if (cr6.getEQ()) goto loc_8225E6C4;
	// cmpwi cr6,r3,17
	cr6.compare<int32_t>(ctx.r3.s32, 17, xer);
	// beq cr6,0x8225e69c
	if (cr6.getEQ()) goto loc_8225E69C;
	// cmpwi cr6,r3,18
	cr6.compare<int32_t>(ctx.r3.s32, 18, xer);
	// beq cr6,0x8225e65c
	if (cr6.getEQ()) goto loc_8225E65C;
	// cmpwi cr6,r3,19
	cr6.compare<int32_t>(ctx.r3.s32, 19, xer);
	// beq cr6,0x8225e638
	if (cr6.getEQ()) goto loc_8225E638;
	// cmpwi cr6,r3,20
	cr6.compare<int32_t>(ctx.r3.s32, 20, xer);
	// bne cr6,0x8225e9a4
	if (!cr6.getEQ()) goto loc_8225E9A4;
	// addi r5,r1,304
	ctx.r5.s64 = ctx.r1.s64 + 304;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8218bac0
	sub_8218BAC0(ctx, base);
	// lwz r10,328(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 328);
	// lwz r9,304(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 304);
	// li r11,1
	r11.s64 = 1;
	// lwz r8,320(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 320);
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// stw r9,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r9.u32);
	// stw r8,56(r31)
	PPC_STORE_U32(r31.u32 + 56, ctx.r8.u32);
	// b 0x8225e7d0
	goto loc_8225E7D0;
loc_8225E638:
	// addi r5,r1,272
	ctx.r5.s64 = ctx.r1.s64 + 272;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8218bac0
	sub_8218BAC0(ctx, base);
	// lwz r11,296(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 296);
	// lwz r10,300(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 300);
	// lwz r8,272(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 272);
	// lwz r7,288(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 288);
	// b 0x8225e7b8
	goto loc_8225E7B8;
loc_8225E65C:
	// addi r5,r1,176
	ctx.r5.s64 = ctx.r1.s64 + 176;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8218bac0
	sub_8218BAC0(ctx, base);
	// lwz r11,200(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// lwz r10,204(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// lwz r9,176(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lwz r8,192(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// lwz r11,36(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 36);
	// stw r9,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r9.u32);
	// rlwinm r11,r11,6,26,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0x3F;
	// stw r8,56(r31)
	PPC_STORE_U32(r31.u32 + 56, ctx.r8.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// b 0x8225e7d0
	goto loc_8225E7D0;
loc_8225E69C:
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8218bad0
	sub_8218BAD0(ctx, base);
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r9,136(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r8,112(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r28,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r28.u32);
	// b 0x8225e7c0
	goto loc_8225E7C0;
loc_8225E6C4:
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8218bdb8
	sub_8218BDB8(ctx, base);
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// lwz r10,164(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r9,168(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// lwz r8,144(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// stw r28,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r28.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// stw r9,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r9.u32);
	// stw r8,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r8.u32);
	// b 0x8225e738
	goto loc_8225E738;
loc_8225E6F8:
	// addi r4,r1,208
	ctx.r4.s64 = ctx.r1.s64 + 208;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8218bd20
	sub_8218BD20(ctx, base);
	// lwz r10,224(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	// lwz r9,232(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// li r11,1
	r11.s64 = 1;
	// lwz r8,236(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// lwz r7,208(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// stw r10,56(r31)
	PPC_STORE_U32(r31.u32 + 56, ctx.r10.u32);
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// stw r7,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r7.u32);
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm. r10,r10,0,1,1
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225e748
	if (cr0.getEQ()) goto loc_8225E748;
loc_8225E738:
	// lwz r11,28(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// lwz r27,24(r30)
	r27.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// rlwinm r29,r11,4,28,31
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xF;
	// b 0x8225e7d0
	goto loc_8225E7D0;
loc_8225E748:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// clrlwi r7,r7,26
	ctx.r7.u64 = ctx.r7.u32 & 0x3F;
	// addi r10,r10,11912
	ctx.r10.s64 = ctx.r10.s64 + 11912;
	// lbzx r10,r7,r10
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r7.u32 + ctx.r10.u32);
	// stw r9,32(r31)
	PPC_STORE_U32(r31.u32 + 32, ctx.r9.u32);
	// stw r8,36(r31)
	PPC_STORE_U32(r31.u32 + 36, ctx.r8.u32);
	// stw r11,40(r31)
	PPC_STORE_U32(r31.u32 + 40, r11.u32);
	// stw r10,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r10.u32);
	// rotlwi r10,r10,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// rlwinm r10,r10,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 29) & 0x1FFFFFFF;
	// stw r10,44(r31)
	PPC_STORE_U32(r31.u32 + 44, ctx.r10.u32);
	// lwz r9,24(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// clrlwi r9,r9,18
	ctx.r9.u64 = ctx.r9.u32 & 0x3FFF;
	// mullw r10,r9,r10
	ctx.r10.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// lwz r10,44(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 44);
	// stw r28,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r28.u32);
	// stw r11,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r11.u32);
	// stw r10,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r10.u32);
	// b 0x8225e9a4
	goto loc_8225E9A4;
loc_8225E798:
	// addi r5,r1,240
	ctx.r5.s64 = ctx.r1.s64 + 240;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8218bac0
	sub_8218BAC0(ctx, base);
	// lwz r11,264(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 264);
	// lwz r10,268(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 268);
	// lwz r8,240(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// lwz r7,256(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 256);
loc_8225E7B8:
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r7,56(r31)
	PPC_STORE_U32(r31.u32 + 56, ctx.r7.u32);
loc_8225E7C0:
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// stw r9,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r9.u32);
	// stw r8,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r8.u32);
loc_8225E7D0:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r11,r11,11912
	r11.s64 = r11.s64 + 11912;
	// clrlwi r3,r10,26
	ctx.r3.u64 = ctx.r10.u32 & 0x3F;
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// lbzx r11,r3,r11
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + r11.u32);
	// stw r28,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r28.u32);
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// bl 0x8218a248
	sub_8218A248(ctx, base);
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// bl 0x8225e340
	sub_8225E340(ctx, base);
	// lwz r30,80(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8225e890
	if (!cr6.getEQ()) goto loc_8225E890;
	// lwz r11,48(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 48);
	// rlwinm r10,r11,0,21,22
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x600;
	// cmplwi cr6,r10,512
	cr6.compare<uint32_t>(ctx.r10.u32, 512, xer);
	// bne cr6,0x8225e890
	if (!cr6.getEQ()) goto loc_8225E890;
	// lwz r10,28(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// rlwinm. r10,r10,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8225e890
	if (!cr0.getEQ()) goto loc_8225E890;
	// lwz r10,32(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 32);
	// rlwinm. r10,r10,0,21,21
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8225e890
	if (!cr0.getEQ()) goto loc_8225E890;
	// rlwinm. r10,r11,0,0,19
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFF000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8225e890
	if (!cr0.getEQ()) goto loc_8225E890;
	// rlwinm. r11,r11,0,20,20
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8225e890
	if (!cr0.getEQ()) goto loc_8225E890;
	// lwz r11,40(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 40);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8225e890
	if (!cr0.getEQ()) goto loc_8225E890;
	// addi r6,r1,84
	ctx.r6.s64 = ctx.r1.s64 + 84;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8218a118
	sub_8218A118(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r10,r30,-1
	ctx.r10.s64 = r30.s64 + -1;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// andc r10,r11,r10
	ctx.r10.u64 = r11.u64 & ~ctx.r10.u64;
	// b 0x8225e894
	goto loc_8225E894;
loc_8225E890:
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
loc_8225E894:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lwz r9,92(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r29,96(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mullw r11,r11,r9
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r9.s32);
	// rlwinm r11,r11,29,3,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// mullw r10,r11,r10
	ctx.r10.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// stw r10,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r10.u32);
	// bne cr6,0x8225e8d4
	if (!cr6.getEQ()) goto loc_8225E8D4;
	// cmplwi cr6,r26,1
	cr6.compare<uint32_t>(r26.u32, 1, xer);
	// bgt cr6,0x8225e8d4
	if (cr6.getGT()) goto loc_8225E8D4;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8219b0d0
	sub_8219B0D0(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x8225e8f4
	if (cr6.getEQ()) goto loc_8225E8F4;
loc_8225E8D4:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8219b0d0
	sub_8219B0D0(ctx, base);
	// cmpwi cr6,r3,17
	cr6.compare<int32_t>(ctx.r3.s32, 17, xer);
	// beq cr6,0x8225e8f4
	if (cr6.getEQ()) goto loc_8225E8F4;
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// addi r11,r11,4095
	r11.s64 = r11.s64 + 4095;
	// rlwinm r11,r11,0,0,19
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFF000;
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
loc_8225E8F4:
	// lwz r11,40(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 40);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// rlwinm r11,r11,13,0,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 13) & 0xFFFFE000;
	// srawi r11,r11,26
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFFFF) != 0);
	r11.s64 = r11.s32 >> 26;
	// stw r11,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r11.u32);
	// beq cr6,0x8225e918
	if (cr6.getEQ()) goto loc_8225E918;
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// stw r11,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r11.u32);
loc_8225E918:
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8225e930
	if (cr6.getEQ()) goto loc_8225E930;
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// ori r11,r11,2
	r11.u64 = r11.u64 | 2;
	// stw r11,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r11.u32);
loc_8225E930:
	// lwz r11,40(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 40);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225e948
	if (cr0.getEQ()) goto loc_8225E948;
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// ori r11,r11,8
	r11.u64 = r11.u64 | 8;
	// stw r11,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r11.u32);
loc_8225E948:
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// twllei r30,0
	// lwz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// twllei r11,0
	// lwz r8,28(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// add r10,r10,r30
	ctx.r10.u64 = ctx.r10.u64 + r30.u64;
	// lwz r7,20(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// mullw r8,r8,r11
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(r11.s32);
	// lwz r6,12(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// stw r6,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r6.u32);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// mullw r8,r8,r30
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(r30.s32);
	// divwu r11,r9,r11
	r11.u32 = ctx.r9.u32 / r11.u32;
	// mullw r7,r7,r30
	ctx.r7.s64 = int64_t(ctx.r7.s32) * int64_t(r30.s32);
	// stw r11,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r11.u32);
	// stw r7,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r7.u32);
	// divwu r10,r10,r30
	ctx.r10.u32 = ctx.r10.u32 / r30.u32;
	// rlwinm r9,r8,29,3,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 29) & 0x1FFFFFFF;
	// stw r10,36(r31)
	PPC_STORE_U32(r31.u32 + 36, ctx.r10.u32);
	// stw r9,44(r31)
	PPC_STORE_U32(r31.u32 + 44, ctx.r9.u32);
loc_8225E9A4:
	// addi r1,r1,400
	ctx.r1.s64 = ctx.r1.s64 + 400;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8225E9B0"))) PPC_WEAK_FUNC(sub_8225E9B0);
PPC_FUNC_IMPL(__imp__sub_8225E9B0) {
	PPC_FUNC_PROLOGUE();
	// b 0x8225e598
	sub_8225E598(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8225E9B8"))) PPC_WEAK_FUNC(sub_8225E9B8);
PPC_FUNC_IMPL(__imp__sub_8225E9B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r11,40(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 40);
	// rlwinm r29,r11,1,31,31
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// rlwinm r28,r29,1,0,30
	r28.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// bl 0x8218a118
	sub_8218A118(ctx, base);
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// subf r10,r28,r9
	ctx.r10.s64 = ctx.r9.s64 - r28.s64;
	// subf r11,r28,r8
	r11.s64 = ctx.r8.s64 - r28.s64;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// cntlzw r7,r11
	ctx.r7.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// subf r11,r10,r29
	r11.s64 = r29.s64 - ctx.r10.s64;
	// subf r10,r7,r29
	ctx.r10.s64 = r29.s64 - ctx.r7.s64;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// addi r10,r10,32
	ctx.r10.s64 = ctx.r10.s64 + 32;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x8225ea24
	if (cr6.getLT()) goto loc_8225EA24;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_8225EA24:
	// addic. r11,r11,-4
	xer.ca = r11.u32 > 3;
	r11.s64 = r11.s64 + -4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bgt 0x8225ea30
	if (cr0.getGT()) goto loc_8225EA30;
	// li r11,0
	r11.s64 = 0;
loc_8225EA30:
	// subf r9,r28,r9
	ctx.r9.s64 = ctx.r9.s64 - r28.s64;
	// stw r11,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r11.u32);
	// subf r10,r28,r8
	ctx.r10.s64 = ctx.r8.s64 - r28.s64;
	// lwz r8,48(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 48);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cntlzw r9,r9
	ctx.r9.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// cntlzw r7,r10
	ctx.r7.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// subf r10,r9,r29
	ctx.r10.s64 = r29.s64 - ctx.r9.s64;
	// rlwinm r6,r8,0,21,22
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x600;
	// subf r9,r7,r29
	ctx.r9.s64 = r29.s64 - ctx.r7.s64;
	// addi r8,r10,32
	ctx.r8.s64 = ctx.r10.s64 + 32;
	// addi r7,r9,32
	ctx.r7.s64 = ctx.r9.s64 + 32;
	// cmplwi cr6,r6,1024
	cr6.compare<uint32_t>(ctx.r6.u32, 1024, xer);
	// bne cr6,0x8225ea88
	if (!cr6.getEQ()) goto loc_8225EA88;
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// subf r10,r28,r10
	ctx.r10.s64 = ctx.r10.s64 - r28.s64;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// subf r10,r10,r29
	ctx.r10.s64 = r29.s64 - ctx.r10.s64;
	// addi r10,r10,32
	ctx.r10.s64 = ctx.r10.s64 + 32;
	// b 0x8225ea8c
	goto loc_8225EA8C;
loc_8225EA88:
	// li r10,0
	ctx.r10.s64 = 0;
loc_8225EA8C:
	// subf. r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// subf r8,r11,r8
	ctx.r8.s64 = ctx.r8.s64 - r11.s64;
	// li r10,1
	ctx.r10.s64 = 1;
	// subf r11,r11,r7
	r11.s64 = ctx.r7.s64 - r11.s64;
	// addi r29,r31,4
	r29.s64 = r31.s64 + 4;
	// addi r28,r31,8
	r28.s64 = r31.s64 + 8;
	// slw r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x20 ? 0 : (ctx.r10.u32 << (ctx.r8.u8 & 0x3F));
	// slw r11,r10,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r11.u8 & 0x3F));
	// stw r8,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r8.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bgt 0x8225eabc
	if (cr0.getGT()) goto loc_8225EABC;
	// li r9,0
	ctx.r9.s64 = 0;
loc_8225EABC:
	// slw r10,r10,r9
	ctx.r10.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r10.u32 << (ctx.r9.u8 & 0x3F));
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r27,r31,12
	r27.s64 = r31.s64 + 12;
	// addi r11,r11,-19608
	r11.s64 = r11.s64 + -19608;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stw r10,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r10.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,32(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// rlwinm r10,r10,1,25,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x7E;
	// lbzx r11,r10,r11
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// lwz r11,28(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// lwz r10,48(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 48);
	// lwz r7,32(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 32);
	// rlwinm r9,r11,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// rlwinm r8,r10,23,30,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 23) & 0x3;
	// lwz r6,28(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// clrlwi r7,r7,26
	ctx.r7.u64 = ctx.r7.u32 & 0x3F;
	// bl 0x8218a368
	sub_8218A368(ctx, base);
	// lwz r25,0(r29)
	r25.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwz r26,28(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lwz r28,0(r28)
	r28.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// mullw r11,r25,r26
	r11.s64 = int64_t(r25.s32) * int64_t(r26.s32);
	// lwz r27,0(r27)
	r27.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// rlwinm r29,r11,29,3,31
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// stw r29,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r29.u32);
	// lwz r11,48(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 48);
	// rlwinm r11,r11,0,21,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x600;
	// cmplwi cr6,r11,1024
	cr6.compare<uint32_t>(r11.u32, 1024, xer);
	// mullw r11,r28,r29
	r11.s64 = int64_t(r28.s32) * int64_t(r29.s32);
	// beq cr6,0x8225eb50
	if (cr6.getEQ()) goto loc_8225EB50;
	// addi r11,r11,4095
	r11.s64 = r11.s64 + 4095;
	// rlwinm r11,r11,0,0,19
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFF000;
	// mullw r10,r11,r27
	ctx.r10.s64 = int64_t(r11.s32) * int64_t(r27.s32);
	// b 0x8225eb5c
	goto loc_8225EB5C;
loc_8225EB50:
	// mullw r10,r11,r27
	ctx.r10.s64 = int64_t(r11.s32) * int64_t(r27.s32);
	// addi r10,r10,4095
	ctx.r10.s64 = ctx.r10.s64 + 4095;
	// rlwinm r10,r10,0,0,19
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFF000;
loc_8225EB5C:
	// stw r10,60(r31)
	PPC_STORE_U32(r31.u32 + 60, ctx.r10.u32);
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
	// addi r4,r1,92
	ctx.r4.s64 = ctx.r1.s64 + 92;
	// lwz r11,32(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 32);
	// clrlwi r3,r11,26
	ctx.r3.u64 = r11.u32 & 0x3F;
	// bl 0x8218a248
	sub_8218A248(ctx, base);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// add r9,r28,r11
	ctx.r9.u64 = r28.u64 + r11.u64;
	// stw r27,40(r31)
	PPC_STORE_U32(r31.u32 + 40, r27.u32);
	// mullw r6,r26,r10
	ctx.r6.s64 = int64_t(r26.s32) * int64_t(ctx.r10.s32);
	// lwz r7,56(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// mullw r6,r6,r11
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(r11.s32);
	// mullw r5,r29,r11
	ctx.r5.s64 = int64_t(r29.s32) * int64_t(r11.s32);
	// stw r5,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r5.u32);
	// twllei r11,0
	// divwu r11,r9,r11
	r11.u32 = ctx.r9.u32 / r11.u32;
	// add r8,r25,r10
	ctx.r8.u64 = r25.u64 + ctx.r10.u64;
	// twllei r10,0
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// rlwinm r9,r6,29,3,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 29) & 0x1FFFFFFF;
	// divwu r10,r8,r10
	ctx.r10.u32 = ctx.r8.u32 / ctx.r10.u32;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r9,44(r31)
	PPC_STORE_U32(r31.u32 + 44, ctx.r9.u32);
	// stw r10,32(r31)
	PPC_STORE_U32(r31.u32 + 32, ctx.r10.u32);
	// stw r11,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r11.u32);
	// lwz r11,44(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 44);
	// rlwinm r11,r11,26,28,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 26) & 0xF;
	// cmplw cr6,r7,r11
	cr6.compare<uint32_t>(ctx.r7.u32, r11.u32, xer);
	// bgt cr6,0x8225ebe8
	if (cr6.getGT()) goto loc_8225EBE8;
	// li r11,2
	r11.s64 = 2;
	// stw r11,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r11.u32);
loc_8225EBE8:
	// lwz r11,40(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 40);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225ec00
	if (cr0.getEQ()) goto loc_8225EC00;
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// ori r11,r11,8
	r11.u64 = r11.u64 | 8;
	// stw r11,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r11.u32);
loc_8225EC00:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8219b0d0
	sub_8219B0D0(ctx, base);
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// lwz r11,40(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 40);
	// lwz r10,28(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// rlwinm r7,r11,25,29,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 25) & 0x7;
	// lwz r9,32(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 32);
	// rlwinm r8,r11,25,26,28
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 25) & 0x38;
	// rlwinm r6,r11,28,29,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0x7;
	// or r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 | ctx.r7.u64;
	// rlwinm r7,r11,31,29,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7;
	// rlwinm r8,r8,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r5,r10,26,30,31
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 26) & 0x3;
	// or r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 | ctx.r6.u64;
	// rlwinm r6,r10,24,30,31
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0x3;
	// rlwinm r8,r8,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// or r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 | ctx.r7.u64;
	// rlwinm r7,r10,28,30,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 28) & 0x3;
	// rlwimi r11,r8,1,0,30
	r11.u64 = (__builtin_rotateleft32(ctx.r8.u32, 1) & 0xFFFFFFFE) | (r11.u64 & 0xFFFFFFFF00000001);
	// rlwinm r8,r10,30,30,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r10,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// or r11,r11,r6
	r11.u64 = r11.u64 | ctx.r6.u64;
	// rlwinm r6,r9,26,30,31
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 26) & 0x3;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// or r11,r11,r5
	r11.u64 = r11.u64 | ctx.r5.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// or r11,r11,r7
	r11.u64 = r11.u64 | ctx.r7.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// or r11,r11,r8
	r11.u64 = r11.u64 | ctx.r8.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// or r11,r11,r6
	r11.u64 = r11.u64 | ctx.r6.u64;
	// rlwimi r9,r11,6,0,25
	ctx.r9.u64 = (__builtin_rotateleft32(r11.u32, 6) & 0xFFFFFFC0) | (ctx.r9.u64 & 0xFFFFFFFF0000003F);
	// stw r9,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r9.u32);
	// lwz r11,40(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 40);
	// rlwinm r11,r11,13,0,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 13) & 0xFFFFE000;
	// srawi r11,r11,26
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFFFF) != 0);
	r11.s64 = r11.s32 >> 26;
	// stw r11,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8225ECA8"))) PPC_WEAK_FUNC(sub_8225ECA8);
PPC_FUNC_IMPL(__imp__sub_8225ECA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cntlzw r11,r5
	r11.u64 = ctx.r5.u32 == 0 ? 32 : __builtin_clz(ctx.r5.u32);
	// rlwinm r11,r11,27,5,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x7FFFFFF;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r9,r10,r3
	ctx.r9.s64 = ctx.r3.s64 - ctx.r10.s64;
	// subf r10,r10,r4
	ctx.r10.s64 = ctx.r4.s64 - ctx.r10.s64;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cntlzw r9,r9
	ctx.r9.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// cntlzw r8,r10
	ctx.r8.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// subf r10,r9,r11
	ctx.r10.s64 = r11.s64 - ctx.r9.s64;
	// subf r9,r8,r11
	ctx.r9.s64 = r11.s64 - ctx.r8.s64;
	// addi r11,r10,32
	r11.s64 = ctx.r10.s64 + 32;
	// addi r10,r9,32
	ctx.r10.s64 = ctx.r9.s64 + 32;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x8225ecec
	if (cr6.getLT()) goto loc_8225ECEC;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_8225ECEC:
	// addic. r11,r11,-4
	xer.ca = r11.u32 > 3;
	r11.s64 = r11.s64 + -4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bgt 0x8225ecf8
	if (cr0.getGT()) goto loc_8225ECF8;
	// li r11,0
	r11.s64 = 0;
loc_8225ECF8:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225ED00"))) PPC_WEAK_FUNC(sub_8225ED00);
PPC_FUNC_IMPL(__imp__sub_8225ED00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cntlzw r11,r9
	r11.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// mr r24,r10
	r24.u64 = ctx.r10.u64;
	// rlwinm r11,r11,27,5,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x7FFFFFF;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// mr r23,r6
	r23.u64 = ctx.r6.u64;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// subf r7,r10,r3
	ctx.r7.s64 = ctx.r3.s64 - ctx.r10.s64;
	// subf r9,r10,r4
	ctx.r9.s64 = ctx.r4.s64 - ctx.r10.s64;
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// cntlzw r7,r7
	ctx.r7.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// cntlzw r6,r9
	ctx.r6.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// subf r9,r7,r11
	ctx.r9.s64 = r11.s64 - ctx.r7.s64;
	// subf r7,r6,r11
	ctx.r7.s64 = r11.s64 - ctx.r6.s64;
	// addi r9,r9,32
	ctx.r9.s64 = ctx.r9.s64 + 32;
	// addi r7,r7,32
	ctx.r7.s64 = ctx.r7.s64 + 32;
	// cmpw cr6,r9,r7
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r7.s32, xer);
	// blt cr6,0x8225ed60
	if (cr6.getLT()) goto loc_8225ED60;
	// mr r9,r7
	ctx.r9.u64 = ctx.r7.u64;
loc_8225ED60:
	// addic. r9,r9,-4
	xer.ca = ctx.r9.u32 > 3;
	ctx.r9.s64 = ctx.r9.s64 + -4;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r25,r9
	r25.u64 = ctx.r9.u64;
	// bgt 0x8225ed74
	if (cr0.getGT()) goto loc_8225ED74;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
loc_8225ED74:
	// cmplw cr6,r23,r25
	cr6.compare<uint32_t>(r23.u32, r25.u32, xer);
	// bge cr6,0x8225ed90
	if (!cr6.getLT()) goto loc_8225ED90;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r6,0(r24)
	PPC_STORE_U32(r24.u32 + 0, ctx.r6.u32);
	// stw r6,4(r24)
	PPC_STORE_U32(r24.u32 + 4, ctx.r6.u32);
	// stw r6,8(r24)
	PPC_STORE_U32(r24.u32 + 8, ctx.r6.u32);
	// b 0x8225eea8
	goto loc_8225EEA8;
loc_8225ED90:
	// subf r7,r10,r3
	ctx.r7.s64 = ctx.r3.s64 - ctx.r10.s64;
	// subf r9,r10,r4
	ctx.r9.s64 = ctx.r4.s64 - ctx.r10.s64;
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// cntlzw r7,r7
	ctx.r7.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// cntlzw r5,r9
	ctx.r5.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// subf r9,r7,r11
	ctx.r9.s64 = r11.s64 - ctx.r7.s64;
	// subf r7,r5,r11
	ctx.r7.s64 = r11.s64 - ctx.r5.s64;
	// cmplwi cr6,r27,1
	cr6.compare<uint32_t>(r27.u32, 1, xer);
	// addi r9,r9,32
	ctx.r9.s64 = ctx.r9.s64 + 32;
	// addi r7,r7,32
	ctx.r7.s64 = ctx.r7.s64 + 32;
	// ble cr6,0x8225edd8
	if (!cr6.getGT()) goto loc_8225EDD8;
	// subf r10,r10,r27
	ctx.r10.s64 = r27.s64 - ctx.r10.s64;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// b 0x8225eddc
	goto loc_8225EDDC;
loc_8225EDD8:
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
loc_8225EDDC:
	// li r10,1
	ctx.r10.s64 = 1;
	// subf r9,r25,r9
	ctx.r9.s64 = ctx.r9.s64 - r25.s64;
	// subf r7,r25,r7
	ctx.r7.s64 = ctx.r7.s64 - r25.s64;
	// subf. r11,r25,r11
	r11.s64 = r11.s64 - r25.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// slw r29,r10,r9
	r29.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r10.u32 << (ctx.r9.u8 & 0x3F));
	// slw r28,r10,r7
	r28.u64 = ctx.r7.u8 & 0x20 ? 0 : (ctx.r10.u32 << (ctx.r7.u8 & 0x3F));
	// ble 0x8225edfc
	if (!cr0.getGT()) goto loc_8225EDFC;
	// mr r6,r11
	ctx.r6.u64 = r11.u64;
loc_8225EDFC:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r29,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r29.u32);
	// rlwinm r3,r26,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// addi r11,r11,-19608
	r11.s64 = r11.s64 + -19608;
	// slw r30,r10,r6
	r30.u64 = ctx.r6.u8 & 0x20 ? 0 : (ctx.r10.u32 << (ctx.r6.u8 & 0x3F));
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// stw r30,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r30.u32);
	// lbzx r31,r3,r11
	r31.u64 = PPC_LOAD_U8(ctx.r3.u32 + r11.u32);
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// bl 0x8218a368
	sub_8218A368(ctx, base);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r27,1
	cr6.compare<uint32_t>(r27.u32, 1, xer);
	// mullw r11,r11,r31
	r11.s64 = int64_t(r11.s32) * int64_t(r31.s32);
	// rlwinm r7,r11,29,3,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// mullw r8,r7,r11
	ctx.r8.s64 = int64_t(ctx.r7.s32) * int64_t(r11.s32);
	// bgt cr6,0x8225ee64
	if (cr6.getGT()) goto loc_8225EE64;
	// addi r11,r8,4095
	r11.s64 = ctx.r8.s64 + 4095;
	// rlwinm r8,r11,0,0,19
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFF000;
loc_8225EE64:
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// addi r11,r1,116
	r11.s64 = ctx.r1.s64 + 116;
	// addi r10,r1,108
	ctx.r10.s64 = ctx.r1.s64 + 108;
	// mr r9,r26
	ctx.r9.u64 = r26.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r5,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r5.u32);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// subf r3,r25,r23
	ctx.r3.s64 = r23.s64 - r25.s64;
	// bl 0x8218a7f8
	sub_8218A7F8(ctx, base);
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r9,116(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// stw r11,0(r24)
	PPC_STORE_U32(r24.u32 + 0, r11.u32);
	// stw r10,4(r24)
	PPC_STORE_U32(r24.u32 + 4, ctx.r10.u32);
	// stw r9,8(r24)
	PPC_STORE_U32(r24.u32 + 8, ctx.r9.u32);
loc_8225EEA8:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_8225EEB0"))) PPC_WEAK_FUNC(sub_8225EEB0);
PPC_FUNC_IMPL(__imp__sub_8225EEB0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// bl 0x8225ed00
	sub_8225ED00(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225EED8"))) PPC_WEAK_FUNC(sub_8225EED8);
PPC_FUNC_IMPL(__imp__sub_8225EED8) {
	PPC_FUNC_PROLOGUE();
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// lis r4,25735
	ctx.r4.s64 = 1686568960;
	// b 0x8209d000
	sub_8209D000(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8225EEE8"))) PPC_WEAK_FUNC(sub_8225EEE8);
PPC_FUNC_IMPL(__imp__sub_8225EEE8) {
	PPC_FUNC_PROLOGUE();
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// b 0x8209d060
	sub_8209D060(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8225EEF8"))) PPC_WEAK_FUNC(sub_8225EEF8);
PPC_FUNC_IMPL(__imp__sub_8225EEF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// rlwinm. r10,r11,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225ef2c
	if (cr0.getEQ()) goto loc_8225EF2C;
	// not r10,r11
	ctx.r10.u64 = ~r11.u64;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,-23332
	r11.s64 = r11.s64 + -23332;
	// rlwinm r10,r10,2,28,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// b 0x8225ef3c
	goto loc_8225EF3C;
loc_8225EF2C:
	// lis r10,-32018
	ctx.r10.s64 = -2098331648;
	// rlwinm r11,r11,2,28,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xC;
	// addi r10,r10,-23348
	ctx.r10.s64 = ctx.r10.s64 + -23348;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
loc_8225EF3C:
	// rlwinm r3,r11,9,0,22
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 9) & 0xFFFFFE00;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225EF48"))) PPC_WEAK_FUNC(sub_8225EF48);
PPC_FUNC_IMPL(__imp__sub_8225EF48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,1536
	r11.s64 = 100663296;
	// li r31,0
	r31.s64 = 0;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// bgt cr6,0x8225efe4
	if (cr6.getGT()) goto loc_8225EFE4;
	// beq cr6,0x8225efdc
	if (cr6.getEQ()) goto loc_8225EFDC;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8225f060
	if (cr6.getEQ()) goto loc_8225F060;
	// lis r11,256
	r11.s64 = 16777216;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8225efd0
	if (cr6.getEQ()) goto loc_8225EFD0;
	// lis r11,512
	r11.s64 = 33554432;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8225efc8
	if (cr6.getEQ()) goto loc_8225EFC8;
	// lis r11,768
	r11.s64 = 50331648;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8225efc0
	if (cr6.getEQ()) goto loc_8225EFC0;
	// lis r11,1024
	r11.s64 = 67108864;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8225efb8
	if (cr6.getEQ()) goto loc_8225EFB8;
	// lis r11,1280
	r11.s64 = 83886080;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// bne cr6,0x8225f02c
	if (!cr6.getEQ()) goto loc_8225F02C;
	// lis r31,6
	r31.s64 = 393216;
	// b 0x8225efd4
	goto loc_8225EFD4;
loc_8225EFB8:
	// lis r31,6
	r31.s64 = 393216;
	// b 0x8225f060
	goto loc_8225F060;
loc_8225EFC0:
	// lis r31,2
	r31.s64 = 131072;
	// b 0x8225efd4
	goto loc_8225EFD4;
loc_8225EFC8:
	// lis r31,2
	r31.s64 = 131072;
	// b 0x8225f060
	goto loc_8225F060;
loc_8225EFD0:
	// lis r31,0
	r31.s64 = 0;
loc_8225EFD4:
	// ori r31,r31,34952
	r31.u64 = r31.u64 | 34952;
	// b 0x8225f060
	goto loc_8225F060;
loc_8225EFDC:
	// lis r31,1
	r31.s64 = 65536;
	// b 0x8225f060
	goto loc_8225F060;
loc_8225EFE4:
	// lis r11,1792
	r11.s64 = 117440512;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8225f05c
	if (cr6.getEQ()) goto loc_8225F05C;
	// lis r11,2048
	r11.s64 = 134217728;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8225f054
	if (cr6.getEQ()) goto loc_8225F054;
	// lis r11,2304
	r11.s64 = 150994944;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8225f04c
	if (cr6.getEQ()) goto loc_8225F04C;
	// lis r11,2560
	r11.s64 = 167772160;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8225f044
	if (cr6.getEQ()) goto loc_8225F044;
	// lis r11,2816
	r11.s64 = 184549376;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8225f03c
	if (cr6.getEQ()) goto loc_8225F03C;
	// lis r11,3072
	r11.s64 = 201326592;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8225f034
	if (cr6.getEQ()) goto loc_8225F034;
loc_8225F02C:
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x8225f060
	goto loc_8225F060;
loc_8225F034:
	// lis r31,16
	r31.s64 = 1048576;
	// b 0x8225efd4
	goto loc_8225EFD4;
loc_8225F03C:
	// lis r31,16
	r31.s64 = 1048576;
	// b 0x8225f060
	goto loc_8225F060;
loc_8225F044:
	// lis r31,96
	r31.s64 = 6291456;
	// b 0x8225f060
	goto loc_8225F060;
loc_8225F04C:
	// lis r31,64
	r31.s64 = 4194304;
	// b 0x8225f060
	goto loc_8225F060;
loc_8225F054:
	// lis r31,4
	r31.s64 = 262144;
	// b 0x8225efd4
	goto loc_8225EFD4;
loc_8225F05C:
	// lis r31,4
	r31.s64 = 262144;
loc_8225F060:
	// rlwinm. r11,r31,0,15,15
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225f07c
	if (cr0.getEQ()) goto loc_8225F07C;
	// lis r12,6
	r12.s64 = 393216;
	// ori r12,r12,34952
	r12.u64 = r12.u64 | 34952;
	// and. r11,r31,r12
	r11.u64 = r31.u64 & r12.u64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225f07c
	if (cr0.getEQ()) goto loc_8225F07C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F07C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225F098"))) PPC_WEAK_FUNC(sub_8225F098);
PPC_FUNC_IMPL(__imp__sub_8225F098) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8225f180
	if (cr6.getEQ()) goto loc_8225F180;
	// cmplwi cr6,r3,3
	cr6.compare<uint32_t>(ctx.r3.u32, 3, xer);
	// beq cr6,0x8225f144
	if (cr6.getEQ()) goto loc_8225F144;
	// cmplwi cr6,r3,8
	cr6.compare<uint32_t>(ctx.r3.u32, 8, xer);
	// beq cr6,0x8225f0e8
	if (cr6.getEQ()) goto loc_8225F0E8;
	// cmplwi cr6,r3,9
	cr6.compare<uint32_t>(ctx.r3.u32, 9, xer);
	// bne cr6,0x8225f178
	if (!cr6.getEQ()) goto loc_8225F178;
	// li r11,4
	r11.s64 = 4;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r31,34
	r31.s64 = 34;
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
	// stw r10,156(r30)
	PPC_STORE_U32(r30.u32 + 156, ctx.r10.u32);
	// b 0x8225f188
	goto loc_8225F188;
loc_8225F0E8:
	// lis r10,-1
	ctx.r10.s64 = -65536;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// ori r29,r10,512
	r29.u64 = ctx.r10.u64 | 512;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// bge cr6,0x8225f100
	if (!cr6.getLT()) goto loc_8225F100;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F100:
	// cmplwi cr6,r31,4
	cr6.compare<uint32_t>(r31.u32, 4, xer);
	// blt cr6,0x8225f10c
	if (cr6.getLT()) goto loc_8225F10C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F10C:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// bne cr6,0x8225f13c
	if (!cr6.getEQ()) goto loc_8225F13C;
	// li r11,1
	r11.s64 = 1;
	// lwz r10,160(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 160);
	// li r9,4
	ctx.r9.s64 = 4;
	// slw r11,r11,r31
	r11.u64 = r31.u8 & 0x20 ? 0 : (r11.u32 << (r31.u8 & 0x3F));
	// addi r31,r31,35
	r31.s64 = r31.s64 + 35;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// stw r11,160(r30)
	PPC_STORE_U32(r30.u32 + 160, r11.u32);
	// stw r9,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r9.u32);
	// b 0x8225f188
	goto loc_8225F188;
loc_8225F13C:
	// li r11,23
	r11.s64 = 23;
	// b 0x8225f184
	goto loc_8225F184;
loc_8225F144:
	// lis r10,-1
	ctx.r10.s64 = -65536;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// ori r10,r10,260
	ctx.r10.u64 = ctx.r10.u64 | 260;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x8225f15c
	if (cr6.getLT()) goto loc_8225F15C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F15C:
	// addi r11,r31,41
	r11.s64 = r31.s64 + 41;
	// li r10,4
	ctx.r10.s64 = 4;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r31,r11,r30
	r31.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// cmplwi r31,0
	cr0.compare<uint32_t>(r31.u32, 0, xer);
	// bne 0x8225f188
	if (!cr0.getEQ()) goto loc_8225F188;
loc_8225F178:
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x8225f188
	goto loc_8225F188;
loc_8225F180:
	// li r11,4
	r11.s64 = 4;
loc_8225F184:
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
loc_8225F188:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8225F198"))) PPC_WEAK_FUNC(sub_8225F198);
PPC_FUNC_IMPL(__imp__sub_8225F198) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,52
	cr6.compare<int32_t>(r31.s32, 52, xer);
	// lwz r29,0(r28)
	r29.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// beq cr6,0x8225f1c8
	if (cr6.getEQ()) goto loc_8225F1C8;
	// cmpwi cr6,r31,7
	cr6.compare<int32_t>(r31.s32, 7, xer);
	// beq cr6,0x8225f1c8
	if (cr6.getEQ()) goto loc_8225F1C8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F1C8:
	// rlwinm r10,r30,0,4,7
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0xF000000;
	// lis r9,3328
	ctx.r9.s64 = 218103808;
	// clrlwi r11,r31,16
	r11.u64 = r31.u32 & 0xFFFF;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bne cr6,0x8225f1ec
	if (!cr6.getEQ()) goto loc_8225F1EC;
	// li r10,1
	ctx.r10.s64 = 1;
	// rlwimi r11,r10,16,13,15
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0x70000) | (r11.u64 & 0xFFFFFFFFFFF8FFFF);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// b 0x8225f1f0
	goto loc_8225F1F0;
loc_8225F1EC:
	// rlwinm r10,r11,0,16,12
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFF8FFFF;
loc_8225F1F0:
	// rlwinm r11,r30,0,8,15
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0xFF0000;
	// stw r10,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r10.u32);
	// lis r8,228
	ctx.r8.s64 = 14942208;
	// addi r9,r29,4
	ctx.r9.s64 = r29.s64 + 4;
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// beq cr6,0x8225f270
	if (cr6.getEQ()) goto loc_8225F270;
	// lis r8,68
	ctx.r8.s64 = 4456448;
	// rlwinm r10,r11,16,16,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// ori r7,r8,32
	ctx.r7.u64 = ctx.r8.u64 | 32;
	// rlwinm r8,r10,2,28,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// rlwinm r6,r10,2,28,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// addi r11,r11,-23316
	r11.s64 = r11.s64 + -23316;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwzx r6,r6,r11
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// rlwinm r6,r6,4,0,27
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 4) & 0xFFFFFFF0;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// rlwinm r6,r10,2,28,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,0,28,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xC;
	// lwzx r6,r6,r11
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwinm r10,r6,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 8) & 0xFFFFFF00;
	// stw r7,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r7.u32);
	// rlwinm r7,r11,12,0,19
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xFFFFF000;
	// or r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 | ctx.r8.u64;
	// addi r11,r9,4
	r11.s64 = ctx.r9.s64 + 4;
	// or r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 | ctx.r10.u64;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// b 0x8225f280
	goto loc_8225F280;
loc_8225F270:
	// lis r11,4
	r11.s64 = 262144;
	// ori r11,r11,32
	r11.u64 = r11.u64 | 32;
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// addi r11,r9,4
	r11.s64 = ctx.r9.s64 + 4;
loc_8225F280:
	// lis r10,65
	ctx.r10.s64 = 4259840;
	// li r9,17476
	ctx.r9.s64 = 17476;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8225F2A8"))) PPC_WEAK_FUNC(sub_8225F2A8);
PPC_FUNC_IMPL(__imp__sub_8225F2A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x8225f2d4
	goto loc_8225F2D4;
loc_8225F2D0:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
loc_8225F2D4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8225f2d0
	if (!cr0.getEQ()) goto loc_8225F2D0;
	// stw r31,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r31.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225F300"))) PPC_WEAK_FUNC(sub_8225F300);
PPC_FUNC_IMPL(__imp__sub_8225F300) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-1
	r11.s64 = -65536;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// ori r11,r11,260
	r11.u64 = r11.u64 | 260;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// beq cr6,0x8225f32c
	if (cr6.getEQ()) goto loc_8225F32C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F32C:
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// li r9,71
	ctx.r9.s64 = 71;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// li r8,1
	ctx.r8.s64 = 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r30,r11,4
	r30.s64 = r11.s64 + 4;
	// addi r27,r10,4
	r27.s64 = ctx.r10.s64 + 4;
	// lwz r31,0(r10)
	r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// mr r11,r31
	r11.u64 = r31.u64;
	// stw r8,156(r26)
	PPC_STORE_U32(r26.u32 + 156, ctx.r8.u32);
	// rlwimi r11,r31,12,21,23
	r11.u64 = (__builtin_rotateleft32(r31.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm. r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225f368
	if (cr0.getEQ()) goto loc_8225F368;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F368:
	// lis r11,88
	r11.s64 = 5767168;
	// li r10,257
	ctx.r10.s64 = 257;
	// li r9,17
	ctx.r9.s64 = 17;
	// lis r8,32
	ctx.r8.s64 = 2097152;
	// rlwimi r31,r9,18,0,20
	r31.u64 = (__builtin_rotateleft32(ctx.r9.u32, 18) & 0xFFFFF800) | (r31.u64 & 0xFFFFFFFF000007FF);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// ori r8,r8,12816
	ctx.r8.u64 = ctx.r8.u64 | 12816;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// stw r27,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r27.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8225F3B0"))) PPC_WEAK_FUNC(sub_8225F3B0);
PPC_FUNC_IMPL(__imp__sub_8225F3B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8225f3d8
	if (!cr6.getEQ()) goto loc_8225F3D8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F3D8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// blt cr6,0x8225f3ec
	if (cr6.getLT()) goto loc_8225F3EC;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x8225f3fc
	goto loc_8225F3FC;
loc_8225F3EC:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mullw r11,r11,r30
	r11.s64 = int64_t(r11.s32) * int64_t(r30.s32);
	// add r3,r11,r10
	ctx.r3.u64 = r11.u64 + ctx.r10.u64;
loc_8225F3FC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225F418"))) PPC_WEAK_FUNC(sub_8225F418);
PPC_FUNC_IMPL(__imp__sub_8225F418) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8225f440
	if (!cr6.getEQ()) goto loc_8225F440;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F440:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// subfc r11,r11,r30
	xer.ca = r30.u32 >= r11.u32;
	r11.s64 = r30.s64 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r3,r11,31
	ctx.r3.u64 = r11.u32 & 0x1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225F468"))) PPC_WEAK_FUNC(sub_8225F468);
PPC_FUNC_IMPL(__imp__sub_8225F468) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8225f488
	if (!cr6.getEQ()) goto loc_8225F488;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F488:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8225f498
	if (!cr6.getEQ()) goto loc_8225F498;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F498:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// blt cr6,0x8225f540
	if (cr6.getLT()) goto loc_8225F540;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225f4c0
	if (cr6.getEQ()) goto loc_8225F4C0;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mullw r11,r10,r11
	r11.s64 = int64_t(ctx.r10.s32) * int64_t(r11.s32);
	// addi r11,r11,4095
	r11.s64 = r11.s64 + 4095;
	// rlwinm r11,r11,0,0,19
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFF000;
	// b 0x8225f4c4
	goto loc_8225F4C4;
loc_8225F4C0:
	// li r11,4096
	r11.s64 = 4096;
loc_8225F4C4:
	// addi r10,r30,1
	ctx.r10.s64 = r30.s64 + 1;
	// b 0x8225f4d4
	goto loc_8225F4D4;
loc_8225F4CC:
	// rlwinm. r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225f54c
	if (cr0.getEQ()) goto loc_8225F54C;
loc_8225F4D4:
	// lwz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r8,r11,-32
	ctx.r8.s64 = r11.s64 + -32;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// cmplw cr6,r8,r9
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r9.u32, xer);
	// blt cr6,0x8225f4cc
	if (cr6.getLT()) goto loc_8225F4CC;
	// addi r29,r11,-32
	r29.s64 = r11.s64 + -32;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8209d000
	sub_8209D000(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// beq 0x8225f54c
	if (cr0.getEQ()) goto loc_8225F54C;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8225f52c
	if (cr0.getEQ()) goto loc_8225F52C;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mullw r5,r10,r11
	ctx.r5.s64 = int64_t(ctx.r10.s32) * int64_t(r11.s32);
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// bl 0x8209d060
	sub_8209D060(ctx, base);
loc_8225F52C:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stw r30,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r30.u32);
	// twllei r11,0
	// divwu r11,r29,r11
	r11.u32 = r29.u32 / r11.u32;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
loc_8225F540:
	// li r3,1
	ctx.r3.s64 = 1;
loc_8225F544:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8225F54C:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x8225f544
	goto loc_8225F544;
}

__attribute__((alias("__imp__sub_8225F558"))) PPC_WEAK_FUNC(sub_8225F558);
PPC_FUNC_IMPL(__imp__sub_8225F558) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8225f580
	if (!cr6.getEQ()) goto loc_8225F580;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F580:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225f418
	sub_8225F418(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bne 0x8225f5c0
	if (!cr0.getEQ()) goto loc_8225F5C0;
	// bl 0x8225f468
	sub_8225F468(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x8225f5b8
	if (cr0.getEQ()) goto loc_8225F5B8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225f3b0
	sub_8225F3B0(ctx, base);
	// b 0x8225f5d8
	goto loc_8225F5D8;
loc_8225F5B8:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x8225f5d8
	goto loc_8225F5D8;
loc_8225F5C0:
	// bl 0x8225f3b0
	sub_8225F3B0(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_8225F5D8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8225F5F0"))) PPC_WEAK_FUNC(sub_8225F5F0);
PPC_FUNC_IMPL(__imp__sub_8225F5F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// rlwimi r11,r3,12,21,23
	r11.u64 = (__builtin_rotateleft32(ctx.r3.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// rlwinm r11,r11,24,27,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0x1F;
	// clrlwi r10,r3,21
	ctx.r10.u64 = ctx.r3.u32 & 0x7FF;
	// cmplwi cr6,r11,11
	cr6.compare<uint32_t>(r11.u32, 11, xer);
	// beq cr6,0x8225f644
	if (cr6.getEQ()) goto loc_8225F644;
	// cmplwi cr6,r11,12
	cr6.compare<uint32_t>(r11.u32, 12, xer);
	// beq cr6,0x8225f63c
	if (cr6.getEQ()) goto loc_8225F63C;
	// cmplwi cr6,r11,13
	cr6.compare<uint32_t>(r11.u32, 13, xer);
	// beq cr6,0x8225f634
	if (cr6.getEQ()) goto loc_8225F634;
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
	// b 0x8225f648
	goto loc_8225F648;
loc_8225F634:
	// addi r31,r10,6144
	r31.s64 = ctx.r10.s64 + 6144;
	// b 0x8225f648
	goto loc_8225F648;
loc_8225F63C:
	// addi r31,r10,4096
	r31.s64 = ctx.r10.s64 + 4096;
	// b 0x8225f648
	goto loc_8225F648;
loc_8225F644:
	// addi r31,r10,2048
	r31.s64 = ctx.r10.s64 + 2048;
loc_8225F648:
	// cmplwi cr6,r11,11
	cr6.compare<uint32_t>(r11.u32, 11, xer);
	// blt cr6,0x8225f65c
	if (cr6.getLT()) goto loc_8225F65C;
	// cmplwi cr6,r11,13
	cr6.compare<uint32_t>(r11.u32, 13, xer);
	// bgt cr6,0x8225f65c
	if (cr6.getGT()) goto loc_8225F65C;
	// li r11,2
	r11.s64 = 2;
loc_8225F65C:
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x8225f760
	if (cr6.getLT()) goto loc_8225F760;
	// beq cr6,0x8225f70c
	if (cr6.getEQ()) goto loc_8225F70C;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// blt cr6,0x8225f704
	if (cr6.getLT()) goto loc_8225F704;
	// beq cr6,0x8225f6c0
	if (cr6.getEQ()) goto loc_8225F6C0;
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// beq cr6,0x8225f6b8
	if (cr6.getEQ()) goto loc_8225F6B8;
	// cmplwi cr6,r11,14
	cr6.compare<uint32_t>(r11.u32, 14, xer);
	// beq cr6,0x8225f6b0
	if (cr6.getEQ()) goto loc_8225F6B0;
	// cmplwi cr6,r11,17
	cr6.compare<uint32_t>(r11.u32, 17, xer);
	// bne cr6,0x8225f758
	if (!cr6.getEQ()) goto loc_8225F758;
	// cmplwi cr6,r31,1
	cr6.compare<uint32_t>(r31.u32, 1, xer);
	// blt cr6,0x8225f6a0
	if (cr6.getLT()) goto loc_8225F6A0;
	// bne cr6,0x8225f6a8
	if (!cr6.getEQ()) goto loc_8225F6A8;
	// li r11,21
	r11.s64 = 21;
	// b 0x8225f6a4
	goto loc_8225F6A4;
loc_8225F6A0:
	// li r11,22
	r11.s64 = 22;
loc_8225F6A4:
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
loc_8225F6A8:
	// li r31,0
	r31.s64 = 0;
	// b 0x8225f768
	goto loc_8225F768;
loc_8225F6B0:
	// li r11,0
	r11.s64 = 0;
	// b 0x8225f764
	goto loc_8225F764;
loc_8225F6B8:
	// li r11,2
	r11.s64 = 2;
	// b 0x8225f764
	goto loc_8225F764;
loc_8225F6C0:
	// addi r11,r31,41
	r11.s64 = r31.s64 + 41;
	// rlwinm r30,r11,2,0,29
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r30,r29
	r11.u64 = PPC_LOAD_U32(r30.u32 + r29.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8225f6fc
	if (cr6.getEQ()) goto loc_8225F6FC;
	// lis r10,-1
	ctx.r10.s64 = -65536;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// ori r10,r10,260
	ctx.r10.u64 = ctx.r10.u64 | 260;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x8225f6ec
	if (cr6.getLT()) goto loc_8225F6EC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F6EC:
	// li r11,4
	r11.s64 = 4;
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
	// lwzx r31,r30,r29
	r31.u64 = PPC_LOAD_U32(r30.u32 + r29.u32);
	// b 0x8225f768
	goto loc_8225F768;
loc_8225F6FC:
	// li r11,17
	r11.s64 = 17;
	// b 0x8225f764
	goto loc_8225F764;
loc_8225F704:
	// li r11,1
	r11.s64 = 1;
	// b 0x8225f764
	goto loc_8225F764;
loc_8225F70C:
	// addi r10,r31,4
	ctx.r10.s64 = r31.s64 + 4;
	// rlwinm r11,r31,3,0,28
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lwzx r10,r10,r29
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r29.u32);
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// lwz r31,28(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmplwi cr6,r31,16
	cr6.compare<uint32_t>(r31.u32, 16, xer);
	// blt cr6,0x8225f734
	if (cr6.getLT()) goto loc_8225F734;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F734:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// cmpwi cr6,r11,18
	cr6.compare<int32_t>(r11.s32, 18, xer);
	// beq cr6,0x8225f768
	if (cr6.getEQ()) goto loc_8225F768;
	// cmpwi cr6,r11,19
	cr6.compare<int32_t>(r11.s32, 19, xer);
	// beq cr6,0x8225f768
	if (cr6.getEQ()) goto loc_8225F768;
	// cmpwi cr6,r11,17
	cr6.compare<int32_t>(r11.s32, 17, xer);
	// beq cr6,0x8225f768
	if (cr6.getEQ()) goto loc_8225F768;
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// beq cr6,0x8225f768
	if (cr6.getEQ()) goto loc_8225F768;
loc_8225F758:
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x8225f768
	goto loc_8225F768;
loc_8225F760:
	// li r11,4
	r11.s64 = 4;
loc_8225F764:
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
loc_8225F768:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8225F778"))) PPC_WEAK_FUNC(sub_8225F778);
PPC_FUNC_IMPL(__imp__sub_8225F778) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// rlwimi r10,r11,12,21,23
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 12) & 0x700) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r3,r11,8,28,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xF;
	// lwz r27,0(r25)
	r27.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// rlwinm r26,r11,0,12,15
	r26.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xF0000;
	// rlwinm r29,r10,24,27,31
	r29.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0x1F;
	// clrlwi r28,r11,21
	r28.u64 = r11.u32 & 0x7FF;
	// li r31,0
	r31.s64 = 0;
	// rlwinm. r9,r11,0,11,11
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x100000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x8225f7bc
	if (cr0.getEQ()) goto loc_8225F7BC;
	// li r31,256
	r31.s64 = 256;
loc_8225F7BC:
	// bl 0x8225eef8
	sub_8225EEF8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// or r31,r11,r31
	r31.u64 = r11.u64 | r31.u64;
	// bl 0x8225f098
	sub_8225F098(ctx, base);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8225f808
	if (!cr6.getEQ()) goto loc_8225F808;
	// lis r11,15
	r11.s64 = 983040;
	// cmplw cr6,r26,r11
	cr6.compare<uint32_t>(r26.u32, r11.u32, xer);
	// bne cr6,0x8225f808
	if (!cr6.getEQ()) goto loc_8225F808;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwimi r3,r11,16,10,15
	ctx.r3.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x3F0000) | (ctx.r3.u64 & 0xFFFFFFFFFFC0FFFF);
	// clrlwi r11,r3,10
	r11.u64 = ctx.r3.u32 & 0x3FFFFF;
	// stw r11,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r11.u32);
	// addi r11,r27,4
	r11.s64 = r27.s64 + 4;
	// b 0x8225f864
	goto loc_8225F864;
loc_8225F808:
	// rlwinm. r10,r26,0,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// beq 0x8225f818
	if (cr0.getEQ()) goto loc_8225F818;
	// li r11,1
	r11.s64 = 1;
loc_8225F818:
	// rlwinm. r10,r26,0,14,14
	ctx.r10.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 0) & 0x20000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225f824
	if (cr0.getEQ()) goto loc_8225F824;
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
loc_8225F824:
	// rlwinm. r10,r26,0,13,13
	ctx.r10.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225f830
	if (cr0.getEQ()) goto loc_8225F830;
	// ori r11,r11,16
	r11.u64 = r11.u64 | 16;
loc_8225F830:
	// rlwinm. r10,r26,0,12,12
	ctx.r10.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 0) & 0x80000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225f83c
	if (cr0.getEQ()) goto loc_8225F83C;
	// ori r11,r11,64
	r11.u64 = r11.u64 | 64;
loc_8225F83C:
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r9,64
	ctx.r9.s64 = 4194304;
	// clrlwi r8,r3,16
	ctx.r8.u64 = ctx.r3.u32 & 0xFFFF;
	// rlwimi r9,r10,16,10,15
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0x3F0000) | (ctx.r9.u64 & 0xFFFFFFFFFFC0FFFF);
	// or r10,r11,r31
	ctx.r10.u64 = r11.u64 | r31.u64;
	// or r11,r9,r8
	r11.u64 = ctx.r9.u64 | ctx.r8.u64;
	// stw r11,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r11.u32);
	// addi r11,r27,4
	r11.s64 = r27.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
loc_8225F864:
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8225F870"))) PPC_WEAK_FUNC(sub_8225F870);
PPC_FUNC_IMPL(__imp__sub_8225F870) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r24,r7
	r24.u64 = ctx.r7.u64;
	// rlwinm r11,r31,0,8,15
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xFF0000;
	// lis r10,228
	ctx.r10.s64 = 14942208;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// lwz r26,0(r24)
	r26.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8225f8f4
	if (cr6.getEQ()) goto loc_8225F8F4;
	// rlwinm r10,r11,16,16,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// rlwinm r9,r10,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// addi r11,r11,-23316
	r11.s64 = r11.s64 + -23316;
	// rlwinm r8,r10,2,28,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwzx r9,r9,r11
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// rlwinm r8,r8,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// or r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 | ctx.r9.u64;
	// rlwinm r8,r10,2,28,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,0,28,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xC;
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwinm r10,r8,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 8) & 0xFFFFFF00;
	// rlwinm r8,r11,12,0,19
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xFFFFF000;
	// or r11,r10,r9
	r11.u64 = ctx.r10.u64 | ctx.r9.u64;
	// or r27,r8,r11
	r27.u64 = ctx.r8.u64 | r11.u64;
	// b 0x8225f8f8
	goto loc_8225F8F8;
loc_8225F8F4:
	// li r27,12816
	r27.s64 = 12816;
loc_8225F8F8:
	// rlwinm r3,r31,0,4,7
	ctx.r3.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xF000000;
	// bl 0x8225ef48
	sub_8225EF48(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// or r28,r11,r30
	r28.u64 = r11.u64 | r30.u64;
	// bl 0x8225f5f0
	sub_8225F5F0(ctx, base);
	// rlwinm r11,r31,0,18,18
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x2000;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r11,8192
	cr6.compare<uint32_t>(r11.u32, 8192, xer);
	// bne cr6,0x8225f97c
	if (!cr6.getEQ()) goto loc_8225F97C;
	// mr r11,r31
	r11.u64 = r31.u64;
	// rlwimi r11,r31,12,21,23
	r11.u64 = (__builtin_rotateleft32(r31.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,256
	cr6.compare<uint32_t>(r11.u32, 256, xer);
	// bne cr6,0x8225f97c
	if (!cr6.getEQ()) goto loc_8225F97C;
	// mr r11,r25
	r11.u64 = r25.u64;
	// rlwimi r11,r25,12,21,23
	r11.u64 = (__builtin_rotateleft32(r25.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,3840
	cr6.compare<uint32_t>(r11.u32, 3840, xer);
	// beq cr6,0x8225f95c
	if (cr6.getEQ()) goto loc_8225F95C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x8225f97c
	goto loc_8225F97C;
loc_8225F95C:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// andis. r11,r11,65521
	r11.u64 = r11.u64 & 4293984256;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// oris r11,r11,1
	r11.u64 = r11.u64 | 65536;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// clrlwi. r10,r25,21
	ctx.r10.u64 = r25.u32 & 0x7FF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225f978
	if (cr0.getEQ()) goto loc_8225F978;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225F978:
	// li r29,1
	r29.s64 = 1;
loc_8225F97C:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x8225f9a8
	if (!cr6.getEQ()) goto loc_8225F9A8;
	// cmplwi cr6,r27,12816
	cr6.compare<uint32_t>(r27.u32, 12816, xer);
	// bne cr6,0x8225f9a8
	if (!cr6.getEQ()) goto loc_8225F9A8;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwimi r11,r29,7,24,24
	r11.u64 = (__builtin_rotateleft32(r29.u32, 7) & 0x80) | (r11.u64 & 0xFFFFFFFFFFFFFF7F);
	// andi. r11,r11,191
	r11.u64 = r11.u64 & 191;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rlwimi r30,r11,16,0,15
	r30.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0xFFFF0000) | (r30.u64 & 0xFFFFFFFF0000FFFF);
	// addi r11,r26,4
	r11.s64 = r26.s64 + 4;
	// stw r30,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r30.u32);
	// b 0x8225f9d8
	goto loc_8225F9D8;
loc_8225F9A8:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// clrlwi r10,r30,16
	ctx.r10.u64 = r30.u32 & 0xFFFF;
	// or r9,r28,r27
	ctx.r9.u64 = r28.u64 | r27.u64;
	// rlwimi r11,r29,7,24,24
	r11.u64 = (__builtin_rotateleft32(r29.u32, 7) & 0x80) | (r11.u64 & 0xFFFFFFFFFFFFFF7F);
	// rlwinm r11,r11,16,8,15
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFF0000;
	// rlwinm r11,r11,0,10,8
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFBFFFFF;
	// oris r11,r11,64
	r11.u64 = r11.u64 | 4194304;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// stw r11,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r11.u32);
	// addi r11,r26,4
	r11.s64 = r26.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
loc_8225F9D8:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8225f9ec
	if (cr6.getEQ()) goto loc_8225F9EC;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
loc_8225F9EC:
	// stw r11,0(r24)
	PPC_STORE_U32(r24.u32 + 0, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_8225F9F8"))) PPC_WEAK_FUNC(sub_8225F9F8);
PPC_FUNC_IMPL(__imp__sub_8225F9F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r11,r31
	r11.u64 = r31.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// rlwimi r11,r31,12,21,23
	r11.u64 = (__builtin_rotateleft32(r31.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// clrlwi r4,r31,21
	ctx.r4.u64 = r31.u32 & 0x7FF;
	// lwz r30,0(r29)
	r30.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// rlwinm r3,r11,24,27,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0x1F;
	// bl 0x8225f098
	sub_8225F098(ctx, base);
	// li r11,71
	r11.s64 = 71;
	// rlwinm r10,r31,0,12,15
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xF0000;
	// lis r9,15
	ctx.r9.s64 = 983040;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// beq cr6,0x8225faa0
	if (cr6.getEQ()) goto loc_8225FAA0;
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,64
	ctx.r8.s64 = 4194304;
	// clrlwi r7,r3,16
	ctx.r7.u64 = ctx.r3.u32 & 0xFFFF;
	// rlwimi r8,r9,16,10,15
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0x3F0000) | (ctx.r8.u64 & 0xFFFFFFFFFFC0FFFF);
	// rlwinm. r6,r10,0,15,15
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(ctx.r6.s32, 0, xer);
	// or r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 | ctx.r7.u64;
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// beq 0x8225fa74
	if (cr0.getEQ()) goto loc_8225FA74;
	// li r9,1
	ctx.r9.s64 = 1;
loc_8225FA74:
	// rlwinm. r8,r10,0,14,14
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq 0x8225fa80
	if (cr0.getEQ()) goto loc_8225FA80;
	// ori r9,r9,4
	ctx.r9.u64 = ctx.r9.u64 | 4;
loc_8225FA80:
	// rlwinm. r8,r10,0,13,13
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq 0x8225fa8c
	if (cr0.getEQ()) goto loc_8225FA8C;
	// ori r9,r9,16
	ctx.r9.u64 = ctx.r9.u64 | 16;
loc_8225FA8C:
	// rlwinm. r10,r10,0,12,12
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x8225fa98
	if (cr0.getEQ()) goto loc_8225FA98;
	// ori r9,r9,64
	ctx.r9.u64 = ctx.r9.u64 | 64;
loc_8225FA98:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// b 0x8225fab0
	goto loc_8225FAB0;
loc_8225FAA0:
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwimi r3,r10,16,10,15
	ctx.r3.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0x3F0000) | (ctx.r3.u64 & 0xFFFFFFFFFFC0FFFF);
	// clrlwi r10,r3,10
	ctx.r10.u64 = ctx.r3.u32 & 0x3FFFFF;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_8225FAB0:
	// li r9,1
	ctx.r9.s64 = 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// rlwimi r28,r9,18,0,15
	r28.u64 = (__builtin_rotateleft32(ctx.r9.u32, 18) & 0xFFFF0000) | (r28.u64 & 0xFFFFFFFF0000FFFF);
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
	// stw r28,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r28.u32);
	// stw r10,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r10.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8225FAD0"))) PPC_WEAK_FUNC(sub_8225FAD0);
PPC_FUNC_IMPL(__imp__sub_8225FAD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r9,12
	ctx.r9.s64 = 12;
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// rlwimi r10,r31,12,21,23
	ctx.r10.u64 = (__builtin_rotateleft32(r31.u32, 12) & 0x700) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF8FF);
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// clrlwi r4,r31,21
	ctx.r4.u64 = r31.u32 & 0x7FF;
	// rlwinm r3,r10,24,27,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0x1F;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r30,r11,4
	r30.s64 = r11.s64 + 4;
	// bl 0x8225f098
	sub_8225F098(ctx, base);
	// rlwinm r11,r31,0,12,15
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xF0000;
	// lis r10,15
	ctx.r10.s64 = 983040;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8225fb84
	if (cr6.getEQ()) goto loc_8225FB84;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r9,64
	ctx.r9.s64 = 4194304;
	// clrlwi r8,r3,16
	ctx.r8.u64 = ctx.r3.u32 & 0xFFFF;
	// rlwimi r9,r10,16,10,15
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0x3F0000) | (ctx.r9.u64 & 0xFFFFFFFFFFC0FFFF);
	// rlwinm. r7,r11,0,15,15
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// or r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 | ctx.r8.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r9,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r9.u32);
	// addi r9,r30,4
	ctx.r9.s64 = r30.s64 + 4;
	// beq 0x8225fb54
	if (cr0.getEQ()) goto loc_8225FB54;
	// li r10,1
	ctx.r10.s64 = 1;
loc_8225FB54:
	// rlwinm. r8,r11,0,14,14
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq 0x8225fb60
	if (cr0.getEQ()) goto loc_8225FB60;
	// ori r10,r10,4
	ctx.r10.u64 = ctx.r10.u64 | 4;
loc_8225FB60:
	// rlwinm. r8,r11,0,13,13
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq 0x8225fb6c
	if (cr0.getEQ()) goto loc_8225FB6C;
	// ori r10,r10,16
	ctx.r10.u64 = ctx.r10.u64 | 16;
loc_8225FB6C:
	// rlwinm. r11,r11,0,12,12
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225fb78
	if (cr0.getEQ()) goto loc_8225FB78;
	// ori r10,r10,64
	ctx.r10.u64 = ctx.r10.u64 | 64;
loc_8225FB78:
	// stw r10,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r10.u32);
	// addi r8,r9,4
	ctx.r8.s64 = ctx.r9.s64 + 4;
	// b 0x8225fb98
	goto loc_8225FB98;
loc_8225FB84:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r8,r30,4
	ctx.r8.s64 = r30.s64 + 4;
	// rlwimi r3,r11,16,10,15
	ctx.r3.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x3F0000) | (ctx.r3.u64 & 0xFFFFFFFFFFC0FFFF);
	// clrlwi r11,r3,10
	r11.u64 = ctx.r3.u32 & 0x3FFFFF;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
loc_8225FB98:
	// rlwinm r11,r29,0,4,7
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0xF000000;
	// lis r9,3328
	ctx.r9.s64 = 218103808;
	// rlwinm r10,r29,0,8,15
	ctx.r10.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0xFF0000;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// lis r7,1
	ctx.r7.s64 = 65536;
	// beq cr6,0x8225fbb4
	if (cr6.getEQ()) goto loc_8225FBB4;
	// li r7,0
	ctx.r7.s64 = 0;
loc_8225FBB4:
	// lis r6,228
	ctx.r6.s64 = 14942208;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// cmplw cr6,r10,r6
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r6.u32, xer);
	// addi r11,r11,-23316
	r11.s64 = r11.s64 + -23316;
	// bne cr6,0x8225fbe4
	if (!cr6.getEQ()) goto loc_8225FBE4;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8225fbe4
	if (!cr6.getEQ()) goto loc_8225FBE4;
	// lis r10,4
	ctx.r10.s64 = 262144;
	// ori r10,r10,32
	ctx.r10.u64 = ctx.r10.u64 | 32;
	// stw r10,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r10.u32);
	// addi r10,r8,4
	ctx.r10.s64 = ctx.r8.s64 + 4;
	// b 0x8225fc44
	goto loc_8225FC44;
loc_8225FBE4:
	// lis r9,68
	ctx.r9.s64 = 4456448;
	// rlwinm r10,r10,16,16,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF;
	// ori r5,r9,32
	ctx.r5.u64 = ctx.r9.u64 | 32;
	// rlwinm r9,r10,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// rlwinm r4,r10,2,28,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwzx r9,r9,r11
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// lwzx r4,r4,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + r11.u32);
	// rlwinm r4,r4,4,0,27
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 4) & 0xFFFFFFF0;
	// or r9,r4,r9
	ctx.r9.u64 = ctx.r4.u64 | ctx.r9.u64;
	// rlwinm r4,r10,2,28,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,0,28,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xC;
	// lwzx r4,r4,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + r11.u32);
	// lwzx r10,r10,r11
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwinm r4,r4,8,0,23
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 8) & 0xFFFFFF00;
	// stw r5,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r5.u32);
	// rlwinm r5,r10,12,0,19
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 12) & 0xFFFFF000;
	// or r9,r4,r9
	ctx.r9.u64 = ctx.r4.u64 | ctx.r9.u64;
	// addi r10,r8,4
	ctx.r10.s64 = ctx.r8.s64 + 4;
	// or r9,r5,r9
	ctx.r9.u64 = ctx.r5.u64 | ctx.r9.u64;
	// or r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 | ctx.r7.u64;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
loc_8225FC44:
	// cmplw cr6,r28,r6
	cr6.compare<uint32_t>(r28.u32, ctx.r6.u32, xer);
	// beq cr6,0x8225fca4
	if (cr6.getEQ()) goto loc_8225FCA4;
	// lis r8,68
	ctx.r8.s64 = 4456448;
	// rlwinm r9,r28,16,16,31
	ctx.r9.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 16) & 0xFFFF;
	// ori r8,r8,33
	ctx.r8.u64 = ctx.r8.u64 | 33;
	// stw r8,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r8.u32);
	// rlwinm r8,r9,2,28,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xC;
	// rlwinm r9,r9,30,2,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 30) & 0x3FFFFFFF;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// rlwinm r7,r9,2,28,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xC;
	// rlwinm r9,r9,30,2,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 30) & 0x3FFFFFFF;
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// lwzx r7,r7,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// rlwinm r7,r7,4,0,27
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 4) & 0xFFFFFFF0;
	// or r8,r7,r8
	ctx.r8.u64 = ctx.r7.u64 | ctx.r8.u64;
	// rlwinm r7,r9,2,28,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xC;
	// rlwinm r9,r9,0,28,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xC;
	// lwzx r7,r7,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// rlwinm r9,r7,8,0,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 8) & 0xFFFFFF00;
	// rlwinm r7,r11,12,0,19
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xFFFFF000;
	// or r11,r9,r8
	r11.u64 = ctx.r9.u64 | ctx.r8.u64;
	// or r11,r7,r11
	r11.u64 = ctx.r7.u64 | r11.u64;
	// b 0x8225fcac
	goto loc_8225FCAC;
loc_8225FCA4:
	// lis r11,4
	r11.s64 = 262144;
	// ori r11,r11,33
	r11.u64 = r11.u64 | 33;
loc_8225FCAC:
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// addi r11,r10,4
	r11.s64 = ctx.r10.s64 + 4;
	// stw r11,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8225FCC0"))) PPC_WEAK_FUNC(sub_8225FCC0);
PPC_FUNC_IMPL(__imp__sub_8225FCC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r8,71
	ctx.r8.s64 = 71;
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// rlwimi r9,r11,12,21,23
	ctx.r9.u64 = (__builtin_rotateleft32(r11.u32, 12) & 0x700) | (ctx.r9.u64 & 0xFFFFFFFFFFFFF8FF);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// clrlwi r4,r11,21
	ctx.r4.u64 = r11.u32 & 0x7FF;
	// rlwinm r3,r9,24,27,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 24) & 0x1F;
	// stw r8,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r8.u32);
	// rlwinm r28,r11,0,12,15
	r28.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xF0000;
	// addi r30,r10,4
	r30.s64 = ctx.r10.s64 + 4;
	// bl 0x8225f098
	sub_8225F098(ctx, base);
	// mr r11,r31
	r11.u64 = r31.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// rlwimi r11,r31,12,21,23
	r11.u64 = (__builtin_rotateleft32(r31.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// clrlwi r31,r31,21
	r31.u64 = r31.u32 & 0x7FF;
	// rlwinm. r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8225fd28
	if (cr0.getEQ()) goto loc_8225FD28;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225FD28:
	// lis r11,15
	r11.s64 = 983040;
	// cmplw cr6,r28,r11
	cr6.compare<uint32_t>(r28.u32, r11.u32, xer);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// beq cr6,0x8225fd90
	if (cr6.getEQ()) goto loc_8225FD90;
	// lis r10,64
	ctx.r10.s64 = 4194304;
	// clrlwi r9,r29,16
	ctx.r9.u64 = r29.u32 & 0xFFFF;
	// rlwimi r10,r11,16,10,15
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x3F0000) | (ctx.r10.u64 & 0xFFFFFFFFFFC0FFFF);
	// rlwinm. r8,r28,0,15,15
	ctx.r8.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// li r11,0
	r11.s64 = 0;
	// stw r10,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r10.u32);
	// addi r10,r30,4
	ctx.r10.s64 = r30.s64 + 4;
	// beq 0x8225fd60
	if (cr0.getEQ()) goto loc_8225FD60;
	// li r11,1
	r11.s64 = 1;
loc_8225FD60:
	// rlwinm. r9,r28,0,14,14
	ctx.r9.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x20000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x8225fd6c
	if (cr0.getEQ()) goto loc_8225FD6C;
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
loc_8225FD6C:
	// rlwinm. r9,r28,0,13,13
	ctx.r9.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x8225fd78
	if (cr0.getEQ()) goto loc_8225FD78;
	// ori r11,r11,16
	r11.u64 = r11.u64 | 16;
loc_8225FD78:
	// rlwinm. r9,r28,0,12,12
	ctx.r9.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x80000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x8225fd84
	if (cr0.getEQ()) goto loc_8225FD84;
	// ori r11,r11,64
	r11.u64 = r11.u64 | 64;
loc_8225FD84:
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// addi r9,r10,4
	ctx.r9.s64 = ctx.r10.s64 + 4;
	// b 0x8225fda0
	goto loc_8225FDA0;
loc_8225FD90:
	// rlwimi r29,r11,16,10,15
	r29.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x3F0000) | (r29.u64 & 0xFFFFFFFFFFC0FFFF);
	// addi r9,r30,4
	ctx.r9.s64 = r30.s64 + 4;
	// clrlwi r11,r29,10
	r11.u64 = r29.u32 & 0x3FFFFF;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
loc_8225FDA0:
	// li r8,17
	ctx.r8.s64 = 17;
	// rlwinm r10,r26,16,16,31
	ctx.r10.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 16) & 0xFFFF;
	// rlwimi r31,r8,18,0,15
	r31.u64 = (__builtin_rotateleft32(ctx.r8.u32, 18) & 0xFFFF0000) | (r31.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r8,r10,2,28,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// rlwinm r6,r10,2,28,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// addi r11,r11,-23316
	r11.s64 = r11.s64 + -23316;
	// stw r31,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r31.u32);
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// addi r7,r9,4
	ctx.r7.s64 = ctx.r9.s64 + 4;
	// lwzx r6,r6,r11
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// rlwinm r6,r6,4,0,27
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 4) & 0xFFFFFFF0;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// rlwinm r6,r10,2,28,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,0,28,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xC;
	// lwzx r6,r6,r11
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwinm r10,r6,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 8) & 0xFFFFFF00;
	// rlwinm r6,r11,12,0,19
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xFFFFF000;
	// or r11,r10,r8
	r11.u64 = ctx.r10.u64 | ctx.r8.u64;
	// or r11,r6,r11
	r11.u64 = ctx.r6.u64 | r11.u64;
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// stw r7,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r7.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8225FE10"))) PPC_WEAK_FUNC(sub_8225FE10);
PPC_FUNC_IMPL(__imp__sub_8225FE10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed108
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r20,r3
	r20.u64 = ctx.r3.u64;
	// mr r18,r7
	r18.u64 = ctx.r7.u64;
	// mr r22,r4
	r22.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// lwz r10,0(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// lwz r29,0(r18)
	r29.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// addi r31,r10,4
	r31.s64 = ctx.r10.s64 + 4;
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r17,r11,0,3,3
	r17.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000000;
	// rlwinm r16,r11,0,1,1
	r16.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	// clrlwi r24,r11,16
	r24.u64 = r11.u32 & 0xFFFF;
	// rlwinm. r10,r10,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8225fe5c
	if (!cr0.getEQ()) goto loc_8225FE5C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225FE5C:
	// lis r11,-1
	r11.s64 = -65536;
	// lwz r27,0(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r28,r31,4
	r28.s64 = r31.s64 + 4;
	// ori r23,r11,512
	r23.u64 = r11.u64 | 512;
	// mr r19,r27
	r19.u64 = r27.u64;
	// cmplw cr6,r22,r23
	cr6.compare<uint32_t>(r22.u32, r23.u32, xer);
	// bge cr6,0x8225fecc
	if (!cr6.getLT()) goto loc_8225FECC;
	// lwz r11,428(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 428);
	// lwz r10,0(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// addi r9,r11,25
	ctx.r9.s64 = r11.s64 + 25;
	// rlwinm r9,r9,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r9,r9,r26
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r26.u32);
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bne cr6,0x8225fecc
	if (!cr6.getEQ()) goto loc_8225FECC;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// lwz r11,204(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 204);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8225feac
	if (!cr6.getEQ()) goto loc_8225FEAC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225FEAC:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// beq cr6,0x8225feb8
	if (cr6.getEQ()) goto loc_8225FEB8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8225FEB8:
	// lis r12,-28673
	r12.s64 = -1879113728;
	// ori r12,r12,57360
	r12.u64 = r12.u64 | 57360;
	// and r11,r27,r12
	r11.u64 = r27.u64 & r12.u64;
	// oris r27,r11,15
	r27.u64 = r11.u64 | 983040;
	// ori r27,r27,16
	r27.u64 = r27.u64 | 16;
loc_8225FECC:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x8225ff00
	if (cr6.getEQ()) goto loc_8225FF00;
	// lis r12,-28673
	r12.s64 = -1879113728;
	// lwz r21,0(r28)
	r21.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// ori r12,r12,57377
	r12.u64 = r12.u64 | 57377;
	// cmplw cr6,r22,r23
	cr6.compare<uint32_t>(r22.u32, r23.u32, xer);
	// and r11,r27,r12
	r11.u64 = r27.u64 & r12.u64;
	// oris r27,r11,15
	r27.u64 = r11.u64 | 983040;
	// ori r27,r27,33
	r27.u64 = r27.u64 | 33;
	// bge cr6,0x8225ff04
	if (!cr6.getLT()) goto loc_8225FF04;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x8225ff04
	goto loc_8225FF04;
loc_8225FF00:
	// lwz r21,80(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_8225FF04:
	// li r25,1
	r25.s64 = 1;
	// cmpwi cr6,r30,13
	cr6.compare<int32_t>(r30.s32, 13, xer);
	// bne cr6,0x8225ff28
	if (!cr6.getEQ()) goto loc_8225FF28;
	// cmplwi cr6,r24,80
	cr6.compare<uint32_t>(r24.u32, 80, xer);
	// lis r11,67
	r11.s64 = 4390912;
	// beq cr6,0x8225ff20
	if (cr6.getEQ()) goto loc_8225FF20;
	// lis r11,2
	r11.s64 = 131072;
loc_8225FF20:
	// ori r11,r11,13
	r11.u64 = r11.u64 | 13;
	// b 0x82260010
	goto loc_82260010;
loc_8225FF28:
	// cmpwi cr6,r30,69
	cr6.compare<int32_t>(r30.s32, 69, xer);
	// bne cr6,0x8225ff94
	if (!cr6.getEQ()) goto loc_8225FF94;
	// li r31,69
	r31.s64 = 69;
	// cmplwi cr6,r24,20
	cr6.compare<uint32_t>(r24.u32, 20, xer);
	// beq cr6,0x8225ff88
	if (cr6.getEQ()) goto loc_8225FF88;
	// cmplwi cr6,r24,21
	cr6.compare<uint32_t>(r24.u32, 21, xer);
	// beq cr6,0x8225ff7c
	if (cr6.getEQ()) goto loc_8225FF7C;
	// cmplwi cr6,r24,22
	cr6.compare<uint32_t>(r24.u32, 22, xer);
	// beq cr6,0x8225ff74
	if (cr6.getEQ()) goto loc_8225FF74;
	// cmplwi cr6,r24,23
	cr6.compare<uint32_t>(r24.u32, 23, xer);
	// beq cr6,0x8225ff6c
	if (cr6.getEQ()) goto loc_8225FF6C;
	// cmplwi cr6,r24,24
	cr6.compare<uint32_t>(r24.u32, 24, xer);
	// beq cr6,0x8225ff64
	if (cr6.getEQ()) goto loc_8225FF64;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x8225ff8c
	goto loc_8225FF8C;
loc_8225FF64:
	// lis r31,4
	r31.s64 = 262144;
	// b 0x8225ff80
	goto loc_8225FF80;
loc_8225FF6C:
	// lis r31,3
	r31.s64 = 196608;
	// b 0x8225ff80
	goto loc_8225FF80;
loc_8225FF74:
	// lis r31,2
	r31.s64 = 131072;
	// b 0x8225ff80
	goto loc_8225FF80;
loc_8225FF7C:
	// lis r31,1
	r31.s64 = 65536;
loc_8225FF80:
	// ori r31,r31,69
	r31.u64 = r31.u64 | 69;
	// b 0x8225ff8c
	goto loc_8225FF8C;
loc_8225FF88:
	// li r31,69
	r31.s64 = 69;
loc_8225FF8C:
	// stw r31,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r31.u32);
	// b 0x82260014
	goto loc_82260014;
loc_8225FF94:
	// cmpwi cr6,r30,61
	cr6.compare<int32_t>(r30.s32, 61, xer);
	// beq cr6,0x8226000c
	if (cr6.getEQ()) goto loc_8226000C;
	// cmpwi cr6,r30,60
	cr6.compare<int32_t>(r30.s32, 60, xer);
	// beq cr6,0x8226000c
	if (cr6.getEQ()) goto loc_8226000C;
	// cmpwi cr6,r30,76
	cr6.compare<int32_t>(r30.s32, 76, xer);
	// beq cr6,0x8226000c
	if (cr6.getEQ()) goto loc_8226000C;
	// cmpwi cr6,r30,81
	cr6.compare<int32_t>(r30.s32, 81, xer);
	// beq cr6,0x82260000
	if (cr6.getEQ()) goto loc_82260000;
	// cmpwi cr6,r30,85
	cr6.compare<int32_t>(r30.s32, 85, xer);
	// beq cr6,0x82260000
	if (cr6.getEQ()) goto loc_82260000;
	// cmpwi cr6,r30,37
	cr6.compare<int32_t>(r30.s32, 37, xer);
	// beq cr6,0x8225ffcc
	if (cr6.getEQ()) goto loc_8225FFCC;
	// cmpwi cr6,r30,38
	cr6.compare<int32_t>(r30.s32, 38, xer);
	// bne cr6,0x8226000c
	if (!cr6.getEQ()) goto loc_8226000C;
loc_8225FFCC:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// clrlwi r10,r30,16
	ctx.r10.u64 = r30.u32 & 0xFFFF;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8225ffe4
	if (!cr6.getEQ()) goto loc_8225FFE4;
	// li r11,0
	r11.s64 = 0;
	// b 0x8225fff4
	goto loc_8225FFF4;
loc_8225FFE4:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// mr r11,r25
	r11.u64 = r25.u64;
	// beq cr6,0x8225fff4
	if (cr6.getEQ()) goto loc_8225FFF4;
	// rlwinm r11,r19,10,31,31
	r11.u64 = __builtin_rotateleft64(r19.u32 | (r19.u64 << 32), 10) & 0x1;
loc_8225FFF4:
	// rlwimi r10,r11,24,7,7
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 24) & 0x1000000) | (ctx.r10.u64 & 0xFFFFFFFFFEFFFFFF);
	// stw r10,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r10.u32);
	// b 0x82260014
	goto loc_82260014;
loc_82260000:
	// rlwimi r30,r25,17,0,15
	r30.u64 = (__builtin_rotateleft32(r25.u32, 17) & 0xFFFF0000) | (r30.u64 & 0xFFFFFFFF0000FFFF);
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// b 0x82260014
	goto loc_82260014;
loc_8226000C:
	// clrlwi r11,r30,16
	r11.u64 = r30.u32 & 0xFFFF;
loc_82260010:
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
loc_82260014:
	// addi r11,r29,4
	r11.s64 = r29.s64 + 4;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8225f778
	sub_8225F778(ctx, base);
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8226003c
	if (!cr0.getEQ()) goto loc_8226003C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8226003C:
	// lwz r30,0(r28)
	r30.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r31,r28,4
	r31.s64 = r28.s64 + 4;
	// rlwinm r11,r30,0,18,18
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,8192
	cr6.compare<uint32_t>(r11.u32, 8192, xer);
	// bne cr6,0x8226006c
	if (!cr6.getEQ()) goto loc_8226006C;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82260064
	if (!cr0.getEQ()) goto loc_82260064;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260064:
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
loc_8226006C:
	// cmplwi cr6,r24,7
	cr6.compare<uint32_t>(r24.u32, 7, xer);
	// beq cr6,0x82260094
	if (cr6.getEQ()) goto loc_82260094;
	// cmplwi cr6,r24,15
	cr6.compare<uint32_t>(r24.u32, 15, xer);
	// beq cr6,0x82260094
	if (cr6.getEQ()) goto loc_82260094;
	// cmplwi cr6,r24,32
	cr6.compare<uint32_t>(r24.u32, 32, xer);
	// beq cr6,0x82260094
	if (cr6.getEQ()) goto loc_82260094;
	// cmplwi cr6,r24,37
	cr6.compare<uint32_t>(r24.u32, 37, xer);
	// beq cr6,0x8226012c
	if (cr6.getEQ()) goto loc_8226012C;
	// cmplwi cr6,r24,79
	cr6.compare<uint32_t>(r24.u32, 79, xer);
	// bne cr6,0x82260108
	if (!cr6.getEQ()) goto loc_82260108;
loc_82260094:
	// rlwinm r11,r30,0,4,7
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0xF000000;
	// lis r10,256
	ctx.r10.s64 = 16777216;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x82260178
	if (cr6.getEQ()) goto loc_82260178;
	// lis r10,768
	ctx.r10.s64 = 50331648;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x82260170
	if (cr6.getEQ()) goto loc_82260170;
	// lis r10,1280
	ctx.r10.s64 = 83886080;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x82260164
	if (cr6.getEQ()) goto loc_82260164;
	// lis r10,2048
	ctx.r10.s64 = 134217728;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x82260158
	if (cr6.getEQ()) goto loc_82260158;
	// lis r10,3072
	ctx.r10.s64 = 201326592;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x8226017c
	if (!cr6.getEQ()) goto loc_8226017C;
	// li r11,11
	r11.s64 = 11;
	// b 0x8226015c
	goto loc_8226015C;
loc_822600DC:
	// rlwinm r11,r30,0,18,18
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x2000;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// cmplwi cr6,r11,8192
	cr6.compare<uint32_t>(r11.u32, 8192, xer);
	// bne cr6,0x82260108
	if (!cr6.getEQ()) goto loc_82260108;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82260100
	if (!cr0.getEQ()) goto loc_82260100;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260100:
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
loc_82260108:
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// lwz r30,0(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm. r11,r30,0,0,0
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822600dc
	if (!cr0.getEQ()) goto loc_822600DC;
	// b 0x822601fc
	goto loc_822601FC;
loc_8226012C:
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// b 0x82260148
	goto loc_82260148;
loc_82260144:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
loc_82260148:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82260144
	if (!cr0.getEQ()) goto loc_82260144;
	// b 0x822601fc
	goto loc_822601FC;
loc_82260158:
	// li r11,7
	r11.s64 = 7;
loc_8226015C:
	// rlwimi r30,r11,24,4,7
	r30.u64 = (__builtin_rotateleft32(r11.u32, 24) & 0xF000000) | (r30.u64 & 0xFFFFFFFFF0FFFFFF);
	// b 0x8226017c
	goto loc_8226017C;
loc_82260164:
	// rlwinm r11,r30,0,8,6
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0xFFFFFFFFFEFFFFFF;
	// oris r30,r11,1024
	r30.u64 = r11.u64 | 67108864;
	// b 0x8226017c
	goto loc_8226017C;
loc_82260170:
	// rlwimi r30,r25,25,6,7
	r30.u64 = (__builtin_rotateleft32(r25.u32, 25) & 0x3000000) | (r30.u64 & 0xFFFFFFFFFCFFFFFF);
	// b 0x8226017c
	goto loc_8226017C;
loc_82260178:
	// rlwinm r30,r30,0,8,6
	r30.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0xFFFFFFFFFEFFFFFF;
loc_8226017C:
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// lis r5,16
	ctx.r5.s64 = 1048576;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// cmplwi cr6,r24,32
	cr6.compare<uint32_t>(r24.u32, 32, xer);
	// bne cr6,0x822601ec
	if (!cr6.getEQ()) goto loc_822601EC;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822601a8
	if (!cr0.getEQ()) goto loc_822601A8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822601A8:
	// lwz r30,0(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// rlwinm r11,r30,0,18,18
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,8192
	cr6.compare<uint32_t>(r11.u32, 8192, xer);
	// bne cr6,0x822601d8
	if (!cr6.getEQ()) goto loc_822601D8;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822601d0
	if (!cr0.getEQ()) goto loc_822601D0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822601D0:
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
loc_822601D8:
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
loc_822601EC:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822601fc
	if (cr0.getEQ()) goto loc_822601FC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822601FC:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x8226021c
	if (cr6.getEQ()) goto loc_8226021C;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// lis r5,228
	ctx.r5.s64 = 14942208;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// mr r3,r19
	ctx.r3.u64 = r19.u64;
	// bl 0x8225fad0
	sub_8225FAD0(ctx, base);
loc_8226021C:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// beq cr6,0x82260270
	if (cr6.getEQ()) goto loc_82260270;
	// cmplw cr6,r22,r23
	cr6.compare<uint32_t>(r22.u32, r23.u32, xer);
	// blt cr6,0x82260230
	if (cr6.getLT()) goto loc_82260230;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260230:
	// lwz r11,428(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 428);
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r11,r11,25
	r11.s64 = r11.s64 + 25;
	// li r4,16
	ctx.r4.s64 = 16;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r11,r11,r26
	r11.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8225f9f8
	sub_8225F9F8(ctx, base);
	// lwz r11,428(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 428);
	// lwz r10,424(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 424);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// stw r11,428(r26)
	PPC_STORE_U32(r26.u32 + 428, r11.u32);
	// ble cr6,0x82260270
	if (!cr6.getGT()) goto loc_82260270;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260270:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r11,0(r18)
	PPC_STORE_U32(r18.u32 + 0, r11.u32);
	// stw r31,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r31.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x823ed158
	return;
}

__attribute__((alias("__imp__sub_82260288"))) PPC_WEAK_FUNC(sub_82260288);
PPC_FUNC_IMPL(__imp__sub_82260288) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-1
	r11.s64 = -65536;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// ori r11,r11,512
	r11.u64 = r11.u64 | 512;
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r23,r7
	r23.u64 = ctx.r7.u64;
	// cmplw cr6,r25,r11
	cr6.compare<uint32_t>(r25.u32, r11.u32, xer);
	// bge cr6,0x822602bc
	if (!cr6.getLT()) goto loc_822602BC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822602BC:
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// li r27,1
	r27.s64 = 1;
	// lwz r31,0(r23)
	r31.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// addi r26,r11,4
	r26.s64 = r11.s64 + 4;
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// cmplwi cr6,r10,28
	cr6.compare<uint32_t>(ctx.r10.u32, 28, xer);
	// bne cr6,0x822602f8
	if (!cr6.getEQ()) goto loc_822602F8;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x822602f4
	if (!cr6.getEQ()) goto loc_822602F4;
	// li r28,43
	r28.s64 = 43;
	// stw r27,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r27.u32);
	// b 0x82260304
	goto loc_82260304;
loc_822602F4:
	// li r28,83
	r28.s64 = 83;
loc_822602F8:
	// cmplwi cr6,r10,96
	cr6.compare<uint32_t>(ctx.r10.u32, 96, xer);
	// bgt cr6,0x82260750
	if (cr6.getGT()) goto loc_82260750;
	// beq cr6,0x82260710
	if (cr6.getEQ()) goto loc_82260710;
loc_82260304:
	// addi r11,r10,-25
	r11.s64 = ctx.r10.s64 + -25;
	// cmplwi cr6,r11,19
	cr6.compare<uint32_t>(r11.u32, 19, xer);
	// bgt cr6,0x82260750
	if (cr6.getGT()) goto loc_82260750;
	// lis r12,-32251
	r12.s64 = -2113601536;
	// addi r12,r12,-8968
	r12.s64 = r12.s64 + -8968;
	// rlwinm r0,r11,1,0,30
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r0,r12,r0
	r0.u64 = PPC_LOAD_U16(r12.u32 + r0.u32);
	// lis r12,-32218
	r12.s64 = -2111438848;
	// addi r12,r12,824
	r12.s64 = r12.s64 + 824;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82260338;
	case 1:
		goto loc_822603A0;
	case 2:
		goto loc_82260578;
	case 3:
		goto loc_82260568;
	case 4:
		goto loc_82260568;
	case 5:
		goto loc_82260604;
	case 6:
		goto loc_82260750;
	case 7:
		goto loc_82260750;
	case 8:
		goto loc_82260750;
	case 9:
		goto loc_82260750;
	case 10:
		goto loc_82260750;
	case 11:
		goto loc_82260750;
	case 12:
		goto loc_82260750;
	case 13:
		goto loc_822605A4;
	case 14:
		goto loc_82260568;
	case 15:
		goto loc_82260668;
	case 16:
		goto loc_82260750;
	case 17:
		goto loc_822604D0;
	case 18:
		goto loc_82260520;
	case 19:
		goto loc_82260568;
	default:
		__builtin_unreachable();
	}
loc_82260338:
	// clrlwi r11,r28,16
	r11.u64 = r28.u32 & 0xFFFF;
	// addi r30,r31,4
	r30.s64 = r31.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// clrlwi r31,r11,21
	r31.u64 = r11.u32 & 0x7FF;
	// rlwimi r10,r11,12,21,23
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 12) & 0x700) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r10,0,19,23
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,4608
	cr6.compare<uint32_t>(r11.u32, 4608, xer);
	// beq cr6,0x82260368
	if (cr6.getEQ()) goto loc_82260368;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260368:
	// cmplwi cr6,r31,2048
	cr6.compare<uint32_t>(r31.u32, 2048, xer);
	// blt cr6,0x82260374
	if (cr6.getLT()) goto loc_82260374;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260374:
	// cmplwi cr6,r31,16
	cr6.compare<uint32_t>(r31.u32, 16, xer);
	// blt cr6,0x82260390
	if (cr6.getLT()) goto loc_82260390;
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,768
	r11.u64 = r11.u64 | 768;
	// cmplw cr6,r25,r11
	cr6.compare<uint32_t>(r25.u32, r11.u32, xer);
	// bge cr6,0x82260390
	if (!cr6.getLT()) goto loc_82260390;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260390:
	// clrlwi r11,r31,16
	r11.u64 = r31.u32 & 0xFFFF;
	// addi r31,r30,4
	r31.s64 = r30.s64 + 4;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// b 0x82260754
	goto loc_82260754;
loc_822603A0:
	// addi r11,r26,4
	r11.s64 = r26.s64 + 4;
	// lwz r28,0(r26)
	r28.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r26,r11,4
	r26.s64 = r11.s64 + 4;
	// lwz r29,0(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mr r11,r29
	r11.u64 = r29.u64;
	// rlwimi r11,r29,12,21,23
	r11.u64 = (__builtin_rotateleft32(r29.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r27,r11,24,27,31
	r27.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0x1F;
	// cmplwi cr6,r27,14
	cr6.compare<uint32_t>(r27.u32, 14, xer);
	// beq cr6,0x822603d0
	if (cr6.getEQ()) goto loc_822603D0;
	// cmplwi cr6,r27,19
	cr6.compare<uint32_t>(r27.u32, 19, xer);
	// beq cr6,0x822603d0
	if (cr6.getEQ()) goto loc_822603D0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822603D0:
	// rlwinm r11,r29,0,18,18
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,8192
	cr6.compare<uint32_t>(r11.u32, 8192, xer);
	// bne cr6,0x822603e0
	if (!cr6.getEQ()) goto loc_822603E0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822603E0:
	// mr r11,r28
	r11.u64 = r28.u64;
	// clrlwi r30,r28,21
	r30.u64 = r28.u32 & 0x7FF;
	// rlwimi r11,r28,12,21,23
	r11.u64 = (__builtin_rotateleft32(r28.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,4608
	cr6.compare<uint32_t>(r11.u32, 4608, xer);
	// beq cr6,0x822603fc
	if (cr6.getEQ()) goto loc_822603FC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822603FC:
	// cmplwi cr6,r30,2048
	cr6.compare<uint32_t>(r30.u32, 2048, xer);
	// blt cr6,0x82260408
	if (cr6.getLT()) goto loc_82260408;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260408:
	// cmplwi cr6,r30,16
	cr6.compare<uint32_t>(r30.u32, 16, xer);
	// blt cr6,0x82260424
	if (cr6.getLT()) goto loc_82260424;
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,768
	r11.u64 = r11.u64 | 768;
	// cmplw cr6,r25,r11
	cr6.compare<uint32_t>(r25.u32, r11.u32, xer);
	// bge cr6,0x82260424
	if (!cr6.getLT()) goto loc_82260424;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260424:
	// cmplwi cr6,r27,19
	cr6.compare<uint32_t>(r27.u32, 19, xer);
	// bne cr6,0x82260458
	if (!cr6.getEQ()) goto loc_82260458;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// li r4,52
	ctx.r4.s64 = 52;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8225f198
	sub_8225F198(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r10,8
	ctx.r10.s64 = 8;
	// clrlwi r9,r30,16
	ctx.r9.u64 = r30.u32 & 0xFFFF;
	// li r8,41
	ctx.r8.s64 = 41;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// b 0x822604bc
	goto loc_822604BC;
loc_82260458:
	// lis r9,3328
	ctx.r9.s64 = 218103808;
	// rlwinm r10,r29,0,4,7
	ctx.r10.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0xF000000;
	// clrlwi r11,r29,21
	r11.u64 = r29.u32 & 0x7FF;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// clrlwi r9,r11,16
	ctx.r9.u64 = r11.u32 & 0xFFFF;
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// bne cr6,0x822604b0
	if (!cr6.getEQ()) goto loc_822604B0;
	// li r10,53
	ctx.r10.s64 = 53;
	// li r8,39
	ctx.r8.s64 = 39;
	// li r7,8
	ctx.r7.s64 = 8;
	// clrlwi r6,r30,16
	ctx.r6.u64 = r30.u32 & 0xFFFF;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// li r10,41
	ctx.r10.s64 = 41;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r6,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r6.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// b 0x82260660
	goto loc_82260660;
loc_822604B0:
	// li r10,9
	ctx.r10.s64 = 9;
	// clrlwi r8,r30,16
	ctx.r8.u64 = r30.u32 & 0xFFFF;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
loc_822604BC:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
loc_822604C8:
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// b 0x82260754
	goto loc_82260754;
loc_822604D0:
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x822604e0
	if (!cr6.getEQ()) goto loc_822604E0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822604E0:
	// addi r3,r29,12
	ctx.r3.s64 = r29.s64 + 12;
	// lwz r4,24(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// bl 0x8225f3b0
	sub_8225F3B0(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x82260568
	if (cr0.getEQ()) goto loc_82260568;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82260568
	if (cr6.getEQ()) goto loc_82260568;
	// li r11,41
	r11.s64 = 41;
	// li r10,53
	ctx.r10.s64 = 53;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lhz r10,6(r3)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r3.u32 + 6);
	// b 0x82260660
	goto loc_82260660;
loc_82260520:
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82260530
	if (!cr6.getEQ()) goto loc_82260530;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260530:
	// addi r3,r29,12
	ctx.r3.s64 = r29.s64 + 12;
	// lwz r4,24(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// bl 0x8225f3b0
	sub_8225F3B0(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x8226055c
	if (cr0.getEQ()) goto loc_8226055C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8226055c
	if (cr6.getEQ()) goto loc_8226055C;
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
loc_8226055C:
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,24(r29)
	PPC_STORE_U32(r29.u32 + 24, r11.u32);
loc_82260568:
	// clrlwi r11,r28,16
	r11.u64 = r28.u32 & 0xFFFF;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// b 0x82260754
	goto loc_82260754;
loc_82260578:
	// lwz r30,0(r26)
	r30.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// mr r11,r30
	r11.u64 = r30.u64;
	// rlwimi r11,r30,12,21,23
	r11.u64 = (__builtin_rotateleft32(r30.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,3840
	cr6.compare<uint32_t>(r11.u32, 3840, xer);
	// beq cr6,0x82260598
	if (cr6.getEQ()) goto loc_82260598;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260598:
	// clrlwi. r11,r30,21
	r11.u64 = r30.u32 & 0x7FF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822605a4
	if (cr0.getEQ()) goto loc_822605A4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822605A4:
	// lwz r30,0(r26)
	r30.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// mr r11,r30
	r11.u64 = r30.u64;
	// rlwimi r11,r30,12,21,23
	r11.u64 = (__builtin_rotateleft32(r30.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,1792
	cr6.compare<uint32_t>(r11.u32, 1792, xer);
	// beq cr6,0x822605c4
	if (cr6.getEQ()) goto loc_822605C4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822605C4:
	// clrlwi r11,r30,21
	r11.u64 = r30.u32 & 0x7FF;
	// cmplwi cr6,r11,16
	cr6.compare<uint32_t>(r11.u32, 16, xer);
	// blt cr6,0x822605d4
	if (cr6.getLT()) goto loc_822605D4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822605D4:
	// clrlwi r11,r28,16
	r11.u64 = r28.u32 & 0xFFFF;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8225f870
	sub_8225F870(ctx, base);
loc_822605FC:
	// lwz r31,80(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// b 0x82260754
	goto loc_82260754;
loc_82260604:
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// clrlwi r30,r11,21
	r30.u64 = r11.u32 & 0x7FF;
	// rlwimi r10,r11,12,21,23
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 12) & 0x700) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r10,0,19,23
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,4608
	cr6.compare<uint32_t>(r11.u32, 4608, xer);
	// beq cr6,0x82260628
	if (cr6.getEQ()) goto loc_82260628;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260628:
	// cmplwi cr6,r30,2048
	cr6.compare<uint32_t>(r30.u32, 2048, xer);
	// blt cr6,0x82260634
	if (cr6.getLT()) goto loc_82260634;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260634:
	// cmplwi cr6,r30,16
	cr6.compare<uint32_t>(r30.u32, 16, xer);
	// blt cr6,0x82260650
	if (cr6.getLT()) goto loc_82260650;
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,768
	r11.u64 = r11.u64 | 768;
	// cmplw cr6,r25,r11
	cr6.compare<uint32_t>(r25.u32, r11.u32, xer);
	// bge cr6,0x82260650
	if (!cr6.getLT()) goto loc_82260650;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260650:
	// clrlwi r11,r28,16
	r11.u64 = r28.u32 & 0xFFFF;
	// clrlwi r10,r30,16
	ctx.r10.u64 = r30.u32 & 0xFFFF;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
loc_82260660:
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x822604c8
	goto loc_822604C8;
loc_82260668:
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,24(r29)
	PPC_STORE_U32(r29.u32 + 24, r11.u32);
	// lwz r30,0(r26)
	r30.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// rlwinm r11,r30,0,18,18
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,8192
	cr6.compare<uint32_t>(r11.u32, 8192, xer);
	// bne cr6,0x8226068c
	if (!cr6.getEQ()) goto loc_8226068C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8226068C:
	// mr r11,r30
	r11.u64 = r30.u64;
	// rlwimi r11,r30,12,21,23
	r11.u64 = (__builtin_rotateleft32(r30.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r28,r11,24,27,31
	r28.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0x1F;
	// cmplwi cr6,r28,14
	cr6.compare<uint32_t>(r28.u32, 14, xer);
	// beq cr6,0x822606ac
	if (cr6.getEQ()) goto loc_822606AC;
	// cmplwi cr6,r28,19
	cr6.compare<uint32_t>(r28.u32, 19, xer);
	// beq cr6,0x822606b4
	if (cr6.getEQ()) goto loc_822606B4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822606AC:
	// cmplwi cr6,r28,19
	cr6.compare<uint32_t>(r28.u32, 19, xer);
	// bne cr6,0x822606c0
	if (!cr6.getEQ()) goto loc_822606C0;
loc_822606B4:
	// li r4,52
	ctx.r4.s64 = 52;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// b 0x82260744
	goto loc_82260744;
loc_822606C0:
	// li r11,53
	r11.s64 = 53;
	// rlwinm r10,r30,0,4,7
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0xF000000;
	// lis r9,3328
	ctx.r9.s64 = 218103808;
	// clrlwi r28,r30,21
	r28.u64 = r30.u32 & 0x7FF;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bne cr6,0x82260754
	if (!cr6.getEQ()) goto loc_82260754;
	// li r11,39
	r11.s64 = 39;
	// addi r3,r29,12
	ctx.r3.s64 = r29.s64 + 12;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// lwz r4,24(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// bl 0x8225f558
	sub_8225F558(ctx, base);
	// stw r27,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r27.u32);
	// stw r28,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r28.u32);
	// b 0x82260754
	goto loc_82260754;
loc_82260710:
	// lwz r31,0(r26)
	r31.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// mr r11,r31
	r11.u64 = r31.u64;
	// rlwimi r11,r31,12,21,23
	r11.u64 = (__builtin_rotateleft32(r31.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,4864
	cr6.compare<uint32_t>(r11.u32, 4864, xer);
	// beq cr6,0x82260730
	if (cr6.getEQ()) goto loc_82260730;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260730:
	// clrlwi. r11,r31,21
	r11.u64 = r31.u32 & 0x7FF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8226073c
	if (cr0.getEQ()) goto loc_8226073C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8226073C:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82260744:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// bl 0x8225f198
	sub_8225F198(ctx, base);
	// b 0x822605fc
	goto loc_822605FC;
loc_82260750:
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260754:
	// stw r26,0(r24)
	PPC_STORE_U32(r24.u32 + 0, r26.u32);
	// stw r31,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r31.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_82260768"))) PPC_WEAK_FUNC(sub_82260768);
PPC_FUNC_IMPL(__imp__sub_82260768) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// mr r24,r7
	r24.u64 = ctx.r7.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// clrlwi r31,r30,16
	r31.u64 = r30.u32 & 0xFFFF;
	// lwz r29,0(r25)
	r29.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// li r27,1
	r27.s64 = 1;
	// lwz r28,0(r24)
	r28.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// lhz r11,0(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// clrlwi r11,r11,29
	r11.u64 = r11.u32 & 0x7;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x822607fc
	if (cr6.getEQ()) goto loc_822607FC;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x822607f4
	if (cr6.getEQ()) goto loc_822607F4;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x822607ec
	if (cr6.getEQ()) goto loc_822607EC;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x822607e4
	if (cr6.getEQ()) goto loc_822607E4;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x822607dc
	if (cr6.getEQ()) goto loc_822607DC;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x822607d4
	if (cr6.getEQ()) goto loc_822607D4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x82260804
	goto loc_82260804;
loc_822607D4:
	// rlwimi r31,r27,18,13,15
	r31.u64 = (__builtin_rotateleft32(r27.u32, 18) & 0x70000) | (r31.u64 & 0xFFFFFFFFFFF8FFFF);
	// b 0x82260804
	goto loc_82260804;
loc_822607DC:
	// rlwinm r31,r31,0,16,12
	r31.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xFFFFFFFFFFF8FFFF;
	// b 0x82260804
	goto loc_82260804;
loc_822607E4:
	// li r11,5
	r11.s64 = 5;
	// b 0x82260800
	goto loc_82260800;
loc_822607EC:
	// rlwimi r31,r27,17,13,15
	r31.u64 = (__builtin_rotateleft32(r27.u32, 17) & 0x70000) | (r31.u64 & 0xFFFFFFFFFFF8FFFF);
	// b 0x82260804
	goto loc_82260804;
loc_822607F4:
	// rlwimi r31,r27,16,13,15
	r31.u64 = (__builtin_rotateleft32(r27.u32, 16) & 0x70000) | (r31.u64 & 0xFFFFFFFFFFF8FFFF);
	// b 0x82260804
	goto loc_82260804;
loc_822607FC:
	// li r11,3
	r11.s64 = 3;
loc_82260800:
	// rlwimi r31,r11,16,13,15
	r31.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x70000) | (r31.u64 & 0xFFFFFFFFFFF8FFFF);
loc_82260804:
	// stw r31,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r31.u32);
	// addi r31,r28,4
	r31.s64 = r28.s64 + 4;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// cmpwi cr6,r30,86
	cr6.compare<int32_t>(r30.s32, 86, xer);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// bne cr6,0x822608b4
	if (!cr6.getEQ()) goto loc_822608B4;
	// lwz r30,0(r29)
	r30.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// mr r11,r30
	r11.u64 = r30.u64;
	// rlwimi r11,r30,12,21,23
	r11.u64 = (__builtin_rotateleft32(r30.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,4864
	cr6.compare<uint32_t>(r11.u32, 4864, xer);
	// beq cr6,0x8226083c
	if (cr6.getEQ()) goto loc_8226083C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8226083C:
	// rlwinm r10,r30,0,12,15
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0xF0000;
	// lis r11,15
	r11.s64 = 983040;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x82260860
	if (!cr6.getEQ()) goto loc_82260860;
	// lis r11,4
	r11.s64 = 262144;
	// ori r11,r11,32
	r11.u64 = r11.u64 | 32;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// b 0x822608ac
	goto loc_822608AC;
loc_82260860:
	// lis r11,68
	r11.s64 = 4456448;
	// rlwinm. r8,r10,0,15,15
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ori r9,r11,32
	ctx.r9.u64 = r11.u64 | 32;
	// li r11,0
	r11.s64 = 0;
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// addi r9,r31,4
	ctx.r9.s64 = r31.s64 + 4;
	// beq 0x82260880
	if (cr0.getEQ()) goto loc_82260880;
	// mr r11,r27
	r11.u64 = r27.u64;
loc_82260880:
	// rlwinm. r8,r10,0,14,14
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq 0x8226088c
	if (cr0.getEQ()) goto loc_8226088C;
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
loc_8226088C:
	// rlwinm. r8,r10,0,13,13
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq 0x82260898
	if (cr0.getEQ()) goto loc_82260898;
	// ori r11,r11,16
	r11.u64 = r11.u64 | 16;
loc_82260898:
	// rlwinm. r10,r10,0,12,12
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x822608a4
	if (cr0.getEQ()) goto loc_822608A4;
	// ori r11,r11,64
	r11.u64 = r11.u64 | 64;
loc_822608A4:
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// addi r31,r9,4
	r31.s64 = ctx.r9.s64 + 4;
loc_822608AC:
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// b 0x822608c8
	goto loc_822608C8;
loc_822608B4:
	// cmpwi cr6,r30,52
	cr6.compare<int32_t>(r30.s32, 52, xer);
	// bne cr6,0x822608c8
	if (!cr6.getEQ()) goto loc_822608C8;
	// lwz r11,24(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,24(r26)
	PPC_STORE_U32(r26.u32 + 24, r11.u32);
loc_822608C8:
	// lwz r30,0(r29)
	r30.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// rlwinm. r11,r30,0,0,0
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82260924
	if (cr0.getEQ()) goto loc_82260924;
loc_822608D4:
	// rlwinm r11,r30,0,18,18
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x2000;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// cmplwi cr6,r11,8192
	cr6.compare<uint32_t>(r11.u32, 8192, xer);
	// bne cr6,0x82260900
	if (!cr6.getEQ()) goto loc_82260900;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822608f8
	if (!cr0.getEQ()) goto loc_822608F8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822608F8:
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
loc_82260900:
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// lwz r30,0(r29)
	r30.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// rlwinm. r11,r30,0,0,0
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822608d4
	if (!cr0.getEQ()) goto loc_822608D4;
	// lwz r31,80(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82260924:
	// stw r29,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r29.u32);
	// stw r31,0(r24)
	PPC_STORE_U32(r24.u32 + 0, r31.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_82260938"))) PPC_WEAK_FUNC(sub_82260938);
PPC_FUNC_IMPL(__imp__sub_82260938) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-1
	r11.s64 = -65536;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// ori r11,r11,512
	r11.u64 = r11.u64 | 512;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r24,r7
	r24.u64 = ctx.r7.u64;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// blt cr6,0x82260968
	if (cr6.getLT()) goto loc_82260968;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260968:
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// lis r10,-1
	ctx.r10.s64 = -65536;
	// lwz r30,0(r24)
	r30.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// ori r10,r10,259
	ctx.r10.u64 = ctx.r10.u64 | 259;
	// addi r26,r11,4
	r26.s64 = r11.s64 + 4;
	// cmplw cr6,r29,r10
	cr6.compare<uint32_t>(r29.u32, ctx.r10.u32, xer);
	// lwz r31,0(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r28,r31,21
	r28.u64 = r31.u32 & 0x7FF;
	// bgt cr6,0x82260a1c
	if (cr6.getGT()) goto loc_82260A1C;
	// rlwinm r11,r31,0,12,15
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0xF0000;
	// li r29,256
	r29.s64 = 256;
	// rlwinm. r10,r11,0,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x822609a4
	if (cr0.getEQ()) goto loc_822609A4;
	// li r29,257
	r29.s64 = 257;
loc_822609A4:
	// rlwinm. r10,r11,0,14,14
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x822609b0
	if (cr0.getEQ()) goto loc_822609B0;
	// ori r29,r29,4
	r29.u64 = r29.u64 | 4;
loc_822609B0:
	// rlwinm. r11,r11,0,13,13
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822609bc
	if (cr0.getEQ()) goto loc_822609BC;
	// ori r29,r29,16
	r29.u64 = r29.u64 | 16;
loc_822609BC:
	// rlwinm r3,r31,8,28,31
	ctx.r3.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 8) & 0xF;
	// bl 0x8225eef8
	sub_8225EEF8(ctx, base);
	// mr r11,r31
	r11.u64 = r31.u64;
	// or r10,r3,r29
	ctx.r10.u64 = ctx.r3.u64 | r29.u64;
	// rlwimi r11,r31,12,21,23
	r11.u64 = (__builtin_rotateleft32(r31.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// ori r31,r10,192
	r31.u64 = ctx.r10.u64 | 192;
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,768
	cr6.compare<uint32_t>(r11.u32, 768, xer);
	// beq cr6,0x822609e4
	if (cr6.getEQ()) goto loc_822609E4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822609E4:
	// li r10,71
	ctx.r10.s64 = 71;
	// clrlwi r11,r28,16
	r11.u64 = r28.u32 & 0xFFFF;
	// oris r9,r11,81
	ctx.r9.u64 = r11.u64 | 5308416;
	// oris r8,r11,17
	ctx.r8.u64 = r11.u64 | 1114112;
	// stw r10,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r10.u32);
	// addi r10,r30,4
	ctx.r10.s64 = r30.s64 + 4;
	// addi r11,r10,4
	r11.s64 = ctx.r10.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// b 0x82260a88
	goto loc_82260A88;
loc_82260A1C:
	// lwz r28,0(r26)
	r28.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// mr r11,r28
	r11.u64 = r28.u64;
	// rlwimi r11,r28,12,21,23
	r11.u64 = (__builtin_rotateleft32(r28.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,768
	cr6.compare<uint32_t>(r11.u32, 768, xer);
	// beq cr6,0x82260a3c
	if (cr6.getEQ()) goto loc_82260A3C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260A3C:
	// li r11,71
	r11.s64 = 71;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8225f778
	sub_8225F778(ctx, base);
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,260
	r11.u64 = r11.u64 | 260;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// beq cr6,0x82260a88
	if (cr6.getEQ()) goto loc_82260A88;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260A88:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r11,0(r24)
	PPC_STORE_U32(r24.u32 + 0, r11.u32);
	// stw r26,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r26.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_82260AA0"))) PPC_WEAK_FUNC(sub_82260AA0);
PPC_FUNC_IMPL(__imp__sub_82260AA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// mr r22,r7
	r22.u64 = ctx.r7.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// lwz r11,0(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// lwz r31,0(r22)
	r31.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// addi r30,r11,4
	r30.s64 = r11.s64 + 4;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r27,r10,0,3,3
	r27.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x10000000;
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82260ae0
	if (!cr0.getEQ()) goto loc_82260AE0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260AE0:
	// lis r11,-1
	r11.s64 = -65536;
	// lwz r29,0(r30)
	r29.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r24,r30,4
	r24.s64 = r30.s64 + 4;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// ori r30,r11,512
	r30.u64 = r11.u64 | 512;
	// beq cr6,0x82260b20
	if (cr6.getEQ()) goto loc_82260B20;
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82260b08
	if (!cr0.getEQ()) goto loc_82260B08;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260B08:
	// cmplw cr6,r26,r30
	cr6.compare<uint32_t>(r26.u32, r30.u32, xer);
	// bge cr6,0x82260b14
	if (!cr6.getLT()) goto loc_82260B14;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260B14:
	// lwz r25,0(r24)
	r25.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// addi r24,r24,4
	r24.s64 = r24.s64 + 4;
	// b 0x82260b24
	goto loc_82260B24;
loc_82260B20:
	// lwz r25,80(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82260B24:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,259
	r11.u64 = r11.u64 | 259;
	// cmplw cr6,r26,r11
	cr6.compare<uint32_t>(r26.u32, r11.u32, xer);
	// bgt cr6,0x82260b40
	if (cr6.getGT()) goto loc_82260B40;
	// clrlwi r3,r29,21
	ctx.r3.u64 = r29.u32 & 0x7FF;
	// li r7,17
	ctx.r7.s64 = 17;
	// b 0x82260b54
	goto loc_82260B54;
loc_82260B40:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8225f5f0
	sub_8225F5F0(ctx, base);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82260B54:
	// cmplw cr6,r26,r30
	cr6.compare<uint32_t>(r26.u32, r30.u32, xer);
	// bge cr6,0x82260b8c
	if (!cr6.getLT()) goto loc_82260B8C;
	// li r11,55
	r11.s64 = 55;
	// lis r10,64
	ctx.r10.s64 = 4194304;
	// clrlwi r9,r3,16
	ctx.r9.u64 = ctx.r3.u32 & 0xFFFF;
	// rlwimi r10,r7,16,10,15
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r7.u32, 16) & 0x3F0000) | (ctx.r10.u64 & 0xFFFFFFFFFFC0FFFF);
	// li r8,21008
	ctx.r8.s64 = 21008;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// b 0x82260ca8
	goto loc_82260CA8;
loc_82260B8C:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x82260c90
	if (cr6.getEQ()) goto loc_82260C90;
	// lis r11,1
	r11.s64 = 65536;
	// lis r9,4
	ctx.r9.s64 = 262144;
	// ori r10,r11,13
	ctx.r10.u64 = r11.u64 | 13;
	// ori r9,r9,33
	ctx.r9.u64 = ctx.r9.u64 | 33;
	// rlwinm r11,r25,0,8,15
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0xFF0000;
	// lis r8,228
	ctx.r8.s64 = 14942208;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// addi r10,r31,4
	ctx.r10.s64 = r31.s64 + 4;
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r9,r10,4
	ctx.r9.s64 = ctx.r10.s64 + 4;
	// beq cr6,0x82260c24
	if (cr6.getEQ()) goto loc_82260C24;
	// lis r8,68
	ctx.r8.s64 = 4456448;
	// rlwinm r10,r11,16,16,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// ori r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 | 32;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r11,r11,-23316
	r11.s64 = r11.s64 + -23316;
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// rlwinm r8,r10,2,28,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// rlwinm r6,r10,2,28,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// lwzx r6,r6,r11
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// rlwinm r6,r6,4,0,27
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 4) & 0xFFFFFFF0;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// rlwinm r6,r10,2,28,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,0,28,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xC;
	// lwzx r6,r6,r11
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + r11.u32);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwinm r10,r6,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 8) & 0xFFFFFF00;
	// rlwinm r6,r11,12,0,19
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xFFFFF000;
	// or r11,r10,r8
	r11.u64 = ctx.r10.u64 | ctx.r8.u64;
	// or r11,r6,r11
	r11.u64 = ctx.r6.u64 | r11.u64;
	// b 0x82260c2c
	goto loc_82260C2C;
loc_82260C24:
	// lis r11,4
	r11.s64 = 262144;
	// ori r11,r11,32
	r11.u64 = r11.u64 | 32;
loc_82260C2C:
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// addi r11,r9,4
	r11.s64 = ctx.r9.s64 + 4;
	// rlwinm r10,r25,0,4,7
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0xF000000;
	// lis r9,3328
	ctx.r9.s64 = 218103808;
	// rlwimi r3,r7,16,10,15
	ctx.r3.u64 = (__builtin_rotateleft32(ctx.r7.u32, 16) & 0x3F0000) | (ctx.r3.u64 & 0xFFFFFFFFFFC0FFFF);
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// lis r10,65
	ctx.r10.s64 = 4259840;
	// li r9,21845
	ctx.r9.s64 = 21845;
	// bne cr6,0x82260c6c
	if (!cr6.getEQ()) goto loc_82260C6C;
	// clrlwi r8,r3,10
	ctx.r8.u64 = ctx.r3.u32 & 0x3FFFFF;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// b 0x82260c84
	goto loc_82260C84;
loc_82260C6C:
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// clrlwi r10,r3,10
	ctx.r10.u64 = ctx.r3.u32 & 0x3FFFFF;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_82260C84:
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// li r3,33
	ctx.r3.s64 = 33;
	// li r7,4
	ctx.r7.s64 = 4;
loc_82260C90:
	// li r11,55
	r11.s64 = 55;
	// rlwimi r3,r7,16,10,15
	ctx.r3.u64 = (__builtin_rotateleft32(ctx.r7.u32, 16) & 0x3F0000) | (ctx.r3.u64 & 0xFFFFFFFFFFC0FFFF);
	// clrlwi r10,r3,10
	ctx.r10.u64 = ctx.r3.u32 & 0x3FFFFF;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_82260CA8:
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r11.u32);
	// stw r24,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r24.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_82260CC0"))) PPC_WEAK_FUNC(sub_82260CC0);
PPC_FUNC_IMPL(__imp__sub_82260CC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// lwz r19,0(r7)
	r19.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// mr r17,r4
	r17.u64 = ctx.r4.u64;
	// stw r7,308(r1)
	PPC_STORE_U32(ctx.r1.u32 + 308, ctx.r7.u32);
	// mr r23,r6
	r23.u64 = ctx.r6.u64;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// stw r27,276(r1)
	PPC_STORE_U32(ctx.r1.u32 + 276, r27.u32);
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r14,r10,0,3,3
	r14.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x10000000;
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82260d04
	if (!cr0.getEQ()) goto loc_82260D04;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260D04:
	// lwz r24,0(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r20,r31,4
	r20.s64 = r31.s64 + 4;
	// lwz r11,4(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 4);
	// li r21,0
	r21.s64 = 0;
	// mr r15,r24
	r15.u64 = r24.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82260d28
	if (!cr6.getEQ()) goto loc_82260D28;
	// mr r29,r21
	r29.u64 = r21.u64;
	// b 0x82260d38
	goto loc_82260D38;
loc_82260D28:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// li r29,1
	r29.s64 = 1;
	// beq cr6,0x82260d38
	if (cr6.getEQ()) goto loc_82260D38;
	// rlwinm r29,r24,10,31,31
	r29.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 10) & 0x1;
loc_82260D38:
	// lis r11,-1
	r11.s64 = -65536;
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// ori r22,r11,512
	r22.u64 = r11.u64 | 512;
	// lis r11,15
	r11.s64 = 983040;
	// ori r18,r11,33
	r18.u64 = r11.u64 | 33;
	// beq cr6,0x82260d88
	if (cr6.getEQ()) goto loc_82260D88;
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82260d60
	if (!cr0.getEQ()) goto loc_82260D60;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260D60:
	// cmplw cr6,r17,r22
	cr6.compare<uint32_t>(r17.u32, r22.u32, xer);
	// bge cr6,0x82260d6c
	if (!cr6.getLT()) goto loc_82260D6C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260D6C:
	// lis r12,-28673
	r12.s64 = -1879113728;
	// lwz r16,0(r20)
	r16.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// addi r20,r20,4
	r20.s64 = r20.s64 + 4;
	// ori r12,r12,57377
	r12.u64 = r12.u64 | 57377;
	// and r11,r24,r12
	r11.u64 = r24.u64 & r12.u64;
	// or r24,r11,r18
	r24.u64 = r11.u64 | r18.u64;
	// b 0x82260d8c
	goto loc_82260D8C;
loc_82260D88:
	// lwz r16,80(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82260D8C:
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mr r25,r21
	r25.u64 = r21.u64;
	// mr r28,r21
	r28.u64 = r21.u64;
	// stw r21,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r21.u32);
	// stw r25,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r25.u32);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82260e20
	if (cr0.getEQ()) goto loc_82260E20;
	// mr r31,r21
	r31.u64 = r21.u64;
loc_82260DAC:
	// cmplwi cr6,r28,2
	cr6.compare<uint32_t>(r28.u32, 2, xer);
	// blt cr6,0x82260db8
	if (cr6.getLT()) goto loc_82260DB8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260DB8:
	// lwz r10,0(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// addi r11,r1,88
	r11.s64 = ctx.r1.s64 + 88;
	// addi r30,r1,80
	r30.s64 = ctx.r1.s64 + 80;
	// addi r20,r20,4
	r20.s64 = r20.s64 + 4;
	// stwx r10,r31,r11
	PPC_STORE_U32(r31.u32 + r11.u32, ctx.r10.u32);
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// stwx r21,r31,r30
	PPC_STORE_U32(r31.u32 + r30.u32, r21.u32);
	// rlwinm r11,r11,0,18,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,8192
	cr6.compare<uint32_t>(r11.u32, 8192, xer);
	// bne cr6,0x82260e08
	if (!cr6.getEQ()) goto loc_82260E08;
	// cmplw cr6,r17,r22
	cr6.compare<uint32_t>(r17.u32, r22.u32, xer);
	// bgt cr6,0x82260dec
	if (cr6.getGT()) goto loc_82260DEC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260DEC:
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82260dfc
	if (!cr0.getEQ()) goto loc_82260DFC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260DFC:
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// addi r20,r20,4
	r20.s64 = r20.s64 + 4;
	// stwx r11,r31,r30
	PPC_STORE_U32(r31.u32 + r30.u32, r11.u32);
loc_82260E08:
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82260dac
	if (!cr0.getEQ()) goto loc_82260DAC;
	// lwz r25,80(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82260E20:
	// lwz r30,92(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mr r26,r21
	r26.u64 = r21.u64;
	// cmplwi cr6,r28,2
	cr6.compare<uint32_t>(r28.u32, 2, xer);
	// blt cr6,0x82260e50
	if (cr6.getLT()) goto loc_82260E50;
	// cmplw cr6,r17,r22
	cr6.compare<uint32_t>(r17.u32, r22.u32, xer);
	// bge cr6,0x82260e3c
	if (!cr6.getLT()) goto loc_82260E3C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260E3C:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// clrlwi r31,r30,21
	r31.u64 = r30.u32 & 0x7FF;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r26,r11,0,8,15
	r26.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFF0000;
	// b 0x82260e54
	goto loc_82260E54;
loc_82260E50:
	// clrlwi r31,r15,21
	r31.u64 = r15.u32 & 0x7FF;
loc_82260E54:
	// mr r11,r31
	r11.u64 = r31.u64;
	// rlwinm. r27,r26,0,14,14
	r27.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 0) & 0x20000;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// lis r10,2048
	ctx.r10.s64 = 134217728;
	// rlwimi r11,r29,8,23,23
	r11.u64 = (__builtin_rotateleft32(r29.u32, 8) & 0x100) | (r11.u64 & 0xFFFFFFFFFFFFFEFF);
	// beq 0x82260e70
	if (cr0.getEQ()) goto loc_82260E70;
	// ori r10,r10,94
	ctx.r10.u64 = ctx.r10.u64 | 94;
	// b 0x82260e74
	goto loc_82260E74;
loc_82260E70:
	// ori r10,r10,93
	ctx.r10.u64 = ctx.r10.u64 | 93;
loc_82260E74:
	// rlwimi r10,r11,16,7,15
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x1FF0000) | (ctx.r10.u64 & 0xFFFFFFFFFE00FFFF);
	// addi r11,r19,4
	r11.s64 = r19.s64 + 4;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// stw r10,0(r19)
	PPC_STORE_U32(r19.u32 + 0, ctx.r10.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bne cr6,0x82260ee8
	if (!cr6.getEQ()) goto loc_82260EE8;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82260e98
	if (cr6.getEQ()) goto loc_82260E98;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260E98:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,260
	r11.u64 = r11.u64 | 260;
	// cmplw cr6,r17,r11
	cr6.compare<uint32_t>(r17.u32, r11.u32, xer);
	// blt cr6,0x82260eac
	if (cr6.getLT()) goto loc_82260EAC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260EAC:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// bl 0x8225f778
	sub_8225F778(ctx, base);
	// li r11,81
	r11.s64 = 81;
	// lis r10,128
	ctx.r10.s64 = 8388608;
	// rlwimi r31,r11,16,0,15
	r31.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0xFFFF0000) | (r31.u64 & 0xFFFFFFFF0000FFFF);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// ori r10,r10,12816
	ctx.r10.u64 = ctx.r10.u64 | 12816;
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// b 0x8226103c
	goto loc_8226103C;
loc_82260EE8:
	// cmplwi cr6,r28,1
	cr6.compare<uint32_t>(r28.u32, 1, xer);
	// bne cr6,0x82260f3c
	if (!cr6.getEQ()) goto loc_82260F3C;
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,260
	r11.u64 = r11.u64 | 260;
	// cmplw cr6,r17,r11
	cr6.compare<uint32_t>(r17.u32, r11.u32, xer);
	// beq cr6,0x82260f04
	if (cr6.getEQ()) goto loc_82260F04;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260F04:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82260f10
	if (cr6.getEQ()) goto loc_82260F10;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260F10:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// bl 0x8225f778
	sub_8225F778(ctx, base);
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// b 0x8226103c
	goto loc_8226103C;
loc_82260F3C:
	// rlwinm r29,r30,0,8,15
	r29.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0xFF0000;
	// mr r30,r21
	r30.u64 = r21.u64;
	// cmplwi cr6,r28,2
	cr6.compare<uint32_t>(r28.u32, 2, xer);
	// beq cr6,0x82260f50
	if (cr6.getEQ()) goto loc_82260F50;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260F50:
	// cmplw cr6,r17,r22
	cr6.compare<uint32_t>(r17.u32, r22.u32, xer);
	// bge cr6,0x82260f5c
	if (!cr6.getLT()) goto loc_82260F5C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260F5C:
	// lis r28,228
	r28.s64 = 14942208;
	// cmplw cr6,r29,r28
	cr6.compare<uint32_t>(r29.u32, r28.u32, xer);
	// beq cr6,0x82260f84
	if (cr6.getEQ()) goto loc_82260F84;
	// oris r24,r24,15
	r24.u64 = r24.u64 | 983040;
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// bne cr6,0x82260f84
	if (!cr6.getEQ()) goto loc_82260F84;
	// lis r12,-28673
	r12.s64 = -1879113728;
	// ori r12,r12,57377
	r12.u64 = r12.u64 | 57377;
	// and r11,r24,r12
	r11.u64 = r24.u64 & r12.u64;
	// or r24,r11,r18
	r24.u64 = r11.u64 | r18.u64;
loc_82260F84:
	// rlwinm. r11,r26,0,15,15
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82260f90
	if (cr0.getEQ()) goto loc_82260F90;
	// lis r30,96
	r30.s64 = 6291456;
loc_82260F90:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x8225f778
	sub_8225F778(ctx, base);
	// lwz r31,88(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82260ff8
	if (cr6.getEQ()) goto loc_82260FF8;
	// andis. r11,r31,2816
	r11.u64 = r31.u64 & 184549376;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82260fd4
	if (cr0.getEQ()) goto loc_82260FD4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260FD4:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82260fe0
	if (cr6.getEQ()) goto loc_82260FE0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82260FE0:
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
loc_82260FF8:
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// beq cr6,0x8226101c
	if (cr6.getEQ()) goto loc_8226101C;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r16
	ctx.r4.u64 = r16.u64;
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// bl 0x8225fad0
	sub_8225FAD0(ctx, base);
	// b 0x8226103c
	goto loc_8226103C;
loc_8226101C:
	// cmplw cr6,r29,r28
	cr6.compare<uint32_t>(r29.u32, r28.u32, xer);
	// beq cr6,0x8226103c
	if (cr6.getEQ()) goto loc_8226103C;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// bl 0x8225fcc0
	sub_8225FCC0(ctx, base);
loc_8226103C:
	// lwz r11,308(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 308);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r11,276(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 276);
	// stw r20,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r20.u32);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_82261058"))) PPC_WEAK_FUNC(sub_82261058);
PPC_FUNC_IMPL(__imp__sub_82261058) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed108
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r22,r6
	r22.u64 = ctx.r6.u64;
	// mr r17,r3
	r17.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r16,r7
	r16.u64 = ctx.r7.u64;
	// lwz r11,4(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 4);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82261088
	if (!cr6.getEQ()) goto loc_82261088;
	// li r20,0
	r20.s64 = 0;
	// b 0x82261094
	goto loc_82261094;
loc_82261088:
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r20,r11,27,31,31
	r20.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
loc_82261094:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r30,r11,512
	r30.u64 = r11.u64 | 512;
	// cmplw cr6,r28,r30
	cr6.compare<uint32_t>(r28.u32, r30.u32, xer);
	// bge cr6,0x822610a8
	if (!cr6.getLT()) goto loc_822610A8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822610A8:
	// lwz r11,0(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 0);
	// lwz r26,0(r16)
	r26.u64 = PPC_LOAD_U32(r16.u32 + 0);
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r21,r10,0,3,3
	r21.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x10000000;
	// clrlwi r23,r10,16
	r23.u64 = ctx.r10.u32 & 0xFFFF;
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822610d0
	if (!cr0.getEQ()) goto loc_822610D0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822610D0:
	// lwz r27,0(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lis r11,15
	r11.s64 = 983040;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// addi r29,r31,4
	r29.s64 = r31.s64 + 4;
	// mr r18,r27
	r18.u64 = r27.u64;
	// ori r24,r11,33
	r24.u64 = r11.u64 | 33;
	// beq cr6,0x82261124
	if (cr6.getEQ()) goto loc_82261124;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822610fc
	if (!cr0.getEQ()) goto loc_822610FC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822610FC:
	// cmplw cr6,r28,r30
	cr6.compare<uint32_t>(r28.u32, r30.u32, xer);
	// bgt cr6,0x82261108
	if (cr6.getGT()) goto loc_82261108;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261108:
	// lis r12,-28673
	r12.s64 = -1879113728;
	// lwz r19,0(r29)
	r19.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// ori r12,r12,57377
	r12.u64 = r12.u64 | 57377;
	// and r11,r27,r12
	r11.u64 = r27.u64 & r12.u64;
	// or r27,r11,r24
	r27.u64 = r11.u64 | r24.u64;
	// b 0x82261128
	goto loc_82261128;
loc_82261124:
	// lwz r19,80(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82261128:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// li r25,0
	r25.s64 = 0;
	// rlwinm. r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x822611a0
	if (cr0.getEQ()) goto loc_822611A0;
	// li r31,0
	r31.s64 = 0;
loc_8226113C:
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// addi r30,r1,112
	r30.s64 = ctx.r1.s64 + 112;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// stwx r11,r31,r10
	PPC_STORE_U32(r31.u32 + ctx.r10.u32, r11.u32);
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// li r10,0
	ctx.r10.s64 = 0;
	// rlwinm r11,r11,0,18,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,8192
	cr6.compare<uint32_t>(r11.u32, 8192, xer);
	// stwx r10,r31,r30
	PPC_STORE_U32(r31.u32 + r30.u32, ctx.r10.u32);
	// bne cr6,0x82261180
	if (!cr6.getEQ()) goto loc_82261180;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82261174
	if (!cr0.getEQ()) goto loc_82261174;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261174:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// stwx r11,r31,r30
	PPC_STORE_U32(r31.u32 + r30.u32, r11.u32);
loc_82261180:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// rlwinm. r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8226113c
	if (!cr0.getEQ()) goto loc_8226113C;
	// cmplwi cr6,r25,4
	cr6.compare<uint32_t>(r25.u32, 4, xer);
	// ble cr6,0x822611a0
	if (!cr6.getGT()) goto loc_822611A0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822611A0:
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmplwi cr6,r23,95
	cr6.compare<uint32_t>(r23.u32, 95, xer);
	// clrlwi r11,r10,21
	r11.u64 = ctx.r10.u32 & 0x7FF;
	// rlwimi r11,r20,8,23,23
	r11.u64 = (__builtin_rotateleft32(r20.u32, 8) & 0x100) | (r11.u64 & 0xFFFFFFFFFFFFFEFF);
	// bne cr6,0x822611c0
	if (!cr6.getEQ()) goto loc_822611C0;
	// lis r9,2560
	ctx.r9.s64 = 167772160;
	// ori r9,r9,94
	ctx.r9.u64 = ctx.r9.u64 | 94;
	// b 0x822611c8
	goto loc_822611C8;
loc_822611C0:
	// lis r9,2048
	ctx.r9.s64 = 134217728;
	// ori r9,r9,95
	ctx.r9.u64 = ctx.r9.u64 | 95;
loc_822611C8:
	// rlwimi r9,r11,16,7,15
	ctx.r9.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x1FF0000) | (ctx.r9.u64 & 0xFFFFFFFFFE00FFFF);
	// addi r11,r26,4
	r11.s64 = r26.s64 + 4;
	// rlwinm r28,r10,0,8,15
	r28.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFF0000;
	// stw r9,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r9.u32);
	// lis r26,228
	r26.s64 = 14942208;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// cmplw cr6,r28,r26
	cr6.compare<uint32_t>(r28.u32, r26.u32, xer);
	// beq cr6,0x82261204
	if (cr6.getEQ()) goto loc_82261204;
	// oris r27,r27,15
	r27.u64 = r27.u64 | 983040;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// bne cr6,0x82261204
	if (!cr6.getEQ()) goto loc_82261204;
	// lis r12,-28673
	r12.s64 = -1879113728;
	// ori r12,r12,57377
	r12.u64 = r12.u64 | 57377;
	// and r11,r27,r12
	r11.u64 = r27.u64 & r12.u64;
	// or r27,r11,r24
	r27.u64 = r11.u64 | r24.u64;
loc_82261204:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8225f778
	sub_8225F778(ctx, base);
	// lwz r30,112(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r31,96(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// cmplwi cr6,r23,95
	cr6.compare<uint32_t>(r23.u32, 95, xer);
	// bne cr6,0x82261258
	if (!cr6.getEQ()) goto loc_82261258;
	// andis. r11,r31,2816
	r11.u64 = r31.u64 & 184549376;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8226124c
	if (cr0.getEQ()) goto loc_8226124C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8226124C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x82261284
	goto loc_82261284;
loc_82261258:
	// cmplwi cr6,r25,4
	cr6.compare<uint32_t>(r25.u32, 4, xer);
	// beq cr6,0x82261264
	if (cr6.getEQ()) goto loc_82261264;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261264:
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// lwz r4,120(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// lwz r4,124(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r3,108(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
loc_82261284:
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x822612b8
	if (cr6.getEQ()) goto loc_822612B8;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// bl 0x8225fad0
	sub_8225FAD0(ctx, base);
	// b 0x822612d8
	goto loc_822612D8;
loc_822612B8:
	// cmplw cr6,r28,r26
	cr6.compare<uint32_t>(r28.u32, r26.u32, xer);
	// beq cr6,0x822612d8
	if (cr6.getEQ()) goto loc_822612D8;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// bl 0x8225fcc0
	sub_8225FCC0(ctx, base);
loc_822612D8:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r11,0(r16)
	PPC_STORE_U32(r16.u32 + 0, r11.u32);
	// stw r29,0(r17)
	PPC_STORE_U32(r17.u32 + 0, r29.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x823ed158
	return;
}

__attribute__((alias("__imp__sub_822612F0"))) PPC_WEAK_FUNC(sub_822612F0);
PPC_FUNC_IMPL(__imp__sub_822612F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r19,r6
	r19.u64 = ctx.r6.u64;
	// mr r31,r7
	r31.u64 = ctx.r7.u64;
	// mr r14,r3
	r14.u64 = ctx.r3.u64;
	// li r18,0
	r18.s64 = 0;
	// lwz r11,4(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + 4);
	// stw r31,292(r1)
	PPC_STORE_U32(ctx.r1.u32 + 292, r31.u32);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82261324
	if (!cr6.getEQ()) goto loc_82261324;
	// mr r17,r18
	r17.u64 = r18.u64;
	// b 0x82261330
	goto loc_82261330;
loc_82261324:
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r17,r11,27,31,31
	r17.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
loc_82261330:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,260
	r11.u64 = r11.u64 | 260;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82261344
	if (cr6.getLT()) goto loc_82261344;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261344:
	// lwz r11,0(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 0);
	// lwz r31,0(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r30,r11,4
	r30.s64 = r11.s64 + 4;
	// lwz r16,0(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82261364
	if (!cr0.getEQ()) goto loc_82261364;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261364:
	// lwz r20,0(r30)
	r20.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
	// clrlwi r30,r20,21
	r30.u64 = r20.u32 & 0x7FF;
	// rlwimi r10,r20,12,21,23
	ctx.r10.u64 = (__builtin_rotateleft32(r20.u32, 12) & 0x700) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF8FF);
	// lwz r28,0(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r15,r11,4
	r15.s64 = r11.s64 + 4;
	// rlwinm r29,r10,24,27,31
	r29.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0x1F;
	// cmplwi cr6,r29,3
	cr6.compare<uint32_t>(r29.u32, 3, xer);
	// beq cr6,0x82261390
	if (cr6.getEQ()) goto loc_82261390;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261390:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r19
	ctx.r5.u64 = r19.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8225f098
	sub_8225F098(ctx, base);
	// li r10,80
	ctx.r10.s64 = 80;
	// lwz r21,80(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r9,128
	ctx.r9.s64 = 8388608;
	// rlwimi r10,r30,16,8,15
	ctx.r10.u64 = (__builtin_rotateleft32(r30.u32, 16) & 0xFF0000) | (ctx.r10.u64 & 0xFFFFFFFFFF00FFFF);
	// clrlwi r11,r21,26
	r11.u64 = r21.u32 & 0x3F;
	// ori r7,r9,12816
	ctx.r7.u64 = ctx.r9.u64 | 12816;
	// rlwinm r5,r11,16,0,15
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// rlwinm r11,r11,16,0,15
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// clrlwi r9,r3,16
	ctx.r9.u64 = ctx.r3.u32 & 0xFFFF;
	// addi r10,r31,4
	ctx.r10.s64 = r31.s64 + 4;
	// oris r5,r5,64
	ctx.r5.u64 = ctx.r5.u64 | 4194304;
	// or r25,r11,r9
	r25.u64 = r11.u64 | ctx.r9.u64;
	// addi r11,r10,4
	r11.s64 = ctx.r10.s64 + 4;
	// or r22,r5,r9
	r22.u64 = ctx.r5.u64 | ctx.r9.u64;
	// li r23,33
	r23.s64 = 33;
	// rlwinm r8,r28,0,8,15
	ctx.r8.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0xFF0000;
	// stw r25,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r25.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// lis r6,228
	ctx.r6.s64 = 14942208;
	// stw r22,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r22.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplw cr6,r8,r6
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r6.u32, xer);
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r23,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r23.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r22,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r22.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// beq cr6,0x82261474
	if (cr6.getEQ()) goto loc_82261474;
	// rlwinm r10,r8,16,16,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 16) & 0xFFFF;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// rlwinm r9,r10,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// addi r11,r11,-23316
	r11.s64 = r11.s64 + -23316;
	// rlwinm r8,r10,2,28,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwzx r9,r9,r11
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// rlwinm r8,r8,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// or r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 | ctx.r9.u64;
	// rlwinm r8,r10,2,28,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,0,28,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xC;
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwinm r10,r8,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 8) & 0xFFFFFF00;
	// rlwinm r8,r11,12,0,19
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xFFFFF000;
	// or r11,r10,r9
	r11.u64 = ctx.r10.u64 | ctx.r9.u64;
	// or r24,r8,r11
	r24.u64 = ctx.r8.u64 | r11.u64;
	// b 0x82261478
	goto loc_82261478;
loc_82261474:
	// li r24,12816
	r24.s64 = 12816;
loc_82261478:
	// rlwinm r3,r28,0,4,7
	ctx.r3.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0xF000000;
	// bl 0x8225ef48
	sub_8225EF48(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8225f5f0
	sub_8225F5F0(ctx, base);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x822614c4
	if (!cr6.getEQ()) goto loc_822614C4;
	// cmplwi cr6,r24,12816
	cr6.compare<uint32_t>(r24.u32, 12816, xer);
	// bne cr6,0x822614c4
	if (!cr6.getEQ()) goto loc_822614C4;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// clrlwi r26,r3,16
	r26.u64 = ctx.r3.u32 & 0xFFFF;
	// clrlwi r27,r11,26
	r27.u64 = r11.u32 & 0x3F;
	// rlwinm r11,r27,16,0,15
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 16) & 0xFFFF0000;
	// or r11,r11,r26
	r11.u64 = r11.u64 | r26.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// b 0x822614f0
	goto loc_822614F0;
loc_822614C4:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// clrlwi r26,r3,16
	r26.u64 = ctx.r3.u32 & 0xFFFF;
	// or r10,r29,r24
	ctx.r10.u64 = r29.u64 | r24.u64;
	// clrlwi r27,r11,26
	r27.u64 = r11.u32 & 0x3F;
	// rlwinm r11,r27,16,0,15
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 16) & 0xFFFF0000;
	// oris r11,r11,64
	r11.u64 = r11.u64 | 4194304;
	// or r11,r11,r26
	r11.u64 = r11.u64 | r26.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
loc_822614F0:
	// addi r10,r30,8
	ctx.r10.s64 = r30.s64 + 8;
	// clrlwi r9,r30,16
	ctx.r9.u64 = r30.u32 & 0xFFFF;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// oris r9,r9,81
	ctx.r9.u64 = ctx.r9.u64 | 5308416;
	// oris r7,r10,1
	ctx.r7.u64 = ctx.r10.u64 | 65536;
	// li r8,4
	ctx.r8.s64 = 4;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r18,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r18.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r23,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r23.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r22,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r22.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bne cr6,0x82261558
	if (!cr6.getEQ()) goto loc_82261558;
	// cmplwi cr6,r24,12816
	cr6.compare<uint32_t>(r24.u32, 12816, xer);
	// bne cr6,0x82261558
	if (!cr6.getEQ()) goto loc_82261558;
	// rlwinm r8,r27,16,0,15
	ctx.r8.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 16) & 0xFFFF0000;
	// or r8,r8,r26
	ctx.r8.u64 = ctx.r8.u64 | r26.u64;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// b 0x82261574
	goto loc_82261574;
loc_82261558:
	// rlwinm r8,r27,16,0,15
	ctx.r8.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 16) & 0xFFFF0000;
	// or r7,r29,r24
	ctx.r7.u64 = r29.u64 | r24.u64;
	// oris r8,r8,64
	ctx.r8.u64 = ctx.r8.u64 | 4194304;
	// or r8,r8,r26
	ctx.r8.u64 = ctx.r8.u64 | r26.u64;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
loc_82261574:
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// oris r10,r10,65
	ctx.r10.u64 = ctx.r10.u64 | 4259840;
	// li r7,50
	ctx.r7.s64 = 50;
	// li r28,4369
	r28.s64 = 4369;
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// li r6,93
	ctx.r6.s64 = 93;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// rlwimi r8,r17,8,23,23
	ctx.r8.u64 = (__builtin_rotateleft32(r17.u32, 8) & 0x100) | (ctx.r8.u64 & 0xFFFFFFFFFFFFFEFF);
	// cmpwi cr6,r21,4
	cr6.compare<int32_t>(r21.s32, 4, xer);
	// clrlwi r8,r8,23
	ctx.r8.u64 = ctx.r8.u32 & 0x1FF;
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// rlwimi r6,r8,16,0,15
	ctx.r6.u64 = (__builtin_rotateleft32(ctx.r8.u32, 16) & 0xFFFF0000) | (ctx.r6.u64 & 0xFFFFFFFF0000FFFF);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r28,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r28.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// stw r6,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r6.u32);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// beq cr6,0x822615d0
	if (cr6.getEQ()) goto loc_822615D0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822615D0:
	// cmplwi cr6,r16,67
	cr6.compare<uint32_t>(r16.u32, 67, xer);
	// bne cr6,0x822615f4
	if (!cr6.getEQ()) goto loc_822615F4;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
	// bl 0x8225f778
	sub_8225F778(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r25,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r25.u32);
	// b 0x8226172c
	goto loc_8226172C;
loc_822615F4:
	// cmplwi cr6,r16,68
	cr6.compare<uint32_t>(r16.u32, 68, xer);
	// bne cr6,0x82261730
	if (!cr6.getEQ()) goto loc_82261730;
	// lis r10,68
	ctx.r10.s64 = 4456448;
	// stw r25,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r25.u32);
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// ori r30,r10,15
	r30.u64 = ctx.r10.u64 | 15;
	// addi r10,r31,4
	ctx.r10.s64 = r31.s64 + 4;
	// li r9,64
	ctx.r9.s64 = 64;
	// li r7,272
	ctx.r7.s64 = 272;
	// rlwinm r8,r27,16,0,15
	ctx.r8.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 16) & 0xFFFF0000;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// stw r25,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r25.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// oris r8,r8,64
	ctx.r8.u64 = ctx.r8.u64 | 4194304;
	// oris r11,r11,65
	r11.u64 = r11.u64 | 4259840;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// or r9,r8,r26
	ctx.r9.u64 = ctx.r8.u64 | r26.u64;
	// or r8,r29,r24
	ctx.r8.u64 = r29.u64 | r24.u64;
	// mr r29,r18
	r29.u64 = r18.u64;
	// stw r30,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r30.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r7,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r7.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// li r9,73
	ctx.r9.s64 = 73;
	// stw r8,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r8.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// rlwinm. r8,r20,0,8,11
	ctx.r8.u64 = __builtin_rotateleft64(r20.u32 | (r20.u64 << 32), 0) & 0xF00000;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r18,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r18.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// addi r11,r10,4
	r11.s64 = ctx.r10.s64 + 4;
	// stw r28,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r28.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// beq 0x8226169c
	if (cr0.getEQ()) goto loc_8226169C;
	// li r29,256
	r29.s64 = 256;
loc_8226169C:
	// rlwinm r3,r20,8,28,31
	ctx.r3.u64 = __builtin_rotateleft64(r20.u32 | (r20.u64 << 32), 8) & 0xF;
	// bl 0x8225eef8
	sub_8225EEF8(ctx, base);
	// or. r8,r3,r29
	ctx.r8.u64 = ctx.r3.u64 | r29.u64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x822616c8
	if (!cr0.getEQ()) goto loc_822616C8;
	// rlwinm r11,r20,0,12,15
	r11.u64 = __builtin_rotateleft64(r20.u32 | (r20.u64 << 32), 0) & 0xF0000;
	// lis r10,15
	ctx.r10.s64 = 983040;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x822616c8
	if (!cr6.getEQ()) goto loc_822616C8;
	// stw r25,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r25.u32);
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// b 0x82261714
	goto loc_82261714;
loc_822616C8:
	// rlwinm r10,r20,0,12,15
	ctx.r10.u64 = __builtin_rotateleft64(r20.u32 | (r20.u64 << 32), 0) & 0xF0000;
	// stw r22,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r22.u32);
	// mr r11,r18
	r11.u64 = r18.u64;
	// addi r9,r31,4
	ctx.r9.s64 = r31.s64 + 4;
	// rlwinm. r7,r10,0,15,15
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq 0x822616e4
	if (cr0.getEQ()) goto loc_822616E4;
	// li r11,1
	r11.s64 = 1;
loc_822616E4:
	// rlwinm. r7,r10,0,14,14
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq 0x822616f0
	if (cr0.getEQ()) goto loc_822616F0;
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
loc_822616F0:
	// rlwinm. r7,r10,0,13,13
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq 0x822616fc
	if (cr0.getEQ()) goto loc_822616FC;
	// ori r11,r11,16
	r11.u64 = r11.u64 | 16;
loc_822616FC:
	// rlwinm. r10,r10,0,12,12
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82261708
	if (cr0.getEQ()) goto loc_82261708;
	// ori r11,r11,64
	r11.u64 = r11.u64 | 64;
loc_82261708:
	// or r11,r11,r8
	r11.u64 = r11.u64 | ctx.r8.u64;
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// addi r11,r9,4
	r11.s64 = ctx.r9.s64 + 4;
loc_82261714:
	// stw r25,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r25.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// li r10,8738
	ctx.r10.s64 = 8738;
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_8226172C:
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
loc_82261730:
	// lwz r11,292(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 292);
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// stw r15,0(r14)
	PPC_STORE_U32(r14.u32 + 0, r15.u32);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_82261748"))) PPC_WEAK_FUNC(sub_82261748);
PPC_FUNC_IMPL(__imp__sub_82261748) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-1
	r11.s64 = -65536;
	// mr r15,r3
	r15.u64 = ctx.r3.u64;
	// ori r11,r11,260
	r11.u64 = r11.u64 | 260;
	// mr r23,r6
	r23.u64 = ctx.r6.u64;
	// mr r14,r7
	r14.u64 = ctx.r7.u64;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// beq cr6,0x82261774
	if (cr6.getEQ()) goto loc_82261774;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261774:
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// lwz r30,0(r14)
	r30.u64 = PPC_LOAD_U32(r14.u32 + 0);
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82261790
	if (!cr0.getEQ()) goto loc_82261790;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261790:
	// lwz r29,0(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
	// clrlwi r27,r29,21
	r27.u64 = r29.u32 & 0x7FF;
	// rlwimi r10,r29,12,21,23
	ctx.r10.u64 = (__builtin_rotateleft32(r29.u32, 12) & 0x700) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF8FF);
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// lwz r28,0(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r3,r10,24,27,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0x1F;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// addi r16,r11,8
	r16.s64 = r11.s64 + 8;
	// bl 0x8225f098
	sub_8225F098(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r10,64
	ctx.r10.s64 = 4194304;
	// li r20,33
	r20.s64 = 33;
	// rlwimi r10,r11,16,10,15
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x3F0000) | (ctx.r10.u64 & 0xFFFFFFFFFFC0FFFF);
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// stw r20,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r20.u32);
	// li r30,0
	r30.s64 = 0;
	// rlwinm. r9,r29,0,8,11
	ctx.r9.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0xF00000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrlwi r9,r3,16
	ctx.r9.u64 = ctx.r3.u32 & 0xFFFF;
	// or r24,r10,r9
	r24.u64 = ctx.r10.u64 | ctx.r9.u64;
	// stw r24,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r24.u32);
	// beq 0x822617f8
	if (cr0.getEQ()) goto loc_822617F8;
	// li r30,256
	r30.s64 = 256;
loc_822617F8:
	// rlwinm r3,r29,8,28,31
	ctx.r3.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 8) & 0xF;
	// bl 0x8225eef8
	sub_8225EEF8(ctx, base);
	// or r17,r3,r30
	r17.u64 = ctx.r3.u64 | r30.u64;
	// addi r26,r31,4
	r26.s64 = r31.s64 + 4;
	// rlwinm. r11,r29,0,15,15
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8226181c
	if (cr0.getEQ()) goto loc_8226181C;
	// ori r11,r17,1
	r11.u64 = r17.u64 | 1;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// b 0x82261820
	goto loc_82261820;
loc_8226181C:
	// stw r17,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r17.u32);
loc_82261820:
	// lis r10,228
	ctx.r10.s64 = 14942208;
	// rlwinm r11,r28,0,8,15
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0xFF0000;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// lis r10,-32018
	ctx.r10.s64 = -2098331648;
	// addi r31,r10,-23316
	r31.s64 = ctx.r10.s64 + -23316;
	// beq cr6,0x82261880
	if (cr6.getEQ()) goto loc_82261880;
	// rlwinm r11,r11,16,16,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// rlwinm r10,r11,2,28,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xC;
	// rlwinm r11,r11,30,2,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// rlwinm r9,r11,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xC;
	// rlwinm r11,r11,30,2,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// lwzx r10,r10,r31
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r31.u32);
	// lwzx r9,r9,r31
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rlwinm r9,r11,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xC;
	// rlwinm r11,r11,0,28,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xC;
	// lwzx r9,r9,r31
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// rlwinm r9,r9,8,0,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 8) & 0xFFFFFF00;
	// rlwinm r8,r11,12,0,19
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xFFFFF000;
	// or r11,r9,r10
	r11.u64 = ctx.r9.u64 | ctx.r10.u64;
	// or r18,r8,r11
	r18.u64 = ctx.r8.u64 | r11.u64;
	// b 0x82261884
	goto loc_82261884;
loc_82261880:
	// li r18,12816
	r18.s64 = 12816;
loc_82261884:
	// rlwinm r30,r28,0,4,7
	r30.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0xF000000;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225ef48
	sub_8225EF48(ctx, base);
	// mr r19,r3
	r19.u64 = ctx.r3.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8225f5f0
	sub_8225F5F0(ctx, base);
	// cmplwi cr6,r19,0
	cr6.compare<uint32_t>(r19.u32, 0, xer);
	// bne cr6,0x822618d4
	if (!cr6.getEQ()) goto loc_822618D4;
	// cmplwi cr6,r18,12816
	cr6.compare<uint32_t>(r18.u32, 12816, xer);
	// bne cr6,0x822618d4
	if (!cr6.getEQ()) goto loc_822618D4;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// clrlwi r21,r3,16
	r21.u64 = ctx.r3.u32 & 0xFFFF;
	// addi r10,r26,4
	ctx.r10.s64 = r26.s64 + 4;
	// clrlwi r22,r11,26
	r22.u64 = r11.u32 & 0x3F;
	// rlwinm r11,r22,16,0,15
	r11.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 16) & 0xFFFF0000;
	// or r11,r11,r21
	r11.u64 = r11.u64 | r21.u64;
	// stw r11,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r11.u32);
	// b 0x82261900
	goto loc_82261900;
loc_822618D4:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// clrlwi r21,r3,16
	r21.u64 = ctx.r3.u32 & 0xFFFF;
	// or r10,r19,r18
	ctx.r10.u64 = r19.u64 | r18.u64;
	// clrlwi r22,r11,26
	r22.u64 = r11.u32 & 0x3F;
	// rlwinm r11,r22,16,0,15
	r11.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 16) & 0xFFFF0000;
	// oris r11,r11,64
	r11.u64 = r11.u64 | 4194304;
	// or r11,r11,r21
	r11.u64 = r11.u64 | r21.u64;
	// stw r11,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r11.u32);
	// addi r11,r26,4
	r11.s64 = r26.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
loc_82261900:
	// addi r9,r27,8
	ctx.r9.s64 = r27.s64 + 8;
	// rlwinm r11,r28,16,24,31
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 16) & 0xFF;
	// clrlwi r27,r9,16
	r27.u64 = ctx.r9.u32 & 0xFFFF;
	// rlwinm r9,r11,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xC;
	// oris r8,r27,1
	ctx.r8.u64 = r27.u64 | 65536;
	// rlwinm r11,r11,30,2,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r30,r10,4
	r30.s64 = ctx.r10.s64 + 4;
	// stw r8,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r8.u32);
	// lwzx r10,r9,r31
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// rlwinm r9,r11,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xC;
	// rlwinm r11,r11,30,2,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// lwzx r9,r9,r31
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rlwinm r9,r11,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xC;
	// rlwinm r11,r11,0,28,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xC;
	// lwzx r9,r9,r31
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// rlwinm r9,r9,8,0,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 8) & 0xFFFFFF00;
	// rlwinm r8,r11,12,0,19
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xFFFFF000;
	// or r11,r9,r10
	r11.u64 = ctx.r9.u64 | ctx.r10.u64;
	// or r26,r8,r11
	r26.u64 = ctx.r8.u64 | r11.u64;
	// clrlwi r31,r26,29
	r31.u64 = r26.u32 & 0x7;
	// bl 0x8225ef48
	sub_8225EF48(ctx, base);
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8225f5f0
	sub_8225F5F0(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r10,64
	ctx.r10.s64 = 4194304;
	// rlwinm r9,r31,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 4) & 0xFFFFFFF0;
	// rlwimi r10,r11,16,10,15
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x3F0000) | (ctx.r10.u64 & 0xFFFFFFFFFFC0FFFF);
	// or r11,r9,r31
	r11.u64 = ctx.r9.u64 | r31.u64;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// or r11,r11,r31
	r11.u64 = r11.u64 | r31.u64;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// or r11,r11,r25
	r11.u64 = r11.u64 | r25.u64;
	// rlwinm. r9,r29,0,14,14
	ctx.r9.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x20000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// or r9,r11,r31
	ctx.r9.u64 = r11.u64 | r31.u64;
	// clrlwi r11,r3,16
	r11.u64 = ctx.r3.u32 & 0xFFFF;
	// or r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 | r11.u64;
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// stw r10,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r10.u32);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r20,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r20.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r24,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r24.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// beq 0x822619dc
	if (cr0.getEQ()) goto loc_822619DC;
	// ori r9,r17,4
	ctx.r9.u64 = r17.u64 | 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// b 0x822619e0
	goto loc_822619E0;
loc_822619DC:
	// stw r17,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r17.u32);
loc_822619E0:
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r19,0
	cr6.compare<uint32_t>(r19.u32, 0, xer);
	// bne cr6,0x82261a04
	if (!cr6.getEQ()) goto loc_82261A04;
	// cmplwi cr6,r18,12816
	cr6.compare<uint32_t>(r18.u32, 12816, xer);
	// bne cr6,0x82261a04
	if (!cr6.getEQ()) goto loc_82261A04;
	// rlwinm r9,r22,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 16) & 0xFFFF0000;
	// or r9,r9,r21
	ctx.r9.u64 = ctx.r9.u64 | r21.u64;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// b 0x82261a20
	goto loc_82261A20;
loc_82261A04:
	// rlwinm r9,r22,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 16) & 0xFFFF0000;
	// or r8,r19,r18
	ctx.r8.u64 = r19.u64 | r18.u64;
	// oris r9,r9,64
	ctx.r9.u64 = ctx.r9.u64 | 4194304;
	// or r9,r9,r21
	ctx.r9.u64 = ctx.r9.u64 | r21.u64;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
loc_82261A20:
	// addi r9,r11,4
	ctx.r9.s64 = r11.s64 + 4;
	// oris r8,r27,65
	ctx.r8.u64 = r27.u64 | 4259840;
	// rlwinm r11,r26,28,29,31
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 28) & 0x7;
	// li r7,50
	ctx.r7.s64 = 50;
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// rlwinm r8,r11,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// or r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 | r11.u64;
	// rlwinm r8,r8,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// or r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 | r11.u64;
	// stw r7,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r7.u32);
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// rlwinm r8,r8,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// or r8,r11,r25
	ctx.r8.u64 = r11.u64 | r25.u64;
	// stw r10,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r10.u32);
	// addi r11,r9,4
	r11.s64 = ctx.r9.s64 + 4;
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// stw r10,0(r14)
	PPC_STORE_U32(r14.u32 + 0, ctx.r10.u32);
	// stw r16,0(r15)
	PPC_STORE_U32(r15.u32 + 0, r16.u32);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_82261A80"))) PPC_WEAK_FUNC(sub_82261A80);
PPC_FUNC_IMPL(__imp__sub_82261A80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// mr r23,r7
	r23.u64 = ctx.r7.u64;
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82261aac
	if (!cr6.getEQ()) goto loc_82261AAC;
	// li r26,0
	r26.s64 = 0;
	// b 0x82261ab8
	goto loc_82261AB8;
loc_82261AAC:
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r26,r11,27,31,31
	r26.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
loc_82261AB8:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,260
	r11.u64 = r11.u64 | 260;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82261acc
	if (cr6.getLT()) goto loc_82261ACC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261ACC:
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// lwz r28,0(r23)
	r28.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// lwz r25,0(r11)
	r25.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r31,0(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// addi r22,r11,4
	r22.s64 = r11.s64 + 4;
	// rlwimi r10,r31,12,21,23
	ctx.r10.u64 = (__builtin_rotateleft32(r31.u32, 12) & 0x700) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF8FF);
	// lwz r30,0(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r29,r31,21
	r29.u64 = r31.u32 & 0x7FF;
	// rlwinm r11,r10,0,19,23
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,768
	cr6.compare<uint32_t>(r11.u32, 768, xer);
	// beq cr6,0x82261b08
	if (cr6.getEQ()) goto loc_82261B08;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261B08:
	// rlwimi r29,r26,8,23,23
	r29.u64 = (__builtin_rotateleft32(r26.u32, 8) & 0x100) | (r29.u64 & 0xFFFFFFFFFFFFFEFF);
	// li r11,93
	r11.s64 = 93;
	// clrlwi r10,r29,23
	ctx.r10.u64 = r29.u32 & 0x1FF;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// rlwimi r11,r10,16,0,15
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
	// addi r11,r28,4
	r11.s64 = r28.s64 + 4;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8225f778
	sub_8225F778(ctx, base);
	// mr r11,r30
	r11.u64 = r30.u64;
	// rlwimi r11,r30,12,21,23
	r11.u64 = (__builtin_rotateleft32(r30.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,768
	cr6.compare<uint32_t>(r11.u32, 768, xer);
	// beq cr6,0x82261b4c
	if (cr6.getEQ()) goto loc_82261B4C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261B4C:
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8225f5f0
	sub_8225F5F0(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// rlwinm r3,r30,0,4,7
	ctx.r3.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0xF000000;
	// bl 0x8225ef48
	sub_8225EF48(ctx, base);
	// rlwinm r31,r30,0,8,15
	r31.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0xFF0000;
	// lis r11,228
	r11.s64 = 14942208;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x82261bd0
	if (cr6.getEQ()) goto loc_82261BD0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// rlwinm r10,r31,16,16,31
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 16) & 0xFFFF;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// rlwinm r9,r10,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// addi r11,r11,-23316
	r11.s64 = r11.s64 + -23316;
	// rlwinm r8,r10,2,28,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwzx r9,r9,r11
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// rlwinm r8,r8,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// or r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 | ctx.r9.u64;
	// rlwinm r8,r10,2,28,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,0,28,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xC;
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwinm r10,r8,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 8) & 0xFFFFFF00;
	// rlwinm r8,r11,12,0,19
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xFFFFF000;
	// or r11,r10,r9
	r11.u64 = ctx.r10.u64 | ctx.r9.u64;
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// b 0x82261bd4
	goto loc_82261BD4;
loc_82261BD0:
	// li r11,12816
	r11.s64 = 12816;
loc_82261BD4:
	// cmplwi cr6,r25,82
	cr6.compare<uint32_t>(r25.u32, 82, xer);
	// bne cr6,0x82261c08
	if (!cr6.getEQ()) goto loc_82261C08;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82261c08
	if (!cr6.getEQ()) goto loc_82261C08;
	// cmplwi cr6,r11,12816
	cr6.compare<uint32_t>(r11.u32, 12816, xer);
	// bne cr6,0x82261c08
	if (!cr6.getEQ()) goto loc_82261C08;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwimi r29,r11,16,10,15
	r29.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x3F0000) | (r29.u64 & 0xFFFFFFFFFFC0FFFF);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// clrlwi r10,r29,10
	ctx.r10.u64 = r29.u32 & 0x3FFFFF;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// b 0x82261c64
	goto loc_82261C64;
loc_82261C08:
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lis r9,64
	ctx.r9.s64 = 4194304;
	// clrlwi r8,r29,16
	ctx.r8.u64 = r29.u32 & 0xFFFF;
	// rlwimi r9,r10,16,10,15
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0x3F0000) | (ctx.r9.u64 & 0xFFFFFFFFFFC0FFFF);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r25,69
	cr6.compare<uint32_t>(r25.u32, 69, xer);
	// or r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 | ctx.r8.u64;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bne cr6,0x82261c44
	if (!cr6.getEQ()) goto loc_82261C44;
	// li r9,13312
	ctx.r9.s64 = 13312;
	// rlwinm r8,r11,20,29,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0x7;
	// rlwimi r9,r11,4,25,27
	ctx.r9.u64 = (__builtin_rotateleft32(r11.u32, 4) & 0x70) | (ctx.r9.u64 & 0xFFFFFFFFFFFFFF8F);
	// or r11,r9,r8
	r11.u64 = ctx.r9.u64 | ctx.r8.u64;
	// b 0x82261c58
	goto loc_82261C58;
loc_82261C44:
	// cmplwi cr6,r25,70
	cr6.compare<uint32_t>(r25.u32, 70, xer);
	// bne cr6,0x82261c58
	if (!cr6.getEQ()) goto loc_82261C58;
	// rlwinm r11,r11,28,25,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0x7F;
	// rlwinm r11,r11,0,29,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// ori r11,r11,13312
	r11.u64 = r11.u64 | 13312;
loc_82261C58:
	// or r11,r11,r30
	r11.u64 = r11.u64 | r30.u64;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// addi r11,r10,4
	r11.s64 = ctx.r10.s64 + 4;
loc_82261C64:
	// stw r11,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r11.u32);
	// stw r22,0(r24)
	PPC_STORE_U32(r24.u32 + 0, r22.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_82261C78"))) PPC_WEAK_FUNC(sub_82261C78);
PPC_FUNC_IMPL(__imp__sub_82261C78) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-1
	r11.s64 = -65536;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// ori r11,r11,260
	r11.u64 = r11.u64 | 260;
	// mr r24,r6
	r24.u64 = ctx.r6.u64;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82261ca4
	if (cr6.getLT()) goto loc_82261CA4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261CA4:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// lwz r30,0(r27)
	r30.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// addi r25,r10,4
	r25.s64 = ctx.r10.s64 + 4;
	// rlwimi r9,r11,12,21,23
	ctx.r9.u64 = (__builtin_rotateleft32(r11.u32, 12) & 0x700) | (ctx.r9.u64 & 0xFFFFFFFFFFFFF8FF);
	// lwz r26,0(r10)
	r26.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// clrlwi r31,r11,21
	r31.u64 = r11.u32 & 0x7FF;
	// rlwinm r29,r9,24,27,31
	r29.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 24) & 0x1F;
	// cmplwi cr6,r29,3
	cr6.compare<uint32_t>(r29.u32, 3, xer);
	// beq cr6,0x82261cdc
	if (cr6.getEQ()) goto loc_82261CDC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261CDC:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r4,r31,1
	ctx.r4.s64 = r31.s64 + 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8225f098
	sub_8225F098(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r9,64
	ctx.r9.s64 = 4194304;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// rlwimi r9,r11,16,10,15
	ctx.r9.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x3F0000) | (ctx.r9.u64 & 0xFFFFFFFFFFC0FFFF);
	// li r11,17
	r11.s64 = 17;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// rlwimi r31,r11,16,0,15
	r31.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0xFFFF0000) | (r31.u64 & 0xFFFFFFFF0000FFFF);
	// li r8,34
	ctx.r8.s64 = 34;
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// li r29,1
	r29.s64 = 1;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// stw r8,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r8.u32);
	// mr r6,r24
	ctx.r6.u64 = r24.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stw r29,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r29.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r11,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r11.u32);
	// stw r25,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r25.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_82261D68"))) PPC_WEAK_FUNC(sub_82261D68);
PPC_FUNC_IMPL(__imp__sub_82261D68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-1
	r11.s64 = -65536;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// ori r11,r11,260
	r11.u64 = r11.u64 | 260;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// mr r22,r7
	r22.u64 = ctx.r7.u64;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82261d94
	if (cr6.getLT()) goto loc_82261D94;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261D94:
	// lwz r11,0(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// lwz r29,0(r22)
	r29.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r24,r10,4
	r24.s64 = ctx.r10.s64 + 4;
	// clrlwi r30,r11,21
	r30.u64 = r11.u32 & 0x7FF;
	// lwz r27,0(r10)
	r27.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// rlwimi r10,r11,12,21,23
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 12) & 0x700) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF8FF);
	// lhz r11,2(r24)
	r11.u64 = PPC_LOAD_U16(r24.u32 + 2);
	// rlwinm r28,r10,24,27,31
	r28.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0x1F;
	// addi r10,r11,-73
	ctx.r10.s64 = r11.s64 + -73;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r31,r10,1
	r31.u64 = ctx.r10.u64 ^ 1;
	// cmpwi r31,0
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x82261de0
	if (!cr0.getEQ()) goto loc_82261DE0;
	// lhz r11,14(r24)
	r11.u64 = PPC_LOAD_U16(r24.u32 + 14);
loc_82261DE0:
	// addi r11,r11,-77
	r11.s64 = r11.s64 + -77;
	// cmplwi cr6,r28,3
	cr6.compare<uint32_t>(r28.u32, 3, xer);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r26,r11,27,31,31
	r26.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// beq cr6,0x82261df8
	if (cr6.getEQ()) goto loc_82261DF8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261DF8:
	// cntlzw r11,r31
	r11.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// add r4,r11,r30
	ctx.r4.u64 = r11.u64 + r30.u64;
	// bl 0x8225f098
	sub_8225F098(ctx, base);
	// subfic r11,r31,0
	xer.ca = r31.u32 <= 0;
	r11.s64 = 0 - r31.s64;
	// clrlwi r31,r30,16
	r31.u64 = r30.u32 & 0xFFFF;
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// addi r30,r11,1
	r30.s64 = r11.s64 + 1;
	// lis r11,64
	r11.s64 = 4194304;
	// li r8,34
	ctx.r8.s64 = 34;
	// rlwimi r11,r9,16,10,15
	r11.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0x3F0000) | (r11.u64 & 0xFFFFFFFFFFC0FFFF);
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// addi r11,r29,4
	r11.s64 = r29.s64 + 4;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// stw r8,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r8.u32);
	// oris r9,r31,17
	ctx.r9.u64 = r31.u64 | 1114112;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x82261ed8
	if (cr6.getEQ()) goto loc_82261ED8;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,68
	ctx.r8.s64 = 4456448;
	// li r9,71
	ctx.r9.s64 = 71;
	// addi r11,r10,4
	r11.s64 = ctx.r10.s64 + 4;
	// ori r8,r8,14
	ctx.r8.u64 = ctx.r8.u64 | 14;
	// oris r7,r31,81
	ctx.r7.u64 = r31.u64 | 5308416;
	// li r6,13107
	ctx.r6.s64 = 13107;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r6,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r6.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// b 0x82261edc
	goto loc_82261EDC;
loc_82261ED8:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82261EDC:
	// stw r11,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r11.u32);
	// stw r24,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r24.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_82261EF0"))) PPC_WEAK_FUNC(sub_82261EF0);
PPC_FUNC_IMPL(__imp__sub_82261EF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed108
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r20,r6
	r20.u64 = ctx.r6.u64;
	// mr r17,r3
	r17.u64 = ctx.r3.u64;
	// mr r16,r7
	r16.u64 = ctx.r7.u64;
	// lwz r11,4(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 4);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82261f1c
	if (!cr6.getEQ()) goto loc_82261F1C;
	// li r19,0
	r19.s64 = 0;
	// b 0x82261f28
	goto loc_82261F28;
loc_82261F1C:
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r19,r11,27,31,31
	r19.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
loc_82261F28:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,260
	r11.u64 = r11.u64 | 260;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82261f3c
	if (cr6.getLT()) goto loc_82261F3C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261F3C:
	// lwz r11,0(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 0);
	// lwz r10,0(r16)
	ctx.r10.u64 = PPC_LOAD_U32(r16.u32 + 0);
	// lhz r25,2(r11)
	r25.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r25,72
	cr6.compare<uint32_t>(r25.u32, 72, xer);
	// beq cr6,0x82261f60
	if (cr6.getEQ()) goto loc_82261F60;
	// cmplwi cr6,r25,84
	cr6.compare<uint32_t>(r25.u32, 84, xer);
	// li r28,1
	r28.s64 = 1;
	// bne cr6,0x82261f64
	if (!cr6.getEQ()) goto loc_82261F64;
loc_82261F60:
	// li r28,0
	r28.s64 = 0;
loc_82261F64:
	// lwz r23,0(r11)
	r23.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// li r9,34
	ctx.r9.s64 = 34;
	// mr r8,r23
	ctx.r8.u64 = r23.u64;
	// addi r18,r11,4
	r18.s64 = r11.s64 + 4;
	// rlwimi r8,r23,12,21,23
	ctx.r8.u64 = (__builtin_rotateleft32(r23.u32, 12) & 0x700) | (ctx.r8.u64 & 0xFFFFFFFFFFFFF8FF);
	// lwz r27,0(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r26,r23,21
	r26.u64 = r23.u32 & 0x7FF;
	// rlwinm r24,r8,24,27,31
	r24.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 24) & 0x1F;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r31,r10,4
	r31.s64 = ctx.r10.s64 + 4;
	// cmplwi cr6,r24,3
	cr6.compare<uint32_t>(r24.u32, 3, xer);
	// beq cr6,0x82261f9c
	if (cr6.getEQ()) goto loc_82261F9C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261F9C:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x8225f098
	sub_8225F098(ctx, base);
	// lwz r29,80(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r29,4
	cr6.compare<int32_t>(r29.s32, 4, xer);
	// beq cr6,0x82261fc4
	if (cr6.getEQ()) goto loc_82261FC4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82261FC4:
	// clrlwi r22,r29,26
	r22.u64 = r29.u32 & 0x3F;
	// clrlwi r21,r30,16
	r21.u64 = r30.u32 & 0xFFFF;
	// rlwinm r11,r22,16,0,15
	r11.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 16) & 0xFFFF0000;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// oris r11,r11,64
	r11.u64 = r11.u64 | 4194304;
	// or r29,r11,r21
	r29.u64 = r11.u64 | r21.u64;
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// stw r29,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r29.u32);
	// beq cr6,0x82262008
	if (cr6.getEQ()) goto loc_82262008;
	// cmplwi cr6,r25,76
	cr6.compare<uint32_t>(r25.u32, 76, xer);
	// beq cr6,0x82262000
	if (cr6.getEQ()) goto loc_82262000;
	// cmplwi cr6,r25,77
	cr6.compare<uint32_t>(r25.u32, 77, xer);
	// beq cr6,0x82262000
	if (cr6.getEQ()) goto loc_82262000;
	// li r10,208
	ctx.r10.s64 = 208;
	// b 0x8226200c
	goto loc_8226200C;
loc_82262000:
	// li r10,144
	ctx.r10.s64 = 144;
	// b 0x8226200c
	goto loc_8226200C;
loc_82262008:
	// li r10,228
	ctx.r10.s64 = 228;
loc_8226200C:
	// clrlwi r31,r26,16
	r31.u64 = r26.u32 & 0xFFFF;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// oris r10,r31,17
	ctx.r10.u64 = r31.u64 | 1114112;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// lis r11,68
	r11.s64 = 4456448;
	// li r27,93
	r27.s64 = 93;
	// ori r30,r11,14
	r30.u64 = r11.u64 | 14;
	// cmplwi cr6,r25,72
	cr6.compare<uint32_t>(r25.u32, 72, xer);
	// beq cr6,0x822620f4
	if (cr6.getEQ()) goto loc_822620F4;
	// cmplwi cr6,r25,74
	cr6.compare<uint32_t>(r25.u32, 74, xer);
	// beq cr6,0x822620f4
	if (cr6.getEQ()) goto loc_822620F4;
	// cmplwi cr6,r25,77
	cr6.compare<uint32_t>(r25.u32, 77, xer);
	// beq cr6,0x822620b4
	if (cr6.getEQ()) goto loc_822620B4;
	// cmplwi cr6,r25,84
	cr6.compare<uint32_t>(r25.u32, 84, xer);
	// bne cr6,0x82262140
	if (!cr6.getEQ()) goto loc_82262140;
	// li r11,1
	r11.s64 = 1;
	// li r10,71
	ctx.r10.s64 = 71;
	// lis r9,88
	ctx.r9.s64 = 5767168;
	// li r8,257
	ctx.r8.s64 = 257;
	// stw r11,156(r20)
	PPC_STORE_U32(r20.u32 + 156, r11.u32);
	// lis r11,32
	r11.s64 = 2097152;
	// ori r7,r11,12816
	ctx.r7.u64 = r11.u64 | 12816;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r29,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r29.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// b 0x822622d8
	goto loc_822622D8;
loc_822620B4:
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r9,71
	ctx.r9.s64 = 71;
	// li r8,16
	ctx.r8.s64 = 16;
	// addi r11,r10,4
	r11.s64 = ctx.r10.s64 + 4;
	// oris r7,r31,81
	ctx.r7.u64 = r31.u64 | 5308416;
	// li r6,13107
	ctx.r6.s64 = 13107;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r6,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r6.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// b 0x82262154
	goto loc_82262154;
loc_822620F4:
	// mr r11,r26
	r11.u64 = r26.u64;
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// rlwimi r11,r19,8,23,23
	r11.u64 = (__builtin_rotateleft32(r19.u32, 8) & 0x100) | (r11.u64 & 0xFFFFFFFFFFFFFEFF);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// clrlwi r11,r11,23
	r11.u64 = r11.u32 & 0x1FF;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// rlwimi r10,r11,16,0,15
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0xFFFF0000) | (ctx.r10.u64 & 0xFFFFFFFF0000FFFF);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8225f778
	sub_8225F778(ctx, base);
	// rlwinm r11,r22,16,0,15
	r11.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 16) & 0xFFFF0000;
	// or r10,r11,r21
	ctx.r10.u64 = r11.u64 | r21.u64;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// b 0x82262144
	goto loc_82262144;
loc_82262140:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82262144:
	// cmplwi cr6,r25,77
	cr6.compare<uint32_t>(r25.u32, 77, xer);
	// beq cr6,0x82262154
	if (cr6.getEQ()) goto loc_82262154;
	// cmplwi cr6,r25,76
	cr6.compare<uint32_t>(r25.u32, 76, xer);
	// bne cr6,0x822622dc
	if (!cr6.getEQ()) goto loc_822622DC;
loc_82262154:
	// lis r10,1
	ctx.r10.s64 = 65536;
	// cmplwi cr6,r24,3
	cr6.compare<uint32_t>(r24.u32, 3, xer);
	// ori r10,r10,82
	ctx.r10.u64 = ctx.r10.u64 | 82;
	// addi r31,r11,4
	r31.s64 = r11.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// beq cr6,0x82262170
	if (cr6.getEQ()) goto loc_82262170;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82262170:
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// stw r29,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r29.u32);
	// li r10,21
	ctx.r10.s64 = 21;
	// cmplwi cr6,r25,77
	cr6.compare<uint32_t>(r25.u32, 77, xer);
	// addi r29,r11,4
	r29.s64 = r11.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bne cr6,0x822621a4
	if (!cr6.getEQ()) goto loc_822621A4;
	// lis r11,0
	r11.s64 = 0;
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// ori r10,r11,47768
	ctx.r10.u64 = r11.u64 | 47768;
	// addi r11,r29,4
	r11.s64 = r29.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x82262294
	goto loc_82262294;
loc_822621A4:
	// lwz r28,0(r18)
	r28.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lis r10,228
	ctx.r10.s64 = 14942208;
	// addi r18,r18,4
	r18.s64 = r18.s64 + 4;
	// rlwinm r11,r28,0,8,15
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0xFF0000;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8226220c
	if (cr6.getEQ()) goto loc_8226220C;
	// rlwinm r10,r11,16,16,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// rlwinm r9,r10,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// addi r11,r11,-23316
	r11.s64 = r11.s64 + -23316;
	// rlwinm r8,r10,2,28,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwzx r9,r9,r11
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// rlwinm r8,r8,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// or r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 | ctx.r9.u64;
	// rlwinm r8,r10,2,28,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// rlwinm r10,r10,0,28,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xC;
	// lwzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwinm r10,r8,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 8) & 0xFFFFFF00;
	// rlwinm r8,r11,12,0,19
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xFFFFF000;
	// or r11,r10,r9
	r11.u64 = ctx.r10.u64 | ctx.r9.u64;
	// or r30,r8,r11
	r30.u64 = ctx.r8.u64 | r11.u64;
	// b 0x82262210
	goto loc_82262210;
loc_8226220C:
	// li r30,12816
	r30.s64 = 12816;
loc_82262210:
	// rlwinm r3,r28,0,4,7
	ctx.r3.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0xF000000;
	// bl 0x8225ef48
	sub_8225EF48(ctx, base);
	// andi. r11,r3,34952
	r11.u64 = ctx.r3.u64 & 34952;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi cr6,r11,34952
	cr6.compare<uint32_t>(r11.u32, 34952, xer);
	// bne cr6,0x82262234
	if (!cr6.getEQ()) goto loc_82262234;
	// lis r12,-1
	r12.s64 = -65536;
	// ori r12,r12,30583
	r12.u64 = r12.u64 | 30583;
	// and r31,r3,r12
	r31.u64 = ctx.r3.u64 & r12.u64;
	// b 0x82262238
	goto loc_82262238;
loc_82262234:
	// ori r31,r3,34952
	r31.u64 = ctx.r3.u64 | 34952;
loc_82262238:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8225f5f0
	sub_8225F5F0(ctx, base);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82262270
	if (!cr6.getEQ()) goto loc_82262270;
	// cmplwi cr6,r30,12816
	cr6.compare<uint32_t>(r30.u32, 12816, xer);
	// bne cr6,0x82262270
	if (!cr6.getEQ()) goto loc_82262270;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwimi r3,r11,16,10,15
	ctx.r3.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x3F0000) | (ctx.r3.u64 & 0xFFFFFFFFFFC0FFFF);
	// clrlwi r11,r3,10
	r11.u64 = ctx.r3.u32 & 0x3FFFFF;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// addi r11,r29,4
	r11.s64 = r29.s64 + 4;
	// b 0x82262298
	goto loc_82262298;
loc_82262270:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r10,64
	ctx.r10.s64 = 4194304;
	// clrlwi r9,r3,16
	ctx.r9.u64 = ctx.r3.u32 & 0xFFFF;
	// rlwimi r10,r11,16,10,15
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x3F0000) | (ctx.r10.u64 & 0xFFFFFFFFFFC0FFFF);
	// or r8,r31,r30
	ctx.r8.u64 = r31.u64 | r30.u64;
	// or r11,r10,r9
	r11.u64 = ctx.r10.u64 | ctx.r9.u64;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// addi r11,r29,4
	r11.s64 = r29.s64 + 4;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
loc_82262294:
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
loc_82262298:
	// rlwinm r10,r22,16,0,15
	ctx.r10.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 16) & 0xFFFF0000;
	// rlwimi r26,r19,8,23,23
	r26.u64 = (__builtin_rotateleft32(r19.u32, 8) & 0x100) | (r26.u64 & 0xFFFFFFFFFFFFFEFF);
	// or r31,r10,r21
	r31.u64 = ctx.r10.u64 | r21.u64;
	// clrlwi r10,r26,23
	ctx.r10.u64 = r26.u32 & 0x1FF;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// rlwimi r27,r10,16,0,15
	r27.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFFFF0000) | (r27.u64 & 0xFFFFFFFF0000FFFF);
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// stw r27,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r27.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8225f778
	sub_8225F778(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
loc_822622D8:
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
loc_822622DC:
	// stw r11,0(r16)
	PPC_STORE_U32(r16.u32 + 0, r11.u32);
	// stw r18,0(r17)
	PPC_STORE_U32(r17.u32 + 0, r18.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x823ed158
	return;
}

__attribute__((alias("__imp__sub_822622F0"))) PPC_WEAK_FUNC(sub_822622F0);
PPC_FUNC_IMPL(__imp__sub_822622F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// mr r21,r7
	r21.u64 = ctx.r7.u64;
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8226231c
	if (!cr6.getEQ()) goto loc_8226231C;
	// li r20,0
	r20.s64 = 0;
	// b 0x82262328
	goto loc_82262328;
loc_8226231C:
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r20,r11,27,31,31
	r20.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
loc_82262328:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,258
	r11.u64 = r11.u64 | 258;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// beq cr6,0x8226234c
	if (cr6.getEQ()) goto loc_8226234C;
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,259
	r11.u64 = r11.u64 | 259;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// beq cr6,0x8226234c
	if (cr6.getEQ()) goto loc_8226234C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8226234C:
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// lwz r28,0(r21)
	r28.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// lhz r26,2(r11)
	r26.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r31,0(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// clrlwi r30,r31,21
	r30.u64 = r31.u32 & 0x7FF;
	// rlwimi r10,r31,12,21,23
	ctx.r10.u64 = (__builtin_rotateleft32(r31.u32, 12) & 0x700) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF8FF);
	// lwz r24,0(r11)
	r24.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r23,r11,4
	r23.s64 = r11.s64 + 4;
	// rlwinm r29,r10,24,27,31
	r29.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0x1F;
	// cmplwi cr6,r29,3
	cr6.compare<uint32_t>(r29.u32, 3, xer);
	// beq cr6,0x82262388
	if (cr6.getEQ()) goto loc_82262388;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82262388:
	// li r11,34
	r11.s64 = 34;
	// addi r25,r28,4
	r25.s64 = r28.s64 + 4;
	// cmplwi cr6,r26,85
	cr6.compare<uint32_t>(r26.u32, 85, xer);
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
	// stw r25,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r25.u32);
	// bne cr6,0x822623bc
	if (!cr6.getEQ()) goto loc_822623BC;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8225f778
	sub_8225F778(ctx, base);
	// lwz r29,80(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r28,80(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// b 0x8226240c
	goto loc_8226240C;
loc_822623BC:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8225f098
	sub_8225F098(ctx, base);
	// lwz r28,80(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r28,4
	cr6.compare<int32_t>(r28.s32, 4, xer);
	// beq cr6,0x822623e4
	if (cr6.getEQ()) goto loc_822623E4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822623E4:
	// lis r11,64
	r11.s64 = 4194304;
	// clrlwi r10,r29,16
	ctx.r10.u64 = r29.u32 & 0xFFFF;
	// rlwimi r11,r28,16,10,15
	r11.u64 = (__builtin_rotateleft32(r28.u32, 16) & 0x3F0000) | (r11.u64 & 0xFFFFFFFFFFC0FFFF);
	// li r9,41
	ctx.r9.s64 = 41;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// addi r11,r25,4
	r11.s64 = r25.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
loc_8226240C:
	// mr r11,r24
	r11.u64 = r24.u64;
	// rlwimi r11,r24,12,21,23
	r11.u64 = (__builtin_rotateleft32(r24.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,768
	cr6.compare<uint32_t>(r11.u32, 768, xer);
	// beq cr6,0x82262424
	if (cr6.getEQ()) goto loc_82262424;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82262424:
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x8225f870
	sub_8225F870(ctx, base);
	// li r10,17
	ctx.r10.s64 = 17;
	// mr r11,r30
	r11.u64 = r30.u64;
	// cmplwi cr6,r26,83
	cr6.compare<uint32_t>(r26.u32, 83, xer);
	// rlwimi r11,r10,16,0,15
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bne cr6,0x822624a0
	if (!cr6.getEQ()) goto loc_822624A0;
	// rlwimi r30,r20,8,23,23
	r30.u64 = (__builtin_rotateleft32(r20.u32, 8) & 0x100) | (r30.u64 & 0xFFFFFFFFFFFFFEFF);
	// li r10,93
	ctx.r10.s64 = 93;
	// clrlwi r9,r30,23
	ctx.r9.u64 = r30.u32 & 0x1FF;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// rlwimi r10,r9,16,0,15
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0xFFFF0000) | (ctx.r10.u64 & 0xFFFFFFFF0000FFFF);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8225f778
	sub_8225F778(ctx, base);
	// rlwimi r29,r28,16,10,15
	r29.u64 = (__builtin_rotateleft32(r28.u32, 16) & 0x3F0000) | (r29.u64 & 0xFFFFFFFFFFC0FFFF);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// clrlwi r10,r29,10
	ctx.r10.u64 = r29.u32 & 0x3FFFFF;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
loc_822624A0:
	// stw r11,0(r21)
	PPC_STORE_U32(r21.u32 + 0, r11.u32);
	// stw r23,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r23.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_822624B0"))) PPC_WEAK_FUNC(sub_822624B0);
PPC_FUNC_IMPL(__imp__sub_822624B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	// mflr r12
	// bl 0x823ed100
	// lis r11,-32218
	r11.s64 = -2111438848;
	// li r10,75
	ctx.r10.s64 = 75;
	// lis r14,-32218
	r14.s64 = -2111438848;
	// lis r15,-32218
	r15.s64 = -2111438848;
	// lis r16,-32218
	r16.s64 = -2111438848;
	// stw r11,-160(r1)
	PPC_STORE_U32(ctx.r1.u32 + -160, r11.u32);
	// lis r11,-32218
	r11.s64 = -2111438848;
	// lis r17,-32218
	r17.s64 = -2111438848;
	// lis r18,-32218
	r18.s64 = -2111438848;
	// lis r19,-32218
	r19.s64 = -2111438848;
	// lis r20,-32218
	r20.s64 = -2111438848;
	// stw r11,-156(r1)
	PPC_STORE_U32(ctx.r1.u32 + -156, r11.u32);
	// lis r11,-31991
	r11.s64 = -2096562176;
	// lis r21,-32218
	r21.s64 = -2111438848;
	// addi r11,r11,-7344
	r11.s64 = r11.s64 + -7344;
	// lis r22,-32218
	r22.s64 = -2111438848;
	// lis r23,-32218
	r23.s64 = -2111438848;
	// lis r24,-32218
	r24.s64 = -2111438848;
	// lis r25,-32218
	r25.s64 = -2111438848;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lis r26,-32218
	r26.s64 = -2111438848;
	// lis r27,-32218
	r27.s64 = -2111438848;
	// lis r28,-32218
	r28.s64 = -2111438848;
	// lis r29,-32218
	r29.s64 = -2111438848;
	// lis r30,-32218
	r30.s64 = -2111438848;
	// lis r31,-32218
	r31.s64 = -2111438848;
	// lis r3,-32218
	ctx.r3.s64 = -2111438848;
	// lis r4,-32218
	ctx.r4.s64 = -2111438848;
	// lis r5,-32218
	ctx.r5.s64 = -2111438848;
	// lis r6,-32218
	ctx.r6.s64 = -2111438848;
	// lis r7,-32218
	ctx.r7.s64 = -2111438848;
	// lis r8,-32218
	ctx.r8.s64 = -2111438848;
	// lis r9,-32218
	ctx.r9.s64 = -2111438848;
	// lwz r10,-160(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -160);
	// addi r10,r10,-3416
	ctx.r10.s64 = ctx.r10.s64 + -3416;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// li r10,71
	ctx.r10.s64 = 71;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r10,-156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -156);
	// addi r10,r10,-496
	ctx.r10.s64 = ctx.r10.s64 + -496;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// li r10,3
	ctx.r10.s64 = 3;
	// stw r10,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r10.u32);
	// addi r10,r14,-496
	ctx.r10.s64 = r14.s64 + -496;
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// li r10,91
	ctx.r10.s64 = 91;
	// stw r10,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r10.u32);
	// addi r10,r15,-496
	ctx.r10.s64 = r15.s64 + -496;
	// stw r10,28(r11)
	PPC_STORE_U32(r11.u32 + 28, ctx.r10.u32);
	// li r10,64
	ctx.r10.s64 = 64;
	// stw r10,32(r11)
	PPC_STORE_U32(r11.u32 + 32, ctx.r10.u32);
	// addi r10,r16,-496
	ctx.r10.s64 = r16.s64 + -496;
	// stw r10,36(r11)
	PPC_STORE_U32(r11.u32 + 36, ctx.r10.u32);
	// li r10,73
	ctx.r10.s64 = 73;
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
	// addi r10,r17,-496
	ctx.r10.s64 = r17.s64 + -496;
	// stw r10,44(r11)
	PPC_STORE_U32(r11.u32 + 44, ctx.r10.u32);
	// li r10,81
	ctx.r10.s64 = 81;
	// stw r10,48(r11)
	PPC_STORE_U32(r11.u32 + 48, ctx.r10.u32);
	// addi r10,r18,-496
	ctx.r10.s64 = r18.s64 + -496;
	// stw r10,52(r11)
	PPC_STORE_U32(r11.u32 + 52, ctx.r10.u32);
	// li r10,85
	ctx.r10.s64 = 85;
	// stw r10,56(r11)
	PPC_STORE_U32(r11.u32 + 56, ctx.r10.u32);
	// addi r10,r19,-496
	ctx.r10.s64 = r19.s64 + -496;
	// stw r10,60(r11)
	PPC_STORE_U32(r11.u32 + 60, ctx.r10.u32);
	// li r10,34
	ctx.r10.s64 = 34;
	// stw r10,64(r11)
	PPC_STORE_U32(r11.u32 + 64, ctx.r10.u32);
	// addi r10,r20,-496
	ctx.r10.s64 = r20.s64 + -496;
	// stw r10,68(r11)
	PPC_STORE_U32(r11.u32 + 68, ctx.r10.u32);
	// li r10,35
	ctx.r10.s64 = 35;
	// stw r10,72(r11)
	PPC_STORE_U32(r11.u32 + 72, ctx.r10.u32);
	// addi r10,r21,-496
	ctx.r10.s64 = r21.s64 + -496;
	// stw r10,76(r11)
	PPC_STORE_U32(r11.u32 + 76, ctx.r10.u32);
	// li r10,68
	ctx.r10.s64 = 68;
	// stw r10,80(r11)
	PPC_STORE_U32(r11.u32 + 80, ctx.r10.u32);
	// addi r10,r22,-496
	ctx.r10.s64 = r22.s64 + -496;
	// stw r10,84(r11)
	PPC_STORE_U32(r11.u32 + 84, ctx.r10.u32);
	// li r10,65
	ctx.r10.s64 = 65;
	// stw r10,88(r11)
	PPC_STORE_U32(r11.u32 + 88, ctx.r10.u32);
	// addi r10,r23,-496
	ctx.r10.s64 = r23.s64 + -496;
	// stw r10,92(r11)
	PPC_STORE_U32(r11.u32 + 92, ctx.r10.u32);
	// li r10,86
	ctx.r10.s64 = 86;
	// lis r14,-32218
	r14.s64 = -2111438848;
	// lis r15,-32218
	r15.s64 = -2111438848;
	// lis r16,-32218
	r16.s64 = -2111438848;
	// lis r17,-32218
	r17.s64 = -2111438848;
	// stw r10,96(r11)
	PPC_STORE_U32(r11.u32 + 96, ctx.r10.u32);
	// addi r10,r24,-3416
	ctx.r10.s64 = r24.s64 + -3416;
	// lis r18,-32218
	r18.s64 = -2111438848;
	// lis r19,-32218
	r19.s64 = -2111438848;
	// lis r20,-32218
	r20.s64 = -2111438848;
	// lis r21,-32218
	r21.s64 = -2111438848;
	// stw r10,100(r11)
	PPC_STORE_U32(r11.u32 + 100, ctx.r10.u32);
	// li r10,86
	ctx.r10.s64 = 86;
	// lis r22,-32218
	r22.s64 = -2111438848;
	// lis r23,-32218
	r23.s64 = -2111438848;
	// lis r24,-32218
	r24.s64 = -2111438848;
	// stw r10,104(r11)
	PPC_STORE_U32(r11.u32 + 104, ctx.r10.u32);
	// addi r10,r25,-3416
	ctx.r10.s64 = r25.s64 + -3416;
	// lis r25,-32218
	r25.s64 = -2111438848;
	// stw r10,108(r11)
	PPC_STORE_U32(r11.u32 + 108, ctx.r10.u32);
	// li r10,45
	ctx.r10.s64 = 45;
	// stw r10,112(r11)
	PPC_STORE_U32(r11.u32 + 112, ctx.r10.u32);
	// addi r10,r26,-496
	ctx.r10.s64 = r26.s64 + -496;
	// lis r26,-32218
	r26.s64 = -2111438848;
	// stw r10,116(r11)
	PPC_STORE_U32(r11.u32 + 116, ctx.r10.u32);
	// li r10,60
	ctx.r10.s64 = 60;
	// stw r10,120(r11)
	PPC_STORE_U32(r11.u32 + 120, ctx.r10.u32);
	// addi r10,r27,-496
	ctx.r10.s64 = r27.s64 + -496;
	// lis r27,-32218
	r27.s64 = -2111438848;
	// stw r10,124(r11)
	PPC_STORE_U32(r11.u32 + 124, ctx.r10.u32);
	// li r10,57
	ctx.r10.s64 = 57;
	// stw r10,128(r11)
	PPC_STORE_U32(r11.u32 + 128, ctx.r10.u32);
	// addi r10,r28,-3416
	ctx.r10.s64 = r28.s64 + -3416;
	// lis r28,-32218
	r28.s64 = -2111438848;
	// stw r10,132(r11)
	PPC_STORE_U32(r11.u32 + 132, ctx.r10.u32);
	// li r10,36
	ctx.r10.s64 = 36;
	// stw r10,136(r11)
	PPC_STORE_U32(r11.u32 + 136, ctx.r10.u32);
	// addi r10,r29,-3416
	ctx.r10.s64 = r29.s64 + -3416;
	// lis r29,-32218
	r29.s64 = -2111438848;
	// stw r10,140(r11)
	PPC_STORE_U32(r11.u32 + 140, ctx.r10.u32);
	// li r10,63
	ctx.r10.s64 = 63;
	// stw r10,144(r11)
	PPC_STORE_U32(r11.u32 + 144, ctx.r10.u32);
	// addi r10,r30,-496
	ctx.r10.s64 = r30.s64 + -496;
	// lis r30,-32218
	r30.s64 = -2111438848;
	// stw r10,148(r11)
	PPC_STORE_U32(r11.u32 + 148, ctx.r10.u32);
	// li r10,49
	ctx.r10.s64 = 49;
	// stw r10,152(r11)
	PPC_STORE_U32(r11.u32 + 152, ctx.r10.u32);
	// addi r10,r31,-496
	ctx.r10.s64 = r31.s64 + -496;
	// stw r10,156(r11)
	PPC_STORE_U32(r11.u32 + 156, ctx.r10.u32);
	// li r10,69
	ctx.r10.s64 = 69;
	// stw r10,160(r11)
	PPC_STORE_U32(r11.u32 + 160, ctx.r10.u32);
	// addi r10,r3,-496
	ctx.r10.s64 = ctx.r3.s64 + -496;
	// stw r10,164(r11)
	PPC_STORE_U32(r11.u32 + 164, ctx.r10.u32);
	// li r10,69
	ctx.r10.s64 = 69;
	// stw r10,168(r11)
	PPC_STORE_U32(r11.u32 + 168, ctx.r10.u32);
	// addi r10,r4,-496
	ctx.r10.s64 = ctx.r4.s64 + -496;
	// stw r10,172(r11)
	PPC_STORE_U32(r11.u32 + 172, ctx.r10.u32);
	// li r10,69
	ctx.r10.s64 = 69;
	// stw r10,176(r11)
	PPC_STORE_U32(r11.u32 + 176, ctx.r10.u32);
	// addi r10,r5,-496
	ctx.r10.s64 = ctx.r5.s64 + -496;
	// stw r10,180(r11)
	PPC_STORE_U32(r11.u32 + 180, ctx.r10.u32);
	// li r10,69
	ctx.r10.s64 = 69;
	// stw r10,184(r11)
	PPC_STORE_U32(r11.u32 + 184, ctx.r10.u32);
	// addi r10,r6,-496
	ctx.r10.s64 = ctx.r6.s64 + -496;
	// stw r10,188(r11)
	PPC_STORE_U32(r11.u32 + 188, ctx.r10.u32);
	// li r10,69
	ctx.r10.s64 = 69;
	// stw r10,192(r11)
	PPC_STORE_U32(r11.u32 + 192, ctx.r10.u32);
	// addi r10,r7,-496
	ctx.r10.s64 = ctx.r7.s64 + -496;
	// stw r10,196(r11)
	PPC_STORE_U32(r11.u32 + 196, ctx.r10.u32);
	// li r10,8
	ctx.r10.s64 = 8;
	// stw r10,200(r11)
	PPC_STORE_U32(r11.u32 + 200, ctx.r10.u32);
	// addi r10,r8,648
	ctx.r10.s64 = ctx.r8.s64 + 648;
	// stw r10,204(r11)
	PPC_STORE_U32(r11.u32 + 204, ctx.r10.u32);
	// li r10,9
	ctx.r10.s64 = 9;
	// stw r10,208(r11)
	PPC_STORE_U32(r11.u32 + 208, ctx.r10.u32);
	// addi r10,r9,648
	ctx.r10.s64 = ctx.r9.s64 + 648;
	// stw r10,212(r11)
	PPC_STORE_U32(r11.u32 + 212, ctx.r10.u32);
	// lis r10,-32218
	ctx.r10.s64 = -2111438848;
	// stw r10,-156(r1)
	PPC_STORE_U32(ctx.r1.u32 + -156, ctx.r10.u32);
	// lis r10,-32218
	ctx.r10.s64 = -2111438848;
	// stw r10,-160(r1)
	PPC_STORE_U32(ctx.r1.u32 + -160, ctx.r10.u32);
	// li r10,62
	ctx.r10.s64 = 62;
	// lis r31,-32218
	r31.s64 = -2111438848;
	// lis r3,-32218
	ctx.r3.s64 = -2111438848;
	// lis r4,-32218
	ctx.r4.s64 = -2111438848;
	// lis r5,-32218
	ctx.r5.s64 = -2111438848;
	// stw r10,216(r11)
	PPC_STORE_U32(r11.u32 + 216, ctx.r10.u32);
	// lis r6,-32218
	ctx.r6.s64 = -2111438848;
	// lwz r10,-156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -156);
	// lis r7,-32218
	ctx.r7.s64 = -2111438848;
	// lis r8,-32218
	ctx.r8.s64 = -2111438848;
	// addi r10,r10,648
	ctx.r10.s64 = ctx.r10.s64 + 648;
	// lis r9,-32218
	ctx.r9.s64 = -2111438848;
	// stw r10,220(r11)
	PPC_STORE_U32(r11.u32 + 220, ctx.r10.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,224(r11)
	PPC_STORE_U32(r11.u32 + 224, ctx.r10.u32);
	// lwz r10,-160(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -160);
	// addi r10,r10,648
	ctx.r10.s64 = ctx.r10.s64 + 648;
	// stw r10,228(r11)
	PPC_STORE_U32(r11.u32 + 228, ctx.r10.u32);
	// li r10,42
	ctx.r10.s64 = 42;
	// stw r10,232(r11)
	PPC_STORE_U32(r11.u32 + 232, ctx.r10.u32);
	// addi r10,r14,648
	ctx.r10.s64 = r14.s64 + 648;
	// stw r10,236(r11)
	PPC_STORE_U32(r11.u32 + 236, ctx.r10.u32);
	// li r10,50
	ctx.r10.s64 = 50;
	// stw r10,240(r11)
	PPC_STORE_U32(r11.u32 + 240, ctx.r10.u32);
	// addi r10,r15,648
	ctx.r10.s64 = r15.s64 + 648;
	// stw r10,244(r11)
	PPC_STORE_U32(r11.u32 + 244, ctx.r10.u32);
	// li r10,22
	ctx.r10.s64 = 22;
	// stw r10,248(r11)
	PPC_STORE_U32(r11.u32 + 248, ctx.r10.u32);
	// addi r10,r16,-3416
	ctx.r10.s64 = r16.s64 + -3416;
	// stw r10,252(r11)
	PPC_STORE_U32(r11.u32 + 252, ctx.r10.u32);
	// li r10,78
	ctx.r10.s64 = 78;
	// stw r10,256(r11)
	PPC_STORE_U32(r11.u32 + 256, ctx.r10.u32);
	// addi r10,r17,-496
	ctx.r10.s64 = r17.s64 + -496;
	// stw r10,260(r11)
	PPC_STORE_U32(r11.u32 + 260, ctx.r10.u32);
	// li r10,19
	ctx.r10.s64 = 19;
	// stw r10,264(r11)
	PPC_STORE_U32(r11.u32 + 264, ctx.r10.u32);
	// addi r10,r18,-496
	ctx.r10.s64 = r18.s64 + -496;
	// stw r10,268(r11)
	PPC_STORE_U32(r11.u32 + 268, ctx.r10.u32);
	// li r10,87
	ctx.r10.s64 = 87;
	// stw r10,272(r11)
	PPC_STORE_U32(r11.u32 + 272, ctx.r10.u32);
	// addi r10,r19,-3416
	ctx.r10.s64 = r19.s64 + -3416;
	// stw r10,276(r11)
	PPC_STORE_U32(r11.u32 + 276, ctx.r10.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,280(r11)
	PPC_STORE_U32(r11.u32 + 280, ctx.r10.u32);
	// addi r10,r20,-496
	ctx.r10.s64 = r20.s64 + -496;
	// stw r10,284(r11)
	PPC_STORE_U32(r11.u32 + 284, ctx.r10.u32);
	// li r10,76
	ctx.r10.s64 = 76;
	// stw r10,288(r11)
	PPC_STORE_U32(r11.u32 + 288, ctx.r10.u32);
	// addi r10,r21,-496
	ctx.r10.s64 = r21.s64 + -496;
	// stw r10,292(r11)
	PPC_STORE_U32(r11.u32 + 292, ctx.r10.u32);
	// li r10,89
	ctx.r10.s64 = 89;
	// stw r10,296(r11)
	PPC_STORE_U32(r11.u32 + 296, ctx.r10.u32);
	// addi r10,r22,-496
	ctx.r10.s64 = r22.s64 + -496;
	// stw r10,300(r11)
	PPC_STORE_U32(r11.u32 + 300, ctx.r10.u32);
	// li r10,62
	ctx.r10.s64 = 62;
	// stw r10,304(r11)
	PPC_STORE_U32(r11.u32 + 304, ctx.r10.u32);
	// addi r10,r23,648
	ctx.r10.s64 = r23.s64 + 648;
	// stw r10,308(r11)
	PPC_STORE_U32(r11.u32 + 308, ctx.r10.u32);
	// li r10,42
	ctx.r10.s64 = 42;
	// stw r10,312(r11)
	PPC_STORE_U32(r11.u32 + 312, ctx.r10.u32);
	// addi r10,r24,648
	ctx.r10.s64 = r24.s64 + 648;
	// stw r10,316(r11)
	PPC_STORE_U32(r11.u32 + 316, ctx.r10.u32);
	// li r10,53
	ctx.r10.s64 = 53;
	// stw r10,320(r11)
	PPC_STORE_U32(r11.u32 + 320, ctx.r10.u32);
	// addi r10,r25,648
	ctx.r10.s64 = r25.s64 + 648;
	// stw r10,324(r11)
	PPC_STORE_U32(r11.u32 + 324, ctx.r10.u32);
	// li r10,52
	ctx.r10.s64 = 52;
	// stw r10,328(r11)
	PPC_STORE_U32(r11.u32 + 328, ctx.r10.u32);
	// addi r10,r26,1896
	ctx.r10.s64 = r26.s64 + 1896;
	// stw r10,332(r11)
	PPC_STORE_U32(r11.u32 + 332, ctx.r10.u32);
	// li r10,39
	ctx.r10.s64 = 39;
	// stw r10,336(r11)
	PPC_STORE_U32(r11.u32 + 336, ctx.r10.u32);
	// addi r10,r27,648
	ctx.r10.s64 = r27.s64 + 648;
	// stw r10,340(r11)
	PPC_STORE_U32(r11.u32 + 340, ctx.r10.u32);
	// li r10,41
	ctx.r10.s64 = 41;
	// stw r10,344(r11)
	PPC_STORE_U32(r11.u32 + 344, ctx.r10.u32);
	// addi r10,r28,648
	ctx.r10.s64 = r28.s64 + 648;
	// stw r10,348(r11)
	PPC_STORE_U32(r11.u32 + 348, ctx.r10.u32);
	// li r10,6
	ctx.r10.s64 = 6;
	// stw r10,352(r11)
	PPC_STORE_U32(r11.u32 + 352, ctx.r10.u32);
	// addi r10,r29,648
	ctx.r10.s64 = r29.s64 + 648;
	// stw r10,356(r11)
	PPC_STORE_U32(r11.u32 + 356, ctx.r10.u32);
	// li r10,7
	ctx.r10.s64 = 7;
	// lis r14,-32218
	r14.s64 = -2111438848;
	// lis r15,-32218
	r15.s64 = -2111438848;
	// lis r16,-32218
	r16.s64 = -2111438848;
	// lis r17,-32218
	r17.s64 = -2111438848;
	// stw r10,360(r11)
	PPC_STORE_U32(r11.u32 + 360, ctx.r10.u32);
	// addi r10,r30,1896
	ctx.r10.s64 = r30.s64 + 1896;
	// lis r18,-32218
	r18.s64 = -2111438848;
	// lis r19,-32218
	r19.s64 = -2111438848;
	// lis r20,-32218
	r20.s64 = -2111438848;
	// lis r21,-32218
	r21.s64 = -2111438848;
	// stw r10,364(r11)
	PPC_STORE_U32(r11.u32 + 364, ctx.r10.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// lis r22,-32218
	r22.s64 = -2111438848;
	// lis r23,-32218
	r23.s64 = -2111438848;
	// lis r24,-32218
	r24.s64 = -2111438848;
	// lis r25,-32218
	r25.s64 = -2111438848;
	// stw r10,368(r11)
	PPC_STORE_U32(r11.u32 + 368, ctx.r10.u32);
	// addi r10,r31,-3416
	ctx.r10.s64 = r31.s64 + -3416;
	// lis r26,-32218
	r26.s64 = -2111438848;
	// lis r27,-32218
	r27.s64 = -2111438848;
	// lis r28,-32218
	r28.s64 = -2111438848;
	// lis r29,-32218
	r29.s64 = -2111438848;
	// stw r10,372(r11)
	PPC_STORE_U32(r11.u32 + 372, ctx.r10.u32);
	// li r10,28
	ctx.r10.s64 = 28;
	// lis r30,-32218
	r30.s64 = -2111438848;
	// lis r31,-32218
	r31.s64 = -2111438848;
	// stw r10,376(r11)
	PPC_STORE_U32(r11.u32 + 376, ctx.r10.u32);
	// addi r10,r3,-3416
	ctx.r10.s64 = ctx.r3.s64 + -3416;
	// lis r3,-32218
	ctx.r3.s64 = -2111438848;
	// stw r10,380(r11)
	PPC_STORE_U32(r11.u32 + 380, ctx.r10.u32);
	// li r10,28
	ctx.r10.s64 = 28;
	// stw r10,384(r11)
	PPC_STORE_U32(r11.u32 + 384, ctx.r10.u32);
	// addi r10,r4,-3416
	ctx.r10.s64 = ctx.r4.s64 + -3416;
	// lis r4,-32218
	ctx.r4.s64 = -2111438848;
	// stw r10,388(r11)
	PPC_STORE_U32(r11.u32 + 388, ctx.r10.u32);
	// li r10,71
	ctx.r10.s64 = 71;
	// stw r10,512(r11)
	PPC_STORE_U32(r11.u32 + 512, ctx.r10.u32);
	// addi r10,r5,2360
	ctx.r10.s64 = ctx.r5.s64 + 2360;
	// lis r5,-32218
	ctx.r5.s64 = -2111438848;
	// stw r10,516(r11)
	PPC_STORE_U32(r11.u32 + 516, ctx.r10.u32);
	// li r10,55
	ctx.r10.s64 = 55;
	// stw r10,520(r11)
	PPC_STORE_U32(r11.u32 + 520, ctx.r10.u32);
	// addi r10,r6,2720
	ctx.r10.s64 = ctx.r6.s64 + 2720;
	// lis r6,-32218
	ctx.r6.s64 = -2111438848;
	// stw r10,524(r11)
	PPC_STORE_U32(r11.u32 + 524, ctx.r10.u32);
	// li r10,93
	ctx.r10.s64 = 93;
	// stw r10,528(r11)
	PPC_STORE_U32(r11.u32 + 528, ctx.r10.u32);
	// addi r10,r7,3264
	ctx.r10.s64 = ctx.r7.s64 + 3264;
	// lis r7,-32218
	ctx.r7.s64 = -2111438848;
	// stw r10,532(r11)
	PPC_STORE_U32(r11.u32 + 532, ctx.r10.u32);
	// li r10,33
	ctx.r10.s64 = 33;
	// stw r10,536(r11)
	PPC_STORE_U32(r11.u32 + 536, ctx.r10.u32);
	// addi r10,r8,4848
	ctx.r10.s64 = ctx.r8.s64 + 4848;
	// lis r8,-32218
	ctx.r8.s64 = -2111438848;
	// stw r10,540(r11)
	PPC_STORE_U32(r11.u32 + 540, ctx.r10.u32);
	// li r10,33
	ctx.r10.s64 = 33;
	// stw r10,544(r11)
	PPC_STORE_U32(r11.u32 + 544, ctx.r10.u32);
	// addi r10,r9,4848
	ctx.r10.s64 = ctx.r9.s64 + 4848;
	// lis r9,-32218
	ctx.r9.s64 = -2111438848;
	// stw r10,548(r11)
	PPC_STORE_U32(r11.u32 + 548, ctx.r10.u32);
	// lis r10,-32218
	ctx.r10.s64 = -2111438848;
	// stw r10,-156(r1)
	PPC_STORE_U32(ctx.r1.u32 + -156, ctx.r10.u32);
	// lis r10,-32218
	ctx.r10.s64 = -2111438848;
	// stw r10,-160(r1)
	PPC_STORE_U32(ctx.r1.u32 + -160, ctx.r10.u32);
	// li r10,93
	ctx.r10.s64 = 93;
	// stw r10,552(r11)
	PPC_STORE_U32(r11.u32 + 552, ctx.r10.u32);
	// lwz r10,-156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -156);
	// addi r10,r10,6784
	ctx.r10.s64 = ctx.r10.s64 + 6784;
	// stw r10,556(r11)
	PPC_STORE_U32(r11.u32 + 556, ctx.r10.u32);
	// li r10,93
	ctx.r10.s64 = 93;
	// stw r10,560(r11)
	PPC_STORE_U32(r11.u32 + 560, ctx.r10.u32);
	// lwz r10,-160(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -160);
	// addi r10,r10,6784
	ctx.r10.s64 = ctx.r10.s64 + 6784;
	// stw r10,564(r11)
	PPC_STORE_U32(r11.u32 + 564, ctx.r10.u32);
	// li r10,34
	ctx.r10.s64 = 34;
	// stw r10,568(r11)
	PPC_STORE_U32(r11.u32 + 568, ctx.r10.u32);
	// addi r10,r14,7288
	ctx.r10.s64 = r14.s64 + 7288;
	// stw r10,572(r11)
	PPC_STORE_U32(r11.u32 + 572, ctx.r10.u32);
	// li r10,34
	ctx.r10.s64 = 34;
	// stw r10,576(r11)
	PPC_STORE_U32(r11.u32 + 576, ctx.r10.u32);
	// addi r10,r15,7920
	ctx.r10.s64 = r15.s64 + 7920;
	// stw r10,580(r11)
	PPC_STORE_U32(r11.u32 + 580, ctx.r10.u32);
	// li r10,34
	ctx.r10.s64 = 34;
	// stw r10,584(r11)
	PPC_STORE_U32(r11.u32 + 584, ctx.r10.u32);
	// addi r10,r16,7528
	ctx.r10.s64 = r16.s64 + 7528;
	// stw r10,588(r11)
	PPC_STORE_U32(r11.u32 + 588, ctx.r10.u32);
	// li r10,34
	ctx.r10.s64 = 34;
	// stw r10,592(r11)
	PPC_STORE_U32(r11.u32 + 592, ctx.r10.u32);
	// addi r10,r17,7920
	ctx.r10.s64 = r17.s64 + 7920;
	// stw r10,596(r11)
	PPC_STORE_U32(r11.u32 + 596, ctx.r10.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,600(r11)
	PPC_STORE_U32(r11.u32 + 600, ctx.r10.u32);
	// addi r10,r18,-3416
	ctx.r10.s64 = r18.s64 + -3416;
	// stw r10,604(r11)
	PPC_STORE_U32(r11.u32 + 604, ctx.r10.u32);
	// li r10,34
	ctx.r10.s64 = 34;
	// stw r10,608(r11)
	PPC_STORE_U32(r11.u32 + 608, ctx.r10.u32);
	// addi r10,r19,7920
	ctx.r10.s64 = r19.s64 + 7920;
	// stw r10,612(r11)
	PPC_STORE_U32(r11.u32 + 612, ctx.r10.u32);
	// li r10,34
	ctx.r10.s64 = 34;
	// stw r10,616(r11)
	PPC_STORE_U32(r11.u32 + 616, ctx.r10.u32);
	// addi r10,r20,7920
	ctx.r10.s64 = r20.s64 + 7920;
	// stw r10,620(r11)
	PPC_STORE_U32(r11.u32 + 620, ctx.r10.u32);
	// li r10,46
	ctx.r10.s64 = 46;
	// stw r10,624(r11)
	PPC_STORE_U32(r11.u32 + 624, ctx.r10.u32);
	// addi r10,r21,-496
	ctx.r10.s64 = r21.s64 + -496;
	// stw r10,628(r11)
	PPC_STORE_U32(r11.u32 + 628, ctx.r10.u32);
	// li r10,61
	ctx.r10.s64 = 61;
	// stw r10,632(r11)
	PPC_STORE_U32(r11.u32 + 632, ctx.r10.u32);
	// addi r10,r22,-496
	ctx.r10.s64 = r22.s64 + -496;
	// stw r10,636(r11)
	PPC_STORE_U32(r11.u32 + 636, ctx.r10.u32);
	// li r10,13
	ctx.r10.s64 = 13;
	// stw r10,640(r11)
	PPC_STORE_U32(r11.u32 + 640, ctx.r10.u32);
	// addi r10,r23,-496
	ctx.r10.s64 = r23.s64 + -496;
	// stw r10,644(r11)
	PPC_STORE_U32(r11.u32 + 644, ctx.r10.u32);
	// li r10,28
	ctx.r10.s64 = 28;
	// stw r10,648(r11)
	PPC_STORE_U32(r11.u32 + 648, ctx.r10.u32);
	// addi r10,r24,-3416
	ctx.r10.s64 = r24.s64 + -3416;
	// stw r10,652(r11)
	PPC_STORE_U32(r11.u32 + 652, ctx.r10.u32);
	// li r10,93
	ctx.r10.s64 = 93;
	// stw r10,656(r11)
	PPC_STORE_U32(r11.u32 + 656, ctx.r10.u32);
	// addi r10,r25,6784
	ctx.r10.s64 = r25.s64 + 6784;
	// stw r10,660(r11)
	PPC_STORE_U32(r11.u32 + 660, ctx.r10.u32);
	// li r10,34
	ctx.r10.s64 = 34;
	// stw r10,664(r11)
	PPC_STORE_U32(r11.u32 + 664, ctx.r10.u32);
	// addi r10,r26,8944
	ctx.r10.s64 = r26.s64 + 8944;
	// stw r10,668(r11)
	PPC_STORE_U32(r11.u32 + 668, ctx.r10.u32);
	// li r10,34
	ctx.r10.s64 = 34;
	// stw r10,672(r11)
	PPC_STORE_U32(r11.u32 + 672, ctx.r10.u32);
	// addi r10,r27,7920
	ctx.r10.s64 = r27.s64 + 7920;
	// stw r10,676(r11)
	PPC_STORE_U32(r11.u32 + 676, ctx.r10.u32);
	// li r10,34
	ctx.r10.s64 = 34;
	// stw r10,680(r11)
	PPC_STORE_U32(r11.u32 + 680, ctx.r10.u32);
	// addi r10,r28,8944
	ctx.r10.s64 = r28.s64 + 8944;
	// stw r10,684(r11)
	PPC_STORE_U32(r11.u32 + 684, ctx.r10.u32);
	// li r10,34
	ctx.r10.s64 = 34;
	// stw r10,688(r11)
	PPC_STORE_U32(r11.u32 + 688, ctx.r10.u32);
	// addi r10,r29,7920
	ctx.r10.s64 = r29.s64 + 7920;
	// stw r10,692(r11)
	PPC_STORE_U32(r11.u32 + 692, ctx.r10.u32);
	// li r10,71
	ctx.r10.s64 = 71;
	// stw r10,696(r11)
	PPC_STORE_U32(r11.u32 + 696, ctx.r10.u32);
	// addi r10,r30,-3328
	ctx.r10.s64 = r30.s64 + -3328;
	// stw r10,700(r11)
	PPC_STORE_U32(r11.u32 + 700, ctx.r10.u32);
	// li r10,13
	ctx.r10.s64 = 13;
	// stw r10,704(r11)
	PPC_STORE_U32(r11.u32 + 704, ctx.r10.u32);
	// addi r10,r31,-496
	ctx.r10.s64 = r31.s64 + -496;
	// stw r10,708(r11)
	PPC_STORE_U32(r11.u32 + 708, ctx.r10.u32);
	// li r10,33
	ctx.r10.s64 = 33;
	// stw r10,712(r11)
	PPC_STORE_U32(r11.u32 + 712, ctx.r10.u32);
	// addi r10,r3,5960
	ctx.r10.s64 = ctx.r3.s64 + 5960;
	// stw r10,716(r11)
	PPC_STORE_U32(r11.u32 + 716, ctx.r10.u32);
	// li r10,33
	ctx.r10.s64 = 33;
	// stw r10,720(r11)
	PPC_STORE_U32(r11.u32 + 720, ctx.r10.u32);
	// addi r10,r4,-496
	ctx.r10.s64 = ctx.r4.s64 + -496;
	// stw r10,724(r11)
	PPC_STORE_U32(r11.u32 + 724, ctx.r10.u32);
	// li r10,37
	ctx.r10.s64 = 37;
	// stw r10,728(r11)
	PPC_STORE_U32(r11.u32 + 728, ctx.r10.u32);
	// addi r10,r5,-496
	ctx.r10.s64 = ctx.r5.s64 + -496;
	// stw r10,732(r11)
	PPC_STORE_U32(r11.u32 + 732, ctx.r10.u32);
	// li r10,38
	ctx.r10.s64 = 38;
	// stw r10,736(r11)
	PPC_STORE_U32(r11.u32 + 736, ctx.r10.u32);
	// addi r10,r6,-496
	ctx.r10.s64 = ctx.r6.s64 + -496;
	// stw r10,740(r11)
	PPC_STORE_U32(r11.u32 + 740, ctx.r10.u32);
	// li r10,95
	ctx.r10.s64 = 95;
	// stw r10,744(r11)
	PPC_STORE_U32(r11.u32 + 744, ctx.r10.u32);
	// addi r10,r7,4184
	ctx.r10.s64 = ctx.r7.s64 + 4184;
	// stw r10,748(r11)
	PPC_STORE_U32(r11.u32 + 748, ctx.r10.u32);
	// li r10,86
	ctx.r10.s64 = 86;
	// stw r10,752(r11)
	PPC_STORE_U32(r11.u32 + 752, ctx.r10.u32);
	// addi r10,r8,1896
	ctx.r10.s64 = ctx.r8.s64 + 1896;
	// stw r10,756(r11)
	PPC_STORE_U32(r11.u32 + 756, ctx.r10.u32);
	// li r10,94
	ctx.r10.s64 = 94;
	// stw r10,760(r11)
	PPC_STORE_U32(r11.u32 + 760, ctx.r10.u32);
	// addi r10,r9,4184
	ctx.r10.s64 = ctx.r9.s64 + 4184;
	// lis r9,-32218
	ctx.r9.s64 = -2111438848;
	// stw r10,764(r11)
	PPC_STORE_U32(r11.u32 + 764, ctx.r10.u32);
	// li r10,7
	ctx.r10.s64 = 7;
	// stw r10,768(r11)
	PPC_STORE_U32(r11.u32 + 768, ctx.r10.u32);
	// addi r10,r9,648
	ctx.r10.s64 = ctx.r9.s64 + 648;
	// stw r10,772(r11)
	PPC_STORE_U32(r11.u32 + 772, ctx.r10.u32);
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_82262B60"))) PPC_WEAK_FUNC(sub_82262B60);
PPC_FUNC_IMPL(__imp__sub_82262B60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-1
	r11.s64 = -65536;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// ori r11,r11,512
	r11.u64 = r11.u64 | 512;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// bge cr6,0x82262b88
	if (!cr6.getLT()) goto loc_82262B88;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82262B88:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// lwz r30,0(r27)
	r30.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r29,r11,4
	r29.s64 = r11.s64 + 4;
	// lwz r26,0(r11)
	r26.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r31,r26,21
	r31.u64 = r26.u32 & 0x7FF;
	// cmplwi cr6,r31,256
	cr6.compare<uint32_t>(r31.u32, 256, xer);
	// blt cr6,0x82262bb0
	if (cr6.getLT()) goto loc_82262BB0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// li r31,255
	r31.s64 = 255;
loc_82262BB0:
	// mr r11,r26
	r11.u64 = r26.u64;
	// rlwimi r11,r26,12,21,23
	r11.u64 = (__builtin_rotateleft32(r26.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,512
	cr6.compare<uint32_t>(r11.u32, 512, xer);
	// beq cr6,0x82262bc8
	if (cr6.getEQ()) goto loc_82262BC8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82262BC8:
	// li r11,28
	r11.s64 = 28;
	// li r10,1
	ctx.r10.s64 = 1;
	// rlwimi r31,r10,16,0,15
	r31.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFFFF0000) | (r31.u64 & 0xFFFFFFFF0000FFFF);
	// addi r10,r29,4
	ctx.r10.s64 = r29.s64 + 4;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r8,r11,4
	ctx.r8.s64 = r11.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// stw r8,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r8.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82262C38"))) PPC_WEAK_FUNC(sub_82262C38);
PPC_FUNC_IMPL(__imp__sub_82262C38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-1
	r11.s64 = -65536;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// ori r11,r11,512
	r11.u64 = r11.u64 | 512;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// bge cr6,0x82262c60
	if (!cr6.getLT()) goto loc_82262C60;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82262C60:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// lwz r30,0(r27)
	r30.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r29,r11,4
	r29.s64 = r11.s64 + 4;
	// lwz r26,0(r11)
	r26.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r31,r26,21
	r31.u64 = r26.u32 & 0x7FF;
	// cmplwi cr6,r31,16
	cr6.compare<uint32_t>(r31.u32, 16, xer);
	// blt cr6,0x82262c88
	if (cr6.getLT()) goto loc_82262C88;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// li r31,15
	r31.s64 = 15;
loc_82262C88:
	// mr r11,r26
	r11.u64 = r26.u64;
	// rlwimi r11,r26,12,21,23
	r11.u64 = (__builtin_rotateleft32(r26.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,1792
	cr6.compare<uint32_t>(r11.u32, 1792, xer);
	// beq cr6,0x82262ca0
	if (cr6.getEQ()) goto loc_82262CA0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82262CA0:
	// li r11,28
	r11.s64 = 28;
	// li r10,1
	ctx.r10.s64 = 1;
	// rlwimi r31,r10,17,0,15
	r31.u64 = (__builtin_rotateleft32(ctx.r10.u32, 17) & 0xFFFF0000) | (r31.u64 & 0xFFFFFFFF0000FFFF);
	// addi r10,r29,4
	ctx.r10.s64 = r29.s64 + 4;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r8,r11,4
	ctx.r8.s64 = r11.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// stw r8,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r8.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82262D10"))) PPC_WEAK_FUNC(sub_82262D10);
PPC_FUNC_IMPL(__imp__sub_82262D10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	// rlwinm. r10,r3,0,15,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// beq 0x82262d28
	if (cr0.getEQ()) goto loc_82262D28;
	// lwz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// stw r10,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r10.u32);
	// b 0x82262d2c
	goto loc_82262D2C;
loc_82262D28:
	// stw r11,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r11.u32);
loc_82262D2C:
	// rlwinm. r10,r3,0,14,14
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x20000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82262d40
	if (cr0.getEQ()) goto loc_82262D40;
	// lwz r10,4(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// stw r10,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, ctx.r10.u32);
	// b 0x82262d44
	goto loc_82262D44;
loc_82262D40:
	// stw r11,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r11.u32);
loc_82262D44:
	// rlwinm. r10,r3,0,13,13
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82262d58
	if (cr0.getEQ()) goto loc_82262D58;
	// lwz r10,8(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// stw r10,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r10.u32);
	// b 0x82262d5c
	goto loc_82262D5C;
loc_82262D58:
	// stw r11,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r11.u32);
loc_82262D5C:
	// rlwinm. r10,r3,0,12,12
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x80000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82262d68
	if (cr0.getEQ()) goto loc_82262D68;
	// lwz r11,12(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 12);
loc_82262D68:
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82262D70"))) PPC_WEAK_FUNC(sub_82262D70);
PPC_FUNC_IMPL(__imp__sub_82262D70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// cmplwi cr6,r29,16
	cr6.compare<uint32_t>(r29.u32, 16, xer);
	// lwz r27,0(r28)
	r27.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// blt cr6,0x82262d98
	if (cr6.getLT()) goto loc_82262D98;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82262D98:
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x82262de8
	if (cr6.getEQ()) goto loc_82262DE8;
	// lis r11,4096
	r11.s64 = 268435456;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// beq cr6,0x82262de0
	if (cr6.getEQ()) goto loc_82262DE0;
	// lis r11,6144
	r11.s64 = 402653184;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// beq cr6,0x82262dd8
	if (cr6.getEQ()) goto loc_82262DD8;
	// lis r11,8192
	r11.s64 = 536870912;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// beq cr6,0x82262dd0
	if (cr6.getEQ()) goto loc_82262DD0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x82262dec
	goto loc_82262DEC;
loc_82262DD0:
	// lis r31,768
	r31.s64 = 50331648;
	// b 0x82262dec
	goto loc_82262DEC;
loc_82262DD8:
	// lis r31,1024
	r31.s64 = 67108864;
	// b 0x82262dec
	goto loc_82262DEC;
loc_82262DE0:
	// lis r31,512
	r31.s64 = 33554432;
	// b 0x82262dec
	goto loc_82262DEC;
loc_82262DE8:
	// li r31,0
	r31.s64 = 0;
loc_82262DEC:
	// rlwimi r31,r29,16,8,15
	r31.u64 = (__builtin_rotateleft32(r29.u32, 16) & 0xFF0000) | (r31.u64 & 0xFFFFFFFFFF00FFFF);
	// li r11,801
	r11.s64 = 801;
	// addi r10,r27,4
	ctx.r10.s64 = r27.s64 + 4;
	// rlwimi r31,r11,27,16,31
	r31.u64 = (__builtin_rotateleft32(r11.u32, 27) & 0xFFFF) | (r31.u64 & 0xFFFFFFFFFFFF0000);
	// rlwimi r31,r11,27,3,4
	r31.u64 = (__builtin_rotateleft32(r11.u32, 27) & 0x18000000) | (r31.u64 & 0xFFFFFFFFE7FFFFFF);
	// stw r31,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r31.u32);
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82262E10"))) PPC_WEAK_FUNC(sub_82262E10);
PPC_FUNC_IMPL(__imp__sub_82262E10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r22,r10
	r22.u64 = ctx.r10.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// rlwinm r11,r28,21,3,10
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 21) & 0x1FE00000;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// lwz r23,0(r22)
	r23.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// mr r30,r9
	r30.u64 = ctx.r9.u64;
	// cmpwi cr6,r31,13
	cr6.compare<int32_t>(r31.s32, 13, xer);
	// ori r29,r11,23
	r29.u64 = r11.u64 | 23;
	// ble cr6,0x82262e54
	if (!cr6.getGT()) goto loc_82262E54;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82262E54:
	// cmplwi cr6,r27,16
	cr6.compare<uint32_t>(r27.u32, 16, xer);
	// blt cr6,0x82262e60
	if (cr6.getLT()) goto loc_82262E60;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82262E60:
	// cmpwi cr6,r31,5
	cr6.compare<int32_t>(r31.s32, 5, xer);
	// bne cr6,0x82262ebc
	if (!cr6.getEQ()) goto loc_82262EBC;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// addi r10,r28,1
	ctx.r10.s64 = r28.s64 + 1;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82262e7c
	if (cr6.getLT()) goto loc_82262E7C;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82262E7C:
	// lwz r10,16(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// stw r11,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r11.u32);
	// lwz r11,4(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82262e98
	if (!cr6.getEQ()) goto loc_82262E98;
	// li r26,0
	r26.s64 = 0;
	// b 0x82262ea4
	goto loc_82262EA4;
loc_82262E98:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x82262ea4
	if (!cr6.getEQ()) goto loc_82262EA4;
	// li r26,1
	r26.s64 = 1;
loc_82262EA4:
	// li r11,5
	r11.s64 = 5;
	// cmplwi cr6,r28,8
	cr6.compare<uint32_t>(r28.u32, 8, xer);
	// rlwimi r29,r11,16,11,15
	r29.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x1F0000) | (r29.u64 & 0xFFFFFFFFFFE0FFFF);
	// blt cr6,0x82262eec
	if (cr6.getLT()) goto loc_82262EEC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x82262eec
	goto loc_82262EEC;
loc_82262EBC:
	// cmpwi cr6,r31,10
	cr6.compare<int32_t>(r31.s32, 10, xer);
	// bne cr6,0x82262ed0
	if (!cr6.getEQ()) goto loc_82262ED0;
	// li r11,1
	r11.s64 = 1;
	// rlwimi r29,r11,17,11,15
	r29.u64 = (__builtin_rotateleft32(r11.u32, 17) & 0x1F0000) | (r29.u64 & 0xFFFFFFFFFFE0FFFF);
	// b 0x82262eec
	goto loc_82262EEC;
loc_82262ED0:
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// rlwinm r10,r28,21,0,10
	ctx.r10.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 21) & 0xFFE00000;
	// rlwinm r11,r11,25,0,6
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 25) & 0xFE000000;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// li r10,5
	ctx.r10.s64 = 5;
	// rlwimi r29,r11,0,3,10
	r29.u64 = (__builtin_rotateleft32(r11.u32, 0) & 0x1FE00000) | (r29.u64 & 0xFFFFFFFFE01FFFFF);
	// rlwimi r29,r10,16,11,15
	r29.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0x1F0000) | (r29.u64 & 0xFFFFFFFFFFE0FFFF);
loc_82262EEC:
	// cmplwi cr6,r27,16
	cr6.compare<uint32_t>(r27.u32, 16, xer);
	// blt cr6,0x82262ef8
	if (cr6.getLT()) goto loc_82262EF8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82262EF8:
	// addi r11,r27,4
	r11.s64 = r27.s64 + 4;
	// lwz r10,16(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// li r9,12
	ctx.r9.s64 = 12;
	// rlwinm r6,r11,3,0,28
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r11,r27,3,0,28
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// addi r7,r1,84
	ctx.r7.s64 = ctx.r1.s64 + 84;
	// addi r5,r1,92
	ctx.r5.s64 = ctx.r1.s64 + 92;
	// stwx r9,r6,r10
	PPC_STORE_U32(ctx.r6.u32 + ctx.r10.u32, ctx.r9.u32);
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// lwz r10,16(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r27,28(r11)
	PPC_STORE_U32(r11.u32 + 28, r27.u32);
	// bl 0x82262d10
	sub_82262D10(ctx, base);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r8,88(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r7,92(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// bne cr6,0x82262f80
	if (!cr6.getEQ()) goto loc_82262F80;
	// cmpwi cr6,r7,3
	cr6.compare<int32_t>(ctx.r7.s32, 3, xer);
	// bne cr6,0x82262f80
	if (!cr6.getEQ()) goto loc_82262F80;
	// cmpwi cr6,r8,3
	cr6.compare<int32_t>(ctx.r8.s32, 3, xer);
	// bne cr6,0x82262f80
	if (!cr6.getEQ()) goto loc_82262F80;
	// cmpwi cr6,r9,3
	cr6.compare<int32_t>(ctx.r9.s32, 3, xer);
	// bne cr6,0x82262f80
	if (!cr6.getEQ()) goto loc_82262F80;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x82262f80
	if (!cr6.getEQ()) goto loc_82262F80;
	// clrlwi r11,r29,1
	r11.u64 = r29.u32 & 0x7FFFFFFF;
	// stw r11,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r11.u32);
	// addi r11,r23,4
	r11.s64 = r23.s64 + 4;
	// b 0x82262fa8
	goto loc_82262FA8;
loc_82262F80:
	// rlwimi r10,r26,2,29,29
	ctx.r10.u64 = (__builtin_rotateleft32(r26.u32, 2) & 0x4) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFFFB);
	// oris r11,r29,32768
	r11.u64 = r29.u64 | 2147483648;
	// clrlwi r10,r10,29
	ctx.r10.u64 = ctx.r10.u32 & 0x7;
	// rlwimi r9,r10,2,0,29
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 2) & 0xFFFFFFFC) | (ctx.r9.u64 & 0xFFFFFFFF00000003);
	// rlwimi r8,r9,2,0,29
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r9.u32, 2) & 0xFFFFFFFC) | (ctx.r8.u64 & 0xFFFFFFFF00000003);
	// stw r11,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r11.u32);
	// addi r11,r23,4
	r11.s64 = r23.s64 + 4;
	// rlwimi r7,r8,2,0,29
	ctx.r7.u64 = (__builtin_rotateleft32(ctx.r8.u32, 2) & 0xFFFFFFFC) | (ctx.r7.u64 & 0xFFFFFFFF00000003);
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
loc_82262FA8:
	// li r10,3
	ctx.r10.s64 = 3;
	// addi r9,r11,4
	ctx.r9.s64 = r11.s64 + 4;
	// rlwimi r27,r10,18,0,15
	r27.u64 = (__builtin_rotateleft32(ctx.r10.u32, 18) & 0xFFFF0000) | (r27.u64 & 0xFFFFFFFF0000FFFF);
	// stw r27,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r27.u32);
	// stw r9,0(r22)
	PPC_STORE_U32(r22.u32 + 0, ctx.r9.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_82262FC8"))) PPC_WEAK_FUNC(sub_82262FC8);
PPC_FUNC_IMPL(__imp__sub_82262FC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r10
	r26.u64 = ctx.r10.u64;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// mr r24,r7
	r24.u64 = ctx.r7.u64;
	// lwz r27,0(r26)
	r27.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// mr r23,r8
	r23.u64 = ctx.r8.u64;
	// mr r30,r9
	r30.u64 = ctx.r9.u64;
	// cmpwi cr6,r4,10
	cr6.compare<int32_t>(ctx.r4.s32, 10, xer);
	// beq cr6,0x82263010
	if (cr6.getEQ()) goto loc_82263010;
	// cmpwi cr6,r4,5
	cr6.compare<int32_t>(ctx.r4.s32, 5, xer);
	// beq cr6,0x82263028
	if (cr6.getEQ()) goto loc_82263028;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// lwz r29,92(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// b 0x82263068
	goto loc_82263068;
loc_82263010:
	// cntlzw r11,r31
	r11.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// li r31,0
	r31.s64 = 0;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// addi r29,r11,18
	r29.s64 = r11.s64 + 18;
	// b 0x82263068
	goto loc_82263068;
loc_82263028:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// addi r10,r31,1
	ctx.r10.s64 = r31.s64 + 1;
	// li r29,17
	r29.s64 = 17;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82263040
	if (cr6.getLT()) goto loc_82263040;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82263040:
	// lwz r10,16(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// stw r11,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r11.u32);
	// lwz r11,4(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8226305c
	if (!cr6.getEQ()) goto loc_8226305C;
	// li r25,0
	r25.s64 = 0;
	// b 0x82263068
	goto loc_82263068;
loc_8226305C:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x82263068
	if (!cr6.getEQ()) goto loc_82263068;
	// li r25,1
	r25.s64 = 1;
loc_82263068:
	// cmplwi cr6,r28,16
	cr6.compare<uint32_t>(r28.u32, 16, xer);
	// blt cr6,0x82263074
	if (cr6.getLT()) goto loc_82263074;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263074:
	// addi r11,r28,4
	r11.s64 = r28.s64 + 4;
	// lwz r10,16(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// rlwinm r9,r11,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r11,r28,3,0,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r7,r1,84
	ctx.r7.s64 = ctx.r1.s64 + 84;
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// addi r5,r1,92
	ctx.r5.s64 = ctx.r1.s64 + 92;
	// stwx r29,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, r29.u32);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// lwz r10,16(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r31,28(r11)
	PPC_STORE_U32(r11.u32 + 28, r31.u32);
	// bl 0x82262d10
	sub_82262D10(ctx, base);
	// cntlzw r11,r25
	r11.u64 = r25.u32 == 0 ? 32 : __builtin_clz(r25.u32);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwimi r31,r29,16,10,15
	r31.u64 = (__builtin_rotateleft32(r29.u32, 16) & 0x3F0000) | (r31.u64 & 0xFFFFFFFFFFC0FFFF);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lwz r8,92(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// rlwimi r10,r11,2,29,29
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 2) & 0x4) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFFFB);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// clrlwi r10,r10,29
	ctx.r10.u64 = ctx.r10.u32 & 0x7;
	// rlwimi r9,r10,2,0,29
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 2) & 0xFFFFFFFC) | (ctx.r9.u64 & 0xFFFFFFFF00000003);
	// li r10,22
	ctx.r10.s64 = 22;
	// rlwimi r11,r9,2,0,29
	r11.u64 = (__builtin_rotateleft32(ctx.r9.u32, 2) & 0xFFFFFFFC) | (r11.u64 & 0xFFFFFFFF00000003);
	// clrlwi r9,r31,10
	ctx.r9.u64 = r31.u32 & 0x3FFFFF;
	// rlwimi r8,r11,2,0,29
	ctx.r8.u64 = (__builtin_rotateleft32(r11.u32, 2) & 0xFFFFFFFC) | (ctx.r8.u64 & 0xFFFFFFFF00000003);
	// addi r11,r27,4
	r11.s64 = r27.s64 + 4;
	// rlwimi r10,r8,16,0,15
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r8.u32, 16) & 0xFFFF0000) | (ctx.r10.u64 & 0xFFFFFFFF0000FFFF);
	// stw r10,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r10.u32);
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_82263108"))) PPC_WEAK_FUNC(sub_82263108);
PPC_FUNC_IMPL(__imp__sub_82263108) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stwu r1,-384(r1)
	ea = -384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r24,r7
	r24.u64 = ctx.r7.u64;
	// lwz r31,0(r21)
	r31.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// mr r23,r8
	r23.u64 = ctx.r8.u64;
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// clrlwi r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// beq cr6,0x82263144
	if (cr6.getEQ()) goto loc_82263144;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263144:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,512
	r11.u64 = r11.u64 | 512;
	// cmplw cr6,r25,r11
	cr6.compare<uint32_t>(r25.u32, r11.u32, xer);
	// bge cr6,0x82263158
	if (!cr6.getLT()) goto loc_82263158;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263158:
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// lwz r29,0(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r22,r11,4
	r22.s64 = r11.s64 + 4;
	// lwz r30,0(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mr r11,r30
	r11.u64 = r30.u64;
	// clrlwi r31,r30,21
	r31.u64 = r30.u32 & 0x7FF;
	// rlwimi r11,r30,12,21,23
	r11.u64 = (__builtin_rotateleft32(r30.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,24,27,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0x1F;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bne cr6,0x822631f0
	if (!cr6.getEQ()) goto loc_822631F0;
	// cmplwi cr6,r31,16
	cr6.compare<uint32_t>(r31.u32, 16, xer);
	// blt cr6,0x822631b0
	if (cr6.getLT()) goto loc_822631B0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r5,5105
	ctx.r5.s64 = 5105;
	// addi r6,r11,-8812
	ctx.r6.s64 = r11.s64 + -8812;
loc_82263198:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// mtctr r23
	ctr.u64 = r23.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r3,2
	ctx.r3.s64 = 2;
	// b 0x82263340
	goto loc_82263340;
loc_822631B0:
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// rlwinm r4,r29,0,1,4
	ctx.r4.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x78000000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82262d70
	sub_82262D70(ctx, base);
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// addi r10,r31,1
	ctx.r10.s64 = r31.s64 + 1;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x822631d4
	if (cr6.getLT()) goto loc_822631D4;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_822631D4:
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r11,8(r28)
	PPC_STORE_U32(r28.u32 + 8, r11.u32);
	// lwz r9,12(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 12);
	// slw r11,r10,r31
	r11.u64 = r31.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r31.u8 & 0x3F));
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// stw r11,12(r28)
	PPC_STORE_U32(r28.u32 + 12, r11.u32);
	// b 0x82263338
	goto loc_82263338;
loc_822631F0:
	// rlwinm r27,r30,0,12,15
	r27.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0xF0000;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x82263260
	if (cr6.getEQ()) goto loc_82263260;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x82263228
	if (cr6.getEQ()) goto loc_82263228;
	// cmpwi cr6,r11,17
	cr6.compare<int32_t>(r11.s32, 17, xer);
	// beq cr6,0x82263214
	if (cr6.getEQ()) goto loc_82263214;
loc_8226320C:
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x82263338
	goto loc_82263338;
loc_82263214:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,768
	r11.u64 = r11.u64 | 768;
	// cmplw cr6,r25,r11
	cr6.compare<uint32_t>(r25.u32, r11.u32, xer);
	// bge cr6,0x82263338
	if (!cr6.getLT()) goto loc_82263338;
	// b 0x8226320c
	goto loc_8226320C;
loc_82263228:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,768
	r11.u64 = r11.u64 | 768;
	// cmplw cr6,r25,r11
	cr6.compare<uint32_t>(r25.u32, r11.u32, xer);
	// blt cr6,0x8226323c
	if (cr6.getLT()) goto loc_8226323C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8226323C:
	// cmplwi cr6,r31,8
	cr6.compare<uint32_t>(r31.u32, 8, xer);
	// blt cr6,0x82263248
	if (cr6.getLT()) goto loc_82263248;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263248:
	// lis r11,-32018
	r11.s64 = -2098331648;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r7,r11,-23260
	ctx.r7.s64 = r11.s64 + -23260;
	// li r4,5
	ctx.r4.s64 = 5;
	// addi r3,r31,2
	ctx.r3.s64 = r31.s64 + 2;
	// b 0x82263324
	goto loc_82263324;
loc_82263260:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,768
	r11.u64 = r11.u64 | 768;
	// cmplw cr6,r25,r11
	cr6.compare<uint32_t>(r25.u32, r11.u32, xer);
	// blt cr6,0x822632ec
	if (cr6.getLT()) goto loc_822632EC;
	// cmplwi cr6,r31,16
	cr6.compare<uint32_t>(r31.u32, 16, xer);
	// blt cr6,0x8226327c
	if (cr6.getLT()) goto loc_8226327C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8226327C:
	// clrlwi r4,r29,28
	ctx.r4.u64 = r29.u32 & 0xF;
	// rlwinm r6,r30,10,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 10) & 0x1;
	// rlwinm r11,r29,16,28,31
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 16) & 0xF;
	// cmpwi cr6,r4,10
	cr6.compare<int32_t>(ctx.r4.s32, 10, xer);
	// bne cr6,0x82263294
	if (!cr6.getEQ()) goto loc_82263294;
	// li r6,1
	ctx.r6.s64 = 1;
loc_82263294:
	// cmpwi cr6,r4,5
	cr6.compare<int32_t>(ctx.r4.s32, 5, xer);
	// bne cr6,0x822632c8
	if (!cr6.getEQ()) goto loc_822632C8;
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// blt cr6,0x822632c8
	if (cr6.getLT()) goto loc_822632C8;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// mr r6,r11
	ctx.r6.u64 = r11.u64;
	// addi r5,r10,-8928
	ctx.r5.s64 = ctx.r10.s64 + -8928;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823f1d48
	sub_823F1D48(ctx, base);
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// li r5,5106
	ctx.r5.s64 = 5106;
	// b 0x82263198
	goto loc_82263198;
loc_822632C8:
	// lis r10,-32018
	ctx.r10.s64 = -2098331648;
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// addi r7,r10,-23244
	ctx.r7.s64 = ctx.r10.s64 + -23244;
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82262e10
	sub_82262E10(ctx, base);
	// b 0x82263338
	goto loc_82263338;
loc_822632EC:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82263300
	if (!cr6.getEQ()) goto loc_82263300;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r30,r11,-23292
	r30.s64 = r11.s64 + -23292;
	// b 0x82263314
	goto loc_82263314;
loc_82263300:
	// lis r11,-32018
	r11.s64 = -2098331648;
	// cmplwi cr6,r31,2
	cr6.compare<uint32_t>(r31.u32, 2, xer);
	// addi r30,r11,-23276
	r30.s64 = r11.s64 + -23276;
	// blt cr6,0x82263314
	if (cr6.getLT()) goto loc_82263314;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263314:
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,10
	ctx.r4.s64 = 10;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82263324:
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// bl 0x82262fc8
	sub_82262FC8(ctx, base);
loc_82263338:
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r22,0(r21)
	PPC_STORE_U32(r21.u32 + 0, r22.u32);
loc_82263340:
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_82263348"))) PPC_WEAK_FUNC(sub_82263348);
PPC_FUNC_IMPL(__imp__sub_82263348) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lis r11,-1
	r11.s64 = -65536;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// ori r11,r11,512
	r11.u64 = r11.u64 | 512;
	// lwz r26,16(r29)
	r26.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// blt cr6,0x82263374
	if (cr6.getLT()) goto loc_82263374;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263374:
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// li r31,0
	r31.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// ble cr6,0x822633cc
	if (!cr6.getGT()) goto loc_822633CC;
loc_82263384:
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// srw r11,r11,r31
	r11.u64 = r31.u8 & 0x20 ? 0 : (r11.u32 >> (r31.u8 & 0x3F));
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822633bc
	if (cr0.getEQ()) goto loc_822633BC;
	// lwz r30,0(r27)
	r30.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmplwi cr6,r31,16
	cr6.compare<uint32_t>(r31.u32, 16, xer);
	// blt cr6,0x822633a4
	if (cr6.getLT()) goto loc_822633A4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822633A4:
	// lis r11,2048
	r11.s64 = 134217728;
	// addi r10,r30,4
	ctx.r10.s64 = r30.s64 + 4;
	// ori r11,r11,25
	r11.u64 = r11.u64 | 25;
	// rlwimi r11,r31,16,8,15
	r11.u64 = (__builtin_rotateleft32(r31.u32, 16) & 0xFF0000) | (r11.u64 & 0xFFFFFFFFFF00FFFF);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// stw r10,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r10.u32);
loc_822633BC:
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// blt cr6,0x82263384
	if (cr6.getLT()) goto loc_82263384;
loc_822633CC:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// li r31,0
	r31.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// ble cr6,0x82263428
	if (!cr6.getGT()) goto loc_82263428;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r30,r11,-23260
	r30.s64 = r11.s64 + -23260;
loc_822633E4:
	// lwz r11,196(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 196);
	// srw r11,r11,r31
	r11.u64 = r31.u8 & 0x20 ? 0 : (r11.u32 >> (r31.u8 & 0x3F));
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82263418
	if (cr0.getEQ()) goto loc_82263418;
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// lis r8,15
	ctx.r8.s64 = 983040;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,5
	ctx.r4.s64 = 5;
	// addi r3,r31,2
	ctx.r3.s64 = r31.s64 + 2;
	// bl 0x82262fc8
	sub_82262FC8(ctx, base);
loc_82263418:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// blt cr6,0x822633e4
	if (cr6.getLT()) goto loc_822633E4;
loc_82263428:
	// lis r11,-32018
	r11.s64 = -2098331648;
	// li r31,0
	r31.s64 = 0;
	// addi r30,r11,-23276
	r30.s64 = r11.s64 + -23276;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r28,r11,-23292
	r28.s64 = r11.s64 + -23292;
loc_8226343C:
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r11,r11,r26
	r11.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82263480
	if (cr6.getEQ()) goto loc_82263480;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// beq cr6,0x82263460
	if (cr6.getEQ()) goto loc_82263460;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
loc_82263460:
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// lis r8,15
	ctx.r8.s64 = 983040;
	// li r6,1
	ctx.r6.s64 = 1;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// li r4,10
	ctx.r4.s64 = 10;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82262fc8
	sub_82262FC8(ctx, base);
loc_82263480:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmplwi cr6,r31,2
	cr6.compare<uint32_t>(r31.u32, 2, xer);
	// blt cr6,0x8226343c
	if (cr6.getLT()) goto loc_8226343C;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82263498"))) PPC_WEAK_FUNC(sub_82263498);
PPC_FUNC_IMPL(__imp__sub_82263498) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r5
	r23.u64 = ctx.r5.u64;
	// lis r11,-1
	r11.s64 = -65536;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// ori r11,r11,512
	r11.u64 = r11.u64 | 512;
	// mr r20,r4
	r20.u64 = ctx.r4.u64;
	// lwz r24,16(r23)
	r24.u64 = PPC_LOAD_U32(r23.u32 + 16);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// blt cr6,0x822634c8
	if (cr6.getLT()) goto loc_822634C8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822634C8:
	// lwz r11,432(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 432);
	// lwz r31,0(r20)
	r31.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82263524
	if (cr6.getEQ()) goto loc_82263524;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm. r11,r11,0,1,1
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82263524
	if (cr0.getEQ()) goto loc_82263524;
	// lwz r11,424(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 424);
	// cmplwi cr6,r11,28
	cr6.compare<uint32_t>(r11.u32, 28, xer);
	// blt cr6,0x822634f4
	if (cr6.getLT()) goto loc_822634F4;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822634F4:
	// lwz r11,424(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 424);
	// lwz r10,432(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 432);
	// addi r11,r11,25
	r11.s64 = r11.s64 + 25;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r10,r11,r24
	PPC_STORE_U32(r11.u32 + r24.u32, ctx.r10.u32);
	// lwz r11,424(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 424);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r31,204(r11)
	PPC_STORE_U32(r11.u32 + 204, r31.u32);
	// lwz r11,424(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 424);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,424(r24)
	PPC_STORE_U32(r24.u32 + 424, r11.u32);
loc_82263524:
	// addi r21,r31,4
	r21.s64 = r31.s64 + 4;
	// stw r31,432(r24)
	PPC_STORE_U32(r24.u32 + 432, r31.u32);
	// lhz r27,2(r31)
	r27.u64 = PPC_LOAD_U16(r31.u32 + 2);
	// lwz r11,0(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// rlwinm. r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82263770
	if (cr0.getEQ()) goto loc_82263770;
	// lis r10,-1
	ctx.r10.s64 = -65536;
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// ori r10,r10,260
	ctx.r10.u64 = ctx.r10.u64 | 260;
	// rlwimi r9,r11,12,21,23
	ctx.r9.u64 = (__builtin_rotateleft32(r11.u32, 12) & 0x700) | (ctx.r9.u64 & 0xFFFFFFFFFFFFF8FF);
	// addi r21,r21,4
	r21.s64 = r21.s64 + 4;
	// li r29,0
	r29.s64 = 0;
	// li r25,0
	r25.s64 = 0;
	// li r28,0
	r28.s64 = 0;
	// cmplw cr6,r30,r10
	cr6.compare<uint32_t>(r30.u32, ctx.r10.u32, xer);
	// clrlwi r31,r11,21
	r31.u64 = r11.u32 & 0x7FF;
	// rlwinm r26,r9,24,27,31
	r26.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 24) & 0x1F;
	// li r22,1
	r22.s64 = 1;
	// bge cr6,0x82263668
	if (!cr6.getLT()) goto loc_82263668;
	// addi r11,r27,-64
	r11.s64 = r27.s64 + -64;
	// cmplwi cr6,r11,22
	cr6.compare<uint32_t>(r11.u32, 22, xer);
	// bgt cr6,0x822635c0
	if (cr6.getGT()) goto loc_822635C0;
	// lis r12,-32251
	r12.s64 = -2113601536;
	// addi r12,r12,-8768
	r12.s64 = r12.s64 + -8768;
	// lbzx r0,r12,r11
	r0.u64 = PPC_LOAD_U8(r12.u32 + r11.u32);
	// lis r12,-32218
	r12.s64 = -2111438848;
	// addi r12,r12,13732
	r12.s64 = r12.s64 + 13732;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_822635B8;
	case 1:
		goto loc_822635B8;
	case 2:
		goto loc_822635A4;
	case 3:
		goto loc_822635A4;
	case 4:
		goto loc_822635A4;
	case 5:
		goto loc_822635B0;
	case 6:
		goto loc_822635B0;
	case 7:
		goto loc_822635B8;
	case 8:
		goto loc_822635A4;
	case 9:
		goto loc_822635B8;
	case 10:
		goto loc_822635A4;
	case 11:
		goto loc_822635C0;
	case 12:
		goto loc_822635A4;
	case 13:
		goto loc_822635A4;
	case 14:
		goto loc_822635C0;
	case 15:
		goto loc_822635C0;
	case 16:
		goto loc_822635C0;
	case 17:
		goto loc_822635C0;
	case 18:
		goto loc_822635B0;
	case 19:
		goto loc_822635A4;
	case 20:
		goto loc_822635A8;
	case 21:
		goto loc_822635A8;
	case 22:
		goto loc_822635A8;
	default:
		__builtin_unreachable();
	}
loc_822635A4:
	// mr r29,r22
	r29.u64 = r22.u64;
loc_822635A8:
	// mr r28,r22
	r28.u64 = r22.u64;
	// b 0x822635c8
	goto loc_822635C8;
loc_822635B0:
	// mr r29,r22
	r29.u64 = r22.u64;
	// b 0x822635c8
	goto loc_822635C8;
loc_822635B8:
	// mr r28,r22
	r28.u64 = r22.u64;
	// b 0x822635cc
	goto loc_822635CC;
loc_822635C0:
	// cmplwi cr6,r26,3
	cr6.compare<uint32_t>(r26.u32, 3, xer);
	// bne cr6,0x822635cc
	if (!cr6.getEQ()) goto loc_822635CC;
loc_822635C8:
	// mr r25,r22
	r25.u64 = r22.u64;
loc_822635CC:
	// cmplwi cr6,r31,8
	cr6.compare<uint32_t>(r31.u32, 8, xer);
	// blt cr6,0x822635d8
	if (cr6.getLT()) goto loc_822635D8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_822635D8:
	// cmplwi cr6,r26,3
	cr6.compare<uint32_t>(r26.u32, 3, xer);
	// bne cr6,0x82263764
	if (!cr6.getEQ()) goto loc_82263764;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x8226361c
	if (cr6.getEQ()) goto loc_8226361C;
	// lwz r11,12(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 12);
	// slw r10,r22,r31
	ctx.r10.u64 = r31.u8 & 0x20 ? 0 : (r22.u32 << (r31.u8 & 0x3F));
	// cmplwi cr6,r31,32
	cr6.compare<uint32_t>(r31.u32, 32, xer);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// stw r11,12(r23)
	PPC_STORE_U32(r23.u32 + 12, r11.u32);
	// blt cr6,0x82263604
	if (cr6.getLT()) goto loc_82263604;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263604:
	// lwz r11,8(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// addi r10,r31,1
	ctx.r10.s64 = r31.s64 + 1;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82263618
	if (cr6.getLT()) goto loc_82263618;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82263618:
	// stw r11,8(r23)
	PPC_STORE_U32(r23.u32 + 8, r11.u32);
loc_8226361C:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x8226364c
	if (cr6.getEQ()) goto loc_8226364C;
	// lwz r10,196(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 196);
	// slw r9,r22,r31
	ctx.r9.u64 = r31.u8 & 0x20 ? 0 : (r22.u32 << (r31.u8 & 0x3F));
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// stw r10,196(r24)
	PPC_STORE_U32(r24.u32 + 196, ctx.r10.u32);
	// lwz r10,4(r23)
	ctx.r10.u64 = PPC_LOAD_U32(r23.u32 + 4);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82263648
	if (!cr6.getLT()) goto loc_82263648;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82263648:
	// stw r11,4(r23)
	PPC_STORE_U32(r23.u32 + 4, r11.u32);
loc_8226364C:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x82263764
	if (cr6.getEQ()) goto loc_82263764;
	// addi r11,r31,41
	r11.s64 = r31.s64 + 41;
	// addi r10,r31,6
	ctx.r10.s64 = r31.s64 + 6;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r11,r24
	PPC_STORE_U32(r11.u32 + r24.u32, ctx.r10.u32);
	// b 0x82263764
	goto loc_82263764;
loc_82263668:
	// beq cr6,0x82263670
	if (cr6.getEQ()) goto loc_82263670;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263670:
	// cmplwi cr6,r27,65
	cr6.compare<uint32_t>(r27.u32, 65, xer);
	// beq cr6,0x822636b8
	if (cr6.getEQ()) goto loc_822636B8;
	// cmplwi cr6,r27,66
	cr6.compare<uint32_t>(r27.u32, 66, xer);
	// bne cr6,0x82263764
	if (!cr6.getEQ()) goto loc_82263764;
	// lwz r11,12(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 12);
	// slw r10,r22,r31
	ctx.r10.u64 = r31.u8 & 0x20 ? 0 : (r22.u32 << (r31.u8 & 0x3F));
	// cmplwi cr6,r31,32
	cr6.compare<uint32_t>(r31.u32, 32, xer);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// stw r11,12(r23)
	PPC_STORE_U32(r23.u32 + 12, r11.u32);
	// blt cr6,0x8226369c
	if (cr6.getLT()) goto loc_8226369C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_8226369C:
	// lwz r11,8(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// addi r10,r31,1
	ctx.r10.s64 = r31.s64 + 1;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x822636b0
	if (cr6.getLT()) goto loc_822636B0;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_822636B0:
	// stw r11,8(r23)
	PPC_STORE_U32(r23.u32 + 8, r11.u32);
	// b 0x82263764
	goto loc_82263764;
loc_822636B8:
	// cmplwi cr6,r26,3
	cr6.compare<uint32_t>(r26.u32, 3, xer);
	// bne cr6,0x82263764
	if (!cr6.getEQ()) goto loc_82263764;
	// lwz r11,4(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 4);
	// addi r10,r31,1
	ctx.r10.s64 = r31.s64 + 1;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x822636d4
	if (cr6.getLT()) goto loc_822636D4;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_822636D4:
	// stw r11,4(r23)
	PPC_STORE_U32(r23.u32 + 4, r11.u32);
	// b 0x82263764
	goto loc_82263764;
loc_822636DC:
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// clrlwi r31,r11,21
	r31.u64 = r11.u32 & 0x7FF;
	// rlwimi r10,r11,12,21,23
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 12) & 0x700) | (ctx.r10.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r10,24,27,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0x1F;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x82263740
	if (!cr6.getEQ()) goto loc_82263740;
	// addi r11,r31,41
	r11.s64 = r31.s64 + 41;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r24
	r11.u64 = PPC_LOAD_U32(r11.u32 + r24.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82263760
	if (!cr6.getEQ()) goto loc_82263760;
	// cmplwi cr6,r31,8
	cr6.compare<uint32_t>(r31.u32, 8, xer);
	// blt cr6,0x82263714
	if (cr6.getLT()) goto loc_82263714;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263714:
	// lwz r11,4(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 4);
	// addi r10,r31,1
	ctx.r10.s64 = r31.s64 + 1;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82263728
	if (cr6.getLT()) goto loc_82263728;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82263728:
	// stw r11,4(r23)
	PPC_STORE_U32(r23.u32 + 4, r11.u32);
	// slw r10,r22,r31
	ctx.r10.u64 = r31.u8 & 0x20 ? 0 : (r22.u32 << (r31.u8 & 0x3F));
	// lwz r11,196(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 196);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// stw r11,196(r24)
	PPC_STORE_U32(r24.u32 + 196, r11.u32);
	// b 0x82263760
	goto loc_82263760;
loc_82263740:
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x82263760
	if (!cr6.getEQ()) goto loc_82263760;
	// cmplwi cr6,r31,16
	cr6.compare<uint32_t>(r31.u32, 16, xer);
	// blt cr6,0x82263754
	if (cr6.getLT()) goto loc_82263754;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263754:
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r22,r11,r24
	PPC_STORE_U32(r11.u32 + r24.u32, r22.u32);
loc_82263760:
	// addi r21,r21,4
	r21.s64 = r21.s64 + 4;
loc_82263764:
	// lwz r11,0(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// rlwinm. r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x822636dc
	if (!cr0.getEQ()) goto loc_822636DC;
loc_82263770:
	// stw r21,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r21.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_82263780"))) PPC_WEAK_FUNC(sub_82263780);
PPC_FUNC_IMPL(__imp__sub_82263780) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lis r11,-1
	r11.s64 = -65536;
	// addi r31,r30,4
	r31.s64 = r30.s64 + 4;
	// ori r11,r11,512
	r11.u64 = r11.u64 | 512;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// lwz r29,0(r30)
	r29.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// blt cr6,0x82263834
	if (cr6.getLT()) goto loc_82263834;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x82263834
	goto loc_82263834;
loc_822637BC:
	// rlwinm. r9,r11,0,0,0
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrlwi r10,r11,16
	ctx.r10.u64 = r11.u32 & 0xFFFF;
	// bne 0x82263860
	if (!cr0.getEQ()) goto loc_82263860;
	// cmplwi cr6,r10,65534
	cr6.compare<uint32_t>(ctx.r10.u32, 65534, xer);
	// bne cr6,0x822637e4
	if (!cr6.getEQ()) goto loc_822637E4;
	// rlwinm r11,r11,16,17,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0x7FFF;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r31,r11,r31
	r31.u64 = r11.u64 + r31.u64;
	// b 0x82263820
	goto loc_82263820;
loc_822637E4:
	// cmplwi cr6,r10,65533
	cr6.compare<uint32_t>(ctx.r10.u32, 65533, xer);
	// beq cr6,0x8226381c
	if (cr6.getEQ()) goto loc_8226381C;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8226381c
	if (cr6.getEQ()) goto loc_8226381C;
	// cmplwi cr6,r10,81
	cr6.compare<uint32_t>(ctx.r10.u32, 81, xer);
	// bne cr6,0x82263804
	if (!cr6.getEQ()) goto loc_82263804;
	// addi r31,r31,24
	r31.s64 = r31.s64 + 24;
	// b 0x82263820
	goto loc_82263820;
loc_82263804:
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82263498
	sub_82263498(ctx, base);
	// lwz r31,80(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// b 0x82263824
	goto loc_82263824;
loc_8226381C:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
loc_82263820:
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
loc_82263824:
	// subf r11,r30,r31
	r11.s64 = r31.s64 - r30.s64;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// cmpw cr6,r11,r28
	cr6.compare<int32_t>(r11.s32, r28.s32, xer);
	// bgt cr6,0x82263860
	if (cr6.getGT()) goto loc_82263860;
loc_82263834:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// bne cr6,0x822637bc
	if (!cr6.getEQ()) goto loc_822637BC;
	// addi r11,r31,4
	r11.s64 = r31.s64 + 4;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// cmpw cr6,r11,r28
	cr6.compare<int32_t>(r11.s32, r28.s32, xer);
	// bne cr6,0x82263860
	if (!cr6.getEQ()) goto loc_82263860;
	// li r3,0
	ctx.r3.s64 = 0;
loc_82263858:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
loc_82263860:
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// li r3,2
	ctx.r3.s64 = 2;
	// b 0x82263858
	goto loc_82263858;
}

__attribute__((alias("__imp__sub_82263870"))) PPC_WEAK_FUNC(sub_82263870);
PPC_FUNC_IMPL(__imp__sub_82263870) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// addi r11,r11,16379
	r11.s64 = r11.s64 + 16379;
	// rlwinm r29,r11,2,0,29
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8209d000
	sub_8209D000(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x822638bc
	if (!cr0.getEQ()) goto loc_822638BC;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// lis r3,-32761
	ctx.r3.s64 = -2147024896;
	// ori r3,r3,14
	ctx.r3.u64 = ctx.r3.u64 | 14;
	// b 0x822638fc
	goto loc_822638FC;
loc_822638BC:
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi r4,0
	cr0.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq 0x822638ec
	if (cr0.getEQ()) goto loc_822638EC;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x822638e0
	if (cr0.getEQ()) goto loc_822638E0;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
loc_822638E0:
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x8209d060
	sub_8209D060(ctx, base);
loc_822638EC:
	// add r11,r29,r30
	r11.u64 = r29.u64 + r30.u64;
	// stw r30,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r30.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
loc_822638FC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82263908"))) PPC_WEAK_FUNC(sub_82263908);
PPC_FUNC_IMPL(__imp__sub_82263908) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// li r29,0
	r29.s64 = 0;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x8226393c
	if (cr6.getLT()) goto loc_8226393C;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// ble cr6,0x82263940
	if (!cr6.getGT()) goto loc_82263940;
loc_8226393C:
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263940:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// subf r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// cmplwi cr6,r10,256
	cr6.compare<uint32_t>(ctx.r10.u32, 256, xer);
	// bge cr6,0x82263988
	if (!cr6.getLT()) goto loc_82263988;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bl 0x82263870
	sub_82263870(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
loc_82263988:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82263998"))) PPC_WEAK_FUNC(sub_82263998);
PPC_FUNC_IMPL(__imp__sub_82263998) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// bl 0x82263908
	sub_82263908(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x822639cc
	if (cr0.getEQ()) goto loc_822639CC;
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x82263aac
	goto loc_82263AAC;
loc_822639CC:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,512
	r11.u64 = r11.u64 | 512;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bge cr6,0x822639e8
	if (!cr6.getLT()) goto loc_822639E8;
	// lis r9,87
	ctx.r9.s64 = 5701632;
	// lis r7,4
	ctx.r7.s64 = 262144;
	// b 0x82263a78
	goto loc_82263A78;
loc_822639E8:
	// lis r11,-1
	r11.s64 = -65536;
	// ori r11,r11,768
	r11.u64 = r11.u64 | 768;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bge cr6,0x82263a5c
	if (!cr6.getLT()) goto loc_82263A5C;
	// lwz r9,16(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
loc_82263A04:
	// lwz r8,160(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 160);
	// srw r8,r8,r10
	ctx.r8.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r8.u32 >> (ctx.r10.u8 & 0x3F));
	// clrlwi. r8,r8,31
	ctx.r8.u64 = ctx.r8.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq 0x82263a4c
	if (cr0.getEQ()) goto loc_82263A4C;
	// li r8,14
	ctx.r8.s64 = 14;
	// mr r7,r10
	ctx.r7.u64 = ctx.r10.u64;
	// li r6,23
	ctx.r6.s64 = 23;
	// addi r5,r10,35
	ctx.r5.s64 = ctx.r10.s64 + 35;
	// rlwimi r7,r6,16,0,15
	ctx.r7.u64 = (__builtin_rotateleft32(ctx.r6.u32, 16) & 0xFFFF0000) | (ctx.r7.u64 & 0xFFFFFFFF0000FFFF);
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// li r8,1
	ctx.r8.s64 = 1;
	// rlwimi r5,r8,18,0,15
	ctx.r5.u64 = (__builtin_rotateleft32(ctx.r8.u32, 18) & 0xFFFF0000) | (ctx.r5.u64 & 0xFFFFFFFF0000FFFF);
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r5,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r5.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_82263A4C:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// blt cr6,0x82263a04
	if (cr6.getLT()) goto loc_82263A04;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_82263A5C:
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// lwz r11,156(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 156);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82263aa8
	if (cr6.getEQ()) goto loc_82263AA8;
	// lis r7,4
	ctx.r7.s64 = 262144;
	// lis r9,88
	ctx.r9.s64 = 5767168;
	// ori r7,r7,34
	ctx.r7.u64 = ctx.r7.u64 | 34;
loc_82263A78:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// li r10,71
	ctx.r10.s64 = 71;
	// li r8,341
	ctx.r8.s64 = 341;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r10,r11,4
	ctx.r10.s64 = r11.s64 + 4;
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
loc_82263AA8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82263AAC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82263AB8"))) PPC_WEAK_FUNC(sub_82263AB8);
PPC_FUNC_IMPL(__imp__sub_82263AB8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed110
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r24,r6
	r24.u64 = ctx.r6.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// addi r11,r24,12
	r11.s64 = r24.s64 + 12;
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// mr r18,r9
	r18.u64 = ctx.r9.u64;
	// lis r10,-1
	ctx.r10.s64 = -65536;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// stw r11,16(r26)
	PPC_STORE_U32(r26.u32 + 16, r11.u32);
	// mr r19,r8
	r19.u64 = ctx.r8.u64;
	// stw r21,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r21.u32);
	// stw r7,16(r24)
	PPC_STORE_U32(r24.u32 + 16, ctx.r7.u32);
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r27,0(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// rlwinm r9,r27,0,0,15
	ctx.r9.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0xFFFF0000;
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lwz r11,16(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 16);
	// stw r27,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r27.u32);
	// beq cr6,0x82263b18
	if (cr6.getEQ()) goto loc_82263B18;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263B18:
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// rlwinm r20,r31,30,2,31
	r20.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 30) & 0x3FFFFFFF;
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bne 0x82263b34
	if (!cr0.getEQ()) goto loc_82263B34;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82263B34:
	// lis r10,-1
	ctx.r10.s64 = -65536;
	// ori r23,r10,512
	r23.u64 = ctx.r10.u64 | 512;
	// li r10,2
	ctx.r10.s64 = 2;
	// cmplw cr6,r27,r23
	cr6.compare<uint32_t>(r27.u32, r23.u32, xer);
	// blt cr6,0x82263b4c
	if (cr6.getLT()) goto loc_82263B4C;
	// li r10,0
	ctx.r10.s64 = 0;
loc_82263B4C:
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lis r10,1
	ctx.r10.s64 = 65536;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplw cr6,r27,r23
	cr6.compare<uint32_t>(r27.u32, r23.u32, xer);
	// ori r10,r10,256
	ctx.r10.u64 = ctx.r10.u64 | 256;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bge cr6,0x82263bb8
	if (!cr6.getLT()) goto loc_82263BB8;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x82263780
	sub_82263780(ctx, base);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82263908
	sub_82263908(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x82263ba8
	if (cr0.getEQ()) goto loc_82263BA8;
loc_82263BA0:
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x82263eac
	goto loc_82263EAC;
loc_82263BA8:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82263348
	sub_82263348(ctx, base);
loc_82263BB8:
	// addi r11,r21,4
	r11.s64 = r21.s64 + 4;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,65535
	cr6.compare<uint32_t>(ctx.r10.u32, 65535, xer);
	// beq cr6,0x82263e18
	if (cr6.getEQ()) goto loc_82263E18;
	// lis r11,-31991
	r11.s64 = -2096562176;
	// addi r25,r11,-7344
	r25.s64 = r11.s64 + -7344;
loc_82263BD4:
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82263908
	sub_82263908(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x82263ba0
	if (!cr0.getEQ()) goto loc_82263BA0;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// rlwinm. r8,r10,0,0,0
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq 0x82263c08
	if (cr0.getEQ()) goto loc_82263C08;
loc_82263C00:
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// b 0x82263ddc
	goto loc_82263DDC;
loc_82263C08:
	// cmplwi cr6,r11,65534
	cr6.compare<uint32_t>(r11.u32, 65534, xer);
	// bne cr6,0x82263c24
	if (!cr6.getEQ()) goto loc_82263C24;
	// rlwinm r11,r10,16,17,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0x7FFF;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// b 0x82263dd8
	goto loc_82263DD8;
loc_82263C24:
	// cmplwi cr6,r11,65533
	cr6.compare<uint32_t>(r11.u32, 65533, xer);
	// beq cr6,0x82263dd4
	if (cr6.getEQ()) goto loc_82263DD4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82263dd4
	if (cr6.getEQ()) goto loc_82263DD4;
	// cmplwi cr6,r11,81
	cr6.compare<uint32_t>(r11.u32, 81, xer);
	// bne cr6,0x82263c64
	if (!cr6.getEQ()) goto loc_82263C64;
	// cmplw cr6,r27,r23
	cr6.compare<uint32_t>(r27.u32, r23.u32, xer);
	// blt cr6,0x82263c5c
	if (cr6.getLT()) goto loc_82263C5C;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x82262b60
	sub_82262B60(ctx, base);
	// b 0x82263ddc
	goto loc_82263DDC;
loc_82263C5C:
	// addi r11,r9,24
	r11.s64 = ctx.r9.s64 + 24;
	// b 0x82263dd8
	goto loc_82263DD8;
loc_82263C64:
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bne cr6,0x82263c84
	if (!cr6.getEQ()) goto loc_82263C84;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x82262c38
	sub_82262C38(ctx, base);
	// b 0x82263ddc
	goto loc_82263DDC;
loc_82263C84:
	// cmplwi cr6,r11,47
	cr6.compare<uint32_t>(r11.u32, 47, xer);
	// bne cr6,0x82263d18
	if (!cr6.getEQ()) goto loc_82263D18;
	// cmplw cr6,r27,r23
	cr6.compare<uint32_t>(r27.u32, r23.u32, xer);
	// bge cr6,0x82263c9c
	if (!cr6.getLT()) goto loc_82263C9C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
loc_82263C9C:
	// addi r11,r9,4
	r11.s64 = ctx.r9.s64 + 4;
	// lwz r30,80(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r29,r11,4
	r29.s64 = r11.s64 + 4;
	// lwz r28,0(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r31,r28,21
	r31.u64 = r28.u32 & 0x7FF;
	// cmplwi cr6,r31,16
	cr6.compare<uint32_t>(r31.u32, 16, xer);
	// blt cr6,0x82263cc0
	if (cr6.getLT()) goto loc_82263CC0;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// li r31,15
	r31.s64 = 15;
loc_82263CC0:
	// mr r11,r28
	r11.u64 = r28.u64;
	// rlwimi r11,r28,12,21,23
	r11.u64 = (__builtin_rotateleft32(r28.u32, 12) & 0x700) | (r11.u64 & 0xFFFFFFFFFFFFF8FF);
	// rlwinm r11,r11,0,19,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1F00;
	// cmplwi cr6,r11,3584
	cr6.compare<uint32_t>(r11.u32, 3584, xer);
	// beq cr6,0x82263cd8
	if (cr6.getEQ()) goto loc_82263CD8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263CD8:
	// li r11,29
	r11.s64 = 29;
	// clrlwi r10,r31,16
	ctx.r10.u64 = r31.u32 & 0xFFFF;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 ^ 1;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r10,r29,4
	ctx.r10.s64 = r29.s64 + 4;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// b 0x82263ddc
	goto loc_82263DDC;
loc_82263D18:
	// cmplwi cr6,r11,31
	cr6.compare<uint32_t>(r11.u32, 31, xer);
	// bne cr6,0x82263d54
	if (!cr6.getEQ()) goto loc_82263D54;
	// cmplw cr6,r27,r23
	cr6.compare<uint32_t>(r27.u32, r23.u32, xer);
	// bge cr6,0x82263d2c
	if (!cr6.getLT()) goto loc_82263D2C;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263D2C:
	// mr r8,r18
	ctx.r8.u64 = r18.u64;
	// mr r7,r19
	ctx.r7.u64 = r19.u64;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x82263108
	sub_82263108(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x82263eac
	if (!cr0.getEQ()) goto loc_82263EAC;
	// b 0x82263ddc
	goto loc_82263DDC;
loc_82263D54:
	// cmplwi cr6,r11,28
	cr6.compare<uint32_t>(r11.u32, 28, xer);
	// bne cr6,0x82263da0
	if (!cr6.getEQ()) goto loc_82263DA0;
	// lwz r10,16(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 16);
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82263da8
	if (!cr6.getEQ()) goto loc_82263DA8;
	// cmplw cr6,r27,r23
	cr6.compare<uint32_t>(r27.u32, r23.u32, xer);
	// bge cr6,0x82263d78
	if (!cr6.getLT()) goto loc_82263D78;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263D78:
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82263998
	sub_82263998(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x82263eac
	if (!cr0.getEQ()) goto loc_82263EAC;
	// lwz r5,224(r25)
	ctx.r5.u64 = PPC_LOAD_U32(r25.u32 + 224);
	// lwz r11,228(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 228);
	// b 0x82263db8
	goto loc_82263DB8;
loc_82263DA0:
	// cmplwi cr6,r11,97
	cr6.compare<uint32_t>(r11.u32, 97, xer);
	// bge cr6,0x82263c00
	if (!cr6.getLT()) goto loc_82263C00;
loc_82263DA8:
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r25,4
	ctx.r10.s64 = r25.s64 + 4;
	// lwzx r5,r11,r25
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + r25.u32);
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
loc_82263DB8:
	// lwz r6,16(r26)
	ctx.r6.u64 = PPC_LOAD_U32(r26.u32 + 16);
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x82263ddc
	goto loc_82263DDC;
loc_82263DD4:
	// addi r11,r9,4
	r11.s64 = ctx.r9.s64 + 4;
loc_82263DD8:
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
loc_82263DDC:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// subf r11,r21,r11
	r11.s64 = r11.s64 - r21.s64;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// cmpw cr6,r11,r20
	cr6.compare<int32_t>(r11.s32, r20.s32, xer);
	// bgt cr6,0x82263eb4
	if (cr6.getGT()) goto loc_82263EB4;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// subf r11,r22,r11
	r11.s64 = r11.s64 - r22.s64;
	// rlwinm r11,r11,0,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFC;
	// cmpwi cr6,r11,1024
	cr6.compare<int32_t>(r11.s32, 1024, xer);
	// blt cr6,0x82263e08
	if (cr6.getLT()) goto loc_82263E08;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263E08:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,65535
	cr6.compare<uint32_t>(ctx.r10.u32, 65535, xer);
	// bne cr6,0x82263bd4
	if (!cr6.getEQ()) goto loc_82263BD4;
loc_82263E18:
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// subf r11,r21,r11
	r11.s64 = r11.s64 - r21.s64;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// cmpw cr6,r11,r20
	cr6.compare<int32_t>(r11.s32, r20.s32, xer);
	// bne cr6,0x82263eb8
	if (!cr6.getEQ()) goto loc_82263EB8;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82263908
	sub_82263908(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x82263ba0
	if (!cr0.getEQ()) goto loc_82263BA0;
	// lwz r11,16(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 16);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82263e70
	if (!cr6.getEQ()) goto loc_82263E70;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82263998
	sub_82263998(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x82263eac
	if (!cr0.getEQ()) goto loc_82263EAC;
loc_82263E70:
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r11,40
	r11.s64 = 40;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,0(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r9,4(r24)
	ctx.r9.u64 = PPC_LOAD_U32(r24.u32 + 4);
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// stw r11,8(r24)
	PPC_STORE_U32(r24.u32 + 8, r11.u32);
	// ble cr6,0x82263ea8
	if (!cr6.getGT()) goto loc_82263EA8;
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263EA8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82263EAC:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed160
	return;
loc_82263EB4:
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
loc_82263EB8:
	// bl 0x8235f2b0
	sub_8235F2B0(ctx, base);
	// li r3,2
	ctx.r3.s64 = 2;
	// b 0x82263eac
	goto loc_82263EAC;
}

__attribute__((alias("__imp__sub_82263EC8"))) PPC_WEAK_FUNC(sub_82263EC8);
PPC_FUNC_IMPL(__imp__sub_82263EC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	// addi r11,r4,-1
	r11.s64 = ctx.r4.s64 + -1;
	// subfic r9,r5,32
	xer.ca = ctx.r5.u32 <= 32;
	ctx.r9.s64 = 32 - ctx.r5.s64;
	// rlwinm r10,r11,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// add r11,r10,r3
	r11.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r4,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r4.s64;
	// lbz r8,3(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// subf r10,r5,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r5.s64;
	// lbz r7,2(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// rotlwi r8,r8,8
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r8.u32, 8);
	// lbz r6,1(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r10,r10,33
	ctx.r10.s64 = ctx.r10.s64 + 33;
	// or r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 | ctx.r7.u64;
	// rlwinm r8,r8,8,0,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 8) & 0xFFFFFF00;
	// or r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 | ctx.r6.u64;
	// rlwinm r8,r8,8,0,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// slw r11,r11,r10
	r11.u64 = ctx.r10.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r10.u8 & 0x3F));
	// srw r3,r11,r9
	ctx.r3.u64 = ctx.r9.u8 & 0x20 ? 0 : (r11.u32 >> (ctx.r9.u8 & 0x3F));
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82263F20"))) PPC_WEAK_FUNC(sub_82263F20);
PPC_FUNC_IMPL(__imp__sub_82263F20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r31{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r11,r4,-1
	r11.s64 = ctx.r4.s64 + -1;
	// li r7,-1
	ctx.r7.s64 = -1;
	// rlwinm r11,r11,29,3,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// li r9,0
	ctx.r9.s64 = 0;
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// subf r10,r10,r4
	ctx.r10.s64 = ctx.r4.s64 - ctx.r10.s64;
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// subfic r4,r10,32
	xer.ca = ctx.r10.u32 <= 32;
	ctx.r4.s64 = 32 - ctx.r10.s64;
	// lbz r3,1(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// lbz r31,0(r11)
	r31.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// subf r5,r5,r4
	ctx.r5.s64 = ctx.r4.s64 - ctx.r5.s64;
	// lbz r4,2(r11)
	ctx.r4.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// slw r6,r6,r10
	ctx.r6.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r6.u32 << (ctx.r10.u8 & 0x3F));
	// srw r7,r7,r5
	ctx.r7.u64 = ctx.r5.u8 & 0x20 ? 0 : (ctx.r7.u32 >> (ctx.r5.u8 & 0x3F));
	// lbz r5,3(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// rotlwi r5,r5,8
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r5.u32, 8);
	// or r5,r5,r4
	ctx.r5.u64 = ctx.r5.u64 | ctx.r4.u64;
	// srw r7,r7,r10
	ctx.r7.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r7.u32 >> (ctx.r10.u8 & 0x3F));
	// slw r11,r7,r10
	r11.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r7.u32 << (ctx.r10.u8 & 0x3F));
	// rlwinm r10,r5,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 8) & 0xFFFFFF00;
	// and r7,r6,r11
	ctx.r7.u64 = ctx.r6.u64 & r11.u64;
	// or r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 | ctx.r3.u64;
	// rlwinm r10,r10,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0xFFFFFF00;
	// or r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 | r31.u64;
	// andc r11,r10,r11
	r11.u64 = ctx.r10.u64 & ~r11.u64;
	// or r11,r11,r7
	r11.u64 = r11.u64 | ctx.r7.u64;
loc_82263F94:
	// srw r10,r11,r9
	ctx.r10.u64 = ctx.r9.u8 & 0x20 ? 0 : (r11.u32 >> (ctx.r9.u8 & 0x3F));
	// addi r9,r9,8
	ctx.r9.s64 = ctx.r9.s64 + 8;
	// cmpwi cr6,r9,32
	cr6.compare<int32_t>(ctx.r9.s32, 32, xer);
	// stb r10,0(r8)
	PPC_STORE_U8(ctx.r8.u32 + 0, ctx.r10.u8);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// blt cr6,0x82263f94
	if (cr6.getLT()) goto loc_82263F94;
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82263FB8"))) PPC_WEAK_FUNC(sub_82263FB8);
PPC_FUNC_IMPL(__imp__sub_82263FB8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31991
	r11.s64 = -2096562176;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r31,r11,-6568
	r31.s64 = r11.s64 + -6568;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// lwz r11,1040(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1040);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x822641a8
	if (cr6.getEQ()) goto loc_822641A8;
	// cmpwi cr6,r30,15
	cr6.compare<int32_t>(r30.s32, 15, xer);
	// blt cr6,0x82264010
	if (cr6.getLT()) goto loc_82264010;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r11,-8492
	ctx.r5.s64 = r11.s64 + -8492;
	// b 0x822640d0
	goto loc_822640D0;
loc_82264010:
	// lis r11,-32018
	r11.s64 = -2098331648;
	// mulli r28,r30,12
	r28.s64 = r30.s64 * 12;
	// addi r11,r11,-23224
	r11.s64 = r11.s64 + -23224;
	// addi r27,r11,8
	r27.s64 = r11.s64 + 8;
	// lwzx r11,r28,r27
	r11.u64 = PPC_LOAD_U32(r28.u32 + r27.u32);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82264034
	if (!cr0.getEQ()) goto loc_82264034;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x822641bc
	if (!cr6.getEQ()) goto loc_822641BC;
loc_82264034:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x822641bc
	if (cr6.getEQ()) goto loc_822641BC;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// addi r10,r1,176
	ctx.r10.s64 = ctx.r1.s64 + 176;
	// li r4,1022
	ctx.r4.s64 = 1022;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r29,80(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// bl 0x823eef48
	sub_823EEF48(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// addi r5,r11,-16628
	ctx.r5.s64 = r11.s64 + -16628;
	// li r11,0
	r11.s64 = 0;
	// li r4,1023
	ctx.r4.s64 = 1023;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r11,1022(r31)
	PPC_STORE_U8(r31.u32 + 1022, r11.u8);
	// bl 0x823f1d48
	sub_823F1D48(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// stb r11,1023(r31)
	PPC_STORE_U8(r31.u32 + 1023, r11.u8);
	// beq cr6,0x82264094
	if (cr6.getEQ()) goto loc_82264094;
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// bne cr6,0x822640bc
	if (!cr6.getEQ()) goto loc_822640BC;
loc_82264094:
	// addi r11,r31,1052
	r11.s64 = r31.s64 + 1052;
	// lwz r3,1036(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1036);
	// addi r10,r30,-3
	ctx.r10.s64 = r30.s64 + -3;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r4,r10,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_822640BC:
	// lwzx r11,r28,r27
	r11.u64 = PPC_LOAD_U32(r28.u32 + r27.u32);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x822640f0
	if (!cr6.getEQ()) goto loc_822640F0;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
loc_822640D0:
	// addi r10,r31,1040
	ctx.r10.s64 = r31.s64 + 1040;
	// lwz r3,1036(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1036);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-8500
	ctx.r4.s64 = r11.s64 + -8500;
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x822641bc
	goto loc_822641BC;
loc_822640F0:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x822641a8
	if (!cr6.getEQ()) goto loc_822641A8;
	// lis r10,-31991
	ctx.r10.s64 = -2096562176;
	// lwz r11,-5544(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5544);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x822641a8
	if (cr6.getEQ()) goto loc_822641A8;
	// lis r28,-31991
	r28.s64 = -2096562176;
	// lwz r11,-5536(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -5536);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x822641a8
	if (cr6.getEQ()) goto loc_822641A8;
	// lis r29,-31991
	r29.s64 = -2096562176;
	// lwz r11,-5540(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -5540);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x822641a8
	if (cr6.getEQ()) goto loc_822641A8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// lwz r3,1036(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1036);
	// li r5,2
	ctx.r5.s64 = 2;
	// addi r4,r11,-8512
	ctx.r4.s64 = r11.s64 + -8512;
	// lwz r11,-5544(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5544);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// beq 0x822641bc
	if (cr0.getEQ()) goto loc_822641BC;
	// mr r11,r31
	r11.u64 = r31.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_82264154:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82264154
	if (!cr6.getEQ()) goto loc_82264154;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// lwz r3,1036(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1036);
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// rotlwi r6,r11,0
	ctx.r6.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,-5536(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -5536);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r6,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r6.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r3,1036(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1036);
	// lwz r11,-5540(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -5540);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x822641bc
	goto loc_822641BC;
loc_822641A8:
	// addi r11,r31,1048
	r11.s64 = r31.s64 + 1048;
	// lwz r3,1036(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1036);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_822641BC:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_822641C8"))) PPC_WEAK_FUNC(sub_822641C8);
PPC_FUNC_IMPL(__imp__sub_822641C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-31991
	ctx.r10.s64 = -2096562176;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r11,-5544(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5544);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lis r11,-31991
	r11.s64 = -2096562176;
	// lwz r11,-5536(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -5536);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lis r11,-31991
	r11.s64 = -2096562176;
	// lwz r11,-5540(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -5540);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lis r11,-31991
	r11.s64 = -2096562176;
	// li r5,2
	ctx.r5.s64 = 2;
	// lwz r3,-5532(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -5532);
	// lwz r11,-5544(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5544);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82264218"))) PPC_WEAK_FUNC(sub_82264218);
PPC_FUNC_IMPL(__imp__sub_82264218) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82264220"))) PPC_WEAK_FUNC(sub_82264220);
PPC_FUNC_IMPL(__imp__sub_82264220) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lis r10,-31991
	ctx.r10.s64 = -2096562176;
	// lwz r11,-5540(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5540);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lis r11,-31991
	r11.s64 = -2096562176;
	// lwz r3,-5532(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -5532);
	// lwz r11,-5540(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5540);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82264250"))) PPC_WEAK_FUNC(sub_82264250);
PPC_FUNC_IMPL(__imp__sub_82264250) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82264258"))) PPC_WEAK_FUNC(sub_82264258);
PPC_FUNC_IMPL(__imp__sub_82264258) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31991
	r11.s64 = -2096562176;
	// addi r11,r11,-5516
	r11.s64 = r11.s64 + -5516;
	// stw r4,-12(r11)
	PPC_STORE_U32(r11.u32 + -12, ctx.r4.u32);
	// lis r4,-31991
	ctx.r4.s64 = -2096562176;
	// stw r3,-16(r11)
	PPC_STORE_U32(r11.u32 + -16, ctx.r3.u32);
	// stw r8,-8(r11)
	PPC_STORE_U32(r11.u32 + -8, ctx.r8.u32);
	// stw r9,-4(r11)
	PPC_STORE_U32(r11.u32 + -4, ctx.r9.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// stw r5,-5544(r4)
	PPC_STORE_U32(ctx.r4.u32 + -5544, ctx.r5.u32);
	// lis r5,-31991
	ctx.r5.s64 = -2096562176;
	// stw r6,-5540(r5)
	PPC_STORE_U32(ctx.r5.u32 + -5540, ctx.r6.u32);
	// lis r6,-31991
	ctx.r6.s64 = -2096562176;
	// stw r7,-5536(r6)
	PPC_STORE_U32(ctx.r6.u32 + -5536, ctx.r7.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82264290"))) PPC_WEAK_FUNC(sub_82264290);
PPC_FUNC_IMPL(__imp__sub_82264290) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r9,r1,128
	ctx.r9.s64 = ctx.r1.s64 + 128;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822642E8"))) PPC_WEAK_FUNC(sub_822642E8);
PPC_FUNC_IMPL(__imp__sub_822642E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r9,r1,128
	ctx.r9.s64 = ctx.r1.s64 + 128;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stb r8,4(r3)
	PPC_STORE_U8(ctx.r3.u32 + 4, ctx.r8.u8);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82264348"))) PPC_WEAK_FUNC(sub_82264348);
PPC_FUNC_IMPL(__imp__sub_82264348) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	// mflr r12
	// bl 0x823ed100
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r10,r11,10996
	ctx.r10.s64 = r11.s64 + 10996;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r5,r11,10984
	ctx.r5.s64 = r11.s64 + 10984;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,10960
	ctx.r4.s64 = r11.s64 + 10960;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r11,10964
	ctx.r3.s64 = r11.s64 + 10964;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r31,r11,-7124
	r31.s64 = r11.s64 + -7124;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r30,r11,-7132
	r30.s64 = r11.s64 + -7132;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r29,r11,-7140
	r29.s64 = r11.s64 + -7140;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r28,r11,-7148
	r28.s64 = r11.s64 + -7148;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r27,r11,-7156
	r27.s64 = r11.s64 + -7156;
	// lis r11,-32253
	r11.s64 = -2113732608;
	// addi r26,r11,-32736
	r26.s64 = r11.s64 + -32736;
	// lis r11,-32253
	r11.s64 = -2113732608;
	// addi r25,r11,-32744
	r25.s64 = r11.s64 + -32744;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r24,r11,10988
	r24.s64 = r11.s64 + 10988;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r23,r11,-6972
	r23.s64 = r11.s64 + -6972;
	// lis r11,-32253
	r11.s64 = -2113732608;
	// addi r22,r11,-32760
	r22.s64 = r11.s64 + -32760;
	// lis r11,-32253
	r11.s64 = -2113732608;
	// addi r21,r11,-32768
	r21.s64 = r11.s64 + -32768;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r20,r11,10968
	r20.s64 = r11.s64 + 10968;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r19,r11,10972
	r19.s64 = r11.s64 + 10972;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r18,r11,10484
	r18.s64 = r11.s64 + 10484;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r17,r11,24136
	r17.s64 = r11.s64 + 24136;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r16,r11,32760
	r16.s64 = r11.s64 + 32760;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r15,r11,-6988
	r15.s64 = r11.s64 + -6988;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r14,r11,-6840
	r14.s64 = r11.s64 + -6840;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-6856
	r11.s64 = r11.s64 + -6856;
	// stw r11,-176(r1)
	PPC_STORE_U32(ctx.r1.u32 + -176, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-6872
	r11.s64 = r11.s64 + -6872;
	// stw r11,-172(r1)
	PPC_STORE_U32(ctx.r1.u32 + -172, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r9,r11,-7056
	ctx.r9.s64 = r11.s64 + -7056;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r8,r11,-7064
	ctx.r8.s64 = r11.s64 + -7064;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r7,r11,-7072
	ctx.r7.s64 = r11.s64 + -7072;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r6,r11,-7080
	ctx.r6.s64 = r11.s64 + -7080;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,10936
	r11.s64 = r11.s64 + 10936;
	// stw r11,-168(r1)
	PPC_STORE_U32(ctx.r1.u32 + -168, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,10776
	r11.s64 = r11.s64 + 10776;
	// stw r11,-164(r1)
	PPC_STORE_U32(ctx.r1.u32 + -164, r11.u32);
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r11,r11,-22264
	r11.s64 = r11.s64 + -22264;
	// stw r10,-760(r11)
	PPC_STORE_U32(r11.u32 + -760, ctx.r10.u32);
	// stw r5,-756(r11)
	PPC_STORE_U32(r11.u32 + -756, ctx.r5.u32);
	// stw r4,-752(r11)
	PPC_STORE_U32(r11.u32 + -752, ctx.r4.u32);
	// stw r3,-748(r11)
	PPC_STORE_U32(r11.u32 + -748, ctx.r3.u32);
	// stw r31,-744(r11)
	PPC_STORE_U32(r11.u32 + -744, r31.u32);
	// stw r30,-740(r11)
	PPC_STORE_U32(r11.u32 + -740, r30.u32);
	// stw r29,-736(r11)
	PPC_STORE_U32(r11.u32 + -736, r29.u32);
	// stw r28,-732(r11)
	PPC_STORE_U32(r11.u32 + -732, r28.u32);
	// stw r27,-728(r11)
	PPC_STORE_U32(r11.u32 + -728, r27.u32);
	// stw r26,-724(r11)
	PPC_STORE_U32(r11.u32 + -724, r26.u32);
	// stw r25,-720(r11)
	PPC_STORE_U32(r11.u32 + -720, r25.u32);
	// stw r24,-716(r11)
	PPC_STORE_U32(r11.u32 + -716, r24.u32);
	// stw r23,-712(r11)
	PPC_STORE_U32(r11.u32 + -712, r23.u32);
	// stw r22,-708(r11)
	PPC_STORE_U32(r11.u32 + -708, r22.u32);
	// stw r21,-704(r11)
	PPC_STORE_U32(r11.u32 + -704, r21.u32);
	// stw r20,-700(r11)
	PPC_STORE_U32(r11.u32 + -700, r20.u32);
	// li r5,2
	ctx.r5.s64 = 2;
	// stw r19,-696(r11)
	PPC_STORE_U32(r11.u32 + -696, r19.u32);
	// lis r4,-32251
	ctx.r4.s64 = -2113601536;
	// lwz r10,-176(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -176);
	// lis r3,-32254
	ctx.r3.s64 = -2113798144;
	// stw r18,-692(r11)
	PPC_STORE_U32(r11.u32 + -692, r18.u32);
	// lis r31,-32251
	r31.s64 = -2113601536;
	// stw r17,-688(r11)
	PPC_STORE_U32(r11.u32 + -688, r17.u32);
	// lis r30,-32251
	r30.s64 = -2113601536;
	// stw r16,-684(r11)
	PPC_STORE_U32(r11.u32 + -684, r16.u32);
	// lis r29,-32254
	r29.s64 = -2113798144;
	// stw r15,-680(r11)
	PPC_STORE_U32(r11.u32 + -680, r15.u32);
	// lis r28,-32254
	r28.s64 = -2113798144;
	// stw r14,-676(r11)
	PPC_STORE_U32(r11.u32 + -676, r14.u32);
	// lis r27,-32251
	r27.s64 = -2113601536;
	// stw r10,-672(r11)
	PPC_STORE_U32(r11.u32 + -672, ctx.r10.u32);
	// lis r26,-32251
	r26.s64 = -2113601536;
	// lwz r10,-172(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -172);
	// lis r25,-32251
	r25.s64 = -2113601536;
	// lis r24,-32251
	r24.s64 = -2113601536;
	// lis r23,-32251
	r23.s64 = -2113601536;
	// lis r22,-32254
	r22.s64 = -2113798144;
	// lis r21,-32254
	r21.s64 = -2113798144;
	// stw r10,-668(r11)
	PPC_STORE_U32(r11.u32 + -668, ctx.r10.u32);
	// lis r20,-32254
	r20.s64 = -2113798144;
	// lwz r10,-168(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -168);
	// addi r4,r4,-7092
	ctx.r4.s64 = ctx.r4.s64 + -7092;
	// stw r9,-664(r11)
	PPC_STORE_U32(r11.u32 + -664, ctx.r9.u32);
	// addi r3,r3,32604
	ctx.r3.s64 = ctx.r3.s64 + 32604;
	// stw r8,-660(r11)
	PPC_STORE_U32(r11.u32 + -660, ctx.r8.u32);
	// addi r31,r31,-7104
	r31.s64 = r31.s64 + -7104;
	// stw r7,-656(r11)
	PPC_STORE_U32(r11.u32 + -656, ctx.r7.u32);
	// addi r30,r30,-7116
	r30.s64 = r30.s64 + -7116;
	// stw r6,-652(r11)
	PPC_STORE_U32(r11.u32 + -652, ctx.r6.u32);
	// addi r29,r29,32596
	r29.s64 = r29.s64 + 32596;
	// stw r10,-648(r11)
	PPC_STORE_U32(r11.u32 + -648, ctx.r10.u32);
	// addi r28,r28,32588
	r28.s64 = r28.s64 + 32588;
	// lwz r10,-164(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -164);
	// addi r27,r27,-6880
	r27.s64 = r27.s64 + -6880;
	// addi r26,r26,-6888
	r26.s64 = r26.s64 + -6888;
	// addi r25,r25,-6896
	r25.s64 = r25.s64 + -6896;
	// addi r24,r24,-6904
	r24.s64 = r24.s64 + -6904;
	// addi r23,r23,-6912
	r23.s64 = r23.s64 + -6912;
	// stw r10,-644(r11)
	PPC_STORE_U32(r11.u32 + -644, ctx.r10.u32);
	// lis r10,-32018
	ctx.r10.s64 = -2098331648;
	// addi r22,r22,32540
	r22.s64 = r22.s64 + 32540;
	// addi r10,r10,-22904
	ctx.r10.s64 = ctx.r10.s64 + -22904;
	// addi r21,r21,32532
	r21.s64 = r21.s64 + 32532;
	// addi r20,r20,10948
	r20.s64 = r20.s64 + 10948;
	// lis r19,-32254
	r19.s64 = -2113798144;
	// stw r5,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r5.u32);
	// stw r5,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r5.u32);
	// stw r5,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r5.u32);
	// stw r5,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r5.u32);
	// stw r5,16(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16, ctx.r5.u32);
	// stw r5,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, ctx.r5.u32);
	// stw r5,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, ctx.r5.u32);
	// stw r5,28(r10)
	PPC_STORE_U32(ctx.r10.u32 + 28, ctx.r5.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r5,32(r10)
	PPC_STORE_U32(ctx.r10.u32 + 32, ctx.r5.u32);
	// stw r5,36(r10)
	PPC_STORE_U32(ctx.r10.u32 + 36, ctx.r5.u32);
	// stw r5,40(r10)
	PPC_STORE_U32(ctx.r10.u32 + 40, ctx.r5.u32);
	// li r5,3
	ctx.r5.s64 = 3;
	// stw r5,44(r10)
	PPC_STORE_U32(ctx.r10.u32 + 44, ctx.r5.u32);
	// stw r5,48(r10)
	PPC_STORE_U32(ctx.r10.u32 + 48, ctx.r5.u32);
	// stw r5,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r5.u32);
	// stw r5,56(r10)
	PPC_STORE_U32(ctx.r10.u32 + 56, ctx.r5.u32);
	// li r5,2
	ctx.r5.s64 = 2;
	// stw r5,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r5.u32);
	// stw r5,64(r10)
	PPC_STORE_U32(ctx.r10.u32 + 64, ctx.r5.u32);
	// li r5,3
	ctx.r5.s64 = 3;
	// stw r5,68(r10)
	PPC_STORE_U32(ctx.r10.u32 + 68, ctx.r5.u32);
	// li r5,2
	ctx.r5.s64 = 2;
	// stw r5,72(r10)
	PPC_STORE_U32(ctx.r10.u32 + 72, ctx.r5.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r5,76(r10)
	PPC_STORE_U32(ctx.r10.u32 + 76, ctx.r5.u32);
	// li r5,2
	ctx.r5.s64 = 2;
	// stw r5,80(r10)
	PPC_STORE_U32(ctx.r10.u32 + 80, ctx.r5.u32);
	// lis r5,-32254
	ctx.r5.s64 = -2113798144;
	// addi r5,r5,32636
	ctx.r5.s64 = ctx.r5.s64 + 32636;
	// lis r14,-32254
	r14.s64 = -2113798144;
	// stw r5,-400(r11)
	PPC_STORE_U32(r11.u32 + -400, ctx.r5.u32);
	// stw r4,-396(r11)
	PPC_STORE_U32(r11.u32 + -396, ctx.r4.u32);
	// lis r18,-32251
	r18.s64 = -2113601536;
	// addi r14,r14,10976
	r14.s64 = r14.s64 + 10976;
	// stw r3,-392(r11)
	PPC_STORE_U32(r11.u32 + -392, ctx.r3.u32);
	// stw r31,-388(r11)
	PPC_STORE_U32(r11.u32 + -388, r31.u32);
	// lis r17,-32254
	r17.s64 = -2113798144;
	// stw r30,-384(r11)
	PPC_STORE_U32(r11.u32 + -384, r30.u32);
	// addi r19,r19,10944
	r19.s64 = r19.s64 + 10944;
	// stw r29,-380(r11)
	PPC_STORE_U32(r11.u32 + -380, r29.u32);
	// lis r16,-32251
	r16.s64 = -2113601536;
	// stw r28,-376(r11)
	PPC_STORE_U32(r11.u32 + -376, r28.u32);
	// addi r18,r18,-7180
	r18.s64 = r18.s64 + -7180;
	// stw r14,-164(r1)
	PPC_STORE_U32(ctx.r1.u32 + -164, r14.u32);
	// li r14,2
	r14.s64 = 2;
	// stw r27,-372(r11)
	PPC_STORE_U32(r11.u32 + -372, r27.u32);
	// lis r15,-32251
	r15.s64 = -2113601536;
	// stw r26,-368(r11)
	PPC_STORE_U32(r11.u32 + -368, r26.u32);
	// addi r17,r17,10980
	r17.s64 = r17.s64 + 10980;
	// stw r25,-364(r11)
	PPC_STORE_U32(r11.u32 + -364, r25.u32);
	// addi r16,r16,-6924
	r16.s64 = r16.s64 + -6924;
	// stw r24,-360(r11)
	PPC_STORE_U32(r11.u32 + -360, r24.u32);
	// addi r15,r15,-6932
	r15.s64 = r15.s64 + -6932;
	// stw r14,84(r10)
	PPC_STORE_U32(ctx.r10.u32 + 84, r14.u32);
	// lis r5,-32251
	ctx.r5.s64 = -2113601536;
	// stw r14,88(r10)
	PPC_STORE_U32(ctx.r10.u32 + 88, r14.u32);
	// lis r4,-32254
	ctx.r4.s64 = -2113798144;
	// stw r14,92(r10)
	PPC_STORE_U32(ctx.r10.u32 + 92, r14.u32);
	// addi r5,r5,-6940
	ctx.r5.s64 = ctx.r5.s64 + -6940;
	// stw r14,96(r10)
	PPC_STORE_U32(ctx.r10.u32 + 96, r14.u32);
	// stw r14,100(r10)
	PPC_STORE_U32(ctx.r10.u32 + 100, r14.u32);
	// stw r14,104(r10)
	PPC_STORE_U32(ctx.r10.u32 + 104, r14.u32);
	// stw r14,108(r10)
	PPC_STORE_U32(ctx.r10.u32 + 108, r14.u32);
	// stw r14,112(r10)
	PPC_STORE_U32(ctx.r10.u32 + 112, r14.u32);
	// li r14,1
	r14.s64 = 1;
	// stw r23,-356(r11)
	PPC_STORE_U32(r11.u32 + -356, r23.u32);
	// stw r22,-352(r11)
	PPC_STORE_U32(r11.u32 + -352, r22.u32);
	// stw r21,-348(r11)
	PPC_STORE_U32(r11.u32 + -348, r21.u32);
	// stw r20,-344(r11)
	PPC_STORE_U32(r11.u32 + -344, r20.u32);
	// stw r14,116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 116, r14.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r19,-336(r11)
	PPC_STORE_U32(r11.u32 + -336, r19.u32);
	// stw r18,-340(r11)
	PPC_STORE_U32(r11.u32 + -340, r18.u32);
	// stw r17,-324(r11)
	PPC_STORE_U32(r11.u32 + -324, r17.u32);
	// stw r16,-332(r11)
	PPC_STORE_U32(r11.u32 + -332, r16.u32);
	// stw r10,-520(r11)
	PPC_STORE_U32(r11.u32 + -520, ctx.r10.u32);
	// stw r10,-516(r11)
	PPC_STORE_U32(r11.u32 + -516, ctx.r10.u32);
	// stw r10,-512(r11)
	PPC_STORE_U32(r11.u32 + -512, ctx.r10.u32);
	// stw r10,-508(r11)
	PPC_STORE_U32(r11.u32 + -508, ctx.r10.u32);
	// stw r10,-504(r11)
	PPC_STORE_U32(r11.u32 + -504, ctx.r10.u32);
	// stw r10,-500(r11)
	PPC_STORE_U32(r11.u32 + -500, ctx.r10.u32);
	// stw r10,-496(r11)
	PPC_STORE_U32(r11.u32 + -496, ctx.r10.u32);
	// stw r10,-492(r11)
	PPC_STORE_U32(r11.u32 + -492, ctx.r10.u32);
	// stw r10,-488(r11)
	PPC_STORE_U32(r11.u32 + -488, ctx.r10.u32);
	// stw r10,-484(r11)
	PPC_STORE_U32(r11.u32 + -484, ctx.r10.u32);
	// stw r10,-480(r11)
	PPC_STORE_U32(r11.u32 + -480, ctx.r10.u32);
	// stw r10,-476(r11)
	PPC_STORE_U32(r11.u32 + -476, ctx.r10.u32);
	// stw r10,-472(r11)
	PPC_STORE_U32(r11.u32 + -472, ctx.r10.u32);
	// stw r10,-468(r11)
	PPC_STORE_U32(r11.u32 + -468, ctx.r10.u32);
	// stw r10,-464(r11)
	PPC_STORE_U32(r11.u32 + -464, ctx.r10.u32);
	// stw r10,-460(r11)
	PPC_STORE_U32(r11.u32 + -460, ctx.r10.u32);
	// stw r10,-456(r11)
	PPC_STORE_U32(r11.u32 + -456, ctx.r10.u32);
	// stw r10,-452(r11)
	PPC_STORE_U32(r11.u32 + -452, ctx.r10.u32);
	// stw r10,-448(r11)
	PPC_STORE_U32(r11.u32 + -448, ctx.r10.u32);
	// stw r10,-444(r11)
	PPC_STORE_U32(r11.u32 + -444, ctx.r10.u32);
	// stw r10,-440(r11)
	PPC_STORE_U32(r11.u32 + -440, ctx.r10.u32);
	// stw r10,-436(r11)
	PPC_STORE_U32(r11.u32 + -436, ctx.r10.u32);
	// stw r10,-432(r11)
	PPC_STORE_U32(r11.u32 + -432, ctx.r10.u32);
	// stw r10,-428(r11)
	PPC_STORE_U32(r11.u32 + -428, ctx.r10.u32);
	// stw r10,-424(r11)
	PPC_STORE_U32(r11.u32 + -424, ctx.r10.u32);
	// stw r10,-420(r11)
	PPC_STORE_U32(r11.u32 + -420, ctx.r10.u32);
	// stw r10,-416(r11)
	PPC_STORE_U32(r11.u32 + -416, ctx.r10.u32);
	// stw r10,-412(r11)
	PPC_STORE_U32(r11.u32 + -412, ctx.r10.u32);
	// stw r10,-408(r11)
	PPC_STORE_U32(r11.u32 + -408, ctx.r10.u32);
	// stw r10,-404(r11)
	PPC_STORE_U32(r11.u32 + -404, ctx.r10.u32);
	// lwz r10,-164(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -164);
	// stw r15,-328(r11)
	PPC_STORE_U32(r11.u32 + -328, r15.u32);
	// stw r10,-312(r11)
	PPC_STORE_U32(r11.u32 + -312, ctx.r10.u32);
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// addi r10,r10,-6952
	ctx.r10.s64 = ctx.r10.s64 + -6952;
	// lis r14,-32251
	r14.s64 = -2113601536;
	// stw r10,-320(r11)
	PPC_STORE_U32(r11.u32 + -320, ctx.r10.u32);
	// lis r3,-32251
	ctx.r3.s64 = -2113601536;
	// stw r5,-316(r11)
	PPC_STORE_U32(r11.u32 + -316, ctx.r5.u32);
	// addi r14,r14,-7496
	r14.s64 = r14.s64 + -7496;
	// lis r31,-32254
	r31.s64 = -2113798144;
	// addi r4,r4,32240
	ctx.r4.s64 = ctx.r4.s64 + 32240;
	// lis r30,-32251
	r30.s64 = -2113601536;
	// addi r3,r3,-6964
	ctx.r3.s64 = ctx.r3.s64 + -6964;
	// stw r14,-164(r1)
	PPC_STORE_U32(ctx.r1.u32 + -164, r14.u32);
	// lis r14,-32254
	r14.s64 = -2113798144;
	// lis r29,-32251
	r29.s64 = -2113601536;
	// addi r14,r14,32280
	r14.s64 = r14.s64 + 32280;
	// stw r4,-308(r11)
	PPC_STORE_U32(r11.u32 + -308, ctx.r4.u32);
	// addi r31,r31,32456
	r31.s64 = r31.s64 + 32456;
	// lis r28,-32251
	r28.s64 = -2113601536;
	// stw r3,-304(r11)
	PPC_STORE_U32(r11.u32 + -304, ctx.r3.u32);
	// addi r30,r30,-7288
	r30.s64 = r30.s64 + -7288;
	// lis r27,-32251
	r27.s64 = -2113601536;
	// stw r14,-168(r1)
	PPC_STORE_U32(ctx.r1.u32 + -168, r14.u32);
	// addi r29,r29,-7300
	r29.s64 = r29.s64 + -7300;
	// lis r26,-32251
	r26.s64 = -2113601536;
	// stw r31,-300(r11)
	PPC_STORE_U32(r11.u32 + -300, r31.u32);
	// addi r28,r28,-7312
	r28.s64 = r28.s64 + -7312;
	// lis r25,-32251
	r25.s64 = -2113601536;
	// stw r30,-296(r11)
	PPC_STORE_U32(r11.u32 + -296, r30.u32);
	// addi r27,r27,-7324
	r27.s64 = r27.s64 + -7324;
	// lis r24,-32251
	r24.s64 = -2113601536;
	// stw r29,-292(r11)
	PPC_STORE_U32(r11.u32 + -292, r29.u32);
	// addi r26,r26,-7336
	r26.s64 = r26.s64 + -7336;
	// lis r23,-32251
	r23.s64 = -2113601536;
	// stw r28,-288(r11)
	PPC_STORE_U32(r11.u32 + -288, r28.u32);
	// addi r25,r25,-7352
	r25.s64 = r25.s64 + -7352;
	// lis r22,-32251
	r22.s64 = -2113601536;
	// stw r27,-284(r11)
	PPC_STORE_U32(r11.u32 + -284, r27.u32);
	// addi r24,r24,-7368
	r24.s64 = r24.s64 + -7368;
	// addi r23,r23,-7384
	r23.s64 = r23.s64 + -7384;
	// stw r26,-280(r11)
	PPC_STORE_U32(r11.u32 + -280, r26.u32);
	// addi r22,r22,-7404
	r22.s64 = r22.s64 + -7404;
	// lis r21,-32251
	r21.s64 = -2113601536;
	// stw r25,-276(r11)
	PPC_STORE_U32(r11.u32 + -276, r25.u32);
	// lis r20,-32254
	r20.s64 = -2113798144;
	// stw r24,-272(r11)
	PPC_STORE_U32(r11.u32 + -272, r24.u32);
	// lis r19,-32251
	r19.s64 = -2113601536;
	// stw r23,-268(r11)
	PPC_STORE_U32(r11.u32 + -268, r23.u32);
	// addi r21,r21,-7412
	r21.s64 = r21.s64 + -7412;
	// lis r18,-32251
	r18.s64 = -2113601536;
	// stw r22,-264(r11)
	PPC_STORE_U32(r11.u32 + -264, r22.u32);
	// addi r20,r20,32308
	r20.s64 = r20.s64 + 32308;
	// stw r9,-260(r11)
	PPC_STORE_U32(r11.u32 + -260, ctx.r9.u32);
	// lis r17,-32251
	r17.s64 = -2113601536;
	// stw r8,-256(r11)
	PPC_STORE_U32(r11.u32 + -256, ctx.r8.u32);
	// addi r19,r19,-7436
	r19.s64 = r19.s64 + -7436;
	// stw r7,-252(r11)
	PPC_STORE_U32(r11.u32 + -252, ctx.r7.u32);
	// lis r16,-32251
	r16.s64 = -2113601536;
	// stw r6,-248(r11)
	PPC_STORE_U32(r11.u32 + -248, ctx.r6.u32);
	// addi r18,r18,-7448
	r18.s64 = r18.s64 + -7448;
	// stw r21,-244(r11)
	PPC_STORE_U32(r11.u32 + -244, r21.u32);
	// lis r15,-32251
	r15.s64 = -2113601536;
	// stw r20,-240(r11)
	PPC_STORE_U32(r11.u32 + -240, r20.u32);
	// addi r17,r17,-7460
	r17.s64 = r17.s64 + -7460;
	// addi r16,r16,-7472
	r16.s64 = r16.s64 + -7472;
	// stw r19,-224(r11)
	PPC_STORE_U32(r11.u32 + -224, r19.u32);
	// addi r15,r15,-7484
	r15.s64 = r15.s64 + -7484;
	// stw r18,-216(r11)
	PPC_STORE_U32(r11.u32 + -216, r18.u32);
	// lis r14,-32254
	r14.s64 = -2113798144;
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r17,-232(r11)
	PPC_STORE_U32(r11.u32 + -232, r17.u32);
	// addi r14,r14,32276
	r14.s64 = r14.s64 + 32276;
	// stw r16,-220(r11)
	PPC_STORE_U32(r11.u32 + -220, r16.u32);
	// stw r15,-212(r11)
	PPC_STORE_U32(r11.u32 + -212, r15.u32);
	// lwz r10,-164(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -164);
	// stw r10,-228(r11)
	PPC_STORE_U32(r11.u32 + -228, ctx.r10.u32);
	// lwz r10,-168(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -168);
	// stw r10,-208(r11)
	PPC_STORE_U32(r11.u32 + -208, ctx.r10.u32);
	// lis r10,-32018
	ctx.r10.s64 = -2098331648;
	// stw r14,-204(r11)
	PPC_STORE_U32(r11.u32 + -204, r14.u32);
	// addi r10,r10,-22464
	ctx.r10.s64 = ctx.r10.s64 + -22464;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// stw r9,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r9.u32);
	// stw r9,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r9.u32);
	// stw r9,16(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16, ctx.r9.u32);
	// stw r9,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, ctx.r9.u32);
	// stw r9,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, ctx.r9.u32);
	// stw r9,28(r10)
	PPC_STORE_U32(ctx.r10.u32 + 28, ctx.r9.u32);
	// stw r9,32(r10)
	PPC_STORE_U32(ctx.r10.u32 + 32, ctx.r9.u32);
	// stw r9,36(r10)
	PPC_STORE_U32(ctx.r10.u32 + 36, ctx.r9.u32);
	// stw r9,40(r10)
	PPC_STORE_U32(ctx.r10.u32 + 40, ctx.r9.u32);
	// stw r9,44(r10)
	PPC_STORE_U32(ctx.r10.u32 + 44, ctx.r9.u32);
	// stw r9,48(r10)
	PPC_STORE_U32(ctx.r10.u32 + 48, ctx.r9.u32);
	// stw r9,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r9.u32);
	// stw r9,56(r10)
	PPC_STORE_U32(ctx.r10.u32 + 56, ctx.r9.u32);
	// stw r9,64(r10)
	PPC_STORE_U32(ctx.r10.u32 + 64, ctx.r9.u32);
	// stw r9,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r9.u32);
	// stw r9,76(r10)
	PPC_STORE_U32(ctx.r10.u32 + 76, ctx.r9.u32);
	// stw r9,68(r10)
	PPC_STORE_U32(ctx.r10.u32 + 68, ctx.r9.u32);
	// stw r9,72(r10)
	PPC_STORE_U32(ctx.r10.u32 + 72, ctx.r9.u32);
	// stw r9,88(r10)
	PPC_STORE_U32(ctx.r10.u32 + 88, ctx.r9.u32);
	// stw r9,80(r10)
	PPC_STORE_U32(ctx.r10.u32 + 80, ctx.r9.u32);
	// stw r9,84(r10)
	PPC_STORE_U32(ctx.r10.u32 + 84, ctx.r9.u32);
	// stw r9,92(r10)
	PPC_STORE_U32(ctx.r10.u32 + 92, ctx.r9.u32);
	// stw r9,96(r10)
	PPC_STORE_U32(ctx.r10.u32 + 96, ctx.r9.u32);
	// stw r9,100(r10)
	PPC_STORE_U32(ctx.r10.u32 + 100, ctx.r9.u32);
	// stw r9,104(r10)
	PPC_STORE_U32(ctx.r10.u32 + 104, ctx.r9.u32);
	// stw r9,108(r10)
	PPC_STORE_U32(ctx.r10.u32 + 108, ctx.r9.u32);
	// stw r9,112(r10)
	PPC_STORE_U32(ctx.r10.u32 + 112, ctx.r9.u32);
	// stw r9,116(r10)
	PPC_STORE_U32(ctx.r10.u32 + 116, ctx.r9.u32);
	// stw r9,120(r10)
	PPC_STORE_U32(ctx.r10.u32 + 120, ctx.r9.u32);
	// stw r9,124(r10)
	PPC_STORE_U32(ctx.r10.u32 + 124, ctx.r9.u32);
	// stw r9,128(r10)
	PPC_STORE_U32(ctx.r10.u32 + 128, ctx.r9.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r9,132(r10)
	PPC_STORE_U32(ctx.r10.u32 + 132, ctx.r9.u32);
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r9,136(r10)
	PPC_STORE_U32(ctx.r10.u32 + 136, ctx.r9.u32);
	// stw r9,140(r10)
	PPC_STORE_U32(ctx.r10.u32 + 140, ctx.r9.u32);
	// stw r9,144(r10)
	PPC_STORE_U32(ctx.r10.u32 + 144, ctx.r9.u32);
	// stw r9,148(r10)
	PPC_STORE_U32(ctx.r10.u32 + 148, ctx.r9.u32);
	// stw r9,152(r10)
	PPC_STORE_U32(ctx.r10.u32 + 152, ctx.r9.u32);
	// stw r9,156(r10)
	PPC_STORE_U32(ctx.r10.u32 + 156, ctx.r9.u32);
	// stw r9,160(r10)
	PPC_STORE_U32(ctx.r10.u32 + 160, ctx.r9.u32);
	// li r9,2
	ctx.r9.s64 = 2;
	// stw r9,176(r10)
	PPC_STORE_U32(ctx.r10.u32 + 176, ctx.r9.u32);
	// stw r9,184(r10)
	PPC_STORE_U32(ctx.r10.u32 + 184, ctx.r9.u32);
	// stw r9,168(r10)
	PPC_STORE_U32(ctx.r10.u32 + 168, ctx.r9.u32);
	// stw r9,180(r10)
	PPC_STORE_U32(ctx.r10.u32 + 180, ctx.r9.u32);
	// stw r9,188(r10)
	PPC_STORE_U32(ctx.r10.u32 + 188, ctx.r9.u32);
	// stw r9,172(r10)
	PPC_STORE_U32(ctx.r10.u32 + 172, ctx.r9.u32);
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r9,192(r10)
	PPC_STORE_U32(ctx.r10.u32 + 192, ctx.r9.u32);
	// stw r9,196(r10)
	PPC_STORE_U32(ctx.r10.u32 + 196, ctx.r9.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// stw r10,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r10.u32);
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// stw r10,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r10.u32);
	// stw r10,28(r11)
	PPC_STORE_U32(r11.u32 + 28, ctx.r10.u32);
	// stw r10,32(r11)
	PPC_STORE_U32(r11.u32 + 32, ctx.r10.u32);
	// stw r10,36(r11)
	PPC_STORE_U32(r11.u32 + 36, ctx.r10.u32);
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
	// stw r10,44(r11)
	PPC_STORE_U32(r11.u32 + 44, ctx.r10.u32);
	// stw r10,48(r11)
	PPC_STORE_U32(r11.u32 + 48, ctx.r10.u32);
	// stw r10,52(r11)
	PPC_STORE_U32(r11.u32 + 52, ctx.r10.u32);
	// stw r10,56(r11)
	PPC_STORE_U32(r11.u32 + 56, ctx.r10.u32);
	// stw r10,64(r11)
	PPC_STORE_U32(r11.u32 + 64, ctx.r10.u32);
	// stw r10,60(r11)
	PPC_STORE_U32(r11.u32 + 60, ctx.r10.u32);
	// stw r10,76(r11)
	PPC_STORE_U32(r11.u32 + 76, ctx.r10.u32);
	// stw r10,68(r11)
	PPC_STORE_U32(r11.u32 + 68, ctx.r10.u32);
	// stw r10,72(r11)
	PPC_STORE_U32(r11.u32 + 72, ctx.r10.u32);
	// stw r10,88(r11)
	PPC_STORE_U32(r11.u32 + 88, ctx.r10.u32);
	// stw r10,84(r11)
	PPC_STORE_U32(r11.u32 + 84, ctx.r10.u32);
	// stw r10,80(r11)
	PPC_STORE_U32(r11.u32 + 80, ctx.r10.u32);
	// stw r10,92(r11)
	PPC_STORE_U32(r11.u32 + 92, ctx.r10.u32);
	// stw r10,96(r11)
	PPC_STORE_U32(r11.u32 + 96, ctx.r10.u32);
	// stw r10,100(r11)
	PPC_STORE_U32(r11.u32 + 100, ctx.r10.u32);
	// stw r10,104(r11)
	PPC_STORE_U32(r11.u32 + 104, ctx.r10.u32);
	// stw r10,108(r11)
	PPC_STORE_U32(r11.u32 + 108, ctx.r10.u32);
	// stw r10,112(r11)
	PPC_STORE_U32(r11.u32 + 112, ctx.r10.u32);
	// stw r10,116(r11)
	PPC_STORE_U32(r11.u32 + 116, ctx.r10.u32);
	// stw r10,120(r11)
	PPC_STORE_U32(r11.u32 + 120, ctx.r10.u32);
	// stw r10,124(r11)
	PPC_STORE_U32(r11.u32 + 124, ctx.r10.u32);
	// stw r10,128(r11)
	PPC_STORE_U32(r11.u32 + 128, ctx.r10.u32);
	// stw r10,132(r11)
	PPC_STORE_U32(r11.u32 + 132, ctx.r10.u32);
	// stw r10,136(r11)
	PPC_STORE_U32(r11.u32 + 136, ctx.r10.u32);
	// stw r10,140(r11)
	PPC_STORE_U32(r11.u32 + 140, ctx.r10.u32);
	// stw r10,144(r11)
	PPC_STORE_U32(r11.u32 + 144, ctx.r10.u32);
	// stw r10,148(r11)
	PPC_STORE_U32(r11.u32 + 148, ctx.r10.u32);
	// stw r10,152(r11)
	PPC_STORE_U32(r11.u32 + 152, ctx.r10.u32);
	// stw r10,156(r11)
	PPC_STORE_U32(r11.u32 + 156, ctx.r10.u32);
	// stw r10,160(r11)
	PPC_STORE_U32(r11.u32 + 160, ctx.r10.u32);
	// stw r10,176(r11)
	PPC_STORE_U32(r11.u32 + 176, ctx.r10.u32);
	// stw r10,184(r11)
	PPC_STORE_U32(r11.u32 + 184, ctx.r10.u32);
	// stw r10,168(r11)
	PPC_STORE_U32(r11.u32 + 168, ctx.r10.u32);
	// stw r10,180(r11)
	PPC_STORE_U32(r11.u32 + 180, ctx.r10.u32);
	// stw r10,188(r11)
	PPC_STORE_U32(r11.u32 + 188, ctx.r10.u32);
	// stw r10,172(r11)
	PPC_STORE_U32(r11.u32 + 172, ctx.r10.u32);
	// stw r10,192(r11)
	PPC_STORE_U32(r11.u32 + 192, ctx.r10.u32);
	// stw r10,196(r11)
	PPC_STORE_U32(r11.u32 + 196, ctx.r10.u32);
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_822649F8"))) PPC_WEAK_FUNC(sub_822649F8);
PPC_FUNC_IMPL(__imp__sub_822649F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,8704
	r30.s64 = r11.s64 + 8704;
	// beq 0x82264a30
	if (cr0.getEQ()) goto loc_82264A30;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r5,r11,-6816
	ctx.r5.s64 = r11.s64 + -6816;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264A30:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82264a60
	if (cr0.getEQ()) goto loc_82264A60;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r5,r11,-6824
	ctx.r5.s64 = r11.s64 + -6824;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264A60:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82264A68"))) PPC_WEAK_FUNC(sub_82264A68);
PPC_FUNC_IMPL(__imp__sub_82264A68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r11,8704
	r30.s64 = r11.s64 + 8704;
	// beq 0x82264aa0
	if (cr0.getEQ()) goto loc_82264AA0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r5,r11,-6808
	ctx.r5.s64 = r11.s64 + -6808;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264AA0:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82264ad0
	if (cr0.getEQ()) goto loc_82264AD0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r5,r11,-6824
	ctx.r5.s64 = r11.s64 + -6824;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264AD0:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82264AD8"))) PPC_WEAK_FUNC(sub_82264AD8);
PPC_FUNC_IMPL(__imp__sub_82264AD8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed114
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r10
	r23.u64 = ctx.r10.u64;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// addi r4,r10,-21432
	ctx.r4.s64 = ctx.r10.s64 + -21432;
	// srawi r10,r11,7
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7F) != 0);
	ctx.r10.s64 = r11.s32 >> 7;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r24,r5
	r24.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r19,r7
	r19.u64 = ctx.r7.u64;
	// mr r25,r8
	r25.u64 = ctx.r8.u64;
	// mr r22,r9
	r22.u64 = ctx.r9.u64;
	// clrlwi r21,r10,31
	r21.u64 = ctx.r10.u32 & 0x1;
	// clrlwi r27,r11,26
	r27.u64 = r11.u32 & 0x3F;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// addi r20,r11,-6768
	r20.s64 = r11.s64 + -6768;
	// beq cr6,0x82264b38
	if (cr6.getEQ()) goto loc_82264B38;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264B38:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bne cr6,0x82264b4c
	if (!cr6.getEQ()) goto loc_82264B4C;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x82264b50
	if (!cr6.getEQ()) goto loc_82264B50;
loc_82264B4C:
	// li r11,0
	r11.s64 = 0;
loc_82264B50:
	// clrlwi r28,r11,24
	r28.u64 = r11.u32 & 0xFF;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// bne cr6,0x82264b68
	if (!cr6.getEQ()) goto loc_82264B68;
	// cmpwi cr6,r27,16
	cr6.compare<int32_t>(r27.s32, 16, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x82264b6c
	if (!cr6.getEQ()) goto loc_82264B6C;
loc_82264B68:
	// li r11,0
	r11.s64 = 0;
loc_82264B6C:
	// clrlwi. r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r11,8704
	r29.s64 = r11.s64 + 8704;
	// beq 0x82264b90
	if (cr0.getEQ()) goto loc_82264B90;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,8584
	ctx.r4.s64 = r11.s64 + 8584;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// b 0x82264bb8
	goto loc_82264BB8;
loc_82264B90:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x82264ba4
	if (cr6.getEQ()) goto loc_82264BA4;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r5,r11,10324
	ctx.r5.s64 = r11.s64 + 10324;
	// b 0x82264bac
	goto loc_82264BAC;
loc_82264BA4:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r5,r11,10420
	ctx.r5.s64 = r11.s64 + 10420;
loc_82264BAC:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264BB8:
	// clrlwi. r28,r28,24
	r28.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// beq 0x82264bd0
	if (cr0.getEQ()) goto loc_82264BD0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6772
	ctx.r4.s64 = r11.s64 + -6772;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264BD0:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82264c20
	if (!cr6.getEQ()) goto loc_82264C20;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x82264c0c
	if (cr6.getEQ()) goto loc_82264C0C;
	// cmpwi cr6,r27,62
	cr6.compare<int32_t>(r27.s32, 62, xer);
	// beq cr6,0x82264c00
	if (cr6.getEQ()) goto loc_82264C00;
	// cmpwi cr6,r27,63
	cr6.compare<int32_t>(r27.s32, 63, xer);
	// bne cr6,0x82264c0c
	if (!cr6.getEQ()) goto loc_82264C0C;
	// lis r11,-32253
	r11.s64 = -2113732608;
	// addi r5,r11,-24184
	ctx.r5.s64 = r11.s64 + -24184;
loc_82264BF8:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// b 0x82264c18
	goto loc_82264C18;
loc_82264C00:
	// lis r11,-32253
	r11.s64 = -2113732608;
	// addi r5,r11,-24188
	ctx.r5.s64 = r11.s64 + -24188;
	// b 0x82264bf8
	goto loc_82264BF8;
loc_82264C0C:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// addi r4,r11,5300
	ctx.r4.s64 = r11.s64 + 5300;
loc_82264C18:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264C20:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bne cr6,0x82264c40
	if (!cr6.getEQ()) goto loc_82264C40;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x82264c40
	if (cr6.getEQ()) goto loc_82264C40;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6776
	ctx.r4.s64 = r11.s64 + -6776;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264C40:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82264c58
	if (cr6.getEQ()) goto loc_82264C58;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6780
	ctx.r4.s64 = r11.s64 + -6780;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264C58:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bne cr6,0x82264cd4
	if (!cr6.getEQ()) goto loc_82264CD4;
	// cmpwi cr6,r24,15
	cr6.compare<int32_t>(r24.s32, 15, xer);
	// beq cr6,0x82264e2c
	if (cr6.getEQ()) goto loc_82264E2C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-19388
	ctx.r4.s64 = r11.s64 + -19388;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// clrlwi. r11,r24,31
	r11.u64 = r24.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82264c90
	if (cr0.getEQ()) goto loc_82264C90;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,31520
	ctx.r4.s64 = r11.s64 + 31520;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264C90:
	// rlwinm. r11,r24,0,30,30
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82264ca8
	if (cr0.getEQ()) goto loc_82264CA8;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,31516
	ctx.r4.s64 = r11.s64 + 31516;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264CA8:
	// rlwinm. r11,r24,0,29,29
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82264cc0
	if (cr0.getEQ()) goto loc_82264CC0;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,31508
	ctx.r4.s64 = r11.s64 + 31508;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264CC0:
	// rlwinm. r11,r24,0,28,28
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82264e2c
	if (cr0.getEQ()) goto loc_82264E2C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r11,15264
	ctx.r4.s64 = r11.s64 + 15264;
	// b 0x82264e24
	goto loc_82264E24;
loc_82264CD4:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-19388
	ctx.r4.s64 = r11.s64 + -19388;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// clrlwi. r11,r24,31
	r11.u64 = r24.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r28,r11,13944
	r28.s64 = r11.s64 + 13944;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r30,r11,25840
	r30.s64 = r11.s64 + 25840;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r29,r11,-6784
	r29.s64 = r11.s64 + -6784;
	// beq 0x82264d24
	if (cr0.getEQ()) goto loc_82264D24;
	// clrlwi. r11,r23,31
	r11.u64 = r23.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq 0x82264d18
	if (cr0.getEQ()) goto loc_82264D18;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// b 0x82264d44
	goto loc_82264D44;
loc_82264D18:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,31520
	ctx.r4.s64 = r11.s64 + 31520;
	// b 0x82264d44
	goto loc_82264D44;
loc_82264D24:
	// clrlwi r11,r23,31
	r11.u64 = r23.u32 & 0x1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x82264d3c
	if (cr6.getEQ()) goto loc_82264D3C;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bne cr6,0x82264d40
	if (!cr6.getEQ()) goto loc_82264D40;
loc_82264D3C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82264D40:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82264D44:
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// rlwinm. r11,r24,0,30,30
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82264d70
	if (cr0.getEQ()) goto loc_82264D70;
	// rlwinm. r11,r23,0,30,30
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq 0x82264d64
	if (cr0.getEQ()) goto loc_82264D64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// b 0x82264d90
	goto loc_82264D90;
loc_82264D64:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,31516
	ctx.r4.s64 = r11.s64 + 31516;
	// b 0x82264d90
	goto loc_82264D90;
loc_82264D70:
	// rlwinm r11,r23,0,30,30
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 0) & 0x2;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82264d88
	if (cr6.getEQ()) goto loc_82264D88;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bne cr6,0x82264d8c
	if (!cr6.getEQ()) goto loc_82264D8C;
loc_82264D88:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82264D8C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82264D90:
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// rlwinm. r11,r24,0,29,29
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82264dbc
	if (cr0.getEQ()) goto loc_82264DBC;
	// rlwinm. r11,r23,0,29,29
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq 0x82264db0
	if (cr0.getEQ()) goto loc_82264DB0;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// b 0x82264ddc
	goto loc_82264DDC;
loc_82264DB0:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,31508
	ctx.r4.s64 = r11.s64 + 31508;
	// b 0x82264ddc
	goto loc_82264DDC;
loc_82264DBC:
	// rlwinm r11,r23,0,29,29
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82264dd4
	if (cr6.getEQ()) goto loc_82264DD4;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bne cr6,0x82264dd8
	if (!cr6.getEQ()) goto loc_82264DD8;
loc_82264DD4:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82264DD8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82264DDC:
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// rlwinm. r11,r24,0,28,28
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82264e08
	if (cr0.getEQ()) goto loc_82264E08;
	// rlwinm. r11,r23,0,28,28
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq 0x82264dfc
	if (cr0.getEQ()) goto loc_82264DFC;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// b 0x82264e28
	goto loc_82264E28;
loc_82264DFC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r11,15264
	ctx.r4.s64 = r11.s64 + 15264;
	// b 0x82264e28
	goto loc_82264E28;
loc_82264E08:
	// rlwinm r11,r23,0,28,28
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 0) & 0x8;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// beq cr6,0x82264e20
	if (cr6.getEQ()) goto loc_82264E20;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bne cr6,0x82264e24
	if (!cr6.getEQ()) goto loc_82264E24;
loc_82264E20:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82264E24:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82264E28:
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264E2C:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x82264e3c
	if (cr6.getEQ()) goto loc_82264E3C;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// b 0x82264e44
	goto loc_82264E44;
loc_82264E3C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r11,2334
	ctx.r4.s64 = r11.s64 + 2334;
loc_82264E44:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// beq cr6,0x82264e64
	if (cr6.getEQ()) goto loc_82264E64;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6792
	ctx.r4.s64 = r11.s64 + -6792;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264E64:
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x823ed164
	return;
}

__attribute__((alias("__imp__sub_82264E70"))) PPC_WEAK_FUNC(sub_82264E70);
PPC_FUNC_IMPL(__imp__sub_82264E70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r23,r7
	r23.u64 = ctx.r7.u64;
	// mr r28,r10
	r28.u64 = ctx.r10.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bne cr6,0x82264e9c
	if (!cr6.getEQ()) goto loc_82264E9C;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne cr6,0x82264eac
	if (!cr6.getEQ()) goto loc_82264EAC;
loc_82264E9C:
	// cmpwi cr6,r31,1
	cr6.compare<int32_t>(r31.s32, 1, xer);
	// bne cr6,0x82264eb4
	if (!cr6.getEQ()) goto loc_82264EB4;
	// rlwinm. r11,r5,0,24,24
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82264eb4
	if (cr0.getEQ()) goto loc_82264EB4;
loc_82264EAC:
	// li r21,1
	r21.s64 = 1;
	// b 0x82264eb8
	goto loc_82264EB8;
loc_82264EB4:
	// li r21,0
	r21.s64 = 0;
loc_82264EB8:
	// srawi r10,r5,6
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x3F) != 0);
	ctx.r10.s64 = ctx.r5.s32 >> 6;
	// subfic r8,r31,0
	xer.ca = r31.u32 <= 0;
	ctx.r8.s64 = 0 - r31.s64;
	// cntlzw r11,r31
	r11.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// subfe r8,r8,r8
	temp.u8 = (~ctx.r8.u32 + ctx.r8.u32 < ~ctx.r8.u32) | (~ctx.r8.u32 + ctx.r8.u32 + xer.ca < xer.ca);
	ctx.r8.u64 = ~ctx.r8.u64 + ctx.r8.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r7,r11,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// rlwinm r11,r8,0,0,25
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFC0;
	// and r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 & r31.u64;
	// rlwinm r11,r11,0,25,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFF7F;
	// clrlwi r27,r10,31
	r27.u64 = ctx.r10.u32 & 0x1;
	// addi r11,r11,255
	r11.s64 = r11.s64 + 255;
	// and r25,r7,r6
	r25.u64 = ctx.r7.u64 & ctx.r6.u64;
	// and r26,r11,r5
	r26.u64 = r11.u64 & ctx.r5.u64;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x82264f00
	if (cr6.getEQ()) goto loc_82264F00;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r4,r11,8584
	ctx.r4.s64 = r11.s64 + 8584;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264F00:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// addi r22,r11,-6768
	r22.s64 = r11.s64 + -6768;
	// beq cr6,0x82264f1c
	if (cr6.getEQ()) goto loc_82264F1C;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264F1C:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bne cr6,0x82264f30
	if (!cr6.getEQ()) goto loc_82264F30;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// li r10,0
	ctx.r10.s64 = 0;
	// beq cr6,0x82264f34
	if (cr6.getEQ()) goto loc_82264F34;
loc_82264F30:
	// li r10,1
	ctx.r10.s64 = 1;
loc_82264F34:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// subfic r9,r31,0
	xer.ca = r31.u32 <= 0;
	ctx.r9.s64 = 0 - r31.s64;
	// addi r24,r11,-21324
	r24.s64 = r11.s64 + -21324;
	// subfe r11,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	r11.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// clrlwi r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r5,r11,99
	ctx.r5.s64 = r11.s64 + 99;
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// clrlwi. r30,r31,24
	r30.u64 = r31.u32 & 0xFF;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// beq 0x82264f74
	if (cr0.getEQ()) goto loc_82264F74;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r4,r11,-6772
	ctx.r4.s64 = r11.s64 + -6772;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264F74:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r4,r11,5300
	ctx.r4.s64 = r11.s64 + 5300;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// addi r31,r11,-6776
	r31.s64 = r11.s64 + -6776;
	// beq cr6,0x82264fa4
	if (cr6.getEQ()) goto loc_82264FA4;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264FA4:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x82264fcc
	if (cr6.getEQ()) goto loc_82264FCC;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x82264fbc
	if (cr6.getEQ()) goto loc_82264FBC;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// b 0x82264fc4
	goto loc_82264FC4;
loc_82264FBC:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6764
	ctx.r4.s64 = r11.s64 + -6764;
loc_82264FC4:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264FCC:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82264fe4
	if (cr6.getEQ()) goto loc_82264FE4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r4,r11,-6780
	ctx.r4.s64 = r11.s64 + -6780;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82264FE4:
	// lwz r25,340(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 340);
	// li r11,1
	r11.s64 = 1;
	// cmpwi cr6,r25,4
	cr6.compare<int32_t>(r25.s32, 4, xer);
	// blt cr6,0x82264ff8
	if (cr6.getLT()) goto loc_82264FF8;
	// li r11,0
	r11.s64 = 0;
loc_82264FF8:
	// clrlwi r23,r11,24
	r23.u64 = r11.u32 & 0xFF;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bne cr6,0x8226500c
	if (!cr6.getEQ()) goto loc_8226500C;
	// clrlwi. r11,r23,24
	r11.u64 = r23.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822650fc
	if (cr0.getEQ()) goto loc_822650FC;
loc_8226500C:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r4,r11,-19388
	ctx.r4.s64 = r11.s64 + -19388;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// srawi r9,r28,2
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3) != 0);
	ctx.r9.s64 = r28.s32 >> 2;
	// addi r30,r11,31464
	r30.s64 = r11.s64 + 31464;
	// srawi r10,r28,4
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0xF) != 0);
	ctx.r10.s64 = r28.s32 >> 4;
	// srawi r11,r28,6
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3F) != 0);
	r11.s64 = r28.s32 >> 6;
	// clrlwi r31,r28,30
	r31.u64 = r28.u32 & 0x3;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// clrlwi r26,r11,30
	r26.u64 = r11.u32 & 0x3;
	// addi r10,r10,-2
	ctx.r10.s64 = ctx.r10.s64 + -2;
	// lbzx r11,r31,r30
	r11.u64 = PPC_LOAD_U8(r31.u32 + r30.u32);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// clrlwi r28,r9,30
	r28.u64 = ctx.r9.u32 & 0x3;
	// clrlwi r27,r10,30
	r27.u64 = ctx.r10.u32 & 0x3;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// cmpwi cr6,r25,1
	cr6.compare<int32_t>(r25.s32, 1, xer);
	// ble cr6,0x822650fc
	if (!cr6.getGT()) goto loc_822650FC;
	// clrlwi. r23,r23,24
	r23.u64 = r23.u32 & 0xFF;
	cr0.compare<int32_t>(r23.s32, 0, xer);
	// bne 0x82265088
	if (!cr0.getEQ()) goto loc_82265088;
	// cmpw cr6,r28,r31
	cr6.compare<int32_t>(r28.s32, r31.s32, xer);
	// bne cr6,0x82265088
	if (!cr6.getEQ()) goto loc_82265088;
	// cmpw cr6,r27,r31
	cr6.compare<int32_t>(r27.s32, r31.s32, xer);
	// bne cr6,0x82265088
	if (!cr6.getEQ()) goto loc_82265088;
	// cmpw cr6,r26,r31
	cr6.compare<int32_t>(r26.s32, r31.s32, xer);
	// beq cr6,0x822650fc
	if (cr6.getEQ()) goto loc_822650FC;
loc_82265088:
	// lbzx r11,r28,r30
	r11.u64 = PPC_LOAD_U8(r28.u32 + r30.u32);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// cmpwi cr6,r25,2
	cr6.compare<int32_t>(r25.s32, 2, xer);
	// ble cr6,0x822650fc
	if (!cr6.getGT()) goto loc_822650FC;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// bne cr6,0x822650bc
	if (!cr6.getEQ()) goto loc_822650BC;
	// cmpw cr6,r27,r28
	cr6.compare<int32_t>(r27.s32, r28.s32, xer);
	// bne cr6,0x822650bc
	if (!cr6.getEQ()) goto loc_822650BC;
	// cmpw cr6,r26,r28
	cr6.compare<int32_t>(r26.s32, r28.s32, xer);
	// beq cr6,0x822650fc
	if (cr6.getEQ()) goto loc_822650FC;
loc_822650BC:
	// lbzx r11,r27,r30
	r11.u64 = PPC_LOAD_U8(r27.u32 + r30.u32);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// cmpwi cr6,r25,3
	cr6.compare<int32_t>(r25.s32, 3, xer);
	// ble cr6,0x822650fc
	if (!cr6.getGT()) goto loc_822650FC;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// bne cr6,0x822650e8
	if (!cr6.getEQ()) goto loc_822650E8;
	// cmpw cr6,r26,r27
	cr6.compare<int32_t>(r26.s32, r27.s32, xer);
	// beq cr6,0x822650fc
	if (cr6.getEQ()) goto loc_822650FC;
loc_822650E8:
	// lbzx r11,r26,r30
	r11.u64 = PPC_LOAD_U8(r26.u32 + r30.u32);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_822650FC:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x8226510c
	if (cr6.getEQ()) goto loc_8226510C;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// b 0x82265114
	goto loc_82265114;
loc_8226510C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r11,2334
	ctx.r4.s64 = r11.s64 + 2334;
loc_82265114:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_82265128"))) PPC_WEAK_FUNC(sub_82265128);
PPC_FUNC_IMPL(__imp__sub_82265128) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// srawi r11,r4,7
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x7F) != 0);
	r11.s64 = ctx.r4.s32 >> 7;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// clrlwi r30,r4,26
	r30.u64 = ctx.r4.u32 & 0x3F;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// clrlwi r27,r11,31
	r27.u64 = r11.u32 & 0x1;
	// beq cr6,0x8226515c
	if (cr6.getEQ()) goto loc_8226515C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,8584
	ctx.r4.s64 = r11.s64 + 8584;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_8226515C:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// addi r28,r11,-6768
	r28.s64 = r11.s64 + -6768;
	// beq cr6,0x82265178
	if (cr6.getEQ()) goto loc_82265178;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265178:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r11,-6736
	ctx.r4.s64 = r11.s64 + -6736;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6780
	ctx.r4.s64 = r11.s64 + -6780;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x82265248
	if (cr6.getEQ()) goto loc_82265248;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-19388
	ctx.r4.s64 = r11.s64 + -19388;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// clrlwi r9,r29,30
	ctx.r9.u64 = r29.u32 & 0x3;
	// addi r11,r11,31464
	r11.s64 = r11.s64 + 31464;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r30,r10,-21324
	r30.s64 = ctx.r10.s64 + -21324;
	// lbzx r11,r9,r11
	r11.u64 = PPC_LOAD_U8(ctx.r9.u32 + r11.u32);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// srawi r10,r29,2
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x3) != 0);
	ctx.r10.s64 = r29.s32 >> 2;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// clrlwi r10,r10,30
	ctx.r10.u64 = ctx.r10.u32 & 0x3;
	// addi r11,r11,-6744
	r11.s64 = r11.s64 + -6744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbzx r11,r10,r11
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// srawi r10,r29,4
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0xF) != 0);
	ctx.r10.s64 = r29.s32 >> 4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// clrlwi r10,r10,30
	ctx.r10.u64 = ctx.r10.u32 & 0x3;
	// addi r11,r11,-6752
	r11.s64 = r11.s64 + -6752;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbzx r11,r10,r11
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// srawi r10,r29,6
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x3F) != 0);
	ctx.r10.s64 = r29.s32 >> 6;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// clrlwi r10,r10,30
	ctx.r10.u64 = ctx.r10.u32 & 0x3;
	// addi r11,r11,-6760
	r11.s64 = r11.s64 + -6760;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbzx r11,r10,r11
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265248:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x82265258
	if (cr6.getEQ()) goto loc_82265258;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// b 0x82265260
	goto loc_82265260;
loc_82265258:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r11,2334
	ctx.r4.s64 = r11.s64 + 2334;
loc_82265260:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82265270"))) PPC_WEAK_FUNC(sub_82265270);
PPC_FUNC_IMPL(__imp__sub_82265270) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r24,0
	r24.s64 = 0;
	// li r25,0
	r25.s64 = 0;
	// li r27,0
	r27.s64 = 0;
	// lhz r11,0(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// clrlwi. r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822652b0
	if (!cr0.getEQ()) goto loc_822652B0;
	// lbz r11,8(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x822652b4
	if (cr6.getEQ()) goto loc_822652B4;
loc_822652B0:
	// li r11,0
	r11.s64 = 0;
loc_822652B4:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82265540
	if (!cr0.getEQ()) goto loc_82265540;
	// lbz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// lis r11,-32018
	r11.s64 = -2098331648;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r11,r11,-23024
	r11.s64 = r11.s64 + -23024;
	// rlwinm r10,r10,2,25,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0x7C;
	// lwzx r4,r10,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x822649f8
	sub_822649F8(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r10,r11,12,28,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xF;
	// rlwinm r9,r11,18,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 18) & 0x1;
	// rlwinm r8,r11,26,31,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	// rlwinm r7,r11,8,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0x1;
	// rlwinm r6,r11,17,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0x1;
	// rlwinm r5,r11,16,28,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xF;
	// clrlwi r4,r11,26
	ctx.r4.u64 = r11.u32 & 0x3F;
	// bl 0x82264ad8
	sub_82264AD8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r29,r11,-16560
	r29.s64 = r11.s64 + -16560;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm. r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82265334
	if (!cr0.getEQ()) goto loc_82265334;
	// rlwinm. r10,r11,0,1,1
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82265334
	if (!cr0.getEQ()) goto loc_82265334;
	// rlwinm. r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82265334
	if (cr0.getEQ()) goto loc_82265334;
	// li r24,1
	r24.s64 = 1;
loc_82265334:
	// lis r10,-32018
	ctx.r10.s64 = -2098331648;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// li r26,4
	r26.s64 = 4;
	// addi r28,r10,-22904
	r28.s64 = ctx.r10.s64 + -22904;
	// rlwinm r10,r11,10,25,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 10) & 0x7C;
	// lwzx r10,r10,r28
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r28.u32);
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// blt cr6,0x822653c0
	if (cr6.getLT()) goto loc_822653C0;
	// rlwinm. r11,r11,1,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// not r10,r11
	ctx.r10.u64 = ~r11.u64;
	// clrlwi r25,r10,31
	r25.u64 = ctx.r10.u32 & 0x1;
	// mr r27,r25
	r27.u64 = r25.u64;
	// bne 0x8226538c
	if (!cr0.getEQ()) goto loc_8226538C;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x8226538c
	if (cr6.getEQ()) goto loc_8226538C;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lbz r6,5(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// rlwinm r5,r11,6,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0x1;
	// lbz r4,9(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// bl 0x82265128
	sub_82265128(ctx, base);
	// b 0x822653c0
	goto loc_822653C0;
loc_8226538C:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r4,r9,1,31,31
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x1;
	// rlwinm r9,r11,6,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0x1;
	// lbz r5,9(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// rlwinm r8,r10,25,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 25) & 0x1;
	// lbz r10,5(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// rlwinm r7,r11,3,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0x1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// rlwinm r6,r11,1,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// bl 0x82264e70
	sub_82264E70(ctx, base);
loc_822653C0:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r10,r11,10,25,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 10) & 0x7C;
	// lwzx r10,r10,r28
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r28.u32);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// blt cr6,0x82265478
	if (cr6.getLT()) goto loc_82265478;
	// rlwinm r11,r11,2,30,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0x3;
	// clrlwi. r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x822653ec
	if (!cr0.getEQ()) goto loc_822653EC;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x822653ec
	if (!cr6.getEQ()) goto loc_822653EC;
	// li r25,2
	r25.s64 = 2;
loc_822653EC:
	// not r11,r11
	r11.u64 = ~r11.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// add r27,r11,r27
	r27.u64 = r11.u64 + r27.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,1,1
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82265434
	if (!cr0.getEQ()) goto loc_82265434;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x82265434
	if (cr6.getEQ()) goto loc_82265434;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lbz r6,6(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// rlwinm r5,r11,7,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 7) & 0x1;
	// lbz r4,10(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// bl 0x82265128
	sub_82265128(ctx, base);
	// b 0x82265478
	goto loc_82265478;
loc_82265434:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmpwi cr6,r25,2
	cr6.compare<int32_t>(r25.s32, 2, xer);
	// rlwinm r6,r11,1,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// beq cr6,0x82265448
	if (cr6.getEQ()) goto loc_82265448;
	// rlwinm r6,r11,2,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0x1;
loc_82265448:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r4,r9,2,31,31
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0x1;
	// rlwinm r9,r11,7,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 7) & 0x1;
	// lbz r5,10(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// rlwinm r8,r10,25,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 25) & 0x1;
	// lbz r10,6(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// rlwinm r7,r11,3,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0x1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// bl 0x82264e70
	sub_82264E70(ctx, base);
loc_82265478:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r10,r11,10,25,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 10) & 0x7C;
	// lwzx r10,r10,r28
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r28.u32);
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// blt cr6,0x82265540
	if (cr6.getLT()) goto loc_82265540;
	// rlwinm r11,r11,3,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0x7;
	// clrlwi. r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x822654a4
	if (!cr0.getEQ()) goto loc_822654A4;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x822654a4
	if (!cr6.getEQ()) goto loc_822654A4;
	// li r25,3
	r25.s64 = 3;
loc_822654A4:
	// not r11,r11
	r11.u64 = ~r11.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// add r29,r11,r27
	r29.u64 = r11.u64 + r27.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r10,r11,0,2,2
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x822654ec
	if (!cr0.getEQ()) goto loc_822654EC;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x822654ec
	if (cr6.getEQ()) goto loc_822654EC;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r6,r10,24
	ctx.r6.u64 = ctx.r10.u32 & 0xFF;
	// rlwinm r5,r10,8,31,31
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0x1;
	// bl 0x82265128
	sub_82265128(ctx, base);
	// b 0x82265540
	goto loc_82265540;
loc_822654EC:
	// cmpwi cr6,r25,3
	cr6.compare<int32_t>(r25.s32, 3, xer);
	// beq cr6,0x82265508
	if (cr6.getEQ()) goto loc_82265508;
	// cmpwi cr6,r29,2
	cr6.compare<int32_t>(r29.s32, 2, xer);
	// bne cr6,0x82265508
	if (!cr6.getEQ()) goto loc_82265508;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm r6,r11,2,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0x1;
	// b 0x82265510
	goto loc_82265510;
loc_82265508:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm r6,r11,1,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
loc_82265510:
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// clrlwi r5,r4,24
	ctx.r5.u64 = ctx.r4.u32 & 0xFF;
	// rlwinm r8,r10,25,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 25) & 0x1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// clrlwi r10,r11,24
	ctx.r10.u64 = r11.u32 & 0xFF;
	// rlwinm r9,r11,8,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0x1;
	// rlwinm r7,r11,3,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0x1;
	// rlwinm r4,r4,3,31,31
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0x1;
	// bl 0x82264e70
	sub_82264E70(ctx, base);
loc_82265540:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_82265548"))) PPC_WEAK_FUNC(sub_82265548);
PPC_FUNC_IMPL(__imp__sub_82265548) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r28,0
	r28.s64 = 0;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm. r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82265580
	if (!cr0.getEQ()) goto loc_82265580;
	// rlwinm. r10,r11,0,1,1
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82265580
	if (!cr0.getEQ()) goto loc_82265580;
	// rlwinm. r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82265580
	if (cr0.getEQ()) goto loc_82265580;
	// li r28,1
	r28.s64 = 1;
loc_82265580:
	// lis r11,-32018
	r11.s64 = -2098331648;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r29,r11,-22064
	r29.s64 = r11.s64 + -22064;
	// rlwinm r10,r10,8,24,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0xFC;
	// addi r11,r29,-600
	r11.s64 = r29.s64 + -600;
	// lwzx r4,r10,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x822649f8
	sub_822649F8(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r8,r11,26,31,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	// rlwinm. r6,r11,17,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0x1;
	cr0.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne 0x822655b4
	if (!cr0.getEQ()) goto loc_822655B4;
	// rlwinm r8,r11,18,31,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 18) & 0x1;
loc_822655B4:
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// clrlwi r4,r11,26
	ctx.r4.u64 = r11.u32 & 0x3F;
	// bne cr6,0x822655c4
	if (!cr6.getEQ()) goto loc_822655C4;
	// rlwinm r4,r11,24,26,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0x3F;
loc_822655C4:
	// rlwinm r10,r11,16,28,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xF;
	// rlwinm r9,r11,18,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 18) & 0x1;
	// rlwinm r7,r11,7,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 7) & 0x1;
	// rlwinm r5,r11,12,28,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xF;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82264ad8
	sub_82264AD8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r4,r11,-16560
	ctx.r4.s64 = r11.s64 + -16560;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lis r11,-32018
	r11.s64 = -2098331648;
	// rlwinm r7,r8,8,24,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 8) & 0xFC;
	// addi r11,r11,-22464
	r11.s64 = r11.s64 + -22464;
	// lwzx r11,r7,r11
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + r11.u32);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// blt cr6,0x822656d8
	if (cr6.getLT()) goto loc_822656D8;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r9,r11,2,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0x1;
	// rlwinm. r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r11,r11,3,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0x1;
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r9,r11,3
	ctx.r9.s64 = r11.s64 + 3;
	// beq 0x82265630
	if (cr0.getEQ()) goto loc_82265630;
	// li r11,1
	r11.s64 = 1;
	// b 0x82265654
	goto loc_82265654;
loc_82265630:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r10,r11,0,1,1
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82265644
	if (cr0.getEQ()) goto loc_82265644;
	// li r11,2
	r11.s64 = 2;
	// b 0x82265654
	goto loc_82265654;
loc_82265644:
	// rlwinm r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
loc_82265654:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r6,r10,0,2,2
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne 0x82265684
	if (!cr0.getEQ()) goto loc_82265684;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x82265684
	if (cr6.getEQ()) goto loc_82265684;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// clrlwi r4,r10,24
	ctx.r4.u64 = ctx.r10.u32 & 0xFF;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r6,r11,24
	ctx.r6.u64 = r11.u32 & 0xFF;
	// rlwinm r5,r11,8,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0x1;
	// bl 0x82265128
	sub_82265128(ctx, base);
	// b 0x822656d8
	goto loc_822656D8;
loc_82265684:
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x822656a0
	if (cr6.getEQ()) goto loc_822656A0;
	// cmpwi cr6,r9,2
	cr6.compare<int32_t>(ctx.r9.s32, 2, xer);
	// bne cr6,0x822656a0
	if (!cr6.getEQ()) goto loc_822656A0;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm r6,r11,2,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0x1;
	// b 0x822656a8
	goto loc_822656A8;
loc_822656A0:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// rlwinm r6,r11,1,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
loc_822656A8:
	// lwzx r10,r7,r29
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + r29.u32);
	// rlwinm r8,r8,25,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 25) & 0x1;
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// clrlwi r5,r4,24
	ctx.r5.u64 = ctx.r4.u32 & 0xFF;
	// rlwinm r9,r11,8,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0x1;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// rlwinm r7,r11,3,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0x1;
	// clrlwi r10,r11,24
	ctx.r10.u64 = r11.u32 & 0xFF;
	// rlwinm r4,r4,3,31,31
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0x1;
	// bl 0x82264e70
	sub_82264E70(ctx, base);
loc_822656D8:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_822656E0"))) PPC_WEAK_FUNC(sub_822656E0);
PPC_FUNC_IMPL(__imp__sub_822656E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,4(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x8226572c
	if (!cr0.getEQ()) goto loc_8226572C;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82265718
	if (cr0.getEQ()) goto loc_82265718;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-19344
	ctx.r4.s64 = r11.s64 + -19344;
	// b 0x82265720
	goto loc_82265720;
loc_82265718:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r4,r11,23060
	ctx.r4.s64 = r11.s64 + 23060;
loc_82265720:
	// bl 0x82264290
	sub_82264290(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stb r11,4(r31)
	PPC_STORE_U8(r31.u32 + 4, r11.u8);
loc_8226572C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82265740"))) PPC_WEAK_FUNC(sub_82265740);
PPC_FUNC_IMPL(__imp__sub_82265740) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r29,1
	r29.s64 = 1;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r28,r29
	r28.u64 = r29.u64;
	// bl 0x82264348
	sub_82264348(ctx, base);
	// li r27,-1
	r27.s64 = -1;
	// li r26,-1
	r26.s64 = -1;
loc_82265768:
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// srawi r11,r26,1
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x1) != 0);
	r11.s64 = r26.s32 >> 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// cmpw cr6,r11,r27
	cr6.compare<int32_t>(r11.s32, r27.s32, xer);
	// beq cr6,0x82265820
	if (cr6.getEQ()) goto loc_82265820;
	// li r5,4
	ctx.r5.s64 = 4;
	// li r4,45
	ctx.r4.s64 = 45;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// addi r11,r3,-1
	r11.s64 = ctx.r3.s64 + -1;
	// cmplwi cr6,r11,10
	cr6.compare<uint32_t>(r11.u32, 10, xer);
	// bgt cr6,0x82265814
	if (cr6.getGT()) goto loc_82265814;
	// lis r12,-32251
	r12.s64 = -2113601536;
	// addi r12,r12,-6712
	r12.s64 = r12.s64 + -6712;
	// lbzx r0,r12,r11
	r0.u64 = PPC_LOAD_U8(r12.u32 + r11.u32);
	// lis r12,-32218
	r12.s64 = -2111438848;
	// addi r12,r12,22464
	r12.s64 = r12.s64 + 22464;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_822657C0;
	case 1:
		goto loc_822657C0;
	case 2:
		goto loc_822657E0;
	case 3:
		goto loc_822657E0;
	case 4:
		goto loc_822657E0;
	case 5:
		goto loc_822657E0;
	case 6:
		goto loc_822657E8;
	case 7:
		goto loc_822657E8;
	case 8:
		goto loc_822657E8;
	case 9:
		goto loc_82265814;
	case 10:
		goto loc_822657E8;
	default:
		__builtin_unreachable();
	}
loc_822657C0:
	// li r5,12
	ctx.r5.s64 = 12;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// cmpwi cr6,r27,-1
	cr6.compare<int32_t>(r27.s32, -1, xer);
	// bne cr6,0x82265814
	if (!cr6.getEQ()) goto loc_82265814;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// b 0x82265814
	goto loc_82265814;
loc_822657E0:
	// li r28,0
	r28.s64 = 0;
	// b 0x82265814
	goto loc_82265814;
loc_822657E8:
	// li r5,13
	ctx.r5.s64 = 13;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// clrlwi r9,r3,27
	ctx.r9.u64 = ctx.r3.u32 & 0x1F;
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// rlwinm r10,r3,29,3,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 29) & 0x1FFFFFFC;
	// lwzx r8,r10,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// slw r9,r29,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x20 ? 0 : (r29.u32 << (ctx.r9.u8 & 0x3F));
	// or r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 | ctx.r8.u64;
	// stwx r9,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r9.u32);
loc_82265814:
	// clrlwi. r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r31,r31,6
	r31.s64 = r31.s64 + 6;
	// bne 0x82265768
	if (!cr0.getEQ()) goto loc_82265768;
loc_82265820:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82265828"))) PPC_WEAK_FUNC(sub_82265828);
PPC_FUNC_IMPL(__imp__sub_82265828) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lis r10,-32768
	ctx.r10.s64 = -2147483648;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r24,r5
	r24.u64 = ctx.r5.u64;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwinm r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x82265884
	if (!cr6.getEQ()) goto loc_82265884;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm. r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8226586c
	if (cr0.getEQ()) goto loc_8226586C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r5,r11,-5896
	ctx.r5.s64 = r11.s64 + -5896;
	// b 0x82265874
	goto loc_82265874;
loc_8226586C:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r5,r11,-5900
	ctx.r5.s64 = r11.s64 + -5900;
loc_82265874:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-16652
	ctx.r4.s64 = r11.s64 + -16652;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265884:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// clrlwi. r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82265d74
	if (cr0.getEQ()) goto loc_82265D74;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82265d60
	if (!cr6.getGT()) goto loc_82265D60;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// ble cr6,0x822658bc
	if (!cr6.getGT()) goto loc_822658BC;
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// ble cr6,0x82265d60
	if (!cr6.getGT()) goto loc_82265D60;
	// cmpwi cr6,r11,19
	cr6.compare<int32_t>(r11.s32, 19, xer);
	// ble cr6,0x822658bc
	if (!cr6.getGT()) goto loc_822658BC;
	// addi r10,r11,-24
	ctx.r10.s64 = r11.s64 + -24;
	// cmplwi cr6,r10,3
	cr6.compare<uint32_t>(ctx.r10.u32, 3, xer);
	// bgt cr6,0x82265d60
	if (cr6.getGT()) goto loc_82265D60;
loc_822658BC:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// cmplwi cr6,r11,26
	cr6.compare<uint32_t>(r11.u32, 26, xer);
	// addi r4,r10,-5916
	ctx.r4.s64 = ctx.r10.s64 + -5916;
	// bgt cr6,0x82265984
	if (cr6.getGT()) goto loc_82265984;
	// lis r12,-32251
	r12.s64 = -2113601536;
	// addi r12,r12,-6696
	r12.s64 = r12.s64 + -6696;
	// lbzx r0,r12,r11
	r0.u64 = PPC_LOAD_U8(r12.u32 + r11.u32);
	// lis r12,-32218
	r12.s64 = -2111438848;
	// addi r12,r12,22776
	r12.s64 = r12.s64 + 22776;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_822658F8;
	case 1:
		goto loc_82265904;
	case 2:
		goto loc_82265910;
	case 3:
		goto loc_8226591C;
	case 4:
		goto loc_82265984;
	case 5:
		goto loc_82265984;
	case 6:
		goto loc_82265984;
	case 7:
		goto loc_82265984;
	case 8:
		goto loc_82265984;
	case 9:
		goto loc_82265984;
	case 10:
		goto loc_82265984;
	case 11:
		goto loc_82265984;
	case 12:
		goto loc_82265984;
	case 13:
		goto loc_82265984;
	case 14:
		goto loc_82265984;
	case 15:
		goto loc_82265928;
	case 16:
		goto loc_82265934;
	case 17:
		goto loc_82265940;
	case 18:
		goto loc_8226594C;
	case 19:
		goto loc_82265984;
	case 20:
		goto loc_82265984;
	case 21:
		goto loc_82265984;
	case 22:
		goto loc_82265984;
	case 23:
		goto loc_82265958;
	case 24:
		goto loc_82265964;
	case 25:
		goto loc_82265970;
	case 26:
		goto loc_8226597C;
	default:
		__builtin_unreachable();
	}
loc_822658F8:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-5924
	ctx.r4.s64 = r11.s64 + -5924;
	// b 0x82265984
	goto loc_82265984;
loc_82265904:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-5940
	ctx.r4.s64 = r11.s64 + -5940;
	// b 0x82265984
	goto loc_82265984;
loc_82265910:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-5956
	ctx.r4.s64 = r11.s64 + -5956;
	// b 0x82265984
	goto loc_82265984;
loc_8226591C:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-5976
	ctx.r4.s64 = r11.s64 + -5976;
	// b 0x82265984
	goto loc_82265984;
loc_82265928:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6000
	ctx.r4.s64 = r11.s64 + -6000;
	// b 0x82265984
	goto loc_82265984;
loc_82265934:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6016
	ctx.r4.s64 = r11.s64 + -6016;
	// b 0x82265984
	goto loc_82265984;
loc_82265940:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6028
	ctx.r4.s64 = r11.s64 + -6028;
	// b 0x82265984
	goto loc_82265984;
loc_8226594C:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6040
	ctx.r4.s64 = r11.s64 + -6040;
	// b 0x82265984
	goto loc_82265984;
loc_82265958:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,31944
	ctx.r4.s64 = r11.s64 + 31944;
	// b 0x82265984
	goto loc_82265984;
loc_82265964:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,31928
	ctx.r4.s64 = r11.s64 + 31928;
	// b 0x82265984
	goto loc_82265984;
loc_82265970:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r4,r11,31912
	ctx.r4.s64 = r11.s64 + 31912;
	// b 0x82265984
	goto loc_82265984;
loc_8226597C:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6060
	ctx.r4.s64 = r11.s64 + -6060;
loc_82265984:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822649f8
	sub_822649F8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-21432
	ctx.r4.s64 = r11.s64 + -21432;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r5,r11,20,26,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0x3F;
	// rlwinm. r10,r11,0,13,13
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x822659bc
	if (cr0.getEQ()) goto loc_822659BC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6724
	ctx.r4.s64 = r11.s64 + -6724;
	// b 0x822659c4
	goto loc_822659C4;
loc_822659BC:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6728
	ctx.r4.s64 = r11.s64 + -6728;
loc_822659C4:
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r27,r11,-19388
	r27.s64 = r11.s64 + -19388;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lis r11,-32018
	r11.s64 = -2098331648;
	// clrlwi r10,r10,29
	ctx.r10.u64 = ctx.r10.u32 & 0x7;
	// addi r29,r11,-23040
	r29.s64 = r11.s64 + -23040;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r28,r11,-21324
	r28.s64 = r11.s64 + -21324;
	// lbzx r11,r10,r29
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r29.u32);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r11,r11,29,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x7;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lbzx r11,r11,r29
	r11.u64 = PPC_LOAD_U8(r11.u32 + r29.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r11,r11,26,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 26) & 0x7;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lbzx r11,r11,r29
	r11.u64 = PPC_LOAD_U8(r11.u32 + r29.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r11,r11,23,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 23) & 0x7;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lbzx r11,r11,r29
	r11.u64 = PPC_LOAD_U8(r11.u32 + r29.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-16560
	ctx.r4.s64 = r11.s64 + -16560;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,4
	ctx.r5.s64 = 4;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r5,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r5.u32);
	// rlwinm r5,r11,28,24,24
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0x80;
	// rlwinm r11,r11,27,26,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x3F;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// or r5,r5,r11
	ctx.r5.u64 = ctx.r5.u64 | r11.u64;
	// bl 0x82264e70
	sub_82264E70(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r11,r11,6,30,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0x3;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lbzx r11,r11,r29
	r11.u64 = PPC_LOAD_U8(r11.u32 + r29.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// rlwinm r11,r11,4,30,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0x3;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r29
	r11.u64 = PPC_LOAD_U8(r11.u32 + r29.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// clrlwi r10,r11,27
	ctx.r10.u64 = r11.u32 & 0x1F;
	// cmplwi cr6,r10,18
	cr6.compare<uint32_t>(ctx.r10.u32, 18, xer);
	// beq cr6,0x82265b10
	if (cr6.getEQ()) goto loc_82265B10;
	// rlwinm r11,r11,2,30,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0x3;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lbzx r11,r11,r29
	r11.u64 = PPC_LOAD_U8(r11.u32 + r29.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265B10:
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6068
	ctx.r4.s64 = r11.s64 + -6068;
	// rlwinm r5,r10,12,27,31
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 12) & 0x1F;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm. r11,r11,0,6,6
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82265b44
	if (cr0.getEQ()) goto loc_82265B44;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6104
	ctx.r4.s64 = r11.s64 + -6104;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265B44:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwinm r11,r11,20,30,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0x3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x82265b70
	if (cr6.getEQ()) goto loc_82265B70;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r29,1176
	ctx.r10.s64 = r29.s64 + 1176;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6120
	ctx.r4.s64 = r11.s64 + -6120;
	// lwzx r5,r9,r10
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265B70:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwinm r11,r11,18,30,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 18) & 0x3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x82265b9c
	if (cr6.getEQ()) goto loc_82265B9C;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r29,1192
	ctx.r10.s64 = r29.s64 + 1192;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6136
	ctx.r4.s64 = r11.s64 + -6136;
	// lwzx r5,r9,r10
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265B9C:
	// lhz r11,4(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x82265bc8
	if (cr6.getEQ()) goto loc_82265BC8;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r29,1208
	ctx.r10.s64 = r29.s64 + 1208;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6152
	ctx.r4.s64 = r11.s64 + -6152;
	// lwzx r5,r9,r10
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265BC8:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwinm r11,r11,14,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 14) & 0x7;
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// beq cr6,0x82265bf4
	if (cr6.getEQ()) goto loc_82265BF4;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r29,1224
	ctx.r10.s64 = r29.s64 + 1224;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6172
	ctx.r4.s64 = r11.s64 + -6172;
	// lwzx r5,r9,r10
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265BF4:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwinm r11,r11,11,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 11) & 0x7;
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// beq cr6,0x82265c20
	if (cr6.getEQ()) goto loc_82265C20;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r29,1256
	ctx.r10.s64 = r29.s64 + 1256;
	// lis r11,-32253
	r11.s64 = -2113732608;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-11884
	ctx.r4.s64 = r11.s64 + -11884;
	// lwzx r5,r9,r10
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265C20:
	// lbz r11,4(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 4);
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x82265c4c
	if (cr6.getEQ()) goto loc_82265C4C;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r29,1288
	ctx.r10.s64 = r29.s64 + 1288;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6192
	ctx.r4.s64 = r11.s64 + -6192;
	// lwzx r5,r9,r10
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265C4C:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwinm r11,r11,6,30,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0x3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x82265c78
	if (cr6.getEQ()) goto loc_82265C78;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r29,1304
	ctx.r10.s64 = r29.s64 + 1304;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6212
	ctx.r4.s64 = r11.s64 + -6212;
	// lwzx r5,r9,r10
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265C78:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwinm. r5,r11,4,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0x1;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82265c94
	if (cr0.getEQ()) goto loc_82265C94;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6232
	ctx.r4.s64 = r11.s64 + -6232;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265C94:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwinm. r11,r11,3,30,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0x3;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82265cbc
	if (cr0.getEQ()) goto loc_82265CBC;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r29,1320
	ctx.r10.s64 = r29.s64 + 1320;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6252
	ctx.r4.s64 = r11.s64 + -6252;
	// lwzx r5,r9,r10
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265CBC:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// clrlwi. r5,r11,31
	ctx.r5.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82265cd8
	if (cr0.getEQ()) goto loc_82265CD8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6280
	ctx.r4.s64 = r11.s64 + -6280;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265CD8:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm. r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82265cf4
	if (cr0.getEQ()) goto loc_82265CF4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6308
	ctx.r4.s64 = r11.s64 + -6308;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265CF4:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm. r5,r11,30,25,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x7F;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82265d10
	if (cr0.getEQ()) goto loc_82265D10;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6324
	ctx.r4.s64 = r11.s64 + -6324;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265D10:
	// lhz r11,8(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 8);
	// clrlwi. r5,r11,27
	ctx.r5.u64 = r11.u32 & 0x1F;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82265d2c
	if (cr0.getEQ()) goto loc_82265D2C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6340
	ctx.r4.s64 = r11.s64 + -6340;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265D2C:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm. r5,r11,11,27,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 11) & 0x1F;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82265d48
	if (cr0.getEQ()) goto loc_82265D48;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6356
	ctx.r4.s64 = r11.s64 + -6356;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265D48:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm. r5,r11,6,27,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0x1F;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82266100
	if (cr0.getEQ()) goto loc_82266100;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6372
	ctx.r4.s64 = r11.s64 + -6372;
	// b 0x822660f8
	goto loc_822660F8;
loc_82265D60:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6396
	ctx.r4.s64 = r11.s64 + -6396;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// b 0x82266100
	goto loc_82266100;
loc_82265D74:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,32200
	ctx.r4.s64 = r11.s64 + 32200;
	// bl 0x822649f8
	sub_822649F8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-21432
	ctx.r4.s64 = r11.s64 + -21432;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r5,r11,20,26,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0x3F;
	// rlwinm. r10,r11,0,13,13
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82265db4
	if (cr0.getEQ()) goto loc_82265DB4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6724
	ctx.r4.s64 = r11.s64 + -6724;
	// b 0x82265dbc
	goto loc_82265DBC;
loc_82265DB4:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6728
	ctx.r4.s64 = r11.s64 + -6728;
loc_82265DBC:
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-19388
	ctx.r4.s64 = r11.s64 + -19388;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lis r11,-32018
	r11.s64 = -2098331648;
	// clrlwi r10,r10,29
	ctx.r10.u64 = ctx.r10.u32 & 0x7;
	// addi r29,r11,-23040
	r29.s64 = r11.s64 + -23040;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r28,r11,-21324
	r28.s64 = r11.s64 + -21324;
	// lbzx r11,r10,r29
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r29.u32);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r11,r11,29,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x7;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lbzx r11,r11,r29
	r11.u64 = PPC_LOAD_U8(r11.u32 + r29.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r11,r11,26,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 26) & 0x7;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lbzx r11,r11,r29
	r11.u64 = PPC_LOAD_U8(r11.u32 + r29.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r11,r11,23,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 23) & 0x7;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lbzx r11,r11,r29
	r11.u64 = PPC_LOAD_U8(r11.u32 + r29.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r27,r11,-16560
	r27.s64 = r11.s64 + -16560;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,4
	ctx.r5.s64 = 4;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r5,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r5.u32);
	// rlwinm r5,r11,28,24,24
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0x80;
	// rlwinm r11,r11,27,26,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x3F;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// or r5,r5,r11
	ctx.r5.u64 = ctx.r5.u64 | r11.u64;
	// bl 0x82264e70
	sub_82264E70(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r10,r11,2,30,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0x3;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6400
	ctx.r4.s64 = r11.s64 + -6400;
	// lbzx r11,r10,r29
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r29.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82265ef0
	if (!cr0.getEQ()) goto loc_82265EF0;
	// lis r9,-32251
	ctx.r9.s64 = -2113601536;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lis r10,-32018
	ctx.r10.s64 = -2098331648;
	// addi r4,r9,-6412
	ctx.r4.s64 = ctx.r9.s64 + -6412;
	// addi r10,r10,-21460
	ctx.r10.s64 = ctx.r10.s64 + -21460;
	// rlwinm r9,r11,9,28,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 9) & 0xC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r5,r11,12,27,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0x1F;
	// lwzx r6,r9,r10
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265EF0:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r26,r11,8588
	r26.s64 = r11.s64 + 8588;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r25,r11,8704
	r25.s64 = r11.s64 + 8704;
	// beq 0x82265f2c
	if (cr0.getEQ()) goto loc_82265F2C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// addi r5,r11,-19320
	ctx.r5.s64 = r11.s64 + -19320;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265F2C:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r28,r11,-6424
	r28.s64 = r11.s64 + -6424;
	// bne 0x82265f90
	if (!cr0.getEQ()) goto loc_82265F90;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822656e0
	sub_822656E0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r10,-6452
	ctx.r4.s64 = ctx.r10.s64 + -6452;
	// rlwinm r6,r11,24,9,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0x7FFFFF;
	// clrlwi r5,r11,24
	ctx.r5.u64 = r11.u32 & 0xFF;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r10,r29,1336
	ctx.r10.s64 = r29.s64 + 1336;
	// addi r4,r11,-6468
	ctx.r4.s64 = r11.s64 + -6468;
	// lhz r11,4(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r11,r11,2,24,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFC;
	// lwzx r5,r11,r10
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265F90:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822656e0
	sub_822656E0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwinm. r11,r11,0,19,19
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x1000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r29,r11,-6476
	r29.s64 = r11.s64 + -6476;
	// beq 0x82265fcc
	if (cr0.getEQ()) goto loc_82265FCC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r11,-6488
	ctx.r4.s64 = r11.s64 + -6488;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82265FCC:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6500
	ctx.r4.s64 = r11.s64 + -6500;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm. r11,r11,0,18,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82265ff8
	if (cr0.getEQ()) goto loc_82265FF8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6524
	ctx.r4.s64 = r11.s64 + -6524;
	// b 0x82266000
	goto loc_82266000;
loc_82265FF8:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6548
	ctx.r4.s64 = r11.s64 + -6548;
loc_82266000:
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822656e0
	sub_822656E0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6560
	ctx.r4.s64 = r11.s64 + -6560;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm. r11,r11,0,16,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8226604c
	if (cr0.getEQ()) goto loc_8226604C;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// b 0x82266054
	goto loc_82266054;
loc_8226604C:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6568
	ctx.r4.s64 = r11.s64 + -6568;
loc_82266054:
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lbz r11,4(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 4);
	// clrlwi. r5,r11,26
	ctx.r5.u64 = r11.u32 & 0x3F;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82266074
	if (cr0.getEQ()) goto loc_82266074;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6584
	ctx.r4.s64 = r11.s64 + -6584;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82266074:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x822660e0
	if (cr6.getEQ()) goto loc_822660E0;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822660e0
	if (!cr0.getEQ()) goto loc_822660E0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822656e0
	sub_822656E0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm. r11,r11,0,1,1
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822660d4
	if (!cr0.getEQ()) goto loc_822660D4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r4,r11,-6620
	ctx.r4.s64 = r11.s64 + -6620;
	// rlwinm r11,r10,5,29,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0x7;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// b 0x822660e0
	goto loc_822660E0;
loc_822660D4:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-6636
	ctx.r4.s64 = r11.s64 + -6636;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_822660E0:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82266100
	if (cr0.getEQ()) goto loc_82266100;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// addi r5,r11,-19328
	ctx.r5.s64 = r11.s64 + -19328;
loc_822660F8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82266100:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_82266108"))) PPC_WEAK_FUNC(sub_82266108);
PPC_FUNC_IMPL(__imp__sub_82266108) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed10c
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r17,r6
	r17.u64 = ctx.r6.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r18,r7
	r18.u64 = ctx.r7.u64;
	// mr r19,r8
	r19.u64 = ctx.r8.u64;
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// beq cr6,0x82266304
	if (cr6.getEQ()) goto loc_82266304;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r23,r11,-5804
	r23.s64 = r11.s64 + -5804;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r27,r11,-20196
	r27.s64 = r11.s64 + -20196;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r26,r11,5360
	r26.s64 = r11.s64 + 5360;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r25,r11,-5888
	r25.s64 = r11.s64 + -5888;
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r22,r11,-22904
	r22.s64 = r11.s64 + -22904;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r24,r11,-18848
	r24.s64 = r11.s64 + -18848;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r21,r11,-5900
	r21.s64 = r11.s64 + -5900;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r20,r11,-5896
	r20.s64 = r11.s64 + -5896;
	// lis r11,-32253
	r11.s64 = -2113732608;
	// addi r30,r11,-11904
	r30.s64 = r11.s64 + -11904;
loc_82266178:
	// clrlwi r11,r18,31
	r11.u64 = r18.u32 & 0x1;
	// clrlwi r31,r19,31
	r31.u64 = r19.u32 & 0x1;
	// srawi r19,r19,1
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x1) != 0);
	r19.s64 = r19.s32 >> 1;
	// srawi r18,r18,2
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x3) != 0);
	r18.s64 = r18.s32 >> 2;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x822661b8
	if (!cr6.getEQ()) goto loc_822661B8;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x822656e0
	sub_822656E0(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82265828
	sub_82265828(ctx, base);
	// b 0x822662f8
	goto loc_822662F8;
loc_822661B8:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// rlwinm r11,r11,5,27,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 5) & 0x1F;
	// clrlwi r10,r11,30
	ctx.r10.u64 = r11.u32 & 0x3;
	// cmplwi cr6,r10,2
	cr6.compare<uint32_t>(ctx.r10.u32, 2, xer);
	// blt cr6,0x822661ec
	if (cr6.getLT()) goto loc_822661EC;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// beq cr6,0x822661e0
	if (cr6.getEQ()) goto loc_822661E0;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
loc_822661E0:
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_822661EC:
	// lhz r11,0(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + 0);
	// clrlwi. r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8226620c
	if (!cr0.getEQ()) goto loc_8226620C;
	// lbz r11,8(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 8);
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x82266210
	if (cr6.getEQ()) goto loc_82266210;
loc_8226620C:
	// li r11,0
	r11.s64 = 0;
loc_82266210:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82266238
	if (!cr0.getEQ()) goto loc_82266238;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x822656e0
	sub_822656E0(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82265270
	sub_82265270(ctx, base);
loc_82266238:
	// lbz r11,8(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 8);
	// rlwinm r11,r11,2,25,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0x7C;
	// lwzx r11,r11,r22
	r11.u64 = PPC_LOAD_U32(r11.u32 + r22.u32);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// blt cr6,0x82266274
	if (cr6.getLT()) goto loc_82266274;
	// rlwinm. r11,r11,0,8,11
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xF00000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x822662f8
	if (cr0.getEQ()) goto loc_822662F8;
	// li r7,1151
	ctx.r7.s64 = 1151;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
	// b 0x822662f8
	goto loc_822662F8;
loc_82266274:
	// rlwinm. r10,r11,0,8,11
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xF00000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8226629c
	if (!cr0.getEQ()) goto loc_8226629C;
	// rlwinm r10,r11,0,0,5
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFC000000;
	// lis r9,5120
	ctx.r9.s64 = 335544320;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bne cr6,0x8226629c
	if (!cr6.getEQ()) goto loc_8226629C;
	// rlwinm r11,r11,0,18,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x3F00;
	// cmplwi cr6,r11,4096
	cr6.compare<uint32_t>(r11.u32, 4096, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x822662a0
	if (!cr6.getEQ()) goto loc_822662A0;
loc_8226629C:
	// li r11,0
	r11.s64 = 0;
loc_822662A0:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822662f8
	if (!cr0.getEQ()) goto loc_822662F8;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x822656e0
	sub_822656E0(ctx, base);
	// lhz r11,0(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + 0);
	// clrlwi. r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x822662d0
	if (!cr0.getEQ()) goto loc_822662D0;
	// lbz r11,8(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 8);
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x822662d4
	if (cr6.getEQ()) goto loc_822662D4;
loc_822662D0:
	// li r11,0
	r11.s64 = 0;
loc_822662D4:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// beq 0x822662e8
	if (cr0.getEQ()) goto loc_822662E8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_822662E8:
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82265548
	sub_82265548(ctx, base);
loc_822662F8:
	// addic. r17,r17,-1
	xer.ca = r17.u32 > 0;
	r17.s64 = r17.s64 + -1;
	cr0.compare<int32_t>(r17.s32, 0, xer);
	// addi r28,r28,12
	r28.s64 = r28.s64 + 12;
	// bne 0x82266178
	if (!cr0.getEQ()) goto loc_82266178;
loc_82266304:
	// stw r28,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r28.u32);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x823ed15c
	return;
}

__attribute__((alias("__imp__sub_82266310"))) PPC_WEAK_FUNC(sub_82266310);
PPC_FUNC_IMPL(__imp__sub_82266310) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-432(r1)
	ea = -432 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r27,0
	r27.s64 = 0;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r11,1
	r11.s64 = 1;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r28,r27
	r28.u64 = r27.u64;
	// not r30,r6
	r30.u64 = ~ctx.r6.u64;
	// stw r6,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r6.u32);
	// stb r11,4(r31)
	PPC_STORE_U8(r31.u32 + 4, r11.u8);
	// stw r26,460(r1)
	PPC_STORE_U32(ctx.r1.u32 + 460, r26.u32);
	// stw r29,468(r1)
	PPC_STORE_U32(ctx.r1.u32 + 468, r29.u32);
	// stw r28,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r28.u32);
	// stb r11,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, r11.u8);
	// bl 0x82264348
	sub_82264348(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// bl 0x82265740
	sub_82265740(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// lis r11,-32018
	r11.s64 = -2098331648;
	// addi r20,r11,-21448
	r20.s64 = r11.s64 + -21448;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r22,r11,-6800
	r22.s64 = r11.s64 + -6800;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5308
	r11.s64 = r11.s64 + -5308;
	// stw r11,264(r1)
	PPC_STORE_U32(ctx.r1.u32 + 264, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5328
	r11.s64 = r11.s64 + -5328;
	// stw r11,256(r1)
	PPC_STORE_U32(ctx.r1.u32 + 256, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5348
	r11.s64 = r11.s64 + -5348;
	// stw r11,248(r1)
	PPC_STORE_U32(ctx.r1.u32 + 248, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5364
	r11.s64 = r11.s64 + -5364;
	// stw r11,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5376
	r11.s64 = r11.s64 + -5376;
	// stw r11,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r19,r11,8704
	r19.s64 = r11.s64 + 8704;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r18,r11,31844
	r18.s64 = r11.s64 + 31844;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5396
	r11.s64 = r11.s64 + -5396;
	// stw r11,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5412
	r11.s64 = r11.s64 + -5412;
	// stw r11,216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 216, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5432
	r11.s64 = r11.s64 + -5432;
	// stw r11,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-16560
	r11.s64 = r11.s64 + -16560;
	// stw r11,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5440
	r11.s64 = r11.s64 + -5440;
	// stw r11,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,5360
	r11.s64 = r11.s64 + 5360;
	// stw r11,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,5368
	r11.s64 = r11.s64 + 5368;
	// stw r11,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r14,r11,-5444
	r14.s64 = r11.s64 + -5444;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5452
	r11.s64 = r11.s64 + -5452;
	// stw r11,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,31852
	r11.s64 = r11.s64 + 31852;
	// stw r11,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,10860
	r11.s64 = r11.s64 + 10860;
	// stw r11,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5472
	r11.s64 = r11.s64 + -5472;
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,31864
	r11.s64 = r11.s64 + 31864;
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5484
	r11.s64 = r11.s64 + -5484;
	// stw r11,260(r1)
	PPC_STORE_U32(ctx.r1.u32 + 260, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5508
	r11.s64 = r11.s64 + -5508;
	// stw r11,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5528
	r11.s64 = r11.s64 + -5528;
	// stw r11,228(r1)
	PPC_STORE_U32(ctx.r1.u32 + 228, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5548
	r11.s64 = r11.s64 + -5548;
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r15,r11,-5568
	r15.s64 = r11.s64 + -5568;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5592
	r11.s64 = r11.s64 + -5592;
	// stw r11,244(r1)
	PPC_STORE_U32(ctx.r1.u32 + 244, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r17,r11,-5604
	r17.s64 = r11.s64 + -5604;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5624
	r11.s64 = r11.s64 + -5624;
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5648
	r11.s64 = r11.s64 + -5648;
	// stw r11,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r21,r11,-5664
	r21.s64 = r11.s64 + -5664;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5688
	r11.s64 = r11.s64 + -5688;
	// stw r11,220(r1)
	PPC_STORE_U32(ctx.r1.u32 + 220, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r23,r11,-21432
	r23.s64 = r11.s64 + -21432;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r16,r11,10864
	r16.s64 = r11.s64 + 10864;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5700
	r11.s64 = r11.s64 + -5700;
	// stw r11,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5708
	r11.s64 = r11.s64 + -5708;
	// stw r11,252(r1)
	PPC_STORE_U32(ctx.r1.u32 + 252, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5720
	r11.s64 = r11.s64 + -5720;
	// stw r11,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,31880
	r11.s64 = r11.s64 + 31880;
	// stw r11,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5776
	r11.s64 = r11.s64 + -5776;
	// stw r11,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5788
	r11.s64 = r11.s64 + -5788;
	// stw r11,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,11004
	r11.s64 = r11.s64 + 11004;
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r11.u32);
	// lis r11,-32253
	r11.s64 = -2113732608;
	// addi r24,r11,-11904
	r24.s64 = r11.s64 + -11904;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r11,r11,-5796
	r11.s64 = r11.s64 + -5796;
	// stw r11,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, r11.u32);
	// b 0x82266564
	goto loc_82266564;
loc_82266560:
	// lwz r26,460(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 460);
loc_82266564:
	// li r11,-1
	r11.s64 = -1;
	// mr r30,r26
	r30.u64 = r26.u64;
	// b 0x82266574
	goto loc_82266574;
loc_82266570:
	// lwz r11,188(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
loc_82266574:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r26,128(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// stw r11,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, r11.u32);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// cmpw cr6,r11,r26
	cr6.compare<int32_t>(r11.s32, r26.s32, xer);
	// beq cr6,0x822667b0
	if (cr6.getEQ()) goto loc_822667B0;
	// li r5,4
	ctx.r5.s64 = 4;
	// li r4,45
	ctx.r4.s64 = 45;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// lbz r25,113(r1)
	r25.u64 = PPC_LOAD_U8(ctx.r1.u32 + 113);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi r25,0
	cr0.compare<uint32_t>(r25.u32, 0, xer);
	// stb r11,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, r11.u8);
	// beq 0x82266610
	if (cr0.getEQ()) goto loc_82266610;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822656e0
	sub_822656E0(ctx, base);
	// clrlwi r10,r28,27
	ctx.r10.u64 = r28.u32 & 0x1F;
	// li r9,1
	ctx.r9.s64 = 1;
	// rlwinm r11,r28,27,5,31
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 27) & 0x7FFFFFF;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// slw r10,r9,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r9.u32 << (ctx.r10.u8 & 0x3F));
	// and. r11,r10,r11
	r11.u64 = ctx.r10.u64 & r11.u64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82266610
	if (cr0.getEQ()) goto loc_82266610;
	// srawi r11,r28,1
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x1) != 0);
	r11.s64 = r28.s32 >> 1;
	// lwz r4,204(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// srawi r10,r28,1
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x1) != 0);
	ctx.r10.s64 = r28.s32 >> 1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addze r5,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r5.s64 = temp.s64;
	// subf r6,r11,r28
	ctx.r6.s64 = r28.s64 - r11.s64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822656e0
	sub_822656E0(ctx, base);
loc_82266610:
	// cmplwi cr6,r29,12
	cr6.compare<uint32_t>(r29.u32, 12, xer);
	// bgt cr6,0x82266d2c
	if (cr6.getGT()) goto loc_82266D2C;
	// lis r12,-32251
	r12.s64 = -2113601536;
	// addi r12,r12,-6664
	r12.s64 = r12.s64 + -6664;
	// rlwinm r0,r29,1,0,30
	r0.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r0,r12,r0
	r0.u64 = PPC_LOAD_U16(r12.u32 + r0.u32);
	// lis r12,-32218
	r12.s64 = -2111438848;
	// addi r12,r12,26176
	r12.s64 = r12.s64 + 26176;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r29.u64) {
	case 0:
		goto loc_82266640;
	case 1:
		goto loc_8226669C;
	case 2:
		goto loc_82266670;
	case 3:
		goto loc_822667E8;
	case 4:
		goto loc_82266810;
	case 5:
		goto loc_8226682C;
	case 6:
		goto loc_82266848;
	case 7:
		goto loc_82266864;
	case 8:
		goto loc_8226694C;
	case 9:
		goto loc_82266A8C;
	case 10:
		goto loc_82266AE8;
	case 11:
		goto loc_82266B04;
	case 12:
		goto loc_82266C5C;
	default:
		__builtin_unreachable();
	}
loc_82266640:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82266794
	if (cr6.getEQ()) goto loc_82266794;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82266794
	if (cr0.getEQ()) goto loc_82266794;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r4,148(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
loc_82266664:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82264a68
	sub_82264A68(ctx, base);
	// b 0x82266794
	goto loc_82266794;
loc_82266670:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x8226669c
	if (cr6.getEQ()) goto loc_8226669C;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8226669c
	if (cr0.getEQ()) goto loc_8226669C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,236(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_8226669C:
	// li r5,12
	ctx.r5.s64 = 12;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r26,-1
	cr6.compare<int32_t>(r26.s32, -1, xer);
	// bne cr6,0x822666bc
	if (!cr6.getEQ()) goto loc_822666BC;
	// stw r29,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r29.u32);
loc_822666BC:
	// li r5,4
	ctx.r5.s64 = 4;
	// li r4,13
	ctx.r4.s64 = 13;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r5,12
	ctx.r5.s64 = 12;
	// li r4,17
	ctx.r4.s64 = 17;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r5,6
	ctx.r5.s64 = 6;
	// li r4,29
	ctx.r4.s64 = 29;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// li r5,9
	ctx.r5.s64 = 9;
	// li r4,35
	ctx.r4.s64 = 35;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,44
	ctx.r4.s64 = 44;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82266760
	if (cr6.getEQ()) goto loc_82266760;
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// ble cr6,0x82266760
	if (!cr6.getGT()) goto loc_82266760;
	// lwz r10,460(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 460);
	// mulli r11,r29,12
	r11.s64 = r29.s64 * 12;
	// add r5,r11,r10
	ctx.r5.u64 = r11.u64 + ctx.r10.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82266108
	sub_82266108(ctx, base);
	// add r11,r28,r29
	r11.u64 = r28.u64 + r29.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
loc_82266760:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x8226678c
	if (cr6.getEQ()) goto loc_8226678C;
	// add r11,r28,r29
	r11.u64 = r28.u64 + r29.u64;
	// mulli r6,r11,3
	ctx.r6.s64 = r11.s64 * 3;
	// lwz r11,468(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 468);
	// cmplw cr6,r6,r11
	cr6.compare<uint32_t>(ctx.r6.u32, r11.u32, xer);
	// ble cr6,0x8226678c
	if (!cr6.getGT()) goto loc_8226678C;
	// rotlwi r5,r11,0
	ctx.r5.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r4,156(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_8226678C:
	// lwz r28,116(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r27,0
	r27.s64 = 0;
loc_82266794:
	// addi r10,r28,1
	ctx.r10.s64 = r28.s64 + 1;
	// lbz r11,112(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 112);
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// rotlwi r28,r10,0
	r28.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// bne 0x82266570
	if (!cr0.getEQ()) goto loc_82266570;
loc_822667B0:
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lbz r10,113(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 113);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// stb r10,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r10.u8);
	// rlwinm. r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// bne 0x82266560
	if (!cr0.getEQ()) goto loc_82266560;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822656e0
	sub_822656E0(ctx, base);
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r1,r1,432
	ctx.r1.s64 = ctx.r1.s64 + 432;
	// b 0x823ed150
	return;
loc_822667E8:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82266808
	if (cr6.getEQ()) goto loc_82266808;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r4,212(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
loc_82266800:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82264a68
	sub_82264A68(ctx, base);
loc_82266808:
	// stb r27,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, r27.u8);
	// b 0x82266794
	goto loc_82266794;
loc_82266810:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82266808
	if (cr6.getEQ()) goto loc_82266808;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r4,164(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// b 0x82266800
	goto loc_82266800;
loc_8226682C:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82266808
	if (cr6.getEQ()) goto loc_82266808;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r4,252(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 252);
	// b 0x82266800
	goto loc_82266800;
loc_82266848:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82266808
	if (cr6.getEQ()) goto loc_82266808;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r4,172(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// b 0x82266800
	goto loc_82266800;
loc_82266864:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82266794
	if (cr6.getEQ()) goto loc_82266794;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r16
	ctx.r4.u64 = r16.u64;
	// bl 0x82264a68
	sub_82264A68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,13
	ctx.r5.s64 = 13;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// srawi r10,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r10.s64 = r11.s32 >> 1;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// clrlwi r6,r11,31
	ctx.r6.u64 = r11.u32 & 0x1;
	// addze r5,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r5.s64 = temp.s64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,14
	ctx.r4.s64 = 14;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr. r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x822668e0
	if (cr0.getEQ()) goto loc_822668E0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,220(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 220);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_822668E0:
	// li r5,5
	ctx.r5.s64 = 5;
	// li r4,17
	ctx.r4.s64 = 17;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,22
	ctx.r5.s64 = 22;
	// li r4,22
	ctx.r4.s64 = 22;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr. r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82266924
	if (cr0.getEQ()) goto loc_82266924;
	// lwz r4,180(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
loc_8226691C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82266924:
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,44
	ctx.r4.s64 = 44;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr. r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82266794
	if (cr0.getEQ()) goto loc_82266794;
	// lwz r4,132(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
loc_82266940:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// b 0x82266794
	goto loc_82266794;
loc_8226694C:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82266794
	if (cr6.getEQ()) goto loc_82266794;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r17
	ctx.r4.u64 = r17.u64;
	// bl 0x82264a68
	sub_82264A68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,13
	ctx.r5.s64 = 13;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// srawi r10,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r10.s64 = r11.s32 >> 1;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// clrlwi r6,r11,31
	ctx.r6.u64 = r11.u32 & 0x1;
	// addze r5,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r5.s64 = temp.s64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,14
	ctx.r4.s64 = 14;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr. r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x822669c8
	if (cr0.getEQ()) goto loc_822669C8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,244(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 244);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_822669C8:
	// li r5,5
	ctx.r5.s64 = 5;
	// li r4,17
	ctx.r4.s64 = 17;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,22
	ctx.r4.s64 = 22;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r15
	ctx.r4.u64 = r15.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,12
	ctx.r5.s64 = 12;
	// li r4,23
	ctx.r4.s64 = 23;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr. r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82266a2c
	if (cr0.getEQ()) goto loc_82266A2C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82266A2C:
	// li r5,2
	ctx.r5.s64 = 2;
	// li r4,35
	ctx.r4.s64 = 35;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,228(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,6
	ctx.r5.s64 = 6;
	// li r4,37
	ctx.r4.s64 = 37;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr. r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82266a70
	if (cr0.getEQ()) goto loc_82266A70;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,196(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82266A70:
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,43
	ctx.r4.s64 = 43;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// lwz r4,260(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 260);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// b 0x8226691c
	goto loc_8226691C;
loc_82266A8C:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82266794
	if (cr6.getEQ()) goto loc_82266794;
	// li r5,13
	ctx.r5.s64 = 13;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,140(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// bl 0x82264a68
	sub_82264A68(ctx, base);
	// srawi r11,r29,1
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x1) != 0);
	r11.s64 = r29.s32 >> 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,144(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// srawi r10,r29,1
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x1) != 0);
	ctx.r10.s64 = r29.s32 >> 1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addze r5,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r5.s64 = temp.s64;
	// subf r6,r11,r29
	ctx.r6.s64 = r29.s64 - r11.s64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// b 0x82266794
	goto loc_82266794;
loc_82266AE8:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82266794
	if (cr6.getEQ()) goto loc_82266794;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r4,152(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// b 0x82266664
	goto loc_82266664;
loc_82266B04:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82266794
	if (cr6.getEQ()) goto loc_82266794;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,14
	ctx.r4.s64 = 14;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mr r29,r27
	r29.u64 = r27.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x82266b38
	if (cr0.getEQ()) goto loc_82266B38;
	// li r29,1
	r29.s64 = 1;
loc_82266B38:
	// clrlwi. r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq 0x82266b54
	if (cr0.getEQ()) goto loc_82266B54;
	// lwz r4,160(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// bl 0x82264a68
	sub_82264A68(ctx, base);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// b 0x82266bb8
	goto loc_82266BB8;
loc_82266B54:
	// lwz r4,168(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// bl 0x82264a68
	sub_82264A68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,35
	ctx.r4.s64 = 35;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,43
	ctx.r4.s64 = 43;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// lwz r5,176(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x82266ba8
	if (!cr0.getEQ()) goto loc_82266BA8;
	// lwz r5,184(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
loc_82266BA8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,192(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// lwz r4,200(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
loc_82266BB8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,13
	ctx.r5.s64 = 13;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// srawi r10,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r10.s64 = r11.s32 >> 1;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// clrlwi r6,r11,31
	ctx.r6.u64 = r11.u32 & 0x1;
	// addze r5,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r5.s64 = temp.s64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,19
	ctx.r5.s64 = 19;
	// li r4,15
	ctx.r4.s64 = 15;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr. r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82266c10
	if (cr0.getEQ()) goto loc_82266C10;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,208(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82266C10:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm. r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82266c3c
	if (cr0.getEQ()) goto loc_82266C3C;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,34
	ctx.r4.s64 = 34;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,216(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82266C3C:
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,44
	ctx.r4.s64 = 44;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr. r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82266794
	if (cr0.getEQ()) goto loc_82266794;
	// lwz r4,224(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	// b 0x82266940
	goto loc_82266940;
loc_82266C5C:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82266794
	if (cr6.getEQ()) goto loc_82266794;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r18
	ctx.r4.u64 = r18.u64;
	// bl 0x82264a68
	sub_82264A68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// li r5,2
	ctx.r5.s64 = 2;
	// li r4,42
	ctx.r4.s64 = 42;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// rlwinm r11,r11,29,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1;
	// rlwinm r10,r29,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r5,r11,r20
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + r20.u32);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// cmpwi cr6,r29,3
	cr6.compare<int32_t>(r29.s32, 3, xer);
	// bne cr6,0x82266ce8
	if (!cr6.getEQ()) goto loc_82266CE8;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,232(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82266CE8:
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,44
	ctx.r4.s64 = 44;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr. r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82266d0c
	if (cr0.getEQ()) goto loc_82266D0C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,240(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// bl 0x822642e8
	sub_822642E8(ctx, base);
loc_82266D0C:
	// li r5,38
	ctx.r5.s64 = 38;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82263ec8
	sub_82263EC8(ctx, base);
	// mr. r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82266794
	if (cr0.getEQ()) goto loc_82266794;
	// lwz r4,248(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 248);
	// b 0x82266940
	goto loc_82266940;
loc_82266D2C:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82266794
	if (cr6.getEQ()) goto loc_82266794;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x822642e8
	sub_822642E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,256(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 256);
	// bl 0x82264a68
	sub_82264A68(ctx, base);
	// lwz r4,264(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 264);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// b 0x82266940
	goto loc_82266940;
}

__attribute__((alias("__imp__sub_82266D58"))) PPC_WEAK_FUNC(sub_82266D58);
PPC_FUNC_IMPL(__imp__sub_82266D58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r31,r11,-20196
	r31.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r30,r11,-5248
	r30.s64 = r11.s64 + -5248;
	// bne cr6,0x82266dac
	if (!cr6.getEQ()) goto loc_82266DAC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,265
	ctx.r7.s64 = 265;
	// addi r5,r11,-5260
	ctx.r5.s64 = r11.s64 + -5260;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82266DAC:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x82266dd0
	if (!cr6.getEQ()) goto loc_82266DD0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,266
	ctx.r7.s64 = 266;
	// addi r5,r11,-5276
	ctx.r5.s64 = r11.s64 + -5276;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82266DD0:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x82266e00
	if (!cr6.getEQ()) goto loc_82266E00;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,267
	ctx.r7.s64 = 267;
	// addi r5,r11,-5296
	ctx.r5.s64 = r11.s64 + -5296;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82266DF4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82266DF8:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
loc_82266E00:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82266df4
	if (cr6.getEQ()) goto loc_82266DF4;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x82266df4
	if (cr6.getEQ()) goto loc_82266DF4;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8226ade0
	sub_8226ADE0(ctx, base);
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x8226c4a0
	sub_8226C4A0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r3,0
	ctx.r3.s64 = 0;
	// bne 0x82266df8
	if (!cr0.getEQ()) goto loc_82266DF8;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// b 0x82266df8
	goto loc_82266DF8;
}

__attribute__((alias("__imp__sub_82266E40"))) PPC_WEAK_FUNC(sub_82266E40);
PPC_FUNC_IMPL(__imp__sub_82266E40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82266e84
	if (!cr6.getEQ()) goto loc_82266E84;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,391
	ctx.r7.s64 = 391;
	// addi r6,r11,-5248
	ctx.r6.s64 = r11.s64 + -5248;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r5,r11,-5260
	ctx.r5.s64 = r11.s64 + -5260;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-20196
	ctx.r4.s64 = r11.s64 + -20196;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x82266e94
	goto loc_82266E94;
loc_82266E84:
	// bl 0x8226ade0
	sub_8226ADE0(ctx, base);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x8226be98
	sub_8226BE98(ctx, base);
loc_82266E94:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82266EA8"))) PPC_WEAK_FUNC(sub_82266EA8);
PPC_FUNC_IMPL(__imp__sub_82266EA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82266ee4
	if (!cr6.getEQ()) goto loc_82266EE4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,241
	ctx.r7.s64 = 241;
	// addi r6,r11,-19856
	ctx.r6.s64 = r11.s64 + -19856;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r5,r11,-19872
	ctx.r5.s64 = r11.s64 + -19872;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-20196
	ctx.r4.s64 = r11.s64 + -20196;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82266EE4:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82266F00"))) PPC_WEAK_FUNC(sub_82266F00);
PPC_FUNC_IMPL(__imp__sub_82266F00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed110
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r24,r4
	r24.u64 = ctx.r4.u64;
	// mr r19,r3
	r19.u64 = ctx.r3.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x82266ea8
	sub_82266EA8(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x82266f2c
	if (!cr0.getEQ()) goto loc_82266F2C;
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x82267120
	goto loc_82267120;
loc_82266F2C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// bl 0x8226ade0
	sub_8226ADE0(ctx, base);
	// mr r20,r3
	r20.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// bl 0x8226adf8
	sub_8226ADF8(ctx, base);
	// mr r18,r3
	r18.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// bl 0x8226ade8
	sub_8226ADE8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// bl 0x8226ae08
	sub_8226AE08(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// bl 0x8226ae10
	sub_8226AE10(ctx, base);
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// bl 0x8226ae18
	sub_8226AE18(ctx, base);
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// bl 0x8226ae00
	sub_8226AE00(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r4,9
	ctx.r4.s64 = 9;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82300d48
	sub_82300D48(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x82266fc8
	if (!cr0.getEQ()) goto loc_82266FC8;
loc_82266FC0:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x82267120
	goto loc_82267120;
loc_82266FC8:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82300d48
	sub_82300D48(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x82266fc0
	if (!cr0.getEQ()) goto loc_82266FC0;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
	// bl 0x8226c138
	sub_8226C138(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x82268c68
	sub_82268C68(ctx, base);
	// b 0x82267018
	goto loc_82267018;
loc_82266FF4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82269010
	sub_82269010(ctx, base);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// bl 0x82269f98
	sub_82269F98(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x82266fc0
	if (!cr0.getEQ()) goto loc_82266FC0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82268f68
	sub_82268F68(ctx, base);
loc_82267018:
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x82266ff4
	if (!cr0.getEQ()) goto loc_82266FF4;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82300b08
	sub_82300B08(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// addi r29,r11,-20196
	r29.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r25,r11,-5156
	r25.s64 = r11.s64 + -5156;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r26,r11,-5248
	r26.s64 = r11.s64 + -5248;
	// beq 0x82267064
	if (cr0.getEQ()) goto loc_82267064;
	// li r7,520
	ctx.r7.s64 = 520;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267064:
	// li r10,1
	ctx.r10.s64 = 1;
	// lwz r5,24(r28)
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + 24);
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// lwz r4,20(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// mr r8,r22
	ctx.r8.u64 = r22.u64;
	// lwz r3,16(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 16);
	// mr r7,r23
	ctx.r7.u64 = r23.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// bl 0x82269260
	sub_82269260(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x822670b4
	if (!cr0.getEQ()) goto loc_822670B4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,531
	ctx.r7.s64 = 531;
	// addi r5,r11,-5160
	ctx.r5.s64 = r11.s64 + -5160;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
	// li r3,16
	ctx.r3.s64 = 16;
	// b 0x82267120
	goto loc_82267120;
loc_822670B4:
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822697d8
	sub_822697D8(ctx, base);
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// bl 0x8226cbd0
	sub_8226CBD0(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// beq 0x822670ec
	if (cr0.getEQ()) goto loc_822670EC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82269450
	sub_82269450(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// b 0x82267120
	goto loc_82267120;
loc_822670EC:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
	// bl 0x8226c058
	sub_8226C058(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x8226711c
	if (cr0.getEQ()) goto loc_8226711C;
	// li r7,580
	ctx.r7.s64 = 580;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_8226711C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82267120:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed160
	return;
}

__attribute__((alias("__imp__sub_82267128"))) PPC_WEAK_FUNC(sub_82267128);
PPC_FUNC_IMPL(__imp__sub_82267128) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r31,r11,-20196
	r31.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// addi r30,r11,-5248
	r30.s64 = r11.s64 + -5248;
	// bne cr6,0x82267170
	if (!cr6.getEQ()) goto loc_82267170;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,619
	ctx.r7.s64 = 619;
	// addi r5,r11,-5132
	ctx.r5.s64 = r11.s64 + -5132;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267170:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82301208
	sub_82301208(ctx, base);
	// mr. r28,r3
	r28.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// bne 0x822671a0
	if (!cr0.getEQ()) goto loc_822671A0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,623
	ctx.r7.s64 = 623;
	// addi r5,r11,-5136
	ctx.r5.s64 = r11.s64 + -5136;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822671A0:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82300e40
	sub_82300E40(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8226b9a8
	sub_8226B9A8(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_822671C0"))) PPC_WEAK_FUNC(sub_822671C0);
PPC_FUNC_IMPL(__imp__sub_822671C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r31,r11,-20196
	r31.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// addi r30,r11,-5248
	r30.s64 = r11.s64 + -5248;
	// bne cr6,0x82267204
	if (!cr6.getEQ()) goto loc_82267204;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,659
	ctx.r7.s64 = 659;
	// addi r5,r11,-5072
	ctx.r5.s64 = r11.s64 + -5072;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267204:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82266ea8
	sub_82266EA8(ctx, base);
	// mr. r28,r3
	r28.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// bne 0x82267230
	if (!cr0.getEQ()) goto loc_82267230;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,663
	ctx.r7.s64 = 663;
	// addi r5,r11,-5084
	ctx.r5.s64 = r11.s64 + -5084;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267230:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x82267258
	if (!cr0.getEQ()) goto loc_82267258;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,664
	ctx.r7.s64 = 664;
	// addi r5,r11,-5124
	ctx.r5.s64 = r11.s64 + -5124;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267258:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8226b9c8
	sub_8226B9C8(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823010b8
	sub_823010B8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82267278"))) PPC_WEAK_FUNC(sub_82267278);
PPC_FUNC_IMPL(__imp__sub_82267278) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x82302530
	sub_82302530(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x822672c0
	if (!cr0.getEQ()) goto loc_822672C0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,73
	ctx.r7.s64 = 73;
	// addi r6,r11,-5040
	ctx.r6.s64 = r11.s64 + -5040;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r5,r11,-5056
	ctx.r5.s64 = r11.s64 + -5056;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-20196
	ctx.r4.s64 = r11.s64 + -20196;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822672C0:
	// li r11,0
	r11.s64 = 0;
	// stw r30,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r30.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822672F0"))) PPC_WEAK_FUNC(sub_822672F0);
PPC_FUNC_IMPL(__imp__sub_822672F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x822673d0
	if (cr6.getEQ()) goto loc_822673D0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// addi r31,r11,-20196
	r31.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r30,r11,-5040
	r30.s64 = r11.s64 + -5040;
	// bne cr6,0x82267340
	if (!cr6.getEQ()) goto loc_82267340;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,115
	ctx.r7.s64 = 115;
	// addi r5,r11,-4880
	ctx.r5.s64 = r11.s64 + -4880;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267340:
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82267368
	if (!cr6.getEQ()) goto loc_82267368;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,116
	ctx.r7.s64 = 116;
	// addi r5,r11,-4900
	ctx.r5.s64 = r11.s64 + -4900;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267368:
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82267390
	if (cr6.getEQ()) goto loc_82267390;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,119
	ctx.r7.s64 = 119;
	// addi r5,r11,-4928
	ctx.r5.s64 = r11.s64 + -4928;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267390:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x822673b8
	if (cr6.getEQ()) goto loc_822673B8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,120
	ctx.r7.s64 = 120;
	// addi r5,r11,-4956
	ctx.r5.s64 = r11.s64 + -4956;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822673B8:
	// stw r29,4(r28)
	PPC_STORE_U32(r28.u32 + 4, r29.u32);
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// stw r11,8(r28)
	PPC_STORE_U32(r28.u32 + 8, r11.u32);
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// stw r28,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r28.u32);
	// stw r28,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r28.u32);
loc_822673D0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_822673D8"))) PPC_WEAK_FUNC(sub_822673D8);
PPC_FUNC_IMPL(__imp__sub_822673D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x822674b4
	if (cr6.getEQ()) goto loc_822674B4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// addi r31,r11,-20196
	r31.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r30,r11,-5040
	r30.s64 = r11.s64 + -5040;
	// bne cr6,0x82267428
	if (!cr6.getEQ()) goto loc_82267428;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,163
	ctx.r7.s64 = 163;
	// addi r5,r11,-4848
	ctx.r5.s64 = r11.s64 + -4848;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267428:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82267450
	if (!cr6.getEQ()) goto loc_82267450;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,164
	ctx.r7.s64 = 164;
	// addi r5,r11,-4868
	ctx.r5.s64 = r11.s64 + -4868;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267450:
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82267478
	if (cr6.getEQ()) goto loc_82267478;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,167
	ctx.r7.s64 = 167;
	// addi r5,r11,-4928
	ctx.r5.s64 = r11.s64 + -4928;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267478:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x822674a0
	if (cr6.getEQ()) goto loc_822674A0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,168
	ctx.r7.s64 = 168;
	// addi r5,r11,-4956
	ctx.r5.s64 = r11.s64 + -4956;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822674A0:
	// stw r29,8(r28)
	PPC_STORE_U32(r28.u32 + 8, r29.u32);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// stw r11,4(r28)
	PPC_STORE_U32(r28.u32 + 4, r11.u32);
	// stw r28,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r28.u32);
	// stw r28,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r28.u32);
loc_822674B4:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_822674C0"))) PPC_WEAK_FUNC(sub_822674C0);
PPC_FUNC_IMPL(__imp__sub_822674C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82267560
	if (cr6.getEQ()) goto loc_82267560;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r30,r11,-20196
	r30.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r29,r11,-5040
	r29.s64 = r11.s64 + -5040;
	// bne cr6,0x82267510
	if (!cr6.getEQ()) goto loc_82267510;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,264
	ctx.r7.s64 = 264;
	// addi r5,r11,-4836
	ctx.r5.s64 = r11.s64 + -4836;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267510:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82267538
	if (!cr6.getEQ()) goto loc_82267538;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,265
	ctx.r7.s64 = 265;
	// addi r5,r11,-4820
	ctx.r5.s64 = r11.s64 + -4820;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267538:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// li r11,0
	r11.s64 = 0;
	// lwz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// stw r9,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r9.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
loc_82267560:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82267568"))) PPC_WEAK_FUNC(sub_82267568);
PPC_FUNC_IMPL(__imp__sub_82267568) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r29,r11,-20196
	r29.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// addi r28,r11,-5040
	r28.s64 = r11.s64 + -5040;
	// bne cr6,0x822675b8
	if (!cr6.getEQ()) goto loc_822675B8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,449
	ctx.r7.s64 = 449;
	// addi r5,r11,-4752
	ctx.r5.s64 = r11.s64 + -4752;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822675B8:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// bne cr6,0x822675dc
	if (!cr6.getEQ()) goto loc_822675DC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,450
	ctx.r7.s64 = 450;
	// addi r5,r11,-4764
	ctx.r5.s64 = r11.s64 + -4764;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822675DC:
	// li r4,32
	ctx.r4.s64 = 32;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// mtctr r30
	ctr.u64 = r30.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x82267610
	if (!cr0.getEQ()) goto loc_82267610;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,456
	ctx.r7.s64 = 456;
	// addi r5,r11,-4776
	ctx.r5.s64 = r11.s64 + -4776;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267610:
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// stw r27,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r27.u32);
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// stw r30,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r30.u32);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// stw r26,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r26.u32);
	// li r4,20
	ctx.r4.s64 = 20;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x82302400
	sub_82302400(ctx, base);
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// bl 0x82267278
	sub_82267278(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r3.u32);
	// bne 0x82267664
	if (!cr0.getEQ()) goto loc_82267664;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,471
	ctx.r7.s64 = 471;
	// addi r5,r11,-4796
	ctx.r5.s64 = r11.s64 + -4796;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267664:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r10,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r10.u32);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r11,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r11.u32);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r11,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r11.u32);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_822676A0"))) PPC_WEAK_FUNC(sub_822676A0);
PPC_FUNC_IMPL(__imp__sub_822676A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r28,r10,-20196
	r28.s64 = ctx.r10.s64 + -20196;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// addi r27,r10,-4736
	r27.s64 = ctx.r10.s64 + -4736;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// addi r26,r10,-5040
	r26.s64 = ctx.r10.s64 + -5040;
	// bne 0x822676dc
	if (!cr0.getEQ()) goto loc_822676DC;
	// li r29,0
	r29.s64 = 0;
	// b 0x822676e8
	goto loc_822676E8;
loc_822676DC:
	// lwz r29,8(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi r29,0
	cr0.compare<uint32_t>(r29.u32, 0, xer);
	// bne 0x82267760
	if (!cr0.getEQ()) goto loc_82267760;
loc_822676E8:
	// li r7,515
	ctx.r7.s64 = 515;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
	// b 0x82267760
	goto loc_82267760;
loc_82267704:
	// mr r30,r29
	r30.u64 = r29.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8226771c
	if (cr6.getEQ()) goto loc_8226771C;
	// lwz r29,8(r29)
	r29.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// cmplwi r29,0
	cr0.compare<uint32_t>(r29.u32, 0, xer);
	// bne 0x82267734
	if (!cr0.getEQ()) goto loc_82267734;
loc_8226771C:
	// li r7,524
	ctx.r7.s64 = 524;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267734:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x822674c0
	sub_822674C0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// lwz r4,16(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x82302630
	sub_82302630(ctx, base);
loc_82267760:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bne cr6,0x82267704
	if (!cr6.getEQ()) goto loc_82267704;
	// rotlwi r4,r11,0
	ctx.r4.u64 = __builtin_rotateleft32(r11.u32, 0);
	// cmplwi r4,0
	cr0.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq 0x82267780
	if (cr0.getEQ()) goto loc_82267780;
	// lwz r3,0(r4)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// bl 0x82302630
	sub_82302630(ctx, base);
loc_82267780:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x823024c0
	sub_823024C0(ctx, base);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_822677A8"))) PPC_WEAK_FUNC(sub_822677A8);
PPC_FUNC_IMPL(__imp__sub_822677A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r29,r11,-20196
	r29.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// addi r28,r11,-5040
	r28.s64 = r11.s64 + -5040;
	// bne cr6,0x822677f4
	if (!cr6.getEQ()) goto loc_822677F4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,570
	ctx.r7.s64 = 570;
	// addi r5,r11,-4724
	ctx.r5.s64 = r11.s64 + -4724;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822677F4:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x82267278
	sub_82267278(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x82267820
	if (!cr0.getEQ()) goto loc_82267820;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,575
	ctx.r7.s64 = 575;
	// addi r5,r11,-5056
	ctx.r5.s64 = r11.s64 + -5056;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267820:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r27,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r27.u32);
	// stw r26,16(r30)
	PPC_STORE_U32(r30.u32 + 16, r26.u32);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x822673d8
	sub_822673D8(ctx, base);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82267848
	if (!cr6.getEQ()) goto loc_82267848;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r30,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r30.u32);
loc_82267848:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82267860"))) PPC_WEAK_FUNC(sub_82267860);
PPC_FUNC_IMPL(__imp__sub_82267860) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-20196
	r30.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// addi r29,r11,-5040
	r29.s64 = r11.s64 + -5040;
	// bne cr6,0x822678ac
	if (!cr6.getEQ()) goto loc_822678AC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,621
	ctx.r7.s64 = 621;
	// addi r5,r11,-4692
	ctx.r5.s64 = r11.s64 + -4692;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822678AC:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x822678d0
	if (!cr6.getEQ()) goto loc_822678D0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,622
	ctx.r7.s64 = 622;
	// addi r5,r11,-4704
	ctx.r5.s64 = r11.s64 + -4704;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822678D0:
	// cmplw cr6,r31,r27
	cr6.compare<uint32_t>(r31.u32, r27.u32, xer);
	// beq cr6,0x82267918
	if (cr6.getEQ()) goto loc_82267918;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r28,r11,-4716
	r28.s64 = r11.s64 + -4716;
loc_822678E0:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmplw cr6,r11,r26
	cr6.compare<uint32_t>(r11.u32, r26.u32, xer);
	// beq cr6,0x8226791c
	if (cr6.getEQ()) goto loc_8226791C;
	// lwz r31,8(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi r31,0
	cr0.compare<uint32_t>(r31.u32, 0, xer);
	// bne 0x82267910
	if (!cr0.getEQ()) goto loc_82267910;
	// li r7,636
	ctx.r7.s64 = 636;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267910:
	// cmplw cr6,r31,r27
	cr6.compare<uint32_t>(r31.u32, r27.u32, xer);
	// bne cr6,0x822678e0
	if (!cr6.getEQ()) goto loc_822678E0;
loc_82267918:
	// li r31,0
	r31.s64 = 0;
loc_8226791C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82267928"))) PPC_WEAK_FUNC(sub_82267928);
PPC_FUNC_IMPL(__imp__sub_82267928) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-20196
	r30.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// addi r29,r11,-5040
	r29.s64 = r11.s64 + -5040;
	// bne cr6,0x82267970
	if (!cr6.getEQ()) goto loc_82267970;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,672
	ctx.r7.s64 = 672;
	// addi r5,r11,-4724
	ctx.r5.s64 = r11.s64 + -4724;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267970:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x82267984
	if (!cr0.getEQ()) goto loc_82267984;
	// li r28,0
	r28.s64 = 0;
	// b 0x82267990
	goto loc_82267990;
loc_82267984:
	// lwz r28,8(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi r28,0
	cr0.compare<uint32_t>(r28.u32, 0, xer);
	// bne 0x822679ac
	if (!cr0.getEQ()) goto loc_822679AC;
loc_82267990:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,677
	ctx.r7.s64 = 677;
	// addi r5,r11,-4680
	ctx.r5.s64 = r11.s64 + -4680;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822679AC:
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r4,16(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82267860
	sub_82267860(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x822679c8
	if (!cr0.getEQ()) goto loc_822679C8;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
loc_822679C8:
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,16(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_822679D8"))) PPC_WEAK_FUNC(sub_822679D8);
PPC_FUNC_IMPL(__imp__sub_822679D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-20196
	r30.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// addi r29,r11,-5040
	r29.s64 = r11.s64 + -5040;
	// bne cr6,0x82267a20
	if (!cr6.getEQ()) goto loc_82267A20;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,759
	ctx.r7.s64 = 759;
	// addi r5,r11,-4724
	ctx.r5.s64 = r11.s64 + -4724;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267A20:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x82267a34
	if (!cr0.getEQ()) goto loc_82267A34;
	// li r28,0
	r28.s64 = 0;
	// b 0x82267a40
	goto loc_82267A40;
loc_82267A34:
	// lwz r28,8(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi r28,0
	cr0.compare<uint32_t>(r28.u32, 0, xer);
	// bne 0x82267a5c
	if (!cr0.getEQ()) goto loc_82267A5C;
loc_82267A40:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,765
	ctx.r7.s64 = 765;
	// addi r5,r11,-4680
	ctx.r5.s64 = r11.s64 + -4680;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267A5C:
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r4,16(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82267860
	sub_82267860(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x82267a78
	if (!cr0.getEQ()) goto loc_82267A78;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
loc_82267A78:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r30,16(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x82267ac0
	if (cr6.getEQ()) goto loc_82267AC0;
	// bl 0x822674c0
	sub_822674C0(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// bne cr6,0x82267aa4
	if (!cr6.getEQ()) goto loc_82267AA4;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
loc_82267AA4:
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82267ab4
	if (cr6.getEQ()) goto loc_82267AB4;
	// lwz r3,0(r4)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// bl 0x82302630
	sub_82302630(ctx, base);
loc_82267AB4:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
loc_82267AC0:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82267AD0"))) PPC_WEAK_FUNC(sub_82267AD0);
PPC_FUNC_IMPL(__imp__sub_82267AD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-20196
	r30.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// addi r29,r11,-5040
	r29.s64 = r11.s64 + -5040;
	// bne cr6,0x82267b24
	if (!cr6.getEQ()) goto loc_82267B24;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1010
	ctx.r7.s64 = 1010;
	// addi r5,r11,-4604
	ctx.r5.s64 = r11.s64 + -4604;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267B24:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x82267b48
	if (!cr6.getEQ()) goto loc_82267B48;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1011
	ctx.r7.s64 = 1011;
	// addi r5,r11,-4612
	ctx.r5.s64 = r11.s64 + -4612;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267B48:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82267b70
	if (cr6.getEQ()) goto loc_82267B70;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1014
	ctx.r7.s64 = 1014;
	// addi r5,r11,-4632
	ctx.r5.s64 = r11.s64 + -4632;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267B70:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82267b98
	if (cr6.getEQ()) goto loc_82267B98;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1015
	ctx.r7.s64 = 1015;
	// addi r5,r11,-4652
	ctx.r5.s64 = r11.s64 + -4652;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267B98:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r27,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r27.u32);
	// stw r26,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r26.u32);
	// stw r25,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r25.u32);
	// stw r28,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r28.u32);
	// bl 0x82267278
	sub_82267278(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r3.u32);
	// bne 0x82267bd8
	if (!cr0.getEQ()) goto loc_82267BD8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1031
	ctx.r7.s64 = 1031;
	// addi r5,r11,-4672
	ctx.r5.s64 = r11.s64 + -4672;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267BD8:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r10,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r10.u32);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r11,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r11.u32);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r11,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r11.u32);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// stw r9,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r9.u32);
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82267C18"))) PPC_WEAK_FUNC(sub_82267C18);
PPC_FUNC_IMPL(__imp__sub_82267C18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r27,r11,-20196
	r27.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// addi r26,r11,-5040
	r26.s64 = r11.s64 + -5040;
	// bne cr6,0x82267c5c
	if (!cr6.getEQ()) goto loc_82267C5C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1076
	ctx.r7.s64 = 1076;
	// addi r5,r11,-4604
	ctx.r5.s64 = r11.s64 + -4604;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267C5C:
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// li r30,0
	r30.s64 = 0;
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82267c70
	if (cr0.getEQ()) goto loc_82267C70;
	// lwz r30,8(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 8);
loc_82267C70:
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// beq cr6,0x82267ce8
	if (cr6.getEQ()) goto loc_82267CE8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r28,r11,-4736
	r28.s64 = r11.s64 + -4736;
loc_82267C80:
	// mr r31,r30
	r31.u64 = r30.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82267c98
	if (cr6.getEQ()) goto loc_82267C98;
	// lwz r30,8(r30)
	r30.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// bne 0x82267cb0
	if (!cr0.getEQ()) goto loc_82267CB0;
loc_82267C98:
	// li r7,1088
	ctx.r7.s64 = 1088;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267CB0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822674c0
	sub_822674C0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r3,4(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// lwz r4,16(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x82302630
	sub_82302630(ctx, base);
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x82267c80
	if (!cr6.getEQ()) goto loc_82267C80;
loc_82267CE8:
	// lwz r4,16(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// cmplwi r4,0
	cr0.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq 0x82267cfc
	if (cr0.getEQ()) goto loc_82267CFC;
	// lwz r3,0(r4)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// bl 0x82302630
	sub_82302630(ctx, base);
loc_82267CFC:
	// lwz r11,28(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82267d24
	if (!cr6.getEQ()) goto loc_82267D24;
	// lwz r3,0(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bl 0x823024c0
	sub_823024C0(ctx, base);
	// lwz r3,4(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82267D24:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82267D30"))) PPC_WEAK_FUNC(sub_82267D30);
PPC_FUNC_IMPL(__imp__sub_82267D30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r27,r11,-20196
	r27.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// addi r26,r11,-5040
	r26.s64 = r11.s64 + -5040;
	// bne cr6,0x82267d7c
	if (!cr6.getEQ()) goto loc_82267D7C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1143
	ctx.r7.s64 = 1143;
	// addi r5,r11,-4604
	ctx.r5.s64 = r11.s64 + -4604;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267D7C:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x82267278
	sub_82267278(ctx, base);
	// mr. r28,r3
	r28.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r28.s32, 0, xer);
	// bne 0x82267da8
	if (!cr0.getEQ()) goto loc_82267DA8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1147
	ctx.r7.s64 = 1147;
	// addi r5,r11,-5056
	ctx.r5.s64 = r11.s64 + -5056;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267DA8:
	// stw r25,12(r28)
	PPC_STORE_U32(r28.u32 + 12, r25.u32);
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// stw r30,16(r28)
	PPC_STORE_U32(r28.u32 + 16, r30.u32);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// addi r29,r10,-4716
	r29.s64 = ctx.r10.s64 + -4716;
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x82267dcc
	if (!cr0.getEQ()) goto loc_82267DCC;
	// li r30,0
	r30.s64 = 0;
	// b 0x82267dd8
	goto loc_82267DD8;
loc_82267DCC:
	// lwz r30,8(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// bne 0x82267e10
	if (!cr0.getEQ()) goto loc_82267E10;
loc_82267DD8:
	// li r7,1158
	ctx.r7.s64 = 1158;
	// b 0x82267dfc
	goto loc_82267DFC;
loc_82267DE0:
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// cmplw cr6,r11,r25
	cr6.compare<uint32_t>(r11.u32, r25.u32, xer);
	// bgt cr6,0x82267e1c
	if (cr6.getGT()) goto loc_82267E1C;
	// lwz r30,8(r30)
	r30.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// bne 0x82267e10
	if (!cr0.getEQ()) goto loc_82267E10;
	// li r7,1168
	ctx.r7.s64 = 1168;
loc_82267DFC:
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267E10:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x82267de0
	if (!cr6.getEQ()) goto loc_82267DE0;
loc_82267E1C:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x822673d8
	sub_822673D8(ctx, base);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82267e3c
	if (!cr6.getEQ()) goto loc_82267E3C;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r28,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r28.u32);
loc_82267E3C:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82267E50"))) PPC_WEAK_FUNC(sub_82267E50);
PPC_FUNC_IMPL(__imp__sub_82267E50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-20196
	r30.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// addi r29,r11,-5040
	r29.s64 = r11.s64 + -5040;
	// bne cr6,0x82267e9c
	if (!cr6.getEQ()) goto loc_82267E9C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1212
	ctx.r7.s64 = 1212;
	// addi r5,r11,-4692
	ctx.r5.s64 = r11.s64 + -4692;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267E9C:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x82267ec0
	if (!cr6.getEQ()) goto loc_82267EC0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1213
	ctx.r7.s64 = 1213;
	// addi r5,r11,-4704
	ctx.r5.s64 = r11.s64 + -4704;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267EC0:
	// cmplw cr6,r31,r27
	cr6.compare<uint32_t>(r31.u32, r27.u32, xer);
	// beq cr6,0x82267f08
	if (cr6.getEQ()) goto loc_82267F08;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r28,r11,-4716
	r28.s64 = r11.s64 + -4716;
loc_82267ED0:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// cmplw cr6,r11,r26
	cr6.compare<uint32_t>(r11.u32, r26.u32, xer);
	// beq cr6,0x82267f0c
	if (cr6.getEQ()) goto loc_82267F0C;
	// lwz r31,8(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi r31,0
	cr0.compare<uint32_t>(r31.u32, 0, xer);
	// bne 0x82267f00
	if (!cr0.getEQ()) goto loc_82267F00;
	// li r7,1227
	ctx.r7.s64 = 1227;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267F00:
	// cmplw cr6,r31,r27
	cr6.compare<uint32_t>(r31.u32, r27.u32, xer);
	// bne cr6,0x82267ed0
	if (!cr6.getEQ()) goto loc_82267ED0;
loc_82267F08:
	// li r31,0
	r31.s64 = 0;
loc_82267F0C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82267F18"))) PPC_WEAK_FUNC(sub_82267F18);
PPC_FUNC_IMPL(__imp__sub_82267F18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-20196
	r30.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// addi r29,r11,-5040
	r29.s64 = r11.s64 + -5040;
	// bne cr6,0x82267f60
	if (!cr6.getEQ()) goto loc_82267F60;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1262
	ctx.r7.s64 = 1262;
	// addi r5,r11,-4604
	ctx.r5.s64 = r11.s64 + -4604;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267F60:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x82267f74
	if (!cr0.getEQ()) goto loc_82267F74;
	// li r28,0
	r28.s64 = 0;
	// b 0x82267f80
	goto loc_82267F80;
loc_82267F74:
	// lwz r28,8(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi r28,0
	cr0.compare<uint32_t>(r28.u32, 0, xer);
	// bne 0x82267f9c
	if (!cr0.getEQ()) goto loc_82267F9C;
loc_82267F80:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1267
	ctx.r7.s64 = 1267;
	// addi r5,r11,-4680
	ctx.r5.s64 = r11.s64 + -4680;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82267F9C:
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r4,16(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82267e50
	sub_82267E50(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x82267fb8
	if (!cr0.getEQ()) goto loc_82267FB8;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
loc_82267FB8:
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,16(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82267FC8"))) PPC_WEAK_FUNC(sub_82267FC8);
PPC_FUNC_IMPL(__imp__sub_82267FC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-20196
	r30.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// addi r29,r11,-5040
	r29.s64 = r11.s64 + -5040;
	// bne cr6,0x8226800c
	if (!cr6.getEQ()) goto loc_8226800C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1304
	ctx.r7.s64 = 1304;
	// addi r5,r11,-4604
	ctx.r5.s64 = r11.s64 + -4604;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_8226800C:
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x82268020
	if (!cr0.getEQ()) goto loc_82268020;
	// li r28,0
	r28.s64 = 0;
	// b 0x8226802c
	goto loc_8226802C;
loc_82268020:
	// lwz r28,8(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi r28,0
	cr0.compare<uint32_t>(r28.u32, 0, xer);
	// bne 0x82268048
	if (!cr0.getEQ()) goto loc_82268048;
loc_8226802C:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1310
	ctx.r7.s64 = 1310;
	// addi r5,r11,-4692
	ctx.r5.s64 = r11.s64 + -4692;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268048:
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r4,16(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r5,12(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// bl 0x82267e50
	sub_82267E50(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x82268068
	if (!cr0.getEQ()) goto loc_82268068;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
loc_82268068:
	// stw r3,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r3.u32);
	// lwz r3,16(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82268078"))) PPC_WEAK_FUNC(sub_82268078);
PPC_FUNC_IMPL(__imp__sub_82268078) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-20196
	r30.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// addi r29,r11,-5040
	r29.s64 = r11.s64 + -5040;
	// bne cr6,0x822680c0
	if (!cr6.getEQ()) goto loc_822680C0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1421
	ctx.r7.s64 = 1421;
	// addi r5,r11,-4604
	ctx.r5.s64 = r11.s64 + -4604;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822680C0:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x822680d4
	if (!cr0.getEQ()) goto loc_822680D4;
	// li r28,0
	r28.s64 = 0;
	// b 0x822680e0
	goto loc_822680E0;
loc_822680D4:
	// lwz r28,8(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi r28,0
	cr0.compare<uint32_t>(r28.u32, 0, xer);
	// bne 0x822680fc
	if (!cr0.getEQ()) goto loc_822680FC;
loc_822680E0:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1427
	ctx.r7.s64 = 1427;
	// addi r5,r11,-4680
	ctx.r5.s64 = r11.s64 + -4680;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822680FC:
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r4,16(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82267860
	sub_82267860(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x82268118
	if (!cr0.getEQ()) goto loc_82268118;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
loc_82268118:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r30,16(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x82268160
	if (cr6.getEQ()) goto loc_82268160;
	// bl 0x822674c0
	sub_822674C0(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// bne cr6,0x82268144
	if (!cr6.getEQ()) goto loc_82268144;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
loc_82268144:
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82268154
	if (cr6.getEQ()) goto loc_82268154;
	// lwz r3,0(r4)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// bl 0x82302630
	sub_82302630(ctx, base);
loc_82268154:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
loc_82268160:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82268170"))) PPC_WEAK_FUNC(sub_82268170);
PPC_FUNC_IMPL(__imp__sub_82268170) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r29,r11,-20196
	r29.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// addi r28,r11,-5040
	r28.s64 = r11.s64 + -5040;
	// bne cr6,0x822681b4
	if (!cr6.getEQ()) goto loc_822681B4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1485
	ctx.r7.s64 = 1485;
	// addi r5,r11,-4604
	ctx.r5.s64 = r11.s64 + -4604;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822681B4:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x822681c8
	if (!cr0.getEQ()) goto loc_822681C8;
	// li r30,0
	r30.s64 = 0;
	// b 0x822681d4
	goto loc_822681D4;
loc_822681C8:
	// lwz r30,8(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// bne 0x822681f0
	if (!cr0.getEQ()) goto loc_822681F0;
loc_822681D4:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1491
	ctx.r7.s64 = 1491;
	// addi r5,r11,-4680
	ctx.r5.s64 = r11.s64 + -4680;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822681F0:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r29,16(r30)
	r29.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// beq cr6,0x8226823c
	if (cr6.getEQ()) goto loc_8226823C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x822674c0
	sub_822674C0(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// bne cr6,0x82268220
	if (!cr6.getEQ()) goto loc_82268220;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
loc_82268220:
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82268230
	if (cr6.getEQ()) goto loc_82268230;
	// lwz r3,0(r4)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// bl 0x82302630
	sub_82302630(ctx, base);
loc_82268230:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
loc_8226823C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82268248"))) PPC_WEAK_FUNC(sub_82268248);
PPC_FUNC_IMPL(__imp__sub_82268248) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82268284
	if (!cr6.getEQ()) goto loc_82268284;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1533
	ctx.r7.s64 = 1533;
	// addi r6,r11,-5040
	ctx.r6.s64 = r11.s64 + -5040;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r5,r11,-4604
	ctx.r5.s64 = r11.s64 + -4604;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-20196
	ctx.r4.s64 = r11.s64 + -20196;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268284:
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822682A0"))) PPC_WEAK_FUNC(sub_822682A0);
PPC_FUNC_IMPL(__imp__sub_822682A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// mr r3,r6
	ctx.r3.u64 = ctx.r6.u64;
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// li r4,32
	ctx.r4.s64 = 32;
	// bl 0x82302400
	sub_82302400(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x822682f4
	if (!cr0.getEQ()) goto loc_822682F4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1609
	ctx.r7.s64 = 1609;
	// addi r6,r11,-5040
	ctx.r6.s64 = r11.s64 + -5040;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r5,r11,-4612
	ctx.r5.s64 = r11.s64 + -4612;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-20196
	ctx.r4.s64 = r11.s64 + -20196;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822682F4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82268310"))) PPC_WEAK_FUNC(sub_82268310);
PPC_FUNC_IMPL(__imp__sub_82268310) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// mr r3,r6
	ctx.r3.u64 = ctx.r6.u64;
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// li r4,20
	ctx.r4.s64 = 20;
	// bl 0x82302400
	sub_82302400(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x82268364
	if (!cr0.getEQ()) goto loc_82268364;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,1650
	ctx.r7.s64 = 1650;
	// addi r6,r11,-5040
	ctx.r6.s64 = r11.s64 + -5040;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r5,r11,-4612
	ctx.r5.s64 = r11.s64 + -4612;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-20196
	ctx.r4.s64 = r11.s64 + -20196;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268364:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82268380"))) PPC_WEAK_FUNC(sub_82268380);
PPC_FUNC_IMPL(__imp__sub_82268380) {
	PPC_FUNC_PROLOGUE();
	// li r3,32
	ctx.r3.s64 = 32;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82268388"))) PPC_WEAK_FUNC(sub_82268388);
PPC_FUNC_IMPL(__imp__sub_82268388) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r31,r11,-20196
	r31.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// addi r30,r11,-5040
	r30.s64 = r11.s64 + -5040;
	// bne cr6,0x822683d0
	if (!cr6.getEQ()) goto loc_822683D0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2228
	ctx.r7.s64 = 2228;
	// addi r5,r11,-4532
	ctx.r5.s64 = r11.s64 + -4532;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822683D0:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x822683f4
	if (!cr6.getEQ()) goto loc_822683F4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2229
	ctx.r7.s64 = 2229;
	// addi r5,r11,-4612
	ctx.r5.s64 = r11.s64 + -4612;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822683F4:
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8226841c
	if (cr6.getEQ()) goto loc_8226841C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2232
	ctx.r7.s64 = 2232;
	// addi r5,r11,-4556
	ctx.r5.s64 = r11.s64 + -4556;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_8226841C:
	// lwz r11,20(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82268444
	if (cr6.getEQ()) goto loc_82268444;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2233
	ctx.r7.s64 = 2233;
	// addi r5,r11,-4576
	ctx.r5.s64 = r11.s64 + -4576;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268444:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r28,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r28.u32);
	// bl 0x82267278
	sub_82267278(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,16(r29)
	PPC_STORE_U32(r29.u32 + 16, ctx.r3.u32);
	// bne 0x82268478
	if (!cr0.getEQ()) goto loc_82268478;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2242
	ctx.r7.s64 = 2242;
	// addi r5,r11,-4596
	ctx.r5.s64 = r11.s64 + -4596;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268478:
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// stw r11,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r11.u32);
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// stw r11,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r11.u32);
	// stw r10,20(r29)
	PPC_STORE_U32(r29.u32 + 20, ctx.r10.u32);
	// stw r9,24(r29)
	PPC_STORE_U32(r29.u32 + 24, ctx.r9.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_822684A8"))) PPC_WEAK_FUNC(sub_822684A8);
PPC_FUNC_IMPL(__imp__sub_822684A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r28,r11,-20196
	r28.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// addi r27,r11,-5040
	r27.s64 = r11.s64 + -5040;
	// bne cr6,0x822684ec
	if (!cr6.getEQ()) goto loc_822684EC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2279
	ctx.r7.s64 = 2279;
	// addi r5,r11,-4532
	ctx.r5.s64 = r11.s64 + -4532;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822684EC:
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// addi r25,r10,-4736
	r25.s64 = ctx.r10.s64 + -4736;
	// bne 0x82268508
	if (!cr0.getEQ()) goto loc_82268508;
	// li r31,0
	r31.s64 = 0;
	// b 0x82268514
	goto loc_82268514;
loc_82268508:
	// lwz r31,8(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi r31,0
	cr0.compare<uint32_t>(r31.u32, 0, xer);
	// bne 0x8226852c
	if (!cr0.getEQ()) goto loc_8226852C;
loc_82268514:
	// li r7,2284
	ctx.r7.s64 = 2284;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_8226852C:
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x822685b0
	if (cr6.getEQ()) goto loc_822685B0;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r26,r11,-4520
	r26.s64 = r11.s64 + -4520;
loc_82268540:
	// mr r30,r31
	r30.u64 = r31.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82268558
	if (cr6.getEQ()) goto loc_82268558;
	// lwz r31,8(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi r31,0
	cr0.compare<uint32_t>(r31.u32, 0, xer);
	// bne 0x82268570
	if (!cr0.getEQ()) goto loc_82268570;
loc_82268558:
	// li r7,2293
	ctx.r7.s64 = 2293;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268570:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x822674c0
	sub_822674C0(ctx, base);
	// mr. r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(ctx.r4.s32, 0, xer);
	// bne 0x8226859c
	if (!cr0.getEQ()) goto loc_8226859C;
	// li r7,2297
	ctx.r7.s64 = 2297;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
	// b 0x822685a4
	goto loc_822685A4;
loc_8226859C:
	// lwz r3,0(r4)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// bl 0x82302630
	sub_82302630(ctx, base);
loc_822685A4:
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bne cr6,0x82268540
	if (!cr6.getEQ()) goto loc_82268540;
loc_822685B0:
	// lwz r4,16(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// cmplwi r4,0
	cr0.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq 0x822685c4
	if (cr0.getEQ()) goto loc_822685C4;
	// lwz r3,0(r4)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// bl 0x82302630
	sub_82302630(ctx, base);
loc_822685C4:
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x822685ec
	if (!cr6.getEQ()) goto loc_822685EC;
	// lwz r3,0(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bl 0x823024c0
	sub_823024C0(ctx, base);
	// lwz r3,4(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_822685EC:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_822685F8"))) PPC_WEAK_FUNC(sub_822685F8);
PPC_FUNC_IMPL(__imp__sub_822685F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82268634
	if (!cr6.getEQ()) goto loc_82268634;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2334
	ctx.r7.s64 = 2334;
	// addi r6,r11,-5040
	ctx.r6.s64 = r11.s64 + -5040;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r5,r11,-4532
	ctx.r5.s64 = r11.s64 + -4532;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-20196
	ctx.r4.s64 = r11.s64 + -20196;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268634:
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82268650"))) PPC_WEAK_FUNC(sub_82268650);
PPC_FUNC_IMPL(__imp__sub_82268650) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// mr r3,r6
	ctx.r3.u64 = ctx.r6.u64;
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// li r4,28
	ctx.r4.s64 = 28;
	// bl 0x82302400
	sub_82302400(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x822686a4
	if (!cr0.getEQ()) goto loc_822686A4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2712
	ctx.r7.s64 = 2712;
	// addi r6,r11,-5040
	ctx.r6.s64 = r11.s64 + -5040;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r5,r11,-4612
	ctx.r5.s64 = r11.s64 + -4612;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-20196
	ctx.r4.s64 = r11.s64 + -20196;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822686A4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822686C0"))) PPC_WEAK_FUNC(sub_822686C0);
PPC_FUNC_IMPL(__imp__sub_822686C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// mr r3,r6
	ctx.r3.u64 = ctx.r6.u64;
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// li r4,16
	ctx.r4.s64 = 16;
	// bl 0x82302400
	sub_82302400(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x82268714
	if (!cr0.getEQ()) goto loc_82268714;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2753
	ctx.r7.s64 = 2753;
	// addi r6,r11,-5040
	ctx.r6.s64 = r11.s64 + -5040;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r5,r11,-4612
	ctx.r5.s64 = r11.s64 + -4612;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-20196
	ctx.r4.s64 = r11.s64 + -20196;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268714:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82268730"))) PPC_WEAK_FUNC(sub_82268730);
PPC_FUNC_IMPL(__imp__sub_82268730) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r31,r11,-20196
	r31.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// addi r30,r11,-5040
	r30.s64 = r11.s64 + -5040;
	// bne cr6,0x82268778
	if (!cr6.getEQ()) goto loc_82268778;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2913
	ctx.r7.s64 = 2913;
	// addi r5,r11,-4444
	ctx.r5.s64 = r11.s64 + -4444;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268778:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x8226879c
	if (!cr6.getEQ()) goto loc_8226879C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2914
	ctx.r7.s64 = 2914;
	// addi r5,r11,-4612
	ctx.r5.s64 = r11.s64 + -4612;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_8226879C:
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x822687c4
	if (cr6.getEQ()) goto loc_822687C4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2917
	ctx.r7.s64 = 2917;
	// addi r5,r11,-4468
	ctx.r5.s64 = r11.s64 + -4468;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822687C4:
	// lwz r11,20(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x822687ec
	if (cr6.getEQ()) goto loc_822687EC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2918
	ctx.r7.s64 = 2918;
	// addi r5,r11,-4488
	ctx.r5.s64 = r11.s64 + -4488;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822687EC:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r28,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r28.u32);
	// bl 0x82267278
	sub_82267278(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,16(r29)
	PPC_STORE_U32(r29.u32 + 16, ctx.r3.u32);
	// bne 0x82268820
	if (!cr0.getEQ()) goto loc_82268820;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,2927
	ctx.r7.s64 = 2927;
	// addi r5,r11,-4508
	ctx.r5.s64 = r11.s64 + -4508;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268820:
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// stw r11,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r11.u32);
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// stw r11,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r11.u32);
	// stw r10,20(r29)
	PPC_STORE_U32(r29.u32 + 20, ctx.r10.u32);
	// stw r9,24(r29)
	PPC_STORE_U32(r29.u32 + 24, ctx.r9.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82268850"))) PPC_WEAK_FUNC(sub_82268850);
PPC_FUNC_IMPL(__imp__sub_82268850) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r28,r10,-20196
	r28.s64 = ctx.r10.s64 + -20196;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// addi r27,r10,-4736
	r27.s64 = ctx.r10.s64 + -4736;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// addi r26,r10,-5040
	r26.s64 = ctx.r10.s64 + -5040;
	// bne 0x8226888c
	if (!cr0.getEQ()) goto loc_8226888C;
	// li r29,0
	r29.s64 = 0;
	// b 0x82268898
	goto loc_82268898;
loc_8226888C:
	// lwz r29,8(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi r29,0
	cr0.compare<uint32_t>(r29.u32, 0, xer);
	// bne 0x82268910
	if (!cr0.getEQ()) goto loc_82268910;
loc_82268898:
	// li r7,2964
	ctx.r7.s64 = 2964;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
	// b 0x82268910
	goto loc_82268910;
loc_822688B4:
	// mr r30,r29
	r30.u64 = r29.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x822688cc
	if (cr6.getEQ()) goto loc_822688CC;
	// lwz r29,8(r29)
	r29.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// cmplwi r29,0
	cr0.compare<uint32_t>(r29.u32, 0, xer);
	// bne 0x822688e4
	if (!cr0.getEQ()) goto loc_822688E4;
loc_822688CC:
	// li r7,2973
	ctx.r7.s64 = 2973;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_822688E4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x822674c0
	sub_822674C0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// lwz r4,12(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x82302630
	sub_82302630(ctx, base);
loc_82268910:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bne cr6,0x822688b4
	if (!cr6.getEQ()) goto loc_822688B4;
	// rotlwi r4,r11,0
	ctx.r4.u64 = __builtin_rotateleft32(r11.u32, 0);
	// cmplwi r4,0
	cr0.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq 0x82268930
	if (cr0.getEQ()) goto loc_82268930;
	// lwz r3,0(r4)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// bl 0x82302630
	sub_82302630(ctx, base);
loc_82268930:
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82268958
	if (!cr6.getEQ()) goto loc_82268958;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x823024c0
	sub_823024C0(ctx, base);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82268958:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82268960"))) PPC_WEAK_FUNC(sub_82268960);
PPC_FUNC_IMPL(__imp__sub_82268960) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8226899c
	if (!cr6.getEQ()) goto loc_8226899C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,3010
	ctx.r7.s64 = 3010;
	// addi r6,r11,-5040
	ctx.r6.s64 = r11.s64 + -5040;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r5,r11,-4444
	ctx.r5.s64 = r11.s64 + -4444;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r4,r11,-20196
	ctx.r4.s64 = r11.s64 + -20196;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_8226899C:
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822689B8"))) PPC_WEAK_FUNC(sub_822689B8);
PPC_FUNC_IMPL(__imp__sub_822689B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r31,r11,-20196
	r31.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// addi r30,r11,-5040
	r30.s64 = r11.s64 + -5040;
	// bne cr6,0x82268a00
	if (!cr6.getEQ()) goto loc_82268A00;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,3031
	ctx.r7.s64 = 3031;
	// addi r5,r11,-4444
	ctx.r5.s64 = r11.s64 + -4444;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268A00:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x82268a24
	if (!cr6.getEQ()) goto loc_82268A24;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,3032
	ctx.r7.s64 = 3032;
	// addi r5,r11,-4804
	ctx.r5.s64 = r11.s64 + -4804;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268A24:
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// cmplw cr6,r28,r11
	cr6.compare<uint32_t>(r28.u32, r11.u32, xer);
	// bne cr6,0x82268a4c
	if (!cr6.getEQ()) goto loc_82268A4C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,3033
	ctx.r7.s64 = 3033;
	// addi r5,r11,-4432
	ctx.r5.s64 = r11.s64 + -4432;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268A4C:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r3,16(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// bl 0x822672f0
	sub_822672F0(ctx, base);
	// lwz r11,20(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82268a6c
	if (!cr6.getEQ()) goto loc_82268A6C;
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// stw r28,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r28.u32);
loc_82268A6C:
	// lwz r11,20(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 20);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,20(r29)
	PPC_STORE_U32(r29.u32 + 20, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82268A80"))) PPC_WEAK_FUNC(sub_82268A80);
PPC_FUNC_IMPL(__imp__sub_82268A80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// addi r31,r11,-20196
	r31.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// addi r30,r11,-5040
	r30.s64 = r11.s64 + -5040;
	// bne cr6,0x82268ac8
	if (!cr6.getEQ()) goto loc_82268AC8;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,3070
	ctx.r7.s64 = 3070;
	// addi r5,r11,-4444
	ctx.r5.s64 = r11.s64 + -4444;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268AC8:
	// lwz r3,0(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// bl 0x82267278
	sub_82267278(ctx, base);
	// mr. r29,r3
	r29.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// bne 0x82268af4
	if (!cr0.getEQ()) goto loc_82268AF4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,3075
	ctx.r7.s64 = 3075;
	// addi r5,r11,-5056
	ctx.r5.s64 = r11.s64 + -5056;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268AF4:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stw r27,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r27.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x822689b8
	sub_822689B8(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82268B10"))) PPC_WEAK_FUNC(sub_82268B10);
PPC_FUNC_IMPL(__imp__sub_82268B10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r31,r11,-20196
	r31.s64 = r11.s64 + -20196;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// addi r30,r11,-5040
	r30.s64 = r11.s64 + -5040;
	// bne cr6,0x82268b58
	if (!cr6.getEQ()) goto loc_82268B58;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,3105
	ctx.r7.s64 = 3105;
	// addi r5,r11,-4444
	ctx.r5.s64 = r11.s64 + -4444;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268B58:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x82268b7c
	if (!cr6.getEQ()) goto loc_82268B7C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,3106
	ctx.r7.s64 = 3106;
	// addi r5,r11,-4804
	ctx.r5.s64 = r11.s64 + -4804;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268B7C:
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// cmplw cr6,r28,r11
	cr6.compare<uint32_t>(r28.u32, r11.u32, xer);
	// bne cr6,0x82268ba4
	if (!cr6.getEQ()) goto loc_82268BA4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// li r7,3107
	ctx.r7.s64 = 3107;
	// addi r5,r11,-4432
	ctx.r5.s64 = r11.s64 + -4432;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82263fb8
	sub_82263FB8(ctx, base);
loc_82268BA4:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r3,16(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// bl 0x822673d8
	sub_822673D8(ctx, base);
	// lwz r11,20(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82268bc4
	if (!cr6.getEQ()) goto loc_82268BC4;
	// lwz r11,16(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// stw r28,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r28.u32);
loc_82268BC4:
	// lwz r11,20(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 20);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,20(r29)
	PPC_STORE_U32(r29.u32 + 20, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

