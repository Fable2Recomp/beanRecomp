#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_82125280"))) PPC_WEAK_FUNC(sub_82125280);
PPC_FUNC_IMPL(__imp__sub_82125280) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// addi r12,r1,-96
	r12.s64 = ctx.r1.s64 + -96;
	// bl 0x823ed528
	// stwu r1,-384(r1)
	ea = -384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f23,f1
	ctx.fpscr.disableFlushMode();
	f23.f64 = ctx.f1.f64;
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// fmr f22,f2
	f22.f64 = ctx.f2.f64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// lfs f31,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// addi r6,r1,100
	ctx.r6.s64 = ctx.r1.s64 + 100;
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// lwz r3,24(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 24);
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// fmr f20,f31
	f20.f64 = f31.f64;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// fmr f21,f31
	f21.f64 = f31.f64;
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// li r22,0
	r22.s64 = 0;
	// li r23,0
	r23.s64 = 0;
	// li r21,0
	r21.s64 = 0;
	// bl 0x821203d0
	sub_821203D0(ctx, base);
	// lfs f13,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f12,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// stfs f31,180(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 180, temp.u32);
	// fsubs f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bne cr6,0x82125324
	if (!cr6.getEQ()) goto loc_82125324;
	// fcmpu cr6,f13,f31
	cr6.compare(ctx.f13.f64, f31.f64);
	// bne cr6,0x82125324
	if (!cr6.getEQ()) goto loc_82125324;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// addi r12,r1,-96
	r12.s64 = ctx.r1.s64 + -96;
	// bl 0x823ed574
	// b 0x823ed16c
	return;
loc_82125324:
	// fmuls f12,f0,f0
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(f0.f64 * f0.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// lfs f26,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f26.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmadds f12,f13,f13,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + ctx.f12.f64));
	// fsqrts f12,f12
	ctx.f12.f64 = double(float(sqrt(ctx.f12.f64)));
	// fdivs f12,f26,f12
	ctx.f12.f64 = double(float(f26.f64 / ctx.f12.f64));
	// fmuls f30,f12,f0
	f30.f64 = double(float(ctx.f12.f64 * f0.f64));
	// stfs f30,176(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 176, temp.u32);
	// fmuls f29,f12,f13
	f29.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// lfs f12,14280(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14280);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f29,184(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 184, temp.u32);
	// fmuls f0,f30,f22
	f0.f64 = double(float(f30.f64 * f22.f64));
	// fmuls f13,f29,f22
	ctx.f13.f64 = double(float(f29.f64 * f22.f64));
	// fmuls f28,f0,f12
	f28.f64 = double(float(f0.f64 * ctx.f12.f64));
	// fmuls f27,f13,f12
	f27.f64 = double(float(ctx.f13.f64 * ctx.f12.f64));
	// lfs f12,15468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15468);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f25,f0,f12
	f25.f64 = double(float(f0.f64 * ctx.f12.f64));
	// fmuls f24,f13,f12
	f24.f64 = double(float(ctx.f13.f64 * ctx.f12.f64));
	// bl 0x8211dd98
	sub_8211DD98(ctx, base);
	// bl 0x8210f8f0
	sub_8210F8F0(ctx, base);
	// lwz r29,468(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 468);
	// lfs f2,8(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f1,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lfs f6,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f6.f64 = double(temp.f32);
	// fmr f8,f26
	ctx.f8.f64 = f26.f64;
	// lfs f5,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f5.f64 = double(temp.f32);
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r28.u32);
	// fmr f7,f31
	ctx.f7.f64 = f31.f64;
	// fsubs f4,f2,f28
	ctx.f4.f64 = double(float(ctx.f2.f64 - f28.f64));
	// fadds f3,f1,f27
	ctx.f3.f64 = double(float(ctx.f1.f64 + f27.f64));
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r25,-32010
	r25.s64 = -2097807360;
	// beq cr6,0x82125410
	if (cr6.getEQ()) goto loc_82125410;
	// lfs f0,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	f0.f64 = double(temp.f32);
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lfs f13,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f25
	f0.f64 = double(float(f0.f64 - f25.f64));
	// fmadds f13,f30,f23,f13
	ctx.f13.f64 = double(float(f30.f64 * f23.f64 + ctx.f13.f64));
	// lfs f12,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f6,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f6.f64 = double(temp.f32);
	// fmr f8,f26
	ctx.f8.f64 = f26.f64;
	// lfs f5,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f5.f64 = double(temp.f32);
	// fmr f7,f31
	ctx.f7.f64 = f31.f64;
	// fsubs f2,f12,f28
	ctx.f2.f64 = double(float(ctx.f12.f64 - f28.f64));
	// fadds f1,f27,f11
	ctx.f1.f64 = double(float(f27.f64 + ctx.f11.f64));
	// fmadds f4,f29,f23,f0
	ctx.f4.f64 = double(float(f29.f64 * f23.f64 + f0.f64));
	// fadds f3,f13,f24
	ctx.f3.f64 = double(float(ctx.f13.f64 + f24.f64));
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82125470
	if (!cr6.getEQ()) goto loc_82125470;
loc_82125410:
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// li r22,1
	r22.s64 = 1;
	// bl 0x82110500
	sub_82110500(ctx, base);
	// lfs f9,136(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	ctx.f9.f64 = double(temp.f32);
	// lfs f8,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f8.f64 = double(temp.f32);
	// fneg f12,f29
	ctx.f12.u64 = f29.u64 ^ 0x8000000000000000;
	// fsubs f13,f9,f8
	ctx.f13.f64 = double(float(ctx.f9.f64 - ctx.f8.f64));
	// lfs f11,128(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	ctx.f11.f64 = double(temp.f32);
	// lfs f10,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f0,f11,f10
	f0.f64 = double(float(ctx.f11.f64 - ctx.f10.f64));
	// fmuls f13,f13,f30
	ctx.f13.f64 = double(float(ctx.f13.f64 * f30.f64));
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bgt cr6,0x8212546c
	if (cr6.getGT()) goto loc_8212546C;
	// lfs f0,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	f0.f64 = double(temp.f32);
	// lfs f13,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f13.f64 = double(temp.f32);
	// stfs f11,112(r1)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// stfs f13,116(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// stfs f9,120(r1)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// stfs f10,128(r1)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stfs f0,132(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// stfs f8,136(r1)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
loc_8212546C:
	// lfs f20,21272(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + 21272);
	f20.f64 = double(temp.f32);
loc_82125470:
	// lfs f2,8(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lfs f1,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f6,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f6.f64 = double(temp.f32);
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r28.u32);
	// lfs f5,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f5.f64 = double(temp.f32);
	// fmr f8,f26
	ctx.f8.f64 = f26.f64;
	// fmr f7,f31
	ctx.f7.f64 = f31.f64;
	// fadds f4,f2,f28
	ctx.f4.f64 = double(float(ctx.f2.f64 + f28.f64));
	// fsubs f3,f1,f27
	ctx.f3.f64 = double(float(ctx.f1.f64 - f27.f64));
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821254f4
	if (cr6.getEQ()) goto loc_821254F4;
	// lfs f12,8(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lfs f0,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// fadds f2,f12,f28
	ctx.f2.f64 = double(float(ctx.f12.f64 + f28.f64));
	// fsubs f0,f0,f24
	f0.f64 = double(float(f0.f64 - f24.f64));
	// lfs f13,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f12,f29,f23,f25
	ctx.f12.f64 = double(float(f29.f64 * f23.f64 + f25.f64));
	// lfs f11,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f6,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f6.f64 = double(temp.f32);
	// lfs f5,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f5.f64 = double(temp.f32);
	// fmr f8,f26
	ctx.f8.f64 = f26.f64;
	// fmr f7,f31
	ctx.f7.f64 = f31.f64;
	// fsubs f1,f11,f27
	ctx.f1.f64 = double(float(ctx.f11.f64 - f27.f64));
	// fmadds f3,f30,f23,f0
	ctx.f3.f64 = double(float(f30.f64 * f23.f64 + f0.f64));
	// fadds f4,f12,f13
	ctx.f4.f64 = double(float(ctx.f12.f64 + ctx.f13.f64));
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82125570
	if (!cr6.getEQ()) goto loc_82125570;
loc_821254F4:
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// li r23,1
	r23.s64 = 1;
	// bl 0x82110500
	sub_82110500(ctx, base);
	// lfs f0,168(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	f0.f64 = double(temp.f32);
	// lfs f12,152(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	ctx.f12.f64 = double(temp.f32);
	// fneg f8,f29
	ctx.f8.u64 = f29.u64 ^ 0x8000000000000000;
	// fsubs f9,f0,f12
	ctx.f9.f64 = double(float(f0.f64 - ctx.f12.f64));
	// lfs f13,160(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,144(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f10,f13,f11
	ctx.f10.f64 = double(float(ctx.f13.f64 - ctx.f11.f64));
	// fmuls f9,f9,f30
	ctx.f9.f64 = double(float(ctx.f9.f64 * f30.f64));
	// fmadds f10,f8,f10,f9
	ctx.f10.f64 = double(float(ctx.f8.f64 * ctx.f10.f64 + ctx.f9.f64));
	// fcmpu cr6,f10,f31
	cr6.compare(ctx.f10.f64, f31.f64);
	// bgt cr6,0x82125568
	if (cr6.getGT()) goto loc_82125568;
	// fmr f10,f11
	ctx.f10.f64 = ctx.f11.f64;
	// lfs f9,148(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	ctx.f9.f64 = double(temp.f32);
	// fmr f8,f12
	ctx.f8.f64 = ctx.f12.f64;
	// fmr f11,f13
	ctx.f11.f64 = ctx.f13.f64;
	// lfs f13,164(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	ctx.f13.f64 = double(temp.f32);
	// fmr f12,f0
	ctx.f12.f64 = f0.f64;
	// stfs f13,148(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// stfs f11,144(r1)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// stfs f12,152(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// stfs f9,164(r1)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// fmr f13,f10
	ctx.f13.f64 = ctx.f10.f64;
	// stfs f13,160(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// fmr f0,f8
	f0.f64 = ctx.f8.f64;
	// stfs f0,168(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
loc_82125568:
	// lfs f21,21272(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + 21272);
	f21.f64 = double(temp.f32);
	// b 0x82125580
	goto loc_82125580;
loc_82125570:
	// lfs f0,168(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	f0.f64 = double(temp.f32);
	// lfs f13,160(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,152(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,144(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	ctx.f11.f64 = double(temp.f32);
loc_82125580:
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x82125600
	if (cr6.getEQ()) goto loc_82125600;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x821255cc
	if (cr6.getEQ()) goto loc_821255CC;
	// fcmpu cr6,f20,f21
	ctx.fpscr.disableFlushMode();
	cr6.compare(f20.f64, f21.f64);
	// bge cr6,0x82125608
	if (!cr6.getLT()) goto loc_82125608;
	// lfs f0,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r27)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r27.u32 + 0, temp.u32);
	// lfs f0,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// lfs f13,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f13.f64 = double(temp.f32);
	// stfs f0,8(r27)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r27.u32 + 8, temp.u32);
	// lfs f0,128(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	f0.f64 = double(temp.f32);
	// stfs f13,4(r27)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r27.u32 + 4, temp.u32);
	// stfs f0,0(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 0, temp.u32);
	// lfs f13,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,136(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	f0.f64 = double(temp.f32);
	// stfs f13,4(r26)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r26.u32 + 4, temp.u32);
	// stfs f0,8(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 8, temp.u32);
	// b 0x821256b0
	goto loc_821256B0;
loc_821255CC:
	// lfs f0,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r27)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r27.u32 + 0, temp.u32);
	// lfs f0,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r27)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r27.u32 + 4, temp.u32);
	// lfs f0,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r27)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r27.u32 + 8, temp.u32);
	// lfs f0,128(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 0, temp.u32);
	// lfs f0,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 4, temp.u32);
	// lfs f0,136(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 8, temp.u32);
	// b 0x821256b0
	goto loc_821256B0;
loc_82125600:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x8212562c
	if (cr6.getEQ()) goto loc_8212562C;
loc_82125608:
	// stfs f11,0(r27)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r27.u32 + 0, temp.u32);
	// lfs f11,148(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	ctx.f11.f64 = double(temp.f32);
	// stfs f11,4(r27)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r27.u32 + 4, temp.u32);
	// stfs f12,8(r27)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r27.u32 + 8, temp.u32);
	// stfs f13,0(r26)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r26.u32 + 0, temp.u32);
	// lfs f13,164(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,4(r26)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r26.u32 + 4, temp.u32);
	// stfs f0,8(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 8, temp.u32);
	// b 0x821256b0
	goto loc_821256B0;
loc_8212562C:
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lfs f4,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f4.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f3,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r28.u32);
	// lfs f1,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// fmr f8,f26
	ctx.f8.f64 = f26.f64;
	// lfs f6,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f6.f64 = double(temp.f32);
	// fmr f7,f31
	ctx.f7.f64 = f31.f64;
	// lfs f5,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f5.f64 = double(temp.f32);
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82125694
	if (cr6.getEQ()) goto loc_82125694;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// lfs f2,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f1,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// lfs f5,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f5.f64 = double(temp.f32);
	// fmr f3,f22
	ctx.f3.f64 = f22.f64;
	// lfs f4,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f4.f64 = double(temp.f32);
	// bl 0x821126c0
	sub_821126C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x82125694
	if (!cr6.getLT()) goto loc_82125694;
	// li r21,1
	r21.s64 = 1;
	// b 0x821256b0
	goto loc_821256B0;
loc_82125694:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82110500
	sub_82110500(ctx, base);
	// addi r5,r1,176
	ctx.r5.s64 = ctx.r1.s64 + 176;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82124dc0
	sub_82124DC0(ctx, base);
loc_821256B0:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x8211dd98
	sub_8211DD98(ctx, base);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// addi r12,r1,-96
	r12.s64 = ctx.r1.s64 + -96;
	// bl 0x823ed574
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_821256D0"))) PPC_WEAK_FUNC(sub_821256D0);
PPC_FUNC_IMPL(__imp__sub_821256D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// addi r12,r1,-88
	r12.s64 = ctx.r1.s64 + -88;
	// bl 0x823ed540
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// fmr f11,f1
	ctx.fpscr.disableFlushMode();
	ctx.f11.f64 = ctx.f1.f64;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// fmr f27,f2
	f27.f64 = ctx.f2.f64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r22,r8
	r22.u64 = ctx.r8.u64;
	// mr r24,r9
	r24.u64 = ctx.r9.u64;
	// lwz r30,24(r29)
	r30.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// mr r23,r10
	r23.u64 = ctx.r10.u64;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x8212571c
	if (cr6.getEQ()) goto loc_8212571C;
	// mr r27,r31
	r27.u64 = r31.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// b 0x82125724
	goto loc_82125724;
loc_8212571C:
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r26,r31
	r26.u64 = r31.u64;
loc_82125724:
	// lfs f13,12(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// addi r28,r30,12
	r28.s64 = r30.s64 + 12;
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f12,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// lfs f10,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f10.f64 = double(temp.f32);
	// fmuls f12,f0,f0
	ctx.f12.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f12,f13,f13,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + ctx.f12.f64));
	// fsqrts f12,f12
	ctx.f12.f64 = double(float(sqrt(ctx.f12.f64)));
	// fdivs f12,f10,f12
	ctx.f12.f64 = double(float(ctx.f10.f64 / ctx.f12.f64));
	// fmuls f1,f12,f11
	ctx.f1.f64 = double(float(ctx.f12.f64 * ctx.f11.f64));
	// fmuls f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * f0.f64));
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fcmpu cr6,f1,f10
	cr6.compare(ctx.f1.f64, ctx.f10.f64);
	// fmuls f30,f0,f11
	f30.f64 = double(float(f0.f64 * ctx.f11.f64));
	// fmuls f29,f13,f11
	f29.f64 = double(float(ctx.f13.f64 * ctx.f11.f64));
	// ble cr6,0x82125780
	if (!cr6.getGT()) goto loc_82125780;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,14156(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14156);
	ctx.f1.f64 = double(temp.f32);
	// b 0x82125784
	goto loc_82125784;
loc_82125780:
	// bl 0x8210acb8
	sub_8210ACB8(ctx, base);
loc_82125784:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x821257a8
	if (!cr6.getEQ()) goto loc_821257A8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// beq cr6,0x821257a8
	if (cr6.getEQ()) goto loc_821257A8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fsubs f1,f0,f1
	ctx.f1.f64 = double(float(f0.f64 - ctx.f1.f64));
loc_821257A8:
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f28,f0
	f28.f64 = double(float(f0.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmuls f13,f28,f30
	ctx.f13.f64 = double(float(f28.f64 * f30.f64));
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmsubs f28,f0,f29,f13
	f28.f64 = double(float(f0.f64 * f29.f64 - ctx.f13.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fneg f26,f0
	f26.u64 = f0.u64 ^ 0x8000000000000000;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lfs f13,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// lfs f31,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	f31.f64 = double(temp.f32);
	// lwz r31,348(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 348);
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// fadds f30,f13,f28
	f30.f64 = double(float(ctx.f13.f64 + f28.f64));
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// lfs f2,36(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 36);
	ctx.f2.f64 = double(temp.f32);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r5,24(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stfs f31,100(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stfs f30,96(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fnmsubs f0,f0,f29,f26
	f0.f64 = double(float(-(f0.f64 * f29.f64 - f26.f64)));
	// fadds f29,f12,f0
	f29.f64 = double(float(ctx.f12.f64 + f0.f64));
	// stfs f29,104(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// bl 0x82124e28
	sub_82124E28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821258d8
	if (cr6.getEQ()) goto loc_821258D8;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x82125880
	if (cr6.getEQ()) goto loc_82125880;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// lwz r5,24(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r7,r24
	ctx.r7.u64 = r24.u64;
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82124cb0
	sub_82124CB0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821258d8
	if (cr6.getEQ()) goto loc_821258D8;
loc_82125880:
	// lwz r11,356(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 356);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x821258b4
	if (cr6.getEQ()) goto loc_821258B4;
	// stfs f30,44(r23)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r23.u32 + 44, temp.u32);
	// stb r11,3(r23)
	PPC_STORE_U8(r23.u32 + 3, r11.u8);
	// stfs f31,48(r23)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r23.u32 + 48, temp.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// stfs f29,52(r23)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r23.u32 + 52, temp.u32);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// addi r12,r1,-88
	r12.s64 = ctx.r1.s64 + -88;
	// bl 0x823ed58c
	// b 0x823ed170
	return;
loc_821258B4:
	// stfs f30,4(r23)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r23.u32 + 4, temp.u32);
	// stb r11,2(r23)
	PPC_STORE_U8(r23.u32 + 2, r11.u8);
	// stfs f31,8(r23)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r23.u32 + 8, temp.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// stfs f29,12(r23)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r23.u32 + 12, temp.u32);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// addi r12,r1,-88
	r12.s64 = ctx.r1.s64 + -88;
	// bl 0x823ed58c
	// b 0x823ed170
	return;
loc_821258D8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// addi r12,r1,-88
	r12.s64 = ctx.r1.s64 + -88;
	// bl 0x823ed58c
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_821258F0"))) PPC_WEAK_FUNC(sub_821258F0);
PPC_FUNC_IMPL(__imp__sub_821258F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed10c
	// addi r12,r1,-128
	r12.s64 = ctx.r1.s64 + -128;
	// bl 0x823ed534
	// stwu r1,-352(r1)
	ea = -352 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lis r22,0
	r22.s64 = 0;
	// mr r24,r4
	r24.u64 = ctx.r4.u64;
	// mr r31,r6
	r31.u64 = ctx.r6.u64;
	// ori r22,r22,32797
	r22.u64 = r22.u64 | 32797;
	// lhz r11,18(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 18);
	// lwz r26,24(r30)
	r26.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// rlwinm r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82125930
	if (cr6.getEQ()) goto loc_82125930;
	// li r22,31
	r22.s64 = 31;
loc_82125930:
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r25,0
	r25.s64 = 0;
	// lfs f23,12884(r7)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 12884);
	f23.f64 = double(temp.f32);
	// lfs f24,14032(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 14032);
	f24.f64 = double(temp.f32);
	// li r23,16
	r23.s64 = 16;
	// lfs f26,6588(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 6588);
	f26.f64 = double(temp.f32);
	// mr r17,r25
	r17.u64 = r25.u64;
	// lfs f28,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f28.f64 = double(temp.f32);
	// li r21,4
	r21.s64 = 4;
	// lfs f25,28576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28576);
	f25.f64 = double(temp.f32);
	// li r18,2
	r18.s64 = 2;
	// li r27,1
	r27.s64 = 1;
	// li r19,5
	r19.s64 = 5;
	// li r20,3
	r20.s64 = 3;
loc_82125978:
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82125e60
	if (cr6.getEQ()) goto loc_82125E60;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82125e60
	if (cr6.getEQ()) goto loc_82125E60;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82125a40
	if (!cr6.getEQ()) goto loc_82125A40;
	// lfs f0,36(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 36);
	f0.f64 = double(temp.f32);
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// fmuls f31,f0,f25
	f31.f64 = double(float(f0.f64 * f25.f64));
	// mr r9,r24
	ctx.r9.u64 = r24.u64;
	// li r8,1
	ctx.r8.s64 = 1;
	// fmr f2,f28
	ctx.f2.f64 = f28.f64;
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r23,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r23.u32);
	// addi r4,r31,16
	ctx.r4.s64 = r31.s64 + 16;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x821256d0
	sub_821256D0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821259e0
	if (cr6.getEQ()) goto loc_821259E0;
	// stb r21,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r21.u8);
	// b 0x82125ee8
	goto loc_82125EE8;
loc_821259E0:
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// fmr f2,f28
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f28.f64;
	// mr r9,r24
	ctx.r9.u64 = r24.u64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// li r8,1
	ctx.r8.s64 = 1;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// stw r23,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r23.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r31,28
	ctx.r4.s64 = r31.s64 + 28;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821256d0
	sub_821256D0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82125a20
	if (cr6.getEQ()) goto loc_82125A20;
	// stb r21,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r21.u8);
	// b 0x82125ee8
	goto loc_82125EE8;
loc_82125A20:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// stb r11,1(r31)
	PPC_STORE_U8(r31.u32 + 1, r11.u8);
	// blt cr6,0x82125ee8
	if (cr6.getLT()) goto loc_82125EE8;
	// stb r18,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r18.u8);
	// b 0x82125ee8
	goto loc_82125EE8;
loc_82125A40:
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x82125b1c
	if (!cr6.getEQ()) goto loc_82125B1C;
	// lfs f0,36(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 36);
	f0.f64 = double(temp.f32);
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// fmuls f31,f0,f25
	f31.f64 = double(float(f0.f64 * f25.f64));
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// fmr f2,f28
	ctx.f2.f64 = f28.f64;
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r23,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r23.u32);
	// addi r4,r31,16
	ctx.r4.s64 = r31.s64 + 16;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x821256d0
	sub_821256D0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82125a90
	if (cr6.getEQ()) goto loc_82125A90;
	// stb r21,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r21.u8);
	// b 0x82125ee8
	goto loc_82125EE8;
loc_82125A90:
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// fmr f2,f28
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f28.f64;
	// li r9,0
	ctx.r9.s64 = 0;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// stw r23,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r23.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r31,28
	ctx.r4.s64 = r31.s64 + 28;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821256d0
	sub_821256D0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82125ad0
	if (cr6.getEQ()) goto loc_82125AD0;
	// stb r21,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r21.u8);
	// b 0x82125ee8
	goto loc_82125EE8;
loc_82125AD0:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// stb r11,1(r31)
	PPC_STORE_U8(r31.u32 + 1, r11.u8);
	// blt cr6,0x82125ee8
	if (cr6.getLT()) goto loc_82125EE8;
	// stb r25,2(r31)
	PPC_STORE_U8(r31.u32 + 2, r25.u8);
	// stb r25,3(r31)
	PPC_STORE_U8(r31.u32 + 3, r25.u8);
	// lfs f0,0(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// stfs f0,44(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 44, temp.u32);
	// lfs f0,4(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// stfs f0,48(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
	// lfs f0,8(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 8);
	f0.f64 = double(temp.f32);
	// stb r25,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r25.u8);
	// stfs f0,12(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// stfs f0,52(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// b 0x82125ee8
	goto loc_82125EE8;
loc_82125B1C:
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x82125b84
	if (!cr6.getEQ()) goto loc_82125B84;
	// addi r29,r31,4
	r29.s64 = r31.s64 + 4;
	// lfs f2,36(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 36);
	ctx.f2.f64 = double(temp.f32);
	// addi r8,r31,28
	ctx.r8.s64 = r31.s64 + 28;
	// lwz r5,24(r26)
	ctx.r5.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// addi r7,r31,16
	ctx.r7.s64 = r31.s64 + 16;
	// stw r22,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r22.u32);
	// addi r4,r26,12
	ctx.r4.s64 = r26.s64 + 12;
	// fneg f1,f2
	ctx.f1.u64 = ctx.f2.u64 ^ 0x8000000000000000;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// bl 0x82125280
	sub_82125280(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82125b7c
	if (cr6.getEQ()) goto loc_82125B7C;
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// stb r27,3(r31)
	PPC_STORE_U8(r31.u32 + 3, r27.u8);
	// lfs f13,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// stb r25,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r25.u8);
	// lfs f12,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// stfs f0,44(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 44, temp.u32);
	// stfs f13,48(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
	// stfs f12,52(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// b 0x82125ee8
	goto loc_82125EE8;
loc_82125B7C:
	// stb r19,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r19.u8);
	// b 0x82125ee4
	goto loc_82125EE4;
loc_82125B84:
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x82125ee8
	if (!cr6.getEQ()) goto loc_82125EE8;
	// lfs f0,36(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 36);
	f0.f64 = double(temp.f32);
	// fmuls f27,f0,f25
	f27.f64 = double(float(f0.f64 * f25.f64));
	// lfs f13,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,20(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 20);
	f0.f64 = double(temp.f32);
	// lfs f12,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f2,f13,f0
	ctx.f2.f64 = double(float(ctx.f13.f64 - f0.f64));
	// lfs f11,12(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 12);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f1,f12,f11
	ctx.f1.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lfs f0,24(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	f0.f64 = double(temp.f32);
	// fmr f30,f1
	f30.f64 = ctx.f1.f64;
	// lfs f13,20(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// addi r29,r31,16
	r29.s64 = r31.s64 + 16;
	// lfs f12,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f2,f0,f13
	ctx.f2.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f11,12(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 12);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f1,f12,f11
	ctx.f1.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lfs f13,36(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 36);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,20(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// addi r28,r31,28
	r28.s64 = r31.s64 + 28;
	// lfs f11,28(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 28);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f2,f13,f12
	ctx.f2.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lfs f10,12(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 12);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f1,f11,f10
	ctx.f1.f64 = double(float(ctx.f11.f64 - ctx.f10.f64));
	// fsubs f31,f30,f0
	f31.f64 = double(float(f30.f64 - f0.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fcmpu cr6,f31,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f28.f64);
	// fsubs f0,f30,f1
	f0.f64 = double(float(f30.f64 - ctx.f1.f64));
	// bge cr6,0x82125c0c
	if (!cr6.getLT()) goto loc_82125C0C;
	// fadds f31,f31,f26
	f31.f64 = double(float(f31.f64 + f26.f64));
loc_82125C0C:
	// fcmpu cr6,f31,f24
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f24.f64);
	// blt cr6,0x82125c18
	if (cr6.getLT()) goto loc_82125C18;
	// fsubs f31,f31,f26
	f31.f64 = double(float(f31.f64 - f26.f64));
loc_82125C18:
	// fcmpu cr6,f31,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f28.f64);
	// bge cr6,0x82125c24
	if (!cr6.getLT()) goto loc_82125C24;
	// fneg f31,f31
	f31.u64 = f31.u64 ^ 0x8000000000000000;
loc_82125C24:
	// fcmpu cr6,f0,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f28.f64);
	// bge cr6,0x82125c30
	if (!cr6.getLT()) goto loc_82125C30;
	// fadds f0,f0,f26
	f0.f64 = double(float(f0.f64 + f26.f64));
loc_82125C30:
	// fcmpu cr6,f0,f24
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f24.f64);
	// blt cr6,0x82125c3c
	if (cr6.getLT()) goto loc_82125C3C;
	// fsubs f0,f0,f26
	f0.f64 = double(float(f0.f64 - f26.f64));
loc_82125C3C:
	// fcmpu cr6,f0,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f28.f64);
	// bge cr6,0x82125c48
	if (!cr6.getLT()) goto loc_82125C48;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_82125C48:
	// fmuls f29,f27,f23
	ctx.fpscr.disableFlushMode();
	f29.f64 = double(float(f27.f64 * f23.f64));
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// li r9,0
	ctx.r9.s64 = 0;
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// bge cr6,0x82125d54
	if (!cr6.getLT()) goto loc_82125D54;
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r22,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r22.u32);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// bl 0x821256d0
	sub_821256D0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82125ef8
	if (!cr6.getEQ()) goto loc_82125EF8;
	// lfs f0,24(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	f0.f64 = double(temp.f32);
	// lfs f13,20(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f2,f0,f13
	ctx.f2.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f12,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,12(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 12);
	f0.f64 = double(temp.f32);
	// fsubs f1,f12,f0
	ctx.f1.f64 = double(float(ctx.f12.f64 - f0.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lfs f13,20(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f2,f11,f13
	ctx.f2.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// lfs f12,12(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f1,f13,f12
	ctx.f1.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// fsubs f31,f30,f0
	f31.f64 = double(float(f30.f64 - f0.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fcmpu cr6,f31,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f28.f64);
	// fsubs f0,f30,f1
	f0.f64 = double(float(f30.f64 - ctx.f1.f64));
	// bge cr6,0x82125cdc
	if (!cr6.getLT()) goto loc_82125CDC;
	// fadds f31,f31,f26
	f31.f64 = double(float(f31.f64 + f26.f64));
loc_82125CDC:
	// fcmpu cr6,f31,f24
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f24.f64);
	// blt cr6,0x82125ce8
	if (cr6.getLT()) goto loc_82125CE8;
	// fsubs f31,f31,f26
	f31.f64 = double(float(f31.f64 - f26.f64));
loc_82125CE8:
	// fcmpu cr6,f31,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f28.f64);
	// bge cr6,0x82125cf4
	if (!cr6.getLT()) goto loc_82125CF4;
	// fneg f31,f31
	f31.u64 = f31.u64 ^ 0x8000000000000000;
loc_82125CF4:
	// fcmpu cr6,f0,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f28.f64);
	// bge cr6,0x82125d00
	if (!cr6.getLT()) goto loc_82125D00;
	// fadds f0,f0,f26
	f0.f64 = double(float(f0.f64 + f26.f64));
loc_82125D00:
	// fcmpu cr6,f0,f24
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f24.f64);
	// blt cr6,0x82125d0c
	if (cr6.getLT()) goto loc_82125D0C;
	// fsubs f0,f0,f26
	f0.f64 = double(float(f0.f64 - f26.f64));
loc_82125D0C:
	// fcmpu cr6,f0,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f28.f64);
	// bge cr6,0x82125d18
	if (!cr6.getLT()) goto loc_82125D18;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_82125D18:
	// fcmpu cr6,f0,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x82125e3c
	if (!cr6.getLT()) goto loc_82125E3C;
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// stw r22,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r22.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// li r8,0
	ctx.r8.s64 = 0;
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821256d0
	sub_821256D0(ctx, base);
	// b 0x82125e34
	goto loc_82125E34;
loc_82125D54:
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r22,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r22.u32);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// bl 0x821256d0
	sub_821256D0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82125ef8
	if (!cr6.getEQ()) goto loc_82125EF8;
	// lfs f0,36(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 36);
	f0.f64 = double(temp.f32);
	// lfs f13,20(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f2,f0,f13
	ctx.f2.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f12,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,12(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 12);
	f0.f64 = double(temp.f32);
	// fsubs f1,f12,f0
	ctx.f1.f64 = double(float(ctx.f12.f64 - f0.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lfs f13,20(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f2,f11,f13
	ctx.f2.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// lfs f12,12(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f1,f13,f12
	ctx.f1.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// fsubs f31,f30,f0
	f31.f64 = double(float(f30.f64 - f0.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fcmpu cr6,f31,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f28.f64);
	// fsubs f0,f30,f1
	f0.f64 = double(float(f30.f64 - ctx.f1.f64));
	// bge cr6,0x82125dc0
	if (!cr6.getLT()) goto loc_82125DC0;
	// fadds f31,f31,f26
	f31.f64 = double(float(f31.f64 + f26.f64));
loc_82125DC0:
	// fcmpu cr6,f31,f24
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f24.f64);
	// blt cr6,0x82125dcc
	if (cr6.getLT()) goto loc_82125DCC;
	// fsubs f31,f31,f26
	f31.f64 = double(float(f31.f64 - f26.f64));
loc_82125DCC:
	// fcmpu cr6,f31,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f28.f64);
	// bge cr6,0x82125dd8
	if (!cr6.getLT()) goto loc_82125DD8;
	// fneg f31,f31
	f31.u64 = f31.u64 ^ 0x8000000000000000;
loc_82125DD8:
	// fcmpu cr6,f0,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f28.f64);
	// bge cr6,0x82125de4
	if (!cr6.getLT()) goto loc_82125DE4;
	// fadds f0,f0,f26
	f0.f64 = double(float(f0.f64 + f26.f64));
loc_82125DE4:
	// fcmpu cr6,f0,f24
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f24.f64);
	// blt cr6,0x82125df0
	if (cr6.getLT()) goto loc_82125DF0;
	// fsubs f0,f0,f26
	f0.f64 = double(float(f0.f64 - f26.f64));
loc_82125DF0:
	// fcmpu cr6,f0,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f28.f64);
	// bge cr6,0x82125dfc
	if (!cr6.getLT()) goto loc_82125DFC;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_82125DFC:
	// fcmpu cr6,f0,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x82125e3c
	if (!cr6.getLT()) goto loc_82125E3C;
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// stw r22,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r22.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// li r8,0
	ctx.r8.s64 = 0;
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821256d0
	sub_821256D0(ctx, base);
loc_82125E34:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82125ef8
	if (!cr6.getEQ()) goto loc_82125EF8;
loc_82125E3C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// stb r11,1(r31)
	PPC_STORE_U8(r31.u32 + 1, r11.u8);
	// blt cr6,0x82125ee8
	if (cr6.getLT()) goto loc_82125EE8;
	// stb r25,3(r31)
	PPC_STORE_U8(r31.u32 + 3, r25.u8);
	// stb r25,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r25.u8);
	// b 0x82125ee8
	goto loc_82125EE8;
loc_82125E60:
	// lfs f2,36(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 36);
	ctx.f2.f64 = double(temp.f32);
	// addi r8,r31,28
	ctx.r8.s64 = r31.s64 + 28;
	// addi r7,r31,16
	ctx.r7.s64 = r31.s64 + 16;
	// lfs f31,0(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 0);
	f31.f64 = double(temp.f32);
	// addi r6,r1,128
	ctx.r6.s64 = ctx.r1.s64 + 128;
	// lfs f30,4(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 4);
	f30.f64 = double(temp.f32);
	// addi r4,r26,12
	ctx.r4.s64 = r26.s64 + 12;
	// lfs f29,8(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 8);
	f29.f64 = double(temp.f32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r5,24(r26)
	ctx.r5.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// stfs f31,128(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// stfs f30,132(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// fneg f1,f2
	ctx.f1.u64 = ctx.f2.u64 ^ 0x8000000000000000;
	// stfs f29,136(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// bl 0x82124e28
	sub_82124E28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82125ec0
	if (cr6.getEQ()) goto loc_82125EC0;
	// stfs f31,4(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// stb r27,2(r31)
	PPC_STORE_U8(r31.u32 + 2, r27.u8);
	// stfs f30,8(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// stb r21,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r21.u8);
	// stfs f29,12(r31)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r31.u32 + 12, temp.u32);
	// b 0x82125ee8
	goto loc_82125EE8;
loc_82125EC0:
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82125ed8
	if (!cr6.getEQ()) goto loc_82125ED8;
	// stb r27,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r27.u8);
	// b 0x82125ee4
	goto loc_82125EE4;
loc_82125ED8:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x82125ee8
	if (!cr6.getEQ()) goto loc_82125EE8;
	// stb r20,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r20.u8);
loc_82125EE4:
	// stb r25,1(r31)
	PPC_STORE_U8(r31.u32 + 1, r25.u8);
loc_82125EE8:
	// addi r17,r17,1
	r17.s64 = r17.s64 + 1;
	// cmpwi cr6,r17,1
	cr6.compare<int32_t>(r17.s32, 1, xer);
	// blt cr6,0x82125978
	if (cr6.getLT()) goto loc_82125978;
	// b 0x82125efc
	goto loc_82125EFC;
loc_82125EF8:
	// stb r25,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r25.u8);
loc_82125EFC:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82125f20
	if (!cr6.getEQ()) goto loc_82125F20;
	// lfs f0,4(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	f0.f64 = double(temp.f32);
	// lfs f13,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// stfs f0,44(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 44, temp.u32);
	// stfs f13,48(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
	// stfs f12,52(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
loc_82125F20:
	// lis r10,26214
	ctx.r10.s64 = 1717960704;
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// ori r10,r10,26215
	ctx.r10.u64 = ctx.r10.u64 | 26215;
	// mulhw r10,r11,r10
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(ctx.r10.s32)) >> 32;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x821260d4
	if (!cr0.getEQ()) goto loc_821260D4;
	// li r8,20480
	ctx.r8.s64 = 20480;
	// lfs f4,52(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 52);
	ctx.f4.f64 = double(temp.f32);
	// lwz r3,24(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// lfs f3,44(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 44);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,20(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,12(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x821124b8
	sub_821124B8(ctx, base);
	// lis r11,-32057
	r11.s64 = -2100887552;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r27,r11,32216
	r27.s64 = r11.s64 + 32216;
	// lis r11,-32056
	r11.s64 = -2100822016;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// addi r28,r11,-36
	r28.s64 = r11.s64 + -36;
	// beq cr6,0x82126054
	if (cr6.getEQ()) goto loc_82126054;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// rlwinm r11,r11,0,2,2
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212608c
	if (!cr6.getEQ()) goto loc_8212608C;
	// lfs f13,16(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,16(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 16);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f12,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,20(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// lfs f11,12(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 12);
	ctx.f11.f64 = double(temp.f32);
	// lfs f12,12(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f11
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f13,f12,f12,f0
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// lfs f0,17764(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17764);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x8212608c
	if (!cr6.getLT()) goto loc_8212608C;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// sth r25,90(r30)
	PPC_STORE_U16(r30.u32 + 90, r25.u16);
	// lwz r4,8(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// bl 0x820df430
	sub_820DF430(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,8(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// bl 0x820de8c0
	sub_820DE8C0(ctx, base);
	// lhz r11,18(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 18);
	// rlwinm r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82126044
	if (!cr6.getEQ()) goto loc_82126044;
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// cmplw cr6,r3,r28
	cr6.compare<uint32_t>(ctx.r3.u32, r28.u32, xer);
	// beq cr6,0x82126044
	if (cr6.getEQ()) goto loc_82126044;
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// cmplw cr6,r3,r27
	cr6.compare<uint32_t>(ctx.r3.u32, r27.u32, xer);
	// beq cr6,0x82126044
	if (cr6.getEQ()) goto loc_82126044;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lfs f1,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121008
	sub_82121008(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-6376(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6376);
	// stw r11,204(r30)
	PPC_STORE_U32(r30.u32 + 204, r11.u32);
loc_82126044:
	// lhz r11,18(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 18);
	// rlwinm r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821260d4
	if (cr6.getEQ()) goto loc_821260D4;
loc_82126054:
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// cmplw cr6,r3,r28
	cr6.compare<uint32_t>(ctx.r3.u32, r28.u32, xer);
	// beq cr6,0x82126074
	if (cr6.getEQ()) goto loc_82126074;
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// cmplw cr6,r3,r27
	cr6.compare<uint32_t>(ctx.r3.u32, r27.u32, xer);
	// bne cr6,0x821260c0
	if (!cr6.getEQ()) goto loc_821260C0;
loc_82126074:
	// lbz r11,7(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 7);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// cmplwi cr6,r11,14
	cr6.compare<uint32_t>(r11.u32, 14, xer);
	// bne cr6,0x82126094
	if (!cr6.getEQ()) goto loc_82126094;
	// bl 0x82122d28
	sub_82122D28(ctx, base);
	// b 0x821260c0
	goto loc_821260C0;
loc_8212608C:
	// mr r29,r25
	r29.u64 = r25.u64;
	// b 0x82126054
	goto loc_82126054;
loc_82126094:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lbz r9,15(r30)
	ctx.r9.u64 = PPC_LOAD_U8(r30.u32 + 15);
	// lbz r4,89(r30)
	ctx.r4.u64 = PPC_LOAD_U8(r30.u32 + 89);
	// addi r10,r11,-28640
	ctx.r10.s64 = r11.s64 + -28640;
	// extsb r11,r9
	r11.s64 = ctx.r9.s8;
	// addi r9,r10,24
	ctx.r9.s64 = ctx.r10.s64 + 24;
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r5,r11,r9
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + ctx.r9.u32);
	// bl 0x82122be0
	sub_82122BE0(ctx, base);
loc_821260C0:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x821260d4
	if (!cr6.getEQ()) goto loc_821260D4;
	// lhz r11,18(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 18);
	// andi. r11,r11,65519
	r11.u64 = r11.u64 & 65519;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// sth r11,18(r30)
	PPC_STORE_U16(r30.u32 + 18, r11.u16);
loc_821260D4:
	// lbz r11,7(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 7);
	// addi r4,r31,44
	ctx.r4.s64 = r31.s64 + 44;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// cmplwi cr6,r11,14
	cr6.compare<uint32_t>(r11.u32, 14, xer);
	// bne cr6,0x82126104
	if (!cr6.getEQ()) goto loc_82126104;
	// addi r6,r30,124
	ctx.r6.s64 = r30.s64 + 124;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82124710
	sub_82124710(ctx, base);
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// addi r12,r1,-128
	r12.s64 = ctx.r1.s64 + -128;
	// bl 0x823ed580
	// b 0x823ed15c
	return;
loc_82126104:
	// addi r29,r30,160
	r29.s64 = r30.s64 + 160;
	// lbz r5,89(r30)
	ctx.r5.u64 = PPC_LOAD_U8(r30.u32 + 89);
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// bl 0x82124710
	sub_82124710(ctx, base);
	// lbz r11,89(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 89);
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x82126188
	if (!cr6.getEQ()) goto loc_82126188;
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// beq cr6,0x82126138
	if (cr6.getEQ()) goto loc_82126138;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,12900(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12900);
	ctx.f1.f64 = double(temp.f32);
	// b 0x821261b0
	goto loc_821261B0;
loc_82126138:
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// fmr f2,f28
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f28.f64;
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// rlwinm r11,r11,0,12,12
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212616c
	if (cr6.getEQ()) goto loc_8212616C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,17736(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17736);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211b240
	sub_8211B240(ctx, base);
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// addi r12,r1,-128
	r12.s64 = ctx.r1.s64 + -128;
	// bl 0x823ed580
	// b 0x823ed15c
	return;
loc_8212616C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211b240
	sub_8211B240(ctx, base);
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// addi r12,r1,-128
	r12.s64 = ctx.r1.s64 + -128;
	// bl 0x823ed580
	// b 0x823ed15c
	return;
loc_82126188:
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x821261bc
	if (!cr6.getEQ()) goto loc_821261BC;
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// beq cr6,0x821261a8
	if (cr6.getEQ()) goto loc_821261A8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,14484(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14484);
	ctx.f1.f64 = double(temp.f32);
	// b 0x821261b0
	goto loc_821261B0;
loc_821261A8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
loc_821261B0:
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// fmr f2,f28
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f28.f64;
	// bl 0x8211b240
	sub_8211B240(ctx, base);
loc_821261BC:
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// addi r12,r1,-128
	r12.s64 = ctx.r1.s64 + -128;
	// bl 0x823ed580
	// b 0x823ed15c
	return;
}

__attribute__((alias("__imp__sub_821261D0"))) PPC_WEAK_FUNC(sub_821261D0);
PPC_FUNC_IMPL(__imp__sub_821261D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,212(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 212);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x821261f4
	if (!cr6.getGT()) goto loc_821261F4;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r10,-6376(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6376);
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// cmpwi cr6,r11,600
	cr6.compare<int32_t>(r11.s32, 600, xer);
	// bltlr cr6
	if (cr6.getLT()) return;
loc_821261F4:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126200"))) PPC_WEAK_FUNC(sub_82126200);
PPC_FUNC_IMPL(__imp__sub_82126200) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,240(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 240);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82126224
	if (!cr6.getGT()) goto loc_82126224;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r10,-6376(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6376);
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// cmpwi cr6,r11,600
	cr6.compare<int32_t>(r11.s32, 600, xer);
	// bltlr cr6
	if (cr6.getLT()) return;
loc_82126224:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126230"))) PPC_WEAK_FUNC(sub_82126230);
PPC_FUNC_IMPL(__imp__sub_82126230) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x82119128
	sub_82119128(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lfs f0,0(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f13,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// lfs f12,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f1,f0,f12
	ctx.f1.f64 = double(float(f0.f64 - ctx.f12.f64));
	// fsubs f2,f13,f11
	ctx.f2.f64 = double(float(ctx.f13.f64 - ctx.f11.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fsubs f1,f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = double(float(ctx.f1.f64 - f31.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x8212629c
	if (!cr6.getLT()) goto loc_8212629C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fadds f1,f1,f0
	ctx.f1.f64 = double(float(ctx.f1.f64 + f0.f64));
loc_8212629C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821262B8"))) PPC_WEAK_FUNC(sub_821262B8);
PPC_FUNC_IMPL(__imp__sub_821262B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// bl 0x82126230
	sub_82126230(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821262F8"))) PPC_WEAK_FUNC(sub_821262F8);
PPC_FUNC_IMPL(__imp__sub_821262F8) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820b3ce0
	sub_820B3CE0(ctx, base);
	// lwz r31,24(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lfs f0,12(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f13,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,12(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,20(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f1,f0,f12
	ctx.f1.f64 = double(float(f0.f64 - ctx.f12.f64));
	// fsubs f2,f13,f11
	ctx.f2.f64 = double(float(ctx.f13.f64 - ctx.f11.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fsubs f1,f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = double(float(ctx.f1.f64 - f31.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x8212635c
	if (!cr6.getLT()) goto loc_8212635C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fadds f1,f1,f0
	ctx.f1.f64 = double(float(ctx.f1.f64 + f0.f64));
loc_8212635C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126378"))) PPC_WEAK_FUNC(sub_82126378);
PPC_FUNC_IMPL(__imp__sub_82126378) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r31,24(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lfs f11,16(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	f0.f64 = double(temp.f32);
	// fsubs f0,f11,f0
	f0.f64 = double(float(ctx.f11.f64 - f0.f64));
	// lfs f13,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f10,20(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f13,f10,f13
	ctx.f13.f64 = double(float(ctx.f10.f64 - ctx.f13.f64));
	// lfs f12,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,12(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f12,f11,f12
	ctx.f12.f64 = double(float(ctx.f11.f64 - ctx.f12.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f0,f12,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// fsqrts f1,f0
	ctx.f1.f64 = double(float(sqrt(f0.f64)));
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821263D8"))) PPC_WEAK_FUNC(sub_821263D8);
PPC_FUNC_IMPL(__imp__sub_821263D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,9000
	cr6.compare<int32_t>(ctx.r4.s32, 9000, xer);
	// bne cr6,0x82126430
	if (!cr6.getEQ()) goto loc_82126430;
	// lhz r10,276(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 276);
	// extsh r31,r10
	r31.s64 = ctx.r10.s16;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x82126418
	if (!cr6.getLT()) goto loc_82126418;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,28580
	ctx.r3.s64 = r11.s64 + 28580;
	// extsh r4,r10
	ctx.r4.s64 = ctx.r10.s16;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82126418:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82126430:
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126448"))) PPC_WEAK_FUNC(sub_82126448);
PPC_FUNC_IMPL(__imp__sub_82126448) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// cmpwi cr6,r3,250
	cr6.compare<int32_t>(ctx.r3.s32, 250, xer);
	// bne cr6,0x82126464
	if (!cr6.getEQ()) goto loc_82126464;
	// lhz r11,280(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 280);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// blr 
	return;
loc_82126464:
	// cmpwi cr6,r3,251
	cr6.compare<int32_t>(ctx.r3.s32, 251, xer);
	// bne cr6,0x82126478
	if (!cr6.getEQ()) goto loc_82126478;
	// lhz r11,282(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 282);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// blr 
	return;
loc_82126478:
	// cmpwi cr6,r3,252
	cr6.compare<int32_t>(ctx.r3.s32, 252, xer);
	// bne cr6,0x8212648c
	if (!cr6.getEQ()) goto loc_8212648C;
	// lhz r11,278(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 278);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// blr 
	return;
loc_8212648C:
	// cmpwi cr6,r3,253
	cr6.compare<int32_t>(ctx.r3.s32, 253, xer);
	// beq cr6,0x821264cc
	if (cr6.getEQ()) goto loc_821264CC;
	// cmpwi cr6,r3,249
	cr6.compare<int32_t>(ctx.r3.s32, 249, xer);
	// bne cr6,0x821264ac
	if (!cr6.getEQ()) goto loc_821264AC;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// addi r3,r11,10000
	ctx.r3.s64 = r11.s64 + 10000;
	// blr 
	return;
loc_821264AC:
	// cmpwi cr6,r3,248
	cr6.compare<int32_t>(ctx.r3.s32, 248, xer);
	// bnelr cr6
	if (!cr6.getEQ()) return;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
loc_821264CC:
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821264D8"))) PPC_WEAK_FUNC(sub_821264D8);
PPC_FUNC_IMPL(__imp__sub_821264D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82126448
	sub_82126448(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82120230
	sub_82120230(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82126558
	if (!cr6.getEQ()) goto loc_82126558;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r9,11212(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 11212);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82126558
	if (!cr6.getGT()) goto loc_82126558;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r8,11208(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 11208);
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_8212651C:
	// lhz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// cmpw cr6,r7,r31
	cr6.compare<int32_t>(ctx.r7.s32, r31.s32, xer);
	// beq cr6,0x82126550
	if (cr6.getEQ()) goto loc_82126550;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,676
	r11.s64 = r11.s64 + 676;
	// cmpw cr6,r10,r9
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, xer);
	// blt cr6,0x8212651c
	if (cr6.getLT()) goto loc_8212651C;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82126550:
	// mulli r11,r10,676
	r11.s64 = ctx.r10.s64 * 676;
	// add r3,r11,r8
	ctx.r3.u64 = r11.u64 + ctx.r8.u64;
loc_82126558:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126570"))) PPC_WEAK_FUNC(sub_82126570);
PPC_FUNC_IMPL(__imp__sub_82126570) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r31,24(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lfs f1,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// beq cr6,0x821265e8
	if (cr6.getEQ()) goto loc_821265E8;
	// lwz r11,28(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821265e8
	if (cr6.getEQ()) goto loc_821265E8;
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821265e8
	if (cr6.getEQ()) goto loc_821265E8;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lfs f0,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	f0.f64 = double(temp.f32);
	// lfs f13,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f0,f11,f0
	f0.f64 = double(float(ctx.f11.f64 - f0.f64));
	// lfs f10,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f13,f10,f13
	ctx.f13.f64 = double(float(ctx.f10.f64 - ctx.f13.f64));
	// lfs f11,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f12,f11,f12
	ctx.f12.f64 = double(float(ctx.f11.f64 - ctx.f12.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f0,f12,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// fsqrts f1,f0
	ctx.f1.f64 = double(float(sqrt(f0.f64)));
loc_821265E8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126600"))) PPC_WEAK_FUNC(sub_82126600);
PPC_FUNC_IMPL(__imp__sub_82126600) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,9000
	cr6.compare<int32_t>(r31.s32, 9000, xer);
	// bne cr6,0x82126648
	if (!cr6.getEQ()) goto loc_82126648;
	// lhz r11,276(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 276);
	// extsh r31,r11
	r31.s64 = r11.s16;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x82126648
	if (!cr6.getLT()) goto loc_82126648;
	// lhz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 0);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,28580
	ctx.r3.s64 = r11.s64 + 28580;
	// extsh r4,r10
	ctx.r4.s64 = ctx.r10.s16;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82126648:
	// cmpwi cr6,r31,10000
	cr6.compare<int32_t>(r31.s32, 10000, xer);
	// bge cr6,0x82126664
	if (!cr6.getLT()) goto loc_82126664;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// mulli r10,r31,44
	ctx.r10.s64 = r31.s64 * 44;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// b 0x82126678
	goto loc_82126678;
loc_82126664:
	// addi r11,r31,-10000
	r11.s64 = r31.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
loc_82126678:
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfs f13,16(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,12(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f12,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// lfs f12,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f11
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f0,f12,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// fsqrts f1,f0
	ctx.f1.f64 = double(float(sqrt(f0.f64)));
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821266B8"))) PPC_WEAK_FUNC(sub_821266B8);
PPC_FUNC_IMPL(__imp__sub_821266B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lbz r11,270(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 270);
	// clrlwi r10,r4,24
	ctx.r10.u64 = ctx.r4.u32 & 0xFF;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// stb r11,270(r3)
	PPC_STORE_U8(ctx.r3.u32 + 270, r11.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821266D0"))) PPC_WEAK_FUNC(sub_821266D0);
PPC_FUNC_IMPL(__imp__sub_821266D0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lbz r11,270(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 270);
	// clrlwi r10,r4,24
	ctx.r10.u64 = ctx.r4.u32 & 0xFF;
	// andc r11,r11,r10
	r11.u64 = r11.u64 & ~ctx.r10.u64;
	// stb r11,270(r3)
	PPC_STORE_U8(ctx.r3.u32 + 270, r11.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821266E8"))) PPC_WEAK_FUNC(sub_821266E8);
PPC_FUNC_IMPL(__imp__sub_821266E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lbz r11,270(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 270);
	// clrlwi r10,r4,24
	ctx.r10.u64 = ctx.r4.u32 & 0xFF;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126708"))) PPC_WEAK_FUNC(sub_82126708);
PPC_FUNC_IMPL(__imp__sub_82126708) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82126738
	if (cr6.getEQ()) goto loc_82126738;
	// lbz r11,270(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 270);
	// clrlwi r10,r31,24
	ctx.r10.u64 = r31.u32 & 0xFF;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// stb r11,270(r3)
	PPC_STORE_U8(ctx.r3.u32 + 270, r11.u8);
loc_82126738:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126750"))) PPC_WEAK_FUNC(sub_82126750);
PPC_FUNC_IMPL(__imp__sub_82126750) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82126780
	if (cr6.getEQ()) goto loc_82126780;
	// lbz r11,270(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 270);
	// clrlwi r10,r31,24
	ctx.r10.u64 = r31.u32 & 0xFF;
	// andc r11,r11,r10
	r11.u64 = r11.u64 & ~ctx.r10.u64;
	// stb r11,270(r3)
	PPC_STORE_U8(ctx.r3.u32 + 270, r11.u8);
loc_82126780:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126798"))) PPC_WEAK_FUNC(sub_82126798);
PPC_FUNC_IMPL(__imp__sub_82126798) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821267e4
	if (cr6.getEQ()) goto loc_821267E4;
	// lbz r11,270(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 270);
	// clrlwi r10,r31,24
	ctx.r10.u64 = r31.u32 & 0xFF;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_821267E4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126800"))) PPC_WEAK_FUNC(sub_82126800);
PPC_FUNC_IMPL(__imp__sub_82126800) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r10,11204(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 11204);
	// or r10,r10,r4
	ctx.r10.u64 = ctx.r10.u64 | ctx.r4.u64;
	// stw r10,11204(r11)
	PPC_STORE_U32(r11.u32 + 11204, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126818"))) PPC_WEAK_FUNC(sub_82126818);
PPC_FUNC_IMPL(__imp__sub_82126818) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r10,11204(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 11204);
	// andc r10,r10,r4
	ctx.r10.u64 = ctx.r10.u64 & ~ctx.r4.u64;
	// stw r10,11204(r11)
	PPC_STORE_U32(r11.u32 + 11204, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126830"))) PPC_WEAK_FUNC(sub_82126830);
PPC_FUNC_IMPL(__imp__sub_82126830) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11204(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11204);
	// and r11,r11,r4
	r11.u64 = r11.u64 & ctx.r4.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126850"))) PPC_WEAK_FUNC(sub_82126850);
PPC_FUNC_IMPL(__imp__sub_82126850) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lhz r11,18(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 18);
	// rlwinm r3,r11,31,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126860"))) PPC_WEAK_FUNC(sub_82126860);
PPC_FUNC_IMPL(__imp__sub_82126860) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lhz r11,18(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 18);
	// li r10,0
	ctx.r10.s64 = 0;
	// ori r11,r11,64
	r11.u64 = r11.u64 | 64;
	// stw r10,272(r3)
	PPC_STORE_U32(ctx.r3.u32 + 272, ctx.r10.u32);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126878"))) PPC_WEAK_FUNC(sub_82126878);
PPC_FUNC_IMPL(__imp__sub_82126878) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lwz r11,272(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 272);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,-16(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,6576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6576);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821268A0"))) PPC_WEAK_FUNC(sub_821268A0);
PPC_FUNC_IMPL(__imp__sub_821268A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82123080
	sub_82123080(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82126924
	if (cr6.getEQ()) goto loc_82126924;
	// lwz r31,28(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82119330
	sub_82119330(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lfs f0,14112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	f0.f64 = double(temp.f32);
	// fmuls f31,f1,f0
	f31.f64 = double(float(ctx.f1.f64 * f0.f64));
	// bl 0x820a4970
	sub_820A4970(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82119108
	sub_82119108(ctx, base);
	// addi r31,r1,80
	r31.s64 = ctx.r1.s64 + 80;
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x8210b6e0
	sub_8210B6E0(ctx, base);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x820d5530
	sub_820D5530(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// bne cr6,0x82126928
	if (!cr6.getEQ()) goto loc_82126928;
loc_82126924:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82126928:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126940"))) PPC_WEAK_FUNC(sub_82126940);
PPC_FUNC_IMPL(__imp__sub_82126940) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// rlwinm r3,r11,30,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126950"))) PPC_WEAK_FUNC(sub_82126950);
PPC_FUNC_IMPL(__imp__sub_82126950) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lbz r11,11(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 11);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126960"))) PPC_WEAK_FUNC(sub_82126960);
PPC_FUNC_IMPL(__imp__sub_82126960) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lbz r11,10(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 10);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126970"))) PPC_WEAK_FUNC(sub_82126970);
PPC_FUNC_IMPL(__imp__sub_82126970) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lhz r11,280(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 280);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126990"))) PPC_WEAK_FUNC(sub_82126990);
PPC_FUNC_IMPL(__imp__sub_82126990) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lhz r11,282(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 282);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821269B0"))) PPC_WEAK_FUNC(sub_821269B0);
PPC_FUNC_IMPL(__imp__sub_821269B0) {
	PPC_FUNC_PROLOGUE();
	// b 0x820df5a0
	sub_820DF5A0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821269B8"))) PPC_WEAK_FUNC(sub_821269B8);
PPC_FUNC_IMPL(__imp__sub_821269B8) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stfd f31,-16(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -16, f31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f0,0(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f13,8(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// mulli r10,r11,44
	ctx.r10.s64 = r11.s64 * 44;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfs f12,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f1,f12,f0
	ctx.f1.f64 = double(float(ctx.f12.f64 - f0.f64));
	// fsubs f2,f11,f13
	ctx.f2.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fsubs f0,f31,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 - ctx.f1.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x82126a20
	if (!cr6.getLT()) goto loc_82126A20;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
loc_82126A20:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,11980(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 11980);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x82126a44
	if (cr6.getLT()) goto loc_82126A44;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f13,14036(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14036);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x82126a48
	if (!cr6.getGT()) goto loc_82126A48;
loc_82126A44:
	// li r3,1
	ctx.r3.s64 = 1;
loc_82126A48:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-16(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126A60"))) PPC_WEAK_FUNC(sub_82126A60);
PPC_FUNC_IMPL(__imp__sub_82126A60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// mr r31,r6
	r31.u64 = ctx.r6.u64;
	// bl 0x82122218
	sub_82122218(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82126b54
	if (cr6.getEQ()) goto loc_82126B54;
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x82126ac0
	if (cr6.getEQ()) goto loc_82126AC0;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82126ab4
	if (cr6.getEQ()) goto loc_82126AB4;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x82126acc
	if (!cr6.getEQ()) goto loc_82126ACC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14036(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14036);
	f0.f64 = double(temp.f32);
	// b 0x82126ac8
	goto loc_82126AC8;
loc_82126AB4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,11980(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 11980);
	f0.f64 = double(temp.f32);
	// b 0x82126ac8
	goto loc_82126AC8;
loc_82126AC0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14032(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14032);
	f0.f64 = double(temp.f32);
loc_82126AC8:
	// fadds f31,f31,f0
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(f31.f64 + f0.f64));
loc_82126ACC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,6588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// blt cr6,0x82126ae0
	if (cr6.getLT()) goto loc_82126AE0;
	// fsubs f31,f31,f0
	f31.f64 = double(float(f31.f64 - f0.f64));
loc_82126AE0:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x821269b8
	sub_821269B8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82126b08
	if (cr6.getEQ()) goto loc_82126B08;
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82126B08:
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// lwz r31,0(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x82126b54
	if (cr6.getLT()) goto loc_82126B54;
	// li r30,0
	r30.s64 = 0;
	// lis r29,-32013
	r29.s64 = -2098003968;
loc_82126B20:
	// lwz r11,928(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 928);
	// rlwinm r10,r31,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 4) & 0xFFFFFFF0;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x821269b8
	sub_821269B8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82126b64
	if (!cr6.getEQ()) goto loc_82126B64;
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// lwzx r31,r11,r30
	r31.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x82126b20
	if (!cr6.getLT()) goto loc_82126B20;
loc_82126B54:
	// li r3,-1
	ctx.r3.s64 = -1;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82126B64:
	// lwz r11,928(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 928);
	// rlwinm r10,r31,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 4) & 0xFFFFFFF0;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82126B80"))) PPC_WEAK_FUNC(sub_82126B80);
PPC_FUNC_IMPL(__imp__sub_82126B80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// clrlwi r28,r31,24
	r28.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r28,16
	cr6.compare<uint32_t>(r28.u32, 16, xer);
	// beq cr6,0x82126be0
	if (cr6.getEQ()) goto loc_82126BE0;
	// cmplwi cr6,r28,32
	cr6.compare<uint32_t>(r28.u32, 32, xer);
	// beq cr6,0x82126be0
	if (cr6.getEQ()) goto loc_82126BE0;
	// lwz r3,28(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 28);
	// bl 0x82119128
	sub_82119128(ctx, base);
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// addi r3,r11,12
	ctx.r3.s64 = r11.s64 + 12;
	// lwz r4,24(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// bl 0x82126a60
	sub_82126A60(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x82126c74
	if (cr6.getLT()) goto loc_82126C74;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// sth r11,276(r29)
	PPC_STORE_U16(r29.u32 + 276, r11.u16);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
loc_82126BE0:
	// lwz r31,24(r29)
	r31.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r4,24(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// addi r3,r31,12
	ctx.r3.s64 = r31.s64 + 12;
	// bl 0x82122218
	sub_82122218(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r3,r30,12
	ctx.r3.s64 = r30.s64 + 12;
	// lwz r4,24(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// bl 0x82122218
	sub_82122218(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82126c74
	if (cr6.getEQ()) goto loc_82126C74;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82126c74
	if (cr6.getEQ()) goto loc_82126C74;
	// cmplwi cr6,r28,16
	cr6.compare<uint32_t>(r28.u32, 16, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bne cr6,0x82126c54
	if (!cr6.getEQ()) goto loc_82126C54;
	// li r6,3
	ctx.r6.s64 = 3;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// bl 0x821387d0
	sub_821387D0(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// ble cr6,0x82126c74
	if (!cr6.getGT()) goto loc_82126C74;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// sth r11,276(r29)
	PPC_STORE_U16(r29.u32 + 276, r11.u16);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
loc_82126C54:
	// bl 0x82138ae8
	sub_82138AE8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82126c74
	if (cr6.getEQ()) goto loc_82126C74;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r3,1
	ctx.r3.s64 = 1;
	// sth r11,276(r29)
	PPC_STORE_U16(r29.u32 + 276, r11.u16);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
loc_82126C74:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82126C80"))) PPC_WEAK_FUNC(sub_82126C80);
PPC_FUNC_IMPL(__imp__sub_82126C80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,16
	cr6.compare<uint32_t>(r11.u32, 16, xer);
	// beq cr6,0x82126cf8
	if (cr6.getEQ()) goto loc_82126CF8;
	// cmplwi cr6,r11,32
	cr6.compare<uint32_t>(r11.u32, 32, xer);
	// beq cr6,0x82126cf8
	if (cr6.getEQ()) goto loc_82126CF8;
	// bl 0x820b3ce0
	sub_820B3CE0(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r11,12
	ctx.r3.s64 = r11.s64 + 12;
	// lwz r4,24(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// bl 0x82126a60
	sub_82126A60(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x82126cf0
	if (cr6.getLT()) goto loc_82126CF0;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// sth r11,276(r30)
	PPC_STORE_U16(r30.u32 + 276, r11.u16);
	// b 0x82126d04
	goto loc_82126D04;
loc_82126CF0:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x82126d04
	goto loc_82126D04;
loc_82126CF8:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82126b80
	sub_82126B80(ctx, base);
loc_82126D04:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126D20"))) PPC_WEAK_FUNC(sub_82126D20);
PPC_FUNC_IMPL(__imp__sub_82126D20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed540
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8211dd88
	sub_8211DD88(ctx, base);
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// li r28,0
	r28.s64 = 0;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// lwz r10,24(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// lfs f0,12(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f13,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f30,f0,f31
	f30.f64 = double(float(f0.f64 - f31.f64));
	// lfs f12,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// fadds f29,f0,f31
	f29.f64 = double(float(f0.f64 + f31.f64));
	// fsubs f28,f13,f31
	f28.f64 = double(float(ctx.f13.f64 - f31.f64));
	// fadds f27,f13,f31
	f27.f64 = double(float(ctx.f13.f64 + f31.f64));
	// fsubs f26,f12,f31
	f26.f64 = double(float(ctx.f12.f64 - f31.f64));
	// lbz r27,3(r10)
	r27.u64 = PPC_LOAD_U8(ctx.r10.u32 + 3);
	// fadds f31,f12,f31
	f31.f64 = double(float(ctx.f12.f64 + f31.f64));
	// ble cr6,0x82126e2c
	if (!cr6.getGT()) goto loc_82126E2C;
	// li r30,0
	r30.s64 = 0;
	// lis r25,-31994
	r25.s64 = -2096758784;
loc_82126D88:
	// lwz r11,4852(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 4852);
	// add r31,r30,r11
	r31.u64 = r30.u64 + r11.u64;
	// cmplw cr6,r31,r29
	cr6.compare<uint32_t>(r31.u32, r29.u32, xer);
	// beq cr6,0x82126e1c
	if (cr6.getEQ()) goto loc_82126E1C;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82126e1c
	if (cr6.getEQ()) goto loc_82126E1C;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82126e1c
	if (cr6.getEQ()) goto loc_82126E1C;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82126e1c
	if (cr6.getEQ()) goto loc_82126E1C;
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lfs f0,12(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// blt cr6,0x82126e1c
	if (cr6.getLT()) goto loc_82126E1C;
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// bgt cr6,0x82126e1c
	if (cr6.getGT()) goto loc_82126E1C;
	// lfs f0,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// blt cr6,0x82126e1c
	if (cr6.getLT()) goto loc_82126E1C;
	// fcmpu cr6,f0,f27
	cr6.compare(f0.f64, f27.f64);
	// bgt cr6,0x82126e1c
	if (cr6.getGT()) goto loc_82126E1C;
	// lfs f0,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f26
	cr6.compare(f0.f64, f26.f64);
	// blt cr6,0x82126e1c
	if (cr6.getLT()) goto loc_82126E1C;
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bgt cr6,0x82126e1c
	if (cr6.getGT()) goto loc_82126E1C;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// lbz r4,3(r11)
	ctx.r4.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// cmpw cr6,r27,r4
	cr6.compare<int32_t>(r27.s32, ctx.r4.s32, xer);
	// beq cr6,0x82126e40
	if (cr6.getEQ()) goto loc_82126E40;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82113788
	sub_82113788(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82126e40
	if (!cr6.getEQ()) goto loc_82126E40;
loc_82126E1C:
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// addi r30,r30,676
	r30.s64 = r30.s64 + 676;
	// cmpw cr6,r28,r26
	cr6.compare<int32_t>(r28.s32, r26.s32, xer);
	// blt cr6,0x82126d88
	if (cr6.getLT()) goto loc_82126D88;
loc_82126E2C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed58c
	// b 0x823ed17c
	return;
loc_82126E40:
	// lhz r11,0(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// li r3,1
	ctx.r3.s64 = 1;
	// sth r11,278(r29)
	PPC_STORE_U16(r29.u32 + 278, r11.u16);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed58c
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82126E60"))) PPC_WEAK_FUNC(sub_82126E60);
PPC_FUNC_IMPL(__imp__sub_82126E60) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// bl 0x82126448
	sub_82126448(ctx, base);
	// sth r3,278(r10)
	PPC_STORE_U16(ctx.r10.u32 + 278, ctx.r3.u16);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126E88"))) PPC_WEAK_FUNC(sub_82126E88);
PPC_FUNC_IMPL(__imp__sub_82126E88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82126ec4
	if (cr6.getEQ()) goto loc_82126EC4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82126448
	sub_82126448(ctx, base);
	// sth r3,278(r10)
	PPC_STORE_U16(ctx.r10.u32 + 278, ctx.r3.u16);
loc_82126EC4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126EE0"))) PPC_WEAK_FUNC(sub_82126EE0);
PPC_FUNC_IMPL(__imp__sub_82126EE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,9000
	cr6.compare<int32_t>(ctx.r4.s32, 9000, xer);
	// bne cr6,0x82126f2c
	if (!cr6.getEQ()) goto loc_82126F2C;
	// lhz r11,276(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 276);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bge cr6,0x82126f24
	if (!cr6.getLT()) goto loc_82126F24;
	// lhz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,28580
	ctx.r3.s64 = r11.s64 + 28580;
	// extsh r4,r10
	ctx.r4.s64 = ctx.r10.s16;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82126F24:
	// sth r30,276(r31)
	PPC_STORE_U16(r31.u32 + 276, r30.u16);
	// b 0x82126f30
	goto loc_82126F30;
loc_82126F2C:
	// sth r4,276(r31)
	PPC_STORE_U16(r31.u32 + 276, ctx.r4.u16);
loc_82126F30:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82126F48"))) PPC_WEAK_FUNC(sub_82126F48);
PPC_FUNC_IMPL(__imp__sub_82126F48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82126f7c
	if (cr6.getEQ()) goto loc_82126F7C;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821263d8
	sub_821263D8(ctx, base);
	// sth r3,276(r30)
	PPC_STORE_U16(r30.u32 + 276, ctx.r3.u16);
loc_82126F7C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82126F88"))) PPC_WEAK_FUNC(sub_82126F88);
PPC_FUNC_IMPL(__imp__sub_82126F88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lwz r31,24(r29)
	r31.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8210f8f0
	sub_8210F8F0(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f4,20(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f3.f64 = double(temp.f32);
	// addi r28,r30,12
	r28.s64 = r30.s64 + 12;
	// lfs f2,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// addi r27,r31,12
	r27.s64 = r31.s64 + 12;
	// lfs f1,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210f7c8
	sub_8210F7C8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82126fe4
	if (cr6.getEQ()) goto loc_82126FE4;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed184
	return;
loc_82126FE4:
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82110500
	sub_82110500(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// lwz r8,24(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// lwz r5,24(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82124cb0
	sub_82124CB0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82127044
	if (!cr6.getEQ()) goto loc_82127044;
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r8,24(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// lwz r5,24(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// addi r6,r1,104
	ctx.r6.s64 = ctx.r1.s64 + 104;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82124cb0
	sub_82124CB0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r3,0
	ctx.r3.s64 = 0;
	// beq cr6,0x82127048
	if (cr6.getEQ()) goto loc_82127048;
loc_82127044:
	// li r3,1
	ctx.r3.s64 = 1;
loc_82127048:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82127050"))) PPC_WEAK_FUNC(sub_82127050);
PPC_FUNC_IMPL(__imp__sub_82127050) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// li r29,1
	r29.s64 = 1;
	// bl 0x82110d78
	sub_82110D78(ctx, base);
	// lis r11,-32009
	r11.s64 = -2097741824;
	// mulli r10,r3,156
	ctx.r10.s64 = ctx.r3.s64 * 156;
	// addi r11,r11,-9856
	r11.s64 = r11.s64 + -9856;
	// lbzx r11,r10,r11
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821270f4
	if (cr6.getEQ()) goto loc_821270F4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f1,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x821182f0
	sub_821182F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821270f4
	if (cr6.getEQ()) goto loc_821270F4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r30,r1,80
	r30.s64 = ctx.r1.s64 + 80;
	// bl 0x82110d78
	sub_82110D78(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82113040
	sub_82113040(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f1,2940(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2940);
	ctx.f1.f64 = double(temp.f32);
	// beq cr6,0x821270e0
	if (cr6.getEQ()) goto loc_821270E0;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// bl 0x8210dc70
	sub_8210DC70(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
loc_821270E0:
	// bl 0x8210db48
	sub_8210DB48(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
loc_821270F4:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82127100"))) PPC_WEAK_FUNC(sub_82127100);
PPC_FUNC_IMPL(__imp__sub_82127100) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// addi r12,r1,-40
	r12.s64 = ctx.r1.s64 + -40;
	// bl 0x823ed53c
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r7,31
	ctx.r7.s64 = 31;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lfs f2,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f30.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f5,f30
	ctx.f5.f64 = f30.f64;
	// lfs f29,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f29.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f4,f29
	ctx.f4.f64 = f29.f64;
	// lfs f26,2948(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2948);
	f26.f64 = double(temp.f32);
	// fmr f3,f26
	ctx.f3.f64 = f26.f64;
	// bl 0x821126c0
	sub_821126C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x8212719c
	if (!cr6.getLT()) goto loc_8212719C;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bne cr6,0x82127188
	if (!cr6.getEQ()) goto loc_82127188;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x82127050
	sub_82127050(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212719c
	if (cr6.getEQ()) goto loc_8212719C;
loc_82127188:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// addi r12,r1,-40
	r12.s64 = ctx.r1.s64 + -40;
	// bl 0x823ed588
	// b 0x823ed188
	return;
loc_8212719C:
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r29,0
	r29.s64 = 0;
	// lfs f27,6588(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 6588);
	f27.f64 = double(temp.f32);
	// lfs f25,14156(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14156);
	f25.f64 = double(temp.f32);
	// lfs f28,13960(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	f28.f64 = double(temp.f32);
loc_821271B8:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lfs f13,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// stfs f12,108(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f0,f0,f28,f13
	f0.f64 = double(float(f0.f64 * f28.f64 + ctx.f13.f64));
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lfs f2,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// li r8,19
	ctx.r8.s64 = 19;
	// lfs f1,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f3,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f3.f64 = double(temp.f32);
	// fmr f8,f30
	ctx.f8.f64 = f30.f64;
	// fmr f7,f29
	ctx.f7.f64 = f29.f64;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// fmr f6,f30
	ctx.f6.f64 = f30.f64;
	// fmr f5,f29
	ctx.f5.f64 = f29.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f4,f0,f28,f2
	ctx.f4.f64 = double(float(f0.f64 * f28.f64 + ctx.f2.f64));
	// stfs f4,112(r1)
	temp.f32 = float(ctx.f4.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82127270
	if (cr6.getEQ()) goto loc_82127270;
	// li r7,31
	ctx.r7.s64 = 31;
	// lfs f2,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f2.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f1,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f1.f64 = double(temp.f32);
	// fmr f5,f30
	ctx.f5.f64 = f30.f64;
	// fmr f4,f29
	ctx.f4.f64 = f29.f64;
	// fmr f3,f26
	ctx.f3.f64 = f26.f64;
	// bl 0x821126c0
	sub_821126C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x82127270
	if (!cr6.getLT()) goto loc_82127270;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bne cr6,0x821272a0
	if (!cr6.getEQ()) goto loc_821272A0;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// lwz r4,96(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// bl 0x82127050
	sub_82127050(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x821272a0
	if (!cr6.getEQ()) goto loc_821272A0;
loc_82127270:
	// fadds f31,f31,f25
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(f31.f64 + f25.f64));
	// fcmpu cr6,f31,f27
	cr6.compare(f31.f64, f27.f64);
	// blt cr6,0x82127280
	if (cr6.getLT()) goto loc_82127280;
	// fsubs f31,f31,f27
	f31.f64 = double(float(f31.f64 - f27.f64));
loc_82127280:
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// cmpwi cr6,r29,8
	cr6.compare<int32_t>(r29.s32, 8, xer);
	// blt cr6,0x821271b8
	if (cr6.getLT()) goto loc_821271B8;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// addi r12,r1,-40
	r12.s64 = ctx.r1.s64 + -40;
	// bl 0x823ed588
	// b 0x823ed188
	return;
loc_821272A0:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	f0.f64 = double(temp.f32);
	// lfs f13,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f13.f64 = double(temp.f32);
	// li r3,1
	ctx.r3.s64 = 1;
	// stfs f0,0(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// stfs f13,8(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// addi r12,r1,-40
	r12.s64 = ctx.r1.s64 + -40;
	// bl 0x823ed588
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_821272D0"))) PPC_WEAK_FUNC(sub_821272D0);
PPC_FUNC_IMPL(__imp__sub_821272D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// mr r28,r9
	r28.u64 = ctx.r9.u64;
	// bl 0x8211ddc0
	sub_8211DDC0(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// ble cr6,0x821273d8
	if (!cr6.getGT()) goto loc_821273D8;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bge cr6,0x82127340
	if (!cr6.getLT()) goto loc_82127340;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-28640
	r11.s64 = r11.s64 + -28640;
	// addi r10,r11,25
	ctx.r10.s64 = r11.s64 + 25;
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82127340
	if (!cr6.getEQ()) goto loc_82127340;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821361e0
	sub_821361E0(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
loc_82127340:
	// lfs f0,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// rlwinm r6,r28,28,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 28) & 0x1;
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lfs f0,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	f0.f64 = double(temp.f32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stfs f0,92(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stw r27,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r27.u32);
	// lfs f0,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	f0.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x82127100
	sub_82127100(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821273d8
	if (cr6.getEQ()) goto loc_821273D8;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821360f0
	sub_821360F0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821273d8
	if (cr6.getEQ()) goto loc_821273D8;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x82120e20
	sub_82120E20(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x821273d8
	if (cr6.getEQ()) goto loc_821273D8;
	// bl 0x820ccb68
	sub_820CCB68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820cca18
	sub_820CCA18(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r29,6(r11)
	PPC_STORE_U8(r11.u32 + 6, r29.u8);
	// stb r30,15(r11)
	PPC_STORE_U8(r11.u32 + 15, r30.u8);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
loc_821273D8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_821273E8"))) PPC_WEAK_FUNC(sub_821273E8);
PPC_FUNC_IMPL(__imp__sub_821273E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// mr r27,r8
	r27.u64 = ctx.r8.u64;
	// mr r31,r6
	r31.u64 = ctx.r6.u64;
	// cmpwi cr6,r6,9000
	cr6.compare<int32_t>(ctx.r6.s32, 9000, xer);
	// bne cr6,0x82127434
	if (!cr6.getEQ()) goto loc_82127434;
	// lhz r11,276(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 276);
	// extsh r31,r11
	r31.s64 = r11.s16;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x82127434
	if (!cr6.getLT()) goto loc_82127434;
	// lhz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,28580
	ctx.r3.s64 = r11.s64 + 28580;
	// extsh r4,r10
	ctx.r4.s64 = ctx.r10.s16;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82127434:
	// cmpwi cr6,r31,10000
	cr6.compare<int32_t>(r31.s32, 10000, xer);
	// bge cr6,0x82127450
	if (!cr6.getLT()) goto loc_82127450;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// mulli r10,r31,44
	ctx.r10.s64 = r31.s64 * 44;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// b 0x82127464
	goto loc_82127464;
loc_82127450:
	// addi r11,r31,-10000
	r11.s64 = r31.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
loc_82127464:
	// add r31,r10,r11
	r31.u64 = ctx.r10.u64 + r11.u64;
	// lfs f2,32(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 32);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,24(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// lwz r6,40(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821272d0
	sub_821272D0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82127498"))) PPC_WEAK_FUNC(sub_82127498);
PPC_FUNC_IMPL(__imp__sub_82127498) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// mr r27,r8
	r27.u64 = ctx.r8.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,28,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82127500
	if (!cr6.getEQ()) goto loc_82127500;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x82119128
	sub_82119128(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r5,r11,12
	ctx.r5.s64 = r11.s64 + 12;
	// lwz r6,24(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// bl 0x821272d0
	sub_821272D0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_82127500:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82127510"))) PPC_WEAK_FUNC(sub_82127510);
PPC_FUNC_IMPL(__imp__sub_82127510) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,9000
	cr6.compare<int32_t>(r31.s32, 9000, xer);
	// bne cr6,0x82127558
	if (!cr6.getEQ()) goto loc_82127558;
	// lhz r11,276(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 276);
	// extsh r31,r11
	r31.s64 = r11.s16;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x82127558
	if (!cr6.getLT()) goto loc_82127558;
	// lhz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 0);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,28580
	ctx.r3.s64 = r11.s64 + 28580;
	// extsh r4,r10
	ctx.r4.s64 = ctx.r10.s16;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82127558:
	// cmpwi cr6,r31,10000
	cr6.compare<int32_t>(r31.s32, 10000, xer);
	// bge cr6,0x82127574
	if (!cr6.getLT()) goto loc_82127574;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// mulli r10,r31,44
	ctx.r10.s64 = r31.s64 * 44;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// b 0x82127588
	goto loc_82127588;
loc_82127574:
	// addi r11,r31,-10000
	r11.s64 = r31.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
loc_82127588:
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r10,40(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821275c4
	if (cr6.getEQ()) goto loc_821275C4;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x821275c4
	if (cr6.getEQ()) goto loc_821275C4;
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821275c4
	if (cr6.getEQ()) goto loc_821275C4;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// li r3,1
	ctx.r3.s64 = 1;
	// lbz r10,3(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 3);
	// lbz r11,3(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x821275c8
	if (cr6.getEQ()) goto loc_821275C8;
loc_821275C4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_821275C8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821275D0"))) PPC_WEAK_FUNC(sub_821275D0);
PPC_FUNC_IMPL(__imp__sub_821275D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,9000
	cr6.compare<int32_t>(r31.s32, 9000, xer);
	// bne cr6,0x82127618
	if (!cr6.getEQ()) goto loc_82127618;
	// lhz r11,276(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 276);
	// extsh r31,r11
	r31.s64 = r11.s16;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x82127618
	if (!cr6.getLT()) goto loc_82127618;
	// lhz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 0);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,28580
	ctx.r3.s64 = r11.s64 + 28580;
	// extsh r4,r10
	ctx.r4.s64 = ctx.r10.s16;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82127618:
	// cmpwi cr6,r31,10000
	cr6.compare<int32_t>(r31.s32, 10000, xer);
	// bge cr6,0x82127634
	if (!cr6.getLT()) goto loc_82127634;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// mulli r10,r31,44
	ctx.r10.s64 = r31.s64 * 44;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// b 0x82127648
	goto loc_82127648;
loc_82127634:
	// addi r11,r31,-10000
	r11.s64 = r31.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
loc_82127648:
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82127670
	if (cr6.getEQ()) goto loc_82127670;
	// lwz r10,24(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// li r3,1
	ctx.r3.s64 = 1;
	// lbz r11,3(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// lbz r10,3(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 3);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x82127674
	if (cr6.getEQ()) goto loc_82127674;
loc_82127670:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82127674:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82127680"))) PPC_WEAK_FUNC(sub_82127680);
PPC_FUNC_IMPL(__imp__sub_82127680) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// clrlwi r4,r5,24
	ctx.r4.u64 = ctx.r5.u32 & 0xFF;
	// bl 0x820e2be8
	sub_820E2BE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x821276fc
	if (cr6.getEQ()) goto loc_821276FC;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821276fc
	if (cr6.getEQ()) goto loc_821276FC;
	// lwz r3,20(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lfs f1,20(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
	// lwz r4,24(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820ccc18
	sub_820CCC18(ctx, base);
	// li r11,180
	r11.s64 = 180;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// li r4,1
	ctx.r4.s64 = 1;
	// sth r11,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r11.u16);
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// lhz r11,18(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 18);
	// li r3,1
	ctx.r3.s64 = 1;
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// sth r11,18(r30)
	PPC_STORE_U16(r30.u32 + 18, r11.u16);
	// b 0x82127700
	goto loc_82127700;
loc_821276FC:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82127700:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82127718"))) PPC_WEAK_FUNC(sub_82127718);
PPC_FUNC_IMPL(__imp__sub_82127718) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r9,2
	ctx.r9.s64 = 2;
	// stw r11,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r11.u32);
	// stb r10,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r10.u8);
	// stw r11,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r11.u32);
	// stw r11,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r11.u32);
	// stw r11,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r11.u32);
	// stw r9,60(r31)
	PPC_STORE_U32(r31.u32 + 60, ctx.r9.u32);
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,28(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lis r9,-30584
	ctx.r9.s64 = -2004353024;
	// fmr f0,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = f31.f64;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// ori r9,r9,34953
	ctx.r9.u64 = ctx.r9.u64 | 34953;
	// mulhwu r9,r11,r9
	ctx.r9.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r9.u32)) >> 32;
	// rlwinm r9,r9,26,6,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 26) & 0x3FFFFFF;
	// mulli r9,r9,120
	ctx.r9.s64 = ctx.r9.s64 * 120;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// addi r11,r11,180
	r11.s64 = r11.s64 + 180;
	// stw r11,68(r31)
	PPC_STORE_U32(r31.u32 + 68, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,164(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 164);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// beq cr6,0x821277b8
	if (cr6.getEQ()) goto loc_821277B8;
	// fdivs f0,f31,f13
	f0.f64 = double(float(f31.f64 / ctx.f13.f64));
loc_821277B8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,16020(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16020);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x821277cc
	if (!cr6.getGT()) goto loc_821277CC;
	// fmr f0,f13
	f0.f64 = ctx.f13.f64;
loc_821277CC:
	// fctiwz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// lbz r11,87(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 87);
	// stb r11,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r11.u8);
	// bl 0x82121008
	sub_82121008(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82127808"))) PPC_WEAK_FUNC(sub_82127808);
PPC_FUNC_IMPL(__imp__sub_82127808) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x82127954
	if (!cr6.getEQ()) goto loc_82127954;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// li r11,1
	r11.s64 = 1;
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r30,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r30.u32);
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// stw r11,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r11.u32);
	// stw r30,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r30.u32);
	// stw r30,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r30.u32);
	// stw r10,60(r31)
	PPC_STORE_U32(r31.u32 + 60, ctx.r10.u32);
	// stw r30,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r30.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lis r10,-30584
	ctx.r10.s64 = -2004353024;
	// stb r30,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r30.u8);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// ori r10,r10,34953
	ctx.r10.u64 = ctx.r10.u64 | 34953;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,26,6,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 26) & 0x3FFFFFF;
	// mulli r10,r10,120
	ctx.r10.s64 = ctx.r10.s64 * 120;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,180
	r11.s64 = r11.s64 + 180;
	// stw r11,68(r31)
	PPC_STORE_U32(r31.u32 + 68, r11.u32);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// addi r30,r11,-5572
	r30.s64 = r11.s64 + -5572;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmplw cr6,r3,r30
	cr6.compare<uint32_t>(ctx.r3.u32, r30.u32, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bne cr6,0x82127908
	if (!cr6.getEQ()) goto loc_82127908;
	// lwz r29,28(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lbz r11,36(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 36);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,28624(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28624);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,28620(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28620);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82127908:
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// lbz r10,36(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 36);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// addi r4,r11,-30376
	ctx.r4.s64 = r11.s64 + -30376;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// extsb r5,r10
	ctx.r5.s64 = ctx.r10.s8;
	// lfs f1,12464(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12464);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,28616(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28616);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82127954:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82127718
	sub_82127718(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82127970"))) PPC_WEAK_FUNC(sub_82127970);
PPC_FUNC_IMPL(__imp__sub_82127970) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x821279c0
	if (cr6.getEQ()) goto loc_821279C0;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x821279c8
	if (!cr6.getEQ()) goto loc_821279C8;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// b 0x82127a48
	goto loc_82127A48;
loc_821279C0:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x82127a44
	if (!cr6.getEQ()) goto loc_82127A44;
loc_821279C8:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r4,r11,-5572
	ctx.r4.s64 = r11.s64 + -5572;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,28632(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28632);
	ctx.f1.f64 = double(temp.f32);
loc_82127A20:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// li r11,2
	r11.s64 = 2;
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// stb r10,8(r31)
	PPC_STORE_U8(r31.u32 + 8, ctx.r10.u8);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82127A44:
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
loc_82127A48:
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// li r4,256
	ctx.r4.s64 = 256;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x821279c8
	if (!cr6.getEQ()) goto loc_821279C8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// cntlzw r10,r30
	ctx.r10.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r4,r11,-30376
	ctx.r4.s64 = r11.s64 + -30376;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r5,r10,1
	ctx.r5.u64 = ctx.r10.u64 ^ 1;
	// lfs f1,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,28628(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28628);
	ctx.f1.f64 = double(temp.f32);
	// b 0x82127a20
	goto loc_82127A20;
}

__attribute__((alias("__imp__sub_82127AB8"))) PPC_WEAK_FUNC(sub_82127AB8);
PPC_FUNC_IMPL(__imp__sub_82127AB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -72, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// clrlwi r30,r7,24
	r30.u64 = ctx.r7.u32 & 0xFF;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// lfs f31,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f31.f64 = double(temp.f32);
	// rlwinm r11,r30,0,24,24
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x80;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r25,r8
	r25.u64 = ctx.r8.u64;
	// clrlwi r26,r30,31
	r26.u64 = r30.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82127b00
	if (cr6.getEQ()) goto loc_82127B00;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,6584(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6584);
	f31.f64 = double(temp.f32);
loc_82127B00:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// extsw r10,r25
	ctx.r10.s64 = r25.s32;
	// extsw r9,r27
	ctx.r9.s64 = r27.s32;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lis r11,-32079
	r11.s64 = -2102329344;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// rlwinm r8,r28,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-9536
	r11.s64 = r11.s64 + -9536;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// std r9,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r9.u64);
	// lwzx r4,r8,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f3,f0
	ctx.f3.f64 = double(float(f0.f64));
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// blt cr6,0x82127b74
	if (cr6.getLT()) goto loc_82127B74;
	// extsw r11,r29
	r11.s64 = r29.s32;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8211d758
	sub_8211D758(ctx, base);
loc_82127B74:
	// rlwinm r11,r30,0,26,26
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x20;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82127b98
	if (cr6.getEQ()) goto loc_82127B98;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,184(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 184);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,12468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12468);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x82119210
	sub_82119210(ctx, base);
loc_82127B98:
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r30,28,31,31
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 28) & 0x1;
	// li r9,3
	ctx.r9.s64 = 3;
	// rlwinm r10,r10,0,7,5
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFDFFFFFF;
	// rlwinm r8,r30,31,31,31
	ctx.r8.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 31) & 0x1;
	// rlwinm r7,r30,30,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 30) & 0x1;
	// rlwinm r6,r30,29,31,31
	ctx.r6.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 29) & 0x1;
	// stw r11,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r11.u32);
	// rlwinm r5,r30,26,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 26) & 0x1;
	// stb r9,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r9.u8);
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// stw r8,44(r31)
	PPC_STORE_U32(r31.u32 + 44, ctx.r8.u32);
	// stw r7,48(r31)
	PPC_STORE_U32(r31.u32 + 48, ctx.r7.u32);
	// stw r6,52(r31)
	PPC_STORE_U32(r31.u32 + 52, ctx.r6.u32);
	// stw r5,60(r31)
	PPC_STORE_U32(r31.u32 + 60, ctx.r5.u32);
	// beq cr6,0x82127bec
	if (cr6.getEQ()) goto loc_82127BEC;
	// stb r25,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r25.u8);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_82127BEC:
	// li r11,0
	r11.s64 = 0;
	// stb r11,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r11.u8);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82127C00"))) PPC_WEAK_FUNC(sub_82127C00);
PPC_FUNC_IMPL(__imp__sub_82127C00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x82127c44
	if (cr6.getEQ()) goto loc_82127C44;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82127c4c
	if (!cr6.getEQ()) goto loc_82127C4C;
	// li r30,1
	r30.s64 = 1;
	// b 0x82127c58
	goto loc_82127C58;
loc_82127C44:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82127c58
	if (!cr6.getEQ()) goto loc_82127C58;
loc_82127C4C:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
loc_82127C58:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// li r10,19
	ctx.r10.s64 = 19;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r4,r11,-10924
	ctx.r4.s64 = r11.s64 + -10924;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// stb r10,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r10.u8);
	// lfs f3,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f3.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2956(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2956);
	ctx.f1.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r11.u8);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,28636(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28636);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82127CB8"))) PPC_WEAK_FUNC(sub_82127CB8);
PPC_FUNC_IMPL(__imp__sub_82127CB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// bl 0x82126230
	sub_82126230(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,13976(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13976);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// blt cr6,0x82127d2c
	if (cr6.getLT()) goto loc_82127D2C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28648(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28648);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bgt cr6,0x82127d2c
	if (cr6.getGT()) goto loc_82127D2C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821233f0
	sub_821233F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82127d54
	if (!cr6.getEQ()) goto loc_82127D54;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82127D2C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f1,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x821212d0
	sub_821212D0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// li r11,18
	r11.s64 = 18;
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// stb r10,8(r31)
	PPC_STORE_U8(r31.u32 + 8, ctx.r10.u8);
loc_82127D54:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82127D68"))) PPC_WEAK_FUNC(sub_82127D68);
PPC_FUNC_IMPL(__imp__sub_82127D68) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// li r11,18
	r11.s64 = 18;
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// stb r10,8(r31)
	PPC_STORE_U8(r31.u32 + 8, ctx.r10.u8);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14220(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f1,28472(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28472);
	ctx.f1.f64 = double(temp.f32);
	// lfs f2,28652(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 28652);
	ctx.f2.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// clrlwi r5,r30,31
	ctx.r5.u64 = r30.u32 & 0x1;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r4,r11,-16000
	ctx.r4.s64 = r11.s64 + -16000;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,13968(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13968);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82127E20"))) PPC_WEAK_FUNC(sub_82127E20);
PPC_FUNC_IMPL(__imp__sub_82127E20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-21846
	ctx.r10.s64 = -1431699456;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// ori r10,r10,43691
	ctx.r10.u64 = ctx.r10.u64 | 43691;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r30,r10,r11
	r30.s64 = r11.s64 - ctx.r10.s64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// li r11,18
	r11.s64 = 18;
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// stb r10,8(r31)
	PPC_STORE_U8(r31.u32 + 8, ctx.r10.u8);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r10,-32056
	ctx.r10.s64 = -2100822016;
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r4,r10,-8956
	ctx.r4.s64 = ctx.r10.s64 + -8956;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrlwi r5,r11,31
	ctx.r5.u64 = r11.u32 & 0x1;
	// lfs f3,14220(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14220);
	ctx.f3.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f2,12904(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12904);
	ctx.f2.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f1,25476(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 25476);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// lfs f2,12272(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12272);
	ctx.f2.f64 = double(temp.f32);
	// bne cr6,0x82127ed4
	if (!cr6.getEQ()) goto loc_82127ED4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,28660(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28660);
	ctx.f1.f64 = double(temp.f32);
	// b 0x82127ef0
	goto loc_82127EF0;
loc_82127ED4:
	// cmplwi cr6,r30,1
	cr6.compare<uint32_t>(r30.u32, 1, xer);
	// bne cr6,0x82127ee8
	if (!cr6.getEQ()) goto loc_82127EE8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,28656(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28656);
	ctx.f1.f64 = double(temp.f32);
	// b 0x82127ef0
	goto loc_82127EF0;
loc_82127EE8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15776);
	ctx.f1.f64 = double(temp.f32);
loc_82127EF0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82127F08"))) PPC_WEAK_FUNC(sub_82127F08);
PPC_FUNC_IMPL(__imp__sub_82127F08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// cmplwi cr6,r11,16
	cr6.compare<uint32_t>(r11.u32, 16, xer);
	// beq cr6,0x8212806c
	if (cr6.getEQ()) goto loc_8212806C;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// li r30,16
	r30.s64 = 16;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// stb r30,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r30.u8);
	// bne cr6,0x82127fd4
	if (!cr6.getEQ()) goto loc_82127FD4;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x82127fd4
	if (!cr6.getEQ()) goto loc_82127FD4;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r10,-32056
	ctx.r10.s64 = -2100822016;
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r4,r10,-16000
	ctx.r4.s64 = ctx.r10.s64 + -16000;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrlwi r5,r11,31
	ctx.r5.u64 = r11.u32 & 0x1;
	// lfs f31,14220(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lfs f2,2692(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2692);
	ctx.f2.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f1,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// lfs f1,3112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211b220
	sub_8211B220(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r30.u8);
	// bl 0x8211f190
	sub_8211F190(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82127FD4:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r10,-32056
	ctx.r10.s64 = -2100822016;
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r4,r10,-15612
	ctx.r4.s64 = ctx.r10.s64 + -15612;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrlwi r5,r11,31
	ctx.r5.u64 = r11.u32 & 0x1;
	// lfs f31,14220(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lfs f2,2692(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2692);
	ctx.f2.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f1,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// lfs f1,2956(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2956);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211b220
	sub_8211B220(ctx, base);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// stb r30,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r30.u8);
	// beq cr6,0x82128044
	if (cr6.getEQ()) goto loc_82128044;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
loc_82128044:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82128058
	if (cr6.getEQ()) goto loc_82128058;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
loc_82128058:
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// bl 0x8211f190
	sub_8211F190(ctx, base);
loc_8212806C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82128078"))) PPC_WEAK_FUNC(sub_82128078);
PPC_FUNC_IMPL(__imp__sub_82128078) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// cmplwi cr6,r11,5
	cr6.compare<uint32_t>(r11.u32, 5, xer);
	// beq cr6,0x821280b4
	if (cr6.getEQ()) goto loc_821280B4;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// li r11,5
	r11.s64 = 5;
	// li r10,-1
	ctx.r10.s64 = -1;
	// li r9,0
	ctx.r9.s64 = 0;
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// stw r10,44(r31)
	PPC_STORE_U32(r31.u32 + 44, ctx.r10.u32);
	// stb r9,8(r31)
	PPC_STORE_U8(r31.u32 + 8, ctx.r9.u8);
loc_821280B4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821280C8"))) PPC_WEAK_FUNC(sub_821280C8);
PPC_FUNC_IMPL(__imp__sub_821280C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82128134
	if (cr6.getEQ()) goto loc_82128134;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212812c
	if (cr6.getEQ()) goto loc_8212812C;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// b 0x82128178
	goto loc_82128178;
loc_8212812C:
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// b 0x82128140
	goto loc_82128140;
loc_82128134:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82128178
	if (cr6.getEQ()) goto loc_82128178;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
loc_82128140:
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// li r4,256
	ctx.r4.s64 = 256;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82128174
	if (!cr6.getEQ()) goto loc_82128174;
	// cntlzw r11,r28
	r11.u64 = r28.u32 == 0 ? 32 : __builtin_clz(r28.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r30,r11,1
	r30.u64 = r11.u64 ^ 1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// b 0x82128178
	goto loc_82128178;
loc_82128174:
	// li r29,0
	r29.s64 = 0;
loc_82128178:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// li r11,11
	r11.s64 = 11;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// li r11,0
	r11.s64 = 0;
	// stb r11,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r11.u8);
	// bne cr6,0x82128244
	if (!cr6.getEQ()) goto loc_82128244;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,28668(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28668);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,28664(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28664);
	ctx.f1.f64 = double(temp.f32);
	// beq cr6,0x82128200
	if (cr6.getEQ()) goto loc_82128200;
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// li r5,0
	ctx.r5.s64 = 0;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// addi r4,r11,-17492
	ctx.r4.s64 = r11.s64 + -17492;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lfs f1,2780(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2780);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,28628(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28628);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82128200:
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// li r5,1
	ctx.r5.s64 = 1;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// addi r4,r11,-17492
	ctx.r4.s64 = r11.s64 + -17492;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lfs f1,2780(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2780);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,28628(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28628);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82128244:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x821282b4
	if (cr6.getEQ()) goto loc_821282B4;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x821282bc
	if (cr6.getEQ()) goto loc_821282BC;
loc_82128254:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,28556(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28556);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2720(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2720);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r4,r11,-11608
	ctx.r4.s64 = r11.s64 + -11608;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2780(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2780);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,16024(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16024);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821282B4:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x82128254
	if (cr6.getEQ()) goto loc_82128254;
loc_821282BC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,28556(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28556);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2720(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2720);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r4,r11,-11424
	ctx.r4.s64 = r11.s64 + -11424;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2780(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2780);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,25492(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25492);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82128320"))) PPC_WEAK_FUNC(sub_82128320);
PPC_FUNC_IMPL(__imp__sub_82128320) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8212836c
	if (cr6.getEQ()) goto loc_8212836C;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82128390
	if (!cr6.getEQ()) goto loc_82128390;
	// li r30,1
	r30.s64 = 1;
	// b 0x8212839c
	goto loc_8212839C;
loc_8212836C:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82128390
	if (cr6.getEQ()) goto loc_82128390;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// li r4,256
	ctx.r4.s64 = 256;
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212839c
	if (cr6.getEQ()) goto loc_8212839C;
loc_82128390:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
loc_8212839C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// li r11,12
	r11.s64 = 12;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// li r11,0
	r11.s64 = 0;
	// stb r11,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r11.u8);
	// beq cr6,0x82128438
	if (cr6.getEQ()) goto loc_82128438;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x82128440
	if (cr6.getEQ()) goto loc_82128440;
loc_821283C4:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// beq cr6,0x821284f8
	if (cr6.getEQ()) goto loc_821284F8;
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// addi r4,r11,-14272
	ctx.r4.s64 = r11.s64 + -14272;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lfs f1,2948(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2948);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,28684(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28684);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_82128438:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x821283c4
	if (cr6.getEQ()) goto loc_821283C4;
loc_82128440:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// beq cr6,0x821284b4
	if (cr6.getEQ()) goto loc_821284B4;
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// addi r4,r11,-14916
	ctx.r4.s64 = r11.s64 + -14916;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lfs f1,2780(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2780);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,15760(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15760);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_821284B4:
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// addi r4,r11,-14272
	ctx.r4.s64 = r11.s64 + -14272;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lfs f1,12452(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12452);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,28680(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28680);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_821284F8:
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// addi r4,r11,-14916
	ctx.r4.s64 = r11.s64 + -14916;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lfs f1,28676(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28676);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,28672(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28672);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82128540"))) PPC_WEAK_FUNC(sub_82128540);
PPC_FUNC_IMPL(__imp__sub_82128540) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lfs f0,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f13,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 - f0.f64));
	// lfs f11,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f13,f11,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fsqrts f31,f0
	f31.f64 = double(float(sqrt(f0.f64)));
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// li r28,1
	r28.s64 = 1;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x821285b4
	if (cr6.getEQ()) goto loc_821285B4;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x821285bc
	if (!cr6.getEQ()) goto loc_821285BC;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// b 0x821285d4
	goto loc_821285D4;
loc_821285B4:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x821285d0
	if (!cr6.getEQ()) goto loc_821285D0;
loc_821285BC:
	// li r28,0
	r28.s64 = 0;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// b 0x821285fc
	goto loc_821285FC;
loc_821285D0:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
loc_821285D4:
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// li r4,256
	ctx.r4.s64 = 256;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cntlzw r11,r29
	r11.u64 = r29.u32 == 0 ? 32 : __builtin_clz(r29.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r29,r11,1
	r29.u64 = r11.u64 ^ 1;
	// beq cr6,0x821285fc
	if (cr6.getEQ()) goto loc_821285FC;
	// li r28,0
	r28.s64 = 0;
loc_821285FC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,13
	ctx.r10.s64 = 13;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lfs f0,3112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r10.u8);
	// lfs f13,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,44(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 44, temp.u32);
	// addi r10,r31,60
	ctx.r10.s64 = r31.s64 + 60;
	// lfs f13,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,48(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
	// lfs f1,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// lfs f13,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,52(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// stfs f0,56(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 56, temp.u32);
	// stfs f1,64(r31)
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r31.u32 + 64, temp.u32);
	// stb r11,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r11.u8);
	// beq cr6,0x82128674
	if (cr6.getEQ()) goto loc_82128674;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lfs f0,11220(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 11220);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// addi r4,r11,-16664
	ctx.r4.s64 = r11.s64 + -16664;
	// b 0x8212868c
	goto loc_8212868C;
loc_82128674:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lfs f0,11232(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 11232);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// addi r4,r11,-2636
	ctx.r4.s64 = r11.s64 + -2636;
loc_8212868C:
	// fmuls f0,f0,f2
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 * ctx.f2.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,14220(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f3.f64 = double(temp.f32);
	// fdivs f0,f31,f0
	f0.f64 = double(float(f31.f64 / f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_821286B8"))) PPC_WEAK_FUNC(sub_821286B8);
PPC_FUNC_IMPL(__imp__sub_821286B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stfd f29,-120(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -120, f29.u64);
	// stfd f30,-112(r1)
	PPC_STORE_U64(ctx.r1.u32 + -112, f30.u64);
	// stfd f31,-104(r1)
	PPC_STORE_U64(ctx.r1.u32 + -104, f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// li r29,0
	r29.s64 = 0;
	// mr r22,r4
	r22.u64 = ctx.r4.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// mr r21,r7
	r21.u64 = ctx.r7.u64;
	// lwz r26,24(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// mr r23,r29
	r23.u64 = r29.u64;
	// lwz r27,28(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lbz r11,0(r26)
	r11.u64 = PPC_LOAD_U8(r26.u32 + 0);
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// bne cr6,0x8212870c
	if (!cr6.getEQ()) goto loc_8212870C;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bgt cr6,0x82128b78
	if (cr6.getGT()) goto loc_82128B78;
loc_8212870C:
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// lis r25,-32014
	r25.s64 = -2098069504;
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// bne cr6,0x82128730
	if (!cr6.getEQ()) goto loc_82128730;
	// lwz r10,48(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// li r24,1
	r24.s64 = 1;
	// lwz r11,-6376(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -6376);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// beq cr6,0x82128734
	if (cr6.getEQ()) goto loc_82128734;
loc_82128730:
	// mr r24,r29
	r24.u64 = r29.u64;
loc_82128734:
	// lis r10,-32056
	ctx.r10.s64 = -2100822016;
	// mr r11,r29
	r11.u64 = r29.u64;
	// addi r28,r10,27040
	r28.s64 = ctx.r10.s64 + 27040;
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// beq cr6,0x82128770
	if (cr6.getEQ()) goto loc_82128770;
loc_8212874C:
	// cmpw cr6,r10,r30
	cr6.compare<int32_t>(ctx.r10.s32, r30.s32, xer);
	// beq cr6,0x8212876c
	if (cr6.getEQ()) goto loc_8212876C;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mulli r10,r11,44
	ctx.r10.s64 = r11.s64 * 44;
	// lwzx r10,r10,r28
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r28.u32);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// bne cr6,0x8212874c
	if (!cr6.getEQ()) goto loc_8212874C;
	// b 0x82128770
	goto loc_82128770;
loc_8212876C:
	// mr r23,r11
	r23.u64 = r11.u64;
loc_82128770:
	// lfs f0,252(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 252);
	f0.f64 = double(temp.f32);
	// lfs f13,256(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 256);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x82128b8c
	if (cr6.getLT()) goto loc_82128B8C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,11980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 11980);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// blt cr6,0x821287a0
	if (cr6.getLT()) goto loc_821287A0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14036(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14036);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// ble cr6,0x82128958
	if (!cr6.getGT()) goto loc_82128958;
loc_821287A0:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-13108
	ctx.r10.s64 = -859045888;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// ori r10,r10,52429
	ctx.r10.u64 = ctx.r10.u64 | 52429;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,28,4,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 28) & 0xFFFFFFF;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82128958
	if (!cr0.getEQ()) goto loc_82128958;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82119128
	sub_82119128(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28696(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28696);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fadds f30,f1,f0
	f30.f64 = double(float(ctx.f1.f64 + f0.f64));
	// lfs f0,14032(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14032);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fadds f13,f1,f0
	ctx.f13.f64 = double(float(ctx.f1.f64 + f0.f64));
	// lfs f0,13976(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13976);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f29,f13,f0
	f29.f64 = double(float(ctx.f13.f64 - f0.f64));
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f30,f0
	cr6.compare(f30.f64, f0.f64);
	// blt cr6,0x82128818
	if (cr6.getLT()) goto loc_82128818;
	// fsubs f30,f30,f0
	f30.f64 = double(float(f30.f64 - f0.f64));
loc_82128818:
	// fcmpu cr6,f29,f0
	ctx.fpscr.disableFlushMode();
	cr6.compare(f29.f64, f0.f64);
	// blt cr6,0x82128824
	if (cr6.getLT()) goto loc_82128824;
	// fsubs f29,f29,f0
	f29.f64 = double(float(f29.f64 - f0.f64));
loc_82128824:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x821203d0
	sub_821203D0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,31
	ctx.r6.s64 = 31;
	// lfs f4,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f4.f64 = double(temp.f32);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lfs f3,84(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	ctx.f3.f64 = double(temp.f32);
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// lfs f31,3032(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3032);
	f31.f64 = double(temp.f32);
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// bl 0x82121d00
	sub_82121D00(ctx, base);
	// addi r6,r1,84
	ctx.r6.s64 = ctx.r1.s64 + 84;
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x821203d0
	sub_821203D0(ctx, base);
	// li r6,31
	ctx.r6.s64 = 31;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lfs f4,84(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,80(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// bl 0x82121d00
	sub_82121D00(ctx, base);
	// fcmpu cr6,f30,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f30.f64, f31.f64);
	// bge cr6,0x82128958
	if (!cr6.getLT()) goto loc_82128958;
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x82128958
	if (!cr6.getLT()) goto loc_82128958;
	// fsubs f0,f30,f1
	f0.f64 = double(float(f30.f64 - ctx.f1.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f30.f64 = double(temp.f32);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// bge cr6,0x82128958
	if (!cr6.getLT()) goto loc_82128958;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,15676(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15676);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x82128958
	if (!cr6.getGT()) goto loc_82128958;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r10,r3,31
	ctx.r10.u64 = ctx.r3.u32 & 0x1;
	// lis r11,-32056
	r11.s64 = -2100822016;
	// mulli r10,r10,28
	ctx.r10.s64 = ctx.r10.s64 * 28;
	// addi r11,r11,32240
	r11.s64 = r11.s64 + 32240;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// add r30,r10,r11
	r30.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r29,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r29.u32);
	// li r10,4
	ctx.r10.s64 = 4;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r10.u8);
	// lfs f0,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,48(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// lfs f0,24(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 24);
	f0.f64 = double(temp.f32);
	// stb r29,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r29.u8);
	// stfs f0,52(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// lfs f3,14220(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f3.f64 = double(temp.f32);
	// cntlzw r11,r24
	r11.u64 = r24.u32 == 0 ? 32 : __builtin_clz(r24.u32);
	// stfs f31,56(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 56, temp.u32);
	// lwz r5,4(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwinm r9,r11,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lfs f2,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f2.f64 = double(temp.f32);
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x8211d6c0
	sub_8211D6C0(ctx, base);
	// lfs f1,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// blt cr6,0x82128950
	if (cr6.getLT()) goto loc_82128950;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
loc_82128950:
	// stfs f30,36(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 36, temp.u32);
	// b 0x82128ae4
	goto loc_82128AE4;
loc_82128958:
	// mulli r30,r23,44
	r30.s64 = r23.s64 * 44;
	// addi r25,r28,28
	r25.s64 = r28.s64 + 28;
	// lwzx r11,r30,r25
	r11.u64 = PPC_LOAD_U32(r30.u32 + r25.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82128ae8
	if (cr6.getEQ()) goto loc_82128AE8;
	// addi r26,r28,32
	r26.s64 = r28.s64 + 32;
	// lwzx r11,r30,r26
	r11.u64 = PPC_LOAD_U32(r30.u32 + r26.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82128ae8
	if (!cr6.getGT()) goto loc_82128AE8;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r28,r3,31
	r28.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwzx r9,r30,r26
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + r26.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// lwzx r10,r30,r25
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r25.u32);
	// twllei r9,0
	// divwu r8,r11,r9
	ctx.r8.u32 = r11.u32 / ctx.r9.u32;
	// mullw r9,r8,r9
	ctx.r9.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r9.s32);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// add r30,r11,r10
	r30.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,4
	ctx.r10.s64 = 4;
	// stw r29,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r29.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r10.u8);
	// lfs f0,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,48(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// lfs f0,24(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 24);
	f0.f64 = double(temp.f32);
	// stb r29,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r29.u8);
	// stfs f0,52(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// lfs f3,14220(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f3.f64 = double(temp.f32);
	// cntlzw r11,r24
	r11.u64 = r24.u32 == 0 ? 32 : __builtin_clz(r24.u32);
	// stfs f31,56(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 56, temp.u32);
	// lwz r5,4(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// rlwinm r9,r11,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lfs f2,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f2.f64 = double(temp.f32);
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x8211d6c0
	sub_8211D6C0(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r11,r11,-21420
	r11.s64 = r11.s64 + -21420;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x82128a5c
	if (!cr6.getEQ()) goto loc_82128A5C;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,20971
	ctx.r10.s64 = 1374355456;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// ori r10,r10,34079
	ctx.r10.u64 = ctx.r10.u64 | 34079;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,27,5,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x7FFFFFF;
	// mulli r10,r10,100
	ctx.r10.s64 = ctx.r10.s64 * 100;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82128a5c
	if (cr0.getEQ()) goto loc_82128A5C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,28692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28692);
	ctx.f1.f64 = double(temp.f32);
	// b 0x82128a68
	goto loc_82128A68;
loc_82128A5C:
	// lfs f1,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// blt cr6,0x82128a70
	if (cr6.getLT()) goto loc_82128A70;
loc_82128A68:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
loc_82128A70:
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x820a10e0
	sub_820A10E0(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bgt cr6,0x82128a98
	if (cr6.getGT()) goto loc_82128A98;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,16,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82128a98
	if (cr6.getEQ()) goto loc_82128A98;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2772(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2772);
	ctx.f1.f64 = double(temp.f32);
loc_82128A98:
	// lwz r11,16(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82128ae4
	if (cr6.getEQ()) goto loc_82128AE4;
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x82128ae4
	if (!cr6.getGT()) goto loc_82128AE4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f31,60(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 60, temp.u32);
	// lfs f0,14436(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// stfs f0,56(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 56, temp.u32);
	// lfs f0,0(r22)
	temp.u32 = PPC_LOAD_U32(r22.u32 + 0);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f1
	f0.f64 = double(float(f0.f64 * ctx.f1.f64));
	// stfs f0,64(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 64, temp.u32);
	// lfs f0,4(r22)
	temp.u32 = PPC_LOAD_U32(r22.u32 + 4);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f1
	f0.f64 = double(float(f0.f64 * ctx.f1.f64));
	// stfs f0,68(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 68, temp.u32);
	// lfs f0,8(r22)
	temp.u32 = PPC_LOAD_U32(r22.u32 + 8);
	f0.f64 = double(temp.f32);
	// fmuls f0,f0,f1
	f0.f64 = double(float(f0.f64 * ctx.f1.f64));
	// stfs f0,72(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 72, temp.u32);
loc_82128AE4:
	// li r29,1
	r29.s64 = 1;
loc_82128AE8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211f190
	sub_8211F190(ctx, base);
	// bl 0x820a66b0
	sub_820A66B0(ctx, base);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,11,11
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x100000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82128b08
	if (cr6.getEQ()) goto loc_82128B08;
	// bl 0x820a6688
	sub_820A6688(ctx, base);
loc_82128B08:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x82128b78
	if (cr6.getEQ()) goto loc_82128B78;
	// lwz r3,352(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 352);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82128b44
	if (cr6.getEQ()) goto loc_82128B44;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwinm r11,r11,0,18,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82128b44
	if (!cr6.getEQ()) goto loc_82128B44;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
loc_82128B44:
	// lwz r3,356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 356);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82128b78
	if (cr6.getEQ()) goto loc_82128B78;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwinm r11,r11,0,18,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82128b78
	if (!cr6.getEQ()) goto loc_82128B78;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
loc_82128B78:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-120(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -120);
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_82128B8C:
	// cmpwi cr6,r30,7
	cr6.compare<int32_t>(r30.s32, 7, xer);
	// bne cr6,0x82128e50
	if (!cr6.getEQ()) goto loc_82128E50;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,17932(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17932);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// ble cr6,0x82128e50
	if (!cr6.getGT()) goto loc_82128E50;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,17928(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17928);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// bge cr6,0x82128e50
	if (!cr6.getLT()) goto loc_82128E50;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r26,r3,31
	r26.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r10,-13108
	ctx.r10.s64 = -859045888;
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// ori r30,r10,52429
	r30.u64 = ctx.r10.u64 | 52429;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mulhwu r10,r11,r30
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(r30.u32)) >> 32;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bge cr6,0x82128e50
	if (!cr6.getLT()) goto loc_82128E50;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r28,r3,31
	r28.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// mulhwu r10,r11,r30
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(r30.u32)) >> 32;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r30,r10,r11
	r30.s64 = r11.s64 - ctx.r10.s64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// li r11,6
	r11.s64 = 6;
	// stw r29,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r29.u32);
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// lwz r11,-6376(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -6376);
	// stb r29,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r29.u8);
	// stw r11,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r11.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82128d4c
	if (cr6.getEQ()) goto loc_82128D4C;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cntlzw r28,r24
	r28.u64 = r24.u32 == 0 ? 32 : __builtin_clz(r24.u32);
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f30.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f29.f64 = double(temp.f32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f29.f64;
	// clrlwi r5,r3,31
	ctx.r5.u64 = ctx.r3.u32 & 0x1;
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// addi r29,r11,-13596
	r29.s64 = r11.s64 + -13596;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// rlwinm r9,r28,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 27) & 0x1;
	// bl 0x8211d6c0
	sub_8211D6C0(ctx, base);
	// cmplwi cr6,r30,2
	cr6.compare<uint32_t>(r30.u32, 2, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bge cr6,0x82128cd0
	if (!cr6.getLT()) goto loc_82128CD0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,12272(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12272);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,25492(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25492);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121250
	sub_82121250(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-120(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -120);
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_82128CD0:
	// cmplwi cr6,r30,4
	cr6.compare<uint32_t>(r30.u32, 4, xer);
	// bge cr6,0x82128d08
	if (!cr6.getLT()) goto loc_82128D08;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,12272(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12272);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,28688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28688);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121250
	sub_82121250(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-120(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -120);
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_82128D08:
	// lhz r11,4(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 4);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// lfs f2,12272(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12272);
	ctx.f2.f64 = double(temp.f32);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f0,88(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x82121250
	sub_82121250(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-120(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -120);
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_82128D4C:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cntlzw r28,r24
	r28.u64 = r24.u32 == 0 ? 32 : __builtin_clz(r24.u32);
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f30.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f29.f64 = double(temp.f32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f29.f64;
	// clrlwi r5,r3,31
	ctx.r5.u64 = ctx.r3.u32 & 0x1;
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// addi r29,r11,-13032
	r29.s64 = r11.s64 + -13032;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// rlwinm r9,r28,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 27) & 0x1;
	// bl 0x8211d6c0
	sub_8211D6C0(ctx, base);
	// cmplwi cr6,r30,2
	cr6.compare<uint32_t>(r30.u32, 2, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bge cr6,0x82128dd4
	if (!cr6.getLT()) goto loc_82128DD4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,12272(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12272);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15348(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15348);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121250
	sub_82121250(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-120(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -120);
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_82128DD4:
	// cmplwi cr6,r30,4
	cr6.compare<uint32_t>(r30.u32, 4, xer);
	// bge cr6,0x82128e0c
	if (!cr6.getLT()) goto loc_82128E0C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,12272(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12272);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,15732(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15732);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121250
	sub_82121250(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-120(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -120);
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_82128E0C:
	// lhz r11,4(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 4);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// lfs f2,12272(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12272);
	ctx.f2.f64 = double(temp.f32);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f0,88(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x82121250
	sub_82121250(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-120(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -120);
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
loc_82128E50:
	// mulli r11,r23,44
	r11.s64 = r23.s64 * 44;
	// addi r10,r28,36
	ctx.r10.s64 = r28.s64 + 36;
	// lwzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82128b78
	if (cr6.getEQ()) goto loc_82128B78;
	// addi r10,r28,40
	ctx.r10.s64 = r28.s64 + 40;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82128b78
	if (!cr6.getGT()) goto loc_82128B78;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmpwi cr6,r23,9
	cr6.compare<int32_t>(r23.s32, 9, xer);
	// bne cr6,0x82128ea8
	if (!cr6.getEQ()) goto loc_82128EA8;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82128ebc
	if (cr6.getEQ()) goto loc_82128EBC;
	// li r23,10
	r23.s64 = 10;
	// b 0x82128ebc
	goto loc_82128EBC;
loc_82128EA8:
	// cmpwi cr6,r23,12
	cr6.compare<int32_t>(r23.s32, 12, xer);
	// bne cr6,0x82128ebc
	if (!cr6.getEQ()) goto loc_82128EBC;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82128ebc
	if (cr6.getEQ()) goto loc_82128EBC;
	// li r23,13
	r23.s64 = 13;
loc_82128EBC:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// mulli r11,r23,44
	r11.s64 = r23.s64 * 44;
	// addi r9,r28,40
	ctx.r9.s64 = r28.s64 + 40;
	// addi r8,r28,36
	ctx.r8.s64 = r28.s64 + 36;
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// add r10,r10,r30
	ctx.r10.u64 = ctx.r10.u64 + r30.u64;
	// lwzx r7,r11,r9
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// lwzx r9,r11,r8
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// divwu r11,r10,r7
	r11.u32 = ctx.r10.u32 / ctx.r7.u32;
	// twllei r7,0
	// mullw r11,r11,r7
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r7.s32);
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// add r30,r11,r9
	r30.u64 = r11.u64 + ctx.r9.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,6
	ctx.r10.s64 = 6;
	// stw r29,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r29.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lfs f3,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f3.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r10.u8);
	// lfs f31,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// cntlzw r11,r24
	r11.u64 = r24.u32 == 0 ? 32 : __builtin_clz(r24.u32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// rlwinm r9,r11,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lwz r11,-6376(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -6376);
	// stb r29,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r29.u8);
	// stw r11,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r11.u32);
	// lfs f2,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f2.f64 = double(temp.f32);
	// lwz r5,4(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x8211d6c0
	sub_8211D6C0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f2,12272(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12272);
	ctx.f2.f64 = double(temp.f32);
	// bge cr6,0x82128f84
	if (!cr6.getLT()) goto loc_82128F84;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lhz r11,4(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 4);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f0,88(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
loc_82128F84:
	// bl 0x82121250
	sub_82121250(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f29,-120(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -120);
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_82128FA8"))) PPC_WEAK_FUNC(sub_82128FA8);
PPC_FUNC_IMPL(__imp__sub_82128FA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed544
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// lwz r29,24(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// cmpwi cr6,r28,110
	cr6.compare<int32_t>(r28.s32, 110, xer);
	// bne cr6,0x821290a8
	if (!cr6.getEQ()) goto loc_821290A8;
	// lwz r3,472(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 472);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821290a8
	if (cr6.getEQ()) goto loc_821290A8;
	// bl 0x820dcf10
	sub_820DCF10(ctx, base);
	// cmpwi cr6,r3,5
	cr6.compare<int32_t>(ctx.r3.s32, 5, xer);
	// bne cr6,0x82128ffc
	if (!cr6.getEQ()) goto loc_82128FFC;
	// li r28,8
	r28.s64 = 8;
	// b 0x821290a8
	goto loc_821290A8;
loc_82128FFC:
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x82129020
	if (cr6.getEQ()) goto loc_82129020;
	// li r4,4
	ctx.r4.s64 = 4;
	// lwz r3,472(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 472);
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// b 0x821290a8
	goto loc_821290A8;
loc_82129020:
	// li r11,239
	r11.s64 = 239;
	// sth r11,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, r11.u16);
	// li r11,72
	r11.s64 = 72;
	// sth r11,82(r1)
	PPC_STORE_U16(ctx.r1.u32 + 82, r11.u16);
	// li r11,73
	r11.s64 = 73;
	// sth r11,84(r1)
	PPC_STORE_U16(ctx.r1.u32 + 84, r11.u16);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r10,-21846
	ctx.r10.s64 = -1431699456;
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// ori r9,r10,43691
	ctx.r9.u64 = ctx.r10.u64 | 43691;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addi r7,r10,28484
	ctx.r7.s64 = ctx.r10.s64 + 28484;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r8,2721
	ctx.r8.s64 = 2721;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r6,19944(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + 19944);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lwz r3,19936(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 19936);
	// mulhwu r10,r11,r9
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r9.u32)) >> 32;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r4
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r4.u32);
	// extsh r4,r11
	ctx.r4.s64 = r11.s16;
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// bl 0x820dd8d8
	sub_820DD8D8(ctx, base);
loc_821290A8:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x821292b8
	if (cr6.getEQ()) goto loc_821292B8;
	// cmplwi cr6,r28,110
	cr6.compare<uint32_t>(r28.u32, 110, xer);
	// bgt cr6,0x821292ac
	if (cr6.getGT()) goto loc_821292AC;
	// lis r12,-32237
	r12.s64 = -2112684032;
	// addi r12,r12,-28464
	r12.s64 = r12.s64 + -28464;
	// rlwinm r0,r28,2,0,29
	r0.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r28.u64) {
	case 0:
		goto loc_821292B8;
	case 1:
		goto loc_821292AC;
	case 2:
		goto loc_821292AC;
	case 3:
		goto loc_821292AC;
	case 4:
		goto loc_821292AC;
	case 5:
		goto loc_821292AC;
	case 6:
		goto loc_821292AC;
	case 7:
		goto loc_821292A4;
	case 8:
		goto loc_8212928C;
	case 9:
		goto loc_821292AC;
	case 10:
		goto loc_821292AC;
	case 11:
		goto loc_821292AC;
	case 12:
		goto loc_821292AC;
	case 13:
		goto loc_821292AC;
	case 14:
		goto loc_821292AC;
	case 15:
		goto loc_821292A4;
	case 16:
		goto loc_821292AC;
	case 17:
		goto loc_821292AC;
	case 18:
		goto loc_821292AC;
	case 19:
		goto loc_821292AC;
	case 20:
		goto loc_821292AC;
	case 21:
		goto loc_821292AC;
	case 22:
		goto loc_821292AC;
	case 23:
		goto loc_821292AC;
	case 24:
		goto loc_821292AC;
	case 25:
		goto loc_821292AC;
	case 26:
		goto loc_821292AC;
	case 27:
		goto loc_821292AC;
	case 28:
		goto loc_821292AC;
	case 29:
		goto loc_821292AC;
	case 30:
		goto loc_821292AC;
	case 31:
		goto loc_821292AC;
	case 32:
		goto loc_821292AC;
	case 33:
		goto loc_821292AC;
	case 34:
		goto loc_821292AC;
	case 35:
		goto loc_821292AC;
	case 36:
		goto loc_821292AC;
	case 37:
		goto loc_821292AC;
	case 38:
		goto loc_821292AC;
	case 39:
		goto loc_821292AC;
	case 40:
		goto loc_821292AC;
	case 41:
		goto loc_821292AC;
	case 42:
		goto loc_821292AC;
	case 43:
		goto loc_821292AC;
	case 44:
		goto loc_821292AC;
	case 45:
		goto loc_821292AC;
	case 46:
		goto loc_821292AC;
	case 47:
		goto loc_821292AC;
	case 48:
		goto loc_821292AC;
	case 49:
		goto loc_821292AC;
	case 50:
		goto loc_821292AC;
	case 51:
		goto loc_821292AC;
	case 52:
		goto loc_821292AC;
	case 53:
		goto loc_821292AC;
	case 54:
		goto loc_821292AC;
	case 55:
		goto loc_821292AC;
	case 56:
		goto loc_821292AC;
	case 57:
		goto loc_821292AC;
	case 58:
		goto loc_821292AC;
	case 59:
		goto loc_821292AC;
	case 60:
		goto loc_821292AC;
	case 61:
		goto loc_821292AC;
	case 62:
		goto loc_821292AC;
	case 63:
		goto loc_821292AC;
	case 64:
		goto loc_821292AC;
	case 65:
		goto loc_821292AC;
	case 66:
		goto loc_821292AC;
	case 67:
		goto loc_821292AC;
	case 68:
		goto loc_821292AC;
	case 69:
		goto loc_821292AC;
	case 70:
		goto loc_821292AC;
	case 71:
		goto loc_821292AC;
	case 72:
		goto loc_821292AC;
	case 73:
		goto loc_821292AC;
	case 74:
		goto loc_821292AC;
	case 75:
		goto loc_821292AC;
	case 76:
		goto loc_821292AC;
	case 77:
		goto loc_821292AC;
	case 78:
		goto loc_821292AC;
	case 79:
		goto loc_821292AC;
	case 80:
		goto loc_821292AC;
	case 81:
		goto loc_821292AC;
	case 82:
		goto loc_821292AC;
	case 83:
		goto loc_821292AC;
	case 84:
		goto loc_821292AC;
	case 85:
		goto loc_821292AC;
	case 86:
		goto loc_821292AC;
	case 87:
		goto loc_821292AC;
	case 88:
		goto loc_821292AC;
	case 89:
		goto loc_821292AC;
	case 90:
		goto loc_821292AC;
	case 91:
		goto loc_821292AC;
	case 92:
		goto loc_821292AC;
	case 93:
		goto loc_821292AC;
	case 94:
		goto loc_821292AC;
	case 95:
		goto loc_821292AC;
	case 96:
		goto loc_821292AC;
	case 97:
		goto loc_821292AC;
	case 98:
		goto loc_821292AC;
	case 99:
		goto loc_821292AC;
	case 100:
		goto loc_82129294;
	case 101:
		goto loc_821292AC;
	case 102:
		goto loc_821292AC;
	case 103:
		goto loc_821292AC;
	case 104:
		goto loc_821292AC;
	case 105:
		goto loc_821292AC;
	case 106:
		goto loc_821292AC;
	case 107:
		goto loc_821292AC;
	case 108:
		goto loc_821292AC;
	case 109:
		goto loc_821292AC;
	case 110:
		goto loc_8212929C;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-27976(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27976);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27996(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27996);
	// lwz r16,-28020(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -28020);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27996(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27996);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-28012(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -28012);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-27988(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -27988);
	// lwz r16,-28004(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -28004);
loc_8212928C:
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x821292b0
	goto loc_821292B0;
loc_82129294:
	// li r4,4
	ctx.r4.s64 = 4;
	// b 0x821292b0
	goto loc_821292B0;
loc_8212929C:
	// li r4,5
	ctx.r4.s64 = 5;
	// b 0x821292b0
	goto loc_821292B0;
loc_821292A4:
	// li r4,2
	ctx.r4.s64 = 2;
	// b 0x821292b0
	goto loc_821292B0;
loc_821292AC:
	// li r4,3
	ctx.r4.s64 = 3;
loc_821292B0:
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x820a6610
	sub_820A6610(ctx, base);
loc_821292B8:
	// lbz r10,11(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 11);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// oris r11,r11,32
	r11.u64 = r11.u64 | 2097152;
	// stb r10,11(r31)
	PPC_STORE_U8(r31.u32 + 11, ctx.r10.u8);
	// rlwinm r10,r11,0,27,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821292f8
	if (cr6.getEQ()) goto loc_821292F8;
loc_821292DC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211e0e8
	sub_8211E0E8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed590
	// b 0x823ed17c
	return;
loc_821292F8:
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x821295fc
	if (cr6.getEQ()) goto loc_821295FC;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x821295fc
	if (cr6.getEQ()) goto loc_821295FC;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x820a10a0
	sub_820A10A0(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x8212933c
	if (cr6.getEQ()) goto loc_8212933C;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x8212933c
	if (!cr6.getEQ()) goto loc_8212933C;
	// lis r11,-32056
	r11.s64 = -2100822016;
	// lfs f0,27976(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 27976);
	f0.f64 = double(temp.f32);
	// fmuls f31,f0,f31
	f31.f64 = double(float(f0.f64 * f31.f64));
loc_8212933C:
	// lfs f13,0(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lfs f0,12(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	f0.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// lfs f12,16(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 16);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,4(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 4);
	f0.f64 = double(temp.f32);
	// fsubs f0,f12,f0
	f0.f64 = double(float(ctx.f12.f64 - f0.f64));
	// stfs f0,84(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// lfs f13,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,8(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 8);
	f0.f64 = double(temp.f32);
	// fsubs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 - f0.f64));
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x82126230
	sub_82126230(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f27,f1
	ctx.fpscr.disableFlushMode();
	f27.f64 = ctx.f1.f64;
	// cmpwi cr6,r28,200
	cr6.compare<int32_t>(r28.s32, 200, xer);
	// lfs f12,12900(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12900);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f13.f64 = double(temp.f32);
	// bne cr6,0x8212939c
	if (!cr6.getEQ()) goto loc_8212939C;
	// fmuls f31,f31,f13
	f31.f64 = double(float(f31.f64 * ctx.f13.f64));
	// b 0x821293a8
	goto loc_821293A8;
loc_8212939C:
	// cmpwi cr6,r28,201
	cr6.compare<int32_t>(r28.s32, 201, xer);
	// bne cr6,0x821293ac
	if (!cr6.getEQ()) goto loc_821293AC;
	// fmuls f31,f31,f12
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(f31.f64 * ctx.f12.f64));
loc_821293A8:
	// li r28,15
	r28.s64 = 15;
loc_821293AC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r25,1
	cr6.compare<int32_t>(r25.s32, 1, xer);
	// lfs f28,17872(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17872);
	f28.f64 = double(temp.f32);
	// bne cr6,0x8212944c
	if (!cr6.getEQ()) goto loc_8212944C;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x8212944c
	if (cr6.getEQ()) goto loc_8212944C;
	// cmpwi cr6,r11,14
	cr6.compare<int32_t>(r11.s32, 14, xer);
	// beq cr6,0x8212944c
	if (cr6.getEQ()) goto loc_8212944C;
	// cmpwi cr6,r11,16
	cr6.compare<int32_t>(r11.s32, 16, xer);
	// beq cr6,0x8212944c
	if (cr6.getEQ()) goto loc_8212944C;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x8212944c
	if (cr6.getEQ()) goto loc_8212944C;
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// bne cr6,0x821293f8
	if (!cr6.getEQ()) goto loc_821293F8;
	// lbz r11,89(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 89);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212944c
	if (cr6.getEQ()) goto loc_8212944C;
loc_821293F8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14316(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14316);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f27,f0
	cr6.compare(f27.f64, f0.f64);
	// blt cr6,0x82129448
	if (cr6.getLT()) goto loc_82129448;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28704(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28704);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f27,f0
	cr6.compare(f27.f64, f0.f64);
	// bgt cr6,0x82129448
	if (cr6.getGT()) goto loc_82129448;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,17768(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17768);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f27,f0
	cr6.compare(f27.f64, f0.f64);
	// blt cr6,0x82129440
	if (cr6.getLT()) goto loc_82129440;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28700(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28700);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f27,f0
	cr6.compare(f27.f64, f0.f64);
	// bgt cr6,0x82129440
	if (cr6.getGT()) goto loc_82129440;
	// fmuls f31,f31,f13
	f31.f64 = double(float(f31.f64 * ctx.f13.f64));
	// b 0x8212944c
	goto loc_8212944C;
loc_82129440:
	// fmuls f31,f31,f12
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(f31.f64 * ctx.f12.f64));
	// b 0x8212944c
	goto loc_8212944C;
loc_82129448:
	// fmuls f31,f31,f28
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(f31.f64 * f28.f64));
loc_8212944C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r28,8
	cr6.compare<int32_t>(r28.s32, 8, xer);
	// lfs f29,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f29.f64 = double(temp.f32);
	// bne cr6,0x8212946c
	if (!cr6.getEQ()) goto loc_8212946C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,12468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12468);
	f0.f64 = double(temp.f32);
	// fmuls f31,f31,f0
	f31.f64 = double(float(f31.f64 * f0.f64));
	// b 0x82129498
	goto loc_82129498;
loc_8212946C:
	// cmpwi cr6,r28,15
	cr6.compare<int32_t>(r28.s32, 15, xer);
	// bne cr6,0x82129484
	if (!cr6.getEQ()) goto loc_82129484;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,3060(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f0.f64 = double(temp.f32);
	// fmuls f31,f31,f0
	f31.f64 = double(float(f31.f64 * f0.f64));
	// b 0x82129498
	goto loc_82129498;
loc_82129484:
	// cmpwi cr6,r28,100
	cr6.compare<int32_t>(r28.s32, 100, xer);
	// beq cr6,0x82129494
	if (cr6.getEQ()) goto loc_82129494;
	// cmpwi cr6,r28,110
	cr6.compare<int32_t>(r28.s32, 110, xer);
	// bne cr6,0x82129498
	if (!cr6.getEQ()) goto loc_82129498;
loc_82129494:
	// fmr f31,f29
	ctx.fpscr.disableFlushMode();
	f31.f64 = f29.f64;
loc_82129498:
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f30.f64 = double(temp.f32);
	// bne cr6,0x82129514
	if (!cr6.getEQ()) goto loc_82129514;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821294dc
	if (cr6.getEQ()) goto loc_821294DC;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821294dc
	if (cr6.getEQ()) goto loc_821294DC;
	// bl 0x820ca520
	sub_820CA520(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82129560
	if (cr6.getEQ()) goto loc_82129560;
loc_821294DC:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,24(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// bl 0x820c9b90
	sub_820C9B90(ctx, base);
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// lfs f3,8(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 8);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,0(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 0);
	ctx.f2.f64 = double(temp.f32);
	// fmuls f1,f31,f28
	ctx.f1.f64 = double(float(f31.f64 * f28.f64));
	// bl 0x820bed38
	sub_820BED38(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// b 0x82129560
	goto loc_82129560;
loc_82129514:
	// li r3,76
	ctx.r3.s64 = 76;
	// bl 0x82136fa0
	sub_82136FA0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82129530
	if (!cr6.getEQ()) goto loc_82129530;
	// lfs f0,252(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 252);
	f0.f64 = double(temp.f32);
	// fadds f0,f0,f31
	f0.f64 = double(float(f0.f64 + f31.f64));
	// stfs f0,252(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 252, temp.u32);
loc_82129530:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lfs f0,252(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 252);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f29
	cr6.compare(f0.f64, f29.f64);
	// ori r11,r11,256
	r11.u64 = r11.u64 | 256;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// bge cr6,0x82129560
	if (!cr6.getLT()) goto loc_82129560;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stfs f30,80(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82121e28
	sub_82121E28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821292dc
	if (cr6.getEQ()) goto loc_821292DC;
loc_82129560:
	// cmpwi cr6,r28,110
	cr6.compare<int32_t>(r28.s32, 110, xer);
	// beq cr6,0x821295fc
	if (cr6.getEQ()) goto loc_821295FC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stfs f30,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// bl 0x82121f40
	sub_82121F40(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82121e28
	sub_82121E28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821295e4
	if (cr6.getEQ()) goto loc_821295E4;
	// lfs f1,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f29
	cr6.compare(ctx.f1.f64, f29.f64);
	// blt cr6,0x8212959c
	if (cr6.getLT()) goto loc_8212959C;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
loc_8212959C:
	// li r11,7
	r11.s64 = 7;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// lfs f0,0(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,44(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 44, temp.u32);
	// lfs f0,4(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,48(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
	// lfs f0,8(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 8);
	f0.f64 = double(temp.f32);
	// stw r28,60(r31)
	PPC_STORE_U32(r31.u32 + 60, r28.u32);
	// stfs f0,52(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// stw r25,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r25.u32);
	// stfs f27,56(r31)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r31.u32 + 56, temp.u32);
	// stb r10,8(r31)
	PPC_STORE_U8(r31.u32 + 8, ctx.r10.u8);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed590
	// b 0x823ed17c
	return;
loc_821295E4:
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// fmr f1,f27
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f27.f64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821286b8
	sub_821286B8(ctx, base);
loc_821295FC:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed590
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82129610"))) PPC_WEAK_FUNC(sub_82129610);
PPC_FUNC_IMPL(__imp__sub_82129610) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f29,-80(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -80, f29.u64);
	// stfd f30,-72(r1)
	PPC_STORE_U64(ctx.r1.u32 + -72, f30.u64);
	// stfd f31,-64(r1)
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// fmr f29,f1
	f29.f64 = ctx.f1.f64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// lwz r27,28(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// lwz r29,24(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82129900
	if (cr6.getEQ()) goto loc_82129900;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82129900
	if (cr6.getEQ()) goto loc_82129900;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// oris r11,r11,32
	r11.u64 = r11.u64 | 2097152;
	// rlwinm r10,r11,0,27,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// bne cr6,0x82129900
	if (!cr6.getEQ()) goto loc_82129900;
	// lbz r10,11(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 11);
	// ori r9,r11,256
	ctx.r9.u64 = r11.u64 | 256;
	// lfs f0,252(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 252);
	f0.f64 = double(temp.f32);
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// fadds f0,f29,f0
	f0.f64 = double(float(f29.f64 + f0.f64));
	// stfs f0,252(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 252, temp.u32);
	// stw r9,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r9.u32);
	// stb r11,11(r31)
	PPC_STORE_U8(r31.u32 + 11, r11.u8);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x82129900
	if (!cr6.getGT()) goto loc_82129900;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lfs f0,256(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 256);
	f0.f64 = double(temp.f32);
	// stfs f0,252(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 252, temp.u32);
	// bl 0x82119128
	sub_82119128(ctx, base);
	// lfs f0,20(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	f0.f64 = double(temp.f32);
	// lfs f13,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fmr f30,f1
	f30.f64 = ctx.f1.f64;
	// lfs f12,12(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f2,f0,f13
	ctx.f2.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f11,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f1,f12,f11
	ctx.f1.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lfs f0,12(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f13,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f12,f0,f13
	ctx.f12.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,16(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 16);
	f0.f64 = double(temp.f32);
	// lfs f13,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f11,f0,f13
	ctx.f11.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f10,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f10.f64 = double(temp.f32);
	// lfs f0,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	f0.f64 = double(temp.f32);
	// fsubs f13,f10,f0
	ctx.f13.f64 = double(float(ctx.f10.f64 - f0.f64));
	// fcmpu cr6,f12,f31
	cr6.compare(ctx.f12.f64, f31.f64);
	// bne cr6,0x82129714
	if (!cr6.getEQ()) goto loc_82129714;
	// fcmpu cr6,f11,f31
	cr6.compare(ctx.f11.f64, f31.f64);
	// bne cr6,0x82129714
	if (!cr6.getEQ()) goto loc_82129714;
	// fcmpu cr6,f13,f31
	cr6.compare(ctx.f13.f64, f31.f64);
	// bne cr6,0x82129714
	if (!cr6.getEQ()) goto loc_82129714;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
loc_82129714:
	// fmuls f9,f11,f11
	ctx.fpscr.disableFlushMode();
	ctx.f9.f64 = double(float(ctx.f11.f64 * ctx.f11.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f10,f1,f30
	ctx.f10.f64 = double(float(ctx.f1.f64 - f30.f64));
	// lfs f0,2780(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2780);
	f0.f64 = double(temp.f32);
	// fmuls f0,f29,f0
	f0.f64 = double(float(f29.f64 * f0.f64));
	// fmadds f9,f13,f13,f9
	ctx.f9.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + ctx.f9.f64));
	// fcmpu cr6,f10,f31
	cr6.compare(ctx.f10.f64, f31.f64);
	// fmadds f9,f12,f12,f9
	ctx.f9.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + ctx.f9.f64));
	// fsqrts f9,f9
	ctx.f9.f64 = double(float(sqrt(ctx.f9.f64)));
	// fdivs f0,f0,f9
	f0.f64 = double(float(f0.f64 / ctx.f9.f64));
	// fmuls f12,f0,f12
	ctx.f12.f64 = double(float(f0.f64 * ctx.f12.f64));
	// stfs f12,176(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + 176, temp.u32);
	// fmuls f11,f0,f11
	ctx.f11.f64 = double(float(f0.f64 * ctx.f11.f64));
	// stfs f11,180(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(r31.u32 + 180, temp.u32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// stfs f0,184(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 184, temp.u32);
	// bge cr6,0x82129764
	if (!cr6.getLT()) goto loc_82129764;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fadds f10,f10,f0
	ctx.f10.f64 = double(float(ctx.f10.f64 + f0.f64));
loc_82129764:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// li r29,0
	r29.s64 = 0;
	// lfs f0,28708(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28708);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f10,f0,f13
	f0.f64 = double(float(ctx.f10.f64 * f0.f64 + ctx.f13.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r28,80(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r28,8
	cr6.compare<int32_t>(r28.s32, 8, xer);
	// blt cr6,0x82129798
	if (cr6.getLT()) goto loc_82129798;
	// mr r28,r29
	r28.u64 = r29.u64;
loc_82129798:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r9,-32055
	ctx.r9.s64 = -2100756480;
	// rlwinm r11,r28,3,0,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r9,r9,-30544
	ctx.r9.s64 = ctx.r9.s64 + -30544;
	// rlwinm r10,r3,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r7,r9,4
	ctx.r7.s64 = ctx.r9.s64 + 4;
	// add r10,r10,r30
	ctx.r10.u64 = ctx.r10.u64 + r30.u64;
	// lis r8,-32055
	ctx.r8.s64 = -2100756480;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r8,r8,-31312
	ctx.r8.s64 = ctx.r8.s64 + -31312;
	// lwzx r7,r11,r7
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// lwzx r11,r11,r9
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// divwu r9,r10,r7
	ctx.r9.u32 = ctx.r10.u32 / ctx.r7.u32;
	// twllei r7,0
	// mullw r9,r9,r7
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r7.s32);
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// lbzx r11,r10,r11
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// mulli r11,r11,28
	r11.s64 = r11.s64 * 28;
	// add r30,r11,r8
	r30.u64 = r11.u64 + ctx.r8.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,4
	ctx.r10.s64 = 4;
	// stw r29,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r29.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lfs f0,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r10.u8);
	// lfs f13,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,48(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
	// stb r29,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r29.u8);
	// stfs f0,52(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// stfs f31,56(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 56, temp.u32);
	// lwz r5,4(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// lfs f3,12272(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12272);
	ctx.f3.f64 = double(temp.f32);
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lfs f2,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lfs f1,24(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 24);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// blt cr6,0x82129850
	if (cr6.getLT()) goto loc_82129850;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
loc_82129850:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x82129860
	if (cr6.getEQ()) goto loc_82129860;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82121f40
	sub_82121F40(ctx, base);
loc_82129860:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211f190
	sub_8211F190(ctx, base);
	// bl 0x820a66b0
	sub_820A66B0(ctx, base);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,11,11
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x100000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82129880
	if (cr6.getEQ()) goto loc_82129880;
	// bl 0x820a6688
	sub_820A6688(ctx, base);
loc_82129880:
	// lwz r3,352(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 352);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821298b4
	if (cr6.getEQ()) goto loc_821298B4;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwinm r11,r11,0,18,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821298b4
	if (!cr6.getEQ()) goto loc_821298B4;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
loc_821298B4:
	// lwz r3,356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 356);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821298e8
	if (cr6.getEQ()) goto loc_821298E8;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// rlwinm r11,r11,0,18,18
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821298e8
	if (!cr6.getEQ()) goto loc_821298E8;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
loc_821298E8:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f29,-80(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f30,-72(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
loc_82129900:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f29,-80(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f30,-72(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82129918"))) PPC_WEAK_FUNC(sub_82129918);
PPC_FUNC_IMPL(__imp__sub_82129918) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// li r11,0
	r11.s64 = 0;
	// stw r7,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, ctx.r7.u32);
	// lis r30,-32014
	r30.s64 = -2098069504;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// stb r11,9(r31)
	PPC_STORE_U8(r31.u32 + 9, r11.u8);
	// lwz r11,-6376(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -6376);
	// stw r11,204(r31)
	PPC_STORE_U32(r31.u32 + 204, r11.u32);
	// bl 0x8211aff0
	sub_8211AFF0(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f13,56(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 56);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,60(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 60);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// fmadds f0,f0,f31,f13
	f0.f64 = double(float(f0.f64 * f31.f64 + ctx.f13.f64));
	// stfs f0,56(r27)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r27.u32 + 56, temp.u32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// blt cr6,0x82129b5c
	if (cr6.getLT()) goto loc_82129B5C;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211dd98
	sub_8211DD98(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r7,31
	ctx.r7.s64 = 31;
	// lfs f3,36(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 36);
	ctx.f3.f64 = double(temp.f32);
	// addi r3,r1,212
	ctx.r3.s64 = ctx.r1.s64 + 212;
	// lfs f2,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// lfs f5,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f5.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f4,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f4.f64 = double(temp.f32);
	// bl 0x821126c0
	sub_821126C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x82129b20
	if (!cr6.getLT()) goto loc_82129B20;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r4,212(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	// bl 0x82122998
	sub_82122998(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82129b20
	if (cr6.getEQ()) goto loc_82129B20;
	// lwz r30,24(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,212(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	// addi r28,r30,12
	r28.s64 = r30.s64 + 12;
	// stw r11,24(r30)
	PPC_STORE_U32(r30.u32 + 24, r11.u32);
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,12(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 12, temp.u32);
	// lfs f0,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,16(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 16, temp.u32);
	// lfs f0,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 20, temp.u32);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// bl 0x82119118
	sub_82119118(ctx, base);
	// addi r6,r31,172
	ctx.r6.s64 = r31.s64 + 172;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x82120820
	sub_82120820(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211e6f8
	sub_8211E6F8(ctx, base);
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,14
	cr6.compare<int32_t>(r11.s32, 14, xer);
	// bne cr6,0x82129a74
	if (!cr6.getEQ()) goto loc_82129A74;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r31,52
	ctx.r4.s64 = r31.s64 + 52;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821227e8
	sub_821227E8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r11.u32);
	// bl 0x82122908
	sub_82122908(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821228a0
	sub_821228A0(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821223b8
	sub_821223B8(ctx, base);
	// b 0x82129b50
	goto loc_82129B50;
loc_82129A74:
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// bne cr6,0x82129b50
	if (!cr6.getEQ()) goto loc_82129B50;
	// lbz r11,88(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 88);
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r31
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r31.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82129af8
	if (!cr6.getEQ()) goto loc_82129AF8;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x82129ae4
	if (cr6.getLT()) goto loc_82129AE4;
	// addi r11,r11,15
	r11.s64 = r11.s64 + 15;
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f13,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mulli r10,r11,44
	ctx.r10.s64 = r11.s64 * 44;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfs f12,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f1,f0,f12
	ctx.f1.f64 = double(float(f0.f64 - ctx.f12.f64));
	// fsubs f2,f13,f11
	ctx.f2.f64 = double(float(ctx.f13.f64 - ctx.f11.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x82119178
	sub_82119178(ctx, base);
loc_82129AE4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
	// b 0x82129b50
	goto loc_82129B50;
loc_82129AF8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122748
	sub_82122748(ctx, base);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122450
	sub_82122450(ctx, base);
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x821223b8
	sub_821223B8(ctx, base);
	// b 0x82129b50
	goto loc_82129B50;
loc_82129B20:
	// lfs f0,60(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 60);
	f0.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stfs f0,56(r27)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r27.u32 + 56, temp.u32);
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// cmplwi cr6,r11,14
	cr6.compare<uint32_t>(r11.u32, 14, xer);
	// lwz r11,-6376(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -6376);
	// bne cr6,0x82129b48
	if (!cr6.getEQ()) goto loc_82129B48;
	// stw r11,120(r31)
	PPC_STORE_U32(r31.u32 + 120, r11.u32);
	// bl 0x82122908
	sub_82122908(ctx, base);
	// b 0x82129b50
	goto loc_82129B50;
loc_82129B48:
	// stw r11,156(r31)
	PPC_STORE_U32(r31.u32 + 156, r11.u32);
	// bl 0x821226f0
	sub_821226F0(ctx, base);
loc_82129B50:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211dd98
	sub_8211DD98(ctx, base);
loc_82129B5C:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82129B68"))) PPC_WEAK_FUNC(sub_82129B68);
PPC_FUNC_IMPL(__imp__sub_82129B68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// li r30,0
	r30.s64 = 0;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// lwz r23,24(r31)
	r23.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// cmplwi cr6,r11,15
	cr6.compare<uint32_t>(r11.u32, 15, xer);
	// bne cr6,0x82129bac
	if (!cr6.getEQ()) goto loc_82129BAC;
	// lbz r10,89(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 89);
	// clrlwi r11,r25,24
	r11.u64 = r25.u32 & 0xFF;
	// li r24,1
	r24.s64 = 1;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x82129bb0
	if (cr6.getEQ()) goto loc_82129BB0;
loc_82129BAC:
	// mr r24,r30
	r24.u64 = r30.u64;
loc_82129BB0:
	// addi r3,r23,12
	ctx.r3.s64 = r23.s64 + 12;
	// lwz r4,24(r23)
	ctx.r4.u64 = PPC_LOAD_U32(r23.u32 + 24);
	// bl 0x82122218
	sub_82122218(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82122218
	sub_82122218(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82129d70
	if (cr6.getEQ()) goto loc_82129D70;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82129d70
	if (cr6.getEQ()) goto loc_82129D70;
	// li r6,6
	ctx.r6.s64 = 6;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x821387d0
	sub_821387D0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x82129d70
	if (!cr6.getGT()) goto loc_82129D70;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// li r10,15
	ctx.r10.s64 = 15;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r10.u8);
	// lfs f13,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,44(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 44, temp.u32);
	// lfs f13,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,48(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
	// lfs f13,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// stw r27,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r27.u32);
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// stw r28,60(r31)
	PPC_STORE_U32(r31.u32 + 60, r28.u32);
	// stfs f13,52(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// stb r30,88(r31)
	PPC_STORE_U8(r31.u32 + 88, r30.u8);
	// stfs f0,160(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 160, temp.u32);
	// stb r25,89(r31)
	PPC_STORE_U8(r31.u32 + 89, r25.u8);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,20971
	ctx.r10.s64 = 1374355456;
	// lwz r8,112(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lwz r7,116(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// ori r10,r10,34079
	ctx.r10.u64 = ctx.r10.u64 | 34079;
	// lwz r6,120(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// li r9,-1
	ctx.r9.s64 = -1;
	// lwz r29,124(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// lwz r28,128(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// stb r30,95(r31)
	PPC_STORE_U8(r31.u32 + 95, r30.u8);
	// stw r9,156(r31)
	PPC_STORE_U32(r31.u32 + 156, ctx.r9.u32);
	// lwz r9,132(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// rlwinm r10,r10,27,5,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x7FFFFFF;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// mulli r10,r10,100
	ctx.r10.s64 = ctx.r10.s64 * 100;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,132(r31)
	PPC_STORE_U32(r31.u32 + 132, r11.u32);
	// stw r8,64(r31)
	PPC_STORE_U32(r31.u32 + 64, ctx.r8.u32);
	// stw r7,68(r31)
	PPC_STORE_U32(r31.u32 + 68, ctx.r7.u32);
	// stw r6,72(r31)
	PPC_STORE_U32(r31.u32 + 72, ctx.r6.u32);
	// stw r29,76(r31)
	PPC_STORE_U32(r31.u32 + 76, r29.u32);
	// stw r28,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r28.u32);
	// stw r9,84(r31)
	PPC_STORE_U32(r31.u32 + 84, ctx.r9.u32);
	// bl 0x82122450
	sub_82122450(ctx, base);
	// lfs f0,88(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	f0.f64 = double(temp.f32);
	// addi r29,r31,92
	r29.s64 = r31.s64 + 92;
	// lfs f13,92(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	ctx.f13.f64 = double(temp.f32);
	// stb r30,92(r31)
	PPC_STORE_U8(r31.u32 + 92, r30.u8);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// stfs f0,96(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 96, temp.u32);
	// stb r30,93(r31)
	PPC_STORE_U8(r31.u32 + 93, r30.u8);
	// stfs f13,100(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 100, temp.u32);
	// stb r30,94(r31)
	PPC_STORE_U8(r31.u32 + 94, r30.u8);
	// stfs f12,104(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + 104, temp.u32);
	// sth r30,90(r31)
	PPC_STORE_U16(r31.u32 + 90, r30.u16);
	// stb r30,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r30.u8);
	// bne cr6,0x82129d20
	if (!cr6.getEQ()) goto loc_82129D20;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// lbz r9,15(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 15);
	// lbz r4,89(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 89);
	// addi r10,r11,-28640
	ctx.r10.s64 = r11.s64 + -28640;
	// extsb r11,r9
	r11.s64 = ctx.r9.s8;
	// addi r9,r10,24
	ctx.r9.s64 = ctx.r10.s64 + 24;
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r5,r11,r9
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + ctx.r9.u32);
	// bl 0x82122be0
	sub_82122BE0(ctx, base);
loc_82129D20:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122450
	sub_82122450(ctx, base);
	// lbz r11,1(r23)
	r11.u64 = PPC_LOAD_U8(r23.u32 + 1);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82129d64
	if (!cr6.getEQ()) goto loc_82129D64;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x82122310
	sub_82122310(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82129d64
	if (cr6.getEQ()) goto loc_82129D64;
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821223b8
	sub_821223B8(ctx, base);
loc_82129D64:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x823ed174
	return;
loc_82129D70:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_82129D80"))) PPC_WEAK_FUNC(sub_82129D80);
PPC_FUNC_IMPL(__imp__sub_82129D80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// mr r28,r30
	r28.u64 = r30.u64;
	// lwz r7,0(r27)
	ctx.r7.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// addi r29,r10,928
	r29.s64 = ctx.r10.s64 + 928;
	// lwz r6,24(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82129e3c
	if (cr6.getLT()) goto loc_82129E3C;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r9,24(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// lwz r8,0(r29)
	ctx.r8.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lfs f12,14056(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14056);
	ctx.f12.f64 = double(temp.f32);
loc_82129DCC:
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwzx r11,r11,r8
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// mulli r11,r11,44
	r11.s64 = r11.s64 * 44;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r10,40(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82129e1c
	if (cr6.getEQ()) goto loc_82129E1C;
	// lwz r5,24(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 24);
	// cmplw cr6,r10,r5
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r5.u32, xer);
	// bne cr6,0x82129e1c
	if (!cr6.getEQ()) goto loc_82129E1C;
	// lfs f13,12(r6)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f11,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f11.f64 = double(temp.f32);
	// lfs f13,20(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f11,f13
	ctx.f13.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// blt cr6,0x82129e34
	if (cr6.getLT()) goto loc_82129E34;
loc_82129E1C:
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r7
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x82129dcc
	if (!cr6.getLT()) goto loc_82129DCC;
	// b 0x82129e3c
	goto loc_82129E3C;
loc_82129E34:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bge cr6,0x82129e58
	if (!cr6.getLT()) goto loc_82129E58;
loc_82129E3C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lhz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// mr r28,r30
	r28.u64 = r30.u64;
	// addi r3,r11,28712
	ctx.r3.s64 = r11.s64 + 28712;
	// extsh r11,r10
	r11.s64 = ctx.r10.s16;
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82129E58:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82129e74
	if (cr6.getEQ()) goto loc_82129E74;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820dce70
	sub_820DCE70(ctx, base);
loc_82129E74:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82129e90
	if (cr6.getEQ()) goto loc_82129E90;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820dce70
	sub_820DCE70(ctx, base);
loc_82129E90:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r27,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r27.u32);
	// li r10,10
	ctx.r10.s64 = 10;
	// stw r28,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r28.u32);
	// li r9,1
	ctx.r9.s64 = 1;
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// li r11,14
	r11.s64 = 14;
	// stfs f31,340(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 340, temp.u32);
	// stb r10,14(r31)
	PPC_STORE_U8(r31.u32 + 14, ctx.r10.u8);
	// stfs f31,336(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 336, temp.u32);
	// stw r9,52(r31)
	PPC_STORE_U32(r31.u32 + 52, ctx.r9.u32);
	// stfs f31,344(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 344, temp.u32);
	// stfs f31,348(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 348, temp.u32);
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r28,r3,31
	r28.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r9,52(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// lis r10,20971
	ctx.r10.s64 = 1374355456;
	// stfs f31,124(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 124, temp.u32);
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// stb r30,59(r31)
	PPC_STORE_U8(r31.u32 + 59, r30.u8);
	// ori r10,r10,34079
	ctx.r10.u64 = ctx.r10.u64 | 34079;
	// li r5,0
	ctx.r5.s64 = 0;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// rlwinm r10,r10,27,5,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x7FFFFFF;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mulli r10,r10,100
	ctx.r10.s64 = ctx.r10.s64 * 100;
	// stw r9,120(r31)
	PPC_STORE_U32(r31.u32 + 120, ctx.r9.u32);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,96(r31)
	PPC_STORE_U32(r31.u32 + 96, r11.u32);
	// bl 0x821227e8
	sub_821227E8(ctx, base);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r28,r31,56
	r28.s64 = r31.s64 + 56;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// mulli r10,r11,44
	ctx.r10.s64 = r11.s64 * 44;
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// stb r30,56(r31)
	PPC_STORE_U8(r31.u32 + 56, r30.u8);
	// stb r30,57(r31)
	PPC_STORE_U8(r31.u32 + 57, r30.u8);
	// stb r30,58(r31)
	PPC_STORE_U8(r31.u32 + 58, r30.u8);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfs f0,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,60(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 60, temp.u32);
	// lfs f0,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,64(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 64, temp.u32);
	// lfs f0,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	f0.f64 = double(temp.f32);
	// stb r30,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r30.u8);
	// stfs f0,68(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 68, temp.u32);
	// bl 0x82122d28
	sub_82122D28(ctx, base);
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x821227e8
	sub_821227E8(ctx, base);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r9,24(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// mulli r10,r11,44
	ctx.r10.s64 = r11.s64 * 44;
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// add r30,r10,r11
	r30.u64 = ctx.r10.u64 + r11.u64;
	// lbz r11,1(r9)
	r11.u64 = PPC_LOAD_U8(ctx.r9.u32 + 1);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82129ff8
	if (!cr6.getEQ()) goto loc_82129FF8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r5,40(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 40);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122310
	sub_82122310(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82129ff8
	if (cr6.getEQ()) goto loc_82129FF8;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821223b8
	sub_821223B8(ctx, base);
loc_82129FF8:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8212A008"))) PPC_WEAK_FUNC(sub_8212A008);
PPC_FUNC_IMPL(__imp__sub_8212A008) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// addi r12,r1,-40
	r12.s64 = ctx.r1.s64 + -40;
	// bl 0x823ed544
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r30,24(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x82119128
	sub_82119128(ctx, base);
	// lfs f0,12(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f13,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// fsubs f30,f0,f13
	f30.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	f0.f64 = double(temp.f32);
	// lfs f12,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f29,f12,f0
	f29.f64 = double(float(ctx.f12.f64 - f0.f64));
	// lfs f13,16(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,16(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 16);
	f0.f64 = double(temp.f32);
	// fsubs f28,f0,f13
	f28.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f31,f1,f31
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(ctx.f1.f64 - f31.f64));
	// li r30,0
	r30.s64 = 0;
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f27,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f27.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// bge cr6,0x8212a090
	if (!cr6.getLT()) goto loc_8212A090;
	// fadds f31,f31,f27
	f31.f64 = double(float(f31.f64 + f27.f64));
loc_8212A090:
	// fmuls f0,f28,f28
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f28.f64 * f28.f64));
	// lwz r11,212(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 212);
	// lis r28,-32014
	r28.s64 = -2098069504;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// fmadds f0,f29,f29,f0
	f0.f64 = double(float(f29.f64 * f29.f64 + f0.f64));
	// fmadds f30,f30,f30,f0
	f30.f64 = double(float(f30.f64 * f30.f64 + f0.f64));
	// ble cr6,0x8212a0bc
	if (!cr6.getGT()) goto loc_8212A0BC;
	// lwz r10,-6376(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -6376);
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// cmpwi cr6,r11,600
	cr6.compare<int32_t>(r11.s32, 600, xer);
	// blt cr6,0x8212a1ec
	if (cr6.getLT()) goto loc_8212A1EC;
loc_8212A0BC:
	// lfs f0,208(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 208);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f0,f0
	ctx.f13.f64 = double(float(f0.f64 * f0.f64));
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,14056(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14056);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,28776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 28776);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fcmpu cr6,f30,f0
	cr6.compare(f30.f64, f0.f64);
	// lfs f0,28772(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28772);
	f0.f64 = double(temp.f32);
	// bge cr6,0x8212a0f8
	if (!cr6.getLT()) goto loc_8212A0F8;
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// blt cr6,0x8212a118
	if (cr6.getLT()) goto loc_8212A118;
	// fcmpu cr6,f31,f12
	cr6.compare(f31.f64, ctx.f12.f64);
	// bgt cr6,0x8212a118
	if (cr6.getGT()) goto loc_8212A118;
loc_8212A0F8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,17764(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17764);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f30,f13
	cr6.compare(f30.f64, ctx.f13.f64);
	// bge cr6,0x8212a230
	if (!cr6.getLT()) goto loc_8212A230;
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// blt cr6,0x8212a118
	if (cr6.getLT()) goto loc_8212A118;
	// fcmpu cr6,f31,f12
	cr6.compare(f31.f64, ctx.f12.f64);
	// ble cr6,0x8212a230
	if (!cr6.getGT()) goto loc_8212A230;
loc_8212A118:
	// bl 0x82117918
	sub_82117918(ctx, base);
	// fcmpu cr6,f30,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f30.f64, ctx.f1.f64);
	// bge cr6,0x8212a230
	if (!cr6.getLT()) goto loc_8212A230;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsqrts f13,f30
	ctx.f13.f64 = double(float(sqrt(f30.f64)));
	// addi r10,r1,84
	ctx.r10.s64 = ctx.r1.s64 + 84;
	// lfs f12,14156(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14156);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f31,f12
	cr6.compare(f31.f64, ctx.f12.f64);
	// lfs f0,28768(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28768);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// ble cr6,0x8212a1a8
	if (!cr6.getGT()) goto loc_8212A1A8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28764(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28764);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// bge cr6,0x8212a1a8
	if (!cr6.getLT()) goto loc_8212A1A8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f0,f31
	f0.f64 = f31.f64;
	// lfs f13,14032(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14032);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f31,f13
	cr6.compare(f31.f64, ctx.f13.f64);
	// ble cr6,0x8212a178
	if (!cr6.getGT()) goto loc_8212A178;
	// fsubs f0,f27,f31
	f0.f64 = double(float(f27.f64 - f31.f64));
loc_8212A178:
	// fsubs f13,f0,f12
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(f0.f64 - ctx.f12.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f0,28760(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28760);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// subfic r11,r11,1
	xer.ca = r11.u32 <= 1;
	r11.s64 = 1 - r11.s64;
	// mullw r4,r11,r10
	ctx.r4.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// b 0x8212a1ac
	goto loc_8212A1AC;
loc_8212A1A8:
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
loc_8212A1AC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821211c0
	sub_821211C0(ctx, base);
	// addi r30,r3,1
	r30.s64 = ctx.r3.s64 + 1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// twllei r30,0
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// divwu r10,r11,r30
	ctx.r10.u32 = r11.u32 / r30.u32;
	// mullw r10,r10,r30
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r30.s32);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212a234
	if (cr6.getEQ()) goto loc_8212A234;
loc_8212A1EC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122e28
	sub_82122E28(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x8212a230
	if (cr6.getEQ()) goto loc_8212A230;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lwz r10,-6376(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + -6376);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// stw r10,212(r31)
	PPC_STORE_U32(r31.u32 + 212, ctx.r10.u32);
	// lfs f0,12(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,216(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 216, temp.u32);
	// lfs f0,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,220(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 220, temp.u32);
	// lfs f0,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,224(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 224, temp.u32);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,228(r31)
	PPC_STORE_U32(r31.u32 + 228, r11.u32);
loc_8212A230:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_8212A234:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// addi r12,r1,-40
	r12.s64 = ctx.r1.s64 + -40;
	// bl 0x823ed590
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8212A248"))) PPC_WEAK_FUNC(sub_8212A248);
PPC_FUNC_IMPL(__imp__sub_8212A248) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212a3b0
	if (cr6.getEQ()) goto loc_8212A3B0;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212a3b0
	if (cr6.getEQ()) goto loc_8212A3B0;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212a3b0
	if (cr6.getEQ()) goto loc_8212A3B0;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212a294
	if (!cr6.getEQ()) goto loc_8212A294;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212a3b0
	if (cr6.getEQ()) goto loc_8212A3B0;
loc_8212A294:
	// lwz r30,24(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x82119128
	sub_82119128(ctx, base);
	// lfs f0,12(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f13,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// fsubs f1,f0,f13
	ctx.f1.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f12,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	f0.f64 = double(temp.f32);
	// fsubs f2,f12,f0
	ctx.f2.f64 = double(float(ctx.f12.f64 - f0.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fsubs f0,f1,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64 - f31.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x8212a2ec
	if (!cr6.getLT()) goto loc_8212A2EC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
loc_8212A2EC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,14156(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14156);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x8212a32c
	if (cr6.getLT()) goto loc_8212A32C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,28764(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28764);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x8212a32c
	if (cr6.getGT()) goto loc_8212A32C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,17932(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17932);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x8212a3b0
	if (!cr6.getGT()) goto loc_8212A3B0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,17928(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17928);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x8212a3b0
	if (!cr6.getLT()) goto loc_8212A3B0;
loc_8212A32C:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// not r10,r3
	ctx.r10.u64 = ~ctx.r3.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// clrlwi r30,r10,31
	r30.u64 = ctx.r10.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lfs f31,2944(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x82123690
	sub_82123690(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x8212a378
	if (cr6.getEQ()) goto loc_8212A378;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x821280c8
	sub_821280C8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_8212A378:
	// cntlzw r11,r30
	r11.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// rlwinm r30,r11,27,31,31
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82123690
	sub_82123690(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212a3b0
	if (cr6.getEQ()) goto loc_8212A3B0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821280c8
	sub_821280C8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_8212A3B0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8212A3C0"))) PPC_WEAK_FUNC(sub_8212A3C0);
PPC_FUNC_IMPL(__imp__sub_8212A3C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212a528
	if (cr6.getEQ()) goto loc_8212A528;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212a528
	if (cr6.getEQ()) goto loc_8212A528;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212a528
	if (cr6.getEQ()) goto loc_8212A528;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212a40c
	if (!cr6.getEQ()) goto loc_8212A40C;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212a528
	if (cr6.getEQ()) goto loc_8212A528;
loc_8212A40C:
	// lwz r30,24(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x82119128
	sub_82119128(ctx, base);
	// lfs f0,12(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f13,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// fsubs f1,f0,f13
	ctx.f1.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f12,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	f0.f64 = double(temp.f32);
	// fsubs f2,f12,f0
	ctx.f2.f64 = double(float(ctx.f12.f64 - f0.f64));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fsubs f0,f1,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64 - f31.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x8212a464
	if (!cr6.getLT()) goto loc_8212A464;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	ctx.f13.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
loc_8212A464:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,14156(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14156);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// blt cr6,0x8212a4a4
	if (cr6.getLT()) goto loc_8212A4A4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,28764(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28764);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bgt cr6,0x8212a4a4
	if (cr6.getGT()) goto loc_8212A4A4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,17932(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17932);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x8212a528
	if (!cr6.getGT()) goto loc_8212A528;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,17928(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17928);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x8212a528
	if (!cr6.getLT()) goto loc_8212A528;
loc_8212A4A4:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// not r10,r3
	ctx.r10.u64 = ~ctx.r3.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// clrlwi r30,r10,31
	r30.u64 = ctx.r10.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lfs f31,2940(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2940);
	f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x82123690
	sub_82123690(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x8212a4f0
	if (cr6.getEQ()) goto loc_8212A4F0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82128320
	sub_82128320(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_8212A4F0:
	// cntlzw r11,r30
	r11.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// rlwinm r30,r11,27,31,31
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82123690
	sub_82123690(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212a528
	if (cr6.getEQ()) goto loc_8212A528;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82128320
	sub_82128320(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_8212A528:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8212A538"))) PPC_WEAK_FUNC(sub_8212A538);
PPC_FUNC_IMPL(__imp__sub_8212A538) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f29.u64);
	// stfd f30,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, f30.u64);
	// stfd f31,-40(r1)
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lbz r11,7(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212a6b8
	if (cr6.getEQ()) goto loc_8212A6B8;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212a6b8
	if (cr6.getEQ()) goto loc_8212A6B8;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212a6b8
	if (cr6.getEQ()) goto loc_8212A6B8;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212a58c
	if (!cr6.getEQ()) goto loc_8212A58C;
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212a6b8
	if (cr6.getEQ()) goto loc_8212A6B8;
loc_8212A58C:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,200(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 200);
	// lwz r11,-6376(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6376);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cmpwi cr6,r11,180
	cr6.compare<int32_t>(r11.s32, 180, xer);
	// ble cr6,0x8212a6b8
	if (!cr6.getGT()) goto loc_8212A6B8;
	// lwz r31,24(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,14028(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14028);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lfs f13,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmadds f13,f12,f0,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// lfs f0,2940(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2940);
	f0.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// not r11,r3
	r11.u64 = ~ctx.r3.u64;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// clrlwi r4,r11,31
	ctx.r4.u64 = r11.u32 & 0x1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821234d0
	sub_821234D0(ctx, base);
	// lfs f0,12(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f30,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	f30.f64 = double(temp.f32);
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// lfs f13,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f30,f31,f0
	f0.f64 = double(float(f30.f64 * f31.f64 + f0.f64));
	// lfs f29,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	f29.f64 = double(temp.f32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f12,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f0,f29,f31,f13
	f0.f64 = double(float(f29.f64 * f31.f64 + ctx.f13.f64));
	// stfs f12,84(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x82123128
	sub_82123128(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bne cr6,0x8212a698
	if (!cr6.getEQ()) goto loc_8212A698;
	// fneg f0,f30
	ctx.fpscr.disableFlushMode();
	f0.u64 = f30.u64 ^ 0x8000000000000000;
	// lfs f12,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// fneg f13,f29
	ctx.f13.u64 = f29.u64 ^ 0x8000000000000000;
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lfs f11,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f11.f64 = double(temp.f32);
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f10,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	ctx.f10.f64 = double(temp.f32);
	// stfs f13,104(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// stfs f10,84(r1)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// fmadds f0,f0,f31,f12
	f0.f64 = double(float(f0.f64 * f31.f64 + ctx.f12.f64));
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// fmadds f0,f13,f31,f11
	f0.f64 = double(float(ctx.f13.f64 * f31.f64 + ctx.f11.f64));
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x82123128
	sub_82123128(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212a6b8
	if (cr6.getEQ()) goto loc_8212A6B8;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
loc_8212A698:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82128540
	sub_82128540(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f30,-48(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_8212A6B8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f30,-48(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8212A6D0"))) PPC_WEAK_FUNC(sub_8212A6D0);
PPC_FUNC_IMPL(__imp__sub_8212A6D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212a750
	if (cr6.getEQ()) goto loc_8212A750;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212a750
	if (cr6.getEQ()) goto loc_8212A750;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212a750
	if (cr6.getEQ()) goto loc_8212A750;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212a720
	if (!cr6.getEQ()) goto loc_8212A720;
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r10,r10,0,22,22
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8212a750
	if (cr6.getEQ()) goto loc_8212A750;
loc_8212A720:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x8212a730
	if (cr6.getEQ()) goto loc_8212A730;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
loc_8212A730:
	// li r11,0
	r11.s64 = 0;
	// stw r30,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r30.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r29,52(r31)
	PPC_STORE_U32(r31.u32 + 52, r29.u32);
	// stw r11,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r11.u32);
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8212A750:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8212A760"))) PPC_WEAK_FUNC(sub_8212A760);
PPC_FUNC_IMPL(__imp__sub_8212A760) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// blt cr6,0x8212a8d8
	if (cr6.getLT()) goto loc_8212A8D8;
	// lbz r11,7(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212a8d8
	if (cr6.getEQ()) goto loc_8212A8D8;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212a8d8
	if (cr6.getEQ()) goto loc_8212A8D8;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212a8d8
	if (cr6.getEQ()) goto loc_8212A8D8;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212a7b4
	if (!cr6.getEQ()) goto loc_8212A7B4;
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212a8d8
	if (cr6.getEQ()) goto loc_8212A8D8;
loc_8212A7B4:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11200);
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bge cr6,0x8212a8d8
	if (!cr6.getLT()) goto loc_8212A8D8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821263d8
	sub_821263D8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,10000
	cr6.compare<int32_t>(r31.s32, 10000, xer);
	// bge cr6,0x8212a7ec
	if (!cr6.getLT()) goto loc_8212A7EC;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// mulli r10,r31,44
	ctx.r10.s64 = r31.s64 * 44;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// b 0x8212a800
	goto loc_8212A800;
loc_8212A7EC:
	// addi r11,r31,-10000
	r11.s64 = r31.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
loc_8212A800:
	// add r4,r10,r11
	ctx.r4.u64 = ctx.r10.u64 + r11.u64;
	// lwz r5,40(r4)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r4.u32 + 40);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x8212a8d8
	if (cr6.getEQ()) goto loc_8212A8D8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,16(r4)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 16);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f12,f0
	cr6.compare(ctx.f12.f64, f0.f64);
	// bge cr6,0x8212a8c0
	if (!cr6.getLT()) goto loc_8212A8C0;
	// lfs f0,36(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 36);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f11,12(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 12);
	ctx.f11.f64 = double(temp.f32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f10,20(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 20);
	ctx.f10.f64 = double(temp.f32);
	// fmuls f11,f11,f0
	ctx.f11.f64 = double(float(ctx.f11.f64 * f0.f64));
	// fmuls f10,f10,f0
	ctx.f10.f64 = double(float(ctx.f10.f64 * f0.f64));
	// lfs f1,0(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// fmuls f0,f0,f12
	f0.f64 = double(float(f0.f64 * ctx.f12.f64));
	// lfs f2,8(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// lfs f13,12884(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12884);
	ctx.f13.f64 = double(temp.f32);
	// stw r5,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r5.u32);
	// lfs f9,4(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	ctx.f9.f64 = double(temp.f32);
	// fmadds f3,f11,f13,f1
	ctx.f3.f64 = double(float(ctx.f11.f64 * ctx.f13.f64 + ctx.f1.f64));
	// stfs f3,88(r1)
	temp.f32 = float(ctx.f3.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// fmadds f4,f10,f13,f2
	ctx.f4.f64 = double(float(ctx.f10.f64 * ctx.f13.f64 + ctx.f2.f64));
	// stfs f4,96(r1)
	temp.f32 = float(ctx.f4.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// fmadds f0,f0,f13,f9
	f0.f64 = double(float(f0.f64 * ctx.f13.f64 + ctx.f9.f64));
	// stfs f0,92(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// bl 0x8210f7c8
	sub_8210F7C8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212a8a4
	if (cr6.getEQ()) goto loc_8212A8A4;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82129b68
	sub_82129B68(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212a8d8
	if (cr6.getEQ()) goto loc_8212A8D8;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed18c
	return;
loc_8212A8A4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,28780
	ctx.r3.s64 = r11.s64 + 28780;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed18c
	return;
loc_8212A8C0:
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82129b68
	sub_82129B68(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// bne cr6,0x8212a8dc
	if (!cr6.getEQ()) goto loc_8212A8DC;
loc_8212A8D8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8212A8DC:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8212A8E8"))) PPC_WEAK_FUNC(sub_8212A8E8);
PPC_FUNC_IMPL(__imp__sub_8212A8E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x8212a94c
	if (cr6.getEQ()) goto loc_8212A94C;
	// lbz r11,7(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212a94c
	if (cr6.getEQ()) goto loc_8212A94C;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212a94c
	if (cr6.getEQ()) goto loc_8212A94C;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212a94c
	if (cr6.getEQ()) goto loc_8212A94C;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212a934
	if (!cr6.getEQ()) goto loc_8212A934;
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212a94c
	if (cr6.getEQ()) goto loc_8212A94C;
loc_8212A934:
	// bl 0x82129d80
	sub_82129D80(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8212A94C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212A960"))) PPC_WEAK_FUNC(sub_8212A960);
PPC_FUNC_IMPL(__imp__sub_8212A960) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8212a9ac
	if (!cr6.getEQ()) goto loc_8212A9AC;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212a9ac
	if (cr6.getLT()) goto loc_8212A9AC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
loc_8212A9AC:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// addi r11,r11,14384
	r11.s64 = r11.s64 + 14384;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// bne cr6,0x8212aa60
	if (!cr6.getEQ()) goto loc_8212AA60;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28464(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28464);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// blt cr6,0x8212aa60
	if (cr6.getLT()) goto loc_8212AA60;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,6,6
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212aa60
	if (!cr6.getEQ()) goto loc_8212AA60;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-6372(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6372);
	// srawi r10,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r10.s64 = r11.s32 >> 1;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8212aa54
	if (!cr0.getEQ()) goto loc_8212AA54;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82126378
	sub_82126378(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15164(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15164);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x8212aa54
	if (!cr6.getLT()) goto loc_8212AA54;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,4642
	ctx.r8.s64 = 4642;
	// addi r7,r11,28484
	ctx.r7.s64 = r11.s64 + 28484;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,257
	ctx.r4.s64 = 257;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// bl 0x820dd8d8
	sub_820DD8D8(ctx, base);
loc_8212AA54:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// oris r11,r11,512
	r11.u64 = r11.u64 | 33554432;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
loc_8212AA60:
	// lbz r11,8(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x8212aab4
	if (cr6.getGT()) goto loc_8212AAB4;
	// lwz r11,56(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212aab4
	if (cr6.getEQ()) goto loc_8212AAB4;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-13108
	ctx.r10.s64 = -859045888;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// ori r10,r10,52429
	ctx.r10.u64 = ctx.r10.u64 | 52429;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,14
	r11.s64 = r11.s64 + 14;
	// stb r11,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r11.u8);
loc_8212AAB4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212AAD0"))) PPC_WEAK_FUNC(sub_8212AAD0);
PPC_FUNC_IMPL(__imp__sub_8212AAD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// addi r12,r1,-56
	r12.s64 = ctx.r1.s64 + -56;
	// bl 0x823ed548
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,123
	r11.s64 = 123;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r27,-31994
	r27.s64 = -2096758784;
	// lis r31,-31994
	r31.s64 = -2096758784;
	// sth r11,96(r1)
	PPC_STORE_U16(ctx.r1.u32 + 96, r11.u16);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,48(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 48);
	f0.f64 = double(temp.f32);
	// lwz r26,28(r30)
	r26.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// lfs f30,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	f30.f64 = double(temp.f32);
	// lis r28,-31994
	r28.s64 = -2096758784;
	// lfs f31,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// li r11,124
	r11.s64 = 124;
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// sth r11,98(r1)
	PPC_STORE_U16(ctx.r1.u32 + 98, r11.u16);
	// li r11,125
	r11.s64 = 125;
	// sth r11,100(r1)
	PPC_STORE_U16(ctx.r1.u32 + 100, r11.u16);
	// li r11,126
	r11.s64 = 126;
	// sth r11,102(r1)
	PPC_STORE_U16(ctx.r1.u32 + 102, r11.u16);
	// li r11,127
	r11.s64 = 127;
	// sth r11,104(r1)
	PPC_STORE_U16(ctx.r1.u32 + 104, r11.u16);
	// li r11,128
	r11.s64 = 128;
	// sth r11,106(r1)
	PPC_STORE_U16(ctx.r1.u32 + 106, r11.u16);
	// li r11,129
	r11.s64 = 129;
	// sth r11,108(r1)
	PPC_STORE_U16(ctx.r1.u32 + 108, r11.u16);
	// li r11,130
	r11.s64 = 130;
	// sth r11,110(r1)
	PPC_STORE_U16(ctx.r1.u32 + 110, r11.u16);
	// li r11,131
	r11.s64 = 131;
	// sth r11,112(r1)
	PPC_STORE_U16(ctx.r1.u32 + 112, r11.u16);
	// li r11,132
	r11.s64 = 132;
	// sth r11,114(r1)
	PPC_STORE_U16(ctx.r1.u32 + 114, r11.u16);
	// li r11,133
	r11.s64 = 133;
	// sth r11,116(r1)
	PPC_STORE_U16(ctx.r1.u32 + 116, r11.u16);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r29,r11,28484
	r29.s64 = r11.s64 + 28484;
	// blt cr6,0x8212abe0
	if (cr6.getLT()) goto loc_8212ABE0;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// lfs f0,48(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 48);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// blt cr6,0x8212abe0
	if (cr6.getLT()) goto loc_8212ABE0;
	// lwz r11,11260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 11260);
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// li r8,4776
	ctx.r8.s64 = 4776;
	// lwz r6,19944(r28)
	ctx.r6.u64 = PPC_LOAD_U32(r28.u32 + 19944);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r3,19936(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 19936);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// lhzx r11,r11,r10
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
	// extsh r4,r11
	ctx.r4.s64 = r11.s16;
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r11,24(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// bl 0x820dd8d8
	sub_820DD8D8(ctx, base);
	// lwz r11,11260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 11260);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// stw r11,11260(r31)
	PPC_STORE_U32(r31.u32 + 11260, r11.u32);
	// blt cr6,0x8212abdc
	if (cr6.getLT()) goto loc_8212ABDC;
	// li r11,0
	r11.s64 = 0;
	// stw r11,11260(r31)
	PPC_STORE_U32(r31.u32 + 11260, r11.u32);
loc_8212ABDC:
	// stfs f30,48(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r30.u32 + 48, temp.u32);
loc_8212ABE0:
	// lfs f0,52(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 52);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// blt cr6,0x8212ac58
	if (cr6.getLT()) goto loc_8212AC58;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// lfs f0,52(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 52);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// blt cr6,0x8212ac58
	if (cr6.getLT()) goto loc_8212AC58;
	// lwz r11,11260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 11260);
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// li r8,4788
	ctx.r8.s64 = 4788;
	// lwz r6,19944(r28)
	ctx.r6.u64 = PPC_LOAD_U32(r28.u32 + 19944);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r3,19936(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 19936);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// lhzx r11,r11,r10
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
	// extsh r4,r11
	ctx.r4.s64 = r11.s16;
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r11,24(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// bl 0x820dd8d8
	sub_820DD8D8(ctx, base);
	// lwz r11,11260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 11260);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// stw r11,11260(r31)
	PPC_STORE_U32(r31.u32 + 11260, r11.u32);
	// blt cr6,0x8212ac54
	if (cr6.getLT()) goto loc_8212AC54;
	// li r11,0
	r11.s64 = 0;
	// stw r11,11260(r31)
	PPC_STORE_U32(r31.u32 + 11260, r11.u32);
loc_8212AC54:
	// stfs f30,52(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r30.u32 + 52, temp.u32);
loc_8212AC58:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212ad38
	if (cr6.getLT()) goto loc_8212AD38;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// addi r11,r11,-11756
	r11.s64 = r11.s64 + -11756;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// bne cr6,0x8212ad30
	if (!cr6.getEQ()) goto loc_8212AD30;
	// lis r11,-32056
	r11.s64 = -2100822016;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// addi r31,r11,-11116
	r31.s64 = r11.s64 + -11116;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lhz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// lfs f29,14016(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14016);
	f29.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfs f31,2960(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2960);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f30.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
	// fsubs f28,f0,f31
	f28.f64 = double(float(f0.f64 - f31.f64));
	// bl 0x8211af88
	sub_8211AF88(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// rlwinm r5,r11,27,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// fmr f3,f28
	ctx.f3.f64 = f28.f64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lhz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lfs f1,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
	// fsubs f2,f0,f31
	ctx.f2.f64 = double(float(f0.f64 - f31.f64));
	// bl 0x8211b240
	sub_8211B240(ctx, base);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// addi r12,r1,-56
	r12.s64 = ctx.r1.s64 + -56;
	// bl 0x823ed594
	// b 0x823ed180
	return;
loc_8212AD30:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82128078
	sub_82128078(ctx, base);
loc_8212AD38:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82123c90
	sub_82123C90(ctx, base);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// addi r12,r1,-56
	r12.s64 = ctx.r1.s64 + -56;
	// bl 0x823ed594
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8212AD58"))) PPC_WEAK_FUNC(sub_8212AD58);
PPC_FUNC_IMPL(__imp__sub_8212AD58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212ae00
	if (cr6.getLT()) goto loc_8212AE00;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r10,-6376(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6376);
	// stw r10,212(r31)
	PPC_STORE_U32(r31.u32 + 212, ctx.r10.u32);
	// lfs f0,12(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,216(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 216, temp.u32);
	// lfs f0,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,220(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 220, temp.u32);
	// lfs f0,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,224(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 224, temp.u32);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,228(r31)
	PPC_STORE_U32(r31.u32 + 228, r11.u32);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// addi r11,r11,-11756
	r11.s64 = r11.s64 + -11756;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bne cr6,0x8212adf4
	if (!cr6.getEQ()) goto loc_8212ADF4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,16152(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16152);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82127718
	sub_82127718(ctx, base);
	// b 0x8212adf8
	goto loc_8212ADF8;
loc_8212ADF4:
	// bl 0x82127808
	sub_82127808(ctx, base);
loc_8212ADF8:
	// li r11,1
	r11.s64 = 1;
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
loc_8212AE00:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82123c90
	sub_82123C90(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212AE28"))) PPC_WEAK_FUNC(sub_8212AE28);
PPC_FUNC_IMPL(__imp__sub_8212AE28) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212ae94
	if (cr6.getLT()) goto loc_8212AE94;
	// lfs f0,44(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 44);
	f0.f64 = double(temp.f32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f0,48(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 48);
	f0.f64 = double(temp.f32);
	// lwz r7,64(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// stfs f0,84(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// lwz r6,60(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// lfs f0,52(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 52);
	f0.f64 = double(temp.f32);
	// lfs f1,56(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 56);
	ctx.f1.f64 = double(temp.f32);
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x821286b8
	sub_821286B8(ctx, base);
loc_8212AE94:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212AEB0"))) PPC_WEAK_FUNC(sub_8212AEB0);
PPC_FUNC_IMPL(__imp__sub_8212AEB0) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212af38
	if (cr6.getLT()) goto loc_8212AF38;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f1,2952(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2952);
	ctx.f1.f64 = double(temp.f32);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r10,-6376(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6376);
	// stw r10,212(r31)
	PPC_STORE_U32(r31.u32 + 212, ctx.r10.u32);
	// lfs f0,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,216(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 216, temp.u32);
	// lfs f0,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,220(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 220, temp.u32);
	// lfs f0,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,224(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 224, temp.u32);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,228(r31)
	PPC_STORE_U32(r31.u32 + 228, r11.u32);
	// bl 0x82127718
	sub_82127718(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
loc_8212AF38:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212AF58"))) PPC_WEAK_FUNC(sub_8212AF58);
PPC_FUNC_IMPL(__imp__sub_8212AF58) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212afd8
	if (cr6.getLT()) goto loc_8212AFD8;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r10,-6376(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6376);
	// stw r10,212(r31)
	PPC_STORE_U32(r31.u32 + 212, ctx.r10.u32);
	// lfs f0,12(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,216(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 216, temp.u32);
	// lfs f0,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,220(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 220, temp.u32);
	// lfs f0,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,224(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 224, temp.u32);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,228(r31)
	PPC_STORE_U32(r31.u32 + 228, r11.u32);
	// bl 0x82127808
	sub_82127808(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
loc_8212AFD8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212AFF8"))) PPC_WEAK_FUNC(sub_8212AFF8);
PPC_FUNC_IMPL(__imp__sub_8212AFF8) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r31,28(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212b03c
	if (cr6.getLT()) goto loc_8212B03C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
loc_8212B03C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212B058"))) PPC_WEAK_FUNC(sub_8212B058);
PPC_FUNC_IMPL(__imp__sub_8212B058) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r31,28(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,13960(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13960);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// blt cr6,0x8212b094
	if (cr6.getLT()) goto loc_8212B094;
	// bl 0x820df4e0
	sub_820DF4E0(ctx, base);
loc_8212B094:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212b0c0
	if (cr6.getLT()) goto loc_8212B0C0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,64(r30)
	PPC_STORE_U32(r30.u32 + 64, r11.u32);
loc_8212B0C0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212B0E0"))) PPC_WEAK_FUNC(sub_8212B0E0);
PPC_FUNC_IMPL(__imp__sub_8212B0E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r31,28(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212b170
	if (cr6.getLT()) goto loc_8212B170;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// addi r11,r11,-16000
	r11.s64 = r11.s64 + -16000;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// bne cr6,0x8212b148
	if (!cr6.getEQ()) goto loc_8212B148;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_8212B138:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,16152(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16152);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82127718
	sub_82127718(ctx, base);
	// b 0x8212b168
	goto loc_8212B168;
loc_8212B148:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// addi r11,r11,-9440
	r11.s64 = r11.s64 + -9440;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// beq cr6,0x8212b138
	if (cr6.getEQ()) goto loc_8212B138;
	// bl 0x82127808
	sub_82127808(ctx, base);
loc_8212B168:
	// li r11,1
	r11.s64 = 1;
	// stw r11,64(r30)
	PPC_STORE_U32(r30.u32 + 64, r11.u32);
loc_8212B170:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212B190"))) PPC_WEAK_FUNC(sub_8212B190);
PPC_FUNC_IMPL(__imp__sub_8212B190) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f30.u64);
	// stfd f31,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r31,28(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,28812(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28812);
	f30.f64 = double(temp.f32);
	// fcmpu cr6,f31,f30
	cr6.compare(f31.f64, f30.f64);
	// bge cr6,0x8212b224
	if (!cr6.getLT()) goto loc_8212B224;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212b224
	if (cr6.getLT()) goto loc_8212B224;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,28808(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28808);
	f31.f64 = double(temp.f32);
	// bl 0x8211afe8
	sub_8211AFE8(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// li r5,0
	ctx.r5.s64 = 0;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// addi r4,r11,-8084
	ctx.r4.s64 = r11.s64 + -8084;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f1,15764(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15764);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// b 0x8212b23c
	goto loc_8212B23C;
loc_8212B224:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212b23c
	if (cr6.getLT()) goto loc_8212B23C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
loc_8212B23C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212B260"))) PPC_WEAK_FUNC(sub_8212B260);
PPC_FUNC_IMPL(__imp__sub_8212B260) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f29,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f29.u64);
	// stfd f30,-40(r1)
	PPC_STORE_U64(ctx.r1.u32 + -40, f30.u64);
	// stfd f31,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r10,-6376(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -6376);
	// lbz r9,9(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmplwi cr6,r9,1
	cr6.compare<uint32_t>(ctx.r9.u32, 1, xer);
	// stw r10,200(r31)
	PPC_STORE_U32(r31.u32 + 200, ctx.r10.u32);
	// beq cr6,0x8212b358
	if (cr6.getEQ()) goto loc_8212B358;
	// lwz r11,-6376(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6376);
	// lwz r10,204(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// addi r11,r11,-60
	r11.s64 = r11.s64 + -60;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// blt cr6,0x8212b358
	if (cr6.getLT()) goto loc_8212B358;
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// addi r10,r31,44
	ctx.r10.s64 = r31.s64 + 44;
	// addi r3,r31,188
	ctx.r3.s64 = r31.s64 + 188;
	// lfs f1,56(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 56);
	ctx.f1.f64 = double(temp.f32);
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// bl 0x82124950
	sub_82124950(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8212b358
	if (!cr6.getEQ()) goto loc_8212B358;
	// addi r6,r31,64
	ctx.r6.s64 = r31.s64 + 64;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r10
	ctx.r4.u64 = ctx.r10.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82124710
	sub_82124710(ctx, base);
	// lwz r11,60(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8212b30c
	if (!cr6.getGT()) goto loc_8212B30C;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r10,-6384(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6384);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,60(r31)
	PPC_STORE_U32(r31.u32 + 60, r11.u32);
	// b 0x8212b474
	goto loc_8212B474;
loc_8212B30C:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lfs f31,11220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 11220);
	f31.f64 = double(temp.f32);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// addi r11,r11,-2636
	r11.s64 = r11.s64 + -2636;
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// bne cr6,0x8212b334
	if (!cr6.getEQ()) goto loc_8212B334;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lfs f31,11232(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 11232);
	f31.f64 = double(temp.f32);
loc_8212B334:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211aff0
	sub_8211AFF0(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f13,56(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 56);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// fmadds f0,f0,f31,f13
	f0.f64 = double(float(f0.f64 * f31.f64 + ctx.f13.f64));
	// stfs f0,56(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 56, temp.u32);
	// b 0x8212b474
	goto loc_8212B474;
loc_8212B358:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f29.f64 = double(temp.f32);
	// fcmpu cr6,f31,f29
	cr6.compare(f31.f64, f29.f64);
	// bge cr6,0x8212b3a0
	if (!cr6.getLT()) goto loc_8212B3A0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lhz r11,4(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 4);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fadds f31,f0,f31
	f31.f64 = double(float(f0.f64 + f31.f64));
loc_8212B3A0:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lhz r11,4(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 4);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f30.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// ble cr6,0x8212b404
	if (!cr6.getGT()) goto loc_8212B404;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lfs f2,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f2.f64 = double(temp.f32);
	// lhz r11,4(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 4);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// b 0x8212b45c
	goto loc_8212B45C;
loc_8212B404:
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lhz r11,4(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 4);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f30
	f31.f64 = double(float(f0.f64 * f30.f64));
	// fcmpu cr6,f31,f29
	cr6.compare(f31.f64, f29.f64);
	// bge cr6,0x8212b450
	if (!cr6.getLT()) goto loc_8212B450;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lhz r11,4(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 4);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fadds f31,f0,f31
	f31.f64 = double(float(f0.f64 + f31.f64));
loc_8212B450:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lfs f2,14220(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f2.f64 = double(temp.f32);
loc_8212B45C:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211b278
	sub_8211B278(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
loc_8212B474:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f29,-48(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f30,-40(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212B498"))) PPC_WEAK_FUNC(sub_8212B498);
PPC_FUNC_IMPL(__imp__sub_8212B498) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r25,r31,52
	r25.s64 = r31.s64 + 52;
	// lwz r11,52(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// lwz r26,24(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x821227e8
	sub_821227E8(ctx, base);
	// lwz r10,44(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// rlwinm r9,r3,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,96(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 96);
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lbz r8,56(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 56);
	// li r28,0
	r28.s64 = 0;
	// addi r7,r11,1
	ctx.r7.s64 = r11.s64 + 1;
	// addi r27,r31,56
	r27.s64 = r31.s64 + 56;
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r8,6
	cr6.compare<uint32_t>(ctx.r8.u32, 6, xer);
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// rlwinm r9,r11,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// lwzx r10,r9,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// stw r7,96(r31)
	PPC_STORE_U32(r31.u32 + 96, ctx.r7.u32);
	// mulli r10,r10,44
	ctx.r10.s64 = ctx.r10.s64 * 44;
	// add r30,r10,r11
	r30.u64 = ctx.r10.u64 + r11.u64;
	// lwz r11,-6376(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -6376);
	// stw r11,200(r31)
	PPC_STORE_U32(r31.u32 + 200, r11.u32);
	// beq cr6,0x8212b560
	if (cr6.getEQ()) goto loc_8212B560;
	// lwz r11,120(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 120);
	// lwz r10,-6376(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + -6376);
	// addi r11,r11,180
	r11.s64 = r11.s64 + 180;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x8212b560
	if (!cr6.getLT()) goto loc_8212B560;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r5,40(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 40);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122310
	sub_82122310(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212b560
	if (cr6.getEQ()) goto loc_8212B560;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r28,1
	r28.s64 = 1;
	// bl 0x821223b8
	sub_821223B8(ctx, base);
loc_8212B560:
	// lbz r11,0(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 0);
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// bne cr6,0x8212b5d8
	if (!cr6.getEQ()) goto loc_8212B5D8;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bne cr6,0x8212b5b4
	if (!cr6.getEQ()) goto loc_8212B5B4;
	// lbz r11,1(r26)
	r11.u64 = PPC_LOAD_U8(r26.u32 + 1);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212b59c
	if (!cr6.getEQ()) goto loc_8212B59C;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r5,40(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 40);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122310
	sub_82122310(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8212b5b4
	if (!cr6.getEQ()) goto loc_8212B5B4;
loc_8212B59C:
	// lwz r11,-6376(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -6376);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,120(r31)
	PPC_STORE_U32(r31.u32 + 120, r11.u32);
	// bl 0x82122908
	sub_82122908(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed17c
	return;
loc_8212B5B4:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r7,40(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 40);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f1,11216(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 11216);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82129918
	sub_82129918(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed17c
	return;
loc_8212B5D8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r26,12
	ctx.r4.s64 = r26.s64 + 12;
	// addi r3,r31,188
	ctx.r3.s64 = r31.s64 + 188;
	// lfs f1,3112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82124950
	sub_82124950(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212b624
	if (cr6.getEQ()) goto loc_8212B624;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821227e8
	sub_821227E8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r11.u32);
	// bl 0x82122908
	sub_82122908(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821228a0
	sub_821228A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
loc_8212B624:
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// lwz r5,40(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 40);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821258f0
	sub_821258F0(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8212B640"))) PPC_WEAK_FUNC(sub_8212B640);
PPC_FUNC_IMPL(__imp__sub_8212B640) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// rlwinm r10,r11,0,29,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8212b6a4
	if (cr6.getEQ()) goto loc_8212B6A4;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212b688
	if (cr6.getEQ()) goto loc_8212B688;
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212b68c
	if (!cr6.getEQ()) goto loc_8212B68C;
loc_8212B688:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8212B68C:
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// addi r3,r11,12
	ctx.r3.s64 = r11.s64 + 12;
	// b 0x8212b70c
	goto loc_8212B70C;
loc_8212B6A4:
	// rlwinm r11,r11,0,28,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212b6fc
	if (cr6.getEQ()) goto loc_8212B6FC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821263d8
	sub_821263D8(ctx, base);
	// cmpwi cr6,r3,10000
	cr6.compare<int32_t>(ctx.r3.s32, 10000, xer);
	// bge cr6,0x8212b6dc
	if (!cr6.getLT()) goto loc_8212B6DC;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// mulli r10,r3,44
	ctx.r10.s64 = ctx.r3.s64 * 44;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// lwz r11,40(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// b 0x8212b708
	goto loc_8212B708;
loc_8212B6DC:
	// addi r11,r3,-10000
	r11.s64 = ctx.r3.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// lwz r11,40(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// b 0x8212b708
	goto loc_8212B708;
loc_8212B6FC:
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// addi r3,r3,12
	ctx.r3.s64 = ctx.r3.s64 + 12;
loc_8212B708:
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
loc_8212B70C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212B728"))) PPC_WEAK_FUNC(sub_8212B728);
PPC_FUNC_IMPL(__imp__sub_8212B728) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r30,24(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmpwi cr6,r4,9000
	cr6.compare<int32_t>(ctx.r4.s32, 9000, xer);
	// bne cr6,0x8212b770
	if (!cr6.getEQ()) goto loc_8212B770;
	// lhz r11,276(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 276);
	// extsh r31,r11
	r31.s64 = r11.s16;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x8212b770
	if (!cr6.getLT()) goto loc_8212B770;
	// lhz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,28580
	ctx.r3.s64 = r11.s64 + 28580;
	// extsh r4,r10
	ctx.r4.s64 = ctx.r10.s16;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_8212B770:
	// cmpwi cr6,r31,10000
	cr6.compare<int32_t>(r31.s32, 10000, xer);
	// bge cr6,0x8212b78c
	if (!cr6.getLT()) goto loc_8212B78C;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// mulli r10,r31,44
	ctx.r10.s64 = r31.s64 * 44;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// b 0x8212b7a0
	goto loc_8212B7A0;
loc_8212B78C:
	// addi r11,r31,-10000
	r11.s64 = r31.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
loc_8212B7A0:
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lfs f13,16(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// lfs f11,12(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f12,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// lfs f12,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f12,f11
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fmuls f0,f0,f0
	f0.f64 = double(float(f0.f64 * f0.f64));
	// fmadds f0,f13,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * ctx.f13.f64 + f0.f64));
	// fmadds f0,f12,f12,f0
	f0.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// fsqrts f1,f0
	ctx.f1.f64 = double(float(sqrt(f0.f64)));
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

extern void InputProcessHook(PPCRegister& r3, PPCRegister& r4);

extern void InputStateUpdateHook(PPCRegister& r3);

__attribute__((alias("__imp__sub_8212B7F0"))) PPC_WEAK_FUNC(sub_8212B7F0);
PPC_FUNC_IMPL(__imp__sub_8212B7F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	InputProcessHook(ctx.r3, ctx.r4);
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmpwi cr6,r31,9000
	cr6.compare<int32_t>(r31.s32, 9000, xer);
	// bne cr6,0x8212b830
	if (!cr6.getEQ()) goto loc_8212B830;
	// lhz r11,276(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 276);
	// extsh r31,r11
	r31.s64 = r11.s16;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x8212b830
	if (!cr6.getLT()) goto loc_8212B830;
	// lhz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,28580
	ctx.r3.s64 = r11.s64 + 28580;
	// extsh r4,r10
	ctx.r4.s64 = ctx.r10.s16;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_8212B830:
	// cmpwi cr6,r31,10000
	cr6.compare<int32_t>(r31.s32, 10000, xer);
	// bge cr6,0x8212b84c
	if (!cr6.getLT()) goto loc_8212B84C;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// mulli r10,r31,44
	ctx.r10.s64 = r31.s64 * 44;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// b 0x8212b860
	goto loc_8212B860;
loc_8212B84C:
	// addi r11,r31,-10000
	r11.s64 = r31.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
loc_8212B860:
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r3,40(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212b89c
	if (cr6.getEQ()) goto loc_8212B89C;
	// bl 0x82110d78
	sub_82110D78(ctx, base);
	// lis r11,-32009
	r11.s64 = -2097741824;
	// mulli r10,r3,156
	ctx.r10.s64 = ctx.r3.s64 * 156;
	// addi r11,r11,-9856
	r11.s64 = r11.s64 + -9856;
	// lbzx r11,r10,r11
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// addi r1,r1,96
	InputStateUpdateHook(ctx.r3);
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8212B89C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212B8B8"))) PPC_WEAK_FUNC(sub_8212B8B8);
PPC_FUNC_IMPL(__imp__sub_8212B8B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lbz r11,7(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212b914
	if (cr6.getEQ()) goto loc_8212B914;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212b914
	if (cr6.getEQ()) goto loc_8212B914;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212b914
	if (cr6.getEQ()) goto loc_8212B914;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212b8fc
	if (!cr6.getEQ()) goto loc_8212B8FC;
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212b914
	if (cr6.getEQ()) goto loc_8212B914;
loc_8212B8FC:
	// bl 0x82127f08
	sub_82127F08(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8212B914:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212B928"))) PPC_WEAK_FUNC(sub_8212B928);
PPC_FUNC_IMPL(__imp__sub_8212B928) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// cmplwi cr6,r11,5
	cr6.compare<uint32_t>(r11.u32, 5, xer);
	// beq cr6,0x8212b964
	if (cr6.getEQ()) goto loc_8212B964;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// li r11,5
	r11.s64 = 5;
	// li r10,-1
	ctx.r10.s64 = -1;
	// li r9,0
	ctx.r9.s64 = 0;
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// stw r10,44(r31)
	PPC_STORE_U32(r31.u32 + 44, ctx.r10.u32);
	// stb r9,8(r31)
	PPC_STORE_U8(r31.u32 + 8, ctx.r9.u8);
loc_8212B964:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212B980"))) PPC_WEAK_FUNC(sub_8212B980);
PPC_FUNC_IMPL(__imp__sub_8212B980) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212ba0c
	if (cr6.getEQ()) goto loc_8212BA0C;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212ba0c
	if (cr6.getEQ()) goto loc_8212BA0C;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212ba0c
	if (cr6.getEQ()) goto loc_8212BA0C;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212b9d4
	if (!cr6.getEQ()) goto loc_8212B9D4;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212ba0c
	if (cr6.getEQ()) goto loc_8212BA0C;
loc_8212B9D4:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11200);
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bge cr6,0x8212ba0c
	if (!cr6.getLT()) goto loc_8212BA0C;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// lwz r5,24(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// bl 0x82129b68
	sub_82129B68(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// bne cr6,0x8212ba10
	if (!cr6.getEQ()) goto loc_8212BA10;
loc_8212BA0C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8212BA10:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212BA28"))) PPC_WEAK_FUNC(sub_8212BA28);
PPC_FUNC_IMPL(__imp__sub_8212BA28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212bad8
	if (cr6.getEQ()) goto loc_8212BAD8;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212bad8
	if (cr6.getEQ()) goto loc_8212BAD8;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212bad8
	if (cr6.getEQ()) goto loc_8212BAD8;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212ba7c
	if (!cr6.getEQ()) goto loc_8212BA7C;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212bad8
	if (cr6.getEQ()) goto loc_8212BAD8;
loc_8212BA7C:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11200);
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bge cr6,0x8212bad8
	if (!cr6.getLT()) goto loc_8212BAD8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212bad8
	if (cr6.getEQ()) goto loc_8212BAD8;
	// lwz r11,28(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212bad8
	if (cr6.getEQ()) goto loc_8212BAD8;
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212bad8
	if (cr6.getEQ()) goto loc_8212BAD8;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// lwz r5,24(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// bl 0x82129b68
	sub_82129B68(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// bne cr6,0x8212badc
	if (!cr6.getEQ()) goto loc_8212BADC;
loc_8212BAD8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8212BADC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212BAF8"))) PPC_WEAK_FUNC(sub_8212BAF8);
PPC_FUNC_IMPL(__imp__sub_8212BAF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212bb6c
	if (cr6.getEQ()) goto loc_8212BB6C;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212bb6c
	if (cr6.getEQ()) goto loc_8212BB6C;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212bb6c
	if (cr6.getEQ()) goto loc_8212BB6C;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212bb44
	if (!cr6.getEQ()) goto loc_8212BB44;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212bb6c
	if (cr6.getEQ()) goto loc_8212BB6C;
loc_8212BB44:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8212BB6C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212BB88"))) PPC_WEAK_FUNC(sub_8212BB88);
PPC_FUNC_IMPL(__imp__sub_8212BB88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lbz r11,7(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212bbe4
	if (cr6.getEQ()) goto loc_8212BBE4;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212bbe4
	if (cr6.getEQ()) goto loc_8212BBE4;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212bbe4
	if (cr6.getEQ()) goto loc_8212BBE4;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212bbcc
	if (!cr6.getEQ()) goto loc_8212BBCC;
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212bbe4
	if (cr6.getEQ()) goto loc_8212BBE4;
loc_8212BBCC:
	// bl 0x82127cb8
	sub_82127CB8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8212BBE4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212BBF8"))) PPC_WEAK_FUNC(sub_8212BBF8);
PPC_FUNC_IMPL(__imp__sub_8212BBF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lbz r11,7(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212bc54
	if (cr6.getEQ()) goto loc_8212BC54;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212bc54
	if (cr6.getEQ()) goto loc_8212BC54;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212bc54
	if (cr6.getEQ()) goto loc_8212BC54;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212bc3c
	if (!cr6.getEQ()) goto loc_8212BC3C;
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212bc54
	if (cr6.getEQ()) goto loc_8212BC54;
loc_8212BC3C:
	// bl 0x82127d68
	sub_82127D68(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8212BC54:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212BC68"))) PPC_WEAK_FUNC(sub_8212BC68);
PPC_FUNC_IMPL(__imp__sub_8212BC68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lbz r11,7(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212bcc4
	if (cr6.getEQ()) goto loc_8212BCC4;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212bcc4
	if (cr6.getEQ()) goto loc_8212BCC4;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212bcc4
	if (cr6.getEQ()) goto loc_8212BCC4;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212bcac
	if (!cr6.getEQ()) goto loc_8212BCAC;
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212bcc4
	if (cr6.getEQ()) goto loc_8212BCC4;
loc_8212BCAC:
	// bl 0x82127e20
	sub_82127E20(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8212BCC4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212BCD8"))) PPC_WEAK_FUNC(sub_8212BCD8);
PPC_FUNC_IMPL(__imp__sub_8212BCD8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lbz r11,7(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212bd34
	if (cr6.getEQ()) goto loc_8212BD34;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212bd34
	if (cr6.getEQ()) goto loc_8212BD34;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212bd34
	if (cr6.getEQ()) goto loc_8212BD34;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212bd1c
	if (!cr6.getEQ()) goto loc_8212BD1C;
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212bd34
	if (cr6.getEQ()) goto loc_8212BD34;
loc_8212BD1C:
	// bl 0x82127970
	sub_82127970(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8212BD34:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212BD48"))) PPC_WEAK_FUNC(sub_8212BD48);
PPC_FUNC_IMPL(__imp__sub_8212BD48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lbz r11,7(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212bda4
	if (cr6.getEQ()) goto loc_8212BDA4;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212bda4
	if (cr6.getEQ()) goto loc_8212BDA4;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212bda4
	if (cr6.getEQ()) goto loc_8212BDA4;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212bd8c
	if (!cr6.getEQ()) goto loc_8212BD8C;
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212bda4
	if (cr6.getEQ()) goto loc_8212BDA4;
loc_8212BD8C:
	// bl 0x82127ab8
	sub_82127AB8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8212BDA4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212BDB8"))) PPC_WEAK_FUNC(sub_8212BDB8);
PPC_FUNC_IMPL(__imp__sub_8212BDB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,9000
	cr6.compare<int32_t>(r30.s32, 9000, xer);
	// bne cr6,0x8212be00
	if (!cr6.getEQ()) goto loc_8212BE00;
	// lhz r11,276(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 276);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bge cr6,0x8212be00
	if (!cr6.getLT()) goto loc_8212BE00;
	// lhz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,28580
	ctx.r3.s64 = r11.s64 + 28580;
	// extsh r4,r10
	ctx.r4.s64 = ctx.r10.s16;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_8212BE00:
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212be64
	if (cr6.getEQ()) goto loc_8212BE64;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212be64
	if (cr6.getEQ()) goto loc_8212BE64;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212be64
	if (cr6.getEQ()) goto loc_8212BE64;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212be38
	if (!cr6.getEQ()) goto loc_8212BE38;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212be64
	if (cr6.getEQ()) goto loc_8212BE64;
loc_8212BE38:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820d4770
	sub_820D4770(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212be64
	if (cr6.getEQ()) goto loc_8212BE64;
	// bl 0x820db380
	sub_820DB380(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212be64
	if (cr6.getEQ()) goto loc_8212BE64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82127c00
	sub_82127C00(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x8212be68
	goto loc_8212BE68;
loc_8212BE64:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8212BE68:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212BE80"))) PPC_WEAK_FUNC(sub_8212BE80);
PPC_FUNC_IMPL(__imp__sub_8212BE80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lbz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 16);
	// lis r10,-32640
	ctx.r10.s64 = -2139095040;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// ori r10,r10,32897
	ctx.r10.u64 = ctx.r10.u64 | 32897;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,25,7,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 25) & 0x1FFFFFF;
	// rlwinm r8,r10,8,0,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0xFFFFFF00;
	// subf r10,r10,r8
	ctx.r10.s64 = ctx.r8.s64 - ctx.r10.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bge cr6,0x8212c12c
	if (!cr6.getLT()) goto loc_8212C12C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82126378
	sub_82126378(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2952(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// blt cr6,0x8212c12c
	if (cr6.getLT()) goto loc_8212C12C;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212c12c
	if (cr6.getEQ()) goto loc_8212C12C;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212c12c
	if (cr6.getEQ()) goto loc_8212C12C;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212c12c
	if (cr6.getEQ()) goto loc_8212C12C;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212bf20
	if (!cr6.getEQ()) goto loc_8212BF20;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212c12c
	if (cr6.getEQ()) goto loc_8212C12C;
loc_8212BF20:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8212bfd4
	if (cr6.getEQ()) goto loc_8212BFD4;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// cmplwi cr6,r11,26
	cr6.compare<uint32_t>(r11.u32, 26, xer);
	// bne cr6,0x8212bfd4
	if (!cr6.getEQ()) goto loc_8212BFD4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,20
	ctx.r10.s64 = 20;
	// li r9,0
	ctx.r9.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r10.u8);
	// stb r9,8(r31)
	PPC_STORE_U8(r31.u32 + 8, ctx.r9.u8);
	// lfs f2,14112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r4,r11,-10380
	ctx.r4.s64 = r11.s64 + -10380;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,28644(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28644);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,28640(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28640);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_8212BFD4:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8212c070
	if (cr6.getEQ()) goto loc_8212C070;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// cmplwi cr6,r11,26
	cr6.compare<uint32_t>(r11.u32, 26, xer);
	// bne cr6,0x8212c068
	if (!cr6.getEQ()) goto loc_8212C068;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,20
	ctx.r10.s64 = 20;
	// li r9,0
	ctx.r9.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r10.u8);
	// stb r9,8(r31)
	PPC_STORE_U8(r31.u32 + 8, ctx.r9.u8);
	// lfs f2,14112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r4,r11,-10380
	ctx.r4.s64 = r11.s64 + -10380;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,28644(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28644);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,28640(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28640);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_8212C068:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x8212c12c
	if (!cr6.getEQ()) goto loc_8212C12C;
loc_8212C070:
	// li r6,0
	ctx.r6.s64 = 0;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8212c080
	if (cr6.getEQ()) goto loc_8212C080;
	// lis r6,4096
	ctx.r6.s64 = 268435456;
loc_8212C080:
	// li r5,26
	ctx.r5.s64 = 26;
	// li r4,196
	ctx.r4.s64 = 196;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820e2ff8
	sub_820E2FF8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212c12c
	if (cr6.getEQ()) goto loc_8212C12C;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r10,100(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// ori r10,r10,2048
	ctx.r10.u64 = ctx.r10.u64 | 2048;
	// stw r10,100(r11)
	PPC_STORE_U32(r11.u32 + 100, ctx.r10.u32);
	// bl 0x821240b8
	sub_821240B8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,20
	ctx.r10.s64 = 20;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r10.u8);
	// lfs f2,14112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r11.u8);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// cntlzw r10,r30
	ctx.r10.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r4,r11,-10380
	ctx.r4.s64 = r11.s64 + -10380;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r5,r10,1
	ctx.r5.u64 = ctx.r10.u64 ^ 1;
	// lfs f1,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lfs f1,28640(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28640);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_8212C12C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8212C140"))) PPC_WEAK_FUNC(sub_8212C140);
PPC_FUNC_IMPL(__imp__sub_8212C140) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f30,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f30.u64);
	// stfd f31,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// rlwinm r11,r4,0,30,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x2;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212c174
	if (cr6.getEQ()) goto loc_8212C174;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// b 0x8212c1e0
	goto loc_8212C1E0;
loc_8212C174:
	// rlwinm r11,r4,0,27,27
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212c1c8
	if (cr6.getEQ()) goto loc_8212C1C8;
	// extsw r10,r5
	ctx.r10.s64 = ctx.r5.s32;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfs f31,16716(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16716);
	f31.f64 = double(temp.f32);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// bl 0x82119128
	sub_82119128(ctx, base);
	// fmsubs f1,f30,f31,f1
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = double(float(f30.f64 * f31.f64 - ctx.f1.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x8212c1e0
	if (!cr6.getLT()) goto loc_8212C1E0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fadds f1,f1,f0
	ctx.f1.f64 = double(float(ctx.f1.f64 + f0.f64));
	// b 0x8212c1e0
	goto loc_8212C1E0;
loc_8212C1C8:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212b640
	sub_8212B640(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82126230
	sub_82126230(ctx, base);
loc_8212C1E0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f30,-32(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// lfd f31,-24(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212C200"))) PPC_WEAK_FUNC(sub_8212C200);
PPC_FUNC_IMPL(__imp__sub_8212C200) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed104
	// stfd f30,-160(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -160, f30.u64);
	// stfd f31,-152(r1)
	PPC_STORE_U64(ctx.r1.u32 + -152, f31.u64);
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r30,0
	r30.s64 = 0;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r11,8
	r11.s64 = 8;
	// mr r19,r7
	r19.u64 = ctx.r7.u64;
	// mr r17,r8
	r17.u64 = ctx.r8.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r30.u32);
	// mr r18,r5
	r18.u64 = ctx.r5.u64;
	// lwz r15,28(r31)
	r15.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// li r22,1
	r22.s64 = 1;
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r30.u32);
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// stw r30,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r30.u32);
	// mr r20,r6
	r20.u64 = ctx.r6.u64;
	// stw r30,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r30.u32);
	// mr r16,r9
	r16.u64 = ctx.r9.u64;
	// mr r23,r22
	r23.u64 = r22.u64;
	// mr r21,r30
	r21.u64 = r30.u64;
	// bl 0x8212c140
	sub_8212C140(ctx, base);
	// cmpwi cr6,r18,0
	cr6.compare<int32_t>(r18.s32, 0, xer);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// beq cr6,0x8212c29c
	if (cr6.getEQ()) goto loc_8212C29C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,6588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f13,f0,f1
	ctx.f13.f64 = double(float(f0.f64 - ctx.f1.f64));
	// lfs f0,28816(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28816);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,2692
	r11.s64 = r11.s64 + 2692;
	// lfs f31,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f31.f64 = double(temp.f32);
	// fmadds f0,f13,f0,f31
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + f31.f64));
	// b 0x8212c2b4
	goto loc_8212C2B4;
loc_8212C29C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28816(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28816);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,2692
	r11.s64 = r11.s64 + 2692;
	// lfs f31,0(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f31.f64 = double(temp.f32);
	// fmadds f0,f1,f0,f31
	f0.f64 = double(float(ctx.f1.f64 * f0.f64 + f31.f64));
loc_8212C2B4:
	// fctiwz f0,f0
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r27,80(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r27,32
	cr6.compare<int32_t>(r27.s32, 32, xer);
	// blt cr6,0x8212c2cc
	if (cr6.getLT()) goto loc_8212C2CC;
	// mr r27,r30
	r27.u64 = r30.u64;
loc_8212C2CC:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r9,r27,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r10,0,26,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20;
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lwzx r10,r9,r28
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + r28.u32);
	// lwz r7,4(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// divwu r10,r11,r7
	ctx.r10.u32 = r11.u32 / ctx.r7.u32;
	// twllei r7,0
	// mullw r10,r10,r7
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r7.s32);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// add r25,r10,r8
	r25.u64 = ctx.r10.u64 + ctx.r8.u64;
	// beq cr6,0x8212c374
	if (cr6.getEQ()) goto loc_8212C374;
	// lis r10,-32056
	ctx.r10.s64 = -2100822016;
	// lwz r8,0(r25)
	ctx.r8.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// addi r10,r10,-32552
	ctx.r10.s64 = ctx.r10.s64 + -32552;
	// cmplw cr6,r8,r10
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r10.u32, xer);
	// bne cr6,0x8212c374
	if (!cr6.getEQ()) goto loc_8212C374;
	// lwzx r10,r9,r28
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + r28.u32);
	// addi r9,r11,1
	ctx.r9.s64 = r11.s64 + 1;
	// rotlwi r11,r9,1
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 1);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// divw r7,r9,r8
	ctx.r7.s32 = ctx.r9.s32 / ctx.r8.s32;
	// andc r6,r8,r11
	ctx.r6.u64 = ctx.r8.u64 & ~r11.u64;
	// mullw r11,r7,r8
	r11.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r8.s32);
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
	// twllei r8,0
	// rlwinm r9,r11,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// twlgei r6,-1
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r25,r11,r10
	r25.u64 = r11.u64 + ctx.r10.u64;
loc_8212C374:
	// addi r11,r1,88
	r11.s64 = ctx.r1.s64 + 88;
	// mr r26,r30
	r26.u64 = r30.u64;
	// subf r24,r11,r20
	r24.s64 = r20.s64 - r11.s64;
	// mr r27,r30
	r27.u64 = r30.u64;
loc_8212C384:
	// addi r11,r1,88
	r11.s64 = ctx.r1.s64 + 88;
	// add r28,r27,r11
	r28.u64 = r27.u64 + r11.u64;
	// lwzx r11,r24,r28
	r11.u64 = PPC_LOAD_U32(r24.u32 + r28.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212c3fc
	if (cr6.getEQ()) goto loc_8212C3FC;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// lwz r29,8(r3)
	r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lbz r11,128(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 128);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1120
	sub_820A1120(ctx, base);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x8212c3d4
	if (!cr6.getLT()) goto loc_8212C3D4;
	// lbz r11,128(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 128);
	// stw r22,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r22.u32);
	// cmplwi cr6,r11,22
	cr6.compare<uint32_t>(r11.u32, 22, xer);
	// bne cr6,0x8212c3dc
	if (!cr6.getEQ()) goto loc_8212C3DC;
	// b 0x8212c3d8
	goto loc_8212C3D8;
loc_8212C3D4:
	// mr r21,r22
	r21.u64 = r22.u64;
loc_8212C3D8:
	// mr r23,r30
	r23.u64 = r30.u64;
loc_8212C3DC:
	// lbz r11,128(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 128);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,25
	cr6.compare<int32_t>(r11.s32, 25, xer);
	// beq cr6,0x8212c3f4
	if (cr6.getEQ()) goto loc_8212C3F4;
	// cmpwi cr6,r11,24
	cr6.compare<int32_t>(r11.s32, 24, xer);
	// bne cr6,0x8212c3fc
	if (!cr6.getEQ()) goto loc_8212C3FC;
loc_8212C3F4:
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// stwx r22,r27,r11
	PPC_STORE_U32(r27.u32 + r11.u32, r22.u32);
loc_8212C3FC:
	// addi r27,r27,4
	r27.s64 = r27.s64 + 4;
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// cmpwi cr6,r27,4
	cr6.compare<int32_t>(r27.s32, 4, xer);
	// ble cr6,0x8212c384
	if (!cr6.getGT()) goto loc_8212C384;
	// stb r22,48(r31)
	PPC_STORE_U8(r31.u32 + 48, r22.u8);
	// stw r25,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r25.u32);
	// stb r30,49(r31)
	PPC_STORE_U8(r31.u32 + 49, r30.u8);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r9,r3,31
	ctx.r9.u64 = ctx.r3.u32 & 0x1;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r8,92(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mr r6,r11
	ctx.r6.u64 = r11.u64;
	// lwz r7,88(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stb r9,50(r31)
	PPC_STORE_U8(r31.u32 + 50, ctx.r9.u8);
	// lwz r4,4(r20)
	ctx.r4.u64 = PPC_LOAD_U32(r20.u32 + 4);
	// stb r4,57(r31)
	PPC_STORE_U8(r31.u32 + 57, ctx.r4.u8);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// stb r8,59(r31)
	PPC_STORE_U8(r31.u32 + 59, ctx.r8.u8);
	// stb r7,58(r31)
	PPC_STORE_U8(r31.u32 + 58, ctx.r7.u8);
	// stb r6,61(r31)
	PPC_STORE_U8(r31.u32 + 61, ctx.r6.u8);
	// stb r10,60(r31)
	PPC_STORE_U8(r31.u32 + 60, ctx.r10.u8);
	// stb r23,54(r31)
	PPC_STORE_U8(r31.u32 + 54, r23.u8);
	// stb r21,55(r31)
	PPC_STORE_U8(r31.u32 + 55, r21.u8);
	// stb r11,56(r31)
	PPC_STORE_U8(r31.u32 + 56, r11.u8);
	// stw r30,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r30.u32);
	// stb r30,51(r31)
	PPC_STORE_U8(r31.u32 + 51, r30.u8);
	// bne cr6,0x8212c4f8
	if (!cr6.getEQ()) goto loc_8212C4F8;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x8212c50c
	if (!cr6.getEQ()) goto loc_8212C50C;
	// rlwinm r11,r19,0,24,24
	r11.u64 = __builtin_rotateleft64(r19.u32 | (r19.u64 << 32), 0) & 0x80;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212c490
	if (cr6.getEQ()) goto loc_8212C490;
	// stb r22,52(r31)
	PPC_STORE_U8(r31.u32 + 52, r22.u8);
	// b 0x8212c4b0
	goto loc_8212C4B0;
loc_8212C490:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r11,r11,r29
	r11.s64 = r29.s64 - r11.s64;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// stb r11,52(r31)
	PPC_STORE_U8(r31.u32 + 52, r11.u8);
loc_8212C4B0:
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212c510
	if (cr6.getEQ()) goto loc_8212C510;
	// lwz r11,4(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 4);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212c510
	if (cr6.getEQ()) goto loc_8212C510;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lbz r10,52(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 52);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// stb r11,52(r31)
	PPC_STORE_U8(r31.u32 + 52, r11.u8);
	// b 0x8212c510
	goto loc_8212C510;
loc_8212C4F8:
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8212c50c
	if (cr6.getEQ()) goto loc_8212C50C;
	// li r11,2
	r11.s64 = 2;
	// stb r11,52(r31)
	PPC_STORE_U8(r31.u32 + 52, r11.u8);
	// b 0x8212c510
	goto loc_8212C510;
loc_8212C50C:
	// stb r22,52(r31)
	PPC_STORE_U8(r31.u32 + 52, r22.u8);
loc_8212C510:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// stw r19,76(r31)
	PPC_STORE_U32(r31.u32 + 76, r19.u32);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// stw r17,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r17.u32);
	// stw r16,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r16.u32);
	// stw r30,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r30.u32);
	// stw r30,68(r31)
	PPC_STORE_U32(r31.u32 + 68, r30.u32);
	// stw r30,72(r31)
	PPC_STORE_U32(r31.u32 + 72, r30.u32);
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// stb r30,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r30.u8);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// bl 0x82108c30
	sub_82108C30(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = ctx.f1.f64;
	// mr r5,r18
	ctx.r5.u64 = r18.u64;
	// lfs f1,16(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + 16);
	ctx.f1.f64 = double(temp.f32);
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// lwz r4,0(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// lfs f0,2944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f12,f0,f30
	ctx.f12.f64 = double(float(f0.f64 - f30.f64));
	// lfs f0,28480(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28480);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f3,14220(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f3.f64 = double(temp.f32);
	// fmadds f13,f13,f12,f30
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 + f30.f64));
	// fmadds f2,f13,f0,f31
	ctx.f2.f64 = double(float(ctx.f13.f64 * f0.f64 + f31.f64));
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82121388
	sub_82121388(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f30,-160(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// lfd f31,-152(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -152);
	// b 0x823ed154
	return;
}

__attribute__((alias("__imp__sub_8212C5A0"))) PPC_WEAK_FUNC(sub_8212C5A0);
PPC_FUNC_IMPL(__imp__sub_8212C5A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8212c688
	if (cr6.getEQ()) goto loc_8212C688;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212c680
	if (cr6.getEQ()) goto loc_8212C680;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821202a0
	sub_821202A0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821202a0
	sub_821202A0(ctx, base);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8212c66c
	if (cr6.getEQ()) goto loc_8212C66C;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212c66c
	if (cr6.getEQ()) goto loc_8212C66C;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-21846
	ctx.r10.s64 = -1431699456;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// ori r10,r10,43691
	ctx.r10.u64 = ctx.r10.u64 | 43691;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8212c658
	if (!cr0.getEQ()) goto loc_8212C658;
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r4,r11,-27816
	ctx.r4.s64 = r11.s64 + -27816;
	// b 0x8212c6cc
	goto loc_8212C6CC;
loc_8212C658:
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r4,r11,-27088
	ctx.r4.s64 = r11.s64 + -27088;
	// li r11,1
	r11.s64 = 1;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// b 0x8212c6d8
	goto loc_8212C6D8;
loc_8212C66C:
	// cntlzw r10,r3
	ctx.r10.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// lis r11,-32055
	r11.s64 = -2100756480;
	// rlwinm r31,r10,27,31,31
	r31.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// addi r4,r11,-27816
	ctx.r4.s64 = r11.s64 + -27816;
	// b 0x8212c6cc
	goto loc_8212C6CC;
loc_8212C680:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// b 0x8212c694
	goto loc_8212C694;
loc_8212C688:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212c6ac
	if (cr6.getEQ()) goto loc_8212C6AC;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
loc_8212C694:
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// li r4,256
	ctx.r4.s64 = 256;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8212c6b8
	if (!cr6.getEQ()) goto loc_8212C6B8;
loc_8212C6AC:
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r4,r11,-29576
	ctx.r4.s64 = r11.s64 + -29576;
	// b 0x8212c6c0
	goto loc_8212C6C0;
loc_8212C6B8:
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r4,r11,-27816
	ctx.r4.s64 = r11.s64 + -27816;
loc_8212C6C0:
	// cntlzw r10,r31
	ctx.r10.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// rlwinm r11,r10,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r31,r11,1
	r31.u64 = r11.u64 ^ 1;
loc_8212C6CC:
	// cntlzw r11,r31
	r11.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
loc_8212C6D8:
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8212c200
	sub_8212C200(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8212C700"))) PPC_WEAK_FUNC(sub_8212C700);
PPC_FUNC_IMPL(__imp__sub_8212C700) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8212c7e8
	if (cr6.getEQ()) goto loc_8212C7E8;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212c7e0
	if (cr6.getEQ()) goto loc_8212C7E0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821202a0
	sub_821202A0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821202a0
	sub_821202A0(ctx, base);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8212c7cc
	if (cr6.getEQ()) goto loc_8212C7CC;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212c7cc
	if (cr6.getEQ()) goto loc_8212C7CC;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-21846
	ctx.r10.s64 = -1431699456;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// ori r10,r10,43691
	ctx.r10.u64 = ctx.r10.u64 | 43691;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8212c7b8
	if (!cr0.getEQ()) goto loc_8212C7B8;
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r4,r11,-25560
	ctx.r4.s64 = r11.s64 + -25560;
	// b 0x8212c82c
	goto loc_8212C82C;
loc_8212C7B8:
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r4,r11,-24760
	ctx.r4.s64 = r11.s64 + -24760;
	// li r11,1
	r11.s64 = 1;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// b 0x8212c838
	goto loc_8212C838;
loc_8212C7CC:
	// cntlzw r10,r3
	ctx.r10.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// lis r11,-32055
	r11.s64 = -2100756480;
	// rlwinm r31,r10,27,31,31
	r31.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// addi r4,r11,-25560
	ctx.r4.s64 = r11.s64 + -25560;
	// b 0x8212c82c
	goto loc_8212C82C;
loc_8212C7E0:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// b 0x8212c7f4
	goto loc_8212C7F4;
loc_8212C7E8:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212c80c
	if (cr6.getEQ()) goto loc_8212C80C;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
loc_8212C7F4:
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// li r4,256
	ctx.r4.s64 = 256;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8212c818
	if (!cr6.getEQ()) goto loc_8212C818;
loc_8212C80C:
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r4,r11,-26432
	ctx.r4.s64 = r11.s64 + -26432;
	// b 0x8212c820
	goto loc_8212C820;
loc_8212C818:
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r4,r11,-25560
	ctx.r4.s64 = r11.s64 + -25560;
loc_8212C820:
	// cntlzw r10,r31
	ctx.r10.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// rlwinm r11,r10,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r31,r11,1
	r31.u64 = r11.u64 ^ 1;
loc_8212C82C:
	// cntlzw r11,r31
	r11.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
loc_8212C838:
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8212c200
	sub_8212C200(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8212C860"))) PPC_WEAK_FUNC(sub_8212C860);
PPC_FUNC_IMPL(__imp__sub_8212C860) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,92(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 92);
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// beq cr6,0x8212c8f4
	if (cr6.getEQ()) goto loc_8212C8F4;
	// lhz r11,90(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 90);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212c8b0
	if (!cr6.getEQ()) goto loc_8212C8B0;
	// bl 0x82122638
	sub_82122638(ctx, base);
	// lis r11,0
	r11.s64 = 0;
	// ori r10,r11,65535
	ctx.r10.u64 = r11.u64 | 65535;
	// addi r11,r3,150
	r11.s64 = ctx.r3.s64 + 150;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// ble cr6,0x8212c8f0
	if (!cr6.getGT()) goto loc_8212C8F0;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// b 0x8212c8f0
	goto loc_8212C8F0;
loc_8212C8B0:
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r10,-6384(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6384);
	// clrlwi r9,r10,16
	ctx.r9.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bgt cr6,0x8212c8ec
	if (cr6.getGT()) goto loc_8212C8EC;
	// addi r4,r31,44
	ctx.r4.s64 = r31.s64 + 44;
	// lbz r6,89(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 89);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,56(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// bl 0x82129b68
	sub_82129B68(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8212C8EC:
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
loc_8212C8F0:
	// sth r11,90(r31)
	PPC_STORE_U16(r31.u32 + 90, r11.u16);
loc_8212C8F4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212C908"))) PPC_WEAK_FUNC(sub_8212C908);
PPC_FUNC_IMPL(__imp__sub_8212C908) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// li r27,0
	r27.s64 = 0;
	// li r31,1
	r31.s64 = 1;
	// lbz r10,7(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 7);
	// cmplwi cr6,r10,8
	cr6.compare<uint32_t>(ctx.r10.u32, 8, xer);
	// bne cr6,0x8212c938
	if (!cr6.getEQ()) goto loc_8212C938;
	// lwz r31,76(r29)
	r31.u64 = PPC_LOAD_U32(r29.u32 + 76);
loc_8212C938:
	// rlwinm r10,r31,0,30,30
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x2;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8212c950
	if (cr6.getEQ()) goto loc_8212C950;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed184
	return;
loc_8212C950:
	// addi r6,r1,100
	ctx.r6.s64 = ctx.r1.s64 + 100;
	// lwz r5,80(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + 80);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8212b640
	sub_8212B640(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8211dd98
	sub_8211DD98(ctx, base);
	// clrlwi r11,r31,31
	r11.u64 = r31.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212ca0c
	if (cr6.getEQ()) goto loc_8212CA0C;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// bl 0x820b3e10
	sub_820B3E10(ctx, base);
	// bl 0x820b3d78
	sub_820B3D78(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212c9f8
	if (cr6.getEQ()) goto loc_8212C9F8;
	// lfs f8,4(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f8.f64 = double(temp.f32);
	// li r8,283
	ctx.r8.s64 = 283;
	// lfs f6,4(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 4);
	ctx.f6.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f4,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f4.f64 = double(temp.f32);
	// fmr f7,f8
	ctx.f7.f64 = ctx.f8.f64;
	// lfs f3,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f3.f64 = double(temp.f32);
	// fmr f5,f6
	ctx.f5.f64 = ctx.f6.f64;
	// lfs f2,8(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212c9f8
	if (cr6.getEQ()) goto loc_8212C9F8;
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x8212c9f8
	if (!cr6.getEQ()) goto loc_8212C9F8;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r27,1
	r27.s64 = 1;
	// lwz r11,-6376(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6376);
	// stw r11,232(r29)
	PPC_STORE_U32(r29.u32 + 232, r11.u32);
loc_8212C9F8:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,428(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// bl 0x820b3e10
	sub_820B3E10(ctx, base);
	// b 0x8212ca74
	goto loc_8212CA74;
loc_8212CA0C:
	// rlwinm r11,r31,0,29,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212ca20
	if (cr6.getEQ()) goto loc_8212CA20;
	// li r8,279
	ctx.r8.s64 = 279;
	// b 0x8212ca30
	goto loc_8212CA30;
loc_8212CA20:
	// rlwinm r11,r31,0,28,28
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212ca74
	if (cr6.getEQ()) goto loc_8212CA74;
	// li r8,287
	ctx.r8.s64 = 287;
loc_8212CA30:
	// lfs f8,4(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f8.f64 = double(temp.f32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f6,4(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 4);
	ctx.f6.f64 = double(temp.f32);
	// fmr f7,f8
	ctx.f7.f64 = ctx.f8.f64;
	// lfs f4,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f4.f64 = double(temp.f32);
	// fmr f5,f6
	ctx.f5.f64 = ctx.f6.f64;
	// lfs f3,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,8(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212ca74
	if (cr6.getEQ()) goto loc_8212CA74;
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x8212ca74
	if (!cr6.getEQ()) goto loc_8212CA74;
	// li r27,1
	r27.s64 = 1;
loc_8212CA74:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8211dd98
	sub_8211DD98(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8212CA90"))) PPC_WEAK_FUNC(sub_8212CA90);
PPC_FUNC_IMPL(__imp__sub_8212CA90) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212cb24
	if (cr6.getEQ()) goto loc_8212CB24;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212cb24
	if (cr6.getEQ()) goto loc_8212CB24;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212cb24
	if (cr6.getEQ()) goto loc_8212CB24;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212cae0
	if (!cr6.getEQ()) goto loc_8212CAE0;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212cb24
	if (cr6.getEQ()) goto loc_8212CB24;
loc_8212CAE0:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821202a0
	sub_821202A0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8212cb08
	if (!cr6.getEQ()) goto loc_8212CB08;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821202a0
	sub_821202A0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212cb24
	if (cr6.getEQ()) goto loc_8212CB24;
loc_8212CB08:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212c5a0
	sub_8212C5A0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8212CB24:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8212CB30"))) PPC_WEAK_FUNC(sub_8212CB30);
PPC_FUNC_IMPL(__imp__sub_8212CB30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212cbc4
	if (cr6.getEQ()) goto loc_8212CBC4;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212cbc4
	if (cr6.getEQ()) goto loc_8212CBC4;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// beq cr6,0x8212cbc4
	if (cr6.getEQ()) goto loc_8212CBC4;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8212cb80
	if (!cr6.getEQ()) goto loc_8212CB80;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212cbc4
	if (cr6.getEQ()) goto loc_8212CBC4;
loc_8212CB80:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821202a0
	sub_821202A0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8212cba8
	if (!cr6.getEQ()) goto loc_8212CBA8;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821202a0
	sub_821202A0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212cbc4
	if (cr6.getEQ()) goto loc_8212CBC4;
loc_8212CBA8:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212c700
	sub_8212C700(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8212CBC4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8212CBD0"))) PPC_WEAK_FUNC(sub_8212CBD0);
PPC_FUNC_IMPL(__imp__sub_8212CBD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed544
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// fmr f27,f1
	ctx.fpscr.disableFlushMode();
	f27.f64 = ctx.f1.f64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// fmr f31,f2
	f31.f64 = ctx.f2.f64;
	// fmr f29,f3
	f29.f64 = ctx.f3.f64;
	// cmpwi cr6,r29,2
	cr6.compare<int32_t>(r29.s32, 2, xer);
	// beq cr6,0x8212cd34
	if (cr6.getEQ()) goto loc_8212CD34;
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// bl 0x82119128
	sub_82119128(ctx, base);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f13,164(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 164);
	ctx.f13.f64 = double(temp.f32);
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// fmr f30,f1
	f30.f64 = ctx.f1.f64;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// lfs f0,-6380(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -6380);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// fmuls f13,f0,f31
	ctx.f13.f64 = double(float(f0.f64 * f31.f64));
	// lfs f0,28820(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 28820);
	f0.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bne cr6,0x8212cc60
	if (!cr6.getEQ()) goto loc_8212CC60;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,80(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// lwz r4,76(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// bl 0x8212c140
	sub_8212C140(ctx, base);
	// b 0x8212cc90
	goto loc_8212CC90;
loc_8212CC60:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8212cc7c
	if (!cr6.getEQ()) goto loc_8212CC7C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,52(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// lwz r4,48(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// bl 0x8212c140
	sub_8212C140(ctx, base);
	// b 0x8212cc90
	goto loc_8212CC90;
loc_8212CC7C:
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// bl 0x82126230
	sub_82126230(ctx, base);
loc_8212CC90:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f0,f1,f29
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64 - f29.f64));
	// lfs f12,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f12.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// bge cr6,0x8212ccb0
	if (!cr6.getLT()) goto loc_8212CCB0;
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
loc_8212CCB0:
	// fcmpu cr6,f0,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f31.f64);
	// blt cr6,0x8212cd0c
	if (cr6.getLT()) goto loc_8212CD0C;
	// fsubs f11,f13,f31
	ctx.f11.f64 = double(float(ctx.f13.f64 - f31.f64));
	// fcmpu cr6,f0,f11
	cr6.compare(f0.f64, ctx.f11.f64);
	// bgt cr6,0x8212cd0c
	if (cr6.getGT()) goto loc_8212CD0C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f11,14032(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14032);
	ctx.f11.f64 = double(temp.f32);
	// fcmpu cr6,f0,f11
	cr6.compare(f0.f64, ctx.f11.f64);
	// bge cr6,0x8212ccf0
	if (!cr6.getLT()) goto loc_8212CCF0;
	// fadds f1,f31,f30
	ctx.f1.f64 = double(float(f31.f64 + f30.f64));
	// fcmpu cr6,f1,f13
	cr6.compare(ctx.f1.f64, ctx.f13.f64);
	// blt cr6,0x8212cce4
	if (cr6.getLT()) goto loc_8212CCE4;
	// fsubs f1,f1,f13
	ctx.f1.f64 = double(float(ctx.f1.f64 - ctx.f13.f64));
loc_8212CCE4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82119178
	sub_82119178(ctx, base);
	// b 0x8212cd28
	goto loc_8212CD28;
loc_8212CCF0:
	// fsubs f1,f30,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = double(float(f30.f64 - f31.f64));
	// fcmpu cr6,f1,f12
	cr6.compare(ctx.f1.f64, ctx.f12.f64);
	// bge cr6,0x8212cd00
	if (!cr6.getLT()) goto loc_8212CD00;
	// fadds f1,f1,f13
	ctx.f1.f64 = double(float(ctx.f1.f64 + ctx.f13.f64));
loc_8212CD00:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82119178
	sub_82119178(ctx, base);
	// b 0x8212cd28
	goto loc_8212CD28;
loc_8212CD0C:
	// fadds f1,f0,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = double(float(f0.f64 + f30.f64));
	// fcmpu cr6,f1,f13
	cr6.compare(ctx.f1.f64, ctx.f13.f64);
	// blt cr6,0x8212cd1c
	if (cr6.getLT()) goto loc_8212CD1C;
	// fsubs f1,f1,f13
	ctx.f1.f64 = double(float(ctx.f1.f64 - ctx.f13.f64));
loc_8212CD1C:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82119178
	sub_82119178(ctx, base);
	// li r29,3
	r29.s64 = 3;
loc_8212CD28:
	// fcmpu cr6,f28,f27
	ctx.fpscr.disableFlushMode();
	cr6.compare(f28.f64, f27.f64);
	// li r3,2
	ctx.r3.s64 = 2;
	// bge cr6,0x8212cd38
	if (!cr6.getLT()) goto loc_8212CD38;
loc_8212CD34:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
loc_8212CD38:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed590
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8212CD48"))) PPC_WEAK_FUNC(sub_8212CD48);
PPC_FUNC_IMPL(__imp__sub_8212CD48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed118
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed530
	// stwu r1,-416(r1)
	ea = -416 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	f29.f64 = ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r22,r4
	r22.u64 = ctx.r4.u64;
	// mr r20,r5
	r20.u64 = ctx.r5.u64;
	// mr r21,r6
	r21.u64 = ctx.r6.u64;
	// lbz r10,7(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 7);
	// li r26,1
	r26.s64 = 1;
	// lfs f25,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f25.f64 = double(temp.f32);
	// li r31,0
	r31.s64 = 0;
	// extsb r11,r10
	r11.s64 = ctx.r10.s8;
	// fmr f28,f25
	f28.f64 = f25.f64;
	// li r23,1
	r23.s64 = 1;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// bne cr6,0x8212cda4
	if (!cr6.getEQ()) goto loc_8212CDA4;
	// lwz r26,76(r30)
	r26.u64 = PPC_LOAD_U32(r30.u32 + 76);
	// lwz r31,80(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 80);
	// b 0x8212cdb4
	goto loc_8212CDB4;
loc_8212CDA4:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8212cdb4
	if (!cr6.getEQ()) goto loc_8212CDB4;
	// lwz r26,48(r30)
	r26.u64 = PPC_LOAD_U32(r30.u32 + 48);
	// lwz r31,52(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 52);
loc_8212CDB4:
	// rlwinm r11,r26,0,30,30
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 0) & 0x2;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8212d5b4
	if (!cr6.getEQ()) goto loc_8212D5B4;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lwz r28,24(r30)
	r28.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// addi r29,r3,12
	r29.s64 = ctx.r3.s64 + 12;
	// clrlwi r25,r26,31
	r25.u64 = r26.u32 & 0x1;
	// addi r24,r28,12
	r24.s64 = r28.s64 + 12;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// lfs f0,16(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 16);
	f0.f64 = double(temp.f32);
	// lfs f11,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f30,f11,f0
	f30.f64 = double(float(ctx.f11.f64 - f0.f64));
	// lfs f0,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f12,12(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,20(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f27,f0,f12
	f27.f64 = double(float(f0.f64 - ctx.f12.f64));
	// lfs f10,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f26,f10,f13
	f26.f64 = double(float(ctx.f10.f64 - ctx.f13.f64));
	// fmuls f0,f30,f30
	f0.f64 = double(float(f30.f64 * f30.f64));
	// fmadds f0,f26,f26,f0
	f0.f64 = double(float(f26.f64 * f26.f64 + f0.f64));
	// fmadds f22,f27,f27,f0
	f22.f64 = double(float(f27.f64 * f27.f64 + f0.f64));
	// beq cr6,0x8212ce28
	if (cr6.getEQ()) goto loc_8212CE28;
	// rlwinm r11,r26,0,25,25
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 0) & 0x40;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8212ce28
	if (!cr6.getEQ()) goto loc_8212CE28;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82122e28
	sub_82122E28(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// b 0x8212ce2c
	goto loc_8212CE2C;
loc_8212CE28:
	// li r27,1
	r27.s64 = 1;
loc_8212CE2C:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// lfs f24,16140(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16140);
	f24.f64 = double(temp.f32);
	// lfs f23,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f23.f64 = double(temp.f32);
	// beq cr6,0x8212d1f4
	if (cr6.getEQ()) goto loc_8212D1F4;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r3,-1364(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// bl 0x820b3c80
	sub_820B3C80(ctx, base);
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 20);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// rlwinm r11,r11,0,26,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212cff4
	if (cr6.getEQ()) goto loc_8212CFF4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,17772(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17772);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f22,f0
	cr6.compare(f22.f64, f0.f64);
	// bge cr6,0x8212cfa0
	if (!cr6.getLT()) goto loc_8212CFA0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// lfs f13,16(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,3060(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	ctx.f12.f64 = double(temp.f32);
	// fnmsubs f12,f31,f12,f0
	ctx.f12.f64 = double(float(-(f31.f64 * ctx.f12.f64 - f0.f64)));
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// bge cr6,0x8212cee4
	if (!cr6.getLT()) goto loc_8212CEE4;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,13964(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13964);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lfs f13,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f12,f13,f29
	ctx.f12.f64 = double(float(ctx.f13.f64 * f29.f64));
	// lfs f13,28664(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28664);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// fnmsubs f1,f0,f31,f30
	ctx.f1.f64 = double(float(-(f0.f64 * f31.f64 - f30.f64)));
	// b 0x8212d23c
	goto loc_8212D23C;
loc_8212CEE4:
	// fnmsubs f0,f31,f23,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(-(f31.f64 * f23.f64 - f0.f64)));
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x8212cf44
	if (!cr6.getGT()) goto loc_8212CF44;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,13964(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13964);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lfs f13,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f12,f13,f29
	ctx.f12.f64 = double(float(ctx.f13.f64 * f29.f64));
	// lfs f13,14396(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14396);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// fnmsubs f1,f0,f31,f30
	ctx.f1.f64 = double(float(-(f0.f64 * f31.f64 - f30.f64)));
	// b 0x8212d23c
	goto loc_8212D23C;
loc_8212CF44:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,13964(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13964);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lfs f13,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f12,f13,f29
	ctx.f12.f64 = double(float(ctx.f13.f64 * f29.f64));
	// lfs f13,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmadds f13,f12,f0,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// lfs f0,2956(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2956);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// b 0x8212d23c
	goto loc_8212D23C;
loc_8212CFA0:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,14116(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14116);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lfs f13,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f12,f13,f29
	ctx.f12.f64 = double(float(ctx.f13.f64 * f29.f64));
	// lfs f13,14404(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14404);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f0,f12,f0,f13
	f0.f64 = double(float(-(ctx.f12.f64 * f0.f64 - ctx.f13.f64)));
	// fmadds f1,f0,f31,f30
	ctx.f1.f64 = double(float(f0.f64 * f31.f64 + f30.f64));
	// b 0x8212d23c
	goto loc_8212D23C;
loc_8212CFF4:
	// fcmpu cr6,f22,f24
	ctx.fpscr.disableFlushMode();
	cr6.compare(f22.f64, f24.f64);
	// ble cr6,0x8212d0d8
	if (!cr6.getGT()) goto loc_8212D0D8;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-21846
	ctx.r10.s64 = -1431699456;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// ori r10,r10,43691
	ctx.r10.u64 = ctx.r10.u64 | 43691;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8212d084
	if (!cr0.getEQ()) goto loc_8212D084;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,13964(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13964);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lfs f13,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f12,f13,f29
	ctx.f12.f64 = double(float(ctx.f13.f64 * f29.f64));
	// lfs f13,14116(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14116);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// fmadds f1,f0,f31,f30
	ctx.f1.f64 = double(float(f0.f64 * f31.f64 + f30.f64));
	// b 0x8212d23c
	goto loc_8212D23C;
loc_8212D084:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,28664(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 28664);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lfs f13,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f12,f13,f29
	ctx.f12.f64 = double(float(ctx.f13.f64 * f29.f64));
	// lfs f13,14116(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14116);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// fnmsubs f1,f0,f31,f30
	ctx.f1.f64 = double(float(-(f0.f64 * f31.f64 - f30.f64)));
	// b 0x8212d23c
	goto loc_8212D23C;
loc_8212D0D8:
	// lfs f0,4(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// fsubs f12,f0,f31
	ctx.f12.f64 = double(float(f0.f64 - f31.f64));
	// lfs f13,16(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// bge cr6,0x8212d140
	if (!cr6.getLT()) goto loc_8212D140;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,13964(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13964);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lfs f13,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f12,f13,f29
	ctx.f12.f64 = double(float(ctx.f13.f64 * f29.f64));
	// lfs f13,28664(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28664);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// fnmsubs f1,f0,f31,f30
	ctx.f1.f64 = double(float(-(f0.f64 * f31.f64 - f30.f64)));
	// b 0x8212d23c
	goto loc_8212D23C;
loc_8212D140:
	// fnmsubs f0,f31,f23,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(-(f31.f64 * f23.f64 - f0.f64)));
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x8212d1a0
	if (!cr6.getGT()) goto loc_8212D1A0;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,13964(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13964);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lfs f13,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f12,f13,f29
	ctx.f12.f64 = double(float(ctx.f13.f64 * f29.f64));
	// lfs f13,14396(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14396);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 + ctx.f13.f64));
	// fnmsubs f1,f0,f31,f30
	ctx.f1.f64 = double(float(-(f0.f64 * f31.f64 - f30.f64)));
	// b 0x8212d23c
	goto loc_8212D23C;
loc_8212D1A0:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,13964(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13964);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lfs f13,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmuls f13,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f13.f64));
	// fmuls f12,f13,f29
	ctx.f12.f64 = double(float(ctx.f13.f64 * f29.f64));
	// lfs f13,14116(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14116);
	ctx.f13.f64 = double(temp.f32);
	// fmsubs f0,f12,f0,f13
	f0.f64 = double(float(ctx.f12.f64 * f0.f64 - ctx.f13.f64));
	// fmuls f1,f0,f31
	ctx.f1.f64 = double(float(f0.f64 * f31.f64));
	// b 0x8212d23c
	goto loc_8212D23C;
loc_8212D1F4:
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// bl 0x82119108
	sub_82119108(ctx, base);
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8212b640
	sub_8212B640(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lfs f12,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// fsubs f27,f0,f12
	f27.f64 = double(float(f0.f64 - ctx.f12.f64));
	// lfs f13,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f1,f13,f12
	ctx.f1.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lfs f0,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	f0.f64 = double(temp.f32);
	// lfs f13,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f26,f0,f13
	f26.f64 = double(float(f0.f64 - ctx.f13.f64));
loc_8212D23C:
	// rlwinm r11,r26,0,23,23
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 0) & 0x100;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,14032(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14032);
	f29.f64 = double(temp.f32);
	// lfs f30,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f30.f64 = double(temp.f32);
	// beq cr6,0x8212d260
	if (cr6.getEQ()) goto loc_8212D260;
	// fmr f28,f25
	f28.f64 = f25.f64;
	// b 0x8212d280
	goto loc_8212D280;
loc_8212D260:
	// fmuls f0,f27,f27
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f27.f64 * f27.f64));
	// fmadds f0,f26,f26,f0
	f0.f64 = double(float(f26.f64 * f26.f64 + f0.f64));
	// fsqrts f2,f0
	ctx.f2.f64 = double(float(sqrt(f0.f64)));
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// fcmpu cr6,f28,f29
	cr6.compare(f28.f64, f29.f64);
	// blt cr6,0x8212d280
	if (cr6.getLT()) goto loc_8212D280;
	// fsubs f28,f28,f30
	f28.f64 = double(float(f28.f64 - f30.f64));
loc_8212D280:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x8212d5b4
	if (cr6.getEQ()) goto loc_8212D5B4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82123f28
	sub_82123F28(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// bne cr6,0x8212d2a8
	if (!cr6.getEQ()) goto loc_8212D2A8;
	// li r4,1
	ctx.r4.s64 = 1;
loc_8212D2A8:
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212d428
	if (cr6.getEQ()) goto loc_8212D428;
	// lbz r11,1(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 1);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212d428
	if (cr6.getEQ()) goto loc_8212D428;
	// fcmpu cr6,f22,f24
	ctx.fpscr.disableFlushMode();
	cr6.compare(f22.f64, f24.f64);
	// bge cr6,0x8212d428
	if (!cr6.getLT()) goto loc_8212D428;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r31,20(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x8212d360
	if (cr6.getEQ()) goto loc_8212D360;
	// rotlwi r11,r10,0
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x82118bc8
	sub_82118BC8(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r31,4(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// addi r27,r1,160
	r27.s64 = ctx.r1.s64 + 160;
	// bl 0x8210d880
	sub_8210D880(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// lfs f0,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lfs f0,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	f0.f64 = double(temp.f32);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// stfs f0,84(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// lfs f0,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x8210b6e0
	sub_8210B6E0(ctx, base);
	// lfs f0,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	f0.f64 = double(temp.f32);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lfs f0,84(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	f0.f64 = double(temp.f32);
	// stfs f0,100(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// lfs f0,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	f0.f64 = double(temp.f32);
	// b 0x8212d3ac
	goto loc_8212D3AC;
loc_8212D360:
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8212d428
	if (cr6.getEQ()) goto loc_8212D428;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x82118bc8
	sub_82118BC8(ctx, base);
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// bl 0x8210be08
	sub_8210BE08(ctx, base);
	// addi r31,r1,160
	r31.s64 = ctx.r1.s64 + 160;
	// bl 0x8210d880
	sub_8210D880(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// lfs f0,208(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	f0.f64 = double(temp.f32);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lfs f0,212(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	f0.f64 = double(temp.f32);
	// stfs f0,100(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// lfs f0,216(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	f0.f64 = double(temp.f32);
loc_8212D3AC:
	// stfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// stfs f25,132(r1)
	temp.f32 = float(f25.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,128(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// lfs f0,0(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f13,20(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f26
	f0.f64 = double(float(f0.f64 - f26.f64));
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// fadds f0,f13,f27
	f0.f64 = double(float(ctx.f13.f64 + f27.f64));
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// addi r7,r1,144
	ctx.r7.s64 = ctx.r1.s64 + 144;
	// addi r6,r1,128
	ctx.r6.s64 = ctx.r1.s64 + 128;
	// lfs f12,16(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 16);
	ctx.f12.f64 = double(temp.f32);
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// frsp f0,f1
	f0.f64 = double(float(ctx.f1.f64));
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stfs f12,84(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// bl 0x82121b50
	sub_82121B50(ctx, base);
	// lfs f0,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f12,144(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f27,f0,f12
	f27.f64 = double(float(f0.f64 - ctx.f12.f64));
	// lfs f13,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,152(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	f0.f64 = double(temp.f32);
	// fsubs f26,f13,f0
	f26.f64 = double(float(ctx.f13.f64 - f0.f64));
loc_8212D428:
	// fmr f2,f26
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f26.f64;
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// fsubs f31,f1,f31
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(ctx.f1.f64 - f31.f64));
	// fcmpu cr6,f31,f25
	cr6.compare(f31.f64, f25.f64);
	// bge cr6,0x8212d444
	if (!cr6.getLT()) goto loc_8212D444;
	// fadds f31,f31,f30
	f31.f64 = double(float(f31.f64 + f30.f64));
loc_8212D444:
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// lfs f0,92(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 92);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f25
	cr6.compare(f0.f64, f25.f64);
	// ble cr6,0x8212d480
	if (!cr6.getGT()) goto loc_8212D480;
	// lfs f13,88(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 88);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f31,f13,f0,f31
	f31.f64 = double(float(-(ctx.f13.f64 * f0.f64 - f31.f64)));
	// fcmpu cr6,f31,f25
	cr6.compare(f31.f64, f25.f64);
	// bge cr6,0x8212d474
	if (!cr6.getLT()) goto loc_8212D474;
	// fadds f31,f31,f30
	f31.f64 = double(float(f31.f64 + f30.f64));
loc_8212D474:
	// fcmpu cr6,f31,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f30.f64);
	// blt cr6,0x8212d480
	if (cr6.getLT()) goto loc_8212D480;
	// fsubs f31,f31,f30
	f31.f64 = double(float(f31.f64 - f30.f64));
loc_8212D480:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x8212d550
	if (cr6.getEQ()) goto loc_8212D550;
	// rlwinm r11,r26,0,25,26
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 0) & 0x60;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8212d550
	if (!cr6.getEQ()) goto loc_8212D550;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r9,28(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// lhz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 0);
	// lis r7,-30584
	ctx.r7.s64 = -2004353024;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// ori r7,r7,34953
	ctx.r7.u64 = ctx.r7.u64 | 34953;
	// lwz r11,-6376(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6376);
	// lfs f0,164(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 164);
	f0.f64 = double(temp.f32);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r8
	PPC_STORE_U32(ctx.r8.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mulhw r10,r11,r7
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(ctx.r7.s32)) >> 32;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// srawi r10,r10,5
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1F) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 5;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mulli r10,r10,60
	ctx.r10.s64 = ctx.r10.s64 * 60;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,15560(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15560);
	f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f22
	ctx.f1.f64 = f22.f64;
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// bl 0x82124138
	sub_82124138(ctx, base);
	// fmuls f0,f13,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f13.f64 * ctx.f1.f64));
	// fmadds f31,f0,f23,f31
	f31.f64 = double(float(f0.f64 * f23.f64 + f31.f64));
	// fcmpu cr6,f31,f25
	cr6.compare(f31.f64, f25.f64);
	// bge cr6,0x8212d544
	if (!cr6.getLT()) goto loc_8212D544;
	// fadds f31,f31,f30
	f31.f64 = double(float(f31.f64 + f30.f64));
loc_8212D544:
	// fcmpu cr6,f31,f30
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f30.f64);
	// blt cr6,0x8212d550
	if (cr6.getLT()) goto loc_8212D550;
	// fsubs f31,f31,f30
	f31.f64 = double(float(f31.f64 - f30.f64));
loc_8212D550:
	// fcmpu cr6,f31,f29
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f29.f64);
	// blt cr6,0x8212d55c
	if (cr6.getLT()) goto loc_8212D55C;
	// fsubs f31,f31,f30
	f31.f64 = double(float(f31.f64 - f30.f64));
loc_8212D55C:
	// lwz r11,28(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// lfs f0,332(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 332);
	f0.f64 = double(temp.f32);
	// fadds f25,f0,f31
	f25.f64 = double(float(f0.f64 + f31.f64));
	// lfs f0,56(r22)
	temp.u32 = PPC_LOAD_U32(r22.u32 + 56);
	f0.f64 = double(temp.f32);
	// lbz r11,36(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212d598
	if (cr6.getEQ()) goto loc_8212D598;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f25,f0
	cr6.compare(f25.f64, f0.f64);
	// blt cr6,0x8212d5ac
	if (cr6.getLT()) goto loc_8212D5AC;
	// lfs f0,60(r22)
	temp.u32 = PPC_LOAD_U32(r22.u32 + 60);
	f0.f64 = double(temp.f32);
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f25,f0
	cr6.compare(f25.f64, f0.f64);
	// ble cr6,0x8212d5b4
	if (!cr6.getGT()) goto loc_8212D5B4;
	// b 0x8212d5ac
	goto loc_8212D5AC;
loc_8212D598:
	// fcmpu cr6,f25,f0
	ctx.fpscr.disableFlushMode();
	cr6.compare(f25.f64, f0.f64);
	// bgt cr6,0x8212d5ac
	if (cr6.getGT()) goto loc_8212D5AC;
	// lfs f0,60(r22)
	temp.u32 = PPC_LOAD_U32(r22.u32 + 60);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f25,f0
	cr6.compare(f25.f64, f0.f64);
	// bge cr6,0x8212d5b4
	if (!cr6.getLT()) goto loc_8212D5B4;
loc_8212D5AC:
	// li r23,0
	r23.s64 = 0;
	// fmr f25,f0
	ctx.fpscr.disableFlushMode();
	f25.f64 = f0.f64;
loc_8212D5B4:
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// fmr f1,f28
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f28.f64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82123ff0
	sub_82123FF0(ctx, base);
	// li r11,10
	r11.s64 = 10;
	// stfs f25,348(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f25.f64);
	PPC_STORE_U32(r30.u32 + 348, temp.u32);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// stb r11,14(r30)
	PPC_STORE_U8(r30.u32 + 14, r11.u8);
	// addi r1,r1,416
	ctx.r1.s64 = ctx.r1.s64 + 416;
	// addi r12,r1,-104
	r12.s64 = ctx.r1.s64 + -104;
	// bl 0x823ed57c
	// b 0x823ed168
	return;
}

__attribute__((alias("__imp__sub_8212D5F0"))) PPC_WEAK_FUNC(sub_8212D5F0);
PPC_FUNC_IMPL(__imp__sub_8212D5F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed110
	// addi r12,r1,-120
	r12.s64 = ctx.r1.s64 + -120;
	// bl 0x823ed538
	// stwu r1,-560(r1)
	ea = -560 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// mr r19,r4
	r19.u64 = ctx.r4.u64;
	// lwz r28,24(r23)
	r28.u64 = PPC_LOAD_U32(r23.u32 + 24);
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212db74
	if (cr6.getEQ()) goto loc_8212DB74;
	// li r21,0
	r21.s64 = 0;
	// lwz r22,8(r3)
	r22.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// mr r18,r21
	r18.u64 = r21.u64;
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lbz r10,7(r23)
	ctx.r10.u64 = PPC_LOAD_U8(r23.u32 + 7);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r11,1
	r11.s64 = 1;
	// cmplwi cr6,r10,8
	cr6.compare<uint32_t>(ctx.r10.u32, 8, xer);
	// bne cr6,0x8212d644
	if (!cr6.getEQ()) goto loc_8212D644;
	// lwz r11,76(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 76);
loc_8212D644:
	// clrlwi r25,r11,31
	r25.u64 = r11.u32 & 0x1;
	// lis r24,-32014
	r24.s64 = -2098069504;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x8212d680
	if (cr6.getEQ()) goto loc_8212D680;
	// lwz r11,-6376(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -6376);
	// lwz r10,232(r23)
	ctx.r10.u64 = PPC_LOAD_U32(r23.u32 + 232);
	// addi r11,r11,-120
	r11.s64 = r11.s64 + -120;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bge cr6,0x8212d680
	if (!cr6.getLT()) goto loc_8212D680;
	// lbz r11,128(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 128);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1120
	sub_820A1120(ctx, base);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x8212db58
	if (!cr6.getLT()) goto loc_8212DB58;
loc_8212D680:
	// add r31,r23,r19
	r31.u64 = r23.u64 + r19.u64;
	// mr r20,r21
	r20.u64 = r21.u64;
	// lbz r11,4(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stb r11,4(r31)
	PPC_STORE_U8(r31.u32 + 4, r11.u8);
	// lbz r11,128(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 128);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1120
	sub_820A1120(ctx, base);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8212d72c
	if (cr6.getLT()) goto loc_8212D72C;
	// lbz r11,128(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 128);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1120
	sub_820A1120(ctx, base);
	// lbz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// extsb r9,r3
	ctx.r9.s64 = ctx.r3.s8;
	// rotlwi r11,r10,1
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// divw r8,r10,r9
	ctx.r8.s32 = ctx.r10.s32 / ctx.r9.s32;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// mullw r8,r8,r9
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r9.s32);
	// andc r11,r9,r11
	r11.u64 = ctx.r9.u64 & ~r11.u64;
	// twllei r9,0
	// subf. r10,r8,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// twlgei r11,-1
	// bne 0x8212db48
	if (!cr0.getEQ()) goto loc_8212DB48;
	// lbz r11,128(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 128);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1120
	sub_820A1120(ctx, base);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// extsb r10,r3
	ctx.r10.s64 = ctx.r3.s8;
	// rotlwi r11,r9,1
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 1);
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// divw r8,r9,r10
	ctx.r8.s32 = ctx.r9.s32 / ctx.r10.s32;
	// andc r11,r10,r11
	r11.u64 = ctx.r10.u64 & ~r11.u64;
	// mullw r8,r8,r10
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// twllei r10,0
	// subf. r10,r8,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// twlgei r11,-1
	// beq 0x8212d72c
	if (cr0.getEQ()) goto loc_8212D72C;
	// lbz r11,128(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 128);
	// cmplwi cr6,r11,22
	cr6.compare<uint32_t>(r11.u32, 22, xer);
	// bne cr6,0x8212d730
	if (!cr6.getEQ()) goto loc_8212D730;
loc_8212D72C:
	// li r20,1
	r20.s64 = 1;
loc_8212D730:
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// mr r26,r21
	r26.u64 = r21.u64;
	// bl 0x82123f28
	sub_82123F28(ctx, base);
	// lfs f0,328(r23)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r23.u32 + 328);
	f0.f64 = double(temp.f32);
	// lfs f13,324(r23)
	temp.u32 = PPC_LOAD_U32(r23.u32 + 324);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fadds f31,f0,f13
	f31.f64 = double(float(f0.f64 + ctx.f13.f64));
	// fmr f30,f1
	f30.f64 = ctx.f1.f64;
	// lfs f24,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f24.f64 = double(temp.f32);
	// fcmpu cr6,f31,f24
	cr6.compare(f31.f64, f24.f64);
	// bge cr6,0x8212d768
	if (!cr6.getLT()) goto loc_8212D768;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fadds f31,f31,f0
	f31.f64 = double(float(f31.f64 + f0.f64));
loc_8212D768:
	// lwz r11,24(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 24);
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// li r18,1
	r18.s64 = 1;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// bl 0x82124468
	sub_82124468(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8212d82c
	if (!cr6.getEQ()) goto loc_8212D82C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,12(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// cmpwi cr6,r19,1
	cr6.compare<int32_t>(r19.s32, 1, xer);
	// lfs f13,16(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// lfs f0,3112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	f0.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// stfs f0,100(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// lfs f0,20(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,104(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// bne cr6,0x8212d7f4
	if (!cr6.getEQ()) goto loc_8212D7F4;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f13.f64 = double(temp.f32);
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// lfs f29,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f29.f64 = double(temp.f32);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f0,f0,f29,f13
	f0.f64 = double(float(f0.f64 * f29.f64 + ctx.f13.f64));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lfs f13,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// fnmsubs f0,f0,f29,f13
	f0.f64 = double(float(-(f0.f64 * f29.f64 - ctx.f13.f64)));
	// b 0x8212d828
	goto loc_8212D828;
loc_8212D7F4:
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f13.f64 = double(temp.f32);
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// lfs f29,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f29.f64 = double(temp.f32);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fnmsubs f0,f0,f29,f13
	f0.f64 = double(float(-(f0.f64 * f29.f64 - ctx.f13.f64)));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// lfs f13,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f0,f29,f13
	f0.f64 = double(float(f0.f64 * f29.f64 + ctx.f13.f64));
loc_8212D828:
	// stfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
loc_8212D82C:
	// lfs f0,172(r23)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r23.u32 + 172);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// li r8,2
	ctx.r8.s64 = 2;
	// fsubs f6,f13,f0
	ctx.f6.f64 = double(float(ctx.f13.f64 - f0.f64));
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// lfs f2,20(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 20);
	ctx.f2.f64 = double(temp.f32);
	// fmr f7,f24
	ctx.f7.f64 = f24.f64;
	// lfs f1,12(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 12);
	ctx.f1.f64 = double(temp.f32);
	// lfs f8,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f8.f64 = double(temp.f32);
	// lfs f4,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f3.f64 = double(temp.f32);
	// fmr f5,f6
	ctx.f5.f64 = ctx.f6.f64;
	// bl 0x82112020
	sub_82112020(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212db84
	if (cr6.getEQ()) goto loc_8212DB84;
	// lwz r5,124(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// stw r21,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r21.u32);
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// stw r21,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r21.u32);
	// li r29,1
	r29.s64 = 1;
	// bl 0x8212c908
	sub_8212C908(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f29,f1
	ctx.fpscr.disableFlushMode();
	f29.f64 = double(float(ctx.f1.f64));
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f29,f0,f29
	f29.f64 = double(float(f0.f64 * f29.f64));
	// stfs f29,128(r1)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// frsp f27,f0
	f27.f64 = double(float(f0.f64));
	// stfs f27,132(r1)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// frsp f28,f0
	f28.f64 = double(float(f0.f64));
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// lfs f0,16156(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16156);
	f0.f64 = double(temp.f32);
	// fmadds f12,f29,f0,f12
	ctx.f12.f64 = double(float(f29.f64 * f0.f64 + ctx.f12.f64));
	// stfs f12,112(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// lfs f12,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f12.f64 = double(temp.f32);
	// fmadds f12,f27,f0,f12
	ctx.f12.f64 = double(float(f27.f64 * f0.f64 + ctx.f12.f64));
	// stfs f12,116(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// fmuls f28,f13,f28
	f28.f64 = double(float(ctx.f13.f64 * f28.f64));
	// lfs f13,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// stfs f28,136(r1)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// fmadds f0,f28,f0,f13
	f0.f64 = double(float(f28.f64 * f0.f64 + ctx.f13.f64));
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// bl 0x8211dd98
	sub_8211DD98(ctx, base);
	// bl 0x8210f8f0
	sub_8210F8F0(ctx, base);
	// lfs f8,116(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f8.f64 = double(temp.f32);
	// lfs f6,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f6.f64 = double(temp.f32);
	// li r8,27
	ctx.r8.s64 = 27;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// lfs f4,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f3.f64 = double(temp.f32);
	// stw r30,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r30.u32);
	// lfs f2,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f2.f64 = double(temp.f32);
	// fmr f7,f8
	ctx.f7.f64 = ctx.f8.f64;
	// lfs f1,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f1.f64 = double(temp.f32);
	// fmr f5,f6
	ctx.f5.f64 = ctx.f6.f64;
	// bl 0x82112020
	sub_82112020(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lfs f25,16152(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16152);
	f25.f64 = double(temp.f32);
	// bne cr6,0x8212d9b4
	if (!cr6.getEQ()) goto loc_8212D9B4;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82110500
	sub_82110500(ctx, base);
	// addi r7,r1,112
	ctx.r7.s64 = ctx.r1.s64 + 112;
	// addi r6,r1,128
	ctx.r6.s64 = ctx.r1.s64 + 128;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82121b50
	sub_82121B50(ctx, base);
	// lfs f0,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f0.f64 = double(temp.f32);
	// fnmsubs f0,f29,f25,f0
	f0.f64 = double(float(-(f29.f64 * f25.f64 - f0.f64)));
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// lfs f0,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	f0.f64 = double(temp.f32);
	// lwz r26,124(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// fnmsubs f0,f27,f25,f0
	f0.f64 = double(float(-(f27.f64 * f25.f64 - f0.f64)));
	// stfs f0,116(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// lfs f0,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// fnmsubs f0,f28,f25,f0
	f0.f64 = double(float(-(f28.f64 * f25.f64 - f0.f64)));
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
loc_8212D9B4:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x8211dd98
	sub_8211DD98(ctx, base);
	// lfs f10,100(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f10.f64 = double(temp.f32);
	// lfs f13,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f13.f64 = double(temp.f32);
	// lbz r11,128(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 128);
	// fsubs f13,f13,f10
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f10.f64));
	// lfs f11,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// extsb r6,r11
	ctx.r6.s64 = r11.s8;
	// fsubs f0,f0,f11
	f0.f64 = double(float(f0.f64 - ctx.f11.f64));
	// lfs f9,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f9.f64 = double(temp.f32);
	// lfs f12,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f12.f64 = double(temp.f32);
	// cmpwi cr6,r6,25
	cr6.compare<int32_t>(ctx.r6.s32, 25, xer);
	// fsubs f12,f12,f9
	ctx.f12.f64 = double(float(ctx.f12.f64 - ctx.f9.f64));
	// fmuls f13,f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// fmadds f0,f0,f0,f13
	f0.f64 = double(float(f0.f64 * f0.f64 + ctx.f13.f64));
	// fmadds f26,f12,f12,f0
	f26.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + f0.f64));
	// bne cr6,0x8212dbc8
	if (!cr6.getEQ()) goto loc_8212DBC8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,17772(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17772);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// ble cr6,0x8212dbbc
	if (!cr6.getGT()) goto loc_8212DBBC;
	// li r4,86
	ctx.r4.s64 = 86;
	// li r3,202
	ctx.r3.s64 = 202;
	// bl 0x820e2be8
	sub_820E2BE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8212db48
	if (cr6.getEQ()) goto loc_8212DB48;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x8210b2b0
	sub_8210B2B0(ctx, base);
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8210b828
	sub_8210B828(ctx, base);
	// addi r4,r1,240
	ctx.r4.s64 = ctx.r1.s64 + 240;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// addi r8,r1,304
	ctx.r8.s64 = ctx.r1.s64 + 304;
	// addi r7,r1,128
	ctx.r7.s64 = ctx.r1.s64 + 128;
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// lfs f0,14040(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14040);
	f0.f64 = double(temp.f32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// fmuls f31,f29,f0
	f31.f64 = double(float(f29.f64 * f0.f64));
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// fmuls f30,f27,f0
	f30.f64 = double(float(f27.f64 * f0.f64));
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// fmuls f29,f28,f0
	f29.f64 = double(float(f28.f64 * f0.f64));
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f0,-6368(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -6368);
	f0.f64 = double(temp.f32);
	// fmuls f13,f31,f0
	ctx.f13.f64 = double(float(f31.f64 * f0.f64));
	// stfs f13,128(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// fmuls f13,f30,f0
	ctx.f13.f64 = double(float(f30.f64 * f0.f64));
	// stfs f13,132(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// fmuls f0,f29,f0
	f0.f64 = double(float(f29.f64 * f0.f64));
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// bl 0x820a16f8
	sub_820A16F8(ctx, base);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212db48
	if (cr6.getEQ()) goto loc_8212DB48;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// li r10,-1
	ctx.r10.s64 = -1;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// ori r9,r9,128
	ctx.r9.u64 = ctx.r9.u64 | 128;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// sth r10,130(r31)
	PPC_STORE_U16(r31.u32 + 130, ctx.r10.u16);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// ori r10,r10,32
	ctx.r10.u64 = ctx.r10.u64 | 32;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lfs f0,92(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 92);
	f0.f64 = double(temp.f32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stfs f0,176(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 176, temp.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lfs f0,8(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,180(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 180, temp.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stfs f31,16(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stfs f30,20(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 20, temp.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stfs f29,24(r11)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r11.u32 + 24, temp.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// addi r5,r11,152
	ctx.r5.s64 = r11.s64 + 152;
	// lwz r10,152(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 152);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8212db9c
	if (!cr6.getEQ()) goto loc_8212DB9C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,5931
	ctx.r8.s64 = 5931;
	// addi r7,r11,28484
	ctx.r7.s64 = r11.s64 + 28484;
loc_8212DB30:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
loc_8212DB48:
	// li r5,1
	ctx.r5.s64 = 1;
loc_8212DB4C:
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82123db8
	sub_82123DB8(ctx, base);
loc_8212DB58:
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212db74
	if (cr6.getEQ()) goto loc_8212DB74;
	// mr r4,r18
	ctx.r4.u64 = r18.u64;
	// bl 0x820dce70
	sub_820DCE70(ctx, base);
loc_8212DB74:
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// addi r12,r1,-120
	r12.s64 = ctx.r1.s64 + -120;
	// bl 0x823ed584
	// b 0x823ed160
	return;
loc_8212DB84:
	// lbz r11,4(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// mr r18,r21
	r18.u64 = r21.u64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// addi r11,r11,255
	r11.s64 = r11.s64 + 255;
	// stb r11,4(r31)
	PPC_STORE_U8(r31.u32 + 4, r11.u8);
	// b 0x8212db4c
	goto loc_8212DB4C;
loc_8212DB9C:
	// lwz r10,156(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 156);
	// addi r5,r11,156
	ctx.r5.s64 = r11.s64 + 156;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8212db48
	if (!cr6.getEQ()) goto loc_8212DB48;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,5933
	ctx.r8.s64 = 5933;
	// addi r7,r11,28484
	ctx.r7.s64 = r11.s64 + 28484;
	// b 0x8212db30
	goto loc_8212DB30;
loc_8212DBBC:
	// mr r18,r21
	r18.u64 = r21.u64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// b 0x8212db4c
	goto loc_8212DB4C;
loc_8212DBC8:
	// cmpwi cr6,r6,24
	cr6.compare<int32_t>(ctx.r6.s32, 24, xer);
	// bne cr6,0x8212dcac
	if (!cr6.getEQ()) goto loc_8212DCAC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,17772(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17772);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// ble cr6,0x8212dbbc
	if (!cr6.getGT()) goto loc_8212DBBC;
	// li r4,87
	ctx.r4.s64 = 87;
	// li r3,203
	ctx.r3.s64 = 203;
	// bl 0x820e2be8
	sub_820E2BE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8212db48
	if (cr6.getEQ()) goto loc_8212DB48;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x8210b2b0
	sub_8210B2B0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// lfs f0,14300(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14300);
	f0.f64 = double(temp.f32);
	// fmuls f13,f29,f0
	ctx.f13.f64 = double(float(f29.f64 * f0.f64));
	// stfs f13,128(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// fmuls f13,f27,f0
	ctx.f13.f64 = double(float(f27.f64 * f0.f64));
	// stfs f13,132(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// fmuls f0,f28,f0
	f0.f64 = double(float(f28.f64 * f0.f64));
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// bl 0x8210b828
	sub_8210B828(ctx, base);
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8210b8c8
	sub_8210B8C8(ctx, base);
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// li r11,180
	r11.s64 = 180;
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// addi r8,r1,240
	ctx.r8.s64 = ctx.r1.s64 + 240;
	// addi r7,r1,128
	ctx.r7.s64 = ctx.r1.s64 + 128;
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// sth r11,130(r31)
	PPC_STORE_U16(r31.u32 + 130, r11.u16);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a16f8
	sub_820A16F8(ctx, base);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212db48
	if (cr6.getEQ()) goto loc_8212DB48;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r10,108(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// li r9,60
	ctx.r9.s64 = 60;
	// lfs f0,14016(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14016);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f0,140(r10)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 140, temp.u32);
	// lfs f13,14012(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14012);
	ctx.f13.f64 = double(temp.f32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stfs f13,148(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 148, temp.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stw r9,188(r11)
	PPC_STORE_U32(r11.u32 + 188, ctx.r9.u32);
	// b 0x8212db48
	goto loc_8212DB48;
loc_8212DCAC:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// lis r30,-32010
	r30.s64 = -2097807360;
	// beq cr6,0x8212dd88
	if (cr6.getEQ()) goto loc_8212DD88;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x8212dd88
	if (cr6.getEQ()) goto loc_8212DD88;
	// lfs f0,16(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 16);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fsubs f12,f0,f10
	ctx.f12.f64 = double(float(f0.f64 - ctx.f10.f64));
	// lfs f13,20(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f11,f13,f11
	ctx.f11.f64 = double(float(ctx.f13.f64 - ctx.f11.f64));
	// lfs f10,12(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 12);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f10,f10,f9
	ctx.f10.f64 = double(float(ctx.f10.f64 - ctx.f9.f64));
	// lfs f0,14436(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14436);
	f0.f64 = double(temp.f32);
	// fnmsubs f13,f27,f0,f12
	ctx.f13.f64 = double(float(-(f27.f64 * f0.f64 - ctx.f12.f64)));
	// fnmsubs f12,f28,f0,f11
	ctx.f12.f64 = double(float(-(f28.f64 * f0.f64 - ctx.f11.f64)));
	// fnmsubs f0,f29,f0,f10
	f0.f64 = double(float(-(f29.f64 * f0.f64 - ctx.f10.f64)));
	// fmuls f13,f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64 * ctx.f13.f64));
	// fmadds f13,f12,f12,f13
	ctx.f13.f64 = double(float(ctx.f12.f64 * ctx.f12.f64 + ctx.f13.f64));
	// fmadds f0,f0,f0,f13
	f0.f64 = double(float(f0.f64 * f0.f64 + ctx.f13.f64));
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// blt cr6,0x8212dda8
	if (cr6.getLT()) goto loc_8212DDA8;
	// addi r5,r1,140
	ctx.r5.s64 = ctx.r1.s64 + 140;
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x821241b8
	sub_821241B8(ctx, base);
	// lwz r10,140(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cntlzw r11,r10
	r11.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r29,r11,27,31,31
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// beq cr6,0x8212dd48
	if (cr6.getEQ()) goto loc_8212DD48;
	// lbz r11,7(r23)
	r11.u64 = PPC_LOAD_U8(r23.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// beq cr6,0x8212dd40
	if (cr6.getEQ()) goto loc_8212DD40;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bne cr6,0x8212dd48
	if (!cr6.getEQ()) goto loc_8212DD48;
loc_8212DD40:
	// lwz r11,-6376(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -6376);
	// stw r11,72(r23)
	PPC_STORE_U32(r23.u32 + 72, r11.u32);
loc_8212DD48:
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8212dda8
	if (cr6.getEQ()) goto loc_8212DDA8;
	// lfs f0,12(r27)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r27.u32 + 12);
	f0.f64 = double(temp.f32);
	// li r5,-1
	ctx.r5.s64 = -1;
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lfs f0,16(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,116(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// lfs f0,20(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// lbz r11,128(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 128);
	// lwz r26,24(r27)
	r26.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a3c20
	sub_820A3C20(ctx, base);
	// lwz r4,21268(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 21268);
	// b 0x8212ddd8
	goto loc_8212DDD8;
loc_8212DD88:
	// lbz r11,7(r23)
	r11.u64 = PPC_LOAD_U8(r23.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// beq cr6,0x8212dda0
	if (cr6.getEQ()) goto loc_8212DDA0;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bne cr6,0x8212dda8
	if (!cr6.getEQ()) goto loc_8212DDA8;
loc_8212DDA0:
	// lwz r11,-6376(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -6376);
	// stw r11,72(r23)
	PPC_STORE_U32(r23.u32 + 72, r11.u32);
loc_8212DDA8:
	// lwz r4,21268(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 21268);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x8212ddc8
	if (cr6.getEQ()) goto loc_8212DDC8;
	// lbz r11,0(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x8212ddd8
	if (cr6.getEQ()) goto loc_8212DDD8;
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// beq cr6,0x8212ddd8
	if (cr6.getEQ()) goto loc_8212DDD8;
loc_8212DDC8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14056(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14056);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// blt cr6,0x8212e128
	if (cr6.getLT()) goto loc_8212E128;
loc_8212DDD8:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x8212e128
	if (cr6.getEQ()) goto loc_8212E128;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x8212de00
	if (cr6.getEQ()) goto loc_8212DE00;
	// li r4,1
	ctx.r4.s64 = 1;
	// lbz r6,3(r26)
	ctx.r6.u64 = PPC_LOAD_U8(r26.u32 + 3);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// fmr f1,f25
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f25.f64;
	// bl 0x8213d980
	sub_8213D980(ctx, base);
	// lwz r4,21268(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 21268);
loc_8212DE00:
	// lbz r11,128(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 128);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// li r5,-1
	ctx.r5.s64 = -1;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// beq cr6,0x8212e120
	if (cr6.getEQ()) goto loc_8212E120;
	// bl 0x820a3c20
	sub_820A3C20(ctx, base);
	// lwz r11,21268(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 21268);
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,3
	cr6.compare<uint32_t>(ctx.r10.u32, 3, xer);
	// bne cr6,0x8212e0d8
	if (!cr6.getEQ()) goto loc_8212E0D8;
	// lwz r10,20(r23)
	ctx.r10.u64 = PPC_LOAD_U32(r23.u32 + 20);
	// rlwinm r10,r10,0,25,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x40;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8212e128
	if (cr6.getEQ()) goto loc_8212E128;
	// lwz r31,8(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lbz r11,128(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 128);
	// extsb r29,r11
	r29.s64 = r11.s8;
	// lbz r10,11(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 11);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lwz r30,24(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// oris r11,r11,32
	r11.u64 = r11.u64 | 2097152;
	// stb r10,11(r31)
	PPC_STORE_U8(r31.u32 + 11, ctx.r10.u8);
	// rlwinm r10,r11,0,27,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8212de78
	if (cr6.getEQ()) goto loc_8212DE78;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211e0e8
	sub_8211E0E8(ctx, base);
	// b 0x8212e128
	goto loc_8212E128;
loc_8212DE78:
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8212e128
	if (cr6.getEQ()) goto loc_8212E128;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8212e128
	if (cr6.getEQ()) goto loc_8212E128;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820a10a0
	sub_820A10A0(ctx, base);
	// lfs f0,12(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f13,16(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f29
	f0.f64 = double(float(f0.f64 - f29.f64));
	// stfs f0,144(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// fsubs f0,f13,f27
	f0.f64 = double(float(ctx.f13.f64 - f27.f64));
	// lfs f12,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// stfs f0,148(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fsubs f0,f12,f28
	f0.f64 = double(float(ctx.f12.f64 - f28.f64));
	// stfs f0,152(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// bl 0x82126230
	sub_82126230(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f26,f1
	ctx.fpscr.disableFlushMode();
	f26.f64 = ctx.f1.f64;
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// lfs f25,17872(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17872);
	f25.f64 = double(temp.f32);
	// bne cr6,0x8212df80
	if (!cr6.getEQ()) goto loc_8212DF80;
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x8212df80
	if (cr6.getEQ()) goto loc_8212DF80;
	// cmpwi cr6,r11,14
	cr6.compare<int32_t>(r11.s32, 14, xer);
	// beq cr6,0x8212df80
	if (cr6.getEQ()) goto loc_8212DF80;
	// cmpwi cr6,r11,16
	cr6.compare<int32_t>(r11.s32, 16, xer);
	// beq cr6,0x8212df80
	if (cr6.getEQ()) goto loc_8212DF80;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x8212df80
	if (cr6.getEQ()) goto loc_8212DF80;
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// bne cr6,0x8212df1c
	if (!cr6.getEQ()) goto loc_8212DF1C;
	// lbz r11,89(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 89);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212df80
	if (cr6.getEQ()) goto loc_8212DF80;
loc_8212DF1C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14316(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14316);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// blt cr6,0x8212df7c
	if (cr6.getLT()) goto loc_8212DF7C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28704(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28704);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// bgt cr6,0x8212df7c
	if (cr6.getGT()) goto loc_8212DF7C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,17768(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17768);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// blt cr6,0x8212df6c
	if (cr6.getLT()) goto loc_8212DF6C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28700(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28700);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// bgt cr6,0x8212df6c
	if (cr6.getGT()) goto loc_8212DF6C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f0.f64 = double(temp.f32);
	// fmuls f31,f31,f0
	f31.f64 = double(float(f31.f64 * f0.f64));
	// b 0x8212df80
	goto loc_8212DF80;
loc_8212DF6C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,12900(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12900);
	f0.f64 = double(temp.f32);
	// fmuls f31,f31,f0
	f31.f64 = double(float(f31.f64 * f0.f64));
	// b 0x8212df80
	goto loc_8212DF80;
loc_8212DF7C:
	// fmuls f31,f31,f25
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(f31.f64 * f25.f64));
loc_8212DF80:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r10,24(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lfs f0,3060(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f0.f64 = double(temp.f32);
	// lbz r11,0(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// fmuls f31,f31,f0
	f31.f64 = double(float(f31.f64 * f0.f64));
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,6580(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f30.f64 = double(temp.f32);
	// bne cr6,0x8212e064
	if (!cr6.getEQ()) goto loc_8212E064;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212dfd0
	if (cr6.getEQ()) goto loc_8212DFD0;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212dfd0
	if (cr6.getEQ()) goto loc_8212DFD0;
	// bl 0x820ca520
	sub_820CA520(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212e004
	if (cr6.getEQ()) goto loc_8212E004;
loc_8212DFD0:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,24(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// bl 0x820c9b90
	sub_820C9B90(ctx, base);
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// fmr f3,f28
	ctx.fpscr.disableFlushMode();
	ctx.f3.f64 = f28.f64;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// fmuls f1,f31,f25
	ctx.f1.f64 = double(float(f31.f64 * f25.f64));
	// bl 0x820bed38
	sub_820BED38(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
loc_8212E004:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stfs f30,108(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// bl 0x82121f40
	sub_82121F40(ctx, base);
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82121e28
	sub_82121E28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212e0bc
	if (cr6.getEQ()) goto loc_8212E0BC;
	// lfs f1,108(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f24
	cr6.compare(ctx.f1.f64, f24.f64);
	// blt cr6,0x8212e038
	if (cr6.getLT()) goto loc_8212E038;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
loc_8212E038:
	// li r11,7
	r11.s64 = 7;
	// stfs f29,44(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r31.u32 + 44, temp.u32);
	// li r10,15
	ctx.r10.s64 = 15;
	// stfs f27,48(r31)
	temp.f32 = float(f27.f64);
	PPC_STORE_U32(r31.u32 + 48, temp.u32);
	// stfs f28,52(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// stw r29,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r29.u32);
	// stfs f26,56(r31)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(r31.u32 + 56, temp.u32);
	// stb r21,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r21.u8);
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
	// stw r10,60(r31)
	PPC_STORE_U32(r31.u32 + 60, ctx.r10.u32);
	// b 0x8212e128
	goto loc_8212E128;
loc_8212E064:
	// li r3,76
	ctx.r3.s64 = 76;
	// bl 0x82136fa0
	sub_82136FA0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8212e080
	if (!cr6.getEQ()) goto loc_8212E080;
	// lfs f0,252(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 252);
	f0.f64 = double(temp.f32);
	// fadds f0,f31,f0
	f0.f64 = double(float(f31.f64 + f0.f64));
	// stfs f0,252(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 252, temp.u32);
loc_8212E080:
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lfs f0,252(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 252);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f24
	cr6.compare(f0.f64, f24.f64);
	// ori r11,r11,256
	r11.u64 = r11.u64 | 256;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// bge cr6,0x8212e004
	if (!cr6.getLT()) goto loc_8212E004;
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// stfs f30,108(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82121e28
	sub_82121E28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8212e004
	if (!cr6.getEQ()) goto loc_8212E004;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211e0e8
	sub_8211E0E8(ctx, base);
	// b 0x8212e128
	goto loc_8212E128;
loc_8212E0BC:
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// fmr f1,f26
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f26.f64;
	// li r6,15
	ctx.r6.s64 = 15;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821286b8
	sub_821286B8(ctx, base);
	// b 0x8212e128
	goto loc_8212E128;
loc_8212E0D8:
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// beq cr6,0x8212e0e8
	if (cr6.getEQ()) goto loc_8212E0E8;
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bne cr6,0x8212e128
	if (!cr6.getEQ()) goto loc_8212E128;
loc_8212E0E8:
	// lbz r11,128(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 128);
	// extsb r31,r11
	r31.s64 = r11.s8;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r28,r1,112
	r28.s64 = ctx.r1.s64 + 112;
	// bl 0x820a10a0
	sub_820A10A0(ctx, base);
	// lwz r11,21268(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 21268);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// lwz r3,8(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// bl 0x820e7f50
	sub_820E7F50(ctx, base);
	// b 0x8212e128
	goto loc_8212E128;
loc_8212E120:
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// bl 0x820a3fc0
	sub_820A3FC0(ctx, base);
loc_8212E128:
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// beq cr6,0x8212db48
	if (cr6.getEQ()) goto loc_8212DB48;
	// lbz r11,128(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 128);
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// addi r11,r4,-4
	r11.s64 = ctx.r4.s64 + -4;
	// cmplwi cr6,r11,18
	cr6.compare<uint32_t>(r11.u32, 18, xer);
	// bgt cr6,0x8212db48
	if (cr6.getGT()) goto loc_8212DB48;
	// lis r12,-32237
	r12.s64 = -2112684032;
	// addi r12,r12,-7844
	r12.s64 = r12.s64 + -7844;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_8212E1A8;
	case 1:
		goto loc_8212E1A8;
	case 2:
		goto loc_8212E1A8;
	case 3:
		goto loc_8212E1A8;
	case 4:
		goto loc_8212E1A8;
	case 5:
		goto loc_8212E1A8;
	case 6:
		goto loc_8212E1A8;
	case 7:
		goto loc_8212E1A8;
	case 8:
		goto loc_8212E1A8;
	case 9:
		goto loc_8212E1A8;
	case 10:
		goto loc_8212E1A8;
	case 11:
		goto loc_8212DB48;
	case 12:
		goto loc_8212DB48;
	case 13:
		goto loc_8212DB48;
	case 14:
		goto loc_8212E1A8;
	case 15:
		goto loc_8212E1A8;
	case 16:
		goto loc_8212E1A8;
	case 17:
		goto loc_8212E1A8;
	case 18:
		goto loc_8212E1A8;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-9400(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -9400);
	// lwz r16,-9400(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -9400);
	// lwz r16,-9400(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -9400);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
	// lwz r16,-7768(r18)
	r16.u64 = PPC_LOAD_U32(r18.u32 + -7768);
loc_8212E1A8:
	// mulli r11,r19,44
	r11.s64 = r19.s64 * 44;
	// add r11,r11,r23
	r11.u64 = r11.u64 + r23.u64;
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// addi r3,r11,384
	ctx.r3.s64 = r11.s64 + 384;
	// bl 0x820a23f0
	sub_820A23F0(ctx, base);
	// b 0x8212db48
	goto loc_8212DB48;
}

__attribute__((alias("__imp__sub_8212E1C8"))) PPC_WEAK_FUNC(sub_8212E1C8);
PPC_FUNC_IMPL(__imp__sub_8212E1C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// andi. r11,r11,65407
	r11.u64 = r11.u64 & 65407;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rlwinm r10,r11,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// beq cr6,0x8212e208
	if (cr6.getEQ()) goto loc_8212E208;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8212d5f0
	sub_8212D5F0(ctx, base);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// andi. r11,r11,65527
	r11.u64 = r11.u64 & 65527;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
loc_8212E208:
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212e230
	if (cr6.getEQ()) goto loc_8212E230;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212d5f0
	sub_8212D5F0(ctx, base);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// andi. r11,r11,65531
	r11.u64 = r11.u64 & 65531;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
loc_8212E230:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8212E248"))) PPC_WEAK_FUNC(sub_8212E248);
PPC_FUNC_IMPL(__imp__sub_8212E248) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed538
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r28,28(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// lwz r11,68(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// lwz r10,72(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 72);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// addi r11,r11,-30
	r11.s64 = r11.s64 + -30;
	// fmr f26,f1
	ctx.fpscr.disableFlushMode();
	f26.f64 = ctx.f1.f64;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f27,12272(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 12272);
	f27.f64 = double(temp.f32);
	// lfs f24,14112(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14112);
	f24.f64 = double(temp.f32);
	// lfs f25,2692(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2692);
	f25.f64 = double(temp.f32);
	// lfs f28,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f28.f64 = double(temp.f32);
	// bge cr6,0x8212e388
	if (!cr6.getLT()) goto loc_8212E388;
	// lwz r11,84(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 84);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212e388
	if (!cr6.getEQ()) goto loc_8212E388;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,24(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,2952(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2952);
	f0.f64 = double(temp.f32);
	// fadds f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 + f0.f64));
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// ble cr6,0x8212e388
	if (!cr6.getGT()) goto loc_8212E388;
	// lfs f0,28(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// bge cr6,0x8212e388
	if (!cr6.getLT()) goto loc_8212E388;
	// lfs f0,36(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 36);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// blt cr6,0x8212e2ec
	if (cr6.getLT()) goto loc_8212E2EC;
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// bge cr6,0x8212e388
	if (!cr6.getLT()) goto loc_8212E388;
loc_8212E2EC:
	// lbz r11,54(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 54);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212e36c
	if (!cr6.getEQ()) goto loc_8212E36C;
	// bl 0x82124580
	sub_82124580(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8212e370
	if (!cr6.getEQ()) goto loc_8212E370;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f2,f24
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f24.f64;
	// fmr f1,f25
	ctx.f1.f64 = f25.f64;
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lbz r10,36(r28)
	ctx.r10.u64 = PPC_LOAD_U8(r28.u32 + 36);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// extsb r30,r10
	r30.s64 = ctx.r10.s8;
	// lfs f30,28(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28);
	f30.f64 = double(temp.f32);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// fmr f3,f27
	ctx.f3.f64 = f27.f64;
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lfs f1,20(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f28
	cr6.compare(ctx.f1.f64, f28.f64);
	// blt cr6,0x8212e370
	if (cr6.getLT()) goto loc_8212E370;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// b 0x8212e370
	goto loc_8212E370;
loc_8212E36C:
	// bl 0x82124650
	sub_82124650(ctx, base);
loc_8212E370:
	// lbz r11,52(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 52);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stb r11,51(r31)
	PPC_STORE_U8(r31.u32 + 51, r11.u8);
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// fmr f26,f1
	ctx.fpscr.disableFlushMode();
	f26.f64 = ctx.f1.f64;
loc_8212E388:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// fcmpu cr6,f26,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f26.f64, ctx.f1.f64);
	// blt cr6,0x8212e4f0
	if (cr6.getLT()) goto loc_8212E4F0;
	// lbz r11,55(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 55);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212e4d4
	if (!cr6.getEQ()) goto loc_8212E4D4;
	// lbz r11,52(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 52);
	// lbz r9,51(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 51);
	// extsb r10,r11
	ctx.r10.s64 = r11.s8;
	// extsb r11,r9
	r11.s64 = ctx.r9.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bgt cr6,0x8212e4d4
	if (cr6.getGT()) goto loc_8212E4D4;
	// bne cr6,0x8212e3d8
	if (!cr6.getEQ()) goto loc_8212E3D8;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r11,51(r31)
	PPC_STORE_U8(r31.u32 + 51, r11.u8);
	// bl 0x82124650
	sub_82124650(ctx, base);
	// b 0x8212e4e4
	goto loc_8212E4E4;
loc_8212E3D8:
	// lbz r11,49(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 49);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212e4e4
	if (cr6.getEQ()) goto loc_8212E4E4;
	// lbz r11,54(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 54);
	// fmr f29,f25
	ctx.fpscr.disableFlushMode();
	f29.f64 = f25.f64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lfs f0,32(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32);
	f0.f64 = double(temp.f32);
	// beq cr6,0x8212e41c
	if (cr6.getEQ()) goto loc_8212E41C;
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// ble cr6,0x8212e410
	if (!cr6.getGT()) goto loc_8212E410;
	// fmr f30,f0
	f30.f64 = f0.f64;
	// lfs f0,36(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 36);
	f0.f64 = double(temp.f32);
	// b 0x8212e420
	goto loc_8212E420;
loc_8212E410:
	// lfs f30,24(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24);
	f30.f64 = double(temp.f32);
	// lfs f0,36(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 36);
	f0.f64 = double(temp.f32);
	// b 0x8212e420
	goto loc_8212E420;
loc_8212E41C:
	// lfs f30,24(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24);
	f30.f64 = double(temp.f32);
loc_8212E420:
	// fcmpu cr6,f0,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f28.f64);
	// ble cr6,0x8212e430
	if (!cr6.getGT()) goto loc_8212E430;
	// fmr f31,f0
	f31.f64 = f0.f64;
	// b 0x8212e434
	goto loc_8212E434;
loc_8212E430:
	// lfs f31,28(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28);
	f31.f64 = double(temp.f32);
loc_8212E434:
	// fsubs f0,f31,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 - f30.f64));
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,14492(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14492);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x8212e454
	if (!cr6.getLT()) goto loc_8212E454;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,28828(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28828);
	ctx.f13.f64 = double(temp.f32);
	// b 0x8212e46c
	goto loc_8212E46C;
loc_8212E454:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x8212e470
	if (!cr6.getGT()) goto loc_8212E470;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,28824(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28824);
	ctx.f13.f64 = double(temp.f32);
loc_8212E46C:
	// fmuls f29,f0,f13
	ctx.fpscr.disableFlushMode();
	f29.f64 = double(float(f0.f64 * ctx.f13.f64));
loc_8212E470:
	// lbz r11,58(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 58);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212e494
	if (cr6.getEQ()) goto loc_8212E494;
	// lbz r11,59(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 59);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212e494
	if (cr6.getEQ()) goto loc_8212E494;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,3060(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f0.f64 = double(temp.f32);
	// fmuls f29,f29,f0
	f29.f64 = double(float(f29.f64 * f0.f64));
loc_8212E494:
	// stb r30,49(r31)
	PPC_STORE_U8(r31.u32 + 49, r30.u8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lbz r11,36(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 36);
	// extsb r29,r11
	r29.s64 = r11.s8;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// fmr f3,f27
	ctx.f3.f64 = f27.f64;
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// b 0x8212e4e4
	goto loc_8212E4E4;
loc_8212E4D4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82124580
	sub_82124580(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212e5c4
	if (cr6.getEQ()) goto loc_8212E5C4;
loc_8212E4E4:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// fmr f26,f1
	ctx.fpscr.disableFlushMode();
	f26.f64 = ctx.f1.f64;
loc_8212E4F0:
	// lwz r10,76(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// rlwinm r11,r10,0,25,25
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x40;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f29.f64 = double(temp.f32);
	// bne cr6,0x8212e588
	if (!cr6.getEQ()) goto loc_8212E588;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// rlwinm r10,r10,0,26,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lfs f31,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f31.f64 = double(temp.f32);
	// lfs f30,4(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 4);
	f30.f64 = double(temp.f32);
	// beq cr6,0x8212e53c
	if (cr6.getEQ()) goto loc_8212E53C;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f30,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f30.f64, ctx.f1.f64);
	// ble cr6,0x8212e53c
	if (!cr6.getGT()) goto loc_8212E53C;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
loc_8212E53C:
	// lbz r11,36(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212e554
	if (cr6.getEQ()) goto loc_8212E554;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,6588(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// fsubs f31,f0,f31
	f31.f64 = double(float(f0.f64 - f31.f64));
loc_8212E554:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f29.f64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f2,15680(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15680);
	ctx.f2.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lbz r11,48(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 48);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// bl 0x8212cbd0
	sub_8212CBD0(ctx, base);
	// stb r3,48(r31)
	PPC_STORE_U8(r31.u32 + 48, ctx.r3.u8);
loc_8212E588:
	// lwz r4,44(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lfs f0,40(r4)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 40);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// ble cr6,0x8212e5fc
	if (!cr6.getGT()) goto loc_8212E5FC;
	// lfs f0,44(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 44);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// bge cr6,0x8212e5fc
	if (!cr6.getLT()) goto loc_8212E5FC;
	// lbz r11,56(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 56);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbz r10,57(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 57);
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// extsb r6,r11
	ctx.r6.s64 = r11.s8;
	// extsb r5,r10
	ctx.r5.s64 = ctx.r10.s8;
	// bl 0x8212cd48
	sub_8212CD48(ctx, base);
	// b 0x8212e614
	goto loc_8212E614;
loc_8212E5C4:
	// lwz r11,76(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212e5dc
	if (cr6.getEQ()) goto loc_8212E5DC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82123330
	sub_82123330(ctx, base);
loc_8212E5DC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed584
	// b 0x823ed17c
	return;
loc_8212E5FC:
	// li r11,10
	r11.s64 = 10;
	// stfs f28,340(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 340, temp.u32);
	// stfs f28,336(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 336, temp.u32);
	// stfs f28,344(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 344, temp.u32);
	// stfs f28,348(r31)
	temp.f32 = float(f28.f64);
	PPC_STORE_U32(r31.u32 + 348, temp.u32);
	// stb r11,14(r31)
	PPC_STORE_U8(r31.u32 + 14, r11.u8);
loc_8212E614:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r25,r31,56
	r25.s64 = r31.s64 + 56;
	// lis r26,-32014
	r26.s64 = -2098069504;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lfs f30,13964(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 13964);
	f30.f64 = double(temp.f32);
	// li r27,1
	r27.s64 = 1;
	// lfs f31,3112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	f31.f64 = double(temp.f32);
loc_8212E634:
	// lbzx r11,r25,r30
	r11.u64 = PPC_LOAD_U8(r25.u32 + r30.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212e810
	if (cr6.getEQ()) goto loc_8212E810;
	// add r11,r30,r31
	r11.u64 = r30.u64 + r31.u64;
	// lbz r11,58(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 58);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212e764
	if (!cr6.getEQ()) goto loc_8212E764;
	// lwz r10,44(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lfs f0,24(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// blt cr6,0x8212e704
	if (cr6.getLT()) goto loc_8212E704;
	// lfs f0,28(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// bge cr6,0x8212e704
	if (!cr6.getLT()) goto loc_8212E704;
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x8212e680
	if (!cr6.getEQ()) goto loc_8212E680;
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// b 0x8212e684
	goto loc_8212E684;
loc_8212E680:
	// ori r11,r11,8
	r11.u64 = r11.u64 | 8;
loc_8212E684:
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r11,-6376(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -6376);
	// fmr f2,f28
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f28.f64;
	// lbz r9,7(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// cmplwi cr6,r9,10
	cr6.compare<uint32_t>(ctx.r9.u32, 10, xer);
	// stw r11,68(r31)
	PPC_STORE_U32(r31.u32 + 68, r11.u32);
	// bne cr6,0x8212e6dc
	if (!cr6.getEQ()) goto loc_8212E6DC;
	// lfs f0,28(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	f0.f64 = double(temp.f32);
	// lfs f13,24(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x8212e6dc
	if (!cr6.getLT()) goto loc_8212E6DC;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// lwz r10,64(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// subfic r11,r11,30
	xer.ca = r11.u32 <= 30;
	r11.s64 = 30 - r11.s64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// blt cr6,0x8212e6e8
	if (cr6.getLT()) goto loc_8212E6E8;
loc_8212E6DC:
	// fmr f1,f25
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f25.f64;
	// bl 0x8211b240
	sub_8211B240(ctx, base);
	// b 0x8212e848
	goto loc_8212E848;
loc_8212E6E8:
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8211b240
	sub_8211B240(ctx, base);
	// lwz r10,64(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// lwz r11,-6384(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -6384);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
	// b 0x8212e848
	goto loc_8212E848;
loc_8212E704:
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x8212e718
	if (!cr6.getEQ()) goto loc_8212E718;
	// andi. r11,r11,65531
	r11.u64 = r11.u64 & 65531;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// b 0x8212e71c
	goto loc_8212E71C;
loc_8212E718:
	// andi. r11,r11,65527
	r11.u64 = r11.u64 & 65527;
	cr0.compare<int32_t>(r11.s32, 0, xer);
loc_8212E71C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212e73c
	if (cr6.getEQ()) goto loc_8212E73C;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820dce70
	sub_820DCE70(ctx, base);
loc_8212E73C:
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f2,f24
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f24.f64;
	// cmplwi cr6,r11,10
	cr6.compare<uint32_t>(r11.u32, 10, xer);
	// fmr f1,f25
	ctx.f1.f64 = f25.f64;
	// bl 0x82121140
	sub_82121140(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// fmr f2,f28
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f28.f64;
	// bl 0x8211b240
	sub_8211B240(ctx, base);
	// b 0x8212e848
	goto loc_8212E848;
loc_8212E764:
	// lbz r11,49(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 49);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212e810
	if (!cr6.getEQ()) goto loc_8212E810;
	// lbz r11,50(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// beq cr6,0x8212e790
	if (cr6.getEQ()) goto loc_8212E790;
	// add r10,r11,r31
	ctx.r10.u64 = r11.u64 + r31.u64;
	// lbz r10,58(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 58);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8212e810
	if (!cr6.getEQ()) goto loc_8212E810;
loc_8212E790:
	// lwz r10,44(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lfs f0,32(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	cr6.compare(f0.f64, f28.f64);
	// blt cr6,0x8212e7b4
	if (cr6.getLT()) goto loc_8212E7B4;
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// blt cr6,0x8212e7b4
	if (cr6.getLT()) goto loc_8212E7B4;
	// lfs f13,36(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f26,f13
	cr6.compare(f26.f64, ctx.f13.f64);
	// ble cr6,0x8212e7c8
	if (!cr6.getGT()) goto loc_8212E7C8;
loc_8212E7B4:
	// fcmpu cr6,f0,f28
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f28.f64);
	// bge cr6,0x8212e810
	if (!cr6.getLT()) goto loc_8212E810;
	// lfs f0,24(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f26,f0
	cr6.compare(f26.f64, f0.f64);
	// blt cr6,0x8212e810
	if (cr6.getLT()) goto loc_8212E810;
loc_8212E7C8:
	// lbz r10,51(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 51);
	// subfic r9,r11,1
	xer.ca = r11.u32 <= 1;
	ctx.r9.s64 = 1 - r11.s64;
	// stb r27,49(r31)
	PPC_STORE_U8(r31.u32 + 49, r27.u8);
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stb r9,50(r31)
	PPC_STORE_U8(r31.u32 + 50, ctx.r9.u8);
	// stb r11,51(r31)
	PPC_STORE_U8(r31.u32 + 51, r11.u8);
	// lwz r11,-6376(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -6376);
	// stw r11,68(r31)
	PPC_STORE_U32(r31.u32 + 68, r11.u32);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// bne cr6,0x8212e804
	if (!cr6.getEQ()) goto loc_8212E804;
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// b 0x8212e848
	goto loc_8212E848;
loc_8212E804:
	// ori r11,r11,8
	r11.u64 = r11.u64 | 8;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// b 0x8212e848
	goto loc_8212E848;
loc_8212E810:
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x8212e824
	if (!cr6.getEQ()) goto loc_8212E824;
	// andi. r11,r11,65531
	r11.u64 = r11.u64 & 65531;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// b 0x8212e828
	goto loc_8212E828;
loc_8212E824:
	// andi. r11,r11,65527
	r11.u64 = r11.u64 & 65527;
	cr0.compare<int32_t>(r11.s32, 0, xer);
loc_8212E828:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212e848
	if (cr6.getEQ()) goto loc_8212E848;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820dce70
	sub_820DCE70(ctx, base);
loc_8212E848:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// ble cr6,0x8212e634
	if (!cr6.getGT()) goto loc_8212E634;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// addi r12,r1,-64
	r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823ed584
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8212E868"))) PPC_WEAK_FUNC(sub_8212E868);
PPC_FUNC_IMPL(__imp__sub_8212E868) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed548
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// lwz r11,88(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212e9b8
	if (cr6.getEQ()) goto loc_8212E9B8;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8212e958
	if (!cr6.getEQ()) goto loc_8212E958;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f29,36(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 36);
	f29.f64 = double(temp.f32);
	// lfs f30,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f30.f64 = double(temp.f32);
	// fcmpu cr6,f29,f30
	cr6.compare(f29.f64, f30.f64);
	// bge cr6,0x8212e8c0
	if (!cr6.getLT()) goto loc_8212E8C0;
	// lfs f29,28(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28);
	f29.f64 = double(temp.f32);
loc_8212E8C0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lbz r11,36(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 36);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// extsb r29,r11
	r29.s64 = r11.s8;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f29.f64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f2,f28
	ctx.f2.f64 = f28.f64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lfs f1,20(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f30
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x8212e928
	if (cr6.getLT()) goto loc_8212E928;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
loc_8212E928:
	// li r11,2
	r11.s64 = 2;
	// stfs f30,340(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 340, temp.u32);
	// li r10,10
	ctx.r10.s64 = 10;
	// stfs f30,336(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 336, temp.u32);
	// stfs f30,344(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 344, temp.u32);
	// stfs f30,348(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 348, temp.u32);
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
	// stb r10,14(r31)
	PPC_STORE_U8(r31.u32 + 14, ctx.r10.u8);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed594
	// b 0x823ed18c
	return;
loc_8212E958:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8212e9b8
	if (!cr6.getEQ()) goto loc_8212E9B8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212eb14
	if (cr6.getLT()) goto loc_8212EB14;
	// lwz r11,76(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r10,84(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// rlwinm r4,r11,0,26,24
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFBF;
	// lwz r5,80(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r4,76(r31)
	PPC_STORE_U32(r31.u32 + 76, ctx.r4.u32);
	// beq cr6,0x8212e9a4
	if (cr6.getEQ()) goto loc_8212E9A4;
	// bl 0x8212c5a0
	sub_8212C5A0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed594
	// b 0x823ed18c
	return;
loc_8212E9A4:
	// bl 0x8212c700
	sub_8212C700(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed594
	// b 0x823ed18c
	return;
loc_8212E9B8:
	// lwz r11,76(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// rlwinm r10,r11,0,26,26
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8212ea4c
	if (cr6.getEQ()) goto loc_8212EA4C;
	// rlwinm r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212ea18
	if (cr6.getEQ()) goto loc_8212EA18;
	// lbz r11,56(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 56);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbz r10,57(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 57);
	// extsb r6,r11
	ctx.r6.s64 = r11.s8;
	// lwz r4,44(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// extsb r5,r10
	ctx.r5.s64 = ctx.r10.s8;
	// lfs f1,12892(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12892);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8212cd48
	sub_8212CD48(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8212eb14
	if (!cr6.getEQ()) goto loc_8212EB14;
	// li r11,1
	r11.s64 = 1;
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed594
	// b 0x823ed18c
	return;
loc_8212EA18:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212ea4c
	if (cr6.getLT()) goto loc_8212EA4C;
	// lwz r11,76(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// li r10,2
	ctx.r10.s64 = 2;
	// ori r11,r11,64
	r11.u64 = r11.u64 | 64;
	// stb r10,48(r31)
	PPC_STORE_U8(r31.u32 + 48, ctx.r10.u8);
	// stw r11,76(r31)
	PPC_STORE_U32(r31.u32 + 76, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed594
	// b 0x823ed18c
	return;
loc_8212EA4C:
	// lbz r11,54(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 54);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212eb0c
	if (!cr6.getEQ()) goto loc_8212EB0C;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lfs f0,36(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 36);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f30.f64 = double(temp.f32);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// ble cr6,0x8212eb0c
	if (!cr6.getGT()) goto loc_8212EB0C;
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// bgt cr6,0x8212eb0c
	if (cr6.getGT()) goto loc_8212EB0C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212eb0c
	if (cr6.getLT()) goto loc_8212EB0C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,14220(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lbz r10,36(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 36);
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	f29.f64 = ctx.f1.f64;
	// extsb r29,r10
	r29.s64 = ctx.r10.s8;
	// lfs f28,36(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 36);
	f28.f64 = double(temp.f32);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f28
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f28.f64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lbz r11,55(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 55);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// beq cr6,0x8212eb00
	if (cr6.getEQ()) goto loc_8212EB00;
	// lfs f1,20(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f30
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x8212eb0c
	if (cr6.getLT()) goto loc_8212EB0C;
	// b 0x8212eb04
	goto loc_8212EB04;
loc_8212EB00:
	// lfs f1,28(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28);
	ctx.f1.f64 = double(temp.f32);
loc_8212EB04:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
loc_8212EB0C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212e248
	sub_8212E248(ctx, base);
loc_8212EB14:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// addi r12,r1,-32
	r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823ed594
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8212EB28"))) PPC_WEAK_FUNC(sub_8212EB28);
PPC_FUNC_IMPL(__imp__sub_8212EB28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed548
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lbz r11,53(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 53);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212ef2c
	if (cr6.getEQ()) goto loc_8212EF2C;
	// lwz r28,28(r29)
	r28.u64 = PPC_LOAD_U32(r29.u32 + 28);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// lis r10,-32055
	ctx.r10.s64 = -2100756480;
	// lwz r11,44(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 44);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// addi r31,r10,-24632
	r31.s64 = ctx.r10.s64 + -24632;
	// addi r10,r31,288
	ctx.r10.s64 = r31.s64 + 288;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ecf0
	if (cr6.getEQ()) goto loc_8212ECF0;
	// addi r10,r31,360
	ctx.r10.s64 = r31.s64 + 360;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ecf0
	if (cr6.getEQ()) goto loc_8212ECF0;
	// addi r10,r31,432
	ctx.r10.s64 = r31.s64 + 432;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ecf0
	if (cr6.getEQ()) goto loc_8212ECF0;
	// addi r10,r31,504
	ctx.r10.s64 = r31.s64 + 504;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ecf0
	if (cr6.getEQ()) goto loc_8212ECF0;
	// addi r10,r31,576
	ctx.r10.s64 = r31.s64 + 576;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ec28
	if (cr6.getEQ()) goto loc_8212EC28;
	// addi r10,r31,648
	ctx.r10.s64 = r31.s64 + 648;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ec28
	if (cr6.getEQ()) goto loc_8212EC28;
	// addi r10,r31,720
	ctx.r10.s64 = r31.s64 + 720;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ec28
	if (cr6.getEQ()) goto loc_8212EC28;
	// addi r10,r31,792
	ctx.r10.s64 = r31.s64 + 792;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ec28
	if (cr6.getEQ()) goto loc_8212EC28;
	// addi r10,r31,864
	ctx.r10.s64 = r31.s64 + 864;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ec28
	if (cr6.getEQ()) goto loc_8212EC28;
	// addi r10,r31,936
	ctx.r10.s64 = r31.s64 + 936;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ec28
	if (cr6.getEQ()) goto loc_8212EC28;
	// addi r10,r31,1008
	ctx.r10.s64 = r31.s64 + 1008;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ec28
	if (cr6.getEQ()) goto loc_8212EC28;
	// addi r10,r31,1080
	ctx.r10.s64 = r31.s64 + 1080;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ec28
	if (cr6.getEQ()) goto loc_8212EC28;
	// addi r10,r31,1152
	ctx.r10.s64 = r31.s64 + 1152;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ec28
	if (cr6.getEQ()) goto loc_8212EC28;
	// addi r10,r31,1224
	ctx.r10.s64 = r31.s64 + 1224;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ec28
	if (cr6.getEQ()) goto loc_8212EC28;
	// addi r10,r31,1296
	ctx.r10.s64 = r31.s64 + 1296;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8212ec28
	if (cr6.getEQ()) goto loc_8212EC28;
	// addi r10,r31,1368
	ctx.r10.s64 = r31.s64 + 1368;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x8212ef2c
	if (!cr6.getEQ()) goto loc_8212EF2C;
loc_8212EC28:
	// lbz r10,54(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 54);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8212ef2c
	if (!cr6.getEQ()) goto loc_8212EF2C;
	// lfs f0,36(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 36);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f30.f64 = double(temp.f32);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// ble cr6,0x8212ef2c
	if (!cr6.getGT()) goto loc_8212EF2C;
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// bgt cr6,0x8212ef2c
	if (cr6.getGT()) goto loc_8212EF2C;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212ef2c
	if (cr6.getLT()) goto loc_8212EF2C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lfs f31,14220(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14112(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// lwz r11,44(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 44);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lbz r10,36(r28)
	ctx.r10.u64 = PPC_LOAD_U8(r28.u32 + 36);
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	f29.f64 = ctx.f1.f64;
	// extsb r31,r10
	r31.s64 = ctx.r10.s8;
	// lfs f28,36(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 36);
	f28.f64 = double(temp.f32);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f28
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f28.f64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// fmr f2,f29
	ctx.f2.f64 = f29.f64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lbz r11,55(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 55);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,44(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 44);
	// beq cr6,0x8212ece0
	if (cr6.getEQ()) goto loc_8212ECE0;
	// lfs f1,20(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f30
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x8212ef2c
	if (cr6.getLT()) goto loc_8212EF2C;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// b 0x8212ef2c
	goto loc_8212EF2C;
loc_8212ECE0:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lfs f1,28(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// b 0x8212ef2c
	goto loc_8212EF2C;
loc_8212ECF0:
	// lfs f0,20(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// blt cr6,0x8212ef2c
	if (cr6.getLT()) goto loc_8212EF2C;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lbz r9,36(r28)
	ctx.r9.u64 = PPC_LOAD_U8(r28.u32 + 36);
	// lbz r8,57(r29)
	ctx.r8.u64 = PPC_LOAD_U8(r29.u32 + 57);
	// addi r30,r11,288
	r30.s64 = r11.s64 + 288;
	// extsb r27,r9
	r27.s64 = ctx.r9.s8;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// lfs f31,14220(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14220);
	f31.f64 = double(temp.f32);
	// beq cr6,0x8212ed48
	if (cr6.getEQ()) goto loc_8212ED48;
	// lbz r11,56(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 56);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212ed48
	if (cr6.getEQ()) goto loc_8212ED48;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212ed44
	if (!cr6.getEQ()) goto loc_8212ED44;
	// addi r30,r30,288
	r30.s64 = r30.s64 + 288;
	// b 0x8212ed48
	goto loc_8212ED48;
loc_8212ED44:
	// addi r30,r30,576
	r30.s64 = r30.s64 + 576;
loc_8212ED48:
	// addi r11,r31,576
	r11.s64 = r31.s64 + 576;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x8212ed60
	if (!cr6.getEQ()) goto loc_8212ED60;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,28808(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28808);
	f31.f64 = double(temp.f32);
	// b 0x8212ee4c
	goto loc_8212EE4C;
loc_8212ED60:
	// addi r11,r31,648
	r11.s64 = r31.s64 + 648;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x8212ed78
	if (!cr6.getEQ()) goto loc_8212ED78;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,28808(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28808);
	f31.f64 = double(temp.f32);
	// b 0x8212ee4c
	goto loc_8212EE4C;
loc_8212ED78:
	// addi r11,r31,720
	r11.s64 = r31.s64 + 720;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x8212ed90
	if (!cr6.getEQ()) goto loc_8212ED90;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,16024(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16024);
	f31.f64 = double(temp.f32);
	// b 0x8212ee4c
	goto loc_8212EE4C;
loc_8212ED90:
	// addi r11,r31,792
	r11.s64 = r31.s64 + 792;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// beq cr6,0x8212ee44
	if (cr6.getEQ()) goto loc_8212EE44;
	// addi r11,r31,864
	r11.s64 = r31.s64 + 864;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x8212edb4
	if (!cr6.getEQ()) goto loc_8212EDB4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,28808(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28808);
	f31.f64 = double(temp.f32);
	// b 0x8212ee4c
	goto loc_8212EE4C;
loc_8212EDB4:
	// addi r11,r31,936
	r11.s64 = r31.s64 + 936;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x8212edcc
	if (!cr6.getEQ()) goto loc_8212EDCC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,25492(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25492);
	f31.f64 = double(temp.f32);
	// b 0x8212ee4c
	goto loc_8212EE4C;
loc_8212EDCC:
	// addi r11,r31,1008
	r11.s64 = r31.s64 + 1008;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x8212ede4
	if (!cr6.getEQ()) goto loc_8212EDE4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,16024(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16024);
	f31.f64 = double(temp.f32);
	// b 0x8212ee4c
	goto loc_8212EE4C;
loc_8212EDE4:
	// addi r11,r31,1080
	r11.s64 = r31.s64 + 1080;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// beq cr6,0x8212ee44
	if (cr6.getEQ()) goto loc_8212EE44;
	// addi r11,r31,1152
	r11.s64 = r31.s64 + 1152;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x8212ee08
	if (!cr6.getEQ()) goto loc_8212EE08;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,28808(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28808);
	f31.f64 = double(temp.f32);
	// b 0x8212ee4c
	goto loc_8212EE4C;
loc_8212EE08:
	// addi r11,r31,1224
	r11.s64 = r31.s64 + 1224;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x8212ee20
	if (!cr6.getEQ()) goto loc_8212EE20;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,25492(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25492);
	f31.f64 = double(temp.f32);
	// b 0x8212ee4c
	goto loc_8212EE4C;
loc_8212EE20:
	// addi r11,r31,1296
	r11.s64 = r31.s64 + 1296;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x8212ee38
	if (!cr6.getEQ()) goto loc_8212EE38;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,16024(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16024);
	f31.f64 = double(temp.f32);
	// b 0x8212ee4c
	goto loc_8212EE4C;
loc_8212EE38:
	// addi r11,r31,1368
	r11.s64 = r31.s64 + 1368;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bne cr6,0x8212ee4c
	if (!cr6.getEQ()) goto loc_8212EE4C;
loc_8212EE44:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,25404(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 25404);
	f31.f64 = double(temp.f32);
loc_8212EE4C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stw r30,44(r29)
	PPC_STORE_U32(r29.u32 + 44, r30.u32);
	// li r10,2
	ctx.r10.s64 = 2;
	// li r9,0
	ctx.r9.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lfs f2,14112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r10,48(r29)
	PPC_STORE_U8(r29.u32 + 48, ctx.r10.u8);
	// stb r9,8(r29)
	PPC_STORE_U8(r29.u32 + 8, ctx.r9.u8);
	// lfs f1,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lfs f1,16(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	ctx.f1.f64 = double(temp.f32);
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lbz r11,54(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 54);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,2688
	r11.s64 = r11.s64 + 2688;
	// lfs f30,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 0);
	f30.f64 = double(temp.f32);
	// beq cr6,0x8212eec4
	if (cr6.getEQ()) goto loc_8212EEC4;
	// lfs f1,36(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 36);
	ctx.f1.f64 = double(temp.f32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// fcmpu cr6,f1,f30
	cr6.compare(ctx.f1.f64, f30.f64);
	// bge cr6,0x8212eee0
	if (!cr6.getLT()) goto loc_8212EEE0;
	// lfs f1,28(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 28);
	ctx.f1.f64 = double(temp.f32);
	// b 0x8212eee0
	goto loc_8212EEE0;
loc_8212EEC4:
	// lfs f1,32(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 32);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f30
	cr6.compare(ctx.f1.f64, f30.f64);
	// bge cr6,0x8212eedc
	if (!cr6.getLT()) goto loc_8212EEDC;
	// lfs f1,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// fcmpu cr6,f1,f30
	cr6.compare(ctx.f1.f64, f30.f64);
	// blt cr6,0x8212eee4
	if (cr6.getLT()) goto loc_8212EEE4;
loc_8212EEDC:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
loc_8212EEE0:
	// bl 0x8211d758
	sub_8211D758(ctx, base);
loc_8212EEE4:
	// lwz r11,44(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 44);
	// lfs f0,12(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// beq cr6,0x8212ef2c
	if (cr6.getEQ()) goto loc_8212EF2C;
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// stfs f31,92(r3)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r3.u32 + 92, temp.u32);
	// lwz r11,44(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 44);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// lfs f0,12(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// fdivs f0,f0,f31
	f0.f64 = double(float(f0.f64 / f31.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,88(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 88, temp.u32);
	// beq cr6,0x8212ef2c
	if (cr6.getEQ()) goto loc_8212EF2C;
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,88(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 88, temp.u32);
loc_8212EF2C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8212e248
	sub_8212E248(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed594
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8212EF48"))) PPC_WEAK_FUNC(sub_8212EF48);
PPC_FUNC_IMPL(__imp__sub_8212EF48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f30,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f30.u64);
	// stfd f31,-40(r1)
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// lbz r11,36(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 36);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r29,r11,1
	r29.u64 = r11.u64 ^ 1;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2948(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2948);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// blt cr6,0x8212efb8
	if (cr6.getLT()) goto loc_8212EFB8;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212efb8
	if (cr6.getEQ()) goto loc_8212EFB8;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r10,100(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// rlwinm r10,r10,0,21,19
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFF7FF;
	// stw r10,100(r11)
	PPC_STORE_U32(r11.u32 + 100, ctx.r10.u32);
loc_8212EFB8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28840(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28840);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// blt cr6,0x8212efdc
	if (cr6.getLT()) goto loc_8212EFDC;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212efdc
	if (cr6.getEQ()) goto loc_8212EFDC;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// li r10,180
	ctx.r10.s64 = 180;
	// sth r10,130(r11)
	PPC_STORE_U16(r11.u32 + 130, ctx.r10.u16);
loc_8212EFDC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28836(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28836);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// blt cr6,0x8212f014
	if (cr6.getLT()) goto loc_8212F014;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212f014
	if (cr6.getEQ()) goto loc_8212F014;
	// addi r11,r29,88
	r11.s64 = r29.s64 + 88;
	// li r4,3
	ctx.r4.s64 = 3;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r31
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
loc_8212F014:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	f30.f64 = ctx.f1.f64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// fcmpu cr6,f30,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f30.f64, ctx.f1.f64);
	// blt cr6,0x8212f050
	if (cr6.getLT()) goto loc_8212F050;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f30,-48(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_8212F050:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28832(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28832);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// blt cr6,0x8212f0a8
	if (cr6.getLT()) goto loc_8212F0A8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,15336(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15336);
	f30.f64 = double(temp.f32);
	// fcmpu cr6,f31,f30
	cr6.compare(f31.f64, f30.f64);
	// bgt cr6,0x8212f0a8
	if (cr6.getGT()) goto loc_8212F0A8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lfs f31,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,15680(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15680);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121140
	sub_82121140(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// fmr f2,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f1.f64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// fmr f3,f31
	ctx.f3.f64 = f31.f64;
	// bl 0x8212cbd0
	sub_8212CBD0(ctx, base);
loc_8212F0A8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f30,-48(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8212F0B8"))) PPC_WEAK_FUNC(sub_8212F0B8);
PPC_FUNC_IMPL(__imp__sub_8212F0B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f30.u64);
	// stfd f31,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r29,28(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lwz r28,24(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,48(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lbz r9,9(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// cmplwi cr6,r9,1
	cr6.compare<uint32_t>(ctx.r9.u32, 1, xer);
	// lwz r11,-6384(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6384);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r11,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r11.u32);
	// lwz r11,-6376(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -6376);
	// stw r11,200(r31)
	PPC_STORE_U32(r31.u32 + 200, r11.u32);
	// beq cr6,0x8212f3a4
	if (cr6.getEQ()) goto loc_8212F3A4;
	// lwz r11,-6376(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -6376);
	// lwz r10,204(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// addi r11,r11,-60
	r11.s64 = r11.s64 + -60;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// blt cr6,0x8212f3a4
	if (cr6.getLT()) goto loc_8212F3A4;
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// lwz r10,52(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 52);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bgt cr6,0x8212f3a4
	if (cr6.getGT()) goto loc_8212F3A4;
	// lfs f13,12(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,12(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	f0.f64 = double(temp.f32);
	// addi r4,r3,12
	ctx.r4.s64 = ctx.r3.s64 + 12;
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f13,20(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,20(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f12,f13,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lfs f13,12020(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12020);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x8212f184
	if (!cr6.getLT()) goto loc_8212F184;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f11,15444(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15444);
	ctx.f11.f64 = double(temp.f32);
	// fcmpu cr6,f0,f11
	cr6.compare(f0.f64, ctx.f11.f64);
	// ble cr6,0x8212f184
	if (!cr6.getGT()) goto loc_8212F184;
	// fcmpu cr6,f12,f13
	cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// bge cr6,0x8212f184
	if (!cr6.getLT()) goto loc_8212F184;
	// fcmpu cr6,f12,f11
	cr6.compare(ctx.f12.f64, ctx.f11.f64);
	// ble cr6,0x8212f184
	if (!cr6.getGT()) goto loc_8212F184;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82123330
	sub_82123330(ctx, base);
	// b 0x8212f460
	goto loc_8212F460;
loc_8212F184:
	// addi r6,r31,84
	ctx.r6.s64 = r31.s64 + 84;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82124710
	sub_82124710(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212f1a4
	if (cr6.getEQ()) goto loc_8212F1A4;
	// li r11,1
	r11.s64 = 1;
	// stw r11,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r11.u32);
loc_8212F1A4:
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// cmpwi cr6,r11,20
	cr6.compare<int32_t>(r11.s32, 20, xer);
	// ble cr6,0x8212f1d8
	if (!cr6.getGT()) goto loc_8212F1D8;
	// lbz r11,72(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 72);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbz r10,73(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 73);
	// extsb r6,r11
	ctx.r6.s64 = r11.s8;
	// lwz r4,60(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// extsb r5,r10
	ctx.r5.s64 = ctx.r10.s8;
	// lfs f1,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8212cd48
	sub_8212CD48(ctx, base);
	// b 0x8212f1f8
	goto loc_8212F1F8;
loc_8212F1D8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,10
	ctx.r10.s64 = 10;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// stfs f0,340(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 340, temp.u32);
	// stb r10,14(r31)
	PPC_STORE_U8(r31.u32 + 14, ctx.r10.u8);
	// stfs f0,336(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 336, temp.u32);
	// stfs f0,344(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 344, temp.u32);
	// stfs f0,348(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 348, temp.u32);
loc_8212F1F8:
	// lwz r11,56(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212f344
	if (cr6.getEQ()) goto loc_8212F344;
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// cmpwi cr6,r11,30
	cr6.compare<int32_t>(r11.s32, 30, xer);
	// ble cr6,0x8212f344
	if (!cr6.getGT()) goto loc_8212F344;
	// li r30,0
	r30.s64 = 0;
	// addi r29,r31,72
	r29.s64 = r31.s64 + 72;
loc_8212F218:
	// lbzx r11,r29,r30
	r11.u64 = PPC_LOAD_U8(r29.u32 + r30.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212f2f0
	if (cr6.getEQ()) goto loc_8212F2F0;
	// add r11,r30,r31
	r11.u64 = r30.u64 + r31.u64;
	// lbz r11,74(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 74);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212f24c
	if (!cr6.getEQ()) goto loc_8212F24C;
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x8212f2e4
	if (!cr6.getEQ()) goto loc_8212F2E4;
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// b 0x8212f328
	goto loc_8212F328;
loc_8212F24C:
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// lwz r10,64(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// ble cr6,0x8212f2f0
	if (!cr6.getGT()) goto loc_8212F2F0;
	// lwz r10,68(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// cmpw cr6,r30,r10
	cr6.compare<int32_t>(r30.s32, ctx.r10.s32, xer);
	// beq cr6,0x8212f278
	if (cr6.getEQ()) goto loc_8212F278;
	// add r9,r10,r31
	ctx.r9.u64 = ctx.r10.u64 + r31.u64;
	// lbz r9,74(r9)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r9.u32 + 74);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8212f2f0
	if (!cr6.getEQ()) goto loc_8212F2F0;
loc_8212F278:
	// subf r9,r30,r31
	ctx.r9.s64 = r31.s64 - r30.s64;
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
	// lbz r9,75(r9)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r9.u32 + 75);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// add r9,r30,r31
	ctx.r9.u64 = r30.u64 + r31.u64;
	// lbz r9,76(r9)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r9.u32 + 76);
	// beq cr6,0x8212f2ac
	if (cr6.getEQ()) goto loc_8212F2AC;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x8212f2a4
	if (cr6.getEQ()) goto loc_8212F2A4;
	// addi r11,r11,90
	r11.s64 = r11.s64 + 90;
	// b 0x8212f2c0
	goto loc_8212F2C0;
loc_8212F2A4:
	// addi r11,r11,20
	r11.s64 = r11.s64 + 20;
	// b 0x8212f2c0
	goto loc_8212F2C0;
loc_8212F2AC:
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x8212f2bc
	if (cr6.getEQ()) goto loc_8212F2BC;
	// addi r11,r11,180
	r11.s64 = r11.s64 + 180;
	// b 0x8212f2c0
	goto loc_8212F2C0;
loc_8212F2BC:
	// addi r11,r11,40
	r11.s64 = r11.s64 + 40;
loc_8212F2C0:
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
	// subfic r11,r10,1
	xer.ca = ctx.r10.u32 <= 1;
	r11.s64 = 1 - ctx.r10.s64;
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// stw r11,68(r31)
	PPC_STORE_U32(r31.u32 + 68, r11.u32);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// bne cr6,0x8212f2e4
	if (!cr6.getEQ()) goto loc_8212F2E4;
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// b 0x8212f328
	goto loc_8212F328;
loc_8212F2E4:
	// ori r11,r11,8
	r11.u64 = r11.u64 | 8;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// b 0x8212f328
	goto loc_8212F328;
loc_8212F2F0:
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x8212f304
	if (!cr6.getEQ()) goto loc_8212F304;
	// andi. r11,r11,65531
	r11.u64 = r11.u64 & 65531;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// b 0x8212f308
	goto loc_8212F308;
loc_8212F304:
	// andi. r11,r11,65527
	r11.u64 = r11.u64 & 65527;
	cr0.compare<int32_t>(r11.s32, 0, xer);
loc_8212F308:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212f328
	if (cr6.getEQ()) goto loc_8212F328;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820dce70
	sub_820DCE70(ctx, base);
loc_8212F328:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// ble cr6,0x8212f218
	if (!cr6.getGT()) goto loc_8212F218;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_8212F344:
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// andi. r11,r11,65531
	r11.u64 = r11.u64 & 65531;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212f36c
	if (cr6.getEQ()) goto loc_8212F36C;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820dce70
	sub_820DCE70(ctx, base);
loc_8212F36C:
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// andi. r11,r11,65527
	r11.u64 = r11.u64 & 65527;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8212f470
	if (cr6.getEQ()) goto loc_8212F470;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820dce70
	sub_820DCE70(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
loc_8212F3A4:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lhz r11,4(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 4);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f30.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// ble cr6,0x8212f3fc
	if (!cr6.getGT()) goto loc_8212F3FC;
	// lfs f2,14220(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// b 0x8212f42c
	goto loc_8212F42C;
loc_8212F3FC:
	// lfs f31,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	f31.f64 = double(temp.f32);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lhz r11,4(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 4);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f1,f0,f30
	ctx.f1.f64 = double(float(f0.f64 * f30.f64));
loc_8212F42C:
	// bl 0x8211b278
	sub_8211B278(ctx, base);
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lwz r10,-6376(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -6376);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// stw r10,212(r31)
	PPC_STORE_U32(r31.u32 + 212, ctx.r10.u32);
	// lfs f0,12(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// stfs f0,216(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 216, temp.u32);
	// lfs f0,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,220(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 220, temp.u32);
	// lfs f0,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	f0.f64 = double(temp.f32);
	// stfs f0,224(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 224, temp.u32);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,228(r31)
	PPC_STORE_U32(r31.u32 + 228, r11.u32);
loc_8212F460:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r11,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r11.u32);
loc_8212F470:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f30,-56(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f31,-48(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8212F480"))) PPC_WEAK_FUNC(sub_8212F480);
PPC_FUNC_IMPL(__imp__sub_8212F480) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stfd f31,-80(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -80, f31.u64);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// li r29,0
	r29.s64 = 0;
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// lwz r10,204(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r25,24(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// stw r11,132(r31)
	PPC_STORE_U32(r31.u32 + 132, r11.u32);
	// lwz r11,-6376(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -6376);
	// stw r11,200(r31)
	PPC_STORE_U32(r31.u32 + 200, r11.u32);
	// lwz r11,-6376(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -6376);
	// addi r11,r11,-60
	r11.s64 = r11.s64 + -60;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bge cr6,0x8212f4d8
	if (!cr6.getLT()) goto loc_8212F4D8;
	// addi r4,r31,44
	ctx.r4.s64 = r31.s64 + 44;
	// lbz r6,89(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 89);
	// lwz r5,56(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// bl 0x82129b68
	sub_82129B68(ctx, base);
loc_8212F4D8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212c860
	sub_8212C860(ctx, base);
	// lbz r11,92(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 92);
	// addi r24,r31,92
	r24.s64 = r31.s64 + 92;
	// li r27,1
	r27.s64 = 1;
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// beq cr6,0x8212f540
	if (cr6.getEQ()) goto loc_8212F540;
	// lwz r11,156(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 156);
	// addi r10,r11,180
	ctx.r10.s64 = r11.s64 + 180;
	// lwz r11,-6376(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -6376);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bge cr6,0x8212f540
	if (!cr6.getLT()) goto loc_8212F540;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122450
	sub_82122450(ctx, base);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x82122310
	sub_82122310(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212f540
	if (cr6.getEQ()) goto loc_8212F540;
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r29,r27
	r29.u64 = r27.u64;
	// bl 0x821223b8
	sub_821223B8(ctx, base);
loc_8212F540:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11200);
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bge cr6,0x8212f6ec
	if (!cr6.getLT()) goto loc_8212F6EC;
	// lbz r11,0(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 0);
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// bne cr6,0x8212f5e4
	if (!cr6.getEQ()) goto loc_8212F5E4;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122450
	sub_82122450(ctx, base);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// lwz r29,80(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bne cr6,0x8212f5b8
	if (!cr6.getEQ()) goto loc_8212F5B8;
	// lbz r11,1(r25)
	r11.u64 = PPC_LOAD_U8(r25.u32 + 1);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8212f59c
	if (!cr6.getEQ()) goto loc_8212F59C;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// bl 0x82122310
	sub_82122310(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8212f5b8
	if (!cr6.getEQ()) goto loc_8212F5B8;
loc_8212F59C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821226f0
	sub_821226F0(ctx, base);
	// lwz r11,-6376(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -6376);
	// stw r11,156(r31)
	PPC_STORE_U32(r31.u32 + 156, r11.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f31,-80(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// b 0x823ed178
	return;
loc_8212F5B8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r30,r1,88
	r30.s64 = ctx.r1.s64 + 88;
	// bl 0x821224c8
	sub_821224C8(ctx, base);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// bl 0x82129918
	sub_82129918(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f31,-80(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// b 0x823ed178
	return;
loc_8212F5E4:
	// lbz r11,88(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 88);
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// addi r28,r25,12
	r28.s64 = r25.s64 + 12;
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// addi r26,r10,928
	r26.s64 = ctx.r10.s64 + 928;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r3,r31,188
	ctx.r3.s64 = r31.s64 + 188;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212f6d4
	if (cr6.getEQ()) goto loc_8212F6D4;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,3112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	ctx.f1.f64 = double(temp.f32);
	// mulli r11,r10,44
	r11.s64 = ctx.r10.s64 * 44;
	// lwz r10,24(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// add r5,r11,r10
	ctx.r5.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x82124950
	sub_82124950(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212f63c
	if (cr6.getEQ()) goto loc_8212F63C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122748
	sub_82122748(ctx, base);
loc_8212F63C:
	// lis r10,26214
	ctx.r10.s64 = 1717960704;
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// ori r29,r10,26215
	r29.u64 = ctx.r10.u64 | 26215;
	// mulhw r10,r11,r29
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r29.s32)) >> 32;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,15468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15468);
	f31.f64 = double(temp.f32);
	// bne cr6,0x8212f764
	if (!cr6.getEQ()) goto loc_8212F764;
	// lbz r11,88(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 88);
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r31
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r31.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8212f764
	if (cr6.getEQ()) goto loc_8212F764;
	// addi r10,r11,17
	ctx.r10.s64 = r11.s64 + 17;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r31
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r31.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8212f764
	if (cr6.getEQ()) goto loc_8212F764;
	// addi r11,r11,18
	r11.s64 = r11.s64 + 18;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212f704
	if (cr6.getEQ()) goto loc_8212F704;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r10,24(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// mulli r11,r11,44
	r11.s64 = r11.s64 * 44;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mr r30,r11
	r30.u64 = r11.u64;
	// lwz r7,40(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// b 0x8212f70c
	goto loc_8212F70C;
loc_8212F6D4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r31,44
	ctx.r5.s64 = r31.s64 + 44;
	// lfs f1,3112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3112);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82124950
	sub_82124950(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212f63c
	if (cr6.getEQ()) goto loc_8212F63C;
loc_8212F6EC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82127808
	sub_82127808(ctx, base);
	// stw r27,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r27.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f31,-80(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// b 0x823ed178
	return;
loc_8212F704:
	// lwz r7,56(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// addi r30,r31,44
	r30.s64 = r31.s64 + 44;
loc_8212F70C:
	// li r8,16
	ctx.r8.s64 = 16;
	// lwz r5,24(r25)
	ctx.r5.u64 = PPC_LOAD_U32(r25.u32 + 24);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82124a20
	sub_82124A20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212f764
	if (cr6.getEQ()) goto loc_8212F764;
	// lfs f0,36(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 36);
	f0.f64 = double(temp.f32);
	// li r8,16
	ctx.r8.s64 = 16;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// lwz r5,24(r25)
	ctx.r5.u64 = PPC_LOAD_U32(r25.u32 + 24);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// fmuls f1,f0,f31
	ctx.f1.f64 = double(float(f0.f64 * f31.f64));
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82124ad8
	sub_82124AD8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212f764
	if (cr6.getEQ()) goto loc_8212F764;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122748
	sub_82122748(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122748
	sub_82122748(ctx, base);
loc_8212F764:
	// lwz r11,132(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// mulhw r10,r11,r29
	ctx.r10.s64 = (int64_t(r11.s32) * int64_t(r29.s32)) >> 32;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8212f82c
	if (!cr0.getEQ()) goto loc_8212F82C;
	// lbz r11,88(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 88);
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r31
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r31.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8212f82c
	if (cr6.getEQ()) goto loc_8212F82C;
	// addi r11,r11,17
	r11.s64 = r11.s64 + 17;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212f7d4
	if (cr6.getEQ()) goto loc_8212F7D4;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r10,24(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// mulli r11,r11,44
	r11.s64 = r11.s64 * 44;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mr r30,r11
	r30.u64 = r11.u64;
	// lwz r7,40(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// b 0x8212f7dc
	goto loc_8212F7DC;
loc_8212F7D4:
	// lwz r7,56(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// addi r30,r31,44
	r30.s64 = r31.s64 + 44;
loc_8212F7DC:
	// li r8,16
	ctx.r8.s64 = 16;
	// lwz r5,24(r25)
	ctx.r5.u64 = PPC_LOAD_U32(r25.u32 + 24);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82124a20
	sub_82124A20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212f82c
	if (cr6.getEQ()) goto loc_8212F82C;
	// lfs f0,36(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 36);
	f0.f64 = double(temp.f32);
	// li r8,16
	ctx.r8.s64 = 16;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// lwz r5,24(r25)
	ctx.r5.u64 = PPC_LOAD_U32(r25.u32 + 24);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// fmuls f1,f0,f31
	ctx.f1.f64 = double(float(f0.f64 * f31.f64));
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82124ad8
	sub_82124AD8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8212f82c
	if (cr6.getEQ()) goto loc_8212F82C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82122748
	sub_82122748(ctx, base);
loc_8212F82C:
	// lbz r11,88(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 88);
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8212f85c
	if (cr6.getEQ()) goto loc_8212F85C;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r10,24(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// mulli r11,r11,44
	r11.s64 = r11.s64 * 44;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r5,40(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// b 0x8212f864
	goto loc_8212F864;
loc_8212F85C:
	// lwz r5,56(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// addi r11,r31,44
	r11.s64 = r31.s64 + 44;
loc_8212F864:
	// mr r6,r24
	ctx.r6.u64 = r24.u64;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821258f0
	sub_821258F0(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f31,-80(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_8212F880"))) PPC_WEAK_FUNC(sub_8212F880);
PPC_FUNC_IMPL(__imp__sub_8212F880) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed53c
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lbz r11,8(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 8);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x8212ffd4
	if (cr6.getGT()) goto loc_8212FFD4;
	// lwz r11,44(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 44);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212f8fc
	if (cr6.getEQ()) goto loc_8212F8FC;
	// lwz r3,28(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 28);
	// bl 0x8211af98
	sub_8211AF98(ctx, base);
	// lwz r3,28(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 28);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8211afa0
	sub_8211AFA0(ctx, base);
	// li r27,0
	r27.s64 = 0;
	// fcmpu cr6,f31,f1
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, ctx.f1.f64);
	// blt cr6,0x8212f8e8
	if (cr6.getLT()) goto loc_8212F8E8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lfs f1,12272(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12272);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121008
	sub_82121008(ctx, base);
	// stw r27,44(r28)
	PPC_STORE_U32(r28.u32 + 44, r27.u32);
loc_8212F8E8:
	// stb r27,8(r28)
	PPC_STORE_U8(r28.u32 + 8, r27.u8);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed588
	// b 0x823ed174
	return;
loc_8212F8FC:
	// lwz r4,48(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + 48);
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x8212fb14
	if (!cr6.getGT()) goto loc_8212FB14;
	// lwz r11,56(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 56);
	// li r27,0
	r27.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212f9a4
	if (cr6.getEQ()) goto loc_8212F9A4;
	// lwz r3,28(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 28);
	// bl 0x823dc210
	sub_823DC210(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r4,60(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + 60);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lfs f3,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f3.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f2.f64 = double(temp.f32);
	// lhz r11,4(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 4);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8212cbd0
	sub_8212CBD0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// stw r3,60(r28)
	PPC_STORE_U32(r28.u32 + 60, ctx.r3.u32);
	// beq cr6,0x8212f990
	if (cr6.getEQ()) goto loc_8212F990;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lfs f1,12272(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12272);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82121008
	sub_82121008(ctx, base);
	// stw r27,56(r28)
	PPC_STORE_U32(r28.u32 + 56, r27.u32);
loc_8212F97C:
	// lwz r11,48(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 48);
	// rlwinm r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212f990
	if (cr6.getEQ()) goto loc_8212F990;
	// stw r27,48(r28)
	PPC_STORE_U32(r28.u32 + 48, r27.u32);
loc_8212F990:
	// stb r27,8(r28)
	PPC_STORE_U8(r28.u32 + 8, r27.u8);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed588
	// b 0x823ed174
	return;
loc_8212F9A4:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r5,52(r28)
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + 52);
	// bl 0x8212c140
	sub_8212C140(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,17864(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17864);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// ble cr6,0x8212f97c
	if (!cr6.getGT()) goto loc_8212F97C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,28852(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28852);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x8212f97c
	if (!cr6.getLT()) goto loc_8212F97C;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// stw r11,56(r28)
	PPC_STORE_U32(r28.u32 + 56, r11.u32);
	// stw r11,60(r28)
	PPC_STORE_U32(r28.u32 + 60, r11.u32);
	// beq cr6,0x8212fa10
	if (cr6.getEQ()) goto loc_8212FA10;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8212fa18
	if (!cr6.getEQ()) goto loc_8212FA18;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// b 0x8212fa8c
	goto loc_8212FA8C;
loc_8212FA10:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8212fa88
	if (!cr6.getEQ()) goto loc_8212FA88;
loc_8212FA18:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// clrlwi r5,r3,31
	ctx.r5.u64 = ctx.r3.u32 & 0x1;
	// lwz r3,28(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 28);
	// addi r31,r11,76
	r31.s64 = r11.s64 + 76;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lfs f3,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f3.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lhz r11,4(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// lwz r3,28(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 28);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// stb r27,8(r28)
	PPC_STORE_U8(r28.u32 + 8, r27.u8);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed588
	// b 0x823ed174
	return;
loc_8212FA88:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
loc_8212FA8C:
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// li r4,256
	ctx.r4.s64 = 256;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820a1230
	sub_820A1230(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8212fa18
	if (!cr6.getEQ()) goto loc_8212FA18;
	// lis r11,-32056
	r11.s64 = -2100822016;
	// lwz r3,28(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 28);
	// cntlzw r10,r31
	ctx.r10.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// addi r31,r11,-16852
	r31.s64 = r11.s64 + -16852;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// xori r5,r10,1
	ctx.r5.u64 = ctx.r10.u64 ^ 1;
	// lfs f3,14220(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14220);
	ctx.f3.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// lhz r11,4(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// lwz r3,28(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 28);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8211d758
	sub_8211D758(ctx, base);
	// stb r27,8(r28)
	PPC_STORE_U8(r28.u32 + 8, r27.u8);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed588
	// b 0x823ed174
	return;
loc_8212FB14:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-13108
	ctx.r10.s64 = -859045888;
	// lwz r9,64(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 64);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// ori r10,r10,52429
	ctx.r10.u64 = ctx.r10.u64 | 52429;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,14
	r11.s64 = r11.s64 + 14;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// stb r11,8(r28)
	PPC_STORE_U8(r28.u32 + 8, r11.u8);
	// beq cr6,0x8212ffd4
	if (cr6.getEQ()) goto loc_8212FFD4;
	// lwz r10,20(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// rlwinm r10,r10,0,24,24
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8212fb84
	if (cr6.getEQ()) goto loc_8212FB84;
	// li r11,0
	r11.s64 = 0;
	// stw r11,64(r28)
	PPC_STORE_U32(r28.u32 + 64, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed588
	// b 0x823ed174
	return;
loc_8212FB84:
	// lwz r10,68(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 68);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// subf. r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,68(r28)
	PPC_STORE_U32(r28.u32 + 68, r11.u32);
	// bge 0x8212ffd4
	if (!cr0.getLT()) goto loc_8212FFD4;
	// lwz r3,28(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 28);
	// bl 0x82119128
	sub_82119128(ctx, base);
	// fmr f25,f1
	ctx.fpscr.disableFlushMode();
	f25.f64 = ctx.f1.f64;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f27,14108(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 14108);
	f27.f64 = double(temp.f32);
	// addi r30,r1,128
	r30.s64 = ctx.r1.s64 + 128;
	// lfs f30,6588(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 6588);
	f30.f64 = double(temp.f32);
	// li r31,8
	r31.s64 = 8;
	// lfs f26,14156(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14156);
	f26.f64 = double(temp.f32);
	// lfs f28,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f28.f64 = double(temp.f32);
	// lfs f29,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f29.f64 = double(temp.f32);
	// fmr f31,f25
	f31.f64 = f25.f64;
loc_8212FBD8:
	// fadds f31,f31,f26
	ctx.fpscr.disableFlushMode();
	f31.f64 = double(float(f31.f64 + f26.f64));
	// fcmpu cr6,f31,f30
	cr6.compare(f31.f64, f30.f64);
	// blt cr6,0x8212fbe8
	if (cr6.getLT()) goto loc_8212FBE8;
	// fsubs f31,f31,f30
	f31.f64 = double(float(f31.f64 - f30.f64));
loc_8212FBE8:
	// li r6,0
	ctx.r6.s64 = 0;
	// lwz r3,24(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 24);
	// fmr f4,f29
	ctx.fpscr.disableFlushMode();
	ctx.f4.f64 = f29.f64;
	// fmr f3,f28
	ctx.f3.f64 = f28.f64;
	// fmr f2,f27
	ctx.f2.f64 = f27.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x82121d00
	sub_82121D00(ctx, base);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// stfs f1,0(r30)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r30.u32 + 0, temp.u32);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8212fbd8
	if (!cr6.getEQ()) goto loc_8212FBD8;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r27,0
	r27.s64 = 0;
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r27.u32);
	// li r31,7
	r31.s64 = 7;
	// subfic r29,r11,4
	xer.ca = r11.u32 <= 4;
	r29.s64 = 4 - r11.s64;
	// stw r10,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r10.u32);
	// li r10,3
	ctx.r10.s64 = 3;
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// li r10,4
	ctx.r10.s64 = 4;
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// li r10,5
	ctx.r10.s64 = 5;
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// li r10,6
	ctx.r10.s64 = 6;
	// stw r10,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r10.u32);
	// li r10,7
	ctx.r10.s64 = 7;
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
loc_8212FC6C:
	// addi r30,r8,1
	r30.s64 = ctx.r8.s64 + 1;
	// cmpwi cr6,r31,4
	cr6.compare<int32_t>(r31.s32, 4, xer);
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// blt cr6,0x8212fd90
	if (cr6.getLT()) goto loc_8212FD90;
	// add r11,r29,r3
	r11.u64 = r29.u64 + ctx.r3.u64;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// addi r7,r1,100
	ctx.r7.s64 = ctx.r1.s64 + 100;
	// addi r6,r1,100
	ctx.r6.s64 = ctx.r1.s64 + 100;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// subfic r5,r7,8
	xer.ca = ctx.r7.u32 <= 8;
	ctx.r5.s64 = 8 - ctx.r7.s64;
	// subfic r4,r6,12
	xer.ca = ctx.r6.u32 <= 12;
	ctx.r4.s64 = 12 - ctx.r6.s64;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r7,r9
	ctx.r7.u64 = ctx.r9.u64;
	// addi r6,r9,4
	ctx.r6.s64 = ctx.r9.s64 + 4;
loc_8212FCA4:
	// addi r26,r1,96
	r26.s64 = ctx.r1.s64 + 96;
	// addi r9,r1,100
	ctx.r9.s64 = ctx.r1.s64 + 100;
	// addi r24,r1,128
	r24.s64 = ctx.r1.s64 + 128;
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// addi r25,r1,128
	r25.s64 = ctx.r1.s64 + 128;
	// lwzx r26,r11,r26
	r26.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// rlwinm r26,r26,2,0,29
	r26.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f0,r26,r24
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + r24.u32);
	f0.f64 = double(temp.f32);
	// lwz r26,-4(r9)
	r26.u64 = PPC_LOAD_U32(ctx.r9.u32 + -4);
	// rlwinm r26,r26,2,0,29
	r26.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f13,r26,r25
	temp.u32 = PPC_LOAD_U32(r26.u32 + r25.u32);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x8212fce0
	if (!cr6.getLT()) goto loc_8212FCE0;
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
loc_8212FCE0:
	// addi r26,r1,96
	r26.s64 = ctx.r1.s64 + 96;
	// lwz r25,0(r9)
	r25.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// addi r24,r1,128
	r24.s64 = ctx.r1.s64 + 128;
	// rlwinm r25,r25,2,0,29
	r25.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r23,r1,128
	r23.s64 = ctx.r1.s64 + 128;
	// lwzx r26,r11,r26
	r26.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// rlwinm r26,r26,2,0,29
	r26.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f0,r25,r24
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + r24.u32);
	f0.f64 = double(temp.f32);
	// lfsx f13,r26,r23
	temp.u32 = PPC_LOAD_U32(r26.u32 + r23.u32);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x8212fd14
	if (!cr6.getLT()) goto loc_8212FD14;
	// addi r8,r10,1
	ctx.r8.s64 = ctx.r10.s64 + 1;
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
loc_8212FD14:
	// addi r26,r1,96
	r26.s64 = ctx.r1.s64 + 96;
	// lwz r25,4(r9)
	r25.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// addi r24,r1,128
	r24.s64 = ctx.r1.s64 + 128;
	// rlwinm r25,r25,2,0,29
	r25.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r23,r1,128
	r23.s64 = ctx.r1.s64 + 128;
	// lwzx r26,r11,r26
	r26.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// rlwinm r26,r26,2,0,29
	r26.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f0,r25,r24
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + r24.u32);
	f0.f64 = double(temp.f32);
	// lfsx f13,r26,r23
	temp.u32 = PPC_LOAD_U32(r26.u32 + r23.u32);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x8212fd48
	if (!cr6.getLT()) goto loc_8212FD48;
	// addi r8,r10,2
	ctx.r8.s64 = ctx.r10.s64 + 2;
	// add r11,r5,r9
	r11.u64 = ctx.r5.u64 + ctx.r9.u64;
loc_8212FD48:
	// addi r26,r1,96
	r26.s64 = ctx.r1.s64 + 96;
	// lwz r25,8(r9)
	r25.u64 = PPC_LOAD_U32(ctx.r9.u32 + 8);
	// addi r24,r1,128
	r24.s64 = ctx.r1.s64 + 128;
	// rlwinm r25,r25,2,0,29
	r25.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r23,r1,128
	r23.s64 = ctx.r1.s64 + 128;
	// lwzx r26,r11,r26
	r26.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// rlwinm r26,r26,2,0,29
	r26.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f0,r25,r24
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + r24.u32);
	f0.f64 = double(temp.f32);
	// lfsx f13,r26,r23
	temp.u32 = PPC_LOAD_U32(r26.u32 + r23.u32);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x8212fd7c
	if (!cr6.getLT()) goto loc_8212FD7C;
	// addi r8,r10,3
	ctx.r8.s64 = ctx.r10.s64 + 3;
	// add r11,r4,r9
	r11.u64 = ctx.r4.u64 + ctx.r9.u64;
loc_8212FD7C:
	// addi r6,r6,16
	ctx.r6.s64 = ctx.r6.s64 + 16;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r7,r7,16
	ctx.r7.s64 = ctx.r7.s64 + 16;
	// cmpwi cr6,r6,24
	cr6.compare<int32_t>(ctx.r6.s32, 24, xer);
	// blt cr6,0x8212fca4
	if (cr6.getLT()) goto loc_8212FCA4;
loc_8212FD90:
	// cmpwi cr6,r10,8
	cr6.compare<int32_t>(ctx.r10.s32, 8, xer);
	// bge cr6,0x8212fde8
	if (!cr6.getLT()) goto loc_8212FDE8;
	// rlwinm r9,r8,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
loc_8212FDA0:
	// addi r7,r1,96
	ctx.r7.s64 = ctx.r1.s64 + 96;
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lwzx r7,r11,r7
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// lwzx r6,r9,r6
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r6.u32);
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r6,r6,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f0,r7,r5
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r5.u32);
	f0.f64 = double(temp.f32);
	// lfsx f13,r6,r4
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + ctx.r4.u32);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x8212fdd8
	if (!cr6.getLT()) goto loc_8212FDD8;
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
loc_8212FDD8:
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r11,32
	cr6.compare<int32_t>(r11.s32, 32, xer);
	// blt cr6,0x8212fda0
	if (cr6.getLT()) goto loc_8212FDA0;
loc_8212FDE8:
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// add r11,r3,r11
	r11.u64 = ctx.r3.u64 + r11.u64;
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// addi r3,r3,4
	ctx.r3.s64 = ctx.r3.s64 + 4;
	// lwzx r6,r10,r9
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r6,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r6.u32);
	// stwx r7,r10,r9
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, ctx.r7.u32);
	// bgt cr6,0x8212fc6c
	if (cr6.getGT()) goto loc_8212FC6C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,28848(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28848);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x8212ffd0
	if (!cr6.getLT()) goto loc_8212FFD0;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r9,r1,128
	ctx.r9.s64 = ctx.r1.s64 + 128;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lfsx f13,r11,r9
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2940(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2940);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x8212fe58
	if (!cr6.getLT()) goto loc_8212FE58;
	// li r11,7
	r11.s64 = 7;
	// b 0x8212ff68
	goto loc_8212FF68;
loc_8212FE58:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212fed4
	if (cr6.getEQ()) goto loc_8212FED4;
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x8212fed4
	if (cr6.getEQ()) goto loc_8212FED4;
	// lwz r9,104(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x8212fed4
	if (cr6.getEQ()) goto loc_8212FED4;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x8212fe8c
	if (cr6.getEQ()) goto loc_8212FE8C;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// bne cr6,0x8212ffd0
	if (!cr6.getEQ()) goto loc_8212FFD0;
loc_8212FE8C:
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212ffd0
	if (cr6.getEQ()) goto loc_8212FFD0;
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212ffd0
	if (cr6.getEQ()) goto loc_8212FFD0;
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8212ffd0
	if (cr6.getEQ()) goto loc_8212FFD0;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-21846
	ctx.r10.s64 = -1431699456;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// ori r10,r10,43691
	ctx.r10.u64 = ctx.r10.u64 | 43691;
	// mulhwu r10,r11,r10
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(ctx.r10.u32)) >> 32;
	// b 0x8212ff4c
	goto loc_8212FF4C;
loc_8212FED4:
	// lwz r29,108(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lis r11,-21846
	r11.s64 = -1431699456;
	// ori r31,r11,43691
	r31.u64 = r11.u64 | 43691;
	// cmpwi cr6,r29,4
	cr6.compare<int32_t>(r29.s32, 4, xer);
	// beq cr6,0x8212fef0
	if (cr6.getEQ()) goto loc_8212FEF0;
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// bne cr6,0x8212ff34
	if (!cr6.getEQ()) goto loc_8212FF34;
loc_8212FEF0:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// mulhwu r10,r11,r31
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(r31.u32)) >> 32;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf. r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8212ff34
	if (!cr0.getEQ()) goto loc_8212FF34;
	// addi r11,r29,-4
	r11.s64 = r29.s64 + -4;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// addi r11,r11,3
	r11.s64 = r11.s64 + 3;
	// b 0x8212ff68
	goto loc_8212FF68;
loc_8212FF34:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// mulhwu r10,r11,r31
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(r31.u32)) >> 32;
loc_8212FF4C:
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,5
	r11.s64 = r11.s64 + 5;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8212ffd0
	if (cr6.getLT()) goto loc_8212FFD0;
loc_8212FF68:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmadds f0,f0,f26,f25
	f0.f64 = double(float(f0.f64 * f26.f64 + f25.f64));
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// blt cr6,0x8212ff98
	if (cr6.getLT()) goto loc_8212FF98;
	// fsubs f0,f0,f30
	f0.f64 = double(float(f0.f64 - f30.f64));
loc_8212FF98:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r4,16
	ctx.r4.s64 = 16;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lfs f13,28844(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 28844);
	ctx.f13.f64 = double(temp.f32);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x8212a6d0
	sub_8212A6D0(ctx, base);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed588
	// b 0x823ed174
	return;
loc_8212FFD0:
	// stw r27,64(r28)
	PPC_STORE_U32(r28.u32 + 64, r27.u32);
loc_8212FFD4:
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed588
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_8212FFE8"))) PPC_WEAK_FUNC(sub_8212FFE8);
PPC_FUNC_IMPL(__imp__sub_8212FFE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r19{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-32014
	r30.s64 = -2098069504;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,-6384(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -6384);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82130234
	if (!cr6.getGT()) goto loc_82130234;
	// lbz r10,7(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82130038
	if (!cr6.getEQ()) goto loc_82130038;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// lfs f1,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// ori r11,r10,1
	r11.u64 = ctx.r10.u64 | 1;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// bl 0x82127718
	sub_82127718(ctx, base);
	// stb r29,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r29.u8);
	// lwz r11,-6384(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -6384);
loc_82130038:
	// lhz r10,18(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// rlwinm r10,r10,0,25,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x40;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82130058
	if (cr6.getEQ()) goto loc_82130058;
	// lwz r10,272(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 272);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,272(r31)
	PPC_STORE_U32(r31.u32 + 272, r11.u32);
	// lwz r11,-6384(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -6384);
loc_82130058:
	// lbz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// stb r11,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r11.u8);
	// blt cr6,0x82130080
	if (cr6.getLT()) goto loc_82130080;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r11,r11,0,13,13
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82130234
	if (cr6.getEQ()) goto loc_82130234;
loc_82130080:
	// li r4,3
	ctx.r4.s64 = 3;
	// stb r29,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r29.u8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82131968
	sub_82131968(ctx, base);
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplwi cr6,r11,23
	cr6.compare<uint32_t>(r11.u32, 23, xer);
	// bgt cr6,0x82130210
	if (cr6.getGT()) goto loc_82130210;
	// lis r12,-32237
	r12.s64 = -2112684032;
	// addi r12,r12,188
	r12.s64 = r12.s64 + 188;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_8213011C;
	case 1:
		goto loc_82130128;
	case 2:
		goto loc_82130130;
	case 3:
		goto loc_8213013C;
	case 4:
		goto loc_82130178;
	case 5:
		goto loc_82130148;
	case 6:
		goto loc_82130154;
	case 7:
		goto loc_82130184;
	case 8:
		goto loc_82130190;
	case 9:
		goto loc_8213019C;
	case 10:
		goto loc_82130160;
	case 11:
		goto loc_8213016C;
	case 12:
		goto loc_821301A8;
	case 13:
		goto loc_821301B4;
	case 14:
		goto loc_821301C0;
	case 15:
		goto loc_821301CC;
	case 16:
		goto loc_82130210;
	case 17:
		goto loc_821301E4;
	case 18:
		goto loc_821301F0;
	case 19:
		goto loc_821301FC;
	case 20:
		goto loc_82130210;
	case 21:
		goto loc_821301D8;
	case 22:
		goto loc_82130208;
	case 23:
		goto loc_82130210;
	default:
		__builtin_unreachable();
	}
	// lwz r16,284(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 284);
	// lwz r16,296(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 296);
	// lwz r16,304(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 304);
	// lwz r16,316(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 316);
	// lwz r16,376(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 376);
	// lwz r16,328(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 328);
	// lwz r16,340(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 340);
	// lwz r16,388(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 388);
	// lwz r16,400(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 400);
	// lwz r16,412(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 412);
	// lwz r16,352(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 352);
	// lwz r16,364(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 364);
	// lwz r16,424(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 424);
	// lwz r16,436(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 436);
	// lwz r16,448(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 448);
	// lwz r16,460(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 460);
	// lwz r16,528(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 528);
	// lwz r16,484(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 484);
	// lwz r16,496(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 496);
	// lwz r16,508(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 508);
	// lwz r16,528(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 528);
	// lwz r16,472(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 472);
	// lwz r16,520(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 520);
	// lwz r16,528(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 528);
loc_8213011C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212f880
	sub_8212F880(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_82130128:
	// stb r29,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r29.u8);
	// b 0x82130210
	goto loc_82130210;
loc_82130130:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212a960
	sub_8212A960(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_8213013C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212aad0
	sub_8212AAD0(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_82130148:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212ad58
	sub_8212AD58(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_82130154:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212ae28
	sub_8212AE28(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_82130160:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212aeb0
	sub_8212AEB0(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_8213016C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212af58
	sub_8212AF58(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_82130178:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82123c20
	sub_82123C20(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_82130184:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212e868
	sub_8212E868(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_82130190:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212f0b8
	sub_8212F0B8(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_8213019C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212eb28
	sub_8212EB28(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_821301A8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212b260
	sub_8212B260(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_821301B4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212b498
	sub_8212B498(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_821301C0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212f480
	sub_8212F480(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_821301CC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82123ad8
	sub_82123AD8(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_821301D8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212aff8
	sub_8212AFF8(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_821301E4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212b0e0
	sub_8212B0E0(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_821301F0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212b058
	sub_8212B058(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_821301FC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212ef48
	sub_8212EF48(ctx, base);
	// b 0x82130210
	goto loc_82130210;
loc_82130208:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8212b190
	sub_8212B190(ctx, base);
loc_82130210:
	// lhz r9,18(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// li r11,-1
	r11.s64 = -1;
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// rlwinm r10,r10,0,30,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// sth r11,280(r31)
	PPC_STORE_U16(r31.u32 + 280, r11.u16);
	// sth r11,282(r31)
	PPC_STORE_U16(r31.u32 + 282, r11.u16);
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// andi. r9,r9,65021
	ctx.r9.u64 = ctx.r9.u64 & 65021;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// sth r9,18(r31)
	PPC_STORE_U16(r31.u32 + 18, ctx.r9.u16);
loc_82130234:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82130240"))) PPC_WEAK_FUNC(sub_82130240);
PPC_FUNC_IMPL(__imp__sub_82130240) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8211dd88
	sub_8211DD88(ctx, base);
	// lis r29,-31994
	r29.s64 = -2096758784;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r31,0
	r31.s64 = 0;
	// lwz r11,11212(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 11212);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82130290
	if (!cr6.getGT()) goto loc_82130290;
	// li r30,0
	r30.s64 = 0;
	// lis r28,-31994
	r28.s64 = -2096758784;
loc_82130270:
	// lwz r11,11208(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 11208);
	// add r3,r30,r11
	ctx.r3.u64 = r30.u64 + r11.u64;
	// bl 0x8212ffe8
	sub_8212FFE8(ctx, base);
	// lwz r11,11212(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 11212);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r30,r30,676
	r30.s64 = r30.s64 + 676;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x82130270
	if (cr6.getLT()) goto loc_82130270;
loc_82130290:
	// lis r6,-31994
	ctx.r6.s64 = -2096758784;
	// li r8,0
	ctx.r8.s64 = 0;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// stw r8,11200(r6)
	PPC_STORE_U32(ctx.r6.u32 + 11200, ctx.r8.u32);
	// ble cr6,0x821302f8
	if (!cr6.getGT()) goto loc_821302F8;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// lwz r11,4852(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4852);
	// addi r10,r11,212
	ctx.r10.s64 = r11.s64 + 212;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r7,-6376(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + -6376);
loc_821302BC:
	// lwz r11,-184(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -184);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821302e8
	if (cr6.getEQ()) goto loc_821302E8;
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x821302e8
	if (!cr6.getGT()) goto loc_821302E8;
	// subf r11,r11,r7
	r11.s64 = ctx.r7.s64 - r11.s64;
	// cmpwi cr6,r11,120
	cr6.compare<int32_t>(r11.s32, 120, xer);
	// bge cr6,0x821302e8
	if (!cr6.getLT()) goto loc_821302E8;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// stw r8,11200(r6)
	PPC_STORE_U32(ctx.r6.u32 + 11200, ctx.r8.u32);
loc_821302E8:
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,676
	ctx.r10.s64 = ctx.r10.s64 + 676;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x821302bc
	if (!cr6.getEQ()) goto loc_821302BC;
loc_821302F8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82130300"))) PPC_WEAK_FUNC(sub_82130300);
PPC_FUNC_IMPL(__imp__sub_82130300) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// bge cr6,0x82130364
	if (!cr6.getLT()) goto loc_82130364;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r28,r11,-21224
	r28.s64 = r11.s64 + -21224;
loc_8213032C:
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x821195f0
	sub_821195F0(ctx, base);
	// clrlwi r10,r30,16
	ctx.r10.u64 = r30.u32 & 0xFFFF;
	// clrlwi r11,r3,16
	r11.u64 = ctx.r3.u32 & 0xFFFF;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// clrlwi r30,r11,16
	r30.u64 = r11.u32 & 0xFFFF;
	// blt cr6,0x8213032c
	if (cr6.getLT()) goto loc_8213032C;
loc_82130364:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82130370"))) PPC_WEAK_FUNC(sub_82130370);
PPC_FUNC_IMPL(__imp__sub_82130370) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// bge cr6,0x821303d0
	if (!cr6.getLT()) goto loc_821303D0;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r28,r11,-21224
	r28.s64 = r11.s64 + -21224;
loc_8213039C:
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x821195f0
	sub_821195F0(ctx, base);
	// lhz r11,84(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 84);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
	// blt cr6,0x8213039c
	if (cr6.getLT()) goto loc_8213039C;
loc_821303D0:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_821303E0"))) PPC_WEAK_FUNC(sub_821303E0);
PPC_FUNC_IMPL(__imp__sub_821303E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f29,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f29.u64);
	// stfd f30,-40(r1)
	PPC_STORE_U64(ctx.r1.u32 + -40, f30.u64);
	// stfd f31,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r30,0
	r30.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821304b8
	if (cr6.getEQ()) goto loc_821304B8;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r31,r3,4
	r31.s64 = ctx.r3.s64 + 4;
	// lfs f29,6588(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 6588);
	f29.f64 = double(temp.f32);
	// lfs f31,16716(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16716);
	f31.f64 = double(temp.f32);
	// lfs f30,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f30.f64 = double(temp.f32);
loc_8213042C:
	// lfs f1,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210b130
	sub_8210B130(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lwz r3,-4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + -4);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82130300
	sub_82130300(ctx, base);
	// lfs f0,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// ble cr6,0x821304a0
	if (!cr6.getGT()) goto loc_821304A0;
	// clrlwi r11,r3,16
	r11.u64 = ctx.r3.u32 & 0xFFFF;
	// cmplwi cr6,r11,32768
	cr6.compare<uint32_t>(r11.u32, 32768, xer);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// bge cr6,0x82130480
	if (!cr6.getLT()) goto loc_82130480;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// b 0x821304a4
	goto loc_821304A4;
loc_82130480:
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f13,88(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmsubs f13,f13,f31,f29
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64 - f29.f64));
	// fdivs f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 / f0.f64));
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// b 0x821304a4
	goto loc_821304A4;
loc_821304A0:
	// stfs f30,4(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
loc_821304A4:
	// addi r31,r31,72
	r31.s64 = r31.s64 + 72;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// lwz r11,-4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213042c
	if (!cr6.getEQ()) goto loc_8213042C;
loc_821304B8:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f29,-48(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f30,-40(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821304E0"))) PPC_WEAK_FUNC(sub_821304E0);
PPC_FUNC_IMPL(__imp__sub_821304E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,32
	r30.s64 = 32;
loc_821304FC:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x8213051c
	if (!cr6.getLT()) goto loc_8213051C;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x821303e0
	sub_821303E0(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r3,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r3.u32);
loc_8213051C:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x821304fc
	if (!cr6.getEQ()) goto loc_821304FC;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82130548"))) PPC_WEAK_FUNC(sub_82130548);
PPC_FUNC_IMPL(__imp__sub_82130548) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32056
	r11.s64 = -2100822016;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r8,r11,27040
	ctx.r8.s64 = r11.s64 + 27040;
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beq cr6,0x82130608
	if (cr6.getEQ()) goto loc_82130608;
	// li r9,0
	ctx.r9.s64 = 0;
loc_8213057C:
	// addi r11,r8,28
	r11.s64 = ctx.r8.s64 + 28;
	// lwzx r10,r9,r11
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821305b8
	if (cr6.getEQ()) goto loc_821305B8;
	// lwz r6,0(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x821305b0
	if (cr6.getEQ()) goto loc_821305B0;
loc_8213059C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mulli r6,r11,28
	ctx.r6.s64 = r11.s64 * 28;
	// lwzx r6,r6,r10
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + ctx.r10.u32);
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x8213059c
	if (!cr6.getEQ()) goto loc_8213059C;
loc_821305B0:
	// addi r10,r8,32
	ctx.r10.s64 = ctx.r8.s64 + 32;
	// stwx r11,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, r11.u32);
loc_821305B8:
	// addi r11,r8,36
	r11.s64 = ctx.r8.s64 + 36;
	// lwzx r10,r9,r11
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821305f4
	if (cr6.getEQ()) goto loc_821305F4;
	// lwz r6,0(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x821305ec
	if (cr6.getEQ()) goto loc_821305EC;
loc_821305D8:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mulli r6,r11,28
	ctx.r6.s64 = r11.s64 * 28;
	// lwzx r6,r6,r10
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + ctx.r10.u32);
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x821305d8
	if (!cr6.getEQ()) goto loc_821305D8;
loc_821305EC:
	// addi r10,r8,40
	ctx.r10.s64 = ctx.r8.s64 + 40;
	// stwx r11,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, r11.u32);
loc_821305F4:
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// mulli r9,r7,44
	ctx.r9.s64 = ctx.r7.s64 * 44;
	// lwzx r11,r9,r8
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x8213057c
	if (!cr6.getEQ()) goto loc_8213057C;
loc_82130608:
	// lis r10,-32056
	ctx.r10.s64 = -2100822016;
	// li r11,0
	r11.s64 = 0;
	// addi r10,r10,32240
	ctx.r10.s64 = ctx.r10.s64 + 32240;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82130634
	if (cr6.getEQ()) goto loc_82130634;
loc_82130620:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mulli r9,r11,28
	ctx.r9.s64 = r11.s64 * 28;
	// lwzx r9,r9,r10
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82130620
	if (!cr6.getEQ()) goto loc_82130620;
loc_82130634:
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r3,r11,-29576
	ctx.r3.s64 = r11.s64 + -29576;
	// bl 0x821304e0
	sub_821304E0(ctx, base);
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r3,r11,-27816
	ctx.r3.s64 = r11.s64 + -27816;
	// bl 0x821304e0
	sub_821304E0(ctx, base);
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r3,r11,-27088
	ctx.r3.s64 = r11.s64 + -27088;
	// bl 0x821304e0
	sub_821304E0(ctx, base);
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r3,r11,-26432
	ctx.r3.s64 = r11.s64 + -26432;
	// bl 0x821304e0
	sub_821304E0(ctx, base);
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r3,r11,-25560
	ctx.r3.s64 = r11.s64 + -25560;
	// bl 0x821304e0
	sub_821304E0(ctx, base);
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r3,r11,-24760
	ctx.r3.s64 = r11.s64 + -24760;
	// bl 0x821304e0
	sub_821304E0(ctx, base);
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r3,r11,-24632
	ctx.r3.s64 = r11.s64 + -24632;
	// bl 0x821303e0
	sub_821303E0(ctx, base);
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r3,r11,-23120
	ctx.r3.s64 = r11.s64 + -23120;
	// bl 0x821303e0
	sub_821303E0(ctx, base);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r31,r11,-16852
	r31.s64 = r11.s64 + -16852;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lhz r11,4(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// bl 0x82130370
	sub_82130370(ctx, base);
	// extsw r10,r3
	ctx.r10.s64 = ctx.r3.s32;
	// lhz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r31,r11,-16664
	r31.s64 = r11.s64 + -16664;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// std r9,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r9.u64);
	// lhz r11,4(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14176(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14176);
	f31.f64 = double(temp.f32);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// stfs f0,11216(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 11216, temp.u32);
	// bl 0x82130370
	sub_82130370(ctx, base);
	// extsw r10,r3
	ctx.r10.s64 = ctx.r3.s32;
	// lhz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r31,r11,-16764
	r31.s64 = r11.s64 + -16764;
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lhz r11,4(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// stfs f0,11220(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 11220, temp.u32);
	// bl 0x82130370
	sub_82130370(ctx, base);
	// extsw r10,r3
	ctx.r10.s64 = ctx.r3.s32;
	// lhz r11,4(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r31,r11,76
	r31.s64 = r11.s64 + 76;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lhz r11,4(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// lis r11,-31994
	r11.s64 = -2096758784;
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// stfs f0,11224(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 11224, temp.u32);
	// bl 0x82130370
	sub_82130370(ctx, base);
	// extsw r10,r3
	ctx.r10.s64 = ctx.r3.s32;
	// lhz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r31,r11,-2636
	r31.s64 = r11.s64 + -2636;
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lhz r11,4(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// stfs f0,11228(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 11228, temp.u32);
	// bl 0x82130370
	sub_82130370(ctx, base);
	// extsw r10,r3
	ctx.r10.s64 = ctx.r3.s32;
	// lhz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r31,r11,-2548
	r31.s64 = r11.s64 + -2548;
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lhz r11,4(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// stfs f0,11232(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 11232, temp.u32);
	// bl 0x82130370
	sub_82130370(ctx, base);
	// extsw r10,r3
	ctx.r10.s64 = ctx.r3.s32;
	// lhz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r30,r11,780
	r30.s64 = r11.s64 + 780;
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lhz r11,4(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// stfs f0,11236(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 11236, temp.u32);
	// bl 0x82130370
	sub_82130370(ctx, base);
	// extsw r10,r3
	ctx.r10.s64 = ctx.r3.s32;
	// lhz r11,4(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r30,r11,872
	r30.s64 = r11.s64 + 872;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lhz r11,4(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// lis r11,-31994
	r11.s64 = -2096758784;
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// stfs f0,11240(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 11240, temp.u32);
	// bl 0x82130370
	sub_82130370(ctx, base);
	// extsw r10,r3
	ctx.r10.s64 = ctx.r3.s32;
	// lhz r9,4(r30)
	ctx.r9.u64 = PPC_LOAD_U16(r30.u32 + 4);
	// li r4,0
	ctx.r4.s64 = 0;
	// lhz r11,4(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// stfs f0,11244(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 11244, temp.u32);
	// bl 0x82130370
	sub_82130370(ctx, base);
	// extsw r10,r3
	ctx.r10.s64 = ctx.r3.s32;
	// lhz r11,4(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// stfs f0,11248(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 11248, temp.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821309A8"))) PPC_WEAK_FUNC(sub_821309A8);
PPC_FUNC_IMPL(__imp__sub_821309A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// stw r11,11204(r10)
	PPC_STORE_U32(ctx.r10.u32 + 11204, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lfs f0,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// stfs f0,27968(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 27968, temp.u32);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// stfs f0,27972(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 27972, temp.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r11,11200(r10)
	PPC_STORE_U32(ctx.r10.u32 + 11200, r11.u32);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// stfs f0,27976(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 27976, temp.u32);
	// lis r11,-32056
	r11.s64 = -2100822016;
	// stfs f0,27980(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 27980, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821309F0"))) PPC_WEAK_FUNC(sub_821309F0);
PPC_FUNC_IMPL(__imp__sub_821309F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stwu r1,-848(r1)
	ea = -848 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r26,0
	r26.s64 = 0;
	// lis r30,-31994
	r30.s64 = -2096758784;
	// mr r11,r26
	r11.u64 = r26.u64;
	// lis r7,-31994
	ctx.r7.s64 = -2096758784;
	// mr r10,r26
	ctx.r10.u64 = r26.u64;
	// stw r11,11208(r30)
	PPC_STORE_U32(r30.u32 + 11208, r11.u32);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r28,r11,928
	r28.s64 = r11.s64 + 928;
	// stw r10,11212(r7)
	PPC_STORE_U32(ctx.r7.u32 + 11212, ctx.r10.u32);
	// lwz r11,20(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82130b50
	if (cr6.getEQ()) goto loc_82130B50;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82130b50
	if (cr6.getEQ()) goto loc_82130B50;
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
loc_82130A40:
	// lwz r9,4(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// cmpwi cr6,r9,4096
	cr6.compare<int32_t>(ctx.r9.s32, 4096, xer);
	// blt cr6,0x82130a54
	if (cr6.getLT()) goto loc_82130A54;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,11212(r7)
	PPC_STORE_U32(ctx.r7.u32 + 11212, ctx.r10.u32);
loc_82130A54:
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// rlwinm r9,r8,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// lwz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x82130a40
	if (!cr6.getEQ()) goto loc_82130A40;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82130b50
	if (!cr6.getGT()) goto loc_82130B50;
	// mulli r11,r10,676
	r11.s64 = ctx.r10.s64 * 676;
	// addi r11,r11,15
	r11.s64 = r11.s64 + 15;
	// li r4,1
	ctx.r4.s64 = 1;
	// ori r11,r11,15
	r11.u64 = r11.u64 | 15;
	// xori r3,r11,15
	ctx.r3.u64 = r11.u64 ^ 15;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r11,20(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// mr r22,r26
	r22.u64 = r26.u64;
	// stw r29,11208(r30)
	PPC_STORE_U32(r30.u32 + 11208, r29.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82130b50
	if (cr6.getEQ()) goto loc_82130B50;
	// mr r27,r26
	r27.u64 = r26.u64;
	// mr r31,r26
	r31.u64 = r26.u64;
	// li r23,254
	r23.s64 = 254;
	// li r24,-1
	r24.s64 = -1;
	// li r25,26
	r25.s64 = 26;
loc_82130ABC:
	// add r10,r27,r11
	ctx.r10.u64 = r27.u64 + r11.u64;
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmpwi cr6,r10,4096
	cr6.compare<int32_t>(ctx.r10.s32, 4096, xer);
	// blt cr6,0x82130b3c
	if (cr6.getLT()) goto loc_82130B3C;
	// li r5,674
	ctx.r5.s64 = 674;
	// sth r26,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, r26.u16);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,82
	ctx.r3.s64 = ctx.r1.s64 + 82;
	// bl 0x823edf70
	sub_823EDF70(ctx, base);
	// add r3,r31,r29
	ctx.r3.u64 = r31.u64 + r29.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r5,676
	ctx.r5.s64 = 676;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lwz r11,11208(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 11208);
	// sthx r23,r31,r11
	PPC_STORE_U16(r31.u32 + r11.u32, r23.u16);
	// lwz r11,11208(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 11208);
	// add r10,r31,r11
	ctx.r10.u64 = r31.u64 + r11.u64;
	// lwz r11,20(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// lwzx r11,r27,r11
	r11.u64 = PPC_LOAD_U32(r27.u32 + r11.u32);
	// stw r11,260(r10)
	PPC_STORE_U32(ctx.r10.u32 + 260, r11.u32);
	// lwz r11,11208(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 11208);
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// sth r26,264(r11)
	PPC_STORE_U16(r11.u32 + 264, r26.u16);
	// lwz r11,11208(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 11208);
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// sth r24,266(r11)
	PPC_STORE_U16(r11.u32 + 266, r24.u16);
	// lwz r11,11208(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 11208);
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r31,r31,676
	r31.s64 = r31.s64 + 676;
	// stb r25,7(r11)
	PPC_STORE_U8(r11.u32 + 7, r25.u8);
	// lwz r29,11208(r30)
	r29.u64 = PPC_LOAD_U32(r30.u32 + 11208);
	// lwz r11,20(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 20);
loc_82130B3C:
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// rlwinm r27,r22,3,0,28
	r27.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r10,r27,r11
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + r11.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82130abc
	if (!cr6.getEQ()) goto loc_82130ABC;
loc_82130B50:
	// addi r1,r1,848
	ctx.r1.s64 = ctx.r1.s64 + 848;
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_82130B58"))) PPC_WEAK_FUNC(sub_82130B58);
PPC_FUNC_IMPL(__imp__sub_82130B58) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed110
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r18,r11,928
	r18.s64 = r11.s64 + 928;
	// lwz r10,20(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 20);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8213100c
	if (cr6.getEQ()) goto loc_8213100C;
	// lwz r31,0(r10)
	r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8213100c
	if (cr6.getEQ()) goto loc_8213100C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r19,0
	r19.s64 = 0;
	// addi r27,r11,29116
	r27.s64 = r11.s64 + 29116;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r26,r11,29072
	r26.s64 = r11.s64 + 29072;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r25,r11,29036
	r25.s64 = r11.s64 + 29036;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r24,r11,28992
	r24.s64 = r11.s64 + 28992;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r23,r11,28956
	r23.s64 = r11.s64 + 28956;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r22,r11,28920
	r22.s64 = r11.s64 + 28920;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r29,r11,15312
	r29.s64 = r11.s64 + 15312;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r21,r11,28884
	r21.s64 = r11.s64 + 28884;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r28,r11,13952
	r28.s64 = r11.s64 + 13952;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r20,r11,28856
	r20.s64 = r11.s64 + 28856;
loc_82130BD8:
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// beq cr6,0x82130ffc
	if (cr6.getEQ()) goto loc_82130FFC;
loc_82130BE4:
	// addi r11,r11,-27
	r11.s64 = r11.s64 + -27;
	// cmplwi cr6,r11,165
	cr6.compare<uint32_t>(r11.u32, 165, xer);
	// bgt cr6,0x82130fdc
	if (cr6.getGT()) goto loc_82130FDC;
	// lis r12,-32237
	r12.s64 = -2112684032;
	// addi r12,r12,3080
	r12.s64 = r12.s64 + 3080;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82130EA0;
	case 1:
		goto loc_82130FDC;
	case 2:
		goto loc_82130FDC;
	case 3:
		goto loc_82130FDC;
	case 4:
		goto loc_82130FDC;
	case 5:
		goto loc_82130FDC;
	case 6:
		goto loc_82130FDC;
	case 7:
		goto loc_82130FDC;
	case 8:
		goto loc_82130FDC;
	case 9:
		goto loc_82130FDC;
	case 10:
		goto loc_82130FDC;
	case 11:
		goto loc_82130FDC;
	case 12:
		goto loc_82130FDC;
	case 13:
		goto loc_82130FDC;
	case 14:
		goto loc_82130FDC;
	case 15:
		goto loc_82130FDC;
	case 16:
		goto loc_82130FDC;
	case 17:
		goto loc_82130FDC;
	case 18:
		goto loc_82130FDC;
	case 19:
		goto loc_82130FDC;
	case 20:
		goto loc_82130FDC;
	case 21:
		goto loc_82130FDC;
	case 22:
		goto loc_82130FDC;
	case 23:
		goto loc_82130FDC;
	case 24:
		goto loc_82130FDC;
	case 25:
		goto loc_82130FDC;
	case 26:
		goto loc_82130FDC;
	case 27:
		goto loc_82130FDC;
	case 28:
		goto loc_82130FDC;
	case 29:
		goto loc_82130FDC;
	case 30:
		goto loc_82130FDC;
	case 31:
		goto loc_82130FDC;
	case 32:
		goto loc_82130FDC;
	case 33:
		goto loc_82130FDC;
	case 34:
		goto loc_82130FDC;
	case 35:
		goto loc_82130FDC;
	case 36:
		goto loc_82130FDC;
	case 37:
		goto loc_82130FDC;
	case 38:
		goto loc_82130FDC;
	case 39:
		goto loc_82130FDC;
	case 40:
		goto loc_82130FDC;
	case 41:
		goto loc_82130FDC;
	case 42:
		goto loc_82130FDC;
	case 43:
		goto loc_82130FDC;
	case 44:
		goto loc_82130FDC;
	case 45:
		goto loc_82130FDC;
	case 46:
		goto loc_82130FDC;
	case 47:
		goto loc_82130FDC;
	case 48:
		goto loc_82130FDC;
	case 49:
		goto loc_82130FDC;
	case 50:
		goto loc_82130FDC;
	case 51:
		goto loc_82130FDC;
	case 52:
		goto loc_82130FDC;
	case 53:
		goto loc_82130FDC;
	case 54:
		goto loc_82130FDC;
	case 55:
		goto loc_82130FDC;
	case 56:
		goto loc_82130FDC;
	case 57:
		goto loc_82130FDC;
	case 58:
		goto loc_82130FDC;
	case 59:
		goto loc_82130FDC;
	case 60:
		goto loc_82130FDC;
	case 61:
		goto loc_82130FDC;
	case 62:
		goto loc_82130FDC;
	case 63:
		goto loc_82130FDC;
	case 64:
		goto loc_82130FDC;
	case 65:
		goto loc_82130FDC;
	case 66:
		goto loc_82130FDC;
	case 67:
		goto loc_82130FDC;
	case 68:
		goto loc_82130FDC;
	case 69:
		goto loc_82130FDC;
	case 70:
		goto loc_82130FDC;
	case 71:
		goto loc_82130FDC;
	case 72:
		goto loc_82130FDC;
	case 73:
		goto loc_82130FDC;
	case 74:
		goto loc_82130FDC;
	case 75:
		goto loc_82130FDC;
	case 76:
		goto loc_82130FDC;
	case 77:
		goto loc_82130FDC;
	case 78:
		goto loc_82130FDC;
	case 79:
		goto loc_82130FDC;
	case 80:
		goto loc_82130FDC;
	case 81:
		goto loc_82130FDC;
	case 82:
		goto loc_82130FDC;
	case 83:
		goto loc_82130FDC;
	case 84:
		goto loc_82130FDC;
	case 85:
		goto loc_82130FDC;
	case 86:
		goto loc_82130FDC;
	case 87:
		goto loc_82130FDC;
	case 88:
		goto loc_82130FDC;
	case 89:
		goto loc_82130FDC;
	case 90:
		goto loc_82130FDC;
	case 91:
		goto loc_82130FDC;
	case 92:
		goto loc_82130FDC;
	case 93:
		goto loc_82130FDC;
	case 94:
		goto loc_82130FDC;
	case 95:
		goto loc_82130FDC;
	case 96:
		goto loc_82130FDC;
	case 97:
		goto loc_82130FDC;
	case 98:
		goto loc_82130FDC;
	case 99:
		goto loc_82130FDC;
	case 100:
		goto loc_82130FDC;
	case 101:
		goto loc_82130FDC;
	case 102:
		goto loc_82130FDC;
	case 103:
		goto loc_82130FDC;
	case 104:
		goto loc_82130FDC;
	case 105:
		goto loc_82130FDC;
	case 106:
		goto loc_82130FDC;
	case 107:
		goto loc_82130FDC;
	case 108:
		goto loc_82130FDC;
	case 109:
		goto loc_82130FDC;
	case 110:
		goto loc_82130FDC;
	case 111:
		goto loc_82130FDC;
	case 112:
		goto loc_82130FDC;
	case 113:
		goto loc_82130FDC;
	case 114:
		goto loc_82130FDC;
	case 115:
		goto loc_82130FDC;
	case 116:
		goto loc_82130FDC;
	case 117:
		goto loc_82130FDC;
	case 118:
		goto loc_82130FDC;
	case 119:
		goto loc_82130FDC;
	case 120:
		goto loc_82130FDC;
	case 121:
		goto loc_82130FDC;
	case 122:
		goto loc_82130FDC;
	case 123:
		goto loc_82130FDC;
	case 124:
		goto loc_82130FDC;
	case 125:
		goto loc_82130FDC;
	case 126:
		goto loc_82130FDC;
	case 127:
		goto loc_82130FDC;
	case 128:
		goto loc_82130FDC;
	case 129:
		goto loc_82130FDC;
	case 130:
		goto loc_82130FDC;
	case 131:
		goto loc_82130FDC;
	case 132:
		goto loc_82130FDC;
	case 133:
		goto loc_82130FDC;
	case 134:
		goto loc_82130FDC;
	case 135:
		goto loc_82130FDC;
	case 136:
		goto loc_82130FDC;
	case 137:
		goto loc_82130FDC;
	case 138:
		goto loc_82130FDC;
	case 139:
		goto loc_82130FDC;
	case 140:
		goto loc_82130FDC;
	case 141:
		goto loc_82130FDC;
	case 142:
		goto loc_82130FDC;
	case 143:
		goto loc_82130FDC;
	case 144:
		goto loc_82130FDC;
	case 145:
		goto loc_82130FDC;
	case 146:
		goto loc_82130FDC;
	case 147:
		goto loc_82130FDC;
	case 148:
		goto loc_82130FDC;
	case 149:
		goto loc_82130FDC;
	case 150:
		goto loc_82130FDC;
	case 151:
		goto loc_82130FDC;
	case 152:
		goto loc_82130FDC;
	case 153:
		goto loc_82130FDC;
	case 154:
		goto loc_82130FDC;
	case 155:
		goto loc_82130FDC;
	case 156:
		goto loc_82130FDC;
	case 157:
		goto loc_82130FDC;
	case 158:
		goto loc_82130FDC;
	case 159:
		goto loc_82130FDC;
	case 160:
		goto loc_82130FDC;
	case 161:
		goto loc_82130FDC;
	case 162:
		goto loc_82130ECC;
	case 163:
		goto loc_82130F1C;
	case 164:
		goto loc_82130F6C;
	case 165:
		goto loc_82130FB0;
	default:
		__builtin_unreachable();
	}
	// lwz r16,3744(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 3744);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,4060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4060);
	// lwz r16,3788(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 3788);
	// lwz r16,3868(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 3868);
	// lwz r16,3948(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 3948);
	// lwz r16,4016(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 4016);
loc_82130EA0:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// clrlwi r30,r11,16
	r30.u64 = r11.u32 & 0xFFFF;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82130fdc
	if (cr6.getEQ()) goto loc_82130FDC;
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
	// b 0x82130fd4
	goto loc_82130FD4;
loc_82130ECC:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82130eec
	if (cr6.getEQ()) goto loc_82130EEC;
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82130EEC:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x82130fdc
	if (cr6.getLT()) goto loc_82130FDC;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82130fdc
	if (cr6.getEQ()) goto loc_82130FDC;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// b 0x82130fd8
	goto loc_82130FD8;
loc_82130F1C:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82130f3c
	if (cr6.getEQ()) goto loc_82130F3C;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82130F3C:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x82130fdc
	if (cr6.getLT()) goto loc_82130FDC;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82130fdc
	if (cr6.getEQ()) goto loc_82130FDC;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// b 0x82130fd8
	goto loc_82130FD8;
loc_82130F6C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r30,r11,r10
	r30.u64 = r11.u64 | ctx.r10.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82130f98
	if (cr6.getEQ()) goto loc_82130F98;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82130F98:
	// lbz r3,3(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// bl 0x820bfe00
	sub_820BFE00(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82130fdc
	if (cr6.getEQ()) goto loc_82130FDC;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// b 0x82130fd4
	goto loc_82130FD4;
loc_82130FB0:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r30,r11,r10
	r30.u64 = r11.u64 | ctx.r10.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82130fdc
	if (cr6.getEQ()) goto loc_82130FDC;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
loc_82130FD4:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82130FD8:
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82130FDC:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82131188
	sub_82131188(ctx, base);
	// add r31,r3,r31
	r31.u64 = ctx.r3.u64 + r31.u64;
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bne cr6,0x82130be4
	if (!cr6.getEQ()) goto loc_82130BE4;
	// lwz r10,20(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 20);
loc_82130FFC:
	// addi r19,r19,8
	r19.s64 = r19.s64 + 8;
	// lwzx r31,r19,r10
	r31.u64 = PPC_LOAD_U32(r19.u32 + ctx.r10.u32);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82130bd8
	if (!cr6.getEQ()) goto loc_82130BD8;
loc_8213100C:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed160
	return;
}

__attribute__((alias("__imp__sub_82131018"))) PPC_WEAK_FUNC(sub_82131018);
PPC_FUNC_IMPL(__imp__sub_82131018) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,196
	r11.s64 = 196;
	// li r31,186
	r31.s64 = 186;
	// li r30,0
	r30.s64 = 0;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r11,199
	r11.s64 = 199;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// li r11,200
	r11.s64 = 200;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// li r11,201
	r11.s64 = 201;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// li r11,202
	r11.s64 = 202;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// li r11,203
	r11.s64 = 203;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// li r11,209
	r11.s64 = 209;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// li r11,-1
	r11.s64 = -1;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r29,r11,29148
	r29.s64 = r11.s64 + 29148;
loc_82131078:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820d03e8
	sub_820D03E8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131094
	if (cr6.getEQ()) goto loc_82131094;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82131094:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// rlwinm r10,r30,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r31,r10,r11
	r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x82131078
	if (!cr6.getLT()) goto loc_82131078;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821310B8"))) PPC_WEAK_FUNC(sub_821310B8);
PPC_FUNC_IMPL(__imp__sub_821310B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r26,0
	r26.s64 = 0;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r27,r26
	r27.u64 = r26.u64;
	// cmplwi cr6,r29,7
	cr6.compare<uint32_t>(r29.u32, 7, xer);
	// bgt cr6,0x82131154
	if (cr6.getGT()) goto loc_82131154;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r31,r11,11264
	r31.s64 = r11.s64 + 11264;
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// rlwinm r30,r11,3,0,28
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r28,r30,r31
	r28.u64 = r30.u64 + r31.u64;
	// lwz r3,0(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131120
	if (cr6.getEQ()) goto loc_82131120;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131120
	if (cr6.getEQ()) goto loc_82131120;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r3,r11,29192
	ctx.r3.s64 = r11.s64 + 29192;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// b 0x82131154
	goto loc_82131154;
loc_82131120:
	// addi r10,r31,12
	ctx.r10.s64 = r31.s64 + 12;
	// li r11,32767
	r11.s64 = 32767;
	// addi r9,r31,4
	ctx.r9.s64 = r31.s64 + 4;
	// addi r8,r31,8
	ctx.r8.s64 = r31.s64 + 8;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r6,r31,16
	ctx.r6.s64 = r31.s64 + 16;
	// stwx r11,r30,r10
	PPC_STORE_U32(r30.u32 + ctx.r10.u32, r11.u32);
	// addi r10,r31,20
	ctx.r10.s64 = r31.s64 + 20;
	// stwx r11,r30,r9
	PPC_STORE_U32(r30.u32 + ctx.r9.u32, r11.u32);
	// mr r27,r28
	r27.u64 = r28.u64;
	// stwx r7,r30,r8
	PPC_STORE_U32(r30.u32 + ctx.r8.u32, ctx.r7.u32);
	// stwx r26,r30,r6
	PPC_STORE_U32(r30.u32 + ctx.r6.u32, r26.u32);
	// stwx r26,r30,r10
	PPC_STORE_U32(r30.u32 + ctx.r10.u32, r26.u32);
loc_82131154:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r8,117
	ctx.r8.s64 = 117;
	// addi r7,r11,29172
	ctx.r7.s64 = r11.s64 + 29172;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// extsh r4,r25
	ctx.r4.s64 = r25.s16;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82131188"))) PPC_WEAK_FUNC(sub_82131188);
PPC_FUNC_IMPL(__imp__sub_82131188) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r19{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lbzx r11,r3,r4
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + ctx.r4.u32);
	// cmplwi cr6,r11,252
	cr6.compare<uint32_t>(r11.u32, 252, xer);
	// bgt cr6,0x821316c0
	if (cr6.getGT()) goto loc_821316C0;
	// lis r12,-32237
	r12.s64 = -2112684032;
	// addi r12,r12,4536
	r12.s64 = r12.s64 + 4536;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_821315AC;
	case 1:
		goto loc_821315AC;
	case 2:
		goto loc_821315AC;
	case 3:
		goto loc_821316D0;
	case 4:
		goto loc_821316D0;
	case 5:
		goto loc_821315C0;
	case 6:
		goto loc_821315D4;
	case 7:
		goto loc_821316D0;
	case 8:
		goto loc_821316D0;
	case 9:
		goto loc_821316D0;
	case 10:
		goto loc_821315E8;
	case 11:
		goto loc_821315AC;
	case 12:
		goto loc_821316D0;
	case 13:
		goto loc_821316D0;
	case 14:
		goto loc_821315AC;
	case 15:
		goto loc_821315AC;
	case 16:
		goto loc_821315AC;
	case 17:
		goto loc_821315AC;
	case 18:
		goto loc_821315AC;
	case 19:
		goto loc_821315AC;
	case 20:
		goto loc_821315FC;
	case 21:
		goto loc_821315FC;
	case 22:
		goto loc_821315FC;
	case 23:
		goto loc_821315FC;
	case 24:
		goto loc_821315C0;
	case 25:
		goto loc_821315C0;
	case 26:
		goto loc_821315AC;
	case 27:
		goto loc_82131610;
	case 28:
		goto loc_821315D4;
	case 29:
		goto loc_821316D0;
	case 30:
		goto loc_821315D4;
	case 31:
		goto loc_821315D4;
	case 32:
		goto loc_821315AC;
	case 33:
		goto loc_821316D0;
	case 34:
		goto loc_821316D0;
	case 35:
		goto loc_821315AC;
	case 36:
		goto loc_821315C0;
	case 37:
		goto loc_821316D0;
	case 38:
		goto loc_821316D0;
	case 39:
		goto loc_821315AC;
	case 40:
		goto loc_821315AC;
	case 41:
		goto loc_821315AC;
	case 42:
		goto loc_821315AC;
	case 43:
		goto loc_821315AC;
	case 44:
		goto loc_821315D4;
	case 45:
		goto loc_821315D4;
	case 46:
		goto loc_821315D4;
	case 47:
		goto loc_821315AC;
	case 48:
		goto loc_821315D4;
	case 49:
		goto loc_821315D4;
	case 50:
		goto loc_821315AC;
	case 51:
		goto loc_821316D0;
	case 52:
		goto loc_821315D4;
	case 53:
		goto loc_821315D4;
	case 54:
		goto loc_821315AC;
	case 55:
		goto loc_821315AC;
	case 56:
		goto loc_821315AC;
	case 57:
		goto loc_821315AC;
	case 58:
		goto loc_821315AC;
	case 59:
		goto loc_821315AC;
	case 60:
		goto loc_821315AC;
	case 61:
		goto loc_821315AC;
	case 62:
		goto loc_821315AC;
	case 63:
		goto loc_821315AC;
	case 64:
		goto loc_821315D4;
	case 65:
		goto loc_821315AC;
	case 66:
		goto loc_821315AC;
	case 67:
		goto loc_821315AC;
	case 68:
		goto loc_821315C0;
	case 69:
		goto loc_821315AC;
	case 70:
		goto loc_821315AC;
	case 71:
		goto loc_821315D4;
	case 72:
		goto loc_821315D4;
	case 73:
		goto loc_821315D4;
	case 74:
		goto loc_821315D4;
	case 75:
		goto loc_821315C0;
	case 76:
		goto loc_821315C0;
	case 77:
		goto loc_82131624;
	case 78:
		goto loc_82131624;
	case 79:
		goto loc_82131610;
	case 80:
		goto loc_82131610;
	case 81:
		goto loc_821315C0;
	case 82:
		goto loc_821315FC;
	case 83:
		goto loc_821315FC;
	case 84:
		goto loc_82131610;
	case 85:
		goto loc_821315C0;
	case 86:
		goto loc_821315D4;
	case 87:
		goto loc_821315D4;
	case 88:
		goto loc_821315C0;
	case 89:
		goto loc_821315D4;
	case 90:
		goto loc_821315D4;
	case 91:
		goto loc_821315D4;
	case 92:
		goto loc_821315D4;
	case 93:
		goto loc_821315D4;
	case 94:
		goto loc_821315AC;
	case 95:
		goto loc_821315AC;
	case 96:
		goto loc_821315AC;
	case 97:
		goto loc_821315AC;
	case 98:
		goto loc_821315AC;
	case 99:
		goto loc_821315AC;
	case 100:
		goto loc_821315D4;
	case 101:
		goto loc_821315C0;
	case 102:
		goto loc_821315AC;
	case 103:
		goto loc_821315AC;
	case 104:
		goto loc_821315C0;
	case 105:
		goto loc_821315D4;
	case 106:
		goto loc_821315D4;
	case 107:
		goto loc_821315D4;
	case 108:
		goto loc_821315C0;
	case 109:
		goto loc_821315D4;
	case 110:
		goto loc_821315D4;
	case 111:
		goto loc_821315D4;
	case 112:
		goto loc_821315D4;
	case 113:
		goto loc_821315D4;
	case 114:
		goto loc_821315C0;
	case 115:
		goto loc_821315C0;
	case 116:
		goto loc_821315C0;
	case 117:
		goto loc_821315C0;
	case 118:
		goto loc_821315D4;
	case 119:
		goto loc_821315D4;
	case 120:
		goto loc_821315D4;
	case 121:
		goto loc_821315D4;
	case 122:
		goto loc_821315D4;
	case 123:
		goto loc_821315D4;
	case 124:
		goto loc_821315C0;
	case 125:
		goto loc_821315C0;
	case 126:
		goto loc_821315D4;
	case 127:
		goto loc_821315D4;
	case 128:
		goto loc_821315D4;
	case 129:
		goto loc_821315AC;
	case 130:
		goto loc_821315AC;
	case 131:
		goto loc_821315AC;
	case 132:
		goto loc_821315D4;
	case 133:
		goto loc_821315AC;
	case 134:
		goto loc_821315AC;
	case 135:
		goto loc_821315AC;
	case 136:
		goto loc_821315AC;
	case 137:
		goto loc_821315D4;
	case 138:
		goto loc_821315AC;
	case 139:
		goto loc_821315D4;
	case 140:
		goto loc_821315AC;
	case 141:
		goto loc_821315AC;
	case 142:
		goto loc_821315AC;
	case 143:
		goto loc_821315D4;
	case 144:
		goto loc_821315D4;
	case 145:
		goto loc_821315AC;
	case 146:
		goto loc_821315AC;
	case 147:
		goto loc_821315AC;
	case 148:
		goto loc_821315AC;
	case 149:
		goto loc_821315AC;
	case 150:
		goto loc_821315D4;
	case 151:
		goto loc_821315D4;
	case 152:
		goto loc_821315D4;
	case 153:
		goto loc_821315C0;
	case 154:
		goto loc_82131610;
	case 155:
		goto loc_82131610;
	case 156:
		goto loc_821315FC;
	case 157:
		goto loc_82131610;
	case 158:
		goto loc_82131610;
	case 159:
		goto loc_821315FC;
	case 160:
		goto loc_821315FC;
	case 161:
		goto loc_821315FC;
	case 162:
		goto loc_82131624;
	case 163:
		goto loc_821315FC;
	case 164:
		goto loc_821315FC;
	case 165:
		goto loc_82131624;
	case 166:
		goto loc_821315FC;
	case 167:
		goto loc_821315FC;
	case 168:
		goto loc_82131624;
	case 169:
		goto loc_821315AC;
	case 170:
		goto loc_821315D4;
	case 171:
		goto loc_821315D4;
	case 172:
		goto loc_821315C0;
	case 173:
		goto loc_82131688;
	case 174:
		goto loc_821316D0;
	case 175:
		goto loc_821316D0;
	case 176:
		goto loc_821316D0;
	case 177:
		goto loc_821316D0;
	case 178:
		goto loc_821315AC;
	case 179:
		goto loc_82131610;
	case 180:
		goto loc_82131610;
	case 181:
		goto loc_821316D0;
	case 182:
		goto loc_821316D0;
	case 183:
		goto loc_821315D4;
	case 184:
		goto loc_821316D0;
	case 185:
		goto loc_821316D0;
	case 186:
		goto loc_821315AC;
	case 187:
		goto loc_821315C0;
	case 188:
		goto loc_821315C0;
	case 189:
		goto loc_82131638;
	case 190:
		goto loc_8213164C;
	case 191:
		goto loc_821315E8;
	case 192:
		goto loc_82131660;
	case 193:
		goto loc_82131610;
	case 194:
		goto loc_821315D4;
	case 195:
		goto loc_821315D4;
	case 196:
		goto loc_821315C0;
	case 197:
		goto loc_82131610;
	case 198:
		goto loc_821315FC;
	case 199:
		goto loc_821315FC;
	case 200:
		goto loc_821315FC;
	case 201:
		goto loc_821315AC;
	case 202:
		goto loc_82131610;
	case 203:
		goto loc_821315AC;
	case 204:
		goto loc_82131610;
	case 205:
		goto loc_82131610;
	case 206:
		goto loc_821315AC;
	case 207:
		goto loc_821315AC;
	case 208:
		goto loc_821315C0;
	case 209:
		goto loc_821315AC;
	case 210:
		goto loc_821316D0;
	case 211:
		goto loc_821316D0;
	case 212:
		goto loc_821315D4;
	case 213:
		goto loc_821315FC;
	case 214:
		goto loc_821315C0;
	case 215:
		goto loc_821315AC;
	case 216:
		goto loc_821316D0;
	case 217:
		goto loc_82131610;
	case 218:
		goto loc_821316D0;
	case 219:
		goto loc_821316D0;
	case 220:
		goto loc_821315AC;
	case 221:
		goto loc_821316D0;
	case 222:
		goto loc_821316D0;
	case 223:
		goto loc_821315AC;
	case 224:
		goto loc_821315D4;
	case 225:
		goto loc_821315D4;
	case 226:
		goto loc_821315C0;
	case 227:
		goto loc_821315AC;
	case 228:
		goto loc_821315AC;
	case 229:
		goto loc_821315D4;
	case 230:
		goto loc_82131610;
	case 231:
		goto loc_821315AC;
	case 232:
		goto loc_821315AC;
	case 233:
		goto loc_821316D0;
	case 234:
		goto loc_821316D0;
	case 235:
		goto loc_821315AC;
	case 236:
		goto loc_821316D0;
	case 237:
		goto loc_821316D0;
	case 238:
		goto loc_82131674;
	case 239:
		goto loc_821316D0;
	case 240:
		goto loc_821315AC;
	case 241:
		goto loc_821315AC;
	case 242:
		goto loc_821315D4;
	case 243:
		goto loc_821315AC;
	case 244:
		goto loc_821315C0;
	case 245:
		goto loc_821315AC;
	case 246:
		goto loc_821316D0;
	case 247:
		goto loc_821315D4;
	case 248:
		goto loc_821315D4;
	case 249:
		goto loc_821316D0;
	case 250:
		goto loc_821316D0;
	case 251:
		goto loc_821316D0;
	case 252:
		goto loc_821315AC;
	default:
		__builtin_unreachable();
	}
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5608(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5608);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5668(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5668);
	// lwz r16,5668(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5668);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5668(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5668);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5668(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5668);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5668(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5668);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5768(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5768);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5688(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5688);
	// lwz r16,5708(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5708);
	// lwz r16,5608(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5608);
	// lwz r16,5728(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5728);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5628);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5648);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5748(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5748);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5568);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5588(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5588);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5840);
	// lwz r16,5548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 5548);
loc_821315AC:
	// li r3,2
	ctx.r3.s64 = 2;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821315C0:
	// li r3,4
	ctx.r3.s64 = 4;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821315D4:
	// li r3,3
	ctx.r3.s64 = 3;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821315E8:
	// li r3,9
	ctx.r3.s64 = 9;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821315FC:
	// li r3,6
	ctx.r3.s64 = 6;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82131610:
	// li r3,5
	ctx.r3.s64 = 5;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82131624:
	// li r3,7
	ctx.r3.s64 = 7;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82131638:
	// li r3,12
	ctx.r3.s64 = 12;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8213164C:
	// li r3,11
	ctx.r3.s64 = 11;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82131660:
	// li r3,8
	ctx.r3.s64 = 8;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82131674:
	// li r3,13
	ctx.r3.s64 = 13;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82131688:
	// addi r11,r4,1
	r11.s64 = ctx.r4.s64 + 1;
	// lbzx r10,r11,r3
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + ctx.r3.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821316a8
	if (cr6.getEQ()) goto loc_821316A8;
loc_82131698:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lbzx r10,r11,r3
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + ctx.r3.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82131698
	if (!cr6.getEQ()) goto loc_82131698;
loc_821316A8:
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// addi r3,r11,1
	ctx.r3.s64 = r11.s64 + 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821316C0:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// addi r3,r10,29224
	ctx.r3.s64 = ctx.r10.s64 + 29224;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_821316D0:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821316E8"))) PPC_WEAK_FUNC(sub_821316E8);
PPC_FUNC_IMPL(__imp__sub_821316E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r8,r11,928
	ctx.r8.s64 = r11.s64 + 928;
	// lwz r10,20(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + 20);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8213172c
	if (cr6.getEQ()) goto loc_8213172C;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x8213172c
	if (cr6.getEQ()) goto loc_8213172C;
	// rotlwi r9,r9,0
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
loc_82131710:
	// cmplw cr6,r9,r3
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r3.u32, xer);
	// beq cr6,0x82131768
	if (cr6.getEQ()) goto loc_82131768;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r9,r11,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r9,r9,r10
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82131710
	if (!cr6.getEQ()) goto loc_82131710;
loc_8213172C:
	// lis r10,-32055
	ctx.r10.s64 = -2100756480;
	// li r11,0
	r11.s64 = 0;
	// addi r9,r10,-20832
	ctx.r9.s64 = ctx.r10.s64 + -20832;
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82131760
	if (cr6.getEQ()) goto loc_82131760;
loc_82131744:
	// cmplw cr6,r10,r3
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r3.u32, xer);
	// beq cr6,0x82131784
	if (cr6.getEQ()) goto loc_82131784;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82131744
	if (!cr6.getEQ()) goto loc_82131744;
loc_82131760:
	// li r3,-1
	ctx.r3.s64 = -1;
	// blr 
	return;
loc_82131768:
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r11,20(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 20);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// blr 
	return;
loc_82131784:
	// li r10,1
	ctx.r10.s64 = 1;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// stw r10,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r10.u32);
	// lwzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821317A0"))) PPC_WEAK_FUNC(sub_821317A0);
PPC_FUNC_IMPL(__imp__sub_821317A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
loc_821317B8:
	// lbzx r11,r30,r31
	r11.u64 = PPC_LOAD_U8(r30.u32 + r31.u32);
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x821317e4
	if (!cr6.getEQ()) goto loc_821317E4;
	// add r11,r30,r31
	r11.u64 = r30.u64 + r31.u64;
	// clrlwi r10,r29,24
	ctx.r10.u64 = r29.u32 & 0xFF;
	// lbz r11,1(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x821317ec
	if (!cr6.getEQ()) goto loc_821317EC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
loc_821317E4:
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// beq cr6,0x82131800
	if (cr6.getEQ()) goto loc_82131800;
loc_821317EC:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82131188
	sub_82131188(ctx, base);
	// add r31,r3,r31
	r31.u64 = ctx.r3.u64 + r31.u64;
	// b 0x821317b8
	goto loc_821317B8;
loc_82131800:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821316e8
	sub_821316E8(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82131828
	if (cr6.getEQ()) goto loc_82131828;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r11,29324
	ctx.r5.s64 = r11.s64 + 29324;
	// b 0x82131830
	goto loc_82131830;
loc_82131828:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r11,29316
	ctx.r5.s64 = r11.s64 + 29316;
loc_82131830:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// clrlwi r4,r29,24
	ctx.r4.u64 = r29.u32 & 0xFF;
	// addi r3,r11,29260
	ctx.r3.s64 = r11.s64 + 29260;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82131850"))) PPC_WEAK_FUNC(sub_82131850);
PPC_FUNC_IMPL(__imp__sub_82131850) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmpwi cr6,r3,1024
	cr6.compare<int32_t>(ctx.r3.s32, 1024, xer);
	// ble cr6,0x821318b8
	if (!cr6.getGT()) goto loc_821318B8;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r9,20(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x821318a4
	if (cr6.getEQ()) goto loc_821318A4;
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821318a4
	if (cr6.getEQ()) goto loc_821318A4;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
loc_82131880:
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmpw cr6,r10,r3
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r3.s32, xer);
	// beq cr6,0x821318ac
	if (cr6.getEQ()) goto loc_821318AC;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x82131880
	if (!cr6.getEQ()) goto loc_82131880;
loc_821318A4:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_821318AC:
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// blr 
	return;
loc_821318B8:
	// lis r11,-32055
	r11.s64 = -2100756480;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r11,r11,-20832
	r11.s64 = r11.s64 + -20832;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821318a4
	if (cr6.getEQ()) goto loc_821318A4;
	// li r10,0
	ctx.r10.s64 = 0;
loc_821318D4:
	// addi r8,r11,4
	ctx.r8.s64 = r11.s64 + 4;
	// lwzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// cmpw cr6,r10,r3
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r3.s32, xer);
	// beq cr6,0x82131900
	if (cr6.getEQ()) goto loc_82131900;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// rlwinm r10,r9,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r8,r10,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x821318d4
	if (!cr6.getEQ()) goto loc_821318D4;
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_82131900:
	// rlwinm r10,r9,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82131910"))) PPC_WEAK_FUNC(sub_82131910);
PPC_FUNC_IMPL(__imp__sub_82131910) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r9,16(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// li r11,0
	r11.s64 = 0;
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82131954
	if (cr6.getEQ()) goto loc_82131954;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
loc_82131930:
	// lbz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4);
	// cmpw cr6,r10,r3
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r3.s32, xer);
	// beq cr6,0x8213195c
	if (cr6.getEQ()) goto loc_8213195C;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x82131930
	if (!cr6.getEQ()) goto loc_82131930;
loc_82131954:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_8213195C:
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r3,r11,r9
	ctx.r3.u64 = r11.u64 + ctx.r9.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82131968"))) PPC_WEAK_FUNC(sub_82131968);
PPC_FUNC_IMPL(__imp__sub_82131968) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f15{};
	PPCRegister f16{};
	PPCRegister f17{};
	PPCRegister f18{};
	PPCRegister f19{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed514
	// stwu r1,-912(r1)
	ea = -912 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r19,0
	r19.s64 = 0;
	// cmpwi cr6,r4,3
	cr6.compare<int32_t>(ctx.r4.s32, 3, xer);
	// mr r22,r19
	r22.u64 = r19.u64;
	// stw r19,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r19.u32);
	// stw r19,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r19.u32);
	// bne cr6,0x821319ac
	if (!cr6.getEQ()) goto loc_821319AC;
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82135de8
	if (cr6.getEQ()) goto loc_82135DE8;
	// lwz r21,260(r3)
	r21.u64 = PPC_LOAD_U32(ctx.r3.u32 + 260);
	// lhz r30,264(r3)
	r30.u64 = PPC_LOAD_U16(ctx.r3.u32 + 264);
	// b 0x821319cc
	goto loc_821319CC;
loc_821319AC:
	// cmpwi cr6,r4,1
	cr6.compare<int32_t>(ctx.r4.s32, 1, xer);
	// bne cr6,0x82135de8
	if (!cr6.getEQ()) goto loc_82135DE8;
	// lbz r11,3(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 3);
	// cmplwi cr6,r11,39
	cr6.compare<uint32_t>(r11.u32, 39, xer);
	// bne cr6,0x82131ee8
	if (!cr6.getEQ()) goto loc_82131EE8;
	// stw r3,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r3.u32);
loc_821319C4:
	// lhz r30,132(r3)
	r30.u64 = PPC_LOAD_U16(ctx.r3.u32 + 132);
	// lwz r21,128(r3)
	r21.u64 = PPC_LOAD_U32(ctx.r3.u32 + 128);
loc_821319CC:
	// cmplwi cr6,r21,0
	cr6.compare<uint32_t>(r21.u32, 0, xer);
	// beq cr6,0x82135de8
	if (cr6.getEQ()) goto loc_82135DE8;
	// lis r11,-32009
	r11.s64 = -2097741824;
	// lis r23,-32256
	r23.s64 = -2113929216;
	// addi r11,r11,-9856
	r11.s64 = r11.s64 + -9856;
	// lis r3,-32256
	ctx.r3.s64 = -2113929216;
	// lis r31,-32256
	r31.s64 = -2113929216;
	// lis r29,-32256
	r29.s64 = -2113929216;
	// lis r28,-32256
	r28.s64 = -2113929216;
	// lfs f23,6592(r23)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r23.u32 + 6592);
	f23.f64 = double(temp.f32);
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r27,-32256
	r27.s64 = -2113929216;
	// lfs f20,29448(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 29448);
	f20.f64 = double(temp.f32);
	// addi r11,r11,29412
	r11.s64 = r11.s64 + 29412;
	// lfs f21,29444(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 29444);
	f21.f64 = double(temp.f32);
	// lis r26,-32256
	r26.s64 = -2113929216;
	// lfs f26,16716(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 16716);
	f26.f64 = double(temp.f32);
	// lis r25,-32256
	r25.s64 = -2113929216;
	// lfs f17,29440(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 29440);
	f17.f64 = double(temp.f32);
	// lis r24,-32256
	r24.s64 = -2113929216;
	// lwz r23,96(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lis r4,-32256
	ctx.r4.s64 = -2113929216;
	// lfs f18,29408(r27)
	temp.u32 = PPC_LOAD_U32(r27.u32 + 29408);
	f18.f64 = double(temp.f32);
	// stw r11,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lfs f22,6576(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 6576);
	f22.f64 = double(temp.f32);
	// addi r11,r11,29376
	r11.s64 = r11.s64 + 29376;
	// lfs f15,14440(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + 14440);
	f15.f64 = double(temp.f32);
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lfs f28,13960(r24)
	temp.u32 = PPC_LOAD_U32(r24.u32 + 13960);
	f28.f64 = double(temp.f32);
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lfs f24,13964(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 13964);
	f24.f64 = double(temp.f32);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f19,16072(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 16072);
	f19.f64 = double(temp.f32);
	// stw r11,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r11.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f27,2776(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 2776);
	f27.f64 = double(temp.f32);
	// addi r11,r11,-3020
	r11.s64 = r11.s64 + -3020;
	// lfs f29,2952(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 2952);
	f29.f64 = double(temp.f32);
	// lfs f25,17752(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 17752);
	f25.f64 = double(temp.f32);
	// lis r14,-32014
	r14.s64 = -2098069504;
	// lfs f30,2688(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2688);
	f30.f64 = double(temp.f32);
	// lis r15,-32014
	r15.s64 = -2098069504;
	// lis r16,-32014
	r16.s64 = -2098069504;
	// lfs f16,2692(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2692);
	f16.f64 = double(temp.f32);
	// lis r17,-32014
	r17.s64 = -2098069504;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r20,r11,11264
	r20.s64 = r11.s64 + 11264;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,29360
	r11.s64 = r11.s64 + 29360;
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// addi r18,r11,928
	r18.s64 = r11.s64 + 928;
	// lis r11,-32079
	r11.s64 = -2102329344;
	// addi r11,r11,-8800
	r11.s64 = r11.s64 + -8800;
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
loc_82131AC0:
	// lwz r26,100(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r25,1
	r25.s64 = 1;
	// lwz r24,104(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
loc_82131ACC:
	// lbzx r11,r30,r21
	r11.u64 = PPC_LOAD_U8(r30.u32 + r21.u32);
	// add r31,r30,r21
	r31.u64 = r30.u64 + r21.u64;
	// cmplwi cr6,r11,252
	cr6.compare<uint32_t>(r11.u32, 252, xer);
	// bgt cr6,0x82134648
	if (cr6.getGT()) goto loc_82134648;
	// lis r12,-32237
	r12.s64 = -2112684032;
	// addi r12,r12,6900
	r12.s64 = r12.s64 + 6900;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82131EF8;
	case 1:
		goto loc_82131F10;
	case 2:
		goto loc_821326A8;
	case 3:
		goto loc_82135D78;
	case 4:
		goto loc_82135DDC;
	case 5:
		goto loc_82131F28;
	case 6:
		goto loc_82131F8C;
	case 7:
		goto loc_82131FDC;
	case 8:
		goto loc_8213203C;
	case 9:
		goto loc_8213204C;
	case 10:
		goto loc_8213205C;
	case 11:
		goto loc_82132140;
	case 12:
		goto loc_82132164;
	case 13:
		goto loc_82132174;
	case 14:
		goto loc_8213223C;
	case 15:
		goto loc_82132264;
	case 16:
		goto loc_8213228C;
	case 17:
		goto loc_821322B4;
	case 18:
		goto loc_821322DC;
	case 19:
		goto loc_82132304;
	case 20:
		goto loc_8213232C;
	case 21:
		goto loc_82132374;
	case 22:
		goto loc_82132420;
	case 23:
		goto loc_82132468;
	case 24:
		goto loc_821324B0;
	case 25:
		goto loc_821324FC;
	case 26:
		goto loc_821325F4;
	case 27:
		goto loc_8213261C;
	case 28:
		goto loc_821328D8;
	case 29:
		goto loc_821328FC;
	case 30:
		goto loc_82132918;
	case 31:
		goto loc_8213293C;
	case 32:
		goto loc_82132960;
	case 33:
		goto loc_8213265C;
	case 34:
		goto loc_8213266C;
	case 35:
		goto loc_8213267C;
	case 36:
		goto loc_821326B0;
	case 37:
		goto loc_821326EC;
	case 38:
		goto loc_821326F8;
	case 39:
		goto loc_82132704;
	case 40:
		goto loc_8213272C;
	case 41:
		goto loc_82132758;
	case 42:
		goto loc_82132784;
	case 43:
		goto loc_821327B0;
	case 44:
		goto loc_821327D8;
	case 45:
		goto loc_82132808;
	case 46:
		goto loc_82132838;
	case 47:
		goto loc_82132184;
	case 48:
		goto loc_821321AC;
	case 49:
		goto loc_821321EC;
	case 50:
		goto loc_82132214;
	case 51:
		goto loc_82132868;
	case 52:
		goto loc_82132888;
	case 53:
		goto loc_821328B0;
	case 54:
		goto loc_8213297C;
	case 55:
		goto loc_821329A4;
	case 56:
		goto loc_821329C8;
	case 57:
		goto loc_821329EC;
	case 58:
		goto loc_82132A14;
	case 59:
		goto loc_82132A3C;
	case 60:
		goto loc_82132A64;
	case 61:
		goto loc_82132A8C;
	case 62:
		goto loc_82132AB4;
	case 63:
		goto loc_82132ADC;
	case 64:
		goto loc_82132B04;
	case 65:
		goto loc_82132B58;
	case 66:
		goto loc_82132B80;
	case 67:
		goto loc_82132BAC;
	case 68:
		goto loc_82132BE4;
	case 69:
		goto loc_82132C20;
	case 70:
		goto loc_82132C48;
	case 71:
		goto loc_82132C70;
	case 72:
		goto loc_82132CB0;
	case 73:
		goto loc_82132CF0;
	case 74:
		goto loc_82132D30;
	case 75:
		goto loc_82132D70;
	case 76:
		goto loc_82132DC0;
	case 77:
		goto loc_82132E10;
	case 78:
		goto loc_82132E90;
	case 79:
		goto loc_82132F08;
	case 80:
		goto loc_82132F5C;
	case 81:
		goto loc_82132FB0;
	case 82:
		goto loc_82133000;
	case 83:
		goto loc_82133064;
	case 84:
		goto loc_821330C8;
	case 85:
		goto loc_82133108;
	case 86:
		goto loc_82133144;
	case 87:
		goto loc_82133184;
	case 88:
		goto loc_821331AC;
	case 89:
		goto loc_82133224;
	case 90:
		goto loc_82133254;
	case 91:
		goto loc_82133288;
	case 92:
		goto loc_821332C8;
	case 93:
		goto loc_82133318;
	case 94:
		goto loc_82133368;
	case 95:
		goto loc_821333B8;
	case 96:
		goto loc_82133414;
	case 97:
		goto loc_82133470;
	case 98:
		goto loc_8213349C;
	case 99:
		goto loc_82133508;
	case 100:
		goto loc_82133544;
	case 101:
		goto loc_821335D8;
	case 102:
		goto loc_821336AC;
	case 103:
		goto loc_821336E4;
	case 104:
		goto loc_8213371C;
	case 105:
		goto loc_821337C0;
	case 106:
		goto loc_82133810;
	case 107:
		goto loc_82133850;
	case 108:
		goto loc_82133890;
	case 109:
		goto loc_821338E4;
	case 110:
		goto loc_8213391C;
	case 111:
		goto loc_82133948;
	case 112:
		goto loc_82133B94;
	case 113:
		goto loc_82133BBC;
	case 114:
		goto loc_82133BE4;
	case 115:
		goto loc_82133C2C;
	case 116:
		goto loc_82133C74;
	case 117:
		goto loc_82133CC0;
	case 118:
		goto loc_82133D0C;
	case 119:
		goto loc_82133D34;
	case 120:
		goto loc_82133974;
	case 121:
		goto loc_821339A0;
	case 122:
		goto loc_821339CC;
	case 123:
		goto loc_821339F8;
	case 124:
		goto loc_82133A24;
	case 125:
		goto loc_82133A7C;
	case 126:
		goto loc_82133AD4;
	case 127:
		goto loc_82133B1C;
	case 128:
		goto loc_82133B58;
	case 129:
		goto loc_82133D5C;
	case 130:
		goto loc_82133D6C;
	case 131:
		goto loc_82133DB0;
	case 132:
		goto loc_82133DEC;
	case 133:
		goto loc_82133E14;
	case 134:
		goto loc_82133E3C;
	case 135:
		goto loc_82133E4C;
	case 136:
		goto loc_82133E90;
	case 137:
		goto loc_82133ECC;
	case 138:
		goto loc_82133EF4;
	case 139:
		goto loc_82133F1C;
	case 140:
		goto loc_82133F50;
	case 141:
		goto loc_82133F70;
	case 142:
		goto loc_82133F80;
	case 143:
		goto loc_82133F90;
	case 144:
		goto loc_82133FC8;
	case 145:
		goto loc_82134000;
	case 146:
		goto loc_82134010;
	case 147:
		goto loc_82134020;
	case 148:
		goto loc_82134030;
	case 149:
		goto loc_82134044;
	case 150:
		goto loc_82134058;
	case 151:
		goto loc_82134084;
	case 152:
		goto loc_8213409C;
	case 153:
		goto loc_821340B4;
	case 154:
		goto loc_821340E4;
	case 155:
		goto loc_8213411C;
	case 156:
		goto loc_82134154;
	case 157:
		goto loc_821341A4;
	case 158:
		goto loc_821341E0;
	case 159:
		goto loc_8213421C;
	case 160:
		goto loc_8213426C;
	case 161:
		goto loc_821342BC;
	case 162:
		goto loc_8213430C;
	case 163:
		goto loc_82134370;
	case 164:
		goto loc_821343C8;
	case 165:
		goto loc_82134420;
	case 166:
		goto loc_8213448C;
	case 167:
		goto loc_821344E4;
	case 168:
		goto loc_8213453C;
	case 169:
		goto loc_821345A8;
	case 170:
		goto loc_821345BC;
	case 171:
		goto loc_821345D4;
	case 172:
		goto loc_82134618;
	case 173:
		goto loc_8213463C;
	case 174:
		goto loc_8213465C;
	case 175:
		goto loc_8213466C;
	case 176:
		goto loc_82134678;
	case 177:
		goto loc_8213468C;
	case 178:
		goto loc_821346A0;
	case 179:
		goto loc_821346C8;
	case 180:
		goto loc_82134724;
	case 181:
		goto loc_82134780;
	case 182:
		goto loc_82134794;
	case 183:
		goto loc_821347A8;
	case 184:
		goto loc_821347DC;
	case 185:
		goto loc_821347EC;
	case 186:
		goto loc_821347FC;
	case 187:
		goto loc_82134820;
	case 188:
		goto loc_8213486C;
	case 189:
		goto loc_821348B8;
	case 190:
		goto loc_82134950;
	case 191:
		goto loc_821349D4;
	case 192:
		goto loc_82134B24;
	case 193:
		goto loc_82134BAC;
	case 194:
		goto loc_82134D50;
	case 195:
		goto loc_82134D70;
	case 196:
		goto loc_82134D90;
	case 197:
		goto loc_82134F5C;
	case 198:
		goto loc_82134FF0;
	case 199:
		goto loc_82134DE4;
	case 200:
		goto loc_82134E9C;
	case 201:
		goto loc_82134DB8;
	case 202:
		goto loc_821350BC;
	case 203:
		goto loc_82135120;
	case 204:
		goto loc_82135140;
	case 205:
		goto loc_821351A4;
	case 206:
		goto loc_82135208;
	case 207:
		goto loc_82135228;
	case 208:
		goto loc_8213524C;
	case 209:
		goto loc_821352B8;
	case 210:
		goto loc_821352DC;
	case 211:
		goto loc_82135314;
	case 212:
		goto loc_82135324;
	case 213:
		goto loc_82135370;
	case 214:
		goto loc_821353F0;
	case 215:
		goto loc_8213543C;
	case 216:
		goto loc_821354B4;
	case 217:
		goto loc_821354FC;
	case 218:
		goto loc_8213567C;
	case 219:
		goto loc_821356B4;
	case 220:
		goto loc_821356EC;
	case 221:
		goto loc_82135718;
	case 222:
		goto loc_82135768;
	case 223:
		goto loc_821357AC;
	case 224:
		goto loc_82135804;
	case 225:
		goto loc_82135828;
	case 226:
		goto loc_82135854;
	case 227:
		goto loc_82135888;
	case 228:
		goto loc_821358AC;
	case 229:
		goto loc_821358D0;
	case 230:
		goto loc_82135914;
	case 231:
		goto loc_821323BC;
	case 232:
		goto loc_821323FC;
	case 233:
		goto loc_821359A0;
	case 234:
		goto loc_821359B0;
	case 235:
		goto loc_821359CC;
	case 236:
		goto loc_821359F8;
	case 237:
		goto loc_82135A08;
	case 238:
		goto loc_82135A20;
	case 239:
		goto loc_82135B40;
	case 240:
		goto loc_82135B50;
	case 241:
		goto loc_82135B78;
	case 242:
		goto loc_82135B9C;
	case 243:
		goto loc_82135BC8;
	case 244:
		goto loc_82135BF0;
	case 245:
		goto loc_82135C10;
	case 246:
		goto loc_82135C28;
	case 247:
		goto loc_82135C38;
	case 248:
		goto loc_82135C60;
	case 249:
		goto loc_82135CA8;
	case 250:
		goto loc_82135CBC;
	case 251:
		goto loc_82135CCC;
	case 252:
		goto loc_82135CE8;
	default:
		__builtin_unreachable();
	}
	// lwz r16,7928(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 7928);
	// lwz r16,7952(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 7952);
	// lwz r16,9896(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9896);
	// lwz r16,23928(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23928);
	// lwz r16,24028(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 24028);
	// lwz r16,7976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 7976);
	// lwz r16,8076(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8076);
	// lwz r16,8156(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8156);
	// lwz r16,8252(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8252);
	// lwz r16,8268(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8268);
	// lwz r16,8284(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8284);
	// lwz r16,8512(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8512);
	// lwz r16,8548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8548);
	// lwz r16,8564(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8564);
	// lwz r16,8764(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8764);
	// lwz r16,8804(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8804);
	// lwz r16,8844(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8844);
	// lwz r16,8884(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8884);
	// lwz r16,8924(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8924);
	// lwz r16,8964(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8964);
	// lwz r16,9004(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9004);
	// lwz r16,9076(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9076);
	// lwz r16,9248(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9248);
	// lwz r16,9320(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9320);
	// lwz r16,9392(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9392);
	// lwz r16,9468(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9468);
	// lwz r16,9716(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9716);
	// lwz r16,9756(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9756);
	// lwz r16,10456(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10456);
	// lwz r16,10492(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10492);
	// lwz r16,10520(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10520);
	// lwz r16,10556(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10556);
	// lwz r16,10592(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10592);
	// lwz r16,9820(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9820);
	// lwz r16,9836(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9836);
	// lwz r16,9852(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9852);
	// lwz r16,9904(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9904);
	// lwz r16,9964(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9964);
	// lwz r16,9976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9976);
	// lwz r16,9988(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9988);
	// lwz r16,10028(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10028);
	// lwz r16,10072(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10072);
	// lwz r16,10116(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10116);
	// lwz r16,10160(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10160);
	// lwz r16,10200(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10200);
	// lwz r16,10248(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10248);
	// lwz r16,10296(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10296);
	// lwz r16,8580(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8580);
	// lwz r16,8620(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8620);
	// lwz r16,8684(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8684);
	// lwz r16,8724(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 8724);
	// lwz r16,10344(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10344);
	// lwz r16,10376(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10376);
	// lwz r16,10416(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10416);
	// lwz r16,10620(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10620);
	// lwz r16,10660(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10660);
	// lwz r16,10696(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10696);
	// lwz r16,10732(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10732);
	// lwz r16,10772(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10772);
	// lwz r16,10812(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10812);
	// lwz r16,10852(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10852);
	// lwz r16,10892(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10892);
	// lwz r16,10932(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10932);
	// lwz r16,10972(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 10972);
	// lwz r16,11012(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11012);
	// lwz r16,11096(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11096);
	// lwz r16,11136(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11136);
	// lwz r16,11180(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11180);
	// lwz r16,11236(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11236);
	// lwz r16,11296(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11296);
	// lwz r16,11336(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11336);
	// lwz r16,11376(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11376);
	// lwz r16,11440(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11440);
	// lwz r16,11504(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11504);
	// lwz r16,11568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11568);
	// lwz r16,11632(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11632);
	// lwz r16,11712(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11712);
	// lwz r16,11792(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11792);
	// lwz r16,11920(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 11920);
	// lwz r16,12040(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12040);
	// lwz r16,12124(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12124);
	// lwz r16,12208(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12208);
	// lwz r16,12288(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12288);
	// lwz r16,12388(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12388);
	// lwz r16,12488(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12488);
	// lwz r16,12552(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12552);
	// lwz r16,12612(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12612);
	// lwz r16,12676(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12676);
	// lwz r16,12716(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12716);
	// lwz r16,12836(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12836);
	// lwz r16,12884(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12884);
	// lwz r16,12936(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 12936);
	// lwz r16,13000(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 13000);
	// lwz r16,13080(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 13080);
	// lwz r16,13160(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 13160);
	// lwz r16,13240(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 13240);
	// lwz r16,13332(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 13332);
	// lwz r16,13424(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 13424);
	// lwz r16,13468(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 13468);
	// lwz r16,13576(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 13576);
	// lwz r16,13636(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 13636);
	// lwz r16,13784(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 13784);
	// lwz r16,13996(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 13996);
	// lwz r16,14052(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14052);
	// lwz r16,14108(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14108);
	// lwz r16,14272(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14272);
	// lwz r16,14352(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14352);
	// lwz r16,14416(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14416);
	// lwz r16,14480(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14480);
	// lwz r16,14564(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14564);
	// lwz r16,14620(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14620);
	// lwz r16,14664(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14664);
	// lwz r16,15252(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15252);
	// lwz r16,15292(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15292);
	// lwz r16,15332(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15332);
	// lwz r16,15404(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15404);
	// lwz r16,15476(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15476);
	// lwz r16,15552(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15552);
	// lwz r16,15628(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15628);
	// lwz r16,15668(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15668);
	// lwz r16,14708(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14708);
	// lwz r16,14752(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14752);
	// lwz r16,14796(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14796);
	// lwz r16,14840(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14840);
	// lwz r16,14884(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14884);
	// lwz r16,14972(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 14972);
	// lwz r16,15060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15060);
	// lwz r16,15132(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15132);
	// lwz r16,15192(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15192);
	// lwz r16,15708(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15708);
	// lwz r16,15724(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15724);
	// lwz r16,15792(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15792);
	// lwz r16,15852(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15852);
	// lwz r16,15892(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15892);
	// lwz r16,15932(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15932);
	// lwz r16,15948(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 15948);
	// lwz r16,16016(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16016);
	// lwz r16,16076(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16076);
	// lwz r16,16116(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16116);
	// lwz r16,16156(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16156);
	// lwz r16,16208(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16208);
	// lwz r16,16240(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16240);
	// lwz r16,16256(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16256);
	// lwz r16,16272(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16272);
	// lwz r16,16328(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16328);
	// lwz r16,16384(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16384);
	// lwz r16,16400(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16400);
	// lwz r16,16416(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16416);
	// lwz r16,16432(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16432);
	// lwz r16,16452(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16452);
	// lwz r16,16472(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16472);
	// lwz r16,16516(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16516);
	// lwz r16,16540(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16540);
	// lwz r16,16564(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16564);
	// lwz r16,16612(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16612);
	// lwz r16,16668(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16668);
	// lwz r16,16724(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16724);
	// lwz r16,16804(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16804);
	// lwz r16,16864(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16864);
	// lwz r16,16924(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 16924);
	// lwz r16,17004(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17004);
	// lwz r16,17084(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17084);
	// lwz r16,17164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17164);
	// lwz r16,17264(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17264);
	// lwz r16,17352(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17352);
	// lwz r16,17440(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17440);
	// lwz r16,17548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17548);
	// lwz r16,17636(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17636);
	// lwz r16,17724(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17724);
	// lwz r16,17832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17832);
	// lwz r16,17852(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17852);
	// lwz r16,17876(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17876);
	// lwz r16,17944(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17944);
	// lwz r16,17980(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 17980);
	// lwz r16,18012(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18012);
	// lwz r16,18028(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18028);
	// lwz r16,18040(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18040);
	// lwz r16,18060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18060);
	// lwz r16,18080(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18080);
	// lwz r16,18120(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18120);
	// lwz r16,18212(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18212);
	// lwz r16,18304(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18304);
	// lwz r16,18324(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18324);
	// lwz r16,18344(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18344);
	// lwz r16,18396(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18396);
	// lwz r16,18412(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18412);
	// lwz r16,18428(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18428);
	// lwz r16,18464(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18464);
	// lwz r16,18540(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18540);
	// lwz r16,18616(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18616);
	// lwz r16,18768(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18768);
	// lwz r16,18900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 18900);
	// lwz r16,19236(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19236);
	// lwz r16,19372(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19372);
	// lwz r16,19792(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19792);
	// lwz r16,19824(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19824);
	// lwz r16,19856(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19856);
	// lwz r16,20316(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 20316);
	// lwz r16,20464(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 20464);
	// lwz r16,19940(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19940);
	// lwz r16,20124(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 20124);
	// lwz r16,19896(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19896);
	// lwz r16,20668(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 20668);
	// lwz r16,20768(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 20768);
	// lwz r16,20800(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 20800);
	// lwz r16,20900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 20900);
	// lwz r16,21000(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 21000);
	// lwz r16,21032(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 21032);
	// lwz r16,21068(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 21068);
	// lwz r16,21176(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 21176);
	// lwz r16,21212(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 21212);
	// lwz r16,21268(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 21268);
	// lwz r16,21284(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 21284);
	// lwz r16,21360(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 21360);
	// lwz r16,21488(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 21488);
	// lwz r16,21564(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 21564);
	// lwz r16,21684(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 21684);
	// lwz r16,21756(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 21756);
	// lwz r16,22140(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22140);
	// lwz r16,22196(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22196);
	// lwz r16,22252(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22252);
	// lwz r16,22296(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22296);
	// lwz r16,22376(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22376);
	// lwz r16,22444(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22444);
	// lwz r16,22532(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22532);
	// lwz r16,22568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22568);
	// lwz r16,22612(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22612);
	// lwz r16,22664(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22664);
	// lwz r16,22700(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22700);
	// lwz r16,22736(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22736);
	// lwz r16,22804(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22804);
	// lwz r16,9148(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9148);
	// lwz r16,9212(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 9212);
	// lwz r16,22944(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22944);
	// lwz r16,22960(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22960);
	// lwz r16,22988(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 22988);
	// lwz r16,23032(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23032);
	// lwz r16,23048(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23048);
	// lwz r16,23072(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23072);
	// lwz r16,23360(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23360);
	// lwz r16,23376(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23376);
	// lwz r16,23416(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23416);
	// lwz r16,23452(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23452);
	// lwz r16,23496(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23496);
	// lwz r16,23536(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23536);
	// lwz r16,23568(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23568);
	// lwz r16,23592(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23592);
	// lwz r16,23608(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23608);
	// lwz r16,23648(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23648);
	// lwz r16,23720(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23720);
	// lwz r16,23740(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23740);
	// lwz r16,23756(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23756);
	// lwz r16,23784(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 23784);
loc_82131EE8:
	// cmplwi cr6,r11,40
	cr6.compare<uint32_t>(r11.u32, 40, xer);
	// bne cr6,0x82135de8
	if (!cr6.getEQ()) goto loc_82135DE8;
	// stw r3,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r3.u32);
	// b 0x821319c4
	goto loc_821319C4;
loc_82131EF8:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82131F10:
	// li r4,0
	ctx.r4.s64 = 0;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82131F28:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// cmplwi cr6,r4,253
	cr6.compare<uint32_t>(ctx.r4.u32, 253, xer);
	// clrlwi r31,r11,16
	r31.u64 = r11.u32 & 0xFFFF;
	// bne cr6,0x82131f5c
	if (!cr6.getEQ()) goto loc_82131F5C;
	// clrlwi r3,r31,16
	ctx.r3.u64 = r31.u32 & 0xFFFF;
	// bl 0x82131850
	sub_82131850(ctx, base);
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// mr r30,r19
	r30.u64 = r19.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82131F5C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// clrlwi r3,r31,16
	ctx.r3.u64 = r31.u32 & 0xFFFF;
	// bl 0x82131850
	sub_82131850(ctx, base);
	// stw r3,260(r7)
	PPC_STORE_U32(ctx.r7.u32 + 260, ctx.r3.u32);
	// sth r19,264(r7)
	PPC_STORE_U16(ctx.r7.u32 + 264, r19.u16);
	// stb r19,8(r7)
	PPC_STORE_U8(ctx.r7.u32 + 8, r19.u8);
loc_82131F84:
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82131F8C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// beq cr6,0x82131fb4
	if (cr6.getEQ()) goto loc_82131FB4;
	// sth r11,266(r22)
	PPC_STORE_U16(r22.u32 + 266, r11.u16);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82131FB4:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82131fc8
	if (cr6.getEQ()) goto loc_82131FC8;
	// sth r11,134(r26)
	PPC_STORE_U16(r26.u32 + 134, r11.u16);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82131FC8:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// sth r11,134(r23)
	PPC_STORE_U16(r23.u32 + 134, r11.u16);
loc_82131FD4:
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82131FDC:
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// beq cr6,0x82131ffc
	if (cr6.getEQ()) goto loc_82131FFC;
	// lhz r11,266(r22)
	r11.u64 = PPC_LOAD_U16(r22.u32 + 266);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// bl 0x82131850
	sub_82131850(ctx, base);
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// mr r30,r19
	r30.u64 = r19.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82131FFC:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x8213201c
	if (cr6.getEQ()) goto loc_8213201C;
	// lhz r11,134(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 134);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// bl 0x82131850
	sub_82131850(ctx, base);
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// mr r30,r19
	r30.u64 = r19.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213201C:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x82132034
	if (cr6.getEQ()) goto loc_82132034;
	// lhz r11,134(r23)
	r11.u64 = PPC_LOAD_U16(r23.u32 + 134);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// bl 0x82131850
	sub_82131850(ctx, base);
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
loc_82132034:
	// mr r30,r19
	r30.u64 = r19.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213203C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212baf8
	sub_8212BAF8(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213204C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212bcd8
	sub_8212BCD8(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213205C:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lbz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,1(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r5,r11,r10
	ctx.r5.u64 = r11.u64 | ctx.r10.u64;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,6(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// rotlwi r9,r9,8
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 8);
	// rotlwi r8,r8,8
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r8.u32, 8);
	// or r4,r9,r11
	ctx.r4.u64 = ctx.r9.u64 | r11.u64;
	// or r29,r8,r10
	r29.u64 = ctx.r8.u64 | ctx.r10.u64;
	// cmplwi cr6,r5,65535
	cr6.compare<uint32_t>(ctx.r5.u32, 65535, xer);
	// bne cr6,0x82132098
	if (!cr6.getEQ()) goto loc_82132098;
	// mr r5,r19
	ctx.r5.u64 = r19.u64;
loc_82132098:
	// cmplwi cr6,r29,65535
	cr6.compare<uint32_t>(r29.u32, 65535, xer);
	// bne cr6,0x821320a4
	if (!cr6.getEQ()) goto loc_821320A4;
	// li r29,-1
	r29.s64 = -1;
loc_821320A4:
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// beq cr6,0x821320c8
	if (cr6.getEQ()) goto loc_821320C8;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// lbz r8,8(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r7,7(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// bl 0x8212bd48
	sub_8212BD48(ctx, base);
	// addi r30,r30,9
	r30.s64 = r30.s64 + 9;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821320C8:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x82132138
	if (cr6.getEQ()) goto loc_82132138;
	// lbz r11,8(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// extsw r10,r5
	ctx.r10.s64 = ctx.r5.s32;
	// rlwinm r9,r4,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r3,20(r23)
	ctx.r3.u64 = PPC_LOAD_U32(r23.u32 + 20);
	// li r5,0
	ctx.r5.s64 = 0;
	// fmr f2,f16
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f16.f64;
	// std r11,496(r1)
	PPC_STORE_U64(ctx.r1.u32 + 496, r11.u64);
	// std r10,504(r1)
	PPC_STORE_U64(ctx.r1.u32 + 504, ctx.r10.u64);
	// lwz r11,144(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lwzx r4,r9,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// lfd f13,496(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 496);
	// lfd f0,504(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 504);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f3,f13
	ctx.f3.f64 = double(float(ctx.f13.f64));
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8211d710
	sub_8211D710(ctx, base);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// blt cr6,0x82132138
	if (cr6.getLT()) goto loc_82132138;
	// extsw r11,r29
	r11.s64 = r29.s32;
	// lwz r3,20(r23)
	ctx.r3.u64 = PPC_LOAD_U32(r23.u32 + 20);
	// std r11,512(r1)
	PPC_STORE_U64(ctx.r1.u32 + 512, r11.u64);
	// lfd f0,512(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 512);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8211d758
	sub_8211D758(ctx, base);
loc_82132138:
	// addi r30,r30,9
	r30.s64 = r30.s64 + 9;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132140:
	// lbz r11,7(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 7);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x821326a8
	if (!cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132164:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212bb88
	sub_8212BB88(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132174:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212bc68
	sub_8212BC68(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132184:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821233f0
	sub_821233F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821321AC:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821321d4
	if (cr6.getEQ()) goto loc_821321D4;
	// bl 0x82123708
	sub_82123708(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x821321d4
	if (!cr6.getEQ()) goto loc_821321D4;
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821321D4:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821321EC:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821321d4
	if (cr6.getEQ()) goto loc_821321D4;
	// lwz r11,28(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821321d4
	if (cr6.getEQ()) goto loc_821321D4;
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132214:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212a008
	sub_8212A008(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213223C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212a248
	sub_8212A248(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132264:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212a3c0
	sub_8212A3C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213228C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212a538
	sub_8212A538(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821322B4:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82123730
	sub_82123730(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821322DC:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82123828
	sub_82123828(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132304:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82123920
	sub_82123920(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213232C:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r8,2(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r10,r10,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 8);
	// or r5,r11,r9
	ctx.r5.u64 = r11.u64 | ctx.r9.u64;
	// or r4,r10,r8
	ctx.r4.u64 = ctx.r10.u64 | ctx.r8.u64;
	// bl 0x8212ca90
	sub_8212CA90(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821342b4
	if (cr6.getEQ()) goto loc_821342B4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,5(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132374:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r8,2(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r10,r10,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 8);
	// or r5,r11,r9
	ctx.r5.u64 = r11.u64 | ctx.r9.u64;
	// or r4,r10,r8
	ctx.r4.u64 = ctx.r10.u64 | ctx.r8.u64;
	// bl 0x8212cb30
	sub_8212CB30(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821342b4
	if (cr6.getEQ()) goto loc_821342B4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,5(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821323BC:
	// lbz r11,7(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 7);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x821326a8
	if (!cr6.getEQ()) goto loc_821326A8;
	// lwz r11,88(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 88);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x821326a8
	if (!cr6.getEQ()) goto loc_821326A8;
	// lwz r11,76(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 76);
	// rlwinm r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821323FC:
	// lbz r11,7(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 7);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x821326a8
	if (!cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132420:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r8,2(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r10,r10,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 8);
	// or r5,r11,r9
	ctx.r5.u64 = r11.u64 | ctx.r9.u64;
	// or r4,r10,r8
	ctx.r4.u64 = ctx.r10.u64 | ctx.r8.u64;
	// bl 0x82123a78
	sub_82123A78(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821342b4
	if (cr6.getEQ()) goto loc_821342B4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,5(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132468:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r8,2(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r10,r10,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 8);
	// or r5,r11,r9
	ctx.r5.u64 = r11.u64 | ctx.r9.u64;
	// or r4,r10,r8
	ctx.r4.u64 = ctx.r10.u64 | ctx.r8.u64;
	// bl 0x8212a6d0
	sub_8212A6D0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821342b4
	if (cr6.getEQ()) goto loc_821342B4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,5(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821324B0:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// stfs f30,176(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 176, temp.u32);
	// stfs f30,180(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 180, temp.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stfs f30,184(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 184, temp.u32);
	// beq cr6,0x821324f4
	if (cr6.getEQ()) goto loc_821324F4;
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821324f4
	if (cr6.getEQ()) goto loc_821324F4;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r5,r1,176
	ctx.r5.s64 = ctx.r1.s64 + 176;
	// lbz r6,3(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// bl 0x82128fa8
	sub_82128FA8(ctx, base);
loc_821324F4:
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821324FC:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,2(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x821325ec
	if (cr6.getEQ()) goto loc_821325EC;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x821325ec
	if (cr6.getEQ()) goto loc_821325EC;
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821325ec
	if (cr6.getEQ()) goto loc_821325EC;
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821325ec
	if (cr6.getEQ()) goto loc_821325EC;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821202a0
	sub_821202A0(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// stfs f30,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stfs f30,132(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// stfs f30,136(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// bne cr6,0x82132580
	if (!cr6.getEQ()) goto loc_82132580;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821202a0
	sub_821202A0(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x821325ec
	if (cr6.getEQ()) goto loc_821325EC;
loc_82132580:
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// addi r5,r1,136
	ctx.r5.s64 = ctx.r1.s64 + 136;
	// lwz r10,24(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// lfs f0,12(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f13,12(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,128(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// lfs f13,16(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,16(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 16);
	f0.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,132(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// lfs f0,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	f0.f64 = double(temp.f32);
	// lfs f13,20(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// stfs f0,136(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// bl 0x820d3710
	sub_820D3710(ctx, base);
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// extsb r4,r10
	ctx.r4.s64 = ctx.r10.s8;
	// lbz r11,128(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 128);
	// extsb r6,r11
	ctx.r6.s64 = r11.s8;
	// bl 0x82128fa8
	sub_82128FA8(ctx, base);
loc_821325EC:
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821325F4:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212be80
	sub_8212BE80(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213261C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// clrlwi r4,r11,16
	ctx.r4.u64 = r11.u32 & 0xFFFF;
	// bl 0x82127680
	sub_82127680(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82134114
	if (cr6.getEQ()) goto loc_82134114;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213265C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212b8b8
	sub_8212B8B8(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213266C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212b928
	sub_8212B928(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213267C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// lhz r11,18(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 18);
	// ori r11,r11,32
	r11.u64 = r11.u64 | 32;
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
loc_821326A8:
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821326B0:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// clrlwi r4,r11,16
	ctx.r4.u64 = r11.u32 & 0xFFFF;
	// bl 0x8212bdb8
	sub_8212BDB8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821326EC:
	// bl 0x820df4e0
	sub_820DF4E0(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821326F8:
	// bl 0x820df548
	sub_820DF548(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132704:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82345d68
	sub_82345D68(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213272C:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212b980
	sub_8212B980(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132758:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212b980
	sub_8212B980(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132784:
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212b980
	sub_8212B980(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821327B0:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82345d68
	sub_82345D68(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821327D8:
	// li r5,1
	ctx.r5.s64 = 1;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212ba28
	sub_8212BA28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132808:
	// li r5,0
	ctx.r5.s64 = 0;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212ba28
	sub_8212BA28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132838:
	// li r5,2
	ctx.r5.s64 = 2;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212ba28
	sub_8212BA28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132868:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// stb r11,271(r22)
	PPC_STORE_U8(r22.u32 + 271, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132888:
	// lbz r11,271(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 271);
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82131fd4
	if (!cr6.getLT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821328B0:
	// lbz r11,271(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 271);
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// ble cr6,0x82131fd4
	if (!cr6.getGT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821328D8:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// li r5,1
	ctx.r5.s64 = 1;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r4,r11,r10
	ctx.r4.u64 = r11.u64 | ctx.r10.u64;
	// bl 0x8212a760
	sub_8212A760(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821328FC:
	// lhz r11,276(r22)
	r11.u64 = PPC_LOAD_U16(r22.u32 + 276);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// extsh r4,r11
	ctx.r4.s64 = r11.s16;
	// bl 0x8212a760
	sub_8212A760(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132918:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// li r5,0
	ctx.r5.s64 = 0;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r4,r11,r10
	ctx.r4.u64 = r11.u64 | ctx.r10.u64;
	// bl 0x8212a760
	sub_8212A760(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213293C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// li r5,2
	ctx.r5.s64 = 2;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r4,r11,r10
	ctx.r4.u64 = r11.u64 | ctx.r10.u64;
	// bl 0x8212a760
	sub_8212A760(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132960:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x82131910
	sub_82131910(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212a8e8
	sub_8212A8E8(ctx, base);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213297C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821269b0
	sub_821269B0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821329A4:
	// bl 0x820df5a0
	sub_820DF5A0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821329C8:
	// bl 0x820df6b0
	sub_820DF6B0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821329EC:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82126850
	sub_82126850(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132A14:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82126970
	sub_82126970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132A3C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82126990
	sub_82126990(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132A64:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82122e28
	sub_82122E28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132A8C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82126f88
	sub_82126F88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132AB4:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821261d0
	sub_821261D0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132ADC:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82126200
	sub_82126200(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132B04:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// addi r4,r11,12
	ctx.r4.s64 = r11.s64 + 12;
	// lwz r5,24(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// bl 0x82122f18
	sub_82122F18(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132B58:
	// lwz r11,20(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 20);
	// rlwinm r11,r11,0,28,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821326a8
	if (!cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132B80:
	// lwz r11,24(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 24);
	// lbz r11,1(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132BAC:
	// lwz r11,24(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 24);
	// lwz r3,24(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// bl 0x82110d78
	sub_82110D78(ctx, base);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// mulli r11,r3,156
	r11.s64 = ctx.r3.s64 * 156;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132BE4:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// clrlwi r4,r11,16
	ctx.r4.u64 = r11.u32 & 0xFFFF;
	// bl 0x8212b7f0
	sub_8212B7F0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132C20:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821268a0
	sub_821268A0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132C48:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82126940
	sub_82126940(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132C70:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821262b8
	sub_821262B8(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// std r11,528(r1)
	PPC_STORE_U64(ctx.r1.u32 + 528, r11.u64);
	// lfd f0,528(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 528);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f25
	f0.f64 = double(float(f0.f64 * f25.f64));
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x82131fd4
	if (!cr6.getLT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132CB0:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821262b8
	sub_821262B8(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// std r11,544(r1)
	PPC_STORE_U64(ctx.r1.u32 + 544, r11.u64);
	// lfd f0,544(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 544);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f25
	f0.f64 = double(float(f0.f64 * f25.f64));
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// ble cr6,0x82131fd4
	if (!cr6.getGT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132CF0:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821262f8
	sub_821262F8(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// std r11,472(r1)
	PPC_STORE_U64(ctx.r1.u32 + 472, r11.u64);
	// lfd f0,472(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 472);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f25
	f0.f64 = double(float(f0.f64 * f25.f64));
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x82131fd4
	if (!cr6.getLT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132D30:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821262f8
	sub_821262F8(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,216(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f25
	f0.f64 = double(float(f0.f64 * f25.f64));
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// ble cr6,0x82131fd4
	if (!cr6.getGT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132D70:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,392(r1)
	PPC_STORE_U64(ctx.r1.u32 + 392, r11.u64);
	// lfd f0,392(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 392);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f29
	f31.f64 = double(float(f0.f64 * f29.f64));
	// bl 0x82126378
	sub_82126378(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x82131f84
	if (!cr6.getLT()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132DC0:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,232(r1)
	PPC_STORE_U64(ctx.r1.u32 + 232, r11.u64);
	// lfd f0,232(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 232);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f29
	f31.f64 = double(float(f0.f64 * f29.f64));
	// bl 0x82126378
	sub_82126378(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x82131f84
	if (!cr6.getGT()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132E10:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rotlwi r10,r9,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 8);
	// extsw r9,r11
	ctx.r9.s64 = r11.s32;
	// or r11,r10,r8
	r11.u64 = ctx.r10.u64 | ctx.r8.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// std r9,520(r1)
	PPC_STORE_U64(ctx.r1.u32 + 520, ctx.r9.u64);
	// lfd f0,520(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 520);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f29
	f31.f64 = double(float(f0.f64 * f29.f64));
	// beq cr6,0x82132e88
	if (cr6.getEQ()) goto loc_82132E88;
	// clrlwi r4,r11,16
	ctx.r4.u64 = r11.u32 & 0xFFFF;
	// bl 0x8212b728
	sub_8212B728(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x82132e88
	if (!cr6.getLT()) goto loc_82132E88;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,6(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132E88:
	// addi r30,r30,7
	r30.s64 = r30.s64 + 7;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132E90:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rotlwi r10,r9,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 8);
	// extsw r9,r11
	ctx.r9.s64 = r11.s32;
	// or r11,r10,r8
	r11.u64 = ctx.r10.u64 | ctx.r8.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// std r9,248(r1)
	PPC_STORE_U64(ctx.r1.u32 + 248, ctx.r9.u64);
	// lfd f0,248(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 248);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f29
	f31.f64 = double(float(f0.f64 * f29.f64));
	// beq cr6,0x82132e88
	if (cr6.getEQ()) goto loc_82132E88;
	// clrlwi r4,r11,16
	ctx.r4.u64 = r11.u32 & 0xFFFF;
	// bl 0x8212b728
	sub_8212B728(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x82132e88
	if (!cr6.getGT()) goto loc_82132E88;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,6(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132F08:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r4,3(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,408(r1)
	PPC_STORE_U64(ctx.r1.u32 + 408, r11.u64);
	// lfd f0,408(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 408);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f29
	f31.f64 = double(float(f0.f64 * f29.f64));
	// bl 0x82126570
	sub_82126570(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x82134114
	if (!cr6.getLT()) goto loc_82134114;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132F5C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r4,3(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,264(r1)
	PPC_STORE_U64(ctx.r1.u32 + 264, r11.u64);
	// lfd f0,264(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 264);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f29
	f31.f64 = double(float(f0.f64 * f29.f64));
	// bl 0x82126570
	sub_82126570(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x82134114
	if (!cr6.getGT()) goto loc_82134114;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82132FB0:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,488(r1)
	PPC_STORE_U64(ctx.r1.u32 + 488, r11.u64);
	// lfd f0,488(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 488);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f1,f0,f29
	ctx.f1.f64 = double(float(f0.f64 * f29.f64));
	// bl 0x82126d20
	sub_82126D20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133000:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,3(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lbz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rotlwi r10,r9,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 8);
	// extsw r9,r11
	ctx.r9.s64 = r11.s32;
	// or r11,r10,r8
	r11.u64 = ctx.r10.u64 | ctx.r8.u64;
	// clrlwi r4,r11,16
	ctx.r4.u64 = r11.u32 & 0xFFFF;
	// std r9,280(r1)
	PPC_STORE_U64(ctx.r1.u32 + 280, ctx.r9.u64);
	// lfd f0,280(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 280);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f29
	f31.f64 = double(float(f0.f64 * f29.f64));
	// bl 0x82126600
	sub_82126600(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x821342b4
	if (!cr6.getLT()) goto loc_821342B4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,5(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133064:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,3(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lbz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rotlwi r10,r9,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 8);
	// extsw r9,r11
	ctx.r9.s64 = r11.s32;
	// or r11,r10,r8
	r11.u64 = ctx.r10.u64 | ctx.r8.u64;
	// clrlwi r4,r11,16
	ctx.r4.u64 = r11.u32 & 0xFFFF;
	// std r9,424(r1)
	PPC_STORE_U64(ctx.r1.u32 + 424, ctx.r9.u64);
	// lfd f0,424(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 424);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f29
	f31.f64 = double(float(f0.f64 * f29.f64));
	// bl 0x82126600
	sub_82126600(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x821342b4
	if (!cr6.getGT()) goto loc_821342B4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,5(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821330C8:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// clrlwi r5,r11,16
	ctx.r5.u64 = r11.u32 & 0xFFFF;
	// bl 0x82127510
	sub_82127510(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82134114
	if (cr6.getEQ()) goto loc_82134114;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133108:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// clrlwi r4,r11,16
	ctx.r4.u64 = r11.u32 & 0xFFFF;
	// bl 0x821275d0
	sub_821275D0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133144:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// lwz r3,16(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// bl 0x820c1630
	sub_820C1630(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133184:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820dc8e0
	sub_820DC8E0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821331AC:
	// lbz r3,2(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
loc_821331D4:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bne cr6,0x821331f8
	if (!cr6.getEQ()) goto loc_821331F8;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lbz r9,1(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,128(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 128);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r10,r9
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, xer);
	// beq cr6,0x8213320c
	if (cr6.getEQ()) goto loc_8213320C;
loc_821331F8:
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821331d4
	if (!cr6.getEQ()) goto loc_821331D4;
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213320C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133224:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// beq cr6,0x821321d4
	if (cr6.getEQ()) goto loc_821321D4;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// beq cr6,0x821321d4
	if (cr6.getEQ()) goto loc_821321D4;
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133254:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133288:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// bl 0x820db380
	sub_820DB380(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821332C8:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// lwz r10,100(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// rlwinm r9,r10,0,17,17
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x4000;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// rlwinm r10,r10,0,18,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFBFFF;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// stw r10,100(r11)
	PPC_STORE_U32(r11.u32 + 100, ctx.r10.u32);
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133318:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// lbz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// rlwinm r9,r10,0,25,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x40;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// andi. r10,r10,191
	ctx.r10.u64 = ctx.r10.u64 & 191;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// stb r10,2(r11)
	PPC_STORE_U8(r11.u32 + 2, ctx.r10.u8);
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133368:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821333b0
	if (cr6.getEQ()) goto loc_821333B0;
	// lwz r3,16(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821333b0
	if (cr6.getEQ()) goto loc_821333B0;
	// lbz r11,0(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x8213339c
	if (!cr6.getEQ()) goto loc_8213339C;
	// bl 0x820df1b8
	sub_820DF1B8(ctx, base);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213339C:
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// beq cr6,0x821333ac
	if (cr6.getEQ()) goto loc_821333AC;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bne cr6,0x821333b0
	if (!cr6.getEQ()) goto loc_821333B0;
loc_821333AC:
	// bl 0x820e3df0
	sub_820E3DF0(ctx, base);
loc_821333B0:
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821333B8:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8213340c
	if (cr6.getEQ()) goto loc_8213340C;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213340c
	if (cr6.getEQ()) goto loc_8213340C;
	// bl 0x820d4a28
	sub_820D4A28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8213340c
	if (!cr6.getEQ()) goto loc_8213340C;
	// lfs f0,116(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 116);
	f0.f64 = double(temp.f32);
	// li r7,-1
	ctx.r7.s64 = -1;
	// lfs f13,112(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 112);
	ctx.f13.f64 = double(temp.f32);
	// li r6,29
	ctx.r6.s64 = 29;
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// addi r5,r31,88
	ctx.r5.s64 = r31.s64 + 88;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// fadds f0,f0,f27
	f0.f64 = double(float(f0.f64 + f27.f64));
	// fmuls f1,f0,f19
	ctx.f1.f64 = double(float(f0.f64 * f19.f64));
	// bl 0x820e3598
	sub_820E3598(ctx, base);
loc_8213340C:
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133414:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82133468
	if (cr6.getEQ()) goto loc_82133468;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82133468
	if (cr6.getEQ()) goto loc_82133468;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82133468
	if (cr6.getEQ()) goto loc_82133468;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x82133468
	if (!cr6.getEQ()) goto loc_82133468;
	// lwz r3,16(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// li r4,2
	ctx.r4.s64 = 2;
	// lwz r11,32(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// lwz r31,8(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
loc_82133468:
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133470:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82133494
	if (cr6.getEQ()) goto loc_82133494;
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82133494
	if (cr6.getEQ()) goto loc_82133494;
	// bl 0x8211f190
	sub_8211F190(ctx, base);
loc_82133494:
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213349C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82133468
	if (cr6.getEQ()) goto loc_82133468;
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82133468
	if (cr6.getEQ()) goto loc_82133468;
	// lwz r3,352(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 352);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821334e0
	if (cr6.getEQ()) goto loc_821334E0;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
loc_821334E0:
	// lwz r3,356(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 356);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82133468
	if (cr6.getEQ()) goto loc_82133468;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820e0e18
	sub_820E0E18(ctx, base);
	// lhz r11,18(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133508:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8213353c
	if (cr6.getEQ()) goto loc_8213353C;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8213353c
	if (cr6.getEQ()) goto loc_8213353C;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x820e1868
	sub_820E1868(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820cf358
	sub_820CF358(ctx, base);
loc_8213353C:
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133544:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lbz r4,2(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x821335d0
	if (cr6.getEQ()) goto loc_821335D0;
	// lwz r3,16(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821335d0
	if (cr6.getEQ()) goto loc_821335D0;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x821335d0
	if (cr6.getEQ()) goto loc_821335D0;
	// lwz r11,32(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82133590
	if (cr6.getEQ()) goto loc_82133590;
	// bl 0x820da578
	sub_820DA578(ctx, base);
	// b 0x821335a4
	goto loc_821335A4;
loc_82133590:
	// bl 0x820ced38
	sub_820CED38(ctx, base);
	// lwz r3,16(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// bl 0x820ccbb0
	sub_820CCBB0(ctx, base);
	// lwz r3,16(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// bl 0x820cca28
	sub_820CCA28(ctx, base);
loc_821335A4:
	// lbz r11,3(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 3);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bne cr6,0x821335c4
	if (!cr6.getEQ()) goto loc_821335C4;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820dcc08
	sub_820DCC08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x821335d0
	if (!cr6.getEQ()) goto loc_821335D0;
loc_821335C4:
	// lwz r4,24(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lwz r3,16(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// bl 0x820ccc18
	sub_820CCC18(ctx, base);
loc_821335D0:
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821335D8:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// beq cr6,0x821336a4
	if (cr6.getEQ()) goto loc_821336A4;
	// lwz r10,16(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821336a4
	if (cr6.getEQ()) goto loc_821336A4;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// cmplwi cr6,r11,10000
	cr6.compare<uint32_t>(r11.u32, 10000, xer);
	// bge cr6,0x82133624
	if (!cr6.getLT()) goto loc_82133624;
	// mulli r10,r11,44
	ctx.r10.s64 = r11.s64 * 44;
	// lwz r11,24(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 24);
	// b 0x82133630
	goto loc_82133630;
loc_82133624:
	// addi r11,r11,-10000
	r11.s64 = r11.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lwz r11,28(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 28);
loc_82133630:
	// add r31,r10,r11
	r31.u64 = ctx.r10.u64 + r11.u64;
	// fmr f3,f30
	ctx.fpscr.disableFlushMode();
	ctx.f3.f64 = f30.f64;
	// addi r3,r1,560
	ctx.r3.s64 = ctx.r1.s64 + 560;
	// fmr f2,f30
	ctx.f2.f64 = f30.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// lfs f0,32(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 32);
	f0.f64 = double(temp.f32);
	// fneg f6,f0
	ctx.f6.u64 = f0.u64 ^ 0x8000000000000000;
	// lfs f13,28(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 28);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,24(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	f0.f64 = double(temp.f32);
	// fneg f5,f13
	ctx.f5.u64 = ctx.f13.u64 ^ 0x8000000000000000;
	// lfs f9,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f9.f64 = double(temp.f32);
	// fneg f4,f0
	ctx.f4.u64 = f0.u64 ^ 0x8000000000000000;
	// lfs f8,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	ctx.f8.f64 = double(temp.f32);
	// lfs f7,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f7.f64 = double(temp.f32);
	// bl 0x8210c040
	sub_8210C040(ctx, base);
	// lwz r11,20(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 20);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82133684
	if (cr6.getEQ()) goto loc_82133684;
	// addi r4,r1,560
	ctx.r4.s64 = ctx.r1.s64 + 560;
	// lfs f1,20(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210bcc8
	sub_8210BCC8(ctx, base);
loc_82133684:
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// lwz r6,40(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// addi r5,r1,560
	ctx.r5.s64 = ctx.r1.s64 + 560;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820d5098
	sub_820D5098(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820d0458
	sub_820D0458(ctx, base);
loc_821336A4:
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821336AC:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821336dc
	if (cr6.getEQ()) goto loc_821336DC;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821336dc
	if (cr6.getEQ()) goto loc_821336DC;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x821336dc
	if (!cr6.getEQ()) goto loc_821336DC;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x820de8c0
	sub_820DE8C0(ctx, base);
loc_821336DC:
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821336E4:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82133714
	if (cr6.getEQ()) goto loc_82133714;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82133714
	if (cr6.getEQ()) goto loc_82133714;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x82133714
	if (!cr6.getEQ()) goto loc_82133714;
	// li r4,2
	ctx.r4.s64 = 2;
	// bl 0x820de8c0
	sub_820DE8C0(ctx, base);
loc_82133714:
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213371C:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// lbz r11,3(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 3);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x82131f84
	if (!cr6.getEQ()) goto loc_82131F84;
	// lbz r11,188(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 188);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82133774
	if (!cr6.getEQ()) goto loc_82133774;
	// lfs f0,180(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 180);
	f0.f64 = double(temp.f32);
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// bgt cr6,0x8213376c
	if (cr6.getGT()) goto loc_8213376C;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// b 0x821337a0
	goto loc_821337A0;
loc_8213376C:
	// rlwinm r11,r11,31,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x1;
	// b 0x821337a0
	goto loc_821337A0;
loc_82133774:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x82133798
	if (cr6.getEQ()) goto loc_82133798;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x82133798
	if (cr6.getEQ()) goto loc_82133798;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x82131f84
	if (!cr6.getEQ()) goto loc_82131F84;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,30,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x1;
	// b 0x821337a0
	goto loc_821337A0;
loc_82133798:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r11,r11,29,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1;
loc_821337A0:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821337C0:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// lbz r11,3(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 3);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x82131fd4
	if (!cr6.getEQ()) goto loc_82131FD4;
	// lwz r11,100(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 100);
	// rlwinm r11,r11,0,22,22
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133810:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82133848
	if (cr6.getEQ()) goto loc_82133848;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82133848
	if (cr6.getEQ()) goto loc_82133848;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x82133848
	if (!cr6.getEQ()) goto loc_82133848;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lwz r10,156(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 156);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// stw r11,156(r3)
	PPC_STORE_U32(ctx.r3.u32 + 156, r11.u32);
loc_82133848:
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133850:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82133888
	if (cr6.getEQ()) goto loc_82133888;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82133888
	if (cr6.getEQ()) goto loc_82133888;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x82133888
	if (!cr6.getEQ()) goto loc_82133888;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lwz r10,156(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 156);
	// andc r11,r10,r11
	r11.u64 = ctx.r10.u64 & ~r11.u64;
	// stw r11,156(r3)
	PPC_STORE_U32(ctx.r3.u32 + 156, r11.u32);
loc_82133888:
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133890:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x82131f84
	if (!cr6.getEQ()) goto loc_82131F84;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lwz r10,156(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 156);
	// and r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 & r11.u64;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x82131f84
	if (!cr6.getEQ()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821338E4:
	// lbz r29,1(r31)
	r29.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cc050
	sub_820CC050(ctx, base);
	// cmpw cr6,r29,r3
	cr6.compare<int32_t>(r29.s32, ctx.r3.s32, xer);
	// bge cr6,0x82131fd4
	if (!cr6.getLT()) goto loc_82131FD4;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820cc0d0
	sub_820CC0D0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x82131fd4
	if (!cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213391C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x82126b80
	sub_82126B80(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133948:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x82126c80
	sub_82126C80(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133974:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82126950
	sub_82126950(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bge cr6,0x82131fd4
	if (!cr6.getLT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821339A0:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82126950
	sub_82126950(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// ble cr6,0x82131fd4
	if (!cr6.getGT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821339CC:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82126960
	sub_82126960(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bge cr6,0x82131fd4
	if (!cr6.getLT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821339F8:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82126960
	sub_82126960(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// ble cr6,0x82131fd4
	if (!cr6.getGT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133A24:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// std r11,296(r1)
	PPC_STORE_U64(ctx.r1.u32 + 296, r11.u64);
	// lfd f0,296(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 296);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f24
	f31.f64 = double(float(f0.f64 * f24.f64));
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// lfs f0,256(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 256);
	f0.f64 = double(temp.f32);
	// lfs f13,252(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 252);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x82131f84
	if (!cr6.getLT()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133A7C:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// std r11,552(r1)
	PPC_STORE_U64(ctx.r1.u32 + 552, r11.u64);
	// lfd f0,552(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 552);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f24
	f31.f64 = double(float(f0.f64 * f24.f64));
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// lfs f0,256(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 256);
	f0.f64 = double(temp.f32);
	// lfs f13,252(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 252);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x82131f84
	if (!cr6.getGT()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133AD4:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// rlwinm r9,r10,0,23,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x100;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// rlwinm r10,r10,0,24,22
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFEFF;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133B1C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// std r11,312(r1)
	PPC_STORE_U64(ctx.r1.u32 + 312, r11.u64);
	// lfd f0,312(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 312);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f23
	f31.f64 = double(float(f0.f64 * f23.f64));
	// bl 0x820b40a0
	sub_820B40A0(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x82131fd4
	if (!cr6.getLT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133B58:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// std r11,440(r1)
	PPC_STORE_U64(ctx.r1.u32 + 440, r11.u64);
	// lfd f0,440(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 440);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f23
	f31.f64 = double(float(f0.f64 * f23.f64));
	// bl 0x820b40a0
	sub_820B40A0(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x82131fd4
	if (!cr6.getGT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133B94:
	// bl 0x8209f598
	sub_8209F598(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bge cr6,0x82131fd4
	if (!cr6.getLT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133BBC:
	// bl 0x8209f598
	sub_8209F598(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// ble cr6,0x82131fd4
	if (!cr6.getGT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133BE4:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,328(r1)
	PPC_STORE_U64(ctx.r1.u32 + 328, r11.u64);
	// lfd f0,328(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 328);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// bl 0x8209f5b8
	sub_8209F5B8(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x82131f84
	if (!cr6.getLT()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133C2C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, r11.u64);
	// lfd f0,192(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// bl 0x8209f5b8
	sub_8209F5B8(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x82131f84
	if (!cr6.getGT()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133C74:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,344(r1)
	PPC_STORE_U64(ctx.r1.u32 + 344, r11.u64);
	// lfd f0,344(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 344);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f28
	f31.f64 = double(float(f0.f64 * f28.f64));
	// bl 0x8209f5c8
	sub_8209F5C8(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x82131f84
	if (!cr6.getLT()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133CC0:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,456(r1)
	PPC_STORE_U64(ctx.r1.u32 + 456, r11.u64);
	// lfd f0,456(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 456);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f28
	f31.f64 = double(float(f0.f64 * f28.f64));
	// bl 0x8209f5c8
	sub_8209F5C8(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x82131f84
	if (!cr6.getGT()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133D0C:
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bge cr6,0x82131fd4
	if (!cr6.getLT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133D34:
	// bl 0x820ae360
	sub_820AE360(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// ble cr6,0x82131fd4
	if (!cr6.getGT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133D5C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// stb r11,268(r22)
	PPC_STORE_U8(r22.u32 + 268, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133D6C:
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r11,268(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 268);
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// subfic r8,r8,255
	xer.ca = ctx.r8.u32 <= 255;
	ctx.r8.s64 = 255 - ctx.r8.s64;
	// cmpw cr6,r9,r8
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r8.s32, xer);
	// ble cr6,0x82133d98
	if (!cr6.getGT()) goto loc_82133D98;
	// li r11,255
	r11.s64 = 255;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// stb r11,268(r22)
	PPC_STORE_U8(r22.u32 + 268, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133D98:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stb r11,268(r22)
	PPC_STORE_U8(r22.u32 + 268, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133DB0:
	// lbz r11,268(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 268);
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// cmplw cr6,r9,r8
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r8.u32, xer);
	// bge cr6,0x82133dd4
	if (!cr6.getLT()) goto loc_82133DD4;
	// stb r19,268(r22)
	PPC_STORE_U8(r22.u32 + 268, r19.u8);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133DD4:
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stb r11,268(r22)
	PPC_STORE_U8(r22.u32 + 268, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133DEC:
	// lbz r11,268(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 268);
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82131fd4
	if (!cr6.getLT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133E14:
	// lbz r11,271(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 271);
	// lbz r10,268(r22)
	ctx.r10.u64 = PPC_LOAD_U8(r22.u32 + 268);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// ble cr6,0x821326a8
	if (!cr6.getGT()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133E3C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// stb r11,269(r22)
	PPC_STORE_U8(r22.u32 + 269, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133E4C:
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r11,269(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 269);
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// subfic r8,r8,255
	xer.ca = ctx.r8.u32 <= 255;
	ctx.r8.s64 = 255 - ctx.r8.s64;
	// cmpw cr6,r9,r8
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r8.s32, xer);
	// ble cr6,0x82133e78
	if (!cr6.getGT()) goto loc_82133E78;
	// li r11,255
	r11.s64 = 255;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// stb r11,269(r22)
	PPC_STORE_U8(r22.u32 + 269, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133E78:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stb r11,269(r22)
	PPC_STORE_U8(r22.u32 + 269, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133E90:
	// lbz r11,269(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 269);
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// cmplw cr6,r9,r8
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r8.u32, xer);
	// bge cr6,0x82133eb4
	if (!cr6.getLT()) goto loc_82133EB4;
	// stb r19,269(r22)
	PPC_STORE_U8(r22.u32 + 269, r19.u8);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133EB4:
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stb r11,269(r22)
	PPC_STORE_U8(r22.u32 + 269, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133ECC:
	// lbz r11,269(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 269);
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82131fd4
	if (!cr6.getLT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133EF4:
	// lbz r11,271(r22)
	r11.u64 = PPC_LOAD_U8(r22.u32 + 271);
	// lbz r10,269(r22)
	ctx.r10.u64 = PPC_LOAD_U8(r22.u32 + 269);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// ble cr6,0x821326a8
	if (!cr6.getGT()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133F1C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,360(r1)
	PPC_STORE_U64(ctx.r1.u32 + 360, r11.u64);
	// lfd f0,360(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 360);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f15
	f0.f64 = double(float(f0.f64 * f15.f64));
	// stfs f0,236(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 236, temp.u32);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133F50:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// std r11,536(r1)
	PPC_STORE_U64(ctx.r1.u32 + 536, r11.u64);
	// lfd f0,536(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 536);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,208(r22)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r22.u32 + 208, temp.u32);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133F70:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// stb r11,16(r22)
	PPC_STORE_U8(r22.u32 + 16, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133F80:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// sth r11,0(r22)
	PPC_STORE_U16(r22.u32 + 0, r11.u16);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133F90:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,376(r1)
	PPC_STORE_U64(ctx.r1.u32 + 376, r11.u64);
	// lfd f0,376(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 376);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f1,f0,f24
	ctx.f1.f64 = double(float(f0.f64 * f24.f64));
	// bl 0x8211de08
	sub_8211DE08(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82133FC8:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,200(r1)
	PPC_STORE_U64(ctx.r1.u32 + 200, r11.u64);
	// lfd f0,200(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 200);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f1,f0,f24
	ctx.f1.f64 = double(float(f0.f64 * f24.f64));
	// bl 0x8211de48
	sub_8211DE48(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134000:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// stb r11,3(r22)
	PPC_STORE_U8(r22.u32 + 3, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134010:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// stb r11,13(r22)
	PPC_STORE_U8(r22.u32 + 13, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134020:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// stb r11,2(r22)
	PPC_STORE_U8(r22.u32 + 2, r11.u8);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134030:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821266b8
	sub_821266B8(ctx, base);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134044:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821266d0
	sub_821266D0(ctx, base);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134058:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821266e8
	sub_821266E8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134084:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x82126708
	sub_82126708(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213409C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x82126750
	sub_82126750(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821340B4:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x82126798
	sub_82126798(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82131f84
	if (cr6.getEQ()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821340E4:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,3(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lbz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r4,r11,r8
	ctx.r4.u64 = r11.u64 | ctx.r8.u64;
	// bl 0x82126800
	sub_82126800(ctx, base);
loc_82134114:
	// addi r30,r30,5
	r30.s64 = r30.s64 + 5;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213411C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,3(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lbz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r4,r11,r8
	ctx.r4.u64 = r11.u64 | ctx.r8.u64;
	// bl 0x82126818
	sub_82126818(ctx, base);
	// addi r30,r30,5
	r30.s64 = r30.s64 + 5;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134154:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,3(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lbz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r4,r11,r8
	ctx.r4.u64 = r11.u64 | ctx.r8.u64;
	// bl 0x82126830
	sub_82126830(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821342b4
	if (cr6.getEQ()) goto loc_821342B4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,5(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821341A4:
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,5
	r30.s64 = r30.s64 + 5;
	// lbz r9,2(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r10,r10,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 8);
	// lbz r8,3(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lbz r7,4(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// lwz r11,20(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 20);
	// rlwinm r10,r10,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0xFFFFFF00;
	// or r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 | ctx.r8.u64;
	// rlwinm r10,r10,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0xFFFFFF00;
	// or r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 | ctx.r7.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// stw r11,20(r22)
	PPC_STORE_U32(r22.u32 + 20, r11.u32);
	// b 0x82131acc
	goto loc_82131ACC;
loc_821341E0:
	// lbz r10,1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,5
	r30.s64 = r30.s64 + 5;
	// lbz r9,2(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r10,r10,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 8);
	// lbz r8,3(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lbz r7,4(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// lwz r11,20(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 20);
	// rlwinm r10,r10,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0xFFFFFF00;
	// or r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 | ctx.r8.u64;
	// rlwinm r10,r10,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0xFFFFFF00;
	// or r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 | ctx.r7.u64;
	// andc r11,r11,r10
	r11.u64 = r11.u64 & ~ctx.r10.u64;
	// stw r11,20(r22)
	PPC_STORE_U32(r22.u32 + 20, r11.u32);
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213421C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r9,2(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r8,3(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lbz r7,4(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// lwz r10,20(r22)
	ctx.r10.u64 = PPC_LOAD_U32(r22.u32 + 20);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r8
	r11.u64 = r11.u64 | ctx.r8.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r7
	r11.u64 = r11.u64 | ctx.r7.u64;
	// and r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 & r11.u64;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x821342b4
	if (!cr6.getEQ()) goto loc_821342B4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,5(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213426C:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r31,r11,r8
	r31.u64 = r11.u64 | ctx.r8.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821342b4
	if (cr6.getEQ()) goto loc_821342B4;
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// or r11,r31,r11
	r11.u64 = r31.u64 | r11.u64;
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
loc_821342B4:
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821342BC:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r31,r11,r8
	r31.u64 = r11.u64 | ctx.r8.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82134304
	if (cr6.getEQ()) goto loc_82134304;
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// andc r11,r11,r31
	r11.u64 = r11.u64 & ~r31.u64;
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
loc_82134304:
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213430C:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r29,r11,r8
	r29.u64 = r11.u64 | ctx.r8.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82132e88
	if (cr6.getEQ()) goto loc_82132E88;
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// and r11,r11,r29
	r11.u64 = r11.u64 & r29.u64;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// bne cr6,0x82132e88
	if (!cr6.getEQ()) goto loc_82132E88;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,6(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134370:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r31,r11,r8
	r31.u64 = r11.u64 | ctx.r8.u64;
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821343c0
	if (cr6.getEQ()) goto loc_821343C0;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821343c0
	if (cr6.getEQ()) goto loc_821343C0;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// or r11,r11,r31
	r11.u64 = r11.u64 | r31.u64;
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
loc_821343C0:
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821343C8:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r31,r11,r8
	r31.u64 = r11.u64 | ctx.r8.u64;
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82134418
	if (cr6.getEQ()) goto loc_82134418;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82134418
	if (cr6.getEQ()) goto loc_82134418;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// andc r11,r11,r31
	r11.u64 = r11.u64 & ~r31.u64;
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
loc_82134418:
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134420:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r29,r11,r8
	r29.u64 = r11.u64 | ctx.r8.u64;
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82132e88
	if (cr6.getEQ()) goto loc_82132E88;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82132e88
	if (cr6.getEQ()) goto loc_82132E88;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// and r11,r11,r29
	r11.u64 = r11.u64 & r29.u64;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// bne cr6,0x82132e88
	if (!cr6.getEQ()) goto loc_82132E88;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,6(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213448C:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r31,r11,r8
	r31.u64 = r11.u64 | ctx.r8.u64;
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821344dc
	if (cr6.getEQ()) goto loc_821344DC;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821344dc
	if (cr6.getEQ()) goto loc_821344DC;
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// or r11,r31,r11
	r11.u64 = r31.u64 | r11.u64;
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
loc_821344DC:
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821344E4:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r31,r11,r8
	r31.u64 = r11.u64 | ctx.r8.u64;
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82134534
	if (cr6.getEQ()) goto loc_82134534;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82134534
	if (cr6.getEQ()) goto loc_82134534;
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// andc r11,r11,r31
	r11.u64 = r11.u64 & ~r31.u64;
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
loc_82134534:
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213453C:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r29,r11,r8
	r29.u64 = r11.u64 | ctx.r8.u64;
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82132e88
	if (cr6.getEQ()) goto loc_82132E88;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82132e88
	if (cr6.getEQ()) goto loc_82132E88;
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// and r11,r11,r29
	r11.u64 = r11.u64 & r29.u64;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// bne cr6,0x82132e88
	if (!cr6.getEQ()) goto loc_82132E88;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,6(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821345A8:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x82126e60
	sub_82126E60(ctx, base);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821345BC:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x82126e88
	sub_82126E88(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821345D4:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// beq cr6,0x82134604
	if (cr6.getEQ()) goto loc_82134604;
	// clrlwi r4,r11,16
	ctx.r4.u64 = r11.u32 & 0xFFFF;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82126ee0
	sub_82126EE0(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134604:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x82134610
	if (cr6.getEQ()) goto loc_82134610;
	// sth r11,6(r23)
	PPC_STORE_U16(r23.u32 + 6, r11.u16);
loc_82134610:
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134618:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// or r5,r11,r10
	ctx.r5.u64 = r11.u64 | ctx.r10.u64;
	// bl 0x82126f48
	sub_82126F48(ctx, base);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213463C:
	// addi r4,r31,1
	ctx.r4.s64 = r31.s64 + 1;
	// lwz r3,140(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// nop 
loc_82134648:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x82131188
	sub_82131188(ctx, base);
	// add r30,r3,r30
	r30.u64 = ctx.r3.u64 + r30.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213465C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82126860
	sub_82126860(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213466C:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// stw r19,272(r22)
	PPC_STORE_U32(r22.u32 + 272, r19.u32);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134678:
	// lhz r11,18(r22)
	r11.u64 = PPC_LOAD_U16(r22.u32 + 18);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// andi. r11,r11,65471
	r11.u64 = r11.u64 & 65471;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// sth r11,18(r22)
	PPC_STORE_U16(r22.u32 + 18, r11.u16);
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213468C:
	// lhz r11,18(r22)
	r11.u64 = PPC_LOAD_U16(r22.u32 + 18);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// ori r11,r11,64
	r11.u64 = r11.u64 | 64;
	// sth r11,18(r22)
	PPC_STORE_U16(r22.u32 + 18, r11.u16);
	// b 0x82131acc
	goto loc_82131ACC;
loc_821346A0:
	// lhz r11,18(r22)
	r11.u64 = PPC_LOAD_U16(r22.u32 + 18);
	// rlwinm r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821326a8
	if (!cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821346C8:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,3(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,208(r1)
	PPC_STORE_U64(ctx.r1.u32 + 208, r11.u64);
	// lfd f0,208(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 208);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f22
	f31.f64 = double(float(f0.f64 * f22.f64));
	// bl 0x82126878
	sub_82126878(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x82134114
	if (!cr6.getLT()) goto loc_82134114;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134724:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,3(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,224(r1)
	PPC_STORE_U64(ctx.r1.u32 + 224, r11.u64);
	// lfd f0,224(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 224);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f31,f0,f22
	f31.f64 = double(float(f0.f64 * f22.f64));
	// bl 0x82126878
	sub_82126878(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x82134114
	if (!cr6.getGT()) goto loc_82134114;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134780:
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820df8b0
	sub_820DF8B0(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134794:
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820df8b0
	sub_820DF8B0(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821347A8:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,240(r1)
	PPC_STORE_U64(ctx.r1.u32 + 240, r11.u64);
	// lfd f0,240(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 240);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f1,f0,f28
	ctx.f1.f64 = double(float(f0.f64 * f28.f64));
	// bl 0x820df8f0
	sub_820DF8F0(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821347DC:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820df910
	sub_820DF910(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821347EC:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820df910
	sub_820DF910(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821347FC:
	// bl 0x820df920
	sub_820DF920(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x821326a8
	if (!cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134820:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,256(r1)
	PPC_STORE_U64(ctx.r1.u32 + 256, r11.u64);
	// lfd f0,256(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 256);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// bl 0x820df900
	sub_820DF900(ctx, base);
	// fmuls f0,f31,f28
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 * f28.f64));
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x82131f84
	if (!cr6.getLT()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213486C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,272(r1)
	PPC_STORE_U64(ctx.r1.u32 + 272, r11.u64);
	// lfd f0,272(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 272);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// bl 0x820df900
	sub_820DF900(ctx, base);
	// fmuls f0,f31,f28
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 * f28.f64));
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// ble cr6,0x82131f84
	if (!cr6.getGT()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821348B8:
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// lbz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r8,3(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lbz r9,5(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r10,9(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// lbz r7,4(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rotlwi r8,r8,8
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r8.u32, 8);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// lbz r6,6(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// lbz r5,10(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rotlwi r10,r9,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 8);
	// or r9,r8,r7
	ctx.r9.u64 = ctx.r8.u64 | ctx.r7.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r3,r10,r6
	ctx.r3.u64 = ctx.r10.u64 | ctx.r6.u64;
	// mr r6,r9
	ctx.r6.u64 = ctx.r9.u64;
	// or r5,r11,r5
	ctx.r5.u64 = r11.u64 | ctx.r5.u64;
	// bl 0x82131850
	sub_82131850(ctx, base);
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// mr r8,r5
	ctx.r8.u64 = ctx.r5.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// clrlwi r6,r6,16
	ctx.r6.u64 = ctx.r6.u32 & 0xFFFF;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821273e8
	sub_821273E8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82134948
	if (cr6.getEQ()) goto loc_82134948;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,11(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 11);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134948:
	// addi r30,r30,12
	r30.s64 = r30.s64 + 12;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134950:
	// lbz r11,6(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// lbz r10,7(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r8,8(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r10,5(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// rotlwi r9,r9,8
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 8);
	// lbz r7,9(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r3,r9,r10
	ctx.r3.u64 = ctx.r9.u64 | ctx.r10.u64;
	// or r11,r11,r8
	r11.u64 = r11.u64 | ctx.r8.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r6,r11,r7
	ctx.r6.u64 = r11.u64 | ctx.r7.u64;
	// bl 0x82131850
	sub_82131850(ctx, base);
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// mr r8,r6
	ctx.r8.u64 = ctx.r6.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r6,3(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82127498
	sub_82127498(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821349cc
	if (cr6.getEQ()) goto loc_821349CC;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,10(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821349CC:
	// addi r30,r30,11
	r30.s64 = r30.s64 + 11;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821349D4:
	// lbz r11,4(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// lbz r10,5(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,6(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// lbz r8,1(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r7,2(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,7(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// rotlwi r8,r8,8
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r8.u32, 8);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r28,r8,r7
	r28.u64 = ctx.r8.u64 | ctx.r7.u64;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r29,r11,r10
	r29.u64 = r11.u64 | ctx.r10.u64;
	// beq cr6,0x82132138
	if (cr6.getEQ()) goto loc_82132138;
	// lwz r11,24(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82132138
	if (cr6.getEQ()) goto loc_82132138;
	// lwz r11,28(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82132138
	if (cr6.getEQ()) goto loc_82132138;
	// li r3,28
	ctx.r3.s64 = 28;
	// bl 0x82136fa0
	sub_82136FA0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82134af0
	if (cr6.getEQ()) goto loc_82134AF0;
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cmplwi cr6,r11,29
	cr6.compare<uint32_t>(r11.u32, 29, xer);
	// bgt cr6,0x82134af0
	if (cr6.getGT()) goto loc_82134AF0;
	// lis r12,-32237
	r12.s64 = -2112684032;
	// addi r12,r12,19044
	r12.s64 = r12.s64 + 19044;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82134ADC;
	case 1:
		goto loc_82134ADC;
	case 2:
		goto loc_82134ADC;
	case 3:
		goto loc_82134ADC;
	case 4:
		goto loc_82134ADC;
	case 5:
		goto loc_82134ADC;
	case 6:
		goto loc_82134ADC;
	case 7:
		goto loc_82134ADC;
	case 8:
		goto loc_82134ADC;
	case 9:
		goto loc_82134ADC;
	case 10:
		goto loc_82134ADC;
	case 11:
		goto loc_82134ADC;
	case 12:
		goto loc_82134ADC;
	case 13:
		goto loc_82134ADC;
	case 14:
		goto loc_82134ADC;
	case 15:
		goto loc_82134ADC;
	case 16:
		goto loc_82134ADC;
	case 17:
		goto loc_82134ADC;
	case 18:
		goto loc_82134ADC;
	case 19:
		goto loc_82134ADC;
	case 20:
		goto loc_82134ADC;
	case 21:
		goto loc_82134ADC;
	case 22:
		goto loc_82134AF0;
	case 23:
		goto loc_82134AF0;
	case 24:
		goto loc_82134AF0;
	case 25:
		goto loc_82134AF0;
	case 26:
		goto loc_82134AF0;
	case 27:
		goto loc_82134ADC;
	case 28:
		goto loc_82134ADC;
	case 29:
		goto loc_82134ADC;
	default:
		__builtin_unreachable();
	}
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19184);
	// lwz r16,19184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19184);
	// lwz r16,19184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19184);
	// lwz r16,19184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19184);
	// lwz r16,19184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19184);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
	// lwz r16,19164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 19164);
loc_82134ADC:
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// li r5,25
	ctx.r5.s64 = 25;
	// li r4,211
	ctx.r4.s64 = 211;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x820e2ff8
	sub_820E2FF8(ctx, base);
loc_82134AF0:
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x820e2ff8
	sub_820E2FF8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82132138
	if (cr6.getEQ()) goto loc_82132138;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,8(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134B24:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// lbz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,5(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// lbz r8,1(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lbz r7,2(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,6(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// rotlwi r8,r8,8
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r8.u32, 8);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r4,r8,r7
	ctx.r4.u64 = ctx.r8.u64 | ctx.r7.u64;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r5,r11,r10
	ctx.r5.u64 = r11.u64 | ctx.r10.u64;
	// beq cr6,0x82134ba4
	if (cr6.getEQ()) goto loc_82134BA4;
	// lwz r11,24(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82134ba4
	if (cr6.getEQ()) goto loc_82134BA4;
	// lwz r11,28(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82134ba4
	if (cr6.getEQ()) goto loc_82134BA4;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x820e3ea0
	sub_820E3EA0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82134ba4
	if (cr6.getEQ()) goto loc_82134BA4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,7(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134BA4:
	// addi r30,r30,8
	r30.s64 = r30.s64 + 8;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134BAC:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r3,r11,r10
	ctx.r3.u64 = r11.u64 | ctx.r10.u64;
	// bl 0x82131850
	sub_82131850(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r26,r19
	r26.u64 = r19.u64;
	// mr r25,r19
	r25.u64 = r19.u64;
	// mr r24,r19
	r24.u64 = r19.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82134d48
	if (cr6.getEQ()) goto loc_82134D48;
	// lwz r11,20(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 20);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82134d48
	if (cr6.getEQ()) goto loc_82134D48;
	// lhz r11,0(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + 0);
	// li r8,0
	ctx.r8.s64 = 0;
	// lbz r10,15(r28)
	ctx.r10.u64 = PPC_LOAD_U8(r28.u32 + 15);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// extsh r6,r11
	ctx.r6.s64 = r11.s16;
	// li r5,-1
	ctx.r5.s64 = -1;
	// extsb r4,r10
	ctx.r4.s64 = ctx.r10.s8;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x82127498
	sub_82127498(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82134d48
	if (cr6.getEQ()) goto loc_82134D48;
	// lhz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U16(r28.u32 + 0);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lwz r27,8(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// extsh r11,r10
	r11.s64 = ctx.r10.s16;
	// addi r29,r11,10000
	r29.s64 = r11.s64 + 10000;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82134c50
	if (!cr6.getEQ()) goto loc_82134C50;
	// sth r29,0(r27)
	PPC_STORE_U16(r27.u32 + 0, r29.u16);
loc_82134C50:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82134c90
	if (cr6.getEQ()) goto loc_82134C90;
	// lwz r26,8(r3)
	r26.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lbz r11,128(r26)
	r11.u64 = PPC_LOAD_U8(r26.u32 + 128);
	// lhz r10,4(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 4);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// extsh r4,r10
	ctx.r4.s64 = ctx.r10.s16;
	// bl 0x820e2ff8
	sub_820E2FF8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82134c90
	if (cr6.getEQ()) goto loc_82134C90;
	// lwz r24,8(r3)
	r24.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
loc_82134C90:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82120290
	sub_82120290(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82134d0c
	if (cr6.getEQ()) goto loc_82134D0C;
	// lwz r29,8(r3)
	r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lis r6,4096
	ctx.r6.s64 = 268435456;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lbz r11,128(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 128);
	// lhz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U16(r29.u32 + 4);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// extsh r4,r10
	ctx.r4.s64 = ctx.r10.s16;
	// bl 0x820e2ff8
	sub_820E2FF8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82134cd0
	if (cr6.getEQ()) goto loc_82134CD0;
	// lwz r25,8(r3)
	r25.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
loc_82134CD0:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82134d0c
	if (cr6.getEQ()) goto loc_82134D0C;
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82134d0c
	if (cr6.getEQ()) goto loc_82134D0C;
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// beq cr6,0x82134d0c
	if (cr6.getEQ()) goto loc_82134D0C;
	// lwz r11,132(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 132);
	// cmplw cr6,r11,r26
	cr6.compare<uint32_t>(r11.u32, r26.u32, xer);
	// bne cr6,0x82134d0c
	if (!cr6.getEQ()) goto loc_82134D0C;
	// lwz r11,132(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 132);
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// bne cr6,0x82134d0c
	if (!cr6.getEQ()) goto loc_82134D0C;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x820dcbe8
	sub_820DCBE8(ctx, base);
loc_82134D0C:
	// lwz r11,472(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 472);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82134d30
	if (cr6.getEQ()) goto loc_82134D30;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lhz r11,4(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 4);
	// extsh r4,r11
	ctx.r4.s64 = r11.s16;
	// bl 0x820e3ea0
	sub_820E3EA0(ctx, base);
loc_82134D30:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131ac0
	goto loc_82131AC0;
loc_82134D48:
	// addi r30,r30,5
	r30.s64 = r30.s64 + 5;
	// b 0x82131ac0
	goto loc_82131AC0;
loc_82134D50:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r3,r11,r10
	ctx.r3.u64 = r11.u64 | ctx.r10.u64;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134D70:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r3,r11,r10
	ctx.r3.u64 = r11.u64 | ctx.r10.u64;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4630
	sub_820B4630(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134D90:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,3(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsb r3,r9
	ctx.r3.s64 = ctx.r9.s8;
	// extsh r4,r11
	ctx.r4.s64 = r11.s16;
	// bl 0x821310b8
	sub_821310B8(ctx, base);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134DB8:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// bgt cr6,0x82134ddc
	if (cr6.getGT()) goto loc_82134DDC;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r3,r11,r20
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + r20.u32);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_82134DDC:
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134DE4:
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r9,3(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r10,r10,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 8);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// blt cr6,0x82134e94
	if (cr6.getLT()) goto loc_82134E94;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// bge cr6,0x82134e94
	if (!cr6.getLT()) goto loc_82134E94;
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// addi r7,r20,8
	ctx.r7.s64 = r20.s64 + 8;
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r6,r20,12
	ctx.r6.s64 = r20.s64 + 12;
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// rotlwi r9,r9,8
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 8);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// or r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 | ctx.r8.u64;
	// extsh r8,r10
	ctx.r8.s64 = ctx.r10.s16;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r5,r20,16
	ctx.r5.s64 = r20.s64 + 16;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r4,r20,20
	ctx.r4.s64 = r20.s64 + 20;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r9,r11,r7
	PPC_STORE_U32(r11.u32 + ctx.r7.u32, ctx.r9.u32);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r8,r11,r6
	PPC_STORE_U32(r11.u32 + ctx.r6.u32, ctx.r8.u32);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r19,r11,r5
	PPC_STORE_U32(r11.u32 + ctx.r5.u32, r19.u32);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r19,r11,r4
	PPC_STORE_U32(r11.u32 + ctx.r4.u32, r19.u32);
loc_82134E94:
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134E9C:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,1(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// or r10,r11,r10
	ctx.r10.u64 = r11.u64 | ctx.r10.u64;
	// extsb r11,r9
	r11.s64 = ctx.r9.s8;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// std r10,288(r1)
	PPC_STORE_U64(ctx.r1.u32 + 288, ctx.r10.u64);
	// lfd f0,288(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 288);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// blt cr6,0x82134f54
	if (cr6.getLT()) goto loc_82134F54;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// bge cr6,0x82134f54
	if (!cr6.getLT()) goto loc_82134F54;
	// lbz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lbz r9,5(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// rotlwi r8,r8,8
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r8.u32, 8);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r9,r20,8
	ctx.r9.s64 = r20.s64 + 8;
	// stwx r10,r11,r9
	PPC_STORE_U32(r11.u32 + ctx.r9.u32, ctx.r10.u32);
	// bl 0x820dd8a8
	sub_820DD8A8(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r9,r20,12
	ctx.r9.s64 = r20.s64 + 12;
	// addi r8,r20,16
	ctx.r8.s64 = r20.s64 + 16;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// addi r7,r20,20
	ctx.r7.s64 = r20.s64 + 20;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r3,r11,r9
	PPC_STORE_U32(r11.u32 + ctx.r9.u32, ctx.r3.u32);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r19,r11,r8
	PPC_STORE_U32(r11.u32 + ctx.r8.u32, r19.u32);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r19,r11,r7
	PPC_STORE_U32(r11.u32 + ctx.r7.u32, r19.u32);
loc_82134F54:
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134F5C:
	// lbz r3,2(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82134fe8
	if (cr6.getLT()) goto loc_82134FE8;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// bge cr6,0x82134fe8
	if (!cr6.getLT()) goto loc_82134FE8;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82134fe8
	if (cr6.getEQ()) goto loc_82134FE8;
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// addi r8,r20,8
	ctx.r8.s64 = r20.s64 + 8;
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r7,r20,16
	ctx.r7.s64 = r20.s64 + 16;
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rotlwi r10,r10,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 8);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// or r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 | ctx.r9.u64;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r6,r20,20
	ctx.r6.s64 = r20.s64 + 20;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r9,r11,r8
	PPC_STORE_U32(r11.u32 + ctx.r8.u32, ctx.r9.u32);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r19,r11,r7
	PPC_STORE_U32(r11.u32 + ctx.r7.u32, r19.u32);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r3,r11,r6
	PPC_STORE_U32(r11.u32 + ctx.r6.u32, ctx.r3.u32);
loc_82134FE8:
	// addi r30,r30,5
	r30.s64 = r30.s64 + 5;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82134FF0:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,5(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rotlwi r10,r9,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 8);
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// or r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 | ctx.r8.u64;
	// cmplwi cr6,r11,10000
	cr6.compare<uint32_t>(r11.u32, 10000, xer);
	// clrlwi r8,r10,16
	ctx.r8.u64 = ctx.r10.u32 & 0xFFFF;
	// bge cr6,0x8213502c
	if (!cr6.getLT()) goto loc_8213502C;
	// lwz r10,24(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 24);
	// mulli r11,r11,44
	r11.s64 = r11.s64 * 44;
	// b 0x82135038
	goto loc_82135038;
loc_8213502C:
	// addi r11,r11,-10000
	r11.s64 = r11.s64 + -10000;
	// lwz r10,28(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 28);
	// mulli r11,r11,68
	r11.s64 = r11.s64 * 68;
loc_82135038:
	// add r9,r11,r10
	ctx.r9.u64 = r11.u64 + ctx.r10.u64;
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x821350b4
	if (cr6.getLT()) goto loc_821350B4;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// bge cr6,0x821350b4
	if (!cr6.getLT()) goto loc_821350B4;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x821350b4
	if (cr6.getEQ()) goto loc_821350B4;
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// clrlwi r8,r8,16
	ctx.r8.u64 = ctx.r8.u32 & 0xFFFF;
	// addi r7,r20,8
	ctx.r7.s64 = r20.s64 + 8;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// addi r6,r20,16
	ctx.r6.s64 = r20.s64 + 16;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r5,r20,20
	ctx.r5.s64 = r20.s64 + 20;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r8,r11,r7
	PPC_STORE_U32(r11.u32 + ctx.r7.u32, ctx.r8.u32);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r9,r11,r6
	PPC_STORE_U32(r11.u32 + ctx.r6.u32, ctx.r9.u32);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// stwx r19,r11,r5
	PPC_STORE_U32(r11.u32 + ctx.r5.u32, r19.u32);
loc_821350B4:
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821350BC:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82134114
	if (cr6.getLT()) goto loc_82134114;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// bge cr6,0x82134114
	if (!cr6.getLT()) goto loc_82134114;
	// lbz r9,2(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lbz r8,3(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r9,r9,8
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 8);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r9,r20,4
	ctx.r9.s64 = r20.s64 + 4;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// or r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 | ctx.r8.u64;
	// lwzx r11,r11,r9
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x82134114
	if (!cr6.getLT()) goto loc_82134114;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135120:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82135138
	if (cr6.getEQ()) goto loc_82135138;
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x82131910
	sub_82131910(ctx, base);
	// stw r3,176(r26)
	PPC_STORE_U32(r26.u32 + 176, ctx.r3.u32);
	// stw r19,180(r26)
	PPC_STORE_U32(r26.u32 + 180, r19.u32);
loc_82135138:
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135140:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// lbz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,304(r1)
	PPC_STORE_U64(ctx.r1.u32 + 304, r11.u64);
	// lfd f0,304(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 304);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// beq cr6,0x8213519c
	if (cr6.getEQ()) goto loc_8213519C;
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// stfs f0,164(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 164, temp.u32);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,320(r1)
	PPC_STORE_U64(ctx.r1.u32 + 320, r11.u64);
	// lfd f0,320(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 320);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f18
	f0.f64 = double(float(f0.f64 * f18.f64));
	// stfs f0,160(r26)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r26.u32 + 160, temp.u32);
loc_8213519C:
	// addi r30,r30,5
	r30.s64 = r30.s64 + 5;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821351A4:
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// lbz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,336(r1)
	PPC_STORE_U64(ctx.r1.u32 + 336, r11.u64);
	// lfd f0,336(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 336);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// beq cr6,0x82135200
	if (cr6.getEQ()) goto loc_82135200;
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// stfs f0,148(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 148, temp.u32);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,352(r1)
	PPC_STORE_U64(ctx.r1.u32 + 352, r11.u64);
	// lfd f0,352(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 352);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f17
	f0.f64 = double(float(f0.f64 * f17.f64));
	// stfs f0,144(r23)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r23.u32 + 144, temp.u32);
loc_82135200:
	// addi r30,r30,5
	r30.s64 = r30.s64 + 5;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135208:
	// bl 0x820b0268
	sub_820B0268(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x82131ef8
	if (cr6.getEQ()) goto loc_82131EF8;
	// bl 0x820b0268
	sub_820B0268(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// beq cr6,0x82131ef8
	if (cr6.getEQ()) goto loc_82131EF8;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135228:
	// bl 0x820b0268
	sub_820B0268(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x821326a8
	if (!cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213524C:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821352b0
	if (cr6.getEQ()) goto loc_821352B0;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821352b0
	if (cr6.getEQ()) goto loc_821352B0;
	// lbz r11,3(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 3);
	// cmplwi cr6,r11,10
	cr6.compare<uint32_t>(r11.u32, 10, xer);
	// bne cr6,0x82135288
	if (!cr6.getEQ()) goto loc_82135288;
	// addi r3,r3,128
	ctx.r3.s64 = ctx.r3.s64 + 128;
	// lbz r4,3(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// bl 0x820d8760
	sub_820D8760(ctx, base);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135288:
	// cmplwi cr6,r11,11
	cr6.compare<uint32_t>(r11.u32, 11, xer);
	// bne cr6,0x821352b0
	if (!cr6.getEQ()) goto loc_821352B0;
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bge cr6,0x821352b0
	if (!cr6.getLT()) goto loc_821352B0;
	// mulli r11,r11,116
	r11.s64 = r11.s64 * 116;
	// lbz r4,3(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// addi r3,r11,128
	ctx.r3.s64 = r11.s64 + 128;
	// bl 0x820d8760
	sub_820D8760(ctx, base);
loc_821352B0:
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821352B8:
	// bl 0x820b1010
	sub_820B1010(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x821326a8
	if (!cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821352DC:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1864(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1864);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82135308
	if (cr6.getEQ()) goto loc_82135308;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1856(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1856);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x8213530c
	if (!cr6.getEQ()) goto loc_8213530C;
	// stw r25,-1856(r11)
	PPC_STORE_U32(r11.u32 + -1856, r25.u32);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135308:
	// bl 0x820ae4d0
	sub_820AE4D0(ctx, base);
loc_8213530C:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135314:
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x820b5f70
	sub_820B5F70(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135324:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// cmplwi cr6,r11,10000
	cr6.compare<uint32_t>(r11.u32, 10000, xer);
	// bge cr6,0x8213534c
	if (!cr6.getLT()) goto loc_8213534C;
	// lwz r10,24(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 24);
	// mulli r11,r11,44
	r11.s64 = r11.s64 * 44;
	// b 0x82135358
	goto loc_82135358;
loc_8213534C:
	// addi r11,r11,-10000
	r11.s64 = r11.s64 + -10000;
	// lwz r10,28(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 28);
	// mulli r11,r11,68
	r11.s64 = r11.s64 * 68;
loc_82135358:
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// li r3,7
	ctx.r3.s64 = 7;
	// stw r11,-1876(r17)
	PPC_STORE_U32(r17.u32 + -1876, r11.u32);
	// bl 0x820b5f70
	sub_820B5F70(ctx, base);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135370:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf18
	sub_820CBF18(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x821353e8
	if (cr6.getEQ()) goto loc_821353E8;
	// bl 0x820d02f8
	sub_820D02F8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x821353e8
	if (cr6.getLT()) goto loc_821353E8;
	// lhz r11,6(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 6);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// add r3,r11,r3
	ctx.r3.u64 = r11.u64 + ctx.r3.u64;
	// bl 0x820d0288
	sub_820D0288(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r10,r19
	ctx.r10.u64 = r19.u64;
	// li r3,7
	ctx.r3.s64 = 7;
	// stw r11,-1880(r16)
	PPC_STORE_U32(r16.u32 + -1880, r11.u32);
	// stw r10,-1876(r17)
	PPC_STORE_U32(r17.u32 + -1876, ctx.r10.u32);
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-1924(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1924, r11.u32);
	// lbz r11,4(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r10,5(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// stw r11,-3652(r10)
	PPC_STORE_U32(ctx.r10.u32 + -3652, r11.u32);
	// bl 0x820b5f70
	sub_820B5F70(ctx, base);
loc_821353E8:
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821353F0:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,368(r1)
	PPC_STORE_U64(ctx.r1.u32 + 368, r11.u64);
	// lfd f0,368(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 368);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// bl 0x820b3c98
	sub_820B3C98(ctx, base);
	// lfs f0,16(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x82131f84
	if (!cr6.getLT()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213543C:
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x820a64c0
	sub_820A64C0(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820a5560
	sub_820A5560(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,0,30,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213546c
	if (!cr6.getEQ()) goto loc_8213546C;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820b4138
	sub_820B4138(ctx, base);
loc_8213546C:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82135484
	if (!cr6.getEQ()) goto loc_82135484;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820b4618
	sub_820B4618(ctx, base);
loc_82135484:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821354a0
	if (!cr6.getEQ()) goto loc_821354A0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x820df8b0
	sub_820DF8B0(ctx, base);
loc_821354A0:
	// mr r11,r19
	r11.u64 = r19.u64;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// stw r11,16572(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16572, r11.u32);
	// b 0x82131acc
	goto loc_82131ACC;
loc_821354B4:
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x820a64c0
	sub_820A64C0(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820a5560
	sub_820A5560(ctx, base);
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820b4120
	sub_820B4120(ctx, base);
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820b4600
	sub_820B4600(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x820df8b0
	sub_820DF8B0(ctx, base);
	// mr r11,r25
	r11.u64 = r25.u64;
	// lis r10,-32190
	ctx.r10.s64 = -2109603840;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// stw r11,16572(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16572, r11.u32);
	// b 0x82131acc
	goto loc_82131ACC;
loc_821354FC:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// or r28,r11,r10
	r28.u64 = r11.u64 | ctx.r10.u64;
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r27,r19
	r27.u64 = r19.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x82134114
	if (cr6.getEQ()) goto loc_82134114;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x821263d8
	sub_821263D8(ctx, base);
	// cmpwi cr6,r3,10000
	cr6.compare<int32_t>(ctx.r3.s32, 10000, xer);
	// bge cr6,0x82135548
	if (!cr6.getLT()) goto loc_82135548;
	// lwz r11,24(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 24);
	// mulli r10,r3,44
	ctx.r10.s64 = ctx.r3.s64 * 44;
	// b 0x82135554
	goto loc_82135554;
loc_82135548:
	// addi r11,r3,-10000
	r11.s64 = ctx.r3.s64 + -10000;
	// mulli r10,r11,68
	ctx.r10.s64 = r11.s64 * 68;
	// lwz r11,28(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 28);
loc_82135554:
	// add r28,r10,r11
	r28.u64 = ctx.r10.u64 + r11.u64;
	// lfs f2,32(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 32);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,24(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 24);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// li r4,0
	ctx.r4.s64 = 0;
	// stfs f0,112(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// lwz r3,24(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// lfs f0,4(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 4);
	f0.f64 = double(temp.f32);
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// stfs f0,116(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// lfs f0,8(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,120(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// lwz r11,40(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 40);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x820ce1f0
	sub_820CE1F0(ctx, base);
	// li r6,1
	ctx.r6.s64 = 1;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82127100
	sub_82127100(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82135650
	if (cr6.getEQ()) goto loc_82135650;
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// lfs f0,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f0.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// stfs f0,12(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// lfs f0,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	f0.f64 = double(temp.f32);
	// stfs f0,16(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// lfs f0,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 20, temp.u32);
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stw r10,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r10.u32);
	// lwz r11,20(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 20);
	// lwz r3,28(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 28);
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// stw r11,20(r29)
	PPC_STORE_U32(r29.u32 + 20, r11.u32);
	// bl 0x82119178
	sub_82119178(ctx, base);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r3,28(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 28);
	// bl 0x82119118
	sub_82119118(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8211e6f8
	sub_8211E6F8(ctx, base);
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lwz r9,24(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lwz r8,428(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// cmplw cr6,r9,r8
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r8.u32, xer);
	// bne cr6,0x8213564c
	if (!cr6.getEQ()) goto loc_8213564C;
	// lfs f0,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f0.f64 = double(temp.f32);
	// stfs f0,1460(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1460, temp.u32);
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lfs f0,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	f0.f64 = double(temp.f32);
	// stfs f0,1464(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1464, temp.u32);
	// lwz r11,-1364(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1364);
	// lfs f0,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// stfs f0,1468(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 1468, temp.u32);
	// lwz r9,96(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stw r9,1456(r11)
	PPC_STORE_U32(r11.u32 + 1456, ctx.r9.u32);
loc_8213564C:
	// mr r27,r25
	r27.u64 = r25.u64;
loc_82135650:
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,24(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 24);
	// bl 0x820ce1f0
	sub_820CE1F0(ctx, base);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x82134114
	if (cr6.getEQ()) goto loc_82134114;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_8213567C:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1748(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1748);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x821356ac
	if (cr6.getEQ()) goto loc_821356AC;
	// li r5,0
	ctx.r5.s64 = 0;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820b2028
	sub_820B2028(ctx, base);
	// fmr f2,f27
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f27.f64;
	// fmr f1,f28
	ctx.f1.f64 = f28.f64;
	// bl 0x820b20b8
	sub_820B20B8(ctx, base);
loc_821356AC:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821356B4:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1748(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1748);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x821356e4
	if (cr6.getEQ()) goto loc_821356E4;
	// li r5,0
	ctx.r5.s64 = 0;
	// fmr f1,f27
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f27.f64;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820b2028
	sub_820B2028(ctx, base);
	// fmr f2,f30
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f30.f64;
	// fmr f1,f28
	ctx.f1.f64 = f28.f64;
	// bl 0x820b20b8
	sub_820B20B8(ctx, base);
loc_821356E4:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821356EC:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lfs f0,1292(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 1292);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// bge cr6,0x821326a8
	if (!cr6.getLT()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135718:
	// bl 0x8211dd88
	sub_8211DD88(ctx, base);
	// addi r9,r3,-1
	ctx.r9.s64 = ctx.r3.s64 + -1;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x82135760
	if (cr6.getLT()) goto loc_82135760;
	// mulli r10,r9,676
	ctx.r10.s64 = ctx.r9.s64 * 676;
loc_8213572C:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,4852(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4852);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r8,28(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x82135750
	if (cr6.getEQ()) goto loc_82135750;
	// lwz r8,20(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// ori r8,r8,1024
	ctx.r8.u64 = ctx.r8.u64 | 1024;
	// stw r8,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r8.u32);
loc_82135750:
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,-676
	ctx.r10.s64 = ctx.r10.s64 + -676;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bge cr6,0x8213572c
	if (!cr6.getLT()) goto loc_8213572C;
loc_82135760:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135768:
	// bl 0x8211dd88
	sub_8211DD88(ctx, base);
	// addi r11,r3,-1
	r11.s64 = ctx.r3.s64 + -1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x821357a4
	if (cr6.getLT()) goto loc_821357A4;
	// mulli r10,r11,676
	ctx.r10.s64 = r11.s64 * 676;
loc_8213577C:
	// lis r9,-31994
	ctx.r9.s64 = -2096758784;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lwz r9,4852(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4852);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addi r10,r10,-676
	ctx.r10.s64 = ctx.r10.s64 + -676;
	// lwz r8,20(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 20);
	// rlwinm r8,r8,0,22,20
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFFFFFFFFBFF;
	// stw r8,20(r9)
	PPC_STORE_U32(ctx.r9.u32 + 20, ctx.r8.u32);
	// bge cr6,0x8213577c
	if (!cr6.getLT()) goto loc_8213577C;
loc_821357A4:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821357AC:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x821357fc
	if (cr6.getEQ()) goto loc_821357FC;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821357fc
	if (cr6.getEQ()) goto loc_821357FC;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lfs f0,132(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 132);
	f0.f64 = double(temp.f32);
	// stfs f0,180(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 180, temp.u32);
	// stfs f30,184(r31)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + 184, temp.u32);
	// lwz r11,-6376(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -6376);
	// stb r19,188(r31)
	PPC_STORE_U8(r31.u32 + 188, r19.u8);
	// stw r11,232(r31)
	PPC_STORE_U32(r31.u32 + 232, r11.u32);
	// bl 0x820dd278
	sub_820DD278(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820dd4c8
	sub_820DD4C8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820dd9b0
	sub_820DD9B0(ctx, base);
loc_821357FC:
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135804:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82135820
	if (cr6.getEQ()) goto loc_82135820;
	// lbz r4,2(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// bl 0x820dcd10
	sub_820DCD10(ctx, base);
loc_82135820:
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135828:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bge cr6,0x82131fd4
	if (!cr6.getLT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135854:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x820aaa28
	sub_820AAA28(ctx, base);
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bge cr6,0x82131f84
	if (!cr6.getLT()) goto loc_82131F84;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,3(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135888:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// li r3,0
	ctx.r3.s64 = 0;
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821358AC:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// li r3,0
	ctx.r3.s64 = 0;
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// bl 0x820a7508
	sub_820A7508(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a7508
	sub_820A7508(ctx, base);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821358D0:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// stfs f30,4(r24)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r24.u32 + 4, temp.u32);
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// std r11,384(r1)
	PPC_STORE_U64(ctx.r1.u32 + 384, r11.u64);
	// lfd f0,384(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 384);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,0(r24)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r24.u32 + 0, temp.u32);
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// std r11,400(r1)
	PPC_STORE_U64(ctx.r1.u32 + 400, r11.u64);
	// lfd f0,400(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 400);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,8(r24)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r24.u32 + 8, temp.u32);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135914:
	// lbz r11,2(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// lbz r10,3(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// rotlwi r11,r11,8
	r11.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// or r29,r11,r10
	r29.u64 = r11.u64 | ctx.r10.u64;
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// clrlwi r11,r29,16
	r11.u64 = r29.u32 & 0xFFFF;
	// cmplwi cr6,r11,10000
	cr6.compare<uint32_t>(r11.u32, 10000, xer);
	// bge cr6,0x82135944
	if (!cr6.getLT()) goto loc_82135944;
	// lwz r10,24(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 24);
	// mulli r11,r11,44
	r11.s64 = r11.s64 * 44;
	// b 0x82135950
	goto loc_82135950;
loc_82135944:
	// addi r11,r11,-10000
	r11.s64 = r11.s64 + -10000;
	// lwz r10,28(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 28);
	// mulli r11,r11,68
	r11.s64 = r11.s64 * 68;
loc_82135950:
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,40(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82134114
	if (cr6.getEQ()) goto loc_82134114;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82134114
	if (cr6.getEQ()) goto loc_82134114;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82134114
	if (cr6.getEQ()) goto loc_82134114;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// lbz r10,3(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 3);
	// lbz r11,3(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x82134114
	if (!cr6.getEQ()) goto loc_82134114;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821359A0:
	// fmr f1,f27
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f27.f64;
	// bl 0x82117f10
	sub_82117F10(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821359B0:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1748(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1748);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x821359c4
	if (!cr6.getEQ()) goto loc_821359C4;
	// stw r25,-1748(r11)
	PPC_STORE_U32(r11.u32 + -1748, r25.u32);
loc_821359C4:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821359CC:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,480(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_821359F8:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// stw r25,-1736(r11)
	PPC_STORE_U32(r11.u32 + -1736, r25.u32);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135A08:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0a80
	sub_820A0A80(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0a80
	sub_820A0A80(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135A20:
	// lbz r10,11(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 11);
	// li r3,7
	ctx.r3.s64 = 7;
	// lbz r11,5(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// lbz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// rotlwi r10,r10,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 8);
	// rotlwi r7,r11,8
	ctx.r7.u64 = __builtin_rotateleft32(r11.u32, 8);
	// lbz r9,6(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// or r11,r10,r8
	r11.u64 = ctx.r10.u64 | ctx.r8.u64;
	// lbz r6,3(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// extsh r10,r7
	ctx.r10.s64 = ctx.r7.s16;
	// lbz r5,9(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// lbz r8,1(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// lbz r4,4(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rotlwi r9,r5,8
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r5.u32, 8);
	// lbz r5,10(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// rotlwi r7,r6,8
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r6.u32, 8);
	// lbz r6,2(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// rotlwi r8,r8,8
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r8.u32, 8);
	// lbz r29,7(r31)
	r29.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// std r11,416(r1)
	PPC_STORE_U64(ctx.r1.u32 + 416, r11.u64);
	// extsh r28,r9
	r28.s64 = ctx.r9.s16;
	// or r9,r8,r6
	ctx.r9.u64 = ctx.r8.u64 | ctx.r6.u64;
	// lbz r31,8(r31)
	r31.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsw r11,r9
	r11.s64 = ctx.r9.s32;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// mr r6,r19
	ctx.r6.u64 = r19.u64;
	// or r8,r7,r4
	ctx.r8.u64 = ctx.r7.u64 | ctx.r4.u64;
	// std r10,432(r1)
	PPC_STORE_U64(ctx.r1.u32 + 432, ctx.r10.u64);
	// or r7,r28,r5
	ctx.r7.u64 = r28.u64 | ctx.r5.u64;
	// std r11,448(r1)
	PPC_STORE_U64(ctx.r1.u32 + 448, r11.u64);
	// extsw r10,r8
	ctx.r10.s64 = ctx.r8.s32;
	// extsw r9,r7
	ctx.r9.s64 = ctx.r7.s32;
	// rotlwi r5,r29,8
	ctx.r5.u64 = __builtin_rotateleft32(r29.u32, 8);
	// stw r6,-1876(r17)
	PPC_STORE_U32(r17.u32 + -1876, ctx.r6.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// or r6,r5,r31
	ctx.r6.u64 = ctx.r5.u64 | r31.u64;
	// std r10,464(r1)
	PPC_STORE_U64(ctx.r1.u32 + 464, ctx.r10.u64);
	// mr r5,r19
	ctx.r5.u64 = r19.u64;
	// std r9,480(r1)
	PPC_STORE_U64(ctx.r1.u32 + 480, ctx.r9.u64);
	// stw r6,-2964(r11)
	PPC_STORE_U32(r11.u32 + -2964, ctx.r6.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stw r5,-1880(r16)
	PPC_STORE_U32(r16.u32 + -1880, ctx.r5.u32);
	// lfd f0,416(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 416);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,432(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 432);
	// lfd f12,448(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 448);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// lfd f11,464(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 464);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// lfd f10,480(r1)
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 480);
	// fcfid f10,f10
	ctx.f10.f64 = double(ctx.f10.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f0,f26
	f0.f64 = double(float(f0.f64 * f26.f64));
	// stfs f0,-1904(r15)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r15.u32 + -1904, temp.u32);
	// frsp f0,f12
	f0.f64 = double(float(ctx.f12.f64));
	// stfs f0,-1908(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -1908, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// frsp f0,f11
	f0.f64 = double(float(ctx.f11.f64));
	// stfs f0,-3692(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -3692, temp.u32);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// fmuls f0,f13,f26
	f0.f64 = double(float(ctx.f13.f64 * f26.f64));
	// stfs f0,-3688(r14)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r14.u32 + -3688, temp.u32);
	// frsp f0,f10
	f0.f64 = double(float(ctx.f10.f64));
	// stfs f0,-3008(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -3008, temp.u32);
	// bl 0x820b5f70
	sub_820B5F70(ctx, base);
	// addi r30,r30,13
	r30.s64 = r30.s64 + 13;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135B40:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// stw r25,-1848(r11)
	PPC_STORE_U32(r11.u32 + -1848, r25.u32);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135B50:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1848(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1848);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x821326a8
	if (!cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135B78:
	// bl 0x820cc338
	sub_820CC338(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135B9C:
	// bl 0x82345d68
	sub_82345D68(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bne cr6,0x82131fd4
	if (!cr6.getEQ()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135BC8:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1736(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1736);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x821326a8
	if (cr6.getEQ()) goto loc_821326A8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,1(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135BF0:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// lwz r3,156(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// lbz r6,3(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135C10:
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// lwz r3,152(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135C28:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820b5808
	sub_820B5808(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135C38:
	// bl 0x820a66a0
	sub_820A66A0(ctx, base);
	// lbz r11,1(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// ble cr6,0x82131fd4
	if (!cr6.getGT()) goto loc_82131FD4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135C60:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lbz r4,1(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x821264d8
	sub_821264D8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// rlwinm r9,r10,0,10,10
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x200000;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82131fd4
	if (cr6.getEQ()) goto loc_82131FD4;
	// rlwinm r10,r10,0,11,9
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFDFFFFF;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// lbz r5,2(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// bl 0x821317a0
	sub_821317A0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135CA8:
	// mr r11,r25
	r11.u64 = r25.u64;
	// lis r10,-32010
	ctx.r10.s64 = -2097807360;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// stw r11,4052(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4052, r11.u32);
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135CBC:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x8212bbf8
	sub_8212BBF8(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135CCC:
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// stfs f30,160(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// stfs f30,164(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// stfs f30,168(r1)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// bl 0x820df5c0
	sub_820DF5C0(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135CE8:
	// lbz r3,1(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// bl 0x820cbf58
	sub_820CBF58(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82135d70
	if (cr6.getEQ()) goto loc_82135D70;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82135d70
	if (cr6.getEQ()) goto loc_82135D70;
	// bl 0x820e00b8
	sub_820E00B8(ctx, base);
	// lwz r11,100(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 100);
	// rlwinm r11,r11,0,24,24
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82135d70
	if (cr6.getEQ()) goto loc_82135D70;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// ori r10,r10,1537
	ctx.r10.u64 = ctx.r10.u64 | 1537;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// bl 0x820d48f8
	sub_820D48F8(ctx, base);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// addi r3,r11,32
	ctx.r3.s64 = r11.s64 + 32;
	// bl 0x8210b2b0
	sub_8210B2B0(ctx, base);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stfs f30,4(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 4, temp.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stfs f21,8(r11)
	temp.f32 = float(f21.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stfs f30,12(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stfs f30,16(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stfs f20,20(r11)
	temp.f32 = float(f20.f64);
	PPC_STORE_U32(r11.u32 + 20, temp.u32);
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// stfs f30,24(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 24, temp.u32);
loc_82135D70:
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// b 0x82131acc
	goto loc_82131ACC;
loc_82135D78:
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// beq cr6,0x82135d9c
	if (cr6.getEQ()) goto loc_82135D9C;
	// stw r21,260(r22)
	PPC_STORE_U32(r22.u32 + 260, r21.u32);
	// sth r11,264(r22)
	PPC_STORE_U16(r22.u32 + 264, r11.u16);
	// addi r1,r1,912
	ctx.r1.s64 = ctx.r1.s64 + 912;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed560
	// b 0x823ed150
	return;
loc_82135D9C:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82135dbc
	if (cr6.getEQ()) goto loc_82135DBC;
	// stw r21,128(r26)
	PPC_STORE_U32(r26.u32 + 128, r21.u32);
	// sth r11,132(r26)
	PPC_STORE_U16(r26.u32 + 132, r11.u16);
	// addi r1,r1,912
	ctx.r1.s64 = ctx.r1.s64 + 912;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed560
	// b 0x823ed150
	return;
loc_82135DBC:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x82135de8
	if (cr6.getEQ()) goto loc_82135DE8;
	// stw r21,128(r23)
	PPC_STORE_U32(r23.u32 + 128, r21.u32);
	// sth r11,132(r23)
	PPC_STORE_U16(r23.u32 + 132, r11.u16);
	// addi r1,r1,912
	ctx.r1.s64 = ctx.r1.s64 + 912;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed560
	// b 0x823ed150
	return;
loc_82135DDC:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,29332
	ctx.r3.s64 = r11.s64 + 29332;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82135DE8:
	// addi r1,r1,912
	ctx.r1.s64 = ctx.r1.s64 + 912;
	// addi r12,r1,-152
	r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823ed560
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_82135DF8"))) PPC_WEAK_FUNC(sub_82135DF8);
PPC_FUNC_IMPL(__imp__sub_82135DF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r30,r11,11264
	r30.s64 = r11.s64 + 11264;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_82135E18:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82135e38
	if (cr6.getEQ()) goto loc_82135E38;
	// bl 0x82144970
	sub_82144970(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82135e38
	if (cr6.getEQ()) goto loc_82135E38;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x82144a08
	sub_82144A08(ctx, base);
loc_82135E38:
	// addi r31,r31,24
	r31.s64 = r31.s64 + 24;
	// addi r11,r30,192
	r11.s64 = r30.s64 + 192;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x82135e18
	if (cr6.getLT()) goto loc_82135E18;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82135E60"))) PPC_WEAK_FUNC(sub_82135E60);
PPC_FUNC_IMPL(__imp__sub_82135E60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r10,r11,11264
	ctx.r10.s64 = r11.s64 + 11264;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82135E70:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r8,r10,192
	ctx.r8.s64 = ctx.r10.s64 + 192;
	// addi r11,r11,24
	r11.s64 = r11.s64 + 24;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// blt cr6,0x82135e70
	if (cr6.getLT()) goto loc_82135E70;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82135E88"))) PPC_WEAK_FUNC(sub_82135E88);
PPC_FUNC_IMPL(__imp__sub_82135E88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// rlwinm r10,r3,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 3) & 0xFFFFFFF8;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// add r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 + ctx.r10.u64;
	// addi r11,r11,-28640
	r11.s64 = r11.s64 + -28640;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82135EA8"))) PPC_WEAK_FUNC(sub_82135EA8);
PPC_FUNC_IMPL(__imp__sub_82135EA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// rlwinm r10,r3,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 3) & 0xFFFFFFF8;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// add r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 + ctx.r10.u64;
	// addi r11,r11,-28640
	r11.s64 = r11.s64 + -28640;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82135f0c
	if (!cr6.getEQ()) goto loc_82135F0C;
	// addi r9,r11,12
	ctx.r9.s64 = r11.s64 + 12;
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwzx r7,r10,r9
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// lwzx r6,r10,r8
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// lwzx r4,r10,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x8211db38
	sub_8211DB38(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82135F0C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82135F20"))) PPC_WEAK_FUNC(sub_82135F20);
PPC_FUNC_IMPL(__imp__sub_82135F20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stfd f30,-96(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -96, f30.u64);
	// stfd f31,-88(r1)
	PPC_STORE_U64(ctx.r1.u32 + -88, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-28640
	r30.s64 = r11.s64 + -28640;
	// rlwinm r11,r31,3,0,28
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,16
	ctx.r10.s64 = r30.s64 + 16;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r9,r30,20
	ctx.r9.s64 = r30.s64 + 20;
	// rlwinm r28,r11,2,0,29
	r28.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r3,12
	ctx.r3.s64 = 12;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// lfsx f13,r28,r10
	temp.u32 = PPC_LOAD_U32(r28.u32 + ctx.r10.u32);
	ctx.f13.f64 = double(temp.f32);
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// lfs f0,14176(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14176);
	f0.f64 = double(temp.f32);
	// mr r23,r7
	r23.u64 = ctx.r7.u64;
	// lfsx f30,r28,r9
	temp.u32 = PPC_LOAD_U32(r28.u32 + ctx.r9.u32);
	f30.f64 = double(temp.f32);
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// li r24,0
	r24.s64 = 0;
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bl 0x82136fa0
	sub_82136FA0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82135fb0
	if (cr6.getEQ()) goto loc_82135FB0;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8211e260
	sub_8211E260(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82135fb0
	if (cr6.getEQ()) goto loc_82135FB0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,14112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14112);
	f0.f64 = double(temp.f32);
	// fmuls f31,f31,f0
	f31.f64 = double(float(f31.f64 * f0.f64));
loc_82135FB0:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,13952
	ctx.r4.s64 = r11.s64 + 13952;
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8211c6c8
	sub_8211C6C8(ctx, base);
	// addi r30,r30,25
	r30.s64 = r30.s64 + 25;
	// lbzx r11,r28,r30
	r11.u64 = PPC_LOAD_U8(r28.u32 + r30.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213602c
	if (!cr6.getEQ()) goto loc_8213602C;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// blt cr6,0x8213602c
	if (cr6.getLT()) goto loc_8213602C;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// lwz r24,16(r11)
	r24.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// beq cr6,0x8213601c
	if (cr6.getEQ()) goto loc_8213601C;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r4,r11,15312
	ctx.r4.s64 = r11.s64 + 15312;
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8211c6c8
	sub_8211C6C8(ctx, base);
	// lhz r11,20(r27)
	r11.u64 = PPC_LOAD_U16(r27.u32 + 20);
	// lhz r10,20(r29)
	ctx.r10.u64 = PPC_LOAD_U16(r29.u32 + 20);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// sth r11,20(r29)
	PPC_STORE_U16(r29.u32 + 20, r11.u16);
	// b 0x8213602c
	goto loc_8213602C;
loc_8213601C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r31,1
	ctx.r4.s64 = r31.s64 + 1;
	// addi r3,r11,29452
	ctx.r3.s64 = r11.s64 + 29452;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_8213602C:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// bne cr6,0x82136048
	if (!cr6.getEQ()) goto loc_82136048;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821186e0
	sub_821186E0(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x821360d4
	if (cr6.getEQ()) goto loc_821360D4;
loc_82136048:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x823ada90
	sub_823ADA90(ctx, base);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x82119210
	sub_82119210(ctx, base);
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x821360d4
	if (cr6.getEQ()) goto loc_821360D4;
	// lbzx r11,r28,r30
	r11.u64 = PPC_LOAD_U8(r28.u32 + r30.u32);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821360d8
	if (!cr6.getEQ()) goto loc_821360D8;
	// lhz r11,20(r27)
	r11.u64 = PPC_LOAD_U16(r27.u32 + 20);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lhz r10,20(r29)
	ctx.r10.u64 = PPC_LOAD_U16(r29.u32 + 20);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// sth r11,20(r29)
	PPC_STORE_U16(r29.u32 + 20, r11.u16);
	// bl 0x82118870
	sub_82118870(ctx, base);
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// bne cr6,0x821360d4
	if (!cr6.getEQ()) goto loc_821360D4;
	// lhz r11,12(r27)
	r11.u64 = PPC_LOAD_U16(r27.u32 + 12);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x821360d8
	if (!cr6.getGT()) goto loc_821360D8;
	// lwz r11,8(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821360d8
	if (cr6.getEQ()) goto loc_821360D8;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x82118d48
	sub_82118D48(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_821360D4:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
loc_821360D8:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f30,-96(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -96);
	// lfd f31,-88(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_821360E8"))) PPC_WEAK_FUNC(sub_821360E8);
PPC_FUNC_IMPL(__imp__sub_821360E8) {
	PPC_FUNC_PROLOGUE();
	// li r8,0
	ctx.r8.s64 = 0;
	// b 0x82135f20
	sub_82135F20(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821360F0"))) PPC_WEAK_FUNC(sub_821360F0);
PPC_FUNC_IMPL(__imp__sub_821360F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32142
	r11.s64 = -2106458112;
	// lis r10,-32141
	ctx.r10.s64 = -2106392576;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// addi r30,r10,-28640
	r30.s64 = ctx.r10.s64 + -28640;
	// lwz r11,25100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 25100);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beq cr6,0x82136150
	if (cr6.getEQ()) goto loc_82136150;
	// mr r31,r11
	r31.u64 = r11.u64;
	// addi r10,r30,25
	ctx.r10.s64 = r30.s64 + 25;
	// rlwinm r11,r31,3,0,28
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82136144
	if (cr6.getEQ()) goto loc_82136144;
	// li r27,-1
	r27.s64 = -1;
	// b 0x82136150
	goto loc_82136150;
loc_82136144:
	// cmpwi cr6,r27,-1
	cr6.compare<int32_t>(r27.s32, -1, xer);
	// bne cr6,0x82136150
	if (!cr6.getEQ()) goto loc_82136150;
	// li r27,78
	r27.s64 = 78;
loc_82136150:
	// clrlwi r11,r5,31
	r11.u64 = ctx.r5.u32 & 0x1;
	// li r28,0
	r28.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// rlwinm r11,r31,3,0,28
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// li r7,0
	ctx.r7.s64 = 0;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// rlwinm r29,r11,2,0,29
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r26,r29,r30
	r26.u64 = PPC_LOAD_U32(r29.u32 + r30.u32);
	// beq cr6,0x8213617c
	if (cr6.getEQ()) goto loc_8213617C;
	// li r7,1
	ctx.r7.s64 = 1;
	// b 0x82136198
	goto loc_82136198;
loc_8213617C:
	// rlwinm r11,r5,0,30,30
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82136198
	if (cr6.getEQ()) goto loc_82136198;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// not r11,r3
	r11.u64 = ~ctx.r3.u64;
	// clrlwi r7,r11,31
	ctx.r7.u64 = r11.u32 & 0x1;
loc_82136198:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// blt cr6,0x821361c0
	if (cr6.getLT()) goto loc_821361C0;
	// addi r11,r30,25
	r11.s64 = r30.s64 + 25;
	// lbzx r11,r29,r11
	r11.u64 = PPC_LOAD_U8(r29.u32 + r11.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821361c0
	if (!cr6.getEQ()) goto loc_821361C0;
	// rlwinm r11,r27,3,0,28
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r27,r11
	r11.u64 = r27.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r28,r11,r30
	r28.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
loc_821361C0:
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82135f20
	sub_82135F20(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_821361E0"))) PPC_WEAK_FUNC(sub_821361E0);
PPC_FUNC_IMPL(__imp__sub_821361E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-28640
	r11.s64 = r11.s64 + -28640;
	// addi r10,r11,24
	ctx.r10.s64 = r11.s64 + 24;
	// rlwinm r11,r3,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r3,r11
	r11.u64 = ctx.r3.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82136270
	if (cr6.getEQ()) goto loc_82136270;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r9,r11,-22136
	ctx.r9.s64 = r11.s64 + -22136;
	// lwz r11,11472(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11472);
	// addi r6,r11,1
	ctx.r6.s64 = r11.s64 + 1;
	// rlwinm r7,r11,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// rotlwi r8,r6,1
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r6.u32, 1);
	// lwzx r3,r7,r9
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r9.u32);
	// addi r9,r8,-1
	ctx.r9.s64 = ctx.r8.s64 + -1;
	// lwz r11,11460(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11460);
	// divw r5,r6,r11
	ctx.r5.s32 = ctx.r6.s32 / r11.s32;
	// andc r9,r11,r9
	ctx.r9.u64 = r11.u64 & ~ctx.r9.u64;
	// mullw r8,r5,r11
	ctx.r8.s64 = int64_t(ctx.r5.s32) * int64_t(r11.s32);
	// twllei r11,0
	// subf r11,r8,r6
	r11.s64 = ctx.r6.s64 - ctx.r8.s64;
	// twlgei r9,-1
	// stw r11,11472(r10)
	PPC_STORE_U32(ctx.r10.u32 + 11472, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136270:
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r11,r11,-22156
	r11.s64 = r11.s64 + -22156;
	// lwz r10,11476(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11476);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82136298"))) PPC_WEAK_FUNC(sub_82136298);
PPC_FUNC_IMPL(__imp__sub_82136298) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-28640
	r11.s64 = r11.s64 + -28640;
	// addi r10,r11,24
	ctx.r10.s64 = r11.s64 + 24;
	// rlwinm r11,r3,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r3,r11
	r11.u64 = ctx.r3.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821362ec
	if (cr6.getEQ()) goto loc_821362EC;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r10,-32055
	ctx.r10.s64 = -2100756480;
	// addi r9,r10,-22136
	ctx.r9.s64 = ctx.r10.s64 + -22136;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lwz r10,11460(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11460);
	// b 0x82136308
	goto loc_82136308;
loc_821362EC:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r10,-32055
	ctx.r10.s64 = -2100756480;
	// addi r9,r10,-22156
	ctx.r9.s64 = ctx.r10.s64 + -22156;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lwz r10,11464(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11464);
loc_82136308:
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// twllei r10,0
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// divwu r8,r11,r10
	ctx.r8.u32 = r11.u32 / ctx.r10.u32;
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r9
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82136340"))) PPC_WEAK_FUNC(sub_82136340);
PPC_FUNC_IMPL(__imp__sub_82136340) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// lfs f1,2948(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2948);
	ctx.f1.f64 = double(temp.f32);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lhz r10,6(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 6);
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// mulli r10,r10,44
	ctx.r10.s64 = ctx.r10.s64 * 44;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// add r28,r10,r11
	r28.u64 = ctx.r10.u64 + r11.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r4,40(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + 40);
	// bl 0x820cff50
	sub_820CFF50(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82136518
	if (cr6.getEQ()) goto loc_82136518;
	// lhz r29,8(r31)
	r29.u64 = PPC_LOAD_U16(r31.u32 + 8);
	// li r27,-1
	r27.s64 = -1;
	// cmplwi cr6,r29,65535
	cr6.compare<uint32_t>(r29.u32, 65535, xer);
	// bne cr6,0x821363bc
	if (!cr6.getEQ()) goto loc_821363BC;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r11,r11,-22328
	r11.s64 = r11.s64 + -22328;
	// lwz r10,11468(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11468);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r29,r10,r11
	r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
loc_821363BC:
	// lis r11,-32141
	r11.s64 = -2106392576;
	// addi r11,r11,-28640
	r11.s64 = r11.s64 + -28640;
	// addi r10,r11,25
	ctx.r10.s64 = r11.s64 + 25;
	// rlwinm r11,r29,3,0,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82136404
	if (!cr6.getEQ()) goto loc_82136404;
	// lhz r11,22(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 22);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x821363f8
	if (cr6.getLT()) goto loc_821363F8;
	// mr r27,r11
	r27.u64 = r11.u64;
	// b 0x82136404
	goto loc_82136404;
loc_821363F8:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821361e0
	sub_821361E0(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
loc_82136404:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lhz r5,20(r31)
	ctx.r5.u64 = PPC_LOAD_U16(r31.u32 + 20);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821360f0
	sub_821360F0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82136540
	if (cr6.getEQ()) goto loc_82136540;
	// lfs f2,32(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 32);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,24(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 24);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210ae20
	sub_8210AE20(ctx, base);
	// lhz r3,10(r31)
	ctx.r3.u64 = PPC_LOAD_U16(r31.u32 + 10);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x82131850
	sub_82131850(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x82120e20
	sub_82120E20(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82136540
	if (cr6.getEQ()) goto loc_82136540;
	// bl 0x820ccb20
	sub_820CCB20(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820cca18
	sub_820CCA18(ctx, base);
	// lhz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// lhz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 16);
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,14440(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14440);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f0,236(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 236, temp.u32);
	// lhz r10,18(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// lfd f0,88(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,208(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 208, temp.u32);
	// lhz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 12);
	// sth r10,276(r11)
	PPC_STORE_U16(r11.u32 + 276, ctx.r10.u16);
	// lhz r10,14(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 14);
	// stb r27,6(r11)
	PPC_STORE_U8(r11.u32 + 6, r27.u8);
	// stb r29,15(r11)
	PPC_STORE_U8(r11.u32 + 15, r29.u8);
	// sth r10,278(r11)
	PPC_STORE_U16(r11.u32 + 278, ctx.r10.u16);
	// lhz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 20);
	// rlwinm r10,r10,0,29,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x821364ec
	if (cr6.getEQ()) goto loc_821364EC;
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// ori r10,r10,2
	ctx.r10.u64 = ctx.r10.u64 | 2;
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
loc_821364EC:
	// lhz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 20);
	// rlwinm r10,r10,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82136508
	if (cr6.getEQ()) goto loc_82136508;
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// ori r10,r10,16
	ctx.r10.u64 = ctx.r10.u64 | 16;
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
loc_82136508:
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82136518:
	// lwz r3,40(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 40);
	// bl 0x8210e518
	sub_8210E518(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lhz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// addi r11,r11,29508
	r11.s64 = r11.s64 + 29508;
	// addi r5,r10,1
	ctx.r5.s64 = ctx.r10.s64 + 1;
	// addi r4,r30,1
	ctx.r4.s64 = r30.s64 + 1;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82136540:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82136550"))) PPC_WEAK_FUNC(sub_82136550);
PPC_FUNC_IMPL(__imp__sub_82136550) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-32055
	ctx.r10.s64 = -2100756480;
	// lis r8,-31994
	ctx.r8.s64 = -2096758784;
	// addi r10,r10,-22328
	ctx.r10.s64 = ctx.r10.s64 + -22328;
	// li r11,0
	r11.s64 = 0;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r11,11456(r8)
	PPC_STORE_U32(ctx.r8.u32 + 11456, r11.u32);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x82136588
	if (cr6.getLT()) goto loc_82136588;
loc_82136570:
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bge cr6,0x82136570
	if (!cr6.getLT()) goto loc_82136570;
	// stw r11,11456(r8)
	PPC_STORE_U32(ctx.r8.u32 + 11456, r11.u32);
loc_82136588:
	// lis r10,-32055
	ctx.r10.s64 = -2100756480;
	// lis r8,-31994
	ctx.r8.s64 = -2096758784;
	// addi r10,r10,-22136
	ctx.r10.s64 = ctx.r10.s64 + -22136;
	// li r11,0
	r11.s64 = 0;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r11,11460(r8)
	PPC_STORE_U32(ctx.r8.u32 + 11460, r11.u32);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x821365c0
	if (cr6.getLT()) goto loc_821365C0;
loc_821365A8:
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bge cr6,0x821365a8
	if (!cr6.getLT()) goto loc_821365A8;
	// stw r11,11460(r8)
	PPC_STORE_U32(ctx.r8.u32 + 11460, r11.u32);
loc_821365C0:
	// lis r10,-32055
	ctx.r10.s64 = -2100756480;
	// lis r8,-31994
	ctx.r8.s64 = -2096758784;
	// addi r10,r10,-22156
	ctx.r10.s64 = ctx.r10.s64 + -22156;
	// li r11,0
	r11.s64 = 0;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r11,11464(r8)
	PPC_STORE_U32(ctx.r8.u32 + 11464, r11.u32);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bltlr cr6
	if (cr6.getLT()) return;
loc_821365E0:
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bge cr6,0x821365e0
	if (!cr6.getLT()) goto loc_821365E0;
	// stw r11,11464(r8)
	PPC_STORE_U32(ctx.r8.u32 + 11464, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82136600"))) PPC_WEAK_FUNC(sub_82136600);
PPC_FUNC_IMPL(__imp__sub_82136600) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r28,-31994
	r28.s64 = -2096758784;
	// li r31,0
	r31.s64 = 0;
	// lwz r11,11460(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 11460);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r27,r11,15312
	r27.s64 = r11.s64 + 15312;
	// ble cr6,0x82136650
	if (!cr6.getGT()) goto loc_82136650;
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r30,r11,-22136
	r30.s64 = r11.s64 + -22136;
loc_82136630:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// lwz r11,11460(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 11460);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x82136630
	if (cr6.getLT()) goto loc_82136630;
loc_82136650:
	// lis r30,-31994
	r30.s64 = -2096758784;
	// li r31,0
	r31.s64 = 0;
	// lwz r11,11464(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 11464);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8213668c
	if (!cr6.getGT()) goto loc_8213668C;
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r29,r11,-22156
	r29.s64 = r11.s64 + -22156;
loc_8213666C:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwz r3,0(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bl 0x82135ea8
	sub_82135EA8(ctx, base);
	// lwz r11,11464(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 11464);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x8213666c
	if (cr6.getLT()) goto loc_8213666C;
loc_8213668C:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,11460(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 11460);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// twllei r10,0
	// divwu r9,r11,r10
	ctx.r9.u32 = r11.u32 / ctx.r10.u32;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// stw r11,11472(r10)
	PPC_STORE_U32(ctx.r10.u32 + 11472, r11.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,11464(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 11464);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// twllei r10,0
	// divwu r9,r11,r10
	ctx.r9.u32 = r11.u32 / ctx.r10.u32;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// stw r11,11476(r10)
	PPC_STORE_U32(ctx.r10.u32 + 11476, r11.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lwz r10,11456(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11456);
	// divwu r9,r11,r10
	ctx.r9.u32 = r11.u32 / ctx.r10.u32;
	// twllei r10,0
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// stw r11,11468(r10)
	PPC_STORE_U32(ctx.r10.u32 + 11468, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82136728"))) PPC_WEAK_FUNC(sub_82136728);
PPC_FUNC_IMPL(__imp__sub_82136728) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r19{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r11,r4,-9
	r11.s64 = ctx.r4.s64 + -9;
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bgt cr6,0x82136a30
	if (cr6.getGT()) goto loc_82136A30;
	// lis r12,-32237
	r12.s64 = -2112684032;
	// addi r12,r12,26460
	r12.s64 = r12.s64 + 26460;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82136864;
	case 1:
		goto loc_82136A30;
	case 2:
		goto loc_82136A30;
	case 3:
		goto loc_82136A30;
	case 4:
		goto loc_82136A30;
	case 5:
		goto loc_82136A30;
	case 6:
		goto loc_82136A30;
	case 7:
		goto loc_82136A30;
	case 8:
		goto loc_82136A30;
	case 9:
		goto loc_82136A30;
	case 10:
		goto loc_82136A30;
	case 11:
		goto loc_82136878;
	case 12:
		goto loc_82136A30;
	case 13:
		goto loc_821368C8;
	case 14:
		goto loc_82136940;
	case 15:
		goto loc_821368DC;
	case 16:
		goto loc_82136918;
	case 17:
		goto loc_8213688C;
	case 18:
		goto loc_821368B4;
	case 19:
		goto loc_8213697C;
	case 20:
		goto loc_821368F0;
	case 21:
		goto loc_82136904;
	case 22:
		goto loc_821369B8;
	case 23:
		goto loc_82136990;
	case 24:
		goto loc_82136814;
	case 25:
		goto loc_82136828;
	case 26:
		goto loc_8213683C;
	case 27:
		goto loc_82136850;
	case 28:
		goto loc_8213692C;
	case 29:
		goto loc_821369A4;
	case 30:
		goto loc_82136954;
	case 31:
		goto loc_82136A30;
	case 32:
		goto loc_82136968;
	case 33:
		goto loc_82136A30;
	case 34:
		goto loc_821368A0;
	case 35:
		goto loc_82136A30;
	case 36:
		goto loc_821369E0;
	case 37:
		goto loc_821369F4;
	case 38:
		goto loc_82136A30;
	case 39:
		goto loc_821369CC;
	case 40:
		goto loc_82136A30;
	case 41:
		goto loc_82136A08;
	case 42:
		goto loc_82136A30;
	case 43:
		goto loc_82136A30;
	case 44:
		goto loc_82136A30;
	case 45:
		goto loc_82136A1C;
	default:
		__builtin_unreachable();
	}
	// lwz r16,26724(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26724);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,26744(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26744);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,26824(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26824);
	// lwz r16,26944(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26944);
	// lwz r16,26844(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26844);
	// lwz r16,26904(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26904);
	// lwz r16,26764(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26764);
	// lwz r16,26804(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26804);
	// lwz r16,27004(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27004);
	// lwz r16,26864(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26864);
	// lwz r16,26884(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26884);
	// lwz r16,27064(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27064);
	// lwz r16,27024(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27024);
	// lwz r16,26644(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26644);
	// lwz r16,26664(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26664);
	// lwz r16,26684(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26684);
	// lwz r16,26704(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26704);
	// lwz r16,26924(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26924);
	// lwz r16,27044(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27044);
	// lwz r16,26964(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26964);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,26984(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26984);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,26784(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 26784);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27104(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27104);
	// lwz r16,27124(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27124);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27084(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27084);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27144(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27144);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27184);
	// lwz r16,27164(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 27164);
loc_82136814:
	// li r3,11
	ctx.r3.s64 = 11;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136828:
	// li r3,3
	ctx.r3.s64 = 3;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8213683C:
	// li r3,28
	ctx.r3.s64 = 28;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136850:
	// li r3,31
	ctx.r3.s64 = 31;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136864:
	// li r3,30
	ctx.r3.s64 = 30;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136878:
	// li r3,34
	ctx.r3.s64 = 34;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8213688C:
	// li r3,13
	ctx.r3.s64 = 13;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821368A0:
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821368B4:
	// li r3,29
	ctx.r3.s64 = 29;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821368C8:
	// li r3,35
	ctx.r3.s64 = 35;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821368DC:
	// li r3,2
	ctx.r3.s64 = 2;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821368F0:
	// li r3,25
	ctx.r3.s64 = 25;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136904:
	// li r3,12
	ctx.r3.s64 = 12;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136918:
	// li r3,36
	ctx.r3.s64 = 36;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8213692C:
	// li r3,18
	ctx.r3.s64 = 18;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136940:
	// li r3,8
	ctx.r3.s64 = 8;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136954:
	// li r3,7
	ctx.r3.s64 = 7;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136968:
	// li r3,9
	ctx.r3.s64 = 9;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8213697C:
	// li r3,5
	ctx.r3.s64 = 5;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136990:
	// li r3,10
	ctx.r3.s64 = 10;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821369A4:
	// li r3,14
	ctx.r3.s64 = 14;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821369B8:
	// li r3,26
	ctx.r3.s64 = 26;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821369CC:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821369E0:
	// li r3,17
	ctx.r3.s64 = 17;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_821369F4:
	// li r3,4
	ctx.r3.s64 = 4;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136A08:
	// li r3,23
	ctx.r3.s64 = 23;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136A1C:
	// li r3,20
	ctx.r3.s64 = 20;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136A30:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,29804
	ctx.r3.s64 = r11.s64 + 29804;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82136A3C:
	// b 0x82136a3c
	goto loc_82136A3C;
}

__attribute__((alias("__imp__sub_82136A40"))) PPC_WEAK_FUNC(sub_82136A40);
PPC_FUNC_IMPL(__imp__sub_82136A40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-336(r1)
	ea = -336 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// rlwinm r30,r3,2,0,29
	r30.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r29,r11,11680
	r29.s64 = r11.s64 + 11680;
	// addi r11,r29,-184
	r11.s64 = r29.s64 + -184;
	// add r31,r30,r11
	r31.u64 = r30.u64 + r11.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82136acc
	if (!cr6.getEQ()) goto loc_82136ACC;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32055
	r11.s64 = -2100756480;
	// addi r6,r10,29896
	ctx.r6.s64 = ctx.r10.s64 + 29896;
	// addi r11,r11,-22032
	r11.s64 = r11.s64 + -22032;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r5,r10,29852
	ctx.r5.s64 = ctx.r10.s64 + 29852;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lwzx r7,r30,r11
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// bl 0x823eea88
	sub_823EEA88(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82090420
	sub_82090420(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82136acc
	if (cr6.getEQ()) goto loc_82136ACC;
	// bl 0x8215a498
	sub_8215A498(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8209cbc8
	sub_8209CBC8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stwx r4,r30,r29
	PPC_STORE_U32(r30.u32 + r29.u32, ctx.r4.u32);
	// bl 0x823b29b8
	sub_823B29B8(ctx, base);
loc_82136ACC:
	// addi r1,r1,336
	ctx.r1.s64 = ctx.r1.s64 + 336;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82136AD8"))) PPC_WEAK_FUNC(sub_82136AD8);
PPC_FUNC_IMPL(__imp__sub_82136AD8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// srawi r10,r5,10
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x3FF) != 0);
	ctx.r10.s64 = ctx.r5.s32 >> 10;
	// addi r11,r11,11680
	r11.s64 = r11.s64 + 11680;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r11,-184
	ctx.r9.s64 = r11.s64 + -184;
	// lwzx r3,r10,r9
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82136b30
	if (cr6.getEQ()) goto loc_82136B30;
	// lwzx r4,r10,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82136b30
	if (cr6.getEQ()) goto loc_82136B30;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// bl 0x823b2a10
	sub_823B2A10(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82136B30:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r3,r11,29904
	ctx.r3.s64 = r11.s64 + 29904;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82136B48"))) PPC_WEAK_FUNC(sub_82136B48);
PPC_FUNC_IMPL(__imp__sub_82136B48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r31,0
	r31.s64 = 0;
loc_82136B5C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82136a40
	sub_82136A40(ctx, base);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,45
	cr6.compare<int32_t>(r31.s32, 45, xer);
	// blt cr6,0x82136b5c
	if (cr6.getLT()) goto loc_82136B5C;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82136B88"))) PPC_WEAK_FUNC(sub_82136B88);
PPC_FUNC_IMPL(__imp__sub_82136B88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823b34f8
	sub_823B34F8(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// rotlwi r11,r3,0
	r11.u64 = __builtin_rotateleft32(ctx.r3.u32, 0);
	// stw r11,11868(r10)
	PPC_STORE_U32(ctx.r10.u32 + 11868, r11.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// stw r11,11864(r10)
	PPC_STORE_U32(ctx.r10.u32 + 11864, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82136BC0"))) PPC_WEAK_FUNC(sub_82136BC0);
PPC_FUNC_IMPL(__imp__sub_82136BC0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31994
	r30.s64 = -2096758784;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,11868(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 11868);
	// stw r11,11864(r10)
	PPC_STORE_U32(ctx.r10.u32 + 11864, r11.u32);
	// bl 0x823b34f8
	sub_823B34F8(ctx, base);
	// extsw r8,r31
	ctx.r8.s64 = r31.s32;
	// stw r3,11868(r30)
	PPC_STORE_U32(r30.u32 + 11868, ctx.r3.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lis r9,-32055
	ctx.r9.s64 = -2100756480;
	// std r8,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r8.u64);
	// lwz r11,11860(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11860);
	// stw r11,-21852(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21852, r11.u32);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// stw r11,11860(r10)
	PPC_STORE_U32(ctx.r10.u32 + 11860, r11.u32);
	// lis r11,-32055
	r11.s64 = -2100756480;
	// stw r31,-21848(r11)
	PPC_STORE_U32(r11.u32 + -21848, r31.u32);
	// lis r11,-32055
	r11.s64 = -2100756480;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,-21844(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -21844, temp.u32);
	// lis r11,-32055
	r11.s64 = -2100756480;
	// stfs f0,-21840(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + -21840, temp.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82136C50"))) PPC_WEAK_FUNC(sub_82136C50);
PPC_FUNC_IMPL(__imp__sub_82136C50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r10,-32055
	ctx.r10.s64 = -2100756480;
	// li r11,1
	r11.s64 = 1;
	// stw r11,-21836(r10)
	PPC_STORE_U32(ctx.r10.u32 + -21836, r11.u32);
	// b 0x82136bc0
	sub_82136BC0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82136C60"))) PPC_WEAK_FUNC(sub_82136C60);
PPC_FUNC_IMPL(__imp__sub_82136C60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f29,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f29.u64);
	// stfd f30,-40(r1)
	PPC_STORE_U64(ctx.r1.u32 + -40, f30.u64);
	// stfd f31,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lfs f31,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// stfs f31,88(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// stfs f31,92(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stfs f31,96(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82136cc4
	if (cr6.getEQ()) goto loc_82136CC4;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82136cc4
	if (cr6.getEQ()) goto loc_82136CC4;
	// stfs f31,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stfs f31,92(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stfs f31,88(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// b 0x82136d78
	goto loc_82136D78;
loc_82136CC4:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f31,17744(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 17744);
	f31.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f30.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,17740(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17740);
	f29.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fmsubs f0,f0,f31,f29
	f0.f64 = double(float(f0.f64 * f31.f64 - f29.f64));
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fmsubs f0,f0,f31,f29
	f0.f64 = double(float(f0.f64 * f31.f64 - f29.f64));
	// stfs f0,92(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fmsubs f0,f0,f31,f29
	f0.f64 = double(float(f0.f64 * f31.f64 - f29.f64));
	// stfs f0,96(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
loc_82136D78:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8210ba08
	sub_8210BA08(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f29,-48(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f30,-40(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82136DA8"))) PPC_WEAK_FUNC(sub_82136DA8);
PPC_FUNC_IMPL(__imp__sub_82136DA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f29.u64);
	// stfd f30,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, f30.u64);
	// stfd f31,-40(r1)
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f31,14296(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14296);
	f31.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,14028(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f30.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,15528(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15528);
	f29.f64 = double(temp.f32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fmsubs f0,f0,f31,f29
	f0.f64 = double(float(f0.f64 * f31.f64 - f29.f64));
	// stfs f0,0(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f30
	f0.f64 = double(float(f0.f64 * f30.f64));
	// fmsubs f0,f0,f31,f29
	f0.f64 = double(float(f0.f64 * f31.f64 - f29.f64));
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82136ea8
	if (cr6.getEQ()) goto loc_82136EA8;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82136ea8
	if (cr6.getEQ()) goto loc_82136EA8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// stfs f0,0(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
loc_82136EA8:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82136c60
	sub_82136C60(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f30,-48(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82136EC8"))) PPC_WEAK_FUNC(sub_82136EC8);
PPC_FUNC_IMPL(__imp__sub_82136EC8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,0(r4)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	f0.f64 = double(temp.f32);
	// lfs f11,0(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// lfs f13,14148(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14148);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fnmsubs f13,f1,f13,f0
	ctx.f13.f64 = double(float(-(ctx.f1.f64 * ctx.f13.f64 - f0.f64)));
	// lfs f12,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f12.f64 = double(temp.f32);
	// fadds f0,f0,f13
	f0.f64 = double(float(f0.f64 + ctx.f13.f64));
	// fmuls f0,f0,f1
	f0.f64 = double(float(f0.f64 * ctx.f1.f64));
	// fmadds f0,f0,f12,f11
	f0.f64 = double(float(f0.f64 * ctx.f12.f64 + ctx.f11.f64));
	// stfs f0,0(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 0, temp.u32);
	// stfs f13,0(r4)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r4.u32 + 0, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82136F00"))) PPC_WEAK_FUNC(sub_82136F00);
PPC_FUNC_IMPL(__imp__sub_82136F00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// ble cr6,0x82136f38
	if (!cr6.getGT()) goto loc_82136F38;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
loc_82136F20:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8210c778
	sub_8210C778(ctx, base);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82136f20
	if (!cr6.getEQ()) goto loc_82136F20;
loc_82136F38:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82136F40"))) PPC_WEAK_FUNC(sub_82136F40);
PPC_FUNC_IMPL(__imp__sub_82136F40) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r3,-28
	r11.s64 = ctx.r3.s64 + -28;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82136F50"))) PPC_WEAK_FUNC(sub_82136F50);
PPC_FUNC_IMPL(__imp__sub_82136F50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32033
	r11.s64 = -2099314688;
	// rlwinm r10,r3,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,-11456
	r11.s64 = r11.s64 + -11456;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r11,-16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -16);
	// rlwinm r3,r11,30,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82136F70"))) PPC_WEAK_FUNC(sub_82136F70);
PPC_FUNC_IMPL(__imp__sub_82136F70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32033
	r11.s64 = -2099314688;
	// rlwinm r10,r3,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,-11456
	r11.s64 = r11.s64 + -11456;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lhz r3,-16(r11)
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + -16);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82136f94
	if (cr6.getEQ()) goto loc_82136F94;
	// b 0x82136ad8
	sub_82136AD8(ctx, base);
	return;
loc_82136F94:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45096
	ctx.r3.u64 = ctx.r3.u64 | 45096;
	// b 0x82136ad8
	sub_82136AD8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82136FA0"))) PPC_WEAK_FUNC(sub_82136FA0);
PPC_FUNC_IMPL(__imp__sub_82136FA0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// addi r11,r11,13080
	r11.s64 = r11.s64 + 13080;
	// lbzx r11,r11,r31
	r11.u64 = PPC_LOAD_U8(r11.u32 + r31.u32);
	// srw r11,r11,r10
	r11.u64 = ctx.r10.u8 & 0x20 ? 0 : (r11.u32 >> (ctx.r10.u8 & 0x3F));
	// clrlwi r3,r11,31
	ctx.r3.u64 = r11.u32 & 0x1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82136FE8"))) PPC_WEAK_FUNC(sub_82136FE8);
PPC_FUNC_IMPL(__imp__sub_82136FE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r19{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-11456
	r11.s64 = r11.s64 + -11456;
	// rlwinm r10,r31,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r29,-16(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + -16);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// rlwinm r11,r29,0,27,27
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x10;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r27,1
	r27.s64 = 1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82137064
	if (!cr6.getEQ()) goto loc_82137064;
	// rlwinm r11,r29,0,26,26
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x20;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r11,r11,13080
	r11.s64 = r11.s64 + 13080;
	// bne cr6,0x82137058
	if (!cr6.getEQ()) goto loc_82137058;
	// lbzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + r31.u32);
	// slw r10,r27,r28
	ctx.r10.u64 = r28.u8 & 0x20 ? 0 : (r27.u32 << (r28.u8 & 0x3F));
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// b 0x82137060
	goto loc_82137060;
loc_82137058:
	// slw r10,r27,r30
	ctx.r10.u64 = r30.u8 & 0x20 ? 0 : (r27.u32 << (r30.u8 & 0x3F));
	// addi r10,r10,255
	ctx.r10.s64 = ctx.r10.s64 + 255;
loc_82137060:
	// stbx r10,r11,r31
	PPC_STORE_U8(r11.u32 + r31.u32, ctx.r10.u8);
loc_82137064:
	// addi r11,r31,-1
	r11.s64 = r31.s64 + -1;
	// cmplwi cr6,r11,73
	cr6.compare<uint32_t>(r11.u32, 73, xer);
	// bgt cr6,0x8213794c
	if (cr6.getGT()) goto loc_8213794C;
	// lis r12,-32237
	r12.s64 = -2112684032;
	// addi r12,r12,28808
	r12.s64 = r12.s64 + 28808;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_821371B0;
	case 1:
		goto loc_821371C0;
	case 2:
		goto loc_821371F0;
	case 3:
		goto loc_82137220;
	case 4:
		goto loc_82137958;
	case 5:
		goto loc_82137240;
	case 6:
		goto loc_82137958;
	case 7:
		goto loc_821372D0;
	case 8:
		goto loc_8213732C;
	case 9:
		goto loc_82137388;
	case 10:
		goto loc_821373B8;
	case 11:
		goto loc_821373D4;
	case 12:
		goto loc_821373F0;
	case 13:
		goto loc_821374A4;
	case 14:
		goto loc_821374F4;
	case 15:
		goto loc_82137510;
	case 16:
		goto loc_8213756C;
	case 17:
		goto loc_8213759C;
	case 18:
		goto loc_821375B8;
	case 19:
		goto loc_821375E8;
	case 20:
		goto loc_82137618;
	case 21:
		goto loc_82137648;
	case 22:
		goto loc_82137958;
	case 23:
		goto loc_82137668;
	case 24:
		goto loc_82137958;
	case 25:
		goto loc_82137958;
	case 26:
		goto loc_82137698;
	case 27:
		goto loc_82137958;
	case 28:
		goto loc_821376D0;
	case 29:
		goto loc_8213770C;
	case 30:
		goto loc_82137748;
	case 31:
		goto loc_82137784;
	case 32:
		goto loc_821377C0;
	case 33:
		goto loc_82137848;
	case 34:
		goto loc_82137870;
	case 35:
		goto loc_82137870;
	case 36:
		goto loc_82137870;
	case 37:
		goto loc_82137870;
	case 38:
		goto loc_82137870;
	case 39:
		goto loc_82137870;
	case 40:
		goto loc_82137870;
	case 41:
		goto loc_82137870;
	case 42:
		goto loc_82137870;
	case 43:
		goto loc_82137870;
	case 44:
		goto loc_82137870;
	case 45:
		goto loc_82137870;
	case 46:
		goto loc_82137870;
	case 47:
		goto loc_82137870;
	case 48:
		goto loc_82137870;
	case 49:
		goto loc_82137870;
	case 50:
		goto loc_82137870;
	case 51:
		goto loc_82137870;
	case 52:
		goto loc_82137870;
	case 53:
		goto loc_82137870;
	case 54:
		goto loc_821378B4;
	case 55:
		goto loc_821378B4;
	case 56:
		goto loc_821378B4;
	case 57:
		goto loc_821378B4;
	case 58:
		goto loc_821378B4;
	case 59:
		goto loc_821378B4;
	case 60:
		goto loc_821378B4;
	case 61:
		goto loc_821378B4;
	case 62:
		goto loc_821378B4;
	case 63:
		goto loc_821378B4;
	case 64:
		goto loc_821378B4;
	case 65:
		goto loc_821378B4;
	case 66:
		goto loc_821378B4;
	case 67:
		goto loc_821378B4;
	case 68:
		goto loc_821378B4;
	case 69:
		goto loc_821378B4;
	case 70:
		goto loc_821378B4;
	case 71:
		goto loc_821378B4;
	case 72:
		goto loc_821378B4;
	case 73:
		goto loc_821378B4;
	default:
		__builtin_unreachable();
	}
	// lwz r16,29104(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29104);
	// lwz r16,29120(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29120);
	// lwz r16,29168(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29168);
	// lwz r16,29216(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29216);
	// lwz r16,31064(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31064);
	// lwz r16,29248(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29248);
	// lwz r16,31064(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31064);
	// lwz r16,29392(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29392);
	// lwz r16,29484(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29484);
	// lwz r16,29576(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29576);
	// lwz r16,29624(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29624);
	// lwz r16,29652(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29652);
	// lwz r16,29680(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29680);
	// lwz r16,29860(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29860);
	// lwz r16,29940(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29940);
	// lwz r16,29968(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 29968);
	// lwz r16,30060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30060);
	// lwz r16,30108(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30108);
	// lwz r16,30136(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30136);
	// lwz r16,30184(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30184);
	// lwz r16,30232(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30232);
	// lwz r16,30280(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30280);
	// lwz r16,31064(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31064);
	// lwz r16,30312(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30312);
	// lwz r16,31064(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31064);
	// lwz r16,31064(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31064);
	// lwz r16,30360(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30360);
	// lwz r16,31064(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31064);
	// lwz r16,30416(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30416);
	// lwz r16,30476(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30476);
	// lwz r16,30536(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30536);
	// lwz r16,30596(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30596);
	// lwz r16,30656(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30656);
	// lwz r16,30792(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30792);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30832(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30832);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
	// lwz r16,30900(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 30900);
loc_821371B0:
	// bl 0x820eb958
	sub_820EB958(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821371C0:
	// bl 0x820b3d58
	sub_820B3D58(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45071
	ctx.r3.u64 = ctx.r3.u64 | 45071;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820b3d48
	sub_820B3D48(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821371F0:
	// bl 0x820c0ba0
	sub_820C0BA0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45072
	ctx.r3.u64 = ctx.r3.u64 | 45072;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820c0b90
	sub_820C0B90(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137220:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45073
	ctx.r3.u64 = ctx.r3.u64 | 45073;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// bl 0x820aaad0
	sub_820AAAD0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137240:
	// li r29,0
	r29.s64 = 0;
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// ble cr6,0x82137958
	if (!cr6.getGT()) goto loc_82137958;
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x82137958
	if (!cr6.getGT()) goto loc_82137958;
loc_82137258:
	// cmpw cr6,r31,r28
	cr6.compare<int32_t>(r31.s32, r28.s32, xer);
	// beq cr6,0x82137280
	if (cr6.getEQ()) goto loc_82137280;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// bl 0x820b3d58
	sub_820B3D58(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82137280
	if (cr6.getEQ()) goto loc_82137280;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820b3d48
	sub_820B3D48(ctx, base);
	// mr r29,r27
	r29.u64 = r27.u64;
loc_82137280:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r31,r30
	cr6.compare<int32_t>(r31.s32, r30.s32, xer);
	// blt cr6,0x82137258
	if (cr6.getLT()) goto loc_82137258;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x82137958
	if (cr6.getEQ()) goto loc_82137958;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r8,468
	ctx.r8.s64 = 468;
	// addi r7,r11,23040
	ctx.r7.s64 = r11.s64 + 23040;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821372D0:
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f31,2776(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	f31.f64 = double(temp.f32);
	// lfs f0,8380(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8380);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// beq cr6,0x821372f8
	if (cr6.getEQ()) goto loc_821372F8;
	// lfs f0,484(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x82137958
	if (!cr6.getLT()) goto loc_82137958;
loc_821372F8:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45074
	ctx.r3.u64 = ctx.r3.u64 | 45074;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f31,484(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 484, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,3060(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f0,8380(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8380, temp.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_8213732C:
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f31,2776(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	f31.f64 = double(temp.f32);
	// lfs f0,8384(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8384);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// beq cr6,0x82137354
	if (cr6.getEQ()) goto loc_82137354;
	// lfs f0,488(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 488);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x82137958
	if (!cr6.getLT()) goto loc_82137958;
loc_82137354:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45075
	ctx.r3.u64 = ctx.r3.u64 | 45075;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f31,488(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 488, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,3060(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3060);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f0,8384(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8384, temp.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137388:
	// bl 0x820b3d78
	sub_820B3D78(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82137958
	if (cr6.getEQ()) goto loc_82137958;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45076
	ctx.r3.u64 = ctx.r3.u64 | 45076;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820b3d68
	sub_820B3D68(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821373B8:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45078
	ctx.r3.u64 = ctx.r3.u64 | 45078;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821373D4:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45079
	ctx.r3.u64 = ctx.r3.u64 | 45079;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821373F0:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// li r3,18
	ctx.r3.s64 = 18;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r3,22
	ctx.r3.s64 = 22;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,19
	ctx.r3.s64 = 19;
	// add r31,r11,r31
	r31.u64 = r11.u64 + r31.u64;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,20
	ctx.r3.s64 = 20;
	// add r31,r11,r31
	r31.u64 = r11.u64 + r31.u64;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,21
	ctx.r3.s64 = 21;
	// add r31,r11,r31
	r31.u64 = r11.u64 + r31.u64;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,12
	ctx.r3.s64 = 12;
	// add r31,r11,r31
	r31.u64 = r11.u64 + r31.u64;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// li r3,13
	ctx.r3.s64 = 13;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,13
	ctx.r3.s64 = 13;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// ble cr6,0x82137958
	if (!cr6.getGT()) goto loc_82137958;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45080
	ctx.r3.u64 = ctx.r3.u64 | 45080;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821374A4:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-908(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -908);
	// lfs f13,100(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45081
	ctx.r3.u64 = ctx.r3.u64 | 45081;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f0.f64 = double(temp.f32);
	// lwz r11,-908(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -908);
	// stfs f0,100(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 100, temp.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821374F4:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45082
	ctx.r3.u64 = ctx.r3.u64 | 45082;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137510:
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f31,2776(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	f31.f64 = double(temp.f32);
	// lfs f0,8380(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 8380);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// beq cr6,0x82137538
	if (cr6.getEQ()) goto loc_82137538;
	// lfs f0,484(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x82137958
	if (!cr6.getLT()) goto loc_82137958;
loc_82137538:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45083
	ctx.r3.u64 = ctx.r3.u64 | 45083;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f31,484(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 484, temp.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2952(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2952);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stfs f0,8380(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8380, temp.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_8213756C:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// li r3,18
	ctx.r3.s64 = 18;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_8213759C:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// li r3,22
	ctx.r3.s64 = 22;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821375B8:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// li r3,19
	ctx.r3.s64 = 19;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r3,13
	ctx.r3.s64 = 13;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,13
	ctx.r3.s64 = 13;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821375E8:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// li r3,20
	ctx.r3.s64 = 20;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137618:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// li r3,21
	ctx.r3.s64 = 21;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137648:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,14116(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14116);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,12020(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12020);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b2290
	sub_820B2290(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137668:
	// bl 0x821393a0
	sub_821393A0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45085
	ctx.r3.u64 = ctx.r3.u64 | 45085;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x821393b0
	sub_821393B0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137698:
	// bl 0x8211e008
	sub_8211E008(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,12900(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12900);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x82137958
	if (!cr6.getGT()) goto loc_82137958;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45106
	ctx.r3.u64 = ctx.r3.u64 | 45106;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8211df88
	sub_8211DF88(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821376D0:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// li r3,25
	ctx.r3.s64 = 25;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r4,25
	ctx.r4.s64 = 25;
	// li r3,25
	ctx.r3.s64 = 25;
	// bl 0x820c0ea0
	sub_820C0EA0(ctx, base);
	// li r3,6
	ctx.r3.s64 = 6;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,6
	ctx.r3.s64 = 6;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_8213770C:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// li r3,24
	ctx.r3.s64 = 24;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r4,24
	ctx.r4.s64 = 24;
	// li r3,24
	ctx.r3.s64 = 24;
	// bl 0x820c0ea0
	sub_820C0EA0(ctx, base);
	// li r3,11
	ctx.r3.s64 = 11;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,11
	ctx.r3.s64 = 11;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137748:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// li r3,14
	ctx.r3.s64 = 14;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r4,14
	ctx.r4.s64 = 14;
	// li r3,14
	ctx.r3.s64 = 14;
	// bl 0x820c0ea0
	sub_820C0EA0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137784:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// li r3,3
	ctx.r3.s64 = 3;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// li r3,3
	ctx.r3.s64 = 3;
	// bl 0x820c0ea0
	sub_820C0EA0(ctx, base);
	// li r3,10
	ctx.r3.s64 = 10;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,10
	ctx.r3.s64 = 10;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821377C0:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82137828
	if (cr6.getEQ()) goto loc_82137828;
	// li r3,25
	ctx.r3.s64 = 25;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r3,17
	ctx.r3.s64 = 17;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r4,25
	ctx.r4.s64 = 25;
	// li r3,17
	ctx.r3.s64 = 17;
	// bl 0x820c0ea0
	sub_820C0EA0(ctx, base);
	// li r3,6
	ctx.r3.s64 = 6;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,6
	ctx.r3.s64 = 6;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// li r3,3
	ctx.r3.s64 = 3;
	// bl 0x820a55a8
	sub_820A55A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,3
	ctx.r3.s64 = 3;
	// bl 0x820aa8e8
	sub_820AA8E8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137828:
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r4,2
	ctx.r4.s64 = 2;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x820c0ea0
	sub_820C0EA0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137848:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// li r3,22
	ctx.r3.s64 = 22;
	// bl 0x820c0e00
	sub_820C0E00(ctx, base);
	// li r4,22
	ctx.r4.s64 = 22;
	// li r3,22
	ctx.r3.s64 = 22;
	// bl 0x820c0ea0
	sub_820C0EA0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_82137870:
	// addi r31,r31,-35
	r31.s64 = r31.s64 + -35;
	// bl 0x820e9130
	sub_820E9130(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820e9990
	sub_820E9990(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r8,786
	ctx.r8.s64 = 786;
	// addi r7,r11,23040
	ctx.r7.s64 = r11.s64 + 23040;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_821378B4:
	// addi r30,r31,-55
	r30.s64 = r31.s64 + -55;
	// li r29,0
	r29.s64 = 0;
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x821378f0
	if (!cr6.getGT()) goto loc_821378F0;
loc_821378C8:
	// bl 0x820e9130
	sub_820E9130(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x820e96c8
	sub_820E96C8(ctx, base);
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// bne cr6,0x821378e4
	if (!cr6.getEQ()) goto loc_821378E4;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
loc_821378E4:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r31,r30
	cr6.compare<int32_t>(r31.s32, r30.s32, xer);
	// blt cr6,0x821378c8
	if (cr6.getLT()) goto loc_821378C8;
loc_821378F0:
	// addi r31,r30,-1
	r31.s64 = r30.s64 + -1;
	// cmpw cr6,r29,r31
	cr6.compare<int32_t>(r29.s32, r31.s32, xer);
	// bne cr6,0x82137958
	if (!cr6.getEQ()) goto loc_82137958;
	// lis r11,1525
	r11.s64 = 99942400;
	// ori r30,r11,57599
	r30.u64 = r11.u64 | 57599;
	// bl 0x820e9130
	sub_820E9130(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// bl 0x820e9910
	sub_820E9910(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r8,824
	ctx.r8.s64 = 824;
	// addi r7,r11,23040
	ctx.r7.s64 = r11.s64 + 23040;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
loc_8213794C:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r3,r11,23020
	ctx.r3.s64 = r11.s64 + 23020;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82137958:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82137968"))) PPC_WEAK_FUNC(sub_82137968);
PPC_FUNC_IMPL(__imp__sub_82137968) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r19{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-11456
	r11.s64 = r11.s64 + -11456;
	// rlwinm r10,r31,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r30,-16(r11)
	r30.u64 = PPC_LOAD_U32(r11.u32 + -16);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// rlwinm r11,r30,0,27,27
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x10;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821379dc
	if (!cr6.getEQ()) goto loc_821379DC;
	// rlwinm r11,r30,0,26,26
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x20;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r11,r11,13080
	r11.s64 = r11.s64 + 13080;
	// bne cr6,0x821379d4
	if (!cr6.getEQ()) goto loc_821379D4;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbzx r9,r11,r31
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + r31.u32);
	// slw r10,r10,r29
	ctx.r10.u64 = r29.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r29.u8 & 0x3F));
	// andc r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 & ~ctx.r10.u64;
	// b 0x821379d8
	goto loc_821379D8;
loc_821379D4:
	// li r10,0
	ctx.r10.s64 = 0;
loc_821379D8:
	// stbx r10,r11,r31
	PPC_STORE_U8(r11.u32 + r31.u32, ctx.r10.u8);
loc_821379DC:
	// addi r11,r31,-1
	r11.s64 = r31.s64 + -1;
	// cmplwi cr6,r11,73
	cr6.compare<uint32_t>(r11.u32, 73, xer);
	// bgt cr6,0x82137cdc
	if (cr6.getGT()) goto loc_82137CDC;
	// lis r12,-32237
	r12.s64 = -2112684032;
	// addi r12,r12,31232
	r12.s64 = r12.s64 + 31232;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82137CE8;
	case 1:
		goto loc_82137B28;
	case 2:
		goto loc_82137B58;
	case 3:
		goto loc_82137CE8;
	case 4:
		goto loc_82137CE8;
	case 5:
		goto loc_82137CE8;
	case 6:
		goto loc_82137CE8;
	case 7:
		goto loc_82137CE8;
	case 8:
		goto loc_82137CE8;
	case 9:
		goto loc_82137B88;
	case 10:
		goto loc_82137BB8;
	case 11:
		goto loc_82137BD4;
	case 12:
		goto loc_82137CE8;
	case 13:
		goto loc_82137BF0;
	case 14:
		goto loc_82137C38;
	case 15:
		goto loc_82137CE8;
	case 16:
		goto loc_82137CE8;
	case 17:
		goto loc_82137CE8;
	case 18:
		goto loc_82137CE8;
	case 19:
		goto loc_82137CE8;
	case 20:
		goto loc_82137CE8;
	case 21:
		goto loc_82137C54;
	case 22:
		goto loc_82137CE8;
	case 23:
		goto loc_82137C74;
	case 24:
		goto loc_82137CE8;
	case 25:
		goto loc_82137CE8;
	case 26:
		goto loc_82137CA4;
	case 27:
		goto loc_82137CE8;
	case 28:
		goto loc_82137CE8;
	case 29:
		goto loc_82137CE8;
	case 30:
		goto loc_82137CE8;
	case 31:
		goto loc_82137CE8;
	case 32:
		goto loc_82137CE8;
	case 33:
		goto loc_82137CE8;
	case 34:
		goto loc_82137CE8;
	case 35:
		goto loc_82137CE8;
	case 36:
		goto loc_82137CE8;
	case 37:
		goto loc_82137CE8;
	case 38:
		goto loc_82137CE8;
	case 39:
		goto loc_82137CE8;
	case 40:
		goto loc_82137CE8;
	case 41:
		goto loc_82137CE8;
	case 42:
		goto loc_82137CE8;
	case 43:
		goto loc_82137CE8;
	case 44:
		goto loc_82137CE8;
	case 45:
		goto loc_82137CE8;
	case 46:
		goto loc_82137CE8;
	case 47:
		goto loc_82137CE8;
	case 48:
		goto loc_82137CE8;
	case 49:
		goto loc_82137CE8;
	case 50:
		goto loc_82137CE8;
	case 51:
		goto loc_82137CE8;
	case 52:
		goto loc_82137CE8;
	case 53:
		goto loc_82137CE8;
	case 54:
		goto loc_82137CE8;
	case 55:
		goto loc_82137CE8;
	case 56:
		goto loc_82137CE8;
	case 57:
		goto loc_82137CE8;
	case 58:
		goto loc_82137CE8;
	case 59:
		goto loc_82137CE8;
	case 60:
		goto loc_82137CE8;
	case 61:
		goto loc_82137CE8;
	case 62:
		goto loc_82137CE8;
	case 63:
		goto loc_82137CE8;
	case 64:
		goto loc_82137CE8;
	case 65:
		goto loc_82137CE8;
	case 66:
		goto loc_82137CE8;
	case 67:
		goto loc_82137CE8;
	case 68:
		goto loc_82137CE8;
	case 69:
		goto loc_82137CE8;
	case 70:
		goto loc_82137CE8;
	case 71:
		goto loc_82137CE8;
	case 72:
		goto loc_82137CE8;
	case 73:
		goto loc_82137CE8;
	default:
		__builtin_unreachable();
	}
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31528(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31528);
	// lwz r16,31576(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31576);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31624(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31624);
	// lwz r16,31672(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31672);
	// lwz r16,31700(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31700);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31728(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31728);
	// lwz r16,31800(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31800);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31828(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31828);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31860(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31860);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31908(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31908);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
	// lwz r16,31976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + 31976);
loc_82137B28:
	// bl 0x820b3d58
	sub_820B3D58(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82137ce8
	if (cr6.getEQ()) goto loc_82137CE8;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45086
	ctx.r3.u64 = ctx.r3.u64 | 45086;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820b3d48
	sub_820B3D48(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82137B58:
	// bl 0x820c0ba0
	sub_820C0BA0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82137ce8
	if (cr6.getEQ()) goto loc_82137CE8;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45087
	ctx.r3.u64 = ctx.r3.u64 | 45087;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820c0b90
	sub_820C0B90(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82137B88:
	// bl 0x820b3d78
	sub_820B3D78(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82137ce8
	if (!cr6.getEQ()) goto loc_82137CE8;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45088
	ctx.r3.u64 = ctx.r3.u64 | 45088;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820b3d68
	sub_820B3D68(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82137BB8:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45090
	ctx.r3.u64 = ctx.r3.u64 | 45090;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82137BD4:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45091
	ctx.r3.u64 = ctx.r3.u64 | 45091;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82137BF0:
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x82137ce8
	if (!cr6.getEQ()) goto loc_82137CE8;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-908(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -908);
	// lfs f0,100(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 100);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// beq cr6,0x82137ce8
	if (cr6.getEQ()) goto loc_82137CE8;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45092
	ctx.r3.u64 = ctx.r3.u64 | 45092;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// lwz r11,-908(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -908);
	// stfs f31,100(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 100, temp.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82137C38:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45093
	ctx.r3.u64 = ctx.r3.u64 | 45093;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82137C54:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f2,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f2.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f1,12020(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12020);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x820b2290
	sub_820B2290(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82137C74:
	// bl 0x821393a0
	sub_821393A0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82137ce8
	if (cr6.getEQ()) goto loc_82137CE8;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45095
	ctx.r3.u64 = ctx.r3.u64 | 45095;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x821393b0
	sub_821393B0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82137CA4:
	// bl 0x8211e008
	sub_8211E008(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// bge cr6,0x82137ce8
	if (!cr6.getLT()) goto loc_82137CE8;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,45107
	ctx.r3.u64 = ctx.r3.u64 | 45107;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// bl 0x820b4260
	sub_820B4260(ctx, base);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8211df88
	sub_8211DF88(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
loc_82137CDC:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r3,r11,23020
	ctx.r3.s64 = r11.s64 + 23020;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82137CE8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82137CF8"))) PPC_WEAK_FUNC(sub_82137CF8);
PPC_FUNC_IMPL(__imp__sub_82137CF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// li r28,0
	r28.s64 = 0;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// ble cr6,0x82137d94
	if (!cr6.getGT()) goto loc_82137D94;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// addi r29,r11,-11456
	r29.s64 = r11.s64 + -11456;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r27,r11,13080
	r27.s64 = r11.s64 + 13080;
loc_82137D30:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// li r31,1
	r31.s64 = 1;
	// addi r30,r29,12
	r30.s64 = r29.s64 + 12;
loc_82137D40:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r11,r11,0,25,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82137d74
	if (cr6.getEQ()) goto loc_82137D74;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// lbzx r10,r31,r27
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + r27.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// srw r11,r10,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (ctx.r10.u32 >> (r11.u8 & 0x3F));
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82137d74
	if (cr6.getEQ()) goto loc_82137D74;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82137968
	sub_82137968(ctx, base);
loc_82137D74:
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// addi r11,r29,1292
	r11.s64 = r29.s64 + 1292;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x82137d40
	if (cr6.getLT()) goto loc_82137D40;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// cmpw cr6,r28,r26
	cr6.compare<int32_t>(r28.s32, r26.s32, xer);
	// blt cr6,0x82137d30
	if (cr6.getLT()) goto loc_82137D30;
loc_82137D94:
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82137DA8"))) PPC_WEAK_FUNC(sub_82137DA8);
PPC_FUNC_IMPL(__imp__sub_82137DA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8209ec18
	sub_8209EC18(ctx, base);
	// cmpwi cr6,r3,90
	cr6.compare<int32_t>(ctx.r3.s32, 90, xer);
	// bne cr6,0x82137dc8
	if (!cr6.getEQ()) goto loc_82137DC8;
	// li r25,1
	r25.s64 = 1;
	// b 0x82137ddc
	goto loc_82137DDC;
loc_82137DC8:
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// li r25,2
	r25.s64 = 2;
	// beq cr6,0x82137ddc
	if (cr6.getEQ()) goto loc_82137DDC;
	// li r25,4
	r25.s64 = 4;
loc_82137DDC:
	// lis r11,-32033
	r11.s64 = -2099314688;
	// addi r11,r11,-11456
	r11.s64 = r11.s64 + -11456;
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82137f24
	if (cr6.getEQ()) goto loc_82137F24;
	// addi r29,r11,1
	r29.s64 = r11.s64 + 1;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lis r27,-32014
	r27.s64 = -2098069504;
	// addi r26,r11,13080
	r26.s64 = r11.s64 + 13080;
	// lis r11,26214
	r11.s64 = 1717960704;
	// li r28,0
	r28.s64 = 0;
	// ori r31,r11,26215
	r31.u64 = r11.u64 | 26215;
	// lwz r5,-1364(r27)
	ctx.r5.u64 = PPC_LOAD_U32(r27.u32 + -1364);
loc_82137E10:
	// lbz r7,0(r29)
	ctx.r7.u64 = PPC_LOAD_U8(r29.u32 + 0);
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x82137f14
	if (cr6.getEQ()) goto loc_82137F14;
	// lbz r11,4997(r5)
	r11.u64 = PPC_LOAD_U8(ctx.r5.u32 + 4997);
	// cmplw cr6,r11,r7
	cr6.compare<uint32_t>(r11.u32, ctx.r7.u32, xer);
	// blt cr6,0x82137f14
	if (cr6.getLT()) goto loc_82137F14;
	// lwz r11,11(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 11);
	// and r11,r25,r11
	r11.u64 = r25.u64 & r11.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82137f14
	if (cr6.getEQ()) goto loc_82137F14;
	// lbz r11,4996(r5)
	r11.u64 = PPC_LOAD_U8(ctx.r5.u32 + 4996);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// subf r11,r7,r11
	r11.s64 = r11.s64 - ctx.r7.s64;
	// addi r10,r11,20
	ctx.r10.s64 = r11.s64 + 20;
	// mr r11,r28
	r11.u64 = r28.u64;
	// mulhw r9,r10,r31
	ctx.r9.s64 = (int64_t(ctx.r10.s32) * int64_t(r31.s32)) >> 32;
	// srawi r9,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 3;
	// rlwinm r8,r9,1,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x1;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// ble cr6,0x82137ec0
	if (!cr6.getGT()) goto loc_82137EC0;
	// lwz r8,3(r29)
	ctx.r8.u64 = PPC_LOAD_U32(r29.u32 + 3);
loc_82137E74:
	// addi r9,r10,1229
	ctx.r9.s64 = ctx.r10.s64 + 1229;
	// lhz r6,0(r8)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r9,r5
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r5.u32);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82137ec0
	if (!cr6.getEQ()) goto loc_82137EC0;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mulhw r9,r10,r31
	ctx.r9.s64 = (int64_t(ctx.r10.s32) * int64_t(r31.s32)) >> 32;
	// srawi r9,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 3;
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// rlwinm r6,r9,1,31,31
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x1;
	// cmpw cr6,r11,r7
	cr6.compare<int32_t>(r11.s32, ctx.r7.s32, xer);
	// add r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 + ctx.r6.u64;
	// rlwinm r6,r9,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 + ctx.r6.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// blt cr6,0x82137e74
	if (cr6.getLT()) goto loc_82137E74;
loc_82137EC0:
	// cmpw cr6,r11,r7
	cr6.compare<int32_t>(r11.s32, ctx.r7.s32, xer);
	// bne cr6,0x82137f14
	if (!cr6.getEQ()) goto loc_82137F14;
	// stb r28,4997(r5)
	PPC_STORE_U8(ctx.r5.u32 + 4997, r28.u8);
	// lbz r30,-1(r29)
	r30.u64 = PPC_LOAD_U8(r29.u32 + -1);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// lbzx r10,r30,r26
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + r26.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// srw r11,r10,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (ctx.r10.u32 >> (r11.u8 & 0x3F));
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82137f08
	if (cr6.getEQ()) goto loc_82137F08;
	// lwz r11,11(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 11);
	// rlwinm r11,r11,0,27,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82137f08
	if (!cr6.getEQ()) goto loc_82137F08;
	// lbz r3,-1(r29)
	ctx.r3.u64 = PPC_LOAD_U8(r29.u32 + -1);
	// bl 0x82137968
	sub_82137968(ctx, base);
	// b 0x82137f10
	goto loc_82137F10;
loc_82137F08:
	// lbz r3,-1(r29)
	ctx.r3.u64 = PPC_LOAD_U8(r29.u32 + -1);
	// bl 0x82136fe8
	sub_82136FE8(ctx, base);
loc_82137F10:
	// lwz r5,-1364(r27)
	ctx.r5.u64 = PPC_LOAD_U32(r27.u32 + -1364);
loc_82137F14:
	// addi r29,r29,16
	r29.s64 = r29.s64 + 16;
	// lbz r11,-1(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + -1);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82137e10
	if (!cr6.getEQ()) goto loc_82137E10;
loc_82137F24:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82137F30"))) PPC_WEAK_FUNC(sub_82137F30);
PPC_FUNC_IMPL(__imp__sub_82137F30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820ca110
	sub_820CA110(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,-1
	cr6.compare<int32_t>(r31.s32, -1, xer);
	// beq cr6,0x82138074
	if (cr6.getEQ()) goto loc_82138074;
	// li r30,-1
	r30.s64 = -1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x820a0548
	sub_820A0548(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r30,r11,0,26,27
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x30;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// not r31,r30
	r31.u64 = ~r30.u64;
	// and r29,r31,r11
	r29.u64 = r31.u64 & r11.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// and r8,r3,r31
	ctx.r8.u64 = ctx.r3.u64 & r31.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x82138070
	if (cr6.getEQ()) goto loc_82138070;
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
	// li r10,0
	ctx.r10.s64 = 0;
loc_82137F8C:
	// clrlwi r9,r11,31
	ctx.r9.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82137f9c
	if (cr6.getEQ()) goto loc_82137F9C;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_82137F9C:
	// rlwinm r11,r11,31,1,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82137f8c
	if (!cr6.getEQ()) goto loc_82137F8C;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x82138060
	if (!cr6.getEQ()) goto loc_82138060;
	// mr r11,r29
	r11.u64 = r29.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x82138060
	if (cr6.getEQ()) goto loc_82138060;
loc_82137FC0:
	// clrlwi r9,r11,31
	ctx.r9.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82137fd0
	if (cr6.getEQ()) goto loc_82137FD0;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_82137FD0:
	// rlwinm r11,r11,31,1,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82137fc0
	if (!cr6.getEQ()) goto loc_82137FC0;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bne cr6,0x82138060
	if (!cr6.getEQ()) goto loc_82138060;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// or r8,r30,r8
	ctx.r8.u64 = r30.u64 | ctx.r8.u64;
	// lis r7,26214
	ctx.r7.s64 = 1717960704;
	// ori r7,r7,26215
	ctx.r7.u64 = ctx.r7.u64 | 26215;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lbz r9,4996(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4996);
	// addi r9,r9,1229
	ctx.r9.s64 = ctx.r9.s64 + 1229;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r8,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, ctx.r8.u32);
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lbz r9,4996(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4996);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// mulhw r8,r9,r7
	ctx.r8.s64 = (int64_t(ctx.r9.s32) * int64_t(ctx.r7.s32)) >> 32;
	// srawi r8,r8,3
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 3;
	// rlwinm r7,r8,1,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0x1;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// rlwinm r7,r8,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// stb r9,4996(r10)
	PPC_STORE_U8(ctx.r10.u32 + 4996, ctx.r9.u8);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lbz r10,4997(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 4997);
	// cmplwi cr6,r10,20
	cr6.compare<uint32_t>(ctx.r10.u32, 20, xer);
	// bge cr6,0x82138070
	if (!cr6.getLT()) goto loc_82138070;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stb r10,4997(r11)
	PPC_STORE_U8(r11.u32 + 4997, ctx.r10.u8);
	// bl 0x82137da8
	sub_82137DA8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_82138060:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stb r10,4997(r11)
	PPC_STORE_U8(r11.u32 + 4997, ctx.r10.u8);
loc_82138070:
	// bl 0x82137da8
	sub_82137DA8(ctx, base);
loc_82138074:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82138080"))) PPC_WEAK_FUNC(sub_82138080);
PPC_FUNC_IMPL(__imp__sub_82138080) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r11,r11,-11456
	r11.s64 = r11.s64 + -11456;
	// rlwinm r10,r29,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r31,-16(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + -16);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// beq cr6,0x821380d8
	if (cr6.getEQ()) goto loc_821380D8;
	// rlwinm r11,r31,0,29,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82138118
	if (cr6.getEQ()) goto loc_82138118;
	// rlwinm r11,r31,0,26,26
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x20;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821380e8
	if (cr6.getEQ()) goto loc_821380E8;
loc_821380D8:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82136fe8
	sub_82136FE8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
loc_821380E8:
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x82138110
	if (!cr6.getGT()) goto loc_82138110;
loc_821380F4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82136fe8
	sub_82136FE8(ctx, base);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r31,r30
	cr6.compare<int32_t>(r31.s32, r30.s32, xer);
	// blt cr6,0x821380f4
	if (cr6.getLT()) goto loc_821380F4;
loc_82138110:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
loc_82138118:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82138120"))) PPC_WEAK_FUNC(sub_82138120);
PPC_FUNC_IMPL(__imp__sub_82138120) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// bl 0x82110c68
	sub_82110C68(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// beq cr6,0x8213816c
	if (cr6.getEQ()) goto loc_8213816C;
	// lfs f2,8(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210ece0
	sub_8210ECE0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213816c
	if (cr6.getEQ()) goto loc_8213816C;
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x821381dc
	goto loc_821381DC;
loc_8213816C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// lfs f0,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	f0.f64 = double(temp.f32);
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// stfs f0,84(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f0,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	f0.f64 = double(temp.f32);
	// lfs f1,2688(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	ctx.f1.f64 = double(temp.f32);
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x82111ca0
	sub_82111CA0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// beq cr6,0x821381d0
	if (cr6.getEQ()) goto loc_821381D0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lfs f4,8(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	ctx.f4.f64 = double(temp.f32);
	// lfs f2,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f2.f64 = double(temp.f32);
	// lfs f3,0(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	ctx.f3.f64 = double(temp.f32);
	// lfs f1,80(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8210f7c8
	sub_8210F7C8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821381d0
	if (cr6.getEQ()) goto loc_821381D0;
	// li r3,2
	ctx.r3.s64 = 2;
	// b 0x821381dc
	goto loc_821381DC;
loc_821381D0:
	// li r11,0
	r11.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
loc_821381DC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821381F8"))) PPC_WEAK_FUNC(sub_821381F8);
PPC_FUNC_IMPL(__imp__sub_821381F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r10,r10,928
	ctx.r10.s64 = ctx.r10.s64 + 928;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// blt cr6,0x8213823c
	if (cr6.getLT()) goto loc_8213823C;
loc_82138210:
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpw cr6,r10,r4
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r4.s32, xer);
	// beq cr6,0x82138244
	if (cr6.getEQ()) goto loc_82138244;
	// addi r3,r3,4
	ctx.r3.s64 = ctx.r3.s64 + 4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x82138210
	if (!cr6.getLT()) goto loc_82138210;
loc_8213823C:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_82138244:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82138250"))) PPC_WEAK_FUNC(sub_82138250);
PPC_FUNC_IMPL(__imp__sub_82138250) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// addi r6,r10,928
	ctx.r6.s64 = ctx.r10.s64 + 928;
loc_8213826C:
	// lwz r10,8(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 8);
	// cmpw cr6,r10,r4
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r4.s32, xer);
	// bne cr6,0x821382c4
	if (!cr6.getEQ()) goto loc_821382C4;
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// lwz r8,4(r6)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// lwz r11,0(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x821382c0
	if (cr6.getLT()) goto loc_821382C0;
loc_8213828C:
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x821382b0
	if (!cr6.getLT()) goto loc_821382B0;
	// addi r10,r4,1
	ctx.r10.s64 = ctx.r4.s64 + 1;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
loc_821382B0:
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// lwz r11,0(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x8213828c
	if (!cr6.getLT()) goto loc_8213828C;
loc_821382C0:
	// li r3,1
	ctx.r3.s64 = 1;
loc_821382C4:
	// addi r7,r7,12
	ctx.r7.s64 = ctx.r7.s64 + 12;
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213826c
	if (!cr6.getEQ()) goto loc_8213826C;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821382D8"))) PPC_WEAK_FUNC(sub_821382D8);
PPC_FUNC_IMPL(__imp__sub_821382D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r9,0(r5)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82138324
	if (cr6.getEQ()) goto loc_82138324;
	// li r9,-1
	ctx.r9.s64 = -1;
loc_82138310:
	// stw r9,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r9.u32);
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x82138310
	if (!cr6.getEQ()) goto loc_82138310;
loc_82138324:
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r4,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r4.u32);
loc_8213832C:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x82138340
	if (!cr6.getEQ()) goto loc_82138340;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x82138358
	if (!cr6.getLT()) goto loc_82138358;
loc_82138340:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82138358
	if (cr6.getEQ()) goto loc_82138358;
	// mr r3,r5
	ctx.r3.u64 = ctx.r5.u64;
	// bl 0x82138250
	sub_82138250(ctx, base);
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// b 0x8213832c
	goto loc_8213832C;
loc_82138358:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82138370"))) PPC_WEAK_FUNC(sub_82138370);
PPC_FUNC_IMPL(__imp__sub_82138370) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x821382d8
	sub_821382D8(ctx, base);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x821383dc
	if (cr6.getEQ()) goto loc_821383DC;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r11,r31
	r11.u64 = r31.u64;
	// addi r4,r10,-1
	ctx.r4.s64 = ctx.r10.s64 + -1;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// blt cr6,0x821383d0
	if (cr6.getLT()) goto loc_821383D0;
loc_821383AC:
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r10,r10,10000
	ctx.r10.s64 = ctx.r10.s64 + 10000;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// bl 0x821381f8
	sub_821381F8(ctx, base);
	// addi r4,r4,-1
	ctx.r4.s64 = ctx.r4.s64 + -1;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// bge cr6,0x821383ac
	if (!cr6.getLT()) goto loc_821383AC;
loc_821383D0:
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// addi r10,r10,10000
	ctx.r10.s64 = ctx.r10.s64 + 10000;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
loc_821383DC:
	// mr r3,r8
	ctx.r3.u64 = ctx.r8.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821383F8"))) PPC_WEAK_FUNC(sub_821383F8);
PPC_FUNC_IMPL(__imp__sub_821383F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lwz r10,928(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 928);
	// blt cr6,0x8213843c
	if (cr6.getLT()) goto loc_8213843C;
loc_8213840C:
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpw cr6,r9,r5
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r5.s32, xer);
	// bne cr6,0x8213842c
	if (!cr6.getEQ()) goto loc_8213842C;
	// lwz r9,12(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmpw cr6,r9,r4
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r4.s32, xer);
	// beq cr6,0x82138444
	if (cr6.getEQ()) goto loc_82138444;
loc_8213842C:
	// addi r3,r3,4
	ctx.r3.s64 = ctx.r3.s64 + 4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x8213840c
	if (!cr6.getLT()) goto loc_8213840C;
loc_8213843C:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_82138444:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82138450"))) PPC_WEAK_FUNC(sub_82138450);
PPC_FUNC_IMPL(__imp__sub_82138450) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r31{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// lis r6,-32013
	ctx.r6.s64 = -2098003968;
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// lwz r9,928(r6)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r6.u32 + 928);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r7,r9
	ctx.r7.u64 = ctx.r9.u64;
	// blt cr6,0x821384f4
	if (cr6.getLT()) goto loc_821384F4;
loc_82138474:
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmpw cr6,r10,r4
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r4.s32, xer);
	// bne cr6,0x821384e4
	if (!cr6.getEQ()) goto loc_821384E4;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821384e4
	if (cr6.getEQ()) goto loc_821384E4;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x821384e4
	if (cr6.getLT()) goto loc_821384E4;
loc_821384A8:
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r31,8(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpw cr6,r31,r5
	cr6.compare<int32_t>(r31.s32, ctx.r5.s32, xer);
	// bne cr6,0x821384d0
	if (!cr6.getEQ()) goto loc_821384D0;
	// lwz r31,12(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x821384d0
	if (!cr6.getLT()) goto loc_821384D0;
	// addi r31,r4,1
	r31.s64 = ctx.r4.s64 + 1;
	// stw r31,12(r11)
	PPC_STORE_U32(r11.u32 + 12, r31.u32);
loc_821384D0:
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x821384a8
	if (!cr6.getLT()) goto loc_821384A8;
	// lwz r9,928(r6)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r6.u32 + 928);
loc_821384E4:
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x82138474
	if (!cr6.getLT()) goto loc_82138474;
loc_821384F4:
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82138500"))) PPC_WEAK_FUNC(sub_82138500);
PPC_FUNC_IMPL(__imp__sub_82138500) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32013
	ctx.r10.s64 = -2098003968;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r10,r10,928
	ctx.r10.s64 = ctx.r10.s64 + 928;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r30,4(r10)
	r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x82138570
	if (cr6.getLT()) goto loc_82138570;
	// li r8,-1
	ctx.r8.s64 = -1;
loc_82138554:
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r8,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r8.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x82138554
	if (!cr6.getLT()) goto loc_82138554;
loc_82138570:
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r4,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r4.u32);
loc_82138578:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bne cr6,0x8213858c
	if (!cr6.getEQ()) goto loc_8213858C;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x821385b8
	if (!cr6.getLT()) goto loc_821385B8;
loc_8213858C:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821385b8
	if (cr6.getEQ()) goto loc_821385B8;
	// lwz r5,8(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r11,r5,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r5,r11
	r11.u64 = ctx.r5.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x82138450
	sub_82138450(ctx, base);
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// b 0x82138578
	goto loc_82138578;
loc_821385B8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_821385C0"))) PPC_WEAK_FUNC(sub_821385C0);
PPC_FUNC_IMPL(__imp__sub_821385C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82138500
	sub_82138500(ctx, base);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// mr r11,r31
	r11.u64 = r31.u64;
	// addi r7,r10,-1
	ctx.r7.s64 = ctx.r10.s64 + -1;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// blt cr6,0x82138660
	if (cr6.getLT()) goto loc_82138660;
	// lis r6,-32013
	ctx.r6.s64 = -2098003968;
loc_821385FC:
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// addi r10,r10,10000
	ctx.r10.s64 = ctx.r10.s64 + 10000;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,0(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// lwz r10,928(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + 928);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82138650
	if (cr6.getLT()) goto loc_82138650;
	// lwz r8,8(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 8);
loc_82138620:
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r5,8(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpw cr6,r5,r8
	cr6.compare<int32_t>(ctx.r5.s32, ctx.r8.s32, xer);
	// bne cr6,0x82138640
	if (!cr6.getEQ()) goto loc_82138640;
	// lwz r5,12(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmpw cr6,r5,r7
	cr6.compare<int32_t>(ctx.r5.s32, ctx.r7.s32, xer);
	// beq cr6,0x82138654
	if (cr6.getEQ()) goto loc_82138654;
loc_82138640:
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// lwz r11,0(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x82138620
	if (!cr6.getLT()) goto loc_82138620;
loc_82138650:
	// li r11,0
	r11.s64 = 0;
loc_82138654:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// bge cr6,0x821385fc
	if (!cr6.getLT()) goto loc_821385FC;
loc_82138660:
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// addi r10,r10,10000
	ctx.r10.s64 = ctx.r10.s64 + 10000;
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82138688"))) PPC_WEAK_FUNC(sub_82138688);
PPC_FUNC_IMPL(__imp__sub_82138688) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// cmpwi cr6,r29,2
	cr6.compare<int32_t>(r29.s32, 2, xer);
	// blt cr6,0x82138700
	if (cr6.getLT()) goto loc_82138700;
	// bl 0x821385c0
	sub_821385C0(ctx, base);
	// stw r31,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r31.u32);
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r8,r28,4
	ctx.r8.s64 = r28.s64 + 4;
	// addi r7,r29,9999
	ctx.r7.s64 = r29.s64 + 9999;
	// li r4,10001
	ctx.r4.s64 = 10001;
	// cmpwi cr6,r11,10001
	cr6.compare<int32_t>(r11.s32, 10001, xer);
	// blt cr6,0x82138700
	if (cr6.getLT()) goto loc_82138700;
loc_821386D4:
	// cmpw cr6,r4,r7
	cr6.compare<int32_t>(ctx.r4.s32, ctx.r7.s32, xer);
	// bge cr6,0x82138700
	if (!cr6.getLT()) goto loc_82138700;
	// lwz r5,8(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r3,4(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// bl 0x821383f8
	sub_821383F8(ctx, base);
	// stw r3,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r3.u32);
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// cmpw cr6,r4,r11
	cr6.compare<int32_t>(ctx.r4.s32, r11.s32, xer);
	// ble cr6,0x821386d4
	if (!cr6.getGT()) goto loc_821386D4;
loc_82138700:
	// li r10,0
	ctx.r10.s64 = 0;
	// subf r11,r28,r8
	r11.s64 = ctx.r8.s64 - r28.s64;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r10,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r10.u32);
	// srawi r3,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r3.s64 = r11.s32 >> 2;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82138720"))) PPC_WEAK_FUNC(sub_82138720);
PPC_FUNC_IMPL(__imp__sub_82138720) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r30{};
	PPCRegister r31{};
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r30,4(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x821387a4
	if (cr6.getLT()) goto loc_821387A4;
loc_82138748:
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r31,r11,r8
	r31.u64 = r11.u64 + ctx.r8.u64;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82138794
	if (cr6.getLT()) goto loc_82138794;
loc_82138760:
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r11,r8
	ctx.r10.u64 = r11.u64 + ctx.r8.u64;
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// cmplw cr6,r11,r4
	cr6.compare<uint32_t>(r11.u32, ctx.r4.u32, xer);
	// beq cr6,0x821387bc
	if (cr6.getEQ()) goto loc_821387BC;
	// addi r3,r3,4
	ctx.r3.s64 = ctx.r3.s64 + 4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x82138760
	if (!cr6.getLT()) goto loc_82138760;
loc_82138794:
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x82138748
	if (!cr6.getLT()) goto loc_82138748;
loc_821387A4:
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r11.u32);
	// stw r11,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r11.u32);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_821387BC:
	// stw r31,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r31.u32);
	// stw r10,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, ctx.r10.u32);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821387D0"))) PPC_WEAK_FUNC(sub_821387D0);
PPC_FUNC_IMPL(__imp__sub_821387D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// mr r24,r5
	r24.u64 = ctx.r5.u64;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r30,r24
	r30.u64 = r24.u64;
	// lwz r5,4(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x821388e0
	if (cr6.getEQ()) goto loc_821388E0;
	// lwz r11,8(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// lwz r10,8(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + 8);
	// rlwinm r8,r11,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r29,r10,r5
	r29.u64 = ctx.r10.u64 + ctx.r5.u64;
	// add r26,r11,r5
	r26.u64 = r11.u64 + ctx.r5.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// bl 0x82138370
	sub_82138370(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821388e0
	if (cr6.getEQ()) goto loc_821388E0;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lwz r10,8(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 8);
	// addi r31,r11,1
	r31.s64 = r11.s64 + 1;
	// cmpw cr6,r31,r10
	cr6.compare<int32_t>(r31.s32, ctx.r10.s32, xer);
	// bgt cr6,0x821388c0
	if (cr6.getGT()) goto loc_821388C0;
loc_82138858:
	// cmpwi cr6,r28,2
	cr6.compare<int32_t>(r28.s32, 2, xer);
	// blt cr6,0x821388c0
	if (cr6.getLT()) goto loc_821388C0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r3,0(r8)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// bl 0x821381f8
	sub_821381F8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r6,r1,84
	ctx.r6.s64 = ctx.r1.s64 + 84;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r3,r8
	ctx.r3.u64 = ctx.r8.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82138720
	sub_82138720(ctx, base);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82138688
	sub_82138688(ctx, base);
	// lwz r10,8(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 8);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// lwz r27,84(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r11,r3,-1
	r11.s64 = ctx.r3.s64 + -1;
	// cmpw cr6,r31,r10
	cr6.compare<int32_t>(r31.s32, ctx.r10.s32, xer);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// subf r28,r11,r28
	r28.s64 = r28.s64 - r11.s64;
	// add r30,r10,r30
	r30.u64 = ctx.r10.u64 + r30.u64;
	// ble cr6,0x82138858
	if (!cr6.getGT()) goto loc_82138858;
loc_821388C0:
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82138688
	sub_82138688(ctx, base);
	// rlwinm r11,r3,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addi r30,r11,-4
	r30.s64 = r11.s64 + -4;
loc_821388E0:
	// li r10,0
	ctx.r10.s64 = 0;
	// subf r11,r24,r30
	r11.s64 = r30.s64 - r24.s64;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r10,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r10.u32);
	// srawi r3,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r3.s64 = r11.s32 >> 2;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_82138900"))) PPC_WEAK_FUNC(sub_82138900);
PPC_FUNC_IMPL(__imp__sub_82138900) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// li r31,0
	r31.s64 = 0;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8213893c
	if (cr6.getLT()) goto loc_8213893C;
	// mr r11,r28
	r11.u64 = r28.u64;
loc_82138928:
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x82138928
	if (!cr6.getLT()) goto loc_82138928;
loc_8213893C:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// twllei r31,0
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// divwu r10,r11,r31
	ctx.r10.u32 = r11.u32 / r31.u32;
	// mullw r10,r10,r31
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r31.s32);
	// subf r8,r10,r11
	ctx.r8.s64 = r11.s64 - ctx.r10.s64;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// cmpw cr6,r8,r31
	cr6.compare<int32_t>(ctx.r8.s32, r31.s32, xer);
	// lwz r7,928(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 928);
	// bge cr6,0x821389a4
	if (!cr6.getLT()) goto loc_821389A4;
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
loc_8213897C:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r10,r7
	ctx.r3.u64 = ctx.r10.u64 + ctx.r7.u64;
	// lwz r10,12(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// cmpw cr6,r10,r29
	cr6.compare<int32_t>(ctx.r10.s32, r29.s32, xer);
	// beq cr6,0x821389e0
	if (cr6.getEQ()) goto loc_821389E0;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpw cr6,r9,r31
	cr6.compare<int32_t>(ctx.r9.s32, r31.s32, xer);
	// blt cr6,0x8213897c
	if (cr6.getLT()) goto loc_8213897C;
loc_821389A4:
	// li r9,0
	ctx.r9.s64 = 0;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x821389dc
	if (!cr6.getGT()) goto loc_821389DC;
	// mr r11,r28
	r11.u64 = r28.u64;
loc_821389B4:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r10,r7
	ctx.r3.u64 = ctx.r10.u64 + ctx.r7.u64;
	// lwz r10,12(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// cmpw cr6,r10,r29
	cr6.compare<int32_t>(ctx.r10.s32, r29.s32, xer);
	// beq cr6,0x821389e0
	if (cr6.getEQ()) goto loc_821389E0;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpw cr6,r9,r8
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r8.s32, xer);
	// blt cr6,0x821389b4
	if (cr6.getLT()) goto loc_821389B4;
loc_821389DC:
	// li r3,0
	ctx.r3.s64 = 0;
loc_821389E0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_821389E8"))) PPC_WEAK_FUNC(sub_821389E8);
PPC_FUNC_IMPL(__imp__sub_821389E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// li r31,0
	r31.s64 = 0;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82138a24
	if (cr6.getLT()) goto loc_82138A24;
	// mr r11,r28
	r11.u64 = r28.u64;
loc_82138A10:
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x82138a10
	if (!cr6.getLT()) goto loc_82138A10;
loc_82138A24:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// twllei r31,0
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// divwu r10,r11,r31
	ctx.r10.u32 = r11.u32 / r31.u32;
	// mullw r10,r10,r31
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r31.s32);
	// subf r6,r10,r11
	ctx.r6.s64 = r11.s64 - ctx.r10.s64;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// mr r7,r6
	ctx.r7.u64 = ctx.r6.u64;
	// addi r11,r11,928
	r11.s64 = r11.s64 + 928;
	// cmpw cr6,r6,r31
	cr6.compare<int32_t>(ctx.r6.s32, r31.s32, xer);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bge cr6,0x82138a98
	if (!cr6.getLT()) goto loc_82138A98;
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r11,r28
	ctx.r10.u64 = r11.u64 + r28.u64;
loc_82138A68:
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r8
	ctx.r3.u64 = r11.u64 + ctx.r8.u64;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpw cr6,r11,r29
	cr6.compare<int32_t>(r11.s32, r29.s32, xer);
	// beq cr6,0x82138adc
	if (cr6.getEQ()) goto loc_82138ADC;
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r7,r31
	cr6.compare<int32_t>(ctx.r7.s32, r31.s32, xer);
	// blt cr6,0x82138a68
	if (cr6.getLT()) goto loc_82138A68;
loc_82138A98:
	// li r7,0
	ctx.r7.s64 = 0;
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// ble cr6,0x82138ad8
	if (!cr6.getGT()) goto loc_82138AD8;
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
loc_82138AA8:
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r8
	ctx.r3.u64 = r11.u64 + ctx.r8.u64;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpw cr6,r11,r29
	cr6.compare<int32_t>(r11.s32, r29.s32, xer);
	// beq cr6,0x82138adc
	if (cr6.getEQ()) goto loc_82138ADC;
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r7,r6
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r6.s32, xer);
	// blt cr6,0x82138aa8
	if (cr6.getLT()) goto loc_82138AA8;
loc_82138AD8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82138ADC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_82138AE8"))) PPC_WEAK_FUNC(sub_82138AE8);
PPC_FUNC_IMPL(__imp__sub_82138AE8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r7,r11,928
	ctx.r7.s64 = r11.s64 + 928;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// lwz r5,4(r7)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x82138c7c
	if (cr6.getEQ()) goto loc_82138C7C;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rlwinm r8,r11,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r31,r10,r5
	r31.u64 = ctx.r10.u64 + ctx.r5.u64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bne cr6,0x82138bac
	if (!cr6.getEQ()) goto loc_82138BAC;
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x82138b70
	if (cr6.getLT()) goto loc_82138B70;
	// li r10,-1
	ctx.r10.s64 = -1;
loc_82138B5C:
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bge cr6,0x82138b5c
	if (!cr6.getLT()) goto loc_82138B5C;
loc_82138B70:
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82138500
	sub_82138500(ctx, base);
	// li r4,-1
	ctx.r4.s64 = -1;
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// bl 0x82138900
	sub_82138900(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82138c80
	if (!cr6.getEQ()) goto loc_82138C80;
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// bl 0x82138900
	sub_82138900(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82138c7c
	if (cr6.getEQ()) goto loc_82138C7C;
	// b 0x82138c80
	goto loc_82138C80;
loc_82138BAC:
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x821382d8
	sub_821382D8(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82138c7c
	if (cr6.getLT()) goto loc_82138C7C;
	// li r4,-1
	ctx.r4.s64 = -1;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x821389e8
	sub_821389E8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82138c24
	if (cr6.getEQ()) goto loc_82138C24;
	// addi r6,r1,84
	ctx.r6.s64 = ctx.r1.s64 + 84;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82138720
	sub_82138720(ctx, base);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplw cr6,r4,r30
	cr6.compare<uint32_t>(ctx.r4.u32, r30.u32, xer);
	// bne cr6,0x82138c04
	if (!cr6.getEQ()) goto loc_82138C04;
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// b 0x82138c80
	goto loc_82138C80;
loc_82138C04:
	// li r6,3
	ctx.r6.s64 = 3;
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82138688
	sub_82138688(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// ble cr6,0x82138c7c
	if (!cr6.getGT()) goto loc_82138C7C;
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// b 0x82138c80
	goto loc_82138C80;
loc_82138C24:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r4,r11,-1
	ctx.r4.s64 = r11.s64 + -1;
	// bl 0x821381f8
	sub_821381F8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82138c7c
	if (cr6.getEQ()) goto loc_82138C7C;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82138720
	sub_82138720(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x82138500
	sub_82138500(ctx, base);
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// lwz r5,8(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// bl 0x821383f8
	sub_821383F8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82138c80
	if (!cr6.getEQ()) goto loc_82138C80;
loc_82138C7C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82138C80:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82138C98"))) PPC_WEAK_FUNC(sub_82138C98);
PPC_FUNC_IMPL(__imp__sub_82138C98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed108
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32013
	r11.s64 = -2098003968;
	// li r17,0
	r17.s64 = 0;
	// addi r16,r11,928
	r16.s64 = r11.s64 + 928;
	// mr r19,r17
	r19.u64 = r17.u64;
	// li r18,1
	r18.s64 = 1;
	// lwz r20,0(r16)
	r20.u64 = PPC_LOAD_U32(r16.u32 + 0);
	// lwz r21,4(r16)
	r21.u64 = PPC_LOAD_U32(r16.u32 + 4);
	// cmplwi cr6,r20,0
	cr6.compare<uint32_t>(r20.u32, 0, xer);
	// beq cr6,0x82138df4
	if (cr6.getEQ()) goto loc_82138DF4;
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mr r31,r17
	r31.u64 = r17.u64;
	// mr r29,r20
	r29.u64 = r20.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82138df4
	if (cr6.getLT()) goto loc_82138DF4;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r27,r11,23828
	r27.s64 = r11.s64 + 23828;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r28,r11,23780
	r28.s64 = r11.s64 + 23780;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r25,r11,23740
	r25.s64 = r11.s64 + 23740;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r26,r11,23708
	r26.s64 = r11.s64 + 23708;
loc_82138CFC:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x82138ddc
	if (cr6.getLT()) goto loc_82138DDC;
	// mr r30,r17
	r30.u64 = r17.u64;
loc_82138D10:
	// cmpw cr6,r8,r31
	cr6.compare<int32_t>(ctx.r8.s32, r31.s32, xer);
	// bne cr6,0x82138d48
	if (!cr6.getEQ()) goto loc_82138D48;
	// lwz r11,32(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82138d38
	if (cr6.getEQ()) goto loc_82138D38;
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwzx r4,r10,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// b 0x82138dc4
	goto loc_82138DC4;
loc_82138D38:
	// addi r4,r31,1
	ctx.r4.s64 = r31.s64 + 1;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// b 0x82138dc4
	goto loc_82138DC4;
loc_82138D48:
	// rlwinm r10,r8,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// mr r11,r17
	r11.u64 = r17.u64;
	// add r10,r10,r20
	ctx.r10.u64 = ctx.r10.u64 + r20.u64;
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x82138d80
	if (cr6.getLT()) goto loc_82138D80;
loc_82138D64:
	// cmpw cr6,r9,r31
	cr6.compare<int32_t>(ctx.r9.s32, r31.s32, xer);
	// beq cr6,0x82138d80
	if (cr6.getEQ()) goto loc_82138D80;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r9,r10
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bge cr6,0x82138d64
	if (!cr6.getLT()) goto loc_82138D64;
loc_82138D80:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpw cr6,r11,r31
	cr6.compare<int32_t>(r11.s32, r31.s32, xer);
	// beq cr6,0x82138dc8
	if (cr6.getEQ()) goto loc_82138DC8;
	// lwz r11,32(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82138db4
	if (cr6.getEQ()) goto loc_82138DB4;
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r31,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwzx r5,r10,r11
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwzx r4,r9,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// b 0x82138dc0
	goto loc_82138DC0;
loc_82138DB4:
	// addi r5,r8,1
	ctx.r5.s64 = ctx.r8.s64 + 1;
	// addi r4,r31,1
	ctx.r4.s64 = r31.s64 + 1;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
loc_82138DC0:
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82138DC4:
	// mr r19,r18
	r19.u64 = r18.u64;
loc_82138DC8:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// lwzx r8,r30,r11
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bge cr6,0x82138d10
	if (!cr6.getLT()) goto loc_82138D10;
loc_82138DDC:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// rlwinm r11,r31,4,0,27
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 4) & 0xFFFFFFF0;
	// add r29,r11,r20
	r29.u64 = r11.u64 + r20.u64;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x82138cfc
	if (!cr6.getLT()) goto loc_82138CFC;
loc_82138DF4:
	// cmplwi cr6,r21,0
	cr6.compare<uint32_t>(r21.u32, 0, xer);
	// beq cr6,0x82138fa8
	if (cr6.getEQ()) goto loc_82138FA8;
	// lwz r11,0(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// mr r30,r17
	r30.u64 = r17.u64;
	// mr r29,r21
	r29.u64 = r21.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82138fa8
	if (cr6.getEQ()) goto loc_82138FA8;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r25,r11,23644
	r25.s64 = r11.s64 + 23644;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r27,r11,23592
	r27.s64 = r11.s64 + 23592;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r24,r11,23532
	r24.s64 = r11.s64 + 23532;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r26,r11,23484
	r26.s64 = r11.s64 + 23484;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r22,r11,23444
	r22.s64 = r11.s64 + 23444;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r23,r11,23408
	r23.s64 = r11.s64 + 23408;
loc_82138E40:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwz r31,0(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x82138f88
	if (cr6.getLT()) goto loc_82138F88;
	// mr r28,r17
	r28.u64 = r17.u64;
loc_82138E54:
	// cmpw cr6,r31,r30
	cr6.compare<int32_t>(r31.s32, r30.s32, xer);
	// bne cr6,0x82138e8c
	if (!cr6.getEQ()) goto loc_82138E8C;
	// lwz r11,36(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82138e7c
	if (cr6.getEQ()) goto loc_82138E7C;
	// rlwinm r10,r30,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// lwzx r4,r10,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// b 0x82138f70
	goto loc_82138F70;
loc_82138E7C:
	// addi r4,r30,1
	ctx.r4.s64 = r30.s64 + 1;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// b 0x82138f70
	goto loc_82138F70;
loc_82138E8C:
	// rlwinm r10,r31,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r11,r17
	r11.u64 = r17.u64;
	// add r10,r31,r10
	ctx.r10.u64 = r31.u64 + ctx.r10.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r4,r10,r21
	ctx.r4.u64 = ctx.r10.u64 + r21.u64;
	// lwz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// blt cr6,0x82138ecc
	if (cr6.getLT()) goto loc_82138ECC;
loc_82138EB0:
	// cmpw cr6,r9,r30
	cr6.compare<int32_t>(ctx.r9.s32, r30.s32, xer);
	// beq cr6,0x82138ecc
	if (cr6.getEQ()) goto loc_82138ECC;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r9,r10
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bge cr6,0x82138eb0
	if (!cr6.getLT()) goto loc_82138EB0;
loc_82138ECC:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// beq cr6,0x82138f08
	if (cr6.getEQ()) goto loc_82138F08;
	// lwz r11,36(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82138f00
	if (cr6.getEQ()) goto loc_82138F00;
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r30,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwzx r5,r10,r11
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwzx r4,r9,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// b 0x82138f6c
	goto loc_82138F6C;
loc_82138F00:
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// b 0x82138f64
	goto loc_82138F64;
loc_82138F08:
	// lwz r11,0(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82138f74
	if (cr6.getEQ()) goto loc_82138F74;
	// addi r6,r1,84
	ctx.r6.s64 = ctx.r1.s64 + 84;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82138720
	sub_82138720(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82138f3c
	if (cr6.getEQ()) goto loc_82138F3C;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82138f74
	if (!cr6.getEQ()) goto loc_82138F74;
loc_82138F3C:
	// lwz r11,36(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82138f60
	if (cr6.getEQ()) goto loc_82138F60;
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r30,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwzx r5,r10,r11
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// lwzx r4,r9,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// b 0x82138f6c
	goto loc_82138F6C;
loc_82138F60:
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
loc_82138F64:
	// addi r5,r31,1
	ctx.r5.s64 = r31.s64 + 1;
	// addi r4,r30,1
	ctx.r4.s64 = r30.s64 + 1;
loc_82138F6C:
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_82138F70:
	// mr r19,r18
	r19.u64 = r18.u64;
loc_82138F74:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// lwzx r31,r28,r11
	r31.u64 = PPC_LOAD_U32(r28.u32 + r11.u32);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x82138e54
	if (!cr6.getLT()) goto loc_82138E54;
loc_82138F88:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r29,r11,r21
	r29.u64 = r11.u64 + r21.u64;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82138e40
	if (!cr6.getEQ()) goto loc_82138E40;
loc_82138FA8:
	// cmplwi cr6,r20,0
	cr6.compare<uint32_t>(r20.u32, 0, xer);
	// beq cr6,0x821392ac
	if (cr6.getEQ()) goto loc_821392AC;
	// cmplwi cr6,r21,0
	cr6.compare<uint32_t>(r21.u32, 0, xer);
	// beq cr6,0x821392ac
	if (cr6.getEQ()) goto loc_821392AC;
	// lwz r11,0(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// mr r31,r17
	r31.u64 = r17.u64;
	// mr r29,r21
	r29.u64 = r21.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82139098
	if (cr6.getEQ()) goto loc_82139098;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r27,r11,23328
	r27.s64 = r11.s64 + 23328;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r28,r11,23264
	r28.s64 = r11.s64 + 23264;
loc_82138FDC:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x82139078
	if (cr6.getLT()) goto loc_82139078;
	// mr r30,r17
	r30.u64 = r17.u64;
loc_82138FF0:
	// rlwinm r11,r10,4,0,27
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r9,r11,r20
	ctx.r9.u64 = r11.u64 + r20.u64;
	// lwz r11,8(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x8213900c
	if (!cr6.getLT()) goto loc_8213900C;
	// stw r31,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, r31.u32);
	// b 0x82139064
	goto loc_82139064;
loc_8213900C:
	// cmpw cr6,r11,r31
	cr6.compare<int32_t>(r11.s32, r31.s32, xer);
	// beq cr6,0x82139064
	if (cr6.getEQ()) goto loc_82139064;
	// lwz r8,32(r16)
	ctx.r8.u64 = PPC_LOAD_U32(r16.u32 + 32);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x8213904c
	if (cr6.getEQ()) goto loc_8213904C;
	// lwz r9,36(r16)
	ctx.r9.u64 = PPC_LOAD_U32(r16.u32 + 36);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x8213904c
	if (cr6.getEQ()) goto loc_8213904C;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r31,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwzx r6,r11,r9
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// lwzx r5,r10,r8
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// lwzx r4,r7,r9
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r9.u32);
	// b 0x8213905c
	goto loc_8213905C;
loc_8213904C:
	// addi r6,r11,1
	ctx.r6.s64 = r11.s64 + 1;
	// addi r5,r10,1
	ctx.r5.s64 = ctx.r10.s64 + 1;
	// addi r4,r31,1
	ctx.r4.s64 = r31.s64 + 1;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
loc_8213905C:
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// mr r19,r18
	r19.u64 = r18.u64;
loc_82139064:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// lwzx r10,r30,r11
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x82138ff0
	if (!cr6.getLT()) goto loc_82138FF0;
loc_82139078:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r29,r11,r21
	r29.u64 = r11.u64 + r21.u64;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82138fdc
	if (!cr6.getEQ()) goto loc_82138FDC;
loc_82139098:
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82139114
	if (cr6.getLT()) goto loc_82139114;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r29,r18
	r29.u64 = r18.u64;
	// addi r27,r11,23228
	r27.s64 = r11.s64 + 23228;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r30,r17
	r30.u64 = r17.u64;
	// mr r31,r20
	r31.u64 = r20.u64;
	// addi r28,r11,23200
	r28.s64 = r11.s64 + 23200;
loc_821390C4:
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x821390f8
	if (!cr6.getLT()) goto loc_821390F8;
	// lwz r11,32(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821390e8
	if (cr6.getEQ()) goto loc_821390E8;
	// lwzx r4,r30,r11
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// b 0x821390f0
	goto loc_821390F0;
loc_821390E8:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
loc_821390F0:
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// mr r19,r18
	r19.u64 = r18.u64;
loc_821390F8:
	// addi r31,r31,16
	r31.s64 = r31.s64 + 16;
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x821390c4
	if (!cr6.getLT()) goto loc_821390C4;
loc_82139114:
	// lwz r11,0(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821392ac
	if (cr6.getEQ()) goto loc_821392AC;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r29,r18
	r29.u64 = r18.u64;
	// addi r27,r11,23152
	r27.s64 = r11.s64 + 23152;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r30,r17
	r30.u64 = r17.u64;
	// mr r31,r21
	r31.u64 = r21.u64;
	// addi r28,r11,23108
	r28.s64 = r11.s64 + 23108;
loc_82139140:
	// lwz r11,4(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// mr r10,r17
	ctx.r10.u64 = r17.u64;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82139188
	if (cr6.getLT()) goto loc_82139188;
loc_82139154:
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// bne cr6,0x8213916c
	if (!cr6.getEQ()) goto loc_8213916C;
	// stw r18,12(r11)
	PPC_STORE_U32(r11.u32 + 12, r18.u32);
	// b 0x82139170
	goto loc_82139170;
loc_8213916C:
	// stw r17,12(r11)
	PPC_STORE_U32(r11.u32 + 12, r17.u32);
loc_82139170:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lwz r11,4(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r9,r11
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x82139154
	if (!cr6.getLT()) goto loc_82139154;
loc_82139188:
	// lwz r11,4(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// mr r7,r17
	ctx.r7.u64 = r17.u64;
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82139210
	if (cr6.getLT()) goto loc_82139210;
	// mr r8,r17
	ctx.r8.u64 = r17.u64;
loc_821391A4:
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r9,r11,r20
	ctx.r9.u64 = r11.u64 + r20.u64;
	// lwz r11,12(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 12);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x821391fc
	if (!cr6.getEQ()) goto loc_821391FC;
	// lwz r11,4(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x821391fc
	if (cr6.getLT()) goto loc_821391FC;
	// mr r10,r17
	ctx.r10.u64 = r17.u64;
loc_821391CC:
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// lwz r4,12(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmpwi cr6,r4,1
	cr6.compare<int32_t>(ctx.r4.s32, 1, xer);
	// beq cr6,0x821391e8
	if (cr6.getEQ()) goto loc_821391E8;
	// mr r7,r18
	ctx.r7.u64 = r18.u64;
	// stw r18,12(r11)
	PPC_STORE_U32(r11.u32 + 12, r18.u32);
loc_821391E8:
	// lwz r11,4(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x821391cc
	if (!cr6.getLT()) goto loc_821391CC;
loc_821391FC:
	// lwz r11,4(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// lwzx r11,r8,r11
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x821391a4
	if (!cr6.getLT()) goto loc_821391A4;
loc_82139210:
	// lwz r10,4(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8213924c
	if (cr6.getLT()) goto loc_8213924C;
loc_82139220:
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82139248
	if (!cr6.getEQ()) goto loc_82139248;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x82139220
	if (!cr6.getLT()) goto loc_82139220;
	// b 0x8213924c
	goto loc_8213924C;
loc_82139248:
	// mr r5,r18
	ctx.r5.u64 = r18.u64;
loc_8213924C:
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq cr6,0x82139260
	if (cr6.getEQ()) goto loc_82139260;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// bne cr6,0x82139188
	if (!cr6.getEQ()) goto loc_82139188;
	// b 0x82139290
	goto loc_82139290;
loc_82139260:
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq cr6,0x82139290
	if (cr6.getEQ()) goto loc_82139290;
	// lwz r11,36(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82139280
	if (cr6.getEQ()) goto loc_82139280;
	// lwzx r4,r30,r11
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + r11.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// b 0x82139288
	goto loc_82139288;
loc_82139280:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
loc_82139288:
	// bl 0x823ed380
	sub_823ED380(ctx, base);
	// mr r19,r18
	r19.u64 = r18.u64;
loc_82139290:
	// addi r31,r31,12
	r31.s64 = r31.s64 + 12;
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82139140
	if (!cr6.getEQ()) goto loc_82139140;
loc_821392AC:
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// beq cr6,0x821392c4
	if (cr6.getEQ()) goto loc_821392C4;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r3,r11,23068
	ctx.r3.s64 = r11.s64 + 23068;
	// bl 0x823ed380
	sub_823ED380(ctx, base);
loc_821392C0:
	// b 0x821392c0
	goto loc_821392C0;
loc_821392C4:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x823ed158
	return;
}

__attribute__((alias("__imp__sub_821392D0"))) PPC_WEAK_FUNC(sub_821392D0);
PPC_FUNC_IMPL(__imp__sub_821392D0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820e8c88
	sub_820E8C88(ctx, base);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r11,r11,-9276
	r11.s64 = r11.s64 + -9276;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// stw r10,-928(r11)
	PPC_STORE_U32(r11.u32 + -928, ctx.r10.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139308"))) PPC_WEAK_FUNC(sub_82139308);
PPC_FUNC_IMPL(__imp__sub_82139308) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32033
	r11.s64 = -2099314688;
	// li r10,2
	ctx.r10.s64 = 2;
	// addi r11,r11,-9276
	r11.s64 = r11.s64 + -9276;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// stw r10,-928(r11)
	PPC_STORE_U32(r11.u32 + -928, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139320"))) PPC_WEAK_FUNC(sub_82139320);
PPC_FUNC_IMPL(__imp__sub_82139320) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r3,-10204(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -10204);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139330"))) PPC_WEAK_FUNC(sub_82139330);
PPC_FUNC_IMPL(__imp__sub_82139330) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r3,-9276(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -9276);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139340"))) PPC_WEAK_FUNC(sub_82139340);
PPC_FUNC_IMPL(__imp__sub_82139340) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r3,-9272(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -9272);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139350"))) PPC_WEAK_FUNC(sub_82139350);
PPC_FUNC_IMPL(__imp__sub_82139350) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,13216(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 13216);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139360"))) PPC_WEAK_FUNC(sub_82139360);
PPC_FUNC_IMPL(__imp__sub_82139360) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,13220(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 13220);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139370"))) PPC_WEAK_FUNC(sub_82139370);
PPC_FUNC_IMPL(__imp__sub_82139370) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,13232(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 13232);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139380"))) PPC_WEAK_FUNC(sub_82139380);
PPC_FUNC_IMPL(__imp__sub_82139380) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,13236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 13236);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139390"))) PPC_WEAK_FUNC(sub_82139390);
PPC_FUNC_IMPL(__imp__sub_82139390) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,13240(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 13240);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821393A0"))) PPC_WEAK_FUNC(sub_821393A0);
PPC_FUNC_IMPL(__imp__sub_821393A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,13264(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 13264);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821393B0"))) PPC_WEAK_FUNC(sub_821393B0);
PPC_FUNC_IMPL(__imp__sub_821393B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// stw r3,13264(r11)
	PPC_STORE_U32(r11.u32 + 13264, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821393C0"))) PPC_WEAK_FUNC(sub_821393C0);
PPC_FUNC_IMPL(__imp__sub_821393C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,13248(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 13248);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821393D0"))) PPC_WEAK_FUNC(sub_821393D0);
PPC_FUNC_IMPL(__imp__sub_821393D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,24796
	r11.s64 = r11.s64 + 24796;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x82139404
	if (cr6.getEQ()) goto loc_82139404;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82139404:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139418"))) PPC_WEAK_FUNC(sub_82139418);
PPC_FUNC_IMPL(__imp__sub_82139418) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r19{};
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,8264(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8264);
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// bgt cr6,0x82139484
	if (cr6.getGT()) goto loc_82139484;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,-27580
	r12.s64 = r12.s64 + -27580;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82139484;
	case 1:
		goto loc_8213946C;
	case 2:
		goto loc_82139464;
	case 3:
		goto loc_82139464;
	case 4:
		goto loc_82139484;
	case 5:
		goto loc_82139484;
	case 6:
		goto loc_82139484;
	case 7:
		goto loc_82139484;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-27516(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -27516);
	// lwz r16,-27540(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -27540);
	// lwz r16,-27548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -27548);
	// lwz r16,-27548(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -27548);
	// lwz r16,-27516(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -27516);
	// lwz r16,-27516(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -27516);
	// lwz r16,-27516(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -27516);
	// lwz r16,-27516(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -27516);
loc_82139464:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
loc_8213946C:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13304(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13304);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = r11.u64 ^ 1;
	// blr 
	return;
loc_82139484:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
	// .long 0x0
}

__attribute__((alias("__imp__sub_82139490"))) PPC_WEAK_FUNC(sub_82139490);
PPC_FUNC_IMPL(__imp__sub_82139490) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ca110
	sub_820CA110(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x821394fc
	if (cr6.getLT()) goto loc_821394FC;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,-2
	ctx.r4.s64 = -2;
	// bl 0x820a06d8
	sub_820A06D8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,2056
	ctx.r4.s64 = 2056;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x821394f4
	if (!cr6.getEQ()) goto loc_821394F4;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x821394fc
	if (!cr6.getGT()) goto loc_821394FC;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,8272(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8272);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x821394fc
	if (cr6.getEQ()) goto loc_821394FC;
loc_821394F4:
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x82139500
	goto loc_82139500;
loc_821394FC:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82139500:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139518"))) PPC_WEAK_FUNC(sub_82139518);
PPC_FUNC_IMPL(__imp__sub_82139518) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ca110
	sub_820CA110(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x82139584
	if (cr6.getLT()) goto loc_82139584;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,-2
	ctx.r4.s64 = -2;
	// bl 0x820a06d8
	sub_820A06D8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,1028
	ctx.r4.s64 = 1028;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8213957c
	if (!cr6.getEQ()) goto loc_8213957C;
	// cmpwi cr6,r30,-1
	cr6.compare<int32_t>(r30.s32, -1, xer);
	// bge cr6,0x82139584
	if (!cr6.getLT()) goto loc_82139584;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,8272(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8272);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82139584
	if (cr6.getEQ()) goto loc_82139584;
loc_8213957C:
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x82139588
	goto loc_82139588;
loc_82139584:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82139588:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821395A0"))) PPC_WEAK_FUNC(sub_821395A0);
PPC_FUNC_IMPL(__imp__sub_821395A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ca110
	sub_820CA110(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x8213960c
	if (cr6.getLT()) goto loc_8213960C;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,-2
	ctx.r4.s64 = -2;
	// bl 0x820a0648
	sub_820A0648(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,257
	ctx.r4.s64 = 257;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82139604
	if (!cr6.getEQ()) goto loc_82139604;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x8213960c
	if (!cr6.getGT()) goto loc_8213960C;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,8272(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8272);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213960c
	if (cr6.getEQ()) goto loc_8213960C;
loc_82139604:
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x82139610
	goto loc_82139610;
loc_8213960C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82139610:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139628"))) PPC_WEAK_FUNC(sub_82139628);
PPC_FUNC_IMPL(__imp__sub_82139628) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ca110
	sub_820CA110(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x82139694
	if (cr6.getLT()) goto loc_82139694;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,-2
	ctx.r4.s64 = -2;
	// bl 0x820a0648
	sub_820A0648(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,514
	ctx.r4.s64 = 514;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8213968c
	if (!cr6.getEQ()) goto loc_8213968C;
	// cmpwi cr6,r30,-1
	cr6.compare<int32_t>(r30.s32, -1, xer);
	// bge cr6,0x82139694
	if (!cr6.getLT()) goto loc_82139694;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,8272(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8272);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82139694
	if (cr6.getEQ()) goto loc_82139694;
loc_8213968C:
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x82139698
	goto loc_82139698;
loc_82139694:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82139698:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821396B0"))) PPC_WEAK_FUNC(sub_821396B0);
PPC_FUNC_IMPL(__imp__sub_821396B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// li r11,0
	r11.s64 = 0;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// stw r11,13296(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13296, r11.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// stw r11,13304(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13304, r11.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// stw r11,13292(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13292, r11.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// stw r11,13308(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13308, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821396D8"))) PPC_WEAK_FUNC(sub_821396D8);
PPC_FUNC_IMPL(__imp__sub_821396D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// cmpw cr6,r30,r31
	cr6.compare<int32_t>(r30.s32, r31.s32, xer);
	// bgt cr6,0x82139720
	if (cr6.getGT()) goto loc_82139720;
	// bne cr6,0x82139718
	if (!cr6.getEQ()) goto loc_82139718;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82139720
	if (!cr6.getEQ()) goto loc_82139720;
loc_82139718:
	// li r29,0
	r29.s64 = 0;
	// b 0x82139728
	goto loc_82139728;
loc_82139720:
	// li r29,1
	r29.s64 = 1;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_82139728:
	// cmpwi cr6,r27,2
	cr6.compare<int32_t>(r27.s32, 2, xer);
	// ble cr6,0x8213978c
	if (!cr6.getGT()) goto loc_8213978C;
	// cmpw cr6,r28,r31
	cr6.compare<int32_t>(r28.s32, r31.s32, xer);
	// bgt cr6,0x82139750
	if (cr6.getGT()) goto loc_82139750;
	// bne cr6,0x82139758
	if (!cr6.getEQ()) goto loc_82139758;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82139758
	if (cr6.getEQ()) goto loc_82139758;
loc_82139750:
	// li r29,2
	r29.s64 = 2;
	// mr r31,r28
	r31.u64 = r28.u64;
loc_82139758:
	// cmpwi cr6,r27,3
	cr6.compare<int32_t>(r27.s32, 3, xer);
	// ble cr6,0x8213978c
	if (!cr6.getGT()) goto loc_8213978C;
	// cmpw cr6,r26,r31
	cr6.compare<int32_t>(r26.s32, r31.s32, xer);
	// bgt cr6,0x82139780
	if (cr6.getGT()) goto loc_82139780;
	// bne cr6,0x8213978c
	if (!cr6.getEQ()) goto loc_8213978C;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213978c
	if (cr6.getEQ()) goto loc_8213978C;
loc_82139780:
	// li r3,3
	ctx.r3.s64 = 3;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_8213978C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82139798"))) PPC_WEAK_FUNC(sub_82139798);
PPC_FUNC_IMPL(__imp__sub_82139798) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// cmpw cr6,r30,r31
	cr6.compare<int32_t>(r30.s32, r31.s32, xer);
	// blt cr6,0x821397e0
	if (cr6.getLT()) goto loc_821397E0;
	// bne cr6,0x821397d8
	if (!cr6.getEQ()) goto loc_821397D8;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821397e0
	if (!cr6.getEQ()) goto loc_821397E0;
loc_821397D8:
	// li r29,0
	r29.s64 = 0;
	// b 0x821397e8
	goto loc_821397E8;
loc_821397E0:
	// li r29,1
	r29.s64 = 1;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_821397E8:
	// cmpwi cr6,r27,2
	cr6.compare<int32_t>(r27.s32, 2, xer);
	// ble cr6,0x8213984c
	if (!cr6.getGT()) goto loc_8213984C;
	// cmpw cr6,r28,r31
	cr6.compare<int32_t>(r28.s32, r31.s32, xer);
	// blt cr6,0x82139810
	if (cr6.getLT()) goto loc_82139810;
	// bne cr6,0x82139818
	if (!cr6.getEQ()) goto loc_82139818;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82139818
	if (cr6.getEQ()) goto loc_82139818;
loc_82139810:
	// li r29,2
	r29.s64 = 2;
	// mr r31,r28
	r31.u64 = r28.u64;
loc_82139818:
	// cmpwi cr6,r27,3
	cr6.compare<int32_t>(r27.s32, 3, xer);
	// ble cr6,0x8213984c
	if (!cr6.getGT()) goto loc_8213984C;
	// cmpw cr6,r26,r31
	cr6.compare<int32_t>(r26.s32, r31.s32, xer);
	// blt cr6,0x82139840
	if (cr6.getLT()) goto loc_82139840;
	// bne cr6,0x8213984c
	if (!cr6.getEQ()) goto loc_8213984C;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213984c
	if (cr6.getEQ()) goto loc_8213984C;
loc_82139840:
	// li r3,3
	ctx.r3.s64 = 3;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_8213984C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82139858"))) PPC_WEAK_FUNC(sub_82139858);
PPC_FUNC_IMPL(__imp__sub_82139858) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r12,r1,-24
	r12.s64 = ctx.r1.s64 + -24;
	// bl 0x823ed548
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// fmr f30,f2
	f30.f64 = ctx.f2.f64;
	// fmr f29,f3
	f29.f64 = ctx.f3.f64;
	// fmr f28,f4
	f28.f64 = ctx.f4.f64;
	// fcmpu cr6,f30,f31
	cr6.compare(f30.f64, f31.f64);
	// bgt cr6,0x821398b4
	if (cr6.getGT()) goto loc_821398B4;
	// fcmpu cr6,f30,f31
	cr6.compare(f30.f64, f31.f64);
	// bne cr6,0x821398ac
	if (!cr6.getEQ()) goto loc_821398AC;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821398b4
	if (!cr6.getEQ()) goto loc_821398B4;
loc_821398AC:
	// li r31,0
	r31.s64 = 0;
	// b 0x821398bc
	goto loc_821398BC;
loc_821398B4:
	// li r31,1
	r31.s64 = 1;
	// fmr f31,f30
	ctx.fpscr.disableFlushMode();
	f31.f64 = f30.f64;
loc_821398BC:
	// cmpwi cr6,r30,2
	cr6.compare<int32_t>(r30.s32, 2, xer);
	// ble cr6,0x82139924
	if (!cr6.getGT()) goto loc_82139924;
	// fcmpu cr6,f29,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f29.f64, f31.f64);
	// bgt cr6,0x821398e8
	if (cr6.getGT()) goto loc_821398E8;
	// fcmpu cr6,f29,f31
	cr6.compare(f29.f64, f31.f64);
	// bne cr6,0x821398f0
	if (!cr6.getEQ()) goto loc_821398F0;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821398f0
	if (cr6.getEQ()) goto loc_821398F0;
loc_821398E8:
	// li r31,2
	r31.s64 = 2;
	// fmr f31,f29
	ctx.fpscr.disableFlushMode();
	f31.f64 = f29.f64;
loc_821398F0:
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// ble cr6,0x82139924
	if (!cr6.getGT()) goto loc_82139924;
	// fcmpu cr6,f28,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f28.f64, f31.f64);
	// bgt cr6,0x8213991c
	if (cr6.getGT()) goto loc_8213991C;
	// fcmpu cr6,f28,f31
	cr6.compare(f28.f64, f31.f64);
	// bne cr6,0x82139924
	if (!cr6.getEQ()) goto loc_82139924;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82139924
	if (cr6.getEQ()) goto loc_82139924;
loc_8213991C:
	// li r3,3
	ctx.r3.s64 = 3;
	// b 0x82139928
	goto loc_82139928;
loc_82139924:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82139928:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// addi r12,r1,-24
	r12.s64 = ctx.r1.s64 + -24;
	// bl 0x823ed594
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139948"))) PPC_WEAK_FUNC(sub_82139948);
PPC_FUNC_IMPL(__imp__sub_82139948) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r12,r1,-24
	r12.s64 = ctx.r1.s64 + -24;
	// bl 0x823ed548
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// fmr f30,f2
	f30.f64 = ctx.f2.f64;
	// fmr f29,f3
	f29.f64 = ctx.f3.f64;
	// fmr f28,f4
	f28.f64 = ctx.f4.f64;
	// fcmpu cr6,f30,f31
	cr6.compare(f30.f64, f31.f64);
	// blt cr6,0x821399a4
	if (cr6.getLT()) goto loc_821399A4;
	// fcmpu cr6,f30,f31
	cr6.compare(f30.f64, f31.f64);
	// bne cr6,0x8213999c
	if (!cr6.getEQ()) goto loc_8213999C;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821399a4
	if (!cr6.getEQ()) goto loc_821399A4;
loc_8213999C:
	// li r31,0
	r31.s64 = 0;
	// b 0x821399ac
	goto loc_821399AC;
loc_821399A4:
	// li r31,1
	r31.s64 = 1;
	// fmr f31,f30
	ctx.fpscr.disableFlushMode();
	f31.f64 = f30.f64;
loc_821399AC:
	// cmpwi cr6,r30,2
	cr6.compare<int32_t>(r30.s32, 2, xer);
	// ble cr6,0x82139a14
	if (!cr6.getGT()) goto loc_82139A14;
	// fcmpu cr6,f29,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f29.f64, f31.f64);
	// blt cr6,0x821399d8
	if (cr6.getLT()) goto loc_821399D8;
	// fcmpu cr6,f29,f31
	cr6.compare(f29.f64, f31.f64);
	// bne cr6,0x821399e0
	if (!cr6.getEQ()) goto loc_821399E0;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821399e0
	if (cr6.getEQ()) goto loc_821399E0;
loc_821399D8:
	// li r31,2
	r31.s64 = 2;
	// fmr f31,f29
	ctx.fpscr.disableFlushMode();
	f31.f64 = f29.f64;
loc_821399E0:
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// ble cr6,0x82139a14
	if (!cr6.getGT()) goto loc_82139A14;
	// fcmpu cr6,f28,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f28.f64, f31.f64);
	// blt cr6,0x82139a0c
	if (cr6.getLT()) goto loc_82139A0C;
	// fcmpu cr6,f28,f31
	cr6.compare(f28.f64, f31.f64);
	// bne cr6,0x82139a14
	if (!cr6.getEQ()) goto loc_82139A14;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82139a14
	if (cr6.getEQ()) goto loc_82139A14;
loc_82139A0C:
	// li r3,3
	ctx.r3.s64 = 3;
	// b 0x82139a18
	goto loc_82139A18;
loc_82139A14:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82139A18:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// addi r12,r1,-24
	r12.s64 = ctx.r1.s64 + -24;
	// bl 0x823ed594
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139A38"))) PPC_WEAK_FUNC(sub_82139A38);
PPC_FUNC_IMPL(__imp__sub_82139A38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x82139a60
	if (!cr6.getEQ()) goto loc_82139A60;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82139A60:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13296(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13296);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82139a84
	if (cr6.getEQ()) goto loc_82139A84;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82139A84:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,8260(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8260);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139AA8"))) PPC_WEAK_FUNC(sub_82139AA8);
PPC_FUNC_IMPL(__imp__sub_82139AA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,1
	r11.s64 = 1;
	// stw r11,13296(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13296, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139AB8"))) PPC_WEAK_FUNC(sub_82139AB8);
PPC_FUNC_IMPL(__imp__sub_82139AB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13304(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bgt cr6,0x82139ad0
	if (cr6.getGT()) goto loc_82139AD0;
	// li r11,0
	r11.s64 = 0;
loc_82139AD0:
	// clrlwi r3,r11,24
	ctx.r3.u64 = r11.u32 & 0xFF;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82139AD8"))) PPC_WEAK_FUNC(sub_82139AD8);
PPC_FUNC_IMPL(__imp__sub_82139AD8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed104
	// addi r12,r1,-144
	r12.s64 = ctx.r1.s64 + -144;
	// bl 0x823ed548
	// stwu r1,-512(r1)
	ea = -512 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// bl 0x820b57f8
	sub_820B57F8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82144c60
	sub_82144C60(ctx, base);
	// bl 0x82144c48
	sub_82144C48(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// li r16,0
	r16.s64 = 0;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// mr r11,r16
	r11.u64 = r16.u64;
	// li r4,44
	ctx.r4.s64 = 44;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,26372(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26372, r11.u32);
	// bl 0x82144ba8
	sub_82144BA8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x8209f578
	sub_8209F578(ctx, base);
	// li r15,1
	r15.s64 = 1;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// mr r11,r15
	r11.u64 = r15.u64;
	// stw r11,13292(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13292, r11.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,90
	r11.s64 = 90;
	// stw r11,13304(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13304, r11.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// mr r11,r15
	r11.u64 = r15.u64;
	// stw r11,13284(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13284, r11.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,20
	r11.s64 = 20;
	// stw r11,13276(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13276, r11.u32);
	// mr r11,r16
	r11.u64 = r16.u64;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// stw r11,13280(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13280, r11.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// stw r11,13300(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13300, r11.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r18,r3
	r18.u64 = ctx.r3.u64;
	// mr r28,r16
	r28.u64 = r16.u64;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// addi r17,r11,-1360
	r17.s64 = r11.s64 + -1360;
	// ble cr6,0x82139d7c
	if (!cr6.getGT()) goto loc_82139D7C;
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// lis r9,-32255
	ctx.r9.s64 = -2113863680;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r26,r17,60
	r26.s64 = r17.s64 + 60;
	// addi r21,r17,36
	r21.s64 = r17.s64 + 36;
	// lfs f29,24852(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 24852);
	f29.f64 = double(temp.f32);
	// addi r31,r1,112
	r31.s64 = ctx.r1.s64 + 112;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// lfs f31,2776(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2776);
	f31.f64 = double(temp.f32);
	// lis r30,-32014
	r30.s64 = -2098069504;
	// li r19,3
	r19.s64 = 3;
	// li r20,28
	r20.s64 = 28;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f13,f0
	ctx.f13.f64 = double(float(f0.f64));
	// lfs f0,24848(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24848);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f30,2944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	f30.f64 = double(temp.f32);
	// fmuls f28,f13,f0
	f28.f64 = double(float(ctx.f13.f64 * f0.f64));
loc_82139BF0:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// stw r15,8260(r11)
	PPC_STORE_U32(r11.u32 + 8260, r15.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r19,8264(r11)
	PPC_STORE_U32(r11.u32 + 8264, r19.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r20,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, r20.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r16,8336(r11)
	PPC_STORE_U32(r11.u32 + 8336, r16.u32);
	// lwz r11,-1364(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -1364);
	// stw r16,8340(r11)
	PPC_STORE_U32(r11.u32 + 8340, r16.u32);
	// bl 0x820c1fe0
	sub_820C1FE0(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// bl 0x82108ed0
	sub_82108ED0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a6670
	sub_820A6670(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r23,-16(r31)
	PPC_STORE_U32(r31.u32 + -16, r23.u32);
	// bl 0x820a6670
	sub_820A6670(ctx, base);
	// stw r3,-12(r31)
	PPC_STORE_U32(r31.u32 + -12, ctx.r3.u32);
	// mr r27,r16
	r27.u64 = r16.u64;
	// stw r16,-8(r31)
	PPC_STORE_U32(r31.u32 + -8, r16.u32);
	// stw r16,-4(r31)
	PPC_STORE_U32(r31.u32 + -4, r16.u32);
	// stw r16,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r16.u32);
	// bl 0x820f6290
	sub_820F6290(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x82139cc8
	if (!cr6.getGT()) goto loc_82139CC8;
	// mr r24,r16
	r24.u64 = r16.u64;
	// addi r29,r26,-24
	r29.s64 = r26.s64 + -24;
	// mr r25,r21
	r25.u64 = r21.u64;
loc_82139C7C:
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// cmpw cr6,r28,r27
	cr6.compare<int32_t>(r28.s32, r27.s32, xer);
	// add r24,r11,r24
	r24.u64 = r11.u64 + r24.u64;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// bne cr6,0x82139ca0
	if (!cr6.getEQ()) goto loc_82139CA0;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// b 0x82139cac
	goto loc_82139CAC;
loc_82139CA0:
	// lwz r10,-8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -8);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,-8(r31)
	PPC_STORE_U32(r31.u32 + -8, r11.u32);
loc_82139CAC:
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// addi r25,r25,112
	r25.s64 = r25.s64 + 112;
	// bl 0x820f6290
	sub_820F6290(ctx, base);
	// cmpw cr6,r27,r3
	cr6.compare<int32_t>(r27.s32, ctx.r3.s32, xer);
	// blt cr6,0x82139c7c
	if (cr6.getLT()) goto loc_82139C7C;
	// stw r24,-4(r31)
	PPC_STORE_U32(r31.u32 + -4, r24.u32);
loc_82139CC8:
	// lwz r11,-8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -8);
	// extsw r10,r23
	ctx.r10.s64 = r23.s32;
	// lwz r9,-4(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + -4);
	// lfs f0,-4(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r26.u32 + -4);
	f0.f64 = double(temp.f32);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// fmuls f0,f0,f29
	f0.f64 = double(float(f0.f64 * f29.f64));
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// lfs f13,4(r26)
	temp.u32 = PPC_LOAD_U32(r26.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,24(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
	// lwz r8,0(r26)
	ctx.r8.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// lwz r10,-8(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + -8);
	// addi r21,r21,4
	r21.s64 = r21.s64 + 4;
	// std r11,320(r1)
	PPC_STORE_U64(ctx.r1.u32 + 320, r11.u64);
	// cmpw cr6,r28,r22
	cr6.compare<int32_t>(r28.s32, r22.s32, xer);
	// std r9,328(r1)
	PPC_STORE_U64(ctx.r1.u32 + 328, ctx.r9.u64);
	// lwz r11,16(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 16);
	// lwz r9,20(r26)
	ctx.r9.u64 = PPC_LOAD_U32(r26.u32 + 20);
	// addi r26,r26,112
	r26.s64 = r26.s64 + 112;
	// stw r8,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r8.u32);
	// fdivs f0,f0,f28
	f0.f64 = double(float(f0.f64 / f28.f64));
	// stfs f0,20(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// stw r10,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r10.u32);
	// stw r16,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r16.u32);
	// stw r11,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r11.u32);
	// stw r9,36(r31)
	PPC_STORE_U32(r31.u32 + 36, ctx.r9.u32);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,320(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 320);
	// lfd f12,328(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 328);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// fadds f11,f0,f31
	ctx.f11.f64 = double(float(f0.f64 + f31.f64));
	// fmuls f0,f13,f30
	f0.f64 = double(float(ctx.f13.f64 * f30.f64));
	// fadds f13,f12,f31
	ctx.f13.f64 = double(float(ctx.f12.f64 + f31.f64));
	// fdivs f12,f0,f11
	ctx.f12.f64 = double(float(f0.f64 / ctx.f11.f64));
	// stfs f12,4(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// addi r31,r31,56
	r31.s64 = r31.s64 + 56;
	// blt cr6,0x82139bf0
	if (cr6.getLT()) goto loc_82139BF0;
loc_82139D7C:
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lwz r7,280(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 280);
	// lwz r6,224(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	// lwz r5,168(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// lwz r4,112(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// bl 0x821396d8
	sub_821396D8(ctx, base);
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// mulli r11,r3,56
	r11.s64 = ctx.r3.s64 * 56;
	// lwzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82139dc0
	if (!cr6.getGT()) goto loc_82139DC0;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,1
	ctx.r9.u64 = ctx.r9.u64 | 1;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_82139DC0:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lwz r7,264(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 264);
	// lwz r6,208(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// lwz r5,152(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lwz r4,96(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// bl 0x82139798
	sub_82139798(ctx, base);
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// mulli r11,r3,56
	r11.s64 = ctx.r3.s64 * 56;
	// lwzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r10,100
	cr6.compare<int32_t>(ctx.r10.s32, 100, xer);
	// bge cr6,0x82139dfc
	if (!cr6.getLT()) goto loc_82139DFC;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,2
	ctx.r9.u64 = ctx.r9.u64 | 2;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_82139DFC:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lfs f4,304(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 304);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,248(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 248);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,192(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,136(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82139948
	sub_82139948(ctx, base);
	// addi r10,r1,136
	ctx.r10.s64 = ctx.r1.s64 + 136;
	// mulli r11,r3,56
	r11.s64 = ctx.r3.s64 * 56;
	// lfsx f13,r11,r10
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,3060(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3060);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// bgt cr6,0x82139e40
	if (cr6.getGT()) goto loc_82139E40;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,4
	ctx.r9.u64 = ctx.r9.u64 | 4;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_82139E40:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lfs f4,304(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 304);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,248(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 248);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,192(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,136(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82139858
	sub_82139858(ctx, base);
	// addi r10,r1,136
	ctx.r10.s64 = ctx.r1.s64 + 136;
	// mulli r11,r3,56
	r11.s64 = ctx.r3.s64 * 56;
	// lfsx f13,r11,r10
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,2772(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2772);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x82139e84
	if (!cr6.getGT()) goto loc_82139E84;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,8
	ctx.r9.u64 = ctx.r9.u64 | 8;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_82139E84:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lwz r7,268(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 268);
	// lwz r6,212(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	// lwz r5,156(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lwz r4,100(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// bl 0x821396d8
	sub_821396D8(ctx, base);
	// addi r10,r1,100
	ctx.r10.s64 = ctx.r1.s64 + 100;
	// mulli r11,r3,56
	r11.s64 = ctx.r3.s64 * 56;
	// lwzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82139ec0
	if (!cr6.getGT()) goto loc_82139EC0;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,16
	ctx.r9.u64 = ctx.r9.u64 | 16;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_82139EC0:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lfs f4,284(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 284);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,228(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,172(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82139858
	sub_82139858(ctx, base);
	// addi r10,r1,116
	ctx.r10.s64 = ctx.r1.s64 + 116;
	// mulli r11,r3,56
	r11.s64 = ctx.r3.s64 * 56;
	// lfsx f0,r11,r10
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f31,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f31.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x82139f04
	if (!cr6.getGT()) goto loc_82139F04;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 | 32;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_82139F04:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lfs f4,288(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 288);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,232(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,176(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82139858
	sub_82139858(ctx, base);
	// addi r10,r1,120
	ctx.r10.s64 = ctx.r1.s64 + 120;
	// mulli r11,r3,56
	r11.s64 = ctx.r3.s64 * 56;
	// lfsx f0,r11,r10
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x82139f40
	if (!cr6.getGT()) goto loc_82139F40;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,64
	ctx.r9.u64 = ctx.r9.u64 | 64;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_82139F40:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lfs f4,288(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 288);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,232(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,176(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82139948
	sub_82139948(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// mulli r11,r11,56
	r11.s64 = r11.s64 * 56;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,128
	ctx.r9.u64 = ctx.r9.u64 | 128;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
	// lwz r7,296(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 296);
	// lwz r6,240(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// lwz r5,184(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// lwz r4,128(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// bl 0x82139798
	sub_82139798(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// mulli r11,r11,56
	r11.s64 = r11.s64 * 56;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,256
	ctx.r9.u64 = ctx.r9.u64 | 256;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
	// lfs f4,300(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 300);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,244(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 244);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,188(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,132(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82139858
	sub_82139858(ctx, base);
	// addi r10,r1,132
	ctx.r10.s64 = ctx.r1.s64 + 132;
	// mulli r11,r3,56
	r11.s64 = ctx.r3.s64 * 56;
	// lfsx f13,r11,r10
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,2952(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2952);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// ble cr6,0x82139fe4
	if (!cr6.getGT()) goto loc_82139FE4;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,512
	ctx.r9.u64 = ctx.r9.u64 | 512;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_82139FE4:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lwz r7,292(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 292);
	// lwz r6,236(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// lwz r5,180(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r4,124(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// bl 0x82139798
	sub_82139798(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// mulli r11,r11,56
	r11.s64 = r11.s64 * 56;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,1024
	ctx.r9.u64 = ctx.r9.u64 | 1024;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
	// lwz r7,292(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 292);
	// lwz r6,236(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// lwz r5,180(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r4,124(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// bl 0x821396d8
	sub_821396D8(ctx, base);
	// addi r10,r1,124
	ctx.r10.s64 = ctx.r1.s64 + 124;
	// mulli r11,r3,56
	r11.s64 = ctx.r3.s64 * 56;
	// lwzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8213a05c
	if (!cr6.getGT()) goto loc_8213A05C;
	// addi r9,r1,140
	ctx.r9.s64 = ctx.r1.s64 + 140;
	// lwzx r10,r11,r9
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// rlwinm r8,r10,0,21,21
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x400;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne cr6,0x8213a05c
	if (!cr6.getEQ()) goto loc_8213A05C;
	// ori r10,r10,2048
	ctx.r10.u64 = ctx.r10.u64 | 2048;
	// stwx r10,r11,r9
	PPC_STORE_U32(r11.u32 + ctx.r9.u32, ctx.r10.u32);
loc_8213A05C:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lwz r7,312(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 312);
	// lwz r6,256(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 256);
	// lwz r5,200(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// lwz r4,144(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// bl 0x821396d8
	sub_821396D8(ctx, base);
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// mulli r11,r3,56
	r11.s64 = ctx.r3.s64 * 56;
	// lwzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8213a098
	if (!cr6.getGT()) goto loc_8213A098;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,8192
	ctx.r9.u64 = ctx.r9.u64 | 8192;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_8213A098:
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lwz r7,316(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 316);
	// lwz r6,260(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 260);
	// lwz r5,204(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// lwz r4,148(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// bl 0x82139798
	sub_82139798(ctx, base);
	// addi r10,r1,148
	ctx.r10.s64 = ctx.r1.s64 + 148;
	// mulli r11,r3,56
	r11.s64 = ctx.r3.s64 * 56;
	// lwzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8213a0d4
	if (!cr6.getGT()) goto loc_8213A0D4;
	// addi r10,r1,140
	ctx.r10.s64 = ctx.r1.s64 + 140;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// ori r9,r9,4096
	ctx.r9.u64 = ctx.r9.u64 | 4096;
	// stwx r9,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r9.u32);
loc_8213A0D4:
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// ble cr6,0x8213a264
	if (!cr6.getGT()) goto loc_8213A264;
	// addi r11,r1,140
	r11.s64 = ctx.r1.s64 + 140;
	// mr r8,r22
	ctx.r8.u64 = r22.u64;
	// addi r9,r17,88
	ctx.r9.s64 = r17.s64 + 88;
loc_8213A0E8:
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// bne cr6,0x8213a100
	if (!cr6.getEQ()) goto loc_8213A100;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// oris r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 | 65536;
	// b 0x8213a124
	goto loc_8213A124;
loc_8213A100:
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x8213a114
	if (!cr6.getEQ()) goto loc_8213A114;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// ori r10,r10,32768
	ctx.r10.u64 = ctx.r10.u64 | 32768;
	// b 0x8213a124
	goto loc_8213A124;
loc_8213A114:
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x8213a128
	if (!cr6.getEQ()) goto loc_8213A128;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// ori r10,r10,16384
	ctx.r10.u64 = ctx.r10.u64 | 16384;
loc_8213A124:
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_8213A128:
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// addi r9,r9,112
	ctx.r9.s64 = ctx.r9.s64 + 112;
	// addi r11,r11,56
	r11.s64 = r11.s64 + 56;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x8213a0e8
	if (!cr6.getEQ()) goto loc_8213A0E8;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// ble cr6,0x8213a264
	if (!cr6.getGT()) goto loc_8213A264;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r27,r1,140
	r27.s64 = ctx.r1.s64 + 140;
	// addi r26,r11,-1384
	r26.s64 = r11.s64 + -1384;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// addi r25,r11,-9248
	r25.s64 = r11.s64 + -9248;
	// lis r11,-3856
	r11.s64 = -252706816;
	// ori r28,r11,61681
	r28.u64 = r11.u64 | 61681;
loc_8213A160:
	// lwz r29,0(r27)
	r29.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// mr r30,r16
	r30.u64 = r16.u64;
	// li r11,16
	r11.s64 = 16;
loc_8213A16C:
	// slw r10,r15,r11
	ctx.r10.u64 = r11.u8 & 0x20 ? 0 : (r15.u32 << (r11.u8 & 0x3F));
	// and r9,r10,r29
	ctx.r9.u64 = ctx.r10.u64 & r29.u64;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x8213a198
	if (cr6.getEQ()) goto loc_8213A198;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// andc r29,r29,r10
	r29.u64 = r29.u64 & ~ctx.r10.u64;
	// lhzx r3,r11,r25
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + r25.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// mr r30,r15
	r30.u64 = r15.u64;
	// stw r3,8336(r11)
	PPC_STORE_U32(r11.u32 + 8336, ctx.r3.u32);
loc_8213A198:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x8213a1a4
	if (!cr6.getEQ()) goto loc_8213A1A4;
	// mr r30,r15
	r30.u64 = r15.u64;
loc_8213A1A4:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// mulhwu r10,r11,r28
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(r28.u32)) >> 32;
	// rlwinm r10,r10,28,4,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 28) & 0xFFFFFFF;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// beq cr6,0x8213a16c
	if (cr6.getEQ()) goto loc_8213A16C;
	// cmpwi cr6,r30,2
	cr6.compare<int32_t>(r30.s32, 2, xer);
	// stw r29,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r29.u32);
	// bge cr6,0x8213a250
	if (!cr6.getLT()) goto loc_8213A250;
loc_8213A1E0:
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r31,r3,31
	r31.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r9,0(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// mulhwu r10,r11,r28
	ctx.r10.u64 = (uint64_t(r11.u32) * uint64_t(r28.u32)) >> 32;
	// rlwinm r10,r10,28,4,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 28) & 0xFFFFFFF;
	// rlwinm r8,r10,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r8,r10
	ctx.r10.u64 = ctx.r8.u64 + ctx.r10.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// slw r10,r15,r11
	ctx.r10.u64 = r11.u8 & 0x20 ? 0 : (r15.u32 << (r11.u8 & 0x3F));
	// and r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 & ctx.r9.u64;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x8213a23c
	if (cr6.getEQ()) goto loc_8213A23C;
	// andc r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 & ~ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r10,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r10.u32);
	// lhzx r3,r11,r25
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + r25.u32);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// li r30,2
	r30.s64 = 2;
	// stw r3,8340(r11)
	PPC_STORE_U32(r11.u32 + 8340, ctx.r3.u32);
loc_8213A23C:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213a250
	if (cr6.getEQ()) goto loc_8213A250;
	// cmpwi cr6,r30,2
	cr6.compare<int32_t>(r30.s32, 2, xer);
	// blt cr6,0x8213a1e0
	if (cr6.getLT()) goto loc_8213A1E0;
loc_8213A250:
	// addi r22,r22,-1
	r22.s64 = r22.s64 + -1;
	// addi r27,r27,56
	r27.s64 = r27.s64 + 56;
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// bne cr6,0x8213a160
	if (!cr6.getEQ()) goto loc_8213A160;
loc_8213A264:
	// addi r1,r1,512
	ctx.r1.s64 = ctx.r1.s64 + 512;
	// addi r12,r1,-144
	r12.s64 = ctx.r1.s64 + -144;
	// bl 0x823ed594
	// b 0x823ed154
	return;
}

__attribute__((alias("__imp__sub_8213A278"))) PPC_WEAK_FUNC(sub_8213A278);
PPC_FUNC_IMPL(__imp__sub_8213A278) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r9,60
	ctx.r9.s64 = 60;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r8,8260(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8260, ctx.r8.u32);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// stw r9,8320(r11)
	PPC_STORE_U32(r11.u32 + 8320, ctx.r9.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13288(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13288);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bne cr6,0x8213a2c8
	if (!cr6.getEQ()) goto loc_8213A2C8;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,13292(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13292, r11.u32);
	// bl 0x8209f578
	sub_8209F578(ctx, base);
loc_8213A2C8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213A2D8"))) PPC_WEAK_FUNC(sub_8213A2D8);
PPC_FUNC_IMPL(__imp__sub_8213A2D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r19{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -72, f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r8
	r30.u64 = ctx.r8.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// extsw r10,r30
	ctx.r10.s64 = r30.s32;
	// lis r29,-31991
	r29.s64 = -2096562176;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// lfs f1,6580(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	ctx.f1.f64 = double(temp.f32);
	// std r10,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, ctx.r10.u64);
	// lfd f0,136(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// addi r7,r1,136
	ctx.r7.s64 = ctx.r1.s64 + 136;
	// addi r6,r1,128
	ctx.r6.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// lwz r4,-31544(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + -31544);
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// clrlwi r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213a374
	if (cr6.getEQ()) goto loc_8213A374;
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// subf r11,r11,r27
	r11.s64 = r27.s64 - r11.s64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// b 0x8213a378
	goto loc_8213A378;
loc_8213A374:
	// stw r27,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r27.u32);
loc_8213A378:
	// stw r25,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r25.u32);
	// cmplwi cr6,r26,6
	cr6.compare<uint32_t>(r26.u32, 6, xer);
	// bgt cr6,0x8213a400
	if (cr6.getGT()) goto loc_8213A400;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,-23652
	r12.s64 = r12.s64 + -23652;
	// rlwinm r0,r26,2,0,29
	r0.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r26.u64) {
	case 0:
		goto loc_8213A5DC;
	case 1:
		goto loc_8213A3B8;
	case 2:
		goto loc_8213A410;
	case 3:
		goto loc_8213A470;
	case 4:
		goto loc_8213A4C8;
	case 5:
		goto loc_8213A528;
	case 6:
		goto loc_8213A580;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-23076(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -23076);
	// lwz r16,-23624(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -23624);
	// lwz r16,-23536(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -23536);
	// lwz r16,-23440(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -23440);
	// lwz r16,-23352(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -23352);
	// lwz r16,-23256(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -23256);
	// lwz r16,-23168(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -23168);
loc_8213A3B8:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// lwz r6,-31544(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31544);
	// lis r8,255
	ctx.r8.s64 = 16711680;
	// stw r30,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r30.u32);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// ori r8,r8,176
	ctx.r8.u64 = ctx.r8.u64 | 176;
	// lwz r7,15120(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 15120);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_8213A400:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_8213A410:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lis r7,-31994
	ctx.r7.s64 = -2096758784;
	// lwz r6,-31544(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31544);
	// lis r9,112
	ctx.r9.s64 = 7340032;
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// lis r8,-24321
	ctx.r8.s64 = -1593901056;
	// stw r30,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r30.u32);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// ori r9,r9,160
	ctx.r9.u64 = ctx.r9.u64 | 160;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// ori r8,r8,41200
	ctx.r8.u64 = ctx.r8.u64 | 41200;
	// lwz r7,15120(r7)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + 15120);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8213e398
	sub_8213E398(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_8213A470:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// lwz r6,-31544(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31544);
	// lis r8,-192
	ctx.r8.s64 = -12582912;
	// stw r30,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r30.u32);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// ori r8,r8,16560
	ctx.r8.u64 = ctx.r8.u64 | 16560;
	// lwz r7,15120(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 15120);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_8213A4C8:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lis r7,-31994
	ctx.r7.s64 = -2096758784;
	// lwz r6,-31544(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31544);
	// lis r9,28672
	ctx.r9.s64 = 1879048192;
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// lis r8,-96
	ctx.r8.s64 = -6291456;
	// stw r30,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r30.u32);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// ori r9,r9,160
	ctx.r9.u64 = ctx.r9.u64 | 160;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// ori r8,r8,41200
	ctx.r8.u64 = ctx.r8.u64 | 41200;
	// lwz r7,15120(r7)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + 15120);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8213e398
	sub_8213E398(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_8213A528:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,0
	r11.s64 = 0;
	// lwz r6,-31544(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31544);
	// lis r8,16448
	ctx.r8.s64 = 1077936128;
	// stw r30,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r30.u32);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// ori r8,r8,65456
	ctx.r8.u64 = ctx.r8.u64 | 65456;
	// lwz r7,15120(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 15120);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_8213A580:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// lis r7,-31994
	ctx.r7.s64 = -2096758784;
	// lwz r6,-31544(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31544);
	// lis r8,-24416
	ctx.r8.s64 = -1600126976;
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// stw r30,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r30.u32);
	// li r9,28832
	ctx.r9.s64 = 28832;
	// ori r8,r8,65520
	ctx.r8.u64 = ctx.r8.u64 | 65520;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// lwz r7,15120(r7)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + 15120);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8213e398
	sub_8213E398(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_8213A5DC:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8213A5F0"))) PPC_WEAK_FUNC(sub_8213A5F0);
PPC_FUNC_IMPL(__imp__sub_8213A5F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// addi r5,r10,25236
	ctx.r5.s64 = ctx.r10.s64 + 25236;
	// mr r6,r11
	ctx.r6.u64 = r11.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8213a2d8
	sub_8213A2D8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8213A650"))) PPC_WEAK_FUNC(sub_8213A650);
PPC_FUNC_IMPL(__imp__sub_8213A650) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// extsw r11,r5
	r11.s64 = ctx.r5.s32;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// lfs f0,14212(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14212);
	f0.f64 = double(temp.f32);
	// fmuls f1,f31,f0
	ctx.f1.f64 = double(float(f31.f64 * f0.f64));
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// fmr f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = ctx.f1.f64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f0,6576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6576);
	f0.f64 = double(temp.f32);
	// fmuls f1,f31,f0
	ctx.f1.f64 = double(float(f31.f64 * f0.f64));
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// bl 0x823ed4c8
	sub_823ED4C8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mulli r9,r6,60
	ctx.r9.s64 = ctx.r6.s64 * 60;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// addi r5,r11,14196
	ctx.r5.s64 = r11.s64 + 14196;
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r4,20
	ctx.r4.s64 = 20;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// subf r7,r9,r11
	ctx.r7.s64 = r11.s64 - ctx.r9.s64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// lwz r11,-8952(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8952);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r3,r11,r31
	ctx.r3.u64 = r11.u64 + r31.u64;
	// bl 0x8213a2d8
	sub_8213A2D8(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8213A720"))) PPC_WEAK_FUNC(sub_8213A720);
PPC_FUNC_IMPL(__imp__sub_8213A720) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r19{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r29,r11,-1360
	r29.s64 = r11.s64 + -1360;
	// mulli r28,r30,112
	r28.s64 = r30.s64 * 112;
	// addi r11,r29,105
	r11.s64 = r29.s64 + 105;
	// lbzx r27,r28,r11
	r27.u64 = PPC_LOAD_U8(r28.u32 + r11.u32);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// li r31,0
	r31.s64 = 0;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmplwi cr6,r3,6
	cr6.compare<uint32_t>(ctx.r3.u32, 6, xer);
	// bgt cr6,0x8213a898
	if (cr6.getGT()) goto loc_8213A898;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,-22668
	r12.s64 = r12.s64 + -22668;
	// rlwinm r0,r3,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_8213A790;
	case 1:
		goto loc_8213A804;
	case 2:
		goto loc_8213A81C;
	case 3:
		goto loc_8213A790;
	case 4:
		goto loc_8213A790;
	case 5:
		goto loc_8213A830;
	case 6:
		goto loc_8213A830;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-22640(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -22640);
	// lwz r16,-22524(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -22524);
	// lwz r16,-22500(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -22500);
	// lwz r16,-22640(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -22640);
	// lwz r16,-22640(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -22640);
	// lwz r16,-22480(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -22480);
	// lwz r16,-22480(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -22480);
loc_8213A790:
	// li r11,0
	r11.s64 = 0;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// ble cr6,0x8213a7e4
	if (!cr6.getGT()) goto loc_8213A7E4;
	// rlwinm r10,r30,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r29,36
	ctx.r9.s64 = r29.s64 + 36;
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
loc_8213A7A8:
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// beq cr6,0x8213a7cc
	if (cr6.getEQ()) goto loc_8213A7CC;
	// mulli r10,r30,28
	ctx.r10.s64 = r30.s64 * 28;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addi r8,r29,36
	ctx.r8.s64 = r29.s64 + 36;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// add r31,r10,r31
	r31.u64 = ctx.r10.u64 + r31.u64;
	// b 0x8213a7d4
	goto loc_8213A7D4;
loc_8213A7CC:
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// subf r31,r10,r31
	r31.s64 = r31.s64 - ctx.r10.s64;
loc_8213A7D4:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r9,r9,112
	ctx.r9.s64 = ctx.r9.s64 + 112;
	// cmpw cr6,r11,r26
	cr6.compare<int32_t>(r11.s32, r26.s32, xer);
	// blt cr6,0x8213a7a8
	if (cr6.getLT()) goto loc_8213A7A8;
loc_8213A7E4:
	// addi r10,r29,32
	ctx.r10.s64 = r29.s64 + 32;
	// addi r11,r26,-2
	r11.s64 = r26.s64 + -2;
	// lwzx r10,r28,r10
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + ctx.r10.u32);
	// mullw r11,r10,r11
	r11.s64 = int64_t(ctx.r10.s32) * int64_t(r11.s32);
	// add r31,r11,r31
	r31.u64 = r11.u64 + r31.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_8213A804:
	// addi r11,r29,104
	r11.s64 = r29.s64 + 104;
	// lbzx r11,r28,r11
	r11.u64 = PPC_LOAD_U8(r28.u32 + r11.u32);
	// subfic r31,r11,4
	xer.ca = r11.u32 <= 4;
	r31.s64 = 4 - r11.s64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_8213A81C:
	// addi r11,r29,96
	r11.s64 = r29.s64 + 96;
	// lwzx r31,r28,r11
	r31.u64 = PPC_LOAD_U32(r28.u32 + r11.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_8213A830:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// ble cr6,0x8213a898
	if (!cr6.getGT()) goto loc_8213A898;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// addi r7,r29,36
	ctx.r7.s64 = r29.s64 + 36;
loc_8213A840:
	// lbz r11,69(r7)
	r11.u64 = PPC_LOAD_U8(ctx.r7.u32 + 69);
	// cmpw cr6,r11,r27
	cr6.compare<int32_t>(r11.s32, r27.s32, xer);
	// bne cr6,0x8213a888
	if (!cr6.getEQ()) goto loc_8213A888;
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// addi r10,r29,105
	ctx.r10.s64 = r29.s64 + 105;
loc_8213A858:
	// lbz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpw cr6,r9,r27
	cr6.compare<int32_t>(ctx.r9.s32, r27.s32, xer);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x8213a870
	if (cr6.getEQ()) goto loc_8213A870;
	// add r31,r9,r31
	r31.u64 = ctx.r9.u64 + r31.u64;
	// b 0x8213a874
	goto loc_8213A874;
loc_8213A870:
	// subf r31,r9,r31
	r31.s64 = r31.s64 - ctx.r9.s64;
loc_8213A874:
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r10,r10,112
	ctx.r10.s64 = ctx.r10.s64 + 112;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x8213a858
	if (!cr6.getEQ()) goto loc_8213A858;
loc_8213A888:
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// addi r7,r7,112
	ctx.r7.s64 = ctx.r7.s64 + 112;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x8213a840
	if (!cr6.getEQ()) goto loc_8213A840;
loc_8213A898:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8213A8A8"))) PPC_WEAK_FUNC(sub_8213A8A8);
PPC_FUNC_IMPL(__imp__sub_8213A8A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r19{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213a8e4
	if (cr6.getEQ()) goto loc_8213A8E4;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
loc_8213A8E4:
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// ble cr6,0x8213a994
	if (!cr6.getGT()) goto loc_8213A994;
	// li r30,0
	r30.s64 = 0;
loc_8213A8F4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8213a720
	sub_8213A720(ctx, base);
	// mr r11,r31
	r11.u64 = r31.u64;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// stwx r3,r30,r10
	PPC_STORE_U32(r30.u32 + ctx.r10.u32, ctx.r3.u32);
	// stwx r11,r30,r9
	PPC_STORE_U32(r30.u32 + ctx.r9.u32, r11.u32);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// blt cr6,0x8213a8f4
	if (cr6.getLT()) goto loc_8213A8F4;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// ble cr6,0x8213a994
	if (!cr6.getGT()) goto loc_8213A994;
	// addi r4,r29,-1
	ctx.r4.s64 = r29.s64 + -1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
loc_8213A930:
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x8213a988
	if (!cr6.getGT()) goto loc_8213A988;
	// li r11,0
	r11.s64 = 0;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
loc_8213A940:
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// lwz r7,4(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r6,0(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r7,r6
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r6.s32, xer);
	// ble cr6,0x8213a978
	if (!cr6.getGT()) goto loc_8213A978;
	// addi r8,r1,84
	ctx.r8.s64 = ctx.r1.s64 + 84;
	// stw r6,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r6.u32);
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// stw r7,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r7.u32);
	// lwzx r6,r11,r8
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// lwzx r31,r11,r9
	r31.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// stwx r6,r11,r9
	PPC_STORE_U32(r11.u32 + ctx.r9.u32, ctx.r6.u32);
	// stwx r31,r11,r8
	PPC_STORE_U32(r11.u32 + ctx.r8.u32, r31.u32);
loc_8213A978:
	// addi r5,r5,-1
	ctx.r5.s64 = ctx.r5.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x8213a940
	if (!cr6.getEQ()) goto loc_8213A940;
loc_8213A988:
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8213a930
	if (!cr6.getEQ()) goto loc_8213A930;
loc_8213A994:
	// li r11,0
	r11.s64 = 0;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// ble cr6,0x8213a9c0
	if (!cr6.getGT()) goto loc_8213A9C0;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
loc_8213A9A4:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r9,r28
	cr6.compare<int32_t>(ctx.r9.s32, r28.s32, xer);
	// beq cr6,0x8213a9c0
	if (cr6.getEQ()) goto loc_8213A9C0;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r11,r29
	cr6.compare<int32_t>(r11.s32, r29.s32, xer);
	// blt cr6,0x8213a9a4
	if (cr6.getLT()) goto loc_8213A9A4;
loc_8213A9C0:
	// li r9,0
	ctx.r9.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8213aa00
	if (cr6.getLT()) goto loc_8213AA00;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r7,r1,96
	ctx.r7.s64 = ctx.r1.s64 + 96;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// lwzx r8,r8,r7
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r7.u32);
loc_8213A9DC:
	// lwz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// beq cr6,0x8213a9f8
	if (cr6.getEQ()) goto loc_8213A9F8;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// ble cr6,0x8213a9dc
	if (!cr6.getGT()) goto loc_8213A9DC;
loc_8213A9F8:
	// cmplwi cr6,r9,3
	cr6.compare<uint32_t>(ctx.r9.u32, 3, xer);
	// bgt cr6,0x8213aa80
	if (cr6.getGT()) goto loc_8213AA80;
loc_8213AA00:
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,-21992
	r12.s64 = r12.s64 + -21992;
	// rlwinm r0,r9,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r9.u64) {
	case 0:
		goto loc_8213AA28;
	case 1:
		goto loc_8213AA64;
	case 2:
		goto loc_8213AA34;
	case 3:
		goto loc_8213AA50;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-21976(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21976);
	// lwz r16,-21916(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21916);
	// lwz r16,-21964(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21964);
	// lwz r16,-21936(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21936);
loc_8213AA28:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40977
	ctx.r3.u64 = ctx.r3.u64 | 40977;
	// b 0x8213aa6c
	goto loc_8213AA6C;
loc_8213AA34:
	// cmpwi cr6,r25,5
	cr6.compare<int32_t>(r25.s32, 5, xer);
	// beq cr6,0x8213aa64
	if (cr6.getEQ()) goto loc_8213AA64;
	// cmpwi cr6,r25,6
	cr6.compare<int32_t>(r25.s32, 6, xer);
	// beq cr6,0x8213aa64
	if (cr6.getEQ()) goto loc_8213AA64;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40979
	ctx.r3.u64 = ctx.r3.u64 | 40979;
	// b 0x8213aa6c
	goto loc_8213AA6C;
loc_8213AA50:
	// cmpwi cr6,r25,6
	cr6.compare<int32_t>(r25.s32, 6, xer);
	// beq cr6,0x8213aa64
	if (cr6.getEQ()) goto loc_8213AA64;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40980
	ctx.r3.u64 = ctx.r3.u64 | 40980;
	// b 0x8213aa6c
	goto loc_8213AA6C;
loc_8213AA64:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40978
	ctx.r3.u64 = ctx.r3.u64 | 40978;
loc_8213AA6C:
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
loc_8213AA80:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8213AA88"))) PPC_WEAK_FUNC(sub_8213AA88);
PPC_FUNC_IMPL(__imp__sub_8213AA88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r19{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmplwi cr6,r3,6
	cr6.compare<uint32_t>(ctx.r3.u32, 6, xer);
	// bgt cr6,0x8213ab10
	if (cr6.getGT()) goto loc_8213AB10;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,-21824
	r12.s64 = r12.s64 + -21824;
	// rlwinm r0,r3,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_8213AADC;
	case 1:
		goto loc_8213AAF4;
	case 2:
		goto loc_8213AADC;
	case 3:
		goto loc_8213AADC;
	case 4:
		goto loc_8213AADC;
	case 5:
		goto loc_8213AADC;
	case 6:
		goto loc_8213AADC;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-21796(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21796);
	// lwz r16,-21772(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21772);
	// lwz r16,-21796(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21796);
	// lwz r16,-21796(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21796);
	// lwz r16,-21796(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21796);
	// lwz r16,-21796(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21796);
	// lwz r16,-21796(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21796);
loc_8213AADC:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8213AAF4:
	// cntlzw r11,r31
	r11.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8213AB10:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213AB28"))) PPC_WEAK_FUNC(sub_8213AB28);
PPC_FUNC_IMPL(__imp__sub_8213AB28) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r19{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmplwi cr6,r3,6
	cr6.compare<uint32_t>(ctx.r3.u32, 6, xer);
	// bgt cr6,0x8213ab88
	if (cr6.getGT()) goto loc_8213AB88;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,-21672
	r12.s64 = r12.s64 + -21672;
	// rlwinm r0,r3,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_8213AB74;
	case 1:
		goto loc_8213AB88;
	case 2:
		goto loc_8213AB74;
	case 3:
		goto loc_8213AB74;
	case 4:
		goto loc_8213AB74;
	case 5:
		goto loc_8213AB74;
	case 6:
		goto loc_8213AB74;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-21644(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21644);
	// lwz r16,-21624(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21624);
	// lwz r16,-21644(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21644);
	// lwz r16,-21644(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21644);
	// lwz r16,-21644(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21644);
	// lwz r16,-21644(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21644);
	// lwz r16,-21644(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -21644);
loc_8213AB74:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8213AB88:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213ABA0"))) PPC_WEAK_FUNC(sub_8213ABA0);
PPC_FUNC_IMPL(__imp__sub_8213ABA0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stfd f30,-168(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -168, f30.u64);
	// stfd f31,-160(r1)
	PPC_STORE_U64(ctx.r1.u32 + -160, f31.u64);
	// stwu r1,-464(r1)
	ea = -464 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r14,r3
	r14.u64 = ctx.r3.u64;
	// mr r17,r4
	r17.u64 = ctx.r4.u64;
	// mr r16,r5
	r16.u64 = ctx.r5.u64;
	// mr r15,r6
	r15.u64 = ctx.r6.u64;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// mr r25,r8
	r25.u64 = ctx.r8.u64;
	// mr r26,r9
	r26.u64 = ctx.r9.u64;
	// mr r24,r10
	r24.u64 = ctx.r10.u64;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lis r22,-32033
	r22.s64 = -2099314688;
	// mr r19,r3
	r19.u64 = ctx.r3.u64;
	// lwz r11,-8912(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8912);
	// lwz r10,-8916(r22)
	ctx.r10.u64 = PPC_LOAD_U32(r22.u32 + -8916);
	// subf r29,r11,r10
	r29.s64 = ctx.r10.s64 - r11.s64;
	// add r28,r11,r10
	r28.u64 = r11.u64 + ctx.r10.u64;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// lwz r11,-8920(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8920);
	// lwz r10,-8924(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8924);
	// subf r18,r11,r10
	r18.s64 = ctx.r10.s64 - r11.s64;
	// add r20,r11,r10
	r20.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8213ae34
	if (!cr6.getEQ()) goto loc_8213AE34;
	// cmpwi cr6,r19,2
	cr6.compare<int32_t>(r19.s32, 2, xer);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// bne cr6,0x8213acdc
	if (!cr6.getEQ()) goto loc_8213ACDC;
	// lwz r28,564(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 564);
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// lwz r29,548(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 548);
	// addi r31,r11,-1360
	r31.s64 = r11.s64 + -1360;
	// lwz r27,556(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 556);
	// bne cr6,0x8213ac44
	if (!cr6.getEQ()) goto loc_8213AC44;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// b 0x8213ac64
	goto loc_8213AC64;
loc_8213AC44:
	// mulli r10,r15,112
	ctx.r10.s64 = r15.s64 * 112;
	// lbz r11,105(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 105);
	// addi r9,r31,105
	ctx.r9.s64 = r31.s64 + 105;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// lbzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8213ac64
	if (cr6.getEQ()) goto loc_8213AC64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
loc_8213AC64:
	// lwz r11,-8916(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + -8916);
	// li r7,-1
	ctx.r7.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// add r4,r18,r16
	ctx.r4.u64 = r18.u64 + r16.u64;
	// add r3,r11,r17
	ctx.r3.u64 = r11.u64 + r17.u64;
	// mtctr r14
	ctr.u64 = r14.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r15,1
	cr6.compare<int32_t>(r15.s32, 1, xer);
	// bne cr6,0x8213ac90
	if (!cr6.getEQ()) goto loc_8213AC90;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// b 0x8213acb0
	goto loc_8213ACB0;
loc_8213AC90:
	// mulli r10,r15,112
	ctx.r10.s64 = r15.s64 * 112;
	// lbz r11,217(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 217);
	// addi r9,r31,105
	ctx.r9.s64 = r31.s64 + 105;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// lbzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8213acb0
	if (cr6.getEQ()) goto loc_8213ACB0;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
loc_8213ACB0:
	// lwz r11,-8916(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + -8916);
	// li r7,-1
	ctx.r7.s64 = -1;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// add r4,r20,r16
	ctx.r4.u64 = r20.u64 + r16.u64;
	// add r3,r11,r17
	ctx.r3.u64 = r11.u64 + r17.u64;
	// mtctr r14
	ctr.u64 = r14.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,464
	ctx.r1.s64 = ctx.r1.s64 + 464;
	// lfd f30,-168(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -168);
	// lfd f31,-160(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x823ed150
	return;
loc_8213ACDC:
	// lwz r22,564(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 564);
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// lwz r23,548(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 548);
	// addi r27,r11,-1360
	r27.s64 = r11.s64 + -1360;
	// lwz r21,556(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 556);
	// bne cr6,0x8213acfc
	if (!cr6.getEQ()) goto loc_8213ACFC;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// b 0x8213ad1c
	goto loc_8213AD1C;
loc_8213ACFC:
	// mulli r10,r15,112
	ctx.r10.s64 = r15.s64 * 112;
	// lbz r11,105(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 105);
	// addi r9,r27,105
	ctx.r9.s64 = r27.s64 + 105;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// lbzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8213ad1c
	if (cr6.getEQ()) goto loc_8213AD1C;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
loc_8213AD1C:
	// add r31,r18,r16
	r31.u64 = r18.u64 + r16.u64;
	// add r29,r29,r17
	r29.u64 = r29.u64 + r17.u64;
	// li r7,-1
	ctx.r7.s64 = -1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mtctr r14
	ctr.u64 = r14.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r15,1
	cr6.compare<int32_t>(r15.s32, 1, xer);
	// bne cr6,0x8213ad4c
	if (!cr6.getEQ()) goto loc_8213AD4C;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// b 0x8213ad6c
	goto loc_8213AD6C;
loc_8213AD4C:
	// mulli r10,r15,112
	ctx.r10.s64 = r15.s64 * 112;
	// lbz r11,217(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 217);
	// addi r9,r27,105
	ctx.r9.s64 = r27.s64 + 105;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// lbzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8213ad6c
	if (cr6.getEQ()) goto loc_8213AD6C;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
loc_8213AD6C:
	// add r30,r28,r17
	r30.u64 = r28.u64 + r17.u64;
	// li r7,-1
	ctx.r7.s64 = -1;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mtctr r14
	ctr.u64 = r14.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r15,2
	cr6.compare<int32_t>(r15.s32, 2, xer);
	// bne cr6,0x8213ad98
	if (!cr6.getEQ()) goto loc_8213AD98;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// b 0x8213adb8
	goto loc_8213ADB8;
loc_8213AD98:
	// mulli r10,r15,112
	ctx.r10.s64 = r15.s64 * 112;
	// lbz r11,329(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 329);
	// addi r9,r27,105
	ctx.r9.s64 = r27.s64 + 105;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// lbzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8213adb8
	if (cr6.getEQ()) goto loc_8213ADB8;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
loc_8213ADB8:
	// add r31,r20,r16
	r31.u64 = r20.u64 + r16.u64;
	// li r7,-1
	ctx.r7.s64 = -1;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mtctr r14
	ctr.u64 = r14.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r19,4
	cr6.compare<int32_t>(r19.s32, 4, xer);
	// bne cr6,0x8213b1b0
	if (!cr6.getEQ()) goto loc_8213B1B0;
	// cmpwi cr6,r15,3
	cr6.compare<int32_t>(r15.s32, 3, xer);
	// bne cr6,0x8213adec
	if (!cr6.getEQ()) goto loc_8213ADEC;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// b 0x8213ae0c
	goto loc_8213AE0C;
loc_8213ADEC:
	// mulli r10,r15,112
	ctx.r10.s64 = r15.s64 * 112;
	// lbz r11,441(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 441);
	// addi r9,r27,105
	ctx.r9.s64 = r27.s64 + 105;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// lbzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8213ae0c
	if (cr6.getEQ()) goto loc_8213AE0C;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
loc_8213AE0C:
	// li r7,-1
	ctx.r7.s64 = -1;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mtctr r14
	ctr.u64 = r14.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,464
	ctx.r1.s64 = ctx.r1.s64 + 464;
	// lfd f30,-168(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -168);
	// lfd f31,-160(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x823ed150
	return;
loc_8213AE34:
	// li r11,0
	r11.s64 = 0;
	// stw r30,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r30.u32);
	// stw r25,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r25.u32);
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// stw r26,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r26.u32);
	// stw r24,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r24.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r11,2
	r11.s64 = 2;
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// li r11,3
	r11.s64 = 3;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// ble cr6,0x8213af14
	if (!cr6.getGT()) goto loc_8213AF14;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// li r7,0
	ctx.r7.s64 = 0;
	// subfic r4,r10,4
	xer.ca = ctx.r10.u32 <= 4;
	ctx.r4.s64 = 4 - ctx.r10.s64;
loc_8213AE7C:
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// mr r9,r5
	ctx.r9.u64 = ctx.r5.u64;
	// cmpw cr6,r5,r19
	cr6.compare<int32_t>(ctx.r5.s32, r19.s32, xer);
	// bge cr6,0x8213aee4
	if (!cr6.getLT()) goto loc_8213AEE4;
	// add r10,r4,r7
	ctx.r10.u64 = ctx.r4.u64 + ctx.r7.u64;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// add r10,r10,r6
	ctx.r10.u64 = ctx.r10.u64 + ctx.r6.u64;
loc_8213AE9C:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r31,r1,112
	r31.s64 = ctx.r1.s64 + 112;
	// addi r30,r1,112
	r30.s64 = ctx.r1.s64 + 112;
	// lwzx r6,r10,r6
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r6.u32);
	// lwzx r3,r8,r3
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r3.u32);
	// rlwinm r6,r6,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r3,r3,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r6,r6,r31
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + r31.u32);
	// lwzx r3,r3,r30
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + r30.u32);
	// cmpw cr6,r3,r6
	cr6.compare<int32_t>(ctx.r3.s32, ctx.r6.s32, xer);
	// bge cr6,0x8213aed4
	if (!cr6.getLT()) goto loc_8213AED4;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
loc_8213AED4:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r9,r19
	cr6.compare<int32_t>(ctx.r9.s32, r19.s32, xer);
	// blt cr6,0x8213ae9c
	if (cr6.getLT()) goto loc_8213AE9C;
loc_8213AEE4:
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// add r10,r7,r11
	ctx.r10.u64 = ctx.r7.u64 + r11.u64;
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
	// cmpw cr6,r11,r19
	cr6.compare<int32_t>(r11.s32, r19.s32, xer);
	// lwzx r6,r9,r8
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// lwz r5,0(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stwx r5,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, ctx.r5.u32);
	// stw r6,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r6.u32);
	// blt cr6,0x8213ae7c
	if (cr6.getLT()) goto loc_8213AE7C;
loc_8213AF14:
	// li r11,10
	r11.s64 = 10;
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r25,-8928(r11)
	r25.u64 = PPC_LOAD_U32(r11.u32 + -8928);
	// ble cr6,0x8213b020
	if (!cr6.getGT()) goto loc_8213B020;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r30,r1,160
	r30.s64 = ctx.r1.s64 + 160;
	// li r29,0
	r29.s64 = 0;
	// lfs f30,12272(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 12272);
	f30.f64 = double(temp.f32);
	// mr r23,r19
	r23.u64 = r19.u64;
	// lfs f31,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	f31.f64 = double(temp.f32);
	// lis r26,-32033
	r26.s64 = -2099314688;
	// lis r28,-31991
	r28.s64 = -2096562176;
	// addi r27,r11,-1384
	r27.s64 = r11.s64 + -1384;
	// li r24,8
	r24.s64 = 8;
loc_8213AF68:
	// lwzx r11,r29,r27
	r11.u64 = PPC_LOAD_U32(r29.u32 + r27.u32);
	// li r4,17
	ctx.r4.s64 = 17;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r5,r11,8532
	ctx.r5.s64 = r11.s64 + 8532;
	// bl 0x823edad0
	sub_823EDAD0(ctx, base);
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// addi r7,r1,108
	ctx.r7.s64 = ctx.r1.s64 + 108;
	// lwz r4,-31544(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + -31544);
	// add r31,r29,r11
	r31.u64 = r29.u64 + r11.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,-8932(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -8932);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// ble cr6,0x8213affc
	if (!cr6.getGT()) goto loc_8213AFFC;
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// lwz r4,-31544(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + -31544);
	// addi r7,r1,108
	ctx.r7.s64 = ctx.r1.s64 + 108;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stwx r24,r29,r11
	PPC_STORE_U32(r29.u32 + r11.u32, r24.u32);
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
loc_8213AFFC:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpw cr6,r25,r11
	cr6.compare<int32_t>(r25.s32, r11.s32, xer);
	// bgt cr6,0x8213b00c
	if (cr6.getGT()) goto loc_8213B00C;
	// mr r25,r11
	r25.u64 = r11.u64;
loc_8213B00C:
	// addi r23,r23,-1
	r23.s64 = r23.s64 + -1;
	// addi r30,r30,34
	r30.s64 = r30.s64 + 34;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// bne cr6,0x8213af68
	if (!cr6.getEQ()) goto loc_8213AF68;
loc_8213B020:
	// lis r11,-32033
	r11.s64 = -2099314688;
	// add r29,r18,r16
	r29.u64 = r18.u64 + r16.u64;
	// lwz r11,-8936(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8936);
	// add r10,r25,r11
	ctx.r10.u64 = r25.u64 + r11.u64;
	// lwz r11,-8916(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + -8916);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r26,r11,r17
	r26.u64 = r11.u64 + r17.u64;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213b060
	if (cr6.getEQ()) goto loc_8213B060;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// beq cr6,0x8213b060
	if (cr6.getEQ()) goto loc_8213B060;
	// bl 0x820eb800
	sub_820EB800(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x8213b0c0
	if (!cr6.getEQ()) goto loc_8213B0C0;
loc_8213B060:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,8528(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8528);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x8213b07c
	if (cr6.getEQ()) goto loc_8213B07C;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x8213b0c0
	if (!cr6.getEQ()) goto loc_8213B0C0;
loc_8213B07C:
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lis r31,-32033
	r31.s64 = -2099314688;
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// lwz r11,-8940(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -8940);
	// subf r30,r11,r10
	r30.s64 = ctx.r10.s64 - r11.s64;
	// bl 0x8210e208
	sub_8210E208(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// cmpw cr6,r26,r11
	cr6.compare<int32_t>(r26.s32, r11.s32, xer);
	// blt cr6,0x8213b0c0
	if (cr6.getLT()) goto loc_8213B0C0;
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,-8940(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -8940);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// subf r31,r11,r10
	r31.s64 = ctx.r10.s64 - r11.s64;
	// bl 0x8210e208
	sub_8210E208(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r26,r11,r31
	r26.u64 = r11.u64 + r31.u64;
loc_8213B0C0:
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// ble cr6,0x8213b1b0
	if (!cr6.getGT()) goto loc_8213B1B0;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r21,564(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 564);
	// mr r22,r19
	r22.u64 = r19.u64;
	// lwz r20,556(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 556);
	// lwz r19,548(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 548);
	// li r25,0
	r25.s64 = 0;
	// lis r24,-32033
	r24.s64 = -2099314688;
	// lis r27,-32033
	r27.s64 = -2099314688;
	// addi r23,r11,-1360
	r23.s64 = r11.s64 + -1360;
loc_8213B0EC:
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lwzx r28,r25,r11
	r28.u64 = PPC_LOAD_U32(r25.u32 + r11.u32);
	// cmpw cr6,r15,r28
	cr6.compare<int32_t>(r15.s32, r28.s32, xer);
	// bne cr6,0x8213b104
	if (!cr6.getEQ()) goto loc_8213B104;
	// mr r30,r19
	r30.u64 = r19.u64;
	// b 0x8213b12c
	goto loc_8213B12C;
loc_8213B104:
	// addi r10,r23,105
	ctx.r10.s64 = r23.s64 + 105;
	// mulli r11,r28,112
	r11.s64 = r28.s64 * 112;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// mulli r9,r15,112
	ctx.r9.s64 = r15.s64 * 112;
	// addi r10,r23,105
	ctx.r10.s64 = r23.s64 + 105;
	// mr r30,r20
	r30.u64 = r20.u64;
	// lbzx r10,r9,r10
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r10.u32);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8213b12c
	if (cr6.getEQ()) goto loc_8213B12C;
	// mr r30,r21
	r30.u64 = r21.u64;
loc_8213B12C:
	// rlwinm r31,r28,2,0,29
	r31.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,-8948(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -8948);
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// li r7,-1
	ctx.r7.s64 = -1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// add r3,r26,r11
	ctx.r3.u64 = r26.u64 + r11.u64;
	// lwzx r5,r31,r10
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + ctx.r10.u32);
	// mtctr r14
	ctr.u64 = r14.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213b1a0
	if (cr6.getEQ()) goto loc_8213B1A0;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// addi r9,r1,128
	ctx.r9.s64 = ctx.r1.s64 + 128;
	// mulli r11,r28,34
	r11.s64 = r28.s64 * 34;
	// lwzx r7,r31,r10
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + ctx.r10.u32);
	// lwzx r8,r25,r9
	ctx.r8.u64 = PPC_LOAD_U32(r25.u32 + ctx.r9.u32);
	// addi r10,r1,160
	ctx.r10.s64 = ctx.r1.s64 + 160;
	// subf r9,r7,r26
	ctx.r9.s64 = r26.s64 - ctx.r7.s64;
	// li r7,0
	ctx.r7.s64 = 0;
	// add r5,r11,r10
	ctx.r5.u64 = r11.u64 + ctx.r10.u64;
	// lwz r11,-8948(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -8948);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// subf r3,r11,r9
	ctx.r3.s64 = ctx.r9.s64 - r11.s64;
	// bl 0x8213a2d8
	sub_8213A2D8(ctx, base);
	// lwz r11,-8944(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -8944);
	// add r29,r29,r11
	r29.u64 = r29.u64 + r11.u64;
loc_8213B1A0:
	// addi r22,r22,-1
	r22.s64 = r22.s64 + -1;
	// addi r25,r25,4
	r25.s64 = r25.s64 + 4;
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// bne cr6,0x8213b0ec
	if (!cr6.getEQ()) goto loc_8213B0EC;
loc_8213B1B0:
	// addi r1,r1,464
	ctx.r1.s64 = ctx.r1.s64 + 464;
	// lfd f30,-168(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -168);
	// lfd f31,-160(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_8213B1C0"))) PPC_WEAK_FUNC(sub_8213B1C0);
PPC_FUNC_IMPL(__imp__sub_8213B1C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13304(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213b1d8
	if (cr6.getEQ()) goto loc_8213B1D8;
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_8213B1D8:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r10,-1364(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,8320(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8320);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bgt cr6,0x8213b1f4
	if (cr6.getGT()) goto loc_8213B1F4;
	// li r11,0
	r11.s64 = 0;
loc_8213B1F4:
	// lwz r10,8260(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8260);
	// or r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 | r11.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213B200"))) PPC_WEAK_FUNC(sub_8213B200);
PPC_FUNC_IMPL(__imp__sub_8213B200) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,13292(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 13292);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213B210"))) PPC_WEAK_FUNC(sub_8213B210);
PPC_FUNC_IMPL(__imp__sub_8213B210) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// li r11,0
	r11.s64 = 0;
	// lwz r9,-8956(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8956);
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// addi r8,r10,-9208
	ctx.r8.s64 = ctx.r10.s64 + -9208;
	// ble cr6,0x8213b24c
	if (!cr6.getGT()) goto loc_8213B24C;
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
loc_8213B230:
	// lwz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r7,r3
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r3.s32, xer);
	// beq cr6,0x8213b254
	if (cr6.getEQ()) goto loc_8213B254;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,12
	ctx.r10.s64 = ctx.r10.s64 + 12;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x8213b230
	if (cr6.getLT()) goto loc_8213B230;
loc_8213B24C:
	// mr r3,r8
	ctx.r3.u64 = ctx.r8.u64;
	// blr 
	return;
loc_8213B254:
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r8
	ctx.r3.u64 = r11.u64 + ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213B268"))) PPC_WEAK_FUNC(sub_8213B268);
PPC_FUNC_IMPL(__imp__sub_8213B268) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// li r11,0
	r11.s64 = 0;
	// lwz r9,-8956(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8956);
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// addi r8,r10,-9208
	ctx.r8.s64 = ctx.r10.s64 + -9208;
	// ble cr6,0x8213b2a4
	if (!cr6.getGT()) goto loc_8213B2A4;
	// addi r10,r8,4
	ctx.r10.s64 = ctx.r8.s64 + 4;
loc_8213B288:
	// lwz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r7,r3
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r3.s32, xer);
	// beq cr6,0x8213b2ac
	if (cr6.getEQ()) goto loc_8213B2AC;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,12
	ctx.r10.s64 = ctx.r10.s64 + 12;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x8213b288
	if (cr6.getLT()) goto loc_8213B288;
loc_8213B2A4:
	// mr r3,r8
	ctx.r3.u64 = ctx.r8.u64;
	// blr 
	return;
loc_8213B2AC:
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r8
	ctx.r3.u64 = r11.u64 + ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213B2C0"))) PPC_WEAK_FUNC(sub_8213B2C0);
PPC_FUNC_IMPL(__imp__sub_8213B2C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32033
	r11.s64 = -2099314688;
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r5,-8956(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + -8956);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// addi r8,r11,-9208
	ctx.r8.s64 = r11.s64 + -9208;
	// ble cr6,0x8213b3b8
	if (!cr6.getGT()) goto loc_8213B3B8;
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_8213B2E0:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r9,r3
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r3.s32, xer);
	// beq cr6,0x8213b304
	if (cr6.getEQ()) goto loc_8213B304;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// cmpw cr6,r10,r5
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r5.s32, xer);
	// blt cr6,0x8213b2e0
	if (cr6.getLT()) goto loc_8213B2E0;
	// mr r3,r8
	ctx.r3.u64 = ctx.r8.u64;
	// blr 
	return;
loc_8213B304:
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r5
	cr6.compare<int32_t>(r11.s32, ctx.r5.s32, xer);
	// bge cr6,0x8213b354
	if (!cr6.getLT()) goto loc_8213B354;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r6,r8,4
	ctx.r6.s64 = ctx.r8.s64 + 4;
	// add r4,r10,r9
	ctx.r4.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r4,r4,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// addi r7,r8,4
	ctx.r7.s64 = ctx.r8.s64 + 4;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r6,r4,r6
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r4.u32 + ctx.r6.u32);
	// add r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 + ctx.r7.u64;
loc_8213B338:
	// lwz r7,0(r9)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmpw cr6,r7,r6
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r6.s32, xer);
	// beq cr6,0x8213b394
	if (cr6.getEQ()) goto loc_8213B394;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r9,r9,12
	ctx.r9.s64 = ctx.r9.s64 + 12;
	// cmpw cr6,r11,r5
	cr6.compare<int32_t>(r11.s32, ctx.r5.s32, xer);
	// blt cr6,0x8213b338
	if (cr6.getLT()) goto loc_8213B338;
loc_8213B354:
	// rlwinm r7,r10,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r6,r8,4
	ctx.r6.s64 = ctx.r8.s64 + 4;
	// add r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 + ctx.r7.u64;
	// li r11,0
	r11.s64 = 0;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r8,4
	ctx.r9.s64 = ctx.r8.s64 + 4;
	// lwzx r10,r10,r6
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r6.u32);
loc_8213B370:
	// lwz r7,0(r9)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmpw cr6,r7,r10
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r10.s32, xer);
	// beq cr6,0x8213b3a8
	if (cr6.getEQ()) goto loc_8213B3A8;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r9,r9,12
	ctx.r9.s64 = ctx.r9.s64 + 12;
	// cmpw cr6,r11,r5
	cr6.compare<int32_t>(r11.s32, ctx.r5.s32, xer);
	// blt cr6,0x8213b370
	if (cr6.getLT()) goto loc_8213B370;
	// mr r3,r8
	ctx.r3.u64 = ctx.r8.u64;
	// blr 
	return;
loc_8213B394:
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r8
	ctx.r3.u64 = r11.u64 + ctx.r8.u64;
	// blr 
	return;
loc_8213B3A8:
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
loc_8213B3B8:
	// mr r3,r8
	ctx.r3.u64 = ctx.r8.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213B3C0"))) PPC_WEAK_FUNC(sub_8213B3C0);
PPC_FUNC_IMPL(__imp__sub_8213B3C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// li r11,0
	r11.s64 = 0;
	// lwz r5,-8956(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8956);
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// addi r9,r10,-9208
	ctx.r9.s64 = ctx.r10.s64 + -9208;
	// ble cr6,0x8213b4d0
	if (!cr6.getGT()) goto loc_8213B4D0;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
loc_8213B3E0:
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r8,r3
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r3.s32, xer);
	// beq cr6,0x8213b404
	if (cr6.getEQ()) goto loc_8213B404;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,12
	ctx.r10.s64 = ctx.r10.s64 + 12;
	// cmpw cr6,r11,r5
	cr6.compare<int32_t>(r11.s32, ctx.r5.s32, xer);
	// blt cr6,0x8213b3e0
	if (cr6.getLT()) goto loc_8213B3E0;
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// blr 
	return;
loc_8213B404:
	// addi r10,r11,-1
	ctx.r10.s64 = r11.s64 + -1;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x8213b454
	if (cr6.getLT()) goto loc_8213B454;
	// rlwinm r8,r11,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r6,r9,4
	ctx.r6.s64 = ctx.r9.s64 + 4;
	// add r4,r11,r8
	ctx.r4.u64 = r11.u64 + ctx.r8.u64;
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r4,r4,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// addi r7,r9,4
	ctx.r7.s64 = ctx.r9.s64 + 4;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r6,r4,r6
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r4.u32 + ctx.r6.u32);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
loc_8213B438:
	// lwz r7,0(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// cmpw cr6,r7,r6
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r6.s32, xer);
	// beq cr6,0x8213b4ac
	if (cr6.getEQ()) goto loc_8213B4AC;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r8,r8,-12
	ctx.r8.s64 = ctx.r8.s64 + -12;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x8213b438
	if (!cr6.getLT()) goto loc_8213B438;
loc_8213B454:
	// addi r10,r5,-1
	ctx.r10.s64 = ctx.r5.s64 + -1;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x8213b4d0
	if (cr6.getLT()) goto loc_8213B4D0;
	// rlwinm r7,r11,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r6,r9,4
	ctx.r6.s64 = ctx.r9.s64 + 4;
	// add r7,r11,r7
	ctx.r7.u64 = r11.u64 + ctx.r7.u64;
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r8,r9,4
	ctx.r8.s64 = ctx.r9.s64 + 4;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r7,r7,r6
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r6.u32);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
loc_8213B488:
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r8,r7
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r7.s32, xer);
	// beq cr6,0x8213b4c0
	if (cr6.getEQ()) goto loc_8213B4C0;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,-12
	r11.s64 = r11.s64 + -12;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge cr6,0x8213b488
	if (!cr6.getLT()) goto loc_8213B488;
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// blr 
	return;
loc_8213B4AC:
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r9
	ctx.r3.u64 = r11.u64 + ctx.r9.u64;
	// blr 
	return;
loc_8213B4C0:
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
loc_8213B4D0:
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213B4D8"))) PPC_WEAK_FUNC(sub_8213B4D8);
PPC_FUNC_IMPL(__imp__sub_8213B4D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r19{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ca110
	sub_820CA110(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82139518
	sub_82139518(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213b54c
	if (cr6.getEQ()) goto loc_8213B54C;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r8,170
	ctx.r8.s64 = 170;
	// addi r7,r11,24828
	ctx.r7.s64 = r11.s64 + 24828;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r31,-1364(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r3,8524(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8524);
	// bl 0x8213b2c0
	sub_8213B2C0(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// stw r11,8524(r31)
	PPC_STORE_U32(r31.u32 + 8524, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B54C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82139490
	sub_82139490(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213b5a4
	if (cr6.getEQ()) goto loc_8213B5A4;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r8,170
	ctx.r8.s64 = 170;
	// addi r7,r11,24828
	ctx.r7.s64 = r11.s64 + 24828;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// lwz r31,-1364(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r3,8524(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8524);
	// bl 0x8213b3c0
	sub_8213B3C0(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// stw r11,8524(r31)
	PPC_STORE_U32(r31.u32 + 8524, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B5A4:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// blt cr6,0x8213b9d0
	if (cr6.getLT()) goto loc_8213B9D0;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r3,8524(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 8524);
	// bl 0x8213b210
	sub_8213B210(ctx, base);
	// lis r4,16
	ctx.r4.s64 = 1048576;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// ori r4,r4,4096
	ctx.r4.u64 = ctx.r4.u64 | 4096;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8213b968
	if (!cr6.getEQ()) goto loc_8213B968;
	// lis r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// ori r4,r4,32768
	ctx.r4.u64 = ctx.r4.u64 | 32768;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8213b904
	if (cr6.getEQ()) goto loc_8213B904;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r11,r11,-5
	r11.s64 = r11.s64 + -5;
	// cmplwi cr6,r11,22
	cr6.compare<uint32_t>(r11.u32, 22, xer);
	// bgt cr6,0x8213b9d0
	if (cr6.getGT()) goto loc_8213B9D0;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,-18920
	r12.s64 = r12.s64 + -18920;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_8213B6E4;
	case 1:
		goto loc_8213B9D0;
	case 2:
		goto loc_8213B9D0;
	case 3:
		goto loc_8213B968;
	case 4:
		goto loc_8213B674;
	case 5:
		goto loc_8213B690;
	case 6:
		goto loc_8213B738;
	case 7:
		goto loc_8213B748;
	case 8:
		goto loc_8213B9D0;
	case 9:
		goto loc_8213B6AC;
	case 10:
		goto loc_8213B6C8;
	case 11:
		goto loc_8213B7A8;
	case 12:
		goto loc_8213B7F8;
	case 13:
		goto loc_8213B788;
	case 14:
		goto loc_8213B768;
	case 15:
		goto loc_8213B7D8;
	case 16:
		goto loc_8213B858;
	case 17:
		goto loc_8213B838;
	case 18:
		goto loc_8213B818;
	case 19:
		goto loc_8213B894;
	case 20:
		goto loc_8213B878;
	case 21:
		goto loc_8213B894;
	case 22:
		goto loc_8213B878;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-18716(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18716);
	// lwz r16,-17968(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -17968);
	// lwz r16,-17968(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -17968);
	// lwz r16,-18072(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18072);
	// lwz r16,-18828(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18828);
	// lwz r16,-18800(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18800);
	// lwz r16,-18632(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18632);
	// lwz r16,-18616(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18616);
	// lwz r16,-17968(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -17968);
	// lwz r16,-18772(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18772);
	// lwz r16,-18744(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18744);
	// lwz r16,-18520(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18520);
	// lwz r16,-18440(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18440);
	// lwz r16,-18552(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18552);
	// lwz r16,-18584(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18584);
	// lwz r16,-18472(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18472);
	// lwz r16,-18344(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18344);
	// lwz r16,-18376(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18376);
	// lwz r16,-18408(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18408);
	// lwz r16,-18284(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18284);
	// lwz r16,-18312(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18312);
	// lwz r16,-18284(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18284);
	// lwz r16,-18312(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18312);
loc_8213B674:
	// li r3,6
	ctx.r3.s64 = 6;
	// bl 0x8213b268
	sub_8213B268(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B690:
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x8213b268
	sub_8213B268(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B6AC:
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x8213b268
	sub_8213B268(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B6C8:
	// li r3,3
	ctx.r3.s64 = 3;
	// bl 0x8213b268
	sub_8213B268(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B6E4:
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213b71c
	if (cr6.getEQ()) goto loc_8213B71C;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213b71c
	if (cr6.getEQ()) goto loc_8213B71C;
	// li r3,5
	ctx.r3.s64 = 5;
	// bl 0x8213b268
	sub_8213B268(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B71C:
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x8213b268
	sub_8213B268(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B738:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// nop 
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B748:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8235da08
	sub_8235DA08(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213b9d0
	if (cr6.getEQ()) goto loc_8213B9D0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8235d798
	sub_8235D798(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B768:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2df0
	sub_820C2DF0(ctx, base);
	// cntlzw r31,r3
	r31.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// rlwinm r4,r31,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 27) & 0x1;
	// bl 0x820c2e48
	sub_820C2E48(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B788:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2cc0
	sub_820C2CC0(ctx, base);
	// cntlzw r31,r3
	r31.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// rlwinm r4,r31,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 27) & 0x1;
	// bl 0x820c2d18
	sub_820C2D18(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B7A8:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820eb880
	sub_820EB880(ctx, base);
	// addi r11,r3,1
	r11.s64 = ctx.r3.s64 + 1;
	// srawi r10,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r10.s64 = r11.s32 >> 2;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r31,r10,r11
	r31.s64 = r11.s64 - ctx.r10.s64;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x820eb840
	sub_820EB840(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B7D8:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2d58
	sub_820C2D58(ctx, base);
	// cntlzw r31,r3
	r31.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// rlwinm r4,r31,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 27) & 0x1;
	// bl 0x820c2db0
	sub_820C2DB0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B7F8:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2c28
	sub_820C2C28(ctx, base);
	// cntlzw r31,r3
	r31.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// rlwinm r4,r31,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 27) & 0x1;
	// bl 0x820c2c80
	sub_820C2C80(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B818:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2fb8
	sub_820C2FB8(ctx, base);
	// cntlzw r31,r3
	r31.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// rlwinm r4,r31,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 27) & 0x1;
	// bl 0x820c3010
	sub_820C3010(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B838:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2f20
	sub_820C2F20(ctx, base);
	// cntlzw r31,r3
	r31.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// rlwinm r4,r31,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 27) & 0x1;
	// bl 0x820c2f78
	sub_820C2F78(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B858:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2e88
	sub_820C2E88(ctx, base);
	// cntlzw r31,r3
	r31.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// rlwinm r4,r31,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 27) & 0x1;
	// bl 0x820c2ee0
	sub_820C2EE0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B878:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8213b268
	sub_8213B268(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B894:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r8,170
	ctx.r8.s64 = 170;
	// addi r7,r11,24828
	ctx.r7.s64 = r11.s64 + 24828;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,8260(r11)
	PPC_STORE_U32(r11.u32 + 8260, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,8320(r11)
	PPC_STORE_U32(r11.u32 + 8320, ctx.r10.u32);
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8213b8e8
	if (!cr6.getEQ()) goto loc_8213B8E8;
	// bl 0x82139ad8
	sub_82139AD8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B8E8:
	// bl 0x82160de0
	sub_82160DE0(ctx, base);
	// li r3,27
	ctx.r3.s64 = 27;
	// bl 0x820ea498
	sub_820EA498(ctx, base);
	// li r3,90
	ctx.r3.s64 = 90;
	// bl 0x820ae350
	sub_820AE350(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B904:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13304(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213b9d0
	if (!cr6.getEQ()) goto loc_8213B9D0;
	// li r4,16384
	ctx.r4.s64 = 16384;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8213b9d0
	if (cr6.getEQ()) goto loc_8213B9D0;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// bgt cr6,0x8213b9d0
	if (cr6.getGT()) goto loc_8213B9D0;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,-18100
	r12.s64 = r12.s64 + -18100;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_8213B968;
	case 1:
		goto loc_8213B974;
	case 2:
		goto loc_8213B9B0;
	case 3:
		goto loc_8213B9C4;
	case 4:
		goto loc_8213B988;
	case 5:
		goto loc_8213B988;
	case 6:
		goto loc_8213B99C;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-18072(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18072);
	// lwz r16,-18060(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18060);
	// lwz r16,-18000(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18000);
	// lwz r16,-17980(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -17980);
	// lwz r16,-18040(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18040);
	// lwz r16,-18040(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18040);
	// lwz r16,-18020(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -18020);
loc_8213B968:
	// bl 0x8213a278
	sub_8213A278(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B974:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,10
	ctx.r10.s64 = 10;
	// stw r10,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B988:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,5
	ctx.r10.s64 = 5;
	// stw r10,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B99C:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,9
	ctx.r10.s64 = 9;
	// stw r10,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B9B0:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,14
	ctx.r10.s64 = 14;
	// stw r10,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8213B9C4:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,15
	ctx.r10.s64 = 15;
	// stw r10,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r10.u32);
loc_8213B9D0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8213B9D8"))) PPC_WEAK_FUNC(sub_8213B9D8);
PPC_FUNC_IMPL(__imp__sub_8213B9D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r3,8524(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 8524);
	// bl 0x8213b210
	sub_8213B210(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// stw r28,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r28.u32);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x8213ba18
	if (!cr6.getEQ()) goto loc_8213BA18;
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// lwz r10,-8884(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8884);
	// b 0x8213ba20
	goto loc_8213BA20;
loc_8213BA18:
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// lwz r10,-8888(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8888);
loc_8213BA20:
	// addi r11,r11,-4
	r11.s64 = r11.s64 + -4;
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r20,r29
	r20.u64 = r29.u64;
	// addi r30,r11,3292
	r30.s64 = r11.s64 + 3292;
	// stw r30,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r30.u32);
	// bgt cr6,0x8213ba54
	if (cr6.getGT()) goto loc_8213BA54;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,44107
	ctx.r3.u64 = ctx.r3.u64 | 44107;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
loc_8213BA54:
	// bl 0x8210e208
	sub_8210E208(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r31,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r31.s64 = temp.s64;
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lis r14,-32033
	r14.s64 = -2099314688;
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r10,r11,r31
	ctx.r10.u64 = r11.u64 + r31.u64;
	// lwz r11,-8892(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + -8892);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,-20
	r11.s64 = r11.s64 + -20;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// lis r23,-32033
	r23.s64 = -2099314688;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r10,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r10.s64 = temp.s64;
	// lwz r11,-8896(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -8896);
	// subf r31,r11,r10
	r31.s64 = ctx.r10.s64 - r11.s64;
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lis r24,-32033
	r24.s64 = -2099314688;
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r10,r11,r31
	ctx.r10.u64 = r11.u64 + r31.u64;
	// lwz r11,-8900(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -8900);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r31,r3
	r31.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r22,-1
	r22.s64 = -1;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// lis r25,-31994
	r25.s64 = -2096758784;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// lis r26,-31991
	r26.s64 = -2096562176;
	// lis r8,-24321
	ctx.r8.s64 = -1593901056;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// ori r8,r8,41200
	ctx.r8.u64 = ctx.r8.u64 | 41200;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r7,15120(r25)
	ctx.r7.u64 = PPC_LOAD_U32(r25.u32 + 15120);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// lwz r6,-31544(r26)
	ctx.r6.u64 = PPC_LOAD_U32(r26.u32 + -31544);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lis r15,-32033
	r15.s64 = -2099314688;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// addi r6,r11,-9208
	ctx.r6.s64 = r11.s64 + -9208;
	// lwz r10,-8956(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + -8956);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8213bb68
	if (!cr6.getGT()) goto loc_8213BB68;
	// lwz r5,0(r28)
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// mr r7,r10
	ctx.r7.u64 = ctx.r10.u64;
	// lwz r4,4(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
loc_8213BB38:
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r3,r5
	cr6.compare<int32_t>(ctx.r3.s32, ctx.r5.s32, xer);
	// bne cr6,0x8213bb48
	if (!cr6.getEQ()) goto loc_8213BB48;
	// mr r8,r9
	ctx.r8.u64 = ctx.r9.u64;
loc_8213BB48:
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmpw cr6,r3,r4
	cr6.compare<int32_t>(ctx.r3.s32, ctx.r4.s32, xer);
	// bne cr6,0x8213bb58
	if (!cr6.getEQ()) goto loc_8213BB58;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
loc_8213BB58:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8213bb38
	if (!cr6.getEQ()) goto loc_8213BB38;
loc_8213BB68:
	// addi r7,r8,-1
	ctx.r7.s64 = ctx.r8.s64 + -1;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// stw r7,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r7.u32);
	// bge cr6,0x8213bb80
	if (!cr6.getLT()) goto loc_8213BB80;
	// stw r29,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r29.u32);
	// rotlwi r7,r29,0
	ctx.r7.u64 = __builtin_rotateleft32(r29.u32, 0);
loc_8213BB80:
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r8,-8904(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + -8904);
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// subf r11,r8,r9
	r11.s64 = ctx.r9.s64 - ctx.r8.s64;
	// cmpw cr6,r7,r11
	cr6.compare<int32_t>(ctx.r7.s32, r11.s32, xer);
	// ble cr6,0x8213bba0
	if (!cr6.getGT()) goto loc_8213BBA0;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// rotlwi r7,r11,0
	ctx.r7.u64 = __builtin_rotateleft32(r11.u32, 0);
loc_8213BBA0:
	// mr r16,r29
	r16.u64 = r29.u64;
	// stw r29,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r29.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8213bf78
	if (!cr6.getGT()) goto loc_8213BF78;
	// lis r11,0
	r11.s64 = 0;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// ori r18,r11,44057
	r18.u64 = r11.u64 | 44057;
	// lis r11,0
	r11.s64 = 0;
	// lis r17,-32033
	r17.s64 = -2099314688;
	// ori r19,r11,44058
	r19.u64 = r11.u64 | 44058;
	// lis r11,255
	r11.s64 = 16711680;
	// ori r21,r11,176
	r21.u64 = r11.u64 | 176;
loc_8213BBD0:
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// lwz r9,4(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// bne cr6,0x8213bf60
	if (!cr6.getEQ()) goto loc_8213BF60;
	// cmpw cr6,r16,r7
	cr6.compare<int32_t>(r16.s32, ctx.r7.s32, xer);
	// blt cr6,0x8213bf50
	if (cr6.getLT()) goto loc_8213BF50;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// li r28,1
	r28.s64 = 1;
	// addi r11,r11,-16
	r11.s64 = r11.s64 + -16;
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// bgt cr6,0x8213bd60
	if (cr6.getGT()) goto loc_8213BD60;
	// lis r12,-32236
	r12.s64 = -2112618496;
	// addi r12,r12,-17388
	r12.s64 = r12.s64 + -17388;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_8213BC68;
	case 1:
		goto loc_8213BCCC;
	case 2:
		goto loc_8213BC7C;
	case 3:
		goto loc_8213BC34;
	case 4:
		goto loc_8213BCAC;
	case 5:
		goto loc_8213BD40;
	case 6:
		goto loc_8213BD20;
	case 7:
		goto loc_8213BD00;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-17304(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -17304);
	// lwz r16,-17204(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -17204);
	// lwz r16,-17284(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -17284);
	// lwz r16,-17356(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -17356);
	// lwz r16,-17236(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -17236);
	// lwz r16,-17088(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -17088);
	// lwz r16,-17120(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -17120);
	// lwz r16,-17152(r19)
	r16.u64 = PPC_LOAD_U32(r19.u32 + -17152);
loc_8213BC34:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2df0
	sub_820C2DF0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r3,0
	ctx.r3.s64 = 0;
	// beq cr6,0x8213bc58
	if (cr6.getEQ()) goto loc_8213BC58;
	// ori r3,r3,44061
	ctx.r3.u64 = ctx.r3.u64 | 44061;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8213bd68
	goto loc_8213BD68;
loc_8213BC58:
	// ori r3,r3,44062
	ctx.r3.u64 = ctx.r3.u64 | 44062;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8213bd68
	goto loc_8213BD68;
loc_8213BC68:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820eb880
	sub_820EB880(ctx, base);
	// bl 0x820c28e0
	sub_820C28E0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8213bd68
	goto loc_8213BD68;
loc_8213BC7C:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2cc0
	sub_820C2CC0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213bc9c
	if (cr6.getEQ()) goto loc_8213BC9C;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8213bd68
	goto loc_8213BD68;
loc_8213BC9C:
	// mr r3,r19
	ctx.r3.u64 = r19.u64;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8213bd68
	goto loc_8213BD68;
loc_8213BCAC:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2d58
	sub_820C2D58(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213bc9c
	if (cr6.getEQ()) goto loc_8213BC9C;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8213bd68
	goto loc_8213BD68;
loc_8213BCCC:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2c28
	sub_820C2C28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r3,0
	ctx.r3.s64 = 0;
	// beq cr6,0x8213bcf0
	if (cr6.getEQ()) goto loc_8213BCF0;
	// ori r3,r3,44059
	ctx.r3.u64 = ctx.r3.u64 | 44059;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8213bd68
	goto loc_8213BD68;
loc_8213BCF0:
	// ori r3,r3,44060
	ctx.r3.u64 = ctx.r3.u64 | 44060;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8213bd68
	goto loc_8213BD68;
loc_8213BD00:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2fb8
	sub_820C2FB8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213bc9c
	if (cr6.getEQ()) goto loc_8213BC9C;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8213bd68
	goto loc_8213BD68;
loc_8213BD20:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2f20
	sub_820C2F20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213bc9c
	if (cr6.getEQ()) goto loc_8213BC9C;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8213bd68
	goto loc_8213BD68;
loc_8213BD40:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820c2e88
	sub_820C2E88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213bc9c
	if (cr6.getEQ()) goto loc_8213BC9C;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8213bd68
	goto loc_8213BD68;
loc_8213BD60:
	// lwz r31,132(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// mr r28,r29
	r28.u64 = r29.u64;
loc_8213BD68:
	// bl 0x8210e208
	sub_8210E208(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r30,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r30.s64 = temp.s64;
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r30,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r30.s64 = temp.s64;
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,-8896(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -8896);
	// mullw r10,r11,r20
	ctx.r10.s64 = int64_t(r11.s32) * int64_t(r20.s32);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// add r10,r11,r30
	ctx.r10.u64 = r11.u64 + r30.u64;
	// lwz r11,-8900(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -8900);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r30,r3
	r30.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r25)
	ctx.r7.u64 = PPC_LOAD_U32(r25.u32 + 15120);
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// lwz r6,-31544(r26)
	ctx.r6.u64 = PPC_LOAD_U32(r26.u32 + -31544);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lwz r3,8(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// clrlwi r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213be3c
	if (cr6.getEQ()) goto loc_8213BE3C;
	// bl 0x8210e208
	sub_8210E208(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r31,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r31.s64 = temp.s64;
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r10,r11,r31
	ctx.r10.u64 = r11.u64 + r31.u64;
	// lwz r11,-8908(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + -8908);
	// b 0x8213be5c
	goto loc_8213BE5C;
loc_8213BE3C:
	// bl 0x8210e208
	sub_8210E208(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r31,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r31.s64 = temp.s64;
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r10,r11,r31
	ctx.r10.u64 = r11.u64 + r31.u64;
	// lwz r11,-8892(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + -8892);
loc_8213BE5C:
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r31,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r31.s64 = temp.s64;
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,-8896(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -8896);
	// lwz r9,0(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// mullw r10,r11,r20
	ctx.r10.s64 = int64_t(r11.s32) * int64_t(r20.s32);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// add r10,r11,r31
	ctx.r10.u64 = r11.u64 + r31.u64;
	// lwz r11,-8900(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -8900);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r11,-1364(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -1364);
	// lwz r11,8524(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8524);
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// bne cr6,0x8213befc
	if (!cr6.getEQ()) goto loc_8213BEFC;
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r31,r3
	r31.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r9,112
	ctx.r9.s64 = 7340032;
	// lis r8,-24321
	ctx.r8.s64 = -1593901056;
	// lwz r7,15120(r25)
	ctx.r7.u64 = PPC_LOAD_U32(r25.u32 + 15120);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// lwz r6,-31544(r26)
	ctx.r6.u64 = PPC_LOAD_U32(r26.u32 + -31544);
	// ori r9,r9,160
	ctx.r9.u64 = ctx.r9.u64 | 160;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// ori r8,r8,41200
	ctx.r8.u64 = ctx.r8.u64 | 41200;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r29.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r22,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r22.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8213e398
	sub_8213E398(ctx, base);
	// b 0x8213bf38
	goto loc_8213BF38;
loc_8213BEFC:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r31,r3
	r31.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// lwz r7,15120(r25)
	ctx.r7.u64 = PPC_LOAD_U32(r25.u32 + 15120);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r6,-31544(r26)
	ctx.r6.u64 = PPC_LOAD_U32(r26.u32 + -31544);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_8213BF38:
	// lwz r11,140(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// addi r20,r20,1
	r20.s64 = r20.s64 + 1;
	// lwz r10,-8956(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + -8956);
	// lwz r7,120(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r28,144(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lwz r8,-8904(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + -8904);
loc_8213BF50:
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// add r11,r8,r7
	r11.u64 = ctx.r8.u64 + ctx.r7.u64;
	// cmpw cr6,r16,r11
	cr6.compare<int32_t>(r16.s32, r11.s32, xer);
	// bge cr6,0x8213bf78
	if (!cr6.getLT()) goto loc_8213BF78;
loc_8213BF60:
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r27,r27,12
	r27.s64 = r27.s64 + 12;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// blt cr6,0x8213bbd0
	if (cr6.getLT()) goto loc_8213BBD0;
loc_8213BF78:
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_8213BF80"))) PPC_WEAK_FUNC(sub_8213BF80);
PPC_FUNC_IMPL(__imp__sub_8213BF80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed120
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820ca110
	sub_820CA110(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r24,0
	r24.s64 = 0;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// blt cr6,0x8213bfc8
	if (cr6.getLT()) goto loc_8213BFC8;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,-2
	ctx.r4.s64 = -2;
	// bl 0x820a0648
	sub_820A0648(ctx, base);
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// b 0x8213bfcc
	goto loc_8213BFCC;
loc_8213BFC8:
	// mr r22,r24
	r22.u64 = r24.u64;
loc_8213BFCC:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// blt cr6,0x8213bfec
	if (cr6.getLT()) goto loc_8213BFEC;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820a06d8
	sub_820A06D8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// b 0x8213bff0
	goto loc_8213BFF0;
loc_8213BFEC:
	// mr r23,r24
	r23.u64 = r24.u64;
loc_8213BFF0:
	// bl 0x8209c700
	sub_8209C700(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213c674
	if (!cr6.getEQ()) goto loc_8213C674;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// li r25,1
	r25.s64 = 1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213c118
	if (cr6.getEQ()) goto loc_8213C118;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213c118
	if (cr6.getEQ()) goto loc_8213C118;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8213c118
	if (!cr6.getEQ()) goto loc_8213C118;
	// lis r30,-31994
	r30.s64 = -2096758784;
	// lwz r11,13308(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 13308);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213c0f4
	if (!cr6.getEQ()) goto loc_8213C0F4;
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8213c118
	if (cr6.getEQ()) goto loc_8213C118;
	// addi r3,r31,728
	ctx.r3.s64 = r31.s64 + 728;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213c118
	if (cr6.getEQ()) goto loc_8213C118;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r11,r11,24812
	r11.s64 = r11.s64 + 24812;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r31,r25
	r31.u64 = r25.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x821647b8
	sub_821647B8(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213c0d0
	if (cr6.getEQ()) goto loc_8213C0D0;
loc_8213C094:
	// addi r3,r11,1232
	ctx.r3.s64 = r11.s64 + 1232;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213c0cc
	if (cr6.getEQ()) goto loc_8213C0CC;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x821647c8
	sub_821647C8(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213c094
	if (!cr6.getEQ()) goto loc_8213C094;
	// b 0x8213c0d0
	goto loc_8213C0D0;
loc_8213C0CC:
	// mr r31,r24
	r31.u64 = r24.u64;
loc_8213C0D0:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213c0e4
	if (cr6.getEQ()) goto loc_8213C0E4;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// stw r3,13308(r30)
	PPC_STORE_U32(r30.u32 + 13308, ctx.r3.u32);
loc_8213C0E4:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// addi r11,r11,24796
	r11.s64 = r11.s64 + 24796;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// b 0x8213c118
	goto loc_8213C118;
loc_8213C0F4:
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwz r11,13308(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 13308);
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// cmplwi cr6,r11,5000
	cr6.compare<uint32_t>(r11.u32, 5000, xer);
	// blt cr6,0x8213c118
	if (cr6.getLT()) goto loc_8213C118;
	// mr r11,r24
	r11.u64 = r24.u64;
	// li r3,90
	ctx.r3.s64 = 90;
	// stw r11,13308(r30)
	PPC_STORE_U32(r30.u32 + 13308, r11.u32);
	// bl 0x820ae350
	sub_820AE350(ctx, base);
loc_8213C118:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820ca060
	sub_820CA060(ctx, base);
	// lis r27,-31994
	r27.s64 = -2096758784;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r30,-32055
	r30.s64 = -2100756480;
	// lwz r11,13304(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 13304);
	// bne cr6,0x8213c158
	if (!cr6.getEQ()) goto loc_8213C158;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// ble cr6,0x8213c158
	if (!cr6.getGT()) goto loc_8213C158;
	// lwz r10,-21848(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -21848);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// stw r11,13304(r27)
	PPC_STORE_U32(r27.u32 + 13304, r11.u32);
	// bge cr6,0x8213c158
	if (!cr6.getLT()) goto loc_8213C158;
	// mr r11,r25
	r11.u64 = r25.u64;
	// stw r11,13304(r27)
	PPC_STORE_U32(r27.u32 + 13304, r11.u32);
loc_8213C158:
	// cmpwi cr6,r26,1
	cr6.compare<int32_t>(r26.s32, 1, xer);
	// beq cr6,0x8213c674
	if (cr6.getEQ()) goto loc_8213C674;
	// lis r31,-32014
	r31.s64 = -2098069504;
	// lwz r10,-1364(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,480(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8213c1ac
	if (cr6.getEQ()) goto loc_8213C1AC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213c1ac
	if (!cr6.getEQ()) goto loc_8213C1AC;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// bl 0x820caaa8
	sub_820CAAA8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213c1a8
	if (!cr6.getEQ()) goto loc_8213C1A8;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r24,8260(r11)
	PPC_STORE_U32(r11.u32 + 8260, r24.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r24,8320(r11)
	PPC_STORE_U32(r11.u32 + 8320, r24.u32);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed170
	return;
loc_8213C1A8:
	// lwz r11,13304(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 13304);
loc_8213C1AC:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bgt cr6,0x8213c674
	if (cr6.getGT()) goto loc_8213C674;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820ca060
	sub_820CA060(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8213c230
	if (!cr6.getEQ()) goto loc_8213C230;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// lwz r9,-21848(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + -21848);
	// lis r8,-31994
	ctx.r8.s64 = -2096758784;
	// lwz r11,13300(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13300);
	// lwz r7,13276(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 13276);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// cmpwi cr6,r11,20
	cr6.compare<int32_t>(r11.s32, 20, xer);
	// stw r11,13300(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13300, r11.u32);
	// stw r7,13276(r8)
	PPC_STORE_U32(ctx.r8.u32 + 13276, ctx.r7.u32);
	// blt cr6,0x8213c20c
	if (cr6.getLT()) goto loc_8213C20C;
	// lis r9,-31994
	ctx.r9.s64 = -2096758784;
	// addi r11,r11,-20
	r11.s64 = r11.s64 + -20;
	// lwz r6,13280(r9)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + 13280);
	// stw r11,13300(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13300, r11.u32);
	// cntlzw r6,r6
	ctx.r6.u64 = ctx.r6.u32 == 0 ? 32 : __builtin_clz(ctx.r6.u32);
	// rlwinm r11,r6,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 27) & 0x1;
	// stw r11,13280(r9)
	PPC_STORE_U32(ctx.r9.u32 + 13280, r11.u32);
loc_8213C20C:
	// cmpwi cr6,r7,120
	cr6.compare<int32_t>(ctx.r7.s32, 120, xer);
	// blt cr6,0x8213c230
	if (cr6.getLT()) goto loc_8213C230;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r10,13284(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 13284);
	// cntlzw r9,r10
	ctx.r9.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// addi r10,r7,-120
	ctx.r10.s64 = ctx.r7.s64 + -120;
	// stw r10,13276(r8)
	PPC_STORE_U32(ctx.r8.u32 + 13276, ctx.r10.u32);
	// rlwinm r10,r9,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// stw r10,13284(r11)
	PPC_STORE_U32(r11.u32 + 13284, ctx.r10.u32);
loc_8213C230:
	// lis r30,-32014
	r30.s64 = -2098069504;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,-908(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -908);
	// lwz r11,8312(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8312);
	// lwz r9,84(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 84);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x8213c250
	if (!cr6.getGT()) goto loc_8213C250;
	// stw r11,84(r10)
	PPC_STORE_U32(ctx.r10.u32 + 84, r11.u32);
loc_8213C250:
	// bl 0x820b57f8
	sub_820B57F8(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,8308(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8308);
	// lwz r11,-908(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -908);
	// subf r10,r10,r3
	ctx.r10.s64 = ctx.r3.s64 - ctx.r10.s64;
	// lwz r11,76(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 76);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// ble cr6,0x8213c288
	if (!cr6.getGT()) goto loc_8213C288;
	// bl 0x820b57f8
	sub_820B57F8(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,8308(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8308);
	// subf r10,r11,r3
	ctx.r10.s64 = ctx.r3.s64 - r11.s64;
	// lwz r11,-908(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -908);
	// stw r10,76(r11)
	PPC_STORE_U32(r11.u32 + 76, ctx.r10.u32);
loc_8213C288:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,8260(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8260);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213c5b0
	if (cr6.getEQ()) goto loc_8213C5B0;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,8524(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8524);
	// cmpwi cr6,r11,28
	cr6.compare<int32_t>(r11.s32, 28, xer);
	// bne cr6,0x8213c560
	if (!cr6.getEQ()) goto loc_8213C560;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821395a0
	sub_821395A0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213c304
	if (cr6.getEQ()) goto loc_8213C304;
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,8264(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8264);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bge cr6,0x8213c304
	if (!cr6.getLT()) goto loc_8213C304;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r8,170
	ctx.r8.s64 = 170;
	// addi r7,r11,24828
	ctx.r7.s64 = r11.s64 + 24828;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,8264(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8264);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,8264(r11)
	PPC_STORE_U32(r11.u32 + 8264, ctx.r10.u32);
	// b 0x8213c560
	goto loc_8213C560;
loc_8213C304:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82139628
	sub_82139628(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213c35c
	if (cr6.getEQ()) goto loc_8213C35C;
	// bl 0x82139418
	sub_82139418(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213c35c
	if (cr6.getEQ()) goto loc_8213C35C;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r8,170
	ctx.r8.s64 = 170;
	// addi r7,r11,24828
	ctx.r7.s64 = r11.s64 + 24828;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r10,8264(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8264);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stw r10,8264(r11)
	PPC_STORE_U32(r11.u32 + 8264, ctx.r10.u32);
	// b 0x8213c560
	goto loc_8213C560;
loc_8213C35C:
	// lwz r11,13304(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213c56c
	if (cr6.getEQ()) goto loc_8213C56C;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// blt cr6,0x8213c560
	if (cr6.getLT()) goto loc_8213C560;
	// lis r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// ori r4,r4,36864
	ctx.r4.u64 = ctx.r4.u64 | 36864;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8213c3b4
	if (cr6.getEQ()) goto loc_8213C3B4;
	// lwz r10,-1364(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lwz r11,8264(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8264);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x8213c3a0
	if (cr6.getEQ()) goto loc_8213C3A0;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8213c3c8
	if (!cr6.getEQ()) goto loc_8213C3C8;
loc_8213C3A0:
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x8213c3b4
	if (!cr6.getEQ()) goto loc_8213C3B4;
	// lwz r11,8268(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8268);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8213c3c8
	if (!cr6.getEQ()) goto loc_8213C3C8;
loc_8213C3B4:
	// li r4,16384
	ctx.r4.s64 = 16384;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8213c560
	if (cr6.getEQ()) goto loc_8213C560;
loc_8213C3C8:
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r8,170
	ctx.r8.s64 = 170;
	// addi r7,r11,24828
	ctx.r7.s64 = r11.s64 + 24828;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// lwz r11,13304(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213c524
	if (cr6.getEQ()) goto loc_8213C524;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213c4c8
	if (cr6.getEQ()) goto loc_8213C4C8;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213c4c8
	if (cr6.getEQ()) goto loc_8213C4C8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r10,-1364(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r9,7
	ctx.r9.s64 = 7;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r9,8264(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8264, ctx.r9.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// mr r29,r25
	r29.u64 = r25.u64;
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r30,r11,-1384
	r30.s64 = r11.s64 + -1384;
loc_8213C450:
	// lwz r3,108(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x8213c46c
	if (cr6.getEQ()) goto loc_8213C46C;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// mr r11,r24
	r11.u64 = r24.u64;
	// bne cr6,0x8213c470
	if (!cr6.getEQ()) goto loc_8213C470;
loc_8213C46C:
	// mr r11,r25
	r11.u64 = r25.u64;
loc_8213C470:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213c4a4
	if (!cr6.getEQ()) goto loc_8213C4A4;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// rlwinm r11,r3,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// lwz r11,8264(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8264);
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// bne cr6,0x8213c4a0
	if (!cr6.getEQ()) goto loc_8213C4A0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8213c450
	goto loc_8213C450;
loc_8213C4A0:
	// mr r29,r24
	r29.u64 = r24.u64;
loc_8213C4A4:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213c4b8
	if (cr6.getEQ()) goto loc_8213C4B8;
	// li r3,90
	ctx.r3.s64 = 90;
	// bl 0x820ae350
	sub_820AE350(ctx, base);
loc_8213C4B8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,14748
	r11.s64 = r11.s64 + 14748;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// b 0x8213c560
	goto loc_8213C560;
loc_8213C4C8:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,7
	ctx.r10.s64 = 7;
	// mr r9,r24
	ctx.r9.u64 = r24.u64;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// stw r10,8264(r11)
	PPC_STORE_U32(r11.u32 + 8264, ctx.r10.u32);
	// ble cr6,0x8213c510
	if (!cr6.getGT()) goto loc_8213C510;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// addi r10,r11,-1384
	ctx.r10.s64 = r11.s64 + -1384;
	// mr r11,r26
	r11.u64 = r26.u64;
loc_8213C4EC:
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r8,8264(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 8264);
	// cmpwi cr6,r8,7
	cr6.compare<int32_t>(ctx.r8.s32, 7, xer);
	// bne cr6,0x8213c500
	if (!cr6.getEQ()) goto loc_8213C500;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
loc_8213C500:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213c4ec
	if (!cr6.getEQ()) goto loc_8213C4EC;
loc_8213C510:
	// cmpw cr6,r9,r26
	cr6.compare<int32_t>(ctx.r9.s32, r26.s32, xer);
	// bne cr6,0x8213c560
	if (!cr6.getEQ()) goto loc_8213C560;
	// li r3,90
	ctx.r3.s64 = 90;
	// bl 0x820ae350
	sub_820AE350(ctx, base);
	// b 0x8213c560
	goto loc_8213C560;
loc_8213C524:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,60
	ctx.r10.s64 = 60;
	// stw r24,8260(r11)
	PPC_STORE_U32(r11.u32 + 8260, r24.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,8320(r11)
	PPC_STORE_U32(r11.u32 + 8320, ctx.r10.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13288(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13288);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bne cr6,0x8213c560
	if (!cr6.getEQ()) goto loc_8213C560;
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// mr r11,r24
	r11.u64 = r24.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,13292(r10)
	PPC_STORE_U32(ctx.r10.u32 + 13292, r11.u32);
	// bl 0x8209f578
	sub_8209F578(ctx, base);
loc_8213C560:
	// lwz r11,13304(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213c570
	if (!cr6.getEQ()) goto loc_8213C570;
loc_8213C56C:
	// bl 0x8213b4d8
	sub_8213B4D8(ctx, base);
loc_8213C570:
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x8213c580
	if (cr6.getEQ()) goto loc_8213C580;
	// cmpwi cr6,r22,-1
	cr6.compare<int32_t>(r22.s32, -1, xer);
	// bne cr6,0x8213c590
	if (!cr6.getEQ()) goto loc_8213C590;
loc_8213C580:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x8213c5a0
	if (cr6.getEQ()) goto loc_8213C5A0;
	// cmpwi cr6,r23,-1
	cr6.compare<int32_t>(r23.s32, -1, xer);
	// beq cr6,0x8213c5a0
	if (cr6.getEQ()) goto loc_8213C5A0;
loc_8213C590:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r24,8272(r11)
	PPC_STORE_U32(r11.u32 + 8272, r24.u32);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed170
	return;
loc_8213C5A0:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r25,8272(r11)
	PPC_STORE_U32(r11.u32 + 8272, r25.u32);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed170
	return;
loc_8213C5B0:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// blt cr6,0x8213c674
	if (cr6.getLT()) goto loc_8213C674;
	// li r4,4096
	ctx.r4.s64 = 4096;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8213c5fc
	if (cr6.getEQ()) goto loc_8213C5FC;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r8,170
	ctx.r8.s64 = 170;
	// addi r7,r11,24828
	ctx.r7.s64 = r11.s64 + 24828;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// li r9,8
	ctx.r9.s64 = 8;
	// b 0x8213c63c
	goto loc_8213C63C;
loc_8213C5FC:
	// lis r4,16
	ctx.r4.s64 = 1048576;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8213c674
	if (cr6.getEQ()) goto loc_8213C674;
	// lis r11,-32255
	r11.s64 = -2113863680;
	// li r8,170
	ctx.r8.s64 = 170;
	// addi r7,r11,24828
	ctx.r7.s64 = r11.s64 + 24828;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,159
	ctx.r4.s64 = 159;
	// lwz r6,19944(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 19944);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,19936(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 19936);
	// bl 0x82144920
	sub_82144920(ctx, base);
	// li r9,28
	ctx.r9.s64 = 28;
loc_8213C63C:
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// li r10,3
	ctx.r10.s64 = 3;
	// stw r25,8260(r11)
	PPC_STORE_U32(r11.u32 + 8260, r25.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r10,8264(r11)
	PPC_STORE_U32(r11.u32 + 8264, ctx.r10.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r9,8524(r11)
	PPC_STORE_U32(r11.u32 + 8524, ctx.r9.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// stw r25,8272(r11)
	PPC_STORE_U32(r11.u32 + 8272, r25.u32);
	// lwz r11,-1364(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -1364);
	// lfs f0,484(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 484);
	f0.f64 = double(temp.f32);
	// stfs f0,500(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 500, temp.u32);
	// lfs f0,488(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 488);
	f0.f64 = double(temp.f32);
	// stfs f0,504(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 504, temp.u32);
loc_8213C674:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed170
	return;
}

__attribute__((alias("__imp__sub_8213C680"))) PPC_WEAK_FUNC(sub_8213C680);
PPC_FUNC_IMPL(__imp__sub_8213C680) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed108
	// stfd f31,-144(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -144, f31.u64);
	// stwu r1,-336(r1)
	ea = -336 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r21,r3
	r21.u64 = ctx.r3.u64;
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// mr r16,r3
	r16.u64 = ctx.r3.u64;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213c6b4
	if (cr6.getEQ()) goto loc_8213C6B4;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
loc_8213C6B4:
	// cmpwi cr6,r16,1
	cr6.compare<int32_t>(r16.s32, 1, xer);
	// beq cr6,0x8213d704
	if (cr6.getEQ()) goto loc_8213D704;
	// lis r18,-32014
	r18.s64 = -2098069504;
	// lwz r11,-1364(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -1364);
	// lwz r10,8260(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8260);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8213d570
	if (cr6.getEQ()) goto loc_8213D570;
	// lis r30,-32033
	r30.s64 = -2099314688;
	// lwz r10,8524(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8524);
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r10,28
	cr6.compare<int32_t>(ctx.r10.s32, 28, xer);
	// mr r24,r31
	r24.u64 = r31.u64;
	// lwz r26,-8852(r30)
	r26.u64 = PPC_LOAD_U32(r30.u32 + -8852);
	// beq cr6,0x8213c6f4
	if (cr6.getEQ()) goto loc_8213C6F4;
	// bl 0x8213b9d8
	sub_8213B9D8(ctx, base);
	// lwz r11,-1364(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -1364);
loc_8213C6F4:
	// cmpwi cr6,r16,2
	cr6.compare<int32_t>(r16.s32, 2, xer);
	// bne cr6,0x8213c720
	if (!cr6.getEQ()) goto loc_8213C720;
	// bl 0x820b2cb8
	sub_820B2CB8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213c718
	if (cr6.getEQ()) goto loc_8213C718;
	// lwz r11,-8852(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -8852);
	// addi r26,r11,80
	r26.s64 = r11.s64 + 80;
	// b 0x8213c71c
	goto loc_8213C71C;
loc_8213C718:
	// li r24,80
	r24.s64 = 80;
loc_8213C71C:
	// lwz r11,-1364(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -1364);
loc_8213C720:
	// lwz r10,8524(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8524);
	// cmpwi cr6,r10,28
	cr6.compare<int32_t>(ctx.r10.s32, 28, xer);
	// bne cr6,0x8213d704
	if (!cr6.getEQ()) goto loc_8213D704;
	// lwz r11,8264(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8264);
	// lis r17,-31994
	r17.s64 = -2096758784;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// blt cr6,0x8213c748
	if (cr6.getLT()) goto loc_8213C748;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r27,r11,3292
	r27.s64 = r11.s64 + 3292;
	// b 0x8213c788
	goto loc_8213C788;
loc_8213C748:
	// lwz r11,13304(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213c760
	if (!cr6.getEQ()) goto loc_8213C760;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r27,r11,3292
	r27.s64 = r11.s64 + 3292;
	// b 0x8213c788
	goto loc_8213C788;
loc_8213C760:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lis r3,0
	ctx.r3.s64 = 0;
	// lwz r11,13284(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13284);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213c77c
	if (cr6.getEQ()) goto loc_8213C77C;
	// ori r3,r3,40982
	ctx.r3.u64 = ctx.r3.u64 | 40982;
	// b 0x8213c780
	goto loc_8213C780;
loc_8213C77C:
	// ori r3,r3,40983
	ctx.r3.u64 = ctx.r3.u64 | 40983;
loc_8213C780:
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
loc_8213C788:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r29,-31994
	r29.s64 = -2096758784;
	// lis r30,-31991
	r30.s64 = -2096562176;
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lfs f31,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	f31.f64 = double(temp.f32);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// srawi r10,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r10.s64 = r11.s32 >> 1;
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// subf r10,r10,r24
	ctx.r10.s64 = r24.s64 - ctx.r10.s64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,80
	r11.s64 = r11.s64 + 80;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lis r23,-32033
	r23.s64 = -2099314688;
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// lwz r11,-8856(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + -8856);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r22,r3
	r22.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r11,255
	r11.s64 = 16711680;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// li r28,-1
	r28.s64 = -1;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// ori r25,r11,176
	r25.u64 = r11.u64 | 176;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// mr r10,r22
	ctx.r10.u64 = r22.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// bl 0x82139418
	sub_82139418(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r20,-31994
	r20.s64 = -2096758784;
	// lis r19,-32033
	r19.s64 = -2099314688;
	// lis r22,-32033
	r22.s64 = -2099314688;
	// beq cr6,0x8213c94c
	if (cr6.getEQ()) goto loc_8213C94C;
	// lwz r11,13304(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213c868
	if (cr6.getEQ()) goto loc_8213C868;
	// lwz r27,-8864(r22)
	r27.u64 = PPC_LOAD_U32(r22.u32 + -8864);
	// b 0x8213c86c
	goto loc_8213C86C;
loc_8213C868:
	// mr r27,r31
	r27.u64 = r31.u64;
loc_8213C86C:
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,13304(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 13304);
	// subf r9,r27,r24
	ctx.r9.s64 = r24.s64 - r27.s64;
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// add r11,r10,r9
	r11.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addi r11,r11,40
	r11.s64 = r11.s64 + 40;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// beq cr6,0x8213c898
	if (cr6.getEQ()) goto loc_8213C898;
	// lwz r27,-8856(r23)
	r27.u64 = PPC_LOAD_U32(r23.u32 + -8856);
	// b 0x8213c89c
	goto loc_8213C89C;
loc_8213C898:
	// lwz r27,-8860(r19)
	r27.u64 = PPC_LOAD_U32(r19.u32 + -8860);
loc_8213C89C:
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,13280(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 13280);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bne cr6,0x8213c900
	if (!cr6.getEQ()) goto loc_8213C900;
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// addi r5,r11,24876
	ctx.r5.s64 = r11.s64 + 24876;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// b 0x8213c94c
	goto loc_8213C94C;
loc_8213C900:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// lis r9,112
	ctx.r9.s64 = 7340032;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// lis r8,-24321
	ctx.r8.s64 = -1593901056;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r27.u32);
	// addi r5,r11,24876
	ctx.r5.s64 = r11.s64 + 24876;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// ori r9,r9,160
	ctx.r9.u64 = ctx.r9.u64 | 160;
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r31.u32);
	// ori r8,r8,41200
	ctx.r8.u64 = ctx.r8.u64 | 41200;
	// stw r28,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r28.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x8213e398
	sub_8213E398(ctx, base);
loc_8213C94C:
	// lwz r11,-1364(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -1364);
	// lwz r11,8264(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8264);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bge cr6,0x8213ca54
	if (!cr6.getLT()) goto loc_8213CA54;
	// lwz r11,13304(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213c970
	if (cr6.getEQ()) goto loc_8213C970;
	// lwz r27,-8864(r22)
	r27.u64 = PPC_LOAD_U32(r22.u32 + -8864);
	// b 0x8213c974
	goto loc_8213C974;
loc_8213C970:
	// mr r27,r31
	r27.u64 = r31.u64;
loc_8213C974:
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,13304(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// addi r11,r11,112
	r11.s64 = r11.s64 + 112;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// beq cr6,0x8213c9a0
	if (cr6.getEQ()) goto loc_8213C9A0;
	// lwz r27,-8856(r23)
	r27.u64 = PPC_LOAD_U32(r23.u32 + -8856);
	// b 0x8213c9a4
	goto loc_8213C9A4;
loc_8213C9A0:
	// lwz r27,-8860(r19)
	r27.u64 = PPC_LOAD_U32(r19.u32 + -8860);
loc_8213C9A4:
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,13280(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 13280);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bne cr6,0x8213ca08
	if (!cr6.getEQ()) goto loc_8213CA08;
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// addi r5,r11,24872
	ctx.r5.s64 = r11.s64 + 24872;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// b 0x8213ca54
	goto loc_8213CA54;
loc_8213CA08:
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// lis r9,112
	ctx.r9.s64 = 7340032;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// lis r8,-24321
	ctx.r8.s64 = -1593901056;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r27.u32);
	// addi r5,r11,24872
	ctx.r5.s64 = r11.s64 + 24872;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// ori r9,r9,160
	ctx.r9.u64 = ctx.r9.u64 | 160;
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r31.u32);
	// ori r8,r8,41200
	ctx.r8.u64 = ctx.r8.u64 | 41200;
	// stw r28,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r28.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x8213e398
	sub_8213E398(ctx, base);
loc_8213CA54:
	// lwz r11,-1364(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -1364);
	// lwz r11,8264(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8264);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x8213d294
	if (cr6.getEQ()) goto loc_8213D294;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8213d294
	if (cr6.getEQ()) goto loc_8213D294;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8213cce8
	if (!cr6.getEQ()) goto loc_8213CCE8;
	// lwz r11,13304(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 13304);
	// li r22,1
	r22.s64 = 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213ca98
	if (!cr6.getEQ()) goto loc_8213CA98;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lwz r11,13296(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13296);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213ca9c
	if (cr6.getEQ()) goto loc_8213CA9C;
loc_8213CA98:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8213CA9C:
	// bl 0x8213aa88
	sub_8213AA88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213cb64
	if (cr6.getEQ()) goto loc_8213CB64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// li r4,16
	ctx.r4.s64 = 16;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8213a8a8
	sub_8213A8A8(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r11,-8868(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8868);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r11,-8872(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8872);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_8213CB64:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40989
	ctx.r3.u64 = ctx.r3.u64 | 40989;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// lis r3,0
	ctx.r3.s64 = 0;
	// addi r23,r21,1
	r23.s64 = r21.s64 + 1;
	// ori r3,r3,40988
	ctx.r3.u64 = ctx.r3.u64 | 40988;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// addi r5,r11,24856
	ctx.r5.s64 = r11.s64 + 24856;
	// li r4,16
	ctx.r4.s64 = 16;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// mr r7,r23
	ctx.r7.u64 = r23.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r11,-8876(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8876);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r11,-8880(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8880);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mulli r10,r21,116
	ctx.r10.s64 = r21.s64 * 116;
	// addi r11,r11,-1360
	r11.s64 = r11.s64 + -1360;
	// addi r9,r11,36
	ctx.r9.s64 = r11.s64 + 36;
	// lwzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8213cc70
	if (!cr6.getGT()) goto loc_8213CC70;
	// li r31,4
	r31.s64 = 4;
loc_8213CC70:
	// addi r9,r11,48
	ctx.r9.s64 = r11.s64 + 48;
	// addi r8,r11,44
	ctx.r8.s64 = r11.s64 + 44;
	// addi r7,r11,40
	ctx.r7.s64 = r11.s64 + 40;
	// mulli r10,r21,112
	ctx.r10.s64 = r21.s64 * 112;
	// lwzx r30,r10,r9
	r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// lwzx r29,r10,r8
	r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// addi r11,r11,36
	r11.s64 = r11.s64 + 36;
	// lwzx r28,r10,r7
	r28.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r7.u32);
	// lwzx r27,r10,r11
	r27.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r26,r11,r26
	r26.u64 = r11.u64 + r26.u64;
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// lis r11,-32236
	r11.s64 = -2112618496;
	// stw r22,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r22.u32);
	// add r4,r10,r24
	ctx.r4.u64 = ctx.r10.u64 + r24.u64;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
	// addi r3,r11,-23056
	ctx.r3.s64 = r11.s64 + -23056;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// bl 0x8213aba0
	sub_8213ABA0(ctx, base);
	// addi r1,r1,336
	ctx.r1.s64 = ctx.r1.s64 + 336;
	// lfd f31,-144(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// b 0x823ed158
	return;
loc_8213CCE8:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8213cf68
	if (!cr6.getEQ()) goto loc_8213CF68;
	// lwz r11,13304(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 13304);
	// li r22,1
	r22.s64 = 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213cd14
	if (!cr6.getEQ()) goto loc_8213CD14;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// lwz r11,13296(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13296);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213cd18
	if (cr6.getEQ()) goto loc_8213CD18;
loc_8213CD14:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8213CD18:
	// bl 0x8213aa88
	sub_8213AA88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213cde0
	if (cr6.getEQ()) goto loc_8213CDE0;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// li r4,16
	ctx.r4.s64 = 16;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8213a8a8
	sub_8213A8A8(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r11,-8868(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8868);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r11,-8872(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8872);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_8213CDE0:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40990
	ctx.r3.u64 = ctx.r3.u64 | 40990;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// lis r3,0
	ctx.r3.s64 = 0;
	// addi r25,r21,1
	r25.s64 = r21.s64 + 1;
	// ori r3,r3,40988
	ctx.r3.u64 = ctx.r3.u64 | 40988;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// addi r5,r11,24856
	ctx.r5.s64 = r11.s64 + 24856;
	// li r4,16
	ctx.r4.s64 = 16;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// bl 0x823eda88
	sub_823EDA88(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r11,-8876(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8876);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r11,-8880(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8880);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// lis r8,-192
	ctx.r8.s64 = -12582912;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// ori r8,r8,16560
	ctx.r8.u64 = ctx.r8.u64 | 16560;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mulli r10,r21,116
	ctx.r10.s64 = r21.s64 * 116;
	// addi r11,r11,-1360
	r11.s64 = r11.s64 + -1360;
	// addi r9,r11,36
	ctx.r9.s64 = r11.s64 + 36;
	// lwzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8213cef0
	if (!cr6.getGT()) goto loc_8213CEF0;
	// li r31,4
	r31.s64 = 4;
loc_8213CEF0:
	// addi r9,r11,372
	ctx.r9.s64 = r11.s64 + 372;
	// addi r8,r11,260
	ctx.r8.s64 = r11.s64 + 260;
	// addi r7,r11,148
	ctx.r7.s64 = r11.s64 + 148;
	// rlwinm r10,r21,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,36
	r11.s64 = r11.s64 + 36;
	// lwzx r30,r10,r9
	r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// lwzx r29,r10,r8
	r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// lwzx r28,r10,r7
	r28.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r7.u32);
	// lwzx r27,r10,r11
	r27.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r26,r11,r26
	r26.u64 = r11.u64 + r26.u64;
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// lis r11,-32236
	r11.s64 = -2112618496;
	// stw r22,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r22.u32);
	// add r4,r10,r24
	ctx.r4.u64 = ctx.r10.u64 + r24.u64;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
	// addi r3,r11,-23056
	ctx.r3.s64 = r11.s64 + -23056;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// bl 0x8213aba0
	sub_8213ABA0(ctx, base);
	// addi r1,r1,336
	ctx.r1.s64 = ctx.r1.s64 + 336;
	// lfd f31,-144(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// b 0x823ed158
	return;
loc_8213CF68:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213d704
	if (!cr6.getEQ()) goto loc_8213D704;
	// cmpwi cr6,r16,2
	cr6.compare<int32_t>(r16.s32, 2, xer);
	// ble cr6,0x8213cf90
	if (!cr6.getGT()) goto loc_8213CF90;
	// clrlwi r11,r21,31
	r11.u64 = r21.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213cf8c
	if (cr6.getEQ()) goto loc_8213CF8C;
	// addi r24,r24,-7
	r24.s64 = r24.s64 + -7;
	// b 0x8213cf90
	goto loc_8213CF90;
loc_8213CF8C:
	// addi r24,r24,7
	r24.s64 = r24.s64 + 7;
loc_8213CF90:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40991
	ctx.r3.u64 = ctx.r3.u64 | 40991;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lis r27,-32033
	r27.s64 = -2099314688;
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lwz r11,-8876(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -8876);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lis r22,-32033
	r22.s64 = -2099314688;
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lwz r11,-8872(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + -8872);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// addi r11,r11,-5
	r11.s64 = r11.s64 + -5;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r20,r3
	r20.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x820eaa98
	sub_820EAA98(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lwz r11,-8876(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -8876);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r11,11488(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 11488);
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// rlwinm r9,r11,0,29,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// subf r10,r10,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// lwz r11,-8872(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + -8872);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// addi r11,r11,3
	r11.s64 = r11.s64 + 3;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r22,r3
	r22.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r22
	ctx.r10.u64 = r22.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lwz r11,-1364(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -1364);
	// lwz r10,8336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8336);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8213d1d8
	if (cr6.getEQ()) goto loc_8213D1D8;
	// rotlwi r23,r10,0
	r23.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lwz r11,-8876(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -8876);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// srawi r10,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r10.s64 = r11.s32 >> 1;
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// subf r10,r10,r26
	ctx.r10.s64 = r26.s64 - ctx.r10.s64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,75
	r11.s64 = r11.s64 + 75;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r22,r3
	r22.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r22
	ctx.r10.u64 = r22.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// lwz r11,-1364(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + -1364);
loc_8213D1D8:
	// lwz r10,8340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8340);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8213d704
	if (cr6.getEQ()) goto loc_8213D704;
	// rotlwi r23,r10,0
	r23.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lwz r11,-8876(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -8876);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// srawi r10,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r10.s64 = r11.s32 >> 1;
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// subf r10,r10,r26
	ctx.r10.s64 = r26.s64 - ctx.r10.s64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,88
	r11.s64 = r11.s64 + 88;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// addi r1,r1,336
	ctx.r1.s64 = ctx.r1.s64 + 336;
	// lfd f31,-144(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// b 0x823ed158
	return;
loc_8213D294:
	// mr r27,r31
	r27.u64 = r31.u64;
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// ble cr6,0x8213d2c0
	if (!cr6.getGT()) goto loc_8213D2C0;
	// addi r23,r1,144
	r23.s64 = ctx.r1.s64 + 144;
loc_8213D2A4:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8213a720
	sub_8213A720(ctx, base);
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// stw r3,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r3.u32);
	// addi r23,r23,4
	r23.s64 = r23.s64 + 4;
	// cmpw cr6,r27,r16
	cr6.compare<int32_t>(r27.s32, r16.s32, xer);
	// blt cr6,0x8213d2a4
	if (cr6.getLT()) goto loc_8213D2A4;
loc_8213D2C0:
	// lwz r11,13304(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 13304);
	// li r22,1
	r22.s64 = 1;
	// lis r27,-31994
	r27.s64 = -2096758784;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213d2e4
	if (!cr6.getEQ()) goto loc_8213D2E4;
	// lwz r11,13296(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 13296);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213d2e8
	if (cr6.getEQ()) goto loc_8213D2E8;
loc_8213D2E4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8213D2E8:
	// bl 0x8213aa88
	sub_8213AA88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213d3b0
	if (cr6.getEQ()) goto loc_8213D3B0;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// li r4,16
	ctx.r4.s64 = 16;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8213a8a8
	sub_8213A8A8(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r11,-8868(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8868);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r11,-8872(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8872);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r23,r3
	r23.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r23
	ctx.r10.u64 = r23.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_8213D3B0:
	// lwz r11,13304(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213d3cc
	if (!cr6.getEQ()) goto loc_8213D3CC;
	// lwz r11,13296(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 13296);
	// mr r3,r22
	ctx.r3.u64 = r22.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213d3d0
	if (cr6.getEQ()) goto loc_8213D3D0;
loc_8213D3CC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8213D3D0:
	// bl 0x8213ab28
	sub_8213AB28(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213d704
	if (cr6.getEQ()) goto loc_8213D704;
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40987
	ctx.r3.u64 = ctx.r3.u64 | 40987;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r11,-8876(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8876);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// lwz r11,-8880(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -8880);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r20,r3
	r20.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r7,15120(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + 15120);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// lwz r6,-31544(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + -31544);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
	// cmpwi cr6,r23,5
	cr6.compare<int32_t>(r23.s32, 5, xer);
	// beq cr6,0x8213d4c8
	if (cr6.getEQ()) goto loc_8213D4C8;
	// cmpwi cr6,r23,6
	cr6.compare<int32_t>(r23.s32, 6, xer);
	// beq cr6,0x8213d4c8
	if (cr6.getEQ()) goto loc_8213D4C8;
	// cmpwi cr6,r23,3
	cr6.compare<int32_t>(r23.s32, 3, xer);
	// beq cr6,0x8213d4c8
	if (cr6.getEQ()) goto loc_8213D4C8;
	// li r31,2
	r31.s64 = 2;
	// mr r30,r22
	r30.u64 = r22.u64;
	// mr r29,r22
	r29.u64 = r22.u64;
	// b 0x8213d500
	goto loc_8213D500;
loc_8213D4C8:
	// lis r11,-32014
	r11.s64 = -2098069504;
	// mulli r10,r21,112
	ctx.r10.s64 = r21.s64 * 112;
	// addi r11,r11,-1360
	r11.s64 = r11.s64 + -1360;
	// addi r11,r11,105
	r11.s64 = r11.s64 + 105;
	// lbzx r11,r10,r11
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213d4f4
	if (!cr6.getEQ()) goto loc_8213D4F4;
	// li r31,4
	r31.s64 = 4;
	// li r30,3
	r30.s64 = 3;
	// li r29,5
	r29.s64 = 5;
	// b 0x8213d500
	goto loc_8213D500;
loc_8213D4F4:
	// li r31,6
	r31.s64 = 6;
	// li r30,5
	r30.s64 = 5;
	// li r29,3
	r29.s64 = 3;
loc_8213D500:
	// cmpwi cr6,r23,2
	cr6.compare<int32_t>(r23.s32, 2, xer);
	// bne cr6,0x8213d514
	if (!cr6.getEQ()) goto loc_8213D514;
	// lis r11,-32236
	r11.s64 = -2112618496;
	// addi r28,r11,-22960
	r28.s64 = r11.s64 + -22960;
	// b 0x8213d51c
	goto loc_8213D51C;
loc_8213D514:
	// lis r11,-32236
	r11.s64 = -2112618496;
	// addi r28,r11,-23056
	r28.s64 = r11.s64 + -23056;
loc_8213D51C:
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r27,r11,r26
	r27.u64 = r11.u64 + r26.u64;
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r7,144(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r8,148(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// lwz r10,156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// add r4,r11,r24
	ctx.r4.u64 = r11.u64 + r24.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r30.u32);
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r29.u32);
	// bl 0x8213aba0
	sub_8213ABA0(ctx, base);
	// addi r1,r1,336
	ctx.r1.s64 = ctx.r1.s64 + 336;
	// lfd f31,-144(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// b 0x823ed158
	return;
loc_8213D570:
	// lwz r10,480(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 480);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8213d704
	if (cr6.getEQ()) goto loc_8213D704;
	// lwz r10,1360(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1360);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8213d704
	if (cr6.getEQ()) goto loc_8213D704;
	// lwz r11,1356(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 1356);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8213d704
	if (cr6.getEQ()) goto loc_8213D704;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13296(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13296);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213d704
	if (!cr6.getEQ()) goto loc_8213D704;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,13304(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 13304);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213d704
	if (!cr6.getEQ()) goto loc_8213D704;
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// mr r30,r31
	r30.u64 = r31.u64;
	// ble cr6,0x8213d5f4
	if (!cr6.getGT()) goto loc_8213D5F4;
	// lis r11,-32014
	r11.s64 = -2098069504;
	// rlwinm r9,r21,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r11,-1360
	ctx.r10.s64 = r11.s64 + -1360;
	// mr r11,r16
	r11.u64 = r16.u64;
	// addi r10,r10,36
	ctx.r10.s64 = ctx.r10.s64 + 36;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
loc_8213D5DC:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r10,r10,112
	ctx.r10.s64 = ctx.r10.s64 + 112;
	// add r30,r9,r30
	r30.u64 = ctx.r9.u64 + r30.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213d5dc
	if (!cr6.getEQ()) goto loc_8213D5DC;
loc_8213D5F4:
	// bl 0x820ec268
	sub_820EC268(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x8213d608
	if (!cr6.getEQ()) goto loc_8213D608;
	// cmpwi cr6,r30,2
	cr6.compare<int32_t>(r30.s32, 2, xer);
	// bge cr6,0x8213d704
	if (!cr6.getLT()) goto loc_8213D704;
loc_8213D608:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,40994
	ctx.r3.u64 = ctx.r3.u64 | 40994;
	// bl 0x82136ad8
	sub_82136AD8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r28,-31994
	r28.s64 = -2096758784;
	// lis r29,-31991
	r29.s64 = -2096562176;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// lfs f1,6580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6580);
	ctx.f1.f64 = double(temp.f32);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// lwz r7,15120(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15120);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r6,-31544(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31544);
	// bl 0x8213e098
	sub_8213E098(ctx, base);
	// bl 0x8210e208
	sub_8210E208(ctx, base);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// subf r27,r11,r10
	r27.s64 = ctx.r10.s64 - r11.s64;
	// bl 0x8210e280
	sub_8210E280(ctx, base);
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// bl 0x8210e218
	sub_8210E218(ctx, base);
	// extsh r10,r3
	ctx.r10.s64 = ctx.r3.s16;
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// subf r27,r11,r10
	r27.s64 = ctx.r10.s64 - r11.s64;
	// bl 0x8210e2f0
	sub_8210E2F0(ctx, base);
	// lwz r10,136(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// li r7,0
	ctx.r7.s64 = 0;
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r9,128(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// add r8,r10,r11
	ctx.r8.u64 = ctx.r10.u64 + r11.u64;
	// extsh r11,r3
	r11.s64 = ctx.r3.s16;
	// addi r5,r8,1
	ctx.r5.s64 = ctx.r8.s64 + 1;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// addi r3,r10,-1
	ctx.r3.s64 = ctx.r10.s64 + -1;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// addi r4,r11,-1
	ctx.r4.s64 = r11.s64 + -1;
	// addi r6,r9,1
	ctx.r6.s64 = ctx.r9.s64 + 1;
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// bl 0x8213e018
	sub_8213E018(ctx, base);
	// bl 0x8210e198
	sub_8210E198(ctx, base);
	// extsh r27,r3
	r27.s64 = ctx.r3.s16;
	// bl 0x8210e188
	sub_8210E188(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// lis r8,255
	ctx.r8.s64 = 16711680;
	// lwz r7,15120(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 15120);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lwz r6,-31544(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + -31544);
	// ori r8,r8,176
	ctx.r8.u64 = ctx.r8.u64 | 176;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// addi r4,r1,140
	ctx.r4.s64 = ctx.r1.s64 + 140;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// bl 0x8213e0d8
	sub_8213E0D8(ctx, base);
loc_8213D704:
	// addi r1,r1,336
	ctx.r1.s64 = ctx.r1.s64 + 336;
	// lfd f31,-144(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// b 0x823ed158
	return;
}

__attribute__((alias("__imp__sub_8213D710"))) PPC_WEAK_FUNC(sub_8213D710);
PPC_FUNC_IMPL(__imp__sub_8213D710) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,14216(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 14216);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213D720"))) PPC_WEAK_FUNC(sub_8213D720);
PPC_FUNC_IMPL(__imp__sub_8213D720) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,14228(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 14228);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213D730"))) PPC_WEAK_FUNC(sub_8213D730);
PPC_FUNC_IMPL(__imp__sub_8213D730) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r3,14224(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 14224);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213D740"))) PPC_WEAK_FUNC(sub_8213D740);
PPC_FUNC_IMPL(__imp__sub_8213D740) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,14216(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 14216);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213d768
	if (!cr6.getEQ()) goto loc_8213D768;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,14228(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 14228);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213d768
	if (!cr6.getEQ()) goto loc_8213D768;
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_8213D768:
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r11,14204(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 14204);
	// lwz r3,128(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 128);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213D778"))) PPC_WEAK_FUNC(sub_8213D778);
PPC_FUNC_IMPL(__imp__sub_8213D778) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed548
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r29,r3,31
	r29.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// sth r30,6(r31)
	PPC_STORE_U16(r31.u32 + 6, r30.u16);
	// li r10,0
	ctx.r10.s64 = 0;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// cmpwi cr6,r27,4
	cr6.compare<int32_t>(r27.s32, 4, xer);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f31,14028(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 14028);
	f31.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f13,f0,f31
	ctx.f13.f64 = double(float(f0.f64 * f31.f64));
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f29,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f29.f64 = double(temp.f32);
	// fmuls f30,f13,f0
	f30.f64 = double(float(ctx.f13.f64 * f0.f64));
	// bne cr6,0x8213d810
	if (!cr6.getEQ()) goto loc_8213D810;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// stfs f29,8(r31)
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r11,r11,29448
	r11.s64 = r11.s64 + 29448;
	// b 0x8213d8a0
	goto loc_8213D8A0;
loc_8213D810:
	// cmpwi cr6,r27,1
	cr6.compare<int32_t>(r27.s32, 1, xer);
	// bne cr6,0x8213d838
	if (!cr6.getEQ()) goto loc_8213D838;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// li r9,11
	ctx.r9.s64 = 11;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r11,r11,27928
	r11.s64 = r11.s64 + 27928;
	// lfs f0,2692(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2692);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// sth r9,4(r31)
	PPC_STORE_U16(r31.u32 + 4, ctx.r9.u16);
	// b 0x8213d8a4
	goto loc_8213D8A4;
loc_8213D838:
	// cmpwi cr6,r27,3
	cr6.compare<int32_t>(r27.s32, 3, xer);
	// bne cr6,0x8213d860
	if (!cr6.getEQ()) goto loc_8213D860;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// li r9,9
	ctx.r9.s64 = 9;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r11,r11,29464
	r11.s64 = r11.s64 + 29464;
	// lfs f0,2692(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2692);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// sth r9,4(r31)
	PPC_STORE_U16(r31.u32 + 4, ctx.r9.u16);
	// b 0x8213d8a4
	goto loc_8213D8A4;
loc_8213D860:
	// cmpwi cr6,r27,6
	cr6.compare<int32_t>(r27.s32, 6, xer);
	// bne cr6,0x8213d888
	if (!cr6.getEQ()) goto loc_8213D888;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// li r9,100
	ctx.r9.s64 = 100;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r11,r11,29448
	r11.s64 = r11.s64 + 29448;
	// lfs f0,2688(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
	// sth r9,4(r31)
	PPC_STORE_U16(r31.u32 + 4, ctx.r9.u16);
	// b 0x8213d8a4
	goto loc_8213D8A4;
loc_8213D888:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// addi r11,r11,27928
	r11.s64 = r11.s64 + 27928;
	// lfs f0,2692(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2692);
	f0.f64 = double(temp.f32);
	// li r10,11
	ctx.r10.s64 = 11;
	// stfs f0,8(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 8, temp.u32);
loc_8213D8A0:
	// sth r10,4(r31)
	PPC_STORE_U16(r31.u32 + 4, ctx.r10.u16);
loc_8213D8A4:
	// lis r10,-32033
	ctx.r10.s64 = -2099314688;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r10,-8848
	ctx.r10.s64 = ctx.r10.s64 + -8848;
	// addi r7,r10,3
	ctx.r7.s64 = ctx.r10.s64 + 3;
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// addi r8,r10,2
	ctx.r8.s64 = ctx.r10.s64 + 2;
	// lbzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// stb r10,40(r31)
	PPC_STORE_U8(r31.u32 + 40, ctx.r10.u8);
	// lbzx r10,r11,r9
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + ctx.r9.u32);
	// stb r10,41(r31)
	PPC_STORE_U8(r31.u32 + 41, ctx.r10.u8);
	// lbzx r10,r11,r8
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + ctx.r8.u32);
	// stb r10,42(r31)
	PPC_STORE_U8(r31.u32 + 42, ctx.r10.u8);
	// lbzx r11,r11,r7
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r7.u32);
	// stb r11,43(r31)
	PPC_STORE_U8(r31.u32 + 43, r11.u8);
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,16(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 16, temp.u32);
	// lfs f0,4(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,20(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 20, temp.u32);
	// lfs f0,8(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,24(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 24, temp.u32);
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// clrlwi r30,r3,31
	r30.u64 = ctx.r3.u32 & 0x1;
	// bl 0x8238ce40
	sub_8238CE40(ctx, base);
	// rlwinm r11,r3,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// lfs f0,12900(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12900);
	f0.f64 = double(temp.f32);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f13,f13,f31
	ctx.f13.f64 = double(float(ctx.f13.f64 * f31.f64));
	// fmadds f0,f13,f0,f29
	f0.f64 = double(float(ctx.f13.f64 * f0.f64 + f29.f64));
	// fmuls f13,f0,f28
	ctx.f13.f64 = double(float(f0.f64 * f28.f64));
	// lfs f0,24880(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 24880);
	f0.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfs f31,36(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 36, temp.u32);
	// bl 0x823edcb0
	sub_823EDCB0(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// stfs f0,28(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 28, temp.u32);
	// bl 0x823edbe0
	sub_823EDBE0(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// fmuls f0,f0,f31
	f0.f64 = double(float(f0.f64 * f31.f64));
	// stfs f0,32(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 32, temp.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// addi r12,r1,-48
	r12.s64 = ctx.r1.s64 + -48;
	// bl 0x823ed594
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8213D980"))) PPC_WEAK_FUNC(sub_8213D980);
PPC_FUNC_IMPL(__imp__sub_8213D980) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// addi r11,r11,14240
	r11.s64 = r11.s64 + 14240;
	// mr r7,r6
	ctx.r7.u64 = ctx.r6.u64;
	// mr r31,r11
	r31.u64 = r11.u64;
loc_8213D9A4:
	// lhz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8213d9d8
	if (cr6.getEQ()) goto loc_8213D9D8;
	// addi r31,r31,44
	r31.s64 = r31.s64 + 44;
	// addi r10,r11,880
	ctx.r10.s64 = r11.s64 + 880;
	// cmplw cr6,r31,r10
	cr6.compare<uint32_t>(r31.u32, ctx.r10.u32, xer);
	// blt cr6,0x8213d9a4
	if (cr6.getLT()) goto loc_8213D9A4;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8213D9D8:
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8213d778
	sub_8213D778(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213DA00"))) PPC_WEAK_FUNC(sub_8213DA00);
PPC_FUNC_IMPL(__imp__sub_8213DA00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// addi r7,r11,14240
	ctx.r7.s64 = r11.s64 + 14240;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
	// lwz r8,-6384(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6384);
loc_8213DA18:
	// lhz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 4);
	// extsh r9,r10
	ctx.r9.s64 = ctx.r10.s16;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x8213da44
	if (!cr6.getGT()) goto loc_8213DA44;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// add. r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// blt 0x8213da44
	if (cr0.getLT()) goto loc_8213DA44;
	// cmpw cr6,r10,r9
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, xer);
	// blt cr6,0x8213da44
	if (cr6.getLT()) goto loc_8213DA44;
	// sth r6,4(r11)
	PPC_STORE_U16(r11.u32 + 4, ctx.r6.u16);
loc_8213DA44:
	// addi r11,r11,44
	r11.s64 = r11.s64 + 44;
	// addi r10,r7,880
	ctx.r10.s64 = ctx.r7.s64 + 880;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x8213da18
	if (cr6.getLT()) goto loc_8213DA18;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213DA58"))) PPC_WEAK_FUNC(sub_8213DA58);
PPC_FUNC_IMPL(__imp__sub_8213DA58) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// addi r12,r1,-40
	r12.s64 = ctx.r1.s64 + -40;
	// bl 0x823ed530
	// stwu r1,-544(r1)
	ea = -544 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lhz r11,4(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8213df90
	if (!cr6.getGT()) goto loc_8213DF90;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8213df90
	if (cr6.getLT()) goto loc_8213DF90;
	// addi r28,r31,16
	r28.s64 = r31.s64 + 16;
	// lfs f1,36(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 36);
	ctx.f1.f64 = double(temp.f32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8210db48
	sub_8210DB48(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8213df90
	if (cr6.getEQ()) goto loc_8213DF90;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r29,0
	r29.s64 = 0;
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// stfs f31,192(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 192, temp.u32);
	// sth r29,204(r1)
	PPC_STORE_U16(ctx.r1.u32 + 204, r29.u16);
	// stfs f31,196(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 196, temp.u32);
	// stfs f31,200(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 200, temp.u32);
	// stfs f31,208(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 208, temp.u32);
	// stfs f31,212(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 212, temp.u32);
	// bl 0x8210d870
	sub_8210D870(ctx, base);
	// lhz r11,6(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 6);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// bl 0x821184a0
	sub_821184A0(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lbz r10,40(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 40);
	// lfs f0,28(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 28);
	f0.f64 = double(temp.f32);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// lfs f9,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f9.f64 = double(temp.f32);
	// lfs f8,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f8.f64 = double(temp.f32);
	// fmuls f3,f9,f0
	ctx.f3.f64 = double(float(ctx.f9.f64 * f0.f64));
	// lfs f7,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f7.f64 = double(temp.f32);
	// fmuls f2,f8,f0
	ctx.f2.f64 = double(float(ctx.f8.f64 * f0.f64));
	// lfs f6,16(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	ctx.f6.f64 = double(temp.f32);
	// fmuls f1,f7,f0
	ctx.f1.f64 = double(float(ctx.f7.f64 * f0.f64));
	// lfs f5,20(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 20);
	ctx.f5.f64 = double(temp.f32);
	// stb r10,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r10.u8);
	// std r11,224(r1)
	PPC_STORE_U64(ctx.r1.u32 + 224, r11.u64);
	// lfd f30,224(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + 224);
	// fcfid f26,f30
	f26.f64 = double(f30.s64);
	// lfs f4,24(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 24);
	ctx.f4.f64 = double(temp.f32);
	// fmuls f30,f6,f0
	f30.f64 = double(float(ctx.f6.f64 * f0.f64));
	// lbz r10,41(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 41);
	// fmuls f29,f5,f0
	f29.f64 = double(float(ctx.f5.f64 * f0.f64));
	// lfs f27,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	f27.f64 = double(temp.f32);
	// fmuls f28,f4,f0
	f28.f64 = double(float(ctx.f4.f64 * f0.f64));
	// addi r8,r1,224
	ctx.r8.s64 = ctx.r1.s64 + 224;
	// lfs f13,32(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 32);
	ctx.f13.f64 = double(temp.f32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lfs f12,0(r28)
	temp.u32 = PPC_LOAD_U32(r28.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// addi r11,r1,192
	r11.s64 = ctx.r1.s64 + 192;
	// stb r10,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r10.u8);
	// lfs f11,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f11.f64 = double(temp.f32);
	// lbz r10,42(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 42);
	// lfs f10,24(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 24);
	ctx.f10.f64 = double(temp.f32);
	// li r9,7
	ctx.r9.s64 = 7;
	// fmuls f9,f13,f9
	ctx.f9.f64 = double(float(ctx.f13.f64 * ctx.f9.f64));
	// fmuls f8,f13,f8
	ctx.f8.f64 = double(float(ctx.f13.f64 * ctx.f8.f64));
	// frsp f0,f26
	f0.f64 = double(float(f26.f64));
	// fmuls f7,f13,f7
	ctx.f7.f64 = double(float(ctx.f13.f64 * ctx.f7.f64));
	// stb r10,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r10.u8);
	// fmuls f6,f6,f13
	ctx.f6.f64 = double(float(ctx.f6.f64 * ctx.f13.f64));
	// lbz r10,43(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 43);
	// fmuls f5,f5,f13
	ctx.f5.f64 = double(float(ctx.f5.f64 * ctx.f13.f64));
	// fmuls f4,f4,f13
	ctx.f4.f64 = double(float(ctx.f4.f64 * ctx.f13.f64));
	// stb r10,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r10.u8);
	// addi r10,r1,240
	ctx.r10.s64 = ctx.r1.s64 + 240;
	// fmuls f0,f27,f0
	f0.f64 = double(float(f27.f64 * f0.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r8
	PPC_STORE_U32(ctx.r8.u32, f0.u32);
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213DB98:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8213db98
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213DB98;
	// addi r10,r1,268
	ctx.r10.s64 = ctx.r1.s64 + 268;
	// addi r11,r1,192
	r11.s64 = ctx.r1.s64 + 192;
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213DBBC:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8213dbbc
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213DBBC;
	// addi r10,r1,296
	ctx.r10.s64 = ctx.r1.s64 + 296;
	// addi r11,r1,192
	r11.s64 = ctx.r1.s64 + 192;
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213DBE0:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8213dbe0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213DBE0;
	// addi r10,r1,324
	ctx.r10.s64 = ctx.r1.s64 + 324;
	// addi r11,r1,192
	r11.s64 = ctx.r1.s64 + 192;
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213DC04:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8213dc04
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213DC04;
	// fsubs f13,f12,f3
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f12.f64 - ctx.f3.f64));
	// lis r11,-32123
	r11.s64 = -2105212928;
	// lfs f27,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f27.f64 = double(temp.f32);
	// fsubs f26,f11,f2
	f26.f64 = double(float(ctx.f11.f64 - ctx.f2.f64));
	// fsubs f25,f10,f1
	f25.f64 = double(float(ctx.f10.f64 - ctx.f1.f64));
	// fadds f24,f9,f12
	f24.f64 = double(float(ctx.f9.f64 + ctx.f12.f64));
	// fadds f23,f8,f11
	f23.f64 = double(float(ctx.f8.f64 + ctx.f11.f64));
	// lfs f0,32576(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32576);
	f0.f64 = double(temp.f32);
	// fadds f22,f7,f10
	f22.f64 = double(float(ctx.f7.f64 + ctx.f10.f64));
	// fsubs f13,f13,f6
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f6.f64));
	// fsubs f26,f26,f5
	f26.f64 = double(float(f26.f64 - ctx.f5.f64));
	// fsubs f25,f25,f4
	f25.f64 = double(float(f25.f64 - ctx.f4.f64));
	// fsubs f24,f24,f30
	f24.f64 = double(float(f24.f64 - f30.f64));
	// fsubs f23,f23,f29
	f23.f64 = double(float(f23.f64 - f29.f64));
	// fadds f6,f6,f3
	ctx.f6.f64 = double(float(ctx.f6.f64 + ctx.f3.f64));
	// fadds f5,f5,f2
	ctx.f5.f64 = double(float(ctx.f5.f64 + ctx.f2.f64));
	// fmsubs f13,f13,f0,f27
	ctx.f13.f64 = double(float(ctx.f13.f64 * f0.f64 - f27.f64));
	// fsubs f27,f22,f28
	f27.f64 = double(float(f22.f64 - f28.f64));
	// fctiwz f13,f13
	ctx.f13.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfd f13,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.f13.u64);
	// lhz r11,182(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 182);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lfd f13,176(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// stfs f13,240(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 240, temp.u32);
	// lfs f13,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// fmsubs f13,f26,f0,f13
	ctx.f13.f64 = double(float(f26.f64 * f0.f64 - ctx.f13.f64));
	// fctiwz f13,f13
	ctx.f13.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfd f13,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.f13.u64);
	// lhz r11,182(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 182);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f13,176(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// stfs f13,244(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 244, temp.u32);
	// lfs f13,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// fmsubs f26,f25,f0,f13
	f26.f64 = double(float(f25.f64 * f0.f64 - ctx.f13.f64));
	// lfs f13,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,256(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 256, temp.u32);
	// stfs f31,260(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 260, temp.u32);
	// fctiwz f26,f26
	f26.s64 = (f26.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f26.f64));
	// stfd f26,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, f26.u64);
	// lhz r11,182(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 182);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lfd f26,176(r1)
	f26.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f26,f26
	f26.f64 = double(f26.s64);
	// frsp f26,f26
	f26.f64 = double(float(f26.f64));
	// stfs f26,248(r1)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(ctx.r1.u32 + 248, temp.u32);
	// lfs f26,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	f26.f64 = double(temp.f32);
	// fmsubs f26,f24,f0,f26
	f26.f64 = double(float(f24.f64 * f0.f64 - f26.f64));
	// fctiwz f26,f26
	f26.s64 = (f26.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f26.f64));
	// stfd f26,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, f26.u64);
	// lhz r11,182(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 182);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lfd f26,176(r1)
	f26.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f26,f26
	f26.f64 = double(f26.s64);
	// frsp f26,f26
	f26.f64 = double(float(f26.f64));
	// stfs f26,268(r1)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(ctx.r1.u32 + 268, temp.u32);
	// lfs f26,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	f26.f64 = double(temp.f32);
	// fmsubs f26,f23,f0,f26
	f26.f64 = double(float(f23.f64 * f0.f64 - f26.f64));
	// fctiwz f26,f26
	f26.s64 = (f26.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f26.f64));
	// stfd f26,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, f26.u64);
	// lhz r11,182(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 182);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lfd f26,176(r1)
	f26.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f26,f26
	f26.f64 = double(f26.s64);
	// frsp f26,f26
	f26.f64 = double(float(f26.f64));
	// stfs f26,272(r1)
	temp.f32 = float(f26.f64);
	PPC_STORE_U32(ctx.r1.u32 + 272, temp.u32);
	// lfs f26,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	f26.f64 = double(temp.f32);
	// fmsubs f27,f27,f0,f26
	f27.f64 = double(float(f27.f64 * f0.f64 - f26.f64));
	// stfs f31,284(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 284, temp.u32);
	// stfs f31,288(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 288, temp.u32);
	// fctiwz f27,f27
	f27.s64 = (f27.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f27.f64));
	// stfd f27,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, f27.u64);
	// lhz r11,182(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 182);
	// fsubs f8,f11,f8
	ctx.f8.f64 = double(float(ctx.f11.f64 - ctx.f8.f64));
	// fadds f11,f5,f11
	ctx.f11.f64 = double(float(ctx.f5.f64 + ctx.f11.f64));
	// extsh r11,r11
	r11.s64 = r11.s16;
	// fsubs f9,f12,f9
	ctx.f9.f64 = double(float(ctx.f12.f64 - ctx.f9.f64));
	// fadds f12,f6,f12
	ctx.f12.f64 = double(float(ctx.f6.f64 + ctx.f12.f64));
	// fadds f4,f4,f1
	ctx.f4.f64 = double(float(ctx.f4.f64 + ctx.f1.f64));
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// fadds f8,f8,f29
	ctx.f8.f64 = double(float(ctx.f8.f64 + f29.f64));
	// fadds f9,f9,f30
	ctx.f9.f64 = double(float(ctx.f9.f64 + f30.f64));
	// fadds f6,f4,f10
	ctx.f6.f64 = double(float(ctx.f4.f64 + ctx.f10.f64));
	// lfd f5,176(r1)
	ctx.f5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f5,f5
	ctx.f5.f64 = double(ctx.f5.s64);
	// frsp f5,f5
	ctx.f5.f64 = double(float(ctx.f5.f64));
	// stfs f5,276(r1)
	temp.f32 = float(ctx.f5.f64);
	PPC_STORE_U32(ctx.r1.u32 + 276, temp.u32);
	// lfs f5,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f5.f64 = double(temp.f32);
	// fmsubs f12,f12,f0,f5
	ctx.f12.f64 = double(float(ctx.f12.f64 * f0.f64 - ctx.f5.f64));
	// fctiwz f12,f12
	ctx.f12.s64 = (ctx.f12.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f12.f64));
	// stfd f12,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.f12.u64);
	// lhz r11,182(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 182);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lfd f12,176(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// stfs f12,296(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 296, temp.u32);
	// lfs f12,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// fmsubs f12,f11,f0,f12
	ctx.f12.f64 = double(float(ctx.f11.f64 * f0.f64 - ctx.f12.f64));
	// fsubs f11,f10,f7
	ctx.f11.f64 = double(float(ctx.f10.f64 - ctx.f7.f64));
	// fctiwz f12,f12
	ctx.f12.s64 = (ctx.f12.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f12.f64));
	// stfd f12,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.f12.u64);
	// fadds f11,f11,f28
	ctx.f11.f64 = double(float(ctx.f11.f64 + f28.f64));
	// lhz r11,182(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 182);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lfd f12,176(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// stfs f12,300(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 300, temp.u32);
	// lfs f12,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// fmsubs f12,f6,f0,f12
	ctx.f12.f64 = double(float(ctx.f6.f64 * f0.f64 - ctx.f12.f64));
	// stfs f31,312(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 312, temp.u32);
	// stfs f13,316(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 316, temp.u32);
	// fctiwz f12,f12
	ctx.f12.s64 = (ctx.f12.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f12.f64));
	// stfd f12,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.f12.u64);
	// lhz r11,182(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 182);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lfd f12,176(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// stfs f12,304(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 304, temp.u32);
	// lfs f12,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// fmsubs f12,f9,f0,f12
	ctx.f12.f64 = double(float(ctx.f9.f64 * f0.f64 - ctx.f12.f64));
	// fctiwz f12,f12
	ctx.f12.s64 = (ctx.f12.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f12.f64));
	// stfd f12,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.f12.u64);
	// lhz r11,182(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 182);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lfd f12,176(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// stfs f12,324(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 324, temp.u32);
	// lfs f12,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f12.f64 = double(temp.f32);
	// fmsubs f12,f8,f0,f12
	ctx.f12.f64 = double(float(ctx.f8.f64 * f0.f64 - ctx.f12.f64));
	// fctiwz f12,f12
	ctx.f12.s64 = (ctx.f12.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f12.f64));
	// stfd f12,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.f12.u64);
	// lhz r11,182(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 182);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lfd f12,176(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// stfs f12,328(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 328, temp.u32);
	// lfs f12,8(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// fmsubs f0,f11,f0,f12
	f0.f64 = double(float(ctx.f11.f64 * f0.f64 - ctx.f12.f64));
	// stfs f13,340(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 340, temp.u32);
	// stfs f13,344(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 344, temp.u32);
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfd f0,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, f0.u64);
	// lhz r11,182(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 182);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// std r11,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, r11.u64);
	// lfd f0,176(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,332(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 332, temp.u32);
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r10,r1,352
	ctx.r10.s64 = ctx.r1.s64 + 352;
	// li r9,8
	ctx.r9.s64 = 8;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8213DECC:
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// bdnz 0x8213decc
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8213DECC;
	// lis r11,-32123
	r11.s64 = -2105212928;
	// addi r4,r1,352
	ctx.r4.s64 = ctx.r1.s64 + 352;
	// addi r3,r1,352
	ctx.r3.s64 = ctx.r1.s64 + 352;
	// lfs f3,32580(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 32580);
	ctx.f3.f64 = double(temp.f32);
	// fmr f2,f3
	ctx.f2.f64 = ctx.f3.f64;
	// fmr f1,f3
	ctx.f1.f64 = ctx.f3.f64;
	// bl 0x8238b228
	sub_8238B228(ctx, base);
	// addi r4,r1,352
	ctx.r4.s64 = ctx.r1.s64 + 352;
	// lfs f3,8(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 8);
	ctx.f3.f64 = double(temp.f32);
	// addi r3,r1,352
	ctx.r3.s64 = ctx.r1.s64 + 352;
	// lfs f2,4(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 4);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,0(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8238b128
	sub_8238B128(ctx, base);
	// addi r30,r1,240
	r30.s64 = ctx.r1.s64 + 240;
	// bl 0x8210d7d0
	sub_8210D7D0(ctx, base);
	// lwz r11,224(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r28,r1,352
	r28.s64 = ctx.r1.s64 + 352;
	// add r3,r11,r10
	ctx.r3.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x821463f0
	sub_821463F0(ctx, base);
	// li r10,3
	ctx.r10.s64 = 3;
	// li r11,2
	r11.s64 = 2;
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r29.u32);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// stw r29,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r29.u32);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// stw r29,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r29.u32);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r29,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r29.u32);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r8,1
	ctx.r8.s64 = 1;
	// stw r29,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r29.u32);
	// li r9,2
	ctx.r9.s64 = 2;
	// stw r29,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r29.u32);
	// stw r11,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r11.u32);
	// stw r10,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r10.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r29,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r29.u32);
	// bl 0x82098e58
	sub_82098E58(ctx, base);
loc_8213DF90:
	// addi r1,r1,544
	ctx.r1.s64 = ctx.r1.s64 + 544;
	// addi r12,r1,-40
	r12.s64 = ctx.r1.s64 + -40;
	// bl 0x823ed57c
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8213DFA0"))) PPC_WEAK_FUNC(sub_8213DFA0);
PPC_FUNC_IMPL(__imp__sub_8213DFA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31994
	r11.s64 = -2096758784;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r9,r11,14240
	ctx.r9.s64 = r11.s64 + 14240;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
loc_8213DFB0:
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// addi r8,r9,880
	ctx.r8.s64 = ctx.r9.s64 + 880;
	// sth r10,4(r11)
	PPC_STORE_U16(r11.u32 + 4, ctx.r10.u16);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,44
	r11.s64 = r11.s64 + 44;
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// blt cr6,0x8213dfb0
	if (cr6.getLT()) goto loc_8213DFB0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213DFD0"))) PPC_WEAK_FUNC(sub_8213DFD0);
PPC_FUNC_IMPL(__imp__sub_8213DFD0) {
	PPC_FUNC_PROLOGUE();
	// b 0x8213da00
	sub_8213DA00(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8213DFD8"))) PPC_WEAK_FUNC(sub_8213DFD8);
PPC_FUNC_IMPL(__imp__sub_8213DFD8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31994
	r11.s64 = -2096758784;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r30,r11,14240
	r30.s64 = r11.s64 + 14240;
	// mr r31,r30
	r31.u64 = r30.u64;
loc_8213DFF4:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8213da58
	sub_8213DA58(ctx, base);
	// addi r31,r31,44
	r31.s64 = r31.s64 + 44;
	// addi r11,r30,880
	r11.s64 = r30.s64 + 880;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// blt cr6,0x8213dff4
	if (cr6.getLT()) goto loc_8213DFF4;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8213E018"))) PPC_WEAK_FUNC(sub_8213E018);
PPC_FUNC_IMPL(__imp__sub_8213E018) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// extsw r10,r6
	ctx.r10.s64 = ctx.r6.s32;
	// extsw r6,r5
	ctx.r6.s64 = ctx.r5.s32;
	// extsw r5,r4
	ctx.r5.s64 = ctx.r4.s32;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// mr r3,r7
	ctx.r3.u64 = ctx.r7.u64;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// li r9,0
	ctx.r9.s64 = 0;
	// std r6,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r6.u64);
	// li r8,0
	ctx.r8.s64 = 0;
	// std r5,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r5.u64);
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f12,96(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lfd f11,104(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f4,f0
	ctx.f4.f64 = double(float(f0.f64));
	// frsp f3,f13
	ctx.f3.f64 = double(float(ctx.f13.f64));
	// frsp f2,f12
	ctx.f2.f64 = double(float(ctx.f12.f64));
	// frsp f1,f11
	ctx.f1.f64 = double(float(ctx.f11.f64));
	// bl 0x820972f8
	sub_820972F8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213E098"))) PPC_WEAK_FUNC(sub_8213E098);
PPC_FUNC_IMPL(__imp__sub_8213E098) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r6,r11
	ctx.r6.u64 = r11.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213E0D8"))) PPC_WEAK_FUNC(sub_8213E0D8);
PPC_FUNC_IMPL(__imp__sub_8213E0D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -88, f29.u64);
	// stfd f30,-80(r1)
	PPC_STORE_U64(ctx.r1.u32 + -80, f30.u64);
	// stfd f31,-72(r1)
	PPC_STORE_U64(ctx.r1.u32 + -72, f31.u64);
	// stwu r1,-384(r1)
	ea = -384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r9
	r28.u64 = ctx.r9.u64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r7,r1,132
	ctx.r7.s64 = ctx.r1.s64 + 132;
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// lfs f1,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	ctx.f1.f64 = double(temp.f32);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// mr r27,r8
	r27.u64 = ctx.r8.u64;
	// addi r26,r11,1
	r26.s64 = r11.s64 + 1;
	// bl 0x8209bd50
	sub_8209BD50(ctx, base);
	// extsw r11,r26
	r11.s64 = r26.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209bc18
	sub_8209BC18(ctx, base);
	// lwz r11,484(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 484);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f31,f0
	f31.f64 = double(float(f0.f64));
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lis r11,-31994
	r11.s64 = -2096758784;
	// lwz r10,0(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lbz r8,15128(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 15128);
	// lwz r11,468(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 468);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// extsw r10,r9
	ctx.r10.s64 = ctx.r9.s32;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, r11.u64);
	// lfd f13,104(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f30,f0
	f30.f64 = double(float(f0.f64));
	// frsp f29,f13
	f29.f64 = double(float(ctx.f13.f64));
	// beq cr6,0x8213e2c0
	if (cr6.getEQ()) goto loc_8213E2C0;
	// bl 0x8209b7c8
	sub_8209B7C8(ctx, base);
	// lis r11,-32033
	r11.s64 = -2099314688;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// li r4,122
	ctx.r4.s64 = 122;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// lfs f0,-8820(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -8820);
	f0.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,13980(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 13980);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f1,f0,f13
	ctx.f1.f64 = double(float(f0.f64 * ctx.f13.f64));
	// bl 0x8238c110
	sub_8238C110(ctx, base);
	// addi r5,r1,224
	ctx.r5.s64 = ctx.r1.s64 + 224;
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8238bc28
	sub_8238BC28(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// fneg f2,f29
	ctx.fpscr.disableFlushMode();
	ctx.f2.u64 = f29.u64 ^ 0x8000000000000000;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// addi r31,r11,1
	r31.s64 = r11.s64 + 1;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// extsw r11,r31
	r11.s64 = r31.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// std r11,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, r11.u64);
	// lfd f0,136(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209bc18
	sub_8209BC18(ctx, base);
	// addi r5,r1,224
	ctx.r5.s64 = ctx.r1.s64 + 224;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209bc88
	sub_8209BC88(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// b 0x8213e354
	goto loc_8213E354;
loc_8213E2C0:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// fmr f2,f29
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f29.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// addi r31,r11,1
	r31.s64 = r11.s64 + 1;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// extsw r11,r31
	r11.s64 = r31.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// std r11,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, r11.u64);
	// lfd f0,136(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209bc18
	sub_8209BC18(ctx, base);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
loc_8213E354:
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// lfd f29,-88(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8213E380"))) PPC_WEAK_FUNC(sub_8213E380);
PPC_FUNC_IMPL(__imp__sub_8213E380) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,15128(r10)
	PPC_STORE_U8(ctx.r10.u32 + 15128, r11.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213E398"))) PPC_WEAK_FUNC(sub_8213E398);
PPC_FUNC_IMPL(__imp__sub_8213E398) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed114
	// addi r12,r1,-112
	r12.s64 = ctx.r1.s64 + -112;
	// bl 0x823ed548
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32190
	r11.s64 = -2109603840;
	// lwz r19,412(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 412);
	// lwz r24,396(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 396);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// lbz r11,576(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 576);
	// mr r20,r8
	r20.u64 = ctx.r8.u64;
	// mr r23,r9
	r23.u64 = ctx.r9.u64;
	// mr r25,r10
	r25.u64 = ctx.r10.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8213e53c
	if (cr6.getEQ()) goto loc_8213E53C;
	// lis r22,-32033
	r22.s64 = -2099314688;
	// lwz r11,-8812(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + -8812);
	// neg r21,r11
	r21.s64 = -r11.s64;
	// cmpw cr6,r21,r11
	cr6.compare<int32_t>(r21.s32, r11.s32, xer);
	// bgt cr6,0x8213e53c
	if (cr6.getGT()) goto loc_8213E53C;
	// lis r28,-32033
	r28.s64 = -2099314688;
loc_8213E3F8:
	// neg r31,r11
	r31.s64 = -r11.s64;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// bgt cr6,0x8213e530
	if (cr6.getGT()) goto loc_8213E530;
	// extsw r11,r19
	r11.s64 = r19.s32;
	// extsw r10,r21
	ctx.r10.s64 = r21.s32;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// std r10,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, ctx.r10.u64);
	// lfd f0,112(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// lfd f13,120(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f28,f0
	f28.f64 = double(float(f0.f64));
	// frsp f31,f13
	f31.f64 = double(float(ctx.f13.f64));
loc_8213E42C:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// extsw r10,r31
	ctx.r10.s64 = r31.s32;
	// lwz r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lfs f0,-8816(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + -8816);
	f0.f64 = double(temp.f32);
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r10,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r10.u64);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// std r9,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, ctx.r9.u64);
	// std r11,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, r11.u64);
	// lfd f13,128(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lfd f12,136(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// lfd f11,144(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// frsp f11,f11
	ctx.f11.f64 = double(float(ctx.f11.f64));
	// fmadds f30,f31,f0,f12
	f30.f64 = double(float(f31.f64 * f0.f64 + ctx.f12.f64));
	// fmadds f29,f13,f0,f11
	f29.f64 = double(float(ctx.f13.f64 * f0.f64 + ctx.f11.f64));
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f2,f29
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f29.f64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lfs f0,-8816(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r28.u32 + -8816);
	f0.f64 = double(temp.f32);
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// std r11,152(r1)
	PPC_STORE_U64(ctx.r1.u32 + 152, r11.u64);
	// lfd f13,152(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 152);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmadds f30,f31,f0,f13
	f30.f64 = double(float(f31.f64 * f0.f64 + ctx.f13.f64));
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f30.f64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209bc18
	sub_8209BC18(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// fmr f1,f28
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f28.f64;
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,-8812(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + -8812);
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// ble cr6,0x8213e42c
	if (!cr6.getGT()) goto loc_8213E42C;
loc_8213E530:
	// addi r21,r21,1
	r21.s64 = r21.s64 + 1;
	// cmpw cr6,r21,r11
	cr6.compare<int32_t>(r21.s32, r11.s32, xer);
	// ble cr6,0x8213e3f8
	if (!cr6.getGT()) goto loc_8213E3F8;
loc_8213E53C:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r31,0(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// add r28,r11,r24
	r28.u64 = r11.u64 + r24.u64;
	// bl 0x8209bcd8
	sub_8209BCD8(ctx, base);
	// extsw r11,r28
	r11.s64 = r28.s32;
	// extsw r10,r31
	ctx.r10.s64 = r31.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// std r11,152(r1)
	PPC_STORE_U64(ctx.r1.u32 + 152, r11.u64);
	// std r10,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r10.u64);
	// lfd f0,152(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 152);
	// lfd f13,144(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f2,f0
	ctx.f2.f64 = double(float(f0.f64));
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x8209ba00
	sub_8209BA00(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// add r31,r11,r25
	r31.u64 = r11.u64 + r25.u64;
	// bl 0x8209bb58
	sub_8209BB58(ctx, base);
	// extsw r11,r31
	r11.s64 = r31.s32;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// std r11,152(r1)
	PPC_STORE_U64(ctx.r1.u32 + 152, r11.u64);
	// lfd f0,152(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 152);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209bc18
	sub_8209BC18(ctx, base);
	// extsw r11,r19
	r11.s64 = r19.s32;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// std r11,152(r1)
	PPC_STORE_U64(ctx.r1.u32 + 152, r11.u64);
	// lfd f0,152(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 152);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f1,f0
	ctx.f1.f64 = double(float(f0.f64));
	// bl 0x8209bbb8
	sub_8209BBB8(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8209b890
	sub_8209B890(ctx, base);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// lwz r10,388(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 388);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// addi r12,r1,-112
	r12.s64 = ctx.r1.s64 + -112;
	// bl 0x823ed594
	// b 0x823ed164
	return;
}

__attribute__((alias("__imp__sub_8213E630"))) PPC_WEAK_FUNC(sub_8213E630);
PPC_FUNC_IMPL(__imp__sub_8213E630) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// li r11,6
	r11.s64 = 6;
	// stw r11,15228(r10)
	PPC_STORE_U32(ctx.r10.u32 + 15228, r11.u32);
	// lis r10,-31994
	ctx.r10.s64 = -2096758784;
	// stw r11,15232(r10)
	PPC_STORE_U32(ctx.r10.u32 + 15232, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8213E648"))) PPC_WEAK_FUNC(sub_8213E648);
PPC_FUNC_IMPL(__imp__sub_8213E648) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed530
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// fmr f27,f1
	ctx.fpscr.disableFlushMode();
	f27.f64 = ctx.f1.f64;
	// lis r11,-32033
	r11.s64 = -2099314688;
	// fmr f25,f2
	f25.f64 = ctx.f2.f64;
	// addi r11,r11,-8536
	r11.s64 = r11.s64 + -8536;
	// lwz r28,8(r29)
	r28.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// lbz r10,972(r28)
	ctx.r10.u64 = PPC_LOAD_U8(r28.u32 + 972);
	// lhz r9,968(r28)
	ctx.r9.u64 = PPC_LOAD_U16(r28.u32 + 968);
	// lhz r8,970(r28)
	ctx.r8.u64 = PPC_LOAD_U16(r28.u32 + 970);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// rlwinm r10,r10,6,0,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0xFFFFFFC0;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// add r25,r10,r11
	r25.u64 = ctx.r10.u64 + r11.u64;
	// cmpw cr6,r9,r8
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r8.s32, xer);
	// blt cr6,0x8213ea1c
	if (cr6.getLT()) goto loc_8213EA1C;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// bl 0x820cdf78
	sub_820CDF78(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x820cef38
	sub_820CEF38(ctx, base);
	// lis r11,-32013
	r11.s64 = -2098003968;
	// lwz r26,-2304(r11)
	r26.u64 = PPC_LOAD_U32(r11.u32 + -2304);
	// lhz r11,0(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8213ea04
	if (cr6.getLT()) goto loc_8213EA04;
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r10,-32014
	ctx.r10.s64 = -2098069504;
	// lfs f23,2692(r5)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 2692);
	f23.f64 = double(temp.f32);
	// lfs f24,14028(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 14028);
	f24.f64 = double(temp.f32);
	// lis r24,-32033
	r24.s64 = -2099314688;
	// lfs f22,3060(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 3060);
	f22.f64 = double(temp.f32);
	// addi r27,r10,-784
	r27.s64 = ctx.r10.s64 + -784;
	// lfs f26,2688(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 2688);
	f26.f64 = double(temp.f32);
	// lfs f28,2776(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 2776);
	f28.f64 = double(temp.f32);
loc_8213E6F8:
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r9,0(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r31,r11,r27
	r31.u64 = r11.u64 + r27.u64;
	// cmplw cr6,r31,r9
	cr6.compare<uint32_t>(r31.u32, ctx.r9.u32, xer);
	// beq cr6,0x8213e9f0
	if (cr6.getEQ()) goto loc_8213E9F0;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8213e9f0
	if (!cr6.getEQ()) goto loc_8213E9F0;
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// beq cr6,0x8213e8c4
	if (cr6.getEQ()) goto loc_8213E8C4;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// beq cr6,0x8213e8c4
	if (cr6.getEQ()) goto loc_8213E8C4;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// beq cr6,0x8213e8c4
	if (cr6.getEQ()) goto loc_8213E8C4;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x8213e74c
	if (cr6.getEQ()) goto loc_8213E74C;
	// cmplwi cr6,r11,6
	cr6.compare<uint32_t>(r11.u32, 6, xer);
	// bne cr6,0x8213e9f0
	if (!cr6.getEQ()) goto loc_8213E9F0;
loc_8213E74C:
	// lbz r10,1(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 1);
	// rlwinm r10,r10,0,25,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x40;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8213e9f0
	if (!cr6.getEQ()) goto loc_8213E9F0;
	// lfs f0,12(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	f0.f64 = double(temp.f32);
	// addi r4,r29,12
	ctx.r4.s64 = r29.s64 + 12;
	// lfs f13,12(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f31,f0,f13
	f31.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f0,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	f0.f64 = double(temp.f32);
	// lfs f13,16(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 - ctx.f13.f64));
	// lfs f12,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	f0.f64 = double(temp.f32);
	// fsubs f29,f12,f0
	f29.f64 = double(float(ctx.f12.f64 - f0.f64));
	// fcmpu cr6,f31,f27
	cr6.compare(f31.f64, f27.f64);
	// bgt cr6,0x8213e9f0
	if (cr6.getGT()) goto loc_8213E9F0;
	// fneg f0,f27
	f0.u64 = f27.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// blt cr6,0x8213e9f0
	if (cr6.getLT()) goto loc_8213E9F0;
	// fcmpu cr6,f13,f25
	cr6.compare(ctx.f13.f64, f25.f64);
	// bgt cr6,0x8213e9f0
	if (cr6.getGT()) goto loc_8213E9F0;
	// fneg f12,f25
	ctx.f12.u64 = f25.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f13,f12
	cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// blt cr6,0x8213e9f0
	if (cr6.getLT()) goto loc_8213E9F0;
	// fcmpu cr6,f29,f27
	cr6.compare(f29.f64, f27.f64);
	// bgt cr6,0x8213e9f0
	if (cr6.getGT()) goto loc_8213E9F0;
	// fcmpu cr6,f29,f0
	cr6.compare(f29.f64, f0.f64);
	// blt cr6,0x8213e9f0
	if (cr6.getLT()) goto loc_8213E9F0;
	// fdivs f0,f28,f27
	f0.f64 = double(float(f28.f64 / f27.f64));
	// fdivs f11,f13,f25
	ctx.f11.f64 = double(float(ctx.f13.f64 / f25.f64));
	// fmuls f13,f0,f31
	ctx.f13.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f12,f0,f29
	ctx.f12.f64 = double(float(f0.f64 * f29.f64));
	// fcmpu cr6,f13,f26
	cr6.compare(ctx.f13.f64, f26.f64);
	// bge cr6,0x8213e7d8
	if (!cr6.getLT()) goto loc_8213E7D8;
	// fneg f13,f13
	ctx.f13.u64 = ctx.f13.u64 ^ 0x8000000000000000;
loc_8213E7D8:
	// fcmpu cr6,f11,f26
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f11.f64, f26.f64);
	// bge cr6,0x8213e7e4
	if (!cr6.getLT()) goto loc_8213E7E4;
	// fneg f11,f11
	ctx.f11.u64 = ctx.f11.u64 ^ 0x8000000000000000;
loc_8213E7E4:
	// fcmpu cr6,f12,f26
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f12.f64, f26.f64);
	// bge cr6,0x8213e7f0
	if (!cr6.getLT()) goto loc_8213E7F0;
	// fneg f12,f12
	ctx.f12.u64 = ctx.f12.u64 ^ 0x8000000000000000;
loc_8213E7F0:
	// fsubs f0,f28,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f28.f64 - ctx.f13.f64));
	// fsubs f11,f28,f11
	ctx.f11.f64 = double(float(f28.f64 - ctx.f11.f64));
	// fsubs f13,f28,f12
	ctx.f13.f64 = double(float(f28.f64 - ctx.f12.f64));
	// fcmpu cr6,f11,f0
	cr6.compare(ctx.f11.f64, f0.f64);
	// bge cr6,0x8213e808
	if (!cr6.getLT()) goto loc_8213E808;
	// fmr f0,f11
	f0.f64 = ctx.f11.f64;
loc_8213E808:
	// fcmpu cr6,f13,f0
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x8213e814
	if (!cr6.getLT()) goto loc_8213E814;
	// fmr f0,f13
	f0.f64 = ctx.f13.f64;
loc_8213E814:
	// fmuls f0,f0,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 * f0.f64));
	// lfs f13,60(r25)
	temp.u32 = PPC_LOAD_U32(r25.u32 + 60);
	ctx.f13.f64 = double(temp.f32);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// fmuls f30,f0,f13
	f30.f64 = double(float(f0.f64 * ctx.f13.f64));
	// bne cr6,0x8213e83c
	if (!cr6.getEQ()) goto loc_8213E83C;
	// li r6,1
	ctx.r6.s64 = 1;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x82129610
	sub_82129610(ctx, base);
	// b 0x8213e9f0
	goto loc_8213E9F0;
loc_8213E83C:
	// fcmpu cr6,f31,f26
	ctx.fpscr.disableFlushMode();
	cr6.compare(f31.f64, f26.f64);
	// bne cr6,0x8213e84c
	if (!cr6.getEQ()) goto loc_8213E84C;
	// fcmpu cr6,f29,f26
	cr6.compare(f29.f64, f26.f64);
	// beq cr6,0x8213e864
	if (cr6.getEQ()) goto loc_8213E864;
loc_8213E84C:
	// fmuls f0,f31,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 * f31.f64));
	// fmadds f0,f29,f29,f0
	f0.f64 = double(float(f29.f64 * f29.f64 + f0.f64));
	// fsqrts f0,f0
	f0.f64 = double(float(sqrt(f0.f64)));
	// fdivs f0,f28,f0
	f0.f64 = double(float(f28.f64 / f0.f64));
	// fmuls f31,f0,f31
	f31.f64 = double(float(f0.f64 * f31.f64));
	// fmuls f29,f0,f29
	f29.f64 = double(float(f0.f64 * f29.f64));
loc_8213E864:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c9b90
	sub_820C9B90(ctx, base);
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// bl 0x820c9af0
	sub_820C9AF0(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x8213e88c
	if (!cr6.getEQ()) goto loc_8213E88C;
	// lfs f0,-8808(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r24.u32 + -8808);
	f0.f64 = double(temp.f32);
	// fmuls f30,f0,f30
	f30.f64 = double(float(f0.f64 * f30.f64));
loc_8213E88C:
	// bl 0x820b1010
	sub_820B1010(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x8213e89c
	if (!cr6.getEQ()) goto loc_8213E89C;
	// fmuls f30,f30,f22
	ctx.fpscr.disableFlushMode();
	f30.f64 = double(float(f30.f64 * f22.f64));
loc_8213E89C:
	// lbz r11,974(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 974);
	// li r7,1
	ctx.r7.s64 = 1;
	// fmr f3,f29
	ctx.fpscr.disableFlushMode();
	ctx.f3.f64 = f29.f64;
	// extsb r6,r11
	ctx.r6.s64 = r11.s8;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x820bed38
	sub_820BED38(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// b 0x8213e9f0
	goto loc_8213E9F0;
loc_8213E8C4:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lfs f0,12(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	f0.f64 = double(temp.f32);
	// lfs f12,16(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 16);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f11.f64 = double(temp.f32);
	// addi r30,r11,88
	r30.s64 = r11.s64 + 88;
	// lfs f13,88(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 88);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 - f0.f64));
	// lfs f10,96(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 96);
	ctx.f10.f64 = double(temp.f32);
	// lfs f0,92(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 92);
	f0.f64 = double(temp.f32);
	// fsubs f10,f10,f11
	ctx.f10.f64 = double(float(ctx.f10.f64 - ctx.f11.f64));
	// fsubs f12,f0,f12
	ctx.f12.f64 = double(float(f0.f64 - ctx.f12.f64));
	// fcmpu cr6,f13,f27
	cr6.compare(ctx.f13.f64, f27.f64);
	// bgt cr6,0x8213e9f0
	if (cr6.getGT()) goto loc_8213E9F0;
	// fneg f0,f27
	f0.u64 = f27.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f13,f0
	cr6.compare(ctx.f13.f64, f0.f64);
	// blt cr6,0x8213e9f0
	if (cr6.getLT()) goto loc_8213E9F0;
	// fcmpu cr6,f12,f25
	cr6.compare(ctx.f12.f64, f25.f64);
	// bgt cr6,0x8213e9f0
	if (cr6.getGT()) goto loc_8213E9F0;
	// fneg f11,f25
	ctx.f11.u64 = f25.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f12,f11
	cr6.compare(ctx.f12.f64, ctx.f11.f64);
	// blt cr6,0x8213e9f0
	if (cr6.getLT()) goto loc_8213E9F0;
	// fcmpu cr6,f10,f27
	cr6.compare(ctx.f10.f64, f27.f64);
	// bgt cr6,0x8213e9f0
	if (cr6.getGT()) goto loc_8213E9F0;
	// fcmpu cr6,f10,f0
	cr6.compare(ctx.f10.f64, f0.f64);
	// blt cr6,0x8213e9f0
	if (cr6.getLT()) goto loc_8213E9F0;
	// fdivs f0,f28,f27
	f0.f64 = double(float(f28.f64 / f27.f64));
	// fdivs f11,f12,f25
	ctx.f11.f64 = double(float(ctx.f12.f64 / f25.f64));
	// fmuls f13,f0,f13
	ctx.f13.f64 = double(float(f0.f64 * ctx.f13.f64));
	// fmuls f12,f0,f10
	ctx.f12.f64 = double(float(f0.f64 * ctx.f10.f64));
	// fcmpu cr6,f13,f26
	cr6.compare(ctx.f13.f64, f26.f64);
	// bge cr6,0x8213e944
	if (!cr6.getLT()) goto loc_8213E944;
	// fneg f13,f13
	ctx.f13.u64 = ctx.f13.u64 ^ 0x8000000000000000;
loc_8213E944:
	// fcmpu cr6,f11,f26
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f11.f64, f26.f64);
	// bge cr6,0x8213e950
	if (!cr6.getLT()) goto loc_8213E950;
	// fneg f11,f11
	ctx.f11.u64 = ctx.f11.u64 ^ 0x8000000000000000;
loc_8213E950:
	// fcmpu cr6,f12,f26
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f12.f64, f26.f64);
	// bge cr6,0x8213e95c
	if (!cr6.getLT()) goto loc_8213E95C;
	// fneg f12,f12
	ctx.f12.u64 = ctx.f12.u64 ^ 0x8000000000000000;
loc_8213E95C:
	// fsubs f0,f28,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f28.f64 - ctx.f13.f64));
	// fsubs f11,f28,f11
	ctx.f11.f64 = double(float(f28.f64 - ctx.f11.f64));
	// fsubs f13,f28,f12
	ctx.f13.f64 = double(float(f28.f64 - ctx.f12.f64));
	// fcmpu cr6,f11,f0
	cr6.compare(ctx.f11.f64, f0.f64);
	// bge cr6,0x8213e974
	if (!cr6.getLT()) goto loc_8213E974;
	// fmr f0,f11
	f0.f64 = ctx.f11.f64;
loc_8213E974:
	// fcmpu cr6,f13,f0
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f13.f64, f0.f64);
	// bge cr6,0x8213e980
	if (!cr6.getLT()) goto loc_8213E980;
	// fmr f0,f13
	f0.f64 = ctx.f13.f64;
loc_8213E980:
	// lwz r10,100(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// lfs f13,60(r25)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r25.u32 + 60);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f31,f13,f0
	f31.f64 = double(float(ctx.f13.f64 * f0.f64));
	// rlwinm r10,r10,0,19,19
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x1000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8213e9f0
	if (!cr6.getEQ()) goto loc_8213E9F0;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// rlwinm r11,r11,0,10,21
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x3FFC00;
	// rlwinm r11,r11,0,21,10
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFE007FF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8213e9f0
	if (!cr6.getEQ()) goto loc_8213E9F0;
	// lbz r11,974(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 974);
	// extsb r23,r11
	r23.s64 = r11.s8;
	// bl 0x8209e188
	sub_8209E188(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r6,29
	ctx.r6.s64 = 29;
	// mr r7,r23
	ctx.r7.u64 = r23.u64;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f0,f0,f24
	f0.f64 = double(float(f0.f64 * f24.f64));
	// fmadds f0,f0,f23,f28
	f0.f64 = double(float(f0.f64 * f23.f64 + f28.f64));
	// fmuls f1,f0,f31
	ctx.f1.f64 = double(float(f0.f64 * f31.f64));
	// bl 0x820e7eb0
	sub_820E7EB0(ctx, base);
loc_8213E9F0:
	// addi r26,r26,2
	r26.s64 = r26.s64 + 2;
	// lhz r11,0(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bge cr6,0x8213e6f8
	if (!cr6.getLT()) goto loc_8213E6F8;
loc_8213EA04:
	// lhz r11,28(r25)
	r11.u64 = PPC_LOAD_U16(r25.u32 + 28);
	// lhz r10,968(r28)
	ctx.r10.u64 = PPC_LOAD_U16(r28.u32 + 968);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// sth r11,970(r28)
	PPC_STORE_U16(r28.u32 + 970, r11.u16);
loc_8213EA1C:
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// addi r12,r1,-80
	r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823ed57c
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_8213EA30"))) PPC_WEAK_FUNC(sub_8213EA30);
PPC_FUNC_IMPL(__imp__sub_8213EA30) {
	PPC_FUNC_PROLOGUE();
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8210d820
	sub_8210D820(ctx, base);
	// lfs f11,24(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	ctx.f11.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,16(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 16);
	f0.f64 = double(temp.f32);
	// fmuls f0,f11,f0
	f0.f64 = double(float(ctx.f11.f64 * f0.f64));
	// lfs f11,40(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	ctx.f11.f64 = double(temp.f32);
	// lfs f13,20(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lfs f10,8(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	ctx.f10.f64 = double(temp.f32);
	// lfs f12,12(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lfs f9,56(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	ctx.f9.f64 = double(temp.f32);
	// li r3,0
	ctx.r3.s64 = 0;
	// fmadds f0,f11,f13,f0
	f0.f64 = double(float(ctx.f11.f64 * ctx.f13.f64 + f0.f64));
	// lfs f13,2944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	ctx.f13.f64 = double(temp.f32);
	// fmadds f0,f10,f12,f0
	f0.f64 = double(float(ctx.f10.f64 * ctx.f12.f64 + f0.f64));
	// fadds f0,f0,f9
	f0.f64 = double(float(f0.f64 + ctx.f9.f64));
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,28(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 28, temp.u32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x8213eaa0
	if (!cr6.getLT()) goto loc_8213EAA0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f13,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f0,f0,f13
	f0.f64 = double(float(f0.f64 * ctx.f13.f64));
	// b 0x8213eaa4
	goto loc_8213EAA4;
loc_8213EAA0:
	// fsubs f0,f0,f13
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
loc_8213EAA4:
	// stfs f0,28(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 28, temp.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

