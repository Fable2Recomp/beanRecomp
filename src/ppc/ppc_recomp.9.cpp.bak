#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_821538A8"))) PPC_WEAK_FUNC(sub_821538A8);
PPC_FUNC_IMPL(__imp__sub_821538A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,364
	ctx.r3.s64 = r31.s64 + 364;
	// bl 0x82176e40
	sub_82176E40(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stb r30,224(r31)
	PPC_STORE_U8(r31.u32 + 224, r30.u8);
	// beq cr6,0x82153934
	if (cr6.getEQ()) goto loc_82153934;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stb r30,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r30.u8);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153934
	if (cr6.getEQ()) goto loc_82153934;
loc_82153908:
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r11,416
	ctx.r3.s64 = r11.s64 + 416;
	// mr r31,r11
	r31.u64 = r11.u64;
	// bl 0x82176e40
	sub_82176E40(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r30,218(r31)
	PPC_STORE_U8(r31.u32 + 218, r30.u8);
	// stw r30,220(r31)
	PPC_STORE_U32(r31.u32 + 220, r30.u32);
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153908
	if (!cr6.getEQ()) goto loc_82153908;
loc_82153934:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82153950"))) PPC_WEAK_FUNC(sub_82153950);
PPC_FUNC_IMPL(__imp__sub_82153950) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r27,0
	r27.s64 = 0;
	// addi r29,r11,-30556
	r29.s64 = r11.s64 + -30556;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// li r28,1
	r28.s64 = 1;
	// stb r27,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, r27.u8);
	// stw r29,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r29.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153a6c
	if (cr6.getEQ()) goto loc_82153A6C;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r25,r10,-30572
	r25.s64 = ctx.r10.s64 + -30572;
loc_82153998:
	// clrlwi r10,r28,24
	ctx.r10.u64 = r28.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82153a6c
	if (cr6.getEQ()) goto loc_82153A6C;
	// mr r30,r11
	r30.u64 = r11.u64;
	// cmplw cr6,r11,r26
	cr6.compare<uint32_t>(r11.u32, r26.u32, xer);
	// beq cr6,0x82153a58
	if (cr6.getEQ()) goto loc_82153A58;
	// lbz r10,36(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 36);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82153a58
	if (!cr6.getEQ()) goto loc_82153A58;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153a58
	if (!cr6.getEQ()) goto loc_82153A58;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r29,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r29.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r27,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r27.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153a54
	if (cr6.getEQ()) goto loc_82153A54;
loc_821539FC:
	// addi r31,r11,468
	r31.s64 = r11.s64 + 468;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153a38
	if (cr6.getEQ()) goto loc_82153A38;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821760c0
	sub_821760C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153a50
	if (cr6.getEQ()) goto loc_82153A50;
loc_82153A38:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821539fc
	if (!cr6.getEQ()) goto loc_821539FC;
	// b 0x82153a54
	goto loc_82153A54;
loc_82153A50:
	// mr r28,r27
	r28.u64 = r27.u64;
loc_82153A54:
	// stw r25,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r25.u32);
loc_82153A58:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153998
	if (!cr6.getEQ()) goto loc_82153998;
loc_82153A6C:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82153A78"))) PPC_WEAK_FUNC(sub_82153A78);
PPC_FUNC_IMPL(__imp__sub_82153A78) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153ab0
	if (cr6.getEQ()) goto loc_82153AB0;
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x82153ab0
	if (!cr6.getEQ()) goto loc_82153AB0;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// bl 0x821520d8
	sub_821520D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82153ab0
	if (cr6.getEQ()) goto loc_82153AB0;
	// bl 0x821538a8
	sub_821538A8(ctx, base);
loc_82153AB0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82153AC0"))) PPC_WEAK_FUNC(sub_82153AC0);
PPC_FUNC_IMPL(__imp__sub_82153AC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153b58
	if (cr6.getEQ()) goto loc_82153B58;
loc_82153AF8:
	// addi r3,r11,244
	ctx.r3.s64 = r11.s64 + 244;
	// bl 0x82178ef0
	sub_82178EF0(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lbz r11,92(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// bne cr6,0x82153b50
	if (!cr6.getEQ()) goto loc_82153B50;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153b58
	if (cr6.getEQ()) goto loc_82153B58;
loc_82153B20:
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x82153b50
	if (cr6.getEQ()) goto loc_82153B50;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153b20
	if (!cr6.getEQ()) goto loc_82153B20;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82153B50:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153af8
	if (!cr6.getEQ()) goto loc_82153AF8;
loc_82153B58:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82153B68"))) PPC_WEAK_FUNC(sub_82153B68);
PPC_FUNC_IMPL(__imp__sub_82153B68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153c10
	if (cr6.getEQ()) goto loc_82153C10;
loc_82153BA8:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,244
	ctx.r3.s64 = r11.s64 + 244;
	// bl 0x821519f0
	sub_821519F0(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lbz r11,92(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// bne cr6,0x82153c08
	if (!cr6.getEQ()) goto loc_82153C08;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153c10
	if (cr6.getEQ()) goto loc_82153C10;
loc_82153BD4:
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x82153c08
	if (cr6.getEQ()) goto loc_82153C08;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153bd4
	if (!cr6.getEQ()) goto loc_82153BD4;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82153C08:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153ba8
	if (!cr6.getEQ()) goto loc_82153BA8;
loc_82153C10:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82153C28"))) PPC_WEAK_FUNC(sub_82153C28);
PPC_FUNC_IMPL(__imp__sub_82153C28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153cec
	if (cr6.getEQ()) goto loc_82153CEC;
	// clrlwi r10,r31,24
	ctx.r10.u64 = r31.u32 & 0xFF;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r31,r10,27,31,31
	r31.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
loc_82153C74:
	// addi r11,r11,244
	r11.s64 = r11.s64 + 244;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r31,49(r11)
	PPC_STORE_U8(r11.u32 + 49, r31.u8);
	// stb r31,101(r11)
	PPC_STORE_U8(r11.u32 + 101, r31.u8);
	// stb r31,153(r11)
	PPC_STORE_U8(r11.u32 + 153, r31.u8);
	// stb r31,205(r11)
	PPC_STORE_U8(r11.u32 + 205, r31.u8);
	// stb r31,257(r11)
	PPC_STORE_U8(r11.u32 + 257, r31.u8);
	// stb r31,309(r11)
	PPC_STORE_U8(r11.u32 + 309, r31.u8);
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lbz r11,92(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// bne cr6,0x82153ce4
	if (!cr6.getEQ()) goto loc_82153CE4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153cec
	if (cr6.getEQ()) goto loc_82153CEC;
loc_82153CB0:
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x82153ce4
	if (cr6.getEQ()) goto loc_82153CE4;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153cb0
	if (!cr6.getEQ()) goto loc_82153CB0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82153CE4:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153c74
	if (!cr6.getEQ()) goto loc_82153C74;
loc_82153CEC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82153D00"))) PPC_WEAK_FUNC(sub_82153D00);
PPC_FUNC_IMPL(__imp__sub_82153D00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153da8
	if (cr6.getEQ()) goto loc_82153DA8;
loc_82153D40:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,244
	ctx.r3.s64 = r11.s64 + 244;
	// bl 0x82151aa8
	sub_82151AA8(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lbz r11,92(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// bne cr6,0x82153da0
	if (!cr6.getEQ()) goto loc_82153DA0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153da8
	if (cr6.getEQ()) goto loc_82153DA8;
loc_82153D6C:
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x82153da0
	if (cr6.getEQ()) goto loc_82153DA0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153d6c
	if (!cr6.getEQ()) goto loc_82153D6C;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82153DA0:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153d40
	if (!cr6.getEQ()) goto loc_82153D40;
loc_82153DA8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82153DC0"))) PPC_WEAK_FUNC(sub_82153DC0);
PPC_FUNC_IMPL(__imp__sub_82153DC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r31,1
	r31.s64 = 1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153e28
	if (cr6.getEQ()) goto loc_82153E28;
loc_82153E00:
	// addi r3,r11,244
	ctx.r3.s64 = r11.s64 + 244;
	// bl 0x82177c38
	sub_82177C38(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153e40
	if (cr6.getEQ()) goto loc_82153E40;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153e00
	if (!cr6.getEQ()) goto loc_82153E00;
loc_82153E28:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82153E40:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82153E58"))) PPC_WEAK_FUNC(sub_82153E58);
PPC_FUNC_IMPL(__imp__sub_82153E58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153ef0
	if (cr6.getEQ()) goto loc_82153EF0;
loc_82153E90:
	// addi r3,r11,244
	ctx.r3.s64 = r11.s64 + 244;
	// bl 0x82177c98
	sub_82177C98(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lbz r11,92(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// bne cr6,0x82153ee8
	if (!cr6.getEQ()) goto loc_82153EE8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153ef0
	if (cr6.getEQ()) goto loc_82153EF0;
loc_82153EB8:
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x82153ee8
	if (cr6.getEQ()) goto loc_82153EE8;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153eb8
	if (!cr6.getEQ()) goto loc_82153EB8;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_82153EE8:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153e90
	if (!cr6.getEQ()) goto loc_82153E90;
loc_82153EF0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82153F00"))) PPC_WEAK_FUNC(sub_82153F00);
PPC_FUNC_IMPL(__imp__sub_82153F00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153fa8
	if (cr6.getEQ()) goto loc_82153FA8;
loc_82153F40:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,244
	ctx.r3.s64 = r11.s64 + 244;
	// bl 0x82177bc8
	sub_82177BC8(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lbz r11,92(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// bne cr6,0x82153fa0
	if (!cr6.getEQ()) goto loc_82153FA0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82153fa8
	if (cr6.getEQ()) goto loc_82153FA8;
loc_82153F6C:
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x82153fa0
	if (cr6.getEQ()) goto loc_82153FA0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153f6c
	if (!cr6.getEQ()) goto loc_82153F6C;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82153FA0:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82153f40
	if (!cr6.getEQ()) goto loc_82153F40;
loc_82153FA8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82153FC0"))) PPC_WEAK_FUNC(sub_82153FC0);
PPC_FUNC_IMPL(__imp__sub_82153FC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154068
	if (cr6.getEQ()) goto loc_82154068;
loc_82154000:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r11,244
	ctx.r3.s64 = r11.s64 + 244;
	// bl 0x82178f30
	sub_82178F30(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lbz r11,92(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// bne cr6,0x82154060
	if (!cr6.getEQ()) goto loc_82154060;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154068
	if (cr6.getEQ()) goto loc_82154068;
loc_8215402C:
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x82154060
	if (cr6.getEQ()) goto loc_82154060;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82164770
	sub_82164770(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215402c
	if (!cr6.getEQ()) goto loc_8215402C;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82154060:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82154000
	if (!cr6.getEQ()) goto loc_82154000;
loc_82154068:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82154080"))) PPC_WEAK_FUNC(sub_82154080);
PPC_FUNC_IMPL(__imp__sub_82154080) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r11,1
	r11.s64 = 1;
	// addi r30,r31,520
	r30.s64 = r31.s64 + 520;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stb r11,217(r31)
	PPC_STORE_U8(r31.u32 + 217, r11.u8);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r3,1
	r11.s64 = ctx.r3.s64 + 1;
	// extsb r4,r11
	ctx.r4.s64 = r11.s8;
	// cmpwi cr6,r4,31
	cr6.compare<int32_t>(ctx.r4.s32, 31, xer);
	// blt cr6,0x821540cc
	if (cr6.getLT()) goto loc_821540CC;
	// li r4,0
	ctx.r4.s64 = 0;
loc_821540CC:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82176e40
	sub_82176E40(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821538a8
	sub_821538A8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821540F8"))) PPC_WEAK_FUNC(sub_821540F8);
PPC_FUNC_IMPL(__imp__sub_821540F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r3,r29,468
	ctx.r3.s64 = r29.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821544b4
	if (!cr6.getEQ()) goto loc_821544B4;
	// lbz r11,217(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 217);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821543a0
	if (cr6.getEQ()) goto loc_821543A0;
	// addi r27,r29,520
	r27.s64 = r29.s64 + 520;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x821543a0
	if (cr6.getLT()) goto loc_821543A0;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821544b4
	if (cr6.getEQ()) goto loc_821544B4;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r26,0
	r26.s64 = 0;
	// addi r30,r11,-30556
	r30.s64 = r11.s64 + -30556;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r28,1
	r28.s64 = 1;
	// stb r26,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r26.u8);
	// stw r30,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r30.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x8215420c
	if (cr6.getEQ()) goto loc_8215420C;
loc_8215419C:
	// lbz r11,132(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 132);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821541f0
	if (cr6.getEQ()) goto loc_821541F0;
	// lwz r11,364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 364);
	// addi r3,r29,364
	ctx.r3.s64 = r29.s64 + 364;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82154208
	if (!cr6.getEQ()) goto loc_82154208;
	// lwz r11,416(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 416);
	// addi r3,r31,416
	ctx.r3.s64 = r31.s64 + 416;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82154208
	if (!cr6.getEQ()) goto loc_82154208;
loc_821541F0:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x8215419c
	if (!cr6.getEQ()) goto loc_8215419C;
	// b 0x8215420c
	goto loc_8215420C;
loc_82154208:
	// mr r28,r26
	r28.u64 = r26.u64;
loc_8215420C:
	// clrlwi r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821544b4
	if (cr6.getEQ()) goto loc_821544B4;
	// stb r26,217(r29)
	PPC_STORE_U8(r29.u32 + 217, r26.u8);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r30,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r30.u32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stb r26,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, r26.u8);
	// extsb r28,r11
	r28.s64 = r11.s8;
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821544b4
	if (cr6.getEQ()) goto loc_821544B4;
loc_82154258:
	// mr r30,r11
	r30.u64 = r11.u64;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x82154384
	if (cr6.getEQ()) goto loc_82154384;
	// lbz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8215432c
	if (!cr6.getEQ()) goto loc_8215432C;
	// lbz r10,132(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 132);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82154384
	if (cr6.getEQ()) goto loc_82154384;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82154384
	if (!cr6.getEQ()) goto loc_82154384;
	// li r3,72
	ctx.r3.s64 = 72;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821542c0
	if (cr6.getEQ()) goto loc_821542C0;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82171cc0
	sub_82171CC0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x821542c4
	goto loc_821542C4;
loc_821542C0:
	// mr r31,r26
	r31.u64 = r26.u64;
loc_821542C4:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,16(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// li r3,52
	ctx.r3.s64 = 52;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82154308
	if (cr6.getEQ()) goto loc_82154308;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// lwz r6,220(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82171600
	sub_82171600(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8215430c
	goto loc_8215430C;
loc_82154308:
	// mr r31,r26
	r31.u64 = r26.u64;
loc_8215430C:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,16(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// b 0x82154384
	goto loc_82154384;
loc_8215432C:
	// li r3,72
	ctx.r3.s64 = 72;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82154350
	if (cr6.getEQ()) goto loc_82154350;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82171cc0
	sub_82171CC0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x82154354
	goto loc_82154354;
loc_82154350:
	// mr r31,r26
	r31.u64 = r26.u64;
loc_82154354:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,16(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r29,364
	ctx.r3.s64 = r29.s64 + 364;
	// bl 0x82176e40
	sub_82176E40(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stb r11,224(r29)
	PPC_STORE_U8(r29.u32 + 224, r11.u8);
loc_82154384:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82154258
	if (!cr6.getEQ()) goto loc_82154258;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed180
	return;
loc_821543A0:
	// lbz r11,134(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 134);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821544b4
	if (!cr6.getEQ()) goto loc_821544B4;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r26,0
	r26.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// li r28,1
	r28.s64 = 1;
	// mr r27,r26
	r27.u64 = r26.u64;
	// stb r26,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, r26.u8);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r4,120(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82154484
	if (cr6.getEQ()) goto loc_82154484;
loc_821543E0:
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// cmplw cr6,r4,r29
	cr6.compare<uint32_t>(ctx.r4.u32, r29.u32, xer);
	// beq cr6,0x82154468
	if (cr6.getEQ()) goto loc_82154468;
	// lbz r11,132(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154468
	if (cr6.getEQ()) goto loc_82154468;
	// addi r31,r29,364
	r31.s64 = r29.s64 + 364;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82154480
	if (cr6.getEQ()) goto loc_82154480;
	// addi r3,r30,416
	ctx.r3.s64 = r30.s64 + 416;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82154480
	if (cr6.getEQ()) goto loc_82154480;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r11,r3
	r11.s64 = ctx.r3.s8;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x82154468
	if (!cr6.getEQ()) goto loc_82154468;
	// li r27,1
	r27.s64 = 1;
loc_82154468:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r4,120(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x821543e0
	if (!cr6.getEQ()) goto loc_821543E0;
	// b 0x82154484
	goto loc_82154484;
loc_82154480:
	// mr r28,r26
	r28.u64 = r26.u64;
loc_82154484:
	// clrlwi r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821544b4
	if (cr6.getEQ()) goto loc_821544B4;
	// clrlwi r11,r27,24
	r11.u64 = r27.u32 & 0xFF;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821544b0
	if (!cr6.getEQ()) goto loc_821544B0;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x82152720
	sub_82152720(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed180
	return;
loc_821544B0:
	// bl 0x82154080
	sub_82154080(ctx, base);
loc_821544B4:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_821544C0"))) PPC_WEAK_FUNC(sub_821544C0);
PPC_FUNC_IMPL(__imp__sub_821544C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r21{};
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r3,6
	cr6.compare<uint32_t>(ctx.r3.u32, 6, xer);
	// bgt cr6,0x8215454c
	if (cr6.getGT()) goto loc_8215454C;
	// lis r12,-32235
	r12.s64 = -2112552960;
	// addi r12,r12,17636
	r12.s64 = r12.s64 + 17636;
	// rlwinm r0,r3,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_8215453C;
	case 1:
		goto loc_82154548;
	case 2:
		goto loc_82154530;
	case 3:
		goto loc_82154518;
	case 4:
		goto loc_82154524;
	case 5:
		goto loc_82154500;
	case 6:
		goto loc_8215450C;
	default:
		__builtin_unreachable();
	}
	// lwz r16,17724(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17724);
	// lwz r16,17736(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17736);
	// lwz r16,17712(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17712);
	// lwz r16,17688(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17688);
	// lwz r16,17700(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17700);
	// lwz r16,17664(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17664);
	// lwz r16,17676(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17676);
loc_82154500:
	// li r11,5
	r11.s64 = 5;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_8215450C:
	// li r11,6
	r11.s64 = 6;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154518:
	// li r11,3
	r11.s64 = 3;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154524:
	// li r11,4
	r11.s64 = 4;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154530:
	// li r11,2
	r11.s64 = 2;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_8215453C:
	// li r11,0
	r11.s64 = 0;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154548:
	// li r11,1
	r11.s64 = 1;
loc_8215454C:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
	// .long 0x0
}

__attribute__((alias("__imp__sub_82154558"))) PPC_WEAK_FUNC(sub_82154558);
PPC_FUNC_IMPL(__imp__sub_82154558) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r21{};
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r3,11
	cr6.compare<uint32_t>(ctx.r3.u32, 11, xer);
	// bgt cr6,0x82154634
	if (cr6.getGT()) goto loc_82154634;
	// lis r12,-32235
	r12.s64 = -2112552960;
	// addi r12,r12,17788
	r12.s64 = r12.s64 + 17788;
	// rlwinm r0,r3,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_821545AC;
	case 1:
		goto loc_821545B8;
	case 2:
		goto loc_821545C4;
	case 3:
		goto loc_821545D0;
	case 4:
		goto loc_821545DC;
	case 5:
		goto loc_821545E8;
	case 6:
		goto loc_821545F4;
	case 7:
		goto loc_82154600;
	case 8:
		goto loc_8215460C;
	case 9:
		goto loc_82154618;
	case 10:
		goto loc_82154624;
	case 11:
		goto loc_82154630;
	default:
		__builtin_unreachable();
	}
	// lwz r16,17836(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17836);
	// lwz r16,17848(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17848);
	// lwz r16,17860(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17860);
	// lwz r16,17872(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17872);
	// lwz r16,17884(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17884);
	// lwz r16,17896(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17896);
	// lwz r16,17908(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17908);
	// lwz r16,17920(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17920);
	// lwz r16,17932(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17932);
	// lwz r16,17944(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17944);
	// lwz r16,17956(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17956);
	// lwz r16,17968(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 17968);
loc_821545AC:
	// li r11,0
	r11.s64 = 0;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821545B8:
	// li r11,1
	r11.s64 = 1;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821545C4:
	// li r11,2
	r11.s64 = 2;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821545D0:
	// li r11,3
	r11.s64 = 3;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821545DC:
	// li r11,4
	r11.s64 = 4;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821545E8:
	// li r11,5
	r11.s64 = 5;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821545F4:
	// li r11,6
	r11.s64 = 6;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154600:
	// li r11,7
	r11.s64 = 7;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_8215460C:
	// li r11,8
	r11.s64 = 8;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154618:
	// li r11,9
	r11.s64 = 9;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154624:
	// li r11,10
	r11.s64 = 10;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154630:
	// li r11,11
	r11.s64 = 11;
loc_82154634:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
	// .long 0x0
}

__attribute__((alias("__imp__sub_82154640"))) PPC_WEAK_FUNC(sub_82154640);
PPC_FUNC_IMPL(__imp__sub_82154640) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r21{};
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r3,14
	cr6.compare<uint32_t>(ctx.r3.u32, 14, xer);
	// bgt cr6,0x8215474c
	if (cr6.getGT()) goto loc_8215474C;
	// lis r12,-32235
	r12.s64 = -2112552960;
	// addi r12,r12,18020
	r12.s64 = r12.s64 + 18020;
	// rlwinm r0,r3,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_821546A0;
	case 1:
		goto loc_821546AC;
	case 2:
		goto loc_821546B8;
	case 3:
		goto loc_821546C4;
	case 4:
		goto loc_821546D0;
	case 5:
		goto loc_821546DC;
	case 6:
		goto loc_821546E8;
	case 7:
		goto loc_821546F4;
	case 8:
		goto loc_82154700;
	case 9:
		goto loc_8215470C;
	case 10:
		goto loc_82154718;
	case 11:
		goto loc_82154724;
	case 12:
		goto loc_82154730;
	case 13:
		goto loc_8215473C;
	case 14:
		goto loc_82154748;
	default:
		__builtin_unreachable();
	}
	// lwz r16,18080(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18080);
	// lwz r16,18092(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18092);
	// lwz r16,18104(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18104);
	// lwz r16,18116(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18116);
	// lwz r16,18128(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18128);
	// lwz r16,18140(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18140);
	// lwz r16,18152(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18152);
	// lwz r16,18164(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18164);
	// lwz r16,18176(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18176);
	// lwz r16,18188(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18188);
	// lwz r16,18200(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18200);
	// lwz r16,18212(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18212);
	// lwz r16,18224(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18224);
	// lwz r16,18236(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18236);
	// lwz r16,18248(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + 18248);
loc_821546A0:
	// li r11,0
	r11.s64 = 0;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821546AC:
	// li r11,1
	r11.s64 = 1;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821546B8:
	// li r11,2
	r11.s64 = 2;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821546C4:
	// li r11,3
	r11.s64 = 3;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821546D0:
	// li r11,4
	r11.s64 = 4;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821546DC:
	// li r11,5
	r11.s64 = 5;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821546E8:
	// li r11,6
	r11.s64 = 6;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_821546F4:
	// li r11,7
	r11.s64 = 7;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154700:
	// li r11,8
	r11.s64 = 8;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_8215470C:
	// li r11,9
	r11.s64 = 9;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154718:
	// li r11,10
	r11.s64 = 10;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154724:
	// li r11,11
	r11.s64 = 11;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154730:
	// li r11,12
	r11.s64 = 12;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_8215473C:
	// li r11,13
	r11.s64 = 13;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82154748:
	// li r11,14
	r11.s64 = 14;
loc_8215474C:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
	// .long 0x0
}

__attribute__((alias("__imp__sub_82154758"))) PPC_WEAK_FUNC(sub_82154758);
PPC_FUNC_IMPL(__imp__sub_82154758) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-29728
	r11.s64 = r11.s64 + -29728;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// b 0x823ba900
	sub_823BA900(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82154768"))) PPC_WEAK_FUNC(sub_82154768);
PPC_FUNC_IMPL(__imp__sub_82154768) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,236(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// lwz r11,228(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// lbz r11,223(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 223);
	// stb r11,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r11.u8);
	// lbz r11,215(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 215);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, r11.u8);
	// bl 0x823bc120
	sub_823BC120(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821547A8"))) PPC_WEAK_FUNC(sub_821547A8);
PPC_FUNC_IMPL(__imp__sub_821547A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,276(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 276);
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// lwz r11,268(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 268);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// lbz r11,263(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 263);
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, r11.u8);
	// lbz r11,255(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 255);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, r11.u8);
	// lbz r11,247(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 247);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, r11.u8);
	// lbz r11,239(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 239);
	// stb r11,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r11.u8);
	// lbz r11,231(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 231);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, r11.u8);
	// bl 0x823bc198
	sub_823BC198(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82154800"))) PPC_WEAK_FUNC(sub_82154800);
PPC_FUNC_IMPL(__imp__sub_82154800) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,276(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 276);
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// lwz r11,268(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 268);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// lbz r11,263(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 263);
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, r11.u8);
	// lbz r11,255(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 255);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, r11.u8);
	// lbz r11,247(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 247);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, r11.u8);
	// lbz r11,239(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 239);
	// stb r11,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r11.u8);
	// lbz r11,231(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 231);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, r11.u8);
	// bl 0x823ba980
	sub_823BA980(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82154858"))) PPC_WEAK_FUNC(sub_82154858);
PPC_FUNC_IMPL(__imp__sub_82154858) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bc278
	sub_823BC278(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82154860"))) PPC_WEAK_FUNC(sub_82154860);
PPC_FUNC_IMPL(__imp__sub_82154860) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bb838
	sub_823BB838(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82154868"))) PPC_WEAK_FUNC(sub_82154868);
PPC_FUNC_IMPL(__imp__sub_82154868) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r9,r4
	ctx.r9.u64 = ctx.r4.u64;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// cmplwi cr6,r4,32778
	cr6.compare<uint32_t>(ctx.r4.u32, 32778, xer);
	// beq cr6,0x8215488c
	if (cr6.getEQ()) goto loc_8215488C;
	// cmplwi cr6,r4,32779
	cr6.compare<uint32_t>(ctx.r4.u32, 32779, xer);
	// beq cr6,0x8215488c
	if (cr6.getEQ()) goto loc_8215488C;
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// b 0x82183c08
	sub_82183C08(ctx, base);
	return;
loc_8215488C:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// li r10,1
	ctx.r10.s64 = 1;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x821548a4
	if (cr6.getEQ()) goto loc_821548A4;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x82154908
	if (!cr6.getEQ()) goto loc_82154908;
loc_821548A4:
	// cmplwi cr6,r4,32778
	cr6.compare<uint32_t>(ctx.r4.u32, 32778, xer);
	// bne cr6,0x821548d8
	if (!cr6.getEQ()) goto loc_821548D8;
	// lbz r11,2000(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 2000);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821548cc
	if (cr6.getEQ()) goto loc_821548CC;
	// lwz r11,2004(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2004);
	// cmplw cr6,r11,r6
	cr6.compare<uint32_t>(r11.u32, ctx.r6.u32, xer);
	// bne cr6,0x821548cc
	if (!cr6.getEQ()) goto loc_821548CC;
	// li r10,0
	ctx.r10.s64 = 0;
	// b 0x82154908
	goto loc_82154908;
loc_821548CC:
	// stb r10,2000(r3)
	PPC_STORE_U8(ctx.r3.u32 + 2000, ctx.r10.u8);
	// stw r6,2004(r3)
	PPC_STORE_U32(ctx.r3.u32 + 2004, ctx.r6.u32);
	// b 0x82154908
	goto loc_82154908;
loc_821548D8:
	// cmplwi cr6,r4,32779
	cr6.compare<uint32_t>(ctx.r4.u32, 32779, xer);
	// bne cr6,0x82154908
	if (!cr6.getEQ()) goto loc_82154908;
	// lbz r11,2008(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 2008);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154900
	if (cr6.getEQ()) goto loc_82154900;
	// lwz r11,2012(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2012);
	// cmplw cr6,r11,r6
	cr6.compare<uint32_t>(r11.u32, ctx.r6.u32, xer);
	// bne cr6,0x82154900
	if (!cr6.getEQ()) goto loc_82154900;
	// li r10,0
	ctx.r10.s64 = 0;
	// b 0x82154908
	goto loc_82154908;
loc_82154900:
	// stb r10,2008(r3)
	PPC_STORE_U8(ctx.r3.u32 + 2008, ctx.r10.u8);
	// stw r6,2012(r3)
	PPC_STORE_U32(ctx.r3.u32 + 2012, ctx.r6.u32);
loc_82154908:
	// clrlwi r11,r10,24
	r11.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// mr r4,r9
	ctx.r4.u64 = ctx.r9.u64;
	// b 0x823bb8b0
	sub_823BB8B0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82154920"))) PPC_WEAK_FUNC(sub_82154920);
PPC_FUNC_IMPL(__imp__sub_82154920) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82154928"))) PPC_WEAK_FUNC(sub_82154928);
PPC_FUNC_IMPL(__imp__sub_82154928) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lbz r11,333(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 333);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154b48
	if (cr6.getEQ()) goto loc_82154B48;
	// lbz r11,334(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 334);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82154b48
	if (!cr6.getEQ()) goto loc_82154B48;
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82154970
	if (cr6.getEQ()) goto loc_82154970;
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x82154b48
	if (!cr6.getEQ()) goto loc_82154B48;
loc_82154970:
	// lbz r11,16(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154b48
	if (cr6.getEQ()) goto loc_82154B48;
	// addi r24,r28,336
	r24.s64 = r28.s64 + 336;
	// li r25,0
	r25.s64 = 0;
	// addi r31,r28,1488
	r31.s64 = r28.s64 + 1488;
	// mr r27,r25
	r27.u64 = r25.u64;
	// mr r30,r24
	r30.u64 = r24.u64;
	// li r26,-1
	r26.s64 = -1;
loc_82154994:
	// ld r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// cmpldi cr6,r3,0
	cr6.compare<uint64_t>(ctx.r3.u64, 0, xer);
	// beq cr6,0x82154a00
	if (cr6.getEQ()) goto loc_82154A00;
	// bl 0x82158570
	sub_82158570(ctx, base);
	// add r29,r27,r28
	r29.u64 = r27.u64 + r28.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lbz r11,1360(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 1360);
	// bne cr6,0x821549d4
	if (!cr6.getEQ()) goto loc_821549D4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// beq cr6,0x821549c8
	if (cr6.getEQ()) goto loc_821549C8;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// b 0x821549f0
	goto loc_821549F0;
loc_821549C8:
	// ld r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// bl 0x823bb7d8
	sub_823BB7D8(ctx, base);
	// b 0x821549f4
	goto loc_821549F4;
loc_821549D4:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154a00
	if (cr6.getEQ()) goto loc_82154A00;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,820(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 820);
	// cmpw cr6,r4,r11
	cr6.compare<int32_t>(ctx.r4.s32, r11.s32, xer);
	// beq cr6,0x82154a00
	if (cr6.getEQ()) goto loc_82154A00;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
loc_821549F0:
	// bl 0x823bb788
	sub_823BB788(ctx, base);
loc_821549F4:
	// std r25,0(r30)
	PPC_STORE_U64(r30.u32 + 0, r25.u64);
	// stb r25,1360(r29)
	PPC_STORE_U8(r29.u32 + 1360, r25.u8);
	// stw r26,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r26.u32);
loc_82154A00:
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// addi r30,r30,8
	r30.s64 = r30.s64 + 8;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// cmpwi cr6,r27,128
	cr6.compare<int32_t>(r27.s32, 128, xer);
	// blt cr6,0x82154994
	if (cr6.getLT()) goto loc_82154994;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r27,-32254
	r27.s64 = -2113798144;
loc_82154A38:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x82154a54
	if (cr6.getEQ()) goto loc_82154A54;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// mr r11,r25
	r11.u64 = r25.u64;
	// bne cr6,0x82154a58
	if (!cr6.getEQ()) goto loc_82154A58;
loc_82154A54:
	// li r11,1
	r11.s64 = 1;
loc_82154A58:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82154b48
	if (!cr6.getEQ()) goto loc_82154B48;
	// ld r8,784(r3)
	ctx.r8.u64 = PPC_LOAD_U64(ctx.r3.u32 + 784);
	// addi r29,r3,784
	r29.s64 = ctx.r3.s64 + 784;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpldi cr6,r8,0
	cr6.compare<uint64_t>(ctx.r8.u64, 0, xer);
	// beq cr6,0x82154b3c
	if (cr6.getEQ()) goto loc_82154B3C;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
	// mr r11,r24
	r11.u64 = r24.u64;
loc_82154A84:
	// ld r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// cmpld cr6,r7,r8
	cr6.compare<uint64_t>(ctx.r7.u64, ctx.r8.u64, xer);
	// beq cr6,0x82154aa4
	if (cr6.getEQ()) goto loc_82154AA4;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// cmpwi cr6,r10,128
	cr6.compare<int32_t>(ctx.r10.s32, 128, xer);
	// blt cr6,0x82154a84
	if (cr6.getLT()) goto loc_82154A84;
	// b 0x82154aa8
	goto loc_82154AA8;
loc_82154AA4:
	// li r9,1
	ctx.r9.s64 = 1;
loc_82154AA8:
	// clrlwi r11,r9,24
	r11.u64 = ctx.r9.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82154b3c
	if (!cr6.getEQ()) goto loc_82154B3C;
	// lwz r31,104(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 104);
	// lwz r11,-26072(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -26072);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x82154b3c
	if (cr6.getEQ()) goto loc_82154B3C;
	// cmplwi cr6,r31,128
	cr6.compare<uint32_t>(r31.u32, 128, xer);
	// bge cr6,0x82154b3c
	if (!cr6.getLT()) goto loc_82154B3C;
	// addi r11,r31,42
	r11.s64 = r31.s64 + 42;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// ldx r10,r11,r28
	ctx.r10.u64 = PPC_LOAD_U64(r11.u32 + r28.u32);
	// cmpldi cr6,r10,0
	cr6.compare<uint64_t>(ctx.r10.u64, 0, xer);
	// bne cr6,0x82154b3c
	if (!cr6.getEQ()) goto loc_82154B3C;
	// stdx r8,r11,r28
	PPC_STORE_U64(r11.u32 + r28.u32, ctx.r8.u64);
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// add r10,r31,r28
	ctx.r10.u64 = r31.u64 + r28.u64;
	// addi r9,r31,372
	ctx.r9.s64 = r31.s64 + 372;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// stb r11,1360(r10)
	PPC_STORE_U8(ctx.r10.u32 + 1360, r11.u8);
	// lwz r11,820(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 820);
	// stwx r11,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + r28.u32, r11.u32);
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// lbz r5,332(r28)
	ctx.r5.u64 = PPC_LOAD_U8(r28.u32 + 332);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154b34
	if (cr6.getEQ()) goto loc_82154B34;
	// lwz r4,820(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 820);
	// bl 0x823bb6d8
	sub_823BB6D8(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82154a38
	goto loc_82154A38;
loc_82154B34:
	// ld r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U64(r29.u32 + 0);
	// bl 0x823bb730
	sub_823BB730(ctx, base);
loc_82154B3C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82154a38
	goto loc_82154A38;
loc_82154B48:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_82154B50"))) PPC_WEAK_FUNC(sub_82154B50);
PPC_FUNC_IMPL(__imp__sub_82154B50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82154928
	sub_82154928(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823bb3d0
	sub_823BB3D0(ctx, base);
	// lbz r11,312(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 312);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82154c0c
	if (!cr6.getEQ()) goto loc_82154C0C;
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// cmplw cr6,r31,r3
	cr6.compare<uint32_t>(r31.u32, ctx.r3.u32, xer);
	// bne cr6,0x82154c0c
	if (!cr6.getEQ()) goto loc_82154C0C;
	// lbz r11,16(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// beq cr6,0x82154ba8
	if (cr6.getEQ()) goto loc_82154BA8;
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// li r30,4096
	r30.s64 = 4096;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// b 0x82154bc8
	goto loc_82154BC8;
loc_82154BA8:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82154bbc
	if (cr6.getEQ()) goto loc_82154BBC;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x82154bc0
	if (!cr6.getEQ()) goto loc_82154BC0;
loc_82154BBC:
	// li r11,1
	r11.s64 = 1;
loc_82154BC0:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// li r30,16384
	r30.s64 = 16384;
loc_82154BC8:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154c0c
	if (cr6.getEQ()) goto loc_82154C0C;
	// addi r29,r31,316
	r29.s64 = r31.s64 + 316;
	// bl 0x8215f9d0
	sub_8215F9D0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r7,13
	ctx.r7.s64 = 13;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// li r5,12
	ctx.r5.s64 = 12;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r3,r31,17
	ctx.r3.s64 = r31.s64 + 17;
	// stw r11,316(r31)
	PPC_STORE_U32(r31.u32 + 316, r11.u32);
	// bl 0x823bc608
	sub_823BC608(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82154c0c
	if (!cr6.getEQ()) goto loc_82154C0C;
	// li r11,1
	r11.s64 = 1;
	// stb r11,312(r31)
	PPC_STORE_U8(r31.u32 + 312, r11.u8);
loc_82154C0C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82154C18"))) PPC_WEAK_FUNC(sub_82154C18);
PPC_FUNC_IMPL(__imp__sub_82154C18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// clrlwi r11,r4,24
	r11.u64 = ctx.r4.u32 & 0xFF;
	// lbz r10,333(r28)
	ctx.r10.u64 = PPC_LOAD_U8(r28.u32 + 333);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x82154cd4
	if (cr6.getEQ()) goto loc_82154CD4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stb r4,333(r28)
	PPC_STORE_U8(r28.u32 + 333, ctx.r4.u8);
	// bne cr6,0x82154cd4
	if (!cr6.getEQ()) goto loc_82154CD4;
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82154c64
	if (cr6.getEQ()) goto loc_82154C64;
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x82154cd4
	if (!cr6.getEQ()) goto loc_82154CD4;
loc_82154C64:
	// lbz r11,16(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154cd4
	if (cr6.getEQ()) goto loc_82154CD4;
	// li r26,0
	r26.s64 = 0;
	// addi r30,r28,1488
	r30.s64 = r28.s64 + 1488;
	// mr r27,r26
	r27.u64 = r26.u64;
	// addi r31,r28,336
	r31.s64 = r28.s64 + 336;
	// li r25,-1
	r25.s64 = -1;
loc_82154C84:
	// ld r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// cmpldi cr6,r4,0
	cr6.compare<uint64_t>(ctx.r4.u64, 0, xer);
	// beq cr6,0x82154cc0
	if (cr6.getEQ()) goto loc_82154CC0;
	// add r29,r27,r28
	r29.u64 = r27.u64 + r28.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lbz r11,1360(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 1360);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154cb0
	if (cr6.getEQ()) goto loc_82154CB0;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x823bb788
	sub_823BB788(ctx, base);
	// b 0x82154cb4
	goto loc_82154CB4;
loc_82154CB0:
	// bl 0x823bb7d8
	sub_823BB7D8(ctx, base);
loc_82154CB4:
	// std r26,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r26.u64);
	// stb r26,1360(r29)
	PPC_STORE_U8(r29.u32 + 1360, r26.u8);
	// stw r25,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r25.u32);
loc_82154CC0:
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// addi r31,r31,8
	r31.s64 = r31.s64 + 8;
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// cmpwi cr6,r27,128
	cr6.compare<int32_t>(r27.s32, 128, xer);
	// blt cr6,0x82154c84
	if (cr6.getLT()) goto loc_82154C84;
loc_82154CD4:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82154CE0"))) PPC_WEAK_FUNC(sub_82154CE0);
PPC_FUNC_IMPL(__imp__sub_82154CE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x82154d08
	if (!cr6.getGT()) goto loc_82154D08;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// bgt cr6,0x82154d18
	if (cr6.getGT()) goto loc_82154D18;
loc_82154D08:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// ble cr6,0x82154d3c
	if (!cr6.getGT()) goto loc_82154D3C;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// ble cr6,0x82154d3c
	if (!cr6.getGT()) goto loc_82154D3C;
loc_82154D18:
	// li r11,1
	r11.s64 = 1;
	// lbz r30,333(r31)
	r30.u64 = PPC_LOAD_U8(r31.u32 + 333);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r11,334(r31)
	PPC_STORE_U8(r31.u32 + 334, r11.u8);
	// bl 0x82154c18
	sub_82154C18(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82154c18
	sub_82154C18(ctx, base);
loc_82154D3C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82154D58"))) PPC_WEAK_FUNC(sub_82154D58);
PPC_FUNC_IMPL(__imp__sub_82154D58) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// li r11,0
	r11.s64 = 0;
	// stb r11,334(r3)
	PPC_STORE_U8(ctx.r3.u32 + 334, r11.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82154D68"))) PPC_WEAK_FUNC(sub_82154D68);
PPC_FUNC_IMPL(__imp__sub_82154D68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// clrlwi r10,r4,24
	ctx.r10.u64 = ctx.r4.u32 & 0xFF;
	// lbz r11,324(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 324);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x82154de4
	if (cr6.getEQ()) goto loc_82154DE4;
	// lbz r11,312(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 312);
	// stb r4,324(r31)
	PPC_STORE_U8(r31.u32 + 324, ctx.r4.u8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154de4
	if (cr6.getEQ()) goto loc_82154DE4;
	// addi r30,r31,17
	r30.s64 = r31.s64 + 17;
	// li r7,4
	ctx.r7.s64 = 4;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,12
	ctx.r5.s64 = 12;
	// addi r4,r31,316
	ctx.r4.s64 = r31.s64 + 316;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823bc608
	sub_823BC608(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82154de4
	if (cr6.getEQ()) goto loc_82154DE4;
	// li r7,2
	ctx.r7.s64 = 2;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823bc608
	sub_823BC608(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stb r11,312(r31)
	PPC_STORE_U8(r31.u32 + 312, r11.u8);
loc_82154DE4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82154E00"))) PPC_WEAK_FUNC(sub_82154E00);
PPC_FUNC_IMPL(__imp__sub_82154E00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lbz r11,312(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 312);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82154e58
	if (cr6.getEQ()) goto loc_82154E58;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82154e3c
	if (cr6.getEQ()) goto loc_82154E3C;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x82154e54
	if (!cr6.getEQ()) goto loc_82154E54;
loc_82154E3C:
	// li r7,2
	ctx.r7.s64 = 2;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,17
	ctx.r3.s64 = r31.s64 + 17;
	// bl 0x823bc608
	sub_823BC608(ctx, base);
loc_82154E54:
	// stb r30,312(r31)
	PPC_STORE_U8(r31.u32 + 312, r30.u8);
loc_82154E58:
	// li r11,64
	r11.s64 = 64;
	// stb r30,332(r31)
	PPC_STORE_U8(r31.u32 + 332, r30.u8);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,328(r31)
	PPC_STORE_U32(r31.u32 + 328, r11.u32);
	// bl 0x82154c18
	sub_82154C18(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82154928
	sub_82154928(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,2000(r31)
	PPC_STORE_U8(r31.u32 + 2000, r30.u8);
	// stb r30,2008(r31)
	PPC_STORE_U8(r31.u32 + 2008, r30.u8);
	// bl 0x823bc298
	sub_823BC298(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82154EA0"))) PPC_WEAK_FUNC(sub_82154EA0);
PPC_FUNC_IMPL(__imp__sub_82154EA0) {
	PPC_FUNC_PROLOGUE();
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
	// lis r5,4096
	ctx.r5.s64 = 268435456;
	// ori r5,r5,1
	ctx.r5.u64 = ctx.r5.u64 | 1;
	// b 0x823bb850
	sub_823BB850(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82154EB0"))) PPC_WEAK_FUNC(sub_82154EB0);
PPC_FUNC_IMPL(__imp__sub_82154EB0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// lis r5,4096
	ctx.r5.s64 = 268435456;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// ori r5,r5,2
	ctx.r5.u64 = ctx.r5.u64 | 2;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lbz r11,3(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 3);
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// lbz r9,1(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 1);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// lbz r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// extsb r10,r8
	ctx.r10.s64 = ctx.r8.s8;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x823bb850
	sub_823BB850(ctx, base);
	// lbz r11,7(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// lbz r10,6(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// lis r5,4096
	ctx.r5.s64 = 268435456;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// lbz r9,5(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// lbz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// extsb r10,r8
	ctx.r10.s64 = ctx.r8.s8;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// ori r5,r5,3
	ctx.r5.u64 = ctx.r5.u64 | 3;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x823bb850
	sub_823BB850(ctx, base);
	// lbz r11,11(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 11);
	// lbz r10,10(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// lis r5,4096
	ctx.r5.s64 = 268435456;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// lbz r9,9(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// lbz r8,8(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// extsb r10,r8
	ctx.r10.s64 = ctx.r8.s8;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// ori r5,r5,4
	ctx.r5.u64 = ctx.r5.u64 | 4;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x823bb850
	sub_823BB850(ctx, base);
	// lbz r11,15(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 15);
	// lbz r10,14(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 14);
	// lis r5,4096
	ctx.r5.s64 = 268435456;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// lbz r9,13(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 13);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// lbz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// extsb r10,r8
	ctx.r10.s64 = ctx.r8.s8;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// ori r5,r5,5
	ctx.r5.u64 = ctx.r5.u64 | 5;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x823bb850
	sub_823BB850(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82154FF8"))) PPC_WEAK_FUNC(sub_82154FF8);
PPC_FUNC_IMPL(__imp__sub_82154FF8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r5
	ctx.r3.u64 = ctx.r5.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x821544c0
	sub_821544C0(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// lwz r11,32(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lis r5,0
	ctx.r5.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// ori r5,r5,32779
	ctx.r5.u64 = ctx.r5.u64 | 32779;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155078"))) PPC_WEAK_FUNC(sub_82155078);
PPC_FUNC_IMPL(__imp__sub_82155078) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// lis r5,0
	ctx.r5.s64 = 0;
	// clrlwi r10,r30,24
	ctx.r10.u64 = r30.u32 & 0xFF;
	// ori r5,r5,32778
	ctx.r5.u64 = ctx.r5.u64 | 32778;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r6,r10,27,31,31
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82154d68
	sub_82154D68(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821550E0"))) PPC_WEAK_FUNC(sub_821550E0);
PPC_FUNC_IMPL(__imp__sub_821550E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r5
	ctx.r3.u64 = ctx.r5.u64;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// bl 0x82154558
	sub_82154558(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// lwz r11,32(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 32);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155128"))) PPC_WEAK_FUNC(sub_82155128);
PPC_FUNC_IMPL(__imp__sub_82155128) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r5
	ctx.r3.u64 = ctx.r5.u64;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// bl 0x82154640
	sub_82154640(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// lwz r11,32(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 32);
	// li r5,2
	ctx.r5.s64 = 2;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155170"))) PPC_WEAK_FUNC(sub_82155170);
PPC_FUNC_IMPL(__imp__sub_82155170) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// clrlwi r11,r5,24
	r11.u64 = ctx.r5.u32 & 0xFF;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r5,3
	ctx.r5.s64 = 3;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lwz r10,32(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// xori r6,r11,1
	ctx.r6.u64 = r11.u64 ^ 1;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82155198"))) PPC_WEAK_FUNC(sub_82155198);
PPC_FUNC_IMPL(__imp__sub_82155198) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r5,0
	ctx.r5.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// ori r5,r5,32779
	ctx.r5.u64 = ctx.r5.u64 | 32779;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82154d68
	sub_82154D68(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821551E8"))) PPC_WEAK_FUNC(sub_821551E8);
PPC_FUNC_IMPL(__imp__sub_821551E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r25,276(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 276);
	// li r29,0
	r29.s64 = 0;
	// lbz r26,287(r1)
	r26.u64 = PPC_LOAD_U8(ctx.r1.u32 + 287);
	// addi r30,r3,1488
	r30.s64 = ctx.r3.s64 + 1488;
	// mr r11,r29
	r11.u64 = r29.u64;
	// addi r31,r3,336
	r31.s64 = ctx.r3.s64 + 336;
	// addi r28,r3,1360
	r28.s64 = ctx.r3.s64 + 1360;
	// stw r25,328(r3)
	PPC_STORE_U32(ctx.r3.u32 + 328, r25.u32);
	// li r27,-1
	r27.s64 = -1;
	// stb r26,332(r3)
	PPC_STORE_U8(ctx.r3.u32 + 332, r26.u8);
loc_8215521C:
	// std r29,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r29.u64);
	// addi r31,r31,8
	r31.s64 = r31.s64 + 8;
	// stbx r29,r28,r11
	PPC_STORE_U8(r28.u32 + r11.u32, r29.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r27,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r27.u32);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// cmpwi cr6,r11,128
	cr6.compare<int32_t>(r11.s32, 128, xer);
	// blt cr6,0x8215521c
	if (cr6.getLT()) goto loc_8215521C;
	// clrlwi r31,r26,24
	r31.u64 = r26.u32 & 0xFF;
	// stb r29,333(r3)
	PPC_STORE_U8(ctx.r3.u32 + 333, r29.u8);
	// stb r29,334(r3)
	PPC_STORE_U8(ctx.r3.u32 + 334, r29.u8);
	// mr r11,r29
	r11.u64 = r29.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8215525c
	if (!cr6.getEQ()) goto loc_8215525C;
	// mr r11,r25
	r11.u64 = r25.u64;
	// beq cr6,0x82155260
	if (cr6.getEQ()) goto loc_82155260;
loc_8215525C:
	// mr r29,r25
	r29.u64 = r25.u64;
loc_82155260:
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// lbz r11,271(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 271);
	// lwz r31,0(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// stw r29,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r29.u32);
	// stb r11,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r11.u8);
	// lbz r11,263(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 263);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, r11.u8);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82155290"))) PPC_WEAK_FUNC(sub_82155290);
PPC_FUNC_IMPL(__imp__sub_82155290) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r25,332(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 332);
	// li r29,0
	r29.s64 = 0;
	// lbz r26,343(r1)
	r26.u64 = PPC_LOAD_U8(ctx.r1.u32 + 343);
	// addi r30,r3,1488
	r30.s64 = ctx.r3.s64 + 1488;
	// mr r11,r29
	r11.u64 = r29.u64;
	// addi r31,r3,336
	r31.s64 = ctx.r3.s64 + 336;
	// addi r28,r3,1360
	r28.s64 = ctx.r3.s64 + 1360;
	// stw r25,328(r3)
	PPC_STORE_U32(ctx.r3.u32 + 328, r25.u32);
	// li r27,-1
	r27.s64 = -1;
	// stb r26,332(r3)
	PPC_STORE_U8(ctx.r3.u32 + 332, r26.u8);
loc_821552C4:
	// std r29,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r29.u64);
	// addi r31,r31,8
	r31.s64 = r31.s64 + 8;
	// stbx r29,r28,r11
	PPC_STORE_U8(r28.u32 + r11.u32, r29.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r27,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r27.u32);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// cmpwi cr6,r11,128
	cr6.compare<int32_t>(r11.s32, 128, xer);
	// blt cr6,0x821552c4
	if (cr6.getLT()) goto loc_821552C4;
	// clrlwi r31,r26,24
	r31.u64 = r26.u32 & 0xFF;
	// stb r29,333(r3)
	PPC_STORE_U8(ctx.r3.u32 + 333, r29.u8);
	// stb r29,334(r3)
	PPC_STORE_U8(ctx.r3.u32 + 334, r29.u8);
	// mr r11,r29
	r11.u64 = r29.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82155304
	if (!cr6.getEQ()) goto loc_82155304;
	// mr r11,r25
	r11.u64 = r25.u64;
	// beq cr6,0x82155308
	if (cr6.getEQ()) goto loc_82155308;
loc_82155304:
	// mr r29,r25
	r29.u64 = r25.u64;
loc_82155308:
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// lbz r11,327(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 327);
	// lwz r31,0(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// stw r29,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r29.u32);
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, r11.u8);
	// lbz r11,319(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 319);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, r11.u8);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// lbz r31,311(r1)
	r31.u64 = PPC_LOAD_U8(ctx.r1.u32 + 311);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, r31.u8);
	// lbz r31,303(r1)
	r31.u64 = PPC_LOAD_U8(ctx.r1.u32 + 303);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r31.u8);
	// lbz r31,295(r1)
	r31.u64 = PPC_LOAD_U8(ctx.r1.u32 + 295);
	// stb r31,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, r31.u8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82155350"))) PPC_WEAK_FUNC(sub_82155350);
PPC_FUNC_IMPL(__imp__sub_82155350) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
	// stb r9,332(r3)
	PPC_STORE_U8(ctx.r3.u32 + 332, ctx.r9.u8);
	// clrlwi r10,r9,24
	ctx.r10.u64 = ctx.r9.u32 & 0xFF;
	// li r8,0
	ctx.r8.s64 = 0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,328(r3)
	PPC_STORE_U32(ctx.r3.u32 + 328, r11.u32);
	// bne cr6,0x82155374
	if (!cr6.getEQ()) goto loc_82155374;
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// li r11,0
	r11.s64 = 0;
loc_82155374:
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// lwz r11,20(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82155388"))) PPC_WEAK_FUNC(sub_82155388);
PPC_FUNC_IMPL(__imp__sub_82155388) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,16(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 16);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821553d4
	if (cr6.getEQ()) goto loc_821553D4;
	// bl 0x82184a40
	sub_82184A40(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x821553d4
	if (!cr6.getEQ()) goto loc_821553D4;
	// li r11,0
	r11.s64 = 0;
	// stb r11,200(r31)
	PPC_STORE_U8(r31.u32 + 200, r11.u8);
	// stw r11,204(r31)
	PPC_STORE_U32(r31.u32 + 204, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_821553D4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823bb908
	sub_823BB908(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821553F0"))) PPC_WEAK_FUNC(sub_821553F0);
PPC_FUNC_IMPL(__imp__sub_821553F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x823bb918
	sub_823BB918(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,1
	ctx.r9.s64 = 1;
	// addi r10,r11,-29680
	ctx.r10.s64 = r11.s64 + -29680;
	// li r11,0
	r11.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r9,797(r31)
	PPC_STORE_U8(r31.u32 + 797, ctx.r9.u8);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stw r11,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r11.u32);
	// stw r11,308(r31)
	PPC_STORE_U32(r31.u32 + 308, r11.u32);
	// stw r11,672(r31)
	PPC_STORE_U32(r31.u32 + 672, r11.u32);
	// stb r11,796(r31)
	PPC_STORE_U8(r31.u32 + 796, r11.u8);
	// stb r11,798(r31)
	PPC_STORE_U8(r31.u32 + 798, r11.u8);
	// stw r11,800(r31)
	PPC_STORE_U32(r31.u32 + 800, r11.u32);
	// stw r11,1124(r31)
	PPC_STORE_U32(r31.u32 + 1124, r11.u32);
	// stb r11,1608(r31)
	PPC_STORE_U8(r31.u32 + 1608, r11.u8);
	// stw r11,1612(r31)
	PPC_STORE_U32(r31.u32 + 1612, r11.u32);
	// stw r11,1616(r31)
	PPC_STORE_U32(r31.u32 + 1616, r11.u32);
	// stw r11,1620(r31)
	PPC_STORE_U32(r31.u32 + 1620, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155468"))) PPC_WEAK_FUNC(sub_82155468);
PPC_FUNC_IMPL(__imp__sub_82155468) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbba8
	sub_823BBBA8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82155470"))) PPC_WEAK_FUNC(sub_82155470);
PPC_FUNC_IMPL(__imp__sub_82155470) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbbc8
	sub_823BBBC8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82155478"))) PPC_WEAK_FUNC(sub_82155478);
PPC_FUNC_IMPL(__imp__sub_82155478) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbc28
	sub_823BBC28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82155480"))) PPC_WEAK_FUNC(sub_82155480);
PPC_FUNC_IMPL(__imp__sub_82155480) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbca8
	sub_823BBCA8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82155488"))) PPC_WEAK_FUNC(sub_82155488);
PPC_FUNC_IMPL(__imp__sub_82155488) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbd28
	sub_823BBD28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82155490"))) PPC_WEAK_FUNC(sub_82155490);
PPC_FUNC_IMPL(__imp__sub_82155490) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbda8
	sub_823BBDA8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82155498"))) PPC_WEAK_FUNC(sub_82155498);
PPC_FUNC_IMPL(__imp__sub_82155498) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbe30
	sub_823BBE30(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821554A0"))) PPC_WEAK_FUNC(sub_821554A0);
PPC_FUNC_IMPL(__imp__sub_821554A0) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbe48
	sub_823BBE48(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821554A8"))) PPC_WEAK_FUNC(sub_821554A8);
PPC_FUNC_IMPL(__imp__sub_821554A8) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbe60
	sub_823BBE60(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821554B0"))) PPC_WEAK_FUNC(sub_821554B0);
PPC_FUNC_IMPL(__imp__sub_821554B0) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbe78
	sub_823BBE78(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821554B8"))) PPC_WEAK_FUNC(sub_821554B8);
PPC_FUNC_IMPL(__imp__sub_821554B8) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbe90
	sub_823BBE90(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821554C0"))) PPC_WEAK_FUNC(sub_821554C0);
PPC_FUNC_IMPL(__imp__sub_821554C0) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbea8
	sub_823BBEA8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821554C8"))) PPC_WEAK_FUNC(sub_821554C8);
PPC_FUNC_IMPL(__imp__sub_821554C8) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbef8
	sub_823BBEF8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821554D0"))) PPC_WEAK_FUNC(sub_821554D0);
PPC_FUNC_IMPL(__imp__sub_821554D0) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbf10
	sub_823BBF10(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821554D8"))) PPC_WEAK_FUNC(sub_821554D8);
PPC_FUNC_IMPL(__imp__sub_821554D8) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbf28
	sub_823BBF28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821554E0"))) PPC_WEAK_FUNC(sub_821554E0);
PPC_FUNC_IMPL(__imp__sub_821554E0) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbf78
	sub_823BBF78(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821554E8"))) PPC_WEAK_FUNC(sub_821554E8);
PPC_FUNC_IMPL(__imp__sub_821554E8) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bbfc8
	sub_823BBFC8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821554F0"))) PPC_WEAK_FUNC(sub_821554F0);
PPC_FUNC_IMPL(__imp__sub_821554F0) {
	PPC_FUNC_PROLOGUE();
	// b 0x823bc018
	sub_823BC018(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_821554F8"))) PPC_WEAK_FUNC(sub_821554F8);
PPC_FUNC_IMPL(__imp__sub_821554F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-29680
	r11.s64 = r11.s64 + -29680;
	// lbz r10,798(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 798);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x8215553c
	if (cr6.getEQ()) goto loc_8215553C;
	// li r30,0
	r30.s64 = 0;
	// lwz r3,1124(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1124);
	// stb r30,798(r31)
	PPC_STORE_U8(r31.u32 + 798, r30.u8);
	// bl 0x823bc6a8
	sub_823BC6A8(ctx, base);
	// stw r30,1124(r31)
	PPC_STORE_U32(r31.u32 + 1124, r30.u32);
loc_8215553C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823bc2c8
	sub_823BC2C8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155560"))) PPC_WEAK_FUNC(sub_82155560);
PPC_FUNC_IMPL(__imp__sub_82155560) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r10,308(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 308);
	// li r11,0
	r11.s64 = 0;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8215559c
	if (!cr6.getGT()) goto loc_8215559C;
	// addi r10,r3,312
	ctx.r10.s64 = ctx.r3.s64 + 312;
loc_82155574:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplw cr6,r9,r4
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r4.u32, xer);
	// beq cr6,0x82155594
	if (cr6.getEQ()) goto loc_82155594;
	// lwz r9,308(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 308);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 24;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x82155574
	if (cr6.getLT()) goto loc_82155574;
loc_82155594:
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// bgelr cr6
	if (!cr6.getLT()) return;
loc_8215559C:
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r11,13
	ctx.r10.s64 = r11.s64 + 13;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r9,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// add r10,r9,r3
	ctx.r10.u64 = ctx.r9.u64 + ctx.r3.u64;
	// li r7,1
	ctx.r7.s64 = 1;
	// rlwinm r9,r8,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// stw r5,328(r10)
	PPC_STORE_U32(ctx.r10.u32 + 328, ctx.r5.u32);
	// stb r7,320(r10)
	PPC_STORE_U8(ctx.r10.u32 + 320, ctx.r7.u8);
	// stwx r4,r9,r3
	PPC_STORE_U32(ctx.r9.u32 + ctx.r3.u32, ctx.r4.u32);
	// lwz r10,308(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 308);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bltlr cr6
	if (cr6.getLT()) return;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,308(r3)
	PPC_STORE_U32(ctx.r3.u32 + 308, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821555E8"))) PPC_WEAK_FUNC(sub_821555E8);
PPC_FUNC_IMPL(__imp__sub_821555E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r10,672(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 672);
	// li r11,0
	r11.s64 = 0;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82155624
	if (!cr6.getGT()) goto loc_82155624;
	// addi r10,r3,676
	ctx.r10.s64 = ctx.r3.s64 + 676;
loc_821555FC:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplw cr6,r9,r4
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r4.u32, xer);
	// beq cr6,0x8215561c
	if (cr6.getEQ()) goto loc_8215561C;
	// lwz r9,672(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 672);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x821555fc
	if (cr6.getLT()) goto loc_821555FC;
loc_8215561C:
	// cmpwi cr6,r11,15
	cr6.compare<int32_t>(r11.s32, 15, xer);
	// bgelr cr6
	if (!cr6.getLT()) return;
loc_82155624:
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r9,r11,85
	ctx.r9.s64 = r11.s64 + 85;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r9,r9,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// stw r4,676(r10)
	PPC_STORE_U32(ctx.r10.u32 + 676, ctx.r4.u32);
	// stwx r5,r9,r3
	PPC_STORE_U32(ctx.r9.u32 + ctx.r3.u32, ctx.r5.u32);
	// lwz r10,672(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 672);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bltlr cr6
	if (cr6.getLT()) return;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,672(r3)
	PPC_STORE_U32(ctx.r3.u32 + 672, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155658"))) PPC_WEAK_FUNC(sub_82155658);
PPC_FUNC_IMPL(__imp__sub_82155658) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// bl 0x8209d088
	sub_8209D088(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155690"))) PPC_WEAK_FUNC(sub_82155690);
PPC_FUNC_IMPL(__imp__sub_82155690) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x823bbb48
	sub_823BBB48(ctx, base);
	// li r30,0
	r30.s64 = 0;
	// lbz r11,798(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 798);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r30,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r30.u32);
	// stw r30,308(r31)
	PPC_STORE_U32(r31.u32 + 308, r30.u32);
	// stw r30,672(r31)
	PPC_STORE_U32(r31.u32 + 672, r30.u32);
	// stb r30,796(r31)
	PPC_STORE_U8(r31.u32 + 796, r30.u8);
	// beq cr6,0x821556dc
	if (cr6.getEQ()) goto loc_821556DC;
	// lwz r3,1124(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1124);
	// stb r30,798(r31)
	PPC_STORE_U8(r31.u32 + 798, r30.u8);
	// bl 0x823bc6a8
	sub_823BC6A8(ctx, base);
	// stw r30,1124(r31)
	PPC_STORE_U32(r31.u32 + 1124, r30.u32);
loc_821556DC:
	// stw r30,800(r31)
	PPC_STORE_U32(r31.u32 + 800, r30.u32);
	// stb r30,1608(r31)
	PPC_STORE_U8(r31.u32 + 1608, r30.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155700"))) PPC_WEAK_FUNC(sub_82155700);
PPC_FUNC_IMPL(__imp__sub_82155700) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r27,0
	r27.s64 = 0;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stw r27,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r27.u32);
	// stw r27,800(r31)
	PPC_STORE_U32(r31.u32 + 800, r27.u32);
	// stb r27,798(r31)
	PPC_STORE_U8(r31.u32 + 798, r27.u8);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// mr r30,r27
	r30.u64 = r27.u64;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// ble cr6,0x821558b0
	if (!cr6.getGT()) goto loc_821558B0;
	// li r26,3
	r26.s64 = 3;
loc_82155744:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lis r5,4096
	ctx.r5.s64 = 268435456;
	// li r29,1
	r29.s64 = 1;
	// stb r27,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, r27.u8);
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// ori r5,r5,1
	ctx.r5.u64 = ctx.r5.u64 | 1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lbz r11,112(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 112);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82155790
	if (cr6.getEQ()) goto loc_82155790;
	// bl 0x8215f9d0
	sub_8215F9D0(ctx, base);
	// subf r11,r28,r3
	r11.s64 = ctx.r3.s64 - r28.s64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r29,r11,27,31,31
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
loc_82155790:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821558a4
	if (cr6.getEQ()) goto loc_821558A4;
	// lbz r11,797(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 797);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82155850
	if (cr6.getEQ()) goto loc_82155850;
	// lwz r11,800(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 800);
	// cmpwi cr6,r11,20
	cr6.compare<int32_t>(r11.s32, 20, xer);
	// bge cr6,0x821558a4
	if (!cr6.getLT()) goto loc_821558A4;
	// addi r11,r11,201
	r11.s64 = r11.s64 + 201;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stwx r30,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, r30.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,44(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,800(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 800);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// addi r11,r11,221
	r11.s64 = r11.s64 + 221;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stwx r10,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, ctx.r10.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,800(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 800);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// addi r11,r11,241
	r11.s64 = r11.s64 + 241;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stwx r10,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, ctx.r10.u32);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,800(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 800);
	// addi r11,r11,261
	r11.s64 = r11.s64 + 261;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r3,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, ctx.r3.u32);
	// lwz r11,800(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 800);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,800(r31)
	PPC_STORE_U32(r31.u32 + 800, r11.u32);
	// b 0x821558a4
	goto loc_821558A4;
loc_82155850:
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// cmpwi cr6,r11,20
	cr6.compare<int32_t>(r11.s32, 20, xer);
	// bge cr6,0x821558a4
	if (!cr6.getLT()) goto loc_821558A4;
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r30,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, r30.u32);
	// bl 0x8215f9d0
	sub_8215F9D0(ctx, base);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r3,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, ctx.r3.u32);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// stb r27,208(r11)
	PPC_STORE_U8(r11.u32 + 208, r27.u8);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// addi r11,r11,57
	r11.s64 = r11.s64 + 57;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r26,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, r26.u32);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r11.u32);
loc_821558A4:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpw cr6,r30,r25
	cr6.compare<int32_t>(r30.s32, r25.s32, xer);
	// blt cr6,0x82155744
	if (cr6.getLT()) goto loc_82155744;
loc_821558B0:
	// lwz r3,800(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 800);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x82155914
	if (!cr6.getGT()) goto loc_82155914;
	// lis r10,0
	ctx.r10.s64 = 0;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// addi r11,r31,1124
	r11.s64 = r31.s64 + 1124;
	// stw r27,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r27.u32);
	// ori r5,r10,32768
	ctx.r5.u64 = ctx.r10.u64 | 32768;
	// li r10,6
	ctx.r10.s64 = 6;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// stw r5,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r5.u32);
	// addi r6,r31,1044
	ctx.r6.s64 = r31.s64 + 1044;
	// addi r5,r31,964
	ctx.r5.s64 = r31.s64 + 964;
	// addi r4,r31,884
	ctx.r4.s64 = r31.s64 + 884;
	// bl 0x823bc628
	sub_823BC628(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82155910
	if (!cr6.getEQ()) goto loc_82155910;
	// li r11,1
	r11.s64 = 1;
	// stb r11,798(r31)
	PPC_STORE_U8(r31.u32 + 798, r11.u8);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed17c
	return;
loc_82155910:
	// stw r27,800(r31)
	PPC_STORE_U32(r31.u32 + 800, r27.u32);
loc_82155914:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82155920"))) PPC_WEAK_FUNC(sub_82155920);
PPC_FUNC_IMPL(__imp__sub_82155920) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x823bb950
	sub_823BB950(ctx, base);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// li r30,0
	r30.s64 = 0;
	// li r25,1
	r25.s64 = 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82155a0c
	if (!cr6.getEQ()) goto loc_82155A0C;
	// lbz r11,1608(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 1608);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82155a0c
	if (cr6.getEQ()) goto loc_82155A0C;
	// lwz r11,308(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 308);
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// stb r30,1608(r31)
	PPC_STORE_U8(r31.u32 + 1608, r30.u8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x821559a0
	if (!cr6.getGT()) goto loc_821559A0;
	// addi r11,r31,1128
	r11.s64 = r31.s64 + 1128;
loc_8215596C:
	// addi r9,r11,-816
	ctx.r9.s64 = r11.s64 + -816;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// addi r11,r11,24
	r11.s64 = r11.s64 + 24;
	// ld r7,0(r9)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r9.u32 + 0);
	// ld r6,8(r9)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r9.u32 + 8);
	// ld r9,16(r9)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r9.u32 + 16);
	// std r7,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r7.u64);
	// std r6,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, ctx.r6.u64);
	// std r9,16(r10)
	PPC_STORE_U64(ctx.r10.u32 + 16, ctx.r9.u64);
	// lwz r10,308(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 308);
	// cmpw cr6,r8,r10
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r10.s32, xer);
	// blt cr6,0x8215596c
	if (cr6.getLT()) goto loc_8215596C;
loc_821559A0:
	// lwz r11,672(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 672);
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x821559dc
	if (!cr6.getGT()) goto loc_821559DC;
	// addi r11,r31,1488
	r11.s64 = r31.s64 + 1488;
loc_821559B4:
	// addi r9,r11,-812
	ctx.r9.s64 = r11.s64 + -812;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lwz r8,0(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// lwz r9,4(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// lwz r9,672(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 672);
	// cmpw cr6,r10,r9
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, xer);
	// blt cr6,0x821559b4
	if (cr6.getLT()) goto loc_821559B4;
loc_821559DC:
	// lwz r11,1620(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// addi r10,r31,1488
	ctx.r10.s64 = r31.s64 + 1488;
	// addi r9,r31,1128
	ctx.r9.s64 = r31.s64 + 1128;
	// lwz r8,672(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 672);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r7,308(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 308);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r6,1616(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1616);
	// lwz r5,1612(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1612);
	// stb r25,796(r31)
	PPC_STORE_U8(r31.u32 + 796, r25.u8);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x823bba28
	sub_823BBA28(ctx, base);
loc_82155A0C:
	// lbz r11,798(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 798);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82155c2c
	if (cr6.getEQ()) goto loc_82155C2C;
	// lwz r11,1124(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1124);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// rlwinm r26,r10,27,31,31
	r26.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// ble cr6,0x82155c10
	if (!cr6.getGT()) goto loc_82155C10;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// addi r5,r31,804
	ctx.r5.s64 = r31.s64 + 804;
	// li r4,3
	ctx.r4.s64 = 3;
	// lis r27,2
	r27.s64 = 131072;
	// li r29,2
	r29.s64 = 2;
	// lis r28,1
	r28.s64 = 65536;
loc_82155A50:
	// lwz r11,1124(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1124);
	// add r10,r6,r11
	ctx.r10.u64 = ctx.r6.u64 + r11.u64;
	// lbz r11,8(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 8);
	// rlwinm r9,r11,0,30,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82155b30
	if (cr6.getEQ()) goto loc_82155B30;
	// rlwinm r11,r11,0,28,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82155b30
	if (cr6.getEQ()) goto loc_82155B30;
	// lhz r11,14(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 14);
	// cmplwi cr6,r11,12
	cr6.compare<uint32_t>(r11.u32, 12, xer);
	// bne cr6,0x82155b30
	if (!cr6.getEQ()) goto loc_82155B30;
	// lwz r9,44(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// lwz r8,0(r5)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// mr r11,r30
	r11.u64 = r30.u64;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82155ac4
	if (!cr6.getGT()) goto loc_82155AC4;
	// addi r10,r31,48
	ctx.r10.s64 = r31.s64 + 48;
loc_82155A9C:
	// lwz r24,0(r10)
	r24.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r24,r8
	cr6.compare<int32_t>(r24.s32, ctx.r8.s32, xer);
	// beq cr6,0x82155ac0
	if (cr6.getEQ()) goto loc_82155AC0;
	// lwz r24,44(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r11,r24
	cr6.compare<int32_t>(r11.s32, r24.s32, xer);
	// blt cr6,0x82155a9c
	if (cr6.getLT()) goto loc_82155A9C;
	// b 0x82155ac4
	goto loc_82155AC4;
loc_82155AC0:
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
loc_82155AC4:
	// clrlwi r11,r7,24
	r11.u64 = ctx.r7.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82155b30
	if (!cr6.getEQ()) goto loc_82155B30;
	// cmpwi cr6,r9,20
	cr6.compare<int32_t>(ctx.r9.s32, 20, xer);
	// bge cr6,0x82155b30
	if (!cr6.getLT()) goto loc_82155B30;
	// addi r11,r9,12
	r11.s64 = ctx.r9.s64 + 12;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r8,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, ctx.r8.u32);
	// lwz r10,1124(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1124);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// add r10,r6,r10
	ctx.r10.u64 = ctx.r6.u64 + ctx.r10.u64;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,16(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stwx r10,r9,r31
	PPC_STORE_U32(ctx.r9.u32 + r31.u32, ctx.r10.u32);
	// lwz r10,44(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lbz r11,8(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 8);
	// add r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 + r31.u64;
	// stb r11,208(r10)
	PPC_STORE_U8(ctx.r10.u32 + 208, r11.u8);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// addi r11,r11,57
	r11.s64 = r11.s64 + 57;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r4,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, ctx.r4.u32);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r11.u32);
loc_82155B30:
	// lwz r11,1124(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1124);
	// add r7,r6,r11
	ctx.r7.u64 = ctx.r6.u64 + r11.u64;
	// lbz r11,8(r7)
	r11.u64 = PPC_LOAD_U8(ctx.r7.u32 + 8);
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82155bf4
	if (cr6.getEQ()) goto loc_82155BF4;
	// lwz r8,44(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// mr r11,r30
	r11.u64 = r30.u64;
	// lwz r9,0(r5)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82155bf4
	if (!cr6.getGT()) goto loc_82155BF4;
	// addi r10,r31,48
	ctx.r10.s64 = r31.s64 + 48;
loc_82155B60:
	// lwz r24,0(r10)
	r24.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r24,r9
	cr6.compare<int32_t>(r24.s32, ctx.r9.s32, xer);
	// beq cr6,0x82155b84
	if (cr6.getEQ()) goto loc_82155B84;
	// lwz r24,44(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r11,r24
	cr6.compare<int32_t>(r11.s32, r24.s32, xer);
	// blt cr6,0x82155b60
	if (cr6.getLT()) goto loc_82155B60;
	// b 0x82155bf4
	goto loc_82155BF4;
loc_82155B84:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82155bf4
	if (cr6.getLT()) goto loc_82155BF4;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// bge cr6,0x82155bf4
	if (!cr6.getLT()) goto loc_82155BF4;
	// addi r11,r11,57
	r11.s64 = r11.s64 + 57;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r9,r31
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x82155bf4
	if (!cr6.getEQ()) goto loc_82155BF4;
	// lwz r11,24(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 24);
	// lwz r10,28(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 28);
	// lhz r8,22(r7)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r7.u32 + 22);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bge cr6,0x82155bc0
	if (!cr6.getLT()) goto loc_82155BC0;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82155BC0:
	// cmpwi cr6,r8,200
	cr6.compare<int32_t>(ctx.r8.s32, 200, xer);
	// bgt cr6,0x82155bd8
	if (cr6.getGT()) goto loc_82155BD8;
	// cmplw cr6,r11,r27
	cr6.compare<uint32_t>(r11.u32, r27.u32, xer);
	// blt cr6,0x82155bd8
	if (cr6.getLT()) goto loc_82155BD8;
	// stwx r29,r9,r31
	PPC_STORE_U32(ctx.r9.u32 + r31.u32, r29.u32);
	// b 0x82155bf4
	goto loc_82155BF4;
loc_82155BD8:
	// cmpwi cr6,r8,300
	cr6.compare<int32_t>(ctx.r8.s32, 300, xer);
	// bgt cr6,0x82155bf0
	if (cr6.getGT()) goto loc_82155BF0;
	// cmplw cr6,r11,r28
	cr6.compare<uint32_t>(r11.u32, r28.u32, xer);
	// blt cr6,0x82155bf0
	if (cr6.getLT()) goto loc_82155BF0;
	// stwx r25,r9,r31
	PPC_STORE_U32(ctx.r9.u32 + r31.u32, r25.u32);
	// b 0x82155bf4
	goto loc_82155BF4;
loc_82155BF0:
	// stwx r30,r9,r31
	PPC_STORE_U32(ctx.r9.u32 + r31.u32, r30.u32);
loc_82155BF4:
	// lwz r11,1124(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1124);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// addi r5,r5,4
	ctx.r5.s64 = ctx.r5.s64 + 4;
	// addi r6,r6,24
	ctx.r6.s64 = ctx.r6.s64 + 24;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// blt cr6,0x82155a50
	if (cr6.getLT()) goto loc_82155A50;
loc_82155C10:
	// clrlwi r11,r26,24
	r11.u64 = r26.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82155c2c
	if (cr6.getEQ()) goto loc_82155C2C;
	// lwz r3,1124(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1124);
	// stb r30,798(r31)
	PPC_STORE_U8(r31.u32 + 798, r30.u8);
	// bl 0x823bc6a8
	sub_823BC6A8(ctx, base);
	// stw r30,1124(r31)
	PPC_STORE_U32(r31.u32 + 1124, r30.u32);
loc_82155C2C:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_82155C38"))) PPC_WEAK_FUNC(sub_82155C38);
PPC_FUNC_IMPL(__imp__sub_82155C38) {
	PPC_FUNC_PROLOGUE();
	// lwz r3,44(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 44);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155C40"))) PPC_WEAK_FUNC(sub_82155C40);
PPC_FUNC_IMPL(__imp__sub_82155C40) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// addi r11,r4,12
	r11.s64 = ctx.r4.s64 + 12;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,36(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// lwzx r4,r11,r3
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82155C60"))) PPC_WEAK_FUNC(sub_82155C60);
PPC_FUNC_IMPL(__imp__sub_82155C60) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// addi r11,r4,12
	r11.s64 = ctx.r4.s64 + 12;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,40(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 40);
	// lwzx r4,r11,r3
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82155C80"))) PPC_WEAK_FUNC(sub_82155C80);
PPC_FUNC_IMPL(__imp__sub_82155C80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// addi r11,r4,12
	r11.s64 = ctx.r4.s64 + 12;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,44(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 44);
	// lwzx r4,r11,r3
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82155CA0"))) PPC_WEAK_FUNC(sub_82155CA0);
PPC_FUNC_IMPL(__imp__sub_82155CA0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r11,r4,12
	r11.s64 = ctx.r4.s64 + 12;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r5,4096
	ctx.r5.s64 = 268435456;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// ori r5,r5,2
	ctx.r5.u64 = ctx.r5.u64 | 2;
	// lwzx r29,r11,r30
	r29.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// lwz r10,20(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lis r5,4096
	ctx.r5.s64 = 268435456;
	// rlwinm r10,r11,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0xFFFFFF;
	// rlwinm r9,r11,16,16,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// rlwinm r8,r11,8,24,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFF;
	// stb r11,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r11.u8);
	// li r6,0
	ctx.r6.s64 = 0;
	// ori r5,r5,3
	ctx.r5.u64 = ctx.r5.u64 | 3;
	// stb r10,1(r31)
	PPC_STORE_U8(r31.u32 + 1, ctx.r10.u8);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r9,2(r31)
	PPC_STORE_U8(r31.u32 + 2, ctx.r9.u8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stb r8,3(r31)
	PPC_STORE_U8(r31.u32 + 3, ctx.r8.u8);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lis r5,4096
	ctx.r5.s64 = 268435456;
	// rlwinm r10,r11,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0xFFFFFF;
	// rlwinm r9,r11,16,16,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// rlwinm r8,r11,8,24,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFF;
	// stb r11,4(r31)
	PPC_STORE_U8(r31.u32 + 4, r11.u8);
	// li r6,0
	ctx.r6.s64 = 0;
	// ori r5,r5,4
	ctx.r5.u64 = ctx.r5.u64 | 4;
	// stb r10,5(r31)
	PPC_STORE_U8(r31.u32 + 5, ctx.r10.u8);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r9,6(r31)
	PPC_STORE_U8(r31.u32 + 6, ctx.r9.u8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stb r8,7(r31)
	PPC_STORE_U8(r31.u32 + 7, ctx.r8.u8);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lis r5,4096
	ctx.r5.s64 = 268435456;
	// rlwinm r10,r11,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0xFFFFFF;
	// rlwinm r9,r11,16,16,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// rlwinm r8,r11,8,24,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFF;
	// stb r11,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r11.u8);
	// li r6,0
	ctx.r6.s64 = 0;
	// ori r5,r5,5
	ctx.r5.u64 = ctx.r5.u64 | 5;
	// stb r10,9(r31)
	PPC_STORE_U8(r31.u32 + 9, ctx.r10.u8);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r9,10(r31)
	PPC_STORE_U8(r31.u32 + 10, ctx.r9.u8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stb r8,11(r31)
	PPC_STORE_U8(r31.u32 + 11, ctx.r8.u8);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r11,r3,24,8,31
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 24) & 0xFFFFFF;
	// rlwinm r10,r3,16,16,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 16) & 0xFFFF;
	// stb r3,12(r31)
	PPC_STORE_U8(r31.u32 + 12, ctx.r3.u8);
	// rlwinm r8,r3,8,24,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 8) & 0xFF;
	// stb r11,13(r31)
	PPC_STORE_U8(r31.u32 + 13, r11.u8);
	// stb r10,14(r31)
	PPC_STORE_U8(r31.u32 + 14, ctx.r10.u8);
	// stb r8,15(r31)
	PPC_STORE_U8(r31.u32 + 15, ctx.r8.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82155DD0"))) PPC_WEAK_FUNC(sub_82155DD0);
PPC_FUNC_IMPL(__imp__sub_82155DD0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r4,32
	r11.s64 = ctx.r4.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r3
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155DE0"))) PPC_WEAK_FUNC(sub_82155DE0);
PPC_FUNC_IMPL(__imp__sub_82155DE0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r10,r11,-29584
	ctx.r10.s64 = r11.s64 + -29584;
	// li r11,0
	r11.s64 = 0;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stb r11,17(r3)
	PPC_STORE_U8(ctx.r3.u32 + 17, r11.u8);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155E00"))) PPC_WEAK_FUNC(sub_82155E00);
PPC_FUNC_IMPL(__imp__sub_82155E00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-29584
	r11.s64 = r11.s64 + -29584;
	// lbz r10,17(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 17);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x82155e44
	if (cr6.getEQ()) goto loc_82155E44;
	// li r30,0
	r30.s64 = 0;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// stb r30,17(r31)
	PPC_STORE_U8(r31.u32 + 17, r30.u8);
	// bl 0x823bc6a8
	sub_823BC6A8(ctx, base);
	// stw r30,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r30.u32);
loc_82155E44:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155E60"))) PPC_WEAK_FUNC(sub_82155E60);
PPC_FUNC_IMPL(__imp__sub_82155E60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lbz r11,17(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 17);
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82155e9c
	if (cr6.getEQ()) goto loc_82155E9C;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// stb r30,17(r31)
	PPC_STORE_U8(r31.u32 + 17, r30.u8);
	// bl 0x823bc6a8
	sub_823BC6A8(ctx, base);
	// stw r30,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r30.u32);
loc_82155E9C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155EB8"))) PPC_WEAK_FUNC(sub_82155EB8);
PPC_FUNC_IMPL(__imp__sub_82155EB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,17(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 17);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82155f8c
	if (cr6.getEQ()) goto loc_82155F8C;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// li r30,0
	r30.s64 = 0;
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// rlwinm r7,r11,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// ble cr6,0x82155f74
	if (!cr6.getGT()) goto loc_82155F74;
	// addi r10,r3,8
	ctx.r10.s64 = ctx.r3.s64 + 8;
	// li r8,1
	ctx.r8.s64 = 1;
loc_82155F08:
	// lbz r11,0(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// rlwinm r6,r11,0,30,30
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82155f5c
	if (cr6.getEQ()) goto loc_82155F5C;
	// rlwinm r11,r11,0,28,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82155f5c
	if (cr6.getEQ()) goto loc_82155F5C;
	// lhz r11,6(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 6);
	// cmplwi cr6,r11,12
	cr6.compare<uint32_t>(r11.u32, 12, xer);
	// bne cr6,0x82155f5c
	if (!cr6.getEQ()) goto loc_82155F5C;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82155f5c
	if (!cr6.getEQ()) goto loc_82155F5C;
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r6,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r6.u32);
	// lwz r6,4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r6,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r6.u32);
	// lbz r11,8(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 8);
	// stw r8,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r8.u32);
	// stb r11,16(r31)
	PPC_STORE_U8(r31.u32 + 16, r11.u8);
loc_82155F5C:
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 24;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r9,r11
	cr6.compare<uint32_t>(ctx.r9.u32, r11.u32, xer);
	// blt cr6,0x82155f08
	if (cr6.getLT()) goto loc_82155F08;
loc_82155F74:
	// clrlwi r11,r7,24
	r11.u64 = ctx.r7.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82155f8c
	if (cr6.getEQ()) goto loc_82155F8C;
	// stb r30,17(r31)
	PPC_STORE_U8(r31.u32 + 17, r30.u8);
	// bl 0x823bc6a8
	sub_823BC6A8(ctx, base);
	// stw r30,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r30.u32);
loc_82155F8C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82155FA8"))) PPC_WEAK_FUNC(sub_82155FA8);
PPC_FUNC_IMPL(__imp__sub_82155FA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x823ba7b8
	sub_823BA7B8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r6,64
	ctx.r6.s64 = 64;
	// addi r10,r11,-29728
	ctx.r10.s64 = r11.s64 + -29728;
	// li r11,0
	r11.s64 = 0;
	// addi r8,r31,1488
	ctx.r8.s64 = r31.s64 + 1488;
	// addi r9,r31,336
	ctx.r9.s64 = r31.s64 + 336;
	// addi r7,r31,1360
	ctx.r7.s64 = r31.s64 + 1360;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// lis r10,0
	ctx.r10.s64 = 0;
	// stb r11,312(r31)
	PPC_STORE_U8(r31.u32 + 312, r11.u8);
	// ori r10,r10,65535
	ctx.r10.u64 = ctx.r10.u64 | 65535;
	// stw r11,316(r31)
	PPC_STORE_U32(r31.u32 + 316, r11.u32);
	// stw r11,320(r31)
	PPC_STORE_U32(r31.u32 + 320, r11.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stb r11,324(r31)
	PPC_STORE_U8(r31.u32 + 324, r11.u8);
	// mr r4,r10
	ctx.r4.u64 = ctx.r10.u64;
	// stw r6,328(r31)
	PPC_STORE_U32(r31.u32 + 328, ctx.r6.u32);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// stb r11,332(r31)
	PPC_STORE_U8(r31.u32 + 332, r11.u8);
	// stb r11,333(r31)
	PPC_STORE_U8(r31.u32 + 333, r11.u8);
	// li r6,-1
	ctx.r6.s64 = -1;
	// stb r11,334(r31)
	PPC_STORE_U8(r31.u32 + 334, r11.u8);
	// stb r11,2000(r31)
	PPC_STORE_U8(r31.u32 + 2000, r11.u8);
	// stw r5,2004(r31)
	PPC_STORE_U32(r31.u32 + 2004, ctx.r5.u32);
	// stb r11,2008(r31)
	PPC_STORE_U8(r31.u32 + 2008, r11.u8);
	// stw r4,2012(r31)
	PPC_STORE_U32(r31.u32 + 2012, ctx.r4.u32);
loc_82156028:
	// std r11,0(r9)
	PPC_STORE_U64(ctx.r9.u32 + 0, r11.u64);
	// addi r9,r9,8
	ctx.r9.s64 = ctx.r9.s64 + 8;
	// stbx r11,r7,r10
	PPC_STORE_U8(ctx.r7.u32 + ctx.r10.u32, r11.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r6,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r6.u32);
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// cmpwi cr6,r10,128
	cr6.compare<int32_t>(ctx.r10.s32, 128, xer);
	// blt cr6,0x82156028
	if (cr6.getLT()) goto loc_82156028;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r11,333(r31)
	PPC_STORE_U8(r31.u32 + 333, r11.u8);
	// stb r11,334(r31)
	PPC_STORE_U8(r31.u32 + 334, r11.u8);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82156068"))) PPC_WEAK_FUNC(sub_82156068);
PPC_FUNC_IMPL(__imp__sub_82156068) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-29728
	r11.s64 = r11.s64 + -29728;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x823ba900
	sub_823BA900(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821560ac
	if (cr6.getEQ()) goto loc_821560AC;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_821560AC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821560C8"))) PPC_WEAK_FUNC(sub_821560C8);
PPC_FUNC_IMPL(__imp__sub_821560C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r11,r11,-29680
	r11.s64 = r11.s64 + -29680;
	// lbz r10,798(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 798);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x82156108
	if (cr6.getEQ()) goto loc_82156108;
	// li r29,0
	r29.s64 = 0;
	// lwz r3,1124(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1124);
	// stb r29,798(r31)
	PPC_STORE_U8(r31.u32 + 798, r29.u8);
	// bl 0x823bc6a8
	sub_823BC6A8(ctx, base);
	// stw r29,1124(r31)
	PPC_STORE_U32(r31.u32 + 1124, r29.u32);
loc_82156108:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823bc2c8
	sub_823BC2C8(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82156128
	if (cr6.getEQ()) goto loc_82156128;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82156128:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82156130"))) PPC_WEAK_FUNC(sub_82156130);
PPC_FUNC_IMPL(__imp__sub_82156130) {
	PPC_FUNC_PROLOGUE();
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// lis r4,4096
	ctx.r4.s64 = 268435456;
	// ori r4,r4,1
	ctx.r4.u64 = ctx.r4.u64 | 1;
	// b 0x82155560
	sub_82155560(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82156140"))) PPC_WEAK_FUNC(sub_82156140);
PPC_FUNC_IMPL(__imp__sub_82156140) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// clrlwi r11,r4,24
	r11.u64 = ctx.r4.u32 & 0xFF;
	// lis r4,0
	ctx.r4.s64 = 0;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// ori r4,r4,32778
	ctx.r4.u64 = ctx.r4.u64 | 32778;
	// rlwinm r5,r11,27,31,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// b 0x821555e8
	sub_821555E8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82156158"))) PPC_WEAK_FUNC(sub_82156158);
PPC_FUNC_IMPL(__imp__sub_82156158) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// bl 0x821544c0
	sub_821544C0(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// bl 0x821555e8
	sub_821555E8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82156190"))) PPC_WEAK_FUNC(sub_82156190);
PPC_FUNC_IMPL(__imp__sub_82156190) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// bl 0x82154558
	sub_82154558(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// bl 0x821555e8
	sub_821555E8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821561C8"))) PPC_WEAK_FUNC(sub_821561C8);
PPC_FUNC_IMPL(__imp__sub_821561C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// bl 0x82154640
	sub_82154640(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// bl 0x821555e8
	sub_821555E8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82156200"))) PPC_WEAK_FUNC(sub_82156200);
PPC_FUNC_IMPL(__imp__sub_82156200) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r8,r4
	ctx.r8.u64 = ctx.r4.u64;
	// lis r4,0
	ctx.r4.s64 = 0;
	// mr r7,r5
	ctx.r7.u64 = ctx.r5.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// ori r4,r4,32779
	ctx.r4.u64 = ctx.r4.u64 | 32779;
	// bl 0x821555e8
	sub_821555E8(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stw r8,1612(r3)
	PPC_STORE_U32(ctx.r3.u32 + 1612, ctx.r8.u32);
	// stw r7,1616(r3)
	PPC_STORE_U32(ctx.r3.u32 + 1616, ctx.r7.u32);
	// stw r6,1620(r3)
	PPC_STORE_U32(ctx.r3.u32 + 1620, ctx.r6.u32);
	// stb r11,1608(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1608, r11.u8);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82156248"))) PPC_WEAK_FUNC(sub_82156248);
PPC_FUNC_IMPL(__imp__sub_82156248) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// addi r11,r11,-29584
	r11.s64 = r11.s64 + -29584;
	// lbz r10,17(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 17);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x82156288
	if (cr6.getEQ()) goto loc_82156288;
	// li r30,0
	r30.s64 = 0;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// stb r30,17(r31)
	PPC_STORE_U8(r31.u32 + 17, r30.u8);
	// bl 0x823bc6a8
	sub_823BC6A8(ctx, base);
	// stw r30,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r30.u32);
loc_82156288:
	// clrlwi r11,r29,31
	r11.u64 = r29.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821562a0
	if (cr6.getEQ()) goto loc_821562A0;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_821562A0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_821562A8"))) PPC_WEAK_FUNC(sub_821562A8);
PPC_FUNC_IMPL(__imp__sub_821562A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821562F8"))) PPC_WEAK_FUNC(sub_821562F8);
PPC_FUNC_IMPL(__imp__sub_821562F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// stw r31,228(r1)
	PPC_STORE_U32(ctx.r1.u32 + 228, r31.u32);
	// bl 0x821778c0
	sub_821778C0(ctx, base);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r30,-32254
	r30.s64 = -2113798144;
	// addi r7,r10,-29572
	ctx.r7.s64 = ctx.r10.s64 + -29572;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r11,r31,24
	r11.s64 = r31.s64 + 24;
	// addi r3,r10,-30724
	ctx.r3.s64 = ctx.r10.s64 + -30724;
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r7,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r7.u32);
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// li r4,4
	ctx.r4.s64 = 4;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r26,r30,-30240
	r26.s64 = r30.s64 + -30240;
	// stw r3,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r3.u32);
	// addi r30,r11,16
	r30.s64 = r11.s64 + 16;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// li r6,7
	ctx.r6.s64 = 7;
	// addi r27,r7,-29968
	r27.s64 = ctx.r7.s64 + -29968;
	// stw r4,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r4.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r5,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r5.u32);
	// addi r9,r31,60
	ctx.r9.s64 = r31.s64 + 60;
	// li r23,-128
	r23.s64 = -128;
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// li r22,127
	r22.s64 = 127;
	// stw r6,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r6.u32);
	// li r24,8
	r24.s64 = 8;
	// li r25,2
	r25.s64 = 2;
	// stw r7,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r7.u32);
	// addi r29,r9,16
	r29.s64 = ctx.r9.s64 + 16;
	// stb r23,28(r11)
	PPC_STORE_U8(r11.u32 + 28, r23.u8);
	// addi r8,r31,88
	ctx.r8.s64 = r31.s64 + 88;
	// stw r27,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r27.u32);
	// mr r23,r10
	r23.u64 = ctx.r10.u64;
	// stb r22,29(r11)
	PPC_STORE_U8(r11.u32 + 29, r22.u8);
	// addi r28,r8,16
	r28.s64 = ctx.r8.s64 + 16;
	// stw r24,32(r11)
	PPC_STORE_U32(r11.u32 + 32, r24.u32);
	// li r27,32
	r27.s64 = 32;
	// stw r5,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r5.u32);
	// stb r7,24(r11)
	PPC_STORE_U8(r11.u32 + 24, ctx.r7.u8);
	// addi r11,r31,116
	r11.s64 = r31.s64 + 116;
	// stw r4,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r4.u32);
	// stw r10,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, ctx.r10.u32);
	// stw r25,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, r25.u32);
	// stw r3,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r3.u32);
	// stw r6,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r6.u32);
	// stw r7,8(r29)
	PPC_STORE_U32(r29.u32 + 8, ctx.r7.u32);
	// stw r26,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r26.u32);
	// lis r29,-32768
	r29.s64 = -2147483648;
	// stw r7,20(r9)
	PPC_STORE_U32(ctx.r9.u32 + 20, ctx.r7.u32);
	// li r26,3
	r26.s64 = 3;
	// stb r7,24(r9)
	PPC_STORE_U8(ctx.r9.u32 + 24, ctx.r7.u8);
	// addi r9,r31,160
	ctx.r9.s64 = r31.s64 + 160;
	// stw r4,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r4.u32);
	// stw r10,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, ctx.r10.u32);
	// stw r5,12(r8)
	PPC_STORE_U32(ctx.r8.u32 + 12, ctx.r5.u32);
	// stw r3,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r3.u32);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// addi r9,r31,196
	ctx.r9.s64 = r31.s64 + 196;
	// stw r6,4(r28)
	PPC_STORE_U32(r28.u32 + 4, ctx.r6.u32);
	// stw r7,8(r28)
	PPC_STORE_U32(r28.u32 + 8, ctx.r7.u32);
	// stw r7,20(r8)
	PPC_STORE_U32(ctx.r8.u32 + 20, ctx.r7.u32);
	// stb r7,24(r8)
	PPC_STORE_U8(ctx.r8.u32 + 24, ctx.r7.u8);
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r9,r9,-30240
	ctx.r9.s64 = ctx.r9.s64 + -30240;
	// stw r9,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r9.u32);
	// stw r9,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r9.u32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r9,r9,-30216
	ctx.r9.s64 = ctx.r9.s64 + -30216;
	// stw r9,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r9.u32);
	// lis r9,32767
	ctx.r9.s64 = 2147418112;
	// ori r28,r9,65535
	r28.u64 = ctx.r9.u64 | 65535;
	// mr r21,r10
	r21.u64 = ctx.r10.u64;
	// lwz r31,88(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// stw r3,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r3.u32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// stw r4,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r4.u32);
	// stw r5,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r5.u32);
	// li r22,255
	r22.s64 = 255;
	// addi r9,r9,-30228
	ctx.r9.s64 = ctx.r9.s64 + -30228;
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// addi r3,r8,16
	ctx.r3.s64 = ctx.r8.s64 + 16;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r7,r10,16
	ctx.r7.s64 = ctx.r10.s64 + 16;
	// lwz r30,92(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r31,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r31.u32);
	// stw r6,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r6.u32);
	// stw r9,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r9.u32);
	// lwz r30,96(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stb r9,28(r11)
	PPC_STORE_U8(r11.u32 + 28, ctx.r9.u8);
	// stw r29,32(r11)
	PPC_STORE_U32(r11.u32 + 32, r29.u32);
	// stw r28,36(r11)
	PPC_STORE_U32(r11.u32 + 36, r28.u32);
	// stw r27,40(r11)
	PPC_STORE_U32(r11.u32 + 40, r27.u32);
	// stw r26,20(r11)
	PPC_STORE_U32(r11.u32 + 20, r26.u32);
	// stw r9,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r9.u32);
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// stw r4,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r4.u32);
	// stw r23,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r23.u32);
	// stw r5,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r5.u32);
	// stw r31,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r31.u32);
	// stw r6,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r6.u32);
	// stw r9,8(r7)
	PPC_STORE_U32(ctx.r7.u32 + 8, ctx.r9.u32);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stb r9,28(r10)
	PPC_STORE_U8(ctx.r10.u32 + 28, ctx.r9.u8);
	// stb r22,29(r10)
	PPC_STORE_U8(ctx.r10.u32 + 29, r22.u8);
	// stw r24,32(r10)
	PPC_STORE_U32(ctx.r10.u32 + 32, r24.u32);
	// stw r25,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, r25.u32);
	// stb r9,24(r10)
	PPC_STORE_U8(ctx.r10.u32 + 24, ctx.r9.u8);
	// stw r4,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r4.u32);
	// stw r21,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, r21.u32);
	// stw r5,12(r8)
	PPC_STORE_U32(ctx.r8.u32 + 12, ctx.r5.u32);
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r31.u32);
	// stw r6,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r6.u32);
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// lwz r3,228(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// stw r9,20(r8)
	PPC_STORE_U32(ctx.r8.u32 + 20, ctx.r9.u32);
	// stb r9,24(r8)
	PPC_STORE_U8(ctx.r8.u32 + 24, ctx.r9.u8);
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_82156518"))) PPC_WEAK_FUNC(sub_82156518);
PPC_FUNC_IMPL(__imp__sub_82156518) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// addi r29,r31,24
	r29.s64 = r31.s64 + 24;
	// li r11,7
	r11.s64 = 7;
	// li r3,7
	ctx.r3.s64 = 7;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,60
	ctx.r4.s64 = r31.s64 + 60;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,88
	ctx.r4.s64 = r31.s64 + 88;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// bl 0x82172258
	sub_82172258(ctx, base);
	// rlwinm r11,r3,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r29,r31,116
	r29.s64 = r31.s64 + 116;
	// add r11,r3,r11
	r11.u64 = ctx.r3.u64 + r11.u64;
	// li r10,-1
	ctx.r10.s64 = -1;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r3,r11,1
	ctx.r3.s64 = r11.s64 + 1;
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stw r10,24(r29)
	PPC_STORE_U32(r29.u32 + 24, ctx.r10.u32);
	// stw r10,32(r29)
	PPC_STORE_U32(r29.u32 + 32, ctx.r10.u32);
	// stw r11,36(r29)
	PPC_STORE_U32(r29.u32 + 36, r11.u32);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,40(r29)
	PPC_STORE_U32(r29.u32 + 40, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,160
	r29.s64 = r31.s64 + 160;
	// li r11,255
	r11.s64 = 255;
	// li r3,255
	ctx.r3.s64 = 255;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,196
	ctx.r4.s64 = r31.s64 + 196;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82156608"))) PPC_WEAK_FUNC(sub_82156608);
PPC_FUNC_IMPL(__imp__sub_82156608) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r9,r11,-29572
	ctx.r9.s64 = r11.s64 + -29572;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30252
	r11.s64 = r11.s64 + -30252;
	// addi r10,r10,-30724
	ctx.r10.s64 = ctx.r10.s64 + -30724;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// stw r11,196(r31)
	PPC_STORE_U32(r31.u32 + 196, r11.u32);
	// stw r10,212(r31)
	PPC_STORE_U32(r31.u32 + 212, ctx.r10.u32);
	// stw r11,160(r31)
	PPC_STORE_U32(r31.u32 + 160, r11.u32);
	// stw r10,176(r31)
	PPC_STORE_U32(r31.u32 + 176, ctx.r10.u32);
	// stw r11,116(r31)
	PPC_STORE_U32(r31.u32 + 116, r11.u32);
	// stw r10,132(r31)
	PPC_STORE_U32(r31.u32 + 132, ctx.r10.u32);
	// stw r11,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r11.u32);
	// stw r10,104(r31)
	PPC_STORE_U32(r31.u32 + 104, ctx.r10.u32);
	// stw r11,60(r31)
	PPC_STORE_U32(r31.u32 + 60, r11.u32);
	// stw r10,76(r31)
	PPC_STORE_U32(r31.u32 + 76, ctx.r10.u32);
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
	// stw r10,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r10.u32);
	// bl 0x821778e8
	sub_821778E8(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215668c
	if (cr6.getEQ()) goto loc_8215668C;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8215668C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821566A8"))) PPC_WEAK_FUNC(sub_821566A8);
PPC_FUNC_IMPL(__imp__sub_821566A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82177a68
	sub_82177A68(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r31,16
	r29.s64 = r31.s64 + 16;
	// addi r11,r11,-29536
	r11.s64 = r11.s64 + -29536;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r31,68
	r28.s64 = r31.s64 + 68;
	// addi r30,r11,-29564
	r30.s64 = r11.s64 + -29564;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r29,r31,120
	r29.s64 = r31.s64 + 120;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r31,172
	r28.s64 = r31.s64 + 172;
	// addi r11,r11,-29564
	r11.s64 = r11.s64 + -29564;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r27,0
	r27.s64 = 0;
	// addi r11,r11,-30192
	r11.s64 = r11.s64 + -30192;
	// addi r29,r31,240
	r29.s64 = r31.s64 + 240;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r27,224(r31)
	PPC_STORE_U32(r31.u32 + 224, r27.u32);
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// stb r27,232(r31)
	PPC_STORE_U8(r31.u32 + 232, r27.u8);
	// stw r11,228(r31)
	PPC_STORE_U32(r31.u32 + 228, r11.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r31,292
	r28.s64 = r31.s64 + 292;
	// addi r11,r11,-29564
	r11.s64 = r11.s64 + -29564;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r27,344(r31)
	PPC_STORE_U32(r31.u32 + 344, r27.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82156788"))) PPC_WEAK_FUNC(sub_82156788);
PPC_FUNC_IMPL(__imp__sub_82156788) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r11,r11,-29536
	r11.s64 = r11.s64 + -29536;
	// addi r3,r31,292
	ctx.r3.s64 = r31.s64 + 292;
	// addi r30,r10,-29564
	r30.s64 = ctx.r10.s64 + -29564;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r31,240
	ctx.r3.s64 = r31.s64 + 240;
	// addi r11,r11,-29564
	r11.s64 = r11.s64 + -29564;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r31,172
	ctx.r3.s64 = r31.s64 + 172;
	// addi r11,r11,-30192
	r11.s64 = r11.s64 + -30192;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r31,120
	ctx.r3.s64 = r31.s64 + 120;
	// addi r11,r11,-29564
	r11.s64 = r11.s64 + -29564;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,68
	ctx.r3.s64 = r31.s64 + 68;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,16
	ctx.r3.s64 = r31.s64 + 16;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82177a88
	sub_82177A88(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82156838"))) PPC_WEAK_FUNC(sub_82156838);
PPC_FUNC_IMPL(__imp__sub_82156838) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,16
	ctx.r3.s64 = r30.s64 + 16;
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,120
	ctx.r3.s64 = r30.s64 + 120;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82156898"))) PPC_WEAK_FUNC(sub_82156898);
PPC_FUNC_IMPL(__imp__sub_82156898) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// clrlwi r11,r4,24
	r11.u64 = ctx.r4.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stb r11,49(r3)
	PPC_STORE_U8(ctx.r3.u32 + 49, r11.u8);
	// stb r11,153(r3)
	PPC_STORE_U8(ctx.r3.u32 + 153, r11.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821568B0"))) PPC_WEAK_FUNC(sub_821568B0);
PPC_FUNC_IMPL(__imp__sub_821568B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,16
	ctx.r3.s64 = r30.s64 + 16;
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179e68
	sub_82179E68(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,120
	ctx.r3.s64 = r30.s64 + 120;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82156910"))) PPC_WEAK_FUNC(sub_82156910);
PPC_FUNC_IMPL(__imp__sub_82156910) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82156788
	sub_82156788(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82156948
	if (cr6.getEQ()) goto loc_82156948;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82156948:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82156960"))) PPC_WEAK_FUNC(sub_82156960);
PPC_FUNC_IMPL(__imp__sub_82156960) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed11c
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r31,228(r1)
	PPC_STORE_U32(ctx.r1.u32 + 228, r31.u32);
	// bl 0x821562f8
	sub_821562F8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r5,-32254
	ctx.r5.s64 = -2113798144;
	// addi r9,r11,-29492
	ctx.r9.s64 = r11.s64 + -29492;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r8,r31,224
	ctx.r8.s64 = r31.s64 + 224;
	// addi r6,r11,-30724
	ctx.r6.s64 = r11.s64 + -30724;
	// li r11,-1
	r11.s64 = -1;
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// li r29,4
	r29.s64 = 4;
	// addi r26,r5,-30240
	r26.s64 = ctx.r5.s64 + -30240;
	// li r27,1
	r27.s64 = 1;
	// stw r6,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r6.u32);
	// addi r5,r8,16
	ctx.r5.s64 = ctx.r8.s64 + 16;
	// stw r11,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, r11.u32);
	// addi r28,r9,-30240
	r28.s64 = ctx.r9.s64 + -30240;
	// li r30,7
	r30.s64 = 7;
	// stw r29,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r29.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r27,12(r8)
	PPC_STORE_U32(ctx.r8.u32 + 12, r27.u32);
	// addi r7,r31,252
	ctx.r7.s64 = r31.s64 + 252;
	// stw r6,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r6.u32);
	// addi r10,r31,280
	ctx.r10.s64 = r31.s64 + 280;
	// addi r4,r7,16
	ctx.r4.s64 = ctx.r7.s64 + 16;
	// stw r28,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r28.u32);
	// stw r30,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, r30.u32);
	// addi r3,r10,16
	ctx.r3.s64 = ctx.r10.s64 + 16;
	// stw r9,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r9.u32);
	// stw r9,20(r8)
	PPC_STORE_U32(ctx.r8.u32 + 20, ctx.r9.u32);
	// stb r9,24(r8)
	PPC_STORE_U8(ctx.r8.u32 + 24, ctx.r9.u8);
	// stw r28,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r28.u32);
	// li r8,3
	ctx.r8.s64 = 3;
	// stw r29,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, r29.u32);
	// stw r11,8(r7)
	PPC_STORE_U32(ctx.r7.u32 + 8, r11.u32);
	// stw r8,12(r7)
	PPC_STORE_U32(ctx.r7.u32 + 12, ctx.r8.u32);
	// li r8,255
	ctx.r8.s64 = 255;
	// stw r6,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r6.u32);
	// stw r30,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, r30.u32);
	// stw r9,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r9.u32);
	// stw r9,20(r7)
	PPC_STORE_U32(ctx.r7.u32 + 20, ctx.r9.u32);
	// stb r9,24(r7)
	PPC_STORE_U8(ctx.r7.u32 + 24, ctx.r9.u8);
	// stw r26,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r26.u32);
	// mr r26,r11
	r26.u64 = r11.u64;
	// stw r29,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r29.u32);
	// stw r11,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r11.u32);
	// stw r27,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, r27.u32);
	// stw r6,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r6.u32);
	// stw r30,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r30.u32);
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stb r8,29(r10)
	PPC_STORE_U8(ctx.r10.u32 + 29, ctx.r8.u8);
	// li r8,8
	ctx.r8.s64 = 8;
	// stb r9,28(r10)
	PPC_STORE_U8(ctx.r10.u32 + 28, ctx.r9.u8);
	// stb r9,24(r10)
	PPC_STORE_U8(ctx.r10.u32 + 24, ctx.r9.u8);
	// addi r9,r31,316
	ctx.r9.s64 = r31.s64 + 316;
	// stw r8,32(r10)
	PPC_STORE_U32(ctx.r10.u32 + 32, ctx.r8.u32);
	// li r8,2
	ctx.r8.s64 = 2;
	// stw r8,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, ctx.r8.u32);
	// addi r8,r31,352
	ctx.r8.s64 = r31.s64 + 352;
	// stw r8,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r8.u32);
	// addi r8,r31,388
	ctx.r8.s64 = r31.s64 + 388;
	// mr r31,r11
	r31.u64 = r11.u64;
	// stw r8,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r8.u32);
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// addi r8,r8,-30228
	ctx.r8.s64 = ctx.r8.s64 + -30228;
	// stw r8,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r8.u32);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// stw r8,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r8.u32);
	// addi r10,r10,-29968
	ctx.r10.s64 = ctx.r10.s64 + -29968;
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// addi r10,r9,16
	ctx.r10.s64 = ctx.r9.s64 + 16;
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// li r10,4
	ctx.r10.s64 = 4;
	// stw r10,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r10.u32);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r7,r10,16
	ctx.r7.s64 = ctx.r10.s64 + 16;
	// stw r11,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, r11.u32);
	// li r28,2
	r28.s64 = 2;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r3,7
	ctx.r3.s64 = 7;
	// lwz r4,96(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// li r11,0
	r11.s64 = 0;
	// lwz r30,100(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r29,8
	r29.s64 = 8;
	// lwz r8,92(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r24,-32768
	r24.s64 = -2147483648;
	// stw r28,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, r28.u32);
	// li r25,32
	r25.s64 = 32;
	// lwz r27,84(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r6,r8,16
	ctx.r6.s64 = ctx.r8.s64 + 16;
	// stw r5,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r5.u32);
	// li r23,3
	r23.s64 = 3;
	// stw r3,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r3.u32);
	// stw r11,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, r11.u32);
	// li r4,-128
	ctx.r4.s64 = -128;
	// stw r30,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r30.u32);
	// li r30,4
	r30.s64 = 4;
	// stw r29,32(r9)
	PPC_STORE_U32(ctx.r9.u32 + 32, r29.u32);
	// stb r11,24(r9)
	PPC_STORE_U8(ctx.r9.u32 + 24, r11.u8);
	// mr r22,r23
	r22.u64 = r23.u64;
	// stb r4,28(r9)
	PPC_STORE_U8(ctx.r9.u32 + 28, ctx.r4.u8);
	// li r4,127
	ctx.r4.s64 = 127;
	// stb r4,29(r9)
	PPC_STORE_U8(ctx.r9.u32 + 29, ctx.r4.u8);
	// li r4,1
	ctx.r4.s64 = 1;
	// stw r4,20(r9)
	PPC_STORE_U32(ctx.r9.u32 + 20, ctx.r4.u32);
	// stw r31,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r31.u32);
	// stw r30,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r30.u32);
	// stw r4,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r4.u32);
	// stw r5,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r5.u32);
	// stw r3,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r3.u32);
	// stw r11,8(r7)
	PPC_STORE_U32(ctx.r7.u32 + 8, r11.u32);
	// li r7,255
	ctx.r7.s64 = 255;
	// stw r29,32(r10)
	PPC_STORE_U32(ctx.r10.u32 + 32, r29.u32);
	// stw r28,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, r28.u32);
	// stw r27,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r27.u32);
	// stb r11,28(r10)
	PPC_STORE_U8(ctx.r10.u32 + 28, r11.u8);
	// stb r7,29(r10)
	PPC_STORE_U8(ctx.r10.u32 + 29, ctx.r7.u8);
	// stb r11,24(r10)
	PPC_STORE_U8(ctx.r10.u32 + 24, r11.u8);
	// stw r26,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, r26.u32);
	// stw r30,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r30.u32);
	// stw r4,12(r8)
	PPC_STORE_U32(ctx.r8.u32 + 12, ctx.r4.u32);
	// stw r5,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, ctx.r5.u32);
	// stw r3,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r3.u32);
	// stw r11,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, r11.u32);
	// lwz r31,228(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// stb r7,29(r8)
	PPC_STORE_U8(ctx.r8.u32 + 29, ctx.r7.u8);
	// li r7,-1
	ctx.r7.s64 = -1;
	// stw r29,32(r8)
	PPC_STORE_U32(ctx.r8.u32 + 32, r29.u32);
	// addi r10,r31,424
	ctx.r10.s64 = r31.s64 + 424;
	// stw r28,20(r8)
	PPC_STORE_U32(ctx.r8.u32 + 20, r28.u32);
	// addi r9,r31,468
	ctx.r9.s64 = r31.s64 + 468;
	// stw r27,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r27.u32);
	// addi r28,r10,16
	r28.s64 = ctx.r10.s64 + 16;
	// stb r11,28(r8)
	PPC_STORE_U8(ctx.r8.u32 + 28, r11.u8);
	// addi r26,r31,512
	r26.s64 = r31.s64 + 512;
	// stb r11,24(r8)
	PPC_STORE_U8(ctx.r8.u32 + 24, r11.u8);
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// stw r30,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r30.u32);
	// addi r27,r9,16
	r27.s64 = ctx.r9.s64 + 16;
	// addi r29,r8,-30216
	r29.s64 = ctx.r8.s64 + -30216;
	// stw r7,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r7.u32);
	// lis r8,32767
	ctx.r8.s64 = 2147418112;
	// stw r4,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r4.u32);
	// stw r5,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r5.u32);
	// ori r6,r8,65535
	ctx.r6.u64 = ctx.r8.u64 | 65535;
	// stw r3,4(r28)
	PPC_STORE_U32(r28.u32 + 4, ctx.r3.u32);
	// stw r11,8(r28)
	PPC_STORE_U32(r28.u32 + 8, r11.u32);
	// stw r29,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r29.u32);
	// addi r8,r26,24
	ctx.r8.s64 = r26.s64 + 24;
	// stb r11,28(r10)
	PPC_STORE_U8(ctx.r10.u32 + 28, r11.u8);
	// stw r24,32(r10)
	PPC_STORE_U32(ctx.r10.u32 + 32, r24.u32);
	// stw r6,36(r10)
	PPC_STORE_U32(ctx.r10.u32 + 36, ctx.r6.u32);
	// stw r25,40(r10)
	PPC_STORE_U32(ctx.r10.u32 + 40, r25.u32);
	// stw r23,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, r23.u32);
	// stw r11,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, r11.u32);
	// stw r29,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r29.u32);
	// stw r30,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r30.u32);
	// stw r7,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, ctx.r7.u32);
	// stw r4,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, ctx.r4.u32);
	// stw r5,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r5.u32);
	// stw r3,4(r27)
	PPC_STORE_U32(r27.u32 + 4, ctx.r3.u32);
	// stw r11,8(r27)
	PPC_STORE_U32(r27.u32 + 8, r11.u32);
	// stb r11,28(r9)
	PPC_STORE_U8(ctx.r9.u32 + 28, r11.u8);
	// stw r24,32(r9)
	PPC_STORE_U32(ctx.r9.u32 + 32, r24.u32);
	// stw r6,36(r9)
	PPC_STORE_U32(ctx.r9.u32 + 36, ctx.r6.u32);
	// stw r25,40(r9)
	PPC_STORE_U32(ctx.r9.u32 + 40, r25.u32);
	// stw r23,20(r9)
	PPC_STORE_U32(ctx.r9.u32 + 20, r23.u32);
	// stw r11,24(r9)
	PPC_STORE_U32(ctx.r9.u32 + 24, r11.u32);
	// stw r29,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r29.u32);
loc_82156C18:
	// stw r30,-20(r8)
	PPC_STORE_U32(ctx.r8.u32 + -20, r30.u32);
	// addi r22,r22,-1
	r22.s64 = r22.s64 + -1;
	// stw r7,-16(r8)
	PPC_STORE_U32(ctx.r8.u32 + -16, ctx.r7.u32);
	// stw r4,-12(r8)
	PPC_STORE_U32(ctx.r8.u32 + -12, ctx.r4.u32);
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// stw r5,-8(r8)
	PPC_STORE_U32(ctx.r8.u32 + -8, ctx.r5.u32);
	// stw r3,-4(r8)
	PPC_STORE_U32(ctx.r8.u32 + -4, ctx.r3.u32);
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// stb r11,4(r8)
	PPC_STORE_U8(ctx.r8.u32 + 4, r11.u8);
	// stw r24,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, r24.u32);
	// stw r6,12(r8)
	PPC_STORE_U32(ctx.r8.u32 + 12, ctx.r6.u32);
	// stw r25,16(r8)
	PPC_STORE_U32(ctx.r8.u32 + 16, r25.u32);
	// stw r23,-4(r8)
	PPC_STORE_U32(ctx.r8.u32 + -4, r23.u32);
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// addi r8,r8,44
	ctx.r8.s64 = ctx.r8.s64 + 44;
	// stw r29,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r29.u32);
	// addi r26,r26,44
	r26.s64 = r26.s64 + 44;
	// bge cr6,0x82156c18
	if (!cr6.getLT()) goto loc_82156C18;
	// addi r11,r31,724
	r11.s64 = r31.s64 + 724;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r9,r31,688
	ctx.r9.s64 = r31.s64 + 688;
	// lwz r28,84(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r4,1
	ctx.r4.s64 = 1;
	// li r26,255
	r26.s64 = 255;
	// li r29,8
	r29.s64 = 8;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// addi r11,r31,768
	r11.s64 = r31.s64 + 768;
	// li r31,7
	r31.s64 = 7;
	// stw r7,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, ctx.r7.u32);
	// li r27,2
	r27.s64 = 2;
	// stw r4,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, ctx.r4.u32);
	// mr r23,r7
	r23.u64 = ctx.r7.u64;
	// li r30,4
	r30.s64 = 4;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// mr r22,r6
	r22.u64 = ctx.r6.u64;
	// mr r21,r7
	r21.u64 = ctx.r7.u64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// li r11,4
	r11.s64 = 4;
	// stw r11,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// addi r8,r10,16
	ctx.r8.s64 = ctx.r10.s64 + 16;
	// lwz r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r7,r6,16
	ctx.r7.s64 = ctx.r6.s64 + 16;
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r5,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r5.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// stb r11,28(r9)
	PPC_STORE_U8(ctx.r9.u32 + 28, r11.u8);
	// stb r26,29(r9)
	PPC_STORE_U8(ctx.r9.u32 + 29, r26.u8);
	// stw r29,32(r9)
	PPC_STORE_U32(ctx.r9.u32 + 32, r29.u32);
	// stw r27,20(r9)
	PPC_STORE_U32(ctx.r9.u32 + 20, r27.u32);
	// stb r11,24(r9)
	PPC_STORE_U8(ctx.r9.u32 + 24, r11.u8);
	// stw r28,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r28.u32);
	// stw r30,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r30.u32);
	// stw r23,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r23.u32);
	// stw r4,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r4.u32);
	// stw r5,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r5.u32);
	// stw r31,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r31.u32);
	// stw r11,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, r11.u32);
	// stw r22,36(r10)
	PPC_STORE_U32(ctx.r10.u32 + 36, r22.u32);
	// li r22,3
	r22.s64 = 3;
	// lwz r9,88(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r24,32(r10)
	PPC_STORE_U32(ctx.r10.u32 + 32, r24.u32);
	// stw r25,40(r10)
	PPC_STORE_U32(ctx.r10.u32 + 40, r25.u32);
	// stb r11,28(r10)
	PPC_STORE_U8(ctx.r10.u32 + 28, r11.u8);
	// stw r22,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, r22.u32);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r11,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, r11.u32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// lwz r3,228(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// stw r30,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, r30.u32);
	// stw r21,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, r21.u32);
	// addi r9,r3,804
	ctx.r9.s64 = ctx.r3.s64 + 804;
	// stw r4,12(r6)
	PPC_STORE_U32(ctx.r6.u32 + 12, ctx.r4.u32);
	// addi r8,r3,840
	ctx.r8.s64 = ctx.r3.s64 + 840;
	// stw r5,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r5.u32);
	// stw r31,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, r31.u32);
	// addi r25,r8,16
	r25.s64 = ctx.r8.s64 + 16;
	// stw r11,8(r7)
	PPC_STORE_U32(ctx.r7.u32 + 8, r11.u32);
	// stb r11,28(r6)
	PPC_STORE_U8(ctx.r6.u32 + 28, r11.u8);
	// addi r7,r3,876
	ctx.r7.s64 = ctx.r3.s64 + 876;
	// stb r26,29(r6)
	PPC_STORE_U8(ctx.r6.u32 + 29, r26.u8);
	// stw r29,32(r6)
	PPC_STORE_U32(ctx.r6.u32 + 32, r29.u32);
	// addi r24,r7,16
	r24.s64 = ctx.r7.s64 + 16;
	// stw r27,20(r6)
	PPC_STORE_U32(ctx.r6.u32 + 20, r27.u32);
	// stb r11,24(r6)
	PPC_STORE_U8(ctx.r6.u32 + 24, r11.u8);
	// stw r28,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r28.u32);
	// addi r6,r9,16
	ctx.r6.s64 = ctx.r9.s64 + 16;
	// stw r30,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r30.u32);
	// stw r10,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, ctx.r10.u32);
	// stw r4,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, ctx.r4.u32);
	// stw r5,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, ctx.r5.u32);
	// stw r31,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, r31.u32);
	// stw r11,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, r11.u32);
	// addi r6,r3,976
	ctx.r6.s64 = ctx.r3.s64 + 976;
	// stw r27,20(r9)
	PPC_STORE_U32(ctx.r9.u32 + 20, r27.u32);
	// stw r28,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r28.u32);
	// stb r11,28(r9)
	PPC_STORE_U8(ctx.r9.u32 + 28, r11.u8);
	// stb r26,29(r9)
	PPC_STORE_U8(ctx.r9.u32 + 29, r26.u8);
	// stw r29,32(r9)
	PPC_STORE_U32(ctx.r9.u32 + 32, r29.u32);
	// stb r11,24(r9)
	PPC_STORE_U8(ctx.r9.u32 + 24, r11.u8);
	// addi r9,r3,912
	ctx.r9.s64 = ctx.r3.s64 + 912;
	// stw r30,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r30.u32);
	// stw r10,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, ctx.r10.u32);
	// stw r4,12(r8)
	PPC_STORE_U32(ctx.r8.u32 + 12, ctx.r4.u32);
	// stw r5,0(r25)
	PPC_STORE_U32(r25.u32 + 0, ctx.r5.u32);
	// stw r31,4(r25)
	PPC_STORE_U32(r25.u32 + 4, r31.u32);
	// stw r11,8(r25)
	PPC_STORE_U32(r25.u32 + 8, r11.u32);
	// stw r27,20(r8)
	PPC_STORE_U32(ctx.r8.u32 + 20, r27.u32);
	// addi r25,r9,16
	r25.s64 = ctx.r9.s64 + 16;
	// stw r28,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r28.u32);
	// stb r11,28(r8)
	PPC_STORE_U8(ctx.r8.u32 + 28, r11.u8);
	// stb r26,29(r8)
	PPC_STORE_U8(ctx.r8.u32 + 29, r26.u8);
	// stw r29,32(r8)
	PPC_STORE_U32(ctx.r8.u32 + 32, r29.u32);
	// stb r11,24(r8)
	PPC_STORE_U8(ctx.r8.u32 + 24, r11.u8);
	// addi r8,r3,948
	ctx.r8.s64 = ctx.r3.s64 + 948;
	// stw r30,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, r30.u32);
	// stw r10,8(r7)
	PPC_STORE_U32(ctx.r7.u32 + 8, ctx.r10.u32);
	// addi r23,r8,16
	r23.s64 = ctx.r8.s64 + 16;
	// stw r4,12(r7)
	PPC_STORE_U32(ctx.r7.u32 + 12, ctx.r4.u32);
	// stw r31,4(r24)
	PPC_STORE_U32(r24.u32 + 4, r31.u32);
	// stw r5,0(r24)
	PPC_STORE_U32(r24.u32 + 0, ctx.r5.u32);
	// stw r11,8(r24)
	PPC_STORE_U32(r24.u32 + 8, r11.u32);
	// stw r27,20(r7)
	PPC_STORE_U32(ctx.r7.u32 + 20, r27.u32);
	// stw r28,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r28.u32);
	// stb r11,28(r7)
	PPC_STORE_U8(ctx.r7.u32 + 28, r11.u8);
	// stb r26,29(r7)
	PPC_STORE_U8(ctx.r7.u32 + 29, r26.u8);
	// stw r29,32(r7)
	PPC_STORE_U32(ctx.r7.u32 + 32, r29.u32);
	// stb r11,24(r7)
	PPC_STORE_U8(ctx.r7.u32 + 24, r11.u8);
	// addi r7,r6,16
	ctx.r7.s64 = ctx.r6.s64 + 16;
	// stw r30,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r30.u32);
	// stw r10,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, ctx.r10.u32);
	// stw r4,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, ctx.r4.u32);
	// stw r5,0(r25)
	PPC_STORE_U32(r25.u32 + 0, ctx.r5.u32);
	// stw r31,4(r25)
	PPC_STORE_U32(r25.u32 + 4, r31.u32);
	// stw r11,8(r25)
	PPC_STORE_U32(r25.u32 + 8, r11.u32);
	// stw r27,20(r9)
	PPC_STORE_U32(ctx.r9.u32 + 20, r27.u32);
	// lwz r27,104(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r28,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r28.u32);
	// mr r28,r22
	r28.u64 = r22.u64;
	// stb r11,28(r9)
	PPC_STORE_U8(ctx.r9.u32 + 28, r11.u8);
	// stb r26,29(r9)
	PPC_STORE_U8(ctx.r9.u32 + 29, r26.u8);
	// stw r29,32(r9)
	PPC_STORE_U32(ctx.r9.u32 + 32, r29.u32);
	// stb r11,24(r9)
	PPC_STORE_U8(ctx.r9.u32 + 24, r11.u8);
	// stw r30,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r30.u32);
	// stw r10,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, ctx.r10.u32);
	// stw r4,12(r8)
	PPC_STORE_U32(ctx.r8.u32 + 12, ctx.r4.u32);
	// stw r5,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r5.u32);
	// stw r31,4(r23)
	PPC_STORE_U32(r23.u32 + 4, r31.u32);
	// stw r11,8(r23)
	PPC_STORE_U32(r23.u32 + 8, r11.u32);
	// stw r27,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r27.u32);
	// stw r11,20(r8)
	PPC_STORE_U32(ctx.r8.u32 + 20, r11.u32);
	// stb r11,24(r8)
	PPC_STORE_U8(ctx.r8.u32 + 24, r11.u8);
	// addi r8,r3,1004
	ctx.r8.s64 = ctx.r3.s64 + 1004;
	// stw r30,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, r30.u32);
	// stw r10,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, ctx.r10.u32);
	// addi r9,r8,24
	ctx.r9.s64 = ctx.r8.s64 + 24;
	// stw r4,12(r6)
	PPC_STORE_U32(ctx.r6.u32 + 12, ctx.r4.u32);
	// stw r5,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r5.u32);
	// stw r31,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, r31.u32);
	// stw r11,8(r7)
	PPC_STORE_U32(ctx.r7.u32 + 8, r11.u32);
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// stw r27,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r27.u32);
	// stw r11,20(r6)
	PPC_STORE_U32(ctx.r6.u32 + 20, r11.u32);
	// addi r7,r7,-29968
	ctx.r7.s64 = ctx.r7.s64 + -29968;
	// stb r11,24(r6)
	PPC_STORE_U8(ctx.r6.u32 + 24, r11.u8);
	// li r27,127
	r27.s64 = 127;
	// li r6,-128
	ctx.r6.s64 = -128;
loc_82156EC0:
	// stw r30,-20(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20, r30.u32);
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// stw r10,-16(r9)
	PPC_STORE_U32(ctx.r9.u32 + -16, ctx.r10.u32);
	// stw r22,-12(r9)
	PPC_STORE_U32(ctx.r9.u32 + -12, r22.u32);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// stw r5,-8(r9)
	PPC_STORE_U32(ctx.r9.u32 + -8, ctx.r5.u32);
	// stw r31,-4(r9)
	PPC_STORE_U32(ctx.r9.u32 + -4, r31.u32);
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// stb r6,4(r9)
	PPC_STORE_U8(ctx.r9.u32 + 4, ctx.r6.u8);
	// stb r27,5(r9)
	PPC_STORE_U8(ctx.r9.u32 + 5, r27.u8);
	// stw r29,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, r29.u32);
	// stw r4,-4(r9)
	PPC_STORE_U32(ctx.r9.u32 + -4, ctx.r4.u32);
	// stb r11,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, r11.u8);
	// addi r9,r9,36
	ctx.r9.s64 = ctx.r9.s64 + 36;
	// stw r7,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r7.u32);
	// addi r8,r8,36
	ctx.r8.s64 = ctx.r8.s64 + 36;
	// bge cr6,0x82156ec0
	if (!cr6.getLT()) goto loc_82156EC0;
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed16c
	return;
}

__attribute__((alias("__imp__sub_82156F10"))) PPC_WEAK_FUNC(sub_82156F10);
PPC_FUNC_IMPL(__imp__sub_82156F10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r11,r11,-29492
	r11.s64 = r11.s64 + -29492;
	// addi r9,r3,1148
	ctx.r9.s64 = ctx.r3.s64 + 1148;
	// li r8,3
	ctx.r8.s64 = 3;
	// addi r10,r10,-30252
	ctx.r10.s64 = ctx.r10.s64 + -30252;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r11,r11,-30724
	r11.s64 = r11.s64 + -30724;
loc_82156F34:
	// addi r9,r9,-36
	ctx.r9.s64 = ctx.r9.s64 + -36;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stw r10,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r10.u32);
	// stw r11,16(r9)
	PPC_STORE_U32(ctx.r9.u32 + 16, r11.u32);
	// bge cr6,0x82156f34
	if (!cr6.getLT()) goto loc_82156F34;
	// stw r10,976(r3)
	PPC_STORE_U32(ctx.r3.u32 + 976, ctx.r10.u32);
	// addi r9,r3,688
	ctx.r9.s64 = ctx.r3.s64 + 688;
	// stw r11,992(r3)
	PPC_STORE_U32(ctx.r3.u32 + 992, r11.u32);
	// li r8,3
	ctx.r8.s64 = 3;
	// stw r10,948(r3)
	PPC_STORE_U32(ctx.r3.u32 + 948, ctx.r10.u32);
	// stw r11,964(r3)
	PPC_STORE_U32(ctx.r3.u32 + 964, r11.u32);
	// stw r10,912(r3)
	PPC_STORE_U32(ctx.r3.u32 + 912, ctx.r10.u32);
	// stw r11,928(r3)
	PPC_STORE_U32(ctx.r3.u32 + 928, r11.u32);
	// stw r10,876(r3)
	PPC_STORE_U32(ctx.r3.u32 + 876, ctx.r10.u32);
	// stw r11,892(r3)
	PPC_STORE_U32(ctx.r3.u32 + 892, r11.u32);
	// stw r10,840(r3)
	PPC_STORE_U32(ctx.r3.u32 + 840, ctx.r10.u32);
	// stw r11,856(r3)
	PPC_STORE_U32(ctx.r3.u32 + 856, r11.u32);
	// stw r10,804(r3)
	PPC_STORE_U32(ctx.r3.u32 + 804, ctx.r10.u32);
	// stw r11,820(r3)
	PPC_STORE_U32(ctx.r3.u32 + 820, r11.u32);
	// stw r10,768(r3)
	PPC_STORE_U32(ctx.r3.u32 + 768, ctx.r10.u32);
	// stw r11,784(r3)
	PPC_STORE_U32(ctx.r3.u32 + 784, r11.u32);
	// stw r10,724(r3)
	PPC_STORE_U32(ctx.r3.u32 + 724, ctx.r10.u32);
	// stw r11,740(r3)
	PPC_STORE_U32(ctx.r3.u32 + 740, r11.u32);
	// stw r10,688(r3)
	PPC_STORE_U32(ctx.r3.u32 + 688, ctx.r10.u32);
	// stw r11,704(r3)
	PPC_STORE_U32(ctx.r3.u32 + 704, r11.u32);
loc_82156F9C:
	// addi r9,r9,-44
	ctx.r9.s64 = ctx.r9.s64 + -44;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stw r10,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r10.u32);
	// stw r11,16(r9)
	PPC_STORE_U32(ctx.r9.u32 + 16, r11.u32);
	// bge cr6,0x82156f9c
	if (!cr6.getLT()) goto loc_82156F9C;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// stw r10,468(r3)
	PPC_STORE_U32(ctx.r3.u32 + 468, ctx.r10.u32);
	// stw r11,484(r3)
	PPC_STORE_U32(ctx.r3.u32 + 484, r11.u32);
	// stw r10,424(r3)
	PPC_STORE_U32(ctx.r3.u32 + 424, ctx.r10.u32);
	// addi r9,r9,-29572
	ctx.r9.s64 = ctx.r9.s64 + -29572;
	// stw r11,440(r3)
	PPC_STORE_U32(ctx.r3.u32 + 440, r11.u32);
	// stw r10,388(r3)
	PPC_STORE_U32(ctx.r3.u32 + 388, ctx.r10.u32);
	// stw r11,404(r3)
	PPC_STORE_U32(ctx.r3.u32 + 404, r11.u32);
	// stw r10,352(r3)
	PPC_STORE_U32(ctx.r3.u32 + 352, ctx.r10.u32);
	// stw r11,368(r3)
	PPC_STORE_U32(ctx.r3.u32 + 368, r11.u32);
	// stw r10,316(r3)
	PPC_STORE_U32(ctx.r3.u32 + 316, ctx.r10.u32);
	// stw r11,332(r3)
	PPC_STORE_U32(ctx.r3.u32 + 332, r11.u32);
	// stw r10,280(r3)
	PPC_STORE_U32(ctx.r3.u32 + 280, ctx.r10.u32);
	// stw r11,296(r3)
	PPC_STORE_U32(ctx.r3.u32 + 296, r11.u32);
	// stw r10,252(r3)
	PPC_STORE_U32(ctx.r3.u32 + 252, ctx.r10.u32);
	// stw r11,268(r3)
	PPC_STORE_U32(ctx.r3.u32 + 268, r11.u32);
	// stw r10,224(r3)
	PPC_STORE_U32(ctx.r3.u32 + 224, ctx.r10.u32);
	// stw r11,240(r3)
	PPC_STORE_U32(ctx.r3.u32 + 240, r11.u32);
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
	// stw r10,196(r3)
	PPC_STORE_U32(ctx.r3.u32 + 196, ctx.r10.u32);
	// stw r11,212(r3)
	PPC_STORE_U32(ctx.r3.u32 + 212, r11.u32);
	// stw r10,160(r3)
	PPC_STORE_U32(ctx.r3.u32 + 160, ctx.r10.u32);
	// stw r11,176(r3)
	PPC_STORE_U32(ctx.r3.u32 + 176, r11.u32);
	// stw r10,116(r3)
	PPC_STORE_U32(ctx.r3.u32 + 116, ctx.r10.u32);
	// stw r11,132(r3)
	PPC_STORE_U32(ctx.r3.u32 + 132, r11.u32);
	// stw r10,88(r3)
	PPC_STORE_U32(ctx.r3.u32 + 88, ctx.r10.u32);
	// stw r11,104(r3)
	PPC_STORE_U32(ctx.r3.u32 + 104, r11.u32);
	// stw r10,60(r3)
	PPC_STORE_U32(ctx.r3.u32 + 60, ctx.r10.u32);
	// stw r11,76(r3)
	PPC_STORE_U32(ctx.r3.u32 + 76, r11.u32);
	// stw r10,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, ctx.r10.u32);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// b 0x821778e8
	sub_821778E8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82157038"))) PPC_WEAK_FUNC(sub_82157038);
PPC_FUNC_IMPL(__imp__sub_82157038) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82156518
	sub_82156518(ctx, base);
	// addi r4,r31,224
	ctx.r4.s64 = r31.s64 + 224;
	// li r30,0
	r30.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,252
	ctx.r4.s64 = r31.s64 + 252;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,280
	r29.s64 = r31.s64 + 280;
	// li r11,3
	r11.s64 = 3;
	// li r3,3
	ctx.r3.s64 = 3;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,316
	r29.s64 = r31.s64 + 316;
	// li r23,-1
	r23.s64 = -1;
	// li r11,16
	r11.s64 = 16;
	// li r3,17
	ctx.r3.s64 = 17;
	// stb r23,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r23.u8);
	// stb r23,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r23.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,352
	r29.s64 = r31.s64 + 352;
	// li r28,89
	r28.s64 = 89;
	// li r3,89
	ctx.r3.s64 = 89;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,388
	r29.s64 = r31.s64 + 388;
	// li r3,89
	ctx.r3.s64 = 89;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// lis r11,32767
	r11.s64 = 2147418112;
	// addi r28,r31,424
	r28.s64 = r31.s64 + 424;
	// ori r29,r11,65535
	r29.u64 = r11.u64 | 65535;
	// li r27,1
	r27.s64 = 1;
	// lis r25,-32768
	r25.s64 = -2147483648;
	// li r26,-1
	r26.s64 = -1;
	// stw r30,24(r28)
	PPC_STORE_U32(r28.u32 + 24, r30.u32);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stw r29,36(r28)
	PPC_STORE_U32(r28.u32 + 36, r29.u32);
	// stb r27,28(r28)
	PPC_STORE_U8(r28.u32 + 28, r27.u8);
	// stw r25,32(r28)
	PPC_STORE_U32(r28.u32 + 32, r25.u32);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,40(r28)
	PPC_STORE_U32(r28.u32 + 40, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r28,r31,468
	r28.s64 = r31.s64 + 468;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stw r30,24(r28)
	PPC_STORE_U32(r28.u32 + 24, r30.u32);
	// stb r27,28(r28)
	PPC_STORE_U8(r28.u32 + 28, r27.u8);
	// stw r25,32(r28)
	PPC_STORE_U32(r28.u32 + 32, r25.u32);
	// stw r29,36(r28)
	PPC_STORE_U32(r28.u32 + 36, r29.u32);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,40(r28)
	PPC_STORE_U32(r28.u32 + 40, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r28,r31,540
	r28.s64 = r31.s64 + 540;
	// li r24,4
	r24.s64 = 4;
loc_821571AC:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stw r30,-4(r28)
	PPC_STORE_U32(r28.u32 + -4, r30.u32);
	// stb r27,0(r28)
	PPC_STORE_U8(r28.u32 + 0, r27.u8);
	// stw r25,4(r28)
	PPC_STORE_U32(r28.u32 + 4, r25.u32);
	// stw r29,8(r28)
	PPC_STORE_U32(r28.u32 + 8, r29.u32);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r4,r28,-28
	ctx.r4.s64 = r28.s64 + -28;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,12(r28)
	PPC_STORE_U32(r28.u32 + 12, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r24,r24,-1
	r24.s64 = r24.s64 + -1;
	// addi r28,r28,44
	r28.s64 = r28.s64 + 44;
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// bne cr6,0x821571ac
	if (!cr6.getEQ()) goto loc_821571AC;
	// addi r28,r31,688
	r28.s64 = r31.s64 + 688;
	// li r11,4
	r11.s64 = 4;
	// li r3,4
	ctx.r3.s64 = 4;
	// stb r30,24(r28)
	PPC_STORE_U8(r28.u32 + 24, r30.u8);
	// stb r30,28(r28)
	PPC_STORE_U8(r28.u32 + 28, r30.u8);
	// stb r11,29(r28)
	PPC_STORE_U8(r28.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r28)
	PPC_STORE_U32(r28.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r28,r31,724
	r28.s64 = r31.s64 + 724;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stw r30,24(r28)
	PPC_STORE_U32(r28.u32 + 24, r30.u32);
	// stb r27,28(r28)
	PPC_STORE_U8(r28.u32 + 28, r27.u8);
	// stw r25,32(r28)
	PPC_STORE_U32(r28.u32 + 32, r25.u32);
	// stw r29,36(r28)
	PPC_STORE_U32(r28.u32 + 36, r29.u32);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,40(r28)
	PPC_STORE_U32(r28.u32 + 40, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,768
	r29.s64 = r31.s64 + 768;
	// li r11,63
	r11.s64 = 63;
	// li r3,63
	ctx.r3.s64 = 63;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,804
	r29.s64 = r31.s64 + 804;
	// li r11,64
	r11.s64 = 64;
	// li r3,64
	ctx.r3.s64 = 64;
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r11.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,840
	r29.s64 = r31.s64 + 840;
	// li r11,5
	r11.s64 = 5;
	// li r3,5
	ctx.r3.s64 = 5;
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r11,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r11.u8);
	// stb r11,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r11.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,876
	r29.s64 = r31.s64 + 876;
	// li r28,255
	r28.s64 = 255;
	// li r3,255
	ctx.r3.s64 = 255;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r31,912
	r29.s64 = r31.s64 + 912;
	// li r3,255
	ctx.r3.s64 = 255;
	// stb r30,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r30.u8);
	// stb r30,28(r29)
	PPC_STORE_U8(r29.u32 + 28, r30.u8);
	// stb r28,29(r29)
	PPC_STORE_U8(r29.u32 + 29, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,32(r29)
	PPC_STORE_U32(r29.u32 + 32, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,948
	ctx.r4.s64 = r31.s64 + 948;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r30.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r4,r31,976
	ctx.r4.s64 = r31.s64 + 976;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r27,24(r4)
	PPC_STORE_U8(ctx.r4.u32 + 24, r27.u8);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r30,r31,1032
	r30.s64 = r31.s64 + 1032;
	// li r29,4
	r29.s64 = 4;
	// li r28,127
	r28.s64 = 127;
loc_82157360:
	// li r3,128
	ctx.r3.s64 = 128;
	// stb r23,-4(r30)
	PPC_STORE_U8(r30.u32 + -4, r23.u8);
	// stb r23,0(r30)
	PPC_STORE_U8(r30.u32 + 0, r23.u8);
	// stb r28,1(r30)
	PPC_STORE_U8(r30.u32 + 1, r28.u8);
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// addi r4,r30,-28
	ctx.r4.s64 = r30.s64 + -28;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r11.u32);
	// bl 0x82177938
	sub_82177938(ctx, base);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// addi r30,r30,36
	r30.s64 = r30.s64 + 36;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x82157360
	if (!cr6.getEQ()) goto loc_82157360;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_821573A0"))) PPC_WEAK_FUNC(sub_821573A0);
PPC_FUNC_IMPL(__imp__sub_821573A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82156f10
	sub_82156F10(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821573d8
	if (cr6.getEQ()) goto loc_821573D8;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_821573D8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821573F0"))) PPC_WEAK_FUNC(sub_821573F0);
PPC_FUNC_IMPL(__imp__sub_821573F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x821566a8
	sub_821566A8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r30,r31,348
	r30.s64 = r31.s64 + 348;
	// addi r11,r11,-29484
	r11.s64 = r11.s64 + -29484;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r31,400
	r28.s64 = r31.s64 + 400;
	// addi r29,r11,-29564
	r29.s64 = r11.s64 + -29564;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r29,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r29.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,452
	r27.s64 = r31.s64 + 452;
	// stw r29,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r29.u32);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r28,r31,504
	r28.s64 = r31.s64 + 504;
	// addi r30,r11,-29564
	r30.s64 = r11.s64 + -29564;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r30,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r30.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r27,r31,556
	r27.s64 = r31.s64 + 556;
	// addi r24,r11,-29564
	r24.s64 = r11.s64 + -29564;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r24,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r24.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,608
	r28.s64 = r31.s64 + 608;
	// stw r30,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r30.u32);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,660
	r27.s64 = r31.s64 + 660;
	// li r4,3
	ctx.r4.s64 = 3;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r26,r31,712
	r26.s64 = r31.s64 + 712;
	// addi r28,r11,-30192
	r28.s64 = r11.s64 + -30192;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stw r28,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r28.u32);
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,764
	r27.s64 = r31.s64 + 764;
	// stw r28,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r28.u32);
	// li r25,3
	r25.s64 = 3;
loc_821574D8:
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r25,r25,-1
	r25.s64 = r25.s64 + -1;
	// stw r28,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r28.u32);
	// addi r27,r27,52
	r27.s64 = r27.s64 + 52;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bge cr6,0x821574d8
	if (!cr6.getLT()) goto loc_821574D8;
	// addi r27,r31,972
	r27.s64 = r31.s64 + 972;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r26,r31,1024
	r26.s64 = r31.s64 + 1024;
	// li r4,3
	ctx.r4.s64 = 3;
	// stw r30,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r30.u32);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,1076
	r27.s64 = r31.s64 + 1076;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r28,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r28.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,1128
	r28.s64 = r31.s64 + 1128;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r30,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r30.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,1180
	r27.s64 = r31.s64 + 1180;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,1232
	r28.s64 = r31.s64 + 1232;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r30,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r30.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r31,1284
	r27.s64 = r31.s64 + 1284;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,1336
	r28.s64 = r31.s64 + 1336;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r30,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r30.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r30,r31,1388
	r30.s64 = r31.s64 + 1388;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r29,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r29.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r28,r31,1440
	r28.s64 = r31.s64 + 1440;
	// li r27,3
	r27.s64 = 3;
	// stw r29,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r29.u32);
loc_821575B4:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82175860
	sub_82175860(ctx, base);
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// stw r24,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r24.u32);
	// addi r28,r28,52
	r28.s64 = r28.s64 + 52;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bge cr6,0x821575b4
	if (!cr6.getLT()) goto loc_821575B4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_821575E0"))) PPC_WEAK_FUNC(sub_821575E0);
PPC_FUNC_IMPL(__imp__sub_821575E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r26,r31,16
	r26.s64 = r31.s64 + 16;
	// addi r25,r30,60
	r25.s64 = r30.s64 + 60;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r11,344(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 344);
	// lwz r5,8(r25)
	ctx.r5.u64 = PPC_LOAD_U32(r25.u32 + 8);
	// lwz r29,12(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lbz r28,12(r29)
	r28.u64 = PPC_LOAD_U8(r29.u32 + 12);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,24(r25)
	r11.u64 = PPC_LOAD_U8(r25.u32 + 24);
	// addi r24,r30,88
	r24.s64 = r30.s64 + 88;
	// addi r27,r31,68
	r27.s64 = r31.s64 + 68;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// stb r11,12(r26)
	PPC_STORE_U8(r26.u32 + 12, r11.u8);
	// lwz r5,8(r24)
	ctx.r5.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,24(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 24);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r25,r30,24
	r25.s64 = r30.s64 + 24;
	// addi r26,r31,120
	r26.s64 = r31.s64 + 120;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r5,8(r25)
	ctx.r5.u64 = PPC_LOAD_U32(r25.u32 + 8);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,24(r25)
	r11.u64 = PPC_LOAD_U8(r25.u32 + 24);
	// addi r24,r30,116
	r24.s64 = r30.s64 + 116;
	// addi r27,r31,172
	r27.s64 = r31.s64 + 172;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// stb r11,12(r26)
	PPC_STORE_U8(r26.u32 + 12, r11.u8);
	// lwz r5,8(r24)
	ctx.r5.u64 = PPC_LOAD_U32(r24.u32 + 8);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lwz r11,24(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 24);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,12(r27)
	PPC_STORE_U32(r27.u32 + 12, r11.u32);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// bl 0x82173d10
	sub_82173D10(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r11,0
	r11.s64 = 0;
	// addi r26,r30,160
	r26.s64 = r30.s64 + 160;
	// addi r27,r31,240
	r27.s64 = r31.s64 + 240;
	// stw r10,224(r31)
	PPC_STORE_U32(r31.u32 + 224, ctx.r10.u32);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// stw r10,228(r31)
	PPC_STORE_U32(r31.u32 + 228, ctx.r10.u32);
	// lbz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r10,232(r31)
	PPC_STORE_U8(r31.u32 + 232, ctx.r10.u8);
	// stw r11,236(r31)
	PPC_STORE_U32(r31.u32 + 236, r11.u32);
	// lwz r5,8(r26)
	ctx.r5.u64 = PPC_LOAD_U32(r26.u32 + 8);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,24(r26)
	r11.u64 = PPC_LOAD_U8(r26.u32 + 24);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r30,r30,196
	r30.s64 = r30.s64 + 196;
	// addi r27,r31,292
	r27.s64 = r31.s64 + 292;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwz r5,8(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,24(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 24);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_821577A0"))) PPC_WEAK_FUNC(sub_821577A0);
PPC_FUNC_IMPL(__imp__sub_821577A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-29484
	r11.s64 = r11.s64 + -29484;
	// addi r27,r31,208
	r27.s64 = r31.s64 + 208;
	// li r29,3
	r29.s64 = 3;
	// addi r30,r27,1440
	r30.s64 = r27.s64 + 1440;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r25,r11,-29564
	r25.s64 = r11.s64 + -29564;
loc_821577D0:
	// addi r30,r30,-52
	r30.s64 = r30.s64 + -52;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r25,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r25.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bge cr6,0x821577d0
	if (!cr6.getLT()) goto loc_821577D0;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r31,1388
	ctx.r3.s64 = r31.s64 + 1388;
	// addi r29,r11,-29564
	r29.s64 = r11.s64 + -29564;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,1336
	ctx.r3.s64 = r31.s64 + 1336;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r31,1284
	ctx.r3.s64 = r31.s64 + 1284;
	// addi r30,r11,-29564
	r30.s64 = r11.s64 + -29564;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,1232
	ctx.r3.s64 = r31.s64 + 1232;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,1180
	ctx.r3.s64 = r31.s64 + 1180;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,1128
	ctx.r3.s64 = r31.s64 + 1128;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,1076
	ctx.r3.s64 = r31.s64 + 1076;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r31,1024
	ctx.r3.s64 = r31.s64 + 1024;
	// addi r28,r11,-30192
	r28.s64 = r11.s64 + -30192;
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,972
	ctx.r3.s64 = r31.s64 + 972;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r27,r27,764
	r27.s64 = r27.s64 + 764;
	// li r26,3
	r26.s64 = 3;
loc_82157878:
	// addi r27,r27,-52
	r27.s64 = r27.s64 + -52;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r28,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r28.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r26,r26,-1
	r26.s64 = r26.s64 + -1;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bge cr6,0x82157878
	if (!cr6.getLT()) goto loc_82157878;
	// addi r3,r31,712
	ctx.r3.s64 = r31.s64 + 712;
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,660
	ctx.r3.s64 = r31.s64 + 660;
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,608
	ctx.r3.s64 = r31.s64 + 608;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,556
	ctx.r3.s64 = r31.s64 + 556;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,504
	ctx.r3.s64 = r31.s64 + 504;
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r25.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,452
	ctx.r3.s64 = r31.s64 + 452;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,400
	ctx.r3.s64 = r31.s64 + 400;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// addi r3,r31,348
	ctx.r3.s64 = r31.s64 + 348;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// bl 0x821786e8
	sub_821786E8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82156788
	sub_82156788(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82157908"))) PPC_WEAK_FUNC(sub_82157908);
PPC_FUNC_IMPL(__imp__sub_82157908) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,16
	ctx.r3.s64 = r30.s64 + 16;
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,120
	ctx.r3.s64 = r30.s64 + 120;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,452
	ctx.r3.s64 = r30.s64 + 452;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,972
	ctx.r3.s64 = r30.s64 + 972;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,1076
	ctx.r3.s64 = r30.s64 + 1076;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,1284
	ctx.r3.s64 = r30.s64 + 1284;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821579A8"))) PPC_WEAK_FUNC(sub_821579A8);
PPC_FUNC_IMPL(__imp__sub_821579A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// clrlwi r11,r4,24
	r11.u64 = ctx.r4.u32 & 0xFF;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stb r11,485(r3)
	PPC_STORE_U8(ctx.r3.u32 + 485, r11.u8);
	// stb r11,49(r3)
	PPC_STORE_U8(ctx.r3.u32 + 49, r11.u8);
	// stb r11,153(r3)
	PPC_STORE_U8(ctx.r3.u32 + 153, r11.u8);
	// stb r11,1005(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1005, r11.u8);
	// stb r11,1109(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1109, r11.u8);
	// stb r11,1317(r3)
	PPC_STORE_U8(ctx.r3.u32 + 1317, r11.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821579D0"))) PPC_WEAK_FUNC(sub_821579D0);
PPC_FUNC_IMPL(__imp__sub_821579D0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,16
	ctx.r3.s64 = r30.s64 + 16;
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x82179e68
	sub_82179E68(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,120
	ctx.r3.s64 = r30.s64 + 120;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,452
	ctx.r3.s64 = r30.s64 + 452;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,972
	ctx.r3.s64 = r30.s64 + 972;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,1076
	ctx.r3.s64 = r30.s64 + 1076;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r3,r30,1284
	ctx.r3.s64 = r30.s64 + 1284;
	// lbz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// bl 0x82179c60
	sub_82179C60(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82157A70"))) PPC_WEAK_FUNC(sub_82157A70);
PPC_FUNC_IMPL(__imp__sub_82157A70) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-29352
	r30.s64 = r11.s64 + -29352;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x821575e0
	sub_821575E0(ctx, base);
	// lwz r11,344(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 344);
	// addi r27,r31,348
	r27.s64 = r31.s64 + 348;
	// lwz r5,232(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 232);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwz r29,12(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// lbz r28,12(r29)
	r28.u64 = PPC_LOAD_U8(r29.u32 + 12);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r5,r30,224
	ctx.r5.s64 = r30.s64 + 224;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,248(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 248);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,400
	r27.s64 = r31.s64 + 400;
	// lwz r5,260(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 260);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,252
	ctx.r5.s64 = r30.s64 + 252;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,276(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 276);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179b38
	sub_82179B38(ctx, base);
	// addi r26,r31,452
	r26.s64 = r31.s64 + 452;
	// lwz r5,288(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 288);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,280
	ctx.r5.s64 = r30.s64 + 280;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,304(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 304);
	// addi r27,r31,504
	r27.s64 = r31.s64 + 504;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// stb r11,12(r26)
	PPC_STORE_U8(r26.u32 + 12, r11.u8);
	// lwz r5,324(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 324);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r5,r30,316
	ctx.r5.s64 = r30.s64 + 316;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
	// lbz r11,340(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 340);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// rlwinm r4,r10,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179a38
	sub_82179A38(ctx, base);
	// addi r27,r31,556
	r27.s64 = r31.s64 + 556;
	// lwz r5,360(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 360);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,352
	ctx.r5.s64 = r30.s64 + 352;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,376(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 376);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,608
	r27.s64 = r31.s64 + 608;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,396(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 396);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,388
	ctx.r5.s64 = r30.s64 + 388;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,412(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 412);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,660
	r27.s64 = r31.s64 + 660;
	// lwz r5,432(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 432);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,424
	ctx.r5.s64 = r30.s64 + 424;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lwz r11,448(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 448);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,12(r27)
	PPC_STORE_U32(r27.u32 + 12, r11.u32);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,712
	r27.s64 = r31.s64 + 712;
	// lwz r5,476(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 476);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,468
	ctx.r5.s64 = r30.s64 + 468;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lwz r11,492(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 492);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,12(r27)
	PPC_STORE_U32(r27.u32 + 12, r11.u32);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r26,r31,764
	r26.s64 = r31.s64 + 764;
	// addi r27,r30,536
	r27.s64 = r30.s64 + 536;
loc_82157C9C:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r5,-16(r27)
	ctx.r5.u64 = PPC_LOAD_U32(r27.u32 + -16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// addi r5,r27,-24
	ctx.r5.s64 = r27.s64 + -24;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stw r11,12(r26)
	PPC_STORE_U32(r26.u32 + 12, r11.u32);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r27,44
	r27.s64 = r27.s64 + 44;
	// addi r11,r30,712
	r11.s64 = r30.s64 + 712;
	// addi r26,r26,52
	r26.s64 = r26.s64 + 52;
	// cmpw cr6,r27,r11
	cr6.compare<int32_t>(r27.s32, r11.s32, xer);
	// blt cr6,0x82157c9c
	if (cr6.getLT()) goto loc_82157C9C;
	// addi r26,r31,972
	r26.s64 = r31.s64 + 972;
	// lwz r5,696(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 696);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,688
	ctx.r5.s64 = r30.s64 + 688;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,712(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 712);
	// addi r27,r31,1024
	r27.s64 = r31.s64 + 1024;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// stb r11,12(r26)
	PPC_STORE_U8(r26.u32 + 12, r11.u8);
	// lwz r5,732(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 732);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r5,r30,724
	ctx.r5.s64 = r30.s64 + 724;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lwz r11,748(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 748);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,12(r27)
	PPC_STORE_U32(r27.u32 + 12, r11.u32);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r26,r31,1076
	r26.s64 = r31.s64 + 1076;
	// lwz r5,776(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 776);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,768
	ctx.r5.s64 = r30.s64 + 768;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,792(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 792);
	// addi r27,r31,1128
	r27.s64 = r31.s64 + 1128;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// stb r11,12(r26)
	PPC_STORE_U8(r26.u32 + 12, r11.u8);
	// lwz r5,812(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 812);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r5,r30,804
	ctx.r5.s64 = r30.s64 + 804;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,828(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 828);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,1180
	r27.s64 = r31.s64 + 1180;
	// lwz r5,848(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 848);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,840
	ctx.r5.s64 = r30.s64 + 840;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,864(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 864);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,1232
	r27.s64 = r31.s64 + 1232;
	// lwz r5,884(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 884);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r5,r30,876
	ctx.r5.s64 = r30.s64 + 876;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,900(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 900);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r26,r31,1284
	r26.s64 = r31.s64 + 1284;
	// lwz r5,920(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 920);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,912
	ctx.r5.s64 = r30.s64 + 912;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,936(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 936);
	// addi r27,r31,1336
	r27.s64 = r31.s64 + 1336;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// stb r11,12(r26)
	PPC_STORE_U8(r26.u32 + 12, r11.u8);
	// lwz r5,956(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 956);
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r5,r30,948
	ctx.r5.s64 = r30.s64 + 948;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,972(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 972);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r27,r31,1388
	r27.s64 = r31.s64 + 1388;
	// lwz r5,984(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 984);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r5,r30,976
	ctx.r5.s64 = r30.s64 + 976;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,1000(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1000);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stb r11,12(r27)
	PPC_STORE_U8(r27.u32 + 12, r11.u8);
	// bl 0x82179890
	sub_82179890(ctx, base);
	// addi r26,r31,1440
	r26.s64 = r31.s64 + 1440;
	// addi r27,r30,1028
	r27.s64 = r30.s64 + 1028;
loc_82157F04:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r5,-16(r27)
	ctx.r5.u64 = PPC_LOAD_U32(r27.u32 + -16);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82177b80
	sub_82177B80(ctx, base);
	// addi r5,r27,-24
	ctx.r5.s64 = r27.s64 + -24;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x821758b8
	sub_821758B8(ctx, base);
	// lbz r11,0(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 0);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stb r11,12(r26)
	PPC_STORE_U8(r26.u32 + 12, r11.u8);
	// bl 0x82179b38
	sub_82179B38(ctx, base);
	// addi r27,r27,36
	r27.s64 = r27.s64 + 36;
	// addi r11,r30,1172
	r11.s64 = r30.s64 + 1172;
	// addi r26,r26,52
	r26.s64 = r26.s64 + 52;
	// cmpw cr6,r27,r11
	cr6.compare<int32_t>(r27.s32, r11.s32, xer);
	// blt cr6,0x82157f04
	if (cr6.getLT()) goto loc_82157F04;
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82157f7c
	if (cr6.getEQ()) goto loc_82157F7C;
	// lwz r30,0(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82157F7C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82157F88"))) PPC_WEAK_FUNC(sub_82157F88);
PPC_FUNC_IMPL(__imp__sub_82157F88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x821577a0
	sub_821577A0(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82157fc0
	if (cr6.getEQ()) goto loc_82157FC0;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82157FC0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82157FD8"))) PPC_WEAK_FUNC(sub_82157FD8);
PPC_FUNC_IMPL(__imp__sub_82157FD8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x82158010
	if (cr6.getEQ()) goto loc_82158010;
	// li r6,15
	ctx.r6.s64 = 15;
	// li r4,16
	ctx.r4.s64 = 16;
	// addi r3,r31,768
	ctx.r3.s64 = r31.s64 + 768;
	// bl 0x823ecf88
	sub_823ECF88(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stb r11,783(r31)
	PPC_STORE_U8(r31.u32 + 783, r11.u8);
loc_82158010:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158028"))) PPC_WEAK_FUNC(sub_82158028);
PPC_FUNC_IMPL(__imp__sub_82158028) {
	PPC_FUNC_PROLOGUE();
	// addi r3,r3,768
	ctx.r3.s64 = ctx.r3.s64 + 768;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158030"))) PPC_WEAK_FUNC(sub_82158030);
PPC_FUNC_IMPL(__imp__sub_82158030) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r3,1
	ctx.r3.s64 = 65536;
	// ori r3,r3,25768
	ctx.r3.u64 = ctx.r3.u64 | 25768;
	// bl 0x8209d088
	sub_8209D088(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821580d4
	if (cr6.getEQ()) goto loc_821580D4;
	// li r11,36
	r11.s64 = 36;
	// addi r25,r3,8
	r25.s64 = ctx.r3.s64 + 8;
	// li r28,35
	r28.s64 = 35;
	// mr r31,r25
	r31.u64 = r25.u64;
	// li r30,0
	r30.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r26,2
	r26.s64 = 2;
	// addi r27,r11,-29432
	r27.s64 = r11.s64 + -29432;
loc_82158074:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8214b968
	sub_8214B968(ctx, base);
	// addi r29,r31,884
	r29.s64 = r31.s64 + 884;
	// std r30,784(r31)
	PPC_STORE_U64(r31.u32 + 784, r30.u64);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r27,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r27.u32);
	// stb r30,792(r31)
	PPC_STORE_U8(r31.u32 + 792, r30.u8);
	// bl 0x821573f0
	sub_821573F0(ctx, base);
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// stw r31,1228(r31)
	PPC_STORE_U32(r31.u32 + 1228, r31.u32);
	// stb r30,768(r31)
	PPC_STORE_U8(r31.u32 + 768, r30.u8);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// stw r26,96(r31)
	PPC_STORE_U32(r31.u32 + 96, r26.u32);
	// stw r29,76(r31)
	PPC_STORE_U32(r31.u32 + 76, r29.u32);
	// stw r30,824(r31)
	PPC_STORE_U32(r31.u32 + 824, r30.u32);
	// addi r31,r31,2536
	r31.s64 = r31.s64 + 2536;
	// bge cr6,0x82158074
	if (!cr6.getLT()) goto loc_82158074;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lis r31,1
	r31.s64 = 65536;
	// addi r30,r11,-29456
	r30.s64 = r11.s64 + -29456;
	// mr r11,r25
	r11.u64 = r25.u64;
	// ori r31,r31,23224
	r31.u64 = r31.u64 | 23224;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// b 0x821580f4
	goto loc_821580F4;
loc_821580D4:
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lis r31,1
	r31.s64 = 65536;
	// addi r30,r11,-29456
	r30.s64 = r11.s64 + -29456;
	// li r11,0
	r11.s64 = 0;
	// ori r31,r31,23224
	r31.u64 = r31.u64 | 23224;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// b 0x821580f4
	goto loc_821580F4;
loc_821580F0:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
loc_821580F4:
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwzx r11,r31,r11
	r11.u64 = PPC_LOAD_U32(r31.u32 + r11.u32);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r31,r31,-2536
	r31.s64 = r31.s64 + -2536;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x821580f0
	if (!cr6.getLT()) goto loc_821580F0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_82158120"))) PPC_WEAK_FUNC(sub_82158120);
PPC_FUNC_IMPL(__imp__sub_82158120) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// rlwinm r11,r27,0,30,30
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821581a8
	if (cr6.getEQ()) goto loc_821581A8;
	// lwz r11,-8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -8);
	// addi r28,r31,-8
	r28.s64 = r31.s64 + -8;
	// mulli r10,r11,2536
	ctx.r10.s64 = r11.s64 * 2536;
	// addi r30,r11,-1
	r30.s64 = r11.s64 + -1;
	// add r31,r10,r31
	r31.u64 = ctx.r10.u64 + r31.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x82158188
	if (cr6.getLT()) goto loc_82158188;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r11,-29432
	r29.s64 = r11.s64 + -29432;
loc_82158164:
	// addi r31,r31,-2536
	r31.s64 = r31.s64 + -2536;
	// addi r3,r31,884
	ctx.r3.s64 = r31.s64 + 884;
	// stw r29,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r29.u32);
	// bl 0x821577a0
	sub_821577A0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8214b9f0
	sub_8214B9F0(ctx, base);
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bge cr6,0x82158164
	if (!cr6.getLT()) goto loc_82158164;
loc_82158188:
	// clrlwi r11,r27,31
	r11.u64 = r27.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215819c
	if (cr6.getEQ()) goto loc_8215819C;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
loc_8215819C:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_821581A8:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r3,r31,884
	ctx.r3.s64 = r31.s64 + 884;
	// addi r11,r11,-29432
	r11.s64 = r11.s64 + -29432;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x821577a0
	sub_821577A0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8214b9f0
	sub_8214B9F0(ctx, base);
	// clrlwi r11,r27,31
	r11.u64 = r27.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821581d8
	if (cr6.getEQ()) goto loc_821581D8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
loc_821581D8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_821581E8"))) PPC_WEAK_FUNC(sub_821581E8);
PPC_FUNC_IMPL(__imp__sub_821581E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lbz r3,-29452(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + -29452);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821581F8"))) PPC_WEAK_FUNC(sub_821581F8);
PPC_FUNC_IMPL(__imp__sub_821581F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lbz r3,-29451(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + -29451);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158208"))) PPC_WEAK_FUNC(sub_82158208);
PPC_FUNC_IMPL(__imp__sub_82158208) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r24,r5
	r24.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// li r29,0
	r29.s64 = 0;
	// addi r30,r10,-29452
	r30.s64 = ctx.r10.s64 + -29452;
	// addi r11,r1,84
	r11.s64 = ctx.r1.s64 + 84;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r6,2
	ctx.r6.s64 = 2;
	// stw r29,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r29.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// lbz r10,1(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 1);
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r29,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r29.u32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// stw r29,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r29.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stw r29,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r29.u32);
	// addi r10,r10,14756
	ctx.r10.s64 = ctx.r10.s64 + 14756;
	// stb r9,1(r30)
	PPC_STORE_U8(r30.u32 + 1, ctx.r9.u8);
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// li r31,1
	r31.s64 = 1;
loc_8215827C:
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x82158298
	if (cr6.getEQ()) goto loc_82158298;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// mr r11,r29
	r11.u64 = r29.u64;
	// bne cr6,0x8215829c
	if (!cr6.getEQ()) goto loc_8215829C;
loc_82158298:
	// mr r11,r31
	r11.u64 = r31.u64;
loc_8215829C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821582c4
	if (!cr6.getEQ()) goto loc_821582C4;
	// lwz r11,796(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 796);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r31,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, r31.u32);
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8215827c
	goto loc_8215827C;
loc_821582C4:
	// li r28,-1
	r28.s64 = -1;
	// mr r11,r29
	r11.u64 = r29.u64;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
loc_821582D0:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x821582f0
	if (cr6.getEQ()) goto loc_821582F0;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// blt cr6,0x821582d0
	if (cr6.getLT()) goto loc_821582D0;
	// b 0x821582f4
	goto loc_821582F4;
loc_821582F0:
	// mr r28,r11
	r28.u64 = r11.u64;
loc_821582F4:
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x8216bff0
	sub_8216BFF0(ctx, base);
	// lbz r11,0(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r28,796(r31)
	PPC_STORE_U32(r31.u32 + 796, r28.u32);
	// stb r11,0(r30)
	PPC_STORE_U8(r30.u32 + 0, r11.u8);
	// bl 0x8214bba0
	sub_8214BBA0(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82164680
	sub_82164680(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r5,r31,60
	ctx.r5.s64 = r31.s64 + 60;
	// addi r4,r11,-29352
	ctx.r4.s64 = r11.s64 + -29352;
	// addi r3,r31,884
	ctx.r3.s64 = r31.s64 + 884;
	// bl 0x82177ad8
	sub_82177AD8(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lbz r4,12(r27)
	ctx.r4.u64 = PPC_LOAD_U8(r27.u32 + 12);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// std r25,784(r31)
	PPC_STORE_U64(r31.u32 + 784, r25.u64);
	// stb r24,792(r31)
	PPC_STORE_U8(r31.u32 + 792, r24.u8);
	// beq cr6,0x82158388
	if (cr6.getEQ()) goto loc_82158388;
	// li r6,15
	ctx.r6.s64 = 15;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// li r4,16
	ctx.r4.s64 = 16;
	// addi r3,r31,768
	ctx.r3.s64 = r31.s64 + 768;
	// bl 0x823ecf88
	sub_823ECF88(ctx, base);
	// stb r29,783(r31)
	PPC_STORE_U8(r31.u32 + 783, r29.u8);
loc_82158388:
	// stw r23,820(r31)
	PPC_STORE_U32(r31.u32 + 820, r23.u32);
loc_8215838C:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x8215fc18
	sub_8215FC18(ctx, base);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// cmpwi cr6,r29,20
	cr6.compare<int32_t>(r29.s32, 20, xer);
	// blt cr6,0x8215838c
	if (cr6.getLT()) goto loc_8215838C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_821583B0"))) PPC_WEAK_FUNC(sub_821583B0);
PPC_FUNC_IMPL(__imp__sub_821583B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// bl 0x8216bff0
	sub_8216BFF0(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r9,-1
	ctx.r9.s64 = -1;
	// lbz r10,-29451(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + -29451);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r9,796(r31)
	PPC_STORE_U32(r31.u32 + 796, ctx.r9.u32);
	// stb r10,-29451(r11)
	PPC_STORE_U8(r11.u32 + -29451, ctx.r10.u8);
	// bl 0x8214bba0
	sub_8214BBA0(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82164680
	sub_82164680(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r5,r31,60
	ctx.r5.s64 = r31.s64 + 60;
	// addi r4,r11,-29352
	ctx.r4.s64 = r11.s64 + -29352;
	// addi r3,r31,884
	ctx.r3.s64 = r31.s64 + 884;
	// bl 0x82177ad8
	sub_82177AD8(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lbz r4,12(r30)
	ctx.r4.u64 = PPC_LOAD_U8(r30.u32 + 12);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// std r28,784(r31)
	PPC_STORE_U64(r31.u32 + 784, r28.u64);
	// stb r27,792(r31)
	PPC_STORE_U8(r31.u32 + 792, r27.u8);
	// beq cr6,0x82158470
	if (cr6.getEQ()) goto loc_82158470;
	// li r6,15
	ctx.r6.s64 = 15;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,16
	ctx.r4.s64 = 16;
	// addi r3,r31,768
	ctx.r3.s64 = r31.s64 + 768;
	// bl 0x823ecf88
	sub_823ECF88(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stb r11,783(r31)
	PPC_STORE_U8(r31.u32 + 783, r11.u8);
loc_82158470:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82158498"))) PPC_WEAK_FUNC(sub_82158498);
PPC_FUNC_IMPL(__imp__sub_82158498) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bge cr6,0x821584b4
	if (!cr6.getLT()) goto loc_821584B4;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r10,r10,-29448
	ctx.r10.s64 = ctx.r10.s64 + -29448;
	// lbzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// blr 
	return;
loc_821584B4:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821584C0"))) PPC_WEAK_FUNC(sub_821584C0);
PPC_FUNC_IMPL(__imp__sub_821584C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bgelr cr6
	if (!cr6.getLT()) return;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// addi r10,r10,-29448
	ctx.r10.s64 = ctx.r10.s64 + -29448;
	// stbx r4,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, ctx.r4.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821584E0"))) PPC_WEAK_FUNC(sub_821584E0);
PPC_FUNC_IMPL(__imp__sub_821584E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_82158514:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x82158530
	if (cr6.getEQ()) goto loc_82158530;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x82158534
	if (!cr6.getEQ()) goto loc_82158534;
loc_82158530:
	// li r11,1
	r11.s64 = 1;
loc_82158534:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82158558
	if (!cr6.getEQ()) goto loc_82158558;
	// lwz r11,832(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 832);
	// cmpw cr6,r11,r31
	cr6.compare<int32_t>(r11.s32, r31.s32, xer);
	// beq cr6,0x8215855c
	if (cr6.getEQ()) goto loc_8215855C;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82158514
	goto loc_82158514;
loc_82158558:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8215855C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158570"))) PPC_WEAK_FUNC(sub_82158570);
PPC_FUNC_IMPL(__imp__sub_82158570) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_821585A4:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x821585c0
	if (cr6.getEQ()) goto loc_821585C0;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x821585c4
	if (!cr6.getEQ()) goto loc_821585C4;
loc_821585C0:
	// li r11,1
	r11.s64 = 1;
loc_821585C4:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821585e8
	if (!cr6.getEQ()) goto loc_821585E8;
	// ld r11,784(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 784);
	// cmpld cr6,r11,r31
	cr6.compare<uint64_t>(r11.u64, r31.u64, xer);
	// beq cr6,0x821585ec
	if (cr6.getEQ()) goto loc_821585EC;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x821585a4
	goto loc_821585A4;
loc_821585E8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_821585EC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158600"))) PPC_WEAK_FUNC(sub_82158600);
PPC_FUNC_IMPL(__imp__sub_82158600) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_82158634:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x82158650
	if (cr6.getEQ()) goto loc_82158650;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x82158654
	if (!cr6.getEQ()) goto loc_82158654;
loc_82158650:
	// li r11,1
	r11.s64 = 1;
loc_82158654:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82158678
	if (!cr6.getEQ()) goto loc_82158678;
	// lwz r11,820(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 820);
	// cmpw cr6,r11,r31
	cr6.compare<int32_t>(r11.s32, r31.s32, xer);
	// beq cr6,0x8215867c
	if (cr6.getEQ()) goto loc_8215867C;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82158634
	goto loc_82158634;
loc_82158678:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8215867C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158690"))) PPC_WEAK_FUNC(sub_82158690);
PPC_FUNC_IMPL(__imp__sub_82158690) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_821586C4:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x821586e0
	if (cr6.getEQ()) goto loc_821586E0;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x821586e4
	if (!cr6.getEQ()) goto loc_821586E4;
loc_821586E0:
	// li r11,1
	r11.s64 = 1;
loc_821586E4:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82158708
	if (!cr6.getEQ()) goto loc_82158708;
	// lwz r11,796(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 796);
	// cmpw cr6,r11,r31
	cr6.compare<int32_t>(r11.s32, r31.s32, xer);
	// beq cr6,0x8215870c
	if (cr6.getEQ()) goto loc_8215870C;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x821586c4
	goto loc_821586C4;
loc_82158708:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8215870C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158720"))) PPC_WEAK_FUNC(sub_82158720);
PPC_FUNC_IMPL(__imp__sub_82158720) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8214ba18
	sub_8214BA18(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// li r11,0
	r11.s64 = 0;
	// lfs f0,2944(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2944);
	f0.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stfs f0,128(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 128, temp.u32);
	// stb r11,768(r31)
	PPC_STORE_U8(r31.u32 + 768, r11.u8);
	// stfs f0,132(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 132, temp.u32);
	// std r11,784(r31)
	PPC_STORE_U64(r31.u32 + 784, r11.u64);
	// stb r11,792(r31)
	PPC_STORE_U8(r31.u32 + 792, r11.u8);
	// stb r11,793(r31)
	PPC_STORE_U8(r31.u32 + 793, r11.u8);
	// lfs f12,25732(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 25732);
	ctx.f12.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stfs f12,868(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + 868, temp.u32);
	// stb r11,800(r31)
	PPC_STORE_U8(r31.u32 + 800, r11.u8);
	// stw r11,804(r31)
	PPC_STORE_U32(r31.u32 + 804, r11.u32);
	// stw r11,808(r31)
	PPC_STORE_U32(r31.u32 + 808, r11.u32);
	// stw r11,812(r31)
	PPC_STORE_U32(r31.u32 + 812, r11.u32);
	// lfs f13,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	ctx.f13.f64 = double(temp.f32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stfs f13,872(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 872, temp.u32);
	// stb r11,801(r31)
	PPC_STORE_U8(r31.u32 + 801, r11.u8);
	// stfs f13,876(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 876, temp.u32);
	// stb r11,848(r31)
	PPC_STORE_U8(r31.u32 + 848, r11.u8);
	// stb r11,849(r31)
	PPC_STORE_U8(r31.u32 + 849, r11.u8);
	// stb r11,864(r31)
	PPC_STORE_U8(r31.u32 + 864, r11.u8);
	// stw r10,796(r31)
	PPC_STORE_U32(r31.u32 + 796, ctx.r10.u32);
	// stw r11,880(r31)
	PPC_STORE_U32(r31.u32 + 880, r11.u32);
	// stb r11,865(r31)
	PPC_STORE_U8(r31.u32 + 865, r11.u8);
	// stw r11,828(r31)
	PPC_STORE_U32(r31.u32 + 828, r11.u32);
	// stw r10,832(r31)
	PPC_STORE_U32(r31.u32 + 832, ctx.r10.u32);
	// stw r11,144(r31)
	PPC_STORE_U32(r31.u32 + 144, r11.u32);
	// stb r11,866(r31)
	PPC_STORE_U8(r31.u32 + 866, r11.u8);
	// stw r11,840(r31)
	PPC_STORE_U32(r31.u32 + 840, r11.u32);
	// stw r11,836(r31)
	PPC_STORE_U32(r31.u32 + 836, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821587D8"))) PPC_WEAK_FUNC(sub_821587D8);
PPC_FUNC_IMPL(__imp__sub_821587D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8214bae0
	sub_8214BAE0(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82158804
	if (cr6.getEQ()) goto loc_82158804;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,48(r11)
	PPC_STORE_U32(r11.u32 + 48, ctx.r10.u32);
loc_82158804:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158818"))) PPC_WEAK_FUNC(sub_82158818);
PPC_FUNC_IMPL(__imp__sub_82158818) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32250
	r11.s64 = -2113536000;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,11808
	r11.s64 = r11.s64 + 11808;
	// addi r9,r31,40
	ctx.r9.s64 = r31.s64 + 40;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r3,24(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lfs f31,2688(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f31.f64 = double(temp.f32);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r8,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// stfs f31,52(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// stb r10,56(r31)
	PPC_STORE_U8(r31.u32 + 56, ctx.r10.u8);
	// stw r11,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, r11.u32);
	// beq cr6,0x82158890
	if (cr6.getEQ()) goto loc_82158890;
	// bl 0x82166fc0
	sub_82166FC0(ctx, base);
	// lwz r3,24(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// li r4,4
	ctx.r4.s64 = 4;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82158890:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// stfs f31,80(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 80, temp.u32);
	// li r11,0
	r11.s64 = 0;
	// stfs f31,92(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 92, temp.u32);
	// stfs f31,872(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 872, temp.u32);
	// stfs f31,876(r31)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + 876, temp.u32);
	// lfs f0,25732(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 25732);
	f0.f64 = double(temp.f32);
	// stfs f0,868(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 868, temp.u32);
	// stb r11,865(r31)
	PPC_STORE_U8(r31.u32 + 865, r11.u8);
	// stb r11,816(r31)
	PPC_STORE_U8(r31.u32 + 816, r11.u8);
	// stw r11,880(r31)
	PPC_STORE_U32(r31.u32 + 880, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// lfd f31,-24(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821588D8"))) PPC_WEAK_FUNC(sub_821588D8);
PPC_FUNC_IMPL(__imp__sub_821588D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82158974
	if (cr6.getEQ()) goto loc_82158974;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r5,88(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x82158950
	if (cr6.getEQ()) goto loc_82158950;
	// addi r31,r30,1284
	r31.s64 = r30.s64 + 1284;
loc_82158930:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82176d88
	sub_82176D88(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r5,88(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x82158930
	if (!cr6.getEQ()) goto loc_82158930;
loc_82158950:
	// lwz r11,24(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82158974
	if (cr6.getEQ()) goto loc_82158974;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82158974:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158990"))) PPC_WEAK_FUNC(sub_82158990);
PPC_FUNC_IMPL(__imp__sub_82158990) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,832(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 832);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgelr cr6
	if (!cr6.getLT()) return;
	// lwz r8,12(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// lis r9,-31992
	ctx.r9.s64 = -2096627712;
	// lis r7,26843
	ctx.r7.s64 = 1759182848;
	// ori r7,r7,35757
	ctx.r7.u64 = ctx.r7.u64 | 35757;
	// lwz r8,52(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 52);
	// lwz r11,-29444(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -29444);
	// mulli r8,r8,10000
	ctx.r8.s64 = ctx.r8.s64 * 10000;
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// mulhw r11,r10,r7
	r11.s64 = (int64_t(ctx.r10.s32) * int64_t(ctx.r7.s32)) >> 32;
	// stw r8,832(r3)
	PPC_STORE_U32(ctx.r3.u32 + 832, ctx.r8.u32);
	// srawi r11,r11,12
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFF) != 0);
	r11.s64 = r11.s32 >> 12;
	// rlwinm r8,r11,1,31,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// mulli r11,r11,10000
	r11.s64 = r11.s64 * 10000;
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// stw r11,-29444(r9)
	PPC_STORE_U32(ctx.r9.u32 + -29444, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821589E8"))) PPC_WEAK_FUNC(sub_821589E8);
PPC_FUNC_IMPL(__imp__sub_821589E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x8214bb88
	sub_8214BB88(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r4,r31,100
	ctx.r4.s64 = r31.s64 + 100;
	// addi r3,r11,-29440
	ctx.r3.s64 = r11.s64 + -29440;
	// bl 0x8216b878
	sub_8216B878(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r11,-29380
	ctx.r3.s64 = r11.s64 + -29380;
	// bl 0x8216a950
	sub_8216A950(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r30,64(r31)
	PPC_STORE_U32(r31.u32 + 64, r30.u32);
	// stw r3,68(r31)
	PPC_STORE_U32(r31.u32 + 68, ctx.r3.u32);
	// stw r11,72(r31)
	PPC_STORE_U32(r31.u32 + 72, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158A68"))) PPC_WEAK_FUNC(sub_82158A68);
PPC_FUNC_IMPL(__imp__sub_82158A68) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r4,r31,100
	ctx.r4.s64 = r31.s64 + 100;
	// addi r3,r11,-29440
	ctx.r3.s64 = r11.s64 + -29440;
	// bl 0x8216b620
	sub_8216B620(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8214bb90
	sub_8214BB90(ctx, base);
	// li r11,4
	r11.s64 = 4;
	// addi r3,r31,884
	ctx.r3.s64 = r31.s64 + 884;
	// stw r11,72(r31)
	PPC_STORE_U32(r31.u32 + 72, r11.u32);
	// bl 0x82178e68
	sub_82178E68(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158AB8"))) PPC_WEAK_FUNC(sub_82158AB8);
PPC_FUNC_IMPL(__imp__sub_82158AB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r11,-29440
	ctx.r3.s64 = r11.s64 + -29440;
	// li r31,0
	r31.s64 = 0;
	// bl 0x8216abf8
	sub_8216ABF8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82158afc
	if (cr6.getEQ()) goto loc_82158AFC;
	// lwz r3,8(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82158afc
	if (cr6.getEQ()) goto loc_82158AFC;
	// lwz r11,96(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 96);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82158b00
	if (cr6.getEQ()) goto loc_82158B00;
loc_82158AFC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82158B00:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158B18"))) PPC_WEAK_FUNC(sub_82158B18);
PPC_FUNC_IMPL(__imp__sub_82158B18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r3,r11,-29380
	ctx.r3.s64 = r11.s64 + -29380;
	// b 0x8216a8d8
	sub_8216A8D8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82158B28"))) PPC_WEAK_FUNC(sub_82158B28);
PPC_FUNC_IMPL(__imp__sub_82158B28) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8214c1a0
	sub_8214C1A0(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lwz r10,104(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 104);
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x82158b6c
	if (cr6.getEQ()) goto loc_82158B6C;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82158B6C:
	// addi r30,r31,884
	r30.s64 = r31.s64 + 884;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82178e68
	sub_82178E68(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82177d28
	sub_82177D28(ctx, base);
	// lwz r11,796(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 796);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r11,r11,-29451
	r11.s64 = r11.s64 + -29451;
	// blt cr6,0x82158ba8
	if (cr6.getLT()) goto loc_82158BA8;
	// lbz r10,-1(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + -1);
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r10,255
	ctx.r10.s64 = ctx.r10.s64 + 255;
	// stw r9,796(r31)
	PPC_STORE_U32(r31.u32 + 796, ctx.r9.u32);
	// stb r10,-1(r11)
	PPC_STORE_U8(r11.u32 + -1, ctx.r10.u8);
loc_82158BA8:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r10,r10,255
	ctx.r10.s64 = ctx.r10.s64 + 255;
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158BD0"))) PPC_WEAK_FUNC(sub_82158BD0);
PPC_FUNC_IMPL(__imp__sub_82158BD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-29380
	r30.s64 = r11.s64 + -29380;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8216a9c0
	sub_8216A9C0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82158c14
	if (cr6.getEQ()) goto loc_82158C14;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8216a8e8
	sub_8216A8E8(ctx, base);
loc_82158C14:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158C30"))) PPC_WEAK_FUNC(sub_82158C30);
PPC_FUNC_IMPL(__imp__sub_82158C30) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lbz r11,116(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82158d20
	if (!cr6.getEQ()) goto loc_82158D20;
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// lbz r11,132(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82158d20
	if (cr6.getEQ()) goto loc_82158D20;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r29,1
	r29.s64 = 1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82158cfc
	if (cr6.getEQ()) goto loc_82158CFC;
loc_82158C8C:
	// lbz r10,132(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 132);
	// mr r31,r11
	r31.u64 = r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82158ce0
	if (cr6.getEQ()) goto loc_82158CE0;
	// addi r3,r11,468
	ctx.r3.s64 = r11.s64 + 468;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82158ce0
	if (!cr6.getEQ()) goto loc_82158CE0;
	// addi r3,r30,900
	ctx.r3.s64 = r30.s64 + 900;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82158cf8
	if (cr6.getEQ()) goto loc_82158CF8;
loc_82158CE0:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82158c8c
	if (!cr6.getEQ()) goto loc_82158C8C;
	// b 0x82158cfc
	goto loc_82158CFC;
loc_82158CF8:
	// li r29,0
	r29.s64 = 0;
loc_82158CFC:
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82158d20
	if (cr6.getEQ()) goto loc_82158D20;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82158D20:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82158D28"))) PPC_WEAK_FUNC(sub_82158D28);
PPC_FUNC_IMPL(__imp__sub_82158D28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// clrlwi r11,r4,24
	r11.u64 = ctx.r4.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stb r4,116(r31)
	PPC_STORE_U8(r31.u32 + 116, ctx.r4.u8);
	// beq cr6,0x82158d7c
	if (cr6.getEQ()) goto loc_82158D7C;
	// bl 0x8215fd20
	sub_8215FD20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82158d7c
	if (!cr6.getEQ()) goto loc_82158D7C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r30,820(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 820);
	// ld r31,784(r31)
	r31.u64 = PPC_LOAD_U64(r31.u32 + 784);
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x8215fa10
	sub_8215FA10(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// bl 0x8214d088
	sub_8214D088(ctx, base);
loc_82158D7C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82158D88"))) PPC_WEAK_FUNC(sub_82158D88);
PPC_FUNC_IMPL(__imp__sub_82158D88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8214be00
	sub_8214BE00(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,880(r31)
	PPC_STORE_U32(r31.u32 + 880, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158DC0"))) PPC_WEAK_FUNC(sub_82158DC0);
PPC_FUNC_IMPL(__imp__sub_82158DC0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8214bcc8
	sub_8214BCC8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stb r11,865(r31)
	PPC_STORE_U8(r31.u32 + 865, r11.u8);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158DF8"))) PPC_WEAK_FUNC(sub_82158DF8);
PPC_FUNC_IMPL(__imp__sub_82158DF8) {
	PPC_FUNC_PROLOGUE();
	// b 0x8214bfa0
	sub_8214BFA0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82158E00"))) PPC_WEAK_FUNC(sub_82158E00);
PPC_FUNC_IMPL(__imp__sub_82158E00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// addi r10,r3,16
	ctx.r10.s64 = ctx.r3.s64 + 16;
	// li r11,1
	r11.s64 = 1;
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// beq cr6,0x82158e38
	if (cr6.getEQ()) goto loc_82158E38;
	// lwz r10,344(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 344);
	// lbz r10,116(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 116);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82158e34
	if (cr6.getEQ()) goto loc_82158E34;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x82158e38
	if (cr6.getEQ()) goto loc_82158E38;
	// lbz r10,133(r5)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r5.u32 + 133);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82158e38
	if (!cr6.getEQ()) goto loc_82158E38;
loc_82158E34:
	// li r11,0
	r11.s64 = 0;
loc_82158E38:
	// clrlwi r10,r11,24
	ctx.r10.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82158e48
	if (cr6.getEQ()) goto loc_82158E48;
	// b 0x8214b850
	sub_8214B850(ctx, base);
	return;
loc_82158E48:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158E50"))) PPC_WEAK_FUNC(sub_82158E50);
PPC_FUNC_IMPL(__imp__sub_82158E50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r31,r11,-29352
	r31.s64 = r11.s64 + -29352;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// addi r3,r30,660
	ctx.r3.s64 = r30.s64 + 660;
	// lwz r4,448(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// bl 0x82177480
	sub_82177480(ctx, base);
	// addi r3,r30,712
	ctx.r3.s64 = r30.s64 + 712;
	// lwz r4,492(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 492);
	// bl 0x82177480
	sub_82177480(ctx, base);
	// addi r3,r30,1024
	ctx.r3.s64 = r30.s64 + 1024;
	// lwz r4,748(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 748);
	// bl 0x82177480
	sub_82177480(ctx, base);
	// addi r29,r30,764
	r29.s64 = r30.s64 + 764;
	// addi r30,r31,536
	r30.s64 = r31.s64 + 536;
loc_82158E9C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// bl 0x82177480
	sub_82177480(ctx, base);
	// addi r30,r30,44
	r30.s64 = r30.s64 + 44;
	// addi r11,r31,712
	r11.s64 = r31.s64 + 712;
	// addi r29,r29,52
	r29.s64 = r29.s64 + 52;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x82158e9c
	if (cr6.getLT()) goto loc_82158E9C;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82158EC8"))) PPC_WEAK_FUNC(sub_82158EC8);
PPC_FUNC_IMPL(__imp__sub_82158EC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8217aa40
	sub_8217AA40(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r3,r31,660
	ctx.r3.s64 = r31.s64 + 660;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82158ef8
	if (!cr6.getEQ()) goto loc_82158EF8;
	// li r29,0
	r29.s64 = 0;
loc_82158EF8:
	// addi r3,r31,712
	ctx.r3.s64 = r31.s64 + 712;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82158f10
	if (!cr6.getEQ()) goto loc_82158F10;
	// li r29,0
	r29.s64 = 0;
loc_82158F10:
	// addi r3,r31,1024
	ctx.r3.s64 = r31.s64 + 1024;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82158f28
	if (!cr6.getEQ()) goto loc_82158F28;
	// li r29,0
	r29.s64 = 0;
loc_82158F28:
	// addi r30,r31,764
	r30.s64 = r31.s64 + 764;
	// li r31,4
	r31.s64 = 4;
loc_82158F30:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82158f48
	if (!cr6.getEQ()) goto loc_82158F48;
	// li r29,0
	r29.s64 = 0;
loc_82158F48:
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r30,r30,52
	r30.s64 = r30.s64 + 52;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82158f30
	if (!cr6.getEQ()) goto loc_82158F30;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82158F68"))) PPC_WEAK_FUNC(sub_82158F68);
PPC_FUNC_IMPL(__imp__sub_82158F68) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r11,-29352
	r30.s64 = r11.s64 + -29352;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// addi r3,r31,972
	ctx.r3.s64 = r31.s64 + 972;
	// lbz r4,712(r30)
	ctx.r4.u64 = PPC_LOAD_U8(r30.u32 + 712);
	// bl 0x82177218
	sub_82177218(ctx, base);
	// addi r3,r31,504
	ctx.r3.s64 = r31.s64 + 504;
	// lbz r4,340(r30)
	ctx.r4.u64 = PPC_LOAD_U8(r30.u32 + 340);
	// bl 0x82176e40
	sub_82176E40(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82158FC0"))) PPC_WEAK_FUNC(sub_82158FC0);
PPC_FUNC_IMPL(__imp__sub_82158FC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8217aa40
	sub_8217AA40(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r3,r31,972
	ctx.r3.s64 = r31.s64 + 972;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82158ff8
	if (!cr6.getEQ()) goto loc_82158FF8;
	// li r30,0
	r30.s64 = 0;
loc_82158FF8:
	// addi r3,r31,504
	ctx.r3.s64 = r31.s64 + 504;
	// bl 0x821762a8
	sub_821762A8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159014
	if (cr6.getEQ()) goto loc_82159014;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_82159014:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82159030"))) PPC_WEAK_FUNC(sub_82159030);
PPC_FUNC_IMPL(__imp__sub_82159030) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r31,1
	r31.s64 = 1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_82159064:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x82159080
	if (cr6.getEQ()) goto loc_82159080;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x82159084
	if (!cr6.getEQ()) goto loc_82159084;
loc_82159080:
	// li r11,1
	r11.s64 = 1;
loc_82159084:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821590c8
	if (!cr6.getEQ()) goto loc_821590C8;
	// addi r3,r10,1336
	ctx.r3.s64 = ctx.r10.s64 + 1336;
	// bl 0x82176490
	sub_82176490(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821590b0
	if (cr6.getEQ()) goto loc_821590B0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82159064
	goto loc_82159064;
loc_821590B0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_821590C8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821590E0"))) PPC_WEAK_FUNC(sub_821590E0);
PPC_FUNC_IMPL(__imp__sub_821590E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r3,r31,1336
	ctx.r3.s64 = r31.s64 + 1336;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// stw r11,844(r31)
	PPC_STORE_U32(r31.u32 + 844, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82159128"))) PPC_WEAK_FUNC(sub_82159128);
PPC_FUNC_IMPL(__imp__sub_82159128) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82159164
	if (!cr6.getEQ()) goto loc_82159164;
	// lwz r3,844(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 844);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82159164:
	// addi r3,r31,1336
	ctx.r3.s64 = r31.s64 + 1336;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r3,r3,24
	ctx.r3.u64 = ctx.r3.u32 & 0xFF;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82159190"))) PPC_WEAK_FUNC(sub_82159190);
PPC_FUNC_IMPL(__imp__sub_82159190) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r28,88(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x8215922c
	if (cr6.getEQ()) goto loc_8215922C;
	// addi r26,r31,2324
	r26.s64 = r31.s64 + 2324;
loc_821591D4:
	// li r29,0
	r29.s64 = 0;
	// mr r31,r26
	r31.u64 = r26.u64;
loc_821591DC:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r30,104(r27)
	r30.u64 = PPC_LOAD_U32(r27.u32 + 104);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// extsb r10,r3
	ctx.r10.s64 = ctx.r3.s8;
	// extsb r11,r30
	r11.s64 = r30.s8;
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// beq cr6,0x82159238
	if (cr6.getEQ()) goto loc_82159238;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r31,r31,52
	r31.s64 = r31.s64 + 52;
	// cmpwi cr6,r29,4
	cr6.compare<int32_t>(r29.s32, 4, xer);
	// blt cr6,0x821591dc
	if (cr6.getLT()) goto loc_821591DC;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r28,88(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x821591d4
	if (!cr6.getEQ()) goto loc_821591D4;
loc_8215922C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
loc_82159238:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82159248"))) PPC_WEAK_FUNC(sub_82159248);
PPC_FUNC_IMPL(__imp__sub_82159248) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_82159274:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x82159290
	if (cr6.getEQ()) goto loc_82159290;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x82159294
	if (!cr6.getEQ()) goto loc_82159294;
loc_82159290:
	// li r11,1
	r11.s64 = 1;
loc_82159294:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821592b0
	if (!cr6.getEQ()) goto loc_821592B0;
	// bl 0x82158818
	sub_82158818(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x82159274
	goto loc_82159274;
loc_821592B0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_821592C0"))) PPC_WEAK_FUNC(sub_821592C0);
PPC_FUNC_IMPL(__imp__sub_821592C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_821592EC:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beq cr6,0x82159308
	if (cr6.getEQ()) goto loc_82159308;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8215930c
	if (!cr6.getEQ()) goto loc_8215930C;
loc_82159308:
	// li r11,1
	r11.s64 = 1;
loc_8215930C:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82159328
	if (!cr6.getEQ()) goto loc_82159328;
	// bl 0x821588d8
	sub_821588D8(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x821592ec
	goto loc_821592EC;
loc_82159328:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82159338"))) PPC_WEAK_FUNC(sub_82159338);
PPC_FUNC_IMPL(__imp__sub_82159338) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x821593a4
	if (!cr6.getEQ()) goto loc_821593A4;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x8215938c
	if (cr6.getEQ()) goto loc_8215938C;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82183ae8
	sub_82183AE8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821593a4
	if (!cr6.getEQ()) goto loc_821593A4;
loc_8215938C:
	// li r4,10
	ctx.r4.s64 = 10;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8215fc50
	sub_8215FC50(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
loc_821593A4:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821593d4
	if (cr6.getEQ()) goto loc_821593D4;
	// clrlwi r11,r26,24
	r11.u64 = r26.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821593d4
	if (!cr6.getEQ()) goto loc_821593D4;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82165838
	sub_82165838(ctx, base);
	// b 0x821593e8
	goto loc_821593E8;
loc_821593D4:
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82158208
	sub_82158208(ctx, base);
loc_821593E8:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215940c
	if (cr6.getEQ()) goto loc_8215940C;
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bge cr6,0x8215940c
	if (!cr6.getLT()) goto loc_8215940C;
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// li r9,1
	ctx.r9.s64 = 1;
	// addi r10,r10,-29448
	ctx.r10.s64 = ctx.r10.s64 + -29448;
	// stbx r9,r11,r10
	PPC_STORE_U8(r11.u32 + ctx.r10.u32, ctx.r9.u8);
loc_8215940C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82159418"))) PPC_WEAK_FUNC(sub_82159418);
PPC_FUNC_IMPL(__imp__sub_82159418) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// li r28,0
	r28.s64 = 0;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159584
	if (cr6.getEQ()) goto loc_82159584;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8217f308
	sub_8217F308(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// lis r30,-31993
	r30.s64 = -2096693248;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159490
	if (cr6.getEQ()) goto loc_82159490;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// addi r3,r11,1044
	ctx.r3.s64 = r11.s64 + 1044;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82159490
	if (!cr6.getEQ()) goto loc_82159490;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
loc_82159490:
	// bl 0x821603d8
	sub_821603D8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82159584
	if (!cr6.getEQ()) goto loc_82159584;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x821594c8
	if (!cr6.getEQ()) goto loc_821594C8;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r11,988
	ctx.r3.s64 = r11.s64 + 988;
	// bl 0x821562a8
	sub_821562A8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82159584
	if (!cr6.getEQ()) goto loc_82159584;
loc_821594C8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183ae0
	sub_82183AE0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159568
	if (cr6.getEQ()) goto loc_82159568;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x82159514
	if (!cr6.getEQ()) goto loc_82159514;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183ae8
	sub_82183AE8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159584
	if (cr6.getEQ()) goto loc_82159584;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183990
	sub_82183990(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159584
	if (cr6.getEQ()) goto loc_82159584;
loc_82159514:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r30,r1,80
	r30.s64 = ctx.r1.s64 + 80;
	// bl 0x82183850
	sub_82183850(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r5,16
	ctx.r5.s64 = 16;
	// bl 0x82182938
	sub_82182938(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r30,r1,80
	r30.s64 = ctx.r1.s64 + 80;
	// bl 0x82183990
	sub_82183990(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82183858
	sub_82183858(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// bl 0x82159338
	sub_82159338(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
loc_82159568:
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// li r3,4
	ctx.r3.s64 = 4;
	// li r4,2
	ctx.r4.s64 = 2;
	// beq cr6,0x82159580
	if (cr6.getEQ()) goto loc_82159580;
	// li r4,1
	ctx.r4.s64 = 1;
loc_82159580:
	// bl 0x8235d788
	sub_8235D788(ctx, base);
loc_82159584:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_82159590"))) PPC_WEAK_FUNC(sub_82159590);
PPC_FUNC_IMPL(__imp__sub_82159590) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r6,2
	ctx.r6.s64 = 2;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
loc_821595C8:
	// lwz r31,92(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x821595e4
	if (cr6.getEQ()) goto loc_821595E4;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x821595e8
	if (!cr6.getEQ()) goto loc_821595E8;
loc_821595E4:
	// li r11,1
	r11.s64 = 1;
loc_821595E8:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82159640
	if (!cr6.getEQ()) goto loc_82159640;
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215960c
	if (!cr6.getEQ()) goto loc_8215960C;
	// lwz r11,844(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 844);
	// b 0x82159624
	goto loc_82159624;
loc_8215960C:
	// addi r3,r31,1336
	ctx.r3.s64 = r31.s64 + 1336;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
loc_82159624:
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// beq cr6,0x82159638
	if (cr6.getEQ()) goto loc_82159638;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x821595c8
	goto loc_821595C8;
loc_82159638:
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// b 0x82159644
	goto loc_82159644;
loc_82159640:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82159644:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82159660"))) PPC_WEAK_FUNC(sub_82159660);
PPC_FUNC_IMPL(__imp__sub_82159660) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82159830
	if (!cr6.getEQ()) goto loc_82159830;
	// bl 0x820ca958
	sub_820CA958(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r27,0
	r27.s64 = 0;
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
loc_821596B0:
	// lwz r30,108(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// beq cr6,0x821596cc
	if (cr6.getEQ()) goto loc_821596CC;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// mr r11,r27
	r11.u64 = r27.u64;
	// bne cr6,0x821596d0
	if (!cr6.getEQ()) goto loc_821596D0;
loc_821596CC:
	// li r11,1
	r11.s64 = 1;
loc_821596D0:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821598b0
	if (!cr6.getEQ()) goto loc_821598B0;
	// li r29,1
	r29.s64 = 1;
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8215971c
	if (cr6.getEQ()) goto loc_8215971C;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82159748
	if (cr6.getEQ()) goto loc_82159748;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82159748
	if (cr6.getEQ()) goto loc_82159748;
	// addi r3,r30,1388
	ctx.r3.s64 = r30.s64 + 1388;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8215974c
	goto loc_8215974C;
loc_8215971C:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82159748
	if (cr6.getEQ()) goto loc_82159748;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82159748
	if (cr6.getEQ()) goto loc_82159748;
	// addi r3,r30,1388
	ctx.r3.s64 = r30.s64 + 1388;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x8215974c
	goto loc_8215974C;
loc_82159748:
	// li r3,-1
	ctx.r3.s64 = -1;
loc_8215974C:
	// extsb r31,r3
	r31.s64 = ctx.r3.s8;
	// cmpwi cr6,r31,-1
	cr6.compare<int32_t>(r31.s32, -1, xer);
	// bne cr6,0x8215975c
	if (!cr6.getEQ()) goto loc_8215975C;
	// mr r29,r27
	r29.u64 = r27.u64;
loc_8215975C:
	// lbz r11,865(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 865);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159824
	if (cr6.getEQ()) goto loc_82159824;
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159824
	if (cr6.getEQ()) goto loc_82159824;
	// bl 0x82170b08
	sub_82170B08(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159824
	if (cr6.getEQ()) goto loc_82159824;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820af838
	sub_820AF838(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82159824
	if (cr6.getEQ()) goto loc_82159824;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// blt cr6,0x82159824
	if (cr6.getLT()) goto loc_82159824;
	// lfs f0,0(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// lfs f0,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,84(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// lfs f0,8(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,88(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// lhz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// lbz r6,2(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// bl 0x820ca6d0
	sub_820CA6D0(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,56(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 56);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8216fc60
	sub_8216FC60(ctx, base);
	// stb r27,865(r30)
	PPC_STORE_U8(r30.u32 + 865, r27.u8);
loc_82159824:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x821596b0
	goto loc_821596B0;
loc_82159830:
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821598b0
	if (cr6.getEQ()) goto loc_821598B0;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r31,0
	r31.s64 = 0;
	// addi r30,r11,-29448
	r30.s64 = r11.s64 + -29448;
loc_82159848:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b19b0
	sub_823B19B0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x821598a4
	if (cr6.getEQ()) goto loc_821598A4;
	// li r4,4096
	ctx.r4.s64 = 4096;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820a05b8
	sub_820A05B8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821598a4
	if (cr6.getEQ()) goto loc_821598A4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82158600
	sub_82158600(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x821598a4
	if (!cr6.getEQ()) goto loc_821598A4;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82159418
	sub_82159418(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x821598a4
	if (cr6.getEQ()) goto loc_821598A4;
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bge cr6,0x821598a4
	if (!cr6.getLT()) goto loc_821598A4;
	// li r10,1
	ctx.r10.s64 = 1;
	// stbx r10,r11,r30
	PPC_STORE_U8(r11.u32 + r30.u32, ctx.r10.u8);
loc_821598A4:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// cmpwi cr6,r31,3
	cr6.compare<int32_t>(r31.s32, 3, xer);
	// ble cr6,0x82159848
	if (!cr6.getGT()) goto loc_82159848;
loc_821598B0:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_821598C0"))) PPC_WEAK_FUNC(sub_821598C0);
PPC_FUNC_IMPL(__imp__sub_821598C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821599c0
	if (cr6.getEQ()) goto loc_821599C0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x821599c0
	if (cr6.getEQ()) goto loc_821599C0;
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x821599c0
	if (!cr6.getEQ()) goto loc_821599C0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-1384
	r11.s64 = r11.s64 + -1384;
	// lwzx r30,r10,r11
	r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x821599b8
	if (cr6.getEQ()) goto loc_821599B8;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// clrlwi r4,r28,24
	ctx.r4.u64 = r28.u32 & 0xFF;
	// addi r3,r31,1440
	ctx.r3.s64 = r31.s64 + 1440;
	// bl 0x82177218
	sub_82177218(ctx, base);
	// clrlwi r4,r29,24
	ctx.r4.u64 = r29.u32 & 0xFF;
	// addi r3,r31,1492
	ctx.r3.s64 = r31.s64 + 1492;
	// bl 0x82177218
	sub_82177218(ctx, base);
	// cmpwi cr6,r29,3
	cr6.compare<int32_t>(r29.s32, 3, xer);
	// bne cr6,0x82159990
	if (!cr6.getEQ()) goto loc_82159990;
	// lwz r11,2380(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 2380);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82159990
	if (!cr6.getEQ()) goto loc_82159990;
	// lwz r11,2388(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 2388);
	// li r4,0
	ctx.r4.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82159994
	if (cr6.getEQ()) goto loc_82159994;
loc_82159990:
	// li r4,1
	ctx.r4.s64 = 1;
loc_82159994:
	// addi r3,r31,2272
	ctx.r3.s64 = r31.s64 + 2272;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
	// lwz r11,416(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 416);
	// addi r3,r31,1176
	ctx.r3.s64 = r31.s64 + 1176;
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_821599B8:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
loc_821599C0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_821599C8"))) PPC_WEAK_FUNC(sub_821599C8);
PPC_FUNC_IMPL(__imp__sub_821599C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x823d22e0
	sub_823D22E0(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8216c150
	sub_8216C150(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159bd8
	if (cr6.getEQ()) goto loc_82159BD8;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159bd8
	if (cr6.getEQ()) goto loc_82159BD8;
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82159bd8
	if (!cr6.getEQ()) goto loc_82159BD8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// lis r11,-32014
	r11.s64 = -2098069504;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-1384
	r11.s64 = r11.s64 + -1384;
	// lwzx r27,r10,r11
	r27.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82159bd0
	if (cr6.getEQ()) goto loc_82159BD0;
	// lwz r11,428(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 428);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159bd0
	if (cr6.getEQ()) goto loc_82159BD0;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a0d30
	sub_820A0D30(ctx, base);
	// addi r31,r30,1440
	r31.s64 = r30.s64 + 1440;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// beq cr6,0x82159ae0
	if (cr6.getEQ()) goto loc_82159AE0;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x820a6f10
	sub_820A6F10(ctx, base);
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// beq cr6,0x82159ae0
	if (cr6.getEQ()) goto loc_82159AE0;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
loc_82159AE0:
	// addi r31,r30,1492
	r31.s64 = r30.s64 + 1492;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmpw cr6,r28,r11
	cr6.compare<int32_t>(r28.s32, r11.s32, xer);
	// beq cr6,0x82159b58
	if (cr6.getEQ()) goto loc_82159B58;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x820a6f10
	sub_820A6F10(ctx, base);
	// clrlwi r11,r29,24
	r11.u64 = r29.u32 & 0xFF;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// beq cr6,0x82159b58
	if (cr6.getEQ()) goto loc_82159B58;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x820a0cf8
	sub_820A0CF8(ctx, base);
loc_82159B58:
	// lwz r11,2344(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 2344);
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x82159b98
	if (!cr6.getEQ()) goto loc_82159B98;
	// lwz r11,2380(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 2380);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82159b98
	if (!cr6.getEQ()) goto loc_82159B98;
	// addi r3,r30,2272
	ctx.r3.s64 = r30.s64 + 2272;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82159b98
	if (!cr6.getEQ()) goto loc_82159B98;
	// stw r11,2388(r27)
	PPC_STORE_U32(r27.u32 + 2388, r11.u32);
	// b 0x82159b9c
	goto loc_82159B9C;
loc_82159B98:
	// li r11,999
	r11.s64 = 999;
loc_82159B9C:
	// addi r3,r30,1176
	ctx.r3.s64 = r30.s64 + 1176;
	// stw r11,4620(r27)
	PPC_STORE_U32(r27.u32 + 4620, r11.u32);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// li r4,0
	ctx.r4.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r3,-2
	ctx.r3.s64 = -2;
	// bne cr6,0x82159bcc
	if (!cr6.getEQ()) goto loc_82159BCC;
	// li r3,2
	ctx.r3.s64 = 2;
loc_82159BCC:
	// bl 0x820b0000
	sub_820B0000(ctx, base);
loc_82159BD0:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
loc_82159BD8:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_82159BE0"))) PPC_WEAK_FUNC(sub_82159BE0);
PPC_FUNC_IMPL(__imp__sub_82159BE0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x8214bea8
	sub_8214BEA8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,880(r30)
	PPC_STORE_U32(r30.u32 + 880, r11.u32);
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82159c14
	if (!cr6.getEQ()) goto loc_82159C14;
	// lwz r31,844(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 844);
	// b 0x82159c2c
	goto loc_82159C2C;
loc_82159C14:
	// addi r3,r30,1336
	ctx.r3.s64 = r30.s64 + 1336;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r31,r3,24
	r31.u64 = ctx.r3.u32 & 0xFF;
loc_82159C2C:
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// bl 0x820bf568
	sub_820BF568(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// bl 0x82182470
	sub_82182470(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82159c5c
	if (cr6.getEQ()) goto loc_82159C5C;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82182728
	sub_82182728(ctx, base);
loc_82159C5C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_82159C68"))) PPC_WEAK_FUNC(sub_82159C68);
PPC_FUNC_IMPL(__imp__sub_82159C68) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// addi r12,r1,-56
	r12.s64 = ctx.r1.s64 + -56;
	// bl 0x823ed540
	// stwu r1,-384(r1)
	ea = -384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// bl 0x8216c150
	sub_8216C150(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215a148
	if (cr6.getEQ()) goto loc_8215A148;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// bl 0x821672a8
	sub_821672A8(ctx, base);
	// li r27,1
	r27.s64 = 1;
	// li r30,0
	r30.s64 = 0;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// mr r11,r27
	r11.u64 = r27.u64;
	// bgt cr6,0x82159cb4
	if (cr6.getGT()) goto loc_82159CB4;
	// mr r11,r30
	r11.u64 = r30.u64;
loc_82159CB4:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215a148
	if (cr6.getEQ()) goto loc_8215A148;
	// bl 0x820c9b80
	sub_820C9B80(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82159128
	sub_82159128(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8215a140
	if (cr6.getLT()) goto loc_8215A140;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stb r30,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, r30.u8);
	// sth r30,118(r1)
	PPC_STORE_U16(ctx.r1.u32 + 118, r30.u16);
	// stb r30,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, r30.u8);
	// stb r30,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, r30.u8);
	// stb r30,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, r30.u8);
	// lfs f31,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f31.f64 = double(temp.f32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stfs f31,120(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// stb r30,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, r30.u8);
	// stfs f31,124(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 124, temp.u32);
	// stw r30,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, r30.u32);
	// stb r30,232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 232, r30.u8);
	// stw r30,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r30.u32);
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// stw r11,228(r1)
	PPC_STORE_U32(ctx.r1.u32 + 228, r11.u32);
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
	// addi r7,r1,118
	ctx.r7.s64 = ctx.r1.s64 + 118;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// addi r5,r1,224
	ctx.r5.s64 = ctx.r1.s64 + 224;
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// addi r10,r1,114
	ctx.r10.s64 = ctx.r1.s64 + 114;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// addi r9,r1,113
	ctx.r9.s64 = ctx.r1.s64 + 113;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// addi r8,r1,115
	ctx.r8.s64 = ctx.r1.s64 + 115;
	// stw r5,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r5.u32);
	// addi r7,r1,116
	ctx.r7.s64 = ctx.r1.s64 + 116;
	// addi r6,r1,124
	ctx.r6.s64 = ctx.r1.s64 + 124;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// addi r5,r1,120
	ctx.r5.s64 = ctx.r1.s64 + 120;
	// addi r4,r1,208
	ctx.r4.s64 = ctx.r1.s64 + 208;
	// bl 0x82169500
	sub_82169500(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lis r29,-32014
	r29.s64 = -2098069504;
	// lfs f13,120(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,-29348(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -29348);
	f0.f64 = double(temp.f32);
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// fmuls f27,f13,f0
	f27.f64 = double(float(ctx.f13.f64 * f0.f64));
	// lfs f13,124(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f26,f13,f0
	f26.f64 = double(float(ctx.f13.f64 * f0.f64));
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215a140
	if (cr6.getEQ()) goto loc_8215A140;
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8215a140
	if (cr6.getEQ()) goto loc_8215A140;
	// rotlwi r10,r10,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// lfs f0,52(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 52);
	f0.f64 = double(temp.f32);
	// lfs f13,12(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,176(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 176, temp.u32);
	// lwz r10,428(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lfs f13,16(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,180(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 180, temp.u32);
	// lwz r11,428(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 428);
	// lfs f13,20(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 20);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// stfs f13,184(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 184, temp.u32);
	// lfs f13,17852(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 17852);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// lfs f12,-29352(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -29352);
	ctx.f12.f64 = double(temp.f32);
	// bge cr6,0x82159ddc
	if (!cr6.getLT()) goto loc_82159DDC;
	// stfs f13,52(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// b 0x82159de8
	goto loc_82159DE8;
loc_82159DDC:
	// fcmpu cr6,f0,f12
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x82159de8
	if (!cr6.getGT()) goto loc_82159DE8;
	// stfs f12,52(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
loc_82159DE8:
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lfs f11,52(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 52);
	ctx.f11.f64 = double(temp.f32);
	// cmplwi cr6,r11,250
	cr6.compare<uint32_t>(r11.u32, 250, xer);
	// bge cr6,0x82159e04
	if (!cr6.getLT()) goto loc_82159E04;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,15304(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 15304);
	f0.f64 = double(temp.f32);
	// b 0x82159e0c
	goto loc_82159E0C;
loc_82159E04:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lfs f0,-29356(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -29356);
	f0.f64 = double(temp.f32);
loc_82159E0C:
	// fmuls f0,f11,f0
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f11.f64 * f0.f64));
	// stfs f0,52(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// bge cr6,0x82159e24
	if (!cr6.getLT()) goto loc_82159E24;
	// stfs f13,52(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
	// b 0x82159e30
	goto loc_82159E30;
loc_82159E24:
	// fcmpu cr6,f0,f12
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, ctx.f12.f64);
	// ble cr6,0x82159e30
	if (!cr6.getGT()) goto loc_82159E30;
	// stfs f12,52(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r31.u32 + 52, temp.u32);
loc_82159E30:
	// lbz r11,113(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 113);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82159e54
	if (cr6.getEQ()) goto loc_82159E54;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r27,56(r31)
	PPC_STORE_U8(r31.u32 + 56, r27.u8);
	// lwz r11,60(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 60);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82159E54:
	// lbz r11,56(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 56);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32250
	r11.s64 = -2113536000;
	// addi r28,r11,11808
	r28.s64 = r11.s64 + 11808;
	// beq cr6,0x82159e90
	if (cr6.getEQ()) goto loc_82159E90;
	// mr r11,r28
	r11.u64 = r28.u64;
	// stb r30,56(r31)
	PPC_STORE_U8(r31.u32 + 56, r30.u8);
	// addi r10,r31,40
	ctx.r10.s64 = r31.s64 + 40;
	// mr r27,r30
	r27.u64 = r30.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// stw r11,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r11.u32);
loc_82159E90:
	// clrlwi r11,r27,24
	r11.u64 = r27.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215a0d8
	if (cr6.getEQ()) goto loc_8215A0D8;
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x8238aaf8
	sub_8238AAF8(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8238c7c0
	sub_8238C7C0(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	f29.f64 = ctx.f1.f64;
	// bl 0x8238c7c0
	sub_8238C7C0(ctx, base);
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// ble cr6,0x82159ed4
	if (!cr6.getGT()) goto loc_82159ED4;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8238c750
	sub_8238C750(ctx, base);
loc_82159ED4:
	// addi r30,r31,40
	r30.s64 = r31.s64 + 40;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8238c558
	sub_8238C558(ctx, base);
	// addi r4,r1,256
	ctx.r4.s64 = ctx.r1.s64 + 256;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stfs f1,136(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// bl 0x8238c580
	sub_8238C580(ctx, base);
	// addi r5,r1,240
	ctx.r5.s64 = ctx.r1.s64 + 240;
	// addi r4,r1,256
	ctx.r4.s64 = ctx.r1.s64 + 256;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8238aaf8
	sub_8238AAF8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f8,f28
	ctx.fpscr.disableFlushMode();
	ctx.f8.f64 = f28.f64;
	// lfs f0,12900(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12900);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f28,f0
	cr6.compare(f28.f64, f0.f64);
	// ble cr6,0x82159f1c
	if (!cr6.getGT()) goto loc_82159F1C;
	// fmr f8,f0
	ctx.f8.f64 = f0.f64;
loc_82159F1C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f4,52(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 52);
	ctx.f4.f64 = double(temp.f32);
	// addi r5,r1,136
	ctx.r5.s64 = ctx.r1.s64 + 136;
	// stfs f31,132(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// fmr f3,f4
	ctx.f3.f64 = ctx.f4.f64;
	// lfs f30,2776(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f30.f64 = double(temp.f32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fmr f7,f30
	ctx.f7.f64 = f30.f64;
	// lfs f6,2944(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2944);
	ctx.f6.f64 = double(temp.f32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lfs f5,-29360(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -29360);
	ctx.f5.f64 = double(temp.f32);
	// bl 0x82188540
	sub_82188540(ctx, base);
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// addi r6,r1,160
	ctx.r6.s64 = ctx.r1.s64 + 160;
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// lfs f1,132(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	ctx.f1.f64 = double(temp.f32);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stw r11,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, r11.u32);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// stw r11,244(r1)
	PPC_STORE_U32(ctx.r1.u32 + 244, r11.u32);
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// stw r11,248(r1)
	PPC_STORE_U32(ctx.r1.u32 + 248, r11.u32);
	// bl 0x8238c680
	sub_8238C680(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8238aaf8
	sub_8238AAF8(ctx, base);
	// fdivs f29,f30,f28
	ctx.fpscr.disableFlushMode();
	f29.f64 = double(float(f30.f64 / f28.f64));
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f1,f29
	ctx.f1.f64 = f29.f64;
	// bl 0x8238c580
	sub_8238C580(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// lhz r7,118(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 118);
	// lbz r6,112(r1)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r1.u32 + 112);
	// fmr f2,f26
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f26.f64;
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// bl 0x820ca5a0
	sub_820CA5A0(ctx, base);
	// addi r5,r1,192
	ctx.r5.s64 = ctx.r1.s64 + 192;
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8238aaf8
	sub_8238AAF8(ctx, base);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// stfs f31,196(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 196, temp.u32);
	// bl 0x8238c7c0
	sub_8238C7C0(ctx, base);
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	f28.f64 = ctx.f1.f64;
	// fcmpu cr6,f28,f31
	cr6.compare(f28.f64, f31.f64);
	// beq cr6,0x8215a0c8
	if (cr6.getEQ()) goto loc_8215A0C8;
	// lfs f2,200(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	ctx.f2.f64 = double(temp.f32);
	// lfs f1,192(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8238cc60
	sub_8238CC60(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// fcmpu cr6,f1,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f31.f64);
	// lfs f0,6588(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 6588);
	f0.f64 = double(temp.f32);
	// bge cr6,0x8215a010
	if (!cr6.getLT()) goto loc_8215A010;
loc_8215A004:
	// fadds f1,f1,f0
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = double(float(ctx.f1.f64 + f0.f64));
	// fcmpu cr6,f1,f31
	cr6.compare(ctx.f1.f64, f31.f64);
	// blt cr6,0x8215a004
	if (cr6.getLT()) goto loc_8215A004;
loc_8215A010:
	// fcmpu cr6,f1,f0
	ctx.fpscr.disableFlushMode();
	cr6.compare(ctx.f1.f64, f0.f64);
	// blt cr6,0x8215a024
	if (cr6.getLT()) goto loc_8215A024;
loc_8215A018:
	// fsubs f1,f1,f0
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = double(float(ctx.f1.f64 - f0.f64));
	// fcmpu cr6,f1,f0
	cr6.compare(ctx.f1.f64, f0.f64);
	// bge cr6,0x8215a018
	if (!cr6.getLT()) goto loc_8215A018;
loc_8215A024:
	// lfs f13,120(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f0,f0,f13
	f0.f64 = double(float(f0.f64 - ctx.f13.f64));
	// fsubs f31,f1,f0
	f31.f64 = double(float(ctx.f1.f64 - f0.f64));
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// bl 0x8238ca68
	sub_8238CA68(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = f31.f64;
	// fmuls f0,f0,f28
	f0.f64 = double(float(f0.f64 * f28.f64));
	// fmuls f31,f0,f29
	f31.f64 = double(float(f0.f64 * f29.f64));
	// bl 0x8238cb58
	sub_8238CB58(ctx, base);
	// fmuls f0,f1,f28
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64 * f28.f64));
	// fmuls f29,f0,f29
	f29.f64 = double(float(f0.f64 * f29.f64));
	// bl 0x820af3a0
	sub_820AF3A0(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// lfs f0,3112(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3112);
	f0.f64 = double(temp.f32);
	// fmuls f0,f1,f0
	f0.f64 = double(float(ctx.f1.f64 * f0.f64));
	// fdivs f13,f30,f0
	ctx.f13.f64 = double(float(f30.f64 / f0.f64));
	// fmuls f0,f13,f31
	f0.f64 = double(float(ctx.f13.f64 * f31.f64));
	// stfs f0,640(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// ble cr6,0x8215a080
	if (!cr6.getGT()) goto loc_8215A080;
	// stfs f30,640(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
loc_8215A080:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,640(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 640);
	f0.f64 = double(temp.f32);
	// lfs f12,6580(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 6580);
	ctx.f12.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// bge cr6,0x8215a098
	if (!cr6.getLT()) goto loc_8215A098;
	// stfs f12,640(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
loc_8215A098:
	// fmuls f0,f13,f29
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f13.f64 * f29.f64));
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
	// stfs f0,632(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 632, temp.u32);
	// fcmpu cr6,f0,f30
	cr6.compare(f0.f64, f30.f64);
	// ble cr6,0x8215a0b4
	if (!cr6.getGT()) goto loc_8215A0B4;
	// stfs f30,632(r11)
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r11.u32 + 632, temp.u32);
loc_8215A0B4:
	// lfs f0,632(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 632);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f12
	cr6.compare(f0.f64, ctx.f12.f64);
	// bge cr6,0x8215a140
	if (!cr6.getLT()) goto loc_8215A140;
	// stfs f12,632(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 632, temp.u32);
	// b 0x8215a140
	goto loc_8215A140;
loc_8215A0C8:
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// stfs f31,640(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
	// stfs f31,632(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 632, temp.u32);
	// b 0x8215a140
	goto loc_8215A140;
loc_8215A0D8:
	// lwz r10,208(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// addi r11,r31,40
	r11.s64 = r31.s64 + 40;
	// lwz r9,212(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// lhz r7,118(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 118);
	// fmr f2,f26
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f26.f64;
	// lbz r6,112(r1)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r1.u32 + 112);
	// fmr f1,f27
	ctx.f1.f64 = f27.f64;
	// stw r10,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r10.u32);
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// stw r9,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r9.u32);
	// lwz r9,216(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r10,4(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// stw r9,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r9.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r10,8(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// bl 0x820ca6d0
	sub_820CA6D0(ctx, base);
	// lwz r11,-1364(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -1364);
	// stfs f31,640(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 640, temp.u32);
	// stfs f31,632(r11)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 632, temp.u32);
	// lfs f0,124(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	f0.f64 = double(temp.f32);
	// stfs f0,8328(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8328, temp.u32);
	// lfs f0,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	f0.f64 = double(temp.f32);
	// stfs f0,8332(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8332, temp.u32);
loc_8215A140:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x820c9b40
	sub_820C9B40(ctx, base);
loc_8215A148:
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// addi r12,r1,-56
	r12.s64 = ctx.r1.s64 + -56;
	// bl 0x823ed58c
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8215A158"))) PPC_WEAK_FUNC(sub_8215A158);
PPC_FUNC_IMPL(__imp__sub_8215A158) {
	PPC_FUNC_PROLOGUE();
	// li r3,18
	ctx.r3.s64 = 18;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215A160"))) PPC_WEAK_FUNC(sub_8215A160);
PPC_FUNC_IMPL(__imp__sub_8215A160) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r10,r11,-29336
	ctx.r10.s64 = r11.s64 + -29336;
	// li r11,0
	r11.s64 = 0;
	// li r9,-1
	ctx.r9.s64 = -1;
	// stb r5,88(r31)
	PPC_STORE_U8(r31.u32 + 88, ctx.r5.u8);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// stb r11,16(r31)
	PPC_STORE_U8(r31.u32 + 16, r11.u8);
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// stw r11,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r11.u32);
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// stb r6,89(r31)
	PPC_STORE_U8(r31.u32 + 89, ctx.r6.u8);
	// stb r7,90(r31)
	PPC_STORE_U8(r31.u32 + 90, ctx.r7.u8);
	// stb r8,91(r31)
	PPC_STORE_U8(r31.u32 + 91, ctx.r8.u8);
	// ld r11,40(r4)
	r11.u64 = PPC_LOAD_U64(ctx.r4.u32 + 40);
	// std r11,40(r31)
	PPC_STORE_U64(r31.u32 + 40, r11.u64);
	// lwz r11,52(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 52);
	// stw r11,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r11.u32);
	// lwz r3,16(r4)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r4.u32 + 16);
	// bl 0x823b38b0
	sub_823B38B0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r31,52
	ctx.r3.s64 = r31.s64 + 52;
	// li r5,36
	ctx.r5.s64 = 36;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215A200"))) PPC_WEAK_FUNC(sub_8215A200);
PPC_FUNC_IMPL(__imp__sub_8215A200) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,96
	ctx.r3.s64 = 96;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215a2a0
	if (cr6.getEQ()) goto loc_8215A2A0;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-29336
	ctx.r10.s64 = r11.s64 + -29336;
	// li r11,0
	r11.s64 = 0;
	// li r8,9
	ctx.r8.s64 = 9;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// std r11,40(r3)
	PPC_STORE_U64(ctx.r3.u32 + 40, r11.u64);
	// lwz r9,-26072(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -26072);
	// addi r10,r3,52
	ctx.r10.s64 = ctx.r3.s64 + 52;
	// stb r11,88(r3)
	PPC_STORE_U8(ctx.r3.u32 + 88, r11.u8);
	// stb r11,89(r3)
	PPC_STORE_U8(ctx.r3.u32 + 89, r11.u8);
	// stb r11,90(r3)
	PPC_STORE_U8(ctx.r3.u32 + 90, r11.u8);
	// stb r11,91(r3)
	PPC_STORE_U8(ctx.r3.u32 + 91, r11.u8);
	// stw r9,48(r3)
	PPC_STORE_U32(ctx.r3.u32 + 48, ctx.r9.u32);
	// mtctr r8
	ctr.u64 = ctx.r8.u64;
loc_8215A284:
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8215a284
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8215A284;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215A2A0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215A2B8"))) PPC_WEAK_FUNC(sub_8215A2B8);
PPC_FUNC_IMPL(__imp__sub_8215A2B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,64
	ctx.r5.s64 = 64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// ld r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U64(r31.u32 + 40);
	// bl 0x823b2c40
	sub_823B2C40(ctx, base);
	// li r5,7
	ctx.r5.s64 = 7;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,48(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,36
	ctx.r5.s64 = 36;
	// addi r4,r31,52
	ctx.r4.s64 = r31.s64 + 52;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2fb0
	sub_823B2FB0(ctx, base);
	// lbz r11,88(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 88);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,89(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 89);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,90(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 90);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,91(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 91);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215A3B0"))) PPC_WEAK_FUNC(sub_8215A3B0);
PPC_FUNC_IMPL(__imp__sub_8215A3B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// li r4,64
	ctx.r4.s64 = 64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2df8
	sub_823B2DF8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,7
	ctx.r4.s64 = 7;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// std r11,40(r30)
	PPC_STORE_U64(r30.u32 + 40, r11.u64);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r5,36
	ctx.r5.s64 = 36;
	// addi r4,r30,52
	ctx.r4.s64 = r30.s64 + 52;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,48(r30)
	PPC_STORE_U32(r30.u32 + 48, r11.u32);
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,88(r30)
	PPC_STORE_U8(r30.u32 + 88, r11.u8);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,89(r30)
	PPC_STORE_U8(r30.u32 + 89, r11.u8);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,90(r30)
	PPC_STORE_U8(r30.u32 + 90, r11.u8);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,91(r30)
	PPC_STORE_U8(r30.u32 + 91, r11.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215A498"))) PPC_WEAK_FUNC(sub_8215A498);
PPC_FUNC_IMPL(__imp__sub_8215A498) {
	PPC_FUNC_PROLOGUE();
	// li r3,20
	ctx.r3.s64 = 20;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215A4A0"))) PPC_WEAK_FUNC(sub_8215A4A0);
PPC_FUNC_IMPL(__imp__sub_8215A4A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-29256
	ctx.r10.s64 = r11.s64 + -29256;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// lwz r11,52(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 52);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215A4E8"))) PPC_WEAK_FUNC(sub_8215A4E8);
PPC_FUNC_IMPL(__imp__sub_8215A4E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215a55c
	if (cr6.getEQ()) goto loc_8215A55C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-29256
	ctx.r10.s64 = r11.s64 + -29256;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215A55C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215A570"))) PPC_WEAK_FUNC(sub_8215A570);
PPC_FUNC_IMPL(__imp__sub_8215A570) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// lwz r3,40(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 40);
	// bl 0x821520d8
	sub_821520D8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x8215a674
	if (cr6.getEQ()) goto loc_8215A674;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x82152638
	sub_82152638(ctx, base);
	// lbz r11,12(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215a674
	if (cr6.getEQ()) goto loc_8215A674;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r31,0
	r31.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r31.u8);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215a674
	if (cr6.getEQ()) goto loc_8215A674;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// li r28,-1
	r28.s64 = -1;
	// addi r29,r10,-29256
	r29.s64 = ctx.r10.s64 + -29256;
loc_8215A5E0:
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwz r10,8(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 8);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x8215a660
	if (cr6.getEQ()) goto loc_8215A660;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215a63c
	if (cr6.getEQ()) goto loc_8215A63C;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r28,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r28.u32);
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// lwz r11,52(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 52);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// b 0x8215a640
	goto loc_8215A640;
loc_8215A63C:
	// mr r30,r31
	r30.u64 = r31.u64;
loc_8215A640:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,16(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8215A660:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215a5e0
	if (!cr6.getEQ()) goto loc_8215A5E0;
loc_8215A674:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8215A680"))) PPC_WEAK_FUNC(sub_8215A680);
PPC_FUNC_IMPL(__imp__sub_8215A680) {
	PPC_FUNC_PROLOGUE();
	// li r3,21
	ctx.r3.s64 = 21;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215A688"))) PPC_WEAK_FUNC(sub_8215A688);
PPC_FUNC_IMPL(__imp__sub_8215A688) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,88
	ctx.r3.s64 = 88;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215a718
	if (cr6.getEQ()) goto loc_8215A718;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-29176
	ctx.r10.s64 = r11.s64 + -29176;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stw r9,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, ctx.r9.u32);
	// lwz r9,-26072(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -26072);
	// std r11,64(r3)
	PPC_STORE_U64(ctx.r3.u32 + 64, r11.u64);
	// stb r11,72(r3)
	PPC_STORE_U8(ctx.r3.u32 + 72, r11.u8);
	// stw r9,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, ctx.r9.u32);
	// lwz r10,-26072(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -26072);
	// stb r11,80(r3)
	PPC_STORE_U8(ctx.r3.u32 + 80, r11.u8);
	// stb r11,48(r3)
	PPC_STORE_U8(ctx.r3.u32 + 48, r11.u8);
	// stw r10,76(r3)
	PPC_STORE_U32(ctx.r3.u32 + 76, ctx.r10.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215A718:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215A730"))) PPC_WEAK_FUNC(sub_8215A730);
PPC_FUNC_IMPL(__imp__sub_8215A730) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lis r3,19
	ctx.r3.s64 = 1245184;
	// ori r3,r3,34816
	ctx.r3.u64 = ctx.r3.u64 | 34816;
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,7
	ctx.r5.s64 = 7;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,44(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r28,r31,48
	r28.s64 = r31.s64 + 48;
	// mr r11,r28
	r11.u64 = r28.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_8215A7A0:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8215a7a0
	if (!cr6.getEQ()) goto loc_8215A7A0;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// li r5,4
	ctx.r5.s64 = 4;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rotlwi r29,r11,0
	r29.u64 = __builtin_rotateleft32(r11.u32, 0);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2fb0
	sub_823B2FB0(ctx, base);
	// li r5,64
	ctx.r5.s64 = 64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// ld r4,64(r31)
	ctx.r4.u64 = PPC_LOAD_U64(r31.u32 + 64);
	// bl 0x823b2c40
	sub_823B2C40(ctx, base);
	// lbz r11,72(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 72);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// clrlwi r11,r27,24
	r11.u64 = r27.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215a840
	if (!cr6.getEQ()) goto loc_8215A840;
	// li r5,7
	ctx.r5.s64 = 7;
	// lwz r4,76(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,80(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 80);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
loc_8215A840:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8215A848"))) PPC_WEAK_FUNC(sub_8215A848);
PPC_FUNC_IMPL(__imp__sub_8215A848) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// lis r3,19
	ctx.r3.s64 = 1245184;
	// ori r3,r3,34816
	ctx.r3.u64 = ctx.r3.u64 | 34816;
	// bl 0x823b2f40
	sub_823B2F40(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,7
	ctx.r4.s64 = 7;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,40(r30)
	PPC_STORE_U32(r30.u32 + 40, r11.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,44(r30)
	PPC_STORE_U32(r30.u32 + 44, r11.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r4,r30,48
	ctx.r4.s64 = r30.s64 + 48;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
	// add r11,r29,r30
	r11.u64 = r29.u64 + r30.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r4,64
	ctx.r4.s64 = 64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r10,48(r11)
	PPC_STORE_U8(r11.u32 + 48, ctx.r10.u8);
	// bl 0x823b2df8
	sub_823B2DF8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// std r11,64(r30)
	PPC_STORE_U64(r30.u32 + 64, r11.u64);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r4,7
	ctx.r4.s64 = 7;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,72(r30)
	PPC_STORE_U8(r30.u32 + 72, r11.u8);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,76(r30)
	PPC_STORE_U32(r30.u32 + 76, r11.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,80(r30)
	PPC_STORE_U8(r30.u32 + 80, r11.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8215A930"))) PPC_WEAK_FUNC(sub_8215A930);
PPC_FUNC_IMPL(__imp__sub_8215A930) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r29,1
	r29.s64 = 1;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8215a9f4
	if (!cr6.getEQ()) goto loc_8215A9F4;
	// lwz r30,8(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x8215fcd0
	sub_8215FCD0(ctx, base);
	// cmpw cr6,r30,r3
	cr6.compare<int32_t>(r30.s32, ctx.r3.s32, xer);
	// bne cr6,0x8215a9f4
	if (!cr6.getEQ()) goto loc_8215A9F4;
	// bl 0x821603d8
	sub_821603D8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215a9f4
	if (!cr6.getEQ()) goto loc_8215A9F4;
	// lwz r3,40(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// bl 0x821584e0
	sub_821584E0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8215a9f4
	if (!cr6.getEQ()) goto loc_8215A9F4;
	// lwz r3,76(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 76);
	// bl 0x821520d8
	sub_821520D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215aa00
	if (cr6.getEQ()) goto loc_8215AA00;
	// addi r6,r31,48
	ctx.r6.s64 = r31.s64 + 48;
	// lwz r7,44(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// lbz r5,72(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 72);
	// ld r4,64(r31)
	ctx.r4.u64 = PPC_LOAD_U64(r31.u32 + 64);
	// bl 0x821583b0
	sub_821583B0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8215aa00
	if (cr6.getEQ()) goto loc_8215AA00;
	// li r11,2
	r11.s64 = 2;
	// stw r11,828(r30)
	PPC_STORE_U32(r30.u32 + 828, r11.u32);
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// stw r11,832(r30)
	PPC_STORE_U32(r30.u32 + 832, r11.u32);
	// lbz r11,80(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 80);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215a9e0
	if (cr6.getEQ()) goto loc_8215A9E0;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8215A9E0:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8217ed20
	sub_8217ED20(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r30,900
	ctx.r3.s64 = r30.s64 + 900;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_8215A9F4:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
loc_8215AA00:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8215AA10"))) PPC_WEAK_FUNC(sub_8215AA10);
PPC_FUNC_IMPL(__imp__sub_8215AA10) {
	PPC_FUNC_PROLOGUE();
	// li r3,22
	ctx.r3.s64 = 22;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215AA18"))) PPC_WEAK_FUNC(sub_8215AA18);
PPC_FUNC_IMPL(__imp__sub_8215AA18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-29096
	ctx.r10.s64 = r11.s64 + -29096;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// lwz r11,104(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 104);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215AA60"))) PPC_WEAK_FUNC(sub_8215AA60);
PPC_FUNC_IMPL(__imp__sub_8215AA60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215aad4
	if (cr6.getEQ()) goto loc_8215AAD4;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-29096
	ctx.r10.s64 = r11.s64 + -29096;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215AAD4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215AAE8"))) PPC_WEAK_FUNC(sub_8215AAE8);
PPC_FUNC_IMPL(__imp__sub_8215AAE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,7
	ctx.r5.s64 = 7;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215AB50"))) PPC_WEAK_FUNC(sub_8215AB50);
PPC_FUNC_IMPL(__imp__sub_8215AB50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// lwz r3,40(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 40);
	// bl 0x82158ab8
	sub_82158AB8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x8215ac68
	if (cr6.getEQ()) goto loc_8215AC68;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8216c140
	sub_8216C140(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215ac68
	if (cr6.getEQ()) goto loc_8215AC68;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r31,0
	r31.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r31.u8);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215ac68
	if (cr6.getEQ()) goto loc_8215AC68;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// li r27,-1
	r27.s64 = -1;
	// addi r29,r10,-29096
	r29.s64 = ctx.r10.s64 + -29096;
loc_8215ABD4:
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwz r10,8(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 8);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x8215ac54
	if (cr6.getEQ()) goto loc_8215AC54;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215ac30
	if (cr6.getEQ()) goto loc_8215AC30;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r27,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r27.u32);
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// lwz r11,104(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 104);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// b 0x8215ac34
	goto loc_8215AC34;
loc_8215AC30:
	// mr r30,r31
	r30.u64 = r31.u64;
loc_8215AC34:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,16(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8215AC54:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215abd4
	if (!cr6.getEQ()) goto loc_8215ABD4;
loc_8215AC68:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8215AC78"))) PPC_WEAK_FUNC(sub_8215AC78);
PPC_FUNC_IMPL(__imp__sub_8215AC78) {
	PPC_FUNC_PROLOGUE();
	// li r3,77
	ctx.r3.s64 = 77;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215AC80"))) PPC_WEAK_FUNC(sub_8215AC80);
PPC_FUNC_IMPL(__imp__sub_8215AC80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r3,r31,40
	ctx.r3.s64 = r31.s64 + 40;
	// bl 0x8216c080
	sub_8216C080(ctx, base);
	// lwz r11,64(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// li r3,0
	ctx.r3.s64 = 0;
	// li r28,0
	r28.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8215acdc
	if (!cr6.getGT()) goto loc_8215ACDC;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
loc_8215ACDC:
	// bge cr6,0x8215ace4
	if (!cr6.getLT()) goto loc_8215ACE4;
	// mr r28,r11
	r28.u64 = r11.u64;
loc_8215ACE4:
	// lwz r11,68(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// cmpw cr6,r11,r3
	cr6.compare<int32_t>(r11.s32, ctx.r3.s32, xer);
	// ble cr6,0x8215acf4
	if (!cr6.getGT()) goto loc_8215ACF4;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
loc_8215ACF4:
	// cmpw cr6,r11,r28
	cr6.compare<int32_t>(r11.s32, r28.s32, xer);
	// bge cr6,0x8215ad00
	if (!cr6.getLT()) goto loc_8215AD00;
	// mr r28,r11
	r28.u64 = r11.u64;
loc_8215AD00:
	// li r30,1
	r30.s64 = 1;
	// bl 0x823b2f68
	sub_823B2F68(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x8215ad14
	if (!cr6.getGT()) goto loc_8215AD14;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
loc_8215AD14:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823b2f68
	sub_823B2F68(ctx, base);
	// cmpw cr6,r3,r30
	cr6.compare<int32_t>(ctx.r3.s32, r30.s32, xer);
	// ble cr6,0x8215ad28
	if (!cr6.getGT()) goto loc_8215AD28;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
loc_8215AD28:
	// li r5,5
	ctx.r5.s64 = 5;
	// addi r4,r30,-1
	ctx.r4.s64 = r30.s64 + -1;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r4,64(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 64);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r4,68(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8215AD60"))) PPC_WEAK_FUNC(sub_8215AD60);
PPC_FUNC_IMPL(__imp__sub_8215AD60) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r30,40
	ctx.r3.s64 = r30.s64 + 40;
	// bl 0x8216c0e0
	sub_8216C0E0(ctx, base);
	// li r4,5
	ctx.r4.s64 = 5;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r29,r11,1
	r29.s64 = r11.s64 + 1;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x823b2e50
	sub_823B2E50(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,64(r30)
	PPC_STORE_U32(r30.u32 + 64, r11.u32);
	// bl 0x823b2e50
	sub_823B2E50(ctx, base);
	// stw r3,68(r30)
	PPC_STORE_U32(r30.u32 + 68, ctx.r3.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8215ADD0"))) PPC_WEAK_FUNC(sub_8215ADD0);
PPC_FUNC_IMPL(__imp__sub_8215ADD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r29,1
	r29.s64 = 1;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8215ae24
	if (!cr6.getEQ()) goto loc_8215AE24;
	// lwz r30,8(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x8215fcd0
	sub_8215FCD0(ctx, base);
	// cmpw cr6,r30,r3
	cr6.compare<int32_t>(r30.s32, ctx.r3.s32, xer);
	// bne cr6,0x8215ae24
	if (!cr6.getEQ()) goto loc_8215AE24;
	// bl 0x821603d8
	sub_821603D8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215ae24
	if (!cr6.getEQ()) goto loc_8215AE24;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r3,0
	ctx.r3.s64 = 0;
	// beq cr6,0x8215ae28
	if (cr6.getEQ()) goto loc_8215AE28;
loc_8215AE24:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
loc_8215AE28:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8215AE30"))) PPC_WEAK_FUNC(sub_8215AE30);
PPC_FUNC_IMPL(__imp__sub_8215AE30) {
	PPC_FUNC_PROLOGUE();
	// li r3,23
	ctx.r3.s64 = 23;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215AE38"))) PPC_WEAK_FUNC(sub_8215AE38);
PPC_FUNC_IMPL(__imp__sub_8215AE38) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-28936
	ctx.r10.s64 = r11.s64 + -28936;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// lwz r11,52(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 52);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215AE80"))) PPC_WEAK_FUNC(sub_8215AE80);
PPC_FUNC_IMPL(__imp__sub_8215AE80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215aef4
	if (cr6.getEQ()) goto loc_8215AEF4;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-28936
	ctx.r10.s64 = r11.s64 + -28936;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// lwz r11,-26072(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26072);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215AEF4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215AF08"))) PPC_WEAK_FUNC(sub_8215AF08);
PPC_FUNC_IMPL(__imp__sub_8215AF08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// lwz r3,40(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + 40);
	// bl 0x821520d8
	sub_821520D8(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x8215b00c
	if (cr6.getEQ()) goto loc_8215B00C;
	// li r11,1
	r11.s64 = 1;
	// lbz r10,12(r27)
	ctx.r10.u64 = PPC_LOAD_U8(r27.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stb r11,133(r27)
	PPC_STORE_U8(r27.u32 + 133, r11.u8);
	// beq cr6,0x8215b00c
	if (cr6.getEQ()) goto loc_8215B00C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r31,0
	r31.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r31.u8);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b00c
	if (cr6.getEQ()) goto loc_8215B00C;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// li r28,-1
	r28.s64 = -1;
	// addi r29,r10,-28936
	r29.s64 = ctx.r10.s64 + -28936;
loc_8215AF78:
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwz r10,8(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 8);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x8215aff8
	if (cr6.getEQ()) goto loc_8215AFF8;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215afd4
	if (cr6.getEQ()) goto loc_8215AFD4;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r28,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r28.u32);
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// lwz r11,52(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 52);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// b 0x8215afd8
	goto loc_8215AFD8;
loc_8215AFD4:
	// mr r30,r31
	r30.u64 = r31.u64;
loc_8215AFD8:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,16(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8215AFF8:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215af78
	if (!cr6.getEQ()) goto loc_8215AF78;
loc_8215B00C:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8215B018"))) PPC_WEAK_FUNC(sub_8215B018);
PPC_FUNC_IMPL(__imp__sub_8215B018) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed128
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r24,1
	r24.s64 = 1;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8215b484
	if (!cr6.getEQ()) goto loc_8215B484;
	// lwz r31,8(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// bl 0x8215fcd0
	sub_8215FCD0(ctx, base);
	// cmpw cr6,r31,r3
	cr6.compare<int32_t>(r31.s32, ctx.r3.s32, xer);
	// bne cr6,0x8215b484
	if (!cr6.getEQ()) goto loc_8215B484;
	// bl 0x821603d8
	sub_821603D8(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215b484
	if (!cr6.getEQ()) goto loc_8215B484;
	// lwz r3,48(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 48);
	// bl 0x821520d8
	sub_821520D8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8215b484
	if (!cr6.getEQ()) goto loc_8215B484;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x8215b490
	if (!cr6.getEQ()) goto loc_8215B490;
	// li r28,-1
	r28.s64 = -1;
	// mr r26,r28
	r26.u64 = r28.u64;
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// addi r29,r30,52
	r29.s64 = r30.s64 + 52;
	// addi r4,r3,17
	ctx.r4.s64 = ctx.r3.s64 + 17;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x823bc590
	sub_823BC590(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8215b0a8
	if (!cr6.getEQ()) goto loc_8215B0A8;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823b46d8
	sub_823B46D8(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
loc_8215B0A8:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82151ce8
	sub_82151CE8(ctx, base);
	// ld r11,40(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 40);
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// std r11,40(r25)
	PPC_STORE_U64(r25.u32 + 40, r11.u64);
	// lwz r4,48(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 48);
	// bl 0x82152018
	sub_82152018(ctx, base);
	// li r11,2
	r11.s64 = 2;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// stw r11,28(r25)
	PPC_STORE_U32(r25.u32 + 28, r11.u32);
	// bl 0x82151c60
	sub_82151C60(ctx, base);
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// blt cr6,0x8215b114
	if (cr6.getLT()) goto loc_8215B114;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x823b3838
	sub_823B3838(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r5,20
	ctx.r5.s64 = 20;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r4,r11,24
	ctx.r4.s64 = r11.s64 + 24;
	// stw r31,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r31.u32);
	// stw r31,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r31.u32);
	// stw r31,12(r11)
	PPC_STORE_U32(r11.u32 + 12, r31.u32);
	// stw r31,16(r11)
	PPC_STORE_U32(r11.u32 + 16, r31.u32);
	// stb r31,20(r11)
	PPC_STORE_U8(r11.u32 + 20, r31.u8);
	// bl 0x82152788
	sub_82152788(ctx, base);
loc_8215B114:
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x821782c8
	sub_821782C8(ctx, base);
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x82166208
	sub_82166208(ctx, base);
	// lbz r11,88(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b13c
	if (cr6.getEQ()) goto loc_8215B13C;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x82152638
	sub_82152638(ctx, base);
loc_8215B13C:
	// lbz r11,89(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 89);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b14c
	if (cr6.getEQ()) goto loc_8215B14C;
	// stb r24,133(r25)
	PPC_STORE_U8(r25.u32 + 133, r24.u8);
loc_8215B14C:
	// lbz r11,90(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 90);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b164
	if (cr6.getEQ()) goto loc_8215B164;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x82152720
	sub_82152720(ctx, base);
loc_8215B164:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// blt cr6,0x8215b478
	if (cr6.getLT()) goto loc_8215B478;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215b1bc
	if (cr6.getEQ()) goto loc_8215B1BC;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// stw r28,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r28.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r11,r11,-29824
	r11.s64 = r11.s64 + -29824;
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// stb r31,40(r3)
	PPC_STORE_U8(ctx.r3.u32 + 40, r31.u8);
	// b 0x8215b1c0
	goto loc_8215B1C0;
loc_8215B1BC:
	// mr r30,r31
	r30.u64 = r31.u64;
loc_8215B1C0:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lis r27,-32254
	r27.s64 = -2113798144;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-26072(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -26072);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8215b27c
	if (cr6.getEQ()) goto loc_8215B27C;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,132(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b27c
	if (cr6.getEQ()) goto loc_8215B27C;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8215b25c
	if (cr6.getEQ()) goto loc_8215B25C;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r31,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r31.u32);
	// addi r11,r11,-29256
	r11.s64 = r11.s64 + -29256;
	// stw r28,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r28.u32);
	// stw r31,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r31.u32);
	// stb r31,16(r30)
	PPC_STORE_U8(r30.u32 + 16, r31.u8);
	// sth r31,18(r30)
	PPC_STORE_U16(r30.u32 + 18, r31.u16);
	// stw r31,20(r30)
	PPC_STORE_U32(r30.u32 + 20, r31.u32);
	// stw r31,24(r30)
	PPC_STORE_U32(r30.u32 + 24, r31.u32);
	// stw r31,28(r30)
	PPC_STORE_U32(r30.u32 + 28, r31.u32);
	// stw r31,32(r30)
	PPC_STORE_U32(r30.u32 + 32, r31.u32);
	// stw r31,36(r30)
	PPC_STORE_U32(r30.u32 + 36, r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// lwz r11,52(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// stw r11,40(r30)
	PPC_STORE_U32(r30.u32 + 40, r11.u32);
	// b 0x8215b260
	goto loc_8215B260;
loc_8215B25C:
	// mr r30,r31
	r30.u64 = r31.u64;
loc_8215B260:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8215B27C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r11,r11,14756
	r11.s64 = r11.s64 + 14756;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// bl 0x8216c178
	sub_8216C178(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r29,r11,-29096
	r29.s64 = r11.s64 + -29096;
loc_8215B2A4:
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8215b2c0
	if (cr6.getEQ()) goto loc_8215B2C0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// mr r11,r31
	r11.u64 = r31.u64;
	// bne cr6,0x8215b2c4
	if (!cr6.getEQ()) goto loc_8215B2C4;
loc_8215B2C0:
	// mr r11,r24
	r11.u64 = r24.u64;
loc_8215B2C4:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215b368
	if (!cr6.getEQ()) goto loc_8215B368;
	// lwz r9,104(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 104);
	// lwz r11,-26072(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -26072);
	// cmplw cr6,r9,r11
	cr6.compare<uint32_t>(ctx.r9.u32, r11.u32, xer);
	// beq cr6,0x8215b35c
	if (cr6.getEQ()) goto loc_8215B35C;
	// lbz r11,116(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b35c
	if (cr6.getEQ()) goto loc_8215B35C;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215b33c
	if (cr6.getEQ()) goto loc_8215B33C;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// stw r28,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r28.u32);
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// lwz r11,104(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 104);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// b 0x8215b340
	goto loc_8215B340;
loc_8215B33C:
	// mr r30,r31
	r30.u64 = r31.u64;
loc_8215B340:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8215B35C:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8216c2a8
	sub_8216C2A8(ctx, base);
	// b 0x8215b2a4
	goto loc_8215B2A4;
loc_8215B368:
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-26072(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -26072);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8215b404
	if (cr6.getEQ()) goto loc_8215B404;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,133(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 133);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b404
	if (cr6.getEQ()) goto loc_8215B404;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8215b3e4
	if (cr6.getEQ()) goto loc_8215B3E4;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r31,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r31.u32);
	// addi r11,r11,-28936
	r11.s64 = r11.s64 + -28936;
	// stw r28,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r28.u32);
	// stw r31,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r31.u32);
	// stb r31,16(r30)
	PPC_STORE_U8(r30.u32 + 16, r31.u8);
	// sth r31,18(r30)
	PPC_STORE_U16(r30.u32 + 18, r31.u16);
	// stw r31,20(r30)
	PPC_STORE_U32(r30.u32 + 20, r31.u32);
	// stw r31,24(r30)
	PPC_STORE_U32(r30.u32 + 24, r31.u32);
	// stw r31,28(r30)
	PPC_STORE_U32(r30.u32 + 28, r31.u32);
	// stw r31,32(r30)
	PPC_STORE_U32(r30.u32 + 32, r31.u32);
	// stw r31,36(r30)
	PPC_STORE_U32(r30.u32 + 36, r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// lwz r11,52(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// stw r11,40(r30)
	PPC_STORE_U32(r30.u32 + 40, r11.u32);
	// b 0x8215b3e8
	goto loc_8215B3E8;
loc_8215B3E4:
	// mr r30,r31
	r30.u64 = r31.u64;
loc_8215B3E8:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8215B404:
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-26072(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -26072);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// beq cr6,0x8215b46c
	if (cr6.getEQ()) goto loc_8215B46C;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,134(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 134);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b46c
	if (cr6.getEQ()) goto loc_8215B46C;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8215b450
	if (cr6.getEQ()) goto loc_8215B450;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821719a0
	sub_821719A0(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
loc_8215B450:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8215B46C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r11,r11,14748
	r11.s64 = r11.s64 + 14748;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
loc_8215B478:
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r25,260
	ctx.r3.s64 = r25.s64 + 260;
	// bl 0x82176c80
	sub_82176C80(ctx, base);
loc_8215B484:
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed178
	return;
loc_8215B490:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed178
	return;
}

__attribute__((alias("__imp__sub_8215B4A0"))) PPC_WEAK_FUNC(sub_8215B4A0);
PPC_FUNC_IMPL(__imp__sub_8215B4A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// addi r10,r10,-29176
	ctx.r10.s64 = ctx.r10.s64 + -29176;
	// li r9,-1
	ctx.r9.s64 = -1;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// li r6,15
	ctx.r6.s64 = 15;
	// stw r30,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r30.u32);
	// addi r5,r29,768
	ctx.r5.s64 = r29.s64 + 768;
	// stb r30,16(r31)
	PPC_STORE_U8(r31.u32 + 16, r30.u8);
	// li r4,16
	ctx.r4.s64 = 16;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// addi r3,r31,48
	ctx.r3.s64 = r31.s64 + 48;
	// sth r30,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r30.u16);
	// stw r30,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r30.u32);
	// stw r30,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r30.u32);
	// stw r30,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r30.u32);
	// stw r30,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r30.u32);
	// stw r30,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r30.u32);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stb r11,80(r31)
	PPC_STORE_U8(r31.u32 + 80, r11.u8);
	// lwz r11,832(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 832);
	// stw r11,40(r31)
	PPC_STORE_U32(r31.u32 + 40, r11.u32);
	// lwz r11,104(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 104);
	// stw r11,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r11.u32);
	// ld r11,784(r29)
	r11.u64 = PPC_LOAD_U64(r29.u32 + 784);
	// std r11,64(r31)
	PPC_STORE_U64(r31.u32 + 64, r11.u64);
	// lbz r11,792(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 792);
	// stb r11,72(r31)
	PPC_STORE_U8(r31.u32 + 72, r11.u8);
	// bl 0x823ecf88
	sub_823ECF88(ctx, base);
	// stb r30,63(r31)
	PPC_STORE_U8(r31.u32 + 63, r30.u8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// lwz r11,52(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 52);
	// stw r11,76(r31)
	PPC_STORE_U32(r31.u32 + 76, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8215B548"))) PPC_WEAK_FUNC(sub_8215B548);
PPC_FUNC_IMPL(__imp__sub_8215B548) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,80
	ctx.r3.s64 = 80;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215b5d8
	if (cr6.getEQ()) goto loc_8215B5D8;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r7,-1
	ctx.r7.s64 = -1;
	// addi r9,r11,-29016
	ctx.r9.s64 = r11.s64 + -29016;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r10,r3,40
	ctx.r10.s64 = ctx.r3.s64 + 40;
	// addi r8,r11,-30724
	ctx.r8.s64 = r11.s64 + -30724;
	// li r11,0
	r11.s64 = 0;
	// stw r7,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r7.u32);
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r9,-26072(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + -26072);
	// stw r11,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, r11.u32);
	// stw r7,16(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16, ctx.r7.u32);
	// stw r9,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r9.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215B5D8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215B5F0"))) PPC_WEAK_FUNC(sub_8215B5F0);
PPC_FUNC_IMPL(__imp__sub_8215B5F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32019
	r11.s64 = -2098397184;
	// addi r3,r11,26044
	ctx.r3.s64 = r11.s64 + 26044;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215B600"))) PPC_WEAK_FUNC(sub_8215B600);
PPC_FUNC_IMPL(__imp__sub_8215B600) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82184a40
	sub_82184A40(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215b65c
	if (cr6.getEQ()) goto loc_8215B65C;
	// bl 0x82183990
	sub_82183990(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b65c
	if (cr6.getEQ()) goto loc_8215B65C;
	// lbz r11,4(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215b65c
	if (!cr6.getEQ()) goto loc_8215B65C;
	// addi r5,r31,8
	ctx.r5.s64 = r31.s64 + 8;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x823bc690
	sub_823BC690(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8215b65c
	if (!cr6.getEQ()) goto loc_8215B65C;
	// li r11,1
	r11.s64 = 1;
	// stb r11,4(r31)
	PPC_STORE_U8(r31.u32 + 4, r11.u8);
loc_8215B65C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215B670"))) PPC_WEAK_FUNC(sub_8215B670);
PPC_FUNC_IMPL(__imp__sub_8215B670) {
	PPC_FUNC_PROLOGUE();
	// stb r4,132(r3)
	PPC_STORE_U8(ctx.r3.u32 + 132, ctx.r4.u8);
	// stw r5,136(r3)
	PPC_STORE_U32(ctx.r3.u32 + 136, ctx.r5.u32);
	// stw r6,140(r3)
	PPC_STORE_U32(ctx.r3.u32 + 140, ctx.r6.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215B680"))) PPC_WEAK_FUNC(sub_8215B680);
PPC_FUNC_IMPL(__imp__sub_8215B680) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed100
	// stfd f30,-168(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -168, f30.u64);
	// stfd f31,-160(r1)
	PPC_STORE_U64(ctx.r1.u32 + -160, f31.u64);
	// stwu r1,-432(r1)
	ea = -432 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,452(r1)
	PPC_STORE_U32(ctx.r1.u32 + 452, ctx.r3.u32);
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r10,10
	ctx.r10.s64 = 10;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8215B6A8:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x8215b6a8
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8215B6A8;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// li r10,10
	ctx.r10.s64 = 10;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8215B6C0:
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x8215b6c0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8215B6C0;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stb r9,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r9.u8);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// stw r11,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lis r11,-32019
	r11.s64 = -2098397184;
	// lwz r3,184(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// addi r30,r11,26004
	r30.s64 = r11.s64 + 26004;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r30,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r30.u32);
	// beq cr6,0x8215b8dc
	if (cr6.getEQ()) goto loc_8215B8DC;
	// lwz r14,108(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r16,104(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r18,100(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r20,96(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r22,92(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r24,88(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r26,84(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r28,80(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r15,156(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lwz r17,152(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lwz r19,148(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r21,144(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lwz r23,140(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r25,136(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r27,132(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r29,128(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
loc_8215B740:
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x821521d0
	sub_821521D0(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215b888
	if (!cr6.getEQ()) goto loc_8215B888;
	// li r30,0
	r30.s64 = 0;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8215b7a4
	if (cr6.getEQ()) goto loc_8215B7A4;
	// lwz r11,1016(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1016);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b784
	if (cr6.getEQ()) goto loc_8215B784;
	// lwz r11,988(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 988);
	// addi r3,r31,988
	ctx.r3.s64 = r31.s64 + 988;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r30,r3,14,10,17
	r30.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 14) & 0x3FC000;
loc_8215B784:
	// lwz r11,1068(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1068);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b7a4
	if (cr6.getEQ()) goto loc_8215B7A4;
	// lwz r11,1040(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1040);
	// addi r3,r31,1040
	ctx.r3.s64 = r31.s64 + 1040;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8215B7A4:
	// lwz r10,168(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// lwz r11,36(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8215b7cc
	if (cr6.getLT()) goto loc_8215B7CC;
	// lwz r11,164(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r11.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
loc_8215B7CC:
	// lwz r11,32(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8215b7f0
	if (cr6.getLT()) goto loc_8215B7F0;
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r11.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
loc_8215B7F0:
	// lwz r11,28(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8215b804
	if (cr6.getLT()) goto loc_8215B804;
	// addi r15,r15,1
	r15.s64 = r15.s64 + 1;
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
loc_8215B804:
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8215b818
	if (cr6.getLT()) goto loc_8215B818;
	// addi r17,r17,1
	r17.s64 = r17.s64 + 1;
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
loc_8215B818:
	// lwz r11,20(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8215b82c
	if (cr6.getLT()) goto loc_8215B82C;
	// addi r19,r19,1
	r19.s64 = r19.s64 + 1;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
loc_8215B82C:
	// lwz r11,16(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8215b840
	if (cr6.getLT()) goto loc_8215B840;
	// addi r21,r21,1
	r21.s64 = r21.s64 + 1;
	// addi r20,r20,1
	r20.s64 = r20.s64 + 1;
loc_8215B840:
	// lwz r11,12(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8215b854
	if (cr6.getLT()) goto loc_8215B854;
	// addi r23,r23,1
	r23.s64 = r23.s64 + 1;
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
loc_8215B854:
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8215b868
	if (cr6.getLT()) goto loc_8215B868;
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r24,r24,1
	r24.s64 = r24.s64 + 1;
loc_8215B868:
	// lwz r11,4(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// blt cr6,0x8215b87c
	if (cr6.getLT()) goto loc_8215B87C;
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
loc_8215B87C:
	// lwz r30,168(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_8215B888:
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r3,184(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8215b740
	if (!cr6.getEQ()) goto loc_8215B740;
	// stw r28,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r28.u32);
	// stw r29,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r29.u32);
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// stw r27,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r27.u32);
	// stw r24,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r24.u32);
	// stw r25,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r25.u32);
	// stw r22,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r22.u32);
	// stw r23,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r23.u32);
	// stw r20,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r20.u32);
	// stw r21,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r21.u32);
	// stw r18,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r18.u32);
	// stw r19,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r19.u32);
	// stw r16,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r16.u32);
	// stw r17,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r17.u32);
	// stw r14,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r14.u32);
	// stw r15,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r15.u32);
loc_8215B8DC:
	// lwz r11,452(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 452);
	// li r28,0
	r28.s64 = 0;
	// li r10,9
	ctx.r10.s64 = 9;
	// lwz r9,128(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 128);
	// addi r11,r30,36
	r11.s64 = r30.s64 + 36;
loc_8215B8F0:
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r9,r8
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r8.s32, xer);
	// bge cr6,0x8215b918
	if (!cr6.getLT()) goto loc_8215B918;
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// beq cr6,0x8215b918
	if (cr6.getEQ()) goto loc_8215B918;
	// addi r11,r11,-4
	r11.s64 = r11.s64 + -4;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// bge cr6,0x8215b8f0
	if (!cr6.getLT()) goto loc_8215B8F0;
	// b 0x8215b91c
	goto loc_8215B91C;
loc_8215B918:
	// mr r28,r10
	r28.u64 = ctx.r10.u64;
loc_8215B91C:
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,184(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215bd74
	if (cr6.getEQ()) goto loc_8215BD74;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r27,r28,1
	r27.s64 = r28.s64 + 1;
	// lfs f30,2688(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2688);
	f30.f64 = double(temp.f32);
loc_8215B940:
	// mr r29,r11
	r29.u64 = r11.u64;
	// fmr f31,f30
	ctx.fpscr.disableFlushMode();
	f31.f64 = f30.f64;
	// li r9,0
	ctx.r9.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b978
	if (cr6.getEQ()) goto loc_8215B978;
	// lwz r10,1016(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 1016);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8215b978
	if (cr6.getEQ()) goto loc_8215B978;
	// addi r3,r11,988
	ctx.r3.s64 = r11.s64 + 988;
	// lwz r11,988(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 988);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r9,r3,14,10,17
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 14) & 0x3FC000;
loc_8215B978:
	// li r31,0
	r31.s64 = 0;
	// li r10,9
	ctx.r10.s64 = 9;
	// addi r11,r30,36
	r11.s64 = r30.s64 + 36;
loc_8215B984:
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r9,r8
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r8.s32, xer);
	// bge cr6,0x8215b9ac
	if (!cr6.getLT()) goto loc_8215B9AC;
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// beq cr6,0x8215b9ac
	if (cr6.getEQ()) goto loc_8215B9AC;
	// addi r11,r11,-4
	r11.s64 = r11.s64 + -4;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// bge cr6,0x8215b984
	if (!cr6.getLT()) goto loc_8215B984;
	// b 0x8215b9b0
	goto loc_8215B9B0;
loc_8215B9AC:
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
loc_8215B9B0:
	// li r9,0
	ctx.r9.s64 = 0;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8215b9e0
	if (cr6.getEQ()) goto loc_8215B9E0;
	// lwz r11,1068(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 1068);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215b9e0
	if (cr6.getEQ()) goto loc_8215B9E0;
	// lwz r11,1040(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 1040);
	// addi r3,r29,1040
	ctx.r3.s64 = r29.s64 + 1040;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r9,r3,14,10,17
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 14) & 0x3FC000;
loc_8215B9E0:
	// li r6,0
	ctx.r6.s64 = 0;
	// li r10,9
	ctx.r10.s64 = 9;
	// addi r11,r30,36
	r11.s64 = r30.s64 + 36;
loc_8215B9EC:
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r9,r8
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r8.s32, xer);
	// bge cr6,0x8215ba14
	if (!cr6.getLT()) goto loc_8215BA14;
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// beq cr6,0x8215ba14
	if (cr6.getEQ()) goto loc_8215BA14;
	// addi r11,r11,-4
	r11.s64 = r11.s64 + -4;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// bge cr6,0x8215b9ec
	if (!cr6.getLT()) goto loc_8215B9EC;
	// b 0x8215ba18
	goto loc_8215BA18;
loc_8215BA14:
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
loc_8215BA18:
	// li r10,0
	ctx.r10.s64 = 0;
	// cmpwi cr6,r27,4
	cr6.compare<int32_t>(r27.s32, 4, xer);
	// blt cr6,0x8215bca8
	if (cr6.getLT()) goto loc_8215BCA8;
	// addi r5,r28,-3
	ctx.r5.s64 = r28.s64 + -3;
loc_8215BA28:
	// cmpw cr6,r10,r31
	cr6.compare<int32_t>(ctx.r10.s32, r31.s32, xer);
	// bgt cr6,0x8215bac0
	if (cr6.getGT()) goto loc_8215BAC0;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8215ba48
	if (!cr6.getGT()) goto loc_8215BA48;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// lwz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// b 0x8215ba4c
	goto loc_8215BA4C;
loc_8215BA48:
	// li r9,0
	ctx.r9.s64 = 0;
loc_8215BA4C:
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lwzx r8,r11,r30
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// subf r7,r9,r8
	ctx.r7.s64 = ctx.r8.s64 - ctx.r9.s64;
	// bne cr6,0x8215ba64
	if (!cr6.getEQ()) goto loc_8215BA64;
	// addi r7,r7,-24000
	ctx.r7.s64 = ctx.r7.s64 + -24000;
loc_8215BA64:
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// addi r8,r1,128
	ctx.r8.s64 = ctx.r1.s64 + 128;
	// cmpw cr6,r6,r10
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r10.s32, xer);
	// lwzx r9,r11,r9
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// lwzx r8,r11,r8
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// addi r11,r9,1
	r11.s64 = ctx.r9.s64 + 1;
	// blt cr6,0x8215ba84
	if (cr6.getLT()) goto loc_8215BA84;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
loc_8215BA84:
	// cmpw cr6,r8,r11
	cr6.compare<int32_t>(ctx.r8.s32, r11.s32, xer);
	// ble cr6,0x8215ba90
	if (!cr6.getGT()) goto loc_8215BA90;
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_8215BA90:
	// extsw r9,r7
	ctx.r9.s64 = ctx.r7.s32;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r9,168(r1)
	PPC_STORE_U64(ctx.r1.u32 + 168, ctx.r9.u64);
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, r11.u64);
	// lfd f0,168(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 168);
	// lfd f13,216(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 216);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// fadds f31,f0,f31
	f31.f64 = double(float(f0.f64 + f31.f64));
loc_8215BAC0:
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r9,r31
	cr6.compare<int32_t>(ctx.r9.s32, r31.s32, xer);
	// bgt cr6,0x8215bb5c
	if (cr6.getGT()) goto loc_8215BB5C;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x8215bae0
	if (!cr6.getGT()) goto loc_8215BAE0;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r8,r11,r30
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// b 0x8215bae4
	goto loc_8215BAE4;
loc_8215BAE0:
	// li r8,0
	ctx.r8.s64 = 0;
loc_8215BAE4:
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r7,r30,4
	ctx.r7.s64 = r30.s64 + 4;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// lwzx r7,r11,r7
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// subf r7,r8,r7
	ctx.r7.s64 = ctx.r7.s64 - ctx.r8.s64;
	// bne cr6,0x8215bb00
	if (!cr6.getEQ()) goto loc_8215BB00;
	// addi r7,r7,-24000
	ctx.r7.s64 = ctx.r7.s64 + -24000;
loc_8215BB00:
	// addi r8,r1,84
	ctx.r8.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// cmpw cr6,r6,r9
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r9.s32, xer);
	// lwzx r9,r11,r8
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// lwzx r8,r11,r4
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + ctx.r4.u32);
	// addi r11,r9,1
	r11.s64 = ctx.r9.s64 + 1;
	// blt cr6,0x8215bb20
	if (cr6.getLT()) goto loc_8215BB20;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
loc_8215BB20:
	// cmpw cr6,r8,r11
	cr6.compare<int32_t>(ctx.r8.s32, r11.s32, xer);
	// ble cr6,0x8215bb2c
	if (!cr6.getGT()) goto loc_8215BB2C;
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_8215BB2C:
	// extsw r9,r7
	ctx.r9.s64 = ctx.r7.s32;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r9,224(r1)
	PPC_STORE_U64(ctx.r1.u32 + 224, ctx.r9.u64);
	// std r11,240(r1)
	PPC_STORE_U64(ctx.r1.u32 + 240, r11.u64);
	// lfd f0,224(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 224);
	// lfd f13,240(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 240);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// fadds f31,f0,f31
	f31.f64 = double(float(f0.f64 + f31.f64));
loc_8215BB5C:
	// addi r9,r10,2
	ctx.r9.s64 = ctx.r10.s64 + 2;
	// cmpw cr6,r9,r31
	cr6.compare<int32_t>(ctx.r9.s32, r31.s32, xer);
	// bgt cr6,0x8215bbfc
	if (cr6.getGT()) goto loc_8215BBFC;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x8215bb80
	if (!cr6.getGT()) goto loc_8215BB80;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r30,4
	ctx.r8.s64 = r30.s64 + 4;
	// lwzx r8,r11,r8
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// b 0x8215bb84
	goto loc_8215BB84;
loc_8215BB80:
	// li r8,0
	ctx.r8.s64 = 0;
loc_8215BB84:
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r7,r30,8
	ctx.r7.s64 = r30.s64 + 8;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// lwzx r7,r11,r7
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// subf r7,r8,r7
	ctx.r7.s64 = ctx.r7.s64 - ctx.r8.s64;
	// bne cr6,0x8215bba0
	if (!cr6.getEQ()) goto loc_8215BBA0;
	// addi r7,r7,-24000
	ctx.r7.s64 = ctx.r7.s64 + -24000;
loc_8215BBA0:
	// addi r8,r1,88
	ctx.r8.s64 = ctx.r1.s64 + 88;
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// cmpw cr6,r6,r9
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r9.s32, xer);
	// lwzx r9,r11,r8
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// lwzx r8,r11,r4
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + ctx.r4.u32);
	// addi r11,r9,1
	r11.s64 = ctx.r9.s64 + 1;
	// blt cr6,0x8215bbc0
	if (cr6.getLT()) goto loc_8215BBC0;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
loc_8215BBC0:
	// cmpw cr6,r8,r11
	cr6.compare<int32_t>(ctx.r8.s32, r11.s32, xer);
	// ble cr6,0x8215bbcc
	if (!cr6.getGT()) goto loc_8215BBCC;
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_8215BBCC:
	// extsw r9,r7
	ctx.r9.s64 = ctx.r7.s32;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r9,256(r1)
	PPC_STORE_U64(ctx.r1.u32 + 256, ctx.r9.u64);
	// std r11,232(r1)
	PPC_STORE_U64(ctx.r1.u32 + 232, r11.u64);
	// lfd f0,256(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 256);
	// lfd f13,232(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 232);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// fadds f31,f0,f31
	f31.f64 = double(float(f0.f64 + f31.f64));
loc_8215BBFC:
	// addi r9,r10,3
	ctx.r9.s64 = ctx.r10.s64 + 3;
	// cmpw cr6,r9,r31
	cr6.compare<int32_t>(ctx.r9.s32, r31.s32, xer);
	// bgt cr6,0x8215bc9c
	if (cr6.getGT()) goto loc_8215BC9C;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x8215bc20
	if (!cr6.getGT()) goto loc_8215BC20;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r30,8
	ctx.r8.s64 = r30.s64 + 8;
	// lwzx r8,r11,r8
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// b 0x8215bc24
	goto loc_8215BC24;
loc_8215BC20:
	// li r8,0
	ctx.r8.s64 = 0;
loc_8215BC24:
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r7,r30,12
	ctx.r7.s64 = r30.s64 + 12;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// lwzx r7,r11,r7
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// subf r7,r8,r7
	ctx.r7.s64 = ctx.r7.s64 - ctx.r8.s64;
	// bne cr6,0x8215bc40
	if (!cr6.getEQ()) goto loc_8215BC40;
	// addi r7,r7,-24000
	ctx.r7.s64 = ctx.r7.s64 + -24000;
loc_8215BC40:
	// addi r8,r1,92
	ctx.r8.s64 = ctx.r1.s64 + 92;
	// addi r4,r1,140
	ctx.r4.s64 = ctx.r1.s64 + 140;
	// cmpw cr6,r6,r9
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r9.s32, xer);
	// lwzx r9,r11,r8
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// lwzx r8,r11,r4
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + ctx.r4.u32);
	// addi r11,r9,1
	r11.s64 = ctx.r9.s64 + 1;
	// blt cr6,0x8215bc60
	if (cr6.getLT()) goto loc_8215BC60;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
loc_8215BC60:
	// cmpw cr6,r8,r11
	cr6.compare<int32_t>(ctx.r8.s32, r11.s32, xer);
	// ble cr6,0x8215bc6c
	if (!cr6.getGT()) goto loc_8215BC6C;
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_8215BC6C:
	// extsw r9,r7
	ctx.r9.s64 = ctx.r7.s32;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r9,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, ctx.r9.u64);
	// std r11,248(r1)
	PPC_STORE_U64(ctx.r1.u32 + 248, r11.u64);
	// lfd f0,192(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 192);
	// lfd f13,248(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 248);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// fadds f31,f0,f31
	f31.f64 = double(float(f0.f64 + f31.f64));
loc_8215BC9C:
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r10,r5
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r5.s32, xer);
	// ble cr6,0x8215ba28
	if (!cr6.getGT()) goto loc_8215BA28;
loc_8215BCA8:
	// cmpw cr6,r10,r28
	cr6.compare<int32_t>(ctx.r10.s32, r28.s32, xer);
	// bgt cr6,0x8215bd54
	if (cr6.getGT()) goto loc_8215BD54;
loc_8215BCB0:
	// cmpw cr6,r10,r31
	cr6.compare<int32_t>(ctx.r10.s32, r31.s32, xer);
	// bgt cr6,0x8215bd48
	if (cr6.getGT()) goto loc_8215BD48;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8215bcd0
	if (!cr6.getGT()) goto loc_8215BCD0;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// lwz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// b 0x8215bcd4
	goto loc_8215BCD4;
loc_8215BCD0:
	// li r9,0
	ctx.r9.s64 = 0;
loc_8215BCD4:
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lwzx r8,r11,r30
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// subf r7,r9,r8
	ctx.r7.s64 = ctx.r8.s64 - ctx.r9.s64;
	// bne cr6,0x8215bcec
	if (!cr6.getEQ()) goto loc_8215BCEC;
	// addi r7,r7,-24000
	ctx.r7.s64 = ctx.r7.s64 + -24000;
loc_8215BCEC:
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// addi r8,r1,128
	ctx.r8.s64 = ctx.r1.s64 + 128;
	// cmpw cr6,r6,r10
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r10.s32, xer);
	// lwzx r9,r11,r9
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// lwzx r8,r11,r8
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + ctx.r8.u32);
	// addi r11,r9,1
	r11.s64 = ctx.r9.s64 + 1;
	// blt cr6,0x8215bd0c
	if (cr6.getLT()) goto loc_8215BD0C;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
loc_8215BD0C:
	// cmpw cr6,r8,r11
	cr6.compare<int32_t>(ctx.r8.s32, r11.s32, xer);
	// ble cr6,0x8215bd18
	if (!cr6.getGT()) goto loc_8215BD18;
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_8215BD18:
	// extsw r9,r7
	ctx.r9.s64 = ctx.r7.s32;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r9,200(r1)
	PPC_STORE_U64(ctx.r1.u32 + 200, ctx.r9.u64);
	// std r11,208(r1)
	PPC_STORE_U64(ctx.r1.u32 + 208, r11.u64);
	// lfd f0,200(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 200);
	// lfd f13,208(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 208);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fdivs f0,f0,f13
	f0.f64 = double(float(f0.f64 / ctx.f13.f64));
	// fadds f31,f0,f31
	f31.f64 = double(float(f0.f64 + f31.f64));
loc_8215BD48:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r10,r28
	cr6.compare<int32_t>(ctx.r10.s32, r28.s32, xer);
	// ble cr6,0x8215bcb0
	if (!cr6.getGT()) goto loc_8215BCB0;
loc_8215BD54:
	// addi r11,r29,156
	r11.s64 = r29.s64 + 156;
	// fctiwz f0,f31
	ctx.fpscr.disableFlushMode();
	f0.s64 = (f31.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f31.f64));
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,184(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215b940
	if (!cr6.getEQ()) goto loc_8215B940;
loc_8215BD74:
	// addi r1,r1,432
	ctx.r1.s64 = ctx.r1.s64 + 432;
	// lfd f30,-168(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -168);
	// lfd f31,-160(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x823ed150
	return;
}

__attribute__((alias("__imp__sub_8215BD88"))) PPC_WEAK_FUNC(sub_8215BD88);
PPC_FUNC_IMPL(__imp__sub_8215BD88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// addi r11,r11,-28772
	r11.s64 = r11.s64 + -28772;
	// lbz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq cr6,0x8215bdc8
	if (cr6.getEQ()) goto loc_8215BDC8;
	// li r30,0
	r30.s64 = 0;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// stb r30,4(r31)
	PPC_STORE_U8(r31.u32 + 4, r30.u8);
	// bl 0x823bc6a8
	sub_823BC6A8(ctx, base);
	// stw r30,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r30.u32);
loc_8215BDC8:
	// clrlwi r11,r29,31
	r11.u64 = r29.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215bde0
	if (cr6.getEQ()) goto loc_8215BDE0;
	// bl 0x8209d150
	sub_8209D150(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8215BDE0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8215BDE8"))) PPC_WEAK_FUNC(sub_8215BDE8);
PPC_FUNC_IMPL(__imp__sub_8215BDE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215be14
	if (!cr6.getEQ()) goto loc_8215BE14;
	// lbz r11,4(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215be14
	if (!cr6.getEQ()) goto loc_8215BE14;
	// bl 0x8215b600
	sub_8215B600(ctx, base);
loc_8215BE14:
	// lbz r11,4(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215beb4
	if (cr6.getEQ()) goto loc_8215BEB4;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// li r30,0
	r30.s64 = 0;
	// mr r11,r30
	r11.u64 = r30.u64;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// ble cr6,0x8215be9c
	if (!cr6.getGT()) goto loc_8215BE9C;
	// addi r10,r3,8
	ctx.r10.s64 = ctx.r3.s64 + 8;
loc_8215BE3C:
	// lbz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// clrlwi r9,r9,31
	ctx.r9.u64 = ctx.r9.u32 & 0x1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8215be68
	if (!cr6.getEQ()) goto loc_8215BE68;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 24;
	// lwz r9,0(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// blt cr6,0x8215be3c
	if (cr6.getLT()) goto loc_8215BE3C;
	// b 0x8215be9c
	goto loc_8215BE9C;
loc_8215BE68:
	// lbz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8215be9c
	if (!cr6.getEQ()) goto loc_8215BE9C;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// li r9,1
	ctx.r9.s64 = 1;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// stw r10,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r10.u32);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stb r9,12(r31)
	PPC_STORE_U8(r31.u32 + 12, ctx.r9.u8);
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
loc_8215BE9C:
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215beb4
	if (!cr6.getEQ()) goto loc_8215BEB4;
	// stb r30,4(r31)
	PPC_STORE_U8(r31.u32 + 4, r30.u8);
	// bl 0x823bc6a8
	sub_823BC6A8(ctx, base);
	// stw r30,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r30.u32);
loc_8215BEB4:
	// lbz r11,132(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 132);
	// li r30,4
	r30.s64 = 4;
	// li r29,4
	r29.s64 = 4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215bed4
	if (cr6.getEQ()) goto loc_8215BED4;
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// lwz r10,140(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// b 0x8215bf0c
	goto loc_8215BF0C;
loc_8215BED4:
	// bl 0x8215fd20
	sub_8215FD20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8215bef8
	if (!cr6.getEQ()) goto loc_8215BEF8;
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215bf34
	if (cr6.getEQ()) goto loc_8215BF34;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// b 0x8215bf0c
	goto loc_8215BF0C;
loc_8215BEF8:
	// lbz r11,104(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215bf34
	if (cr6.getEQ()) goto loc_8215BF34;
	// lwz r11,108(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 108);
	// lwz r10,112(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 112);
loc_8215BF0C:
	// srawi r11,r11,14
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFF) != 0);
	r11.s64 = r11.s32 >> 14;
	// addze r30,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r30.s64 = temp.s64;
	// srawi r11,r10,14
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3FFF) != 0);
	r11.s64 = ctx.r10.s32 >> 14;
	// cmpwi cr6,r30,64
	cr6.compare<int32_t>(r30.s32, 64, xer);
	// addze r29,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r29.s64 = temp.s64;
	// ble cr6,0x8215bf28
	if (!cr6.getGT()) goto loc_8215BF28;
	// li r30,64
	r30.s64 = 64;
loc_8215BF28:
	// cmpwi cr6,r29,64
	cr6.compare<int32_t>(r29.s32, 64, xer);
	// ble cr6,0x8215bf34
	if (!cr6.getGT()) goto loc_8215BF34;
	// li r29,64
	r29.s64 = 64;
loc_8215BF34:
	// rlwinm r11,r30,14,0,17
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 14) & 0xFFFFC000;
	// rlwinm r10,r29,14,0,17
	ctx.r10.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 14) & 0xFFFFC000;
	// stw r11,124(r31)
	PPC_STORE_U32(r31.u32 + 124, r11.u32);
	// stw r10,128(r31)
	PPC_STORE_U32(r31.u32 + 128, ctx.r10.u32);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// addi r27,r28,988
	r27.s64 = r28.s64 + 988;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// bne cr6,0x8215bf90
	if (!cr6.getEQ()) goto loc_8215BF90;
	// addi r3,r28,1040
	ctx.r3.s64 = r28.s64 + 1040;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// beq cr6,0x8215bfd4
	if (cr6.getEQ()) goto loc_8215BFD4;
loc_8215BF90:
	// lwz r11,116(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215bfb0
	if (cr6.getEQ()) goto loc_8215BFB0;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwz r11,116(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 116);
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// cmplwi cr6,r11,10000
	cr6.compare<uint32_t>(r11.u32, 10000, xer);
	// ble cr6,0x8215bfd4
	if (!cr6.getGT()) goto loc_8215BFD4;
loc_8215BFB0:
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// clrlwi r4,r30,24
	ctx.r4.u64 = r30.u32 & 0xFF;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,116(r31)
	PPC_STORE_U32(r31.u32 + 116, r11.u32);
	// bl 0x82177218
	sub_82177218(ctx, base);
	// clrlwi r4,r29,24
	ctx.r4.u64 = r29.u32 & 0xFF;
	// addi r3,r28,1040
	ctx.r3.s64 = r28.s64 + 1040;
	// bl 0x82177218
	sub_82177218(ctx, base);
loc_8215BFD4:
	// lwz r11,120(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 120);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215bff4
	if (cr6.getEQ()) goto loc_8215BFF4;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lwz r11,120(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 120);
	// subf r11,r11,r3
	r11.s64 = ctx.r3.s64 - r11.s64;
	// cmplwi cr6,r11,1000
	cr6.compare<uint32_t>(r11.u32, 1000, xer);
	// ble cr6,0x8215c008
	if (!cr6.getGT()) goto loc_8215C008;
loc_8215BFF4:
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,120(r31)
	PPC_STORE_U32(r31.u32 + 120, r11.u32);
	// bl 0x8215b680
	sub_8215B680(ctx, base);
loc_8215C008:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8215C010"))) PPC_WEAK_FUNC(sub_8215C010);
PPC_FUNC_IMPL(__imp__sub_8215C010) {
	PPC_FUNC_PROLOGUE();
	// li r3,80
	ctx.r3.s64 = 80;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C018"))) PPC_WEAK_FUNC(sub_8215C018);
PPC_FUNC_IMPL(__imp__sub_8215C018) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r10,r11,-28768
	ctx.r10.s64 = r11.s64 + -28768;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// lwz r9,-28052(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + -28052);
	// cmplw cr6,r31,r9
	cr6.compare<uint32_t>(r31.u32, ctx.r9.u32, xer);
	// bne cr6,0x8215c058
	if (!cr6.getEQ()) goto loc_8215C058;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,-28052(r11)
	PPC_STORE_U32(r11.u32 + -28052, ctx.r10.u32);
loc_8215C058:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r11,-30472
	r11.s64 = r11.s64 + -30472;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// bl 0x823b7118
	sub_823B7118(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215c084
	if (cr6.getEQ()) goto loc_8215C084;
	// bl 0x8209e328
	sub_8209E328(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_8215C084:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C0A0"))) PPC_WEAK_FUNC(sub_8215C0A0);
PPC_FUNC_IMPL(__imp__sub_8215C0A0) {
	PPC_FUNC_PROLOGUE();
	// li r3,81
	ctx.r3.s64 = 81;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C0A8"))) PPC_WEAK_FUNC(sub_8215C0A8);
PPC_FUNC_IMPL(__imp__sub_8215C0A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,40
	ctx.r3.s64 = 40;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215c110
	if (cr6.getEQ()) goto loc_8215C110;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-28768
	ctx.r10.s64 = r11.s64 + -28768;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215C110:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C128"))) PPC_WEAK_FUNC(sub_8215C128);
PPC_FUNC_IMPL(__imp__sub_8215C128) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,36(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215c1d4
	if (cr6.getEQ()) goto loc_8215C1D4;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lbz r11,-28060(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -28060);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215c1d4
	if (cr6.getEQ()) goto loc_8215C1D4;
	// li r3,40
	ctx.r3.s64 = 40;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215c1b4
	if (cr6.getEQ()) goto loc_8215C1B4;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-28688
	ctx.r10.s64 = r11.s64 + -28688;
	// li r11,0
	r11.s64 = 0;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// b 0x8215c1b8
	goto loc_8215C1B8;
loc_8215C1B4:
	// li r31,0
	r31.s64 = 0;
loc_8215C1B8:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,8(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8215C1D4:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C1F0"))) PPC_WEAK_FUNC(sub_8215C1F0);
PPC_FUNC_IMPL(__imp__sub_8215C1F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,40
	ctx.r3.s64 = 40;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215c258
	if (cr6.getEQ()) goto loc_8215C258;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-28688
	ctx.r10.s64 = r11.s64 + -28688;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215C258:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C270"))) PPC_WEAK_FUNC(sub_8215C270);
PPC_FUNC_IMPL(__imp__sub_8215C270) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// li r4,32
	ctx.r4.s64 = 32;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215c2e4
	if (cr6.getEQ()) goto loc_8215C2E4;
	// lbz r11,36(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215c2e4
	if (cr6.getEQ()) goto loc_8215C2E4;
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r11,r11,-28060
	r11.s64 = r11.s64 + -28060;
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// subf r10,r3,r31
	ctx.r10.s64 = r31.s64 - ctx.r3.s64;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
loc_8215C2E4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C300"))) PPC_WEAK_FUNC(sub_8215C300);
PPC_FUNC_IMPL(__imp__sub_8215C300) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// li r11,0
	r11.s64 = 0;
	// stb r11,-28060(r10)
	PPC_STORE_U8(ctx.r10.u32 + -28060, r11.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C310"))) PPC_WEAK_FUNC(sub_8215C310);
PPC_FUNC_IMPL(__imp__sub_8215C310) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lbz r11,36(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 36);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215c400
	if (cr6.getEQ()) goto loc_8215C400;
	// lis r9,-31992
	ctx.r9.s64 = -2096627712;
	// lbz r11,-28060(r9)
	r11.u64 = PPC_LOAD_U8(ctx.r9.u32 + -28060);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215c4b8
	if (!cr6.getEQ()) goto loc_8215C4B8;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r31,0
	r31.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r10,-28060(r9)
	PPC_STORE_U8(ctx.r9.u32 + -28060, ctx.r10.u8);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r31.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215c4b8
	if (cr6.getEQ()) goto loc_8215C4B8;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r28,-1
	r28.s64 = -1;
	// addi r29,r11,-28688
	r29.s64 = r11.s64 + -28688;
loc_8215C37C:
	// li r3,40
	ctx.r3.s64 = 40;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215c3c0
	if (cr6.getEQ()) goto loc_8215C3C0;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r28,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r28.u32);
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// b 0x8215c3c4
	goto loc_8215C3C4;
loc_8215C3C0:
	// mr r30,r31
	r30.u64 = r31.u64;
loc_8215C3C4:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,16(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215c37c
	if (!cr6.getEQ()) goto loc_8215C37C;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
loc_8215C400:
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r29,r11,-28060
	r29.s64 = r11.s64 + -28060;
	// lbz r11,0(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215c4b8
	if (!cr6.getEQ()) goto loc_8215C4B8;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215c4b8
	if (!cr6.getEQ()) goto loc_8215C4B8;
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215c4b8
	if (cr6.getEQ()) goto loc_8215C4B8;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x8215c4b8
	if (!cr6.getEQ()) goto loc_8215C4B8;
	// li r3,40
	ctx.r3.s64 = 40;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215c48c
	if (cr6.getEQ()) goto loc_8215C48C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r31,0
	r31.s64 = 0;
	// addi r11,r11,-28768
	r11.s64 = r11.s64 + -28768;
	// li r10,-1
	ctx.r10.s64 = -1;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stw r10,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r10.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// b 0x8215c490
	goto loc_8215C490;
loc_8215C48C:
	// li r30,0
	r30.s64 = 0;
loc_8215C490:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,16(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// stw r30,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r30.u32);
loc_8215C4B8:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8215C4C0"))) PPC_WEAK_FUNC(sub_8215C4C0);
PPC_FUNC_IMPL(__imp__sub_8215C4C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// bl 0x823b3600
	sub_823B3600(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r5,32
	ctx.r5.s64 = 32;
	// lwz r11,-28056(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -28056);
	// add r4,r3,r11
	ctx.r4.u64 = ctx.r3.u64 + r11.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C528"))) PPC_WEAK_FUNC(sub_8215C528);
PPC_FUNC_IMPL(__imp__sub_8215C528) {
	PPC_FUNC_PROLOGUE();
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x8209cbc8
	sub_8209CBC8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8215C530"))) PPC_WEAK_FUNC(sub_8215C530);
PPC_FUNC_IMPL(__imp__sub_8215C530) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beqlr cr6
	if (cr6.getEQ()) return;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_8215C54C"))) PPC_WEAK_FUNC(sub_8215C54C);
PPC_FUNC_IMPL(__imp__sub_8215C54C) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C550"))) PPC_WEAK_FUNC(sub_8215C550);
PPC_FUNC_IMPL(__imp__sub_8215C550) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,72(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 72);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_8215C568"))) PPC_WEAK_FUNC(sub_8215C568);
PPC_FUNC_IMPL(__imp__sub_8215C568) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,76(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 76);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_8215C580"))) PPC_WEAK_FUNC(sub_8215C580);
PPC_FUNC_IMPL(__imp__sub_8215C580) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// li r11,0
	r11.s64 = 0;
	// lwz r30,8(r27)
	r30.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// cmplwi cr6,r30,63
	cr6.compare<uint32_t>(r30.u32, 63, xer);
	// bgt cr6,0x8215c640
	if (cr6.getGT()) goto loc_8215C640;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// rlwinm r31,r30,2,0,29
	r31.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r28,r11,-28000
	r28.s64 = r11.s64 + -28000;
	// addi r29,r28,256
	r29.s64 = r28.s64 + 256;
	// bl 0x823b34d8
	sub_823B34D8(ctx, base);
	// lwzx r11,r31,r29
	r11.u64 = PPC_LOAD_U32(r31.u32 + r29.u32);
	// cmplw cr6,r11,r3
	cr6.compare<uint32_t>(r11.u32, ctx.r3.u32, xer);
	// beq cr6,0x8215c63c
	if (cr6.getEQ()) goto loc_8215C63C;
	// bl 0x823b34d8
	sub_823B34D8(ctx, base);
	// stwx r3,r31,r29
	PPC_STORE_U32(r31.u32 + r29.u32, ctx.r3.u32);
	// bl 0x8214c2b8
	sub_8214C2B8(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8214c2c8
	sub_8214C2C8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fdivs f31,f0,f31
	f31.f64 = double(float(f0.f64 / f31.f64));
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215c610
	if (cr6.getEQ()) goto loc_8215C610;
	// lfs f0,196(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 196);
	f0.f64 = double(temp.f32);
	// fmuls f31,f0,f31
	f31.f64 = double(float(f0.f64 * f31.f64));
loc_8215C610:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// ble cr6,0x8215c624
	if (!cr6.getGT()) goto loc_8215C624;
	// fmr f31,f0
	f31.f64 = f0.f64;
loc_8215C624:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// add r10,r31,r28
	ctx.r10.u64 = r31.u64 + r28.u64;
	// lfd f0,-28584(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + -28584);
	// fmul f0,f31,f0
	f0.f64 = f31.f64 * f0.f64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
loc_8215C63C:
	// lwzx r11,r31,r28
	r11.u64 = PPC_LOAD_U32(r31.u32 + r28.u32);
loc_8215C640:
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r11,4(r27)
	PPC_STORE_U32(r27.u32 + 4, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8215C658"))) PPC_WEAK_FUNC(sub_8215C658);
PPC_FUNC_IMPL(__imp__sub_8215C658) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed12c
	// stfd f30,-80(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -80, f30.u64);
	// stfd f31,-72(r1)
	PPC_STORE_U64(ctx.r1.u32 + -72, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r30,8(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r30,63
	cr6.compare<uint32_t>(r30.u32, 63, xer);
	// bgt cr6,0x8215c854
	if (cr6.getGT()) goto loc_8215C854;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// rlwinm r31,r30,2,0,29
	r31.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r26,r11,-28000
	r26.s64 = r11.s64 + -28000;
	// addi r29,r26,256
	r29.s64 = r26.s64 + 256;
	// bl 0x823b34d8
	sub_823B34D8(ctx, base);
	// lwzx r11,r31,r29
	r11.u64 = PPC_LOAD_U32(r31.u32 + r29.u32);
	// cmplw cr6,r11,r3
	cr6.compare<uint32_t>(r11.u32, ctx.r3.u32, xer);
	// beq cr6,0x8215c710
	if (cr6.getEQ()) goto loc_8215C710;
	// bl 0x823b34d8
	sub_823B34D8(ctx, base);
	// stwx r3,r31,r29
	PPC_STORE_U32(r31.u32 + r29.u32, ctx.r3.u32);
	// bl 0x8214c2b8
	sub_8214C2B8(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
	// bl 0x8214c2c8
	sub_8214C2C8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fdivs f31,f0,f31
	f31.f64 = double(float(f0.f64 / f31.f64));
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215c6e4
	if (cr6.getEQ()) goto loc_8215C6E4;
	// lfs f0,196(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 196);
	f0.f64 = double(temp.f32);
	// fmuls f31,f0,f31
	f31.f64 = double(float(f0.f64 * f31.f64));
loc_8215C6E4:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,2776(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2776);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// ble cr6,0x8215c6f8
	if (!cr6.getGT()) goto loc_8215C6F8;
	// fmr f31,f0
	f31.f64 = f0.f64;
loc_8215C6F8:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// add r10,r31,r26
	ctx.r10.u64 = r31.u64 + r26.u64;
	// lfd f0,-28584(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + -28584);
	// fmul f0,f31,f0
	f0.f64 = f31.f64 * f0.f64;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, f0.u32);
loc_8215C710:
	// lwzx r25,r31,r26
	r25.u64 = PPC_LOAD_U32(r31.u32 + r26.u32);
	// addi r29,r26,768
	r29.s64 = r26.s64 + 768;
	// stw r25,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r25.u32);
	// bl 0x823b34d8
	sub_823B34D8(ctx, base);
	// lwzx r11,r31,r29
	r11.u64 = PPC_LOAD_U32(r31.u32 + r29.u32);
	// cmplw cr6,r11,r3
	cr6.compare<uint32_t>(r11.u32, ctx.r3.u32, xer);
	// beq cr6,0x8215c80c
	if (cr6.getEQ()) goto loc_8215C80C;
	// bl 0x823b34d8
	sub_823B34D8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r5,5
	ctx.r5.s64 = 5;
	// li r4,45
	ctx.r4.s64 = 45;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stwx r11,r31,r29
	PPC_STORE_U32(r31.u32 + r29.u32, r11.u32);
	// bl 0x823b44d0
	sub_823B44D0(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r27,r26,512
	r27.s64 = r26.s64 + 512;
	// lfs f30,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f30.f64 = double(temp.f32);
	// stfsx f1,r31,r27
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(r31.u32 + r27.u32, temp.u32);
	// fcmpu cr6,f1,f30
	cr6.compare(ctx.f1.f64, f30.f64);
	// bgt cr6,0x8215c7f8
	if (cr6.getGT()) goto loc_8215C7F8;
	// bl 0x823b3528
	sub_823B3528(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// fmr f31,f30
	ctx.fpscr.disableFlushMode();
	f31.f64 = f30.f64;
	// li r29,0
	r29.s64 = 0;
	// bl 0x823b3ec0
	sub_823B3EC0(ctx, base);
	// lwz r30,0(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8215c7d4
	if (cr6.getEQ()) goto loc_8215C7D4;
loc_8215C784:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7320
	sub_823B7320(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8215c7c0
	if (cr6.getEQ()) goto loc_8215C7C0;
	// lwz r11,36(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 36);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// subf r11,r11,r28
	r11.s64 = r28.s64 - r11.s64;
	// cmpwi cr6,r29,5
	cr6.compare<int32_t>(r29.s32, 5, xer);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fadds f31,f0,f31
	f31.f64 = double(float(f0.f64 + f31.f64));
	// bge cr6,0x8215c7cc
	if (!cr6.getLT()) goto loc_8215C7CC;
loc_8215C7C0:
	// lwz r30,24(r30)
	r30.u64 = PPC_LOAD_U32(r30.u32 + 24);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x8215c784
	if (!cr6.getEQ()) goto loc_8215C784;
loc_8215C7CC:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x8215c7dc
	if (!cr6.getEQ()) goto loc_8215C7DC;
loc_8215C7D4:
	// stfsx f30,r31,r27
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + r27.u32, temp.u32);
	// b 0x8215c7f8
	goto loc_8215C7F8;
loc_8215C7DC:
	// extsw r11,r29
	r11.s64 = r29.s32;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fdivs f0,f31,f0
	f0.f64 = double(float(f31.f64 / f0.f64));
	// stfsx f0,r31,r27
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + r27.u32, temp.u32);
loc_8215C7F8:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfsx f13,r31,r27
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + r27.u32);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,12024(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 12024);
	f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	f0.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfsx f0,r31,r27
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + r27.u32, temp.u32);
loc_8215C80C:
	// extsw r11,r25
	r11.s64 = r25.s32;
	// addi r10,r26,512
	ctx.r10.s64 = r26.s64 + 512;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// lfsx f0,r31,r10
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + ctx.r10.u32);
	f0.f64 = double(temp.f32);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fcmpu cr6,f0,f13
	cr6.compare(f0.f64, ctx.f13.f64);
	// ble cr6,0x8215c850
	if (!cr6.getGT()) goto loc_8215C850;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f30,-80(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
loc_8215C850:
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
loc_8215C854:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f30,-80(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f31,-72(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x823ed17c
	return;
}

__attribute__((alias("__imp__sub_8215C868"))) PPC_WEAK_FUNC(sub_8215C868);
PPC_FUNC_IMPL(__imp__sub_8215C868) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// stw r4,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r4.u32);
	// stw r5,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r5.u32);
	// stw r6,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r6.u32);
	// stw r7,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r7.u32);
	// stb r8,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, ctx.r8.u8);
	// lwz r10,-26976(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + -26976);
	// stw r10,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r10.u32);
	// stw r3,-26976(r11)
	PPC_STORE_U32(r11.u32 + -26976, ctx.r3.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C890"))) PPC_WEAK_FUNC(sub_8215C890);
PPC_FUNC_IMPL(__imp__sub_8215C890) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r31,-26976(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + -26976);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8215c8dc
	if (cr6.getEQ()) goto loc_8215C8DC;
loc_8215C8B0:
	// lbz r6,16(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 16);
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x823b74e0
	sub_823B74E0(ctx, base);
	// lwz r4,4(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// bl 0x823b4010
	sub_823B4010(ctx, base);
	// lwz r31,20(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8215c8b0
	if (!cr6.getEQ()) goto loc_8215C8B0;
loc_8215C8DC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C8F0"))) PPC_WEAK_FUNC(sub_8215C8F0);
PPC_FUNC_IMPL(__imp__sub_8215C8F0) {
	PPC_FUNC_PROLOGUE();
	// li r3,90
	ctx.r3.s64 = 90;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C8F8"))) PPC_WEAK_FUNC(sub_8215C8F8);
PPC_FUNC_IMPL(__imp__sub_8215C8F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,41(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 41);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,41(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 41);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215c9b0
	if (!cr6.getEQ()) goto loc_8215C9B0;
	// lbz r11,40(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 40);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,48(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 48);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,49(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 49);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
loc_8215C9B0:
	// li r5,5
	ctx.r5.s64 = 5;
	// lwz r4,44(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215C9D8"))) PPC_WEAK_FUNC(sub_8215C9D8);
PPC_FUNC_IMPL(__imp__sub_8215C9D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// subfic r11,r3,0
	xer.ca = ctx.r3.u32 <= 0;
	r11.s64 = 0 - ctx.r3.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stb r11,41(r30)
	PPC_STORE_U8(r30.u32 + 41, r11.u8);
	// bne cr6,0x8215ca78
	if (!cr6.getEQ()) goto loc_8215CA78;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// subfic r11,r3,0
	xer.ca = ctx.r3.u32 <= 0;
	r11.s64 = 0 - ctx.r3.s64;
	// li r4,1
	ctx.r4.s64 = 1;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// stb r11,40(r30)
	PPC_STORE_U8(r30.u32 + 40, r11.u8);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// subfic r11,r3,0
	xer.ca = ctx.r3.u32 <= 0;
	r11.s64 = 0 - ctx.r3.s64;
	// li r4,1
	ctx.r4.s64 = 1;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// stb r11,48(r30)
	PPC_STORE_U8(r30.u32 + 48, r11.u8);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// subfic r11,r3,0
	xer.ca = ctx.r3.u32 <= 0;
	r11.s64 = 0 - ctx.r3.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// stb r11,49(r30)
	PPC_STORE_U8(r30.u32 + 49, r11.u8);
loc_8215CA78:
	// li r4,5
	ctx.r4.s64 = 5;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// stw r3,44(r30)
	PPC_STORE_U32(r30.u32 + 44, ctx.r3.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215CAA0"))) PPC_WEAK_FUNC(sub_8215CAA0);
PPC_FUNC_IMPL(__imp__sub_8215CAA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,52
	ctx.r3.s64 = 52;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215cb1c
	if (cr6.getEQ()) goto loc_8215CB1C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-28576
	ctx.r10.s64 = r11.s64 + -28576;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stb r11,40(r3)
	PPC_STORE_U8(ctx.r3.u32 + 40, r11.u8);
	// stb r11,41(r3)
	PPC_STORE_U8(ctx.r3.u32 + 41, r11.u8);
	// stw r11,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, r11.u32);
	// stb r11,48(r3)
	PPC_STORE_U8(ctx.r3.u32 + 48, r11.u8);
	// stb r11,49(r3)
	PPC_STORE_U8(ctx.r3.u32 + 49, r11.u8);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215CB1C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215CB30"))) PPC_WEAK_FUNC(sub_8215CB30);
PPC_FUNC_IMPL(__imp__sub_8215CB30) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31993
	r30.s64 = -2096693248;
	// mulli r31,r4,52
	r31.s64 = ctx.r4.s64 * 52;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// addi r3,r11,1484
	ctx.r3.s64 = r11.s64 + 1484;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,29100(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// rlwinm r11,r11,0,28,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xC;
	// add r10,r31,r10
	ctx.r10.u64 = r31.u64 + ctx.r10.u64;
	// or r11,r11,r29
	r11.u64 = r11.u64 | r29.u64;
	// addi r3,r10,1484
	ctx.r3.s64 = ctx.r10.s64 + 1484;
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// bl 0x82177218
	sub_82177218(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8215CB90"))) PPC_WEAK_FUNC(sub_8215CB90);
PPC_FUNC_IMPL(__imp__sub_8215CB90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r3,r11,-26968
	ctx.r3.s64 = r11.s64 + -26968;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215CBA0"))) PPC_WEAK_FUNC(sub_8215CBA0);
PPC_FUNC_IMPL(__imp__sub_8215CBA0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r10,-1
	ctx.r10.s64 = -1;
	// mr r11,r31
	r11.u64 = r31.u64;
	// li r9,64
	ctx.r9.s64 = 64;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8215CBC4:
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bdnz 0x8215cbc4
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8215CBC4;
	// li r11,0
	r11.s64 = 0;
	// stw r11,256(r31)
	PPC_STORE_U32(r31.u32 + 256, r11.u32);
	// bl 0x820cca38
	sub_820CCA38(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215cc98
	if (cr6.getEQ()) goto loc_8215CC98;
loc_8215CBE4:
	// lbz r11,0(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// lwz r7,40(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x8215cc8c
	if (!cr6.getEQ()) goto loc_8215CC8C;
	// lwz r8,56(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x8215cc8c
	if (cr6.getLT()) goto loc_8215CC8C;
	// lwz r11,256(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 256);
	// cmpwi cr6,r11,64
	cr6.compare<int32_t>(r11.s32, 64, xer);
	// bge cr6,0x8215cc8c
	if (!cr6.getLT()) goto loc_8215CC8C;
	// lwz r9,8(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r11,r31
	r11.u64 = r31.u64;
loc_8215CC18:
	// lwz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r6,r8
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r8.s32, xer);
	// beq cr6,0x8215ccac
	if (cr6.getEQ()) goto loc_8215CCAC;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpwi cr6,r10,64
	cr6.compare<int32_t>(ctx.r10.s32, 64, xer);
	// blt cr6,0x8215cc18
	if (cr6.getLT()) goto loc_8215CC18;
	// li r11,0
	r11.s64 = 0;
loc_8215CC38:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215cc8c
	if (!cr6.getEQ()) goto loc_8215CC8C;
	// lwz r11,200(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215cc74
	if (cr6.getEQ()) goto loc_8215CC74;
loc_8215CC50:
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x8215cc74
	if (cr6.getEQ()) goto loc_8215CC74;
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8215cc68
	if (cr6.getEQ()) goto loc_8215CC68;
	// stw r8,56(r10)
	PPC_STORE_U32(ctx.r10.u32 + 56, ctx.r8.u32);
loc_8215CC68:
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215cc50
	if (!cr6.getEQ()) goto loc_8215CC50;
loc_8215CC74:
	// lwz r11,256(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 256);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r8,r11,r31
	PPC_STORE_U32(r11.u32 + r31.u32, ctx.r8.u32);
	// lwz r11,256(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 256);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,256(r31)
	PPC_STORE_U32(r31.u32 + 256, r11.u32);
loc_8215CC8C:
	// mr r3,r7
	ctx.r3.u64 = ctx.r7.u64;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8215cbe4
	if (!cr6.getEQ()) goto loc_8215CBE4;
loc_8215CC98:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8215CCAC:
	// li r11,1
	r11.s64 = 1;
	// b 0x8215cc38
	goto loc_8215CC38;
}

__attribute__((alias("__imp__sub_8215CCB8"))) PPC_WEAK_FUNC(sub_8215CCB8);
PPC_FUNC_IMPL(__imp__sub_8215CCB8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -88, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// li r28,0
	r28.s64 = 0;
	// mr r24,r4
	r24.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// mr r27,r28
	r27.u64 = r28.u64;
	// mr r11,r23
	r11.u64 = r23.u64;
loc_8215CCE8:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpw cr6,r10,r29
	cr6.compare<int32_t>(ctx.r10.s32, r29.s32, xer);
	// beq cr6,0x8215cd10
	if (cr6.getEQ()) goto loc_8215CD10;
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmpwi cr6,r27,64
	cr6.compare<int32_t>(r27.s32, 64, xer);
	// blt cr6,0x8215cce8
	if (cr6.getLT()) goto loc_8215CCE8;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x823ed174
	return;
loc_8215CD10:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// blt cr6,0x8215d12c
	if (cr6.getLT()) goto loc_8215D12C;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8215cd80
	if (cr6.getEQ()) goto loc_8215CD80;
	// clrlwi r11,r26,24
	r11.u64 = r26.u32 & 0xFF;
	// clrlwi r10,r24,24
	ctx.r10.u64 = r24.u32 & 0xFF;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// subfe r8,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	ctx.r8.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r10,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// clrlwi r9,r25,24
	ctx.r9.u64 = r25.u32 & 0xFF;
	// addi r7,r11,2
	ctx.r7.s64 = r11.s64 + 2;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// subfic r9,r9,0
	xer.ca = ctx.r9.u32 <= 0;
	ctx.r9.s64 = 0 - ctx.r9.s64;
	// mulli r10,r27,52
	ctx.r10.s64 = r27.s64 * 52;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// subfe r9,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r8,r8,0,29,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x4;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// or r10,r7,r8
	ctx.r10.u64 = ctx.r7.u64 | ctx.r8.u64;
	// rlwinm r9,r9,0,28,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x8;
	// addi r3,r11,1484
	ctx.r3.s64 = r11.s64 + 1484;
	// or r4,r10,r9
	ctx.r4.u64 = ctx.r10.u64 | ctx.r9.u64;
	// bl 0x82177218
	sub_82177218(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x823ed174
	return;
loc_8215CD80:
	// lis r30,-31993
	r30.s64 = -2096693248;
	// mulli r31,r27,52
	r31.s64 = r27.s64 * 52;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r3,r11,1484
	ctx.r3.s64 = r11.s64 + 1484;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,30
	r11.u64 = ctx.r3.u32 & 0x3;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215cdd8
	if (cr6.getEQ()) goto loc_8215CDD8;
	// lwz r11,29100(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 29100);
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r3,r11,1484
	ctx.r3.s64 = r11.s64 + 1484;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,30
	r11.u64 = ctx.r3.u32 & 0x3;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x8215d034
	if (!cr6.getEQ()) goto loc_8215D034;
loc_8215CDD8:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x820cf1a0
	sub_820CF1A0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215cdf0
	if (cr6.getEQ()) goto loc_8215CDF0;
	// lwz r7,8(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// b 0x8215cdf4
	goto loc_8215CDF4;
loc_8215CDF0:
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
loc_8215CDF4:
	// lwz r11,200(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 200);
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// lhz r9,6(r7)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r7.u32 + 6);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215ce38
	if (cr6.getEQ()) goto loc_8215CE38;
loc_8215CE08:
	// cmplw cr6,r11,r7
	cr6.compare<uint32_t>(r11.u32, ctx.r7.u32, xer);
	// beq cr6,0x8215ce38
	if (cr6.getEQ()) goto loc_8215CE38;
	// lhz r10,6(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 6);
	// extsh r6,r9
	ctx.r6.s64 = ctx.r9.s16;
	// extsh r5,r10
	ctx.r5.s64 = ctx.r10.s16;
	// cmpw cr6,r5,r6
	cr6.compare<int32_t>(ctx.r5.s32, ctx.r6.s32, xer);
	// ble cr6,0x8215ce2c
	if (!cr6.getGT()) goto loc_8215CE2C;
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
loc_8215CE2C:
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215ce08
	if (!cr6.getEQ()) goto loc_8215CE08;
loc_8215CE38:
	// clrlwi r11,r25,24
	r11.u64 = r25.u32 & 0xFF;
	// mr r30,r8
	r30.u64 = ctx.r8.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215ce58
	if (!cr6.getEQ()) goto loc_8215CE58;
	// lwz r11,200(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215ce58
	if (cr6.getEQ()) goto loc_8215CE58;
	// mr r30,r11
	r30.u64 = r11.u64;
loc_8215CE58:
	// mr r31,r30
	r31.u64 = r30.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8215d034
	if (cr6.getEQ()) goto loc_8215D034;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// clrlwi r29,r24,24
	r29.u64 = r24.u32 & 0xFF;
	// lfs f31,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f31.f64 = double(temp.f32);
loc_8215CE70:
	// lbz r11,188(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 188);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// beq cr6,0x8215cf50
	if (cr6.getEQ()) goto loc_8215CF50;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x8215ce9c
	if (cr6.getEQ()) goto loc_8215CE9C;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8215d020
	if (!cr6.getEQ()) goto loc_8215D020;
	// lfs f0,180(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x8215d020
	if (!cr6.getLT()) goto loc_8215D020;
loc_8215CE9C:
	// cmplw cr6,r31,r30
	cr6.compare<uint32_t>(r31.u32, r30.u32, xer);
	// bne cr6,0x8215cf48
	if (!cr6.getEQ()) goto loc_8215CF48;
	// clrlwi r11,r26,24
	r11.u64 = r26.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215cf04
	if (cr6.getEQ()) goto loc_8215CF04;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r9,r10,0,2,2
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8215cefc
	if (!cr6.getEQ()) goto loc_8215CEFC;
	// oris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 | 536870912;
	// lwz r11,200(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// beq cr6,0x8215cf48
	if (cr6.getEQ()) goto loc_8215CF48;
loc_8215CED4:
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// beq cr6,0x8215cf48
	if (cr6.getEQ()) goto loc_8215CF48;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// xoris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 ^ 536870912;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215ced4
	if (!cr6.getEQ()) goto loc_8215CED4;
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x8215d018
	goto loc_8215D018;
loc_8215CEFC:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215cf48
	if (!cr6.getEQ()) goto loc_8215CF48;
loc_8215CF04:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r11,r10,0,2,2
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215cf48
	if (cr6.getEQ()) goto loc_8215CF48;
	// rlwinm r10,r10,0,3,1
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFDFFFFFFF;
	// lwz r11,200(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// beq cr6,0x8215cf48
	if (cr6.getEQ()) goto loc_8215CF48;
loc_8215CF28:
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// beq cr6,0x8215cf48
	if (cr6.getEQ()) goto loc_8215CF48;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// xoris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 ^ 536870912;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215cf28
	if (!cr6.getEQ()) goto loc_8215CF28;
loc_8215CF48:
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x8215d018
	goto loc_8215D018;
loc_8215CF50:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// beq cr6,0x8215cf6c
	if (cr6.getEQ()) goto loc_8215CF6C;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8215d020
	if (!cr6.getEQ()) goto loc_8215D020;
	// lfs f0,180(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8215d020
	if (!cr6.getGT()) goto loc_8215D020;
loc_8215CF6C:
	// cmplw cr6,r31,r30
	cr6.compare<uint32_t>(r31.u32, r30.u32, xer);
	// bne cr6,0x8215d014
	if (!cr6.getEQ()) goto loc_8215D014;
	// clrlwi r11,r26,24
	r11.u64 = r26.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215cfd0
	if (cr6.getEQ()) goto loc_8215CFD0;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r9,r10,0,2,2
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8215cfc8
	if (!cr6.getEQ()) goto loc_8215CFC8;
	// oris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 | 536870912;
	// lwz r11,200(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// beq cr6,0x8215d014
	if (cr6.getEQ()) goto loc_8215D014;
loc_8215CFA4:
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// beq cr6,0x8215d014
	if (cr6.getEQ()) goto loc_8215D014;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// xoris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 ^ 536870912;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215cfa4
	if (!cr6.getEQ()) goto loc_8215CFA4;
	// b 0x8215d014
	goto loc_8215D014;
loc_8215CFC8:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215d014
	if (!cr6.getEQ()) goto loc_8215D014;
loc_8215CFD0:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rlwinm r11,r10,0,2,2
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d014
	if (cr6.getEQ()) goto loc_8215D014;
	// rlwinm r10,r10,0,3,1
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFDFFFFFFF;
	// lwz r11,200(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// beq cr6,0x8215d014
	if (cr6.getEQ()) goto loc_8215D014;
loc_8215CFF4:
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// beq cr6,0x8215d014
	if (cr6.getEQ()) goto loc_8215D014;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// xoris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 ^ 536870912;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215cff4
	if (!cr6.getEQ()) goto loc_8215CFF4;
loc_8215D014:
	// li r4,2
	ctx.r4.s64 = 2;
loc_8215D018:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x820de7d8
	sub_820DE7D8(ctx, base);
loc_8215D020:
	// lwz r31,200(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + 200);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8215d034
	if (cr6.getEQ()) goto loc_8215D034;
	// cmplw cr6,r31,r30
	cr6.compare<uint32_t>(r31.u32, r30.u32, xer);
	// bne cr6,0x8215ce70
	if (!cr6.getEQ()) goto loc_8215CE70;
loc_8215D034:
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8215d0ac
	if (cr6.getEQ()) goto loc_8215D0AC;
	// li r3,52
	ctx.r3.s64 = 52;
	// lwz r29,52(r30)
	r29.u64 = PPC_LOAD_U32(r30.u32 + 52);
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215d0b4
	if (cr6.getEQ()) goto loc_8215D0B4;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stw r28,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r28.u32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r28,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r28.u32);
	// addi r11,r11,-28576
	r11.s64 = r11.s64 + -28576;
	// stb r28,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r28.u8);
	// sth r28,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r28.u16);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r28,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r28.u32);
	// stw r28,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r28.u32);
	// stw r10,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r10.u32);
	// stw r28,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r28.u32);
	// stw r28,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r28.u32);
	// stw r28,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r28.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// stb r24,40(r3)
	PPC_STORE_U8(ctx.r3.u32 + 40, r24.u8);
	// stb r28,41(r3)
	PPC_STORE_U8(ctx.r3.u32 + 41, r28.u8);
	// stw r27,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, r27.u32);
	// stb r26,48(r3)
	PPC_STORE_U8(ctx.r3.u32 + 48, r26.u8);
	// stb r25,49(r3)
	PPC_STORE_U8(ctx.r3.u32 + 49, r25.u8);
	// b 0x8215d0b8
	goto loc_8215D0B8;
loc_8215D0AC:
	// li r29,-1
	r29.s64 = -1;
	// b 0x8215d0d4
	goto loc_8215D0D4;
loc_8215D0B4:
	// mr r31,r28
	r31.u64 = r28.u64;
loc_8215D0B8:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,16(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8215D0D4:
	// mr r11,r28
	r11.u64 = r28.u64;
	// addi r10,r23,260
	ctx.r10.s64 = r23.s64 + 260;
loc_8215D0DC:
	// lbz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x8215d104
	if (cr6.getEQ()) goto loc_8215D104;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,16
	ctx.r10.s64 = ctx.r10.s64 + 16;
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// blt cr6,0x8215d0dc
	if (cr6.getLT()) goto loc_8215D0DC;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x823ed174
	return;
loc_8215D104:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8215d12c
	if (cr6.getLT()) goto loc_8215D12C;
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// li r10,1
	ctx.r10.s64 = 1;
	// add r11,r11,r23
	r11.u64 = r11.u64 + r23.u64;
	// stw r27,264(r11)
	PPC_STORE_U32(r11.u32 + 264, r27.u32);
	// stw r29,268(r11)
	PPC_STORE_U32(r11.u32 + 268, r29.u32);
	// stb r24,261(r11)
	PPC_STORE_U8(r11.u32 + 261, r24.u8);
	// stb r10,260(r11)
	PPC_STORE_U8(r11.u32 + 260, ctx.r10.u8);
	// stb r25,273(r11)
	PPC_STORE_U8(r11.u32 + 273, r25.u8);
loc_8215D12C:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_8215D138"))) PPC_WEAK_FUNC(sub_8215D138);
PPC_FUNC_IMPL(__imp__sub_8215D138) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r11,r5,24
	r11.u64 = ctx.r5.u32 & 0xFF;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// mr r29,r7
	r29.u64 = ctx.r7.u64;
	// mr r28,r8
	r28.u64 = ctx.r8.u64;
	// mr r27,r9
	r27.u64 = ctx.r9.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d1a4
	if (cr6.getEQ()) goto loc_8215D1A4;
	// addi r10,r3,260
	ctx.r10.s64 = ctx.r3.s64 + 260;
	// li r9,10
	ctx.r9.s64 = 10;
	// li r11,0
	r11.s64 = 0;
loc_8215D170:
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x8215d18c
	if (cr6.getEQ()) goto loc_8215D18C;
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmpw cr6,r8,r28
	cr6.compare<int32_t>(ctx.r8.s32, r28.s32, xer);
	// bne cr6,0x8215d18c
	if (!cr6.getEQ()) goto loc_8215D18C;
	// stb r11,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r11.u8);
loc_8215D18C:
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,16
	ctx.r10.s64 = ctx.r10.s64 + 16;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8215d170
	if (!cr6.getEQ()) goto loc_8215D170;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_8215D1A4:
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8215d294
	if (cr6.getEQ()) goto loc_8215D294;
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// clrlwi r10,r31,24
	ctx.r10.u64 = r31.u32 & 0xFF;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// subfe r8,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	ctx.r8.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r10,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// clrlwi r9,r29,24
	ctx.r9.u64 = r29.u32 & 0xFF;
	// addi r7,r11,2
	ctx.r7.s64 = r11.s64 + 2;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// subfic r9,r9,0
	xer.ca = ctx.r9.u32 <= 0;
	ctx.r9.s64 = 0 - ctx.r9.s64;
	// mulli r10,r28,52
	ctx.r10.s64 = r28.s64 * 52;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// subfe r9,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r8,r8,0,29,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x4;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// or r10,r7,r8
	ctx.r10.u64 = ctx.r7.u64 | ctx.r8.u64;
	// rlwinm r9,r9,0,28,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x8;
	// addi r3,r11,1484
	ctx.r3.s64 = r11.s64 + 1484;
	// or r4,r10,r9
	ctx.r4.u64 = ctx.r10.u64 | ctx.r9.u64;
	// bl 0x82177218
	sub_82177218(ctx, base);
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x8215d294
	if (cr6.getEQ()) goto loc_8215D294;
	// li r3,52
	ctx.r3.s64 = 52;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215d274
	if (cr6.getEQ()) goto loc_8215D274;
	// li r9,-1
	ctx.r9.s64 = -1;
	// stw r28,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, r28.u32);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r10,r11,-28576
	ctx.r10.s64 = r11.s64 + -28576;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stb r11,40(r3)
	PPC_STORE_U8(ctx.r3.u32 + 40, r11.u8);
	// stb r9,41(r3)
	PPC_STORE_U8(ctx.r3.u32 + 41, ctx.r9.u8);
	// stb r11,48(r3)
	PPC_STORE_U8(ctx.r3.u32 + 48, r11.u8);
	// stb r11,49(r3)
	PPC_STORE_U8(ctx.r3.u32 + 49, r11.u8);
	// b 0x8215d278
	goto loc_8215D278;
loc_8215D274:
	// li r31,0
	r31.s64 = 0;
loc_8215D278:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,16(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8215D294:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8215D2A0"))) PPC_WEAK_FUNC(sub_8215D2A0);
PPC_FUNC_IMPL(__imp__sub_8215D2A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// bl 0x82151c08
	sub_82151C08(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r8,44(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// lbz r7,49(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 49);
	// addi r3,r11,-26968
	ctx.r3.s64 = r11.s64 + -26968;
	// lbz r6,48(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 48);
	// lbz r5,41(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 41);
	// lbz r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 40);
	// bl 0x8215d138
	sub_8215D138(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215D2F8"))) PPC_WEAK_FUNC(sub_8215D2F8);
PPC_FUNC_IMPL(__imp__sub_8215D2F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r21{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -88, f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r3
	r23.u64 = ctx.r3.u64;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215daa0
	if (cr6.getEQ()) goto loc_8215DAA0;
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215daa0
	if (!cr6.getEQ()) goto loc_8215DAA0;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r29,0
	r29.s64 = 0;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lis r24,-31993
	r24.s64 = -2096693248;
	// lfs f31,2692(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f31.f64 = double(temp.f32);
	// beq cr6,0x8215d580
	if (cr6.getEQ()) goto loc_8215D580;
	// mr r26,r29
	r26.u64 = r29.u64;
	// mr r30,r29
	r30.u64 = r29.u64;
	// mr r28,r23
	r28.u64 = r23.u64;
	// li r27,1
	r27.s64 = 1;
loc_8215D358:
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r3,r11,1484
	ctx.r3.s64 = r11.s64 + 1484;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,30
	r11.u64 = ctx.r3.u32 & 0x3;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// beq cr6,0x8215d3a8
	if (cr6.getEQ()) goto loc_8215D3A8;
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r3,r11,1484
	ctx.r3.s64 = r11.s64 + 1484;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,30
	r11.u64 = ctx.r3.u32 & 0x3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x8215d520
	if (!cr6.getEQ()) goto loc_8215D520;
loc_8215D3A8:
	// lwz r3,0(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// bl 0x820cf1a0
	sub_820CF1A0(ctx, base);
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// lwz r31,8(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,1484
	r11.s64 = r11.s64 + 1484;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,30
	r11.u64 = ctx.r3.u32 & 0x3;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x8215d480
	if (!cr6.getEQ()) goto loc_8215D480;
	// lbz r11,188(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 188);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215d438
	if (!cr6.getEQ()) goto loc_8215D438;
	// lfs f0,180(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8215d438
	if (!cr6.getGT()) goto loc_8215D438;
	// lwz r11,200(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d43c
	if (cr6.getEQ()) goto loc_8215D43C;
loc_8215D408:
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// beq cr6,0x8215d43c
	if (cr6.getEQ()) goto loc_8215D43C;
	// lbz r9,188(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 188);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8215d438
	if (!cr6.getEQ()) goto loc_8215D438;
	// lfs f0,180(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8215d438
	if (!cr6.getGT()) goto loc_8215D438;
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215d408
	if (!cr6.getEQ()) goto loc_8215D408;
	// b 0x8215d43c
	goto loc_8215D43C;
loc_8215D438:
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
loc_8215D43C:
	// clrlwi r11,r10,24
	r11.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d520
	if (cr6.getEQ()) goto loc_8215D520;
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r3,r11,1484
	ctx.r3.s64 = r11.s64 + 1484;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwimi r4,r27,0,30,27
	ctx.r4.u64 = (__builtin_rotateleft32(r27.u32, 0) & 0xFFFFFFFFFFFFFFF3) | (ctx.r4.u64 & 0xC);
	// addi r3,r11,1484
	ctx.r3.s64 = r11.s64 + 1484;
	// bl 0x82177218
	sub_82177218(ctx, base);
	// b 0x8215d520
	goto loc_8215D520;
loc_8215D480:
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r3,r11,1484
	ctx.r3.s64 = r11.s64 + 1484;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,30
	r11.u64 = ctx.r3.u32 & 0x3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x8215d520
	if (!cr6.getEQ()) goto loc_8215D520;
	// lbz r11,188(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 188);
	// mr r10,r27
	ctx.r10.u64 = r27.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215d500
	if (!cr6.getEQ()) goto loc_8215D500;
	// lfs f0,180(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x8215d500
	if (!cr6.getLT()) goto loc_8215D500;
	// lwz r11,200(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d504
	if (cr6.getEQ()) goto loc_8215D504;
loc_8215D4D0:
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// beq cr6,0x8215d504
	if (cr6.getEQ()) goto loc_8215D504;
	// lbz r9,188(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 188);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8215d500
	if (!cr6.getEQ()) goto loc_8215D500;
	// lfs f0,180(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x8215d500
	if (!cr6.getLT()) goto loc_8215D500;
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215d4d0
	if (!cr6.getEQ()) goto loc_8215D4D0;
	// b 0x8215d504
	goto loc_8215D504;
loc_8215D500:
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
loc_8215D504:
	// clrlwi r11,r10,24
	r11.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d520
	if (cr6.getEQ()) goto loc_8215D520;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x8215cb30
	sub_8215CB30(ctx, base);
loc_8215D520:
	// addi r30,r30,52
	r30.s64 = r30.s64 + 52;
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// cmpwi cr6,r30,3328
	cr6.compare<int32_t>(r30.s32, 3328, xer);
	// blt cr6,0x8215d358
	if (cr6.getLT()) goto loc_8215D358;
	// addi r31,r23,273
	r31.s64 = r23.s64 + 273;
	// li r30,10
	r30.s64 = 10;
loc_8215D53C:
	// lbz r11,-13(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + -13);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d56c
	if (cr6.getEQ()) goto loc_8215D56C;
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r8,-9(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + -9);
	// li r5,0
	ctx.r5.s64 = 0;
	// lbz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// lbz r6,-1(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + -1);
	// lbz r4,-12(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + -12);
	// bl 0x8215d138
	sub_8215D138(ctx, base);
	// stb r29,-13(r31)
	PPC_STORE_U8(r31.u32 + -13, r29.u8);
loc_8215D56C:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r31,r31,16
	r31.s64 = r31.s64 + 16;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x8215d53c
	if (!cr6.getEQ()) goto loc_8215D53C;
	// b 0x8215d660
	goto loc_8215D660;
loc_8215D580:
	// bl 0x82151c30
	sub_82151C30(ctx, base);
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x8215d660
	if (cr6.getEQ()) goto loc_8215D660;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// addi r31,r23,273
	r31.s64 = r23.s64 + 273;
	// li r25,10
	r25.s64 = 10;
	// addi r28,r11,-28576
	r28.s64 = r11.s64 + -28576;
	// li r27,-1
	r27.s64 = -1;
loc_8215D5A4:
	// lbz r11,-13(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + -13);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d650
	if (cr6.getEQ()) goto loc_8215D650;
	// lwz r11,52(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 52);
	// lwz r10,-5(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + -5);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x8215d650
	if (cr6.getEQ()) goto loc_8215D650;
	// li r3,52
	ctx.r3.s64 = 52;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215d628
	if (cr6.getEQ()) goto loc_8215D628;
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lbz r10,-1(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + -1);
	// lwz r9,-9(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + -9);
	// lbz r8,-12(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + -12);
	// stw r29,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r29.u32);
	// stw r27,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r27.u32);
	// stw r29,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r29.u32);
	// stb r29,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r29.u8);
	// sth r29,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r29.u16);
	// stw r29,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r29.u32);
	// stw r29,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r29.u32);
	// stw r29,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r29.u32);
	// stw r29,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r29.u32);
	// stw r29,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r29.u32);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
	// stb r29,41(r3)
	PPC_STORE_U8(ctx.r3.u32 + 41, r29.u8);
	// stb r11,49(r3)
	PPC_STORE_U8(ctx.r3.u32 + 49, r11.u8);
	// stb r10,48(r3)
	PPC_STORE_U8(ctx.r3.u32 + 48, ctx.r10.u8);
	// stw r9,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, ctx.r9.u32);
	// stb r8,40(r3)
	PPC_STORE_U8(ctx.r3.u32 + 40, ctx.r8.u8);
	// b 0x8215d62c
	goto loc_8215D62C;
loc_8215D628:
	// mr r30,r29
	r30.u64 = r29.u64;
loc_8215D62C:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,16(r26)
	ctx.r4.u64 = PPC_LOAD_U32(r26.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// lwz r11,52(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 52);
	// stw r11,-5(r31)
	PPC_STORE_U32(r31.u32 + -5, r11.u32);
loc_8215D650:
	// addi r25,r25,-1
	r25.s64 = r25.s64 + -1;
	// addi r31,r31,16
	r31.s64 = r31.s64 + 16;
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// bne cr6,0x8215d5a4
	if (!cr6.getEQ()) goto loc_8215D5A4;
loc_8215D660:
	// lwz r3,0(r23)
	ctx.r3.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x8215da90
	if (cr6.getEQ()) goto loc_8215DA90;
	// bl 0x820cf1a0
	sub_820CF1A0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215da90
	if (cr6.getEQ()) goto loc_8215DA90;
	// lwz r8,8(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// mr r31,r8
	r31.u64 = ctx.r8.u64;
	// lwz r11,200(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 200);
	// lhz r9,6(r8)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r8.u32 + 6);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d6c0
	if (cr6.getEQ()) goto loc_8215D6C0;
loc_8215D690:
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// beq cr6,0x8215d6c0
	if (cr6.getEQ()) goto loc_8215D6C0;
	// lhz r10,6(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 6);
	// extsh r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	// extsh r6,r10
	ctx.r6.s64 = ctx.r10.s16;
	// cmpw cr6,r6,r7
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r7.s32, xer);
	// ble cr6,0x8215d6b4
	if (!cr6.getGT()) goto loc_8215D6B4;
	// mr r31,r11
	r31.u64 = r11.u64;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
loc_8215D6B4:
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215d690
	if (!cr6.getEQ()) goto loc_8215D690;
loc_8215D6C0:
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// mr r28,r31
	r28.u64 = r31.u64;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r3,r11,1484
	ctx.r3.s64 = r11.s64 + 1484;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r11,r3,0,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215d6fc
	if (!cr6.getEQ()) goto loc_8215D6FC;
	// lwz r11,200(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d6fc
	if (cr6.getEQ()) goto loc_8215D6FC;
	// mr r28,r11
	r28.u64 = r11.u64;
loc_8215D6FC:
	// mr r30,r28
	r30.u64 = r28.u64;
loc_8215D700:
	// lbz r11,188(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 188);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bgt cr6,0x8215da7c
	if (cr6.getGT()) goto loc_8215DA7C;
	// lis r12,-32234
	r12.s64 = -2112487424;
	// addi r12,r12,-10456
	r12.s64 = r12.s64 + -10456;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_8215D738;
	case 1:
		goto loc_8215D8CC;
	case 2:
		goto loc_8215D9A4;
	case 3:
		goto loc_8215D8CC;
	default:
		__builtin_unreachable();
	}
	// lwz r16,-10440(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + -10440);
	// lwz r16,-10036(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + -10036);
	// lwz r16,-9820(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + -9820);
	// lwz r16,-10036(r21)
	r16.u64 = PPC_LOAD_U32(r21.u32 + -10036);
loc_8215D738:
	// cmplw cr6,r30,r28
	cr6.compare<uint32_t>(r30.u32, r28.u32, xer);
	// bne cr6,0x8215d7e0
	if (!cr6.getEQ()) goto loc_8215D7E0;
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// addi r31,r29,1484
	r31.s64 = r29.s64 + 1484;
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r11,r3,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d778
	if (cr6.getEQ()) goto loc_8215D778;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm r11,r10,0,2,2
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d7ac
	if (cr6.getEQ()) goto loc_8215D7AC;
loc_8215D778:
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r11,r3,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215d7e0
	if (!cr6.getEQ()) goto loc_8215D7E0;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm r11,r10,0,2,2
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d7e0
	if (cr6.getEQ()) goto loc_8215D7E0;
loc_8215D7AC:
	// xoris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 ^ 536870912;
	// lwz r11,200(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// beq cr6,0x8215d7e0
	if (cr6.getEQ()) goto loc_8215D7E0;
loc_8215D7C0:
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x8215d7e0
	if (cr6.getEQ()) goto loc_8215D7E0;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// xoris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 ^ 536870912;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215d7c0
	if (!cr6.getEQ()) goto loc_8215D7C0;
loc_8215D7E0:
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// addi r31,r29,1484
	r31.s64 = r29.s64 + 1484;
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,30
	r11.u64 = ctx.r3.u32 & 0x3;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x8215d81c
	if (!cr6.getEQ()) goto loc_8215D81C;
	// lfs f0,180(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x8215d81c
	if (!cr6.getLT()) goto loc_8215D81C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// b 0x8215da74
	goto loc_8215DA74;
loc_8215D81C:
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,30
	r11.u64 = ctx.r3.u32 & 0x3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x8215d858
	if (!cr6.getEQ()) goto loc_8215D858;
	// lfs f0,180(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8215d858
	if (!cr6.getGT()) goto loc_8215D858;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// b 0x8215da78
	goto loc_8215DA78;
loc_8215D858:
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,30
	r11.u64 = ctx.r3.u32 & 0x3;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215d894
	if (!cr6.getEQ()) goto loc_8215D894;
	// lfs f0,180(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x8215d894
	if (!cr6.getGT()) goto loc_8215D894;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// b 0x8215da78
	goto loc_8215DA78;
loc_8215D894:
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,30
	r11.u64 = ctx.r3.u32 & 0x3;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bne cr6,0x8215da7c
	if (!cr6.getEQ()) goto loc_8215DA7C;
	// lfs f0,180(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 180);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bge cr6,0x8215da7c
	if (!cr6.getLT()) goto loc_8215DA7C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// b 0x8215da74
	goto loc_8215DA74;
loc_8215D8CC:
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// addi r31,r29,1484
	r31.s64 = r29.s64 + 1484;
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,30
	r11.u64 = ctx.r3.u32 & 0x3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bne cr6,0x8215da7c
	if (!cr6.getEQ()) goto loc_8215DA7C;
	// cmplw cr6,r30,r28
	cr6.compare<uint32_t>(r30.u32, r28.u32, xer);
	// bne cr6,0x8215d998
	if (!cr6.getEQ()) goto loc_8215D998;
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r11,r3,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d930
	if (cr6.getEQ()) goto loc_8215D930;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm r11,r10,0,2,2
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d964
	if (cr6.getEQ()) goto loc_8215D964;
loc_8215D930:
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r11,r3,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215d998
	if (!cr6.getEQ()) goto loc_8215D998;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm r11,r10,0,2,2
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215d998
	if (cr6.getEQ()) goto loc_8215D998;
loc_8215D964:
	// xoris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 ^ 536870912;
	// lwz r11,200(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// beq cr6,0x8215d998
	if (cr6.getEQ()) goto loc_8215D998;
loc_8215D978:
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x8215d998
	if (cr6.getEQ()) goto loc_8215D998;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// xoris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 ^ 536870912;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215d978
	if (!cr6.getEQ()) goto loc_8215D978;
loc_8215D998:
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// b 0x8215da78
	goto loc_8215DA78;
loc_8215D9A4:
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// addi r31,r29,1484
	r31.s64 = r29.s64 + 1484;
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,30
	r11.u64 = ctx.r3.u32 & 0x3;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x8215da7c
	if (!cr6.getEQ()) goto loc_8215DA7C;
	// cmplw cr6,r30,r28
	cr6.compare<uint32_t>(r30.u32, r28.u32, xer);
	// bne cr6,0x8215da70
	if (!cr6.getEQ()) goto loc_8215DA70;
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r11,r3,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215da08
	if (cr6.getEQ()) goto loc_8215DA08;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm r11,r10,0,2,2
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215da3c
	if (cr6.getEQ()) goto loc_8215DA3C;
loc_8215DA08:
	// lwz r11,29100(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 29100);
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r11,r3,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215da70
	if (!cr6.getEQ()) goto loc_8215DA70;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// rlwinm r11,r10,0,2,2
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215da70
	if (cr6.getEQ()) goto loc_8215DA70;
loc_8215DA3C:
	// xoris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 ^ 536870912;
	// lwz r11,200(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// beq cr6,0x8215da70
	if (cr6.getEQ()) goto loc_8215DA70;
loc_8215DA50:
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x8215da70
	if (cr6.getEQ()) goto loc_8215DA70;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// xoris r10,r10,8192
	ctx.r10.u64 = ctx.r10.u64 ^ 536870912;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,200(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 200);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215da50
	if (!cr6.getEQ()) goto loc_8215DA50;
loc_8215DA70:
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
loc_8215DA74:
	// li r4,1
	ctx.r4.s64 = 1;
loc_8215DA78:
	// bl 0x820de7d8
	sub_820DE7D8(ctx, base);
loc_8215DA7C:
	// lwz r30,200(r30)
	r30.u64 = PPC_LOAD_U32(r30.u32 + 200);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8215da90
	if (cr6.getEQ()) goto loc_8215DA90;
	// cmplw cr6,r30,r28
	cr6.compare<uint32_t>(r30.u32, r28.u32, xer);
	// bne cr6,0x8215d700
	if (!cr6.getEQ()) goto loc_8215D700;
loc_8215DA90:
	// addi r29,r29,52
	r29.s64 = r29.s64 + 52;
	// addi r23,r23,4
	r23.s64 = r23.s64 + 4;
	// cmpwi cr6,r29,3328
	cr6.compare<int32_t>(r29.s32, 3328, xer);
	// blt cr6,0x8215d660
	if (cr6.getLT()) goto loc_8215D660;
loc_8215DAA0:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_8215DAB0"))) PPC_WEAK_FUNC(sub_8215DAB0);
PPC_FUNC_IMPL(__imp__sub_8215DAB0) {
	PPC_FUNC_PROLOGUE();
	// li r3,91
	ctx.r3.s64 = 91;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215DAB8"))) PPC_WEAK_FUNC(sub_8215DAB8);
PPC_FUNC_IMPL(__imp__sub_8215DAB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x8215dba4
	if (!cr6.getEQ()) goto loc_8215DBA4;
	// bl 0x820ebb98
	sub_820EBB98(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215dba4
	if (cr6.getEQ()) goto loc_8215DBA4;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r31,0
	r31.s64 = 0;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, r31.u8);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215dba4
	if (cr6.getEQ()) goto loc_8215DBA4;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r28,-1
	r28.s64 = -1;
	// addi r29,r11,-28488
	r29.s64 = r11.s64 + -28488;
loc_8215DB20:
	// li r3,48
	ctx.r3.s64 = 48;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215db6c
	if (cr6.getEQ()) goto loc_8215DB6C;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r31.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r28,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r28.u32);
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r31.u32);
	// stb r31,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r31.u8);
	// sth r31,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r31.u16);
	// stw r31,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r31.u32);
	// stw r31,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r31.u32);
	// stw r31,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r31.u32);
	// stw r31,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r31.u32);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r31.u32);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// stw r27,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r27.u32);
	// stw r26,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, r26.u32);
	// b 0x8215db70
	goto loc_8215DB70;
loc_8215DB6C:
	// mr r30,r31
	r30.u64 = r31.u64;
loc_8215DB70:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,16(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215db20
	if (!cr6.getEQ()) goto loc_8215DB20;
loc_8215DBA4:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8215DBB0"))) PPC_WEAK_FUNC(sub_8215DBB0);
PPC_FUNC_IMPL(__imp__sub_8215DBB0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,13
	ctx.r5.s64 = 13;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 40);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,7
	ctx.r5.s64 = 7;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,44(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 44);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215DC28"))) PPC_WEAK_FUNC(sub_8215DC28);
PPC_FUNC_IMPL(__imp__sub_8215DC28) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// li r4,13
	ctx.r4.s64 = 13;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,7
	ctx.r4.s64 = 7;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,40(r30)
	PPC_STORE_U32(r30.u32 + 40, r11.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// stw r3,44(r30)
	PPC_STORE_U32(r30.u32 + 44, ctx.r3.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215DC90"))) PPC_WEAK_FUNC(sub_8215DC90);
PPC_FUNC_IMPL(__imp__sub_8215DC90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r4,44(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 44);
	// lwz r3,40(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// bl 0x820e34e0
	sub_820E34E0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215DCC0"))) PPC_WEAK_FUNC(sub_8215DCC0);
PPC_FUNC_IMPL(__imp__sub_8215DCC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,48
	ctx.r3.s64 = 48;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215dd30
	if (cr6.getEQ()) goto loc_8215DD30;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-28488
	ctx.r10.s64 = r11.s64 + -28488;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, r11.u32);
	// stw r11,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215DD30:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215DD48"))) PPC_WEAK_FUNC(sub_8215DD48);
PPC_FUNC_IMPL(__imp__sub_8215DD48) {
	PPC_FUNC_PROLOGUE();
	// li r3,53
	ctx.r3.s64 = 53;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215DD50"))) PPC_WEAK_FUNC(sub_8215DD50);
PPC_FUNC_IMPL(__imp__sub_8215DD50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// lis r11,-32254
	r11.s64 = -2113798144;
	// stb r5,52(r3)
	PPC_STORE_U8(ctx.r3.u32 + 52, ctx.r5.u8);
	// li r30,-1
	r30.s64 = -1;
	// sth r6,54(r3)
	PPC_STORE_U16(ctx.r3.u32 + 54, ctx.r6.u16);
	// addi r31,r11,-28392
	r31.s64 = r11.s64 + -28392;
	// stw r7,56(r3)
	PPC_STORE_U32(ctx.r3.u32 + 56, ctx.r7.u32);
	// li r11,0
	r11.s64 = 0;
	// stb r8,60(r3)
	PPC_STORE_U8(ctx.r3.u32 + 60, ctx.r8.u8);
	// stb r9,61(r3)
	PPC_STORE_U8(ctx.r3.u32 + 61, ctx.r9.u8);
	// stw r30,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r30.u32);
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r31.u32);
	// lwz r31,84(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stw r31,72(r3)
	PPC_STORE_U32(ctx.r3.u32 + 72, r31.u32);
	// lfs f0,0(r4)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	f0.f64 = double(temp.f32);
	// stfs f0,40(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 40, temp.u32);
	// lfs f0,4(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,44(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 44, temp.u32);
	// lfs f0,8(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	f0.f64 = double(temp.f32);
	// stfs f0,48(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 48, temp.u32);
loc_8215DDC8:
	// lbzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,255
	cr6.compare<uint32_t>(ctx.r9.u32, 255, xer);
	// beq cr6,0x8215dde8
	if (cr6.getEQ()) goto loc_8215DDE8;
	// add r8,r11,r3
	ctx.r8.u64 = r11.u64 + ctx.r3.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// stb r9,62(r8)
	PPC_STORE_U8(ctx.r8.u32 + 62, ctx.r9.u8);
	// blt cr6,0x8215ddc8
	if (cr6.getLT()) goto loc_8215DDC8;
loc_8215DDE8:
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// li r10,255
	ctx.r10.s64 = 255;
	// stb r10,62(r11)
	PPC_STORE_U8(r11.u32 + 62, ctx.r10.u8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215DE00"))) PPC_WEAK_FUNC(sub_8215DE00);
PPC_FUNC_IMPL(__imp__sub_8215DE00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed130
	// stfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfs f0,40(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 40);
	f0.f64 = double(temp.f32);
	// lfs f31,2692(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2692);
	f31.f64 = double(temp.f32);
	// fadds f1,f0,f31
	ctx.f1.f64 = double(float(f0.f64 + f31.f64));
	// bl 0x8238ca58
	sub_8238CA58(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lfs f13,44(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 44);
	ctx.f13.f64 = double(temp.f32);
	// fadds f1,f13,f31
	ctx.f1.f64 = double(float(ctx.f13.f64 + f31.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// bl 0x8238ca58
	sub_8238CA58(ctx, base);
	// fmr f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = ctx.f1.f64;
	// addi r11,r1,84
	r11.s64 = ctx.r1.s64 + 84;
	// lfs f13,48(r30)
	temp.u32 = PPC_LOAD_U32(r30.u32 + 48);
	ctx.f13.f64 = double(temp.f32);
	// fadds f1,f13,f31
	ctx.f1.f64 = double(float(ctx.f13.f64 + f31.f64));
	// fctiwz f0,f0
	f0.s64 = (f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// bl 0x8238ca58
	sub_8238CA58(ctx, base);
	// addi r11,r1,88
	r11.s64 = ctx.r1.s64 + 88;
	// lwz r26,80(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// fctiwz f0,f1
	ctx.fpscr.disableFlushMode();
	f0.s64 = (ctx.f1.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f1.f64));
	// li r29,1
	r29.s64 = 1;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// stfiwx f0,0,r11
	PPC_STORE_U32(r11.u32, f0.u32);
	// bl 0x823b2f68
	sub_823B2F68(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// ble cr6,0x8215deac
	if (!cr6.getGT()) goto loc_8215DEAC;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
loc_8215DEAC:
	// lwz r27,84(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x823b2f68
	sub_823B2F68(ctx, base);
	// cmpw cr6,r3,r29
	cr6.compare<int32_t>(ctx.r3.s32, r29.s32, xer);
	// ble cr6,0x8215dec4
	if (!cr6.getGT()) goto loc_8215DEC4;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
loc_8215DEC4:
	// lwz r28,88(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x823b2f68
	sub_823B2F68(ctx, base);
	// cmpw cr6,r3,r29
	cr6.compare<int32_t>(ctx.r3.s32, r29.s32, xer);
	// ble cr6,0x8215dedc
	if (!cr6.getGT()) goto loc_8215DEDC;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
loc_8215DEDC:
	// li r5,5
	ctx.r5.s64 = 5;
	// addi r4,r29,-1
	ctx.r4.s64 = r29.s64 + -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,60(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 60);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,5
	ctx.r5.s64 = 5;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,56(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 56);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,16
	ctx.r5.s64 = 16;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lhz r4,54(r30)
	ctx.r4.u64 = PPC_LOAD_U16(r30.u32 + 54);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbz r4,52(r30)
	ctx.r4.u64 = PPC_LOAD_U8(r30.u32 + 52);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r28,0
	r28.s64 = 0;
	// addi r27,r30,62
	r27.s64 = r30.s64 + 62;
loc_8215DF70:
	// lbzx r11,r27,r28
	r11.u64 = PPC_LOAD_U8(r27.u32 + r28.u32);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beq cr6,0x8215df88
	if (cr6.getEQ()) goto loc_8215DF88;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// cmpwi cr6,r28,7
	cr6.compare<int32_t>(r28.s32, 7, xer);
	// blt cr6,0x8215df70
	if (cr6.getLT()) goto loc_8215DF70;
loc_8215DF88:
	// li r5,3
	ctx.r5.s64 = 3;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r29,0
	r29.s64 = 0;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x8215dfc0
	if (!cr6.getGT()) goto loc_8215DFC0;
loc_8215DFA4:
	// li r5,8
	ctx.r5.s64 = 8;
	// lbzx r4,r27,r29
	ctx.r4.u64 = PPC_LOAD_U8(r27.u32 + r29.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// cmpw cr6,r29,r28
	cr6.compare<int32_t>(r29.s32, r28.s32, xer);
	// blt cr6,0x8215dfa4
	if (cr6.getLT()) goto loc_8215DFA4;
loc_8215DFC0:
	// lbz r11,61(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 61);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lwz r11,72(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 72);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lwz r4,72(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 72);
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// blt cr6,0x8215e014
	if (cr6.getLT()) goto loc_8215E014;
	// li r5,13
	ctx.r5.s64 = 13;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
loc_8215E014:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f31,-64(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823ed180
	return;
}

__attribute__((alias("__imp__sub_8215E020"))) PPC_WEAK_FUNC(sub_8215E020);
PPC_FUNC_IMPL(__imp__sub_8215E020) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// li r4,5
	ctx.r4.s64 = 5;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r29,r11,1
	r29.s64 = r11.s64 + 1;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x823b2e50
	sub_823B2E50(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2e50
	sub_823B2E50(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2e50
	sub_823B2E50(ctx, base);
	// extsw r10,r28
	ctx.r10.s64 = r28.s32;
	// extsw r9,r27
	ctx.r9.s64 = r27.s32;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// std r9,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r9.u64);
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,40(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 40, temp.u32);
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// stfs f0,44(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 44, temp.u32);
	// lfd f0,96(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfs f0,48(r30)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r30.u32 + 48, temp.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r4,5
	ctx.r4.s64 = 5;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,60(r30)
	PPC_STORE_U8(r30.u32 + 60, r11.u8);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,16
	ctx.r4.s64 = 16;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,56(r30)
	PPC_STORE_U32(r30.u32 + 56, r11.u32);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// sth r11,54(r30)
	PPC_STORE_U16(r30.u32 + 54, r11.u16);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r11,52(r30)
	PPC_STORE_U8(r30.u32 + 52, r11.u8);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x8215e160
	if (!cr6.getGT()) goto loc_8215E160;
	// addi r27,r30,62
	r27.s64 = r30.s64 + 62;
loc_8215E144:
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// stbx r3,r27,r29
	PPC_STORE_U8(r27.u32 + r29.u32, ctx.r3.u8);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// cmpw cr6,r29,r28
	cr6.compare<int32_t>(r29.s32, r28.s32, xer);
	// blt cr6,0x8215e144
	if (cr6.getLT()) goto loc_8215E144;
loc_8215E160:
	// add r11,r29,r30
	r11.u64 = r29.u64 + r30.u64;
	// li r10,255
	ctx.r10.s64 = 255;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r10,62(r11)
	PPC_STORE_U8(r11.u32 + 62, ctx.r10.u8);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,61(r30)
	PPC_STORE_U8(r30.u32 + 61, r11.u8);
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215e1b4
	if (cr6.getEQ()) goto loc_8215E1B4;
	// li r4,13
	ctx.r4.s64 = 13;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// stw r3,72(r30)
	PPC_STORE_U32(r30.u32 + 72, ctx.r3.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed184
	return;
loc_8215E1B4:
	// li r11,-1
	r11.s64 = -1;
	// stw r11,72(r30)
	PPC_STORE_U32(r30.u32 + 72, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8215E1C8"))) PPC_WEAK_FUNC(sub_8215E1C8);
PPC_FUNC_IMPL(__imp__sub_8215E1C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215e28c
	if (!cr6.getEQ()) goto loc_8215E28C;
	// lhz r4,54(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 54);
	// lbz r3,52(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 52);
	// bl 0x82110d08
	sub_82110D08(ctx, base);
	// lwz r11,72(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 72);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x8215e248
	if (cr6.getLT()) goto loc_8215E248;
	// bl 0x820cca38
	sub_820CCA38(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215e248
	if (cr6.getEQ()) goto loc_8215E248;
loc_8215E218:
	// lwz r11,64(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 64);
	// lwz r10,72(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 72);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x8215e238
	if (cr6.getEQ()) goto loc_8215E238;
	// lwz r3,40(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8215e218
	if (!cr6.getEQ()) goto loc_8215E218;
	// b 0x8215e248
	goto loc_8215E248;
loc_8215E238:
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r10,100(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 100);
	// ori r10,r10,4
	ctx.r10.u64 = ctx.r10.u64 | 4;
	// stw r10,100(r11)
	PPC_STORE_U32(r11.u32 + 100, ctx.r10.u32);
loc_8215E248:
	// lbz r11,61(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 61);
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r10,1
	ctx.r10.s64 = 1;
	// lwz r5,56(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// lbz r7,60(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 60);
	// addi r9,r31,62
	ctx.r9.s64 = r31.s64 + 62;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stw r6,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r6.u32);
	// clrlwi r6,r5,16
	ctx.r6.u64 = ctx.r5.u32 & 0xFFFF;
	// stb r10,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r10.u8);
	// li r8,0
	ctx.r8.s64 = 0;
	// xori r10,r11,1
	ctx.r10.u64 = r11.u64 ^ 1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r31,40
	ctx.r4.s64 = r31.s64 + 40;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x821427b8
	sub_821427B8(ctx, base);
loc_8215E28C:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E2A8"))) PPC_WEAK_FUNC(sub_8215E2A8);
PPC_FUNC_IMPL(__imp__sub_8215E2A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,76
	ctx.r3.s64 = 76;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215e35c
	if (cr6.getEQ()) goto loc_8215E35C;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r8,-1
	ctx.r8.s64 = -1;
	// addi r9,r11,-28392
	ctx.r9.s64 = r11.s64 + -28392;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r10,r3,62
	ctx.r10.s64 = ctx.r3.s64 + 62;
	// stw r8,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r8.u32);
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
	// li r9,7
	ctx.r9.s64 = 7;
	// lfs f0,2688(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + 2688);
	f0.f64 = double(temp.f32);
	// li r11,0
	r11.s64 = 0;
	// stfs f0,48(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 48, temp.u32);
	// stw r8,72(r3)
	PPC_STORE_U32(ctx.r3.u32 + 72, ctx.r8.u32);
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// stfs f0,44(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 44, temp.u32);
	// stfs f0,40(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 40, temp.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// stb r11,52(r3)
	PPC_STORE_U8(ctx.r3.u32 + 52, r11.u8);
	// sth r11,54(r3)
	PPC_STORE_U16(ctx.r3.u32 + 54, r11.u16);
	// stw r11,56(r3)
	PPC_STORE_U32(ctx.r3.u32 + 56, r11.u32);
	// stb r11,60(r3)
	PPC_STORE_U8(ctx.r3.u32 + 60, r11.u8);
	// stb r11,61(r3)
	PPC_STORE_U8(ctx.r3.u32 + 61, r11.u8);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8215E340:
	// stb r7,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r7.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// bdnz 0x8215e340
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8215E340;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215E35C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E370"))) PPC_WEAK_FUNC(sub_8215E370);
PPC_FUNC_IMPL(__imp__sub_8215E370) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed124
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r11,r11,-30556
	r11.s64 = r11.s64 + -30556;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// mr r25,r8
	r25.u64 = ctx.r8.u64;
	// mr r24,r9
	r24.u64 = ctx.r9.u64;
	// mr r23,r10
	r23.u64 = ctx.r10.u64;
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, r11.u8);
	// bl 0x82152c88
	sub_82152C88(ctx, base);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215e43c
	if (cr6.getEQ()) goto loc_8215E43C;
loc_8215E3C8:
	// li r3,76
	ctx.r3.s64 = 76;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215e404
	if (cr6.getEQ()) goto loc_8215E404;
	// mr r10,r24
	ctx.r10.u64 = r24.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// clrlwi r7,r27,16
	ctx.r7.u64 = r27.u32 & 0xFFFF;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8215dd50
	sub_8215DD50(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// b 0x8215e408
	goto loc_8215E408;
loc_8215E404:
	// li r31,0
	r31.s64 = 0;
loc_8215E408:
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,300
	ctx.r4.s64 = 300;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b7198
	sub_823B7198(ctx, base);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,16(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82152d08
	sub_82152D08(ctx, base);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8215e3c8
	if (!cr6.getEQ()) goto loc_8215E3C8;
loc_8215E43C:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823ed174
	return;
}

__attribute__((alias("__imp__sub_8215E448"))) PPC_WEAK_FUNC(sub_8215E448);
PPC_FUNC_IMPL(__imp__sub_8215E448) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r10,r11,-28296
	ctx.r10.s64 = r11.s64 + -28296;
	// li r11,0
	r11.s64 = 0;
	// li r9,-1
	ctx.r9.s64 = -1;
	// std r4,40(r31)
	PPC_STORE_U64(r31.u32 + 40, ctx.r4.u64);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// stb r11,16(r31)
	PPC_STORE_U8(r31.u32 + 16, r11.u8);
	// sth r11,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r11.u16);
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// stw r11,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r11.u32);
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// bl 0x8215f9d0
	sub_8215F9D0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,48(r31)
	PPC_STORE_U32(r31.u32 + 48, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E4C0"))) PPC_WEAK_FUNC(sub_8215E4C0);
PPC_FUNC_IMPL(__imp__sub_8215E4C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823b4778
	sub_823B4778(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x8215e53c
	if (cr6.getLT()) goto loc_8215E53C;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// addi r31,r11,-14464
	r31.s64 = r11.s64 + -14464;
	// li r11,1
	r11.s64 = 1;
	// stb r11,-8(r31)
	PPC_STORE_U8(r31.u32 + -8, r11.u8);
	// bl 0x823b3528
	sub_823B3528(ctx, base);
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// li r11,0
	r11.s64 = 0;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,-14452(r10)
	PPC_STORE_U32(ctx.r10.u32 + -14452, r11.u32);
	// bl 0x823bc550
	sub_823BC550(ctx, base);
	// li r3,56
	ctx.r3.s64 = 56;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215e530
	if (cr6.getEQ()) goto loc_8215E530;
	// ld r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// bl 0x8215e448
	sub_8215E448(ctx, base);
	// b 0x8215e534
	goto loc_8215E534;
loc_8215E530:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8215E534:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8215E53C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E558"))) PPC_WEAK_FUNC(sub_8215E558);
PPC_FUNC_IMPL(__imp__sub_8215E558) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// li r11,0
	r11.s64 = 0;
	// stb r11,-14472(r10)
	PPC_STORE_U8(ctx.r10.u32 + -14472, r11.u8);
	// lis r10,-31992
	ctx.r10.s64 = -2096627712;
	// stw r11,-14452(r10)
	PPC_STORE_U32(ctx.r10.u32 + -14452, r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E570"))) PPC_WEAK_FUNC(sub_8215E570);
PPC_FUNC_IMPL(__imp__sub_8215E570) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lbz r3,-14472(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + -14472);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E580"))) PPC_WEAK_FUNC(sub_8215E580);
PPC_FUNC_IMPL(__imp__sub_8215E580) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x823b3528
	sub_823B3528(ctx, base);
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r11,-14456(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14456);
	// subf r3,r11,r3
	ctx.r3.s64 = ctx.r3.s64 - r11.s64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E5B0"))) PPC_WEAK_FUNC(sub_8215E5B0);
PPC_FUNC_IMPL(__imp__sub_8215E5B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r3,-14452(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -14452);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E5C0"))) PPC_WEAK_FUNC(sub_8215E5C0);
PPC_FUNC_IMPL(__imp__sub_8215E5C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8215e5f4
	if (cr6.getLT()) goto loc_8215E5F4;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// lwz r11,-14452(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -14452);
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bge cr6,0x8215e5f4
	if (!cr6.getLT()) goto loc_8215E5F4;
	// cmpwi cr6,r3,100
	cr6.compare<int32_t>(ctx.r3.s32, 100, xer);
	// bge cr6,0x8215e5f4
	if (!cr6.getLT()) goto loc_8215E5F4;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mulli r10,r3,120
	ctx.r10.s64 = ctx.r3.s64 * 120;
	// addi r11,r11,-26472
	r11.s64 = r11.s64 + -26472;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// blr 
	return;
loc_8215E5F4:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E600"))) PPC_WEAK_FUNC(sub_8215E600);
PPC_FUNC_IMPL(__imp__sub_8215E600) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,56
	ctx.r3.s64 = 56;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215e670
	if (cr6.getEQ()) goto loc_8215E670;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r11,-28296
	ctx.r10.s64 = r11.s64 + -28296;
	// li r11,0
	r11.s64 = 0;
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// stb r11,16(r3)
	PPC_STORE_U8(ctx.r3.u32 + 16, r11.u8);
	// sth r11,18(r3)
	PPC_STORE_U16(ctx.r3.u32 + 18, r11.u16);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, r11.u32);
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// std r11,40(r3)
	PPC_STORE_U64(ctx.r3.u32 + 40, r11.u64);
	// stw r11,48(r3)
	PPC_STORE_U32(ctx.r3.u32 + 48, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215E670:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E688"))) PPC_WEAK_FUNC(sub_8215E688);
PPC_FUNC_IMPL(__imp__sub_8215E688) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,64
	ctx.r5.s64 = 64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// ld r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U64(r31.u32 + 40);
	// bl 0x823b2c40
	sub_823B2C40(ctx, base);
	// li r5,32
	ctx.r5.s64 = 32;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,48(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 48);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E700"))) PPC_WEAK_FUNC(sub_8215E700);
PPC_FUNC_IMPL(__imp__sub_8215E700) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed13c
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r30
	r11.s64 = r30.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215e73c
	if (!cr6.getLT()) goto loc_8215E73C;
	// li r11,0
	r11.s64 = 0;
loc_8215E73C:
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8215e790
	if (cr6.getEQ()) goto loc_8215E790;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r30
	r11.s64 = r30.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,64
	cr6.compare<int32_t>(r11.s32, 64, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215e77c
	if (!cr6.getLT()) goto loc_8215E77C;
	// li r11,0
	r11.s64 = 0;
loc_8215E77C:
	// li r4,64
	ctx.r4.s64 = 64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// bl 0x823b2df8
	sub_823B2DF8(ctx, base);
	// std r3,40(r29)
	PPC_STORE_U64(r29.u32 + 40, ctx.r3.u64);
loc_8215E790:
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215e7bc
	if (cr6.getEQ()) goto loc_8215E7BC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// li r4,32
	ctx.r4.s64 = 32;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// stw r3,48(r29)
	PPC_STORE_U32(r29.u32 + 48, ctx.r3.u32);
loc_8215E7BC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823ed18c
	return;
}

__attribute__((alias("__imp__sub_8215E7C8"))) PPC_WEAK_FUNC(sub_8215E7C8);
PPC_FUNC_IMPL(__imp__sub_8215E7C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// addi r11,r11,-28216
	r11.s64 = r11.s64 + -28216;
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// stw r30,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r30.u32);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// stb r30,16(r31)
	PPC_STORE_U8(r31.u32 + 16, r30.u8);
	// sth r30,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r30.u16);
	// stw r30,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r30.u32);
	// stw r30,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r30.u32);
	// stw r30,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r30.u32);
	// stw r30,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r30.u32);
	// stw r30,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r30.u32);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stb r30,40(r31)
	PPC_STORE_U8(r31.u32 + 40, r30.u8);
	// std r30,48(r31)
	PPC_STORE_U64(r31.u32 + 48, r30.u64);
	// bl 0x8215f9d0
	sub_8215F9D0(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// std r30,160(r31)
	PPC_STORE_U64(r31.u32 + 160, r30.u64);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r30,168(r31)
	PPC_STORE_U8(r31.u32 + 168, r30.u8);
	// stb r30,136(r31)
	PPC_STORE_U8(r31.u32 + 136, r30.u8);
	// stw r11,56(r31)
	PPC_STORE_U32(r31.u32 + 56, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E858"))) PPC_WEAK_FUNC(sub_8215E858);
PPC_FUNC_IMPL(__imp__sub_8215E858) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,176
	ctx.r3.s64 = 176;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215e888
	if (cr6.getEQ()) goto loc_8215E888;
	// bl 0x8215e7c8
	sub_8215E7C8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8215E888:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8215E8A0"))) PPC_WEAK_FUNC(sub_8215E8A0);
PPC_FUNC_IMPL(__imp__sub_8215E8A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,64
	ctx.r5.s64 = 64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// ld r4,48(r31)
	ctx.r4.u64 = PPC_LOAD_U64(r31.u32 + 48);
	// bl 0x823b2c40
	sub_823B2C40(ctx, base);
	// li r5,32
	ctx.r5.s64 = 32;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,56(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 56);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,8
	ctx.r5.s64 = 8;
	// addi r4,r31,64
	ctx.r4.s64 = r31.s64 + 64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2fb0
	sub_823B2FB0(ctx, base);
	// li r5,16
	ctx.r5.s64 = 16;
	// addi r4,r31,72
	ctx.r4.s64 = r31.s64 + 72;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2fb0
	sub_823B2FB0(ctx, base);
	// li r5,36
	ctx.r5.s64 = 36;
	// addi r4,r31,88
	ctx.r4.s64 = r31.s64 + 88;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2fb0
	sub_823B2FB0(ctx, base);
	// li r5,6
	ctx.r5.s64 = 6;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,124(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 124);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// lbz r11,128(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 128);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,7
	ctx.r5.s64 = 7;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,132(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r28,r31,136
	r28.s64 = r31.s64 + 136;
	// mr r11,r28
	r11.u64 = r28.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_8215E96C:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8215e96c
	if (!cr6.getEQ()) goto loc_8215E96C;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r29,r11,0
	r29.u64 = __builtin_rotateleft32(r11.u32, 0);
	// cmplwi cr6,r29,20
	cr6.compare<uint32_t>(r29.u32, 20, xer);
	// ble cr6,0x8215e994
	if (!cr6.getGT()) goto loc_8215E994;
	// li r29,20
	r29.s64 = 20;
loc_8215E994:
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8215e9bc
	if (cr6.getEQ()) goto loc_8215E9BC;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2fb0
	sub_823B2FB0(ctx, base);
loc_8215E9BC:
	// li r5,8
	ctx.r5.s64 = 8;
	// addi r4,r31,160
	ctx.r4.s64 = r31.s64 + 160;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2fb0
	sub_823B2FB0(ctx, base);
	// lbz r11,168(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 168);
	// li r5,1
	ctx.r5.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r4,r11,1
	ctx.r4.u64 = r11.u64 ^ 1;
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// li r5,32
	ctx.r5.s64 = 32;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,60(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 60);
	// bl 0x823b2af8
	sub_823B2AF8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8215EA00"))) PPC_WEAK_FUNC(sub_8215EA00);
PPC_FUNC_IMPL(__imp__sub_8215EA00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed138
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r31
	r11.s64 = r31.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215ea3c
	if (!cr6.getLT()) goto loc_8215EA3C;
	// li r11,0
	r11.s64 = 0;
loc_8215EA3C:
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r31,r11,24
	r31.u64 = r11.u32 & 0xFF;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8215ea90
	if (cr6.getEQ()) goto loc_8215EA90;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r31
	r11.s64 = r31.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,64
	cr6.compare<int32_t>(r11.s32, 64, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215ea7c
	if (!cr6.getLT()) goto loc_8215EA7C;
	// li r11,0
	r11.s64 = 0;
loc_8215EA7C:
	// li r4,64
	ctx.r4.s64 = 64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r31,r11,24
	r31.u64 = r11.u32 & 0xFF;
	// bl 0x823b2df8
	sub_823B2DF8(ctx, base);
	// std r3,48(r28)
	PPC_STORE_U64(r28.u32 + 48, ctx.r3.u64);
loc_8215EA90:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215ead8
	if (cr6.getEQ()) goto loc_8215EAD8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r31
	r11.s64 = r31.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,32
	cr6.compare<int32_t>(r11.s32, 32, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215eac4
	if (!cr6.getLT()) goto loc_8215EAC4;
	// li r11,0
	r11.s64 = 0;
loc_8215EAC4:
	// li r4,32
	ctx.r4.s64 = 32;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r31,r11,24
	r31.u64 = r11.u32 & 0xFF;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// stw r3,56(r28)
	PPC_STORE_U32(r28.u32 + 56, ctx.r3.u32);
loc_8215EAD8:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215eb20
	if (cr6.getEQ()) goto loc_8215EB20;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r31
	r11.s64 = r31.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,64
	cr6.compare<int32_t>(r11.s32, 64, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215eb0c
	if (!cr6.getLT()) goto loc_8215EB0C;
	// li r11,0
	r11.s64 = 0;
loc_8215EB0C:
	// li r5,8
	ctx.r5.s64 = 8;
	// addi r4,r28,64
	ctx.r4.s64 = r28.s64 + 64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r31,r11,24
	r31.u64 = r11.u32 & 0xFF;
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
loc_8215EB20:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215eb68
	if (cr6.getEQ()) goto loc_8215EB68;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r31
	r11.s64 = r31.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,128
	cr6.compare<int32_t>(r11.s32, 128, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215eb54
	if (!cr6.getLT()) goto loc_8215EB54;
	// li r11,0
	r11.s64 = 0;
loc_8215EB54:
	// li r5,16
	ctx.r5.s64 = 16;
	// addi r4,r28,72
	ctx.r4.s64 = r28.s64 + 72;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r31,r11,24
	r31.u64 = r11.u32 & 0xFF;
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
loc_8215EB68:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215ebb0
	if (cr6.getEQ()) goto loc_8215EBB0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r31
	r11.s64 = r31.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,288
	cr6.compare<int32_t>(r11.s32, 288, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215eb9c
	if (!cr6.getLT()) goto loc_8215EB9C;
	// li r11,0
	r11.s64 = 0;
loc_8215EB9C:
	// li r5,36
	ctx.r5.s64 = 36;
	// addi r4,r28,88
	ctx.r4.s64 = r28.s64 + 88;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r31,r11,24
	r31.u64 = r11.u32 & 0xFF;
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
loc_8215EBB0:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215ec08
	if (cr6.getEQ()) goto loc_8215EC08;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r31
	r11.s64 = r31.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215ebe4
	if (!cr6.getLT()) goto loc_8215EBE4;
	// li r11,0
	r11.s64 = 0;
loc_8215EBE4:
	// li r4,6
	ctx.r4.s64 = 6;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r31,r11,24
	r31.u64 = r11.u32 & 0xFF;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cmplwi cr6,r3,64
	cr6.compare<uint32_t>(ctx.r3.u32, 64, xer);
	// bge cr6,0x8215ec04
	if (!cr6.getLT()) goto loc_8215EC04;
	// stw r3,124(r28)
	PPC_STORE_U32(r28.u32 + 124, ctx.r3.u32);
	// b 0x8215ec08
	goto loc_8215EC08;
loc_8215EC04:
	// li r31,0
	r31.s64 = 0;
loc_8215EC08:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215ec5c
	if (cr6.getEQ()) goto loc_8215EC5C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r31
	r11.s64 = r31.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215ec3c
	if (!cr6.getLT()) goto loc_8215EC3C;
	// li r11,0
	r11.s64 = 0;
loc_8215EC3C:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r31,r11,24
	r31.u64 = r11.u32 & 0xFF;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,128(r28)
	PPC_STORE_U8(r28.u32 + 128, r11.u8);
loc_8215EC5C:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215ecb4
	if (cr6.getEQ()) goto loc_8215ECB4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r31
	r11.s64 = r31.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215ec90
	if (!cr6.getLT()) goto loc_8215EC90;
	// li r11,0
	r11.s64 = 0;
loc_8215EC90:
	// li r4,7
	ctx.r4.s64 = 7;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r31,r11,24
	r31.u64 = r11.u32 & 0xFF;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cmplwi cr6,r3,128
	cr6.compare<uint32_t>(ctx.r3.u32, 128, xer);
	// bge cr6,0x8215ecb0
	if (!cr6.getLT()) goto loc_8215ECB0;
	// stw r3,132(r28)
	PPC_STORE_U32(r28.u32 + 132, ctx.r3.u32);
	// b 0x8215ecb4
	goto loc_8215ECB4;
loc_8215ECB0:
	// li r31,0
	r31.s64 = 0;
loc_8215ECB4:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215ed30
	if (cr6.getEQ()) goto loc_8215ED30;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r31
	r11.s64 = r31.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215ece8
	if (!cr6.getLT()) goto loc_8215ECE8;
	// li r11,0
	r11.s64 = 0;
loc_8215ECE8:
	// li r4,8
	ctx.r4.s64 = 8;
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,20
	cr6.compare<uint32_t>(r31.u32, 20, xer);
	// bgt cr6,0x8215ed2c
	if (cr6.getGT()) goto loc_8215ED2C;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r28,136
	ctx.r4.s64 = r28.s64 + 136;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8214cbc8
	sub_8214CBC8(ctx, base);
	// add r11,r31,r28
	r11.u64 = r31.u64 + r28.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// lbz r31,80(r1)
	r31.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// stb r10,136(r11)
	PPC_STORE_U8(r11.u32 + 136, ctx.r10.u8);
	// b 0x8215ed30
	goto loc_8215ED30;
loc_8215ED2C:
	// li r31,0
	r31.s64 = 0;
loc_8215ED30:
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215ed78
	if (cr6.getEQ()) goto loc_8215ED78;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r31
	r11.s64 = r31.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,64
	cr6.compare<int32_t>(r11.s32, 64, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215ed64
	if (!cr6.getLT()) goto loc_8215ED64;
	// li r11,0
	r11.s64 = 0;
loc_8215ED64:
	// li r5,8
	ctx.r5.s64 = 8;
	// addi r4,r28,160
	ctx.r4.s64 = r28.s64 + 160;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r31,r11,24
	r31.u64 = r11.u32 & 0xFF;
	// bl 0x823b2e98
	sub_823B2E98(ctx, base);
loc_8215ED78:
	// clrlwi r29,r31,24
	r29.u64 = r31.u32 & 0xFF;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8215ede4
	if (cr6.getEQ()) goto loc_8215EDE4;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stb r11,168(r28)
	PPC_STORE_U8(r28.u32 + 168, r11.u8);
	// beq cr6,0x8215ede4
	if (cr6.getEQ()) goto loc_8215EDE4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ae8
	sub_823B2AE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x823b2ad0
	sub_823B2AD0(ctx, base);
	// subf r11,r3,r31
	r11.s64 = r31.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,32
	cr6.compare<int32_t>(r11.s32, 32, xer);
	// li r11,1
	r11.s64 = 1;
	// bge cr6,0x8215edd0
	if (!cr6.getLT()) goto loc_8215EDD0;
	// li r11,0
	r11.s64 = 0;
loc_8215EDD0:
	// li r4,32
	ctx.r4.s64 = 32;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mr r31,r11
	r31.u64 = r11.u64;
	// bl 0x823b2d28
	sub_823B2D28(ctx, base);
	// stw r3,60(r28)
	PPC_STORE_U32(r28.u32 + 60, ctx.r3.u32);
loc_8215EDE4:
	// stb r31,40(r28)
	PPC_STORE_U8(r28.u32 + 40, r31.u8);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed188
	return;
}

__attribute__((alias("__imp__sub_8215EDF0"))) PPC_WEAK_FUNC(sub_8215EDF0);
PPC_FUNC_IMPL(__imp__sub_8215EDF0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r11,r11,-14464
	r11.s64 = r11.s64 + -14464;
	// lbz r10,-8(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + -8);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8215ef90
	if (cr6.getEQ()) goto loc_8215EF90;
	// lbz r10,40(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 40);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8215ef90
	if (cr6.getEQ()) goto loc_8215EF90;
	// ld r10,48(r29)
	ctx.r10.u64 = PPC_LOAD_U64(r29.u32 + 48);
	// ld r11,0(r11)
	r11.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// cmpld cr6,r10,r11
	cr6.compare<uint64_t>(ctx.r10.u64, r11.u64, xer);
	// bne cr6,0x8215ef90
	if (!cr6.getEQ()) goto loc_8215EF90;
	// lis r27,-31992
	r27.s64 = -2096627712;
	// lis r11,-31992
	r11.s64 = -2096627712;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r30,r11,-26472
	r30.s64 = r11.s64 + -26472;
	// lwz r28,-14452(r27)
	r28.u64 = PPC_LOAD_U32(r27.u32 + -14452);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x8215eea0
	if (!cr6.getGT()) goto loc_8215EEA0;
	// addi r5,r29,88
	ctx.r5.s64 = r29.s64 + 88;
	// addi r7,r30,32
	ctx.r7.s64 = r30.s64 + 32;
loc_8215EE54:
	// mr r11,r7
	r11.u64 = ctx.r7.u64;
	// mr r10,r5
	ctx.r10.u64 = ctx.r5.u64;
	// addi r8,r11,36
	ctx.r8.s64 = r11.s64 + 36;
loc_8215EE60:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r4,0(r10)
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// subf. r9,r4,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r4.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x8215ee80
	if (!cr0.getEQ()) goto loc_8215EE80;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// bne cr6,0x8215ee60
	if (!cr6.getEQ()) goto loc_8215EE60;
loc_8215EE80:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x8215ee9c
	if (cr6.getEQ()) goto loc_8215EE9C;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r7,r7,120
	ctx.r7.s64 = ctx.r7.s64 + 120;
	// cmpw cr6,r6,r28
	cr6.compare<int32_t>(ctx.r6.s32, r28.s32, xer);
	// blt cr6,0x8215ee54
	if (cr6.getLT()) goto loc_8215EE54;
	// b 0x8215eea0
	goto loc_8215EEA0;
loc_8215EE9C:
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
loc_8215EEA0:
	// cmplwi cr6,r28,99
	cr6.compare<uint32_t>(r28.u32, 99, xer);
	// bgt cr6,0x8215ef90
	if (cr6.getGT()) goto loc_8215EF90;
	// lwz r8,56(r29)
	ctx.r8.u64 = PPC_LOAD_U32(r29.u32 + 56);
	// mulli r31,r28,120
	r31.s64 = r28.s64 * 120;
	// addi r7,r30,4
	ctx.r7.s64 = r30.s64 + 4;
	// stwx r8,r31,r30
	PPC_STORE_U32(r31.u32 + r30.u32, ctx.r8.u32);
	// lwz r8,60(r29)
	ctx.r8.u64 = PPC_LOAD_U32(r29.u32 + 60);
	// addi r10,r30,8
	ctx.r10.s64 = r30.s64 + 8;
	// addi r11,r29,64
	r11.s64 = r29.s64 + 64;
	// li r9,8
	ctx.r9.s64 = 8;
	// add r10,r31,r10
	ctx.r10.u64 = r31.u64 + ctx.r10.u64;
	// stwx r8,r31,r7
	PPC_STORE_U32(r31.u32 + ctx.r7.u32, ctx.r8.u32);
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8215EED4:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stb r9,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r9.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// bdnz 0x8215eed4
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8215EED4;
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// addi r4,r29,72
	ctx.r4.s64 = r29.s64 + 72;
	// li r5,16
	ctx.r5.s64 = 16;
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// addi r4,r29,88
	ctx.r4.s64 = r29.s64 + 88;
	// li r5,36
	ctx.r5.s64 = 36;
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lwz r11,124(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 124);
	// addi r10,r30,68
	ctx.r10.s64 = r30.s64 + 68;
	// addi r9,r30,72
	ctx.r9.s64 = r30.s64 + 72;
	// addi r8,r30,76
	ctx.r8.s64 = r30.s64 + 76;
	// li r6,20
	ctx.r6.s64 = 20;
	// addi r5,r29,136
	ctx.r5.s64 = r29.s64 + 136;
	// stwx r11,r31,r10
	PPC_STORE_U32(r31.u32 + ctx.r10.u32, r11.u32);
	// addi r11,r30,80
	r11.s64 = r30.s64 + 80;
	// lbz r10,128(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 128);
	// li r4,21
	ctx.r4.s64 = 21;
	// add r3,r31,r11
	ctx.r3.u64 = r31.u64 + r11.u64;
	// stbx r10,r31,r9
	PPC_STORE_U8(r31.u32 + ctx.r9.u32, ctx.r10.u8);
	// lwz r11,132(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 132);
	// stwx r11,r31,r8
	PPC_STORE_U32(r31.u32 + ctx.r8.u32, r11.u32);
	// bl 0x823ecf88
	sub_823ECF88(ctx, base);
	// addi r11,r30,100
	r11.s64 = r30.s64 + 100;
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r10,r30,104
	ctx.r10.s64 = r30.s64 + 104;
	// addi r8,r30,112
	ctx.r8.s64 = r30.s64 + 112;
	// li r3,1
	ctx.r3.s64 = 1;
	// stbx r9,r31,r11
	PPC_STORE_U8(r31.u32 + r11.u32, ctx.r9.u8);
	// ld r9,160(r29)
	ctx.r9.u64 = PPC_LOAD_U64(r29.u32 + 160);
	// lwz r11,-14452(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -14452);
	// cmpw cr6,r28,r11
	cr6.compare<int32_t>(r28.s32, r11.s32, xer);
	// stdx r9,r31,r10
	PPC_STORE_U64(r31.u32 + ctx.r10.u32, ctx.r9.u64);
	// lbz r10,168(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 168);
	// stbx r10,r31,r8
	PPC_STORE_U8(r31.u32 + ctx.r8.u32, ctx.r10.u8);
	// bne cr6,0x8215ef94
	if (!cr6.getEQ()) goto loc_8215EF94;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,-14452(r27)
	PPC_STORE_U32(r27.u32 + -14452, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_8215EF90:
	// li r3,1
	ctx.r3.s64 = 1;
loc_8215EF94:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8215EFA0"))) PPC_WEAK_FUNC(sub_8215EFA0);
PPC_FUNC_IMPL(__imp__sub_8215EFA0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	r11.s64 = -2113798144;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r11,-28216
	r11.s64 = r11.s64 + -28216;
	// li r30,0
	r30.s64 = 0;
	// li r10,-1
	ctx.r10.s64 = -1;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// std r4,48(r31)
	PPC_STORE_U64(r31.u32 + 48, ctx.r4.u64);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// stw r30,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r30.u32);
	// stb r30,16(r31)
	PPC_STORE_U8(r31.u32 + 16, r30.u8);
	// sth r30,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r30.u16);
	// stw r30,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r30.u32);
	// stw r30,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r30.u32);
	// stw r30,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r30.u32);
	// stw r30,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r30.u32);
	// stw r30,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r30.u32);
	// stb r11,40(r31)
	PPC_STORE_U8(r31.u32 + 40, r11.u8);
	// bl 0x8215f9d0
	sub_8215F9D0(ctx, base);
	// addi r10,r31,64
	ctx.r10.s64 = r31.s64 + 64;
	// stw r3,56(r31)
	PPC_STORE_U32(r31.u32 + 56, ctx.r3.u32);
	// mr r11,r29
	r11.u64 = r29.u64;
	// li r9,8
	ctx.r9.s64 = 8;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8215F01C:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stb r9,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r9.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// bdnz 0x8215f01c
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8215F01C;
	// addi r3,r31,72
	ctx.r3.s64 = r31.s64 + 72;
	// li r5,16
	ctx.r5.s64 = 16;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// addi r3,r31,88
	ctx.r3.s64 = r31.s64 + 88;
	// li r5,36
	ctx.r5.s64 = 36;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x823ee010
	sub_823EE010(ctx, base);
	// lis r29,-31993
	r29.s64 = -2096693248;
	// lwz r11,29100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 29100);
	// addi r3,r11,596
	ctx.r3.s64 = r11.s64 + 596;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// stw r11,124(r31)
	PPC_STORE_U32(r31.u32 + 124, r11.u32);
	// lwz r11,29100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 29100);
	// addi r3,r11,1044
	ctx.r3.s64 = r11.s64 + 1044;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stb r3,128(r31)
	PPC_STORE_U8(r31.u32 + 128, ctx.r3.u8);
	// lwz r11,29100(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 29100);
	// addi r3,r11,1100
	ctx.r3.s64 = r11.s64 + 1100;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// stw r11,132(r31)
	PPC_STORE_U32(r31.u32 + 132, r11.u32);
	// bl 0x82151c68
	sub_82151C68(ctx, base);
	// lwz r29,20(r3)
	r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8215f114
	if (cr6.getEQ()) goto loc_8215F114;
	// li r6,20
	ctx.r6.s64 = 20;
	// addi r5,r29,768
	ctx.r5.s64 = r29.s64 + 768;
	// li r4,21
	ctx.r4.s64 = 21;
	// addi r3,r31,136
	ctx.r3.s64 = r31.s64 + 136;
	// bl 0x823ecf88
	sub_823ECF88(ctx, base);
	// stb r30,156(r31)
	PPC_STORE_U8(r31.u32 + 156, r30.u8);
	// ld r11,784(r29)
	r11.u64 = PPC_LOAD_U64(r29.u32 + 784);
	// std r11,160(r31)
	PPC_STORE_U64(r31.u32 + 160, r11.u64);
	// lwz r3,820(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 820);
	// bl 0x821838b0
	sub_821838B0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8215f104
	if (cr6.getEQ()) goto loc_8215F104;
	// bl 0x82183990
	sub_82183990(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215f104
	if (cr6.getEQ()) goto loc_8215F104;
	// li r30,1
	r30.s64 = 1;
loc_8215F104:
	// stb r30,168(r31)
	PPC_STORE_U8(r31.u32 + 168, r30.u8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_8215F114:
	// bl 0x82184a38
	sub_82184A38(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8215f164
	if (cr6.getEQ()) goto loc_8215F164;
	// addi r30,r31,136
	r30.s64 = r31.s64 + 136;
	// bl 0x82183850
	sub_82183850(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r5,21
	ctx.r5.s64 = 21;
	// bl 0x82182938
	sub_82182938(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82183858
	sub_82183858(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// std r11,160(r31)
	PPC_STORE_U64(r31.u32 + 160, r11.u64);
	// bl 0x82183990
	sub_82183990(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r11,168(r31)
	PPC_STORE_U8(r31.u32 + 168, r11.u8);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_8215F164:
	// lis r11,-32254
	r11.s64 = -2113798144;
	// li r4,21
	ctx.r4.s64 = 21;
	// addi r5,r11,-28136
	ctx.r5.s64 = r11.s64 + -28136;
	// addi r3,r31,136
	ctx.r3.s64 = r31.s64 + 136;
	// bl 0x823ee540
	sub_823EE540(ctx, base);
	// std r30,160(r31)
	PPC_STORE_U64(r31.u32 + 160, r30.u64);
	// stb r30,168(r31)
	PPC_STORE_U8(r31.u32 + 168, r30.u8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

__attribute__((alias("__imp__sub_8215F190"))) PPC_WEAK_FUNC(sub_8215F190);
PPC_FUNC_IMPL(__imp__sub_8215F190) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x823ed134
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// bl 0x8215fc88
	sub_8215FC88(ctx, base);
	// cmpwi cr6,r3,4
	cr6.compare<int32_t>(ctx.r3.s32, 4, xer);
	// bne cr6,0x8215f298
	if (!cr6.getEQ()) goto loc_8215F298;
	// bl 0x8215fca8
	sub_8215FCA8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8215f298
	if (cr6.getEQ()) goto loc_8215F298;
	// bl 0x8215fd20
	sub_8215FD20(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8215f298
	if (cr6.getEQ()) goto loc_8215F298;
	// bl 0x82160588
	sub_82160588(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8215f298
	if (cr6.getEQ()) goto loc_8215F298;
	// lis r11,-31993
	r11.s64 = -2096693248;
	// lwz r11,29100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 29100);
	// addi r3,r11,1100
	ctx.r3.s64 = r11.s64 + 1100;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x8215fde8
	sub_8215FDE8(ctx, base);
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// bge cr6,0x8215f298
	if (!cr6.getLT()) goto loc_8215F298;
	// bl 0x8215fd30
	sub_8215FD30(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215f298
	if (cr6.getEQ()) goto loc_8215F298;
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8215f298
	if (cr6.getEQ()) goto loc_8215F298;
	// bl 0x820ae370
	sub_820AE370(ctx, base);
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8215f298
	if (cr6.getEQ()) goto loc_8215F298;
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x8215f9e0
	sub_8215F9E0(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r3,176
	ctx.r3.s64 = 176;
	// bl 0x8215c528
	sub_8215C528(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8215f28c
	if (cr6.getEQ()) goto loc_8215F28C;
	// lwz r27,48(r28)
	r27.u64 = PPC_LOAD_U32(r28.u32 + 48);
	// bl 0x8215fd40
	sub_8215FD40(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// ld r4,40(r28)
	ctx.r4.u64 = PPC_LOAD_U64(r28.u32 + 40);
	// addi r6,r29,61
	ctx.r6.s64 = r29.s64 + 61;
	// addi r5,r30,17
	ctx.r5.s64 = r30.s64 + 17;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// bl 0x8215efa0
	sub_8215EFA0(ctx, base);
	// lwz r4,8(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
loc_8215F28C:
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r4,8(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// bl 0x823b7430
	sub_823B7430(ctx, base);
loc_8215F298:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823ed184
	return;
}

