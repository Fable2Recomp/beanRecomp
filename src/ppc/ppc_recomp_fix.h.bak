#pragma once

#include "../include/ppc/ppc_types.h"
#include "../include/ppc/ppc_memory.h"

// Fix for the alias macro for MSVC
#ifdef _MSC_VER
#define alias(name) __declspec(selectany)
#define __attribute__(x)
#else
#define alias(name) __attribute__((alias(#name)))
#endif

// Add missing members to PPCRegister
#define PPCRegister_u8(reg) static_cast<uint8_t>((reg).u32)
#define PPCRegister_s8(reg) static_cast<int8_t>((reg).s32)
#define PPCRegister_u16(reg) static_cast<uint16_t>((reg).u32)
#define PPCRegister_s16(reg) static_cast<int16_t>((reg).s32)

// Memory access functions that use the context pointer
#define PPC_LOAD_U8(addr) g_Memory.ReadMemory8(&ctx, addr)
#define PPC_LOAD_U16(addr) ((uint16_t)(g_Memory.ReadMemory32(&ctx, addr) >> 16))
#define PPC_LOAD_U32(addr) g_Memory.ReadMemory32(&ctx, addr)
#define PPC_LOAD_U64(addr) g_Memory.ReadMemory64(&ctx, addr)
#define PPC_STORE_U8(addr, val) g_Memory.WriteMemory8(&ctx, addr, val)
#define PPC_STORE_U16(addr, val) g_Memory.WriteMemory32(&ctx, addr, ((val) & 0xFFFF) << 16)
#define PPC_STORE_U32(addr, val) g_Memory.WriteMemory32(&ctx, addr, val)
#define PPC_STORE_U64(addr, val) g_Memory.WriteMemory64(&ctx, addr, val)

// Signed memory access macros
#define PPC_LOAD_S8(addr) static_cast<int8_t>(g_Memory.ReadMemory8(&ctx, addr))
#define PPC_LOAD_S16(addr) static_cast<int16_t>(g_Memory.ReadMemory32(&ctx, addr) >> 16)
#define PPC_LOAD_S32(addr) static_cast<int32_t>(g_Memory.ReadMemory32(&ctx, addr))
#define PPC_LOAD_S64(addr) static_cast<int64_t>(g_Memory.ReadMemory64(&ctx, addr))
#define PPC_STORE_S8(addr, val) g_Memory.WriteMemory8(&ctx, addr, static_cast<uint8_t>(val))
#define PPC_STORE_S16(addr, val) g_Memory.WriteMemory32(&ctx, addr, static_cast<uint16_t>(val) << 16)
#define PPC_STORE_S32(addr, val) g_Memory.WriteMemory32(&ctx, addr, static_cast<uint32_t>(val))
#define PPC_STORE_S64(addr, val) g_Memory.WriteMemory64(&ctx, addr, static_cast<uint64_t>(val))

// Array access macros - fixed to avoid uintptr_t conversion issues
#define PPC_LOAD_ARRAY_U8(arr, idx) PPC_LOAD_U8((uint32_t)(arr) + (idx))
#define PPC_LOAD_ARRAY_S8(arr, idx) static_cast<int8_t>(PPC_LOAD_U8((uint32_t)(arr) + (idx)))
#define PPC_LOAD_ARRAY_U16(arr, idx) static_cast<uint16_t>(PPC_LOAD_U32((uint32_t)(arr) + ((idx) * 2)) >> 16)
#define PPC_LOAD_ARRAY_S16(arr, idx) static_cast<int16_t>(PPC_LOAD_U32((uint32_t)(arr) + ((idx) * 2)) >> 16)
#define PPC_LOAD_ARRAY_U32(arr, idx) PPC_LOAD_U32((uint32_t)(arr) + ((idx) * 4))
#define PPC_LOAD_ARRAY_S32(arr, idx) static_cast<int32_t>(PPC_LOAD_U32((uint32_t)(arr) + ((idx) * 4)))
#define PPC_LOAD_ARRAY_U64(arr, idx) PPC_LOAD_U64((uint32_t)(arr) + ((idx) * 8))
#define PPC_LOAD_ARRAY_S64(arr, idx) static_cast<int64_t>(PPC_LOAD_U64((uint32_t)(arr) + ((idx) * 8)))

#define PPC_STORE_ARRAY_U8(arr, idx, val) PPC_STORE_U8((uint32_t)(arr) + (idx), val)
#define PPC_STORE_ARRAY_S8(arr, idx, val) PPC_STORE_U8((uint32_t)(arr) + (idx), static_cast<uint8_t>(val))
#define PPC_STORE_ARRAY_U16(arr, idx, val) PPC_STORE_U16((uint32_t)(arr) + ((idx) * 2), val)
#define PPC_STORE_ARRAY_S16(arr, idx, val) PPC_STORE_S16((uint32_t)(arr) + ((idx) * 2), val)
#define PPC_STORE_ARRAY_U32(arr, idx, val) PPC_STORE_U32((uint32_t)(arr) + ((idx) * 4), val)
#define PPC_STORE_ARRAY_S32(arr, idx, val) PPC_STORE_S32((uint32_t)(arr) + ((idx) * 4), val)
#define PPC_STORE_ARRAY_U64(arr, idx, val) PPC_STORE_U64((uint32_t)(arr) + ((idx) * 8), val)
#define PPC_STORE_ARRAY_S64(arr, idx, val) PPC_STORE_S64((uint32_t)(arr) + ((idx) * 8), val)

// Function-style macros for memory access
#define PPC_LOAD_U8_FUNC(ctx_ptr, addr) g_Memory.ReadMemory8(ctx_ptr, addr)
#define PPC_LOAD_U16_FUNC(ctx_ptr, addr) ((uint16_t)(g_Memory.ReadMemory32(ctx_ptr, addr) >> 16))
#define PPC_LOAD_U32_FUNC(ctx_ptr, addr) g_Memory.ReadMemory32(ctx_ptr, addr)
#define PPC_LOAD_U64_FUNC(ctx_ptr, addr) g_Memory.ReadMemory64(ctx_ptr, addr)
#define PPC_STORE_U8_FUNC(ctx_ptr, addr, val) g_Memory.WriteMemory8(ctx_ptr, addr, val)
#define PPC_STORE_U16_FUNC(ctx_ptr, addr, val) g_Memory.WriteMemory32(ctx_ptr, addr, ((val) & 0xFFFF) << 16)
#define PPC_STORE_U32_FUNC(ctx_ptr, addr, val) g_Memory.WriteMemory32(ctx_ptr, addr, val)
#define PPC_STORE_U64_FUNC(ctx_ptr, addr, val) g_Memory.WriteMemory64(ctx_ptr, addr, val)

// Define missing built-in functions
inline uint32_t __builtin_rotateleft32(uint32_t value, uint32_t shift) {
    return (value << shift) | (value >> (32 - shift));
}

inline uint64_t __builtin_rotateleft64(uint64_t value, uint32_t shift) {
    return (value << shift) | (value >> (64 - shift));
}

inline int __builtin_clz(uint32_t value) {
    // Count leading zeros
    if (value == 0) return 32;
    
    int count = 0;
    for (int i = 31; i >= 0; i--) {
        if ((value & (1 << i)) == 0)
            count++;
        else
            break;
    }
    return count;
} 